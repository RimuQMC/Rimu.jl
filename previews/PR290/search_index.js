var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 12)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nboost = 1.0: Boost factor for the spawning process.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2132390517886828 ± 0.0018470539394100035\n   G2(1) = 0.9161643735600646 ± 0.0008361894719084187\n   G2(2) = 0.9809554963605842 ± 0.0004971091326554145\n   G2(3) = 0.99252120837002 ± 0.000794639489745909\n   G2(4) = 0.9809554963605842 ± 0.0004971091326554145\n   G2(5) = 0.9161643735600646 ± 0.0008361894719084187\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.042303441695271 ± 0.1431056869940202\n   Replica 2: -4.022652262012435 ± 0.13973833356512266\n   Replica 3: -3.9843183595928813 ± 0.13002873412923885\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip310\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip310)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip311\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip310)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip312\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.24 2211.02,1003.24 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.656 2211.02,745.656 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.068 2211.02,488.068 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.48 2211.02,230.48 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.24 423.181,1003.24 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.656 423.181,745.656 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.068 423.181,488.068 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.48 423.181,230.48 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.53 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.87 Q344.395 1252.12 347.45 1247.53 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M290.043 1016.59 L306.363 1016.59 L306.363 1020.52 L284.418 1020.52 L284.418 1016.59 Q287.08 1013.83 291.664 1009.2 Q296.27 1004.55 297.451 1003.21 Q299.696 1000.69 300.576 998.95 Q301.478 997.191 301.478 995.501 Q301.478 992.747 299.534 991.01 Q297.613 989.274 294.511 989.274 Q292.312 989.274 289.858 990.038 Q287.427 990.802 284.65 992.353 L284.65 987.631 Q287.474 986.497 289.927 985.918 Q292.381 985.339 294.418 985.339 Q299.789 985.339 302.983 988.024 Q306.177 990.71 306.177 995.2 Q306.177 997.33 305.367 999.251 Q304.58 1001.15 302.474 1003.74 Q301.895 1004.41 298.793 1007.63 Q295.691 1010.83 290.043 1016.59 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M316.224 985.964 L334.58 985.964 L334.58 989.899 L320.506 989.899 L320.506 998.372 Q321.524 998.024 322.543 997.862 Q323.562 997.677 324.58 997.677 Q330.367 997.677 333.747 1000.85 Q337.126 1004.02 337.126 1009.44 Q337.126 1015.01 333.654 1018.12 Q330.182 1021.2 323.862 1021.2 Q321.687 1021.2 319.418 1020.83 Q317.173 1020.45 314.765 1019.71 L314.765 1015.01 Q316.849 1016.15 319.071 1016.7 Q321.293 1017.26 323.77 1017.26 Q327.774 1017.26 330.112 1015.15 Q332.45 1013.05 332.45 1009.44 Q332.45 1005.83 330.112 1003.72 Q327.774 1001.61 323.77 1001.61 Q321.895 1001.61 320.02 1002.03 Q318.168 1002.45 316.224 1003.33 L316.224 985.964 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M356.339 989.043 Q352.728 989.043 350.899 992.608 Q349.094 996.149 349.094 1003.28 Q349.094 1010.39 350.899 1013.95 Q352.728 1017.49 356.339 1017.49 Q359.973 1017.49 361.779 1013.95 Q363.608 1010.39 363.608 1003.28 Q363.608 996.149 361.779 992.608 Q359.973 989.043 356.339 989.043 M356.339 985.339 Q362.149 985.339 365.205 989.946 Q368.284 994.529 368.284 1003.28 Q368.284 1012.01 365.205 1016.61 Q362.149 1021.2 356.339 1021.2 Q350.529 1021.2 347.45 1016.61 Q344.395 1012.01 344.395 1003.28 Q344.395 994.529 347.45 989.946 Q350.529 985.339 356.339 985.339 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M286.062 728.376 L304.418 728.376 L304.418 732.311 L290.344 732.311 L290.344 740.784 Q291.363 740.436 292.381 740.274 Q293.4 740.089 294.418 740.089 Q300.205 740.089 303.585 743.26 Q306.964 746.432 306.964 751.848 Q306.964 757.427 303.492 760.529 Q300.02 763.608 293.701 763.608 Q291.525 763.608 289.256 763.237 Q287.011 762.867 284.603 762.126 L284.603 757.427 Q286.687 758.561 288.909 759.117 Q291.131 759.672 293.608 759.672 Q297.613 759.672 299.951 757.566 Q302.288 755.459 302.288 751.848 Q302.288 748.237 299.951 746.131 Q297.613 744.024 293.608 744.024 Q291.733 744.024 289.858 744.441 Q288.006 744.858 286.062 745.737 L286.062 728.376 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M326.177 731.455 Q322.566 731.455 320.737 735.02 Q318.932 738.561 318.932 745.691 Q318.932 752.797 320.737 756.362 Q322.566 759.904 326.177 759.904 Q329.811 759.904 331.617 756.362 Q333.446 752.797 333.446 745.691 Q333.446 738.561 331.617 735.02 Q329.811 731.455 326.177 731.455 M326.177 727.751 Q331.987 727.751 335.043 732.358 Q338.122 736.941 338.122 745.691 Q338.122 754.418 335.043 759.024 Q331.987 763.608 326.177 763.608 Q320.367 763.608 317.288 759.024 Q314.233 754.418 314.233 745.691 Q314.233 736.941 317.288 732.358 Q320.367 727.751 326.177 727.751 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M356.339 731.455 Q352.728 731.455 350.899 735.02 Q349.094 738.561 349.094 745.691 Q349.094 752.797 350.899 756.362 Q352.728 759.904 356.339 759.904 Q359.973 759.904 361.779 756.362 Q363.608 752.797 363.608 745.691 Q363.608 738.561 361.779 735.02 Q359.973 731.455 356.339 731.455 M356.339 727.751 Q362.149 727.751 365.205 732.358 Q368.284 736.941 368.284 745.691 Q368.284 754.418 365.205 759.024 Q362.149 763.608 356.339 763.608 Q350.529 763.608 347.45 759.024 Q344.395 754.418 344.395 745.691 Q344.395 736.941 347.45 732.358 Q350.529 727.751 356.339 727.751 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M284.835 470.788 L307.057 470.788 L307.057 472.779 L294.511 505.348 L289.627 505.348 L301.432 474.724 L284.835 474.724 L284.835 470.788 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M316.224 470.788 L334.58 470.788 L334.58 474.724 L320.506 474.724 L320.506 483.196 Q321.524 482.848 322.543 482.686 Q323.562 482.501 324.58 482.501 Q330.367 482.501 333.747 485.673 Q337.126 488.844 337.126 494.26 Q337.126 499.839 333.654 502.941 Q330.182 506.02 323.862 506.02 Q321.687 506.02 319.418 505.649 Q317.173 505.279 314.765 504.538 L314.765 499.839 Q316.849 500.973 319.071 501.529 Q321.293 502.084 323.77 502.084 Q327.774 502.084 330.112 499.978 Q332.45 497.872 332.45 494.26 Q332.45 490.649 330.112 488.543 Q327.774 486.436 323.77 486.436 Q321.895 486.436 320.02 486.853 Q318.168 487.27 316.224 488.149 L316.224 470.788 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M356.339 473.867 Q352.728 473.867 350.899 477.432 Q349.094 480.973 349.094 488.103 Q349.094 495.21 350.899 498.774 Q352.728 502.316 356.339 502.316 Q359.973 502.316 361.779 498.774 Q363.608 495.21 363.608 488.103 Q363.608 480.973 361.779 477.432 Q359.973 473.867 356.339 473.867 M356.339 470.163 Q362.149 470.163 365.205 474.77 Q368.284 479.353 368.284 488.103 Q368.284 496.83 365.205 501.436 Q362.149 506.02 356.339 506.02 Q350.529 506.02 347.45 501.436 Q344.395 496.83 344.395 488.103 Q344.395 479.353 347.45 474.77 Q350.529 470.163 356.339 470.163 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M256.664 243.825 L264.303 243.825 L264.303 217.46 L255.992 219.126 L255.992 214.867 L264.256 213.2 L268.932 213.2 L268.932 243.825 L276.571 243.825 L276.571 247.76 L256.664 247.76 L256.664 243.825 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M296.015 216.279 Q292.404 216.279 290.576 219.844 Q288.77 223.386 288.77 230.515 Q288.77 237.622 290.576 241.186 Q292.404 244.728 296.015 244.728 Q299.65 244.728 301.455 241.186 Q303.284 237.622 303.284 230.515 Q303.284 223.386 301.455 219.844 Q299.65 216.279 296.015 216.279 M296.015 212.575 Q301.826 212.575 304.881 217.182 Q307.96 221.765 307.96 230.515 Q307.96 239.242 304.881 243.848 Q301.826 248.432 296.015 248.432 Q290.205 248.432 287.127 243.848 Q284.071 239.242 284.071 230.515 Q284.071 221.765 287.127 217.182 Q290.205 212.575 296.015 212.575 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M326.177 216.279 Q322.566 216.279 320.737 219.844 Q318.932 223.386 318.932 230.515 Q318.932 237.622 320.737 241.186 Q322.566 244.728 326.177 244.728 Q329.811 244.728 331.617 241.186 Q333.446 237.622 333.446 230.515 Q333.446 223.386 331.617 219.844 Q329.811 216.279 326.177 216.279 M326.177 212.575 Q331.987 212.575 335.043 217.182 Q338.122 221.765 338.122 230.515 Q338.122 239.242 335.043 243.848 Q331.987 248.432 326.177 248.432 Q320.367 248.432 317.288 243.848 Q314.233 239.242 314.233 230.515 Q314.233 221.765 317.288 217.182 Q320.367 212.575 326.177 212.575 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M356.339 216.279 Q352.728 216.279 350.899 219.844 Q349.094 223.386 349.094 230.515 Q349.094 237.622 350.899 241.186 Q352.728 244.728 356.339 244.728 Q359.973 244.728 361.779 241.186 Q363.608 237.622 363.608 230.515 Q363.608 223.386 361.779 219.844 Q359.973 216.279 356.339 216.279 M356.339 212.575 Q362.149 212.575 365.205 217.182 Q368.284 221.765 368.284 230.515 Q368.284 239.242 365.205 243.848 Q362.149 248.432 356.339 248.432 Q350.529 248.432 347.45 243.848 Q344.395 239.242 344.395 230.515 Q344.395 221.765 347.45 217.182 Q350.529 212.575 356.339 212.575 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip312)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.48 4017.76,230.48 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.43 461.101,1246.75 461.669,1245.99 462.238,1243.09 462.806,1242.19 463.375,1241.2 463.943,1240.12 464.511,1236.88 465.08,1235.61 465.648,1234.22 466.216,1232.72 466.785,1231.1 467.353,1228.32 467.921,1226.41 468.49,1222.29 469.058,1220.16 469.626,1216.79 470.195,1214.34 470.763,1210.7 471.331,1207.96 471.9,1204 472.468,1200.88 473.036,1197.57 473.605,1193.01 474.173,1189.29 474.741,1183.31 475.31,1179.23 475.878,1174.87 476.446,1170.34 477.015,1163.53 477.583,1158.53 478.152,1153.35 478.72,1146.92 479.288,1139.29 479.857,1133.57 480.425,1126.6 480.993,1120.41 481.562,1114.07 482.13,1106.49 482.698,1099.67 483.267,1090.57 483.835,1083.36 484.403,1074.78 484.972,1067.28 485.54,1059.58 486.108,1050.65 486.677,1042.46 487.245,1034.1 487.813,1025.62 488.382,1012.86 488.95,1003.23 489.518,989.372 490.087,979.505 490.655,968.755 491.224,955.883 491.792,943.981 492.36,932.11 492.929,919.212 493.497,909.525 494.065,900.801 494.634,889.893 495.202,879.002 495.77,869.147 496.339,858.324 496.907,848.342 497.475,838.42 498.044,826.63 498.612,816.785 499.18,806.916 499.749,797.963 500.317,786.205 500.885,777.517 501.454,767.906 502.022,757.276 502.59,747.653 503.159,736.067 503.727,725.741 504.295,716.542 504.864,706.215 505.432,695.962 506.001,686.928 506.569,676.853 507.137,668.039 507.706,659.219 508.274,651.688 508.842,641.925 509.411,633.392 509.979,624.937 510.547,616.695 511.116,608.583 511.684,600.537 512.252,593.633 512.821,583.669 513.389,573.907 513.957,567.377 514.526,558.655 515.094,551.387 515.662,543.192 516.231,534.047 516.799,529.305 517.367,522.412 517.936,515.632 518.504,510.993 519.072,502.406 519.641,496.037 520.209,487.827 520.778,480.937 521.346,473.919 521.914,467.249 522.483,459.521 523.051,452.088 523.619,447.974 524.188,446.918 524.756,441.535 525.324,437.373 525.893,432.324 526.461,425.107 527.029,420.25 527.598,417.81 528.166,414.187 528.734,409.42 529.303,405.755 529.871,402.202 530.439,395.542 531.008,392.087 531.576,387.865 532.144,382.757 532.713,378.874 533.281,372.006 533.85,369.372 534.418,362.73 534.986,358.392 535.555,355.169 536.123,353.161 536.691,350.109 537.26,350.308 537.828,347.205 538.396,343.121 538.965,342.191 539.533,339.177 540.101,336.231 540.67,334.589 541.238,331.833 541.806,329.853 542.375,329.18 542.943,327.563 543.511,328.001 544.08,326.019 544.648,323.124 545.216,321.295 545.785,319.6 546.353,314.775 546.921,311.129 547.49,309.765 548.058,307.542 548.627,306.232 549.195,304.976 549.763,302.779 550.332,300.385 550.9,299.234 551.468,298.202 552.037,297.142 552.605,294.066 553.173,293.305 553.742,292.281 554.31,292.26 554.878,289.046 555.447,288.215 556.015,289.341 556.583,286.483 557.152,284.73 557.72,283.756 558.288,281.924 558.857,277.096 559.425,276.628 559.993,276.373 560.562,274.695 561.13,274.241 561.698,274.779 562.267,272.295 562.835,272.911 563.404,270.573 563.972,270.095 564.54,267.599 565.109,267.359 565.677,267.12 566.245,267.073 566.814,265.73 567.382,265.338 567.95,265.063 568.519,264.755 569.087,264.407 569.655,263.111 570.224,260.791 570.792,258.645 571.36,256.679 571.929,255.671 572.497,256.749 573.065,257.705 573.634,257.75 574.202,257.721 574.77,257.593 575.339,257.367 575.907,258.274 576.476,259.976 577.044,258.556 577.612,259.253 578.181,257.79 578.749,259.479 579.317,259.855 579.886,260.274 580.454,259.675 581.022,260.247 581.591,259.631 582.159,262.29 582.727,259.339 583.296,258.588 583.864,254.941 584.432,252.316 585.001,251.889 585.569,249.712 586.137,249.683 586.706,248.691 587.274,249.733 587.842,249.291 588.411,249.043 588.979,248.893 589.547,246.589 590.116,245.523 590.684,243.714 591.253,243.97 591.821,245.017 592.389,245.014 592.958,245.089 593.526,245.056 594.094,246.056 594.663,245.035 595.231,245.064 595.799,243.93 596.368,241.943 596.936,242.059 597.504,243.076 598.073,243.384 598.641,243.514 599.209,242.357 599.778,243.643 600.346,242.511 600.914,241.452 601.483,241.492 602.051,241.466 602.619,241.758 603.188,243.015 603.756,241.951 604.325,243.121 604.893,242.947 605.461,241.921 606.03,241.846 606.598,239.899 607.166,240.995 607.735,239.926 608.303,240.185 608.871,242.221 609.44,243.441 610.008,243.262 610.576,244.318 611.145,243.071 611.713,242.956 612.281,242.633 612.85,242.577 613.418,242.286 613.986,241.961 614.555,241.805 615.123,241.539 615.691,241.373 616.26,241.465 616.828,240.409 617.396,241.398 617.965,242.287 618.533,241.127 619.102,239.023 619.67,240.02 620.238,236.862 620.807,237.138 621.375,238.086 621.943,238.047 622.512,237.057 623.08,237.471 623.648,237.679 624.217,237.931 624.785,237.947 625.353,237.047 625.922,237.328 626.49,238.374 627.058,239.361 627.627,237.192 628.195,236.415 628.763,236.47 629.332,236.524 629.9,234.652 630.468,236.101 631.037,235.307 631.605,236.607 632.173,232.735 632.742,232.138 633.31,234.76 633.879,234.861 634.447,232.085 635.015,232.541 635.584,232.02 636.152,232.335 636.72,232.939 637.289,233.565 637.857,233.927 638.425,233.397 638.994,232.759 639.562,230.134 640.13,233.953 640.699,236.316 641.267,237.624 641.835,237.661 642.404,237.878 642.972,236.857 643.54,236.95 644.109,236.964 644.677,234.881 645.245,232.991 645.814,233.479 646.382,232.604 646.951,234.015 647.519,234.289 648.087,233.675 648.656,231.732 649.224,232.449 649.792,232.885 650.361,231.351 650.929,231.817 651.497,235.356 652.066,236.502 652.634,235.353 653.202,235.474 653.771,234.712 654.339,230.891 654.907,232.539 655.476,235.969 656.044,235.045 656.612,238.553 657.181,236.419 657.749,234.334 658.317,235.8 658.886,236.213 659.454,235.449 660.022,233.709 660.591,235.193 661.159,234.372 661.728,231.629 662.296,228.004 662.864,228.58 663.433,230.359 664.001,230.833 664.569,232.441 665.138,235.088 665.706,234.354 666.274,234.502 666.843,235.8 667.411,237.219 667.979,237.256 668.548,236.094 669.116,236.324 669.684,235.314 670.253,233.407 670.821,232.632 671.389,235.088 671.958,234.3 672.526,235.522 673.094,234.648 673.663,235.808 674.231,235.935 674.799,235.089 675.368,235.151 675.936,235.181 676.505,233.309 677.073,234.673 677.641,234.684 678.21,233.848 678.778,233.086 679.346,233.214 679.915,233.573 680.483,235.131 681.051,236.268 681.62,235.241 682.188,234.107 682.756,234.399 683.325,235.607 683.893,234.703 684.461,236.942 685.03,237.06 685.598,238.09 686.166,237.831 686.735,237.81 687.303,237.717 687.871,237.685 688.44,237.602 689.008,238.546 689.577,237.331 690.145,235.257 690.713,232.889 691.282,234.347 691.85,234.589 692.418,235.793 692.987,234.691 693.555,232.591 694.123,230.798 694.692,230.342 695.26,230.6 695.828,231.766 696.397,233.208 696.965,234.458 697.533,234.484 698.102,235.616 698.67,235.625 699.238,236.655 699.807,237.706 700.375,236.483 700.943,234.374 701.512,232.589 702.08,233.852 702.648,234.99 703.217,235.009 703.785,237.195 704.354,236.977 704.922,236.86 705.49,237.656 706.059,235.173 706.627,233.136 707.195,233.481 707.764,233.517 708.332,232.443 708.9,233.575 709.469,234.659 710.037,235.614 710.605,236.485 711.174,237.331 711.742,237.041 712.31,236.903 712.879,236.666 713.447,234.447 714.015,233.51 714.584,232.468 715.152,234.725 715.72,235.683 716.289,235.457 716.857,234.41 717.425,235.34 717.994,236.095 718.562,233.966 719.131,232.915 719.699,232.024 720.267,231.071 720.836,228.175 721.404,227.555 721.972,229.137 722.541,227.439 723.109,227.676 723.677,228.273 724.246,227.944 724.814,227.484 725.382,229.864 725.951,232.244 726.519,231.349 727.087,230.409 727.656,230.641 728.224,232.069 728.792,233.247 729.361,233.335 729.929,233.383 730.497,235.399 731.066,234.089 731.634,232.91 732.203,232.908 732.771,235.083 733.339,232.715 733.908,232.688 734.476,232.928 735.044,234.15 735.613,234.216 736.181,235.288 736.749,236.26 737.318,236.018 737.886,234.707 738.454,234.614 739.023,235.554 739.591,235.179 740.159,235.178 740.728,233.013 741.296,230.899 741.864,231.929 742.433,230.972 743.001,227.928 743.569,229.293 744.138,229.443 744.706,229.804 745.274,228.865 745.843,227.951 746.411,229.58 746.98,229.657 747.548,228.896 748.116,226.982 748.685,226.408 749.253,228.051 749.821,226.494 750.39,228.062 750.958,228.615 751.526,229.102 752.095,228.384 752.663,229.524 753.231,230.062 753.8,231.357 754.368,232.668 754.936,232.753 755.505,232.749 756.073,232.717 756.641,232.645 757.21,230.488 757.778,231.648 758.346,230.667 758.915,230.891 759.483,230.097 760.052,232.506 760.62,229.542 761.188,231.741 761.757,230.898 762.325,232.232 762.893,232.264 763.462,231.347 764.03,230.473 764.598,228.58 765.167,230.85 765.735,231.114 766.303,231.12 766.872,232.249 767.44,231.29 768.008,231.675 768.577,229.885 769.145,231.049 769.713,231.224 770.282,229.096 770.85,229.427 771.418,229.862 771.987,229.288 772.555,230.769 773.123,232.139 773.692,235.311 774.26,234.389 774.829,234.345 775.397,235.43 775.965,235.414 776.534,235.339 777.102,231.988 777.67,233.202 778.239,231.126 778.807,231.249 779.375,231.446 779.944,229.508 780.512,232.007 781.08,232.229 781.649,232.416 782.217,235.744 782.785,235.527 783.354,236.368 783.922,236.003 784.49,235.835 785.059,236.644 785.627,233.152 786.195,232.11 786.764,231.432 787.332,233.839 787.9,234.814 788.469,236.707 789.037,237.561 789.606,237.199 790.174,235.732 790.742,236.449 791.311,236.157 791.879,241.222 792.447,241.642 793.016,241.109 793.584,240.275 794.152,240.52 794.721,239.022 795.289,238.801 795.857,239.327 796.426,238.694 796.994,239.059 797.562,238.536 798.131,236.906 798.699,233.431 799.267,231.238 799.836,231.201 800.404,231.183 800.972,232.122 801.541,233.15 802.109,230.758 802.678,230.536 803.246,230.495 803.814,230.466 804.383,230.309 804.951,229.272 805.519,229.486 806.088,229.645 806.656,228.837 807.224,226.929 807.793,228.279 808.361,227.408 808.929,229.654 809.498,229.457 810.066,231.626 810.634,228.605 811.203,227.748 811.771,229.961 812.339,230.093 812.908,230.281 813.476,232.466 814.044,230.303 814.613,231.351 815.181,230.403 815.749,230.542 816.318,230.444 816.886,230.543 817.455,232.724 818.023,234.758 818.591,233.626 819.16,234.633 819.728,234.459 820.296,233.365 820.865,234.179 821.433,232.16 822.001,231.132 822.57,232.121 823.138,230.255 823.706,232.404 824.275,234.241 824.843,233.882 825.411,234.578 825.98,233.104 826.548,232.844 827.116,231.774 827.685,230.721 828.253,231.722 828.821,229.604 829.39,231.825 829.958,231.382 830.526,230.334 831.095,228.101 831.663,229.349 832.232,230.43 832.8,231.651 833.368,231.468 833.937,231.47 834.505,233.238 835.073,233.012 835.642,231.673 836.21,229.59 836.778,228.466 837.347,227.524 837.915,227.621 838.483,228.03 839.052,230.483 839.62,230.747 840.188,231.659 840.757,231.282 841.325,231.37 841.893,231.133 842.462,230.129 843.03,231.36 843.598,230.265 844.167,229.261 844.735,230.158 845.304,232.508 845.872,233.422 846.44,231.282 847.009,230.303 847.577,232.456 848.145,230.302 848.714,229.414 849.282,231.56 849.85,229.55 850.419,227.414 850.987,223.508 851.555,222.779 852.124,222.201 852.692,223.798 853.26,223.671 853.829,224.433 854.397,222.843 854.965,223.499 855.534,224.026 856.102,224.561 856.67,225.263 857.239,225.892 857.807,226.196 858.375,226.614 858.944,227.926 859.512,227.16 860.081,227.469 860.649,230.021 861.217,228.418 861.786,229.864 862.354,225.871 862.922,225.347 863.491,224.036 864.059,223.655 864.627,225.227 865.196,223.598 865.764,221.188 866.332,221.935 866.901,222.781 867.469,222.707 868.037,224.693 868.606,226.498 869.174,229.093 869.742,229.7 870.311,232.227 870.879,233.5 871.447,232.444 872.016,232.591 872.584,232.748 873.152,231.905 873.721,231.1 874.289,233.12 874.858,228.917 875.426,228.107 875.994,226.411 876.563,229.147 877.131,228.33 877.699,231.024 878.268,233.365 878.836,233.286 879.404,234.398 879.973,235.361 880.541,236.248 881.109,237.069 881.678,234.729 882.246,235.541 882.814,234.206 883.383,234.152 883.951,234.051 884.519,233.966 885.088,232.907 885.656,230.76 886.224,230.793 886.793,231.017 887.361,230.261 887.93,231.503 888.498,231.261 889.066,232.43 889.635,232.539 890.203,233.311 890.771,234.428 891.34,234.294 891.908,236.339 892.476,237.166 893.045,235.815 893.613,233.483 894.181,233.303 894.75,235.375 895.318,236.177 895.886,235.807 896.455,233.267 897.023,232.037 897.591,230.996 898.16,231.06 898.728,228.972 899.296,227.344 899.865,227.557 900.433,229.883 901.001,231.109 901.57,231.204 902.138,233.38 902.707,230.104 903.275,232.483 903.843,232.506 904.412,230.572 904.98,227.802 905.548,227.225 906.117,225.906 906.685,226.266 907.253,226.779 907.822,228.204 908.39,226.613 908.958,226.155 909.527,226.659 910.095,226.02 910.663,228.408 911.232,225.7 911.8,227.325 912.368,228.736 912.937,231.189 913.505,231.475 914.073,231.485 914.642,232.225 915.21,234.279 915.779,235.313 916.347,237.217 916.915,236.938 917.484,237.909 918.052,238.642 918.62,239.507 919.189,239.011 919.757,238.597 920.325,238.243 920.894,235.604 921.462,234.409 922.03,235.256 922.599,235.077 923.167,234.77 923.735,234.538 924.304,234.489 924.872,234.427 925.44,235.076 926.009,235.94 926.577,236.703 927.145,235.344 927.714,237.219 928.282,238.789 928.85,239.365 929.419,239.678 929.987,236.861 930.556,233.297 931.124,237.011 931.692,237.648 932.261,235.168 932.829,234.85 933.397,234.498 933.966,235.239 934.534,233.918 935.102,233.567 935.671,235.062 936.239,235.61 936.807,237.192 937.376,235.45 937.944,233.964 938.512,233.672 939.081,235.297 939.649,236.006 940.217,235.508 940.786,235.969 941.354,233.411 941.922,236.231 942.491,235.745 943.059,237.47 943.627,235.812 944.196,233.411 944.764,234.159 945.333,232.699 945.901,232.494 946.469,231.255 947.038,233.161 947.606,230.853 948.174,230.724 948.743,229.549 949.311,228.387 949.879,227.418 950.448,227.516 951.016,228.555 951.584,230.571 952.153,230.358 952.721,229.066 953.289,230.133 953.858,231.314 954.426,230.249 954.994,229.029 955.563,228.983 956.131,230.234 956.699,232.366 957.268,233.094 957.836,232.745 958.405,234.581 958.973,233.874 959.541,234.549 960.11,235.243 960.678,233.959 961.246,234.76 961.815,233.355 962.383,233.23 962.951,234.85 963.52,236.553 964.088,235.227 964.656,235.914 965.225,237.411 965.793,238.001 966.361,235.827 966.93,235.23 967.498,234.674 968.066,234.272 968.635,232.752 969.203,231.312 969.771,231.244 970.34,229.902 970.908,231.778 971.476,229.42 972.045,231.551 972.613,230.228 973.182,231.094 973.75,227.497 974.318,226.498 974.887,228.517 975.455,227.257 976.023,226.994 976.592,226.235 977.16,225.425 977.728,225.646 978.297,224.879 978.865,226.106 979.433,225.107 980.002,225.279 980.57,226.348 981.138,225.398 981.707,226.682 982.275,225.72 982.843,224.035 983.412,226.474 983.98,228.086 984.548,226.2 985.117,226.386 985.685,225.609 986.253,225.709 986.822,227.994 987.39,229.221 987.959,229.313 988.527,230.378 989.095,229.316 989.664,230.259 990.232,231.969 990.8,230.706 991.369,227.589 991.937,228.792 992.505,228.967 993.074,229.21 993.642,228.344 994.21,229.505 994.779,231.528 995.347,231.282 995.915,229.301 996.484,229.278 997.052,228.409 997.62,230.468 998.189,228.275 998.757,228.483 999.325,227.59 999.894,225.683 1000.46,226.029 1001.03,225.058 1001.6,226.497 1002.17,227.869 1002.74,227.059 1003.3,230.354 1003.87,231.313 1004.44,229.979 1005.01,229.145 1005.58,229.325 1006.15,230.377 1006.71,229.277 1007.28,228.609 1007.85,227.55 1008.42,228.734 1008.99,226.791 1009.56,226.95 1010.12,226.1 1010.69,226.408 1011.26,228.87 1011.83,228.957 1012.4,227.133 1012.97,226.437 1013.53,226.787 1014.1,228.14 1014.67,227.207 1015.24,224.564 1015.81,222.871 1016.38,221.483 1016.94,221.25 1017.51,223.054 1018.08,225.418 1018.65,226.02 1019.22,228.342 1019.79,229.564 1020.35,230.677 1020.92,233.027 1021.49,234.955 1022.06,235.613 1022.63,235.326 1023.2,235.185 1023.76,234.964 1024.33,232.496 1024.9,232.397 1025.47,230.273 1026.04,229.17 1026.61,229.559 1027.17,231.714 1027.74,231.619 1028.31,231.625 1028.88,229.488 1029.45,228.513 1030.02,229.861 1030.58,230.212 1031.15,231.189 1031.72,233.188 1032.29,231.989 1032.86,232.857 1033.43,234.675 1033.99,236.333 1034.56,235.797 1035.13,236.563 1035.7,231.988 1036.27,233.963 1036.84,232.783 1037.4,233.624 1037.97,232.407 1038.54,230.305 1039.11,229.25 1039.68,231.366 1040.25,229.203 1040.81,229.219 1041.38,229.43 1041.95,229.471 1042.52,228.658 1043.09,228.614 1043.66,228.897 1044.22,227.933 1044.79,227.108 1045.36,229.498 1045.93,231.508 1046.5,229.429 1047.07,229.745 1047.63,225.868 1048.2,227.323 1048.77,229.552 1049.34,228.719 1049.91,228.958 1050.48,228.109 1051.05,230.3 1051.61,228.301 1052.18,229.633 1052.75,231.833 1053.32,231.788 1053.89,232.878 1054.46,230.753 1055.02,230.79 1055.59,229.968 1056.16,230.159 1056.73,230.914 1057.3,229.911 1057.87,230.112 1058.43,231.328 1059,230.311 1059.57,229.325 1060.14,229.643 1060.71,231.725 1061.28,230.707 1061.84,231.852 1062.41,232.817 1062.98,233.877 1063.55,233.614 1064.12,233.541 1064.69,234.333 1065.25,233.879 1065.82,232.654 1066.39,232.486 1066.96,233.247 1067.53,232.036 1068.1,231.921 1068.66,232.005 1069.23,229.647 1069.8,227.854 1070.37,228.227 1070.94,229.218 1071.51,228.414 1072.07,228.731 1072.64,226.693 1073.21,227.852 1073.78,229.021 1074.35,228.255 1074.92,229.333 1075.48,228.437 1076.05,227.792 1076.62,226.114 1077.19,226.252 1077.76,224.655 1078.33,226.98 1078.89,227.248 1079.46,226.486 1080.03,226.756 1080.6,229.248 1081.17,228.316 1081.74,228.596 1082.3,228.726 1082.87,226.749 1083.44,226.01 1084.01,229.73 1084.58,229.695 1085.15,232.105 1085.71,232.165 1086.28,233.045 1086.85,233.857 1087.42,233.822 1087.99,234.729 1088.56,233.353 1089.12,232.391 1089.69,233.444 1090.26,233.235 1090.83,232.058 1091.4,232.075 1091.97,231.781 1092.53,229.709 1093.1,229.871 1093.67,229.066 1094.24,229.238 1094.81,229.447 1095.38,228.753 1095.94,229.055 1096.51,227.289 1097.08,225.535 1097.65,225.813 1098.22,228.361 1098.79,226.472 1099.35,226.728 1099.92,228.3 1100.49,231.668 1101.06,232.685 1101.63,232.594 1102.2,234.597 1102.76,233.404 1103.33,233.411 1103.9,236.356 1104.47,236.177 1105.04,236.737 1105.61,236.221 1106.17,236.867 1106.74,236.591 1107.31,237.334 1107.88,238.907 1108.45,238.207 1109.02,236.569 1109.58,236.179 1110.15,233.809 1110.72,232.483 1111.29,231.188 1111.86,231.156 1112.43,229.129 1112.99,230.108 1113.56,229.314 1114.13,229.482 1114.7,230.546 1115.27,230.752 1115.84,230.831 1116.4,230.912 1116.97,232.089 1117.54,232.002 1118.11,233.943 1118.68,232.713 1119.25,232.681 1119.81,232.652 1120.38,232.509 1120.95,232.345 1121.52,233.229 1122.09,233.153 1122.66,232.008 1123.23,232.112 1123.79,231.828 1124.36,231.878 1124.93,233.74 1125.5,232.316 1126.07,234.243 1126.64,235.787 1127.2,236.385 1127.77,235.82 1128.34,233.193 1128.91,231.895 1129.48,231.787 1130.05,231.619 1130.61,231.448 1131.18,230.423 1131.75,229.237 1132.32,230.304 1132.89,231.493 1133.46,229.156 1134.02,230.04 1134.59,228.95 1135.16,230.044 1135.73,229.876 1136.3,229.84 1136.87,229.762 1137.43,229.585 1138,228.578 1138.57,230.483 1139.14,230.417 1139.71,232.376 1140.28,233.073 1140.84,234.971 1141.41,234.753 1141.98,233.48 1142.55,232.049 1143.12,231.779 1143.69,231.625 1144.25,231.51 1144.82,229.348 1145.39,230.269 1145.96,229.317 1146.53,229.314 1147.1,229.148 1147.66,227.959 1148.23,230.007 1148.8,233.19 1149.37,234.006 1149.94,232.539 1150.51,232.312 1151.07,230.613 1151.64,230.394 1152.21,233.355 1152.78,232 1153.35,234.075 1153.92,233.733 1154.48,233.346 1155.05,233.012 1155.62,232.866 1156.19,232.548 1156.76,232.356 1157.33,232.105 1157.89,231.805 1158.46,231.491 1159.03,232.202 1159.6,231.031 1160.17,229.683 1160.74,230.647 1161.3,229.357 1161.87,230.848 1162.44,228.492 1163.01,228.251 1163.58,228.373 1164.15,230.574 1164.71,231.48 1165.28,231.466 1165.85,231.386 1166.42,230.06 1166.99,229.986 1167.56,231.038 1168.12,229.918 1168.69,230.998 1169.26,229.916 1169.83,228.809 1170.4,229.822 1170.97,228.971 1171.53,227.899 1172.1,226.936 1172.67,227.326 1173.24,226.277 1173.81,225.581 1174.38,225.923 1174.94,225.064 1175.51,225.357 1176.08,222.753 1176.65,222.277 1177.22,221.837 1177.79,222.425 1178.35,222.016 1178.92,222.421 1179.49,224.122 1180.06,225.557 1180.63,224.816 1181.2,221.357 1181.76,220.176 1182.33,219.895 1182.9,222.643 1183.47,222.329 1184.04,224.005 1184.61,224.411 1185.17,225.073 1185.74,225.327 1186.31,225.777 1186.88,227.147 1187.45,228.587 1188.02,228.865 1188.58,228.109 1189.15,229.515 1189.72,231.839 1190.29,233.89 1190.86,234.764 1191.43,231.4 1192,230.45 1192.56,232.535 1193.13,233.354 1193.7,234.476 1194.27,233.018 1194.84,232.498 1195.41,231.316 1195.97,230.434 1196.54,232.499 1197.11,230.162 1197.68,230.084 1198.25,229.149 1198.82,229.322 1199.38,228.492 1199.95,227.651 1200.52,226.879 1201.09,228.225 1201.66,228.463 1202.23,230.786 1202.79,229.706 1203.36,228.638 1203.93,229.062 1204.5,229.382 1205.07,230.613 1205.64,230.606 1206.2,230.818 1206.77,230.698 1207.34,229.742 1207.91,228.799 1208.48,230.974 1209.05,230.87 1209.61,232.913 1210.18,231.65 1210.75,231.662 1211.32,230.552 1211.89,229.82 1212.46,229.977 1213.02,229.217 1213.59,230.171 1214.16,231.309 1214.73,232.347 1215.3,231.19 1215.87,230.006 1216.43,232.427 1217,234.434 1217.57,234.2 1218.14,230.872 1218.71,228.892 1219.28,230.004 1219.84,229.031 1220.41,232.238 1220.98,232.15 1221.55,232.158 1222.12,233.198 1222.69,232.095 1223.25,233.098 1223.82,229.833 1224.39,230.134 1224.96,231.063 1225.53,232.192 1226.1,231.105 1226.66,228.883 1227.23,228.983 1227.8,229.267 1228.37,229.553 1228.94,230.776 1229.51,231.998 1230.07,231.963 1230.64,230.735 1231.21,230.854 1231.78,229.802 1232.35,231.985 1232.92,233.016 1233.48,230.981 1234.05,230.976 1234.62,231.003 1235.19,231.123 1235.76,232.102 1236.33,232.001 1236.89,231.715 1237.46,233.471 1238.03,230.235 1238.6,229.183 1239.17,227.209 1239.74,227.698 1240.3,226.926 1240.87,227.098 1241.44,228.468 1242.01,226.591 1242.58,227.178 1243.15,227.461 1243.71,226.873 1244.28,229.113 1244.85,229.477 1245.42,231.641 1245.99,233.812 1246.56,233.679 1247.12,233.591 1247.69,232.488 1248.26,230.258 1248.83,232.312 1249.4,232.152 1249.97,232.166 1250.53,232.056 1251.1,232.985 1251.67,235.819 1252.24,236.519 1252.81,238.207 1253.38,235.878 1253.94,234.645 1254.51,235.461 1255.08,232.105 1255.65,231.921 1256.22,230.953 1256.79,230.912 1257.35,231.913 1257.92,231.716 1258.49,231.631 1259.06,235.728 1259.63,236.405 1260.2,235.952 1260.76,235.577 1261.33,234.009 1261.9,237.03 1262.47,235.614 1263.04,235.104 1263.61,235.779 1264.18,234.464 1264.74,233.373 1265.31,232.186 1265.88,232.151 1266.45,233.158 1267.02,232.962 1267.59,233.658 1268.15,233.111 1268.72,232.71 1269.29,232.388 1269.86,230.136 1270.43,230.121 1271,231.006 1271.56,228.869 1272.13,228.853 1272.7,228.831 1273.27,227.947 1273.84,231.32 1274.41,233.281 1274.97,229.759 1275.54,231.865 1276.11,230.882 1276.68,230.824 1277.25,230.927 1277.82,229.975 1278.38,228.716 1278.95,226.805 1279.52,225.988 1280.09,226.003 1280.66,226.146 1281.23,224.259 1281.79,223.671 1282.36,224.042 1282.93,225.631 1283.5,228.083 1284.07,228.177 1284.64,227.243 1285.2,227.512 1285.77,229.846 1286.34,227.844 1286.91,226.078 1287.48,227.614 1288.05,226.852 1288.61,228.098 1289.18,228.205 1289.75,229.629 1290.32,230.794 1290.89,233.121 1291.46,234.162 1292.02,232.881 1292.59,232.733 1293.16,230.597 1293.73,229.511 1294.3,232.618 1294.87,232.558 1295.43,232.478 1296,234.669 1296.57,233.307 1297.14,236.262 1297.71,235.913 1298.28,235.469 1298.84,234.08 1299.41,232.642 1299.98,230.653 1300.55,229.62 1301.12,229.579 1301.69,227.557 1302.25,227.517 1302.82,230.744 1303.39,228.718 1303.96,227.532 1304.53,224.514 1305.1,227.961 1305.66,228.052 1306.23,226.248 1306.8,226.577 1307.37,229.024 1307.94,230.207 1308.51,232.238 1309.07,231.924 1309.64,231.931 1310.21,229.748 1310.78,230.844 1311.35,233.023 1311.92,232.859 1312.48,234.866 1313.05,234.571 1313.62,233.25 1314.19,233.257 1314.76,231.972 1315.33,232.937 1315.89,234.013 1316.46,233.993 1317.03,234.721 1317.6,237.735 1318.17,237.246 1318.74,236.058 1319.3,237.631 1319.87,235.152 1320.44,235.769 1321.01,235.502 1321.58,236.203 1322.15,236.762 1322.71,236.185 1323.28,235.688 1323.85,235.032 1324.42,235.522 1324.99,235.895 1325.56,234.407 1326.12,234.055 1326.69,233.798 1327.26,232.465 1327.83,233.206 1328.4,232.831 1328.97,231.498 1329.53,232.107 1330.1,229.629 1330.67,229.581 1331.24,228.516 1331.81,230.564 1332.38,230.728 1332.94,227.554 1333.51,230.683 1334.08,229.692 1334.65,227.622 1335.22,225.473 1335.79,228.927 1336.36,227.954 1336.92,225.957 1337.49,224.24 1338.06,224.655 1338.63,222.804 1339.2,223.254 1339.77,223.739 1340.33,223.997 1340.9,225.168 1341.47,225.641 1342.04,226.033 1342.61,225.292 1343.18,226.592 1343.74,223.788 1344.31,224.149 1344.88,224.641 1345.45,227.235 1346.02,226.576 1346.59,226.799 1347.15,226.909 1347.72,226.125 1348.29,226.442 1348.86,225.533 1349.43,227.023 1350,226.146 1350.56,227.702 1351.13,231.972 1351.7,230.874 1352.27,231.003 1352.84,231.134 1353.41,231.297 1353.97,234.525 1354.54,233.041 1355.11,231.828 1355.68,231.889 1356.25,231.818 1356.82,233.705 1357.38,232.657 1357.95,231.519 1358.52,230.239 1359.09,230.007 1359.66,231.089 1360.23,230.014 1360.79,228.052 1361.36,230.242 1361.93,231.518 1362.5,232.397 1363.07,232.361 1363.64,231.191 1364.2,231.316 1364.77,231.519 1365.34,232.394 1365.91,231.359 1366.48,233.472 1367.05,233.267 1367.61,231.98 1368.18,230.852 1368.75,230.781 1369.32,230.906 1369.89,230.789 1370.46,231.724 1371.02,228.556 1371.59,227.668 1372.16,228.686 1372.73,228.772 1373.3,228.814 1373.87,229.107 1374.43,229.265 1375,229.389 1375.57,232.709 1376.14,234.581 1376.71,237.342 1377.28,234.527 1377.84,233.971 1378.41,230.576 1378.98,231.6 1379.55,232.468 1380.12,233.204 1380.69,234.158 1381.25,234.815 1381.82,236.573 1382.39,235.921 1382.96,236.568 1383.53,234.075 1384.1,231.504 1384.66,231.226 1385.23,232.361 1385.8,233.193 1386.37,232.04 1386.94,231.844 1387.51,230.854 1388.07,230.827 1388.64,230.677 1389.21,230.718 1389.78,230.811 1390.35,229.757 1390.92,228.625 1391.48,227.717 1392.05,227.995 1392.62,229.29 1393.19,230.476 1393.76,232.693 1394.33,233.522 1394.89,233.301 1395.46,233.194 1396.03,230.898 1396.6,228.58 1397.17,229.618 1397.74,230.558 1398.3,230.565 1398.87,234.677 1399.44,234.275 1400.01,230.08 1400.58,229.104 1401.15,229.265 1401.71,227.281 1402.28,225.384 1402.85,225.723 1403.42,228.001 1403.99,227.111 1404.56,227.357 1405.13,228.582 1405.69,228.585 1406.26,229.753 1406.83,228.675 1407.4,227.508 1407.97,226.743 1408.54,228.961 1409.1,228.995 1409.67,228.071 1410.24,226.281 1410.81,225.754 1411.38,223.992 1411.95,224.569 1412.51,226.097 1413.08,227.342 1413.65,227.561 1414.22,228.829 1414.79,227.966 1415.36,231.48 1415.92,232.291 1416.49,233.257 1417.06,232.145 1417.63,235.381 1418.2,236.18 1418.77,235.822 1419.33,234.358 1419.9,234.283 1420.47,235.925 1421.04,235.425 1421.61,233.018 1422.18,234.953 1422.74,233.702 1423.31,234.59 1423.88,236.355 1424.45,234.912 1425.02,232.473 1425.59,231.388 1426.15,232.421 1426.72,233.131 1427.29,230.925 1427.86,229.76 1428.43,227.688 1429,226.89 1429.56,227.934 1430.13,225.883 1430.7,226.04 1431.27,226.328 1431.84,225.56 1432.41,226.942 1432.97,224.093 1433.54,224.699 1434.11,225.187 1434.68,226.518 1435.25,228.723 1435.82,227.649 1436.38,228.903 1436.95,228.038 1437.52,227.02 1438.09,227.017 1438.66,226.15 1439.23,226.604 1439.79,226.843 1440.36,230.012 1440.93,227.862 1441.5,228.941 1442.07,229.988 1442.64,230.166 1443.2,231.307 1443.77,232.282 1444.34,232.158 1444.91,232.025 1445.48,229.772 1446.05,229.744 1446.61,229.576 1447.18,231.802 1447.75,231.913 1448.32,229.892 1448.89,230 1449.46,231.011 1450.02,233.149 1450.59,234.153 1451.16,231.775 1451.73,230.574 1452.3,228.775 1452.87,231.112 1453.43,232.121 1454,231.052 1454.57,233.939 1455.14,234.506 1455.71,234.121 1456.28,231.73 1456.84,230.594 1457.41,230.781 1457.98,231.795 1458.55,233.761 1459.12,234.648 1459.69,233.236 1460.25,231.967 1460.82,232.929 1461.39,232.8 1461.96,230.418 1462.53,230.499 1463.1,231.381 1463.66,231.459 1464.23,230.415 1464.8,229.462 1465.37,230.705 1465.94,231.636 1466.51,229.456 1467.07,227.184 1467.64,229.6 1468.21,228.588 1468.78,228.683 1469.35,229.795 1469.92,232.773 1470.48,232.503 1471.05,231.118 1471.62,231.948 1472.19,231.954 1472.76,232.716 1473.33,233.287 1473.89,233.044 1474.46,233.809 1475.03,234.559 1475.6,235.277 1476.17,235.618 1476.74,234.16 1477.31,231.271 1477.87,231.137 1478.44,232.24 1479.01,234.036 1479.58,232.681 1480.15,231.189 1480.72,231.983 1481.28,231.658 1481.85,231.33 1482.42,232.179 1482.99,233.042 1483.56,232.794 1484.13,233.554 1484.69,232.396 1485.26,231.207 1485.83,230.245 1486.4,229.312 1486.97,229.345 1487.54,228.226 1488.1,228.17 1488.67,229.313 1489.24,227.38 1489.81,228.373 1490.38,227.583 1490.95,227.734 1491.51,226.905 1492.08,228.153 1492.65,229.231 1493.22,230.543 1493.79,230.693 1494.36,231.562 1494.92,233.392 1495.49,231.019 1496.06,229.6 1496.63,231.792 1497.2,232.8 1497.77,230.407 1498.33,231.171 1498.9,233.053 1499.47,232.777 1500.04,231.431 1500.61,231.192 1501.18,231.096 1501.74,229.875 1502.31,230.855 1502.88,230.957 1503.45,231.01 1504.02,228.698 1504.59,228.754 1505.15,228.763 1505.72,229.813 1506.29,228.646 1506.86,229.292 1507.43,232.538 1508,231.287 1508.56,230.205 1509.13,229.256 1509.7,230.344 1510.27,226.238 1510.84,224.43 1511.41,222.83 1511.97,223.051 1512.54,221.457 1513.11,223.146 1513.68,223.483 1514.25,222.874 1514.82,223.421 1515.38,223.101 1515.95,224.553 1516.52,225.997 1517.09,228.312 1517.66,229.555 1518.23,227.555 1518.79,226.655 1519.36,225.941 1519.93,226.363 1520.5,227.872 1521.07,229.024 1521.64,227.306 1522.2,226.642 1522.77,229.08 1523.34,227.099 1523.91,227.29 1524.48,224.55 1525.05,225.031 1525.61,224.588 1526.18,224.094 1526.75,224.66 1527.32,226.125 1527.89,226.568 1528.46,222.76 1529.02,225.561 1529.59,224.843 1530.16,226.518 1530.73,228.848 1531.3,229.105 1531.87,229.329 1532.43,229.691 1533,232.096 1533.57,234.249 1534.14,234.082 1534.71,233.196 1535.28,235.982 1535.84,232.635 1536.41,235.492 1536.98,234.515 1537.55,235.255 1538.12,237.113 1538.69,233.609 1539.25,233.505 1539.82,233.283 1540.39,233.146 1540.96,233.049 1541.53,235.061 1542.1,234.722 1542.66,233.516 1543.23,235.353 1543.8,233.911 1544.37,234.59 1544.94,234.506 1545.51,234.279 1546.08,234.072 1546.64,235.694 1547.21,236.598 1547.78,235.091 1548.35,232.961 1548.92,232.643 1549.49,232.345 1550.05,232.896 1550.62,233.775 1551.19,233.676 1551.76,234.505 1552.33,234.561 1552.9,234.227 1553.46,234.028 1554.03,232.651 1554.6,232.282 1555.17,226.905 1555.74,228.181 1556.31,229.407 1556.87,227.544 1557.44,226.652 1558.01,229.279 1558.58,228.324 1559.15,229.507 1559.72,229.415 1560.28,231.595 1560.85,231.447 1561.42,231.451 1561.99,228.253 1562.56,229.337 1563.13,227.373 1563.69,226.478 1564.26,227.75 1564.83,226.786 1565.4,230.237 1565.97,230.414 1566.54,228.464 1567.1,226.316 1567.67,226.628 1568.24,228.178 1568.81,227.423 1569.38,227.688 1569.95,229.156 1570.51,229.328 1571.08,229.424 1571.65,229.595 1572.22,229.934 1572.79,231.043 1573.36,232.189 1573.92,233.133 1574.49,232.875 1575.06,231.822 1575.63,233.832 1576.2,235.83 1576.77,235.665 1577.33,236.177 1577.9,235.858 1578.47,235.592 1579.04,236.14 1579.61,234.826 1580.18,231.591 1580.74,232.283 1581.31,231.204 1581.88,232.233 1582.45,235.072 1583.02,232.744 1583.59,231.524 1584.15,231.36 1584.72,230.318 1585.29,229.292 1585.86,227.459 1586.43,227.51 1587,225.741 1587.56,224.214 1588.13,224.471 1588.7,225.951 1589.27,226.413 1589.84,228.805 1590.41,225.915 1590.97,225.223 1591.54,227.673 1592.11,227.889 1592.68,229.117 1593.25,229.108 1593.82,229.299 1594.38,229.419 1594.95,229.481 1595.52,229.468 1596.09,228.791 1596.66,226.802 1597.23,225.305 1597.79,226.65 1598.36,229.026 1598.93,228.094 1599.5,228.23 1600.07,229.216 1600.64,233.609 1601.2,233.542 1601.77,234.528 1602.34,232.131 1602.91,231.98 1603.48,232.006 1604.05,231.004 1604.61,232.112 1605.18,232.041 1605.75,229.935 1606.32,230.009 1606.89,231.964 1607.46,234.203 1608.02,232.915 1608.59,233.766 1609.16,231.719 1609.73,232.646 1610.3,231.477 1610.87,231.294 1611.43,231.249 1612,230.338 1612.57,229.371 1613.14,228.497 1613.71,228.625 1614.28,229.719 1614.84,229.949 1615.41,228.96 1615.98,228.801 1616.55,228.766 1617.12,228.949 1617.69,229.056 1618.26,230.192 1618.82,231.207 1619.39,232.315 1619.96,233.215 1620.53,232.71 1621.1,232.325 1621.67,233.982 1622.23,234.843 1622.8,236.643 1623.37,236.195 1623.94,238.894 1624.51,237.418 1625.08,235.964 1625.64,233.636 1626.21,233.353 1626.78,234.275 1627.35,234.042 1627.92,231.653 1628.49,230.509 1629.05,230.413 1629.62,229.553 1630.19,228.415 1630.76,227.517 1631.33,226.592 1631.9,226.883 1632.46,225.108 1633.03,225.635 1633.6,225.882 1634.17,227.221 1634.74,230.748 1635.31,229.714 1635.87,230.744 1636.44,231.697 1637.01,231.575 1637.58,230.551 1638.15,229.438 1638.72,230.512 1639.28,231.512 1639.85,230.095 1640.42,234.13 1640.99,234.744 1641.56,234.299 1642.13,231.731 1642.69,231.572 1643.26,231.558 1643.83,230.678 1644.4,233.81 1644.97,234.749 1645.54,235.812 1646.1,235.252 1646.67,232.887 1647.24,231.792 1647.81,229.519 1648.38,230.719 1648.95,231.563 1649.51,231.482 1650.08,233.655 1650.65,233.253 1651.22,233.1 1651.79,234.042 1652.36,233.6 1652.92,231.243 1653.49,229.293 1654.06,229.231 1654.63,229.222 1655.2,229.601 1655.77,229.424 1656.33,230.419 1656.9,231.29 1657.47,230.078 1658.04,230.236 1658.61,233.444 1659.18,234.406 1659.74,234.328 1660.31,232.916 1660.88,231.476 1661.45,231.211 1662.02,231.116 1662.59,226.945 1663.15,228.182 1663.72,227.179 1664.29,227.448 1664.86,230.668 1665.43,230.559 1666,230.436 1666.56,229.279 1667.13,228.575 1667.7,227.647 1668.27,227.583 1668.84,227.748 1669.41,228.011 1669.97,226.149 1670.54,226.355 1671.11,226.442 1671.68,225.738 1672.25,228.138 1672.82,229.368 1673.38,226.261 1673.95,224.628 1674.52,224.864 1675.09,225.146 1675.66,225.636 1676.23,224.978 1676.79,226.332 1677.36,225.575 1677.93,223.709 1678.5,222.283 1679.07,222.975 1679.64,224.728 1680.2,225.065 1680.77,226.636 1681.34,226.837 1681.91,227.158 1682.48,228.418 1683.05,229.926 1683.61,231.068 1684.18,232.094 1684.75,232.047 1685.32,229.843 1685.89,229.976 1686.46,230.42 1687.02,229.626 1687.59,226.771 1688.16,228.015 1688.73,229.311 1689.3,229.579 1689.87,229.699 1690.44,232.894 1691,234.88 1691.57,234.6 1692.14,234.422 1692.71,234.151 1693.28,233.871 1693.85,234.639 1694.41,233.151 1694.98,234.337 1695.55,234.245 1696.12,234.122 1696.69,234.907 1697.26,232.669 1697.82,233.721 1698.39,234.355 1698.96,233.176 1699.53,233.833 1700.1,233.649 1700.67,232.565 1701.23,233.48 1701.8,233.23 1702.37,235.075 1702.94,231.582 1703.51,231.504 1704.08,233.309 1704.64,234.263 1705.21,232.747 1705.78,231.424 1706.35,229.134 1706.92,229.158 1707.49,228.031 1708.05,230.131 1708.62,231.963 1709.19,232.661 1709.76,230.471 1710.33,229.471 1710.9,231.669 1711.46,231.549 1712.03,231.426 1712.6,229.385 1713.17,230.728 1713.74,231.765 1714.31,233.743 1714.87,235.471 1715.44,237.254 1716.01,235.723 1716.58,234.238 1717.15,234.792 1717.72,233.661 1718.28,233.374 1718.85,230.934 1719.42,231.951 1719.99,233.614 1720.56,234.647 1721.13,233.261 1721.69,231.956 1722.26,233.742 1722.83,232.447 1723.4,232.173 1723.97,230.917 1724.54,230.94 1725.1,230.811 1725.67,231.768 1726.24,231.461 1726.81,230.263 1727.38,230.203 1727.95,229.259 1728.51,229.258 1729.08,229.368 1729.65,230.437 1730.22,228.341 1730.79,229.5 1731.36,227.437 1731.92,227.521 1732.49,224.709 1733.06,225.047 1733.63,226.397 1734.2,224.538 1734.77,222.568 1735.33,223.096 1735.9,226.592 1736.47,227.85 1737.04,226.02 1737.61,226.235 1738.18,225.434 1738.74,225.809 1739.31,225.339 1739.88,224.727 1740.45,225.216 1741.02,226.791 1741.59,225.785 1742.15,226.303 1742.72,226.484 1743.29,226.861 1743.86,228.123 1744.43,226.23 1745,227.647 1745.56,228.15 1746.13,229.492 1746.7,229.638 1747.27,231.67 1747.84,229.657 1748.41,227.559 1748.97,227.907 1749.54,226.949 1750.11,227.235 1750.68,226.697 1751.25,225.985 1751.82,227.384 1752.38,226.559 1752.95,227.973 1753.52,227.211 1754.09,227.423 1754.66,227.968 1755.23,228.333 1755.79,227.425 1756.36,225.697 1756.93,225.982 1757.5,226.284 1758.07,227.921 1758.64,227.28 1759.21,231.685 1759.77,233.025 1760.34,234.007 1760.91,233.08 1761.48,232.082 1762.05,231.989 1762.62,233.115 1763.18,233.225 1763.75,235.204 1764.32,235.139 1764.89,233.966 1765.46,232.786 1766.03,233.849 1766.59,231.476 1767.16,231.421 1767.73,232.315 1768.3,232.039 1768.87,233.893 1769.44,233.836 1770,233.562 1770.57,231.64 1771.14,233.574 1771.71,235.168 1772.28,233.834 1772.85,233.455 1773.41,233.223 1773.98,229.946 1774.55,229.018 1775.12,230.093 1775.69,230.111 1776.26,231.202 1776.82,232.188 1777.39,230.927 1777.96,231.848 1778.53,232.88 1779.1,231.875 1779.67,230.912 1780.23,229.047 1780.8,229.109 1781.37,231.325 1781.94,232.313 1782.51,232.353 1783.08,232.416 1783.64,231.43 1784.21,230.34 1784.78,229.506 1785.35,229.658 1785.92,230.746 1786.49,230.751 1787.05,227.771 1787.62,228.031 1788.19,227.189 1788.76,229.521 1789.33,227.666 1789.9,227.926 1790.46,230.143 1791.03,230.913 1791.6,230.849 1792.17,232.939 1792.74,232.93 1793.31,234.996 1793.87,234.837 1794.44,237.507 1795.01,237.109 1795.58,237.683 1796.15,237.196 1796.72,238.891 1797.28,237.148 1797.85,236.753 1798.42,236.532 1798.99,236.019 1799.56,237.631 1800.13,238.118 1800.69,235.52 1801.26,236.12 1801.83,236.666 1802.4,238.142 1802.97,237.533 1803.54,236.905 1804.1,237.246 1804.67,236.538 1805.24,232.983 1805.81,229.659 1806.38,229.422 1806.95,229.383 1807.51,228.536 1808.08,227.619 1808.65,225.485 1809.22,224.907 1809.79,226.261 1810.36,227.633 1810.92,226.693 1811.49,224.89 1812.06,226.096 1812.63,225.529 1813.2,224.98 1813.77,225.212 1814.33,226.66 1814.9,227.795 1815.47,227.78 1816.04,228.364 1816.61,228.59 1817.18,229.993 1817.74,228.038 1818.31,228.117 1818.88,228.249 1819.45,230.57 1820.02,232.781 1820.59,231.841 1821.15,232.829 1821.72,230.748 1822.29,230.768 1822.86,232.965 1823.43,232.804 1824,232.596 1824.56,232.408 1825.13,232.221 1825.7,233.113 1826.27,233.943 1826.84,233.459 1827.41,233.109 1827.97,232.919 1828.54,234.875 1829.11,232.559 1829.68,231.412 1830.25,230.466 1830.82,228.398 1831.39,227.546 1831.95,228.705 1832.52,225.768 1833.09,223.95 1833.66,225.327 1834.23,226.725 1834.8,226.973 1835.36,228.315 1835.93,228.43 1836.5,227.422 1837.07,226.538 1837.64,225.698 1838.21,225.733 1838.77,226.965 1839.34,228.192 1839.91,227.314 1840.48,227.613 1841.05,226.855 1841.62,226.285 1842.18,229.659 1842.75,229.682 1843.32,230.768 1843.89,232.717 1844.46,231.564 1845.03,231.405 1845.59,230.428 1846.16,230.389 1846.73,230.435 1847.3,229.555 1847.87,228.9 1848.44,231.089 1849,231.079 1849.57,230.984 1850.14,230.071 1850.71,230.256 1851.28,229.182 1851.85,229.295 1852.41,227.466 1852.98,229.577 1853.55,229.593 1854.12,230.524 1854.69,230.452 1855.26,231.576 1855.82,233.718 1856.39,234.326 1856.96,234.215 1857.53,232.892 1858.1,230.762 1858.67,231.752 1859.23,230.818 1859.8,228.747 1860.37,229.873 1860.94,230.768 1861.51,230.848 1862.08,230.774 1862.64,229.581 1863.21,228.779 1863.78,229.792 1864.35,232.04 1864.92,232.018 1865.49,232.821 1866.05,232.533 1866.62,231.373 1867.19,232.431 1867.76,231.482 1868.33,230.245 1868.9,232.121 1869.46,233.078 1870.03,232.762 1870.6,229.525 1871.17,226.656 1871.74,226.108 1872.31,225.24 1872.87,227.831 1873.44,228.837 1874.01,228.944 1874.58,229.188 1875.15,230.318 1875.72,231.243 1876.28,232.444 1876.85,233.304 1877.42,231.05 1877.99,230.006 1878.56,230.216 1879.13,229.036 1879.69,230.052 1880.26,230.217 1880.83,231.19 1881.4,231.17 1881.97,231.154 1882.54,231.212 1883.1,232.204 1883.67,231.96 1884.24,232.764 1884.81,232.55 1885.38,233.395 1885.95,236.488 1886.51,235.085 1887.08,234.736 1887.65,231.354 1888.22,231.34 1888.79,231.243 1889.36,231.313 1889.92,232.214 1890.49,231.013 1891.06,230.863 1891.63,230.8 1892.2,229.586 1892.77,228.598 1893.33,228.73 1893.9,227.775 1894.47,227.922 1895.04,230.089 1895.61,232.298 1896.18,233.16 1896.74,232.816 1897.31,232.582 1897.88,232.252 1898.45,230.079 1899.02,230.937 1899.59,233.128 1900.16,232.649 1900.72,232.429 1901.29,230.009 1901.86,228.829 1902.43,225.829 1903,224.031 1903.57,224.342 1904.13,226.688 1904.7,226.831 1905.27,230.153 1905.84,230.266 1906.41,230.274 1906.98,231.439 1907.54,232.242 1908.11,229.306 1908.68,230.197 1909.25,230.031 1909.82,228.916 1910.39,228.944 1910.95,226.001 1911.52,227.253 1912.09,228.492 1912.66,227.658 1913.23,228.715 1913.8,227.784 1914.36,227.981 1914.93,229.163 1915.5,227.305 1916.07,227.425 1916.64,232.887 1917.21,232.546 1917.77,232.388 1918.34,232.275 1918.91,232.326 1919.48,233.286 1920.05,229.951 1920.62,231.09 1921.18,230.003 1921.75,231.073 1922.32,230.877 1922.89,230.792 1923.46,232.904 1924.03,231.721 1924.59,232.586 1925.16,233.379 1925.73,234.221 1926.3,234.777 1926.87,234.413 1927.44,234.167 1928,238.078 1928.57,237.655 1929.14,237.075 1929.71,237.399 1930.28,237.841 1930.85,235.141 1931.41,235.54 1931.98,234.903 1932.55,236.69 1933.12,235.156 1933.69,233.777 1934.26,233.325 1934.82,230.858 1935.39,228.757 1935.96,227.863 1936.53,228.968 1937.1,229.018 1937.67,229.015 1938.23,231.146 1938.8,233.075 1939.37,232.999 1939.94,230.974 1940.51,228.748 1941.08,228.824 1941.64,230.032 1942.21,228.958 1942.78,228.913 1943.35,227.901 1943.92,227.957 1944.49,228.306 1945.05,229.229 1945.62,229.433 1946.19,231.782 1946.76,230.513 1947.33,231.518 1947.9,231.279 1948.46,230.372 1949.03,230.377 1949.6,229.686 1950.17,227.632 1950.74,225.583 1951.31,224.992 1951.87,224.371 1952.44,224.85 1953.01,225.462 1953.58,224.782 1954.15,226.3 1954.72,226.71 1955.28,230.03 1955.85,230.185 1956.42,231.2 1956.99,232.26 1957.56,231.215 1958.13,230.423 1958.69,230.365 1959.26,229.55 1959.83,229.387 1960.4,229.319 1960.97,227.37 1961.54,226.682 1962.1,228.794 1962.67,229.972 1963.24,228.949 1963.81,231.199 1964.38,231.175 1964.95,233.22 1965.51,231.951 1966.08,232.871 1966.65,233.816 1967.22,232.341 1967.79,232.263 1968.36,231.114 1968.92,233.209 1969.49,230.844 1970.06,228.699 1970.63,229.653 1971.2,230.893 1971.77,230.752 1972.34,229.707 1972.9,228.543 1973.47,229.59 1974.04,227.64 1974.61,226.479 1975.18,226.713 1975.75,226.708 1976.31,225.048 1976.88,226.493 1977.45,225.849 1978.02,225.152 1978.59,223.555 1979.16,226.194 1979.72,225.318 1980.29,224.943 1980.86,225.444 1981.43,224.903 1982,226.603 1982.57,226.815 1983.13,230.38 1983.7,232.656 1984.27,231.423 1984.84,232.451 1985.41,231.289 1985.98,230.148 1986.54,233.424 1987.11,234.094 1987.68,232.939 1988.25,232.776 1988.82,235.663 1989.39,236.219 1989.95,233.794 1990.52,232.536 1991.09,231.615 1991.66,230.472 1992.23,227.439 1992.8,228.779 1993.36,227.803 1993.93,231.941 1994.5,231.874 1995.07,229.853 1995.64,229.931 1996.21,230.098 1996.77,229.297 1997.34,228.577 1997.91,226.714 1998.48,225.753 1999.05,226.263 1999.62,227.723 2000.18,225.871 2000.75,226.286 2001.32,225.579 2001.89,225.999 2002.46,228.558 2003.03,227.705 2003.59,226.957 2004.16,228.214 2004.73,228.437 2005.3,230.656 2005.87,230.839 2006.44,231.905 2007,233.977 2007.57,232.904 2008.14,231.904 2008.71,233.808 2009.28,233.285 2009.85,232.004 2010.41,235.27 2010.98,236.313 2011.55,235.715 2012.12,236.599 2012.69,234.11 2013.26,233.629 2013.82,233.56 2014.39,238.314 2014.96,234.813 2015.53,232.429 2016.1,233.413 2016.67,233.266 2017.23,231.132 2017.8,231.256 2018.37,235.411 2018.94,236.008 2019.51,238.516 2020.08,236.881 2020.64,236.323 2021.21,235.732 2021.78,236.245 2022.35,235.811 2022.92,236.475 2023.49,233.89 2024.05,234.768 2024.62,234.527 2025.19,233.025 2025.76,234.774 2026.33,233.471 2026.9,233.25 2027.46,234.047 2028.03,233.657 2028.6,232.631 2029.17,231.303 2029.74,233.16 2030.31,233.893 2030.87,234.467 2031.44,234.34 2032.01,233.732 2032.58,233.131 2033.15,229.841 2033.72,228.796 2034.28,229.863 2034.85,230.941 2035.42,231.758 2035.99,231.695 2036.56,230.76 2037.13,229.547 2037.69,227.486 2038.26,229.605 2038.83,228.585 2039.4,228.546 2039.97,227.612 2040.54,225.615 2041.11,225.802 2041.67,226.745 2042.24,226.922 2042.81,226.04 2043.38,225.999 2043.95,228.325 2044.52,229.24 2045.08,230.224 2045.65,230.068 2046.22,228.832 2046.79,228.879 2047.36,228.77 2047.93,228.886 2048.49,228.566 2049.06,228.466 2049.63,227.441 2050.2,228.747 2050.77,228.592 2051.34,228.673 2051.9,228.777 2052.47,227.879 2053.04,227.84 2053.61,228.991 2054.18,228.162 2054.75,228.277 2055.31,228.24 2055.88,228.451 2056.45,232.842 2057.02,233.529 2057.59,232.146 2058.16,232.18 2058.72,232.098 2059.29,233.623 2059.86,232.388 2060.43,232.116 2061,230.843 2061.57,231.087 2062.13,232.022 2062.7,230.734 2063.27,229.828 2063.84,230.964 2064.41,231.11 2064.98,232.123 2065.54,229.114 2066.11,230.267 2066.68,229.132 2067.25,227.242 2067.82,225.412 2068.39,224.618 2068.95,224.941 2069.52,226.44 2070.09,227.599 2070.66,228.569 2071.23,230.785 2071.8,230.495 2072.36,230.434 2072.93,227.556 2073.5,227.71 2074.07,228.017 2074.64,227.103 2075.21,228.292 2075.77,229.499 2076.34,227.489 2076.91,228.749 2077.48,229.799 2078.05,230.842 2078.62,231.002 2079.18,232.919 2079.75,231.733 2080.32,229.562 2080.89,229.707 2081.46,230.001 2082.03,229.246 2082.59,230.415 2083.16,232.584 2083.73,234.506 2084.3,234.212 2084.87,234.515 2085.44,235.327 2086,233.029 2086.57,233.834 2087.14,229.491 2087.71,229.548 2088.28,229.658 2088.85,228.608 2089.41,227.801 2089.98,226.987 2090.55,227.384 2091.12,226.669 2091.69,226.908 2092.26,227.058 2092.82,228.268 2093.39,228.498 2093.96,228.54 2094.53,228.746 2095.1,229.982 2095.67,228.831 2096.23,228.118 2096.8,227.22 2097.37,227.692 2097.94,227.932 2098.51,226.93 2099.08,227.43 2099.64,227.607 2100.21,228.754 2100.78,229.791 2101.35,230.816 2101.92,228.733 2102.49,227.772 2103.05,226.032 2103.62,227.433 2104.19,228.805 2104.76,229.039 2105.33,228.945 2105.9,228.953 2106.46,230.111 2107.03,233.378 2107.6,234.392 2108.17,234.282 2108.74,235.265 2109.31,234.01 2109.87,234.939 2110.44,234.645 2111.01,234.142 2111.58,231.988 2112.15,232.772 2112.72,233.88 2113.29,235.749 2113.85,234.145 2114.42,233.645 2114.99,231.413 2115.56,230.351 2116.13,233.401 2116.7,232.099 2117.26,230.003 2117.83,227.896 2118.4,228.128 2118.97,227.157 2119.54,227.363 2120.11,227.866 2120.67,228.127 2121.24,229.347 2121.81,228.49 2122.38,229.697 2122.95,227.847 2123.52,225.841 2124.08,225.364 2124.65,226.713 2125.22,228.139 2125.79,229.508 2126.36,228.722 2126.93,229.923 2127.49,229.965 2128.06,230.954 2128.63,233 2129.2,233.935 2129.77,233.78 2130.34,235.43 2130.9,239.17 2131.47,236.405 2132.04,235.943 2132.61,234.374 2133.18,234.051 2133.75,232.71 2134.31,231.34 2134.88,231.181 2135.45,232.102 2136.02,229.128 2136.59,227.213 2137.16,226.349 2137.72,228.74 2138.29,229 2138.86,229.096 2139.43,231.159 2140,233.017 2140.57,232.898 2141.13,233.792 2141.7,232.544 2142.27,233.165 2142.84,233.044 2143.41,232.878 2143.98,233.674 2144.54,231.351 2145.11,232.297 2145.68,231.293 2146.25,230.232 2146.82,231.293 2147.39,229.123 2147.95,230.119 2148.52,230.119 2149.09,228.12 2149.66,227.256 2150.23,225.256 2150.8,224.608 2151.36,226.056 2151.93,229.413 2152.5,230.522 2153.07,230.481 2153.64,232.3 2154.21,234.273 2154.77,234.041 2155.34,233.648 2155.91,235.467 2156.48,235.085 2157.05,234.607 2157.62,234.159 2158.18,233.955 2158.75,233.729 2159.32,232.447 2159.89,233.334 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip310)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.032 ± 0.018\n  with uncertainty of ± 0.0011303587317383673\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.02019 ± (0.00261183, 0.00267013) (MC)\n  95% confidence interval: [-4.02515, -4.01494] (MC)\n  linear error propagation: -4.02015 ± 0.00263373\n  |δ_y| = |0.00136951| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.020191896247896, val_l = 0.004958036583706971, val_u = 0.005255164625949327)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip340\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip340)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip341\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip340)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip342\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1148.3 2211.02,1148.3 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,983.951 2211.02,983.951 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,819.602 2211.02,819.602 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,655.254 2211.02,655.254 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,490.906 2211.02,490.906 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,326.558 2211.02,326.558 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1148.3 365.751,1148.3 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,983.951 365.751,983.951 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,819.602 365.751,819.602 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,655.254 365.751,655.254 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,490.906 365.751,490.906 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,326.558 365.751,326.558 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M298.909 1134.1 Q295.298 1134.1 293.469 1137.66 Q291.664 1141.2 291.664 1148.33 Q291.664 1155.44 293.469 1159 Q295.298 1162.55 298.909 1162.55 Q302.543 1162.55 304.349 1159 Q306.177 1155.44 306.177 1148.33 Q306.177 1141.2 304.349 1137.66 Q302.543 1134.1 298.909 1134.1 M298.909 1130.39 Q304.719 1130.39 307.775 1135 Q310.853 1139.58 310.853 1148.33 Q310.853 1157.06 307.775 1161.67 Q304.719 1166.25 298.909 1166.25 Q293.099 1166.25 290.02 1161.67 Q286.964 1157.06 286.964 1148.33 Q286.964 1139.58 290.02 1135 Q293.099 1130.39 298.909 1130.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M259.557 997.295 L267.196 997.295 L267.196 970.93 L258.886 972.596 L258.886 968.337 L267.15 966.671 L271.826 966.671 L271.826 997.295 L279.465 997.295 L279.465 1001.23 L259.557 1001.23 L259.557 997.295 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M298.909 969.749 Q295.298 969.749 293.469 973.314 Q291.664 976.856 291.664 983.985 Q291.664 991.092 293.469 994.657 Q295.298 998.198 298.909 998.198 Q302.543 998.198 304.349 994.657 Q306.177 991.092 306.177 983.985 Q306.177 976.856 304.349 973.314 Q302.543 969.749 298.909 969.749 M298.909 966.046 Q304.719 966.046 307.775 970.652 Q310.853 975.235 310.853 983.985 Q310.853 992.712 307.775 997.319 Q304.719 1001.9 298.909 1001.9 Q293.099 1001.9 290.02 997.319 Q286.964 992.712 286.964 983.985 Q286.964 975.235 290.02 970.652 Q293.099 966.046 298.909 966.046 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M262.775 832.947 L279.094 832.947 L279.094 836.882 L257.15 836.882 L257.15 832.947 Q259.812 830.193 264.395 825.563 Q269.002 820.91 270.182 819.568 Q272.428 817.045 273.307 815.309 Q274.21 813.549 274.21 811.859 Q274.21 809.105 272.266 807.369 Q270.344 805.633 267.242 805.633 Q265.043 805.633 262.59 806.397 Q260.159 807.16 257.381 808.711 L257.381 803.989 Q260.205 802.855 262.659 802.276 Q265.113 801.697 267.15 801.697 Q272.52 801.697 275.715 804.383 Q278.909 807.068 278.909 811.559 Q278.909 813.688 278.099 815.609 Q277.312 817.508 275.205 820.1 Q274.627 820.771 271.525 823.989 Q268.423 827.183 262.775 832.947 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M298.909 805.401 Q295.298 805.401 293.469 808.966 Q291.664 812.508 291.664 819.637 Q291.664 826.744 293.469 830.308 Q295.298 833.85 298.909 833.85 Q302.543 833.85 304.349 830.308 Q306.177 826.744 306.177 819.637 Q306.177 812.508 304.349 808.966 Q302.543 805.401 298.909 805.401 M298.909 801.697 Q304.719 801.697 307.775 806.304 Q310.853 810.887 310.853 819.637 Q310.853 828.364 307.775 832.97 Q304.719 837.554 298.909 837.554 Q293.099 837.554 290.02 832.97 Q286.964 828.364 286.964 819.637 Q286.964 810.887 290.02 806.304 Q293.099 801.697 298.909 801.697 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M272.914 653.9 Q276.27 654.618 278.145 656.886 Q280.043 659.155 280.043 662.488 Q280.043 667.604 276.525 670.405 Q273.006 673.206 266.525 673.206 Q264.349 673.206 262.034 672.766 Q259.742 672.349 257.289 671.493 L257.289 666.979 Q259.233 668.113 261.548 668.692 Q263.863 669.27 266.386 669.27 Q270.784 669.27 273.076 667.534 Q275.39 665.798 275.39 662.488 Q275.39 659.433 273.238 657.72 Q271.108 655.983 267.289 655.983 L263.261 655.983 L263.261 652.141 L267.474 652.141 Q270.923 652.141 272.752 650.775 Q274.58 649.386 274.58 646.794 Q274.58 644.132 272.682 642.72 Q270.807 641.285 267.289 641.285 Q265.367 641.285 263.168 641.701 Q260.969 642.118 258.33 642.997 L258.33 638.831 Q260.992 638.09 263.307 637.72 Q265.645 637.349 267.705 637.349 Q273.029 637.349 276.131 639.78 Q279.233 642.187 279.233 646.308 Q279.233 649.178 277.59 651.169 Q275.946 653.136 272.914 653.9 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M298.909 641.053 Q295.298 641.053 293.469 644.618 Q291.664 648.159 291.664 655.289 Q291.664 662.395 293.469 665.96 Q295.298 669.502 298.909 669.502 Q302.543 669.502 304.349 665.96 Q306.177 662.395 306.177 655.289 Q306.177 648.159 304.349 644.618 Q302.543 641.053 298.909 641.053 M298.909 637.349 Q304.719 637.349 307.775 641.956 Q310.853 646.539 310.853 655.289 Q310.853 664.016 307.775 668.622 Q304.719 673.206 298.909 673.206 Q293.099 673.206 290.02 668.622 Q286.964 664.016 286.964 655.289 Q286.964 646.539 290.02 641.956 Q293.099 637.349 298.909 637.349 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M271.594 477.7 L259.789 496.149 L271.594 496.149 L271.594 477.7 M270.367 473.626 L276.247 473.626 L276.247 496.149 L281.177 496.149 L281.177 500.038 L276.247 500.038 L276.247 508.186 L271.594 508.186 L271.594 500.038 L255.992 500.038 L255.992 495.524 L270.367 473.626 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M298.909 476.705 Q295.298 476.705 293.469 480.27 Q291.664 483.811 291.664 490.941 Q291.664 498.047 293.469 501.612 Q295.298 505.154 298.909 505.154 Q302.543 505.154 304.349 501.612 Q306.177 498.047 306.177 490.941 Q306.177 483.811 304.349 480.27 Q302.543 476.705 298.909 476.705 M298.909 473.001 Q304.719 473.001 307.775 477.608 Q310.853 482.191 310.853 490.941 Q310.853 499.668 307.775 504.274 Q304.719 508.857 298.909 508.857 Q293.099 508.857 290.02 504.274 Q286.964 499.668 286.964 490.941 Q286.964 482.191 290.02 477.608 Q293.099 473.001 298.909 473.001 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M258.793 309.278 L277.15 309.278 L277.15 313.213 L263.076 313.213 L263.076 321.685 Q264.094 321.338 265.113 321.176 Q266.131 320.991 267.15 320.991 Q272.937 320.991 276.316 324.162 Q279.696 327.334 279.696 332.75 Q279.696 338.329 276.224 341.431 Q272.752 344.509 266.432 344.509 Q264.256 344.509 261.988 344.139 Q259.742 343.769 257.335 343.028 L257.335 338.329 Q259.418 339.463 261.641 340.019 Q263.863 340.574 266.34 340.574 Q270.344 340.574 272.682 338.468 Q275.02 336.361 275.02 332.75 Q275.02 329.139 272.682 327.033 Q270.344 324.926 266.34 324.926 Q264.465 324.926 262.59 325.343 Q260.738 325.759 258.793 326.639 L258.793 309.278 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M298.909 312.357 Q295.298 312.357 293.469 315.922 Q291.664 319.463 291.664 326.593 Q291.664 333.699 293.469 337.264 Q295.298 340.806 298.909 340.806 Q302.543 340.806 304.349 337.264 Q306.177 333.699 306.177 326.593 Q306.177 319.463 304.349 315.922 Q302.543 312.357 298.909 312.357 M298.909 308.653 Q304.719 308.653 307.775 313.26 Q310.853 317.843 310.853 326.593 Q310.853 335.32 307.775 339.926 Q304.719 344.509 298.909 344.509 Q293.099 344.509 290.02 339.926 Q286.964 335.32 286.964 326.593 Q286.964 317.843 290.02 313.26 Q293.099 308.653 298.909 308.653 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip342)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1027.2 400.199,915.952 400.786,813.875 401.372,720.356 401.958,634.825 402.545,556.755 403.131,485.657 403.718,421.078 404.304,362.593 404.891,309.81 405.477,262.359 406.063,219.895 406.65,347.656 407.236,306.948 407.823,270.677 408.409,238.554 408.995,330.944 409.582,301.4 410.168,275.466 410.755,252.903 411.341,233.489 411.927,260.195 412.514,245.78 413.1,307.847 413.687,293.739 414.273,315.499 414.86,305.146 415.446,324.802 416.032,316.572 416.619,335.347 417.205,330.834 417.792,328.219 418.378,348.18 418.964,348.247 419.551,385.768 420.137,386.556 420.724,389.572 421.31,393.191 421.896,426.487 422.483,431.723 423.069,437.16 423.656,455.652 424.242,484.651 424.829,490.186 425.415,506.719 426.001,513.593 426.588,520.324 427.174,536.657 427.761,544.749 428.347,569.623 428.933,577.879 429.52,594.94 430.106,602.92 430.693,611.291 431.279,626.534 431.865,636.002 432.452,645.601 433.038,655.05 433.625,687.02 434.211,700.682 434.798,734.508 435.384,747.313 435.97,763.465 436.557,788.154 437.143,807.485 437.73,825.804 438.316,847.375 438.902,855.846 439.489,860.446 440.075,872.827 440.662,884.768 441.248,892.841 441.835,903.961 442.421,912.096 443.007,919.901 443.594,933.373 444.18,940.716 444.767,948.061 445.353,952.7 445.939,965.3 446.526,969.244 447.112,975.744 447.699,984.97 448.285,991.529 448.871,1003.14 449.458,1011.53 450.044,1017.16 450.631,1025.59 451.217,1033.87 451.804,1039.34 452.39,1047.29 452.976,1052.45 453.563,1057.72 454.149,1060.25 454.736,1067.76 455.322,1072.72 455.908,1077.63 456.495,1082.21 457.081,1086.64 457.668,1091.05 458.254,1093.3 458.84,1101.76 459.427,1109.91 460.013,1111.94 460.6,1118.29 461.186,1122.02 461.773,1127.61 462.359,1135.08 462.945,1134.62 463.532,1138.19 464.118,1141.69 464.705,1141.49 465.291,1148.41 465.877,1151.56 466.464,1158.05 467.05,1162.39 467.637,1167.08 468.223,1171.31 468.809,1177.44 469.396,1183.21 469.982,1183.65 470.569,1179.16 471.155,1181.8 471.742,1182.57 472.328,1184.87 472.914,1190.77 473.501,1193.03 474.087,1191.57 474.674,1192.04 475.26,1194.41 475.846,1195.15 476.433,1195.81 477.019,1201.38 477.606,1202.13 478.192,1204.15 478.778,1207.61 479.365,1209.32 479.951,1215.64 480.538,1215.72 481.124,1221.87 481.711,1224.72 482.297,1226.01 482.883,1225.59 483.47,1226.76 484.056,1223.22 484.643,1224.53 485.229,1227.35 485.815,1225.67 486.402,1227.04 486.988,1228.39 487.575,1227.92 488.161,1229.11 488.748,1229.24 489.334,1227.54 489.92,1227.22 490.507,1223.99 491.093,1224.22 491.68,1225.81 492.266,1225.94 492.852,1225.93 493.439,1230.41 494.025,1233.33 494.612,1233.11 495.198,1234.13 495.784,1233.93 496.371,1233.69 496.957,1234.79 497.544,1236.22 498.13,1235.98 498.717,1235.61 499.303,1235.29 499.889,1237.81 500.476,1237.19 501.062,1236.95 501.649,1235.36 502.235,1238.17 502.821,1237.78 503.408,1234.71 503.994,1237.1 504.581,1238.04 505.167,1237.96 505.753,1239.07 506.34,1244.33 506.926,1243.75 507.513,1242.89 508.099,1243.97 508.686,1243.44 509.272,1241.57 509.858,1243.78 510.445,1241.86 511.031,1243.92 511.618,1243.53 512.204,1245.87 512.79,1245.23 513.377,1244.59 513.963,1243.7 514.55,1244.57 515.136,1244.18 515.722,1243.64 516.309,1243.16 516.895,1242.74 517.482,1243.6 518.068,1245.87 518.655,1247.96 519.241,1249.86 519.827,1250.53 520.414,1248.44 521,1246.48 521.587,1245.72 522.173,1245.05 522.759,1244.52 523.346,1244.12 523.932,1242.21 524.519,1239.21 525.105,1240.35 525.691,1238.69 526.278,1239.9 526.864,1236.94 527.451,1235.68 528.037,1234.36 528.624,1234.39 529.21,1232.87 529.796,1232.92 530.383,1228.6 530.969,1231.74 531.556,1231.99 532.142,1236.14 532.728,1239 533.315,1239.01 533.901,1241.34 534.488,1240.89 535.074,1241.71 535.661,1239.86 536.247,1239.95 536.833,1239.79 537.42,1239.51 538.006,1242.09 538.593,1243.08 539.179,1245.08 539.765,1244.41 540.352,1242.68 540.938,1242.31 541.525,1241.84 542.111,1241.5 542.697,1239.81 543.284,1240.76 543.87,1240.34 544.457,1241.46 545.043,1243.74 545.63,1243.29 546.216,1241.65 546.802,1240.92 547.389,1240.42 547.975,1241.61 548.562,1239.61 549.148,1240.77 549.734,1241.85 550.321,1241.52 550.907,1241.27 551.494,1240.6 552.08,1238.66 552.666,1239.74 553.253,1237.9 553.839,1237.81 554.426,1238.84 555.012,1238.64 555.599,1240.91 556.185,1239.23 556.771,1240.36 557.358,1239.78 557.944,1236.85 558.531,1234.95 559.117,1234.85 559.703,1233.13 560.29,1234.42 560.876,1234.25 561.463,1234.35 562.049,1234.11 562.635,1234.18 563.222,1234.31 563.808,1234.22 564.395,1234.28 564.981,1234.21 565.568,1233.81 566.154,1234.92 566.74,1233.37 567.327,1231.92 567.913,1233.14 568.5,1235.63 569.086,1234.1 569.672,1238 570.259,1237.47 570.845,1236.06 571.432,1235.92 572.018,1237.02 572.605,1236.31 573.191,1235.86 573.777,1235.34 574.364,1235.13 574.95,1236.12 575.537,1235.59 576.123,1234.04 576.709,1232.54 577.296,1235.16 577.882,1236 578.469,1235.78 579.055,1235.56 579.641,1237.85 580.228,1235.85 580.814,1236.74 581.401,1234.92 581.987,1239.82 582.574,1240.54 583.16,1237.08 583.746,1236.84 584.333,1240.35 584.919,1239.71 585.506,1240.34 586.092,1239.89 586.678,1239.05 587.265,1238.17 587.851,1237.62 588.438,1238.23 589.024,1238.98 589.61,1242.35 590.197,1237.38 590.783,1234.2 591.37,1232.34 591.956,1232.1 592.543,1231.64 593.129,1232.79 593.715,1232.5 594.302,1232.32 594.888,1234.88 595.475,1237.23 596.061,1236.53 596.647,1237.59 597.234,1235.7 597.82,1235.25 598.407,1235.96 598.993,1238.41 599.579,1237.44 600.166,1236.82 600.752,1238.76 601.339,1238.13 601.925,1233.48 602.512,1231.85 603.098,1233.2 603.684,1232.92 604.271,1233.79 604.857,1238.66 605.444,1236.51 606.03,1231.97 606.616,1233.04 607.203,1228.33 607.789,1230.92 608.376,1233.49 608.962,1231.48 609.548,1230.8 610.135,1231.66 610.721,1233.8 611.308,1231.78 611.894,1232.73 612.481,1236.21 613.067,1240.9 613.653,1240.21 614.24,1237.95 614.826,1237.34 615.413,1235.23 615.999,1231.72 616.585,1232.57 617.172,1232.27 617.758,1230.47 618.345,1228.48 618.931,1228.26 619.518,1229.61 620.104,1229.16 620.69,1230.33 621.277,1232.7 621.863,1233.64 622.45,1230.38 623.036,1231.29 623.622,1229.59 624.209,1230.61 624.795,1228.98 625.382,1228.68 625.968,1229.65 626.554,1229.45 627.141,1229.29 627.727,1231.62 628.314,1229.76 628.9,1229.64 629.487,1230.62 630.073,1231.53 630.659,1231.3 631.246,1230.76 631.832,1228.65 632.419,1227.04 633.005,1228.24 633.591,1229.6 634.178,1229.12 634.764,1227.44 635.351,1228.49 635.937,1225.46 636.523,1225.14 637.11,1223.62 637.696,1223.76 638.283,1223.6 638.869,1223.53 639.456,1223.39 640.042,1223.32 640.628,1221.9 641.215,1223.28 641.801,1225.82 642.388,1228.79 642.974,1226.83 643.56,1226.41 644.147,1224.73 644.733,1226.04 645.32,1228.67 645.906,1230.95 646.492,1231.54 647.079,1231.21 647.665,1229.69 648.252,1227.77 648.838,1226.07 649.425,1225.93 650.011,1224.35 650.597,1224.21 651.184,1222.73 651.77,1221.19 652.357,1222.61 652.943,1225.22 653.529,1227.45 654.116,1225.74 654.702,1224.17 655.289,1224.03 655.875,1221.05 656.462,1221.17 657.048,1221.16 657.634,1219.95 658.221,1223.02 658.807,1225.56 659.394,1225.04 659.98,1224.92 660.566,1226.24 661.153,1224.71 661.739,1223.22 662.326,1221.86 662.912,1220.59 663.498,1219.33 664.085,1219.53 664.671,1219.55 665.258,1219.69 665.844,1222.43 666.431,1223.56 667.017,1224.84 667.603,1221.84 668.19,1220.48 668.776,1220.64 669.363,1221.89 669.949,1220.57 670.535,1219.46 671.122,1222.1 671.708,1223.38 672.295,1224.48 672.881,1225.68 673.467,1229.43 674.054,1230.3 674.64,1228.32 675.227,1230.56 675.813,1230.33 676.4,1229.62 676.986,1230.1 677.572,1230.77 678.159,1227.75 678.745,1224.67 679.332,1225.79 679.918,1226.99 680.504,1226.69 681.091,1224.83 681.677,1223.25 682.264,1223.06 682.85,1222.93 683.436,1220.22 684.023,1221.81 684.609,1223.25 685.196,1223.19 685.782,1220.29 686.369,1223.27 686.955,1223.24 687.541,1222.87 688.128,1221.22 688.714,1221.04 689.301,1219.54 689.887,1218.15 690.473,1218.31 691.06,1219.89 691.646,1219.9 692.233,1218.57 692.819,1218.93 693.405,1218.81 693.992,1221.51 694.578,1224.21 695.165,1222.85 695.751,1224.06 696.338,1228.01 696.924,1226.3 697.51,1226.14 698.097,1225.69 698.683,1226.93 699.27,1228.16 699.856,1226.11 700.442,1226.03 701.029,1227.04 701.615,1229.57 702.202,1230.4 702.788,1228.37 703.375,1230.45 703.961,1228.52 704.547,1227.86 705.134,1227.28 705.72,1228.25 706.307,1226.82 706.893,1226.14 707.479,1224.47 708.066,1222.74 708.652,1222.57 709.239,1222.52 709.825,1222.5 710.411,1222.54 710.998,1225.29 711.584,1223.78 712.171,1225.03 712.757,1224.73 713.344,1225.76 713.93,1222.63 714.516,1226.44 715.103,1223.6 715.689,1224.66 716.276,1222.91 716.862,1222.83 717.448,1223.98 718.035,1225.09 718.621,1227.55 719.208,1224.65 719.794,1224.3 720.38,1224.27 720.967,1222.79 721.553,1223.99 722.14,1223.47 722.726,1225.77 723.313,1224.27 723.899,1224.03 724.485,1226.78 725.072,1226.38 725.658,1225.84 726.245,1226.6 726.831,1224.71 727.417,1222.92 728.004,1218.73 728.59,1219.81 729.177,1219.77 729.763,1218.25 730.349,1218.15 730.936,1218.12 731.522,1222.37 732.109,1220.75 732.695,1223.39 733.282,1223.21 733.868,1222.93 734.454,1225.43 735.041,1222.2 735.627,1221.87 736.214,1221.59 736.8,1217.19 737.386,1217.34 737.973,1216.11 738.559,1216.44 739.146,1216.51 739.732,1215.32 740.318,1219.72 740.905,1221.02 741.491,1221.86 742.078,1218.69 742.664,1217.33 743.251,1214.75 743.837,1213.47 744.423,1213.76 745.01,1215.51 745.596,1214.44 746.183,1214.67 746.769,1207.88 747.355,1207.05 747.942,1207.46 748.528,1208.29 749.115,1207.71 749.701,1209.42 750.288,1209.49 750.874,1208.59 751.46,1209.2 752.047,1208.51 752.633,1208.97 753.22,1210.9 753.806,1215.28 754.392,1218.07 754.979,1218.09 755.565,1218.1 756.152,1216.86 756.738,1215.48 757.324,1218.53 757.911,1218.81 758.497,1218.86 759.084,1218.9 759.67,1219.1 760.257,1220.45 760.843,1220.21 761.429,1220.03 762.016,1221.1 762.602,1223.62 763.189,1221.95 763.775,1223.14 764.361,1220.3 764.948,1220.58 765.534,1217.78 766.121,1221.68 766.707,1222.84 767.293,1220.04 767.88,1219.88 768.466,1219.65 769.053,1216.8 769.639,1219.57 770.226,1218.21 770.812,1219.42 771.398,1219.24 771.985,1219.37 772.571,1219.24 773.158,1216.4 773.744,1213.69 774.33,1215.05 774.917,1213.66 775.503,1213.78 776.09,1215.11 776.676,1213.97 777.262,1216.51 777.849,1217.81 778.435,1216.5 779.022,1218.89 779.608,1216.1 780.195,1213.65 780.781,1214.02 781.367,1213.03 781.954,1214.85 782.54,1215.12 783.127,1216.45 783.713,1217.79 784.299,1216.48 784.886,1219.21 785.472,1216.34 786.059,1216.88 786.645,1218.22 787.232,1221.13 787.818,1219.57 788.404,1218.19 788.991,1216.6 789.577,1216.81 790.164,1216.78 790.75,1214.45 791.336,1214.68 791.923,1216.36 792.509,1219.04 793.096,1220.52 793.682,1221.8 794.268,1221.75 794.855,1221.29 795.441,1218.16 796.028,1217.82 796.614,1216.62 797.201,1217.08 797.787,1216.95 798.373,1217.24 798.96,1218.53 799.546,1216.93 800.133,1218.34 800.719,1219.65 801.305,1218.51 801.892,1215.46 802.478,1214.21 803.065,1216.93 803.651,1218.18 804.237,1215.38 804.824,1218.14 805.41,1219.3 805.997,1216.53 806.583,1219.12 807.17,1221.92 807.756,1227.06 808.342,1228.18 808.929,1229.12 809.515,1227.27 810.102,1227.6 810.688,1226.79 811.274,1229 811.861,1228.34 812.447,1227.84 813.034,1227.31 813.62,1226.55 814.206,1225.87 814.793,1225.59 815.379,1225.16 815.966,1223.56 816.552,1224.62 817.139,1224.3 817.725,1221.06 818.311,1223.16 818.898,1221.33 819.484,1226.53 820.071,1227.33 820.657,1229.15 821.243,1229.81 821.83,1227.95 822.416,1230.19 823.003,1233.48 823.589,1232.75 824.175,1231.88 824.762,1232.17 825.348,1229.8 825.935,1227.61 826.521,1224.34 827.108,1223.58 827.694,1220.31 828.28,1218.61 828.867,1219.91 829.453,1219.67 830.04,1219.41 830.626,1220.45 831.212,1221.46 831.799,1218.81 832.385,1224.22 832.972,1225.31 833.558,1227.57 834.145,1224.12 834.731,1225.22 835.317,1221.77 835.904,1218.7 836.49,1218.73 837.077,1217.21 837.663,1215.85 838.249,1214.57 838.836,1213.34 839.422,1216.24 840.009,1215.07 840.595,1216.68 841.181,1216.66 841.768,1216.7 842.354,1216.72 842.941,1218.01 843.527,1220.74 844.114,1220.69 844.7,1220.4 845.286,1221.36 845.873,1219.75 846.459,1220.04 847.046,1218.5 847.632,1218.31 848.218,1217.25 848.805,1215.72 849.391,1215.79 849.978,1213.02 850.564,1211.79 851.15,1213.38 851.737,1216.29 852.323,1216.45 852.91,1213.67 853.496,1212.5 854.083,1212.84 854.669,1216.02 855.255,1217.55 855.842,1218.87 856.428,1218.77 857.015,1221.48 857.601,1223.63 858.187,1223.43 858.774,1220.48 859.36,1218.9 859.947,1218.76 860.533,1215.91 861.119,1220.1 861.706,1217.01 862.292,1216.93 862.879,1219.4 863.465,1223 864.052,1223.82 864.638,1225.61 865.224,1225.26 865.811,1224.7 866.397,1222.95 866.984,1225.07 867.57,1225.76 868.156,1225.22 868.743,1226.14 869.329,1223.16 869.916,1226.72 870.502,1224.74 871.089,1222.99 871.675,1219.84 872.261,1219.45 872.848,1219.41 873.434,1218.42 874.021,1215.7 874.607,1214.25 875.193,1211.63 875.78,1211.83 876.366,1210.39 876.953,1209.24 877.539,1207.89 878.125,1208.31 878.712,1208.64 879.298,1208.89 879.885,1212.15 880.471,1213.58 881.058,1212.37 881.644,1212.49 882.23,1212.77 882.817,1212.96 883.403,1212.92 883.99,1212.9 884.576,1211.95 885.162,1210.7 885.749,1209.57 886.335,1211.19 886.922,1208.61 887.508,1206.38 888.094,1205.41 888.681,1204.77 889.267,1208.23 889.854,1212.72 890.44,1207.79 891.027,1206.79 891.613,1209.86 892.199,1210.15 892.786,1210.5 893.372,1209.43 893.959,1211.03 894.545,1211.4 895.131,1209.37 895.718,1208.54 896.304,1206.33 896.891,1208.44 897.477,1210.26 898.063,1210.55 898.65,1208.35 899.236,1207.3 899.823,1207.81 900.409,1207.07 900.996,1210.28 901.582,1206.52 902.168,1207 902.755,1204.61 903.341,1206.6 903.928,1209.6 904.514,1208.55 905.1,1210.36 905.687,1210.57 906.273,1212.14 906.86,1209.63 907.446,1212.57 908.032,1212.73 908.619,1214.25 909.205,1215.79 909.792,1217.1 910.378,1217.05 910.965,1215.78 911.551,1213.21 912.137,1213.48 912.724,1215.16 913.31,1213.81 913.897,1212.28 914.483,1213.65 915.069,1215.24 915.656,1215.34 916.242,1213.75 916.829,1210.98 917.415,1209.98 918.002,1210.37 918.588,1207.91 919.174,1208.73 919.761,1207.76 920.347,1206.75 920.934,1208.31 921.52,1207.17 922.106,1208.9 922.693,1208.99 923.279,1206.8 923.866,1204.46 924.452,1206.04 925.038,1205.02 925.625,1202.92 926.211,1201.97 926.798,1204.63 927.384,1205.27 927.971,1205.88 928.557,1206.3 929.143,1208.18 929.73,1210 930.316,1210.07 930.903,1211.8 931.489,1209.37 932.075,1212.4 932.662,1209.66 933.248,1211.35 933.835,1210.23 934.421,1214.89 935.007,1216.26 935.594,1213.75 936.18,1215.43 936.767,1215.86 937.353,1216.93 937.94,1218.09 938.526,1217.93 939.112,1219.04 939.699,1217.6 940.285,1219 940.872,1218.92 941.458,1217.66 942.044,1219 942.631,1217.47 943.217,1218.81 943.804,1221.11 944.39,1218.12 944.976,1216.13 945.563,1218.64 946.149,1218.5 946.736,1219.61 947.322,1219.61 947.909,1216.77 948.495,1215.24 949.081,1215.15 949.668,1213.79 950.254,1215.18 950.841,1213.98 951.427,1211.76 952.013,1213.37 952.6,1217.41 953.186,1215.92 953.773,1215.74 954.359,1215.46 954.945,1216.62 955.532,1215.17 956.118,1212.56 956.705,1212.85 957.291,1215.41 957.878,1215.47 958.464,1216.63 959.05,1214.01 959.637,1216.86 960.223,1216.64 960.81,1217.85 961.396,1220.4 961.982,1220.07 962.569,1221.44 963.155,1219.72 963.742,1218.04 964.328,1219.16 964.915,1214.96 965.501,1213.72 966.087,1215.43 966.674,1216.53 967.26,1216.33 967.847,1214.99 968.433,1216.42 969.019,1217.32 969.606,1218.75 970.192,1217.28 970.779,1219.85 971.365,1219.74 971.951,1220.93 972.538,1220.64 973.124,1217.55 973.711,1217.48 974.297,1219.89 974.884,1220.87 975.47,1220.52 976.056,1218.86 976.643,1220.13 977.229,1223.64 977.816,1225.98 978.402,1227.97 978.988,1228.49 979.575,1226.4 980.161,1223.53 980.748,1222.88 981.334,1219.98 981.92,1218.45 982.507,1217.02 983.093,1213.95 983.68,1211.37 984.266,1210.4 984.853,1210.64 985.439,1210.7 986.025,1210.87 986.612,1213.98 987.198,1214.05 987.785,1216.77 988.371,1218.21 988.957,1217.74 989.544,1214.96 990.13,1215.05 990.717,1215.01 991.303,1217.77 991.889,1219.06 992.476,1217.36 993.062,1216.92 993.649,1215.65 994.235,1213.03 994.822,1214.52 995.408,1213.35 995.994,1210.92 996.581,1208.64 997.167,1209.19 997.754,1208.05 998.34,1213.87 998.926,1211.26 999.513,1212.71 1000.1,1211.55 1000.69,1213.06 1001.27,1215.75 1001.86,1217.13 1002.44,1214.41 1003.03,1217.2 1003.62,1217.21 1004.2,1216.97 1004.79,1216.94 1005.38,1218.02 1005.96,1218.13 1006.55,1217.81 1007.14,1219.1 1007.72,1220.23 1008.31,1217.22 1008.9,1214.62 1009.48,1217.3 1010.07,1216.92 1010.65,1221.97 1011.24,1220.2 1011.83,1217.39 1012.41,1218.5 1013,1218.23 1013.59,1219.37 1014.17,1216.58 1014.76,1219.19 1015.35,1217.51 1015.93,1214.67 1016.52,1214.69 1017.11,1213.24 1017.69,1215.95 1018.28,1215.89 1018.86,1216.95 1019.45,1216.72 1020.04,1215.74 1020.62,1217.04 1021.21,1216.79 1021.8,1215.22 1022.38,1216.52 1022.97,1217.81 1023.56,1217.42 1024.14,1214.73 1024.73,1216.03 1025.32,1214.53 1025.9,1213.24 1026.49,1211.79 1027.07,1212.05 1027.66,1212.06 1028.25,1210.95 1028.83,1211.45 1029.42,1212.96 1030.01,1213.12 1030.59,1212.08 1031.18,1213.59 1031.77,1213.7 1032.35,1213.55 1032.94,1216.58 1033.52,1218.93 1034.11,1218.52 1034.7,1217.28 1035.28,1218.36 1035.87,1218 1036.46,1220.69 1037.04,1219.29 1037.63,1217.83 1038.22,1218.87 1038.8,1217.52 1039.39,1218.72 1039.98,1219.61 1040.56,1221.85 1041.15,1221.78 1041.73,1223.96 1042.32,1221.1 1042.91,1220.84 1043.49,1221.91 1044.08,1221.66 1044.67,1218.52 1045.25,1219.76 1045.84,1219.45 1046.43,1219.33 1047.01,1221.94 1047.6,1223 1048.19,1218.28 1048.77,1218.34 1049.36,1215.23 1049.94,1215.11 1050.53,1213.92 1051.12,1212.79 1051.7,1212.75 1052.29,1211.48 1052.88,1213.17 1053.46,1214.35 1054.05,1212.93 1054.64,1213.12 1055.22,1214.59 1055.81,1214.53 1056.39,1214.87 1056.98,1217.53 1057.57,1217.34 1058.15,1218.4 1058.74,1218.22 1059.33,1217.98 1059.91,1218.91 1060.5,1218.56 1061.09,1220.89 1061.67,1223.24 1062.26,1223.01 1062.85,1219.82 1063.43,1222.33 1064.02,1222.1 1064.6,1220.15 1065.19,1215.83 1065.78,1214.47 1066.36,1214.53 1066.95,1211.86 1067.54,1213.32 1068.12,1213.23 1068.71,1209.31 1069.3,1209.39 1069.88,1208.51 1070.47,1209.03 1071.06,1208.04 1071.64,1208.23 1072.23,1207.1 1072.81,1204.87 1073.4,1205.57 1073.99,1207.52 1074.57,1207.87 1075.16,1210.82 1075.75,1212.47 1076.33,1214.11 1076.92,1214.13 1077.51,1216.75 1078.09,1215.51 1078.68,1216.55 1079.26,1216.36 1079.85,1215.01 1080.44,1214.74 1081.02,1214.63 1081.61,1214.51 1082.2,1212.97 1082.78,1213.04 1083.37,1210.47 1083.96,1211.98 1084.54,1211.97 1085.13,1211.95 1085.72,1212.08 1086.3,1212.24 1086.89,1211.04 1087.47,1211.07 1088.06,1212.5 1088.65,1212.32 1089.23,1212.65 1089.82,1212.55 1090.41,1210.09 1090.99,1211.86 1091.58,1209.3 1092.17,1207.18 1092.75,1206.27 1093.34,1206.85 1093.93,1210.15 1094.51,1211.77 1095.1,1211.88 1095.68,1212.07 1096.27,1212.26 1096.86,1213.57 1097.44,1215.11 1098.03,1213.76 1098.62,1212.21 1099.2,1215.23 1099.79,1214.11 1100.38,1215.54 1100.96,1214.16 1101.55,1214.39 1102.14,1214.45 1102.72,1214.57 1103.31,1214.82 1103.89,1216.15 1104.48,1213.72 1105.07,1213.8 1105.65,1211.25 1106.24,1210.3 1106.83,1207.75 1107.41,1207.92 1108,1209.48 1108.59,1211.27 1109.17,1211.58 1109.76,1211.74 1110.34,1211.87 1110.93,1214.65 1111.52,1213.48 1112.1,1214.73 1112.69,1214.76 1113.28,1215.01 1113.86,1216.59 1114.45,1213.99 1115.04,1209.85 1115.62,1208.72 1116.21,1210.54 1116.8,1210.79 1117.38,1212.95 1117.97,1213.23 1118.55,1209.38 1119.14,1211.07 1119.73,1208.33 1120.31,1208.68 1120.9,1209.1 1121.49,1209.46 1122.07,1209.59 1122.66,1209.94 1123.25,1210.14 1123.83,1210.42 1124.42,1210.77 1125.01,1211.15 1125.59,1210.19 1126.18,1211.68 1126.76,1213.41 1127.35,1212.18 1127.94,1213.86 1128.52,1211.94 1129.11,1215 1129.7,1215.36 1130.28,1215.26 1130.87,1212.45 1131.46,1211.27 1132.04,1211.26 1132.63,1211.34 1133.21,1213.04 1133.8,1213.15 1134.39,1211.8 1134.97,1213.24 1135.56,1211.85 1136.15,1213.24 1136.73,1214.7 1137.32,1213.42 1137.91,1214.55 1138.49,1215.98 1139.08,1217.29 1139.67,1216.88 1140.25,1218.32 1140.84,1219.33 1141.42,1219.01 1142.01,1220.24 1142.6,1219.99 1143.18,1223.49 1143.77,1224.3 1144.36,1225.08 1144.94,1224.54 1145.53,1225.27 1146.12,1224.97 1146.7,1222.97 1147.29,1221.28 1147.88,1222.36 1148.46,1226.98 1149.05,1228.73 1149.63,1229.35 1150.22,1226.08 1150.81,1226.68 1151.39,1224.72 1151.98,1224.36 1152.57,1223.66 1153.15,1223.47 1153.74,1223.02 1154.33,1221.36 1154.91,1219.58 1155.5,1219.26 1156.09,1220.29 1156.67,1218.52 1157.26,1215.52 1157.84,1212.81 1158.43,1211.58 1159.02,1215.86 1159.6,1217.07 1160.19,1214.36 1160.78,1213.24 1161.36,1211.7 1161.95,1213.5 1162.54,1214.11 1163.12,1215.6 1163.71,1216.73 1164.29,1214.04 1164.88,1217.03 1165.47,1217.14 1166.05,1218.37 1166.64,1218.18 1167.23,1219.29 1167.81,1220.43 1168.4,1221.5 1168.99,1219.85 1169.57,1219.6 1170.16,1216.63 1170.75,1218.02 1171.33,1219.43 1171.92,1218.93 1172.5,1218.55 1173.09,1216.98 1173.68,1216.98 1174.26,1216.7 1174.85,1216.85 1175.44,1218.09 1176.02,1219.33 1176.61,1216.55 1177.2,1216.67 1177.78,1214 1178.37,1215.58 1178.96,1215.54 1179.54,1216.95 1180.13,1217.9 1180.71,1217.71 1181.3,1218.71 1181.89,1217.51 1182.47,1216.03 1183.06,1214.66 1183.65,1216.12 1184.23,1217.64 1184.82,1214.5 1185.41,1211.83 1185.99,1212.04 1186.58,1216.28 1187.16,1218.85 1187.75,1217.44 1188.34,1218.72 1188.92,1214.58 1189.51,1214.65 1190.1,1214.6 1190.68,1213.2 1191.27,1214.57 1191.86,1213.22 1192.44,1217.41 1193.03,1217.03 1193.62,1215.83 1194.2,1214.34 1194.79,1215.72 1195.37,1218.59 1195.96,1218.5 1196.55,1218.17 1197.13,1217.83 1197.72,1216.26 1198.31,1214.66 1198.89,1214.67 1199.48,1216.23 1200.07,1216.07 1200.65,1217.43 1201.24,1214.6 1201.83,1213.22 1202.41,1215.81 1203,1215.8 1203.58,1215.76 1204.17,1215.59 1204.76,1214.29 1205.34,1214.38 1205.93,1214.72 1206.52,1212.4 1207.1,1216.54 1207.69,1217.91 1208.28,1220.51 1208.86,1219.96 1209.45,1221.03 1210.03,1220.9 1210.62,1219.21 1211.21,1221.69 1211.79,1221.03 1212.38,1220.75 1212.97,1221.59 1213.55,1218.77 1214.14,1218.33 1214.73,1215.54 1215.31,1212.68 1215.9,1212.77 1216.49,1212.8 1217.07,1214.16 1217.66,1217.01 1218.24,1214.34 1218.83,1214.51 1219.42,1214.44 1220,1214.55 1220.59,1213.29 1221.18,1209.53 1221.76,1208.47 1222.35,1206.11 1222.94,1208.96 1223.52,1210.43 1224.11,1209.26 1224.7,1213.52 1225.28,1213.71 1225.87,1214.94 1226.45,1214.98 1227.04,1213.66 1227.63,1213.88 1228.21,1213.96 1228.8,1208.59 1229.39,1207.57 1229.97,1208.01 1230.56,1208.36 1231.15,1210.28 1231.73,1206.24 1232.32,1207.92 1232.91,1208.46 1233.49,1207.46 1234.08,1209.04 1234.66,1210.36 1235.25,1211.84 1235.84,1211.84 1236.42,1210.48 1237.01,1210.67 1237.6,1209.7 1238.18,1210.33 1238.77,1210.79 1239.36,1211.15 1239.94,1214.03 1240.53,1214.06 1241.11,1212.92 1241.7,1215.69 1242.29,1215.75 1242.87,1215.82 1243.46,1217.01 1244.05,1212.69 1244.63,1210.11 1245.22,1214.63 1245.81,1211.9 1246.39,1213.15 1246.98,1213.21 1247.57,1213.07 1248.15,1214.3 1248.74,1215.95 1249.32,1218.47 1249.91,1219.63 1250.5,1219.72 1251.08,1219.65 1251.67,1222.2 1252.26,1223.12 1252.84,1222.82 1253.43,1220.92 1254.02,1217.87 1254.6,1217.8 1255.19,1219.08 1255.78,1218.81 1256.36,1215.85 1256.95,1218.47 1257.53,1220.83 1258.12,1218.95 1258.71,1220.01 1259.29,1218.49 1259.88,1218.41 1260.47,1216.61 1261.05,1215.12 1261.64,1212.08 1262.23,1210.65 1262.81,1212.23 1263.4,1212.36 1263.98,1215.09 1264.57,1216.5 1265.16,1212.48 1265.74,1212.5 1266.33,1212.55 1266.92,1209.64 1267.5,1211.31 1268.09,1207.38 1268.68,1207.69 1269.26,1208.13 1269.85,1209.82 1270.44,1211.6 1271.02,1214.14 1271.61,1215.48 1272.19,1215.55 1272.78,1218.2 1273.37,1218.33 1273.95,1214.21 1274.54,1216.84 1275.13,1218.42 1275.71,1222.41 1276.3,1218.09 1276.89,1218.04 1277.47,1220.44 1278.06,1220.12 1278.65,1217.05 1279.23,1215.54 1279.82,1212.9 1280.4,1213.27 1280.99,1213.22 1281.58,1216.03 1282.16,1214.62 1282.75,1211.77 1283.34,1211.92 1283.92,1209.24 1284.51,1209.51 1285.1,1211.13 1285.68,1211.05 1286.27,1212.66 1286.86,1211.36 1287.44,1209.89 1288.03,1209.83 1288.61,1208.79 1289.2,1204.74 1289.79,1205.19 1290.37,1206.57 1290.96,1204.37 1291.55,1207.43 1292.13,1206.51 1292.72,1206.72 1293.31,1205.67 1293.89,1204.8 1294.48,1205.39 1295.06,1205.9 1295.65,1206.62 1296.24,1205.86 1296.82,1205.25 1297.41,1207.05 1298,1207.41 1298.58,1207.66 1299.17,1209.31 1299.76,1208.29 1300.34,1208.71 1300.93,1210.39 1301.52,1209.57 1302.1,1212.76 1302.69,1212.84 1303.27,1214.25 1303.86,1211.63 1304.45,1211.42 1305.03,1215.54 1305.62,1211.55 1306.21,1212.83 1306.79,1215.54 1307.38,1218.4 1307.97,1214.05 1308.55,1215.35 1309.14,1218 1309.73,1220.34 1310.31,1219.96 1310.9,1222.51 1311.48,1222.12 1312.07,1221.68 1312.66,1221.51 1313.24,1220.16 1313.83,1219.69 1314.42,1219.3 1315,1220.37 1315.59,1218.82 1316.18,1222.55 1316.76,1222.25 1317.35,1221.78 1317.93,1218.57 1318.52,1219.5 1319.11,1219.31 1319.69,1219.27 1320.28,1220.37 1320.87,1220.07 1321.45,1221.35 1322.04,1219.55 1322.63,1220.77 1323.21,1218.87 1323.8,1213.38 1324.39,1214.77 1324.97,1214.6 1325.56,1214.41 1326.14,1214.18 1326.73,1209.95 1327.32,1211.79 1327.9,1213.3 1328.49,1213.19 1329.08,1213.24 1329.66,1210.75 1330.25,1212.03 1330.84,1213.46 1331.42,1215.1 1332.01,1215.41 1332.6,1214.01 1333.18,1215.4 1333.77,1217.96 1334.35,1215.17 1334.94,1213.52 1335.53,1212.35 1336.11,1212.35 1336.7,1213.82 1337.29,1213.64 1337.87,1213.36 1338.46,1212.19 1339.05,1213.49 1339.63,1210.71 1340.22,1210.9 1340.8,1212.51 1341.39,1213.94 1341.98,1214.02 1342.56,1213.85 1343.15,1213.99 1343.74,1212.77 1344.32,1216.86 1344.91,1218.06 1345.5,1216.81 1346.08,1216.74 1346.67,1216.73 1347.26,1216.4 1347.84,1216.23 1348.43,1216.09 1349.01,1211.8 1349.6,1209.3 1350.19,1205.58 1350.77,1209.09 1351.36,1209.71 1351.95,1214.05 1352.53,1212.71 1353.12,1211.55 1353.71,1210.54 1354.29,1209.23 1354.88,1208.27 1355.47,1205.86 1356.05,1206.56 1356.64,1205.57 1357.22,1208.68 1357.81,1211.94 1358.4,1212.28 1358.98,1210.78 1359.57,1209.64 1360.16,1211.08 1360.74,1211.29 1361.33,1212.55 1361.92,1212.58 1362.5,1212.76 1363.09,1212.7 1363.68,1212.58 1364.26,1213.94 1364.85,1215.43 1365.43,1216.66 1366.02,1216.37 1366.61,1214.75 1367.19,1213.23 1367.78,1210.35 1368.37,1209.21 1368.95,1209.42 1369.54,1209.49 1370.13,1212.41 1370.71,1215.41 1371.3,1214.11 1371.88,1212.91 1372.47,1212.9 1373.06,1207.54 1373.64,1207.95 1374.23,1213.32 1374.82,1214.61 1375.4,1214.43 1375.99,1217.04 1376.58,1219.58 1377.16,1219.27 1377.75,1216.44 1378.34,1217.65 1378.92,1217.42 1379.51,1215.91 1380.09,1215.95 1380.68,1214.48 1381.27,1215.9 1381.85,1217.47 1382.44,1218.53 1383.03,1215.75 1383.61,1215.74 1384.2,1216.98 1384.79,1219.37 1385.37,1220.16 1385.96,1222.56 1386.55,1221.98 1387.13,1220.15 1387.72,1218.64 1388.3,1218.44 1388.89,1216.87 1389.48,1218.03 1390.06,1213.52 1390.65,1212.44 1391.24,1211.14 1391.82,1212.52 1392.41,1208.25 1393,1207.08 1393.58,1207.4 1394.17,1209.18 1394.75,1209.18 1395.34,1206.93 1395.93,1207.45 1396.51,1210.46 1397.1,1207.87 1397.69,1209.39 1398.27,1208.15 1398.86,1205.74 1399.45,1207.47 1400.03,1210.54 1400.62,1211.91 1401.21,1210.54 1401.79,1209.56 1402.38,1212.37 1402.96,1213.88 1403.55,1216.59 1404.14,1217.69 1404.72,1216.43 1405.31,1219.15 1405.9,1219.07 1406.48,1218.81 1407.07,1219.91 1407.66,1218.24 1408.24,1222.02 1408.83,1221.4 1409.42,1220.92 1410,1219.33 1410.59,1216.57 1411.17,1218.01 1411.76,1216.45 1412.35,1217.61 1412.93,1219 1413.52,1219.09 1414.11,1220.3 1414.69,1219.82 1415.28,1219.61 1415.87,1215.59 1416.45,1218.39 1417.04,1217.06 1417.63,1215.74 1418.21,1215.52 1418.8,1214.04 1419.38,1212.75 1419.97,1212.86 1420.56,1212.99 1421.14,1215.89 1421.73,1215.94 1422.32,1216.18 1422.9,1213.31 1423.49,1213.13 1424.08,1215.72 1424.66,1215.6 1425.25,1214.29 1425.83,1211.49 1426.42,1210.11 1427.01,1213.12 1427.59,1214.65 1428.18,1216.99 1428.77,1213.99 1429.35,1212.66 1429.94,1214.02 1430.53,1210.24 1431.11,1209.41 1431.7,1209.81 1432.29,1212.83 1432.87,1214.28 1433.46,1214.03 1434.04,1212.71 1434.63,1210.11 1435.22,1208.86 1435.8,1210.6 1436.39,1212.19 1436.98,1210.89 1437.56,1211 1438.15,1214.04 1438.74,1213.94 1439.32,1212.79 1439.91,1212.67 1440.5,1214 1441.08,1215.24 1441.67,1213.65 1442.25,1212.43 1442.84,1215.24 1443.43,1218.22 1444.01,1215.16 1444.6,1216.5 1445.19,1216.43 1445.77,1215.03 1446.36,1211.17 1446.95,1211.46 1447.53,1213.21 1448.12,1212.11 1448.7,1212.07 1449.29,1211.04 1449.88,1210.24 1450.46,1210.48 1451.05,1209.42 1451.64,1208.35 1452.22,1207.31 1452.81,1206.74 1453.4,1208.51 1453.98,1212.19 1454.57,1212.34 1455.16,1210.89 1455.74,1208.5 1456.33,1210.18 1456.91,1212.07 1457.5,1211.02 1458.09,1211.4 1458.67,1211.8 1459.26,1210.67 1459.85,1209.5 1460.43,1209.76 1461.02,1208.71 1461.61,1210.14 1462.19,1211.64 1462.78,1212.87 1463.37,1214.09 1463.95,1214.08 1464.54,1215.56 1465.12,1215.69 1465.71,1214.27 1466.3,1216.81 1466.88,1215.6 1467.47,1216.68 1468.06,1216.56 1468.64,1217.7 1469.23,1216.17 1469.82,1214.83 1470.4,1213.16 1470.99,1212.96 1471.57,1211.82 1472.16,1209.41 1472.75,1212.43 1473.33,1214.26 1473.92,1211.43 1474.51,1210.08 1475.09,1213.14 1475.68,1212.15 1476.27,1209.68 1476.85,1209.97 1477.44,1211.67 1478.03,1211.95 1478.61,1212.06 1479.2,1213.63 1479.78,1212.37 1480.37,1212.23 1480.96,1212.15 1481.54,1215.14 1482.13,1215.12 1482.72,1215.15 1483.3,1213.83 1483.89,1215.36 1484.48,1214.57 1485.06,1210.37 1485.65,1211.95 1486.24,1213.34 1486.82,1214.58 1487.41,1213.2 1487.99,1218.53 1488.58,1220.98 1489.17,1223.2 1489.75,1223.11 1490.34,1225.36 1490.93,1223.41 1491.51,1223.16 1492.1,1224.13 1492.69,1223.61 1493.27,1224.2 1493.86,1222.52 1494.45,1220.8 1495.03,1217.91 1495.62,1216.35 1496.2,1218.97 1496.79,1220.21 1497.38,1221.23 1497.96,1220.8 1498.55,1218.95 1499.14,1217.52 1499.72,1219.79 1500.31,1220.73 1500.9,1217.66 1501.48,1220.27 1502.07,1220.11 1502.65,1223.74 1503.24,1223.27 1503.83,1223.98 1504.41,1224.77 1505,1224.2 1505.59,1222.45 1506.17,1221.99 1506.76,1227.02 1507.35,1223.59 1507.93,1224.64 1508.52,1222.62 1509.11,1219.69 1509.69,1219.4 1510.28,1219.15 1510.86,1218.7 1511.45,1215.59 1512.04,1212.74 1512.62,1212.86 1513.21,1213.93 1513.8,1210.22 1514.38,1214.45 1514.97,1210.66 1515.56,1211.81 1516.14,1210.74 1516.73,1208.19 1517.32,1212.6 1517.9,1212.66 1518.49,1212.87 1519.07,1212.98 1519.66,1213.03 1520.25,1210.34 1520.83,1210.67 1521.42,1212.13 1522.01,1209.66 1522.59,1211.42 1523.18,1210.44 1523.77,1210.45 1524.35,1210.64 1524.94,1210.81 1525.52,1208.6 1526.11,1207.28 1526.7,1209.1 1527.28,1211.76 1527.87,1212.11 1528.46,1212.45 1529.04,1211.68 1529.63,1210.47 1530.22,1210.52 1530.8,1209.35 1531.39,1209.18 1531.98,1209.51 1532.56,1209.67 1533.15,1211.38 1533.73,1211.81 1534.32,1218.75 1534.91,1217.19 1535.49,1215.65 1536.08,1218.1 1536.67,1219.33 1537.25,1216.02 1537.84,1217.29 1538.43,1215.81 1539.01,1215.95 1539.6,1213.14 1540.19,1213.31 1540.77,1213.28 1541.36,1217.41 1541.94,1216.06 1542.53,1218.64 1543.12,1219.88 1543.7,1218.33 1544.29,1219.65 1544.88,1215.26 1545.46,1215.04 1546.05,1217.58 1546.64,1220.42 1547.22,1220.12 1547.81,1218.2 1548.4,1219.24 1548.98,1218.98 1549.57,1217.14 1550.15,1216.95 1550.74,1216.86 1551.33,1216.66 1551.91,1216.24 1552.5,1214.81 1553.09,1213.3 1553.67,1212.03 1554.26,1212.3 1554.85,1213.61 1555.43,1210.95 1556.02,1208.26 1556.6,1208.34 1557.19,1207.53 1557.78,1207.8 1558.36,1208.02 1558.95,1207.17 1559.54,1208.74 1560.12,1212.85 1560.71,1211.92 1561.3,1213.28 1561.88,1211.92 1562.47,1208.17 1563.06,1211.09 1563.64,1212.63 1564.23,1212.81 1564.81,1214.15 1565.4,1215.49 1565.99,1217.9 1566.57,1217.91 1567.16,1220.28 1567.75,1222.38 1568.33,1222.2 1568.92,1220.44 1569.51,1219.96 1570.09,1216.95 1570.68,1220.75 1571.27,1221.76 1571.85,1218.72 1572.44,1218.51 1573.02,1216.98 1573.61,1217.03 1574.2,1216.81 1574.78,1216.69 1575.37,1216.63 1575.96,1216.68 1576.54,1217.58 1577.13,1220.21 1577.72,1222.24 1578.3,1220.63 1578.89,1217.64 1579.47,1218.89 1580.06,1218.77 1580.65,1217.55 1581.23,1211.86 1581.82,1211.87 1582.41,1210.5 1582.99,1213.53 1583.58,1213.68 1584.17,1213.61 1584.75,1214.87 1585.34,1213.42 1585.93,1213.47 1586.51,1216.17 1587.1,1216.09 1587.68,1213.56 1588.27,1210.6 1588.86,1212.18 1589.44,1211.01 1590.03,1213.59 1590.62,1212.35 1591.2,1213.82 1591.79,1214.04 1592.38,1214.07 1592.96,1215.24 1593.55,1216.5 1594.14,1217.67 1594.72,1217.55 1595.31,1216.18 1595.89,1215.9 1596.48,1217.2 1597.07,1217.44 1597.65,1217.53 1598.24,1217.34 1598.83,1217.24 1599.41,1215.79 1600,1214.48 1600.59,1213.02 1601.17,1211.8 1601.76,1212.39 1602.34,1212.83 1602.93,1210.62 1603.52,1209.41 1604.1,1206.94 1604.69,1207.37 1605.28,1203.69 1605.86,1205.41 1606.45,1207.13 1607.04,1210.03 1607.62,1210.32 1608.21,1209.05 1608.8,1209.25 1609.38,1212.28 1609.97,1213.74 1610.55,1213.86 1611.14,1214.98 1611.73,1216.49 1612.31,1217.7 1612.9,1218.98 1613.49,1218.7 1614.07,1221.09 1614.66,1220.55 1615.25,1220.35 1615.83,1218.73 1616.42,1214.23 1617.01,1215.57 1617.59,1214.25 1618.18,1213 1618.76,1213.13 1619.35,1214.44 1619.94,1215.88 1620.52,1214.51 1621.11,1213.21 1621.7,1215.03 1622.28,1209.78 1622.87,1208.88 1623.46,1209.35 1624.04,1212.61 1624.63,1212.78 1625.22,1212.77 1625.8,1213.89 1626.39,1209.8 1626.97,1208.49 1627.56,1206.99 1628.15,1207.59 1628.73,1210.55 1629.32,1211.92 1629.91,1214.85 1630.49,1213.31 1631.08,1212.2 1631.67,1212.28 1632.25,1209.42 1632.84,1209.86 1633.42,1209.99 1634.01,1208.7 1634.6,1209.18 1635.18,1212.18 1635.77,1214.7 1636.36,1214.81 1636.94,1214.85 1637.53,1214.39 1638.12,1214.64 1638.7,1213.37 1639.29,1212.24 1639.88,1213.8 1640.46,1213.6 1641.05,1209.43 1641.63,1208.1 1642.22,1208.1 1642.81,1209.84 1643.39,1211.66 1643.98,1211.98 1644.57,1212.08 1645.15,1217.49 1645.74,1215.97 1646.33,1217.33 1646.91,1217.07 1647.5,1212.96 1648.09,1213.1 1648.67,1213.26 1649.26,1214.76 1649.84,1215.71 1650.43,1216.96 1651.02,1217.12 1651.6,1216.98 1652.19,1216.7 1652.78,1219.18 1653.36,1219.03 1653.95,1219.02 1654.54,1220.03 1655.12,1217.04 1655.71,1215.5 1656.29,1219.56 1656.88,1221.79 1657.47,1221.63 1658.05,1221.41 1658.64,1220.91 1659.23,1221.88 1659.81,1220.27 1660.4,1221.36 1660.99,1223.9 1661.57,1225.91 1662.16,1225.23 1662.75,1223.15 1663.33,1222.86 1663.92,1220.96 1664.5,1220.8 1665.09,1220.48 1665.68,1218.93 1666.26,1217.02 1666.85,1215.55 1667.44,1214.19 1668.02,1214.21 1668.61,1217.04 1669.2,1216.89 1669.78,1216.32 1670.37,1217.36 1670.96,1221.09 1671.54,1219.57 1672.13,1217.95 1672.71,1217.63 1673.3,1217.49 1673.89,1213.35 1674.47,1210.7 1675.06,1210.95 1675.65,1211.08 1676.23,1211.33 1676.82,1211.6 1677.41,1210.51 1677.99,1212.35 1678.58,1210.73 1679.17,1210.75 1679.75,1210.82 1680.34,1209.7 1680.92,1212.51 1681.51,1211.08 1682.1,1210.17 1682.68,1211.61 1683.27,1210.68 1683.86,1210.84 1684.44,1212.17 1685.03,1210.92 1685.62,1211.17 1686.2,1208.69 1686.79,1213.13 1687.37,1213.21 1687.96,1210.83 1688.55,1209.51 1689.13,1211.39 1689.72,1213.06 1690.31,1216.02 1690.89,1216.02 1691.48,1217.52 1692.07,1214.85 1692.65,1212.47 1693.24,1211.52 1693.83,1214.32 1694.41,1215.62 1695,1212.79 1695.58,1212.91 1696.17,1213.05 1696.76,1215.68 1697.34,1213.96 1697.93,1212.6 1698.52,1209.99 1699.1,1207.65 1699.69,1205.19 1700.28,1207.02 1700.86,1208.82 1701.45,1208 1702.04,1209.37 1702.62,1209.66 1703.21,1212.77 1703.79,1211.44 1704.38,1209.23 1704.97,1207.8 1705.55,1209.5 1706.14,1211.13 1706.73,1208.77 1707.31,1210.37 1707.9,1210.68 1708.49,1212.27 1709.07,1212.23 1709.66,1212.39 1710.24,1211.13 1710.83,1211.5 1711.42,1213.03 1712,1213.12 1712.59,1214.35 1713.18,1214.39 1713.76,1214.27 1714.35,1212.91 1714.94,1215.64 1715.52,1214.19 1716.11,1216.89 1716.7,1216.86 1717.28,1220.58 1717.87,1220.29 1718.45,1218.68 1719.04,1221.19 1719.63,1223.89 1720.21,1223.41 1720.8,1219.07 1721.39,1217.54 1721.97,1219.98 1722.56,1219.81 1723.15,1220.96 1723.73,1220.6 1724.32,1221.33 1724.91,1222.25 1725.49,1221.77 1726.08,1219.86 1726.66,1221.26 1727.25,1220.7 1727.84,1220.58 1728.42,1220.19 1729.01,1218.64 1729.6,1221.16 1730.18,1219.43 1730.77,1218.85 1731.36,1217.16 1731.94,1217 1732.53,1214.38 1733.11,1216.97 1733.7,1219.71 1734.29,1219.34 1734.87,1220.65 1735.46,1220.36 1736.05,1221.14 1736.63,1222.16 1737.22,1220.46 1737.81,1221.61 1738.39,1219.88 1738.98,1220.93 1739.57,1220.74 1740.15,1220.11 1740.74,1219.7 1741.32,1220.93 1741.91,1223.25 1742.5,1223 1743.08,1222.73 1743.67,1220.71 1744.26,1221.61 1744.84,1215.96 1745.43,1214.18 1746.02,1212.84 1746.6,1213.96 1747.19,1215.19 1747.78,1215.27 1748.36,1213.77 1748.95,1213.55 1749.53,1210.9 1750.12,1210.86 1750.71,1212.28 1751.29,1213.73 1751.88,1212.28 1752.47,1215.29 1753.05,1215.34 1753.64,1214.15 1754.23,1214.46 1754.81,1212 1755.4,1211.99 1755.99,1212.26 1756.57,1214.69 1757.16,1212.14 1757.74,1209.98 1758.33,1211.6 1758.92,1212.01 1759.5,1212.23 1760.09,1216.43 1760.68,1217.65 1761.26,1216.29 1761.85,1216.28 1762.44,1214.87 1763.02,1213.57 1763.61,1215.17 1764.19,1213.95 1764.78,1212.57 1765.37,1213.82 1765.95,1215.04 1766.54,1217.46 1767.13,1217.41 1767.71,1214.56 1768.3,1213.26 1768.89,1213.16 1769.47,1213.03 1770.06,1214.26 1770.65,1215.66 1771.23,1216.75 1771.82,1216.57 1772.4,1215.18 1772.99,1215.16 1773.58,1219.03 1774.16,1218.76 1774.75,1219.92 1775.34,1216.97 1775.92,1219.41 1776.51,1219.14 1777.1,1216.33 1777.68,1215.33 1778.27,1215.41 1778.86,1212.67 1779.44,1212.62 1780.03,1209.86 1780.61,1209.95 1781.2,1206.35 1781.79,1206.69 1782.37,1205.77 1782.96,1206.22 1783.55,1203.82 1784.13,1205.89 1784.72,1206.24 1785.31,1206.37 1785.89,1206.89 1786.48,1204.63 1787.06,1203.81 1787.65,1207.02 1788.24,1206.1 1788.82,1205.25 1789.41,1203.15 1790,1203.76 1790.58,1204.4 1791.17,1203.79 1791.76,1204.54 1792.34,1209.03 1792.93,1213.3 1793.52,1213.63 1794.1,1213.71 1794.69,1214.83 1795.27,1216.07 1795.86,1218.91 1796.45,1219.79 1797.03,1218.18 1797.62,1216.5 1798.21,1217.8 1798.79,1220.23 1799.38,1218.81 1799.97,1219.66 1800.55,1220.49 1801.14,1220.33 1801.73,1218.59 1802.31,1217.22 1802.9,1217.3 1803.48,1216.61 1804.07,1216.37 1804.66,1214.6 1805.24,1217.15 1805.83,1217.11 1806.42,1217 1807,1214.04 1807.59,1211.16 1808.18,1212.32 1808.76,1211 1809.35,1213.65 1809.94,1213.62 1810.52,1210.75 1811.11,1210.89 1811.69,1211.11 1812.28,1211.3 1812.87,1211.49 1813.45,1210.28 1814.04,1209.13 1814.63,1209.68 1815.21,1210.06 1815.8,1210.24 1816.39,1207.62 1816.97,1210.53 1817.56,1211.98 1818.14,1213.18 1818.73,1215.87 1819.32,1217.03 1819.9,1215.6 1820.49,1219.46 1821.08,1221.93 1821.66,1220.31 1822.25,1218.63 1822.84,1218.41 1823.42,1216.76 1824.01,1216.66 1824.6,1218.02 1825.18,1219.25 1825.77,1220.44 1826.35,1220.51 1826.94,1219.04 1827.53,1217.53 1828.11,1218.73 1828.7,1218.43 1829.29,1219.48 1829.87,1220.31 1830.46,1216.04 1831.05,1216.03 1831.63,1214.64 1832.22,1212.09 1832.81,1213.54 1833.39,1213.71 1833.98,1214.96 1834.56,1215.02 1835.15,1214.96 1835.74,1216.1 1836.32,1216.98 1836.91,1214.17 1837.5,1214.17 1838.08,1214.28 1838.67,1215.45 1839.26,1215.22 1839.84,1216.63 1840.43,1216.51 1841.01,1218.92 1841.6,1216.25 1842.19,1216.25 1842.77,1215.07 1843.36,1215.16 1843.95,1213.7 1844.53,1210.87 1845.12,1210 1845.71,1210.04 1846.29,1211.68 1846.88,1214.39 1847.47,1213.09 1848.05,1214.28 1848.64,1216.96 1849.22,1215.54 1849.81,1214.39 1850.4,1214.28 1850.98,1214.37 1851.57,1215.91 1852.16,1216.98 1852.74,1215.7 1853.33,1212.8 1853.92,1212.79 1854.5,1211.7 1855.09,1212.01 1855.68,1213.47 1856.26,1212.07 1856.85,1213.26 1857.43,1214.84 1858.02,1212.41 1858.61,1211.12 1859.19,1211.46 1859.78,1215.62 1860.37,1219.37 1860.95,1220.18 1861.54,1221.41 1862.13,1218.19 1862.71,1216.95 1863.3,1216.85 1863.88,1216.57 1864.47,1215.14 1865.06,1213.94 1865.64,1212.35 1866.23,1211.18 1866.82,1214.05 1867.4,1215.39 1867.99,1215.13 1868.58,1216.67 1869.16,1215.39 1869.75,1215.18 1870.34,1213.92 1870.92,1213.93 1871.51,1213.93 1872.09,1213.84 1872.68,1212.53 1873.27,1212.8 1873.85,1211.72 1874.44,1211.94 1875.03,1210.78 1875.61,1206.67 1876.2,1208.35 1876.79,1208.68 1877.37,1212.99 1877.96,1212.99 1878.55,1213.09 1879.13,1212.98 1879.72,1211.78 1880.3,1213.3 1880.89,1213.49 1881.48,1213.56 1882.06,1215.13 1882.65,1216.44 1883.24,1216.31 1883.82,1217.6 1884.41,1217.48 1885,1214.72 1885.58,1211.86 1886.17,1210.69 1886.76,1211.07 1887.34,1211.31 1887.93,1211.69 1888.51,1214.47 1889.1,1213.37 1889.69,1210.5 1890.27,1211.06 1890.86,1211.29 1891.45,1214.39 1892.03,1215.94 1892.62,1219.87 1893.21,1222.32 1893.79,1222.08 1894.38,1219.2 1894.96,1219.11 1895.55,1214.89 1896.14,1214.75 1896.72,1214.74 1897.31,1213.23 1897.9,1212.16 1898.48,1215.94 1899.07,1214.81 1899.66,1215.03 1900.24,1216.49 1900.83,1216.5 1901.42,1220.36 1902,1218.85 1902.59,1217.32 1903.17,1218.45 1903.76,1217.15 1904.35,1218.41 1904.93,1218.22 1905.52,1216.75 1906.11,1219.19 1906.69,1219.12 1907.28,1212.09 1907.87,1212.47 1908.45,1212.63 1909.04,1212.73 1909.63,1212.61 1910.21,1211.31 1910.8,1215.59 1911.38,1214.12 1911.97,1215.52 1912.56,1214.14 1913.14,1214.38 1913.73,1214.48 1914.32,1211.72 1914.9,1213.2 1915.49,1212.04 1916.08,1210.95 1916.66,1209.78 1917.25,1208.96 1917.83,1209.32 1918.42,1209.54 1919.01,1204.33 1919.59,1204.69 1920.18,1205.26 1920.77,1204.67 1921.35,1203.91 1921.94,1207.26 1922.53,1206.62 1923.11,1207.32 1923.7,1204.87 1924.29,1206.72 1924.87,1208.4 1925.46,1208.91 1926.04,1212.05 1926.63,1214.77 1927.22,1215.98 1927.8,1214.61 1928.39,1214.59 1928.98,1214.63 1929.56,1211.89 1930.15,1209.36 1930.74,1209.39 1931.32,1211.97 1931.91,1214.85 1932.5,1214.8 1933.08,1213.27 1933.67,1214.68 1934.25,1214.77 1934.84,1216.13 1935.43,1216.12 1936.01,1215.73 1936.6,1214.59 1937.19,1214.35 1937.77,1211.32 1938.36,1212.94 1938.95,1211.63 1939.53,1211.92 1940.12,1213.08 1940.71,1213.07 1941.29,1213.98 1941.88,1216.67 1942.46,1219.4 1943.05,1220.29 1943.64,1221.23 1944.22,1220.76 1944.81,1220.12 1945.4,1221.12 1945.98,1219.3 1946.57,1218.88 1947.16,1214.66 1947.74,1214.47 1948.33,1213.16 1948.91,1211.76 1949.5,1213.07 1950.09,1214.09 1950.67,1214.16 1951.26,1215.23 1951.85,1215.46 1952.43,1215.58 1953.02,1218.14 1953.61,1219.11 1954.19,1216.47 1954.78,1214.98 1955.37,1216.32 1955.95,1213.43 1956.54,1213.44 1957.12,1210.76 1957.71,1212.35 1958.3,1211.11 1958.88,1209.81 1959.47,1211.65 1960.06,1211.71 1960.64,1213.16 1961.23,1210.41 1961.82,1213.43 1962.4,1216.21 1962.99,1215.01 1963.58,1213.42 1964.16,1213.59 1964.75,1214.94 1965.33,1216.48 1965.92,1215.17 1966.51,1217.72 1967.09,1219.3 1967.68,1219.1 1968.27,1219.2 1968.85,1221.45 1969.44,1219.71 1970.03,1220.65 1970.61,1221.67 1971.2,1223.87 1971.78,1220.63 1972.37,1221.88 1972.96,1222.49 1973.54,1221.99 1974.13,1222.82 1974.72,1220.76 1975.3,1220.58 1975.89,1216.04 1976.48,1213.08 1977.06,1214.63 1977.65,1213.27 1978.24,1214.73 1978.82,1216.19 1979.41,1211.93 1979.99,1210.98 1980.58,1212.4 1981.17,1212.55 1981.75,1208.72 1982.34,1207.86 1982.93,1210.88 1983.51,1212.44 1984.1,1213.59 1984.69,1215.05 1985.27,1218.99 1985.86,1217.33 1986.45,1218.64 1987.03,1213.32 1987.62,1213.37 1988.2,1215.97 1988.79,1215.88 1989.38,1215.68 1989.96,1216.73 1990.55,1217.7 1991.14,1220.16 1991.72,1221.51 1992.31,1220.97 1992.9,1219.18 1993.48,1221.65 1994.07,1221.23 1994.65,1222.25 1995.24,1221.83 1995.83,1218.63 1996.41,1219.78 1997,1220.83 1997.59,1219.28 1998.17,1219.05 1998.76,1216.22 1999.35,1215.98 1999.93,1214.58 2000.52,1211.84 2001.11,1213.15 2001.69,1214.39 2002.28,1211.87 2002.86,1212.47 2003.45,1214.07 2004.04,1209.76 2004.62,1208.28 2005.21,1208.91 2005.8,1207.62 2006.38,1210.72 2006.97,1211.25 2007.56,1211.26 2008.14,1204.96 2008.73,1209.35 2009.32,1212.35 2009.9,1211.02 2010.49,1211.13 2011.07,1213.84 2011.66,1213.67 2012.25,1208.22 2012.83,1207.31 2013.42,1203.89 2014.01,1205.82 2014.59,1206.39 2015.18,1207.02 2015.77,1206.21 2016.35,1206.63 2016.94,1205.62 2017.53,1208.85 2018.11,1207.62 2018.7,1207.82 2019.28,1209.68 2019.87,1207.33 2020.46,1208.92 2021.04,1209.14 2021.63,1208.02 2022.22,1208.44 2022.8,1209.7 2023.39,1211.38 2023.98,1208.93 2024.56,1207.91 2025.15,1207.07 2025.73,1207.14 2026.32,1207.83 2026.91,1208.53 2027.49,1212.75 2028.08,1214.13 2028.67,1212.78 2029.25,1211.39 2029.84,1210.32 2030.43,1210.37 2031.01,1211.55 2031.6,1213.13 2032.19,1215.83 2032.77,1213.15 2033.36,1214.5 2033.94,1214.6 2034.53,1215.86 2035.12,1218.52 2035.7,1218.4 2036.29,1217.3 2036.88,1217.17 2037.46,1218.4 2038.05,1218.57 2038.64,1215.66 2039.22,1214.53 2039.81,1213.28 2040.4,1213.49 2040.98,1215.11 2041.57,1215.09 2042.15,1215.27 2042.74,1215.16 2043.33,1215.62 2043.91,1215.8 2044.5,1217.18 2045.09,1215.56 2045.67,1215.81 2046.26,1215.75 2046.85,1215.66 2047.43,1216.87 2048.02,1216.99 2048.6,1215.56 2049.19,1216.68 2049.78,1216.59 2050.36,1216.69 2050.95,1216.47 2051.54,1210.81 2052.12,1209.85 2052.71,1211.58 2053.3,1211.49 2053.88,1211.56 2054.47,1209.53 2055.06,1211.06 2055.64,1211.36 2056.23,1212.98 2056.81,1212.65 2057.4,1211.42 2057.99,1213.06 2058.57,1214.23 2059.16,1212.77 2059.75,1212.57 2060.33,1211.23 2060.92,1215.1 2061.51,1213.64 2062.09,1215.12 2062.68,1217.61 2063.27,1220.06 2063.85,1221.22 2064.44,1220.95 2065.02,1219.15 2065.61,1217.75 2066.2,1216.57 2066.78,1213.73 2067.37,1214.1 2067.96,1214.18 2068.54,1217.92 2069.13,1217.8 2069.72,1217.47 2070.3,1218.72 2070.89,1217.26 2071.48,1215.75 2072.06,1218.38 2072.65,1216.82 2073.23,1215.5 2073.82,1214.16 2074.41,1213.94 2074.99,1211.43 2075.58,1212.92 2076.17,1215.71 2076.75,1215.55 2077.34,1215.18 2077.93,1216.18 2078.51,1214.69 2079.1,1211.86 2079.68,1209.3 2080.27,1209.58 2080.86,1209.09 2081.44,1207.93 2082.03,1210.8 2082.62,1209.69 2083.2,1215.26 2083.79,1215.21 2084.38,1215.09 2084.96,1216.48 2085.55,1217.58 2086.14,1218.7 2086.72,1218.27 2087.31,1219.28 2087.89,1219.07 2088.48,1218.96 2089.07,1217.48 2089.65,1217.24 2090.24,1217.24 2090.83,1217.02 2091.41,1215.45 2092,1216.96 2092.59,1217.93 2093.17,1219.16 2093.76,1218.63 2094.35,1218.39 2094.93,1219.75 2095.52,1219.19 2096.1,1219.04 2096.69,1217.63 2097.28,1216.32 2097.86,1215 2098.45,1217.71 2099.04,1219 2099.62,1221.32 2100.21,1219.62 2100.8,1217.92 2101.38,1217.66 2101.97,1217.81 2102.55,1217.84 2103.14,1216.38 2103.73,1212.13 2104.31,1210.73 2104.9,1210.77 2105.49,1209.39 2106.07,1210.91 2106.66,1209.61 2107.25,1209.88 2107.83,1210.43 2108.42,1213.14 2109.01,1212.08 2109.59,1210.58 2110.18,1208.05 2110.76,1210.01 2111.35,1210.57 2111.94,1213.4 2112.52,1214.76 2113.11,1210.79 2113.7,1212.41 2114.28,1215.1 2114.87,1217.85 2115.46,1217.61 2116.04,1218.93 2116.63,1218.75 2117.22,1218.18 2117.8,1217.91 2118.39,1216.38 2118.97,1217.52 2119.56,1216 2120.15,1218.43 2120.73,1221.1 2121.32,1221.83 2121.91,1220.22 2122.49,1218.46 2123.08,1216.74 2123.67,1217.79 2124.25,1216.27 2124.84,1216.23 2125.42,1214.96 2126.01,1212.28 2126.6,1210.99 2127.18,1211.11 2127.77,1208.87 2128.36,1203.84 2128.94,1207.24 2129.53,1207.69 2130.12,1209.61 2130.7,1209.93 2131.29,1211.59 2131.88,1213.32 2132.46,1213.5 2133.05,1212.28 2133.63,1216.11 2134.22,1218.64 2134.81,1219.84 2135.39,1216.84 2135.98,1216.55 2136.57,1216.46 2137.15,1213.81 2137.74,1211.37 2138.33,1211.46 2138.91,1210.23 2139.5,1211.78 2140.09,1210.92 2140.67,1211 2141.26,1211.16 2141.84,1210.06 2142.43,1213 2143.02,1211.75 2143.6,1213.01 2144.19,1214.37 2144.78,1213 2145.36,1215.8 2145.95,1214.54 2146.54,1214.55 2147.12,1217.16 2147.71,1218.34 2148.3,1221.01 2148.88,1221.98 2149.47,1220.26 2150.05,1216.01 2150.64,1214.6 2151.23,1214.65 2151.81,1212.28 2152.4,1209.66 2152.99,1209.86 2153.57,1210.29 2154.16,1207.83 2154.75,1208.2 2155.33,1208.71 2155.92,1209.19 2156.5,1209.36 2157.09,1209.57 2157.68,1211.16 2158.26,1209.95 \"/>\n<path clip-path=\"url(#clip342)\" d=\"M986.025 1214.86 L986.612 1214.86 L987.198 1214.86 L987.785 1214.86 L988.371 1214.86 L988.957 1214.86 L989.544 1214.86 L990.13 1214.86 L990.717 1214.86 L991.303 1214.86 L991.889 1214.86 L992.476 1214.86 L993.062 1214.86 L993.649 1214.86 L994.235 1214.86 L994.822 1214.86 L995.408 1214.86 L995.994 1214.86 L996.581 1214.86 L997.167 1214.86 L997.754 1214.86 L998.34 1214.86 L998.926 1214.86 L999.513 1214.86 L1000.1 1214.86 L1000.69 1214.86 L1001.27 1214.86 L1001.86 1214.86 L1002.44 1214.86 L1003.03 1214.86 L1003.62 1214.86 L1004.2 1214.86 L1004.79 1214.86 L1005.38 1214.86 L1005.96 1214.86 L1006.55 1214.86 L1007.14 1214.86 L1007.72 1214.86 L1008.31 1214.86 L1008.9 1214.86 L1009.48 1214.86 L1010.07 1214.86 L1010.65 1214.86 L1011.24 1214.86 L1011.83 1214.86 L1012.41 1214.86 L1013 1214.86 L1013.59 1214.86 L1014.17 1214.86 L1014.76 1214.86 L1015.35 1214.86 L1015.93 1214.86 L1016.52 1214.86 L1017.11 1214.86 L1017.69 1214.86 L1018.28 1214.86 L1018.86 1214.86 L1019.45 1214.86 L1020.04 1214.86 L1020.62 1214.86 L1021.21 1214.86 L1021.8 1214.86 L1022.38 1214.86 L1022.97 1214.86 L1023.56 1214.86 L1024.14 1214.86 L1024.73 1214.86 L1025.32 1214.86 L1025.9 1214.86 L1026.49 1214.86 L1027.07 1214.86 L1027.66 1214.86 L1028.25 1214.86 L1028.83 1214.86 L1029.42 1214.86 L1030.01 1214.86 L1030.59 1214.86 L1031.18 1214.86 L1031.77 1214.86 L1032.35 1214.86 L1032.94 1214.86 L1033.52 1214.86 L1034.11 1214.86 L1034.7 1214.86 L1035.28 1214.86 L1035.87 1214.86 L1036.46 1214.86 L1037.04 1214.86 L1037.63 1214.86 L1038.22 1214.86 L1038.8 1214.86 L1039.39 1214.86 L1039.98 1214.86 L1040.56 1214.86 L1041.15 1214.86 L1041.73 1214.86 L1042.32 1214.86 L1042.91 1214.86 L1043.49 1214.86 L1044.08 1214.86 L1044.67 1214.86 L1045.25 1214.86 L1045.84 1214.86 L1046.43 1214.86 L1047.01 1214.86 L1047.6 1214.86 L1048.19 1214.86 L1048.77 1214.86 L1049.36 1214.86 L1049.94 1214.86 L1050.53 1214.86 L1051.12 1214.86 L1051.7 1214.86 L1052.29 1214.86 L1052.88 1214.86 L1053.46 1214.86 L1054.05 1214.86 L1054.64 1214.86 L1055.22 1214.86 L1055.81 1214.86 L1056.39 1214.86 L1056.98 1214.86 L1057.57 1214.86 L1058.15 1214.86 L1058.74 1214.86 L1059.33 1214.86 L1059.91 1214.86 L1060.5 1214.86 L1061.09 1214.86 L1061.67 1214.86 L1062.26 1214.86 L1062.85 1214.86 L1063.43 1214.86 L1064.02 1214.86 L1064.6 1214.86 L1065.19 1214.86 L1065.78 1214.86 L1066.36 1214.86 L1066.95 1214.86 L1067.54 1214.86 L1068.12 1214.86 L1068.71 1214.86 L1069.3 1214.86 L1069.88 1214.86 L1070.47 1214.86 L1071.06 1214.86 L1071.64 1214.86 L1072.23 1214.86 L1072.81 1214.86 L1073.4 1214.86 L1073.99 1214.86 L1074.57 1214.86 L1075.16 1214.86 L1075.75 1214.86 L1076.33 1214.86 L1076.92 1214.86 L1077.51 1214.86 L1078.09 1214.86 L1078.68 1214.86 L1079.26 1214.86 L1079.85 1214.86 L1080.44 1214.86 L1081.02 1214.86 L1081.61 1214.86 L1082.2 1214.86 L1082.78 1214.86 L1083.37 1214.86 L1083.96 1214.86 L1084.54 1214.86 L1085.13 1214.86 L1085.72 1214.86 L1086.3 1214.86 L1086.89 1214.86 L1087.47 1214.86 L1088.06 1214.86 L1088.65 1214.86 L1089.23 1214.86 L1089.82 1214.86 L1090.41 1214.86 L1090.99 1214.86 L1091.58 1214.86 L1092.17 1214.86 L1092.75 1214.86 L1093.34 1214.86 L1093.93 1214.86 L1094.51 1214.86 L1095.1 1214.86 L1095.68 1214.86 L1096.27 1214.86 L1096.86 1214.86 L1097.44 1214.86 L1098.03 1214.86 L1098.62 1214.86 L1099.2 1214.86 L1099.79 1214.86 L1100.38 1214.86 L1100.96 1214.86 L1101.55 1214.86 L1102.14 1214.86 L1102.72 1214.86 L1103.31 1214.86 L1103.89 1214.86 L1104.48 1214.86 L1105.07 1214.86 L1105.65 1214.86 L1106.24 1214.86 L1106.83 1214.86 L1107.41 1214.86 L1108 1214.86 L1108.59 1214.86 L1109.17 1214.86 L1109.76 1214.86 L1110.34 1214.86 L1110.93 1214.86 L1111.52 1214.86 L1112.1 1214.86 L1112.69 1214.86 L1113.28 1214.86 L1113.86 1214.86 L1114.45 1214.86 L1115.04 1214.86 L1115.62 1214.86 L1116.21 1214.86 L1116.8 1214.86 L1117.38 1214.86 L1117.97 1214.86 L1118.55 1214.86 L1119.14 1214.86 L1119.73 1214.86 L1120.31 1214.86 L1120.9 1214.86 L1121.49 1214.86 L1122.07 1214.86 L1122.66 1214.86 L1123.25 1214.86 L1123.83 1214.86 L1124.42 1214.86 L1125.01 1214.86 L1125.59 1214.86 L1126.18 1214.86 L1126.76 1214.86 L1127.35 1214.86 L1127.94 1214.86 L1128.52 1214.86 L1129.11 1214.86 L1129.7 1214.86 L1130.28 1214.86 L1130.87 1214.86 L1131.46 1214.86 L1132.04 1214.86 L1132.63 1214.86 L1133.21 1214.86 L1133.8 1214.86 L1134.39 1214.86 L1134.97 1214.86 L1135.56 1214.86 L1136.15 1214.86 L1136.73 1214.86 L1137.32 1214.86 L1137.91 1214.86 L1138.49 1214.86 L1139.08 1214.86 L1139.67 1214.86 L1140.25 1214.86 L1140.84 1214.86 L1141.42 1214.86 L1142.01 1214.86 L1142.6 1214.86 L1143.18 1214.86 L1143.77 1214.86 L1144.36 1214.86 L1144.94 1214.86 L1145.53 1214.86 L1146.12 1214.86 L1146.7 1214.86 L1147.29 1214.86 L1147.88 1214.86 L1148.46 1214.86 L1149.05 1214.86 L1149.63 1214.86 L1150.22 1214.86 L1150.81 1214.86 L1151.39 1214.86 L1151.98 1214.86 L1152.57 1214.86 L1153.15 1214.86 L1153.74 1214.86 L1154.33 1214.86 L1154.91 1214.86 L1155.5 1214.86 L1156.09 1214.86 L1156.67 1214.86 L1157.26 1214.86 L1157.84 1214.86 L1158.43 1214.86 L1159.02 1214.86 L1159.6 1214.86 L1160.19 1214.86 L1160.78 1214.86 L1161.36 1214.86 L1161.95 1214.86 L1162.54 1214.86 L1163.12 1214.86 L1163.71 1214.86 L1164.29 1214.86 L1164.88 1214.86 L1165.47 1214.86 L1166.05 1214.86 L1166.64 1214.86 L1167.23 1214.86 L1167.81 1214.86 L1168.4 1214.86 L1168.99 1214.86 L1169.57 1214.86 L1170.16 1214.86 L1170.75 1214.86 L1171.33 1214.86 L1171.92 1214.86 L1172.5 1214.86 L1173.09 1214.86 L1173.68 1214.86 L1174.26 1214.86 L1174.85 1214.86 L1175.44 1214.86 L1176.02 1214.86 L1176.61 1214.86 L1177.2 1214.86 L1177.78 1214.86 L1178.37 1214.86 L1178.96 1214.86 L1179.54 1214.86 L1180.13 1214.86 L1180.71 1214.86 L1181.3 1214.86 L1181.89 1214.86 L1182.47 1214.86 L1183.06 1214.86 L1183.65 1214.86 L1184.23 1214.86 L1184.82 1214.86 L1185.41 1214.86 L1185.99 1214.86 L1186.58 1214.86 L1187.16 1214.86 L1187.75 1214.86 L1188.34 1214.86 L1188.92 1214.86 L1189.51 1214.86 L1190.1 1214.86 L1190.68 1214.86 L1191.27 1214.86 L1191.86 1214.86 L1192.44 1214.86 L1193.03 1214.86 L1193.62 1214.86 L1194.2 1214.86 L1194.79 1214.86 L1195.37 1214.86 L1195.96 1214.86 L1196.55 1214.86 L1197.13 1214.86 L1197.72 1214.86 L1198.31 1214.86 L1198.89 1214.86 L1199.48 1214.86 L1200.07 1214.86 L1200.65 1214.86 L1201.24 1214.86 L1201.83 1214.86 L1202.41 1214.86 L1203 1214.86 L1203.58 1214.86 L1204.17 1214.86 L1204.76 1214.86 L1205.34 1214.86 L1205.93 1214.86 L1206.52 1214.86 L1207.1 1214.86 L1207.69 1214.86 L1208.28 1214.86 L1208.86 1214.86 L1209.45 1214.86 L1210.03 1214.86 L1210.62 1214.86 L1211.21 1214.86 L1211.79 1214.86 L1212.38 1214.86 L1212.97 1214.86 L1213.55 1214.86 L1214.14 1214.86 L1214.73 1214.86 L1215.31 1214.86 L1215.9 1214.86 L1216.49 1214.86 L1217.07 1214.86 L1217.66 1214.86 L1218.24 1214.86 L1218.83 1214.86 L1219.42 1214.86 L1220 1214.86 L1220.59 1214.86 L1221.18 1214.86 L1221.76 1214.86 L1222.35 1214.86 L1222.94 1214.86 L1223.52 1214.86 L1224.11 1214.86 L1224.7 1214.86 L1225.28 1214.86 L1225.87 1214.86 L1226.45 1214.86 L1227.04 1214.86 L1227.63 1214.86 L1228.21 1214.86 L1228.8 1214.86 L1229.39 1214.86 L1229.97 1214.86 L1230.56 1214.86 L1231.15 1214.86 L1231.73 1214.86 L1232.32 1214.86 L1232.91 1214.86 L1233.49 1214.86 L1234.08 1214.86 L1234.66 1214.86 L1235.25 1214.86 L1235.84 1214.86 L1236.42 1214.86 L1237.01 1214.86 L1237.6 1214.86 L1238.18 1214.86 L1238.77 1214.86 L1239.36 1214.86 L1239.94 1214.86 L1240.53 1214.86 L1241.11 1214.86 L1241.7 1214.86 L1242.29 1214.86 L1242.87 1214.86 L1243.46 1214.86 L1244.05 1214.86 L1244.63 1214.86 L1245.22 1214.86 L1245.81 1214.86 L1246.39 1214.86 L1246.98 1214.86 L1247.57 1214.86 L1248.15 1214.86 L1248.74 1214.86 L1249.32 1214.86 L1249.91 1214.86 L1250.5 1214.86 L1251.08 1214.86 L1251.67 1214.86 L1252.26 1214.86 L1252.84 1214.86 L1253.43 1214.86 L1254.02 1214.86 L1254.6 1214.86 L1255.19 1214.86 L1255.78 1214.86 L1256.36 1214.86 L1256.95 1214.86 L1257.53 1214.86 L1258.12 1214.86 L1258.71 1214.86 L1259.29 1214.86 L1259.88 1214.86 L1260.47 1214.86 L1261.05 1214.86 L1261.64 1214.86 L1262.23 1214.86 L1262.81 1214.86 L1263.4 1214.86 L1263.98 1214.86 L1264.57 1214.86 L1265.16 1214.86 L1265.74 1214.86 L1266.33 1214.86 L1266.92 1214.86 L1267.5 1214.86 L1268.09 1214.86 L1268.68 1214.86 L1269.26 1214.86 L1269.85 1214.86 L1270.44 1214.86 L1271.02 1214.86 L1271.61 1214.86 L1272.19 1214.86 L1272.78 1214.86 L1273.37 1214.86 L1273.95 1214.86 L1274.54 1214.86 L1275.13 1214.86 L1275.71 1214.86 L1276.3 1214.86 L1276.89 1214.86 L1277.47 1214.86 L1278.06 1214.86 L1278.65 1214.86 L1279.23 1214.86 L1279.82 1214.86 L1280.4 1214.86 L1280.99 1214.86 L1281.58 1214.86 L1282.16 1214.86 L1282.75 1214.86 L1283.34 1214.86 L1283.92 1214.86 L1284.51 1214.86 L1285.1 1214.86 L1285.68 1214.86 L1286.27 1214.86 L1286.86 1214.86 L1287.44 1214.86 L1288.03 1214.86 L1288.61 1214.86 L1289.2 1214.86 L1289.79 1214.86 L1290.37 1214.86 L1290.96 1214.86 L1291.55 1214.86 L1292.13 1214.86 L1292.72 1214.86 L1293.31 1214.86 L1293.89 1214.86 L1294.48 1214.86 L1295.06 1214.86 L1295.65 1214.86 L1296.24 1214.86 L1296.82 1214.86 L1297.41 1214.86 L1298 1214.86 L1298.58 1214.86 L1299.17 1214.86 L1299.76 1214.86 L1300.34 1214.86 L1300.93 1214.86 L1301.52 1214.86 L1302.1 1214.86 L1302.69 1214.86 L1303.27 1214.86 L1303.86 1214.86 L1304.45 1214.86 L1305.03 1214.86 L1305.62 1214.86 L1306.21 1214.86 L1306.79 1214.86 L1307.38 1214.86 L1307.97 1214.86 L1308.55 1214.86 L1309.14 1214.86 L1309.73 1214.86 L1310.31 1214.86 L1310.9 1214.86 L1311.48 1214.86 L1312.07 1214.86 L1312.66 1214.86 L1313.24 1214.86 L1313.83 1214.86 L1314.42 1214.86 L1315 1214.86 L1315.59 1214.86 L1316.18 1214.86 L1316.76 1214.86 L1317.35 1214.86 L1317.93 1214.86 L1318.52 1214.86 L1319.11 1214.86 L1319.69 1214.86 L1320.28 1214.86 L1320.87 1214.86 L1321.45 1214.86 L1322.04 1214.86 L1322.63 1214.86 L1323.21 1214.86 L1323.8 1214.86 L1324.39 1214.86 L1324.97 1214.86 L1325.56 1214.86 L1326.14 1214.86 L1326.73 1214.86 L1327.32 1214.86 L1327.9 1214.86 L1328.49 1214.86 L1329.08 1214.86 L1329.66 1214.86 L1330.25 1214.86 L1330.84 1214.86 L1331.42 1214.86 L1332.01 1214.86 L1332.6 1214.86 L1333.18 1214.86 L1333.77 1214.86 L1334.35 1214.86 L1334.94 1214.86 L1335.53 1214.86 L1336.11 1214.86 L1336.7 1214.86 L1337.29 1214.86 L1337.87 1214.86 L1338.46 1214.86 L1339.05 1214.86 L1339.63 1214.86 L1340.22 1214.86 L1340.8 1214.86 L1341.39 1214.86 L1341.98 1214.86 L1342.56 1214.86 L1343.15 1214.86 L1343.74 1214.86 L1344.32 1214.86 L1344.91 1214.86 L1345.5 1214.86 L1346.08 1214.86 L1346.67 1214.86 L1347.26 1214.86 L1347.84 1214.86 L1348.43 1214.86 L1349.01 1214.86 L1349.6 1214.86 L1350.19 1214.86 L1350.77 1214.86 L1351.36 1214.86 L1351.95 1214.86 L1352.53 1214.86 L1353.12 1214.86 L1353.71 1214.86 L1354.29 1214.86 L1354.88 1214.86 L1355.47 1214.86 L1356.05 1214.86 L1356.64 1214.86 L1357.22 1214.86 L1357.81 1214.86 L1358.4 1214.86 L1358.98 1214.86 L1359.57 1214.86 L1360.16 1214.86 L1360.74 1214.86 L1361.33 1214.86 L1361.92 1214.86 L1362.5 1214.86 L1363.09 1214.86 L1363.68 1214.86 L1364.26 1214.86 L1364.85 1214.86 L1365.43 1214.86 L1366.02 1214.86 L1366.61 1214.86 L1367.19 1214.86 L1367.78 1214.86 L1368.37 1214.86 L1368.95 1214.86 L1369.54 1214.86 L1370.13 1214.86 L1370.71 1214.86 L1371.3 1214.86 L1371.88 1214.86 L1372.47 1214.86 L1373.06 1214.86 L1373.64 1214.86 L1374.23 1214.86 L1374.82 1214.86 L1375.4 1214.86 L1375.99 1214.86 L1376.58 1214.86 L1377.16 1214.86 L1377.75 1214.86 L1378.34 1214.86 L1378.92 1214.86 L1379.51 1214.86 L1380.09 1214.86 L1380.68 1214.86 L1381.27 1214.86 L1381.85 1214.86 L1382.44 1214.86 L1383.03 1214.86 L1383.61 1214.86 L1384.2 1214.86 L1384.79 1214.86 L1385.37 1214.86 L1385.96 1214.86 L1386.55 1214.86 L1387.13 1214.86 L1387.72 1214.86 L1388.3 1214.86 L1388.89 1214.86 L1389.48 1214.86 L1390.06 1214.86 L1390.65 1214.86 L1391.24 1214.86 L1391.82 1214.86 L1392.41 1214.86 L1393 1214.86 L1393.58 1214.86 L1394.17 1214.86 L1394.75 1214.86 L1395.34 1214.86 L1395.93 1214.86 L1396.51 1214.86 L1397.1 1214.86 L1397.69 1214.86 L1398.27 1214.86 L1398.86 1214.86 L1399.45 1214.86 L1400.03 1214.86 L1400.62 1214.86 L1401.21 1214.86 L1401.79 1214.86 L1402.38 1214.86 L1402.96 1214.86 L1403.55 1214.86 L1404.14 1214.86 L1404.72 1214.86 L1405.31 1214.86 L1405.9 1214.86 L1406.48 1214.86 L1407.07 1214.86 L1407.66 1214.86 L1408.24 1214.86 L1408.83 1214.86 L1409.42 1214.86 L1410 1214.86 L1410.59 1214.86 L1411.17 1214.86 L1411.76 1214.86 L1412.35 1214.86 L1412.93 1214.86 L1413.52 1214.86 L1414.11 1214.86 L1414.69 1214.86 L1415.28 1214.86 L1415.87 1214.86 L1416.45 1214.86 L1417.04 1214.86 L1417.63 1214.86 L1418.21 1214.86 L1418.8 1214.86 L1419.38 1214.86 L1419.97 1214.86 L1420.56 1214.86 L1421.14 1214.86 L1421.73 1214.86 L1422.32 1214.86 L1422.9 1214.86 L1423.49 1214.86 L1424.08 1214.86 L1424.66 1214.86 L1425.25 1214.86 L1425.83 1214.86 L1426.42 1214.86 L1427.01 1214.86 L1427.59 1214.86 L1428.18 1214.86 L1428.77 1214.86 L1429.35 1214.86 L1429.94 1214.86 L1430.53 1214.86 L1431.11 1214.86 L1431.7 1214.86 L1432.29 1214.86 L1432.87 1214.86 L1433.46 1214.86 L1434.04 1214.86 L1434.63 1214.86 L1435.22 1214.86 L1435.8 1214.86 L1436.39 1214.86 L1436.98 1214.86 L1437.56 1214.86 L1438.15 1214.86 L1438.74 1214.86 L1439.32 1214.86 L1439.91 1214.86 L1440.5 1214.86 L1441.08 1214.86 L1441.67 1214.86 L1442.25 1214.86 L1442.84 1214.86 L1443.43 1214.86 L1444.01 1214.86 L1444.6 1214.86 L1445.19 1214.86 L1445.77 1214.86 L1446.36 1214.86 L1446.95 1214.86 L1447.53 1214.86 L1448.12 1214.86 L1448.7 1214.86 L1449.29 1214.86 L1449.88 1214.86 L1450.46 1214.86 L1451.05 1214.86 L1451.64 1214.86 L1452.22 1214.86 L1452.81 1214.86 L1453.4 1214.86 L1453.98 1214.86 L1454.57 1214.86 L1455.16 1214.86 L1455.74 1214.86 L1456.33 1214.86 L1456.91 1214.86 L1457.5 1214.86 L1458.09 1214.86 L1458.67 1214.86 L1459.26 1214.86 L1459.85 1214.86 L1460.43 1214.86 L1461.02 1214.86 L1461.61 1214.86 L1462.19 1214.86 L1462.78 1214.86 L1463.37 1214.86 L1463.95 1214.86 L1464.54 1214.86 L1465.12 1214.86 L1465.71 1214.86 L1466.3 1214.86 L1466.88 1214.86 L1467.47 1214.86 L1468.06 1214.86 L1468.64 1214.86 L1469.23 1214.86 L1469.82 1214.86 L1470.4 1214.86 L1470.99 1214.86 L1471.57 1214.86 L1472.16 1214.86 L1472.75 1214.86 L1473.33 1214.86 L1473.92 1214.86 L1474.51 1214.86 L1475.09 1214.86 L1475.68 1214.86 L1476.27 1214.86 L1476.85 1214.86 L1477.44 1214.86 L1478.03 1214.86 L1478.61 1214.86 L1479.2 1214.86 L1479.78 1214.86 L1480.37 1214.86 L1480.96 1214.86 L1481.54 1214.86 L1482.13 1214.86 L1482.72 1214.86 L1483.3 1214.86 L1483.89 1214.86 L1484.48 1214.86 L1485.06 1214.86 L1485.65 1214.86 L1486.24 1214.86 L1486.82 1214.86 L1487.41 1214.86 L1487.99 1214.86 L1488.58 1214.86 L1489.17 1214.86 L1489.75 1214.86 L1490.34 1214.86 L1490.93 1214.86 L1491.51 1214.86 L1492.1 1214.86 L1492.69 1214.86 L1493.27 1214.86 L1493.86 1214.86 L1494.45 1214.86 L1495.03 1214.86 L1495.62 1214.86 L1496.2 1214.86 L1496.79 1214.86 L1497.38 1214.86 L1497.96 1214.86 L1498.55 1214.86 L1499.14 1214.86 L1499.72 1214.86 L1500.31 1214.86 L1500.9 1214.86 L1501.48 1214.86 L1502.07 1214.86 L1502.65 1214.86 L1503.24 1214.86 L1503.83 1214.86 L1504.41 1214.86 L1505 1214.86 L1505.59 1214.86 L1506.17 1214.86 L1506.76 1214.86 L1507.35 1214.86 L1507.93 1214.86 L1508.52 1214.86 L1509.11 1214.86 L1509.69 1214.86 L1510.28 1214.86 L1510.86 1214.86 L1511.45 1214.86 L1512.04 1214.86 L1512.62 1214.86 L1513.21 1214.86 L1513.8 1214.86 L1514.38 1214.86 L1514.97 1214.86 L1515.56 1214.86 L1516.14 1214.86 L1516.73 1214.86 L1517.32 1214.86 L1517.9 1214.86 L1518.49 1214.86 L1519.07 1214.86 L1519.66 1214.86 L1520.25 1214.86 L1520.83 1214.86 L1521.42 1214.86 L1522.01 1214.86 L1522.59 1214.86 L1523.18 1214.86 L1523.77 1214.86 L1524.35 1214.86 L1524.94 1214.86 L1525.52 1214.86 L1526.11 1214.86 L1526.7 1214.86 L1527.28 1214.86 L1527.87 1214.86 L1528.46 1214.86 L1529.04 1214.86 L1529.63 1214.86 L1530.22 1214.86 L1530.8 1214.86 L1531.39 1214.86 L1531.98 1214.86 L1532.56 1214.86 L1533.15 1214.86 L1533.73 1214.86 L1534.32 1214.86 L1534.91 1214.86 L1535.49 1214.86 L1536.08 1214.86 L1536.67 1214.86 L1537.25 1214.86 L1537.84 1214.86 L1538.43 1214.86 L1539.01 1214.86 L1539.6 1214.86 L1540.19 1214.86 L1540.77 1214.86 L1541.36 1214.86 L1541.94 1214.86 L1542.53 1214.86 L1543.12 1214.86 L1543.7 1214.86 L1544.29 1214.86 L1544.88 1214.86 L1545.46 1214.86 L1546.05 1214.86 L1546.64 1214.86 L1547.22 1214.86 L1547.81 1214.86 L1548.4 1214.86 L1548.98 1214.86 L1549.57 1214.86 L1550.15 1214.86 L1550.74 1214.86 L1551.33 1214.86 L1551.91 1214.86 L1552.5 1214.86 L1553.09 1214.86 L1553.67 1214.86 L1554.26 1214.86 L1554.85 1214.86 L1555.43 1214.86 L1556.02 1214.86 L1556.6 1214.86 L1557.19 1214.86 L1557.78 1214.86 L1558.36 1214.86 L1558.95 1214.86 L1559.54 1214.86 L1560.12 1214.86 L1560.71 1214.86 L1561.3 1214.86 L1561.88 1214.86 L1562.47 1214.86 L1563.06 1214.86 L1563.64 1214.86 L1564.23 1214.86 L1564.81 1214.86 L1565.4 1214.86 L1565.99 1214.86 L1566.57 1214.86 L1567.16 1214.86 L1567.75 1214.86 L1568.33 1214.86 L1568.92 1214.86 L1569.51 1214.86 L1570.09 1214.86 L1570.68 1214.86 L1571.27 1214.86 L1571.85 1214.86 L1572.44 1214.86 L1573.02 1214.86 L1573.61 1214.86 L1574.2 1214.86 L1574.78 1214.86 L1575.37 1214.86 L1575.96 1214.86 L1576.54 1214.86 L1577.13 1214.86 L1577.72 1214.86 L1578.3 1214.86 L1578.89 1214.86 L1579.47 1214.86 L1580.06 1214.86 L1580.65 1214.86 L1581.23 1214.86 L1581.82 1214.86 L1582.41 1214.86 L1582.99 1214.86 L1583.58 1214.86 L1584.17 1214.86 L1584.75 1214.86 L1585.34 1214.86 L1585.93 1214.86 L1586.51 1214.86 L1587.1 1214.86 L1587.68 1214.86 L1588.27 1214.86 L1588.86 1214.86 L1589.44 1214.86 L1590.03 1214.86 L1590.62 1214.86 L1591.2 1214.86 L1591.79 1214.86 L1592.38 1214.86 L1592.96 1214.86 L1593.55 1214.86 L1594.14 1214.86 L1594.72 1214.86 L1595.31 1214.86 L1595.89 1214.86 L1596.48 1214.86 L1597.07 1214.86 L1597.65 1214.86 L1598.24 1214.86 L1598.83 1214.86 L1599.41 1214.86 L1600 1214.86 L1600.59 1214.86 L1601.17 1214.86 L1601.76 1214.86 L1602.34 1214.86 L1602.93 1214.86 L1603.52 1214.86 L1604.1 1214.86 L1604.69 1214.86 L1605.28 1214.86 L1605.86 1214.86 L1606.45 1214.86 L1607.04 1214.86 L1607.62 1214.86 L1608.21 1214.86 L1608.8 1214.86 L1609.38 1214.86 L1609.97 1214.86 L1610.55 1214.86 L1611.14 1214.86 L1611.73 1214.86 L1612.31 1214.86 L1612.9 1214.86 L1613.49 1214.86 L1614.07 1214.86 L1614.66 1214.86 L1615.25 1214.86 L1615.83 1214.86 L1616.42 1214.86 L1617.01 1214.86 L1617.59 1214.86 L1618.18 1214.86 L1618.76 1214.86 L1619.35 1214.86 L1619.94 1214.86 L1620.52 1214.86 L1621.11 1214.86 L1621.7 1214.86 L1622.28 1214.86 L1622.87 1214.86 L1623.46 1214.86 L1624.04 1214.86 L1624.63 1214.86 L1625.22 1214.86 L1625.8 1214.86 L1626.39 1214.86 L1626.97 1214.86 L1627.56 1214.86 L1628.15 1214.86 L1628.73 1214.86 L1629.32 1214.86 L1629.91 1214.86 L1630.49 1214.86 L1631.08 1214.86 L1631.67 1214.86 L1632.25 1214.86 L1632.84 1214.86 L1633.42 1214.86 L1634.01 1214.86 L1634.6 1214.86 L1635.18 1214.86 L1635.77 1214.86 L1636.36 1214.86 L1636.94 1214.86 L1637.53 1214.86 L1638.12 1214.86 L1638.7 1214.86 L1639.29 1214.86 L1639.88 1214.86 L1640.46 1214.86 L1641.05 1214.86 L1641.63 1214.86 L1642.22 1214.86 L1642.81 1214.86 L1643.39 1214.86 L1643.98 1214.86 L1644.57 1214.86 L1645.15 1214.86 L1645.74 1214.86 L1646.33 1214.86 L1646.91 1214.86 L1647.5 1214.86 L1648.09 1214.86 L1648.67 1214.86 L1649.26 1214.86 L1649.84 1214.86 L1650.43 1214.86 L1651.02 1214.86 L1651.6 1214.86 L1652.19 1214.86 L1652.78 1214.86 L1653.36 1214.86 L1653.95 1214.86 L1654.54 1214.86 L1655.12 1214.86 L1655.71 1214.86 L1656.29 1214.86 L1656.88 1214.86 L1657.47 1214.86 L1658.05 1214.86 L1658.64 1214.86 L1659.23 1214.86 L1659.81 1214.86 L1660.4 1214.86 L1660.99 1214.86 L1661.57 1214.86 L1662.16 1214.86 L1662.75 1214.86 L1663.33 1214.86 L1663.92 1214.86 L1664.5 1214.86 L1665.09 1214.86 L1665.68 1214.86 L1666.26 1214.86 L1666.85 1214.86 L1667.44 1214.86 L1668.02 1214.86 L1668.61 1214.86 L1669.2 1214.86 L1669.78 1214.86 L1670.37 1214.86 L1670.96 1214.86 L1671.54 1214.86 L1672.13 1214.86 L1672.71 1214.86 L1673.3 1214.86 L1673.89 1214.86 L1674.47 1214.86 L1675.06 1214.86 L1675.65 1214.86 L1676.23 1214.86 L1676.82 1214.86 L1677.41 1214.86 L1677.99 1214.86 L1678.58 1214.86 L1679.17 1214.86 L1679.75 1214.86 L1680.34 1214.86 L1680.92 1214.86 L1681.51 1214.86 L1682.1 1214.86 L1682.68 1214.86 L1683.27 1214.86 L1683.86 1214.86 L1684.44 1214.86 L1685.03 1214.86 L1685.62 1214.86 L1686.2 1214.86 L1686.79 1214.86 L1687.37 1214.86 L1687.96 1214.86 L1688.55 1214.86 L1689.13 1214.86 L1689.72 1214.86 L1690.31 1214.86 L1690.89 1214.86 L1691.48 1214.86 L1692.07 1214.86 L1692.65 1214.86 L1693.24 1214.86 L1693.83 1214.86 L1694.41 1214.86 L1695 1214.86 L1695.58 1214.86 L1696.17 1214.86 L1696.76 1214.86 L1697.34 1214.86 L1697.93 1214.86 L1698.52 1214.86 L1699.1 1214.86 L1699.69 1214.86 L1700.28 1214.86 L1700.86 1214.86 L1701.45 1214.86 L1702.04 1214.86 L1702.62 1214.86 L1703.21 1214.86 L1703.79 1214.86 L1704.38 1214.86 L1704.97 1214.86 L1705.55 1214.86 L1706.14 1214.86 L1706.73 1214.86 L1707.31 1214.86 L1707.9 1214.86 L1708.49 1214.86 L1709.07 1214.86 L1709.66 1214.86 L1710.24 1214.86 L1710.83 1214.86 L1711.42 1214.86 L1712 1214.86 L1712.59 1214.86 L1713.18 1214.86 L1713.76 1214.86 L1714.35 1214.86 L1714.94 1214.86 L1715.52 1214.86 L1716.11 1214.86 L1716.7 1214.86 L1717.28 1214.86 L1717.87 1214.86 L1718.45 1214.86 L1719.04 1214.86 L1719.63 1214.86 L1720.21 1214.86 L1720.8 1214.86 L1721.39 1214.86 L1721.97 1214.86 L1722.56 1214.86 L1723.15 1214.86 L1723.73 1214.86 L1724.32 1214.86 L1724.91 1214.86 L1725.49 1214.86 L1726.08 1214.86 L1726.66 1214.86 L1727.25 1214.86 L1727.84 1214.86 L1728.42 1214.86 L1729.01 1214.86 L1729.6 1214.86 L1730.18 1214.86 L1730.77 1214.86 L1731.36 1214.86 L1731.94 1214.86 L1732.53 1214.86 L1733.11 1214.86 L1733.7 1214.86 L1734.29 1214.86 L1734.87 1214.86 L1735.46 1214.86 L1736.05 1214.86 L1736.63 1214.86 L1737.22 1214.86 L1737.81 1214.86 L1738.39 1214.86 L1738.98 1214.86 L1739.57 1214.86 L1740.15 1214.86 L1740.74 1214.86 L1741.32 1214.86 L1741.91 1214.86 L1742.5 1214.86 L1743.08 1214.86 L1743.67 1214.86 L1744.26 1214.86 L1744.84 1214.86 L1745.43 1214.86 L1746.02 1214.86 L1746.6 1214.86 L1747.19 1214.86 L1747.78 1214.86 L1748.36 1214.86 L1748.95 1214.86 L1749.53 1214.86 L1750.12 1214.86 L1750.71 1214.86 L1751.29 1214.86 L1751.88 1214.86 L1752.47 1214.86 L1753.05 1214.86 L1753.64 1214.86 L1754.23 1214.86 L1754.81 1214.86 L1755.4 1214.86 L1755.99 1214.86 L1756.57 1214.86 L1757.16 1214.86 L1757.74 1214.86 L1758.33 1214.86 L1758.92 1214.86 L1759.5 1214.86 L1760.09 1214.86 L1760.68 1214.86 L1761.26 1214.86 L1761.85 1214.86 L1762.44 1214.86 L1763.02 1214.86 L1763.61 1214.86 L1764.19 1214.86 L1764.78 1214.86 L1765.37 1214.86 L1765.95 1214.86 L1766.54 1214.86 L1767.13 1214.86 L1767.71 1214.86 L1768.3 1214.86 L1768.89 1214.86 L1769.47 1214.86 L1770.06 1214.86 L1770.65 1214.86 L1771.23 1214.86 L1771.82 1214.86 L1772.4 1214.86 L1772.99 1214.86 L1773.58 1214.86 L1774.16 1214.86 L1774.75 1214.86 L1775.34 1214.86 L1775.92 1214.86 L1776.51 1214.86 L1777.1 1214.86 L1777.68 1214.86 L1778.27 1214.86 L1778.86 1214.86 L1779.44 1214.86 L1780.03 1214.86 L1780.61 1214.86 L1781.2 1214.86 L1781.79 1214.86 L1782.37 1214.86 L1782.96 1214.86 L1783.55 1214.86 L1784.13 1214.86 L1784.72 1214.86 L1785.31 1214.86 L1785.89 1214.86 L1786.48 1214.86 L1787.06 1214.86 L1787.65 1214.86 L1788.24 1214.86 L1788.82 1214.86 L1789.41 1214.86 L1790 1214.86 L1790.58 1214.86 L1791.17 1214.86 L1791.76 1214.86 L1792.34 1214.86 L1792.93 1214.86 L1793.52 1214.86 L1794.1 1214.86 L1794.69 1214.86 L1795.27 1214.86 L1795.86 1214.86 L1796.45 1214.86 L1797.03 1214.86 L1797.62 1214.86 L1798.21 1214.86 L1798.79 1214.86 L1799.38 1214.86 L1799.97 1214.86 L1800.55 1214.86 L1801.14 1214.86 L1801.73 1214.86 L1802.31 1214.86 L1802.9 1214.86 L1803.48 1214.86 L1804.07 1214.86 L1804.66 1214.86 L1805.24 1214.86 L1805.83 1214.86 L1806.42 1214.86 L1807 1214.86 L1807.59 1214.86 L1808.18 1214.86 L1808.76 1214.86 L1809.35 1214.86 L1809.94 1214.86 L1810.52 1214.86 L1811.11 1214.86 L1811.69 1214.86 L1812.28 1214.86 L1812.87 1214.86 L1813.45 1214.86 L1814.04 1214.86 L1814.63 1214.86 L1815.21 1214.86 L1815.8 1214.86 L1816.39 1214.86 L1816.97 1214.86 L1817.56 1214.86 L1818.14 1214.86 L1818.73 1214.86 L1819.32 1214.86 L1819.9 1214.86 L1820.49 1214.86 L1821.08 1214.86 L1821.66 1214.86 L1822.25 1214.86 L1822.84 1214.86 L1823.42 1214.86 L1824.01 1214.86 L1824.6 1214.86 L1825.18 1214.86 L1825.77 1214.86 L1826.35 1214.86 L1826.94 1214.86 L1827.53 1214.86 L1828.11 1214.86 L1828.7 1214.86 L1829.29 1214.86 L1829.87 1214.86 L1830.46 1214.86 L1831.05 1214.86 L1831.63 1214.86 L1832.22 1214.86 L1832.81 1214.86 L1833.39 1214.86 L1833.98 1214.86 L1834.56 1214.86 L1835.15 1214.86 L1835.74 1214.86 L1836.32 1214.86 L1836.91 1214.86 L1837.5 1214.86 L1838.08 1214.86 L1838.67 1214.86 L1839.26 1214.86 L1839.84 1214.86 L1840.43 1214.86 L1841.01 1214.86 L1841.6 1214.86 L1842.19 1214.86 L1842.77 1214.86 L1843.36 1214.86 L1843.95 1214.86 L1844.53 1214.86 L1845.12 1214.86 L1845.71 1214.86 L1846.29 1214.86 L1846.88 1214.86 L1847.47 1214.86 L1848.05 1214.86 L1848.64 1214.86 L1849.22 1214.86 L1849.81 1214.86 L1850.4 1214.86 L1850.98 1214.86 L1851.57 1214.86 L1852.16 1214.86 L1852.74 1214.86 L1853.33 1214.86 L1853.92 1214.86 L1854.5 1214.86 L1855.09 1214.86 L1855.68 1214.86 L1856.26 1214.86 L1856.85 1214.86 L1857.43 1214.86 L1858.02 1214.86 L1858.61 1214.86 L1859.19 1214.86 L1859.78 1214.86 L1860.37 1214.86 L1860.95 1214.86 L1861.54 1214.86 L1862.13 1214.86 L1862.71 1214.86 L1863.3 1214.86 L1863.88 1214.86 L1864.47 1214.86 L1865.06 1214.86 L1865.64 1214.86 L1866.23 1214.86 L1866.82 1214.86 L1867.4 1214.86 L1867.99 1214.86 L1868.58 1214.86 L1869.16 1214.86 L1869.75 1214.86 L1870.34 1214.86 L1870.92 1214.86 L1871.51 1214.86 L1872.09 1214.86 L1872.68 1214.86 L1873.27 1214.86 L1873.85 1214.86 L1874.44 1214.86 L1875.03 1214.86 L1875.61 1214.86 L1876.2 1214.86 L1876.79 1214.86 L1877.37 1214.86 L1877.96 1214.86 L1878.55 1214.86 L1879.13 1214.86 L1879.72 1214.86 L1880.3 1214.86 L1880.89 1214.86 L1881.48 1214.86 L1882.06 1214.86 L1882.65 1214.86 L1883.24 1214.86 L1883.82 1214.86 L1884.41 1214.86 L1885 1214.86 L1885.58 1214.86 L1886.17 1214.86 L1886.76 1214.86 L1887.34 1214.86 L1887.93 1214.86 L1888.51 1214.86 L1889.1 1214.86 L1889.69 1214.86 L1890.27 1214.86 L1890.86 1214.86 L1891.45 1214.86 L1892.03 1214.86 L1892.62 1214.86 L1893.21 1214.86 L1893.79 1214.86 L1894.38 1214.86 L1894.96 1214.86 L1895.55 1214.86 L1896.14 1214.86 L1896.72 1214.86 L1897.31 1214.86 L1897.9 1214.86 L1898.48 1214.86 L1899.07 1214.86 L1899.66 1214.86 L1900.24 1214.86 L1900.83 1214.86 L1901.42 1214.86 L1902 1214.86 L1902.59 1214.86 L1903.17 1214.86 L1903.76 1214.86 L1904.35 1214.86 L1904.93 1214.86 L1905.52 1214.86 L1906.11 1214.86 L1906.69 1214.86 L1907.28 1214.86 L1907.87 1214.86 L1908.45 1214.86 L1909.04 1214.86 L1909.63 1214.86 L1910.21 1214.86 L1910.8 1214.86 L1911.38 1214.86 L1911.97 1214.86 L1912.56 1214.86 L1913.14 1214.86 L1913.73 1214.86 L1914.32 1214.86 L1914.9 1214.86 L1915.49 1214.86 L1916.08 1214.86 L1916.66 1214.86 L1917.25 1214.86 L1917.83 1214.86 L1918.42 1214.86 L1919.01 1214.86 L1919.59 1214.86 L1920.18 1214.86 L1920.77 1214.86 L1921.35 1214.86 L1921.94 1214.86 L1922.53 1214.86 L1923.11 1214.86 L1923.7 1214.86 L1924.29 1214.86 L1924.87 1214.86 L1925.46 1214.86 L1926.04 1214.86 L1926.63 1214.86 L1927.22 1214.86 L1927.8 1214.86 L1928.39 1214.86 L1928.98 1214.86 L1929.56 1214.86 L1930.15 1214.86 L1930.74 1214.86 L1931.32 1214.86 L1931.91 1214.86 L1932.5 1214.86 L1933.08 1214.86 L1933.67 1214.86 L1934.25 1214.86 L1934.84 1214.86 L1935.43 1214.86 L1936.01 1214.86 L1936.6 1214.86 L1937.19 1214.86 L1937.77 1214.86 L1938.36 1214.86 L1938.95 1214.86 L1939.53 1214.86 L1940.12 1214.86 L1940.71 1214.86 L1941.29 1214.86 L1941.88 1214.86 L1942.46 1214.86 L1943.05 1214.86 L1943.64 1214.86 L1944.22 1214.86 L1944.81 1214.86 L1945.4 1214.86 L1945.98 1214.86 L1946.57 1214.86 L1947.16 1214.86 L1947.74 1214.86 L1948.33 1214.86 L1948.91 1214.86 L1949.5 1214.86 L1950.09 1214.86 L1950.67 1214.86 L1951.26 1214.86 L1951.85 1214.86 L1952.43 1214.86 L1953.02 1214.86 L1953.61 1214.86 L1954.19 1214.86 L1954.78 1214.86 L1955.37 1214.86 L1955.95 1214.86 L1956.54 1214.86 L1957.12 1214.86 L1957.71 1214.86 L1958.3 1214.86 L1958.88 1214.86 L1959.47 1214.86 L1960.06 1214.86 L1960.64 1214.86 L1961.23 1214.86 L1961.82 1214.86 L1962.4 1214.86 L1962.99 1214.86 L1963.58 1214.86 L1964.16 1214.86 L1964.75 1214.86 L1965.33 1214.86 L1965.92 1214.86 L1966.51 1214.86 L1967.09 1214.86 L1967.68 1214.86 L1968.27 1214.86 L1968.85 1214.86 L1969.44 1214.86 L1970.03 1214.86 L1970.61 1214.86 L1971.2 1214.86 L1971.78 1214.86 L1972.37 1214.86 L1972.96 1214.86 L1973.54 1214.86 L1974.13 1214.86 L1974.72 1214.86 L1975.3 1214.86 L1975.89 1214.86 L1976.48 1214.86 L1977.06 1214.86 L1977.65 1214.86 L1978.24 1214.86 L1978.82 1214.86 L1979.41 1214.86 L1979.99 1214.86 L1980.58 1214.86 L1981.17 1214.86 L1981.75 1214.86 L1982.34 1214.86 L1982.93 1214.86 L1983.51 1214.86 L1984.1 1214.86 L1984.69 1214.86 L1985.27 1214.86 L1985.86 1214.86 L1986.45 1214.86 L1987.03 1214.86 L1987.62 1214.86 L1988.2 1214.86 L1988.79 1214.86 L1989.38 1214.86 L1989.96 1214.86 L1990.55 1214.86 L1991.14 1214.86 L1991.72 1214.86 L1992.31 1214.86 L1992.9 1214.86 L1993.48 1214.86 L1994.07 1214.86 L1994.65 1214.86 L1995.24 1214.86 L1995.83 1214.86 L1996.41 1214.86 L1997 1214.86 L1997.59 1214.86 L1998.17 1214.86 L1998.76 1214.86 L1999.35 1214.86 L1999.93 1214.86 L2000.52 1214.86 L2001.11 1214.86 L2001.69 1214.86 L2002.28 1214.86 L2002.86 1214.86 L2003.45 1214.86 L2004.04 1214.86 L2004.62 1214.86 L2005.21 1214.86 L2005.8 1214.86 L2006.38 1214.86 L2006.97 1214.86 L2007.56 1214.86 L2008.14 1214.86 L2008.73 1214.86 L2009.32 1214.86 L2009.9 1214.86 L2010.49 1214.86 L2011.07 1214.86 L2011.66 1214.86 L2012.25 1214.86 L2012.83 1214.86 L2013.42 1214.86 L2014.01 1214.86 L2014.59 1214.86 L2015.18 1214.86 L2015.77 1214.86 L2016.35 1214.86 L2016.94 1214.86 L2017.53 1214.86 L2018.11 1214.86 L2018.7 1214.86 L2019.28 1214.86 L2019.87 1214.86 L2020.46 1214.86 L2021.04 1214.86 L2021.63 1214.86 L2022.22 1214.86 L2022.8 1214.86 L2023.39 1214.86 L2023.98 1214.86 L2024.56 1214.86 L2025.15 1214.86 L2025.73 1214.86 L2026.32 1214.86 L2026.91 1214.86 L2027.49 1214.86 L2028.08 1214.86 L2028.67 1214.86 L2029.25 1214.86 L2029.84 1214.86 L2030.43 1214.86 L2031.01 1214.86 L2031.6 1214.86 L2032.19 1214.86 L2032.77 1214.86 L2033.36 1214.86 L2033.94 1214.86 L2034.53 1214.86 L2035.12 1214.86 L2035.7 1214.86 L2036.29 1214.86 L2036.88 1214.86 L2037.46 1214.86 L2038.05 1214.86 L2038.64 1214.86 L2039.22 1214.86 L2039.81 1214.86 L2040.4 1214.86 L2040.98 1214.86 L2041.57 1214.86 L2042.15 1214.86 L2042.74 1214.86 L2043.33 1214.86 L2043.91 1214.86 L2044.5 1214.86 L2045.09 1214.86 L2045.67 1214.86 L2046.26 1214.86 L2046.85 1214.86 L2047.43 1214.86 L2048.02 1214.86 L2048.6 1214.86 L2049.19 1214.86 L2049.78 1214.86 L2050.36 1214.86 L2050.95 1214.86 L2051.54 1214.86 L2052.12 1214.86 L2052.71 1214.86 L2053.3 1214.86 L2053.88 1214.86 L2054.47 1214.86 L2055.06 1214.86 L2055.64 1214.86 L2056.23 1214.86 L2056.81 1214.86 L2057.4 1214.86 L2057.99 1214.86 L2058.57 1214.86 L2059.16 1214.86 L2059.75 1214.86 L2060.33 1214.86 L2060.92 1214.86 L2061.51 1214.86 L2062.09 1214.86 L2062.68 1214.86 L2063.27 1214.86 L2063.85 1214.86 L2064.44 1214.86 L2065.02 1214.86 L2065.61 1214.86 L2066.2 1214.86 L2066.78 1214.86 L2067.37 1214.86 L2067.96 1214.86 L2068.54 1214.86 L2069.13 1214.86 L2069.72 1214.86 L2070.3 1214.86 L2070.89 1214.86 L2071.48 1214.86 L2072.06 1214.86 L2072.65 1214.86 L2073.23 1214.86 L2073.82 1214.86 L2074.41 1214.86 L2074.99 1214.86 L2075.58 1214.86 L2076.17 1214.86 L2076.75 1214.86 L2077.34 1214.86 L2077.93 1214.86 L2078.51 1214.86 L2079.1 1214.86 L2079.68 1214.86 L2080.27 1214.86 L2080.86 1214.86 L2081.44 1214.86 L2082.03 1214.86 L2082.62 1214.86 L2083.2 1214.86 L2083.79 1214.86 L2084.38 1214.86 L2084.96 1214.86 L2085.55 1214.86 L2086.14 1214.86 L2086.72 1214.86 L2087.31 1214.86 L2087.89 1214.86 L2088.48 1214.86 L2089.07 1214.86 L2089.65 1214.86 L2090.24 1214.86 L2090.83 1214.86 L2091.41 1214.86 L2092 1214.86 L2092.59 1214.86 L2093.17 1214.86 L2093.76 1214.86 L2094.35 1214.86 L2094.93 1214.86 L2095.52 1214.86 L2096.1 1214.86 L2096.69 1214.86 L2097.28 1214.86 L2097.86 1214.86 L2098.45 1214.86 L2099.04 1214.86 L2099.62 1214.86 L2100.21 1214.86 L2100.8 1214.86 L2101.38 1214.86 L2101.97 1214.86 L2102.55 1214.86 L2103.14 1214.86 L2103.73 1214.86 L2104.31 1214.86 L2104.9 1214.86 L2105.49 1214.86 L2106.07 1214.86 L2106.66 1214.86 L2107.25 1214.86 L2107.83 1214.86 L2108.42 1214.86 L2109.01 1214.86 L2109.59 1214.86 L2110.18 1214.86 L2110.76 1214.86 L2111.35 1214.86 L2111.94 1214.86 L2112.52 1214.86 L2113.11 1214.86 L2113.7 1214.86 L2114.28 1214.86 L2114.87 1214.86 L2115.46 1214.86 L2116.04 1214.86 L2116.63 1214.86 L2117.22 1214.86 L2117.8 1214.86 L2118.39 1214.86 L2118.97 1214.86 L2119.56 1214.86 L2120.15 1214.86 L2120.73 1214.86 L2121.32 1214.86 L2121.91 1214.86 L2122.49 1214.86 L2123.08 1214.86 L2123.67 1214.86 L2124.25 1214.86 L2124.84 1214.86 L2125.42 1214.86 L2126.01 1214.86 L2126.6 1214.86 L2127.18 1214.86 L2127.77 1214.86 L2128.36 1214.86 L2128.94 1214.86 L2129.53 1214.86 L2130.12 1214.86 L2130.7 1214.86 L2131.29 1214.86 L2131.88 1214.86 L2132.46 1214.86 L2133.05 1214.86 L2133.63 1214.86 L2134.22 1214.86 L2134.81 1214.86 L2135.39 1214.86 L2135.98 1214.86 L2136.57 1214.86 L2137.15 1214.86 L2137.74 1214.86 L2138.33 1214.86 L2138.91 1214.86 L2139.5 1214.86 L2140.09 1214.86 L2140.67 1214.86 L2141.26 1214.86 L2141.84 1214.86 L2142.43 1214.86 L2143.02 1214.86 L2143.6 1214.86 L2144.19 1214.86 L2144.78 1214.86 L2145.36 1214.86 L2145.95 1214.86 L2146.54 1214.86 L2147.12 1214.86 L2147.71 1214.86 L2148.3 1214.86 L2148.88 1214.86 L2149.47 1214.86 L2150.05 1214.86 L2150.64 1214.86 L2151.23 1214.86 L2151.81 1214.86 L2152.4 1214.86 L2152.99 1214.86 L2153.57 1214.86 L2154.16 1214.86 L2154.75 1214.86 L2155.33 1214.86 L2155.92 1214.86 L2156.5 1214.86 L2157.09 1214.86 L2157.68 1214.86 L2158.26 1214.86 L2158.26 1214.28 L2157.68 1214.28 L2157.09 1214.28 L2156.5 1214.28 L2155.92 1214.28 L2155.33 1214.28 L2154.75 1214.28 L2154.16 1214.28 L2153.57 1214.28 L2152.99 1214.28 L2152.4 1214.28 L2151.81 1214.28 L2151.23 1214.28 L2150.64 1214.28 L2150.05 1214.28 L2149.47 1214.28 L2148.88 1214.28 L2148.3 1214.28 L2147.71 1214.28 L2147.12 1214.28 L2146.54 1214.28 L2145.95 1214.28 L2145.36 1214.28 L2144.78 1214.28 L2144.19 1214.28 L2143.6 1214.28 L2143.02 1214.28 L2142.43 1214.28 L2141.84 1214.28 L2141.26 1214.28 L2140.67 1214.28 L2140.09 1214.28 L2139.5 1214.28 L2138.91 1214.28 L2138.33 1214.28 L2137.74 1214.28 L2137.15 1214.28 L2136.57 1214.28 L2135.98 1214.28 L2135.39 1214.28 L2134.81 1214.28 L2134.22 1214.28 L2133.63 1214.28 L2133.05 1214.28 L2132.46 1214.28 L2131.88 1214.28 L2131.29 1214.28 L2130.7 1214.28 L2130.12 1214.28 L2129.53 1214.28 L2128.94 1214.28 L2128.36 1214.28 L2127.77 1214.28 L2127.18 1214.28 L2126.6 1214.28 L2126.01 1214.28 L2125.42 1214.28 L2124.84 1214.28 L2124.25 1214.28 L2123.67 1214.28 L2123.08 1214.28 L2122.49 1214.28 L2121.91 1214.28 L2121.32 1214.28 L2120.73 1214.28 L2120.15 1214.28 L2119.56 1214.28 L2118.97 1214.28 L2118.39 1214.28 L2117.8 1214.28 L2117.22 1214.28 L2116.63 1214.28 L2116.04 1214.28 L2115.46 1214.28 L2114.87 1214.28 L2114.28 1214.28 L2113.7 1214.28 L2113.11 1214.28 L2112.52 1214.28 L2111.94 1214.28 L2111.35 1214.28 L2110.76 1214.28 L2110.18 1214.28 L2109.59 1214.28 L2109.01 1214.28 L2108.42 1214.28 L2107.83 1214.28 L2107.25 1214.28 L2106.66 1214.28 L2106.07 1214.28 L2105.49 1214.28 L2104.9 1214.28 L2104.31 1214.28 L2103.73 1214.28 L2103.14 1214.28 L2102.55 1214.28 L2101.97 1214.28 L2101.38 1214.28 L2100.8 1214.28 L2100.21 1214.28 L2099.62 1214.28 L2099.04 1214.28 L2098.45 1214.28 L2097.86 1214.28 L2097.28 1214.28 L2096.69 1214.28 L2096.1 1214.28 L2095.52 1214.28 L2094.93 1214.28 L2094.35 1214.28 L2093.76 1214.28 L2093.17 1214.28 L2092.59 1214.28 L2092 1214.28 L2091.41 1214.28 L2090.83 1214.28 L2090.24 1214.28 L2089.65 1214.28 L2089.07 1214.28 L2088.48 1214.28 L2087.89 1214.28 L2087.31 1214.28 L2086.72 1214.28 L2086.14 1214.28 L2085.55 1214.28 L2084.96 1214.28 L2084.38 1214.28 L2083.79 1214.28 L2083.2 1214.28 L2082.62 1214.28 L2082.03 1214.28 L2081.44 1214.28 L2080.86 1214.28 L2080.27 1214.28 L2079.68 1214.28 L2079.1 1214.28 L2078.51 1214.28 L2077.93 1214.28 L2077.34 1214.28 L2076.75 1214.28 L2076.17 1214.28 L2075.58 1214.28 L2074.99 1214.28 L2074.41 1214.28 L2073.82 1214.28 L2073.23 1214.28 L2072.65 1214.28 L2072.06 1214.28 L2071.48 1214.28 L2070.89 1214.28 L2070.3 1214.28 L2069.72 1214.28 L2069.13 1214.28 L2068.54 1214.28 L2067.96 1214.28 L2067.37 1214.28 L2066.78 1214.28 L2066.2 1214.28 L2065.61 1214.28 L2065.02 1214.28 L2064.44 1214.28 L2063.85 1214.28 L2063.27 1214.28 L2062.68 1214.28 L2062.09 1214.28 L2061.51 1214.28 L2060.92 1214.28 L2060.33 1214.28 L2059.75 1214.28 L2059.16 1214.28 L2058.57 1214.28 L2057.99 1214.28 L2057.4 1214.28 L2056.81 1214.28 L2056.23 1214.28 L2055.64 1214.28 L2055.06 1214.28 L2054.47 1214.28 L2053.88 1214.28 L2053.3 1214.28 L2052.71 1214.28 L2052.12 1214.28 L2051.54 1214.28 L2050.95 1214.28 L2050.36 1214.28 L2049.78 1214.28 L2049.19 1214.28 L2048.6 1214.28 L2048.02 1214.28 L2047.43 1214.28 L2046.85 1214.28 L2046.26 1214.28 L2045.67 1214.28 L2045.09 1214.28 L2044.5 1214.28 L2043.91 1214.28 L2043.33 1214.28 L2042.74 1214.28 L2042.15 1214.28 L2041.57 1214.28 L2040.98 1214.28 L2040.4 1214.28 L2039.81 1214.28 L2039.22 1214.28 L2038.64 1214.28 L2038.05 1214.28 L2037.46 1214.28 L2036.88 1214.28 L2036.29 1214.28 L2035.7 1214.28 L2035.12 1214.28 L2034.53 1214.28 L2033.94 1214.28 L2033.36 1214.28 L2032.77 1214.28 L2032.19 1214.28 L2031.6 1214.28 L2031.01 1214.28 L2030.43 1214.28 L2029.84 1214.28 L2029.25 1214.28 L2028.67 1214.28 L2028.08 1214.28 L2027.49 1214.28 L2026.91 1214.28 L2026.32 1214.28 L2025.73 1214.28 L2025.15 1214.28 L2024.56 1214.28 L2023.98 1214.28 L2023.39 1214.28 L2022.8 1214.28 L2022.22 1214.28 L2021.63 1214.28 L2021.04 1214.28 L2020.46 1214.28 L2019.87 1214.28 L2019.28 1214.28 L2018.7 1214.28 L2018.11 1214.28 L2017.53 1214.28 L2016.94 1214.28 L2016.35 1214.28 L2015.77 1214.28 L2015.18 1214.28 L2014.59 1214.28 L2014.01 1214.28 L2013.42 1214.28 L2012.83 1214.28 L2012.25 1214.28 L2011.66 1214.28 L2011.07 1214.28 L2010.49 1214.28 L2009.9 1214.28 L2009.32 1214.28 L2008.73 1214.28 L2008.14 1214.28 L2007.56 1214.28 L2006.97 1214.28 L2006.38 1214.28 L2005.8 1214.28 L2005.21 1214.28 L2004.62 1214.28 L2004.04 1214.28 L2003.45 1214.28 L2002.86 1214.28 L2002.28 1214.28 L2001.69 1214.28 L2001.11 1214.28 L2000.52 1214.28 L1999.93 1214.28 L1999.35 1214.28 L1998.76 1214.28 L1998.17 1214.28 L1997.59 1214.28 L1997 1214.28 L1996.41 1214.28 L1995.83 1214.28 L1995.24 1214.28 L1994.65 1214.28 L1994.07 1214.28 L1993.48 1214.28 L1992.9 1214.28 L1992.31 1214.28 L1991.72 1214.28 L1991.14 1214.28 L1990.55 1214.28 L1989.96 1214.28 L1989.38 1214.28 L1988.79 1214.28 L1988.2 1214.28 L1987.62 1214.28 L1987.03 1214.28 L1986.45 1214.28 L1985.86 1214.28 L1985.27 1214.28 L1984.69 1214.28 L1984.1 1214.28 L1983.51 1214.28 L1982.93 1214.28 L1982.34 1214.28 L1981.75 1214.28 L1981.17 1214.28 L1980.58 1214.28 L1979.99 1214.28 L1979.41 1214.28 L1978.82 1214.28 L1978.24 1214.28 L1977.65 1214.28 L1977.06 1214.28 L1976.48 1214.28 L1975.89 1214.28 L1975.3 1214.28 L1974.72 1214.28 L1974.13 1214.28 L1973.54 1214.28 L1972.96 1214.28 L1972.37 1214.28 L1971.78 1214.28 L1971.2 1214.28 L1970.61 1214.28 L1970.03 1214.28 L1969.44 1214.28 L1968.85 1214.28 L1968.27 1214.28 L1967.68 1214.28 L1967.09 1214.28 L1966.51 1214.28 L1965.92 1214.28 L1965.33 1214.28 L1964.75 1214.28 L1964.16 1214.28 L1963.58 1214.28 L1962.99 1214.28 L1962.4 1214.28 L1961.82 1214.28 L1961.23 1214.28 L1960.64 1214.28 L1960.06 1214.28 L1959.47 1214.28 L1958.88 1214.28 L1958.3 1214.28 L1957.71 1214.28 L1957.12 1214.28 L1956.54 1214.28 L1955.95 1214.28 L1955.37 1214.28 L1954.78 1214.28 L1954.19 1214.28 L1953.61 1214.28 L1953.02 1214.28 L1952.43 1214.28 L1951.85 1214.28 L1951.26 1214.28 L1950.67 1214.28 L1950.09 1214.28 L1949.5 1214.28 L1948.91 1214.28 L1948.33 1214.28 L1947.74 1214.28 L1947.16 1214.28 L1946.57 1214.28 L1945.98 1214.28 L1945.4 1214.28 L1944.81 1214.28 L1944.22 1214.28 L1943.64 1214.28 L1943.05 1214.28 L1942.46 1214.28 L1941.88 1214.28 L1941.29 1214.28 L1940.71 1214.28 L1940.12 1214.28 L1939.53 1214.28 L1938.95 1214.28 L1938.36 1214.28 L1937.77 1214.28 L1937.19 1214.28 L1936.6 1214.28 L1936.01 1214.28 L1935.43 1214.28 L1934.84 1214.28 L1934.25 1214.28 L1933.67 1214.28 L1933.08 1214.28 L1932.5 1214.28 L1931.91 1214.28 L1931.32 1214.28 L1930.74 1214.28 L1930.15 1214.28 L1929.56 1214.28 L1928.98 1214.28 L1928.39 1214.28 L1927.8 1214.28 L1927.22 1214.28 L1926.63 1214.28 L1926.04 1214.28 L1925.46 1214.28 L1924.87 1214.28 L1924.29 1214.28 L1923.7 1214.28 L1923.11 1214.28 L1922.53 1214.28 L1921.94 1214.28 L1921.35 1214.28 L1920.77 1214.28 L1920.18 1214.28 L1919.59 1214.28 L1919.01 1214.28 L1918.42 1214.28 L1917.83 1214.28 L1917.25 1214.28 L1916.66 1214.28 L1916.08 1214.28 L1915.49 1214.28 L1914.9 1214.28 L1914.32 1214.28 L1913.73 1214.28 L1913.14 1214.28 L1912.56 1214.28 L1911.97 1214.28 L1911.38 1214.28 L1910.8 1214.28 L1910.21 1214.28 L1909.63 1214.28 L1909.04 1214.28 L1908.45 1214.28 L1907.87 1214.28 L1907.28 1214.28 L1906.69 1214.28 L1906.11 1214.28 L1905.52 1214.28 L1904.93 1214.28 L1904.35 1214.28 L1903.76 1214.28 L1903.17 1214.28 L1902.59 1214.28 L1902 1214.28 L1901.42 1214.28 L1900.83 1214.28 L1900.24 1214.28 L1899.66 1214.28 L1899.07 1214.28 L1898.48 1214.28 L1897.9 1214.28 L1897.31 1214.28 L1896.72 1214.28 L1896.14 1214.28 L1895.55 1214.28 L1894.96 1214.28 L1894.38 1214.28 L1893.79 1214.28 L1893.21 1214.28 L1892.62 1214.28 L1892.03 1214.28 L1891.45 1214.28 L1890.86 1214.28 L1890.27 1214.28 L1889.69 1214.28 L1889.1 1214.28 L1888.51 1214.28 L1887.93 1214.28 L1887.34 1214.28 L1886.76 1214.28 L1886.17 1214.28 L1885.58 1214.28 L1885 1214.28 L1884.41 1214.28 L1883.82 1214.28 L1883.24 1214.28 L1882.65 1214.28 L1882.06 1214.28 L1881.48 1214.28 L1880.89 1214.28 L1880.3 1214.28 L1879.72 1214.28 L1879.13 1214.28 L1878.55 1214.28 L1877.96 1214.28 L1877.37 1214.28 L1876.79 1214.28 L1876.2 1214.28 L1875.61 1214.28 L1875.03 1214.28 L1874.44 1214.28 L1873.85 1214.28 L1873.27 1214.28 L1872.68 1214.28 L1872.09 1214.28 L1871.51 1214.28 L1870.92 1214.28 L1870.34 1214.28 L1869.75 1214.28 L1869.16 1214.28 L1868.58 1214.28 L1867.99 1214.28 L1867.4 1214.28 L1866.82 1214.28 L1866.23 1214.28 L1865.64 1214.28 L1865.06 1214.28 L1864.47 1214.28 L1863.88 1214.28 L1863.3 1214.28 L1862.71 1214.28 L1862.13 1214.28 L1861.54 1214.28 L1860.95 1214.28 L1860.37 1214.28 L1859.78 1214.28 L1859.19 1214.28 L1858.61 1214.28 L1858.02 1214.28 L1857.43 1214.28 L1856.85 1214.28 L1856.26 1214.28 L1855.68 1214.28 L1855.09 1214.28 L1854.5 1214.28 L1853.92 1214.28 L1853.33 1214.28 L1852.74 1214.28 L1852.16 1214.28 L1851.57 1214.28 L1850.98 1214.28 L1850.4 1214.28 L1849.81 1214.28 L1849.22 1214.28 L1848.64 1214.28 L1848.05 1214.28 L1847.47 1214.28 L1846.88 1214.28 L1846.29 1214.28 L1845.71 1214.28 L1845.12 1214.28 L1844.53 1214.28 L1843.95 1214.28 L1843.36 1214.28 L1842.77 1214.28 L1842.19 1214.28 L1841.6 1214.28 L1841.01 1214.28 L1840.43 1214.28 L1839.84 1214.28 L1839.26 1214.28 L1838.67 1214.28 L1838.08 1214.28 L1837.5 1214.28 L1836.91 1214.28 L1836.32 1214.28 L1835.74 1214.28 L1835.15 1214.28 L1834.56 1214.28 L1833.98 1214.28 L1833.39 1214.28 L1832.81 1214.28 L1832.22 1214.28 L1831.63 1214.28 L1831.05 1214.28 L1830.46 1214.28 L1829.87 1214.28 L1829.29 1214.28 L1828.7 1214.28 L1828.11 1214.28 L1827.53 1214.28 L1826.94 1214.28 L1826.35 1214.28 L1825.77 1214.28 L1825.18 1214.28 L1824.6 1214.28 L1824.01 1214.28 L1823.42 1214.28 L1822.84 1214.28 L1822.25 1214.28 L1821.66 1214.28 L1821.08 1214.28 L1820.49 1214.28 L1819.9 1214.28 L1819.32 1214.28 L1818.73 1214.28 L1818.14 1214.28 L1817.56 1214.28 L1816.97 1214.28 L1816.39 1214.28 L1815.8 1214.28 L1815.21 1214.28 L1814.63 1214.28 L1814.04 1214.28 L1813.45 1214.28 L1812.87 1214.28 L1812.28 1214.28 L1811.69 1214.28 L1811.11 1214.28 L1810.52 1214.28 L1809.94 1214.28 L1809.35 1214.28 L1808.76 1214.28 L1808.18 1214.28 L1807.59 1214.28 L1807 1214.28 L1806.42 1214.28 L1805.83 1214.28 L1805.24 1214.28 L1804.66 1214.28 L1804.07 1214.28 L1803.48 1214.28 L1802.9 1214.28 L1802.31 1214.28 L1801.73 1214.28 L1801.14 1214.28 L1800.55 1214.28 L1799.97 1214.28 L1799.38 1214.28 L1798.79 1214.28 L1798.21 1214.28 L1797.62 1214.28 L1797.03 1214.28 L1796.45 1214.28 L1795.86 1214.28 L1795.27 1214.28 L1794.69 1214.28 L1794.1 1214.28 L1793.52 1214.28 L1792.93 1214.28 L1792.34 1214.28 L1791.76 1214.28 L1791.17 1214.28 L1790.58 1214.28 L1790 1214.28 L1789.41 1214.28 L1788.82 1214.28 L1788.24 1214.28 L1787.65 1214.28 L1787.06 1214.28 L1786.48 1214.28 L1785.89 1214.28 L1785.31 1214.28 L1784.72 1214.28 L1784.13 1214.28 L1783.55 1214.28 L1782.96 1214.28 L1782.37 1214.28 L1781.79 1214.28 L1781.2 1214.28 L1780.61 1214.28 L1780.03 1214.28 L1779.44 1214.28 L1778.86 1214.28 L1778.27 1214.28 L1777.68 1214.28 L1777.1 1214.28 L1776.51 1214.28 L1775.92 1214.28 L1775.34 1214.28 L1774.75 1214.28 L1774.16 1214.28 L1773.58 1214.28 L1772.99 1214.28 L1772.4 1214.28 L1771.82 1214.28 L1771.23 1214.28 L1770.65 1214.28 L1770.06 1214.28 L1769.47 1214.28 L1768.89 1214.28 L1768.3 1214.28 L1767.71 1214.28 L1767.13 1214.28 L1766.54 1214.28 L1765.95 1214.28 L1765.37 1214.28 L1764.78 1214.28 L1764.19 1214.28 L1763.61 1214.28 L1763.02 1214.28 L1762.44 1214.28 L1761.85 1214.28 L1761.26 1214.28 L1760.68 1214.28 L1760.09 1214.28 L1759.5 1214.28 L1758.92 1214.28 L1758.33 1214.28 L1757.74 1214.28 L1757.16 1214.28 L1756.57 1214.28 L1755.99 1214.28 L1755.4 1214.28 L1754.81 1214.28 L1754.23 1214.28 L1753.64 1214.28 L1753.05 1214.28 L1752.47 1214.28 L1751.88 1214.28 L1751.29 1214.28 L1750.71 1214.28 L1750.12 1214.28 L1749.53 1214.28 L1748.95 1214.28 L1748.36 1214.28 L1747.78 1214.28 L1747.19 1214.28 L1746.6 1214.28 L1746.02 1214.28 L1745.43 1214.28 L1744.84 1214.28 L1744.26 1214.28 L1743.67 1214.28 L1743.08 1214.28 L1742.5 1214.28 L1741.91 1214.28 L1741.32 1214.28 L1740.74 1214.28 L1740.15 1214.28 L1739.57 1214.28 L1738.98 1214.28 L1738.39 1214.28 L1737.81 1214.28 L1737.22 1214.28 L1736.63 1214.28 L1736.05 1214.28 L1735.46 1214.28 L1734.87 1214.28 L1734.29 1214.28 L1733.7 1214.28 L1733.11 1214.28 L1732.53 1214.28 L1731.94 1214.28 L1731.36 1214.28 L1730.77 1214.28 L1730.18 1214.28 L1729.6 1214.28 L1729.01 1214.28 L1728.42 1214.28 L1727.84 1214.28 L1727.25 1214.28 L1726.66 1214.28 L1726.08 1214.28 L1725.49 1214.28 L1724.91 1214.28 L1724.32 1214.28 L1723.73 1214.28 L1723.15 1214.28 L1722.56 1214.28 L1721.97 1214.28 L1721.39 1214.28 L1720.8 1214.28 L1720.21 1214.28 L1719.63 1214.28 L1719.04 1214.28 L1718.45 1214.28 L1717.87 1214.28 L1717.28 1214.28 L1716.7 1214.28 L1716.11 1214.28 L1715.52 1214.28 L1714.94 1214.28 L1714.35 1214.28 L1713.76 1214.28 L1713.18 1214.28 L1712.59 1214.28 L1712 1214.28 L1711.42 1214.28 L1710.83 1214.28 L1710.24 1214.28 L1709.66 1214.28 L1709.07 1214.28 L1708.49 1214.28 L1707.9 1214.28 L1707.31 1214.28 L1706.73 1214.28 L1706.14 1214.28 L1705.55 1214.28 L1704.97 1214.28 L1704.38 1214.28 L1703.79 1214.28 L1703.21 1214.28 L1702.62 1214.28 L1702.04 1214.28 L1701.45 1214.28 L1700.86 1214.28 L1700.28 1214.28 L1699.69 1214.28 L1699.1 1214.28 L1698.52 1214.28 L1697.93 1214.28 L1697.34 1214.28 L1696.76 1214.28 L1696.17 1214.28 L1695.58 1214.28 L1695 1214.28 L1694.41 1214.28 L1693.83 1214.28 L1693.24 1214.28 L1692.65 1214.28 L1692.07 1214.28 L1691.48 1214.28 L1690.89 1214.28 L1690.31 1214.28 L1689.72 1214.28 L1689.13 1214.28 L1688.55 1214.28 L1687.96 1214.28 L1687.37 1214.28 L1686.79 1214.28 L1686.2 1214.28 L1685.62 1214.28 L1685.03 1214.28 L1684.44 1214.28 L1683.86 1214.28 L1683.27 1214.28 L1682.68 1214.28 L1682.1 1214.28 L1681.51 1214.28 L1680.92 1214.28 L1680.34 1214.28 L1679.75 1214.28 L1679.17 1214.28 L1678.58 1214.28 L1677.99 1214.28 L1677.41 1214.28 L1676.82 1214.28 L1676.23 1214.28 L1675.65 1214.28 L1675.06 1214.28 L1674.47 1214.28 L1673.89 1214.28 L1673.3 1214.28 L1672.71 1214.28 L1672.13 1214.28 L1671.54 1214.28 L1670.96 1214.28 L1670.37 1214.28 L1669.78 1214.28 L1669.2 1214.28 L1668.61 1214.28 L1668.02 1214.28 L1667.44 1214.28 L1666.85 1214.28 L1666.26 1214.28 L1665.68 1214.28 L1665.09 1214.28 L1664.5 1214.28 L1663.92 1214.28 L1663.33 1214.28 L1662.75 1214.28 L1662.16 1214.28 L1661.57 1214.28 L1660.99 1214.28 L1660.4 1214.28 L1659.81 1214.28 L1659.23 1214.28 L1658.64 1214.28 L1658.05 1214.28 L1657.47 1214.28 L1656.88 1214.28 L1656.29 1214.28 L1655.71 1214.28 L1655.12 1214.28 L1654.54 1214.28 L1653.95 1214.28 L1653.36 1214.28 L1652.78 1214.28 L1652.19 1214.28 L1651.6 1214.28 L1651.02 1214.28 L1650.43 1214.28 L1649.84 1214.28 L1649.26 1214.28 L1648.67 1214.28 L1648.09 1214.28 L1647.5 1214.28 L1646.91 1214.28 L1646.33 1214.28 L1645.74 1214.28 L1645.15 1214.28 L1644.57 1214.28 L1643.98 1214.28 L1643.39 1214.28 L1642.81 1214.28 L1642.22 1214.28 L1641.63 1214.28 L1641.05 1214.28 L1640.46 1214.28 L1639.88 1214.28 L1639.29 1214.28 L1638.7 1214.28 L1638.12 1214.28 L1637.53 1214.28 L1636.94 1214.28 L1636.36 1214.28 L1635.77 1214.28 L1635.18 1214.28 L1634.6 1214.28 L1634.01 1214.28 L1633.42 1214.28 L1632.84 1214.28 L1632.25 1214.28 L1631.67 1214.28 L1631.08 1214.28 L1630.49 1214.28 L1629.91 1214.28 L1629.32 1214.28 L1628.73 1214.28 L1628.15 1214.28 L1627.56 1214.28 L1626.97 1214.28 L1626.39 1214.28 L1625.8 1214.28 L1625.22 1214.28 L1624.63 1214.28 L1624.04 1214.28 L1623.46 1214.28 L1622.87 1214.28 L1622.28 1214.28 L1621.7 1214.28 L1621.11 1214.28 L1620.52 1214.28 L1619.94 1214.28 L1619.35 1214.28 L1618.76 1214.28 L1618.18 1214.28 L1617.59 1214.28 L1617.01 1214.28 L1616.42 1214.28 L1615.83 1214.28 L1615.25 1214.28 L1614.66 1214.28 L1614.07 1214.28 L1613.49 1214.28 L1612.9 1214.28 L1612.31 1214.28 L1611.73 1214.28 L1611.14 1214.28 L1610.55 1214.28 L1609.97 1214.28 L1609.38 1214.28 L1608.8 1214.28 L1608.21 1214.28 L1607.62 1214.28 L1607.04 1214.28 L1606.45 1214.28 L1605.86 1214.28 L1605.28 1214.28 L1604.69 1214.28 L1604.1 1214.28 L1603.52 1214.28 L1602.93 1214.28 L1602.34 1214.28 L1601.76 1214.28 L1601.17 1214.28 L1600.59 1214.28 L1600 1214.28 L1599.41 1214.28 L1598.83 1214.28 L1598.24 1214.28 L1597.65 1214.28 L1597.07 1214.28 L1596.48 1214.28 L1595.89 1214.28 L1595.31 1214.28 L1594.72 1214.28 L1594.14 1214.28 L1593.55 1214.28 L1592.96 1214.28 L1592.38 1214.28 L1591.79 1214.28 L1591.2 1214.28 L1590.62 1214.28 L1590.03 1214.28 L1589.44 1214.28 L1588.86 1214.28 L1588.27 1214.28 L1587.68 1214.28 L1587.1 1214.28 L1586.51 1214.28 L1585.93 1214.28 L1585.34 1214.28 L1584.75 1214.28 L1584.17 1214.28 L1583.58 1214.28 L1582.99 1214.28 L1582.41 1214.28 L1581.82 1214.28 L1581.23 1214.28 L1580.65 1214.28 L1580.06 1214.28 L1579.47 1214.28 L1578.89 1214.28 L1578.3 1214.28 L1577.72 1214.28 L1577.13 1214.28 L1576.54 1214.28 L1575.96 1214.28 L1575.37 1214.28 L1574.78 1214.28 L1574.2 1214.28 L1573.61 1214.28 L1573.02 1214.28 L1572.44 1214.28 L1571.85 1214.28 L1571.27 1214.28 L1570.68 1214.28 L1570.09 1214.28 L1569.51 1214.28 L1568.92 1214.28 L1568.33 1214.28 L1567.75 1214.28 L1567.16 1214.28 L1566.57 1214.28 L1565.99 1214.28 L1565.4 1214.28 L1564.81 1214.28 L1564.23 1214.28 L1563.64 1214.28 L1563.06 1214.28 L1562.47 1214.28 L1561.88 1214.28 L1561.3 1214.28 L1560.71 1214.28 L1560.12 1214.28 L1559.54 1214.28 L1558.95 1214.28 L1558.36 1214.28 L1557.78 1214.28 L1557.19 1214.28 L1556.6 1214.28 L1556.02 1214.28 L1555.43 1214.28 L1554.85 1214.28 L1554.26 1214.28 L1553.67 1214.28 L1553.09 1214.28 L1552.5 1214.28 L1551.91 1214.28 L1551.33 1214.28 L1550.74 1214.28 L1550.15 1214.28 L1549.57 1214.28 L1548.98 1214.28 L1548.4 1214.28 L1547.81 1214.28 L1547.22 1214.28 L1546.64 1214.28 L1546.05 1214.28 L1545.46 1214.28 L1544.88 1214.28 L1544.29 1214.28 L1543.7 1214.28 L1543.12 1214.28 L1542.53 1214.28 L1541.94 1214.28 L1541.36 1214.28 L1540.77 1214.28 L1540.19 1214.28 L1539.6 1214.28 L1539.01 1214.28 L1538.43 1214.28 L1537.84 1214.28 L1537.25 1214.28 L1536.67 1214.28 L1536.08 1214.28 L1535.49 1214.28 L1534.91 1214.28 L1534.32 1214.28 L1533.73 1214.28 L1533.15 1214.28 L1532.56 1214.28 L1531.98 1214.28 L1531.39 1214.28 L1530.8 1214.28 L1530.22 1214.28 L1529.63 1214.28 L1529.04 1214.28 L1528.46 1214.28 L1527.87 1214.28 L1527.28 1214.28 L1526.7 1214.28 L1526.11 1214.28 L1525.52 1214.28 L1524.94 1214.28 L1524.35 1214.28 L1523.77 1214.28 L1523.18 1214.28 L1522.59 1214.28 L1522.01 1214.28 L1521.42 1214.28 L1520.83 1214.28 L1520.25 1214.28 L1519.66 1214.28 L1519.07 1214.28 L1518.49 1214.28 L1517.9 1214.28 L1517.32 1214.28 L1516.73 1214.28 L1516.14 1214.28 L1515.56 1214.28 L1514.97 1214.28 L1514.38 1214.28 L1513.8 1214.28 L1513.21 1214.28 L1512.62 1214.28 L1512.04 1214.28 L1511.45 1214.28 L1510.86 1214.28 L1510.28 1214.28 L1509.69 1214.28 L1509.11 1214.28 L1508.52 1214.28 L1507.93 1214.28 L1507.35 1214.28 L1506.76 1214.28 L1506.17 1214.28 L1505.59 1214.28 L1505 1214.28 L1504.41 1214.28 L1503.83 1214.28 L1503.24 1214.28 L1502.65 1214.28 L1502.07 1214.28 L1501.48 1214.28 L1500.9 1214.28 L1500.31 1214.28 L1499.72 1214.28 L1499.14 1214.28 L1498.55 1214.28 L1497.96 1214.28 L1497.38 1214.28 L1496.79 1214.28 L1496.2 1214.28 L1495.62 1214.28 L1495.03 1214.28 L1494.45 1214.28 L1493.86 1214.28 L1493.27 1214.28 L1492.69 1214.28 L1492.1 1214.28 L1491.51 1214.28 L1490.93 1214.28 L1490.34 1214.28 L1489.75 1214.28 L1489.17 1214.28 L1488.58 1214.28 L1487.99 1214.28 L1487.41 1214.28 L1486.82 1214.28 L1486.24 1214.28 L1485.65 1214.28 L1485.06 1214.28 L1484.48 1214.28 L1483.89 1214.28 L1483.3 1214.28 L1482.72 1214.28 L1482.13 1214.28 L1481.54 1214.28 L1480.96 1214.28 L1480.37 1214.28 L1479.78 1214.28 L1479.2 1214.28 L1478.61 1214.28 L1478.03 1214.28 L1477.44 1214.28 L1476.85 1214.28 L1476.27 1214.28 L1475.68 1214.28 L1475.09 1214.28 L1474.51 1214.28 L1473.92 1214.28 L1473.33 1214.28 L1472.75 1214.28 L1472.16 1214.28 L1471.57 1214.28 L1470.99 1214.28 L1470.4 1214.28 L1469.82 1214.28 L1469.23 1214.28 L1468.64 1214.28 L1468.06 1214.28 L1467.47 1214.28 L1466.88 1214.28 L1466.3 1214.28 L1465.71 1214.28 L1465.12 1214.28 L1464.54 1214.28 L1463.95 1214.28 L1463.37 1214.28 L1462.78 1214.28 L1462.19 1214.28 L1461.61 1214.28 L1461.02 1214.28 L1460.43 1214.28 L1459.85 1214.28 L1459.26 1214.28 L1458.67 1214.28 L1458.09 1214.28 L1457.5 1214.28 L1456.91 1214.28 L1456.33 1214.28 L1455.74 1214.28 L1455.16 1214.28 L1454.57 1214.28 L1453.98 1214.28 L1453.4 1214.28 L1452.81 1214.28 L1452.22 1214.28 L1451.64 1214.28 L1451.05 1214.28 L1450.46 1214.28 L1449.88 1214.28 L1449.29 1214.28 L1448.7 1214.28 L1448.12 1214.28 L1447.53 1214.28 L1446.95 1214.28 L1446.36 1214.28 L1445.77 1214.28 L1445.19 1214.28 L1444.6 1214.28 L1444.01 1214.28 L1443.43 1214.28 L1442.84 1214.28 L1442.25 1214.28 L1441.67 1214.28 L1441.08 1214.28 L1440.5 1214.28 L1439.91 1214.28 L1439.32 1214.28 L1438.74 1214.28 L1438.15 1214.28 L1437.56 1214.28 L1436.98 1214.28 L1436.39 1214.28 L1435.8 1214.28 L1435.22 1214.28 L1434.63 1214.28 L1434.04 1214.28 L1433.46 1214.28 L1432.87 1214.28 L1432.29 1214.28 L1431.7 1214.28 L1431.11 1214.28 L1430.53 1214.28 L1429.94 1214.28 L1429.35 1214.28 L1428.77 1214.28 L1428.18 1214.28 L1427.59 1214.28 L1427.01 1214.28 L1426.42 1214.28 L1425.83 1214.28 L1425.25 1214.28 L1424.66 1214.28 L1424.08 1214.28 L1423.49 1214.28 L1422.9 1214.28 L1422.32 1214.28 L1421.73 1214.28 L1421.14 1214.28 L1420.56 1214.28 L1419.97 1214.28 L1419.38 1214.28 L1418.8 1214.28 L1418.21 1214.28 L1417.63 1214.28 L1417.04 1214.28 L1416.45 1214.28 L1415.87 1214.28 L1415.28 1214.28 L1414.69 1214.28 L1414.11 1214.28 L1413.52 1214.28 L1412.93 1214.28 L1412.35 1214.28 L1411.76 1214.28 L1411.17 1214.28 L1410.59 1214.28 L1410 1214.28 L1409.42 1214.28 L1408.83 1214.28 L1408.24 1214.28 L1407.66 1214.28 L1407.07 1214.28 L1406.48 1214.28 L1405.9 1214.28 L1405.31 1214.28 L1404.72 1214.28 L1404.14 1214.28 L1403.55 1214.28 L1402.96 1214.28 L1402.38 1214.28 L1401.79 1214.28 L1401.21 1214.28 L1400.62 1214.28 L1400.03 1214.28 L1399.45 1214.28 L1398.86 1214.28 L1398.27 1214.28 L1397.69 1214.28 L1397.1 1214.28 L1396.51 1214.28 L1395.93 1214.28 L1395.34 1214.28 L1394.75 1214.28 L1394.17 1214.28 L1393.58 1214.28 L1393 1214.28 L1392.41 1214.28 L1391.82 1214.28 L1391.24 1214.28 L1390.65 1214.28 L1390.06 1214.28 L1389.48 1214.28 L1388.89 1214.28 L1388.3 1214.28 L1387.72 1214.28 L1387.13 1214.28 L1386.55 1214.28 L1385.96 1214.28 L1385.37 1214.28 L1384.79 1214.28 L1384.2 1214.28 L1383.61 1214.28 L1383.03 1214.28 L1382.44 1214.28 L1381.85 1214.28 L1381.27 1214.28 L1380.68 1214.28 L1380.09 1214.28 L1379.51 1214.28 L1378.92 1214.28 L1378.34 1214.28 L1377.75 1214.28 L1377.16 1214.28 L1376.58 1214.28 L1375.99 1214.28 L1375.4 1214.28 L1374.82 1214.28 L1374.23 1214.28 L1373.64 1214.28 L1373.06 1214.28 L1372.47 1214.28 L1371.88 1214.28 L1371.3 1214.28 L1370.71 1214.28 L1370.13 1214.28 L1369.54 1214.28 L1368.95 1214.28 L1368.37 1214.28 L1367.78 1214.28 L1367.19 1214.28 L1366.61 1214.28 L1366.02 1214.28 L1365.43 1214.28 L1364.85 1214.28 L1364.26 1214.28 L1363.68 1214.28 L1363.09 1214.28 L1362.5 1214.28 L1361.92 1214.28 L1361.33 1214.28 L1360.74 1214.28 L1360.16 1214.28 L1359.57 1214.28 L1358.98 1214.28 L1358.4 1214.28 L1357.81 1214.28 L1357.22 1214.28 L1356.64 1214.28 L1356.05 1214.28 L1355.47 1214.28 L1354.88 1214.28 L1354.29 1214.28 L1353.71 1214.28 L1353.12 1214.28 L1352.53 1214.28 L1351.95 1214.28 L1351.36 1214.28 L1350.77 1214.28 L1350.19 1214.28 L1349.6 1214.28 L1349.01 1214.28 L1348.43 1214.28 L1347.84 1214.28 L1347.26 1214.28 L1346.67 1214.28 L1346.08 1214.28 L1345.5 1214.28 L1344.91 1214.28 L1344.32 1214.28 L1343.74 1214.28 L1343.15 1214.28 L1342.56 1214.28 L1341.98 1214.28 L1341.39 1214.28 L1340.8 1214.28 L1340.22 1214.28 L1339.63 1214.28 L1339.05 1214.28 L1338.46 1214.28 L1337.87 1214.28 L1337.29 1214.28 L1336.7 1214.28 L1336.11 1214.28 L1335.53 1214.28 L1334.94 1214.28 L1334.35 1214.28 L1333.77 1214.28 L1333.18 1214.28 L1332.6 1214.28 L1332.01 1214.28 L1331.42 1214.28 L1330.84 1214.28 L1330.25 1214.28 L1329.66 1214.28 L1329.08 1214.28 L1328.49 1214.28 L1327.9 1214.28 L1327.32 1214.28 L1326.73 1214.28 L1326.14 1214.28 L1325.56 1214.28 L1324.97 1214.28 L1324.39 1214.28 L1323.8 1214.28 L1323.21 1214.28 L1322.63 1214.28 L1322.04 1214.28 L1321.45 1214.28 L1320.87 1214.28 L1320.28 1214.28 L1319.69 1214.28 L1319.11 1214.28 L1318.52 1214.28 L1317.93 1214.28 L1317.35 1214.28 L1316.76 1214.28 L1316.18 1214.28 L1315.59 1214.28 L1315 1214.28 L1314.42 1214.28 L1313.83 1214.28 L1313.24 1214.28 L1312.66 1214.28 L1312.07 1214.28 L1311.48 1214.28 L1310.9 1214.28 L1310.31 1214.28 L1309.73 1214.28 L1309.14 1214.28 L1308.55 1214.28 L1307.97 1214.28 L1307.38 1214.28 L1306.79 1214.28 L1306.21 1214.28 L1305.62 1214.28 L1305.03 1214.28 L1304.45 1214.28 L1303.86 1214.28 L1303.27 1214.28 L1302.69 1214.28 L1302.1 1214.28 L1301.52 1214.28 L1300.93 1214.28 L1300.34 1214.28 L1299.76 1214.28 L1299.17 1214.28 L1298.58 1214.28 L1298 1214.28 L1297.41 1214.28 L1296.82 1214.28 L1296.24 1214.28 L1295.65 1214.28 L1295.06 1214.28 L1294.48 1214.28 L1293.89 1214.28 L1293.31 1214.28 L1292.72 1214.28 L1292.13 1214.28 L1291.55 1214.28 L1290.96 1214.28 L1290.37 1214.28 L1289.79 1214.28 L1289.2 1214.28 L1288.61 1214.28 L1288.03 1214.28 L1287.44 1214.28 L1286.86 1214.28 L1286.27 1214.28 L1285.68 1214.28 L1285.1 1214.28 L1284.51 1214.28 L1283.92 1214.28 L1283.34 1214.28 L1282.75 1214.28 L1282.16 1214.28 L1281.58 1214.28 L1280.99 1214.28 L1280.4 1214.28 L1279.82 1214.28 L1279.23 1214.28 L1278.65 1214.28 L1278.06 1214.28 L1277.47 1214.28 L1276.89 1214.28 L1276.3 1214.28 L1275.71 1214.28 L1275.13 1214.28 L1274.54 1214.28 L1273.95 1214.28 L1273.37 1214.28 L1272.78 1214.28 L1272.19 1214.28 L1271.61 1214.28 L1271.02 1214.28 L1270.44 1214.28 L1269.85 1214.28 L1269.26 1214.28 L1268.68 1214.28 L1268.09 1214.28 L1267.5 1214.28 L1266.92 1214.28 L1266.33 1214.28 L1265.74 1214.28 L1265.16 1214.28 L1264.57 1214.28 L1263.98 1214.28 L1263.4 1214.28 L1262.81 1214.28 L1262.23 1214.28 L1261.64 1214.28 L1261.05 1214.28 L1260.47 1214.28 L1259.88 1214.28 L1259.29 1214.28 L1258.71 1214.28 L1258.12 1214.28 L1257.53 1214.28 L1256.95 1214.28 L1256.36 1214.28 L1255.78 1214.28 L1255.19 1214.28 L1254.6 1214.28 L1254.02 1214.28 L1253.43 1214.28 L1252.84 1214.28 L1252.26 1214.28 L1251.67 1214.28 L1251.08 1214.28 L1250.5 1214.28 L1249.91 1214.28 L1249.32 1214.28 L1248.74 1214.28 L1248.15 1214.28 L1247.57 1214.28 L1246.98 1214.28 L1246.39 1214.28 L1245.81 1214.28 L1245.22 1214.28 L1244.63 1214.28 L1244.05 1214.28 L1243.46 1214.28 L1242.87 1214.28 L1242.29 1214.28 L1241.7 1214.28 L1241.11 1214.28 L1240.53 1214.28 L1239.94 1214.28 L1239.36 1214.28 L1238.77 1214.28 L1238.18 1214.28 L1237.6 1214.28 L1237.01 1214.28 L1236.42 1214.28 L1235.84 1214.28 L1235.25 1214.28 L1234.66 1214.28 L1234.08 1214.28 L1233.49 1214.28 L1232.91 1214.28 L1232.32 1214.28 L1231.73 1214.28 L1231.15 1214.28 L1230.56 1214.28 L1229.97 1214.28 L1229.39 1214.28 L1228.8 1214.28 L1228.21 1214.28 L1227.63 1214.28 L1227.04 1214.28 L1226.45 1214.28 L1225.87 1214.28 L1225.28 1214.28 L1224.7 1214.28 L1224.11 1214.28 L1223.52 1214.28 L1222.94 1214.28 L1222.35 1214.28 L1221.76 1214.28 L1221.18 1214.28 L1220.59 1214.28 L1220 1214.28 L1219.42 1214.28 L1218.83 1214.28 L1218.24 1214.28 L1217.66 1214.28 L1217.07 1214.28 L1216.49 1214.28 L1215.9 1214.28 L1215.31 1214.28 L1214.73 1214.28 L1214.14 1214.28 L1213.55 1214.28 L1212.97 1214.28 L1212.38 1214.28 L1211.79 1214.28 L1211.21 1214.28 L1210.62 1214.28 L1210.03 1214.28 L1209.45 1214.28 L1208.86 1214.28 L1208.28 1214.28 L1207.69 1214.28 L1207.1 1214.28 L1206.52 1214.28 L1205.93 1214.28 L1205.34 1214.28 L1204.76 1214.28 L1204.17 1214.28 L1203.58 1214.28 L1203 1214.28 L1202.41 1214.28 L1201.83 1214.28 L1201.24 1214.28 L1200.65 1214.28 L1200.07 1214.28 L1199.48 1214.28 L1198.89 1214.28 L1198.31 1214.28 L1197.72 1214.28 L1197.13 1214.28 L1196.55 1214.28 L1195.96 1214.28 L1195.37 1214.28 L1194.79 1214.28 L1194.2 1214.28 L1193.62 1214.28 L1193.03 1214.28 L1192.44 1214.28 L1191.86 1214.28 L1191.27 1214.28 L1190.68 1214.28 L1190.1 1214.28 L1189.51 1214.28 L1188.92 1214.28 L1188.34 1214.28 L1187.75 1214.28 L1187.16 1214.28 L1186.58 1214.28 L1185.99 1214.28 L1185.41 1214.28 L1184.82 1214.28 L1184.23 1214.28 L1183.65 1214.28 L1183.06 1214.28 L1182.47 1214.28 L1181.89 1214.28 L1181.3 1214.28 L1180.71 1214.28 L1180.13 1214.28 L1179.54 1214.28 L1178.96 1214.28 L1178.37 1214.28 L1177.78 1214.28 L1177.2 1214.28 L1176.61 1214.28 L1176.02 1214.28 L1175.44 1214.28 L1174.85 1214.28 L1174.26 1214.28 L1173.68 1214.28 L1173.09 1214.28 L1172.5 1214.28 L1171.92 1214.28 L1171.33 1214.28 L1170.75 1214.28 L1170.16 1214.28 L1169.57 1214.28 L1168.99 1214.28 L1168.4 1214.28 L1167.81 1214.28 L1167.23 1214.28 L1166.64 1214.28 L1166.05 1214.28 L1165.47 1214.28 L1164.88 1214.28 L1164.29 1214.28 L1163.71 1214.28 L1163.12 1214.28 L1162.54 1214.28 L1161.95 1214.28 L1161.36 1214.28 L1160.78 1214.28 L1160.19 1214.28 L1159.6 1214.28 L1159.02 1214.28 L1158.43 1214.28 L1157.84 1214.28 L1157.26 1214.28 L1156.67 1214.28 L1156.09 1214.28 L1155.5 1214.28 L1154.91 1214.28 L1154.33 1214.28 L1153.74 1214.28 L1153.15 1214.28 L1152.57 1214.28 L1151.98 1214.28 L1151.39 1214.28 L1150.81 1214.28 L1150.22 1214.28 L1149.63 1214.28 L1149.05 1214.28 L1148.46 1214.28 L1147.88 1214.28 L1147.29 1214.28 L1146.7 1214.28 L1146.12 1214.28 L1145.53 1214.28 L1144.94 1214.28 L1144.36 1214.28 L1143.77 1214.28 L1143.18 1214.28 L1142.6 1214.28 L1142.01 1214.28 L1141.42 1214.28 L1140.84 1214.28 L1140.25 1214.28 L1139.67 1214.28 L1139.08 1214.28 L1138.49 1214.28 L1137.91 1214.28 L1137.32 1214.28 L1136.73 1214.28 L1136.15 1214.28 L1135.56 1214.28 L1134.97 1214.28 L1134.39 1214.28 L1133.8 1214.28 L1133.21 1214.28 L1132.63 1214.28 L1132.04 1214.28 L1131.46 1214.28 L1130.87 1214.28 L1130.28 1214.28 L1129.7 1214.28 L1129.11 1214.28 L1128.52 1214.28 L1127.94 1214.28 L1127.35 1214.28 L1126.76 1214.28 L1126.18 1214.28 L1125.59 1214.28 L1125.01 1214.28 L1124.42 1214.28 L1123.83 1214.28 L1123.25 1214.28 L1122.66 1214.28 L1122.07 1214.28 L1121.49 1214.28 L1120.9 1214.28 L1120.31 1214.28 L1119.73 1214.28 L1119.14 1214.28 L1118.55 1214.28 L1117.97 1214.28 L1117.38 1214.28 L1116.8 1214.28 L1116.21 1214.28 L1115.62 1214.28 L1115.04 1214.28 L1114.45 1214.28 L1113.86 1214.28 L1113.28 1214.28 L1112.69 1214.28 L1112.1 1214.28 L1111.52 1214.28 L1110.93 1214.28 L1110.34 1214.28 L1109.76 1214.28 L1109.17 1214.28 L1108.59 1214.28 L1108 1214.28 L1107.41 1214.28 L1106.83 1214.28 L1106.24 1214.28 L1105.65 1214.28 L1105.07 1214.28 L1104.48 1214.28 L1103.89 1214.28 L1103.31 1214.28 L1102.72 1214.28 L1102.14 1214.28 L1101.55 1214.28 L1100.96 1214.28 L1100.38 1214.28 L1099.79 1214.28 L1099.2 1214.28 L1098.62 1214.28 L1098.03 1214.28 L1097.44 1214.28 L1096.86 1214.28 L1096.27 1214.28 L1095.68 1214.28 L1095.1 1214.28 L1094.51 1214.28 L1093.93 1214.28 L1093.34 1214.28 L1092.75 1214.28 L1092.17 1214.28 L1091.58 1214.28 L1090.99 1214.28 L1090.41 1214.28 L1089.82 1214.28 L1089.23 1214.28 L1088.65 1214.28 L1088.06 1214.28 L1087.47 1214.28 L1086.89 1214.28 L1086.3 1214.28 L1085.72 1214.28 L1085.13 1214.28 L1084.54 1214.28 L1083.96 1214.28 L1083.37 1214.28 L1082.78 1214.28 L1082.2 1214.28 L1081.61 1214.28 L1081.02 1214.28 L1080.44 1214.28 L1079.85 1214.28 L1079.26 1214.28 L1078.68 1214.28 L1078.09 1214.28 L1077.51 1214.28 L1076.92 1214.28 L1076.33 1214.28 L1075.75 1214.28 L1075.16 1214.28 L1074.57 1214.28 L1073.99 1214.28 L1073.4 1214.28 L1072.81 1214.28 L1072.23 1214.28 L1071.64 1214.28 L1071.06 1214.28 L1070.47 1214.28 L1069.88 1214.28 L1069.3 1214.28 L1068.71 1214.28 L1068.12 1214.28 L1067.54 1214.28 L1066.95 1214.28 L1066.36 1214.28 L1065.78 1214.28 L1065.19 1214.28 L1064.6 1214.28 L1064.02 1214.28 L1063.43 1214.28 L1062.85 1214.28 L1062.26 1214.28 L1061.67 1214.28 L1061.09 1214.28 L1060.5 1214.28 L1059.91 1214.28 L1059.33 1214.28 L1058.74 1214.28 L1058.15 1214.28 L1057.57 1214.28 L1056.98 1214.28 L1056.39 1214.28 L1055.81 1214.28 L1055.22 1214.28 L1054.64 1214.28 L1054.05 1214.28 L1053.46 1214.28 L1052.88 1214.28 L1052.29 1214.28 L1051.7 1214.28 L1051.12 1214.28 L1050.53 1214.28 L1049.94 1214.28 L1049.36 1214.28 L1048.77 1214.28 L1048.19 1214.28 L1047.6 1214.28 L1047.01 1214.28 L1046.43 1214.28 L1045.84 1214.28 L1045.25 1214.28 L1044.67 1214.28 L1044.08 1214.28 L1043.49 1214.28 L1042.91 1214.28 L1042.32 1214.28 L1041.73 1214.28 L1041.15 1214.28 L1040.56 1214.28 L1039.98 1214.28 L1039.39 1214.28 L1038.8 1214.28 L1038.22 1214.28 L1037.63 1214.28 L1037.04 1214.28 L1036.46 1214.28 L1035.87 1214.28 L1035.28 1214.28 L1034.7 1214.28 L1034.11 1214.28 L1033.52 1214.28 L1032.94 1214.28 L1032.35 1214.28 L1031.77 1214.28 L1031.18 1214.28 L1030.59 1214.28 L1030.01 1214.28 L1029.42 1214.28 L1028.83 1214.28 L1028.25 1214.28 L1027.66 1214.28 L1027.07 1214.28 L1026.49 1214.28 L1025.9 1214.28 L1025.32 1214.28 L1024.73 1214.28 L1024.14 1214.28 L1023.56 1214.28 L1022.97 1214.28 L1022.38 1214.28 L1021.8 1214.28 L1021.21 1214.28 L1020.62 1214.28 L1020.04 1214.28 L1019.45 1214.28 L1018.86 1214.28 L1018.28 1214.28 L1017.69 1214.28 L1017.11 1214.28 L1016.52 1214.28 L1015.93 1214.28 L1015.35 1214.28 L1014.76 1214.28 L1014.17 1214.28 L1013.59 1214.28 L1013 1214.28 L1012.41 1214.28 L1011.83 1214.28 L1011.24 1214.28 L1010.65 1214.28 L1010.07 1214.28 L1009.48 1214.28 L1008.9 1214.28 L1008.31 1214.28 L1007.72 1214.28 L1007.14 1214.28 L1006.55 1214.28 L1005.96 1214.28 L1005.38 1214.28 L1004.79 1214.28 L1004.2 1214.28 L1003.62 1214.28 L1003.03 1214.28 L1002.44 1214.28 L1001.86 1214.28 L1001.27 1214.28 L1000.69 1214.28 L1000.1 1214.28 L999.513 1214.28 L998.926 1214.28 L998.34 1214.28 L997.754 1214.28 L997.167 1214.28 L996.581 1214.28 L995.994 1214.28 L995.408 1214.28 L994.822 1214.28 L994.235 1214.28 L993.649 1214.28 L993.062 1214.28 L992.476 1214.28 L991.889 1214.28 L991.303 1214.28 L990.717 1214.28 L990.13 1214.28 L989.544 1214.28 L988.957 1214.28 L988.371 1214.28 L987.785 1214.28 L987.198 1214.28 L986.612 1214.28 L986.025 1214.28  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.57 986.612,1214.57 987.198,1214.57 987.785,1214.57 988.371,1214.57 988.957,1214.57 989.544,1214.57 990.13,1214.57 990.717,1214.57 991.303,1214.57 991.889,1214.57 992.476,1214.57 993.062,1214.57 993.649,1214.57 994.235,1214.57 994.822,1214.57 995.408,1214.57 995.994,1214.57 996.581,1214.57 997.167,1214.57 997.754,1214.57 998.34,1214.57 998.926,1214.57 999.513,1214.57 1000.1,1214.57 1000.69,1214.57 1001.27,1214.57 1001.86,1214.57 1002.44,1214.57 1003.03,1214.57 1003.62,1214.57 1004.2,1214.57 1004.79,1214.57 1005.38,1214.57 1005.96,1214.57 1006.55,1214.57 1007.14,1214.57 1007.72,1214.57 1008.31,1214.57 1008.9,1214.57 1009.48,1214.57 1010.07,1214.57 1010.65,1214.57 1011.24,1214.57 1011.83,1214.57 1012.41,1214.57 1013,1214.57 1013.59,1214.57 1014.17,1214.57 1014.76,1214.57 1015.35,1214.57 1015.93,1214.57 1016.52,1214.57 1017.11,1214.57 1017.69,1214.57 1018.28,1214.57 1018.86,1214.57 1019.45,1214.57 1020.04,1214.57 1020.62,1214.57 1021.21,1214.57 1021.8,1214.57 1022.38,1214.57 1022.97,1214.57 1023.56,1214.57 1024.14,1214.57 1024.73,1214.57 1025.32,1214.57 1025.9,1214.57 1026.49,1214.57 1027.07,1214.57 1027.66,1214.57 1028.25,1214.57 1028.83,1214.57 1029.42,1214.57 1030.01,1214.57 1030.59,1214.57 1031.18,1214.57 1031.77,1214.57 1032.35,1214.57 1032.94,1214.57 1033.52,1214.57 1034.11,1214.57 1034.7,1214.57 1035.28,1214.57 1035.87,1214.57 1036.46,1214.57 1037.04,1214.57 1037.63,1214.57 1038.22,1214.57 1038.8,1214.57 1039.39,1214.57 1039.98,1214.57 1040.56,1214.57 1041.15,1214.57 1041.73,1214.57 1042.32,1214.57 1042.91,1214.57 1043.49,1214.57 1044.08,1214.57 1044.67,1214.57 1045.25,1214.57 1045.84,1214.57 1046.43,1214.57 1047.01,1214.57 1047.6,1214.57 1048.19,1214.57 1048.77,1214.57 1049.36,1214.57 1049.94,1214.57 1050.53,1214.57 1051.12,1214.57 1051.7,1214.57 1052.29,1214.57 1052.88,1214.57 1053.46,1214.57 1054.05,1214.57 1054.64,1214.57 1055.22,1214.57 1055.81,1214.57 1056.39,1214.57 1056.98,1214.57 1057.57,1214.57 1058.15,1214.57 1058.74,1214.57 1059.33,1214.57 1059.91,1214.57 1060.5,1214.57 1061.09,1214.57 1061.67,1214.57 1062.26,1214.57 1062.85,1214.57 1063.43,1214.57 1064.02,1214.57 1064.6,1214.57 1065.19,1214.57 1065.78,1214.57 1066.36,1214.57 1066.95,1214.57 1067.54,1214.57 1068.12,1214.57 1068.71,1214.57 1069.3,1214.57 1069.88,1214.57 1070.47,1214.57 1071.06,1214.57 1071.64,1214.57 1072.23,1214.57 1072.81,1214.57 1073.4,1214.57 1073.99,1214.57 1074.57,1214.57 1075.16,1214.57 1075.75,1214.57 1076.33,1214.57 1076.92,1214.57 1077.51,1214.57 1078.09,1214.57 1078.68,1214.57 1079.26,1214.57 1079.85,1214.57 1080.44,1214.57 1081.02,1214.57 1081.61,1214.57 1082.2,1214.57 1082.78,1214.57 1083.37,1214.57 1083.96,1214.57 1084.54,1214.57 1085.13,1214.57 1085.72,1214.57 1086.3,1214.57 1086.89,1214.57 1087.47,1214.57 1088.06,1214.57 1088.65,1214.57 1089.23,1214.57 1089.82,1214.57 1090.41,1214.57 1090.99,1214.57 1091.58,1214.57 1092.17,1214.57 1092.75,1214.57 1093.34,1214.57 1093.93,1214.57 1094.51,1214.57 1095.1,1214.57 1095.68,1214.57 1096.27,1214.57 1096.86,1214.57 1097.44,1214.57 1098.03,1214.57 1098.62,1214.57 1099.2,1214.57 1099.79,1214.57 1100.38,1214.57 1100.96,1214.57 1101.55,1214.57 1102.14,1214.57 1102.72,1214.57 1103.31,1214.57 1103.89,1214.57 1104.48,1214.57 1105.07,1214.57 1105.65,1214.57 1106.24,1214.57 1106.83,1214.57 1107.41,1214.57 1108,1214.57 1108.59,1214.57 1109.17,1214.57 1109.76,1214.57 1110.34,1214.57 1110.93,1214.57 1111.52,1214.57 1112.1,1214.57 1112.69,1214.57 1113.28,1214.57 1113.86,1214.57 1114.45,1214.57 1115.04,1214.57 1115.62,1214.57 1116.21,1214.57 1116.8,1214.57 1117.38,1214.57 1117.97,1214.57 1118.55,1214.57 1119.14,1214.57 1119.73,1214.57 1120.31,1214.57 1120.9,1214.57 1121.49,1214.57 1122.07,1214.57 1122.66,1214.57 1123.25,1214.57 1123.83,1214.57 1124.42,1214.57 1125.01,1214.57 1125.59,1214.57 1126.18,1214.57 1126.76,1214.57 1127.35,1214.57 1127.94,1214.57 1128.52,1214.57 1129.11,1214.57 1129.7,1214.57 1130.28,1214.57 1130.87,1214.57 1131.46,1214.57 1132.04,1214.57 1132.63,1214.57 1133.21,1214.57 1133.8,1214.57 1134.39,1214.57 1134.97,1214.57 1135.56,1214.57 1136.15,1214.57 1136.73,1214.57 1137.32,1214.57 1137.91,1214.57 1138.49,1214.57 1139.08,1214.57 1139.67,1214.57 1140.25,1214.57 1140.84,1214.57 1141.42,1214.57 1142.01,1214.57 1142.6,1214.57 1143.18,1214.57 1143.77,1214.57 1144.36,1214.57 1144.94,1214.57 1145.53,1214.57 1146.12,1214.57 1146.7,1214.57 1147.29,1214.57 1147.88,1214.57 1148.46,1214.57 1149.05,1214.57 1149.63,1214.57 1150.22,1214.57 1150.81,1214.57 1151.39,1214.57 1151.98,1214.57 1152.57,1214.57 1153.15,1214.57 1153.74,1214.57 1154.33,1214.57 1154.91,1214.57 1155.5,1214.57 1156.09,1214.57 1156.67,1214.57 1157.26,1214.57 1157.84,1214.57 1158.43,1214.57 1159.02,1214.57 1159.6,1214.57 1160.19,1214.57 1160.78,1214.57 1161.36,1214.57 1161.95,1214.57 1162.54,1214.57 1163.12,1214.57 1163.71,1214.57 1164.29,1214.57 1164.88,1214.57 1165.47,1214.57 1166.05,1214.57 1166.64,1214.57 1167.23,1214.57 1167.81,1214.57 1168.4,1214.57 1168.99,1214.57 1169.57,1214.57 1170.16,1214.57 1170.75,1214.57 1171.33,1214.57 1171.92,1214.57 1172.5,1214.57 1173.09,1214.57 1173.68,1214.57 1174.26,1214.57 1174.85,1214.57 1175.44,1214.57 1176.02,1214.57 1176.61,1214.57 1177.2,1214.57 1177.78,1214.57 1178.37,1214.57 1178.96,1214.57 1179.54,1214.57 1180.13,1214.57 1180.71,1214.57 1181.3,1214.57 1181.89,1214.57 1182.47,1214.57 1183.06,1214.57 1183.65,1214.57 1184.23,1214.57 1184.82,1214.57 1185.41,1214.57 1185.99,1214.57 1186.58,1214.57 1187.16,1214.57 1187.75,1214.57 1188.34,1214.57 1188.92,1214.57 1189.51,1214.57 1190.1,1214.57 1190.68,1214.57 1191.27,1214.57 1191.86,1214.57 1192.44,1214.57 1193.03,1214.57 1193.62,1214.57 1194.2,1214.57 1194.79,1214.57 1195.37,1214.57 1195.96,1214.57 1196.55,1214.57 1197.13,1214.57 1197.72,1214.57 1198.31,1214.57 1198.89,1214.57 1199.48,1214.57 1200.07,1214.57 1200.65,1214.57 1201.24,1214.57 1201.83,1214.57 1202.41,1214.57 1203,1214.57 1203.58,1214.57 1204.17,1214.57 1204.76,1214.57 1205.34,1214.57 1205.93,1214.57 1206.52,1214.57 1207.1,1214.57 1207.69,1214.57 1208.28,1214.57 1208.86,1214.57 1209.45,1214.57 1210.03,1214.57 1210.62,1214.57 1211.21,1214.57 1211.79,1214.57 1212.38,1214.57 1212.97,1214.57 1213.55,1214.57 1214.14,1214.57 1214.73,1214.57 1215.31,1214.57 1215.9,1214.57 1216.49,1214.57 1217.07,1214.57 1217.66,1214.57 1218.24,1214.57 1218.83,1214.57 1219.42,1214.57 1220,1214.57 1220.59,1214.57 1221.18,1214.57 1221.76,1214.57 1222.35,1214.57 1222.94,1214.57 1223.52,1214.57 1224.11,1214.57 1224.7,1214.57 1225.28,1214.57 1225.87,1214.57 1226.45,1214.57 1227.04,1214.57 1227.63,1214.57 1228.21,1214.57 1228.8,1214.57 1229.39,1214.57 1229.97,1214.57 1230.56,1214.57 1231.15,1214.57 1231.73,1214.57 1232.32,1214.57 1232.91,1214.57 1233.49,1214.57 1234.08,1214.57 1234.66,1214.57 1235.25,1214.57 1235.84,1214.57 1236.42,1214.57 1237.01,1214.57 1237.6,1214.57 1238.18,1214.57 1238.77,1214.57 1239.36,1214.57 1239.94,1214.57 1240.53,1214.57 1241.11,1214.57 1241.7,1214.57 1242.29,1214.57 1242.87,1214.57 1243.46,1214.57 1244.05,1214.57 1244.63,1214.57 1245.22,1214.57 1245.81,1214.57 1246.39,1214.57 1246.98,1214.57 1247.57,1214.57 1248.15,1214.57 1248.74,1214.57 1249.32,1214.57 1249.91,1214.57 1250.5,1214.57 1251.08,1214.57 1251.67,1214.57 1252.26,1214.57 1252.84,1214.57 1253.43,1214.57 1254.02,1214.57 1254.6,1214.57 1255.19,1214.57 1255.78,1214.57 1256.36,1214.57 1256.95,1214.57 1257.53,1214.57 1258.12,1214.57 1258.71,1214.57 1259.29,1214.57 1259.88,1214.57 1260.47,1214.57 1261.05,1214.57 1261.64,1214.57 1262.23,1214.57 1262.81,1214.57 1263.4,1214.57 1263.98,1214.57 1264.57,1214.57 1265.16,1214.57 1265.74,1214.57 1266.33,1214.57 1266.92,1214.57 1267.5,1214.57 1268.09,1214.57 1268.68,1214.57 1269.26,1214.57 1269.85,1214.57 1270.44,1214.57 1271.02,1214.57 1271.61,1214.57 1272.19,1214.57 1272.78,1214.57 1273.37,1214.57 1273.95,1214.57 1274.54,1214.57 1275.13,1214.57 1275.71,1214.57 1276.3,1214.57 1276.89,1214.57 1277.47,1214.57 1278.06,1214.57 1278.65,1214.57 1279.23,1214.57 1279.82,1214.57 1280.4,1214.57 1280.99,1214.57 1281.58,1214.57 1282.16,1214.57 1282.75,1214.57 1283.34,1214.57 1283.92,1214.57 1284.51,1214.57 1285.1,1214.57 1285.68,1214.57 1286.27,1214.57 1286.86,1214.57 1287.44,1214.57 1288.03,1214.57 1288.61,1214.57 1289.2,1214.57 1289.79,1214.57 1290.37,1214.57 1290.96,1214.57 1291.55,1214.57 1292.13,1214.57 1292.72,1214.57 1293.31,1214.57 1293.89,1214.57 1294.48,1214.57 1295.06,1214.57 1295.65,1214.57 1296.24,1214.57 1296.82,1214.57 1297.41,1214.57 1298,1214.57 1298.58,1214.57 1299.17,1214.57 1299.76,1214.57 1300.34,1214.57 1300.93,1214.57 1301.52,1214.57 1302.1,1214.57 1302.69,1214.57 1303.27,1214.57 1303.86,1214.57 1304.45,1214.57 1305.03,1214.57 1305.62,1214.57 1306.21,1214.57 1306.79,1214.57 1307.38,1214.57 1307.97,1214.57 1308.55,1214.57 1309.14,1214.57 1309.73,1214.57 1310.31,1214.57 1310.9,1214.57 1311.48,1214.57 1312.07,1214.57 1312.66,1214.57 1313.24,1214.57 1313.83,1214.57 1314.42,1214.57 1315,1214.57 1315.59,1214.57 1316.18,1214.57 1316.76,1214.57 1317.35,1214.57 1317.93,1214.57 1318.52,1214.57 1319.11,1214.57 1319.69,1214.57 1320.28,1214.57 1320.87,1214.57 1321.45,1214.57 1322.04,1214.57 1322.63,1214.57 1323.21,1214.57 1323.8,1214.57 1324.39,1214.57 1324.97,1214.57 1325.56,1214.57 1326.14,1214.57 1326.73,1214.57 1327.32,1214.57 1327.9,1214.57 1328.49,1214.57 1329.08,1214.57 1329.66,1214.57 1330.25,1214.57 1330.84,1214.57 1331.42,1214.57 1332.01,1214.57 1332.6,1214.57 1333.18,1214.57 1333.77,1214.57 1334.35,1214.57 1334.94,1214.57 1335.53,1214.57 1336.11,1214.57 1336.7,1214.57 1337.29,1214.57 1337.87,1214.57 1338.46,1214.57 1339.05,1214.57 1339.63,1214.57 1340.22,1214.57 1340.8,1214.57 1341.39,1214.57 1341.98,1214.57 1342.56,1214.57 1343.15,1214.57 1343.74,1214.57 1344.32,1214.57 1344.91,1214.57 1345.5,1214.57 1346.08,1214.57 1346.67,1214.57 1347.26,1214.57 1347.84,1214.57 1348.43,1214.57 1349.01,1214.57 1349.6,1214.57 1350.19,1214.57 1350.77,1214.57 1351.36,1214.57 1351.95,1214.57 1352.53,1214.57 1353.12,1214.57 1353.71,1214.57 1354.29,1214.57 1354.88,1214.57 1355.47,1214.57 1356.05,1214.57 1356.64,1214.57 1357.22,1214.57 1357.81,1214.57 1358.4,1214.57 1358.98,1214.57 1359.57,1214.57 1360.16,1214.57 1360.74,1214.57 1361.33,1214.57 1361.92,1214.57 1362.5,1214.57 1363.09,1214.57 1363.68,1214.57 1364.26,1214.57 1364.85,1214.57 1365.43,1214.57 1366.02,1214.57 1366.61,1214.57 1367.19,1214.57 1367.78,1214.57 1368.37,1214.57 1368.95,1214.57 1369.54,1214.57 1370.13,1214.57 1370.71,1214.57 1371.3,1214.57 1371.88,1214.57 1372.47,1214.57 1373.06,1214.57 1373.64,1214.57 1374.23,1214.57 1374.82,1214.57 1375.4,1214.57 1375.99,1214.57 1376.58,1214.57 1377.16,1214.57 1377.75,1214.57 1378.34,1214.57 1378.92,1214.57 1379.51,1214.57 1380.09,1214.57 1380.68,1214.57 1381.27,1214.57 1381.85,1214.57 1382.44,1214.57 1383.03,1214.57 1383.61,1214.57 1384.2,1214.57 1384.79,1214.57 1385.37,1214.57 1385.96,1214.57 1386.55,1214.57 1387.13,1214.57 1387.72,1214.57 1388.3,1214.57 1388.89,1214.57 1389.48,1214.57 1390.06,1214.57 1390.65,1214.57 1391.24,1214.57 1391.82,1214.57 1392.41,1214.57 1393,1214.57 1393.58,1214.57 1394.17,1214.57 1394.75,1214.57 1395.34,1214.57 1395.93,1214.57 1396.51,1214.57 1397.1,1214.57 1397.69,1214.57 1398.27,1214.57 1398.86,1214.57 1399.45,1214.57 1400.03,1214.57 1400.62,1214.57 1401.21,1214.57 1401.79,1214.57 1402.38,1214.57 1402.96,1214.57 1403.55,1214.57 1404.14,1214.57 1404.72,1214.57 1405.31,1214.57 1405.9,1214.57 1406.48,1214.57 1407.07,1214.57 1407.66,1214.57 1408.24,1214.57 1408.83,1214.57 1409.42,1214.57 1410,1214.57 1410.59,1214.57 1411.17,1214.57 1411.76,1214.57 1412.35,1214.57 1412.93,1214.57 1413.52,1214.57 1414.11,1214.57 1414.69,1214.57 1415.28,1214.57 1415.87,1214.57 1416.45,1214.57 1417.04,1214.57 1417.63,1214.57 1418.21,1214.57 1418.8,1214.57 1419.38,1214.57 1419.97,1214.57 1420.56,1214.57 1421.14,1214.57 1421.73,1214.57 1422.32,1214.57 1422.9,1214.57 1423.49,1214.57 1424.08,1214.57 1424.66,1214.57 1425.25,1214.57 1425.83,1214.57 1426.42,1214.57 1427.01,1214.57 1427.59,1214.57 1428.18,1214.57 1428.77,1214.57 1429.35,1214.57 1429.94,1214.57 1430.53,1214.57 1431.11,1214.57 1431.7,1214.57 1432.29,1214.57 1432.87,1214.57 1433.46,1214.57 1434.04,1214.57 1434.63,1214.57 1435.22,1214.57 1435.8,1214.57 1436.39,1214.57 1436.98,1214.57 1437.56,1214.57 1438.15,1214.57 1438.74,1214.57 1439.32,1214.57 1439.91,1214.57 1440.5,1214.57 1441.08,1214.57 1441.67,1214.57 1442.25,1214.57 1442.84,1214.57 1443.43,1214.57 1444.01,1214.57 1444.6,1214.57 1445.19,1214.57 1445.77,1214.57 1446.36,1214.57 1446.95,1214.57 1447.53,1214.57 1448.12,1214.57 1448.7,1214.57 1449.29,1214.57 1449.88,1214.57 1450.46,1214.57 1451.05,1214.57 1451.64,1214.57 1452.22,1214.57 1452.81,1214.57 1453.4,1214.57 1453.98,1214.57 1454.57,1214.57 1455.16,1214.57 1455.74,1214.57 1456.33,1214.57 1456.91,1214.57 1457.5,1214.57 1458.09,1214.57 1458.67,1214.57 1459.26,1214.57 1459.85,1214.57 1460.43,1214.57 1461.02,1214.57 1461.61,1214.57 1462.19,1214.57 1462.78,1214.57 1463.37,1214.57 1463.95,1214.57 1464.54,1214.57 1465.12,1214.57 1465.71,1214.57 1466.3,1214.57 1466.88,1214.57 1467.47,1214.57 1468.06,1214.57 1468.64,1214.57 1469.23,1214.57 1469.82,1214.57 1470.4,1214.57 1470.99,1214.57 1471.57,1214.57 1472.16,1214.57 1472.75,1214.57 1473.33,1214.57 1473.92,1214.57 1474.51,1214.57 1475.09,1214.57 1475.68,1214.57 1476.27,1214.57 1476.85,1214.57 1477.44,1214.57 1478.03,1214.57 1478.61,1214.57 1479.2,1214.57 1479.78,1214.57 1480.37,1214.57 1480.96,1214.57 1481.54,1214.57 1482.13,1214.57 1482.72,1214.57 1483.3,1214.57 1483.89,1214.57 1484.48,1214.57 1485.06,1214.57 1485.65,1214.57 1486.24,1214.57 1486.82,1214.57 1487.41,1214.57 1487.99,1214.57 1488.58,1214.57 1489.17,1214.57 1489.75,1214.57 1490.34,1214.57 1490.93,1214.57 1491.51,1214.57 1492.1,1214.57 1492.69,1214.57 1493.27,1214.57 1493.86,1214.57 1494.45,1214.57 1495.03,1214.57 1495.62,1214.57 1496.2,1214.57 1496.79,1214.57 1497.38,1214.57 1497.96,1214.57 1498.55,1214.57 1499.14,1214.57 1499.72,1214.57 1500.31,1214.57 1500.9,1214.57 1501.48,1214.57 1502.07,1214.57 1502.65,1214.57 1503.24,1214.57 1503.83,1214.57 1504.41,1214.57 1505,1214.57 1505.59,1214.57 1506.17,1214.57 1506.76,1214.57 1507.35,1214.57 1507.93,1214.57 1508.52,1214.57 1509.11,1214.57 1509.69,1214.57 1510.28,1214.57 1510.86,1214.57 1511.45,1214.57 1512.04,1214.57 1512.62,1214.57 1513.21,1214.57 1513.8,1214.57 1514.38,1214.57 1514.97,1214.57 1515.56,1214.57 1516.14,1214.57 1516.73,1214.57 1517.32,1214.57 1517.9,1214.57 1518.49,1214.57 1519.07,1214.57 1519.66,1214.57 1520.25,1214.57 1520.83,1214.57 1521.42,1214.57 1522.01,1214.57 1522.59,1214.57 1523.18,1214.57 1523.77,1214.57 1524.35,1214.57 1524.94,1214.57 1525.52,1214.57 1526.11,1214.57 1526.7,1214.57 1527.28,1214.57 1527.87,1214.57 1528.46,1214.57 1529.04,1214.57 1529.63,1214.57 1530.22,1214.57 1530.8,1214.57 1531.39,1214.57 1531.98,1214.57 1532.56,1214.57 1533.15,1214.57 1533.73,1214.57 1534.32,1214.57 1534.91,1214.57 1535.49,1214.57 1536.08,1214.57 1536.67,1214.57 1537.25,1214.57 1537.84,1214.57 1538.43,1214.57 1539.01,1214.57 1539.6,1214.57 1540.19,1214.57 1540.77,1214.57 1541.36,1214.57 1541.94,1214.57 1542.53,1214.57 1543.12,1214.57 1543.7,1214.57 1544.29,1214.57 1544.88,1214.57 1545.46,1214.57 1546.05,1214.57 1546.64,1214.57 1547.22,1214.57 1547.81,1214.57 1548.4,1214.57 1548.98,1214.57 1549.57,1214.57 1550.15,1214.57 1550.74,1214.57 1551.33,1214.57 1551.91,1214.57 1552.5,1214.57 1553.09,1214.57 1553.67,1214.57 1554.26,1214.57 1554.85,1214.57 1555.43,1214.57 1556.02,1214.57 1556.6,1214.57 1557.19,1214.57 1557.78,1214.57 1558.36,1214.57 1558.95,1214.57 1559.54,1214.57 1560.12,1214.57 1560.71,1214.57 1561.3,1214.57 1561.88,1214.57 1562.47,1214.57 1563.06,1214.57 1563.64,1214.57 1564.23,1214.57 1564.81,1214.57 1565.4,1214.57 1565.99,1214.57 1566.57,1214.57 1567.16,1214.57 1567.75,1214.57 1568.33,1214.57 1568.92,1214.57 1569.51,1214.57 1570.09,1214.57 1570.68,1214.57 1571.27,1214.57 1571.85,1214.57 1572.44,1214.57 1573.02,1214.57 1573.61,1214.57 1574.2,1214.57 1574.78,1214.57 1575.37,1214.57 1575.96,1214.57 1576.54,1214.57 1577.13,1214.57 1577.72,1214.57 1578.3,1214.57 1578.89,1214.57 1579.47,1214.57 1580.06,1214.57 1580.65,1214.57 1581.23,1214.57 1581.82,1214.57 1582.41,1214.57 1582.99,1214.57 1583.58,1214.57 1584.17,1214.57 1584.75,1214.57 1585.34,1214.57 1585.93,1214.57 1586.51,1214.57 1587.1,1214.57 1587.68,1214.57 1588.27,1214.57 1588.86,1214.57 1589.44,1214.57 1590.03,1214.57 1590.62,1214.57 1591.2,1214.57 1591.79,1214.57 1592.38,1214.57 1592.96,1214.57 1593.55,1214.57 1594.14,1214.57 1594.72,1214.57 1595.31,1214.57 1595.89,1214.57 1596.48,1214.57 1597.07,1214.57 1597.65,1214.57 1598.24,1214.57 1598.83,1214.57 1599.41,1214.57 1600,1214.57 1600.59,1214.57 1601.17,1214.57 1601.76,1214.57 1602.34,1214.57 1602.93,1214.57 1603.52,1214.57 1604.1,1214.57 1604.69,1214.57 1605.28,1214.57 1605.86,1214.57 1606.45,1214.57 1607.04,1214.57 1607.62,1214.57 1608.21,1214.57 1608.8,1214.57 1609.38,1214.57 1609.97,1214.57 1610.55,1214.57 1611.14,1214.57 1611.73,1214.57 1612.31,1214.57 1612.9,1214.57 1613.49,1214.57 1614.07,1214.57 1614.66,1214.57 1615.25,1214.57 1615.83,1214.57 1616.42,1214.57 1617.01,1214.57 1617.59,1214.57 1618.18,1214.57 1618.76,1214.57 1619.35,1214.57 1619.94,1214.57 1620.52,1214.57 1621.11,1214.57 1621.7,1214.57 1622.28,1214.57 1622.87,1214.57 1623.46,1214.57 1624.04,1214.57 1624.63,1214.57 1625.22,1214.57 1625.8,1214.57 1626.39,1214.57 1626.97,1214.57 1627.56,1214.57 1628.15,1214.57 1628.73,1214.57 1629.32,1214.57 1629.91,1214.57 1630.49,1214.57 1631.08,1214.57 1631.67,1214.57 1632.25,1214.57 1632.84,1214.57 1633.42,1214.57 1634.01,1214.57 1634.6,1214.57 1635.18,1214.57 1635.77,1214.57 1636.36,1214.57 1636.94,1214.57 1637.53,1214.57 1638.12,1214.57 1638.7,1214.57 1639.29,1214.57 1639.88,1214.57 1640.46,1214.57 1641.05,1214.57 1641.63,1214.57 1642.22,1214.57 1642.81,1214.57 1643.39,1214.57 1643.98,1214.57 1644.57,1214.57 1645.15,1214.57 1645.74,1214.57 1646.33,1214.57 1646.91,1214.57 1647.5,1214.57 1648.09,1214.57 1648.67,1214.57 1649.26,1214.57 1649.84,1214.57 1650.43,1214.57 1651.02,1214.57 1651.6,1214.57 1652.19,1214.57 1652.78,1214.57 1653.36,1214.57 1653.95,1214.57 1654.54,1214.57 1655.12,1214.57 1655.71,1214.57 1656.29,1214.57 1656.88,1214.57 1657.47,1214.57 1658.05,1214.57 1658.64,1214.57 1659.23,1214.57 1659.81,1214.57 1660.4,1214.57 1660.99,1214.57 1661.57,1214.57 1662.16,1214.57 1662.75,1214.57 1663.33,1214.57 1663.92,1214.57 1664.5,1214.57 1665.09,1214.57 1665.68,1214.57 1666.26,1214.57 1666.85,1214.57 1667.44,1214.57 1668.02,1214.57 1668.61,1214.57 1669.2,1214.57 1669.78,1214.57 1670.37,1214.57 1670.96,1214.57 1671.54,1214.57 1672.13,1214.57 1672.71,1214.57 1673.3,1214.57 1673.89,1214.57 1674.47,1214.57 1675.06,1214.57 1675.65,1214.57 1676.23,1214.57 1676.82,1214.57 1677.41,1214.57 1677.99,1214.57 1678.58,1214.57 1679.17,1214.57 1679.75,1214.57 1680.34,1214.57 1680.92,1214.57 1681.51,1214.57 1682.1,1214.57 1682.68,1214.57 1683.27,1214.57 1683.86,1214.57 1684.44,1214.57 1685.03,1214.57 1685.62,1214.57 1686.2,1214.57 1686.79,1214.57 1687.37,1214.57 1687.96,1214.57 1688.55,1214.57 1689.13,1214.57 1689.72,1214.57 1690.31,1214.57 1690.89,1214.57 1691.48,1214.57 1692.07,1214.57 1692.65,1214.57 1693.24,1214.57 1693.83,1214.57 1694.41,1214.57 1695,1214.57 1695.58,1214.57 1696.17,1214.57 1696.76,1214.57 1697.34,1214.57 1697.93,1214.57 1698.52,1214.57 1699.1,1214.57 1699.69,1214.57 1700.28,1214.57 1700.86,1214.57 1701.45,1214.57 1702.04,1214.57 1702.62,1214.57 1703.21,1214.57 1703.79,1214.57 1704.38,1214.57 1704.97,1214.57 1705.55,1214.57 1706.14,1214.57 1706.73,1214.57 1707.31,1214.57 1707.9,1214.57 1708.49,1214.57 1709.07,1214.57 1709.66,1214.57 1710.24,1214.57 1710.83,1214.57 1711.42,1214.57 1712,1214.57 1712.59,1214.57 1713.18,1214.57 1713.76,1214.57 1714.35,1214.57 1714.94,1214.57 1715.52,1214.57 1716.11,1214.57 1716.7,1214.57 1717.28,1214.57 1717.87,1214.57 1718.45,1214.57 1719.04,1214.57 1719.63,1214.57 1720.21,1214.57 1720.8,1214.57 1721.39,1214.57 1721.97,1214.57 1722.56,1214.57 1723.15,1214.57 1723.73,1214.57 1724.32,1214.57 1724.91,1214.57 1725.49,1214.57 1726.08,1214.57 1726.66,1214.57 1727.25,1214.57 1727.84,1214.57 1728.42,1214.57 1729.01,1214.57 1729.6,1214.57 1730.18,1214.57 1730.77,1214.57 1731.36,1214.57 1731.94,1214.57 1732.53,1214.57 1733.11,1214.57 1733.7,1214.57 1734.29,1214.57 1734.87,1214.57 1735.46,1214.57 1736.05,1214.57 1736.63,1214.57 1737.22,1214.57 1737.81,1214.57 1738.39,1214.57 1738.98,1214.57 1739.57,1214.57 1740.15,1214.57 1740.74,1214.57 1741.32,1214.57 1741.91,1214.57 1742.5,1214.57 1743.08,1214.57 1743.67,1214.57 1744.26,1214.57 1744.84,1214.57 1745.43,1214.57 1746.02,1214.57 1746.6,1214.57 1747.19,1214.57 1747.78,1214.57 1748.36,1214.57 1748.95,1214.57 1749.53,1214.57 1750.12,1214.57 1750.71,1214.57 1751.29,1214.57 1751.88,1214.57 1752.47,1214.57 1753.05,1214.57 1753.64,1214.57 1754.23,1214.57 1754.81,1214.57 1755.4,1214.57 1755.99,1214.57 1756.57,1214.57 1757.16,1214.57 1757.74,1214.57 1758.33,1214.57 1758.92,1214.57 1759.5,1214.57 1760.09,1214.57 1760.68,1214.57 1761.26,1214.57 1761.85,1214.57 1762.44,1214.57 1763.02,1214.57 1763.61,1214.57 1764.19,1214.57 1764.78,1214.57 1765.37,1214.57 1765.95,1214.57 1766.54,1214.57 1767.13,1214.57 1767.71,1214.57 1768.3,1214.57 1768.89,1214.57 1769.47,1214.57 1770.06,1214.57 1770.65,1214.57 1771.23,1214.57 1771.82,1214.57 1772.4,1214.57 1772.99,1214.57 1773.58,1214.57 1774.16,1214.57 1774.75,1214.57 1775.34,1214.57 1775.92,1214.57 1776.51,1214.57 1777.1,1214.57 1777.68,1214.57 1778.27,1214.57 1778.86,1214.57 1779.44,1214.57 1780.03,1214.57 1780.61,1214.57 1781.2,1214.57 1781.79,1214.57 1782.37,1214.57 1782.96,1214.57 1783.55,1214.57 1784.13,1214.57 1784.72,1214.57 1785.31,1214.57 1785.89,1214.57 1786.48,1214.57 1787.06,1214.57 1787.65,1214.57 1788.24,1214.57 1788.82,1214.57 1789.41,1214.57 1790,1214.57 1790.58,1214.57 1791.17,1214.57 1791.76,1214.57 1792.34,1214.57 1792.93,1214.57 1793.52,1214.57 1794.1,1214.57 1794.69,1214.57 1795.27,1214.57 1795.86,1214.57 1796.45,1214.57 1797.03,1214.57 1797.62,1214.57 1798.21,1214.57 1798.79,1214.57 1799.38,1214.57 1799.97,1214.57 1800.55,1214.57 1801.14,1214.57 1801.73,1214.57 1802.31,1214.57 1802.9,1214.57 1803.48,1214.57 1804.07,1214.57 1804.66,1214.57 1805.24,1214.57 1805.83,1214.57 1806.42,1214.57 1807,1214.57 1807.59,1214.57 1808.18,1214.57 1808.76,1214.57 1809.35,1214.57 1809.94,1214.57 1810.52,1214.57 1811.11,1214.57 1811.69,1214.57 1812.28,1214.57 1812.87,1214.57 1813.45,1214.57 1814.04,1214.57 1814.63,1214.57 1815.21,1214.57 1815.8,1214.57 1816.39,1214.57 1816.97,1214.57 1817.56,1214.57 1818.14,1214.57 1818.73,1214.57 1819.32,1214.57 1819.9,1214.57 1820.49,1214.57 1821.08,1214.57 1821.66,1214.57 1822.25,1214.57 1822.84,1214.57 1823.42,1214.57 1824.01,1214.57 1824.6,1214.57 1825.18,1214.57 1825.77,1214.57 1826.35,1214.57 1826.94,1214.57 1827.53,1214.57 1828.11,1214.57 1828.7,1214.57 1829.29,1214.57 1829.87,1214.57 1830.46,1214.57 1831.05,1214.57 1831.63,1214.57 1832.22,1214.57 1832.81,1214.57 1833.39,1214.57 1833.98,1214.57 1834.56,1214.57 1835.15,1214.57 1835.74,1214.57 1836.32,1214.57 1836.91,1214.57 1837.5,1214.57 1838.08,1214.57 1838.67,1214.57 1839.26,1214.57 1839.84,1214.57 1840.43,1214.57 1841.01,1214.57 1841.6,1214.57 1842.19,1214.57 1842.77,1214.57 1843.36,1214.57 1843.95,1214.57 1844.53,1214.57 1845.12,1214.57 1845.71,1214.57 1846.29,1214.57 1846.88,1214.57 1847.47,1214.57 1848.05,1214.57 1848.64,1214.57 1849.22,1214.57 1849.81,1214.57 1850.4,1214.57 1850.98,1214.57 1851.57,1214.57 1852.16,1214.57 1852.74,1214.57 1853.33,1214.57 1853.92,1214.57 1854.5,1214.57 1855.09,1214.57 1855.68,1214.57 1856.26,1214.57 1856.85,1214.57 1857.43,1214.57 1858.02,1214.57 1858.61,1214.57 1859.19,1214.57 1859.78,1214.57 1860.37,1214.57 1860.95,1214.57 1861.54,1214.57 1862.13,1214.57 1862.71,1214.57 1863.3,1214.57 1863.88,1214.57 1864.47,1214.57 1865.06,1214.57 1865.64,1214.57 1866.23,1214.57 1866.82,1214.57 1867.4,1214.57 1867.99,1214.57 1868.58,1214.57 1869.16,1214.57 1869.75,1214.57 1870.34,1214.57 1870.92,1214.57 1871.51,1214.57 1872.09,1214.57 1872.68,1214.57 1873.27,1214.57 1873.85,1214.57 1874.44,1214.57 1875.03,1214.57 1875.61,1214.57 1876.2,1214.57 1876.79,1214.57 1877.37,1214.57 1877.96,1214.57 1878.55,1214.57 1879.13,1214.57 1879.72,1214.57 1880.3,1214.57 1880.89,1214.57 1881.48,1214.57 1882.06,1214.57 1882.65,1214.57 1883.24,1214.57 1883.82,1214.57 1884.41,1214.57 1885,1214.57 1885.58,1214.57 1886.17,1214.57 1886.76,1214.57 1887.34,1214.57 1887.93,1214.57 1888.51,1214.57 1889.1,1214.57 1889.69,1214.57 1890.27,1214.57 1890.86,1214.57 1891.45,1214.57 1892.03,1214.57 1892.62,1214.57 1893.21,1214.57 1893.79,1214.57 1894.38,1214.57 1894.96,1214.57 1895.55,1214.57 1896.14,1214.57 1896.72,1214.57 1897.31,1214.57 1897.9,1214.57 1898.48,1214.57 1899.07,1214.57 1899.66,1214.57 1900.24,1214.57 1900.83,1214.57 1901.42,1214.57 1902,1214.57 1902.59,1214.57 1903.17,1214.57 1903.76,1214.57 1904.35,1214.57 1904.93,1214.57 1905.52,1214.57 1906.11,1214.57 1906.69,1214.57 1907.28,1214.57 1907.87,1214.57 1908.45,1214.57 1909.04,1214.57 1909.63,1214.57 1910.21,1214.57 1910.8,1214.57 1911.38,1214.57 1911.97,1214.57 1912.56,1214.57 1913.14,1214.57 1913.73,1214.57 1914.32,1214.57 1914.9,1214.57 1915.49,1214.57 1916.08,1214.57 1916.66,1214.57 1917.25,1214.57 1917.83,1214.57 1918.42,1214.57 1919.01,1214.57 1919.59,1214.57 1920.18,1214.57 1920.77,1214.57 1921.35,1214.57 1921.94,1214.57 1922.53,1214.57 1923.11,1214.57 1923.7,1214.57 1924.29,1214.57 1924.87,1214.57 1925.46,1214.57 1926.04,1214.57 1926.63,1214.57 1927.22,1214.57 1927.8,1214.57 1928.39,1214.57 1928.98,1214.57 1929.56,1214.57 1930.15,1214.57 1930.74,1214.57 1931.32,1214.57 1931.91,1214.57 1932.5,1214.57 1933.08,1214.57 1933.67,1214.57 1934.25,1214.57 1934.84,1214.57 1935.43,1214.57 1936.01,1214.57 1936.6,1214.57 1937.19,1214.57 1937.77,1214.57 1938.36,1214.57 1938.95,1214.57 1939.53,1214.57 1940.12,1214.57 1940.71,1214.57 1941.29,1214.57 1941.88,1214.57 1942.46,1214.57 1943.05,1214.57 1943.64,1214.57 1944.22,1214.57 1944.81,1214.57 1945.4,1214.57 1945.98,1214.57 1946.57,1214.57 1947.16,1214.57 1947.74,1214.57 1948.33,1214.57 1948.91,1214.57 1949.5,1214.57 1950.09,1214.57 1950.67,1214.57 1951.26,1214.57 1951.85,1214.57 1952.43,1214.57 1953.02,1214.57 1953.61,1214.57 1954.19,1214.57 1954.78,1214.57 1955.37,1214.57 1955.95,1214.57 1956.54,1214.57 1957.12,1214.57 1957.71,1214.57 1958.3,1214.57 1958.88,1214.57 1959.47,1214.57 1960.06,1214.57 1960.64,1214.57 1961.23,1214.57 1961.82,1214.57 1962.4,1214.57 1962.99,1214.57 1963.58,1214.57 1964.16,1214.57 1964.75,1214.57 1965.33,1214.57 1965.92,1214.57 1966.51,1214.57 1967.09,1214.57 1967.68,1214.57 1968.27,1214.57 1968.85,1214.57 1969.44,1214.57 1970.03,1214.57 1970.61,1214.57 1971.2,1214.57 1971.78,1214.57 1972.37,1214.57 1972.96,1214.57 1973.54,1214.57 1974.13,1214.57 1974.72,1214.57 1975.3,1214.57 1975.89,1214.57 1976.48,1214.57 1977.06,1214.57 1977.65,1214.57 1978.24,1214.57 1978.82,1214.57 1979.41,1214.57 1979.99,1214.57 1980.58,1214.57 1981.17,1214.57 1981.75,1214.57 1982.34,1214.57 1982.93,1214.57 1983.51,1214.57 1984.1,1214.57 1984.69,1214.57 1985.27,1214.57 1985.86,1214.57 1986.45,1214.57 1987.03,1214.57 1987.62,1214.57 1988.2,1214.57 1988.79,1214.57 1989.38,1214.57 1989.96,1214.57 1990.55,1214.57 1991.14,1214.57 1991.72,1214.57 1992.31,1214.57 1992.9,1214.57 1993.48,1214.57 1994.07,1214.57 1994.65,1214.57 1995.24,1214.57 1995.83,1214.57 1996.41,1214.57 1997,1214.57 1997.59,1214.57 1998.17,1214.57 1998.76,1214.57 1999.35,1214.57 1999.93,1214.57 2000.52,1214.57 2001.11,1214.57 2001.69,1214.57 2002.28,1214.57 2002.86,1214.57 2003.45,1214.57 2004.04,1214.57 2004.62,1214.57 2005.21,1214.57 2005.8,1214.57 2006.38,1214.57 2006.97,1214.57 2007.56,1214.57 2008.14,1214.57 2008.73,1214.57 2009.32,1214.57 2009.9,1214.57 2010.49,1214.57 2011.07,1214.57 2011.66,1214.57 2012.25,1214.57 2012.83,1214.57 2013.42,1214.57 2014.01,1214.57 2014.59,1214.57 2015.18,1214.57 2015.77,1214.57 2016.35,1214.57 2016.94,1214.57 2017.53,1214.57 2018.11,1214.57 2018.7,1214.57 2019.28,1214.57 2019.87,1214.57 2020.46,1214.57 2021.04,1214.57 2021.63,1214.57 2022.22,1214.57 2022.8,1214.57 2023.39,1214.57 2023.98,1214.57 2024.56,1214.57 2025.15,1214.57 2025.73,1214.57 2026.32,1214.57 2026.91,1214.57 2027.49,1214.57 2028.08,1214.57 2028.67,1214.57 2029.25,1214.57 2029.84,1214.57 2030.43,1214.57 2031.01,1214.57 2031.6,1214.57 2032.19,1214.57 2032.77,1214.57 2033.36,1214.57 2033.94,1214.57 2034.53,1214.57 2035.12,1214.57 2035.7,1214.57 2036.29,1214.57 2036.88,1214.57 2037.46,1214.57 2038.05,1214.57 2038.64,1214.57 2039.22,1214.57 2039.81,1214.57 2040.4,1214.57 2040.98,1214.57 2041.57,1214.57 2042.15,1214.57 2042.74,1214.57 2043.33,1214.57 2043.91,1214.57 2044.5,1214.57 2045.09,1214.57 2045.67,1214.57 2046.26,1214.57 2046.85,1214.57 2047.43,1214.57 2048.02,1214.57 2048.6,1214.57 2049.19,1214.57 2049.78,1214.57 2050.36,1214.57 2050.95,1214.57 2051.54,1214.57 2052.12,1214.57 2052.71,1214.57 2053.3,1214.57 2053.88,1214.57 2054.47,1214.57 2055.06,1214.57 2055.64,1214.57 2056.23,1214.57 2056.81,1214.57 2057.4,1214.57 2057.99,1214.57 2058.57,1214.57 2059.16,1214.57 2059.75,1214.57 2060.33,1214.57 2060.92,1214.57 2061.51,1214.57 2062.09,1214.57 2062.68,1214.57 2063.27,1214.57 2063.85,1214.57 2064.44,1214.57 2065.02,1214.57 2065.61,1214.57 2066.2,1214.57 2066.78,1214.57 2067.37,1214.57 2067.96,1214.57 2068.54,1214.57 2069.13,1214.57 2069.72,1214.57 2070.3,1214.57 2070.89,1214.57 2071.48,1214.57 2072.06,1214.57 2072.65,1214.57 2073.23,1214.57 2073.82,1214.57 2074.41,1214.57 2074.99,1214.57 2075.58,1214.57 2076.17,1214.57 2076.75,1214.57 2077.34,1214.57 2077.93,1214.57 2078.51,1214.57 2079.1,1214.57 2079.68,1214.57 2080.27,1214.57 2080.86,1214.57 2081.44,1214.57 2082.03,1214.57 2082.62,1214.57 2083.2,1214.57 2083.79,1214.57 2084.38,1214.57 2084.96,1214.57 2085.55,1214.57 2086.14,1214.57 2086.72,1214.57 2087.31,1214.57 2087.89,1214.57 2088.48,1214.57 2089.07,1214.57 2089.65,1214.57 2090.24,1214.57 2090.83,1214.57 2091.41,1214.57 2092,1214.57 2092.59,1214.57 2093.17,1214.57 2093.76,1214.57 2094.35,1214.57 2094.93,1214.57 2095.52,1214.57 2096.1,1214.57 2096.69,1214.57 2097.28,1214.57 2097.86,1214.57 2098.45,1214.57 2099.04,1214.57 2099.62,1214.57 2100.21,1214.57 2100.8,1214.57 2101.38,1214.57 2101.97,1214.57 2102.55,1214.57 2103.14,1214.57 2103.73,1214.57 2104.31,1214.57 2104.9,1214.57 2105.49,1214.57 2106.07,1214.57 2106.66,1214.57 2107.25,1214.57 2107.83,1214.57 2108.42,1214.57 2109.01,1214.57 2109.59,1214.57 2110.18,1214.57 2110.76,1214.57 2111.35,1214.57 2111.94,1214.57 2112.52,1214.57 2113.11,1214.57 2113.7,1214.57 2114.28,1214.57 2114.87,1214.57 2115.46,1214.57 2116.04,1214.57 2116.63,1214.57 2117.22,1214.57 2117.8,1214.57 2118.39,1214.57 2118.97,1214.57 2119.56,1214.57 2120.15,1214.57 2120.73,1214.57 2121.32,1214.57 2121.91,1214.57 2122.49,1214.57 2123.08,1214.57 2123.67,1214.57 2124.25,1214.57 2124.84,1214.57 2125.42,1214.57 2126.01,1214.57 2126.6,1214.57 2127.18,1214.57 2127.77,1214.57 2128.36,1214.57 2128.94,1214.57 2129.53,1214.57 2130.12,1214.57 2130.7,1214.57 2131.29,1214.57 2131.88,1214.57 2132.46,1214.57 2133.05,1214.57 2133.63,1214.57 2134.22,1214.57 2134.81,1214.57 2135.39,1214.57 2135.98,1214.57 2136.57,1214.57 2137.15,1214.57 2137.74,1214.57 2138.33,1214.57 2138.91,1214.57 2139.5,1214.57 2140.09,1214.57 2140.67,1214.57 2141.26,1214.57 2141.84,1214.57 2142.43,1214.57 2143.02,1214.57 2143.6,1214.57 2144.19,1214.57 2144.78,1214.57 2145.36,1214.57 2145.95,1214.57 2146.54,1214.57 2147.12,1214.57 2147.71,1214.57 2148.3,1214.57 2148.88,1214.57 2149.47,1214.57 2150.05,1214.57 2150.64,1214.57 2151.23,1214.57 2151.81,1214.57 2152.4,1214.57 2152.99,1214.57 2153.57,1214.57 2154.16,1214.57 2154.75,1214.57 2155.33,1214.57 2155.92,1214.57 2156.5,1214.57 2157.09,1214.57 2157.68,1214.57 2158.26,1214.57 \"/>\n<path clip-path=\"url(#clip342)\" d=\"M986.025 1214.45 L986.612 1214.45 L987.198 1214.45 L987.785 1214.45 L988.371 1214.45 L988.957 1214.45 L989.544 1214.45 L990.13 1214.45 L990.717 1214.45 L991.303 1214.45 L991.889 1214.45 L992.476 1214.45 L993.062 1214.45 L993.649 1214.45 L994.235 1214.45 L994.822 1214.45 L995.408 1214.45 L995.994 1214.45 L996.581 1214.45 L997.167 1214.45 L997.754 1214.45 L998.34 1214.45 L998.926 1214.45 L999.513 1214.45 L1000.1 1214.45 L1000.69 1214.45 L1001.27 1214.45 L1001.86 1214.45 L1002.44 1214.45 L1003.03 1214.45 L1003.62 1214.45 L1004.2 1214.45 L1004.79 1214.45 L1005.38 1214.45 L1005.96 1214.45 L1006.55 1214.45 L1007.14 1214.45 L1007.72 1214.45 L1008.31 1214.45 L1008.9 1214.45 L1009.48 1214.45 L1010.07 1214.45 L1010.65 1214.45 L1011.24 1214.45 L1011.83 1214.45 L1012.41 1214.45 L1013 1214.45 L1013.59 1214.45 L1014.17 1214.45 L1014.76 1214.45 L1015.35 1214.45 L1015.93 1214.45 L1016.52 1214.45 L1017.11 1214.45 L1017.69 1214.45 L1018.28 1214.45 L1018.86 1214.45 L1019.45 1214.45 L1020.04 1214.45 L1020.62 1214.45 L1021.21 1214.45 L1021.8 1214.45 L1022.38 1214.45 L1022.97 1214.45 L1023.56 1214.45 L1024.14 1214.45 L1024.73 1214.45 L1025.32 1214.45 L1025.9 1214.45 L1026.49 1214.45 L1027.07 1214.45 L1027.66 1214.45 L1028.25 1214.45 L1028.83 1214.45 L1029.42 1214.45 L1030.01 1214.45 L1030.59 1214.45 L1031.18 1214.45 L1031.77 1214.45 L1032.35 1214.45 L1032.94 1214.45 L1033.52 1214.45 L1034.11 1214.45 L1034.7 1214.45 L1035.28 1214.45 L1035.87 1214.45 L1036.46 1214.45 L1037.04 1214.45 L1037.63 1214.45 L1038.22 1214.45 L1038.8 1214.45 L1039.39 1214.45 L1039.98 1214.45 L1040.56 1214.45 L1041.15 1214.45 L1041.73 1214.45 L1042.32 1214.45 L1042.91 1214.45 L1043.49 1214.45 L1044.08 1214.45 L1044.67 1214.45 L1045.25 1214.45 L1045.84 1214.45 L1046.43 1214.45 L1047.01 1214.45 L1047.6 1214.45 L1048.19 1214.45 L1048.77 1214.45 L1049.36 1214.45 L1049.94 1214.45 L1050.53 1214.45 L1051.12 1214.45 L1051.7 1214.45 L1052.29 1214.45 L1052.88 1214.45 L1053.46 1214.45 L1054.05 1214.45 L1054.64 1214.45 L1055.22 1214.45 L1055.81 1214.45 L1056.39 1214.45 L1056.98 1214.45 L1057.57 1214.45 L1058.15 1214.45 L1058.74 1214.45 L1059.33 1214.45 L1059.91 1214.45 L1060.5 1214.45 L1061.09 1214.45 L1061.67 1214.45 L1062.26 1214.45 L1062.85 1214.45 L1063.43 1214.45 L1064.02 1214.45 L1064.6 1214.45 L1065.19 1214.45 L1065.78 1214.45 L1066.36 1214.45 L1066.95 1214.45 L1067.54 1214.45 L1068.12 1214.45 L1068.71 1214.45 L1069.3 1214.45 L1069.88 1214.45 L1070.47 1214.45 L1071.06 1214.45 L1071.64 1214.45 L1072.23 1214.45 L1072.81 1214.45 L1073.4 1214.45 L1073.99 1214.45 L1074.57 1214.45 L1075.16 1214.45 L1075.75 1214.45 L1076.33 1214.45 L1076.92 1214.45 L1077.51 1214.45 L1078.09 1214.45 L1078.68 1214.45 L1079.26 1214.45 L1079.85 1214.45 L1080.44 1214.45 L1081.02 1214.45 L1081.61 1214.45 L1082.2 1214.45 L1082.78 1214.45 L1083.37 1214.45 L1083.96 1214.45 L1084.54 1214.45 L1085.13 1214.45 L1085.72 1214.45 L1086.3 1214.45 L1086.89 1214.45 L1087.47 1214.45 L1088.06 1214.45 L1088.65 1214.45 L1089.23 1214.45 L1089.82 1214.45 L1090.41 1214.45 L1090.99 1214.45 L1091.58 1214.45 L1092.17 1214.45 L1092.75 1214.45 L1093.34 1214.45 L1093.93 1214.45 L1094.51 1214.45 L1095.1 1214.45 L1095.68 1214.45 L1096.27 1214.45 L1096.86 1214.45 L1097.44 1214.45 L1098.03 1214.45 L1098.62 1214.45 L1099.2 1214.45 L1099.79 1214.45 L1100.38 1214.45 L1100.96 1214.45 L1101.55 1214.45 L1102.14 1214.45 L1102.72 1214.45 L1103.31 1214.45 L1103.89 1214.45 L1104.48 1214.45 L1105.07 1214.45 L1105.65 1214.45 L1106.24 1214.45 L1106.83 1214.45 L1107.41 1214.45 L1108 1214.45 L1108.59 1214.45 L1109.17 1214.45 L1109.76 1214.45 L1110.34 1214.45 L1110.93 1214.45 L1111.52 1214.45 L1112.1 1214.45 L1112.69 1214.45 L1113.28 1214.45 L1113.86 1214.45 L1114.45 1214.45 L1115.04 1214.45 L1115.62 1214.45 L1116.21 1214.45 L1116.8 1214.45 L1117.38 1214.45 L1117.97 1214.45 L1118.55 1214.45 L1119.14 1214.45 L1119.73 1214.45 L1120.31 1214.45 L1120.9 1214.45 L1121.49 1214.45 L1122.07 1214.45 L1122.66 1214.45 L1123.25 1214.45 L1123.83 1214.45 L1124.42 1214.45 L1125.01 1214.45 L1125.59 1214.45 L1126.18 1214.45 L1126.76 1214.45 L1127.35 1214.45 L1127.94 1214.45 L1128.52 1214.45 L1129.11 1214.45 L1129.7 1214.45 L1130.28 1214.45 L1130.87 1214.45 L1131.46 1214.45 L1132.04 1214.45 L1132.63 1214.45 L1133.21 1214.45 L1133.8 1214.45 L1134.39 1214.45 L1134.97 1214.45 L1135.56 1214.45 L1136.15 1214.45 L1136.73 1214.45 L1137.32 1214.45 L1137.91 1214.45 L1138.49 1214.45 L1139.08 1214.45 L1139.67 1214.45 L1140.25 1214.45 L1140.84 1214.45 L1141.42 1214.45 L1142.01 1214.45 L1142.6 1214.45 L1143.18 1214.45 L1143.77 1214.45 L1144.36 1214.45 L1144.94 1214.45 L1145.53 1214.45 L1146.12 1214.45 L1146.7 1214.45 L1147.29 1214.45 L1147.88 1214.45 L1148.46 1214.45 L1149.05 1214.45 L1149.63 1214.45 L1150.22 1214.45 L1150.81 1214.45 L1151.39 1214.45 L1151.98 1214.45 L1152.57 1214.45 L1153.15 1214.45 L1153.74 1214.45 L1154.33 1214.45 L1154.91 1214.45 L1155.5 1214.45 L1156.09 1214.45 L1156.67 1214.45 L1157.26 1214.45 L1157.84 1214.45 L1158.43 1214.45 L1159.02 1214.45 L1159.6 1214.45 L1160.19 1214.45 L1160.78 1214.45 L1161.36 1214.45 L1161.95 1214.45 L1162.54 1214.45 L1163.12 1214.45 L1163.71 1214.45 L1164.29 1214.45 L1164.88 1214.45 L1165.47 1214.45 L1166.05 1214.45 L1166.64 1214.45 L1167.23 1214.45 L1167.81 1214.45 L1168.4 1214.45 L1168.99 1214.45 L1169.57 1214.45 L1170.16 1214.45 L1170.75 1214.45 L1171.33 1214.45 L1171.92 1214.45 L1172.5 1214.45 L1173.09 1214.45 L1173.68 1214.45 L1174.26 1214.45 L1174.85 1214.45 L1175.44 1214.45 L1176.02 1214.45 L1176.61 1214.45 L1177.2 1214.45 L1177.78 1214.45 L1178.37 1214.45 L1178.96 1214.45 L1179.54 1214.45 L1180.13 1214.45 L1180.71 1214.45 L1181.3 1214.45 L1181.89 1214.45 L1182.47 1214.45 L1183.06 1214.45 L1183.65 1214.45 L1184.23 1214.45 L1184.82 1214.45 L1185.41 1214.45 L1185.99 1214.45 L1186.58 1214.45 L1187.16 1214.45 L1187.75 1214.45 L1188.34 1214.45 L1188.92 1214.45 L1189.51 1214.45 L1190.1 1214.45 L1190.68 1214.45 L1191.27 1214.45 L1191.86 1214.45 L1192.44 1214.45 L1193.03 1214.45 L1193.62 1214.45 L1194.2 1214.45 L1194.79 1214.45 L1195.37 1214.45 L1195.96 1214.45 L1196.55 1214.45 L1197.13 1214.45 L1197.72 1214.45 L1198.31 1214.45 L1198.89 1214.45 L1199.48 1214.45 L1200.07 1214.45 L1200.65 1214.45 L1201.24 1214.45 L1201.83 1214.45 L1202.41 1214.45 L1203 1214.45 L1203.58 1214.45 L1204.17 1214.45 L1204.76 1214.45 L1205.34 1214.45 L1205.93 1214.45 L1206.52 1214.45 L1207.1 1214.45 L1207.69 1214.45 L1208.28 1214.45 L1208.86 1214.45 L1209.45 1214.45 L1210.03 1214.45 L1210.62 1214.45 L1211.21 1214.45 L1211.79 1214.45 L1212.38 1214.45 L1212.97 1214.45 L1213.55 1214.45 L1214.14 1214.45 L1214.73 1214.45 L1215.31 1214.45 L1215.9 1214.45 L1216.49 1214.45 L1217.07 1214.45 L1217.66 1214.45 L1218.24 1214.45 L1218.83 1214.45 L1219.42 1214.45 L1220 1214.45 L1220.59 1214.45 L1221.18 1214.45 L1221.76 1214.45 L1222.35 1214.45 L1222.94 1214.45 L1223.52 1214.45 L1224.11 1214.45 L1224.7 1214.45 L1225.28 1214.45 L1225.87 1214.45 L1226.45 1214.45 L1227.04 1214.45 L1227.63 1214.45 L1228.21 1214.45 L1228.8 1214.45 L1229.39 1214.45 L1229.97 1214.45 L1230.56 1214.45 L1231.15 1214.45 L1231.73 1214.45 L1232.32 1214.45 L1232.91 1214.45 L1233.49 1214.45 L1234.08 1214.45 L1234.66 1214.45 L1235.25 1214.45 L1235.84 1214.45 L1236.42 1214.45 L1237.01 1214.45 L1237.6 1214.45 L1238.18 1214.45 L1238.77 1214.45 L1239.36 1214.45 L1239.94 1214.45 L1240.53 1214.45 L1241.11 1214.45 L1241.7 1214.45 L1242.29 1214.45 L1242.87 1214.45 L1243.46 1214.45 L1244.05 1214.45 L1244.63 1214.45 L1245.22 1214.45 L1245.81 1214.45 L1246.39 1214.45 L1246.98 1214.45 L1247.57 1214.45 L1248.15 1214.45 L1248.74 1214.45 L1249.32 1214.45 L1249.91 1214.45 L1250.5 1214.45 L1251.08 1214.45 L1251.67 1214.45 L1252.26 1214.45 L1252.84 1214.45 L1253.43 1214.45 L1254.02 1214.45 L1254.6 1214.45 L1255.19 1214.45 L1255.78 1214.45 L1256.36 1214.45 L1256.95 1214.45 L1257.53 1214.45 L1258.12 1214.45 L1258.71 1214.45 L1259.29 1214.45 L1259.88 1214.45 L1260.47 1214.45 L1261.05 1214.45 L1261.64 1214.45 L1262.23 1214.45 L1262.81 1214.45 L1263.4 1214.45 L1263.98 1214.45 L1264.57 1214.45 L1265.16 1214.45 L1265.74 1214.45 L1266.33 1214.45 L1266.92 1214.45 L1267.5 1214.45 L1268.09 1214.45 L1268.68 1214.45 L1269.26 1214.45 L1269.85 1214.45 L1270.44 1214.45 L1271.02 1214.45 L1271.61 1214.45 L1272.19 1214.45 L1272.78 1214.45 L1273.37 1214.45 L1273.95 1214.45 L1274.54 1214.45 L1275.13 1214.45 L1275.71 1214.45 L1276.3 1214.45 L1276.89 1214.45 L1277.47 1214.45 L1278.06 1214.45 L1278.65 1214.45 L1279.23 1214.45 L1279.82 1214.45 L1280.4 1214.45 L1280.99 1214.45 L1281.58 1214.45 L1282.16 1214.45 L1282.75 1214.45 L1283.34 1214.45 L1283.92 1214.45 L1284.51 1214.45 L1285.1 1214.45 L1285.68 1214.45 L1286.27 1214.45 L1286.86 1214.45 L1287.44 1214.45 L1288.03 1214.45 L1288.61 1214.45 L1289.2 1214.45 L1289.79 1214.45 L1290.37 1214.45 L1290.96 1214.45 L1291.55 1214.45 L1292.13 1214.45 L1292.72 1214.45 L1293.31 1214.45 L1293.89 1214.45 L1294.48 1214.45 L1295.06 1214.45 L1295.65 1214.45 L1296.24 1214.45 L1296.82 1214.45 L1297.41 1214.45 L1298 1214.45 L1298.58 1214.45 L1299.17 1214.45 L1299.76 1214.45 L1300.34 1214.45 L1300.93 1214.45 L1301.52 1214.45 L1302.1 1214.45 L1302.69 1214.45 L1303.27 1214.45 L1303.86 1214.45 L1304.45 1214.45 L1305.03 1214.45 L1305.62 1214.45 L1306.21 1214.45 L1306.79 1214.45 L1307.38 1214.45 L1307.97 1214.45 L1308.55 1214.45 L1309.14 1214.45 L1309.73 1214.45 L1310.31 1214.45 L1310.9 1214.45 L1311.48 1214.45 L1312.07 1214.45 L1312.66 1214.45 L1313.24 1214.45 L1313.83 1214.45 L1314.42 1214.45 L1315 1214.45 L1315.59 1214.45 L1316.18 1214.45 L1316.76 1214.45 L1317.35 1214.45 L1317.93 1214.45 L1318.52 1214.45 L1319.11 1214.45 L1319.69 1214.45 L1320.28 1214.45 L1320.87 1214.45 L1321.45 1214.45 L1322.04 1214.45 L1322.63 1214.45 L1323.21 1214.45 L1323.8 1214.45 L1324.39 1214.45 L1324.97 1214.45 L1325.56 1214.45 L1326.14 1214.45 L1326.73 1214.45 L1327.32 1214.45 L1327.9 1214.45 L1328.49 1214.45 L1329.08 1214.45 L1329.66 1214.45 L1330.25 1214.45 L1330.84 1214.45 L1331.42 1214.45 L1332.01 1214.45 L1332.6 1214.45 L1333.18 1214.45 L1333.77 1214.45 L1334.35 1214.45 L1334.94 1214.45 L1335.53 1214.45 L1336.11 1214.45 L1336.7 1214.45 L1337.29 1214.45 L1337.87 1214.45 L1338.46 1214.45 L1339.05 1214.45 L1339.63 1214.45 L1340.22 1214.45 L1340.8 1214.45 L1341.39 1214.45 L1341.98 1214.45 L1342.56 1214.45 L1343.15 1214.45 L1343.74 1214.45 L1344.32 1214.45 L1344.91 1214.45 L1345.5 1214.45 L1346.08 1214.45 L1346.67 1214.45 L1347.26 1214.45 L1347.84 1214.45 L1348.43 1214.45 L1349.01 1214.45 L1349.6 1214.45 L1350.19 1214.45 L1350.77 1214.45 L1351.36 1214.45 L1351.95 1214.45 L1352.53 1214.45 L1353.12 1214.45 L1353.71 1214.45 L1354.29 1214.45 L1354.88 1214.45 L1355.47 1214.45 L1356.05 1214.45 L1356.64 1214.45 L1357.22 1214.45 L1357.81 1214.45 L1358.4 1214.45 L1358.98 1214.45 L1359.57 1214.45 L1360.16 1214.45 L1360.74 1214.45 L1361.33 1214.45 L1361.92 1214.45 L1362.5 1214.45 L1363.09 1214.45 L1363.68 1214.45 L1364.26 1214.45 L1364.85 1214.45 L1365.43 1214.45 L1366.02 1214.45 L1366.61 1214.45 L1367.19 1214.45 L1367.78 1214.45 L1368.37 1214.45 L1368.95 1214.45 L1369.54 1214.45 L1370.13 1214.45 L1370.71 1214.45 L1371.3 1214.45 L1371.88 1214.45 L1372.47 1214.45 L1373.06 1214.45 L1373.64 1214.45 L1374.23 1214.45 L1374.82 1214.45 L1375.4 1214.45 L1375.99 1214.45 L1376.58 1214.45 L1377.16 1214.45 L1377.75 1214.45 L1378.34 1214.45 L1378.92 1214.45 L1379.51 1214.45 L1380.09 1214.45 L1380.68 1214.45 L1381.27 1214.45 L1381.85 1214.45 L1382.44 1214.45 L1383.03 1214.45 L1383.61 1214.45 L1384.2 1214.45 L1384.79 1214.45 L1385.37 1214.45 L1385.96 1214.45 L1386.55 1214.45 L1387.13 1214.45 L1387.72 1214.45 L1388.3 1214.45 L1388.89 1214.45 L1389.48 1214.45 L1390.06 1214.45 L1390.65 1214.45 L1391.24 1214.45 L1391.82 1214.45 L1392.41 1214.45 L1393 1214.45 L1393.58 1214.45 L1394.17 1214.45 L1394.75 1214.45 L1395.34 1214.45 L1395.93 1214.45 L1396.51 1214.45 L1397.1 1214.45 L1397.69 1214.45 L1398.27 1214.45 L1398.86 1214.45 L1399.45 1214.45 L1400.03 1214.45 L1400.62 1214.45 L1401.21 1214.45 L1401.79 1214.45 L1402.38 1214.45 L1402.96 1214.45 L1403.55 1214.45 L1404.14 1214.45 L1404.72 1214.45 L1405.31 1214.45 L1405.9 1214.45 L1406.48 1214.45 L1407.07 1214.45 L1407.66 1214.45 L1408.24 1214.45 L1408.83 1214.45 L1409.42 1214.45 L1410 1214.45 L1410.59 1214.45 L1411.17 1214.45 L1411.76 1214.45 L1412.35 1214.45 L1412.93 1214.45 L1413.52 1214.45 L1414.11 1214.45 L1414.69 1214.45 L1415.28 1214.45 L1415.87 1214.45 L1416.45 1214.45 L1417.04 1214.45 L1417.63 1214.45 L1418.21 1214.45 L1418.8 1214.45 L1419.38 1214.45 L1419.97 1214.45 L1420.56 1214.45 L1421.14 1214.45 L1421.73 1214.45 L1422.32 1214.45 L1422.9 1214.45 L1423.49 1214.45 L1424.08 1214.45 L1424.66 1214.45 L1425.25 1214.45 L1425.83 1214.45 L1426.42 1214.45 L1427.01 1214.45 L1427.59 1214.45 L1428.18 1214.45 L1428.77 1214.45 L1429.35 1214.45 L1429.94 1214.45 L1430.53 1214.45 L1431.11 1214.45 L1431.7 1214.45 L1432.29 1214.45 L1432.87 1214.45 L1433.46 1214.45 L1434.04 1214.45 L1434.63 1214.45 L1435.22 1214.45 L1435.8 1214.45 L1436.39 1214.45 L1436.98 1214.45 L1437.56 1214.45 L1438.15 1214.45 L1438.74 1214.45 L1439.32 1214.45 L1439.91 1214.45 L1440.5 1214.45 L1441.08 1214.45 L1441.67 1214.45 L1442.25 1214.45 L1442.84 1214.45 L1443.43 1214.45 L1444.01 1214.45 L1444.6 1214.45 L1445.19 1214.45 L1445.77 1214.45 L1446.36 1214.45 L1446.95 1214.45 L1447.53 1214.45 L1448.12 1214.45 L1448.7 1214.45 L1449.29 1214.45 L1449.88 1214.45 L1450.46 1214.45 L1451.05 1214.45 L1451.64 1214.45 L1452.22 1214.45 L1452.81 1214.45 L1453.4 1214.45 L1453.98 1214.45 L1454.57 1214.45 L1455.16 1214.45 L1455.74 1214.45 L1456.33 1214.45 L1456.91 1214.45 L1457.5 1214.45 L1458.09 1214.45 L1458.67 1214.45 L1459.26 1214.45 L1459.85 1214.45 L1460.43 1214.45 L1461.02 1214.45 L1461.61 1214.45 L1462.19 1214.45 L1462.78 1214.45 L1463.37 1214.45 L1463.95 1214.45 L1464.54 1214.45 L1465.12 1214.45 L1465.71 1214.45 L1466.3 1214.45 L1466.88 1214.45 L1467.47 1214.45 L1468.06 1214.45 L1468.64 1214.45 L1469.23 1214.45 L1469.82 1214.45 L1470.4 1214.45 L1470.99 1214.45 L1471.57 1214.45 L1472.16 1214.45 L1472.75 1214.45 L1473.33 1214.45 L1473.92 1214.45 L1474.51 1214.45 L1475.09 1214.45 L1475.68 1214.45 L1476.27 1214.45 L1476.85 1214.45 L1477.44 1214.45 L1478.03 1214.45 L1478.61 1214.45 L1479.2 1214.45 L1479.78 1214.45 L1480.37 1214.45 L1480.96 1214.45 L1481.54 1214.45 L1482.13 1214.45 L1482.72 1214.45 L1483.3 1214.45 L1483.89 1214.45 L1484.48 1214.45 L1485.06 1214.45 L1485.65 1214.45 L1486.24 1214.45 L1486.82 1214.45 L1487.41 1214.45 L1487.99 1214.45 L1488.58 1214.45 L1489.17 1214.45 L1489.75 1214.45 L1490.34 1214.45 L1490.93 1214.45 L1491.51 1214.45 L1492.1 1214.45 L1492.69 1214.45 L1493.27 1214.45 L1493.86 1214.45 L1494.45 1214.45 L1495.03 1214.45 L1495.62 1214.45 L1496.2 1214.45 L1496.79 1214.45 L1497.38 1214.45 L1497.96 1214.45 L1498.55 1214.45 L1499.14 1214.45 L1499.72 1214.45 L1500.31 1214.45 L1500.9 1214.45 L1501.48 1214.45 L1502.07 1214.45 L1502.65 1214.45 L1503.24 1214.45 L1503.83 1214.45 L1504.41 1214.45 L1505 1214.45 L1505.59 1214.45 L1506.17 1214.45 L1506.76 1214.45 L1507.35 1214.45 L1507.93 1214.45 L1508.52 1214.45 L1509.11 1214.45 L1509.69 1214.45 L1510.28 1214.45 L1510.86 1214.45 L1511.45 1214.45 L1512.04 1214.45 L1512.62 1214.45 L1513.21 1214.45 L1513.8 1214.45 L1514.38 1214.45 L1514.97 1214.45 L1515.56 1214.45 L1516.14 1214.45 L1516.73 1214.45 L1517.32 1214.45 L1517.9 1214.45 L1518.49 1214.45 L1519.07 1214.45 L1519.66 1214.45 L1520.25 1214.45 L1520.83 1214.45 L1521.42 1214.45 L1522.01 1214.45 L1522.59 1214.45 L1523.18 1214.45 L1523.77 1214.45 L1524.35 1214.45 L1524.94 1214.45 L1525.52 1214.45 L1526.11 1214.45 L1526.7 1214.45 L1527.28 1214.45 L1527.87 1214.45 L1528.46 1214.45 L1529.04 1214.45 L1529.63 1214.45 L1530.22 1214.45 L1530.8 1214.45 L1531.39 1214.45 L1531.98 1214.45 L1532.56 1214.45 L1533.15 1214.45 L1533.73 1214.45 L1534.32 1214.45 L1534.91 1214.45 L1535.49 1214.45 L1536.08 1214.45 L1536.67 1214.45 L1537.25 1214.45 L1537.84 1214.45 L1538.43 1214.45 L1539.01 1214.45 L1539.6 1214.45 L1540.19 1214.45 L1540.77 1214.45 L1541.36 1214.45 L1541.94 1214.45 L1542.53 1214.45 L1543.12 1214.45 L1543.7 1214.45 L1544.29 1214.45 L1544.88 1214.45 L1545.46 1214.45 L1546.05 1214.45 L1546.64 1214.45 L1547.22 1214.45 L1547.81 1214.45 L1548.4 1214.45 L1548.98 1214.45 L1549.57 1214.45 L1550.15 1214.45 L1550.74 1214.45 L1551.33 1214.45 L1551.91 1214.45 L1552.5 1214.45 L1553.09 1214.45 L1553.67 1214.45 L1554.26 1214.45 L1554.85 1214.45 L1555.43 1214.45 L1556.02 1214.45 L1556.6 1214.45 L1557.19 1214.45 L1557.78 1214.45 L1558.36 1214.45 L1558.95 1214.45 L1559.54 1214.45 L1560.12 1214.45 L1560.71 1214.45 L1561.3 1214.45 L1561.88 1214.45 L1562.47 1214.45 L1563.06 1214.45 L1563.64 1214.45 L1564.23 1214.45 L1564.81 1214.45 L1565.4 1214.45 L1565.99 1214.45 L1566.57 1214.45 L1567.16 1214.45 L1567.75 1214.45 L1568.33 1214.45 L1568.92 1214.45 L1569.51 1214.45 L1570.09 1214.45 L1570.68 1214.45 L1571.27 1214.45 L1571.85 1214.45 L1572.44 1214.45 L1573.02 1214.45 L1573.61 1214.45 L1574.2 1214.45 L1574.78 1214.45 L1575.37 1214.45 L1575.96 1214.45 L1576.54 1214.45 L1577.13 1214.45 L1577.72 1214.45 L1578.3 1214.45 L1578.89 1214.45 L1579.47 1214.45 L1580.06 1214.45 L1580.65 1214.45 L1581.23 1214.45 L1581.82 1214.45 L1582.41 1214.45 L1582.99 1214.45 L1583.58 1214.45 L1584.17 1214.45 L1584.75 1214.45 L1585.34 1214.45 L1585.93 1214.45 L1586.51 1214.45 L1587.1 1214.45 L1587.68 1214.45 L1588.27 1214.45 L1588.86 1214.45 L1589.44 1214.45 L1590.03 1214.45 L1590.62 1214.45 L1591.2 1214.45 L1591.79 1214.45 L1592.38 1214.45 L1592.96 1214.45 L1593.55 1214.45 L1594.14 1214.45 L1594.72 1214.45 L1595.31 1214.45 L1595.89 1214.45 L1596.48 1214.45 L1597.07 1214.45 L1597.65 1214.45 L1598.24 1214.45 L1598.83 1214.45 L1599.41 1214.45 L1600 1214.45 L1600.59 1214.45 L1601.17 1214.45 L1601.76 1214.45 L1602.34 1214.45 L1602.93 1214.45 L1603.52 1214.45 L1604.1 1214.45 L1604.69 1214.45 L1605.28 1214.45 L1605.86 1214.45 L1606.45 1214.45 L1607.04 1214.45 L1607.62 1214.45 L1608.21 1214.45 L1608.8 1214.45 L1609.38 1214.45 L1609.97 1214.45 L1610.55 1214.45 L1611.14 1214.45 L1611.73 1214.45 L1612.31 1214.45 L1612.9 1214.45 L1613.49 1214.45 L1614.07 1214.45 L1614.66 1214.45 L1615.25 1214.45 L1615.83 1214.45 L1616.42 1214.45 L1617.01 1214.45 L1617.59 1214.45 L1618.18 1214.45 L1618.76 1214.45 L1619.35 1214.45 L1619.94 1214.45 L1620.52 1214.45 L1621.11 1214.45 L1621.7 1214.45 L1622.28 1214.45 L1622.87 1214.45 L1623.46 1214.45 L1624.04 1214.45 L1624.63 1214.45 L1625.22 1214.45 L1625.8 1214.45 L1626.39 1214.45 L1626.97 1214.45 L1627.56 1214.45 L1628.15 1214.45 L1628.73 1214.45 L1629.32 1214.45 L1629.91 1214.45 L1630.49 1214.45 L1631.08 1214.45 L1631.67 1214.45 L1632.25 1214.45 L1632.84 1214.45 L1633.42 1214.45 L1634.01 1214.45 L1634.6 1214.45 L1635.18 1214.45 L1635.77 1214.45 L1636.36 1214.45 L1636.94 1214.45 L1637.53 1214.45 L1638.12 1214.45 L1638.7 1214.45 L1639.29 1214.45 L1639.88 1214.45 L1640.46 1214.45 L1641.05 1214.45 L1641.63 1214.45 L1642.22 1214.45 L1642.81 1214.45 L1643.39 1214.45 L1643.98 1214.45 L1644.57 1214.45 L1645.15 1214.45 L1645.74 1214.45 L1646.33 1214.45 L1646.91 1214.45 L1647.5 1214.45 L1648.09 1214.45 L1648.67 1214.45 L1649.26 1214.45 L1649.84 1214.45 L1650.43 1214.45 L1651.02 1214.45 L1651.6 1214.45 L1652.19 1214.45 L1652.78 1214.45 L1653.36 1214.45 L1653.95 1214.45 L1654.54 1214.45 L1655.12 1214.45 L1655.71 1214.45 L1656.29 1214.45 L1656.88 1214.45 L1657.47 1214.45 L1658.05 1214.45 L1658.64 1214.45 L1659.23 1214.45 L1659.81 1214.45 L1660.4 1214.45 L1660.99 1214.45 L1661.57 1214.45 L1662.16 1214.45 L1662.75 1214.45 L1663.33 1214.45 L1663.92 1214.45 L1664.5 1214.45 L1665.09 1214.45 L1665.68 1214.45 L1666.26 1214.45 L1666.85 1214.45 L1667.44 1214.45 L1668.02 1214.45 L1668.61 1214.45 L1669.2 1214.45 L1669.78 1214.45 L1670.37 1214.45 L1670.96 1214.45 L1671.54 1214.45 L1672.13 1214.45 L1672.71 1214.45 L1673.3 1214.45 L1673.89 1214.45 L1674.47 1214.45 L1675.06 1214.45 L1675.65 1214.45 L1676.23 1214.45 L1676.82 1214.45 L1677.41 1214.45 L1677.99 1214.45 L1678.58 1214.45 L1679.17 1214.45 L1679.75 1214.45 L1680.34 1214.45 L1680.92 1214.45 L1681.51 1214.45 L1682.1 1214.45 L1682.68 1214.45 L1683.27 1214.45 L1683.86 1214.45 L1684.44 1214.45 L1685.03 1214.45 L1685.62 1214.45 L1686.2 1214.45 L1686.79 1214.45 L1687.37 1214.45 L1687.96 1214.45 L1688.55 1214.45 L1689.13 1214.45 L1689.72 1214.45 L1690.31 1214.45 L1690.89 1214.45 L1691.48 1214.45 L1692.07 1214.45 L1692.65 1214.45 L1693.24 1214.45 L1693.83 1214.45 L1694.41 1214.45 L1695 1214.45 L1695.58 1214.45 L1696.17 1214.45 L1696.76 1214.45 L1697.34 1214.45 L1697.93 1214.45 L1698.52 1214.45 L1699.1 1214.45 L1699.69 1214.45 L1700.28 1214.45 L1700.86 1214.45 L1701.45 1214.45 L1702.04 1214.45 L1702.62 1214.45 L1703.21 1214.45 L1703.79 1214.45 L1704.38 1214.45 L1704.97 1214.45 L1705.55 1214.45 L1706.14 1214.45 L1706.73 1214.45 L1707.31 1214.45 L1707.9 1214.45 L1708.49 1214.45 L1709.07 1214.45 L1709.66 1214.45 L1710.24 1214.45 L1710.83 1214.45 L1711.42 1214.45 L1712 1214.45 L1712.59 1214.45 L1713.18 1214.45 L1713.76 1214.45 L1714.35 1214.45 L1714.94 1214.45 L1715.52 1214.45 L1716.11 1214.45 L1716.7 1214.45 L1717.28 1214.45 L1717.87 1214.45 L1718.45 1214.45 L1719.04 1214.45 L1719.63 1214.45 L1720.21 1214.45 L1720.8 1214.45 L1721.39 1214.45 L1721.97 1214.45 L1722.56 1214.45 L1723.15 1214.45 L1723.73 1214.45 L1724.32 1214.45 L1724.91 1214.45 L1725.49 1214.45 L1726.08 1214.45 L1726.66 1214.45 L1727.25 1214.45 L1727.84 1214.45 L1728.42 1214.45 L1729.01 1214.45 L1729.6 1214.45 L1730.18 1214.45 L1730.77 1214.45 L1731.36 1214.45 L1731.94 1214.45 L1732.53 1214.45 L1733.11 1214.45 L1733.7 1214.45 L1734.29 1214.45 L1734.87 1214.45 L1735.46 1214.45 L1736.05 1214.45 L1736.63 1214.45 L1737.22 1214.45 L1737.81 1214.45 L1738.39 1214.45 L1738.98 1214.45 L1739.57 1214.45 L1740.15 1214.45 L1740.74 1214.45 L1741.32 1214.45 L1741.91 1214.45 L1742.5 1214.45 L1743.08 1214.45 L1743.67 1214.45 L1744.26 1214.45 L1744.84 1214.45 L1745.43 1214.45 L1746.02 1214.45 L1746.6 1214.45 L1747.19 1214.45 L1747.78 1214.45 L1748.36 1214.45 L1748.95 1214.45 L1749.53 1214.45 L1750.12 1214.45 L1750.71 1214.45 L1751.29 1214.45 L1751.88 1214.45 L1752.47 1214.45 L1753.05 1214.45 L1753.64 1214.45 L1754.23 1214.45 L1754.81 1214.45 L1755.4 1214.45 L1755.99 1214.45 L1756.57 1214.45 L1757.16 1214.45 L1757.74 1214.45 L1758.33 1214.45 L1758.92 1214.45 L1759.5 1214.45 L1760.09 1214.45 L1760.68 1214.45 L1761.26 1214.45 L1761.85 1214.45 L1762.44 1214.45 L1763.02 1214.45 L1763.61 1214.45 L1764.19 1214.45 L1764.78 1214.45 L1765.37 1214.45 L1765.95 1214.45 L1766.54 1214.45 L1767.13 1214.45 L1767.71 1214.45 L1768.3 1214.45 L1768.89 1214.45 L1769.47 1214.45 L1770.06 1214.45 L1770.65 1214.45 L1771.23 1214.45 L1771.82 1214.45 L1772.4 1214.45 L1772.99 1214.45 L1773.58 1214.45 L1774.16 1214.45 L1774.75 1214.45 L1775.34 1214.45 L1775.92 1214.45 L1776.51 1214.45 L1777.1 1214.45 L1777.68 1214.45 L1778.27 1214.45 L1778.86 1214.45 L1779.44 1214.45 L1780.03 1214.45 L1780.61 1214.45 L1781.2 1214.45 L1781.79 1214.45 L1782.37 1214.45 L1782.96 1214.45 L1783.55 1214.45 L1784.13 1214.45 L1784.72 1214.45 L1785.31 1214.45 L1785.89 1214.45 L1786.48 1214.45 L1787.06 1214.45 L1787.65 1214.45 L1788.24 1214.45 L1788.82 1214.45 L1789.41 1214.45 L1790 1214.45 L1790.58 1214.45 L1791.17 1214.45 L1791.76 1214.45 L1792.34 1214.45 L1792.93 1214.45 L1793.52 1214.45 L1794.1 1214.45 L1794.69 1214.45 L1795.27 1214.45 L1795.86 1214.45 L1796.45 1214.45 L1797.03 1214.45 L1797.62 1214.45 L1798.21 1214.45 L1798.79 1214.45 L1799.38 1214.45 L1799.97 1214.45 L1800.55 1214.45 L1801.14 1214.45 L1801.73 1214.45 L1802.31 1214.45 L1802.9 1214.45 L1803.48 1214.45 L1804.07 1214.45 L1804.66 1214.45 L1805.24 1214.45 L1805.83 1214.45 L1806.42 1214.45 L1807 1214.45 L1807.59 1214.45 L1808.18 1214.45 L1808.76 1214.45 L1809.35 1214.45 L1809.94 1214.45 L1810.52 1214.45 L1811.11 1214.45 L1811.69 1214.45 L1812.28 1214.45 L1812.87 1214.45 L1813.45 1214.45 L1814.04 1214.45 L1814.63 1214.45 L1815.21 1214.45 L1815.8 1214.45 L1816.39 1214.45 L1816.97 1214.45 L1817.56 1214.45 L1818.14 1214.45 L1818.73 1214.45 L1819.32 1214.45 L1819.9 1214.45 L1820.49 1214.45 L1821.08 1214.45 L1821.66 1214.45 L1822.25 1214.45 L1822.84 1214.45 L1823.42 1214.45 L1824.01 1214.45 L1824.6 1214.45 L1825.18 1214.45 L1825.77 1214.45 L1826.35 1214.45 L1826.94 1214.45 L1827.53 1214.45 L1828.11 1214.45 L1828.7 1214.45 L1829.29 1214.45 L1829.87 1214.45 L1830.46 1214.45 L1831.05 1214.45 L1831.63 1214.45 L1832.22 1214.45 L1832.81 1214.45 L1833.39 1214.45 L1833.98 1214.45 L1834.56 1214.45 L1835.15 1214.45 L1835.74 1214.45 L1836.32 1214.45 L1836.91 1214.45 L1837.5 1214.45 L1838.08 1214.45 L1838.67 1214.45 L1839.26 1214.45 L1839.84 1214.45 L1840.43 1214.45 L1841.01 1214.45 L1841.6 1214.45 L1842.19 1214.45 L1842.77 1214.45 L1843.36 1214.45 L1843.95 1214.45 L1844.53 1214.45 L1845.12 1214.45 L1845.71 1214.45 L1846.29 1214.45 L1846.88 1214.45 L1847.47 1214.45 L1848.05 1214.45 L1848.64 1214.45 L1849.22 1214.45 L1849.81 1214.45 L1850.4 1214.45 L1850.98 1214.45 L1851.57 1214.45 L1852.16 1214.45 L1852.74 1214.45 L1853.33 1214.45 L1853.92 1214.45 L1854.5 1214.45 L1855.09 1214.45 L1855.68 1214.45 L1856.26 1214.45 L1856.85 1214.45 L1857.43 1214.45 L1858.02 1214.45 L1858.61 1214.45 L1859.19 1214.45 L1859.78 1214.45 L1860.37 1214.45 L1860.95 1214.45 L1861.54 1214.45 L1862.13 1214.45 L1862.71 1214.45 L1863.3 1214.45 L1863.88 1214.45 L1864.47 1214.45 L1865.06 1214.45 L1865.64 1214.45 L1866.23 1214.45 L1866.82 1214.45 L1867.4 1214.45 L1867.99 1214.45 L1868.58 1214.45 L1869.16 1214.45 L1869.75 1214.45 L1870.34 1214.45 L1870.92 1214.45 L1871.51 1214.45 L1872.09 1214.45 L1872.68 1214.45 L1873.27 1214.45 L1873.85 1214.45 L1874.44 1214.45 L1875.03 1214.45 L1875.61 1214.45 L1876.2 1214.45 L1876.79 1214.45 L1877.37 1214.45 L1877.96 1214.45 L1878.55 1214.45 L1879.13 1214.45 L1879.72 1214.45 L1880.3 1214.45 L1880.89 1214.45 L1881.48 1214.45 L1882.06 1214.45 L1882.65 1214.45 L1883.24 1214.45 L1883.82 1214.45 L1884.41 1214.45 L1885 1214.45 L1885.58 1214.45 L1886.17 1214.45 L1886.76 1214.45 L1887.34 1214.45 L1887.93 1214.45 L1888.51 1214.45 L1889.1 1214.45 L1889.69 1214.45 L1890.27 1214.45 L1890.86 1214.45 L1891.45 1214.45 L1892.03 1214.45 L1892.62 1214.45 L1893.21 1214.45 L1893.79 1214.45 L1894.38 1214.45 L1894.96 1214.45 L1895.55 1214.45 L1896.14 1214.45 L1896.72 1214.45 L1897.31 1214.45 L1897.9 1214.45 L1898.48 1214.45 L1899.07 1214.45 L1899.66 1214.45 L1900.24 1214.45 L1900.83 1214.45 L1901.42 1214.45 L1902 1214.45 L1902.59 1214.45 L1903.17 1214.45 L1903.76 1214.45 L1904.35 1214.45 L1904.93 1214.45 L1905.52 1214.45 L1906.11 1214.45 L1906.69 1214.45 L1907.28 1214.45 L1907.87 1214.45 L1908.45 1214.45 L1909.04 1214.45 L1909.63 1214.45 L1910.21 1214.45 L1910.8 1214.45 L1911.38 1214.45 L1911.97 1214.45 L1912.56 1214.45 L1913.14 1214.45 L1913.73 1214.45 L1914.32 1214.45 L1914.9 1214.45 L1915.49 1214.45 L1916.08 1214.45 L1916.66 1214.45 L1917.25 1214.45 L1917.83 1214.45 L1918.42 1214.45 L1919.01 1214.45 L1919.59 1214.45 L1920.18 1214.45 L1920.77 1214.45 L1921.35 1214.45 L1921.94 1214.45 L1922.53 1214.45 L1923.11 1214.45 L1923.7 1214.45 L1924.29 1214.45 L1924.87 1214.45 L1925.46 1214.45 L1926.04 1214.45 L1926.63 1214.45 L1927.22 1214.45 L1927.8 1214.45 L1928.39 1214.45 L1928.98 1214.45 L1929.56 1214.45 L1930.15 1214.45 L1930.74 1214.45 L1931.32 1214.45 L1931.91 1214.45 L1932.5 1214.45 L1933.08 1214.45 L1933.67 1214.45 L1934.25 1214.45 L1934.84 1214.45 L1935.43 1214.45 L1936.01 1214.45 L1936.6 1214.45 L1937.19 1214.45 L1937.77 1214.45 L1938.36 1214.45 L1938.95 1214.45 L1939.53 1214.45 L1940.12 1214.45 L1940.71 1214.45 L1941.29 1214.45 L1941.88 1214.45 L1942.46 1214.45 L1943.05 1214.45 L1943.64 1214.45 L1944.22 1214.45 L1944.81 1214.45 L1945.4 1214.45 L1945.98 1214.45 L1946.57 1214.45 L1947.16 1214.45 L1947.74 1214.45 L1948.33 1214.45 L1948.91 1214.45 L1949.5 1214.45 L1950.09 1214.45 L1950.67 1214.45 L1951.26 1214.45 L1951.85 1214.45 L1952.43 1214.45 L1953.02 1214.45 L1953.61 1214.45 L1954.19 1214.45 L1954.78 1214.45 L1955.37 1214.45 L1955.95 1214.45 L1956.54 1214.45 L1957.12 1214.45 L1957.71 1214.45 L1958.3 1214.45 L1958.88 1214.45 L1959.47 1214.45 L1960.06 1214.45 L1960.64 1214.45 L1961.23 1214.45 L1961.82 1214.45 L1962.4 1214.45 L1962.99 1214.45 L1963.58 1214.45 L1964.16 1214.45 L1964.75 1214.45 L1965.33 1214.45 L1965.92 1214.45 L1966.51 1214.45 L1967.09 1214.45 L1967.68 1214.45 L1968.27 1214.45 L1968.85 1214.45 L1969.44 1214.45 L1970.03 1214.45 L1970.61 1214.45 L1971.2 1214.45 L1971.78 1214.45 L1972.37 1214.45 L1972.96 1214.45 L1973.54 1214.45 L1974.13 1214.45 L1974.72 1214.45 L1975.3 1214.45 L1975.89 1214.45 L1976.48 1214.45 L1977.06 1214.45 L1977.65 1214.45 L1978.24 1214.45 L1978.82 1214.45 L1979.41 1214.45 L1979.99 1214.45 L1980.58 1214.45 L1981.17 1214.45 L1981.75 1214.45 L1982.34 1214.45 L1982.93 1214.45 L1983.51 1214.45 L1984.1 1214.45 L1984.69 1214.45 L1985.27 1214.45 L1985.86 1214.45 L1986.45 1214.45 L1987.03 1214.45 L1987.62 1214.45 L1988.2 1214.45 L1988.79 1214.45 L1989.38 1214.45 L1989.96 1214.45 L1990.55 1214.45 L1991.14 1214.45 L1991.72 1214.45 L1992.31 1214.45 L1992.9 1214.45 L1993.48 1214.45 L1994.07 1214.45 L1994.65 1214.45 L1995.24 1214.45 L1995.83 1214.45 L1996.41 1214.45 L1997 1214.45 L1997.59 1214.45 L1998.17 1214.45 L1998.76 1214.45 L1999.35 1214.45 L1999.93 1214.45 L2000.52 1214.45 L2001.11 1214.45 L2001.69 1214.45 L2002.28 1214.45 L2002.86 1214.45 L2003.45 1214.45 L2004.04 1214.45 L2004.62 1214.45 L2005.21 1214.45 L2005.8 1214.45 L2006.38 1214.45 L2006.97 1214.45 L2007.56 1214.45 L2008.14 1214.45 L2008.73 1214.45 L2009.32 1214.45 L2009.9 1214.45 L2010.49 1214.45 L2011.07 1214.45 L2011.66 1214.45 L2012.25 1214.45 L2012.83 1214.45 L2013.42 1214.45 L2014.01 1214.45 L2014.59 1214.45 L2015.18 1214.45 L2015.77 1214.45 L2016.35 1214.45 L2016.94 1214.45 L2017.53 1214.45 L2018.11 1214.45 L2018.7 1214.45 L2019.28 1214.45 L2019.87 1214.45 L2020.46 1214.45 L2021.04 1214.45 L2021.63 1214.45 L2022.22 1214.45 L2022.8 1214.45 L2023.39 1214.45 L2023.98 1214.45 L2024.56 1214.45 L2025.15 1214.45 L2025.73 1214.45 L2026.32 1214.45 L2026.91 1214.45 L2027.49 1214.45 L2028.08 1214.45 L2028.67 1214.45 L2029.25 1214.45 L2029.84 1214.45 L2030.43 1214.45 L2031.01 1214.45 L2031.6 1214.45 L2032.19 1214.45 L2032.77 1214.45 L2033.36 1214.45 L2033.94 1214.45 L2034.53 1214.45 L2035.12 1214.45 L2035.7 1214.45 L2036.29 1214.45 L2036.88 1214.45 L2037.46 1214.45 L2038.05 1214.45 L2038.64 1214.45 L2039.22 1214.45 L2039.81 1214.45 L2040.4 1214.45 L2040.98 1214.45 L2041.57 1214.45 L2042.15 1214.45 L2042.74 1214.45 L2043.33 1214.45 L2043.91 1214.45 L2044.5 1214.45 L2045.09 1214.45 L2045.67 1214.45 L2046.26 1214.45 L2046.85 1214.45 L2047.43 1214.45 L2048.02 1214.45 L2048.6 1214.45 L2049.19 1214.45 L2049.78 1214.45 L2050.36 1214.45 L2050.95 1214.45 L2051.54 1214.45 L2052.12 1214.45 L2052.71 1214.45 L2053.3 1214.45 L2053.88 1214.45 L2054.47 1214.45 L2055.06 1214.45 L2055.64 1214.45 L2056.23 1214.45 L2056.81 1214.45 L2057.4 1214.45 L2057.99 1214.45 L2058.57 1214.45 L2059.16 1214.45 L2059.75 1214.45 L2060.33 1214.45 L2060.92 1214.45 L2061.51 1214.45 L2062.09 1214.45 L2062.68 1214.45 L2063.27 1214.45 L2063.85 1214.45 L2064.44 1214.45 L2065.02 1214.45 L2065.61 1214.45 L2066.2 1214.45 L2066.78 1214.45 L2067.37 1214.45 L2067.96 1214.45 L2068.54 1214.45 L2069.13 1214.45 L2069.72 1214.45 L2070.3 1214.45 L2070.89 1214.45 L2071.48 1214.45 L2072.06 1214.45 L2072.65 1214.45 L2073.23 1214.45 L2073.82 1214.45 L2074.41 1214.45 L2074.99 1214.45 L2075.58 1214.45 L2076.17 1214.45 L2076.75 1214.45 L2077.34 1214.45 L2077.93 1214.45 L2078.51 1214.45 L2079.1 1214.45 L2079.68 1214.45 L2080.27 1214.45 L2080.86 1214.45 L2081.44 1214.45 L2082.03 1214.45 L2082.62 1214.45 L2083.2 1214.45 L2083.79 1214.45 L2084.38 1214.45 L2084.96 1214.45 L2085.55 1214.45 L2086.14 1214.45 L2086.72 1214.45 L2087.31 1214.45 L2087.89 1214.45 L2088.48 1214.45 L2089.07 1214.45 L2089.65 1214.45 L2090.24 1214.45 L2090.83 1214.45 L2091.41 1214.45 L2092 1214.45 L2092.59 1214.45 L2093.17 1214.45 L2093.76 1214.45 L2094.35 1214.45 L2094.93 1214.45 L2095.52 1214.45 L2096.1 1214.45 L2096.69 1214.45 L2097.28 1214.45 L2097.86 1214.45 L2098.45 1214.45 L2099.04 1214.45 L2099.62 1214.45 L2100.21 1214.45 L2100.8 1214.45 L2101.38 1214.45 L2101.97 1214.45 L2102.55 1214.45 L2103.14 1214.45 L2103.73 1214.45 L2104.31 1214.45 L2104.9 1214.45 L2105.49 1214.45 L2106.07 1214.45 L2106.66 1214.45 L2107.25 1214.45 L2107.83 1214.45 L2108.42 1214.45 L2109.01 1214.45 L2109.59 1214.45 L2110.18 1214.45 L2110.76 1214.45 L2111.35 1214.45 L2111.94 1214.45 L2112.52 1214.45 L2113.11 1214.45 L2113.7 1214.45 L2114.28 1214.45 L2114.87 1214.45 L2115.46 1214.45 L2116.04 1214.45 L2116.63 1214.45 L2117.22 1214.45 L2117.8 1214.45 L2118.39 1214.45 L2118.97 1214.45 L2119.56 1214.45 L2120.15 1214.45 L2120.73 1214.45 L2121.32 1214.45 L2121.91 1214.45 L2122.49 1214.45 L2123.08 1214.45 L2123.67 1214.45 L2124.25 1214.45 L2124.84 1214.45 L2125.42 1214.45 L2126.01 1214.45 L2126.6 1214.45 L2127.18 1214.45 L2127.77 1214.45 L2128.36 1214.45 L2128.94 1214.45 L2129.53 1214.45 L2130.12 1214.45 L2130.7 1214.45 L2131.29 1214.45 L2131.88 1214.45 L2132.46 1214.45 L2133.05 1214.45 L2133.63 1214.45 L2134.22 1214.45 L2134.81 1214.45 L2135.39 1214.45 L2135.98 1214.45 L2136.57 1214.45 L2137.15 1214.45 L2137.74 1214.45 L2138.33 1214.45 L2138.91 1214.45 L2139.5 1214.45 L2140.09 1214.45 L2140.67 1214.45 L2141.26 1214.45 L2141.84 1214.45 L2142.43 1214.45 L2143.02 1214.45 L2143.6 1214.45 L2144.19 1214.45 L2144.78 1214.45 L2145.36 1214.45 L2145.95 1214.45 L2146.54 1214.45 L2147.12 1214.45 L2147.71 1214.45 L2148.3 1214.45 L2148.88 1214.45 L2149.47 1214.45 L2150.05 1214.45 L2150.64 1214.45 L2151.23 1214.45 L2151.81 1214.45 L2152.4 1214.45 L2152.99 1214.45 L2153.57 1214.45 L2154.16 1214.45 L2154.75 1214.45 L2155.33 1214.45 L2155.92 1214.45 L2156.5 1214.45 L2157.09 1214.45 L2157.68 1214.45 L2158.26 1214.45 L2158.26 1214.28 L2157.68 1214.28 L2157.09 1214.28 L2156.5 1214.28 L2155.92 1214.28 L2155.33 1214.28 L2154.75 1214.28 L2154.16 1214.28 L2153.57 1214.28 L2152.99 1214.28 L2152.4 1214.28 L2151.81 1214.28 L2151.23 1214.28 L2150.64 1214.28 L2150.05 1214.28 L2149.47 1214.28 L2148.88 1214.28 L2148.3 1214.28 L2147.71 1214.28 L2147.12 1214.28 L2146.54 1214.28 L2145.95 1214.28 L2145.36 1214.28 L2144.78 1214.28 L2144.19 1214.28 L2143.6 1214.28 L2143.02 1214.28 L2142.43 1214.28 L2141.84 1214.28 L2141.26 1214.28 L2140.67 1214.28 L2140.09 1214.28 L2139.5 1214.28 L2138.91 1214.28 L2138.33 1214.28 L2137.74 1214.28 L2137.15 1214.28 L2136.57 1214.28 L2135.98 1214.28 L2135.39 1214.28 L2134.81 1214.28 L2134.22 1214.28 L2133.63 1214.28 L2133.05 1214.28 L2132.46 1214.28 L2131.88 1214.28 L2131.29 1214.28 L2130.7 1214.28 L2130.12 1214.28 L2129.53 1214.28 L2128.94 1214.28 L2128.36 1214.28 L2127.77 1214.28 L2127.18 1214.28 L2126.6 1214.28 L2126.01 1214.28 L2125.42 1214.28 L2124.84 1214.28 L2124.25 1214.28 L2123.67 1214.28 L2123.08 1214.28 L2122.49 1214.28 L2121.91 1214.28 L2121.32 1214.28 L2120.73 1214.28 L2120.15 1214.28 L2119.56 1214.28 L2118.97 1214.28 L2118.39 1214.28 L2117.8 1214.28 L2117.22 1214.28 L2116.63 1214.28 L2116.04 1214.28 L2115.46 1214.28 L2114.87 1214.28 L2114.28 1214.28 L2113.7 1214.28 L2113.11 1214.28 L2112.52 1214.28 L2111.94 1214.28 L2111.35 1214.28 L2110.76 1214.28 L2110.18 1214.28 L2109.59 1214.28 L2109.01 1214.28 L2108.42 1214.28 L2107.83 1214.28 L2107.25 1214.28 L2106.66 1214.28 L2106.07 1214.28 L2105.49 1214.28 L2104.9 1214.28 L2104.31 1214.28 L2103.73 1214.28 L2103.14 1214.28 L2102.55 1214.28 L2101.97 1214.28 L2101.38 1214.28 L2100.8 1214.28 L2100.21 1214.28 L2099.62 1214.28 L2099.04 1214.28 L2098.45 1214.28 L2097.86 1214.28 L2097.28 1214.28 L2096.69 1214.28 L2096.1 1214.28 L2095.52 1214.28 L2094.93 1214.28 L2094.35 1214.28 L2093.76 1214.28 L2093.17 1214.28 L2092.59 1214.28 L2092 1214.28 L2091.41 1214.28 L2090.83 1214.28 L2090.24 1214.28 L2089.65 1214.28 L2089.07 1214.28 L2088.48 1214.28 L2087.89 1214.28 L2087.31 1214.28 L2086.72 1214.28 L2086.14 1214.28 L2085.55 1214.28 L2084.96 1214.28 L2084.38 1214.28 L2083.79 1214.28 L2083.2 1214.28 L2082.62 1214.28 L2082.03 1214.28 L2081.44 1214.28 L2080.86 1214.28 L2080.27 1214.28 L2079.68 1214.28 L2079.1 1214.28 L2078.51 1214.28 L2077.93 1214.28 L2077.34 1214.28 L2076.75 1214.28 L2076.17 1214.28 L2075.58 1214.28 L2074.99 1214.28 L2074.41 1214.28 L2073.82 1214.28 L2073.23 1214.28 L2072.65 1214.28 L2072.06 1214.28 L2071.48 1214.28 L2070.89 1214.28 L2070.3 1214.28 L2069.72 1214.28 L2069.13 1214.28 L2068.54 1214.28 L2067.96 1214.28 L2067.37 1214.28 L2066.78 1214.28 L2066.2 1214.28 L2065.61 1214.28 L2065.02 1214.28 L2064.44 1214.28 L2063.85 1214.28 L2063.27 1214.28 L2062.68 1214.28 L2062.09 1214.28 L2061.51 1214.28 L2060.92 1214.28 L2060.33 1214.28 L2059.75 1214.28 L2059.16 1214.28 L2058.57 1214.28 L2057.99 1214.28 L2057.4 1214.28 L2056.81 1214.28 L2056.23 1214.28 L2055.64 1214.28 L2055.06 1214.28 L2054.47 1214.28 L2053.88 1214.28 L2053.3 1214.28 L2052.71 1214.28 L2052.12 1214.28 L2051.54 1214.28 L2050.95 1214.28 L2050.36 1214.28 L2049.78 1214.28 L2049.19 1214.28 L2048.6 1214.28 L2048.02 1214.28 L2047.43 1214.28 L2046.85 1214.28 L2046.26 1214.28 L2045.67 1214.28 L2045.09 1214.28 L2044.5 1214.28 L2043.91 1214.28 L2043.33 1214.28 L2042.74 1214.28 L2042.15 1214.28 L2041.57 1214.28 L2040.98 1214.28 L2040.4 1214.28 L2039.81 1214.28 L2039.22 1214.28 L2038.64 1214.28 L2038.05 1214.28 L2037.46 1214.28 L2036.88 1214.28 L2036.29 1214.28 L2035.7 1214.28 L2035.12 1214.28 L2034.53 1214.28 L2033.94 1214.28 L2033.36 1214.28 L2032.77 1214.28 L2032.19 1214.28 L2031.6 1214.28 L2031.01 1214.28 L2030.43 1214.28 L2029.84 1214.28 L2029.25 1214.28 L2028.67 1214.28 L2028.08 1214.28 L2027.49 1214.28 L2026.91 1214.28 L2026.32 1214.28 L2025.73 1214.28 L2025.15 1214.28 L2024.56 1214.28 L2023.98 1214.28 L2023.39 1214.28 L2022.8 1214.28 L2022.22 1214.28 L2021.63 1214.28 L2021.04 1214.28 L2020.46 1214.28 L2019.87 1214.28 L2019.28 1214.28 L2018.7 1214.28 L2018.11 1214.28 L2017.53 1214.28 L2016.94 1214.28 L2016.35 1214.28 L2015.77 1214.28 L2015.18 1214.28 L2014.59 1214.28 L2014.01 1214.28 L2013.42 1214.28 L2012.83 1214.28 L2012.25 1214.28 L2011.66 1214.28 L2011.07 1214.28 L2010.49 1214.28 L2009.9 1214.28 L2009.32 1214.28 L2008.73 1214.28 L2008.14 1214.28 L2007.56 1214.28 L2006.97 1214.28 L2006.38 1214.28 L2005.8 1214.28 L2005.21 1214.28 L2004.62 1214.28 L2004.04 1214.28 L2003.45 1214.28 L2002.86 1214.28 L2002.28 1214.28 L2001.69 1214.28 L2001.11 1214.28 L2000.52 1214.28 L1999.93 1214.28 L1999.35 1214.28 L1998.76 1214.28 L1998.17 1214.28 L1997.59 1214.28 L1997 1214.28 L1996.41 1214.28 L1995.83 1214.28 L1995.24 1214.28 L1994.65 1214.28 L1994.07 1214.28 L1993.48 1214.28 L1992.9 1214.28 L1992.31 1214.28 L1991.72 1214.28 L1991.14 1214.28 L1990.55 1214.28 L1989.96 1214.28 L1989.38 1214.28 L1988.79 1214.28 L1988.2 1214.28 L1987.62 1214.28 L1987.03 1214.28 L1986.45 1214.28 L1985.86 1214.28 L1985.27 1214.28 L1984.69 1214.28 L1984.1 1214.28 L1983.51 1214.28 L1982.93 1214.28 L1982.34 1214.28 L1981.75 1214.28 L1981.17 1214.28 L1980.58 1214.28 L1979.99 1214.28 L1979.41 1214.28 L1978.82 1214.28 L1978.24 1214.28 L1977.65 1214.28 L1977.06 1214.28 L1976.48 1214.28 L1975.89 1214.28 L1975.3 1214.28 L1974.72 1214.28 L1974.13 1214.28 L1973.54 1214.28 L1972.96 1214.28 L1972.37 1214.28 L1971.78 1214.28 L1971.2 1214.28 L1970.61 1214.28 L1970.03 1214.28 L1969.44 1214.28 L1968.85 1214.28 L1968.27 1214.28 L1967.68 1214.28 L1967.09 1214.28 L1966.51 1214.28 L1965.92 1214.28 L1965.33 1214.28 L1964.75 1214.28 L1964.16 1214.28 L1963.58 1214.28 L1962.99 1214.28 L1962.4 1214.28 L1961.82 1214.28 L1961.23 1214.28 L1960.64 1214.28 L1960.06 1214.28 L1959.47 1214.28 L1958.88 1214.28 L1958.3 1214.28 L1957.71 1214.28 L1957.12 1214.28 L1956.54 1214.28 L1955.95 1214.28 L1955.37 1214.28 L1954.78 1214.28 L1954.19 1214.28 L1953.61 1214.28 L1953.02 1214.28 L1952.43 1214.28 L1951.85 1214.28 L1951.26 1214.28 L1950.67 1214.28 L1950.09 1214.28 L1949.5 1214.28 L1948.91 1214.28 L1948.33 1214.28 L1947.74 1214.28 L1947.16 1214.28 L1946.57 1214.28 L1945.98 1214.28 L1945.4 1214.28 L1944.81 1214.28 L1944.22 1214.28 L1943.64 1214.28 L1943.05 1214.28 L1942.46 1214.28 L1941.88 1214.28 L1941.29 1214.28 L1940.71 1214.28 L1940.12 1214.28 L1939.53 1214.28 L1938.95 1214.28 L1938.36 1214.28 L1937.77 1214.28 L1937.19 1214.28 L1936.6 1214.28 L1936.01 1214.28 L1935.43 1214.28 L1934.84 1214.28 L1934.25 1214.28 L1933.67 1214.28 L1933.08 1214.28 L1932.5 1214.28 L1931.91 1214.28 L1931.32 1214.28 L1930.74 1214.28 L1930.15 1214.28 L1929.56 1214.28 L1928.98 1214.28 L1928.39 1214.28 L1927.8 1214.28 L1927.22 1214.28 L1926.63 1214.28 L1926.04 1214.28 L1925.46 1214.28 L1924.87 1214.28 L1924.29 1214.28 L1923.7 1214.28 L1923.11 1214.28 L1922.53 1214.28 L1921.94 1214.28 L1921.35 1214.28 L1920.77 1214.28 L1920.18 1214.28 L1919.59 1214.28 L1919.01 1214.28 L1918.42 1214.28 L1917.83 1214.28 L1917.25 1214.28 L1916.66 1214.28 L1916.08 1214.28 L1915.49 1214.28 L1914.9 1214.28 L1914.32 1214.28 L1913.73 1214.28 L1913.14 1214.28 L1912.56 1214.28 L1911.97 1214.28 L1911.38 1214.28 L1910.8 1214.28 L1910.21 1214.28 L1909.63 1214.28 L1909.04 1214.28 L1908.45 1214.28 L1907.87 1214.28 L1907.28 1214.28 L1906.69 1214.28 L1906.11 1214.28 L1905.52 1214.28 L1904.93 1214.28 L1904.35 1214.28 L1903.76 1214.28 L1903.17 1214.28 L1902.59 1214.28 L1902 1214.28 L1901.42 1214.28 L1900.83 1214.28 L1900.24 1214.28 L1899.66 1214.28 L1899.07 1214.28 L1898.48 1214.28 L1897.9 1214.28 L1897.31 1214.28 L1896.72 1214.28 L1896.14 1214.28 L1895.55 1214.28 L1894.96 1214.28 L1894.38 1214.28 L1893.79 1214.28 L1893.21 1214.28 L1892.62 1214.28 L1892.03 1214.28 L1891.45 1214.28 L1890.86 1214.28 L1890.27 1214.28 L1889.69 1214.28 L1889.1 1214.28 L1888.51 1214.28 L1887.93 1214.28 L1887.34 1214.28 L1886.76 1214.28 L1886.17 1214.28 L1885.58 1214.28 L1885 1214.28 L1884.41 1214.28 L1883.82 1214.28 L1883.24 1214.28 L1882.65 1214.28 L1882.06 1214.28 L1881.48 1214.28 L1880.89 1214.28 L1880.3 1214.28 L1879.72 1214.28 L1879.13 1214.28 L1878.55 1214.28 L1877.96 1214.28 L1877.37 1214.28 L1876.79 1214.28 L1876.2 1214.28 L1875.61 1214.28 L1875.03 1214.28 L1874.44 1214.28 L1873.85 1214.28 L1873.27 1214.28 L1872.68 1214.28 L1872.09 1214.28 L1871.51 1214.28 L1870.92 1214.28 L1870.34 1214.28 L1869.75 1214.28 L1869.16 1214.28 L1868.58 1214.28 L1867.99 1214.28 L1867.4 1214.28 L1866.82 1214.28 L1866.23 1214.28 L1865.64 1214.28 L1865.06 1214.28 L1864.47 1214.28 L1863.88 1214.28 L1863.3 1214.28 L1862.71 1214.28 L1862.13 1214.28 L1861.54 1214.28 L1860.95 1214.28 L1860.37 1214.28 L1859.78 1214.28 L1859.19 1214.28 L1858.61 1214.28 L1858.02 1214.28 L1857.43 1214.28 L1856.85 1214.28 L1856.26 1214.28 L1855.68 1214.28 L1855.09 1214.28 L1854.5 1214.28 L1853.92 1214.28 L1853.33 1214.28 L1852.74 1214.28 L1852.16 1214.28 L1851.57 1214.28 L1850.98 1214.28 L1850.4 1214.28 L1849.81 1214.28 L1849.22 1214.28 L1848.64 1214.28 L1848.05 1214.28 L1847.47 1214.28 L1846.88 1214.28 L1846.29 1214.28 L1845.71 1214.28 L1845.12 1214.28 L1844.53 1214.28 L1843.95 1214.28 L1843.36 1214.28 L1842.77 1214.28 L1842.19 1214.28 L1841.6 1214.28 L1841.01 1214.28 L1840.43 1214.28 L1839.84 1214.28 L1839.26 1214.28 L1838.67 1214.28 L1838.08 1214.28 L1837.5 1214.28 L1836.91 1214.28 L1836.32 1214.28 L1835.74 1214.28 L1835.15 1214.28 L1834.56 1214.28 L1833.98 1214.28 L1833.39 1214.28 L1832.81 1214.28 L1832.22 1214.28 L1831.63 1214.28 L1831.05 1214.28 L1830.46 1214.28 L1829.87 1214.28 L1829.29 1214.28 L1828.7 1214.28 L1828.11 1214.28 L1827.53 1214.28 L1826.94 1214.28 L1826.35 1214.28 L1825.77 1214.28 L1825.18 1214.28 L1824.6 1214.28 L1824.01 1214.28 L1823.42 1214.28 L1822.84 1214.28 L1822.25 1214.28 L1821.66 1214.28 L1821.08 1214.28 L1820.49 1214.28 L1819.9 1214.28 L1819.32 1214.28 L1818.73 1214.28 L1818.14 1214.28 L1817.56 1214.28 L1816.97 1214.28 L1816.39 1214.28 L1815.8 1214.28 L1815.21 1214.28 L1814.63 1214.28 L1814.04 1214.28 L1813.45 1214.28 L1812.87 1214.28 L1812.28 1214.28 L1811.69 1214.28 L1811.11 1214.28 L1810.52 1214.28 L1809.94 1214.28 L1809.35 1214.28 L1808.76 1214.28 L1808.18 1214.28 L1807.59 1214.28 L1807 1214.28 L1806.42 1214.28 L1805.83 1214.28 L1805.24 1214.28 L1804.66 1214.28 L1804.07 1214.28 L1803.48 1214.28 L1802.9 1214.28 L1802.31 1214.28 L1801.73 1214.28 L1801.14 1214.28 L1800.55 1214.28 L1799.97 1214.28 L1799.38 1214.28 L1798.79 1214.28 L1798.21 1214.28 L1797.62 1214.28 L1797.03 1214.28 L1796.45 1214.28 L1795.86 1214.28 L1795.27 1214.28 L1794.69 1214.28 L1794.1 1214.28 L1793.52 1214.28 L1792.93 1214.28 L1792.34 1214.28 L1791.76 1214.28 L1791.17 1214.28 L1790.58 1214.28 L1790 1214.28 L1789.41 1214.28 L1788.82 1214.28 L1788.24 1214.28 L1787.65 1214.28 L1787.06 1214.28 L1786.48 1214.28 L1785.89 1214.28 L1785.31 1214.28 L1784.72 1214.28 L1784.13 1214.28 L1783.55 1214.28 L1782.96 1214.28 L1782.37 1214.28 L1781.79 1214.28 L1781.2 1214.28 L1780.61 1214.28 L1780.03 1214.28 L1779.44 1214.28 L1778.86 1214.28 L1778.27 1214.28 L1777.68 1214.28 L1777.1 1214.28 L1776.51 1214.28 L1775.92 1214.28 L1775.34 1214.28 L1774.75 1214.28 L1774.16 1214.28 L1773.58 1214.28 L1772.99 1214.28 L1772.4 1214.28 L1771.82 1214.28 L1771.23 1214.28 L1770.65 1214.28 L1770.06 1214.28 L1769.47 1214.28 L1768.89 1214.28 L1768.3 1214.28 L1767.71 1214.28 L1767.13 1214.28 L1766.54 1214.28 L1765.95 1214.28 L1765.37 1214.28 L1764.78 1214.28 L1764.19 1214.28 L1763.61 1214.28 L1763.02 1214.28 L1762.44 1214.28 L1761.85 1214.28 L1761.26 1214.28 L1760.68 1214.28 L1760.09 1214.28 L1759.5 1214.28 L1758.92 1214.28 L1758.33 1214.28 L1757.74 1214.28 L1757.16 1214.28 L1756.57 1214.28 L1755.99 1214.28 L1755.4 1214.28 L1754.81 1214.28 L1754.23 1214.28 L1753.64 1214.28 L1753.05 1214.28 L1752.47 1214.28 L1751.88 1214.28 L1751.29 1214.28 L1750.71 1214.28 L1750.12 1214.28 L1749.53 1214.28 L1748.95 1214.28 L1748.36 1214.28 L1747.78 1214.28 L1747.19 1214.28 L1746.6 1214.28 L1746.02 1214.28 L1745.43 1214.28 L1744.84 1214.28 L1744.26 1214.28 L1743.67 1214.28 L1743.08 1214.28 L1742.5 1214.28 L1741.91 1214.28 L1741.32 1214.28 L1740.74 1214.28 L1740.15 1214.28 L1739.57 1214.28 L1738.98 1214.28 L1738.39 1214.28 L1737.81 1214.28 L1737.22 1214.28 L1736.63 1214.28 L1736.05 1214.28 L1735.46 1214.28 L1734.87 1214.28 L1734.29 1214.28 L1733.7 1214.28 L1733.11 1214.28 L1732.53 1214.28 L1731.94 1214.28 L1731.36 1214.28 L1730.77 1214.28 L1730.18 1214.28 L1729.6 1214.28 L1729.01 1214.28 L1728.42 1214.28 L1727.84 1214.28 L1727.25 1214.28 L1726.66 1214.28 L1726.08 1214.28 L1725.49 1214.28 L1724.91 1214.28 L1724.32 1214.28 L1723.73 1214.28 L1723.15 1214.28 L1722.56 1214.28 L1721.97 1214.28 L1721.39 1214.28 L1720.8 1214.28 L1720.21 1214.28 L1719.63 1214.28 L1719.04 1214.28 L1718.45 1214.28 L1717.87 1214.28 L1717.28 1214.28 L1716.7 1214.28 L1716.11 1214.28 L1715.52 1214.28 L1714.94 1214.28 L1714.35 1214.28 L1713.76 1214.28 L1713.18 1214.28 L1712.59 1214.28 L1712 1214.28 L1711.42 1214.28 L1710.83 1214.28 L1710.24 1214.28 L1709.66 1214.28 L1709.07 1214.28 L1708.49 1214.28 L1707.9 1214.28 L1707.31 1214.28 L1706.73 1214.28 L1706.14 1214.28 L1705.55 1214.28 L1704.97 1214.28 L1704.38 1214.28 L1703.79 1214.28 L1703.21 1214.28 L1702.62 1214.28 L1702.04 1214.28 L1701.45 1214.28 L1700.86 1214.28 L1700.28 1214.28 L1699.69 1214.28 L1699.1 1214.28 L1698.52 1214.28 L1697.93 1214.28 L1697.34 1214.28 L1696.76 1214.28 L1696.17 1214.28 L1695.58 1214.28 L1695 1214.28 L1694.41 1214.28 L1693.83 1214.28 L1693.24 1214.28 L1692.65 1214.28 L1692.07 1214.28 L1691.48 1214.28 L1690.89 1214.28 L1690.31 1214.28 L1689.72 1214.28 L1689.13 1214.28 L1688.55 1214.28 L1687.96 1214.28 L1687.37 1214.28 L1686.79 1214.28 L1686.2 1214.28 L1685.62 1214.28 L1685.03 1214.28 L1684.44 1214.28 L1683.86 1214.28 L1683.27 1214.28 L1682.68 1214.28 L1682.1 1214.28 L1681.51 1214.28 L1680.92 1214.28 L1680.34 1214.28 L1679.75 1214.28 L1679.17 1214.28 L1678.58 1214.28 L1677.99 1214.28 L1677.41 1214.28 L1676.82 1214.28 L1676.23 1214.28 L1675.65 1214.28 L1675.06 1214.28 L1674.47 1214.28 L1673.89 1214.28 L1673.3 1214.28 L1672.71 1214.28 L1672.13 1214.28 L1671.54 1214.28 L1670.96 1214.28 L1670.37 1214.28 L1669.78 1214.28 L1669.2 1214.28 L1668.61 1214.28 L1668.02 1214.28 L1667.44 1214.28 L1666.85 1214.28 L1666.26 1214.28 L1665.68 1214.28 L1665.09 1214.28 L1664.5 1214.28 L1663.92 1214.28 L1663.33 1214.28 L1662.75 1214.28 L1662.16 1214.28 L1661.57 1214.28 L1660.99 1214.28 L1660.4 1214.28 L1659.81 1214.28 L1659.23 1214.28 L1658.64 1214.28 L1658.05 1214.28 L1657.47 1214.28 L1656.88 1214.28 L1656.29 1214.28 L1655.71 1214.28 L1655.12 1214.28 L1654.54 1214.28 L1653.95 1214.28 L1653.36 1214.28 L1652.78 1214.28 L1652.19 1214.28 L1651.6 1214.28 L1651.02 1214.28 L1650.43 1214.28 L1649.84 1214.28 L1649.26 1214.28 L1648.67 1214.28 L1648.09 1214.28 L1647.5 1214.28 L1646.91 1214.28 L1646.33 1214.28 L1645.74 1214.28 L1645.15 1214.28 L1644.57 1214.28 L1643.98 1214.28 L1643.39 1214.28 L1642.81 1214.28 L1642.22 1214.28 L1641.63 1214.28 L1641.05 1214.28 L1640.46 1214.28 L1639.88 1214.28 L1639.29 1214.28 L1638.7 1214.28 L1638.12 1214.28 L1637.53 1214.28 L1636.94 1214.28 L1636.36 1214.28 L1635.77 1214.28 L1635.18 1214.28 L1634.6 1214.28 L1634.01 1214.28 L1633.42 1214.28 L1632.84 1214.28 L1632.25 1214.28 L1631.67 1214.28 L1631.08 1214.28 L1630.49 1214.28 L1629.91 1214.28 L1629.32 1214.28 L1628.73 1214.28 L1628.15 1214.28 L1627.56 1214.28 L1626.97 1214.28 L1626.39 1214.28 L1625.8 1214.28 L1625.22 1214.28 L1624.63 1214.28 L1624.04 1214.28 L1623.46 1214.28 L1622.87 1214.28 L1622.28 1214.28 L1621.7 1214.28 L1621.11 1214.28 L1620.52 1214.28 L1619.94 1214.28 L1619.35 1214.28 L1618.76 1214.28 L1618.18 1214.28 L1617.59 1214.28 L1617.01 1214.28 L1616.42 1214.28 L1615.83 1214.28 L1615.25 1214.28 L1614.66 1214.28 L1614.07 1214.28 L1613.49 1214.28 L1612.9 1214.28 L1612.31 1214.28 L1611.73 1214.28 L1611.14 1214.28 L1610.55 1214.28 L1609.97 1214.28 L1609.38 1214.28 L1608.8 1214.28 L1608.21 1214.28 L1607.62 1214.28 L1607.04 1214.28 L1606.45 1214.28 L1605.86 1214.28 L1605.28 1214.28 L1604.69 1214.28 L1604.1 1214.28 L1603.52 1214.28 L1602.93 1214.28 L1602.34 1214.28 L1601.76 1214.28 L1601.17 1214.28 L1600.59 1214.28 L1600 1214.28 L1599.41 1214.28 L1598.83 1214.28 L1598.24 1214.28 L1597.65 1214.28 L1597.07 1214.28 L1596.48 1214.28 L1595.89 1214.28 L1595.31 1214.28 L1594.72 1214.28 L1594.14 1214.28 L1593.55 1214.28 L1592.96 1214.28 L1592.38 1214.28 L1591.79 1214.28 L1591.2 1214.28 L1590.62 1214.28 L1590.03 1214.28 L1589.44 1214.28 L1588.86 1214.28 L1588.27 1214.28 L1587.68 1214.28 L1587.1 1214.28 L1586.51 1214.28 L1585.93 1214.28 L1585.34 1214.28 L1584.75 1214.28 L1584.17 1214.28 L1583.58 1214.28 L1582.99 1214.28 L1582.41 1214.28 L1581.82 1214.28 L1581.23 1214.28 L1580.65 1214.28 L1580.06 1214.28 L1579.47 1214.28 L1578.89 1214.28 L1578.3 1214.28 L1577.72 1214.28 L1577.13 1214.28 L1576.54 1214.28 L1575.96 1214.28 L1575.37 1214.28 L1574.78 1214.28 L1574.2 1214.28 L1573.61 1214.28 L1573.02 1214.28 L1572.44 1214.28 L1571.85 1214.28 L1571.27 1214.28 L1570.68 1214.28 L1570.09 1214.28 L1569.51 1214.28 L1568.92 1214.28 L1568.33 1214.28 L1567.75 1214.28 L1567.16 1214.28 L1566.57 1214.28 L1565.99 1214.28 L1565.4 1214.28 L1564.81 1214.28 L1564.23 1214.28 L1563.64 1214.28 L1563.06 1214.28 L1562.47 1214.28 L1561.88 1214.28 L1561.3 1214.28 L1560.71 1214.28 L1560.12 1214.28 L1559.54 1214.28 L1558.95 1214.28 L1558.36 1214.28 L1557.78 1214.28 L1557.19 1214.28 L1556.6 1214.28 L1556.02 1214.28 L1555.43 1214.28 L1554.85 1214.28 L1554.26 1214.28 L1553.67 1214.28 L1553.09 1214.28 L1552.5 1214.28 L1551.91 1214.28 L1551.33 1214.28 L1550.74 1214.28 L1550.15 1214.28 L1549.57 1214.28 L1548.98 1214.28 L1548.4 1214.28 L1547.81 1214.28 L1547.22 1214.28 L1546.64 1214.28 L1546.05 1214.28 L1545.46 1214.28 L1544.88 1214.28 L1544.29 1214.28 L1543.7 1214.28 L1543.12 1214.28 L1542.53 1214.28 L1541.94 1214.28 L1541.36 1214.28 L1540.77 1214.28 L1540.19 1214.28 L1539.6 1214.28 L1539.01 1214.28 L1538.43 1214.28 L1537.84 1214.28 L1537.25 1214.28 L1536.67 1214.28 L1536.08 1214.28 L1535.49 1214.28 L1534.91 1214.28 L1534.32 1214.28 L1533.73 1214.28 L1533.15 1214.28 L1532.56 1214.28 L1531.98 1214.28 L1531.39 1214.28 L1530.8 1214.28 L1530.22 1214.28 L1529.63 1214.28 L1529.04 1214.28 L1528.46 1214.28 L1527.87 1214.28 L1527.28 1214.28 L1526.7 1214.28 L1526.11 1214.28 L1525.52 1214.28 L1524.94 1214.28 L1524.35 1214.28 L1523.77 1214.28 L1523.18 1214.28 L1522.59 1214.28 L1522.01 1214.28 L1521.42 1214.28 L1520.83 1214.28 L1520.25 1214.28 L1519.66 1214.28 L1519.07 1214.28 L1518.49 1214.28 L1517.9 1214.28 L1517.32 1214.28 L1516.73 1214.28 L1516.14 1214.28 L1515.56 1214.28 L1514.97 1214.28 L1514.38 1214.28 L1513.8 1214.28 L1513.21 1214.28 L1512.62 1214.28 L1512.04 1214.28 L1511.45 1214.28 L1510.86 1214.28 L1510.28 1214.28 L1509.69 1214.28 L1509.11 1214.28 L1508.52 1214.28 L1507.93 1214.28 L1507.35 1214.28 L1506.76 1214.28 L1506.17 1214.28 L1505.59 1214.28 L1505 1214.28 L1504.41 1214.28 L1503.83 1214.28 L1503.24 1214.28 L1502.65 1214.28 L1502.07 1214.28 L1501.48 1214.28 L1500.9 1214.28 L1500.31 1214.28 L1499.72 1214.28 L1499.14 1214.28 L1498.55 1214.28 L1497.96 1214.28 L1497.38 1214.28 L1496.79 1214.28 L1496.2 1214.28 L1495.62 1214.28 L1495.03 1214.28 L1494.45 1214.28 L1493.86 1214.28 L1493.27 1214.28 L1492.69 1214.28 L1492.1 1214.28 L1491.51 1214.28 L1490.93 1214.28 L1490.34 1214.28 L1489.75 1214.28 L1489.17 1214.28 L1488.58 1214.28 L1487.99 1214.28 L1487.41 1214.28 L1486.82 1214.28 L1486.24 1214.28 L1485.65 1214.28 L1485.06 1214.28 L1484.48 1214.28 L1483.89 1214.28 L1483.3 1214.28 L1482.72 1214.28 L1482.13 1214.28 L1481.54 1214.28 L1480.96 1214.28 L1480.37 1214.28 L1479.78 1214.28 L1479.2 1214.28 L1478.61 1214.28 L1478.03 1214.28 L1477.44 1214.28 L1476.85 1214.28 L1476.27 1214.28 L1475.68 1214.28 L1475.09 1214.28 L1474.51 1214.28 L1473.92 1214.28 L1473.33 1214.28 L1472.75 1214.28 L1472.16 1214.28 L1471.57 1214.28 L1470.99 1214.28 L1470.4 1214.28 L1469.82 1214.28 L1469.23 1214.28 L1468.64 1214.28 L1468.06 1214.28 L1467.47 1214.28 L1466.88 1214.28 L1466.3 1214.28 L1465.71 1214.28 L1465.12 1214.28 L1464.54 1214.28 L1463.95 1214.28 L1463.37 1214.28 L1462.78 1214.28 L1462.19 1214.28 L1461.61 1214.28 L1461.02 1214.28 L1460.43 1214.28 L1459.85 1214.28 L1459.26 1214.28 L1458.67 1214.28 L1458.09 1214.28 L1457.5 1214.28 L1456.91 1214.28 L1456.33 1214.28 L1455.74 1214.28 L1455.16 1214.28 L1454.57 1214.28 L1453.98 1214.28 L1453.4 1214.28 L1452.81 1214.28 L1452.22 1214.28 L1451.64 1214.28 L1451.05 1214.28 L1450.46 1214.28 L1449.88 1214.28 L1449.29 1214.28 L1448.7 1214.28 L1448.12 1214.28 L1447.53 1214.28 L1446.95 1214.28 L1446.36 1214.28 L1445.77 1214.28 L1445.19 1214.28 L1444.6 1214.28 L1444.01 1214.28 L1443.43 1214.28 L1442.84 1214.28 L1442.25 1214.28 L1441.67 1214.28 L1441.08 1214.28 L1440.5 1214.28 L1439.91 1214.28 L1439.32 1214.28 L1438.74 1214.28 L1438.15 1214.28 L1437.56 1214.28 L1436.98 1214.28 L1436.39 1214.28 L1435.8 1214.28 L1435.22 1214.28 L1434.63 1214.28 L1434.04 1214.28 L1433.46 1214.28 L1432.87 1214.28 L1432.29 1214.28 L1431.7 1214.28 L1431.11 1214.28 L1430.53 1214.28 L1429.94 1214.28 L1429.35 1214.28 L1428.77 1214.28 L1428.18 1214.28 L1427.59 1214.28 L1427.01 1214.28 L1426.42 1214.28 L1425.83 1214.28 L1425.25 1214.28 L1424.66 1214.28 L1424.08 1214.28 L1423.49 1214.28 L1422.9 1214.28 L1422.32 1214.28 L1421.73 1214.28 L1421.14 1214.28 L1420.56 1214.28 L1419.97 1214.28 L1419.38 1214.28 L1418.8 1214.28 L1418.21 1214.28 L1417.63 1214.28 L1417.04 1214.28 L1416.45 1214.28 L1415.87 1214.28 L1415.28 1214.28 L1414.69 1214.28 L1414.11 1214.28 L1413.52 1214.28 L1412.93 1214.28 L1412.35 1214.28 L1411.76 1214.28 L1411.17 1214.28 L1410.59 1214.28 L1410 1214.28 L1409.42 1214.28 L1408.83 1214.28 L1408.24 1214.28 L1407.66 1214.28 L1407.07 1214.28 L1406.48 1214.28 L1405.9 1214.28 L1405.31 1214.28 L1404.72 1214.28 L1404.14 1214.28 L1403.55 1214.28 L1402.96 1214.28 L1402.38 1214.28 L1401.79 1214.28 L1401.21 1214.28 L1400.62 1214.28 L1400.03 1214.28 L1399.45 1214.28 L1398.86 1214.28 L1398.27 1214.28 L1397.69 1214.28 L1397.1 1214.28 L1396.51 1214.28 L1395.93 1214.28 L1395.34 1214.28 L1394.75 1214.28 L1394.17 1214.28 L1393.58 1214.28 L1393 1214.28 L1392.41 1214.28 L1391.82 1214.28 L1391.24 1214.28 L1390.65 1214.28 L1390.06 1214.28 L1389.48 1214.28 L1388.89 1214.28 L1388.3 1214.28 L1387.72 1214.28 L1387.13 1214.28 L1386.55 1214.28 L1385.96 1214.28 L1385.37 1214.28 L1384.79 1214.28 L1384.2 1214.28 L1383.61 1214.28 L1383.03 1214.28 L1382.44 1214.28 L1381.85 1214.28 L1381.27 1214.28 L1380.68 1214.28 L1380.09 1214.28 L1379.51 1214.28 L1378.92 1214.28 L1378.34 1214.28 L1377.75 1214.28 L1377.16 1214.28 L1376.58 1214.28 L1375.99 1214.28 L1375.4 1214.28 L1374.82 1214.28 L1374.23 1214.28 L1373.64 1214.28 L1373.06 1214.28 L1372.47 1214.28 L1371.88 1214.28 L1371.3 1214.28 L1370.71 1214.28 L1370.13 1214.28 L1369.54 1214.28 L1368.95 1214.28 L1368.37 1214.28 L1367.78 1214.28 L1367.19 1214.28 L1366.61 1214.28 L1366.02 1214.28 L1365.43 1214.28 L1364.85 1214.28 L1364.26 1214.28 L1363.68 1214.28 L1363.09 1214.28 L1362.5 1214.28 L1361.92 1214.28 L1361.33 1214.28 L1360.74 1214.28 L1360.16 1214.28 L1359.57 1214.28 L1358.98 1214.28 L1358.4 1214.28 L1357.81 1214.28 L1357.22 1214.28 L1356.64 1214.28 L1356.05 1214.28 L1355.47 1214.28 L1354.88 1214.28 L1354.29 1214.28 L1353.71 1214.28 L1353.12 1214.28 L1352.53 1214.28 L1351.95 1214.28 L1351.36 1214.28 L1350.77 1214.28 L1350.19 1214.28 L1349.6 1214.28 L1349.01 1214.28 L1348.43 1214.28 L1347.84 1214.28 L1347.26 1214.28 L1346.67 1214.28 L1346.08 1214.28 L1345.5 1214.28 L1344.91 1214.28 L1344.32 1214.28 L1343.74 1214.28 L1343.15 1214.28 L1342.56 1214.28 L1341.98 1214.28 L1341.39 1214.28 L1340.8 1214.28 L1340.22 1214.28 L1339.63 1214.28 L1339.05 1214.28 L1338.46 1214.28 L1337.87 1214.28 L1337.29 1214.28 L1336.7 1214.28 L1336.11 1214.28 L1335.53 1214.28 L1334.94 1214.28 L1334.35 1214.28 L1333.77 1214.28 L1333.18 1214.28 L1332.6 1214.28 L1332.01 1214.28 L1331.42 1214.28 L1330.84 1214.28 L1330.25 1214.28 L1329.66 1214.28 L1329.08 1214.28 L1328.49 1214.28 L1327.9 1214.28 L1327.32 1214.28 L1326.73 1214.28 L1326.14 1214.28 L1325.56 1214.28 L1324.97 1214.28 L1324.39 1214.28 L1323.8 1214.28 L1323.21 1214.28 L1322.63 1214.28 L1322.04 1214.28 L1321.45 1214.28 L1320.87 1214.28 L1320.28 1214.28 L1319.69 1214.28 L1319.11 1214.28 L1318.52 1214.28 L1317.93 1214.28 L1317.35 1214.28 L1316.76 1214.28 L1316.18 1214.28 L1315.59 1214.28 L1315 1214.28 L1314.42 1214.28 L1313.83 1214.28 L1313.24 1214.28 L1312.66 1214.28 L1312.07 1214.28 L1311.48 1214.28 L1310.9 1214.28 L1310.31 1214.28 L1309.73 1214.28 L1309.14 1214.28 L1308.55 1214.28 L1307.97 1214.28 L1307.38 1214.28 L1306.79 1214.28 L1306.21 1214.28 L1305.62 1214.28 L1305.03 1214.28 L1304.45 1214.28 L1303.86 1214.28 L1303.27 1214.28 L1302.69 1214.28 L1302.1 1214.28 L1301.52 1214.28 L1300.93 1214.28 L1300.34 1214.28 L1299.76 1214.28 L1299.17 1214.28 L1298.58 1214.28 L1298 1214.28 L1297.41 1214.28 L1296.82 1214.28 L1296.24 1214.28 L1295.65 1214.28 L1295.06 1214.28 L1294.48 1214.28 L1293.89 1214.28 L1293.31 1214.28 L1292.72 1214.28 L1292.13 1214.28 L1291.55 1214.28 L1290.96 1214.28 L1290.37 1214.28 L1289.79 1214.28 L1289.2 1214.28 L1288.61 1214.28 L1288.03 1214.28 L1287.44 1214.28 L1286.86 1214.28 L1286.27 1214.28 L1285.68 1214.28 L1285.1 1214.28 L1284.51 1214.28 L1283.92 1214.28 L1283.34 1214.28 L1282.75 1214.28 L1282.16 1214.28 L1281.58 1214.28 L1280.99 1214.28 L1280.4 1214.28 L1279.82 1214.28 L1279.23 1214.28 L1278.65 1214.28 L1278.06 1214.28 L1277.47 1214.28 L1276.89 1214.28 L1276.3 1214.28 L1275.71 1214.28 L1275.13 1214.28 L1274.54 1214.28 L1273.95 1214.28 L1273.37 1214.28 L1272.78 1214.28 L1272.19 1214.28 L1271.61 1214.28 L1271.02 1214.28 L1270.44 1214.28 L1269.85 1214.28 L1269.26 1214.28 L1268.68 1214.28 L1268.09 1214.28 L1267.5 1214.28 L1266.92 1214.28 L1266.33 1214.28 L1265.74 1214.28 L1265.16 1214.28 L1264.57 1214.28 L1263.98 1214.28 L1263.4 1214.28 L1262.81 1214.28 L1262.23 1214.28 L1261.64 1214.28 L1261.05 1214.28 L1260.47 1214.28 L1259.88 1214.28 L1259.29 1214.28 L1258.71 1214.28 L1258.12 1214.28 L1257.53 1214.28 L1256.95 1214.28 L1256.36 1214.28 L1255.78 1214.28 L1255.19 1214.28 L1254.6 1214.28 L1254.02 1214.28 L1253.43 1214.28 L1252.84 1214.28 L1252.26 1214.28 L1251.67 1214.28 L1251.08 1214.28 L1250.5 1214.28 L1249.91 1214.28 L1249.32 1214.28 L1248.74 1214.28 L1248.15 1214.28 L1247.57 1214.28 L1246.98 1214.28 L1246.39 1214.28 L1245.81 1214.28 L1245.22 1214.28 L1244.63 1214.28 L1244.05 1214.28 L1243.46 1214.28 L1242.87 1214.28 L1242.29 1214.28 L1241.7 1214.28 L1241.11 1214.28 L1240.53 1214.28 L1239.94 1214.28 L1239.36 1214.28 L1238.77 1214.28 L1238.18 1214.28 L1237.6 1214.28 L1237.01 1214.28 L1236.42 1214.28 L1235.84 1214.28 L1235.25 1214.28 L1234.66 1214.28 L1234.08 1214.28 L1233.49 1214.28 L1232.91 1214.28 L1232.32 1214.28 L1231.73 1214.28 L1231.15 1214.28 L1230.56 1214.28 L1229.97 1214.28 L1229.39 1214.28 L1228.8 1214.28 L1228.21 1214.28 L1227.63 1214.28 L1227.04 1214.28 L1226.45 1214.28 L1225.87 1214.28 L1225.28 1214.28 L1224.7 1214.28 L1224.11 1214.28 L1223.52 1214.28 L1222.94 1214.28 L1222.35 1214.28 L1221.76 1214.28 L1221.18 1214.28 L1220.59 1214.28 L1220 1214.28 L1219.42 1214.28 L1218.83 1214.28 L1218.24 1214.28 L1217.66 1214.28 L1217.07 1214.28 L1216.49 1214.28 L1215.9 1214.28 L1215.31 1214.28 L1214.73 1214.28 L1214.14 1214.28 L1213.55 1214.28 L1212.97 1214.28 L1212.38 1214.28 L1211.79 1214.28 L1211.21 1214.28 L1210.62 1214.28 L1210.03 1214.28 L1209.45 1214.28 L1208.86 1214.28 L1208.28 1214.28 L1207.69 1214.28 L1207.1 1214.28 L1206.52 1214.28 L1205.93 1214.28 L1205.34 1214.28 L1204.76 1214.28 L1204.17 1214.28 L1203.58 1214.28 L1203 1214.28 L1202.41 1214.28 L1201.83 1214.28 L1201.24 1214.28 L1200.65 1214.28 L1200.07 1214.28 L1199.48 1214.28 L1198.89 1214.28 L1198.31 1214.28 L1197.72 1214.28 L1197.13 1214.28 L1196.55 1214.28 L1195.96 1214.28 L1195.37 1214.28 L1194.79 1214.28 L1194.2 1214.28 L1193.62 1214.28 L1193.03 1214.28 L1192.44 1214.28 L1191.86 1214.28 L1191.27 1214.28 L1190.68 1214.28 L1190.1 1214.28 L1189.51 1214.28 L1188.92 1214.28 L1188.34 1214.28 L1187.75 1214.28 L1187.16 1214.28 L1186.58 1214.28 L1185.99 1214.28 L1185.41 1214.28 L1184.82 1214.28 L1184.23 1214.28 L1183.65 1214.28 L1183.06 1214.28 L1182.47 1214.28 L1181.89 1214.28 L1181.3 1214.28 L1180.71 1214.28 L1180.13 1214.28 L1179.54 1214.28 L1178.96 1214.28 L1178.37 1214.28 L1177.78 1214.28 L1177.2 1214.28 L1176.61 1214.28 L1176.02 1214.28 L1175.44 1214.28 L1174.85 1214.28 L1174.26 1214.28 L1173.68 1214.28 L1173.09 1214.28 L1172.5 1214.28 L1171.92 1214.28 L1171.33 1214.28 L1170.75 1214.28 L1170.16 1214.28 L1169.57 1214.28 L1168.99 1214.28 L1168.4 1214.28 L1167.81 1214.28 L1167.23 1214.28 L1166.64 1214.28 L1166.05 1214.28 L1165.47 1214.28 L1164.88 1214.28 L1164.29 1214.28 L1163.71 1214.28 L1163.12 1214.28 L1162.54 1214.28 L1161.95 1214.28 L1161.36 1214.28 L1160.78 1214.28 L1160.19 1214.28 L1159.6 1214.28 L1159.02 1214.28 L1158.43 1214.28 L1157.84 1214.28 L1157.26 1214.28 L1156.67 1214.28 L1156.09 1214.28 L1155.5 1214.28 L1154.91 1214.28 L1154.33 1214.28 L1153.74 1214.28 L1153.15 1214.28 L1152.57 1214.28 L1151.98 1214.28 L1151.39 1214.28 L1150.81 1214.28 L1150.22 1214.28 L1149.63 1214.28 L1149.05 1214.28 L1148.46 1214.28 L1147.88 1214.28 L1147.29 1214.28 L1146.7 1214.28 L1146.12 1214.28 L1145.53 1214.28 L1144.94 1214.28 L1144.36 1214.28 L1143.77 1214.28 L1143.18 1214.28 L1142.6 1214.28 L1142.01 1214.28 L1141.42 1214.28 L1140.84 1214.28 L1140.25 1214.28 L1139.67 1214.28 L1139.08 1214.28 L1138.49 1214.28 L1137.91 1214.28 L1137.32 1214.28 L1136.73 1214.28 L1136.15 1214.28 L1135.56 1214.28 L1134.97 1214.28 L1134.39 1214.28 L1133.8 1214.28 L1133.21 1214.28 L1132.63 1214.28 L1132.04 1214.28 L1131.46 1214.28 L1130.87 1214.28 L1130.28 1214.28 L1129.7 1214.28 L1129.11 1214.28 L1128.52 1214.28 L1127.94 1214.28 L1127.35 1214.28 L1126.76 1214.28 L1126.18 1214.28 L1125.59 1214.28 L1125.01 1214.28 L1124.42 1214.28 L1123.83 1214.28 L1123.25 1214.28 L1122.66 1214.28 L1122.07 1214.28 L1121.49 1214.28 L1120.9 1214.28 L1120.31 1214.28 L1119.73 1214.28 L1119.14 1214.28 L1118.55 1214.28 L1117.97 1214.28 L1117.38 1214.28 L1116.8 1214.28 L1116.21 1214.28 L1115.62 1214.28 L1115.04 1214.28 L1114.45 1214.28 L1113.86 1214.28 L1113.28 1214.28 L1112.69 1214.28 L1112.1 1214.28 L1111.52 1214.28 L1110.93 1214.28 L1110.34 1214.28 L1109.76 1214.28 L1109.17 1214.28 L1108.59 1214.28 L1108 1214.28 L1107.41 1214.28 L1106.83 1214.28 L1106.24 1214.28 L1105.65 1214.28 L1105.07 1214.28 L1104.48 1214.28 L1103.89 1214.28 L1103.31 1214.28 L1102.72 1214.28 L1102.14 1214.28 L1101.55 1214.28 L1100.96 1214.28 L1100.38 1214.28 L1099.79 1214.28 L1099.2 1214.28 L1098.62 1214.28 L1098.03 1214.28 L1097.44 1214.28 L1096.86 1214.28 L1096.27 1214.28 L1095.68 1214.28 L1095.1 1214.28 L1094.51 1214.28 L1093.93 1214.28 L1093.34 1214.28 L1092.75 1214.28 L1092.17 1214.28 L1091.58 1214.28 L1090.99 1214.28 L1090.41 1214.28 L1089.82 1214.28 L1089.23 1214.28 L1088.65 1214.28 L1088.06 1214.28 L1087.47 1214.28 L1086.89 1214.28 L1086.3 1214.28 L1085.72 1214.28 L1085.13 1214.28 L1084.54 1214.28 L1083.96 1214.28 L1083.37 1214.28 L1082.78 1214.28 L1082.2 1214.28 L1081.61 1214.28 L1081.02 1214.28 L1080.44 1214.28 L1079.85 1214.28 L1079.26 1214.28 L1078.68 1214.28 L1078.09 1214.28 L1077.51 1214.28 L1076.92 1214.28 L1076.33 1214.28 L1075.75 1214.28 L1075.16 1214.28 L1074.57 1214.28 L1073.99 1214.28 L1073.4 1214.28 L1072.81 1214.28 L1072.23 1214.28 L1071.64 1214.28 L1071.06 1214.28 L1070.47 1214.28 L1069.88 1214.28 L1069.3 1214.28 L1068.71 1214.28 L1068.12 1214.28 L1067.54 1214.28 L1066.95 1214.28 L1066.36 1214.28 L1065.78 1214.28 L1065.19 1214.28 L1064.6 1214.28 L1064.02 1214.28 L1063.43 1214.28 L1062.85 1214.28 L1062.26 1214.28 L1061.67 1214.28 L1061.09 1214.28 L1060.5 1214.28 L1059.91 1214.28 L1059.33 1214.28 L1058.74 1214.28 L1058.15 1214.28 L1057.57 1214.28 L1056.98 1214.28 L1056.39 1214.28 L1055.81 1214.28 L1055.22 1214.28 L1054.64 1214.28 L1054.05 1214.28 L1053.46 1214.28 L1052.88 1214.28 L1052.29 1214.28 L1051.7 1214.28 L1051.12 1214.28 L1050.53 1214.28 L1049.94 1214.28 L1049.36 1214.28 L1048.77 1214.28 L1048.19 1214.28 L1047.6 1214.28 L1047.01 1214.28 L1046.43 1214.28 L1045.84 1214.28 L1045.25 1214.28 L1044.67 1214.28 L1044.08 1214.28 L1043.49 1214.28 L1042.91 1214.28 L1042.32 1214.28 L1041.73 1214.28 L1041.15 1214.28 L1040.56 1214.28 L1039.98 1214.28 L1039.39 1214.28 L1038.8 1214.28 L1038.22 1214.28 L1037.63 1214.28 L1037.04 1214.28 L1036.46 1214.28 L1035.87 1214.28 L1035.28 1214.28 L1034.7 1214.28 L1034.11 1214.28 L1033.52 1214.28 L1032.94 1214.28 L1032.35 1214.28 L1031.77 1214.28 L1031.18 1214.28 L1030.59 1214.28 L1030.01 1214.28 L1029.42 1214.28 L1028.83 1214.28 L1028.25 1214.28 L1027.66 1214.28 L1027.07 1214.28 L1026.49 1214.28 L1025.9 1214.28 L1025.32 1214.28 L1024.73 1214.28 L1024.14 1214.28 L1023.56 1214.28 L1022.97 1214.28 L1022.38 1214.28 L1021.8 1214.28 L1021.21 1214.28 L1020.62 1214.28 L1020.04 1214.28 L1019.45 1214.28 L1018.86 1214.28 L1018.28 1214.28 L1017.69 1214.28 L1017.11 1214.28 L1016.52 1214.28 L1015.93 1214.28 L1015.35 1214.28 L1014.76 1214.28 L1014.17 1214.28 L1013.59 1214.28 L1013 1214.28 L1012.41 1214.28 L1011.83 1214.28 L1011.24 1214.28 L1010.65 1214.28 L1010.07 1214.28 L1009.48 1214.28 L1008.9 1214.28 L1008.31 1214.28 L1007.72 1214.28 L1007.14 1214.28 L1006.55 1214.28 L1005.96 1214.28 L1005.38 1214.28 L1004.79 1214.28 L1004.2 1214.28 L1003.62 1214.28 L1003.03 1214.28 L1002.44 1214.28 L1001.86 1214.28 L1001.27 1214.28 L1000.69 1214.28 L1000.1 1214.28 L999.513 1214.28 L998.926 1214.28 L998.34 1214.28 L997.754 1214.28 L997.167 1214.28 L996.581 1214.28 L995.994 1214.28 L995.408 1214.28 L994.822 1214.28 L994.235 1214.28 L993.649 1214.28 L993.062 1214.28 L992.476 1214.28 L991.889 1214.28 L991.303 1214.28 L990.717 1214.28 L990.13 1214.28 L989.544 1214.28 L988.957 1214.28 L988.371 1214.28 L987.785 1214.28 L987.198 1214.28 L986.612 1214.28 L986.025 1214.28  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.37 986.612,1214.37 987.198,1214.37 987.785,1214.37 988.371,1214.37 988.957,1214.37 989.544,1214.37 990.13,1214.37 990.717,1214.37 991.303,1214.37 991.889,1214.37 992.476,1214.37 993.062,1214.37 993.649,1214.37 994.235,1214.37 994.822,1214.37 995.408,1214.37 995.994,1214.37 996.581,1214.37 997.167,1214.37 997.754,1214.37 998.34,1214.37 998.926,1214.37 999.513,1214.37 1000.1,1214.37 1000.69,1214.37 1001.27,1214.37 1001.86,1214.37 1002.44,1214.37 1003.03,1214.37 1003.62,1214.37 1004.2,1214.37 1004.79,1214.37 1005.38,1214.37 1005.96,1214.37 1006.55,1214.37 1007.14,1214.37 1007.72,1214.37 1008.31,1214.37 1008.9,1214.37 1009.48,1214.37 1010.07,1214.37 1010.65,1214.37 1011.24,1214.37 1011.83,1214.37 1012.41,1214.37 1013,1214.37 1013.59,1214.37 1014.17,1214.37 1014.76,1214.37 1015.35,1214.37 1015.93,1214.37 1016.52,1214.37 1017.11,1214.37 1017.69,1214.37 1018.28,1214.37 1018.86,1214.37 1019.45,1214.37 1020.04,1214.37 1020.62,1214.37 1021.21,1214.37 1021.8,1214.37 1022.38,1214.37 1022.97,1214.37 1023.56,1214.37 1024.14,1214.37 1024.73,1214.37 1025.32,1214.37 1025.9,1214.37 1026.49,1214.37 1027.07,1214.37 1027.66,1214.37 1028.25,1214.37 1028.83,1214.37 1029.42,1214.37 1030.01,1214.37 1030.59,1214.37 1031.18,1214.37 1031.77,1214.37 1032.35,1214.37 1032.94,1214.37 1033.52,1214.37 1034.11,1214.37 1034.7,1214.37 1035.28,1214.37 1035.87,1214.37 1036.46,1214.37 1037.04,1214.37 1037.63,1214.37 1038.22,1214.37 1038.8,1214.37 1039.39,1214.37 1039.98,1214.37 1040.56,1214.37 1041.15,1214.37 1041.73,1214.37 1042.32,1214.37 1042.91,1214.37 1043.49,1214.37 1044.08,1214.37 1044.67,1214.37 1045.25,1214.37 1045.84,1214.37 1046.43,1214.37 1047.01,1214.37 1047.6,1214.37 1048.19,1214.37 1048.77,1214.37 1049.36,1214.37 1049.94,1214.37 1050.53,1214.37 1051.12,1214.37 1051.7,1214.37 1052.29,1214.37 1052.88,1214.37 1053.46,1214.37 1054.05,1214.37 1054.64,1214.37 1055.22,1214.37 1055.81,1214.37 1056.39,1214.37 1056.98,1214.37 1057.57,1214.37 1058.15,1214.37 1058.74,1214.37 1059.33,1214.37 1059.91,1214.37 1060.5,1214.37 1061.09,1214.37 1061.67,1214.37 1062.26,1214.37 1062.85,1214.37 1063.43,1214.37 1064.02,1214.37 1064.6,1214.37 1065.19,1214.37 1065.78,1214.37 1066.36,1214.37 1066.95,1214.37 1067.54,1214.37 1068.12,1214.37 1068.71,1214.37 1069.3,1214.37 1069.88,1214.37 1070.47,1214.37 1071.06,1214.37 1071.64,1214.37 1072.23,1214.37 1072.81,1214.37 1073.4,1214.37 1073.99,1214.37 1074.57,1214.37 1075.16,1214.37 1075.75,1214.37 1076.33,1214.37 1076.92,1214.37 1077.51,1214.37 1078.09,1214.37 1078.68,1214.37 1079.26,1214.37 1079.85,1214.37 1080.44,1214.37 1081.02,1214.37 1081.61,1214.37 1082.2,1214.37 1082.78,1214.37 1083.37,1214.37 1083.96,1214.37 1084.54,1214.37 1085.13,1214.37 1085.72,1214.37 1086.3,1214.37 1086.89,1214.37 1087.47,1214.37 1088.06,1214.37 1088.65,1214.37 1089.23,1214.37 1089.82,1214.37 1090.41,1214.37 1090.99,1214.37 1091.58,1214.37 1092.17,1214.37 1092.75,1214.37 1093.34,1214.37 1093.93,1214.37 1094.51,1214.37 1095.1,1214.37 1095.68,1214.37 1096.27,1214.37 1096.86,1214.37 1097.44,1214.37 1098.03,1214.37 1098.62,1214.37 1099.2,1214.37 1099.79,1214.37 1100.38,1214.37 1100.96,1214.37 1101.55,1214.37 1102.14,1214.37 1102.72,1214.37 1103.31,1214.37 1103.89,1214.37 1104.48,1214.37 1105.07,1214.37 1105.65,1214.37 1106.24,1214.37 1106.83,1214.37 1107.41,1214.37 1108,1214.37 1108.59,1214.37 1109.17,1214.37 1109.76,1214.37 1110.34,1214.37 1110.93,1214.37 1111.52,1214.37 1112.1,1214.37 1112.69,1214.37 1113.28,1214.37 1113.86,1214.37 1114.45,1214.37 1115.04,1214.37 1115.62,1214.37 1116.21,1214.37 1116.8,1214.37 1117.38,1214.37 1117.97,1214.37 1118.55,1214.37 1119.14,1214.37 1119.73,1214.37 1120.31,1214.37 1120.9,1214.37 1121.49,1214.37 1122.07,1214.37 1122.66,1214.37 1123.25,1214.37 1123.83,1214.37 1124.42,1214.37 1125.01,1214.37 1125.59,1214.37 1126.18,1214.37 1126.76,1214.37 1127.35,1214.37 1127.94,1214.37 1128.52,1214.37 1129.11,1214.37 1129.7,1214.37 1130.28,1214.37 1130.87,1214.37 1131.46,1214.37 1132.04,1214.37 1132.63,1214.37 1133.21,1214.37 1133.8,1214.37 1134.39,1214.37 1134.97,1214.37 1135.56,1214.37 1136.15,1214.37 1136.73,1214.37 1137.32,1214.37 1137.91,1214.37 1138.49,1214.37 1139.08,1214.37 1139.67,1214.37 1140.25,1214.37 1140.84,1214.37 1141.42,1214.37 1142.01,1214.37 1142.6,1214.37 1143.18,1214.37 1143.77,1214.37 1144.36,1214.37 1144.94,1214.37 1145.53,1214.37 1146.12,1214.37 1146.7,1214.37 1147.29,1214.37 1147.88,1214.37 1148.46,1214.37 1149.05,1214.37 1149.63,1214.37 1150.22,1214.37 1150.81,1214.37 1151.39,1214.37 1151.98,1214.37 1152.57,1214.37 1153.15,1214.37 1153.74,1214.37 1154.33,1214.37 1154.91,1214.37 1155.5,1214.37 1156.09,1214.37 1156.67,1214.37 1157.26,1214.37 1157.84,1214.37 1158.43,1214.37 1159.02,1214.37 1159.6,1214.37 1160.19,1214.37 1160.78,1214.37 1161.36,1214.37 1161.95,1214.37 1162.54,1214.37 1163.12,1214.37 1163.71,1214.37 1164.29,1214.37 1164.88,1214.37 1165.47,1214.37 1166.05,1214.37 1166.64,1214.37 1167.23,1214.37 1167.81,1214.37 1168.4,1214.37 1168.99,1214.37 1169.57,1214.37 1170.16,1214.37 1170.75,1214.37 1171.33,1214.37 1171.92,1214.37 1172.5,1214.37 1173.09,1214.37 1173.68,1214.37 1174.26,1214.37 1174.85,1214.37 1175.44,1214.37 1176.02,1214.37 1176.61,1214.37 1177.2,1214.37 1177.78,1214.37 1178.37,1214.37 1178.96,1214.37 1179.54,1214.37 1180.13,1214.37 1180.71,1214.37 1181.3,1214.37 1181.89,1214.37 1182.47,1214.37 1183.06,1214.37 1183.65,1214.37 1184.23,1214.37 1184.82,1214.37 1185.41,1214.37 1185.99,1214.37 1186.58,1214.37 1187.16,1214.37 1187.75,1214.37 1188.34,1214.37 1188.92,1214.37 1189.51,1214.37 1190.1,1214.37 1190.68,1214.37 1191.27,1214.37 1191.86,1214.37 1192.44,1214.37 1193.03,1214.37 1193.62,1214.37 1194.2,1214.37 1194.79,1214.37 1195.37,1214.37 1195.96,1214.37 1196.55,1214.37 1197.13,1214.37 1197.72,1214.37 1198.31,1214.37 1198.89,1214.37 1199.48,1214.37 1200.07,1214.37 1200.65,1214.37 1201.24,1214.37 1201.83,1214.37 1202.41,1214.37 1203,1214.37 1203.58,1214.37 1204.17,1214.37 1204.76,1214.37 1205.34,1214.37 1205.93,1214.37 1206.52,1214.37 1207.1,1214.37 1207.69,1214.37 1208.28,1214.37 1208.86,1214.37 1209.45,1214.37 1210.03,1214.37 1210.62,1214.37 1211.21,1214.37 1211.79,1214.37 1212.38,1214.37 1212.97,1214.37 1213.55,1214.37 1214.14,1214.37 1214.73,1214.37 1215.31,1214.37 1215.9,1214.37 1216.49,1214.37 1217.07,1214.37 1217.66,1214.37 1218.24,1214.37 1218.83,1214.37 1219.42,1214.37 1220,1214.37 1220.59,1214.37 1221.18,1214.37 1221.76,1214.37 1222.35,1214.37 1222.94,1214.37 1223.52,1214.37 1224.11,1214.37 1224.7,1214.37 1225.28,1214.37 1225.87,1214.37 1226.45,1214.37 1227.04,1214.37 1227.63,1214.37 1228.21,1214.37 1228.8,1214.37 1229.39,1214.37 1229.97,1214.37 1230.56,1214.37 1231.15,1214.37 1231.73,1214.37 1232.32,1214.37 1232.91,1214.37 1233.49,1214.37 1234.08,1214.37 1234.66,1214.37 1235.25,1214.37 1235.84,1214.37 1236.42,1214.37 1237.01,1214.37 1237.6,1214.37 1238.18,1214.37 1238.77,1214.37 1239.36,1214.37 1239.94,1214.37 1240.53,1214.37 1241.11,1214.37 1241.7,1214.37 1242.29,1214.37 1242.87,1214.37 1243.46,1214.37 1244.05,1214.37 1244.63,1214.37 1245.22,1214.37 1245.81,1214.37 1246.39,1214.37 1246.98,1214.37 1247.57,1214.37 1248.15,1214.37 1248.74,1214.37 1249.32,1214.37 1249.91,1214.37 1250.5,1214.37 1251.08,1214.37 1251.67,1214.37 1252.26,1214.37 1252.84,1214.37 1253.43,1214.37 1254.02,1214.37 1254.6,1214.37 1255.19,1214.37 1255.78,1214.37 1256.36,1214.37 1256.95,1214.37 1257.53,1214.37 1258.12,1214.37 1258.71,1214.37 1259.29,1214.37 1259.88,1214.37 1260.47,1214.37 1261.05,1214.37 1261.64,1214.37 1262.23,1214.37 1262.81,1214.37 1263.4,1214.37 1263.98,1214.37 1264.57,1214.37 1265.16,1214.37 1265.74,1214.37 1266.33,1214.37 1266.92,1214.37 1267.5,1214.37 1268.09,1214.37 1268.68,1214.37 1269.26,1214.37 1269.85,1214.37 1270.44,1214.37 1271.02,1214.37 1271.61,1214.37 1272.19,1214.37 1272.78,1214.37 1273.37,1214.37 1273.95,1214.37 1274.54,1214.37 1275.13,1214.37 1275.71,1214.37 1276.3,1214.37 1276.89,1214.37 1277.47,1214.37 1278.06,1214.37 1278.65,1214.37 1279.23,1214.37 1279.82,1214.37 1280.4,1214.37 1280.99,1214.37 1281.58,1214.37 1282.16,1214.37 1282.75,1214.37 1283.34,1214.37 1283.92,1214.37 1284.51,1214.37 1285.1,1214.37 1285.68,1214.37 1286.27,1214.37 1286.86,1214.37 1287.44,1214.37 1288.03,1214.37 1288.61,1214.37 1289.2,1214.37 1289.79,1214.37 1290.37,1214.37 1290.96,1214.37 1291.55,1214.37 1292.13,1214.37 1292.72,1214.37 1293.31,1214.37 1293.89,1214.37 1294.48,1214.37 1295.06,1214.37 1295.65,1214.37 1296.24,1214.37 1296.82,1214.37 1297.41,1214.37 1298,1214.37 1298.58,1214.37 1299.17,1214.37 1299.76,1214.37 1300.34,1214.37 1300.93,1214.37 1301.52,1214.37 1302.1,1214.37 1302.69,1214.37 1303.27,1214.37 1303.86,1214.37 1304.45,1214.37 1305.03,1214.37 1305.62,1214.37 1306.21,1214.37 1306.79,1214.37 1307.38,1214.37 1307.97,1214.37 1308.55,1214.37 1309.14,1214.37 1309.73,1214.37 1310.31,1214.37 1310.9,1214.37 1311.48,1214.37 1312.07,1214.37 1312.66,1214.37 1313.24,1214.37 1313.83,1214.37 1314.42,1214.37 1315,1214.37 1315.59,1214.37 1316.18,1214.37 1316.76,1214.37 1317.35,1214.37 1317.93,1214.37 1318.52,1214.37 1319.11,1214.37 1319.69,1214.37 1320.28,1214.37 1320.87,1214.37 1321.45,1214.37 1322.04,1214.37 1322.63,1214.37 1323.21,1214.37 1323.8,1214.37 1324.39,1214.37 1324.97,1214.37 1325.56,1214.37 1326.14,1214.37 1326.73,1214.37 1327.32,1214.37 1327.9,1214.37 1328.49,1214.37 1329.08,1214.37 1329.66,1214.37 1330.25,1214.37 1330.84,1214.37 1331.42,1214.37 1332.01,1214.37 1332.6,1214.37 1333.18,1214.37 1333.77,1214.37 1334.35,1214.37 1334.94,1214.37 1335.53,1214.37 1336.11,1214.37 1336.7,1214.37 1337.29,1214.37 1337.87,1214.37 1338.46,1214.37 1339.05,1214.37 1339.63,1214.37 1340.22,1214.37 1340.8,1214.37 1341.39,1214.37 1341.98,1214.37 1342.56,1214.37 1343.15,1214.37 1343.74,1214.37 1344.32,1214.37 1344.91,1214.37 1345.5,1214.37 1346.08,1214.37 1346.67,1214.37 1347.26,1214.37 1347.84,1214.37 1348.43,1214.37 1349.01,1214.37 1349.6,1214.37 1350.19,1214.37 1350.77,1214.37 1351.36,1214.37 1351.95,1214.37 1352.53,1214.37 1353.12,1214.37 1353.71,1214.37 1354.29,1214.37 1354.88,1214.37 1355.47,1214.37 1356.05,1214.37 1356.64,1214.37 1357.22,1214.37 1357.81,1214.37 1358.4,1214.37 1358.98,1214.37 1359.57,1214.37 1360.16,1214.37 1360.74,1214.37 1361.33,1214.37 1361.92,1214.37 1362.5,1214.37 1363.09,1214.37 1363.68,1214.37 1364.26,1214.37 1364.85,1214.37 1365.43,1214.37 1366.02,1214.37 1366.61,1214.37 1367.19,1214.37 1367.78,1214.37 1368.37,1214.37 1368.95,1214.37 1369.54,1214.37 1370.13,1214.37 1370.71,1214.37 1371.3,1214.37 1371.88,1214.37 1372.47,1214.37 1373.06,1214.37 1373.64,1214.37 1374.23,1214.37 1374.82,1214.37 1375.4,1214.37 1375.99,1214.37 1376.58,1214.37 1377.16,1214.37 1377.75,1214.37 1378.34,1214.37 1378.92,1214.37 1379.51,1214.37 1380.09,1214.37 1380.68,1214.37 1381.27,1214.37 1381.85,1214.37 1382.44,1214.37 1383.03,1214.37 1383.61,1214.37 1384.2,1214.37 1384.79,1214.37 1385.37,1214.37 1385.96,1214.37 1386.55,1214.37 1387.13,1214.37 1387.72,1214.37 1388.3,1214.37 1388.89,1214.37 1389.48,1214.37 1390.06,1214.37 1390.65,1214.37 1391.24,1214.37 1391.82,1214.37 1392.41,1214.37 1393,1214.37 1393.58,1214.37 1394.17,1214.37 1394.75,1214.37 1395.34,1214.37 1395.93,1214.37 1396.51,1214.37 1397.1,1214.37 1397.69,1214.37 1398.27,1214.37 1398.86,1214.37 1399.45,1214.37 1400.03,1214.37 1400.62,1214.37 1401.21,1214.37 1401.79,1214.37 1402.38,1214.37 1402.96,1214.37 1403.55,1214.37 1404.14,1214.37 1404.72,1214.37 1405.31,1214.37 1405.9,1214.37 1406.48,1214.37 1407.07,1214.37 1407.66,1214.37 1408.24,1214.37 1408.83,1214.37 1409.42,1214.37 1410,1214.37 1410.59,1214.37 1411.17,1214.37 1411.76,1214.37 1412.35,1214.37 1412.93,1214.37 1413.52,1214.37 1414.11,1214.37 1414.69,1214.37 1415.28,1214.37 1415.87,1214.37 1416.45,1214.37 1417.04,1214.37 1417.63,1214.37 1418.21,1214.37 1418.8,1214.37 1419.38,1214.37 1419.97,1214.37 1420.56,1214.37 1421.14,1214.37 1421.73,1214.37 1422.32,1214.37 1422.9,1214.37 1423.49,1214.37 1424.08,1214.37 1424.66,1214.37 1425.25,1214.37 1425.83,1214.37 1426.42,1214.37 1427.01,1214.37 1427.59,1214.37 1428.18,1214.37 1428.77,1214.37 1429.35,1214.37 1429.94,1214.37 1430.53,1214.37 1431.11,1214.37 1431.7,1214.37 1432.29,1214.37 1432.87,1214.37 1433.46,1214.37 1434.04,1214.37 1434.63,1214.37 1435.22,1214.37 1435.8,1214.37 1436.39,1214.37 1436.98,1214.37 1437.56,1214.37 1438.15,1214.37 1438.74,1214.37 1439.32,1214.37 1439.91,1214.37 1440.5,1214.37 1441.08,1214.37 1441.67,1214.37 1442.25,1214.37 1442.84,1214.37 1443.43,1214.37 1444.01,1214.37 1444.6,1214.37 1445.19,1214.37 1445.77,1214.37 1446.36,1214.37 1446.95,1214.37 1447.53,1214.37 1448.12,1214.37 1448.7,1214.37 1449.29,1214.37 1449.88,1214.37 1450.46,1214.37 1451.05,1214.37 1451.64,1214.37 1452.22,1214.37 1452.81,1214.37 1453.4,1214.37 1453.98,1214.37 1454.57,1214.37 1455.16,1214.37 1455.74,1214.37 1456.33,1214.37 1456.91,1214.37 1457.5,1214.37 1458.09,1214.37 1458.67,1214.37 1459.26,1214.37 1459.85,1214.37 1460.43,1214.37 1461.02,1214.37 1461.61,1214.37 1462.19,1214.37 1462.78,1214.37 1463.37,1214.37 1463.95,1214.37 1464.54,1214.37 1465.12,1214.37 1465.71,1214.37 1466.3,1214.37 1466.88,1214.37 1467.47,1214.37 1468.06,1214.37 1468.64,1214.37 1469.23,1214.37 1469.82,1214.37 1470.4,1214.37 1470.99,1214.37 1471.57,1214.37 1472.16,1214.37 1472.75,1214.37 1473.33,1214.37 1473.92,1214.37 1474.51,1214.37 1475.09,1214.37 1475.68,1214.37 1476.27,1214.37 1476.85,1214.37 1477.44,1214.37 1478.03,1214.37 1478.61,1214.37 1479.2,1214.37 1479.78,1214.37 1480.37,1214.37 1480.96,1214.37 1481.54,1214.37 1482.13,1214.37 1482.72,1214.37 1483.3,1214.37 1483.89,1214.37 1484.48,1214.37 1485.06,1214.37 1485.65,1214.37 1486.24,1214.37 1486.82,1214.37 1487.41,1214.37 1487.99,1214.37 1488.58,1214.37 1489.17,1214.37 1489.75,1214.37 1490.34,1214.37 1490.93,1214.37 1491.51,1214.37 1492.1,1214.37 1492.69,1214.37 1493.27,1214.37 1493.86,1214.37 1494.45,1214.37 1495.03,1214.37 1495.62,1214.37 1496.2,1214.37 1496.79,1214.37 1497.38,1214.37 1497.96,1214.37 1498.55,1214.37 1499.14,1214.37 1499.72,1214.37 1500.31,1214.37 1500.9,1214.37 1501.48,1214.37 1502.07,1214.37 1502.65,1214.37 1503.24,1214.37 1503.83,1214.37 1504.41,1214.37 1505,1214.37 1505.59,1214.37 1506.17,1214.37 1506.76,1214.37 1507.35,1214.37 1507.93,1214.37 1508.52,1214.37 1509.11,1214.37 1509.69,1214.37 1510.28,1214.37 1510.86,1214.37 1511.45,1214.37 1512.04,1214.37 1512.62,1214.37 1513.21,1214.37 1513.8,1214.37 1514.38,1214.37 1514.97,1214.37 1515.56,1214.37 1516.14,1214.37 1516.73,1214.37 1517.32,1214.37 1517.9,1214.37 1518.49,1214.37 1519.07,1214.37 1519.66,1214.37 1520.25,1214.37 1520.83,1214.37 1521.42,1214.37 1522.01,1214.37 1522.59,1214.37 1523.18,1214.37 1523.77,1214.37 1524.35,1214.37 1524.94,1214.37 1525.52,1214.37 1526.11,1214.37 1526.7,1214.37 1527.28,1214.37 1527.87,1214.37 1528.46,1214.37 1529.04,1214.37 1529.63,1214.37 1530.22,1214.37 1530.8,1214.37 1531.39,1214.37 1531.98,1214.37 1532.56,1214.37 1533.15,1214.37 1533.73,1214.37 1534.32,1214.37 1534.91,1214.37 1535.49,1214.37 1536.08,1214.37 1536.67,1214.37 1537.25,1214.37 1537.84,1214.37 1538.43,1214.37 1539.01,1214.37 1539.6,1214.37 1540.19,1214.37 1540.77,1214.37 1541.36,1214.37 1541.94,1214.37 1542.53,1214.37 1543.12,1214.37 1543.7,1214.37 1544.29,1214.37 1544.88,1214.37 1545.46,1214.37 1546.05,1214.37 1546.64,1214.37 1547.22,1214.37 1547.81,1214.37 1548.4,1214.37 1548.98,1214.37 1549.57,1214.37 1550.15,1214.37 1550.74,1214.37 1551.33,1214.37 1551.91,1214.37 1552.5,1214.37 1553.09,1214.37 1553.67,1214.37 1554.26,1214.37 1554.85,1214.37 1555.43,1214.37 1556.02,1214.37 1556.6,1214.37 1557.19,1214.37 1557.78,1214.37 1558.36,1214.37 1558.95,1214.37 1559.54,1214.37 1560.12,1214.37 1560.71,1214.37 1561.3,1214.37 1561.88,1214.37 1562.47,1214.37 1563.06,1214.37 1563.64,1214.37 1564.23,1214.37 1564.81,1214.37 1565.4,1214.37 1565.99,1214.37 1566.57,1214.37 1567.16,1214.37 1567.75,1214.37 1568.33,1214.37 1568.92,1214.37 1569.51,1214.37 1570.09,1214.37 1570.68,1214.37 1571.27,1214.37 1571.85,1214.37 1572.44,1214.37 1573.02,1214.37 1573.61,1214.37 1574.2,1214.37 1574.78,1214.37 1575.37,1214.37 1575.96,1214.37 1576.54,1214.37 1577.13,1214.37 1577.72,1214.37 1578.3,1214.37 1578.89,1214.37 1579.47,1214.37 1580.06,1214.37 1580.65,1214.37 1581.23,1214.37 1581.82,1214.37 1582.41,1214.37 1582.99,1214.37 1583.58,1214.37 1584.17,1214.37 1584.75,1214.37 1585.34,1214.37 1585.93,1214.37 1586.51,1214.37 1587.1,1214.37 1587.68,1214.37 1588.27,1214.37 1588.86,1214.37 1589.44,1214.37 1590.03,1214.37 1590.62,1214.37 1591.2,1214.37 1591.79,1214.37 1592.38,1214.37 1592.96,1214.37 1593.55,1214.37 1594.14,1214.37 1594.72,1214.37 1595.31,1214.37 1595.89,1214.37 1596.48,1214.37 1597.07,1214.37 1597.65,1214.37 1598.24,1214.37 1598.83,1214.37 1599.41,1214.37 1600,1214.37 1600.59,1214.37 1601.17,1214.37 1601.76,1214.37 1602.34,1214.37 1602.93,1214.37 1603.52,1214.37 1604.1,1214.37 1604.69,1214.37 1605.28,1214.37 1605.86,1214.37 1606.45,1214.37 1607.04,1214.37 1607.62,1214.37 1608.21,1214.37 1608.8,1214.37 1609.38,1214.37 1609.97,1214.37 1610.55,1214.37 1611.14,1214.37 1611.73,1214.37 1612.31,1214.37 1612.9,1214.37 1613.49,1214.37 1614.07,1214.37 1614.66,1214.37 1615.25,1214.37 1615.83,1214.37 1616.42,1214.37 1617.01,1214.37 1617.59,1214.37 1618.18,1214.37 1618.76,1214.37 1619.35,1214.37 1619.94,1214.37 1620.52,1214.37 1621.11,1214.37 1621.7,1214.37 1622.28,1214.37 1622.87,1214.37 1623.46,1214.37 1624.04,1214.37 1624.63,1214.37 1625.22,1214.37 1625.8,1214.37 1626.39,1214.37 1626.97,1214.37 1627.56,1214.37 1628.15,1214.37 1628.73,1214.37 1629.32,1214.37 1629.91,1214.37 1630.49,1214.37 1631.08,1214.37 1631.67,1214.37 1632.25,1214.37 1632.84,1214.37 1633.42,1214.37 1634.01,1214.37 1634.6,1214.37 1635.18,1214.37 1635.77,1214.37 1636.36,1214.37 1636.94,1214.37 1637.53,1214.37 1638.12,1214.37 1638.7,1214.37 1639.29,1214.37 1639.88,1214.37 1640.46,1214.37 1641.05,1214.37 1641.63,1214.37 1642.22,1214.37 1642.81,1214.37 1643.39,1214.37 1643.98,1214.37 1644.57,1214.37 1645.15,1214.37 1645.74,1214.37 1646.33,1214.37 1646.91,1214.37 1647.5,1214.37 1648.09,1214.37 1648.67,1214.37 1649.26,1214.37 1649.84,1214.37 1650.43,1214.37 1651.02,1214.37 1651.6,1214.37 1652.19,1214.37 1652.78,1214.37 1653.36,1214.37 1653.95,1214.37 1654.54,1214.37 1655.12,1214.37 1655.71,1214.37 1656.29,1214.37 1656.88,1214.37 1657.47,1214.37 1658.05,1214.37 1658.64,1214.37 1659.23,1214.37 1659.81,1214.37 1660.4,1214.37 1660.99,1214.37 1661.57,1214.37 1662.16,1214.37 1662.75,1214.37 1663.33,1214.37 1663.92,1214.37 1664.5,1214.37 1665.09,1214.37 1665.68,1214.37 1666.26,1214.37 1666.85,1214.37 1667.44,1214.37 1668.02,1214.37 1668.61,1214.37 1669.2,1214.37 1669.78,1214.37 1670.37,1214.37 1670.96,1214.37 1671.54,1214.37 1672.13,1214.37 1672.71,1214.37 1673.3,1214.37 1673.89,1214.37 1674.47,1214.37 1675.06,1214.37 1675.65,1214.37 1676.23,1214.37 1676.82,1214.37 1677.41,1214.37 1677.99,1214.37 1678.58,1214.37 1679.17,1214.37 1679.75,1214.37 1680.34,1214.37 1680.92,1214.37 1681.51,1214.37 1682.1,1214.37 1682.68,1214.37 1683.27,1214.37 1683.86,1214.37 1684.44,1214.37 1685.03,1214.37 1685.62,1214.37 1686.2,1214.37 1686.79,1214.37 1687.37,1214.37 1687.96,1214.37 1688.55,1214.37 1689.13,1214.37 1689.72,1214.37 1690.31,1214.37 1690.89,1214.37 1691.48,1214.37 1692.07,1214.37 1692.65,1214.37 1693.24,1214.37 1693.83,1214.37 1694.41,1214.37 1695,1214.37 1695.58,1214.37 1696.17,1214.37 1696.76,1214.37 1697.34,1214.37 1697.93,1214.37 1698.52,1214.37 1699.1,1214.37 1699.69,1214.37 1700.28,1214.37 1700.86,1214.37 1701.45,1214.37 1702.04,1214.37 1702.62,1214.37 1703.21,1214.37 1703.79,1214.37 1704.38,1214.37 1704.97,1214.37 1705.55,1214.37 1706.14,1214.37 1706.73,1214.37 1707.31,1214.37 1707.9,1214.37 1708.49,1214.37 1709.07,1214.37 1709.66,1214.37 1710.24,1214.37 1710.83,1214.37 1711.42,1214.37 1712,1214.37 1712.59,1214.37 1713.18,1214.37 1713.76,1214.37 1714.35,1214.37 1714.94,1214.37 1715.52,1214.37 1716.11,1214.37 1716.7,1214.37 1717.28,1214.37 1717.87,1214.37 1718.45,1214.37 1719.04,1214.37 1719.63,1214.37 1720.21,1214.37 1720.8,1214.37 1721.39,1214.37 1721.97,1214.37 1722.56,1214.37 1723.15,1214.37 1723.73,1214.37 1724.32,1214.37 1724.91,1214.37 1725.49,1214.37 1726.08,1214.37 1726.66,1214.37 1727.25,1214.37 1727.84,1214.37 1728.42,1214.37 1729.01,1214.37 1729.6,1214.37 1730.18,1214.37 1730.77,1214.37 1731.36,1214.37 1731.94,1214.37 1732.53,1214.37 1733.11,1214.37 1733.7,1214.37 1734.29,1214.37 1734.87,1214.37 1735.46,1214.37 1736.05,1214.37 1736.63,1214.37 1737.22,1214.37 1737.81,1214.37 1738.39,1214.37 1738.98,1214.37 1739.57,1214.37 1740.15,1214.37 1740.74,1214.37 1741.32,1214.37 1741.91,1214.37 1742.5,1214.37 1743.08,1214.37 1743.67,1214.37 1744.26,1214.37 1744.84,1214.37 1745.43,1214.37 1746.02,1214.37 1746.6,1214.37 1747.19,1214.37 1747.78,1214.37 1748.36,1214.37 1748.95,1214.37 1749.53,1214.37 1750.12,1214.37 1750.71,1214.37 1751.29,1214.37 1751.88,1214.37 1752.47,1214.37 1753.05,1214.37 1753.64,1214.37 1754.23,1214.37 1754.81,1214.37 1755.4,1214.37 1755.99,1214.37 1756.57,1214.37 1757.16,1214.37 1757.74,1214.37 1758.33,1214.37 1758.92,1214.37 1759.5,1214.37 1760.09,1214.37 1760.68,1214.37 1761.26,1214.37 1761.85,1214.37 1762.44,1214.37 1763.02,1214.37 1763.61,1214.37 1764.19,1214.37 1764.78,1214.37 1765.37,1214.37 1765.95,1214.37 1766.54,1214.37 1767.13,1214.37 1767.71,1214.37 1768.3,1214.37 1768.89,1214.37 1769.47,1214.37 1770.06,1214.37 1770.65,1214.37 1771.23,1214.37 1771.82,1214.37 1772.4,1214.37 1772.99,1214.37 1773.58,1214.37 1774.16,1214.37 1774.75,1214.37 1775.34,1214.37 1775.92,1214.37 1776.51,1214.37 1777.1,1214.37 1777.68,1214.37 1778.27,1214.37 1778.86,1214.37 1779.44,1214.37 1780.03,1214.37 1780.61,1214.37 1781.2,1214.37 1781.79,1214.37 1782.37,1214.37 1782.96,1214.37 1783.55,1214.37 1784.13,1214.37 1784.72,1214.37 1785.31,1214.37 1785.89,1214.37 1786.48,1214.37 1787.06,1214.37 1787.65,1214.37 1788.24,1214.37 1788.82,1214.37 1789.41,1214.37 1790,1214.37 1790.58,1214.37 1791.17,1214.37 1791.76,1214.37 1792.34,1214.37 1792.93,1214.37 1793.52,1214.37 1794.1,1214.37 1794.69,1214.37 1795.27,1214.37 1795.86,1214.37 1796.45,1214.37 1797.03,1214.37 1797.62,1214.37 1798.21,1214.37 1798.79,1214.37 1799.38,1214.37 1799.97,1214.37 1800.55,1214.37 1801.14,1214.37 1801.73,1214.37 1802.31,1214.37 1802.9,1214.37 1803.48,1214.37 1804.07,1214.37 1804.66,1214.37 1805.24,1214.37 1805.83,1214.37 1806.42,1214.37 1807,1214.37 1807.59,1214.37 1808.18,1214.37 1808.76,1214.37 1809.35,1214.37 1809.94,1214.37 1810.52,1214.37 1811.11,1214.37 1811.69,1214.37 1812.28,1214.37 1812.87,1214.37 1813.45,1214.37 1814.04,1214.37 1814.63,1214.37 1815.21,1214.37 1815.8,1214.37 1816.39,1214.37 1816.97,1214.37 1817.56,1214.37 1818.14,1214.37 1818.73,1214.37 1819.32,1214.37 1819.9,1214.37 1820.49,1214.37 1821.08,1214.37 1821.66,1214.37 1822.25,1214.37 1822.84,1214.37 1823.42,1214.37 1824.01,1214.37 1824.6,1214.37 1825.18,1214.37 1825.77,1214.37 1826.35,1214.37 1826.94,1214.37 1827.53,1214.37 1828.11,1214.37 1828.7,1214.37 1829.29,1214.37 1829.87,1214.37 1830.46,1214.37 1831.05,1214.37 1831.63,1214.37 1832.22,1214.37 1832.81,1214.37 1833.39,1214.37 1833.98,1214.37 1834.56,1214.37 1835.15,1214.37 1835.74,1214.37 1836.32,1214.37 1836.91,1214.37 1837.5,1214.37 1838.08,1214.37 1838.67,1214.37 1839.26,1214.37 1839.84,1214.37 1840.43,1214.37 1841.01,1214.37 1841.6,1214.37 1842.19,1214.37 1842.77,1214.37 1843.36,1214.37 1843.95,1214.37 1844.53,1214.37 1845.12,1214.37 1845.71,1214.37 1846.29,1214.37 1846.88,1214.37 1847.47,1214.37 1848.05,1214.37 1848.64,1214.37 1849.22,1214.37 1849.81,1214.37 1850.4,1214.37 1850.98,1214.37 1851.57,1214.37 1852.16,1214.37 1852.74,1214.37 1853.33,1214.37 1853.92,1214.37 1854.5,1214.37 1855.09,1214.37 1855.68,1214.37 1856.26,1214.37 1856.85,1214.37 1857.43,1214.37 1858.02,1214.37 1858.61,1214.37 1859.19,1214.37 1859.78,1214.37 1860.37,1214.37 1860.95,1214.37 1861.54,1214.37 1862.13,1214.37 1862.71,1214.37 1863.3,1214.37 1863.88,1214.37 1864.47,1214.37 1865.06,1214.37 1865.64,1214.37 1866.23,1214.37 1866.82,1214.37 1867.4,1214.37 1867.99,1214.37 1868.58,1214.37 1869.16,1214.37 1869.75,1214.37 1870.34,1214.37 1870.92,1214.37 1871.51,1214.37 1872.09,1214.37 1872.68,1214.37 1873.27,1214.37 1873.85,1214.37 1874.44,1214.37 1875.03,1214.37 1875.61,1214.37 1876.2,1214.37 1876.79,1214.37 1877.37,1214.37 1877.96,1214.37 1878.55,1214.37 1879.13,1214.37 1879.72,1214.37 1880.3,1214.37 1880.89,1214.37 1881.48,1214.37 1882.06,1214.37 1882.65,1214.37 1883.24,1214.37 1883.82,1214.37 1884.41,1214.37 1885,1214.37 1885.58,1214.37 1886.17,1214.37 1886.76,1214.37 1887.34,1214.37 1887.93,1214.37 1888.51,1214.37 1889.1,1214.37 1889.69,1214.37 1890.27,1214.37 1890.86,1214.37 1891.45,1214.37 1892.03,1214.37 1892.62,1214.37 1893.21,1214.37 1893.79,1214.37 1894.38,1214.37 1894.96,1214.37 1895.55,1214.37 1896.14,1214.37 1896.72,1214.37 1897.31,1214.37 1897.9,1214.37 1898.48,1214.37 1899.07,1214.37 1899.66,1214.37 1900.24,1214.37 1900.83,1214.37 1901.42,1214.37 1902,1214.37 1902.59,1214.37 1903.17,1214.37 1903.76,1214.37 1904.35,1214.37 1904.93,1214.37 1905.52,1214.37 1906.11,1214.37 1906.69,1214.37 1907.28,1214.37 1907.87,1214.37 1908.45,1214.37 1909.04,1214.37 1909.63,1214.37 1910.21,1214.37 1910.8,1214.37 1911.38,1214.37 1911.97,1214.37 1912.56,1214.37 1913.14,1214.37 1913.73,1214.37 1914.32,1214.37 1914.9,1214.37 1915.49,1214.37 1916.08,1214.37 1916.66,1214.37 1917.25,1214.37 1917.83,1214.37 1918.42,1214.37 1919.01,1214.37 1919.59,1214.37 1920.18,1214.37 1920.77,1214.37 1921.35,1214.37 1921.94,1214.37 1922.53,1214.37 1923.11,1214.37 1923.7,1214.37 1924.29,1214.37 1924.87,1214.37 1925.46,1214.37 1926.04,1214.37 1926.63,1214.37 1927.22,1214.37 1927.8,1214.37 1928.39,1214.37 1928.98,1214.37 1929.56,1214.37 1930.15,1214.37 1930.74,1214.37 1931.32,1214.37 1931.91,1214.37 1932.5,1214.37 1933.08,1214.37 1933.67,1214.37 1934.25,1214.37 1934.84,1214.37 1935.43,1214.37 1936.01,1214.37 1936.6,1214.37 1937.19,1214.37 1937.77,1214.37 1938.36,1214.37 1938.95,1214.37 1939.53,1214.37 1940.12,1214.37 1940.71,1214.37 1941.29,1214.37 1941.88,1214.37 1942.46,1214.37 1943.05,1214.37 1943.64,1214.37 1944.22,1214.37 1944.81,1214.37 1945.4,1214.37 1945.98,1214.37 1946.57,1214.37 1947.16,1214.37 1947.74,1214.37 1948.33,1214.37 1948.91,1214.37 1949.5,1214.37 1950.09,1214.37 1950.67,1214.37 1951.26,1214.37 1951.85,1214.37 1952.43,1214.37 1953.02,1214.37 1953.61,1214.37 1954.19,1214.37 1954.78,1214.37 1955.37,1214.37 1955.95,1214.37 1956.54,1214.37 1957.12,1214.37 1957.71,1214.37 1958.3,1214.37 1958.88,1214.37 1959.47,1214.37 1960.06,1214.37 1960.64,1214.37 1961.23,1214.37 1961.82,1214.37 1962.4,1214.37 1962.99,1214.37 1963.58,1214.37 1964.16,1214.37 1964.75,1214.37 1965.33,1214.37 1965.92,1214.37 1966.51,1214.37 1967.09,1214.37 1967.68,1214.37 1968.27,1214.37 1968.85,1214.37 1969.44,1214.37 1970.03,1214.37 1970.61,1214.37 1971.2,1214.37 1971.78,1214.37 1972.37,1214.37 1972.96,1214.37 1973.54,1214.37 1974.13,1214.37 1974.72,1214.37 1975.3,1214.37 1975.89,1214.37 1976.48,1214.37 1977.06,1214.37 1977.65,1214.37 1978.24,1214.37 1978.82,1214.37 1979.41,1214.37 1979.99,1214.37 1980.58,1214.37 1981.17,1214.37 1981.75,1214.37 1982.34,1214.37 1982.93,1214.37 1983.51,1214.37 1984.1,1214.37 1984.69,1214.37 1985.27,1214.37 1985.86,1214.37 1986.45,1214.37 1987.03,1214.37 1987.62,1214.37 1988.2,1214.37 1988.79,1214.37 1989.38,1214.37 1989.96,1214.37 1990.55,1214.37 1991.14,1214.37 1991.72,1214.37 1992.31,1214.37 1992.9,1214.37 1993.48,1214.37 1994.07,1214.37 1994.65,1214.37 1995.24,1214.37 1995.83,1214.37 1996.41,1214.37 1997,1214.37 1997.59,1214.37 1998.17,1214.37 1998.76,1214.37 1999.35,1214.37 1999.93,1214.37 2000.52,1214.37 2001.11,1214.37 2001.69,1214.37 2002.28,1214.37 2002.86,1214.37 2003.45,1214.37 2004.04,1214.37 2004.62,1214.37 2005.21,1214.37 2005.8,1214.37 2006.38,1214.37 2006.97,1214.37 2007.56,1214.37 2008.14,1214.37 2008.73,1214.37 2009.32,1214.37 2009.9,1214.37 2010.49,1214.37 2011.07,1214.37 2011.66,1214.37 2012.25,1214.37 2012.83,1214.37 2013.42,1214.37 2014.01,1214.37 2014.59,1214.37 2015.18,1214.37 2015.77,1214.37 2016.35,1214.37 2016.94,1214.37 2017.53,1214.37 2018.11,1214.37 2018.7,1214.37 2019.28,1214.37 2019.87,1214.37 2020.46,1214.37 2021.04,1214.37 2021.63,1214.37 2022.22,1214.37 2022.8,1214.37 2023.39,1214.37 2023.98,1214.37 2024.56,1214.37 2025.15,1214.37 2025.73,1214.37 2026.32,1214.37 2026.91,1214.37 2027.49,1214.37 2028.08,1214.37 2028.67,1214.37 2029.25,1214.37 2029.84,1214.37 2030.43,1214.37 2031.01,1214.37 2031.6,1214.37 2032.19,1214.37 2032.77,1214.37 2033.36,1214.37 2033.94,1214.37 2034.53,1214.37 2035.12,1214.37 2035.7,1214.37 2036.29,1214.37 2036.88,1214.37 2037.46,1214.37 2038.05,1214.37 2038.64,1214.37 2039.22,1214.37 2039.81,1214.37 2040.4,1214.37 2040.98,1214.37 2041.57,1214.37 2042.15,1214.37 2042.74,1214.37 2043.33,1214.37 2043.91,1214.37 2044.5,1214.37 2045.09,1214.37 2045.67,1214.37 2046.26,1214.37 2046.85,1214.37 2047.43,1214.37 2048.02,1214.37 2048.6,1214.37 2049.19,1214.37 2049.78,1214.37 2050.36,1214.37 2050.95,1214.37 2051.54,1214.37 2052.12,1214.37 2052.71,1214.37 2053.3,1214.37 2053.88,1214.37 2054.47,1214.37 2055.06,1214.37 2055.64,1214.37 2056.23,1214.37 2056.81,1214.37 2057.4,1214.37 2057.99,1214.37 2058.57,1214.37 2059.16,1214.37 2059.75,1214.37 2060.33,1214.37 2060.92,1214.37 2061.51,1214.37 2062.09,1214.37 2062.68,1214.37 2063.27,1214.37 2063.85,1214.37 2064.44,1214.37 2065.02,1214.37 2065.61,1214.37 2066.2,1214.37 2066.78,1214.37 2067.37,1214.37 2067.96,1214.37 2068.54,1214.37 2069.13,1214.37 2069.72,1214.37 2070.3,1214.37 2070.89,1214.37 2071.48,1214.37 2072.06,1214.37 2072.65,1214.37 2073.23,1214.37 2073.82,1214.37 2074.41,1214.37 2074.99,1214.37 2075.58,1214.37 2076.17,1214.37 2076.75,1214.37 2077.34,1214.37 2077.93,1214.37 2078.51,1214.37 2079.1,1214.37 2079.68,1214.37 2080.27,1214.37 2080.86,1214.37 2081.44,1214.37 2082.03,1214.37 2082.62,1214.37 2083.2,1214.37 2083.79,1214.37 2084.38,1214.37 2084.96,1214.37 2085.55,1214.37 2086.14,1214.37 2086.72,1214.37 2087.31,1214.37 2087.89,1214.37 2088.48,1214.37 2089.07,1214.37 2089.65,1214.37 2090.24,1214.37 2090.83,1214.37 2091.41,1214.37 2092,1214.37 2092.59,1214.37 2093.17,1214.37 2093.76,1214.37 2094.35,1214.37 2094.93,1214.37 2095.52,1214.37 2096.1,1214.37 2096.69,1214.37 2097.28,1214.37 2097.86,1214.37 2098.45,1214.37 2099.04,1214.37 2099.62,1214.37 2100.21,1214.37 2100.8,1214.37 2101.38,1214.37 2101.97,1214.37 2102.55,1214.37 2103.14,1214.37 2103.73,1214.37 2104.31,1214.37 2104.9,1214.37 2105.49,1214.37 2106.07,1214.37 2106.66,1214.37 2107.25,1214.37 2107.83,1214.37 2108.42,1214.37 2109.01,1214.37 2109.59,1214.37 2110.18,1214.37 2110.76,1214.37 2111.35,1214.37 2111.94,1214.37 2112.52,1214.37 2113.11,1214.37 2113.7,1214.37 2114.28,1214.37 2114.87,1214.37 2115.46,1214.37 2116.04,1214.37 2116.63,1214.37 2117.22,1214.37 2117.8,1214.37 2118.39,1214.37 2118.97,1214.37 2119.56,1214.37 2120.15,1214.37 2120.73,1214.37 2121.32,1214.37 2121.91,1214.37 2122.49,1214.37 2123.08,1214.37 2123.67,1214.37 2124.25,1214.37 2124.84,1214.37 2125.42,1214.37 2126.01,1214.37 2126.6,1214.37 2127.18,1214.37 2127.77,1214.37 2128.36,1214.37 2128.94,1214.37 2129.53,1214.37 2130.12,1214.37 2130.7,1214.37 2131.29,1214.37 2131.88,1214.37 2132.46,1214.37 2133.05,1214.37 2133.63,1214.37 2134.22,1214.37 2134.81,1214.37 2135.39,1214.37 2135.98,1214.37 2136.57,1214.37 2137.15,1214.37 2137.74,1214.37 2138.33,1214.37 2138.91,1214.37 2139.5,1214.37 2140.09,1214.37 2140.67,1214.37 2141.26,1214.37 2141.84,1214.37 2142.43,1214.37 2143.02,1214.37 2143.6,1214.37 2144.19,1214.37 2144.78,1214.37 2145.36,1214.37 2145.95,1214.37 2146.54,1214.37 2147.12,1214.37 2147.71,1214.37 2148.3,1214.37 2148.88,1214.37 2149.47,1214.37 2150.05,1214.37 2150.64,1214.37 2151.23,1214.37 2151.81,1214.37 2152.4,1214.37 2152.99,1214.37 2153.57,1214.37 2154.16,1214.37 2154.75,1214.37 2155.33,1214.37 2155.92,1214.37 2156.5,1214.37 2157.09,1214.37 2157.68,1214.37 2158.26,1214.37 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.92,1195.96 1398.91,899.083 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1232.12 985.439,1195.96 2158.26,1195.96 2158.26,1232.12 985.439,1232.12 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip340)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip340)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip343\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip343)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip343)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip343)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip343)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip343)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip343)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip343)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip343)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip343)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip343)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip343)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-10821.4 167.147,-11334.6 167.706,-9790.5 168.266,-10282.5 168.825,-10720.9 169.384,-11109.1 169.943,-9992.49 170.503,-10349.6 171.062,-10663 171.621,-10935.7 172.18,-11170.3 172.74,-10847.6 173.299,-11021.8 173.858,-10271.6 174.417,-10442.1 174.977,-10179.2 175.536,-10304.3 176.095,-10066.7 176.655,-10166.2 177.214,-9939.27 177.773,-9993.82 178.332,-10025.4 178.892,-9784.17 179.451,-9783.36 180.01,-9329.88 180.569,-9320.36 181.129,-9283.91 181.688,-9240.17 182.247,-8837.75 182.806,-8774.47 183.366,-8708.76 183.925,-8485.26 184.484,-8134.79 185.043,-8067.89 185.603,-7868.06 186.162,-7784.99 186.721,-7703.64 187.28,-7506.24 187.84,-7408.43 188.399,-7107.81 188.958,-7008.03 189.517,-6801.83 190.077,-6705.38 190.636,-6604.21 191.195,-6419.98 191.754,-6305.55 192.314,-6189.54 192.873,-6075.34 193.432,-5688.95 193.991,-5523.83 194.551,-5115.01 195.11,-4960.25 195.669,-4765.03 196.228,-4466.64 196.788,-4233.01 197.347,-4011.6 197.906,-3750.9 198.465,-3648.51 199.025,-3592.93 199.584,-3443.29 200.143,-3298.97 200.702,-3201.4 201.262,-3067 201.821,-2968.68 202.38,-2874.35 202.939,-2711.53 203.499,-2622.79 204.058,-2534.01 204.617,-2477.94 205.176,-2325.66 205.736,-2277.99 206.295,-2199.44 206.854,-2087.93 207.413,-2008.65 207.973,-1868.3 208.532,-1766.88 209.091,-1698.84 209.65,-1597.03 210.21,-1496.97 210.769,-1430.83 211.328,-1334.72 211.887,-1272.39 212.447,-1208.68 213.006,-1178.05 213.565,-1087.37 214.124,-1027.42 214.684,-968.088 215.243,-912.739 215.802,-859.187 216.361,-805.792 216.921,-778.602 217.48,-676.439 218.039,-577.863 218.598,-553.348 219.158,-476.607 219.717,-431.566 220.276,-364.008 220.835,-273.736 221.395,-279.249 221.954,-236.086 222.513,-193.816 223.072,-196.194 223.632,-112.641 224.191,-74.4738 224.75,3.87523 225.309,56.3689 225.869,113.066 226.428,164.199 226.987,238.295 227.546,308.051 228.106,313.338 228.665,259.025 229.224,290.918 229.783,300.216 230.343,328.043 230.902,399.332 231.461,426.728 232.02,409.021 232.58,414.744 233.139,443.351 233.698,452.346 234.257,460.28 234.817,527.585 235.376,536.685 235.935,561.038 236.494,602.926 237.054,623.622 237.613,699.928 238.172,700.929 238.731,775.236 239.291,809.677 239.85,825.325 240.409,820.238 240.968,834.348 241.528,791.582 242.087,807.429 242.646,841.522 243.205,821.135 243.765,837.749 244.324,854.055 244.883,848.395 245.442,862.689 246.002,864.305 246.561,843.786 247.12,839.875 247.679,800.823 248.239,803.625 248.798,822.818 249.357,824.454 249.916,824.35 250.476,878.481 251.035,913.698 251.594,911.053 252.153,923.441 252.713,921.005 253.272,918.047 253.831,931.394 254.39,948.737 254.95,945.811 255.509,941.256 256.068,937.479 256.627,967.875 257.187,960.387 257.746,957.541 258.305,938.24 258.864,972.283 259.424,967.532 259.983,930.43 260.542,959.351 261.101,970.728 261.661,969.701 262.22,983.182 262.779,1046.66 263.338,1039.64 263.898,1029.28 264.457,1042.4 265.016,1035.92 265.575,1013.29 266.135,1040.11 266.694,1016.84 267.253,1041.8 267.812,1036.99 268.372,1065.32 268.931,1057.58 269.49,1049.88 270.049,1039.14 270.609,1049.55 271.168,1044.86 271.727,1038.41 272.286,1032.57 272.846,1027.48 273.405,1037.91 273.964,1065.32 274.523,1090.57 275.083,1113.54 275.642,1121.61 276.201,1096.35 276.76,1072.71 277.32,1063.47 277.879,1055.41 278.438,1048.96 278.997,1044.15 279.557,1021.07 280.116,984.851 280.675,998.604 281.234,978.542 281.794,993.205 282.353,957.351 282.912,942.181 283.471,926.215 284.031,926.585 284.59,908.179 285.149,908.85 285.708,856.619 286.268,894.48 286.827,897.599 287.386,947.683 287.945,982.286 288.505,982.353 289.064,1010.61 289.623,1005.09 290.182,1014.99 290.742,992.643 291.301,993.736 291.86,991.842 292.419,988.467 292.979,1019.61 293.538,1031.62 294.097,1055.79 294.656,1047.62 295.216,1026.72 295.775,1022.26 296.334,1016.55 296.893,1012.54 297.453,992.039 298.012,1003.49 298.571,998.516 299.13,1012.07 299.69,1039.53 300.249,1034.13 300.808,1014.36 301.368,1005.54 301.927,999.465 302.486,1013.84 303.045,989.672 303.605,1003.63 304.164,1016.73 304.723,1012.7 305.282,1009.7 305.842,1001.65 306.401,978.145 306.96,991.192 307.519,969.003 308.079,967.852 308.638,980.318 309.197,977.96 309.756,1005.38 310.316,985.046 310.875,998.766 311.434,991.723 311.993,956.349 312.553,933.281 313.112,932.109 313.671,911.312 314.23,926.899 314.79,924.811 315.349,926.096 315.908,923.217 316.467,924.084 317.027,925.59 317.586,924.516 318.145,925.241 318.704,924.437 319.264,919.604 319.823,932.973 320.382,914.188 320.941,896.662 321.501,911.451 322.06,941.56 322.619,923.084 323.178,970.189 323.738,963.842 324.297,946.774 324.856,945.033 325.415,958.381 325.975,949.787 326.534,944.329 327.093,938.098 327.652,935.541 328.212,947.493 328.771,941.013 329.33,922.309 329.889,904.219 330.449,935.841 331.008,946.069 331.567,943.367 332.126,940.651 332.686,968.376 333.245,944.194 333.804,955.004 334.363,932.945 334.923,992.217 335.482,1000.93 336.041,959.051 336.6,956.139 337.16,998.576 337.719,990.897 338.278,998.463 338.837,993.022 339.397,982.938 339.956,972.305 340.515,965.635 341.074,972.933 341.634,982.097 342.193,1022.73 342.752,962.661 343.311,924.247 343.871,901.742 344.43,898.942 344.989,893.274 345.548,907.165 346.108,903.716 346.667,901.495 347.226,932.428 347.785,960.903 348.345,952.423 348.904,965.298 349.463,942.388 350.022,936.969 350.582,945.479 351.141,975.131 351.7,963.444 352.259,955.958 352.819,979.395 353.378,971.785 353.937,915.526 354.496,895.905 355.056,912.203 355.615,908.784 356.174,919.288 356.733,978.227 357.293,952.141 357.852,897.344 358.411,910.256 358.97,853.316 359.53,884.618 360.089,915.732 360.648,891.379 361.207,883.212 361.767,893.51 362.326,919.457 362.885,895.024 363.444,906.535 364.004,948.588 364.563,1005.23 365.122,996.945 365.681,969.575 366.241,962.157 366.8,936.718 367.359,894.35 367.918,904.514 368.478,900.974 369.037,879.22 369.596,855.124 370.155,852.458 370.715,868.744 371.274,863.379 371.833,877.531 372.392,906.147 372.952,917.471 373.511,878.047 374.07,889.069 374.629,868.579 375.189,880.832 375.748,861.218 376.307,857.564 376.866,869.249 377.426,866.846 377.985,864.928 378.544,893.029 379.103,870.616 379.663,869.146 380.222,881.056 380.781,892.039 381.34,889.203 381.9,882.708 382.459,857.141 383.018,837.727 383.577,852.186 384.137,868.622 384.696,862.883 385.255,842.584 385.814,855.292 386.374,818.587 386.933,814.712 387.492,796.367 388.051,798.114 388.611,796.175 389.17,795.368 389.729,793.638 390.288,792.717 390.848,775.566 391.407,792.314 391.966,822.999 392.525,858.909 393.085,835.165 393.644,830.136 394.203,809.84 394.762,825.626 395.322,857.449 395.881,885.036 396.44,892.115 396.999,888.098 397.559,869.713 398.118,846.579 398.677,826.008 399.236,824.369 399.796,805.252 400.355,803.52 400.914,785.644 401.473,767.086 402.033,784.206 402.592,815.695 403.151,842.65 403.71,822.071 404.27,803.058 404.829,801.375 405.388,765.394 405.947,766.768 406.507,766.611 407.066,752.036 407.625,789.099 408.184,819.798 408.744,813.537 409.303,812.053 409.862,828.05 410.421,809.581 410.981,791.522 411.54,775.141 412.099,759.771 412.658,744.525 413.218,746.999 413.777,747.156 414.336,748.918 414.895,782.074 415.455,795.649 416.014,811.137 416.573,774.918 417.132,758.461 417.692,760.422 418.251,775.43 418.81,759.53 419.369,746.084 419.929,777.994 420.488,793.497 421.047,806.787 421.606,821.31 422.166,866.647 422.725,877.093 423.284,853.154 423.843,880.221 424.403,877.441 424.962,868.944 425.521,874.774 426.08,882.779 426.64,846.326 427.199,809.055 427.758,822.605 428.318,837.129 428.877,833.512 429.436,810.968 429.995,791.907 430.555,789.666 431.114,788.031 431.673,755.305 432.232,774.482 432.792,791.955 433.351,791.235 433.91,756.167 434.469,792.116 435.029,791.853 435.588,787.389 436.147,767.347 436.706,765.173 437.266,747.083 437.825,730.228 438.384,732.272 438.943,751.282 439.503,751.435 440.062,735.311 440.621,739.661 441.18,738.222 441.74,770.947 442.299,803.473 442.858,787.134 443.417,801.748 443.977,849.431 444.536,828.795 445.095,826.8 445.654,821.438 446.214,836.408 446.773,851.253 447.332,826.452 447.891,825.514 448.451,837.732 449.01,868.25 449.569,878.321 450.128,853.806 450.688,878.972 451.247,855.623 451.806,847.681 452.365,840.603 452.925,852.314 453.484,835.039 454.043,826.884 454.602,806.639 455.162,785.712 455.721,783.704 456.28,783.059 456.839,782.87 457.399,783.304 457.958,816.598 458.517,798.346 459.076,813.423 459.636,809.843 460.195,822.206 460.754,784.394 461.313,830.424 461.873,796.113 462.432,809.004 462.991,787.867 463.55,786.819 464.11,800.716 464.669,814.203 465.228,843.952 465.787,808.855 466.347,804.587 466.906,804.291 467.465,786.316 468.024,800.882 468.584,794.57 469.143,822.357 469.702,804.233 470.261,801.312 470.821,834.545 471.38,829.775 471.939,823.258 472.498,832.467 473.058,809.553 473.617,787.894 474.176,737.32 474.735,750.385 475.295,749.871 475.854,731.549 476.413,730.268 476.972,729.927 477.532,781.296 478.091,761.702 478.65,793.573 479.209,791.436 479.769,788.089 480.328,818.286 480.887,779.266 481.446,775.299 482.006,771.808 482.565,718.673 483.124,720.483 483.683,705.62 484.243,709.57 484.802,710.52 485.361,696.059 485.92,749.319 486.48,764.926 487.039,775.107 487.598,736.857 488.157,720.428 488.717,689.16 489.276,673.712 489.835,677.257 490.394,698.392 490.954,685.419 491.513,688.19 492.072,606.121 492.631,596.116 493.191,601.13 493.75,611.082 494.309,604.154 494.868,624.817 495.428,625.678 495.987,614.761 496.546,622.067 497.105,613.733 497.665,619.362 498.224,642.686 498.783,695.62 499.342,729.264 499.902,729.616 500.461,729.681 501.02,714.679 501.579,697.963 502.139,734.823 502.698,738.226 503.257,738.856 503.816,739.314 504.376,741.779 504.935,758.141 505.494,755.148 506.053,752.951 506.613,765.9 507.172,796.346 507.731,776.268 508.29,790.606 508.85,756.299 509.409,759.647 509.968,725.838 510.527,772.992 511.087,787.012 511.646,753.098 512.205,751.184 512.764,748.358 513.324,714.013 513.883,747.457 514.442,731.018 515.001,745.663 515.561,743.512 516.12,745.022 516.679,743.477 517.238,709.117 517.798,676.33 518.357,692.867 518.916,675.999 519.475,677.462 520.035,693.502 520.594,679.769 521.153,710.471 521.712,726.146 522.272,710.358 522.831,739.235 523.39,705.473 523.949,675.904 524.509,680.405 525.068,668.364 525.627,690.355 526.186,693.643 526.746,709.776 527.305,725.957 527.864,710.132 528.423,743.071 528.983,708.383 529.542,714.956 530.101,731.167 530.66,766.295 531.22,747.426 531.779,730.775 532.338,711.586 532.897,714.094 533.457,713.768 534.016,685.595 534.575,688.306 535.134,708.624 535.694,741.04 536.253,758.964 536.812,774.364 537.371,773.761 537.931,768.224 538.49,730.431 539.049,726.282 539.608,711.845 540.168,717.412 540.727,715.773 541.286,719.237 541.845,734.823 542.405,715.565 542.964,732.527 543.523,748.376 544.082,734.657 544.642,697.752 545.201,682.718 545.76,715.535 546.319,730.698 546.879,696.848 547.438,730.156 547.997,744.167 548.556,710.741 549.116,742.022 549.675,775.852 550.234,837.933 550.793,851.476 551.353,862.854 551.912,840.467 552.471,844.499 553.031,834.68 553.59,861.395 554.149,853.487 554.708,847.404 555.268,841.014 555.827,831.858 556.386,823.611 556.945,820.263 557.505,815.03 558.064,795.647 558.623,808.451 559.182,804.625 559.742,765.475 560.301,790.809 560.86,768.716 561.419,831.573 561.979,841.184 562.538,863.28 563.097,871.21 563.656,848.732 564.216,875.816 564.775,915.558 565.334,906.761 565.893,896.171 566.453,899.696 567.012,871.043 567.571,844.572 568.13,805.077 568.69,795.961 569.249,756.445 569.808,735.822 570.367,751.544 570.927,748.623 571.486,745.499 572.045,758.083 572.604,770.314 573.164,738.306 573.723,803.628 574.282,816.827 574.841,844.162 575.401,802.489 575.96,815.735 576.519,774.041 577.078,736.993 577.638,737.341 578.197,718.931 578.756,702.508 579.315,686.97 579.875,672.197 580.434,707.163 580.993,693.023 581.552,712.545 582.112,712.238 582.671,712.706 583.23,712.949 583.789,728.566 584.349,761.636 584.908,761.028 585.467,757.42 586.026,769.141 586.586,749.657 587.145,753.158 587.704,734.499 588.263,732.189 588.823,719.376 589.382,700.866 589.941,701.76 590.5,668.261 591.06,653.372 591.619,672.68 592.178,707.856 592.737,709.764 593.297,676.187 593.856,661.982 594.415,666.08 594.974,704.542 595.534,723.072 596.093,738.992 596.652,737.82 597.211,770.477 597.771,796.482 598.33,794.118 598.889,758.483 599.448,739.39 600.008,737.697 600.567,703.186 601.126,753.877 601.685,716.544 602.245,715.565 602.804,745.401 603.363,788.888 603.922,798.755 604.482,820.429 605.041,816.206 605.6,809.464 606.159,788.247 606.719,813.907 607.278,822.27 607.837,815.705 608.396,826.898 608.956,790.82 609.515,833.916 610.074,809.919 610.633,788.744 611.193,750.725 611.752,746.006 612.311,745.536 612.87,733.562 613.43,700.637 613.989,683.125 614.548,651.504 615.107,653.848 615.667,636.468 616.226,622.546 616.785,606.291 617.344,611.368 617.904,615.291 618.463,618.399 619.022,657.761 619.581,675.068 620.141,660.472 620.7,661.821 621.259,665.256 621.818,667.595 622.378,667.11 622.937,666.848 623.496,655.381 624.055,640.295 624.615,626.531 625.174,646.112 625.733,614.946 626.292,587.978 626.852,576.273 627.411,568.554 627.97,610.355 628.529,664.691 629.089,605.136 629.648,593.02 630.207,630.038 630.766,633.615 631.326,637.827 631.885,624.883 632.444,644.27 633.003,648.747 633.563,624.182 634.122,614.116 634.681,587.489 635.24,612.976 635.8,634.907 636.359,638.449 636.918,611.803 637.477,599.101 638.037,605.27 638.596,596.424 639.155,635.128 639.714,589.676 640.274,595.581 640.833,566.661 641.392,590.725 641.951,627.002 642.511,614.293 643.07,636.19 643.629,638.732 644.188,657.631 644.748,627.353 645.307,662.896 645.866,664.802 646.425,683.209 646.985,701.746 647.544,717.599 648.103,717.009 648.662,701.604 649.222,670.528 649.781,673.837 650.34,694.182 650.899,677.859 651.459,659.373 652.018,675.88 652.577,695.123 653.136,696.301 653.696,677.091 654.255,643.614 654.814,631.554 655.373,636.24 655.933,606.579 656.492,616.468 657.051,604.766 657.61,592.537 658.17,611.355 658.729,597.628 659.288,618.484 659.847,619.562 660.407,593.145 660.966,564.862 661.525,583.956 662.084,571.628 662.644,546.253 663.203,534.76 663.762,566.847 664.321,574.632 664.881,581.952 665.44,587.01 665.999,609.807 666.558,631.799 667.118,632.619 667.677,653.496 668.236,624.143 668.795,660.843 669.355,627.655 669.914,648.14 670.473,634.589 671.032,690.923 671.592,707.503 672.151,677.058 672.71,697.431 673.269,702.55 673.829,715.522 674.388,729.516 674.947,727.603 675.506,741.093 676.066,723.608 676.625,740.595 677.184,739.569 677.743,724.424 678.303,740.571 678.862,722.029 679.421,738.271 679.981,766.096 680.54,729.9 681.099,705.851 681.658,736.16 682.218,734.564 682.777,747.992 683.336,747.929 683.895,713.586 684.455,695.084 685.014,694.031 685.573,677.644 686.132,694.365 686.692,679.9 687.251,653.051 687.81,672.486 688.369,721.378 688.929,703.387 689.488,701.154 690.047,697.812 690.606,711.797 691.166,694.218 691.725,662.702 692.284,666.245 692.843,697.162 693.403,697.891 693.962,711.897 694.521,680.19 695.08,714.651 695.64,712.061 696.199,726.696 696.758,757.473 697.317,753.521 697.877,770.106 698.436,749.228 698.995,728.951 699.554,742.453 700.114,691.768 700.673,676.721 701.232,697.444 701.791,710.709 702.351,708.299 702.91,692.102 703.469,709.431 704.028,720.296 704.588,737.499 705.147,719.82 705.706,750.843 706.265,749.474 706.825,763.881 707.384,760.413 707.943,723.036 708.502,722.165 709.062,751.265 709.621,763.211 710.18,758.963 710.739,738.887 711.299,754.244 711.858,796.638 712.417,824.915 712.976,848.917 713.536,855.308 714.095,829.99 714.654,795.308 715.213,787.444 715.773,752.411 716.332,733.865 716.891,716.65 717.45,679.568 718.01,648.363 718.569,636.571 719.128,639.522 719.687,640.256 720.247,642.292 720.806,679.846 721.365,680.794 721.924,713.64 722.484,731.045 723.043,725.332 723.602,691.714 724.161,692.823 724.721,692.386 725.28,725.646 725.839,741.265 726.398,720.689 726.958,715.364 727.517,700.077 728.076,668.367 728.635,686.419 729.195,672.284 729.754,642.847 730.313,615.349 730.872,622.022 731.432,608.257 731.991,678.614 732.55,647.004 733.109,664.536 733.669,650.565 734.228,668.775 734.787,701.28 735.346,717.928 735.906,685.026 736.465,718.771 737.024,718.909 737.583,715.983 738.143,715.657 738.702,728.745 739.261,729.991 739.82,726.131 740.38,741.752 740.939,755.477 741.498,718.995 742.057,687.679 742.617,720.07 743.176,715.416 743.735,776.475 744.294,755.106 744.854,721.079 745.413,734.456 745.972,731.233 746.531,745.033 747.091,711.347 747.65,742.804 748.209,722.561 748.768,688.201 749.328,688.488 749.887,670.909 750.446,703.643 751.005,702.984 751.565,715.812 752.124,712.966 752.683,701.197 753.242,716.838 753.802,713.854 754.361,694.827 754.92,710.564 755.479,726.12 756.039,721.475 756.598,688.985 757.157,704.63 757.716,686.53 758.276,670.889 758.835,653.452 759.394,656.552 759.953,656.734 760.513,643.298 761.072,649.261 761.631,667.538 762.19,669.516 762.75,656.901 763.309,675.13 763.868,676.473 764.427,674.706 764.987,711.337 765.546,739.745 766.105,734.711 766.664,719.831 767.224,732.849 767.783,728.513 768.342,761.018 768.901,744.014 769.461,726.467 770.02,738.956 770.579,722.705 771.138,737.139 771.698,747.88 772.257,775.024 772.816,774.205 773.375,800.504 773.935,765.894 774.494,762.765 775.053,775.697 775.612,772.7 776.172,734.736 776.731,749.76 777.29,746.032 777.849,744.563 778.409,776.125 778.968,788.859 779.527,731.85 780.086,732.641 780.646,694.952 781.205,693.516 781.764,679.114 782.323,665.512 782.883,665.021 783.442,649.677 784.001,670.078 784.56,684.353 785.12,667.173 785.679,669.539 786.238,687.25 786.797,686.496 787.357,690.631 787.916,722.828 788.475,720.532 789.034,733.364 789.594,731.107 790.153,728.195 790.712,739.427 791.271,735.206 791.831,763.363 792.39,791.827 792.949,789.002 793.508,750.494 794.068,780.772 794.627,777.993 795.186,754.483 795.745,702.206 796.305,685.818 796.864,686.561 797.423,654.306 797.982,671.869 798.542,670.853 799.101,623.417 799.66,624.44 800.219,613.81 800.779,620.047 801.338,608.052 801.897,610.442 802.456,596.785 803.016,569.74 803.575,578.226 804.134,601.776 804.693,606.054 805.253,641.737 805.812,661.623 806.371,681.402 806.931,681.696 807.49,713.365 808.049,698.387 808.608,710.986 809.168,708.704 809.727,692.28 810.286,689.013 810.845,687.696 811.405,686.309 811.964,667.641 812.523,668.524 813.082,637.442 813.642,655.774 814.201,655.582 814.76,655.368 815.319,656.943 815.879,658.91 816.438,644.403 816.997,644.745 817.556,661.971 818.116,659.862 818.675,663.836 819.234,662.627 819.793,632.834 820.353,654.294 820.912,623.323 821.471,597.76 822.03,586.659 822.59,593.77 823.149,633.614 823.708,653.236 824.267,654.494 824.827,656.743 825.386,659.09 825.945,674.916 826.504,693.57 827.064,677.184 827.623,658.538 828.182,694.983 828.741,681.489 829.301,698.758 829.86,682.033 830.419,684.816 830.978,685.558 831.538,686.99 832.097,689.986 832.656,706.079 833.215,676.728 833.775,677.769 834.334,646.938 834.893,635.37 835.452,604.611 836.012,606.674 836.571,625.449 837.13,647.08 837.689,650.849 838.249,652.874 838.808,654.331 839.367,688.014 839.926,673.884 840.486,688.923 841.045,689.324 841.604,692.294 842.163,711.379 842.723,679.981 843.282,630.002 843.841,616.285 844.4,638.333 844.96,641.275 845.519,667.466 846.078,670.868 846.637,624.262 847.197,644.723 847.756,611.544 848.315,615.83 848.874,620.926 849.434,625.307 849.993,626.822 850.552,631.105 851.111,633.492 851.671,636.87 852.23,641.1 852.789,645.629 853.348,634.119 853.908,652.035 854.467,673.057 855.026,658.147 855.585,678.377 856.145,655.287 856.704,692.196 857.263,696.591 857.822,695.36 858.382,661.426 858.941,647.139 859.5,647.049 860.059,648.008 860.619,668.586 861.178,669.876 861.737,653.486 862.296,670.939 862.856,654.119 863.415,670.977 863.974,688.547 864.533,673.144 865.093,686.727 865.652,704.012 866.211,719.91 866.77,714.897 867.33,732.303 867.889,744.497 868.448,740.645 869.007,755.507 869.567,752.576 870.126,794.875 870.685,804.67 871.244,814.056 871.804,807.538 872.363,816.398 872.922,812.67 873.481,788.573 874.041,768.077 874.6,781.192 875.159,836.959 875.718,858.171 876.278,865.703 876.837,826.106 877.396,833.418 877.955,809.747 878.515,805.396 879.074,796.899 879.633,794.585 880.192,789.128 880.752,769.116 881.311,747.537 881.87,743.759 882.429,756.125 882.989,734.778 883.548,698.509 884.107,665.745 884.666,650.892 885.226,702.618 885.785,717.286 886.344,684.461 886.903,670.917 887.463,652.316 888.022,674.103 888.581,681.506 889.14,699.502 889.7,713.124 890.259,680.625 890.818,716.796 891.377,718.119 891.937,732.935 892.496,730.626 893.055,744.022 893.614,757.837 894.174,770.813 894.733,750.812 895.292,747.772 895.851,711.881 896.411,728.77 896.97,745.786 897.529,739.703 898.088,735.111 898.648,716.097 899.207,716.156 899.766,712.79 900.325,714.571 900.885,729.544 901.444,744.58 902.003,710.911 902.562,712.392 903.122,680.093 903.681,699.235 904.24,698.688 904.799,715.794 905.359,727.287 905.918,725.027 906.477,737.115 907.036,722.517 907.596,704.702 908.155,688.093 908.714,705.751 909.273,724.156 909.833,686.189 910.392,653.92 910.951,656.397 911.51,707.699 912.07,738.717 912.629,721.724 913.188,737.162 913.747,687.154 914.307,688.003 914.866,687.357 915.425,670.45 915.984,686.995 916.544,670.679 917.103,721.295 917.662,716.752 918.221,702.252 918.781,684.286 919.34,700.885 919.899,735.618 920.458,734.546 921.018,730.544 921.577,726.428 922.136,707.478 922.695,688.152 923.255,688.233 923.814,707.107 924.373,705.148 924.932,721.585 925.492,687.44 926.051,670.728 926.61,702.004 927.169,701.922 927.729,701.342 928.288,699.303 928.847,683.674 929.406,684.773 929.966,688.816 930.525,660.755 931.084,710.796 931.644,727.412 932.203,758.797 932.762,752.128 933.321,765.1 933.881,763.497 934.44,743.045 934.999,773.094 935.558,765.105 936.118,761.673 936.677,771.822 937.236,737.79 937.795,732.488 938.355,698.754 938.914,664.161 939.473,665.236 940.032,665.634 940.592,682.067 941.151,716.561 941.71,684.291 942.269,686.25 942.829,685.507 943.388,686.721 943.947,671.588 944.506,626.063 945.066,613.348 945.625,584.751 946.184,619.226 946.743,637.036 947.303,622.869 947.862,674.281 948.421,676.683 948.98,691.485 949.54,691.982 950.099,676.08 950.658,678.738 951.217,679.703 951.777,614.695 952.336,602.367 952.895,607.696 953.454,611.937 954.014,635.13 954.573,586.286 955.132,606.659 955.691,613.127 956.251,601.027 956.81,620.177 957.369,636.165 957.928,653.982 958.488,654.004 959.047,637.613 959.606,639.882 960.165,628.137 960.725,635.788 961.284,641.3 961.843,645.681 962.402,680.54 962.962,680.887 963.521,667.083 964.08,700.519 964.639,701.266 965.199,702.116 965.758,716.491 966.317,664.26 966.876,633.096 967.436,687.695 967.995,654.775 968.554,669.823 969.113,670.617 969.673,668.893 970.232,683.725 970.791,703.667 971.35,734.187 971.91,748.122 972.469,749.269 973.028,748.414 973.587,779.27 974.147,790.384 974.706,786.67 975.265,763.799 975.824,726.844 976.384,726.107 976.943,741.47 977.502,738.258 978.061,702.52 978.621,734.15 979.18,762.657 979.739,739.925 980.298,752.761 980.858,734.338 981.417,733.398 981.976,711.722 982.535,693.665 983.095,656.908 983.654,639.667 984.213,658.75 984.772,660.337 985.332,693.282 985.891,710.314 986.45,661.717 987.009,661.997 987.569,662.613 988.128,627.432 988.687,647.634 989.246,600.079 989.806,603.812 990.365,609.152 990.924,629.556 991.483,651.131 992.043,681.791 992.602,697.977 993.161,698.882 993.72,730.917 994.28,732.441 994.839,682.648 995.398,714.423 995.957,733.585 996.517,781.756 997.076,729.591 997.635,728.934 998.194,757.968 998.754,754.129 999.313,716.931 999.872,698.781 1000.43,666.893 1000.99,671.308 1001.55,670.746 1002.11,704.647 1002.67,687.633 1003.23,653.194 1003.79,655.006 1004.35,622.596 1004.91,625.898 1005.46,645.477 1006.02,644.514 1006.58,663.908 1007.14,648.237 1007.7,630.515 1008.26,629.736 1008.82,617.161 1009.38,568.161 1009.94,573.667 1010.5,590.374 1011.06,563.749 1011.62,600.75 1012.18,589.555 1012.73,592.144 1013.29,579.507 1013.85,568.895 1014.41,576.08 1014.97,582.181 1015.53,590.936 1016.09,581.783 1016.65,574.323 1017.21,596.169 1017.77,600.503 1018.33,603.452 1018.89,623.457 1019.45,611.155 1020.01,616.231 1020.56,636.504 1021.12,626.611 1021.68,665.095 1022.24,666.113 1022.8,683.116 1023.36,651.542 1023.92,648.939 1024.48,698.724 1025.04,650.467 1025.6,665.99 1026.16,698.745 1026.72,733.299 1027.28,680.677 1027.83,696.434 1028.39,728.51 1028.95,756.771 1029.51,752.209 1030.07,782.924 1030.63,778.25 1031.19,772.899 1031.75,770.937 1032.31,754.623 1032.87,748.84 1033.43,744.192 1033.99,757.166 1034.55,738.408 1035.1,783.487 1035.66,779.896 1036.22,774.147 1036.78,735.325 1037.34,746.649 1037.9,744.364 1038.46,743.765 1039.02,757.153 1039.58,753.533 1040.14,769.005 1040.7,747.187 1041.26,761.989 1041.82,738.936 1042.38,672.666 1042.93,689.492 1043.49,687.339 1044.05,685.116 1044.61,682.344 1045.17,631.191 1045.73,653.363 1046.29,671.687 1046.85,670.312 1047.41,671.001 1047.97,640.837 1048.53,656.368 1049.09,673.623 1049.65,693.444 1050.2,697.175 1050.76,680.29 1051.32,697.019 1051.88,727.979 1052.44,694.323 1053,674.326 1053.56,660.15 1054.12,660.135 1054.68,677.984 1055.24,675.794 1055.8,672.344 1056.36,658.232 1056.92,673.946 1057.48,640.378 1058.03,642.684 1058.59,662.115 1059.15,679.4 1059.71,680.41 1060.27,678.35 1060.83,680.061 1061.39,665.251 1061.95,714.683 1062.51,729.212 1063.07,714.091 1063.63,713.3 1064.19,713.164 1064.75,709.081 1065.3,707.025 1065.86,705.447 1066.42,653.527 1066.98,623.302 1067.54,578.367 1068.1,620.755 1068.66,628.292 1069.22,680.714 1069.78,664.568 1070.34,650.548 1070.9,638.331 1071.46,622.433 1072.02,610.913 1072.57,581.782 1073.13,590.214 1073.69,578.299 1074.25,615.813 1074.81,655.239 1075.37,659.294 1075.93,641.198 1076.49,627.491 1077.05,644.833 1077.61,647.437 1078.17,662.605 1078.73,662.92 1079.29,665.169 1079.85,664.465 1080.4,662.926 1080.96,679.406 1081.52,697.405 1082.08,712.232 1082.64,708.719 1083.2,689.148 1083.76,670.87 1084.32,635.96 1084.88,622.203 1085.44,624.755 1086,625.564 1086.56,660.905 1087.12,697.204 1087.67,681.486 1088.23,666.971 1088.79,666.84 1089.35,602 1089.91,607.037 1090.47,671.968 1091.03,687.443 1091.59,685.325 1092.15,716.855 1092.71,747.561 1093.27,743.809 1093.83,709.564 1094.39,724.301 1094.94,721.468 1095.5,703.207 1096.06,703.757 1096.62,685.987 1097.18,703.14 1097.74,722.015 1098.3,734.927 1098.86,701.276 1099.42,701.21 1099.98,716.18 1100.54,744.989 1101.1,754.537 1101.66,783.55 1102.22,776.535 1102.77,754.435 1103.33,736.259 1103.89,733.798 1104.45,714.792 1105.01,728.846 1105.57,674.381 1106.13,661.3 1106.69,645.511 1107.25,662.189 1107.81,610.615 1108.37,596.456 1108.93,600.355 1109.49,621.837 1110.04,621.819 1110.6,594.697 1111.16,600.92 1111.72,637.395 1112.28,606.063 1112.84,624.443 1113.4,609.428 1113.96,580.261 1114.52,601.26 1115.08,638.367 1115.64,654.849 1116.2,638.297 1116.76,626.496 1117.31,660.432 1117.87,678.631 1118.43,711.379 1118.99,724.753 1119.55,709.491 1120.11,742.424 1120.67,741.384 1121.23,738.238 1121.79,751.548 1122.35,731.405 1122.91,777.108 1123.47,769.582 1124.03,763.73 1124.59,744.52 1125.14,711.149 1125.7,728.55 1126.26,709.726 1126.82,723.806 1127.38,740.526 1127.94,741.632 1128.5,756.281 1129.06,750.498 1129.62,747.956 1130.18,699.317 1130.74,733.243 1131.3,717.098 1131.86,701.129 1132.41,698.474 1132.97,680.622 1133.53,665.003 1134.09,666.406 1134.65,667.978 1135.21,702.965 1135.77,703.615 1136.33,706.491 1136.89,671.751 1137.45,669.589 1138.01,700.957 1138.57,699.436 1139.13,683.67 1139.68,649.825 1140.24,633.164 1140.8,669.525 1141.36,688.029 1141.92,716.284 1142.48,680.068 1143.04,663.978 1143.6,680.312 1144.16,634.631 1144.72,624.597 1145.28,629.441 1145.84,666.021 1146.4,683.507 1146.96,680.539 1147.51,664.485 1148.07,633.08 1148.63,618.053 1149.19,639.064 1149.75,658.214 1150.31,642.593 1150.87,643.865 1151.43,680.663 1151.99,679.41 1152.55,665.518 1153.11,664.019 1153.67,680.139 1154.23,695.155 1154.78,675.915 1155.34,661.197 1155.9,695.139 1156.46,731.118 1157.02,694.203 1157.58,710.376 1158.14,709.466 1158.7,692.544 1159.26,645.869 1159.82,649.418 1160.38,670.617 1160.94,657.343 1161.5,656.79 1162.05,644.329 1162.61,634.637 1163.17,637.605 1163.73,624.74 1164.29,611.868 1164.85,599.273 1165.41,592.394 1165.97,613.837 1166.53,658.244 1167.09,660.124 1167.65,642.539 1168.21,613.67 1168.77,633.955 1169.33,656.782 1169.88,644.059 1170.44,648.712 1171,653.506 1171.56,639.879 1172.12,625.75 1172.68,628.867 1173.24,616.169 1173.8,633.471 1174.36,651.612 1174.92,666.523 1175.48,681.264 1176.04,681.112 1176.6,699.032 1177.15,700.605 1177.71,683.358 1178.27,714.072 1178.83,699.444 1179.39,712.49 1179.95,711.011 1180.51,724.866 1181.07,706.39 1181.63,690.171 1182.19,669.931 1182.75,667.554 1183.31,653.81 1183.87,624.638 1184.43,661.129 1184.98,683.279 1185.54,649.052 1186.1,632.767 1186.66,669.738 1187.22,657.743 1187.78,627.869 1188.34,631.435 1188.9,651.932 1189.46,655.399 1190.02,656.686 1190.58,675.71 1191.14,660.484 1191.7,658.757 1192.25,657.786 1192.81,693.96 1193.37,693.632 1193.93,694.021 1194.49,678.053 1195.05,696.589 1195.61,687.016 1196.17,636.3 1196.73,655.374 1197.29,672.138 1197.85,687.147 1198.41,670.422 1198.97,734.916 1199.52,764.529 1200.08,791.381 1200.64,790.289 1201.2,817.445 1201.76,793.861 1202.32,790.843 1202.88,802.508 1203.44,796.306 1204,803.466 1204.56,783.048 1205.12,762.269 1205.68,727.351 1206.24,708.489 1206.8,740.18 1207.35,755.197 1207.91,767.551 1208.47,762.35 1209.03,739.956 1209.59,722.661 1210.15,750.077 1210.71,761.47 1211.27,724.4 1211.83,755.918 1212.39,753.97 1212.95,797.867 1213.51,792.165 1214.07,800.766 1214.62,810.298 1215.18,803.411 1215.74,782.269 1216.3,776.668 1216.86,837.447 1217.42,796.02 1217.98,808.774 1218.54,784.289 1219.1,748.953 1219.66,745.415 1220.22,742.32 1220.78,736.99 1221.34,699.374 1221.89,664.928 1222.45,666.394 1223.01,679.27 1223.57,634.424 1224.13,685.57 1224.69,639.8 1225.25,653.684 1225.81,640.746 1226.37,609.881 1226.93,663.212 1227.49,663.898 1228.05,666.454 1228.61,667.756 1229.17,668.464 1229.72,635.908 1230.28,639.843 1230.84,657.577 1231.4,627.636 1231.96,648.902 1232.52,637.12 1233.08,637.17 1233.64,639.516 1234.2,641.616 1234.76,614.872 1235.32,598.962 1235.88,620.906 1236.44,653.091 1236.99,657.338 1237.55,661.373 1238.11,652.106 1238.67,637.495 1239.23,638.043 1239.79,623.968 1240.35,621.843 1240.91,625.856 1241.47,627.84 1242.03,648.463 1242.59,653.617 1243.15,737.562 1243.71,718.653 1244.26,700.1 1244.82,729.691 1245.38,744.585 1245.94,704.538 1246.5,719.905 1247.06,701.978 1247.62,703.736 1248.18,669.758 1248.74,671.753 1249.3,671.393 1249.86,721.368 1250.42,705.035 1250.98,736.211 1251.54,751.202 1252.09,732.484 1252.65,748.442 1253.21,695.393 1253.77,692.692 1254.33,723.353 1254.89,757.667 1255.45,754.06 1256.01,730.939 1256.57,743.483 1257.13,740.271 1257.69,718.089 1258.25,715.786 1258.81,714.642 1259.36,712.277 1259.92,707.228 1260.48,689.951 1261.04,671.72 1261.6,656.323 1262.16,659.562 1262.72,675.414 1263.28,643.312 1263.84,610.72 1264.4,611.677 1264.96,601.966 1265.52,605.251 1266.08,607.802 1266.63,597.548 1267.19,616.571 1267.75,666.251 1268.31,655.009 1268.87,671.446 1269.43,655.018 1269.99,609.684 1270.55,644.994 1271.11,663.519 1271.67,665.786 1272.23,681.916 1272.79,698.088 1273.35,727.23 1273.91,727.36 1274.46,756.003 1275.02,781.354 1275.58,779.256 1276.14,757.95 1276.7,752.106 1277.26,715.836 1277.82,761.674 1278.38,773.911 1278.94,737.148 1279.5,734.609 1280.06,716.131 1280.62,716.702 1281.18,714.124 1281.73,712.589 1282.29,711.943 1282.85,712.461 1283.41,723.409 1283.97,755.139 1284.53,779.711 1285.09,760.241 1285.65,724.145 1286.21,739.228 1286.77,737.819 1287.33,723.036 1287.89,654.252 1288.45,654.35 1289,637.833 1289.56,674.399 1290.12,676.274 1290.68,675.402 1291.24,690.699 1291.8,673.096 1292.36,673.71 1292.92,706.379 1293.48,705.375 1294.04,674.754 1294.6,638.98 1295.16,658.153 1295.72,643.973 1296.28,675.23 1296.83,660.243 1297.39,677.998 1297.95,680.566 1298.51,681.025 1299.07,695.133 1299.63,710.378 1300.19,724.435 1300.75,723.05 1301.31,706.43 1301.87,703.053 1302.43,718.748 1302.99,721.715 1303.55,722.78 1304.1,720.442 1304.66,719.229 1305.22,701.815 1305.78,685.935 1306.34,668.261 1306.9,653.497 1307.46,660.628 1308.02,666 1308.58,639.301 1309.14,624.622 1309.7,594.803 1310.26,599.987 1310.82,555.472 1311.38,576.264 1311.93,597.129 1312.49,632.198 1313.05,635.691 1313.61,620.249 1314.17,622.768 1314.73,659.327 1315.29,676.976 1315.85,678.469 1316.41,692.015 1316.97,710.174 1317.53,724.908 1318.09,740.322 1318.65,736.962 1319.2,765.864 1319.76,759.273 1320.32,756.9 1320.88,737.323 1321.44,682.931 1322,699.112 1322.56,683.14 1323.12,668.056 1323.68,669.604 1324.24,685.388 1324.8,702.862 1325.36,686.301 1325.92,670.557 1326.47,692.526 1327.03,629.069 1327.59,618.243 1328.15,623.961 1328.71,663.282 1329.27,665.389 1329.83,665.279 1330.39,678.806 1330.95,629.377 1331.51,613.531 1332.07,595.403 1332.63,602.615 1333.19,638.467 1333.75,654.981 1334.3,690.346 1334.86,671.771 1335.42,658.415 1335.98,659.345 1336.54,624.793 1337.1,630.146 1337.66,631.711 1338.22,616.036 1338.78,621.918 1339.34,658.095 1339.9,688.535 1340.46,689.873 1341.02,690.396 1341.57,684.831 1342.13,687.886 1342.69,672.565 1343.25,658.876 1343.81,677.692 1344.37,675.326 1344.93,624.877 1345.49,608.773 1346.05,608.796 1346.61,629.888 1347.17,651.831 1347.73,655.69 1348.29,656.956 1348.84,722.28 1349.4,703.968 1349.96,720.416 1350.52,717.212 1351.08,667.566 1351.64,669.215 1352.2,671.126 1352.76,689.328 1353.32,700.767 1353.88,715.913 1354.44,717.793 1355,716.087 1355.56,712.81 1356.12,742.76 1356.67,740.876 1357.23,740.783 1357.79,753.047 1358.35,716.875 1358.91,698.295 1359.47,747.377 1360.03,774.249 1360.59,772.358 1361.15,769.673 1361.71,763.633 1362.27,775.424 1362.83,755.927 1363.39,769.048 1363.94,799.745 1364.5,824.109 1365.06,815.822 1365.62,790.721 1366.18,787.219 1366.74,764.283 1367.3,762.321 1367.86,758.4 1368.42,739.664 1368.98,716.612 1369.54,698.812 1370.1,682.479 1370.66,682.709 1371.21,716.914 1371.77,715.028 1372.33,708.199 1372.89,720.706 1373.45,765.77 1374.01,747.41 1374.57,727.813 1375.13,723.968 1375.69,722.358 1376.25,672.293 1376.81,640.207 1377.37,643.268 1377.93,644.804 1378.49,647.866 1379.04,651.15 1379.6,637.973 1380.16,660.185 1380.72,640.635 1381.28,640.898 1381.84,641.674 1382.4,628.157 1382.96,662.112 1383.52,644.839 1384.08,633.835 1384.64,651.237 1385.2,640.034 1385.76,641.902 1386.31,658.024 1386.87,642.946 1387.43,645.967 1387.99,615.998 1388.55,669.666 1389.11,670.561 1389.67,641.792 1390.23,625.869 1390.79,648.624 1391.35,668.757 1391.91,704.484 1392.47,704.528 1393.03,722.627 1393.58,690.388 1394.14,661.673 1394.7,650.216 1395.26,684.023 1395.82,699.75 1396.38,665.483 1396.94,667.01 1397.5,668.603 1398.06,700.428 1398.62,679.637 1399.18,663.241 1399.74,631.668 1400.3,603.361 1400.86,573.61 1401.41,595.744 1401.97,617.579 1402.53,607.662 1403.09,624.199 1403.65,627.731 1404.21,665.291 1404.77,649.135 1405.33,622.468 1405.89,605.189 1406.45,625.778 1407.01,645.49 1407.57,616.876 1408.13,636.294 1408.68,640.003 1409.24,659.263 1409.8,658.759 1410.36,660.655 1410.92,645.477 1411.48,649.923 1412.04,668.464 1412.6,669.48 1413.16,684.398 1413.72,684.788 1414.28,683.444 1414.84,666.973 1415.4,699.929 1415.95,682.392 1416.51,715.074 1417.07,714.697 1417.63,759.655 1418.19,756.143 1418.75,736.677 1419.31,767.027 1419.87,799.637 1420.43,793.827 1420.99,741.408 1421.55,722.875 1422.11,752.369 1422.67,750.379 1423.23,764.237 1423.78,759.913 1424.34,768.713 1424.9,779.862 1425.46,773.98 1426.02,750.937 1426.58,767.825 1427.14,761.165 1427.7,759.617 1428.26,754.934 1428.82,736.258 1429.38,766.67 1429.94,745.759 1430.5,738.744 1431.05,718.38 1431.61,716.385 1432.17,684.672 1432.73,715.978 1433.29,749.178 1433.85,744.616 1434.41,760.442 1434.97,757.046 1435.53,766.48 1436.09,778.797 1436.65,758.248 1437.21,772.139 1437.77,751.171 1438.33,763.906 1438.88,761.575 1439.44,753.975 1440,749.012 1440.56,763.924 1441.12,791.944 1441.68,788.958 1442.24,785.617 1442.8,761.237 1443.36,772.074 1443.92,703.84 1444.48,682.348 1445.04,666.077 1445.6,679.605 1446.15,694.532 1446.71,695.508 1447.27,677.289 1447.83,674.739 1448.39,642.65 1448.95,642.225 1449.51,659.308 1450.07,676.838 1450.63,659.363 1451.19,695.735 1451.75,696.292 1452.31,681.918 1452.87,685.704 1453.42,655.973 1453.98,655.831 1454.54,659.112 1455.1,688.457 1455.66,657.619 1456.22,631.494 1456.78,651.103 1457.34,656.044 1457.9,658.796 1458.46,709.548 1459.02,724.295 1459.58,707.858 1460.14,707.696 1460.7,690.641 1461.25,674.881 1461.81,694.219 1462.37,679.577 1462.93,662.89 1463.49,677.996 1464.05,692.722 1464.61,721.916 1465.17,721.382 1465.73,686.947 1466.29,671.133 1466.85,669.926 1467.41,668.369 1467.97,683.298 1468.52,700.153 1469.08,713.317 1469.64,711.231 1470.2,694.367 1470.76,694.208 1471.32,740.944 1471.88,737.702 1472.44,751.67 1473,716.066 1473.56,745.497 1474.12,742.285 1474.68,708.24 1475.24,696.234 1475.79,697.112 1476.35,664.071 1476.91,663.451 1477.47,630.092 1478.03,631.2 1478.59,587.625 1479.15,591.75 1479.71,580.61 1480.27,586.089 1480.83,557.147 1481.39,582.167 1481.95,586.356 1482.51,587.91 1483.07,594.164 1483.62,566.931 1484.18,557.001 1484.74,595.749 1485.3,584.705 1485.86,574.331 1486.42,549.031 1486.98,556.314 1487.54,564.072 1488.1,556.693 1488.66,565.808 1489.22,620.09 1489.78,671.642 1490.34,675.629 1490.89,676.568 1491.45,690.212 1492.01,705.204 1492.57,739.515 1493.13,750.097 1493.69,730.624 1494.25,710.403 1494.81,726.018 1495.37,755.429 1495.93,738.26 1496.49,748.487 1497.05,758.617 1497.61,756.675 1498.16,735.614 1498.72,718.991 1499.28,720.055 1499.84,711.723 1500.4,708.832 1500.96,687.358 1501.52,718.217 1502.08,717.728 1502.64,716.399 1503.2,680.599 1503.76,645.762 1504.32,659.865 1504.88,643.867 1505.44,675.925 1505.99,675.532 1506.55,640.833 1507.11,642.595 1507.67,645.162 1508.23,647.464 1508.79,649.816 1509.35,635.225 1509.91,621.314 1510.47,627.876 1511.03,632.481 1511.59,634.673 1512.15,603.043 1512.71,638.24 1513.26,655.657 1513.82,670.265 1514.38,702.764 1514.94,716.774 1515.5,699.491 1516.06,746.095 1516.62,775.984 1517.18,756.45 1517.74,736.146 1518.3,733.41 1518.86,713.433 1519.42,712.302 1519.98,728.746 1520.53,743.546 1521.09,757.916 1521.65,758.847 1522.21,741.005 1522.77,722.835 1523.33,737.313 1523.89,733.61 1524.45,746.372 1525.01,756.429 1525.57,704.767 1526.13,704.661 1526.69,687.825 1527.25,657.037 1527.81,674.522 1528.36,676.685 1528.92,691.771 1529.48,692.409 1530.04,691.711 1530.6,705.562 1531.16,716.144 1531.72,682.202 1532.28,682.179 1532.84,683.491 1533.4,697.689 1533.96,694.905 1534.52,711.856 1535.08,710.485 1535.63,739.561 1536.19,707.354 1536.75,707.373 1537.31,693.007 1537.87,694.133 1538.43,676.443 1538.99,642.336 1539.55,631.745 1540.11,632.312 1540.67,652.034 1541.23,684.84 1541.79,669.165 1542.35,683.473 1542.9,715.928 1543.46,698.775 1544.02,684.887 1544.58,683.534 1545.14,684.59 1545.7,703.258 1546.26,716.137 1546.82,700.733 1547.38,665.571 1547.94,665.446 1548.5,652.317 1549.06,656.134 1549.62,673.76 1550.18,656.818 1550.73,671.18 1551.29,690.328 1551.85,660.872 1552.41,645.287 1552.97,649.455 1553.53,699.708 1554.09,745.03 1554.65,754.801 1555.21,769.74 1555.77,730.747 1556.33,715.76 1556.89,714.591 1557.45,711.234 1558,693.872 1558.56,679.368 1559.12,660.209 1559.68,646.041 1560.24,680.687 1560.8,696.926 1561.36,693.783 1561.92,712.401 1562.48,696.879 1563.04,694.422 1563.6,679.199 1564.16,679.285 1564.72,679.327 1565.28,678.205 1565.83,662.365 1566.39,665.672 1566.95,652.536 1567.51,655.216 1568.07,641.252 1568.63,591.48 1569.19,611.804 1569.75,615.89 1570.31,667.918 1570.87,667.864 1571.43,669.135 1571.99,667.788 1572.55,653.349 1573.1,671.722 1573.66,673.91 1574.22,674.797 1574.78,693.777 1575.34,709.58 1575.9,708.083 1576.46,723.611 1577.02,722.152 1577.58,688.888 1578.14,654.246 1578.7,640.083 1579.26,644.682 1579.82,647.651 1580.37,652.209 1580.93,685.863 1581.49,672.496 1582.05,637.83 1582.61,644.572 1583.17,647.363 1583.73,684.855 1584.29,703.544 1584.85,751.109 1585.41,780.673 1585.97,777.785 1586.53,742.955 1587.09,741.873 1587.65,690.846 1588.2,689.161 1588.76,689.105 1589.32,670.831 1589.88,657.897 1590.44,703.554 1591,689.899 1591.56,692.607 1592.12,710.258 1592.68,710.304 1593.24,756.945 1593.8,738.69 1594.36,720.247 1594.92,733.959 1595.47,718.229 1596.03,733.388 1596.59,731.124 1597.15,713.342 1597.71,742.904 1598.27,742.005 1598.83,657.045 1599.39,661.677 1599.95,663.53 1600.51,664.727 1601.07,663.367 1601.63,647.661 1602.19,699.32 1602.74,681.557 1603.3,698.477 1603.86,681.796 1604.42,684.696 1604.98,685.911 1605.54,652.551 1606.1,670.443 1606.66,656.423 1607.22,643.274 1607.78,629.094 1608.34,619.157 1608.9,623.576 1609.46,626.241 1610.02,563.239 1610.57,567.592 1611.13,574.55 1611.69,567.385 1612.25,558.234 1612.81,598.692 1613.37,590.939 1613.93,599.436 1614.49,569.817 1615.05,592.154 1615.61,612.479 1616.17,618.595 1616.73,656.586 1617.29,689.495 1617.84,704.072 1618.4,687.523 1618.96,687.205 1619.52,687.702 1620.08,654.642 1620.64,624.052 1621.2,624.451 1621.76,655.57 1622.32,690.406 1622.88,689.751 1623.44,671.28 1624,688.294 1624.56,689.471 1625.11,705.849 1625.67,705.754 1626.23,701.061 1626.79,687.228 1627.35,684.413 1627.91,647.785 1628.47,667.351 1629.03,651.534 1629.59,654.969 1630.15,668.991 1630.71,668.946 1631.27,679.849 1631.83,712.341 1632.39,745.342 1632.94,756.096 1633.5,767.49 1634.06,761.875 1634.62,754.037 1635.18,766.215 1635.74,744.212 1636.3,739.064 1636.86,688.106 1637.42,685.819 1637.98,669.939 1638.54,653.012 1639.1,668.928 1639.66,681.157 1640.21,682.086 1640.77,694.947 1641.33,697.792 1641.89,699.201 1642.45,730.147 1643.01,741.903 1643.57,709.934 1644.13,691.937 1644.69,708.168 1645.25,673.269 1645.81,673.42 1646.37,640.98 1646.93,660.136 1647.48,645.18 1648.04,629.54 1648.6,651.764 1649.16,652.422 1649.72,669.976 1650.28,636.764 1650.84,673.187 1651.4,706.793 1651.96,692.344 1652.52,673.104 1653.08,675.194 1653.64,691.542 1654.2,710.078 1654.76,694.221 1655.31,725.107 1655.87,744.193 1656.43,741.757 1656.99,742.995 1657.55,770.147 1658.11,749.195 1658.67,760.517 1659.23,772.848 1659.79,799.462 1660.35,760.301 1660.91,775.335 1661.47,782.791 1662.03,776.664 1662.58,786.679 1663.14,761.773 1663.7,759.648 1664.26,704.789 1664.82,668.983 1665.38,687.739 1665.94,671.251 1666.5,688.952 1667.06,706.656 1667.62,655.15 1668.18,643.67 1668.74,660.771 1669.3,662.582 1669.85,616.294 1670.41,605.906 1670.97,642.445 1671.53,661.262 1672.09,675.131 1672.65,692.775 1673.21,740.427 1673.77,720.32 1674.33,736.17 1674.89,671.94 1675.45,672.544 1676.01,703.925 1676.57,702.895 1677.13,700.427 1677.68,713.136 1678.24,724.815 1678.8,754.631 1679.36,770.839 1679.92,764.309 1680.48,742.715 1681.04,772.6 1681.6,767.507 1682.16,779.873 1682.72,774.81 1683.28,736.051 1683.84,750.042 1684.4,762.622 1684.95,743.996 1685.51,741.195 1686.07,706.942 1686.63,704.012 1687.19,687.116 1687.75,654.006 1688.31,669.846 1688.87,684.859 1689.43,654.409 1689.99,661.633 1690.55,680.959 1691.11,628.943 1691.67,610.973 1692.23,618.625 1692.78,603.027 1693.34,640.476 1693.9,646.938 1694.46,647.054 1695.02,570.927 1695.58,623.906 1696.14,660.184 1696.7,644.058 1697.26,645.478 1697.82,678.243 1698.38,676.082 1698.94,610.303 1699.5,599.333 1700.05,557.91 1700.61,581.324 1701.17,588.176 1701.73,595.715 1702.29,585.98 1702.85,591.06 1703.41,578.908 1703.97,617.908 1704.53,602.985 1705.09,605.475 1705.65,627.919 1706.21,599.539 1706.77,618.784 1707.32,621.345 1707.88,607.903 1708.44,612.956 1709,628.162 1709.56,648.421 1710.12,618.904 1710.68,606.512 1711.24,596.392 1711.8,597.16 1712.36,605.566 1712.92,614.055 1713.48,665.032 1714.04,681.653 1714.6,665.404 1715.15,648.634 1715.71,635.636 1716.27,636.234 1716.83,650.57 1717.39,669.562 1717.95,702.217 1718.51,669.861 1719.07,686.165 1719.63,687.36 1720.19,702.607 1720.75,734.795 1721.31,733.358 1721.87,720.032 1722.42,718.399 1722.98,733.318 1723.54,735.322 1724.1,700.235 1724.66,686.531 1725.22,671.439 1725.78,673.974 1726.34,693.521 1726.9,693.288 1727.46,695.499 1728.02,694.201 1728.58,699.718 1729.14,701.881 1729.69,718.589 1730.25,699.03 1730.81,701.995 1731.37,701.302 1731.93,700.234 1732.49,714.856 1733.05,716.261 1733.61,699.014 1734.17,712.491 1734.73,711.395 1735.29,712.659 1735.85,710.026 1736.41,641.576 1736.97,630.009 1737.52,650.876 1738.08,649.825 1738.64,650.594 1739.2,626.047 1739.76,644.541 1740.32,648.243 1740.88,667.784 1741.44,663.835 1742,648.915 1742.56,668.719 1743.12,682.9 1743.68,665.228 1744.24,662.787 1744.79,646.638 1745.35,693.469 1745.91,675.758 1746.47,693.674 1747.03,723.747 1747.59,753.426 1748.15,767.409 1748.71,764.154 1749.27,742.394 1749.83,725.466 1750.39,711.131 1750.95,676.881 1751.51,681.349 1752.06,682.301 1752.62,727.526 1753.18,726.021 1753.74,722.043 1754.3,737.149 1754.86,719.53 1755.42,701.251 1755.98,733.111 1756.54,714.253 1757.1,698.291 1757.66,682.094 1758.22,679.463 1758.78,649.111 1759.34,667.037 1759.89,700.807 1760.45,698.818 1761.01,694.431 1761.57,706.446 1762.13,688.447 1762.69,654.313 1763.25,623.344 1763.81,626.742 1764.37,620.805 1764.93,606.725 1765.49,641.507 1766.05,628.016 1766.61,695.377 1767.16,694.79 1767.72,693.354 1768.28,710.095 1768.84,723.348 1769.4,736.943 1769.96,731.793 1770.52,743.944 1771.08,741.372 1771.64,740.126 1772.2,722.199 1772.76,719.267 1773.32,719.228 1773.88,716.585 1774.43,697.697 1774.99,715.939 1775.55,727.639 1776.11,742.46 1776.67,736.063 1777.23,733.158 1777.79,749.644 1778.35,742.905 1778.91,741.073 1779.47,723.949 1780.03,708.194 1780.59,692.274 1781.15,724.919 1781.71,740.54 1782.26,768.652 1782.82,748.063 1783.38,727.471 1783.94,724.309 1784.5,726.228 1785.06,726.578 1785.62,708.854 1786.18,657.507 1786.74,640.612 1787.3,641.14 1787.86,624.433 1788.42,642.77 1788.98,627.023 1789.53,630.277 1790.09,636.938 1790.65,669.778 1791.21,656.962 1791.77,638.764 1792.33,608.196 1792.89,631.901 1793.45,638.671 1794.01,672.875 1794.57,689.291 1795.13,641.284 1795.69,660.912 1796.25,693.402 1796.8,726.647 1797.36,723.811 1797.92,739.766 1798.48,737.548 1799.04,730.623 1799.6,727.339 1800.16,708.898 1800.72,722.716 1801.28,704.357 1801.84,733.663 1802.4,765.916 1802.96,774.806 1803.52,755.249 1804.08,734.041 1804.63,713.272 1805.19,725.921 1805.75,707.585 1806.31,707.101 1806.87,691.696 1807.43,659.317 1807.99,643.792 1808.55,645.172 1809.11,618.097 1809.67,557.328 1810.23,598.453 1810.79,603.918 1811.35,627.029 1811.9,630.93 1812.46,650.984 1813.02,671.877 1813.58,674.106 1814.14,659.393 1814.7,705.674 1815.26,736.155 1815.82,750.703 1816.38,714.464 1816.94,710.919 1817.5,709.867 1818.06,677.847 1818.62,648.365 1819.18,649.458 1819.73,634.61 1820.29,653.278 1820.85,642.849 1821.41,643.919 1821.97,645.76 1822.53,632.463 1823.09,668.078 1823.65,652.912 1824.21,668.175 1824.77,684.615 1825.33,668 1825.89,701.872 1826.45,686.627 1827,686.744 1827.56,718.261 1828.12,732.545 1828.68,764.87 1829.24,776.615 1829.8,755.757 1830.36,704.45 1830.92,687.347 1831.48,687.979 1832.04,659.331 1832.6,627.657 1833.16,630.146 1833.72,635.247 1834.27,605.546 1834.83,610.027 1835.39,616.168 1835.95,621.957 1836.51,624.048 1837.07,626.532 1837.63,645.754 1838.19,631.155 \"/>\n<path clip-path=\"url(#clip343)\" d=\"M720.247 690.561 L720.806 690.561 L721.365 690.561 L721.924 690.561 L722.484 690.561 L723.043 690.561 L723.602 690.561 L724.161 690.561 L724.721 690.561 L725.28 690.561 L725.839 690.561 L726.398 690.561 L726.958 690.561 L727.517 690.561 L728.076 690.561 L728.635 690.561 L729.195 690.561 L729.754 690.561 L730.313 690.561 L730.872 690.561 L731.432 690.561 L731.991 690.561 L732.55 690.561 L733.109 690.561 L733.669 690.561 L734.228 690.561 L734.787 690.561 L735.346 690.561 L735.906 690.561 L736.465 690.561 L737.024 690.561 L737.583 690.561 L738.143 690.561 L738.702 690.561 L739.261 690.561 L739.82 690.561 L740.38 690.561 L740.939 690.561 L741.498 690.561 L742.057 690.561 L742.617 690.561 L743.176 690.561 L743.735 690.561 L744.294 690.561 L744.854 690.561 L745.413 690.561 L745.972 690.561 L746.531 690.561 L747.091 690.561 L747.65 690.561 L748.209 690.561 L748.768 690.561 L749.328 690.561 L749.887 690.561 L750.446 690.561 L751.005 690.561 L751.565 690.561 L752.124 690.561 L752.683 690.561 L753.242 690.561 L753.802 690.561 L754.361 690.561 L754.92 690.561 L755.479 690.561 L756.039 690.561 L756.598 690.561 L757.157 690.561 L757.716 690.561 L758.276 690.561 L758.835 690.561 L759.394 690.561 L759.953 690.561 L760.513 690.561 L761.072 690.561 L761.631 690.561 L762.19 690.561 L762.75 690.561 L763.309 690.561 L763.868 690.561 L764.427 690.561 L764.987 690.561 L765.546 690.561 L766.105 690.561 L766.664 690.561 L767.224 690.561 L767.783 690.561 L768.342 690.561 L768.901 690.561 L769.461 690.561 L770.02 690.561 L770.579 690.561 L771.138 690.561 L771.698 690.561 L772.257 690.561 L772.816 690.561 L773.375 690.561 L773.935 690.561 L774.494 690.561 L775.053 690.561 L775.612 690.561 L776.172 690.561 L776.731 690.561 L777.29 690.561 L777.849 690.561 L778.409 690.561 L778.968 690.561 L779.527 690.561 L780.086 690.561 L780.646 690.561 L781.205 690.561 L781.764 690.561 L782.323 690.561 L782.883 690.561 L783.442 690.561 L784.001 690.561 L784.56 690.561 L785.12 690.561 L785.679 690.561 L786.238 690.561 L786.797 690.561 L787.357 690.561 L787.916 690.561 L788.475 690.561 L789.034 690.561 L789.594 690.561 L790.153 690.561 L790.712 690.561 L791.271 690.561 L791.831 690.561 L792.39 690.561 L792.949 690.561 L793.508 690.561 L794.068 690.561 L794.627 690.561 L795.186 690.561 L795.745 690.561 L796.305 690.561 L796.864 690.561 L797.423 690.561 L797.982 690.561 L798.542 690.561 L799.101 690.561 L799.66 690.561 L800.219 690.561 L800.779 690.561 L801.338 690.561 L801.897 690.561 L802.456 690.561 L803.016 690.561 L803.575 690.561 L804.134 690.561 L804.693 690.561 L805.253 690.561 L805.812 690.561 L806.371 690.561 L806.931 690.561 L807.49 690.561 L808.049 690.561 L808.608 690.561 L809.168 690.561 L809.727 690.561 L810.286 690.561 L810.845 690.561 L811.405 690.561 L811.964 690.561 L812.523 690.561 L813.082 690.561 L813.642 690.561 L814.201 690.561 L814.76 690.561 L815.319 690.561 L815.879 690.561 L816.438 690.561 L816.997 690.561 L817.556 690.561 L818.116 690.561 L818.675 690.561 L819.234 690.561 L819.793 690.561 L820.353 690.561 L820.912 690.561 L821.471 690.561 L822.03 690.561 L822.59 690.561 L823.149 690.561 L823.708 690.561 L824.267 690.561 L824.827 690.561 L825.386 690.561 L825.945 690.561 L826.504 690.561 L827.064 690.561 L827.623 690.561 L828.182 690.561 L828.741 690.561 L829.301 690.561 L829.86 690.561 L830.419 690.561 L830.978 690.561 L831.538 690.561 L832.097 690.561 L832.656 690.561 L833.215 690.561 L833.775 690.561 L834.334 690.561 L834.893 690.561 L835.452 690.561 L836.012 690.561 L836.571 690.561 L837.13 690.561 L837.689 690.561 L838.249 690.561 L838.808 690.561 L839.367 690.561 L839.926 690.561 L840.486 690.561 L841.045 690.561 L841.604 690.561 L842.163 690.561 L842.723 690.561 L843.282 690.561 L843.841 690.561 L844.4 690.561 L844.96 690.561 L845.519 690.561 L846.078 690.561 L846.637 690.561 L847.197 690.561 L847.756 690.561 L848.315 690.561 L848.874 690.561 L849.434 690.561 L849.993 690.561 L850.552 690.561 L851.111 690.561 L851.671 690.561 L852.23 690.561 L852.789 690.561 L853.348 690.561 L853.908 690.561 L854.467 690.561 L855.026 690.561 L855.585 690.561 L856.145 690.561 L856.704 690.561 L857.263 690.561 L857.822 690.561 L858.382 690.561 L858.941 690.561 L859.5 690.561 L860.059 690.561 L860.619 690.561 L861.178 690.561 L861.737 690.561 L862.296 690.561 L862.856 690.561 L863.415 690.561 L863.974 690.561 L864.533 690.561 L865.093 690.561 L865.652 690.561 L866.211 690.561 L866.77 690.561 L867.33 690.561 L867.889 690.561 L868.448 690.561 L869.007 690.561 L869.567 690.561 L870.126 690.561 L870.685 690.561 L871.244 690.561 L871.804 690.561 L872.363 690.561 L872.922 690.561 L873.481 690.561 L874.041 690.561 L874.6 690.561 L875.159 690.561 L875.718 690.561 L876.278 690.561 L876.837 690.561 L877.396 690.561 L877.955 690.561 L878.515 690.561 L879.074 690.561 L879.633 690.561 L880.192 690.561 L880.752 690.561 L881.311 690.561 L881.87 690.561 L882.429 690.561 L882.989 690.561 L883.548 690.561 L884.107 690.561 L884.666 690.561 L885.226 690.561 L885.785 690.561 L886.344 690.561 L886.903 690.561 L887.463 690.561 L888.022 690.561 L888.581 690.561 L889.14 690.561 L889.7 690.561 L890.259 690.561 L890.818 690.561 L891.377 690.561 L891.937 690.561 L892.496 690.561 L893.055 690.561 L893.614 690.561 L894.174 690.561 L894.733 690.561 L895.292 690.561 L895.851 690.561 L896.411 690.561 L896.97 690.561 L897.529 690.561 L898.088 690.561 L898.648 690.561 L899.207 690.561 L899.766 690.561 L900.325 690.561 L900.885 690.561 L901.444 690.561 L902.003 690.561 L902.562 690.561 L903.122 690.561 L903.681 690.561 L904.24 690.561 L904.799 690.561 L905.359 690.561 L905.918 690.561 L906.477 690.561 L907.036 690.561 L907.596 690.561 L908.155 690.561 L908.714 690.561 L909.273 690.561 L909.833 690.561 L910.392 690.561 L910.951 690.561 L911.51 690.561 L912.07 690.561 L912.629 690.561 L913.188 690.561 L913.747 690.561 L914.307 690.561 L914.866 690.561 L915.425 690.561 L915.984 690.561 L916.544 690.561 L917.103 690.561 L917.662 690.561 L918.221 690.561 L918.781 690.561 L919.34 690.561 L919.899 690.561 L920.458 690.561 L921.018 690.561 L921.577 690.561 L922.136 690.561 L922.695 690.561 L923.255 690.561 L923.814 690.561 L924.373 690.561 L924.932 690.561 L925.492 690.561 L926.051 690.561 L926.61 690.561 L927.169 690.561 L927.729 690.561 L928.288 690.561 L928.847 690.561 L929.406 690.561 L929.966 690.561 L930.525 690.561 L931.084 690.561 L931.644 690.561 L932.203 690.561 L932.762 690.561 L933.321 690.561 L933.881 690.561 L934.44 690.561 L934.999 690.561 L935.558 690.561 L936.118 690.561 L936.677 690.561 L937.236 690.561 L937.795 690.561 L938.355 690.561 L938.914 690.561 L939.473 690.561 L940.032 690.561 L940.592 690.561 L941.151 690.561 L941.71 690.561 L942.269 690.561 L942.829 690.561 L943.388 690.561 L943.947 690.561 L944.506 690.561 L945.066 690.561 L945.625 690.561 L946.184 690.561 L946.743 690.561 L947.303 690.561 L947.862 690.561 L948.421 690.561 L948.98 690.561 L949.54 690.561 L950.099 690.561 L950.658 690.561 L951.217 690.561 L951.777 690.561 L952.336 690.561 L952.895 690.561 L953.454 690.561 L954.014 690.561 L954.573 690.561 L955.132 690.561 L955.691 690.561 L956.251 690.561 L956.81 690.561 L957.369 690.561 L957.928 690.561 L958.488 690.561 L959.047 690.561 L959.606 690.561 L960.165 690.561 L960.725 690.561 L961.284 690.561 L961.843 690.561 L962.402 690.561 L962.962 690.561 L963.521 690.561 L964.08 690.561 L964.639 690.561 L965.199 690.561 L965.758 690.561 L966.317 690.561 L966.876 690.561 L967.436 690.561 L967.995 690.561 L968.554 690.561 L969.113 690.561 L969.673 690.561 L970.232 690.561 L970.791 690.561 L971.35 690.561 L971.91 690.561 L972.469 690.561 L973.028 690.561 L973.587 690.561 L974.147 690.561 L974.706 690.561 L975.265 690.561 L975.824 690.561 L976.384 690.561 L976.943 690.561 L977.502 690.561 L978.061 690.561 L978.621 690.561 L979.18 690.561 L979.739 690.561 L980.298 690.561 L980.858 690.561 L981.417 690.561 L981.976 690.561 L982.535 690.561 L983.095 690.561 L983.654 690.561 L984.213 690.561 L984.772 690.561 L985.332 690.561 L985.891 690.561 L986.45 690.561 L987.009 690.561 L987.569 690.561 L988.128 690.561 L988.687 690.561 L989.246 690.561 L989.806 690.561 L990.365 690.561 L990.924 690.561 L991.483 690.561 L992.043 690.561 L992.602 690.561 L993.161 690.561 L993.72 690.561 L994.28 690.561 L994.839 690.561 L995.398 690.561 L995.957 690.561 L996.517 690.561 L997.076 690.561 L997.635 690.561 L998.194 690.561 L998.754 690.561 L999.313 690.561 L999.872 690.561 L1000.43 690.561 L1000.99 690.561 L1001.55 690.561 L1002.11 690.561 L1002.67 690.561 L1003.23 690.561 L1003.79 690.561 L1004.35 690.561 L1004.91 690.561 L1005.46 690.561 L1006.02 690.561 L1006.58 690.561 L1007.14 690.561 L1007.7 690.561 L1008.26 690.561 L1008.82 690.561 L1009.38 690.561 L1009.94 690.561 L1010.5 690.561 L1011.06 690.561 L1011.62 690.561 L1012.18 690.561 L1012.73 690.561 L1013.29 690.561 L1013.85 690.561 L1014.41 690.561 L1014.97 690.561 L1015.53 690.561 L1016.09 690.561 L1016.65 690.561 L1017.21 690.561 L1017.77 690.561 L1018.33 690.561 L1018.89 690.561 L1019.45 690.561 L1020.01 690.561 L1020.56 690.561 L1021.12 690.561 L1021.68 690.561 L1022.24 690.561 L1022.8 690.561 L1023.36 690.561 L1023.92 690.561 L1024.48 690.561 L1025.04 690.561 L1025.6 690.561 L1026.16 690.561 L1026.72 690.561 L1027.28 690.561 L1027.83 690.561 L1028.39 690.561 L1028.95 690.561 L1029.51 690.561 L1030.07 690.561 L1030.63 690.561 L1031.19 690.561 L1031.75 690.561 L1032.31 690.561 L1032.87 690.561 L1033.43 690.561 L1033.99 690.561 L1034.55 690.561 L1035.1 690.561 L1035.66 690.561 L1036.22 690.561 L1036.78 690.561 L1037.34 690.561 L1037.9 690.561 L1038.46 690.561 L1039.02 690.561 L1039.58 690.561 L1040.14 690.561 L1040.7 690.561 L1041.26 690.561 L1041.82 690.561 L1042.38 690.561 L1042.93 690.561 L1043.49 690.561 L1044.05 690.561 L1044.61 690.561 L1045.17 690.561 L1045.73 690.561 L1046.29 690.561 L1046.85 690.561 L1047.41 690.561 L1047.97 690.561 L1048.53 690.561 L1049.09 690.561 L1049.65 690.561 L1050.2 690.561 L1050.76 690.561 L1051.32 690.561 L1051.88 690.561 L1052.44 690.561 L1053 690.561 L1053.56 690.561 L1054.12 690.561 L1054.68 690.561 L1055.24 690.561 L1055.8 690.561 L1056.36 690.561 L1056.92 690.561 L1057.48 690.561 L1058.03 690.561 L1058.59 690.561 L1059.15 690.561 L1059.71 690.561 L1060.27 690.561 L1060.83 690.561 L1061.39 690.561 L1061.95 690.561 L1062.51 690.561 L1063.07 690.561 L1063.63 690.561 L1064.19 690.561 L1064.75 690.561 L1065.3 690.561 L1065.86 690.561 L1066.42 690.561 L1066.98 690.561 L1067.54 690.561 L1068.1 690.561 L1068.66 690.561 L1069.22 690.561 L1069.78 690.561 L1070.34 690.561 L1070.9 690.561 L1071.46 690.561 L1072.02 690.561 L1072.57 690.561 L1073.13 690.561 L1073.69 690.561 L1074.25 690.561 L1074.81 690.561 L1075.37 690.561 L1075.93 690.561 L1076.49 690.561 L1077.05 690.561 L1077.61 690.561 L1078.17 690.561 L1078.73 690.561 L1079.29 690.561 L1079.85 690.561 L1080.4 690.561 L1080.96 690.561 L1081.52 690.561 L1082.08 690.561 L1082.64 690.561 L1083.2 690.561 L1083.76 690.561 L1084.32 690.561 L1084.88 690.561 L1085.44 690.561 L1086 690.561 L1086.56 690.561 L1087.12 690.561 L1087.67 690.561 L1088.23 690.561 L1088.79 690.561 L1089.35 690.561 L1089.91 690.561 L1090.47 690.561 L1091.03 690.561 L1091.59 690.561 L1092.15 690.561 L1092.71 690.561 L1093.27 690.561 L1093.83 690.561 L1094.39 690.561 L1094.94 690.561 L1095.5 690.561 L1096.06 690.561 L1096.62 690.561 L1097.18 690.561 L1097.74 690.561 L1098.3 690.561 L1098.86 690.561 L1099.42 690.561 L1099.98 690.561 L1100.54 690.561 L1101.1 690.561 L1101.66 690.561 L1102.22 690.561 L1102.77 690.561 L1103.33 690.561 L1103.89 690.561 L1104.45 690.561 L1105.01 690.561 L1105.57 690.561 L1106.13 690.561 L1106.69 690.561 L1107.25 690.561 L1107.81 690.561 L1108.37 690.561 L1108.93 690.561 L1109.49 690.561 L1110.04 690.561 L1110.6 690.561 L1111.16 690.561 L1111.72 690.561 L1112.28 690.561 L1112.84 690.561 L1113.4 690.561 L1113.96 690.561 L1114.52 690.561 L1115.08 690.561 L1115.64 690.561 L1116.2 690.561 L1116.76 690.561 L1117.31 690.561 L1117.87 690.561 L1118.43 690.561 L1118.99 690.561 L1119.55 690.561 L1120.11 690.561 L1120.67 690.561 L1121.23 690.561 L1121.79 690.561 L1122.35 690.561 L1122.91 690.561 L1123.47 690.561 L1124.03 690.561 L1124.59 690.561 L1125.14 690.561 L1125.7 690.561 L1126.26 690.561 L1126.82 690.561 L1127.38 690.561 L1127.94 690.561 L1128.5 690.561 L1129.06 690.561 L1129.62 690.561 L1130.18 690.561 L1130.74 690.561 L1131.3 690.561 L1131.86 690.561 L1132.41 690.561 L1132.97 690.561 L1133.53 690.561 L1134.09 690.561 L1134.65 690.561 L1135.21 690.561 L1135.77 690.561 L1136.33 690.561 L1136.89 690.561 L1137.45 690.561 L1138.01 690.561 L1138.57 690.561 L1139.13 690.561 L1139.68 690.561 L1140.24 690.561 L1140.8 690.561 L1141.36 690.561 L1141.92 690.561 L1142.48 690.561 L1143.04 690.561 L1143.6 690.561 L1144.16 690.561 L1144.72 690.561 L1145.28 690.561 L1145.84 690.561 L1146.4 690.561 L1146.96 690.561 L1147.51 690.561 L1148.07 690.561 L1148.63 690.561 L1149.19 690.561 L1149.75 690.561 L1150.31 690.561 L1150.87 690.561 L1151.43 690.561 L1151.99 690.561 L1152.55 690.561 L1153.11 690.561 L1153.67 690.561 L1154.23 690.561 L1154.78 690.561 L1155.34 690.561 L1155.9 690.561 L1156.46 690.561 L1157.02 690.561 L1157.58 690.561 L1158.14 690.561 L1158.7 690.561 L1159.26 690.561 L1159.82 690.561 L1160.38 690.561 L1160.94 690.561 L1161.5 690.561 L1162.05 690.561 L1162.61 690.561 L1163.17 690.561 L1163.73 690.561 L1164.29 690.561 L1164.85 690.561 L1165.41 690.561 L1165.97 690.561 L1166.53 690.561 L1167.09 690.561 L1167.65 690.561 L1168.21 690.561 L1168.77 690.561 L1169.33 690.561 L1169.88 690.561 L1170.44 690.561 L1171 690.561 L1171.56 690.561 L1172.12 690.561 L1172.68 690.561 L1173.24 690.561 L1173.8 690.561 L1174.36 690.561 L1174.92 690.561 L1175.48 690.561 L1176.04 690.561 L1176.6 690.561 L1177.15 690.561 L1177.71 690.561 L1178.27 690.561 L1178.83 690.561 L1179.39 690.561 L1179.95 690.561 L1180.51 690.561 L1181.07 690.561 L1181.63 690.561 L1182.19 690.561 L1182.75 690.561 L1183.31 690.561 L1183.87 690.561 L1184.43 690.561 L1184.98 690.561 L1185.54 690.561 L1186.1 690.561 L1186.66 690.561 L1187.22 690.561 L1187.78 690.561 L1188.34 690.561 L1188.9 690.561 L1189.46 690.561 L1190.02 690.561 L1190.58 690.561 L1191.14 690.561 L1191.7 690.561 L1192.25 690.561 L1192.81 690.561 L1193.37 690.561 L1193.93 690.561 L1194.49 690.561 L1195.05 690.561 L1195.61 690.561 L1196.17 690.561 L1196.73 690.561 L1197.29 690.561 L1197.85 690.561 L1198.41 690.561 L1198.97 690.561 L1199.52 690.561 L1200.08 690.561 L1200.64 690.561 L1201.2 690.561 L1201.76 690.561 L1202.32 690.561 L1202.88 690.561 L1203.44 690.561 L1204 690.561 L1204.56 690.561 L1205.12 690.561 L1205.68 690.561 L1206.24 690.561 L1206.8 690.561 L1207.35 690.561 L1207.91 690.561 L1208.47 690.561 L1209.03 690.561 L1209.59 690.561 L1210.15 690.561 L1210.71 690.561 L1211.27 690.561 L1211.83 690.561 L1212.39 690.561 L1212.95 690.561 L1213.51 690.561 L1214.07 690.561 L1214.62 690.561 L1215.18 690.561 L1215.74 690.561 L1216.3 690.561 L1216.86 690.561 L1217.42 690.561 L1217.98 690.561 L1218.54 690.561 L1219.1 690.561 L1219.66 690.561 L1220.22 690.561 L1220.78 690.561 L1221.34 690.561 L1221.89 690.561 L1222.45 690.561 L1223.01 690.561 L1223.57 690.561 L1224.13 690.561 L1224.69 690.561 L1225.25 690.561 L1225.81 690.561 L1226.37 690.561 L1226.93 690.561 L1227.49 690.561 L1228.05 690.561 L1228.61 690.561 L1229.17 690.561 L1229.72 690.561 L1230.28 690.561 L1230.84 690.561 L1231.4 690.561 L1231.96 690.561 L1232.52 690.561 L1233.08 690.561 L1233.64 690.561 L1234.2 690.561 L1234.76 690.561 L1235.32 690.561 L1235.88 690.561 L1236.44 690.561 L1236.99 690.561 L1237.55 690.561 L1238.11 690.561 L1238.67 690.561 L1239.23 690.561 L1239.79 690.561 L1240.35 690.561 L1240.91 690.561 L1241.47 690.561 L1242.03 690.561 L1242.59 690.561 L1243.15 690.561 L1243.71 690.561 L1244.26 690.561 L1244.82 690.561 L1245.38 690.561 L1245.94 690.561 L1246.5 690.561 L1247.06 690.561 L1247.62 690.561 L1248.18 690.561 L1248.74 690.561 L1249.3 690.561 L1249.86 690.561 L1250.42 690.561 L1250.98 690.561 L1251.54 690.561 L1252.09 690.561 L1252.65 690.561 L1253.21 690.561 L1253.77 690.561 L1254.33 690.561 L1254.89 690.561 L1255.45 690.561 L1256.01 690.561 L1256.57 690.561 L1257.13 690.561 L1257.69 690.561 L1258.25 690.561 L1258.81 690.561 L1259.36 690.561 L1259.92 690.561 L1260.48 690.561 L1261.04 690.561 L1261.6 690.561 L1262.16 690.561 L1262.72 690.561 L1263.28 690.561 L1263.84 690.561 L1264.4 690.561 L1264.96 690.561 L1265.52 690.561 L1266.08 690.561 L1266.63 690.561 L1267.19 690.561 L1267.75 690.561 L1268.31 690.561 L1268.87 690.561 L1269.43 690.561 L1269.99 690.561 L1270.55 690.561 L1271.11 690.561 L1271.67 690.561 L1272.23 690.561 L1272.79 690.561 L1273.35 690.561 L1273.91 690.561 L1274.46 690.561 L1275.02 690.561 L1275.58 690.561 L1276.14 690.561 L1276.7 690.561 L1277.26 690.561 L1277.82 690.561 L1278.38 690.561 L1278.94 690.561 L1279.5 690.561 L1280.06 690.561 L1280.62 690.561 L1281.18 690.561 L1281.73 690.561 L1282.29 690.561 L1282.85 690.561 L1283.41 690.561 L1283.97 690.561 L1284.53 690.561 L1285.09 690.561 L1285.65 690.561 L1286.21 690.561 L1286.77 690.561 L1287.33 690.561 L1287.89 690.561 L1288.45 690.561 L1289 690.561 L1289.56 690.561 L1290.12 690.561 L1290.68 690.561 L1291.24 690.561 L1291.8 690.561 L1292.36 690.561 L1292.92 690.561 L1293.48 690.561 L1294.04 690.561 L1294.6 690.561 L1295.16 690.561 L1295.72 690.561 L1296.28 690.561 L1296.83 690.561 L1297.39 690.561 L1297.95 690.561 L1298.51 690.561 L1299.07 690.561 L1299.63 690.561 L1300.19 690.561 L1300.75 690.561 L1301.31 690.561 L1301.87 690.561 L1302.43 690.561 L1302.99 690.561 L1303.55 690.561 L1304.1 690.561 L1304.66 690.561 L1305.22 690.561 L1305.78 690.561 L1306.34 690.561 L1306.9 690.561 L1307.46 690.561 L1308.02 690.561 L1308.58 690.561 L1309.14 690.561 L1309.7 690.561 L1310.26 690.561 L1310.82 690.561 L1311.38 690.561 L1311.93 690.561 L1312.49 690.561 L1313.05 690.561 L1313.61 690.561 L1314.17 690.561 L1314.73 690.561 L1315.29 690.561 L1315.85 690.561 L1316.41 690.561 L1316.97 690.561 L1317.53 690.561 L1318.09 690.561 L1318.65 690.561 L1319.2 690.561 L1319.76 690.561 L1320.32 690.561 L1320.88 690.561 L1321.44 690.561 L1322 690.561 L1322.56 690.561 L1323.12 690.561 L1323.68 690.561 L1324.24 690.561 L1324.8 690.561 L1325.36 690.561 L1325.92 690.561 L1326.47 690.561 L1327.03 690.561 L1327.59 690.561 L1328.15 690.561 L1328.71 690.561 L1329.27 690.561 L1329.83 690.561 L1330.39 690.561 L1330.95 690.561 L1331.51 690.561 L1332.07 690.561 L1332.63 690.561 L1333.19 690.561 L1333.75 690.561 L1334.3 690.561 L1334.86 690.561 L1335.42 690.561 L1335.98 690.561 L1336.54 690.561 L1337.1 690.561 L1337.66 690.561 L1338.22 690.561 L1338.78 690.561 L1339.34 690.561 L1339.9 690.561 L1340.46 690.561 L1341.02 690.561 L1341.57 690.561 L1342.13 690.561 L1342.69 690.561 L1343.25 690.561 L1343.81 690.561 L1344.37 690.561 L1344.93 690.561 L1345.49 690.561 L1346.05 690.561 L1346.61 690.561 L1347.17 690.561 L1347.73 690.561 L1348.29 690.561 L1348.84 690.561 L1349.4 690.561 L1349.96 690.561 L1350.52 690.561 L1351.08 690.561 L1351.64 690.561 L1352.2 690.561 L1352.76 690.561 L1353.32 690.561 L1353.88 690.561 L1354.44 690.561 L1355 690.561 L1355.56 690.561 L1356.12 690.561 L1356.67 690.561 L1357.23 690.561 L1357.79 690.561 L1358.35 690.561 L1358.91 690.561 L1359.47 690.561 L1360.03 690.561 L1360.59 690.561 L1361.15 690.561 L1361.71 690.561 L1362.27 690.561 L1362.83 690.561 L1363.39 690.561 L1363.94 690.561 L1364.5 690.561 L1365.06 690.561 L1365.62 690.561 L1366.18 690.561 L1366.74 690.561 L1367.3 690.561 L1367.86 690.561 L1368.42 690.561 L1368.98 690.561 L1369.54 690.561 L1370.1 690.561 L1370.66 690.561 L1371.21 690.561 L1371.77 690.561 L1372.33 690.561 L1372.89 690.561 L1373.45 690.561 L1374.01 690.561 L1374.57 690.561 L1375.13 690.561 L1375.69 690.561 L1376.25 690.561 L1376.81 690.561 L1377.37 690.561 L1377.93 690.561 L1378.49 690.561 L1379.04 690.561 L1379.6 690.561 L1380.16 690.561 L1380.72 690.561 L1381.28 690.561 L1381.84 690.561 L1382.4 690.561 L1382.96 690.561 L1383.52 690.561 L1384.08 690.561 L1384.64 690.561 L1385.2 690.561 L1385.76 690.561 L1386.31 690.561 L1386.87 690.561 L1387.43 690.561 L1387.99 690.561 L1388.55 690.561 L1389.11 690.561 L1389.67 690.561 L1390.23 690.561 L1390.79 690.561 L1391.35 690.561 L1391.91 690.561 L1392.47 690.561 L1393.03 690.561 L1393.58 690.561 L1394.14 690.561 L1394.7 690.561 L1395.26 690.561 L1395.82 690.561 L1396.38 690.561 L1396.94 690.561 L1397.5 690.561 L1398.06 690.561 L1398.62 690.561 L1399.18 690.561 L1399.74 690.561 L1400.3 690.561 L1400.86 690.561 L1401.41 690.561 L1401.97 690.561 L1402.53 690.561 L1403.09 690.561 L1403.65 690.561 L1404.21 690.561 L1404.77 690.561 L1405.33 690.561 L1405.89 690.561 L1406.45 690.561 L1407.01 690.561 L1407.57 690.561 L1408.13 690.561 L1408.68 690.561 L1409.24 690.561 L1409.8 690.561 L1410.36 690.561 L1410.92 690.561 L1411.48 690.561 L1412.04 690.561 L1412.6 690.561 L1413.16 690.561 L1413.72 690.561 L1414.28 690.561 L1414.84 690.561 L1415.4 690.561 L1415.95 690.561 L1416.51 690.561 L1417.07 690.561 L1417.63 690.561 L1418.19 690.561 L1418.75 690.561 L1419.31 690.561 L1419.87 690.561 L1420.43 690.561 L1420.99 690.561 L1421.55 690.561 L1422.11 690.561 L1422.67 690.561 L1423.23 690.561 L1423.78 690.561 L1424.34 690.561 L1424.9 690.561 L1425.46 690.561 L1426.02 690.561 L1426.58 690.561 L1427.14 690.561 L1427.7 690.561 L1428.26 690.561 L1428.82 690.561 L1429.38 690.561 L1429.94 690.561 L1430.5 690.561 L1431.05 690.561 L1431.61 690.561 L1432.17 690.561 L1432.73 690.561 L1433.29 690.561 L1433.85 690.561 L1434.41 690.561 L1434.97 690.561 L1435.53 690.561 L1436.09 690.561 L1436.65 690.561 L1437.21 690.561 L1437.77 690.561 L1438.33 690.561 L1438.88 690.561 L1439.44 690.561 L1440 690.561 L1440.56 690.561 L1441.12 690.561 L1441.68 690.561 L1442.24 690.561 L1442.8 690.561 L1443.36 690.561 L1443.92 690.561 L1444.48 690.561 L1445.04 690.561 L1445.6 690.561 L1446.15 690.561 L1446.71 690.561 L1447.27 690.561 L1447.83 690.561 L1448.39 690.561 L1448.95 690.561 L1449.51 690.561 L1450.07 690.561 L1450.63 690.561 L1451.19 690.561 L1451.75 690.561 L1452.31 690.561 L1452.87 690.561 L1453.42 690.561 L1453.98 690.561 L1454.54 690.561 L1455.1 690.561 L1455.66 690.561 L1456.22 690.561 L1456.78 690.561 L1457.34 690.561 L1457.9 690.561 L1458.46 690.561 L1459.02 690.561 L1459.58 690.561 L1460.14 690.561 L1460.7 690.561 L1461.25 690.561 L1461.81 690.561 L1462.37 690.561 L1462.93 690.561 L1463.49 690.561 L1464.05 690.561 L1464.61 690.561 L1465.17 690.561 L1465.73 690.561 L1466.29 690.561 L1466.85 690.561 L1467.41 690.561 L1467.97 690.561 L1468.52 690.561 L1469.08 690.561 L1469.64 690.561 L1470.2 690.561 L1470.76 690.561 L1471.32 690.561 L1471.88 690.561 L1472.44 690.561 L1473 690.561 L1473.56 690.561 L1474.12 690.561 L1474.68 690.561 L1475.24 690.561 L1475.79 690.561 L1476.35 690.561 L1476.91 690.561 L1477.47 690.561 L1478.03 690.561 L1478.59 690.561 L1479.15 690.561 L1479.71 690.561 L1480.27 690.561 L1480.83 690.561 L1481.39 690.561 L1481.95 690.561 L1482.51 690.561 L1483.07 690.561 L1483.62 690.561 L1484.18 690.561 L1484.74 690.561 L1485.3 690.561 L1485.86 690.561 L1486.42 690.561 L1486.98 690.561 L1487.54 690.561 L1488.1 690.561 L1488.66 690.561 L1489.22 690.561 L1489.78 690.561 L1490.34 690.561 L1490.89 690.561 L1491.45 690.561 L1492.01 690.561 L1492.57 690.561 L1493.13 690.561 L1493.69 690.561 L1494.25 690.561 L1494.81 690.561 L1495.37 690.561 L1495.93 690.561 L1496.49 690.561 L1497.05 690.561 L1497.61 690.561 L1498.16 690.561 L1498.72 690.561 L1499.28 690.561 L1499.84 690.561 L1500.4 690.561 L1500.96 690.561 L1501.52 690.561 L1502.08 690.561 L1502.64 690.561 L1503.2 690.561 L1503.76 690.561 L1504.32 690.561 L1504.88 690.561 L1505.44 690.561 L1505.99 690.561 L1506.55 690.561 L1507.11 690.561 L1507.67 690.561 L1508.23 690.561 L1508.79 690.561 L1509.35 690.561 L1509.91 690.561 L1510.47 690.561 L1511.03 690.561 L1511.59 690.561 L1512.15 690.561 L1512.71 690.561 L1513.26 690.561 L1513.82 690.561 L1514.38 690.561 L1514.94 690.561 L1515.5 690.561 L1516.06 690.561 L1516.62 690.561 L1517.18 690.561 L1517.74 690.561 L1518.3 690.561 L1518.86 690.561 L1519.42 690.561 L1519.98 690.561 L1520.53 690.561 L1521.09 690.561 L1521.65 690.561 L1522.21 690.561 L1522.77 690.561 L1523.33 690.561 L1523.89 690.561 L1524.45 690.561 L1525.01 690.561 L1525.57 690.561 L1526.13 690.561 L1526.69 690.561 L1527.25 690.561 L1527.81 690.561 L1528.36 690.561 L1528.92 690.561 L1529.48 690.561 L1530.04 690.561 L1530.6 690.561 L1531.16 690.561 L1531.72 690.561 L1532.28 690.561 L1532.84 690.561 L1533.4 690.561 L1533.96 690.561 L1534.52 690.561 L1535.08 690.561 L1535.63 690.561 L1536.19 690.561 L1536.75 690.561 L1537.31 690.561 L1537.87 690.561 L1538.43 690.561 L1538.99 690.561 L1539.55 690.561 L1540.11 690.561 L1540.67 690.561 L1541.23 690.561 L1541.79 690.561 L1542.35 690.561 L1542.9 690.561 L1543.46 690.561 L1544.02 690.561 L1544.58 690.561 L1545.14 690.561 L1545.7 690.561 L1546.26 690.561 L1546.82 690.561 L1547.38 690.561 L1547.94 690.561 L1548.5 690.561 L1549.06 690.561 L1549.62 690.561 L1550.18 690.561 L1550.73 690.561 L1551.29 690.561 L1551.85 690.561 L1552.41 690.561 L1552.97 690.561 L1553.53 690.561 L1554.09 690.561 L1554.65 690.561 L1555.21 690.561 L1555.77 690.561 L1556.33 690.561 L1556.89 690.561 L1557.45 690.561 L1558 690.561 L1558.56 690.561 L1559.12 690.561 L1559.68 690.561 L1560.24 690.561 L1560.8 690.561 L1561.36 690.561 L1561.92 690.561 L1562.48 690.561 L1563.04 690.561 L1563.6 690.561 L1564.16 690.561 L1564.72 690.561 L1565.28 690.561 L1565.83 690.561 L1566.39 690.561 L1566.95 690.561 L1567.51 690.561 L1568.07 690.561 L1568.63 690.561 L1569.19 690.561 L1569.75 690.561 L1570.31 690.561 L1570.87 690.561 L1571.43 690.561 L1571.99 690.561 L1572.55 690.561 L1573.1 690.561 L1573.66 690.561 L1574.22 690.561 L1574.78 690.561 L1575.34 690.561 L1575.9 690.561 L1576.46 690.561 L1577.02 690.561 L1577.58 690.561 L1578.14 690.561 L1578.7 690.561 L1579.26 690.561 L1579.82 690.561 L1580.37 690.561 L1580.93 690.561 L1581.49 690.561 L1582.05 690.561 L1582.61 690.561 L1583.17 690.561 L1583.73 690.561 L1584.29 690.561 L1584.85 690.561 L1585.41 690.561 L1585.97 690.561 L1586.53 690.561 L1587.09 690.561 L1587.65 690.561 L1588.2 690.561 L1588.76 690.561 L1589.32 690.561 L1589.88 690.561 L1590.44 690.561 L1591 690.561 L1591.56 690.561 L1592.12 690.561 L1592.68 690.561 L1593.24 690.561 L1593.8 690.561 L1594.36 690.561 L1594.92 690.561 L1595.47 690.561 L1596.03 690.561 L1596.59 690.561 L1597.15 690.561 L1597.71 690.561 L1598.27 690.561 L1598.83 690.561 L1599.39 690.561 L1599.95 690.561 L1600.51 690.561 L1601.07 690.561 L1601.63 690.561 L1602.19 690.561 L1602.74 690.561 L1603.3 690.561 L1603.86 690.561 L1604.42 690.561 L1604.98 690.561 L1605.54 690.561 L1606.1 690.561 L1606.66 690.561 L1607.22 690.561 L1607.78 690.561 L1608.34 690.561 L1608.9 690.561 L1609.46 690.561 L1610.02 690.561 L1610.57 690.561 L1611.13 690.561 L1611.69 690.561 L1612.25 690.561 L1612.81 690.561 L1613.37 690.561 L1613.93 690.561 L1614.49 690.561 L1615.05 690.561 L1615.61 690.561 L1616.17 690.561 L1616.73 690.561 L1617.29 690.561 L1617.84 690.561 L1618.4 690.561 L1618.96 690.561 L1619.52 690.561 L1620.08 690.561 L1620.64 690.561 L1621.2 690.561 L1621.76 690.561 L1622.32 690.561 L1622.88 690.561 L1623.44 690.561 L1624 690.561 L1624.56 690.561 L1625.11 690.561 L1625.67 690.561 L1626.23 690.561 L1626.79 690.561 L1627.35 690.561 L1627.91 690.561 L1628.47 690.561 L1629.03 690.561 L1629.59 690.561 L1630.15 690.561 L1630.71 690.561 L1631.27 690.561 L1631.83 690.561 L1632.39 690.561 L1632.94 690.561 L1633.5 690.561 L1634.06 690.561 L1634.62 690.561 L1635.18 690.561 L1635.74 690.561 L1636.3 690.561 L1636.86 690.561 L1637.42 690.561 L1637.98 690.561 L1638.54 690.561 L1639.1 690.561 L1639.66 690.561 L1640.21 690.561 L1640.77 690.561 L1641.33 690.561 L1641.89 690.561 L1642.45 690.561 L1643.01 690.561 L1643.57 690.561 L1644.13 690.561 L1644.69 690.561 L1645.25 690.561 L1645.81 690.561 L1646.37 690.561 L1646.93 690.561 L1647.48 690.561 L1648.04 690.561 L1648.6 690.561 L1649.16 690.561 L1649.72 690.561 L1650.28 690.561 L1650.84 690.561 L1651.4 690.561 L1651.96 690.561 L1652.52 690.561 L1653.08 690.561 L1653.64 690.561 L1654.2 690.561 L1654.76 690.561 L1655.31 690.561 L1655.87 690.561 L1656.43 690.561 L1656.99 690.561 L1657.55 690.561 L1658.11 690.561 L1658.67 690.561 L1659.23 690.561 L1659.79 690.561 L1660.35 690.561 L1660.91 690.561 L1661.47 690.561 L1662.03 690.561 L1662.58 690.561 L1663.14 690.561 L1663.7 690.561 L1664.26 690.561 L1664.82 690.561 L1665.38 690.561 L1665.94 690.561 L1666.5 690.561 L1667.06 690.561 L1667.62 690.561 L1668.18 690.561 L1668.74 690.561 L1669.3 690.561 L1669.85 690.561 L1670.41 690.561 L1670.97 690.561 L1671.53 690.561 L1672.09 690.561 L1672.65 690.561 L1673.21 690.561 L1673.77 690.561 L1674.33 690.561 L1674.89 690.561 L1675.45 690.561 L1676.01 690.561 L1676.57 690.561 L1677.13 690.561 L1677.68 690.561 L1678.24 690.561 L1678.8 690.561 L1679.36 690.561 L1679.92 690.561 L1680.48 690.561 L1681.04 690.561 L1681.6 690.561 L1682.16 690.561 L1682.72 690.561 L1683.28 690.561 L1683.84 690.561 L1684.4 690.561 L1684.95 690.561 L1685.51 690.561 L1686.07 690.561 L1686.63 690.561 L1687.19 690.561 L1687.75 690.561 L1688.31 690.561 L1688.87 690.561 L1689.43 690.561 L1689.99 690.561 L1690.55 690.561 L1691.11 690.561 L1691.67 690.561 L1692.23 690.561 L1692.78 690.561 L1693.34 690.561 L1693.9 690.561 L1694.46 690.561 L1695.02 690.561 L1695.58 690.561 L1696.14 690.561 L1696.7 690.561 L1697.26 690.561 L1697.82 690.561 L1698.38 690.561 L1698.94 690.561 L1699.5 690.561 L1700.05 690.561 L1700.61 690.561 L1701.17 690.561 L1701.73 690.561 L1702.29 690.561 L1702.85 690.561 L1703.41 690.561 L1703.97 690.561 L1704.53 690.561 L1705.09 690.561 L1705.65 690.561 L1706.21 690.561 L1706.77 690.561 L1707.32 690.561 L1707.88 690.561 L1708.44 690.561 L1709 690.561 L1709.56 690.561 L1710.12 690.561 L1710.68 690.561 L1711.24 690.561 L1711.8 690.561 L1712.36 690.561 L1712.92 690.561 L1713.48 690.561 L1714.04 690.561 L1714.6 690.561 L1715.15 690.561 L1715.71 690.561 L1716.27 690.561 L1716.83 690.561 L1717.39 690.561 L1717.95 690.561 L1718.51 690.561 L1719.07 690.561 L1719.63 690.561 L1720.19 690.561 L1720.75 690.561 L1721.31 690.561 L1721.87 690.561 L1722.42 690.561 L1722.98 690.561 L1723.54 690.561 L1724.1 690.561 L1724.66 690.561 L1725.22 690.561 L1725.78 690.561 L1726.34 690.561 L1726.9 690.561 L1727.46 690.561 L1728.02 690.561 L1728.58 690.561 L1729.14 690.561 L1729.69 690.561 L1730.25 690.561 L1730.81 690.561 L1731.37 690.561 L1731.93 690.561 L1732.49 690.561 L1733.05 690.561 L1733.61 690.561 L1734.17 690.561 L1734.73 690.561 L1735.29 690.561 L1735.85 690.561 L1736.41 690.561 L1736.97 690.561 L1737.52 690.561 L1738.08 690.561 L1738.64 690.561 L1739.2 690.561 L1739.76 690.561 L1740.32 690.561 L1740.88 690.561 L1741.44 690.561 L1742 690.561 L1742.56 690.561 L1743.12 690.561 L1743.68 690.561 L1744.24 690.561 L1744.79 690.561 L1745.35 690.561 L1745.91 690.561 L1746.47 690.561 L1747.03 690.561 L1747.59 690.561 L1748.15 690.561 L1748.71 690.561 L1749.27 690.561 L1749.83 690.561 L1750.39 690.561 L1750.95 690.561 L1751.51 690.561 L1752.06 690.561 L1752.62 690.561 L1753.18 690.561 L1753.74 690.561 L1754.3 690.561 L1754.86 690.561 L1755.42 690.561 L1755.98 690.561 L1756.54 690.561 L1757.1 690.561 L1757.66 690.561 L1758.22 690.561 L1758.78 690.561 L1759.34 690.561 L1759.89 690.561 L1760.45 690.561 L1761.01 690.561 L1761.57 690.561 L1762.13 690.561 L1762.69 690.561 L1763.25 690.561 L1763.81 690.561 L1764.37 690.561 L1764.93 690.561 L1765.49 690.561 L1766.05 690.561 L1766.61 690.561 L1767.16 690.561 L1767.72 690.561 L1768.28 690.561 L1768.84 690.561 L1769.4 690.561 L1769.96 690.561 L1770.52 690.561 L1771.08 690.561 L1771.64 690.561 L1772.2 690.561 L1772.76 690.561 L1773.32 690.561 L1773.88 690.561 L1774.43 690.561 L1774.99 690.561 L1775.55 690.561 L1776.11 690.561 L1776.67 690.561 L1777.23 690.561 L1777.79 690.561 L1778.35 690.561 L1778.91 690.561 L1779.47 690.561 L1780.03 690.561 L1780.59 690.561 L1781.15 690.561 L1781.71 690.561 L1782.26 690.561 L1782.82 690.561 L1783.38 690.561 L1783.94 690.561 L1784.5 690.561 L1785.06 690.561 L1785.62 690.561 L1786.18 690.561 L1786.74 690.561 L1787.3 690.561 L1787.86 690.561 L1788.42 690.561 L1788.98 690.561 L1789.53 690.561 L1790.09 690.561 L1790.65 690.561 L1791.21 690.561 L1791.77 690.561 L1792.33 690.561 L1792.89 690.561 L1793.45 690.561 L1794.01 690.561 L1794.57 690.561 L1795.13 690.561 L1795.69 690.561 L1796.25 690.561 L1796.8 690.561 L1797.36 690.561 L1797.92 690.561 L1798.48 690.561 L1799.04 690.561 L1799.6 690.561 L1800.16 690.561 L1800.72 690.561 L1801.28 690.561 L1801.84 690.561 L1802.4 690.561 L1802.96 690.561 L1803.52 690.561 L1804.08 690.561 L1804.63 690.561 L1805.19 690.561 L1805.75 690.561 L1806.31 690.561 L1806.87 690.561 L1807.43 690.561 L1807.99 690.561 L1808.55 690.561 L1809.11 690.561 L1809.67 690.561 L1810.23 690.561 L1810.79 690.561 L1811.35 690.561 L1811.9 690.561 L1812.46 690.561 L1813.02 690.561 L1813.58 690.561 L1814.14 690.561 L1814.7 690.561 L1815.26 690.561 L1815.82 690.561 L1816.38 690.561 L1816.94 690.561 L1817.5 690.561 L1818.06 690.561 L1818.62 690.561 L1819.18 690.561 L1819.73 690.561 L1820.29 690.561 L1820.85 690.561 L1821.41 690.561 L1821.97 690.561 L1822.53 690.561 L1823.09 690.561 L1823.65 690.561 L1824.21 690.561 L1824.77 690.561 L1825.33 690.561 L1825.89 690.561 L1826.45 690.561 L1827 690.561 L1827.56 690.561 L1828.12 690.561 L1828.68 690.561 L1829.24 690.561 L1829.8 690.561 L1830.36 690.561 L1830.92 690.561 L1831.48 690.561 L1832.04 690.561 L1832.6 690.561 L1833.16 690.561 L1833.72 690.561 L1834.27 690.561 L1834.83 690.561 L1835.39 690.561 L1835.95 690.561 L1836.51 690.561 L1837.07 690.561 L1837.63 690.561 L1838.19 690.561 L1838.19 683.489 L1837.63 683.489 L1837.07 683.489 L1836.51 683.489 L1835.95 683.489 L1835.39 683.489 L1834.83 683.489 L1834.27 683.489 L1833.72 683.489 L1833.16 683.489 L1832.6 683.489 L1832.04 683.489 L1831.48 683.489 L1830.92 683.489 L1830.36 683.489 L1829.8 683.489 L1829.24 683.489 L1828.68 683.489 L1828.12 683.489 L1827.56 683.489 L1827 683.489 L1826.45 683.489 L1825.89 683.489 L1825.33 683.489 L1824.77 683.489 L1824.21 683.489 L1823.65 683.489 L1823.09 683.489 L1822.53 683.489 L1821.97 683.489 L1821.41 683.489 L1820.85 683.489 L1820.29 683.489 L1819.73 683.489 L1819.18 683.489 L1818.62 683.489 L1818.06 683.489 L1817.5 683.489 L1816.94 683.489 L1816.38 683.489 L1815.82 683.489 L1815.26 683.489 L1814.7 683.489 L1814.14 683.489 L1813.58 683.489 L1813.02 683.489 L1812.46 683.489 L1811.9 683.489 L1811.35 683.489 L1810.79 683.489 L1810.23 683.489 L1809.67 683.489 L1809.11 683.489 L1808.55 683.489 L1807.99 683.489 L1807.43 683.489 L1806.87 683.489 L1806.31 683.489 L1805.75 683.489 L1805.19 683.489 L1804.63 683.489 L1804.08 683.489 L1803.52 683.489 L1802.96 683.489 L1802.4 683.489 L1801.84 683.489 L1801.28 683.489 L1800.72 683.489 L1800.16 683.489 L1799.6 683.489 L1799.04 683.489 L1798.48 683.489 L1797.92 683.489 L1797.36 683.489 L1796.8 683.489 L1796.25 683.489 L1795.69 683.489 L1795.13 683.489 L1794.57 683.489 L1794.01 683.489 L1793.45 683.489 L1792.89 683.489 L1792.33 683.489 L1791.77 683.489 L1791.21 683.489 L1790.65 683.489 L1790.09 683.489 L1789.53 683.489 L1788.98 683.489 L1788.42 683.489 L1787.86 683.489 L1787.3 683.489 L1786.74 683.489 L1786.18 683.489 L1785.62 683.489 L1785.06 683.489 L1784.5 683.489 L1783.94 683.489 L1783.38 683.489 L1782.82 683.489 L1782.26 683.489 L1781.71 683.489 L1781.15 683.489 L1780.59 683.489 L1780.03 683.489 L1779.47 683.489 L1778.91 683.489 L1778.35 683.489 L1777.79 683.489 L1777.23 683.489 L1776.67 683.489 L1776.11 683.489 L1775.55 683.489 L1774.99 683.489 L1774.43 683.489 L1773.88 683.489 L1773.32 683.489 L1772.76 683.489 L1772.2 683.489 L1771.64 683.489 L1771.08 683.489 L1770.52 683.489 L1769.96 683.489 L1769.4 683.489 L1768.84 683.489 L1768.28 683.489 L1767.72 683.489 L1767.16 683.489 L1766.61 683.489 L1766.05 683.489 L1765.49 683.489 L1764.93 683.489 L1764.37 683.489 L1763.81 683.489 L1763.25 683.489 L1762.69 683.489 L1762.13 683.489 L1761.57 683.489 L1761.01 683.489 L1760.45 683.489 L1759.89 683.489 L1759.34 683.489 L1758.78 683.489 L1758.22 683.489 L1757.66 683.489 L1757.1 683.489 L1756.54 683.489 L1755.98 683.489 L1755.42 683.489 L1754.86 683.489 L1754.3 683.489 L1753.74 683.489 L1753.18 683.489 L1752.62 683.489 L1752.06 683.489 L1751.51 683.489 L1750.95 683.489 L1750.39 683.489 L1749.83 683.489 L1749.27 683.489 L1748.71 683.489 L1748.15 683.489 L1747.59 683.489 L1747.03 683.489 L1746.47 683.489 L1745.91 683.489 L1745.35 683.489 L1744.79 683.489 L1744.24 683.489 L1743.68 683.489 L1743.12 683.489 L1742.56 683.489 L1742 683.489 L1741.44 683.489 L1740.88 683.489 L1740.32 683.489 L1739.76 683.489 L1739.2 683.489 L1738.64 683.489 L1738.08 683.489 L1737.52 683.489 L1736.97 683.489 L1736.41 683.489 L1735.85 683.489 L1735.29 683.489 L1734.73 683.489 L1734.17 683.489 L1733.61 683.489 L1733.05 683.489 L1732.49 683.489 L1731.93 683.489 L1731.37 683.489 L1730.81 683.489 L1730.25 683.489 L1729.69 683.489 L1729.14 683.489 L1728.58 683.489 L1728.02 683.489 L1727.46 683.489 L1726.9 683.489 L1726.34 683.489 L1725.78 683.489 L1725.22 683.489 L1724.66 683.489 L1724.1 683.489 L1723.54 683.489 L1722.98 683.489 L1722.42 683.489 L1721.87 683.489 L1721.31 683.489 L1720.75 683.489 L1720.19 683.489 L1719.63 683.489 L1719.07 683.489 L1718.51 683.489 L1717.95 683.489 L1717.39 683.489 L1716.83 683.489 L1716.27 683.489 L1715.71 683.489 L1715.15 683.489 L1714.6 683.489 L1714.04 683.489 L1713.48 683.489 L1712.92 683.489 L1712.36 683.489 L1711.8 683.489 L1711.24 683.489 L1710.68 683.489 L1710.12 683.489 L1709.56 683.489 L1709 683.489 L1708.44 683.489 L1707.88 683.489 L1707.32 683.489 L1706.77 683.489 L1706.21 683.489 L1705.65 683.489 L1705.09 683.489 L1704.53 683.489 L1703.97 683.489 L1703.41 683.489 L1702.85 683.489 L1702.29 683.489 L1701.73 683.489 L1701.17 683.489 L1700.61 683.489 L1700.05 683.489 L1699.5 683.489 L1698.94 683.489 L1698.38 683.489 L1697.82 683.489 L1697.26 683.489 L1696.7 683.489 L1696.14 683.489 L1695.58 683.489 L1695.02 683.489 L1694.46 683.489 L1693.9 683.489 L1693.34 683.489 L1692.78 683.489 L1692.23 683.489 L1691.67 683.489 L1691.11 683.489 L1690.55 683.489 L1689.99 683.489 L1689.43 683.489 L1688.87 683.489 L1688.31 683.489 L1687.75 683.489 L1687.19 683.489 L1686.63 683.489 L1686.07 683.489 L1685.51 683.489 L1684.95 683.489 L1684.4 683.489 L1683.84 683.489 L1683.28 683.489 L1682.72 683.489 L1682.16 683.489 L1681.6 683.489 L1681.04 683.489 L1680.48 683.489 L1679.92 683.489 L1679.36 683.489 L1678.8 683.489 L1678.24 683.489 L1677.68 683.489 L1677.13 683.489 L1676.57 683.489 L1676.01 683.489 L1675.45 683.489 L1674.89 683.489 L1674.33 683.489 L1673.77 683.489 L1673.21 683.489 L1672.65 683.489 L1672.09 683.489 L1671.53 683.489 L1670.97 683.489 L1670.41 683.489 L1669.85 683.489 L1669.3 683.489 L1668.74 683.489 L1668.18 683.489 L1667.62 683.489 L1667.06 683.489 L1666.5 683.489 L1665.94 683.489 L1665.38 683.489 L1664.82 683.489 L1664.26 683.489 L1663.7 683.489 L1663.14 683.489 L1662.58 683.489 L1662.03 683.489 L1661.47 683.489 L1660.91 683.489 L1660.35 683.489 L1659.79 683.489 L1659.23 683.489 L1658.67 683.489 L1658.11 683.489 L1657.55 683.489 L1656.99 683.489 L1656.43 683.489 L1655.87 683.489 L1655.31 683.489 L1654.76 683.489 L1654.2 683.489 L1653.64 683.489 L1653.08 683.489 L1652.52 683.489 L1651.96 683.489 L1651.4 683.489 L1650.84 683.489 L1650.28 683.489 L1649.72 683.489 L1649.16 683.489 L1648.6 683.489 L1648.04 683.489 L1647.48 683.489 L1646.93 683.489 L1646.37 683.489 L1645.81 683.489 L1645.25 683.489 L1644.69 683.489 L1644.13 683.489 L1643.57 683.489 L1643.01 683.489 L1642.45 683.489 L1641.89 683.489 L1641.33 683.489 L1640.77 683.489 L1640.21 683.489 L1639.66 683.489 L1639.1 683.489 L1638.54 683.489 L1637.98 683.489 L1637.42 683.489 L1636.86 683.489 L1636.3 683.489 L1635.74 683.489 L1635.18 683.489 L1634.62 683.489 L1634.06 683.489 L1633.5 683.489 L1632.94 683.489 L1632.39 683.489 L1631.83 683.489 L1631.27 683.489 L1630.71 683.489 L1630.15 683.489 L1629.59 683.489 L1629.03 683.489 L1628.47 683.489 L1627.91 683.489 L1627.35 683.489 L1626.79 683.489 L1626.23 683.489 L1625.67 683.489 L1625.11 683.489 L1624.56 683.489 L1624 683.489 L1623.44 683.489 L1622.88 683.489 L1622.32 683.489 L1621.76 683.489 L1621.2 683.489 L1620.64 683.489 L1620.08 683.489 L1619.52 683.489 L1618.96 683.489 L1618.4 683.489 L1617.84 683.489 L1617.29 683.489 L1616.73 683.489 L1616.17 683.489 L1615.61 683.489 L1615.05 683.489 L1614.49 683.489 L1613.93 683.489 L1613.37 683.489 L1612.81 683.489 L1612.25 683.489 L1611.69 683.489 L1611.13 683.489 L1610.57 683.489 L1610.02 683.489 L1609.46 683.489 L1608.9 683.489 L1608.34 683.489 L1607.78 683.489 L1607.22 683.489 L1606.66 683.489 L1606.1 683.489 L1605.54 683.489 L1604.98 683.489 L1604.42 683.489 L1603.86 683.489 L1603.3 683.489 L1602.74 683.489 L1602.19 683.489 L1601.63 683.489 L1601.07 683.489 L1600.51 683.489 L1599.95 683.489 L1599.39 683.489 L1598.83 683.489 L1598.27 683.489 L1597.71 683.489 L1597.15 683.489 L1596.59 683.489 L1596.03 683.489 L1595.47 683.489 L1594.92 683.489 L1594.36 683.489 L1593.8 683.489 L1593.24 683.489 L1592.68 683.489 L1592.12 683.489 L1591.56 683.489 L1591 683.489 L1590.44 683.489 L1589.88 683.489 L1589.32 683.489 L1588.76 683.489 L1588.2 683.489 L1587.65 683.489 L1587.09 683.489 L1586.53 683.489 L1585.97 683.489 L1585.41 683.489 L1584.85 683.489 L1584.29 683.489 L1583.73 683.489 L1583.17 683.489 L1582.61 683.489 L1582.05 683.489 L1581.49 683.489 L1580.93 683.489 L1580.37 683.489 L1579.82 683.489 L1579.26 683.489 L1578.7 683.489 L1578.14 683.489 L1577.58 683.489 L1577.02 683.489 L1576.46 683.489 L1575.9 683.489 L1575.34 683.489 L1574.78 683.489 L1574.22 683.489 L1573.66 683.489 L1573.1 683.489 L1572.55 683.489 L1571.99 683.489 L1571.43 683.489 L1570.87 683.489 L1570.31 683.489 L1569.75 683.489 L1569.19 683.489 L1568.63 683.489 L1568.07 683.489 L1567.51 683.489 L1566.95 683.489 L1566.39 683.489 L1565.83 683.489 L1565.28 683.489 L1564.72 683.489 L1564.16 683.489 L1563.6 683.489 L1563.04 683.489 L1562.48 683.489 L1561.92 683.489 L1561.36 683.489 L1560.8 683.489 L1560.24 683.489 L1559.68 683.489 L1559.12 683.489 L1558.56 683.489 L1558 683.489 L1557.45 683.489 L1556.89 683.489 L1556.33 683.489 L1555.77 683.489 L1555.21 683.489 L1554.65 683.489 L1554.09 683.489 L1553.53 683.489 L1552.97 683.489 L1552.41 683.489 L1551.85 683.489 L1551.29 683.489 L1550.73 683.489 L1550.18 683.489 L1549.62 683.489 L1549.06 683.489 L1548.5 683.489 L1547.94 683.489 L1547.38 683.489 L1546.82 683.489 L1546.26 683.489 L1545.7 683.489 L1545.14 683.489 L1544.58 683.489 L1544.02 683.489 L1543.46 683.489 L1542.9 683.489 L1542.35 683.489 L1541.79 683.489 L1541.23 683.489 L1540.67 683.489 L1540.11 683.489 L1539.55 683.489 L1538.99 683.489 L1538.43 683.489 L1537.87 683.489 L1537.31 683.489 L1536.75 683.489 L1536.19 683.489 L1535.63 683.489 L1535.08 683.489 L1534.52 683.489 L1533.96 683.489 L1533.4 683.489 L1532.84 683.489 L1532.28 683.489 L1531.72 683.489 L1531.16 683.489 L1530.6 683.489 L1530.04 683.489 L1529.48 683.489 L1528.92 683.489 L1528.36 683.489 L1527.81 683.489 L1527.25 683.489 L1526.69 683.489 L1526.13 683.489 L1525.57 683.489 L1525.01 683.489 L1524.45 683.489 L1523.89 683.489 L1523.33 683.489 L1522.77 683.489 L1522.21 683.489 L1521.65 683.489 L1521.09 683.489 L1520.53 683.489 L1519.98 683.489 L1519.42 683.489 L1518.86 683.489 L1518.3 683.489 L1517.74 683.489 L1517.18 683.489 L1516.62 683.489 L1516.06 683.489 L1515.5 683.489 L1514.94 683.489 L1514.38 683.489 L1513.82 683.489 L1513.26 683.489 L1512.71 683.489 L1512.15 683.489 L1511.59 683.489 L1511.03 683.489 L1510.47 683.489 L1509.91 683.489 L1509.35 683.489 L1508.79 683.489 L1508.23 683.489 L1507.67 683.489 L1507.11 683.489 L1506.55 683.489 L1505.99 683.489 L1505.44 683.489 L1504.88 683.489 L1504.32 683.489 L1503.76 683.489 L1503.2 683.489 L1502.64 683.489 L1502.08 683.489 L1501.52 683.489 L1500.96 683.489 L1500.4 683.489 L1499.84 683.489 L1499.28 683.489 L1498.72 683.489 L1498.16 683.489 L1497.61 683.489 L1497.05 683.489 L1496.49 683.489 L1495.93 683.489 L1495.37 683.489 L1494.81 683.489 L1494.25 683.489 L1493.69 683.489 L1493.13 683.489 L1492.57 683.489 L1492.01 683.489 L1491.45 683.489 L1490.89 683.489 L1490.34 683.489 L1489.78 683.489 L1489.22 683.489 L1488.66 683.489 L1488.1 683.489 L1487.54 683.489 L1486.98 683.489 L1486.42 683.489 L1485.86 683.489 L1485.3 683.489 L1484.74 683.489 L1484.18 683.489 L1483.62 683.489 L1483.07 683.489 L1482.51 683.489 L1481.95 683.489 L1481.39 683.489 L1480.83 683.489 L1480.27 683.489 L1479.71 683.489 L1479.15 683.489 L1478.59 683.489 L1478.03 683.489 L1477.47 683.489 L1476.91 683.489 L1476.35 683.489 L1475.79 683.489 L1475.24 683.489 L1474.68 683.489 L1474.12 683.489 L1473.56 683.489 L1473 683.489 L1472.44 683.489 L1471.88 683.489 L1471.32 683.489 L1470.76 683.489 L1470.2 683.489 L1469.64 683.489 L1469.08 683.489 L1468.52 683.489 L1467.97 683.489 L1467.41 683.489 L1466.85 683.489 L1466.29 683.489 L1465.73 683.489 L1465.17 683.489 L1464.61 683.489 L1464.05 683.489 L1463.49 683.489 L1462.93 683.489 L1462.37 683.489 L1461.81 683.489 L1461.25 683.489 L1460.7 683.489 L1460.14 683.489 L1459.58 683.489 L1459.02 683.489 L1458.46 683.489 L1457.9 683.489 L1457.34 683.489 L1456.78 683.489 L1456.22 683.489 L1455.66 683.489 L1455.1 683.489 L1454.54 683.489 L1453.98 683.489 L1453.42 683.489 L1452.87 683.489 L1452.31 683.489 L1451.75 683.489 L1451.19 683.489 L1450.63 683.489 L1450.07 683.489 L1449.51 683.489 L1448.95 683.489 L1448.39 683.489 L1447.83 683.489 L1447.27 683.489 L1446.71 683.489 L1446.15 683.489 L1445.6 683.489 L1445.04 683.489 L1444.48 683.489 L1443.92 683.489 L1443.36 683.489 L1442.8 683.489 L1442.24 683.489 L1441.68 683.489 L1441.12 683.489 L1440.56 683.489 L1440 683.489 L1439.44 683.489 L1438.88 683.489 L1438.33 683.489 L1437.77 683.489 L1437.21 683.489 L1436.65 683.489 L1436.09 683.489 L1435.53 683.489 L1434.97 683.489 L1434.41 683.489 L1433.85 683.489 L1433.29 683.489 L1432.73 683.489 L1432.17 683.489 L1431.61 683.489 L1431.05 683.489 L1430.5 683.489 L1429.94 683.489 L1429.38 683.489 L1428.82 683.489 L1428.26 683.489 L1427.7 683.489 L1427.14 683.489 L1426.58 683.489 L1426.02 683.489 L1425.46 683.489 L1424.9 683.489 L1424.34 683.489 L1423.78 683.489 L1423.23 683.489 L1422.67 683.489 L1422.11 683.489 L1421.55 683.489 L1420.99 683.489 L1420.43 683.489 L1419.87 683.489 L1419.31 683.489 L1418.75 683.489 L1418.19 683.489 L1417.63 683.489 L1417.07 683.489 L1416.51 683.489 L1415.95 683.489 L1415.4 683.489 L1414.84 683.489 L1414.28 683.489 L1413.72 683.489 L1413.16 683.489 L1412.6 683.489 L1412.04 683.489 L1411.48 683.489 L1410.92 683.489 L1410.36 683.489 L1409.8 683.489 L1409.24 683.489 L1408.68 683.489 L1408.13 683.489 L1407.57 683.489 L1407.01 683.489 L1406.45 683.489 L1405.89 683.489 L1405.33 683.489 L1404.77 683.489 L1404.21 683.489 L1403.65 683.489 L1403.09 683.489 L1402.53 683.489 L1401.97 683.489 L1401.41 683.489 L1400.86 683.489 L1400.3 683.489 L1399.74 683.489 L1399.18 683.489 L1398.62 683.489 L1398.06 683.489 L1397.5 683.489 L1396.94 683.489 L1396.38 683.489 L1395.82 683.489 L1395.26 683.489 L1394.7 683.489 L1394.14 683.489 L1393.58 683.489 L1393.03 683.489 L1392.47 683.489 L1391.91 683.489 L1391.35 683.489 L1390.79 683.489 L1390.23 683.489 L1389.67 683.489 L1389.11 683.489 L1388.55 683.489 L1387.99 683.489 L1387.43 683.489 L1386.87 683.489 L1386.31 683.489 L1385.76 683.489 L1385.2 683.489 L1384.64 683.489 L1384.08 683.489 L1383.52 683.489 L1382.96 683.489 L1382.4 683.489 L1381.84 683.489 L1381.28 683.489 L1380.72 683.489 L1380.16 683.489 L1379.6 683.489 L1379.04 683.489 L1378.49 683.489 L1377.93 683.489 L1377.37 683.489 L1376.81 683.489 L1376.25 683.489 L1375.69 683.489 L1375.13 683.489 L1374.57 683.489 L1374.01 683.489 L1373.45 683.489 L1372.89 683.489 L1372.33 683.489 L1371.77 683.489 L1371.21 683.489 L1370.66 683.489 L1370.1 683.489 L1369.54 683.489 L1368.98 683.489 L1368.42 683.489 L1367.86 683.489 L1367.3 683.489 L1366.74 683.489 L1366.18 683.489 L1365.62 683.489 L1365.06 683.489 L1364.5 683.489 L1363.94 683.489 L1363.39 683.489 L1362.83 683.489 L1362.27 683.489 L1361.71 683.489 L1361.15 683.489 L1360.59 683.489 L1360.03 683.489 L1359.47 683.489 L1358.91 683.489 L1358.35 683.489 L1357.79 683.489 L1357.23 683.489 L1356.67 683.489 L1356.12 683.489 L1355.56 683.489 L1355 683.489 L1354.44 683.489 L1353.88 683.489 L1353.32 683.489 L1352.76 683.489 L1352.2 683.489 L1351.64 683.489 L1351.08 683.489 L1350.52 683.489 L1349.96 683.489 L1349.4 683.489 L1348.84 683.489 L1348.29 683.489 L1347.73 683.489 L1347.17 683.489 L1346.61 683.489 L1346.05 683.489 L1345.49 683.489 L1344.93 683.489 L1344.37 683.489 L1343.81 683.489 L1343.25 683.489 L1342.69 683.489 L1342.13 683.489 L1341.57 683.489 L1341.02 683.489 L1340.46 683.489 L1339.9 683.489 L1339.34 683.489 L1338.78 683.489 L1338.22 683.489 L1337.66 683.489 L1337.1 683.489 L1336.54 683.489 L1335.98 683.489 L1335.42 683.489 L1334.86 683.489 L1334.3 683.489 L1333.75 683.489 L1333.19 683.489 L1332.63 683.489 L1332.07 683.489 L1331.51 683.489 L1330.95 683.489 L1330.39 683.489 L1329.83 683.489 L1329.27 683.489 L1328.71 683.489 L1328.15 683.489 L1327.59 683.489 L1327.03 683.489 L1326.47 683.489 L1325.92 683.489 L1325.36 683.489 L1324.8 683.489 L1324.24 683.489 L1323.68 683.489 L1323.12 683.489 L1322.56 683.489 L1322 683.489 L1321.44 683.489 L1320.88 683.489 L1320.32 683.489 L1319.76 683.489 L1319.2 683.489 L1318.65 683.489 L1318.09 683.489 L1317.53 683.489 L1316.97 683.489 L1316.41 683.489 L1315.85 683.489 L1315.29 683.489 L1314.73 683.489 L1314.17 683.489 L1313.61 683.489 L1313.05 683.489 L1312.49 683.489 L1311.93 683.489 L1311.38 683.489 L1310.82 683.489 L1310.26 683.489 L1309.7 683.489 L1309.14 683.489 L1308.58 683.489 L1308.02 683.489 L1307.46 683.489 L1306.9 683.489 L1306.34 683.489 L1305.78 683.489 L1305.22 683.489 L1304.66 683.489 L1304.1 683.489 L1303.55 683.489 L1302.99 683.489 L1302.43 683.489 L1301.87 683.489 L1301.31 683.489 L1300.75 683.489 L1300.19 683.489 L1299.63 683.489 L1299.07 683.489 L1298.51 683.489 L1297.95 683.489 L1297.39 683.489 L1296.83 683.489 L1296.28 683.489 L1295.72 683.489 L1295.16 683.489 L1294.6 683.489 L1294.04 683.489 L1293.48 683.489 L1292.92 683.489 L1292.36 683.489 L1291.8 683.489 L1291.24 683.489 L1290.68 683.489 L1290.12 683.489 L1289.56 683.489 L1289 683.489 L1288.45 683.489 L1287.89 683.489 L1287.33 683.489 L1286.77 683.489 L1286.21 683.489 L1285.65 683.489 L1285.09 683.489 L1284.53 683.489 L1283.97 683.489 L1283.41 683.489 L1282.85 683.489 L1282.29 683.489 L1281.73 683.489 L1281.18 683.489 L1280.62 683.489 L1280.06 683.489 L1279.5 683.489 L1278.94 683.489 L1278.38 683.489 L1277.82 683.489 L1277.26 683.489 L1276.7 683.489 L1276.14 683.489 L1275.58 683.489 L1275.02 683.489 L1274.46 683.489 L1273.91 683.489 L1273.35 683.489 L1272.79 683.489 L1272.23 683.489 L1271.67 683.489 L1271.11 683.489 L1270.55 683.489 L1269.99 683.489 L1269.43 683.489 L1268.87 683.489 L1268.31 683.489 L1267.75 683.489 L1267.19 683.489 L1266.63 683.489 L1266.08 683.489 L1265.52 683.489 L1264.96 683.489 L1264.4 683.489 L1263.84 683.489 L1263.28 683.489 L1262.72 683.489 L1262.16 683.489 L1261.6 683.489 L1261.04 683.489 L1260.48 683.489 L1259.92 683.489 L1259.36 683.489 L1258.81 683.489 L1258.25 683.489 L1257.69 683.489 L1257.13 683.489 L1256.57 683.489 L1256.01 683.489 L1255.45 683.489 L1254.89 683.489 L1254.33 683.489 L1253.77 683.489 L1253.21 683.489 L1252.65 683.489 L1252.09 683.489 L1251.54 683.489 L1250.98 683.489 L1250.42 683.489 L1249.86 683.489 L1249.3 683.489 L1248.74 683.489 L1248.18 683.489 L1247.62 683.489 L1247.06 683.489 L1246.5 683.489 L1245.94 683.489 L1245.38 683.489 L1244.82 683.489 L1244.26 683.489 L1243.71 683.489 L1243.15 683.489 L1242.59 683.489 L1242.03 683.489 L1241.47 683.489 L1240.91 683.489 L1240.35 683.489 L1239.79 683.489 L1239.23 683.489 L1238.67 683.489 L1238.11 683.489 L1237.55 683.489 L1236.99 683.489 L1236.44 683.489 L1235.88 683.489 L1235.32 683.489 L1234.76 683.489 L1234.2 683.489 L1233.64 683.489 L1233.08 683.489 L1232.52 683.489 L1231.96 683.489 L1231.4 683.489 L1230.84 683.489 L1230.28 683.489 L1229.72 683.489 L1229.17 683.489 L1228.61 683.489 L1228.05 683.489 L1227.49 683.489 L1226.93 683.489 L1226.37 683.489 L1225.81 683.489 L1225.25 683.489 L1224.69 683.489 L1224.13 683.489 L1223.57 683.489 L1223.01 683.489 L1222.45 683.489 L1221.89 683.489 L1221.34 683.489 L1220.78 683.489 L1220.22 683.489 L1219.66 683.489 L1219.1 683.489 L1218.54 683.489 L1217.98 683.489 L1217.42 683.489 L1216.86 683.489 L1216.3 683.489 L1215.74 683.489 L1215.18 683.489 L1214.62 683.489 L1214.07 683.489 L1213.51 683.489 L1212.95 683.489 L1212.39 683.489 L1211.83 683.489 L1211.27 683.489 L1210.71 683.489 L1210.15 683.489 L1209.59 683.489 L1209.03 683.489 L1208.47 683.489 L1207.91 683.489 L1207.35 683.489 L1206.8 683.489 L1206.24 683.489 L1205.68 683.489 L1205.12 683.489 L1204.56 683.489 L1204 683.489 L1203.44 683.489 L1202.88 683.489 L1202.32 683.489 L1201.76 683.489 L1201.2 683.489 L1200.64 683.489 L1200.08 683.489 L1199.52 683.489 L1198.97 683.489 L1198.41 683.489 L1197.85 683.489 L1197.29 683.489 L1196.73 683.489 L1196.17 683.489 L1195.61 683.489 L1195.05 683.489 L1194.49 683.489 L1193.93 683.489 L1193.37 683.489 L1192.81 683.489 L1192.25 683.489 L1191.7 683.489 L1191.14 683.489 L1190.58 683.489 L1190.02 683.489 L1189.46 683.489 L1188.9 683.489 L1188.34 683.489 L1187.78 683.489 L1187.22 683.489 L1186.66 683.489 L1186.1 683.489 L1185.54 683.489 L1184.98 683.489 L1184.43 683.489 L1183.87 683.489 L1183.31 683.489 L1182.75 683.489 L1182.19 683.489 L1181.63 683.489 L1181.07 683.489 L1180.51 683.489 L1179.95 683.489 L1179.39 683.489 L1178.83 683.489 L1178.27 683.489 L1177.71 683.489 L1177.15 683.489 L1176.6 683.489 L1176.04 683.489 L1175.48 683.489 L1174.92 683.489 L1174.36 683.489 L1173.8 683.489 L1173.24 683.489 L1172.68 683.489 L1172.12 683.489 L1171.56 683.489 L1171 683.489 L1170.44 683.489 L1169.88 683.489 L1169.33 683.489 L1168.77 683.489 L1168.21 683.489 L1167.65 683.489 L1167.09 683.489 L1166.53 683.489 L1165.97 683.489 L1165.41 683.489 L1164.85 683.489 L1164.29 683.489 L1163.73 683.489 L1163.17 683.489 L1162.61 683.489 L1162.05 683.489 L1161.5 683.489 L1160.94 683.489 L1160.38 683.489 L1159.82 683.489 L1159.26 683.489 L1158.7 683.489 L1158.14 683.489 L1157.58 683.489 L1157.02 683.489 L1156.46 683.489 L1155.9 683.489 L1155.34 683.489 L1154.78 683.489 L1154.23 683.489 L1153.67 683.489 L1153.11 683.489 L1152.55 683.489 L1151.99 683.489 L1151.43 683.489 L1150.87 683.489 L1150.31 683.489 L1149.75 683.489 L1149.19 683.489 L1148.63 683.489 L1148.07 683.489 L1147.51 683.489 L1146.96 683.489 L1146.4 683.489 L1145.84 683.489 L1145.28 683.489 L1144.72 683.489 L1144.16 683.489 L1143.6 683.489 L1143.04 683.489 L1142.48 683.489 L1141.92 683.489 L1141.36 683.489 L1140.8 683.489 L1140.24 683.489 L1139.68 683.489 L1139.13 683.489 L1138.57 683.489 L1138.01 683.489 L1137.45 683.489 L1136.89 683.489 L1136.33 683.489 L1135.77 683.489 L1135.21 683.489 L1134.65 683.489 L1134.09 683.489 L1133.53 683.489 L1132.97 683.489 L1132.41 683.489 L1131.86 683.489 L1131.3 683.489 L1130.74 683.489 L1130.18 683.489 L1129.62 683.489 L1129.06 683.489 L1128.5 683.489 L1127.94 683.489 L1127.38 683.489 L1126.82 683.489 L1126.26 683.489 L1125.7 683.489 L1125.14 683.489 L1124.59 683.489 L1124.03 683.489 L1123.47 683.489 L1122.91 683.489 L1122.35 683.489 L1121.79 683.489 L1121.23 683.489 L1120.67 683.489 L1120.11 683.489 L1119.55 683.489 L1118.99 683.489 L1118.43 683.489 L1117.87 683.489 L1117.31 683.489 L1116.76 683.489 L1116.2 683.489 L1115.64 683.489 L1115.08 683.489 L1114.52 683.489 L1113.96 683.489 L1113.4 683.489 L1112.84 683.489 L1112.28 683.489 L1111.72 683.489 L1111.16 683.489 L1110.6 683.489 L1110.04 683.489 L1109.49 683.489 L1108.93 683.489 L1108.37 683.489 L1107.81 683.489 L1107.25 683.489 L1106.69 683.489 L1106.13 683.489 L1105.57 683.489 L1105.01 683.489 L1104.45 683.489 L1103.89 683.489 L1103.33 683.489 L1102.77 683.489 L1102.22 683.489 L1101.66 683.489 L1101.1 683.489 L1100.54 683.489 L1099.98 683.489 L1099.42 683.489 L1098.86 683.489 L1098.3 683.489 L1097.74 683.489 L1097.18 683.489 L1096.62 683.489 L1096.06 683.489 L1095.5 683.489 L1094.94 683.489 L1094.39 683.489 L1093.83 683.489 L1093.27 683.489 L1092.71 683.489 L1092.15 683.489 L1091.59 683.489 L1091.03 683.489 L1090.47 683.489 L1089.91 683.489 L1089.35 683.489 L1088.79 683.489 L1088.23 683.489 L1087.67 683.489 L1087.12 683.489 L1086.56 683.489 L1086 683.489 L1085.44 683.489 L1084.88 683.489 L1084.32 683.489 L1083.76 683.489 L1083.2 683.489 L1082.64 683.489 L1082.08 683.489 L1081.52 683.489 L1080.96 683.489 L1080.4 683.489 L1079.85 683.489 L1079.29 683.489 L1078.73 683.489 L1078.17 683.489 L1077.61 683.489 L1077.05 683.489 L1076.49 683.489 L1075.93 683.489 L1075.37 683.489 L1074.81 683.489 L1074.25 683.489 L1073.69 683.489 L1073.13 683.489 L1072.57 683.489 L1072.02 683.489 L1071.46 683.489 L1070.9 683.489 L1070.34 683.489 L1069.78 683.489 L1069.22 683.489 L1068.66 683.489 L1068.1 683.489 L1067.54 683.489 L1066.98 683.489 L1066.42 683.489 L1065.86 683.489 L1065.3 683.489 L1064.75 683.489 L1064.19 683.489 L1063.63 683.489 L1063.07 683.489 L1062.51 683.489 L1061.95 683.489 L1061.39 683.489 L1060.83 683.489 L1060.27 683.489 L1059.71 683.489 L1059.15 683.489 L1058.59 683.489 L1058.03 683.489 L1057.48 683.489 L1056.92 683.489 L1056.36 683.489 L1055.8 683.489 L1055.24 683.489 L1054.68 683.489 L1054.12 683.489 L1053.56 683.489 L1053 683.489 L1052.44 683.489 L1051.88 683.489 L1051.32 683.489 L1050.76 683.489 L1050.2 683.489 L1049.65 683.489 L1049.09 683.489 L1048.53 683.489 L1047.97 683.489 L1047.41 683.489 L1046.85 683.489 L1046.29 683.489 L1045.73 683.489 L1045.17 683.489 L1044.61 683.489 L1044.05 683.489 L1043.49 683.489 L1042.93 683.489 L1042.38 683.489 L1041.82 683.489 L1041.26 683.489 L1040.7 683.489 L1040.14 683.489 L1039.58 683.489 L1039.02 683.489 L1038.46 683.489 L1037.9 683.489 L1037.34 683.489 L1036.78 683.489 L1036.22 683.489 L1035.66 683.489 L1035.1 683.489 L1034.55 683.489 L1033.99 683.489 L1033.43 683.489 L1032.87 683.489 L1032.31 683.489 L1031.75 683.489 L1031.19 683.489 L1030.63 683.489 L1030.07 683.489 L1029.51 683.489 L1028.95 683.489 L1028.39 683.489 L1027.83 683.489 L1027.28 683.489 L1026.72 683.489 L1026.16 683.489 L1025.6 683.489 L1025.04 683.489 L1024.48 683.489 L1023.92 683.489 L1023.36 683.489 L1022.8 683.489 L1022.24 683.489 L1021.68 683.489 L1021.12 683.489 L1020.56 683.489 L1020.01 683.489 L1019.45 683.489 L1018.89 683.489 L1018.33 683.489 L1017.77 683.489 L1017.21 683.489 L1016.65 683.489 L1016.09 683.489 L1015.53 683.489 L1014.97 683.489 L1014.41 683.489 L1013.85 683.489 L1013.29 683.489 L1012.73 683.489 L1012.18 683.489 L1011.62 683.489 L1011.06 683.489 L1010.5 683.489 L1009.94 683.489 L1009.38 683.489 L1008.82 683.489 L1008.26 683.489 L1007.7 683.489 L1007.14 683.489 L1006.58 683.489 L1006.02 683.489 L1005.46 683.489 L1004.91 683.489 L1004.35 683.489 L1003.79 683.489 L1003.23 683.489 L1002.67 683.489 L1002.11 683.489 L1001.55 683.489 L1000.99 683.489 L1000.43 683.489 L999.872 683.489 L999.313 683.489 L998.754 683.489 L998.194 683.489 L997.635 683.489 L997.076 683.489 L996.517 683.489 L995.957 683.489 L995.398 683.489 L994.839 683.489 L994.28 683.489 L993.72 683.489 L993.161 683.489 L992.602 683.489 L992.043 683.489 L991.483 683.489 L990.924 683.489 L990.365 683.489 L989.806 683.489 L989.246 683.489 L988.687 683.489 L988.128 683.489 L987.569 683.489 L987.009 683.489 L986.45 683.489 L985.891 683.489 L985.332 683.489 L984.772 683.489 L984.213 683.489 L983.654 683.489 L983.095 683.489 L982.535 683.489 L981.976 683.489 L981.417 683.489 L980.858 683.489 L980.298 683.489 L979.739 683.489 L979.18 683.489 L978.621 683.489 L978.061 683.489 L977.502 683.489 L976.943 683.489 L976.384 683.489 L975.824 683.489 L975.265 683.489 L974.706 683.489 L974.147 683.489 L973.587 683.489 L973.028 683.489 L972.469 683.489 L971.91 683.489 L971.35 683.489 L970.791 683.489 L970.232 683.489 L969.673 683.489 L969.113 683.489 L968.554 683.489 L967.995 683.489 L967.436 683.489 L966.876 683.489 L966.317 683.489 L965.758 683.489 L965.199 683.489 L964.639 683.489 L964.08 683.489 L963.521 683.489 L962.962 683.489 L962.402 683.489 L961.843 683.489 L961.284 683.489 L960.725 683.489 L960.165 683.489 L959.606 683.489 L959.047 683.489 L958.488 683.489 L957.928 683.489 L957.369 683.489 L956.81 683.489 L956.251 683.489 L955.691 683.489 L955.132 683.489 L954.573 683.489 L954.014 683.489 L953.454 683.489 L952.895 683.489 L952.336 683.489 L951.777 683.489 L951.217 683.489 L950.658 683.489 L950.099 683.489 L949.54 683.489 L948.98 683.489 L948.421 683.489 L947.862 683.489 L947.303 683.489 L946.743 683.489 L946.184 683.489 L945.625 683.489 L945.066 683.489 L944.506 683.489 L943.947 683.489 L943.388 683.489 L942.829 683.489 L942.269 683.489 L941.71 683.489 L941.151 683.489 L940.592 683.489 L940.032 683.489 L939.473 683.489 L938.914 683.489 L938.355 683.489 L937.795 683.489 L937.236 683.489 L936.677 683.489 L936.118 683.489 L935.558 683.489 L934.999 683.489 L934.44 683.489 L933.881 683.489 L933.321 683.489 L932.762 683.489 L932.203 683.489 L931.644 683.489 L931.084 683.489 L930.525 683.489 L929.966 683.489 L929.406 683.489 L928.847 683.489 L928.288 683.489 L927.729 683.489 L927.169 683.489 L926.61 683.489 L926.051 683.489 L925.492 683.489 L924.932 683.489 L924.373 683.489 L923.814 683.489 L923.255 683.489 L922.695 683.489 L922.136 683.489 L921.577 683.489 L921.018 683.489 L920.458 683.489 L919.899 683.489 L919.34 683.489 L918.781 683.489 L918.221 683.489 L917.662 683.489 L917.103 683.489 L916.544 683.489 L915.984 683.489 L915.425 683.489 L914.866 683.489 L914.307 683.489 L913.747 683.489 L913.188 683.489 L912.629 683.489 L912.07 683.489 L911.51 683.489 L910.951 683.489 L910.392 683.489 L909.833 683.489 L909.273 683.489 L908.714 683.489 L908.155 683.489 L907.596 683.489 L907.036 683.489 L906.477 683.489 L905.918 683.489 L905.359 683.489 L904.799 683.489 L904.24 683.489 L903.681 683.489 L903.122 683.489 L902.562 683.489 L902.003 683.489 L901.444 683.489 L900.885 683.489 L900.325 683.489 L899.766 683.489 L899.207 683.489 L898.648 683.489 L898.088 683.489 L897.529 683.489 L896.97 683.489 L896.411 683.489 L895.851 683.489 L895.292 683.489 L894.733 683.489 L894.174 683.489 L893.614 683.489 L893.055 683.489 L892.496 683.489 L891.937 683.489 L891.377 683.489 L890.818 683.489 L890.259 683.489 L889.7 683.489 L889.14 683.489 L888.581 683.489 L888.022 683.489 L887.463 683.489 L886.903 683.489 L886.344 683.489 L885.785 683.489 L885.226 683.489 L884.666 683.489 L884.107 683.489 L883.548 683.489 L882.989 683.489 L882.429 683.489 L881.87 683.489 L881.311 683.489 L880.752 683.489 L880.192 683.489 L879.633 683.489 L879.074 683.489 L878.515 683.489 L877.955 683.489 L877.396 683.489 L876.837 683.489 L876.278 683.489 L875.718 683.489 L875.159 683.489 L874.6 683.489 L874.041 683.489 L873.481 683.489 L872.922 683.489 L872.363 683.489 L871.804 683.489 L871.244 683.489 L870.685 683.489 L870.126 683.489 L869.567 683.489 L869.007 683.489 L868.448 683.489 L867.889 683.489 L867.33 683.489 L866.77 683.489 L866.211 683.489 L865.652 683.489 L865.093 683.489 L864.533 683.489 L863.974 683.489 L863.415 683.489 L862.856 683.489 L862.296 683.489 L861.737 683.489 L861.178 683.489 L860.619 683.489 L860.059 683.489 L859.5 683.489 L858.941 683.489 L858.382 683.489 L857.822 683.489 L857.263 683.489 L856.704 683.489 L856.145 683.489 L855.585 683.489 L855.026 683.489 L854.467 683.489 L853.908 683.489 L853.348 683.489 L852.789 683.489 L852.23 683.489 L851.671 683.489 L851.111 683.489 L850.552 683.489 L849.993 683.489 L849.434 683.489 L848.874 683.489 L848.315 683.489 L847.756 683.489 L847.197 683.489 L846.637 683.489 L846.078 683.489 L845.519 683.489 L844.96 683.489 L844.4 683.489 L843.841 683.489 L843.282 683.489 L842.723 683.489 L842.163 683.489 L841.604 683.489 L841.045 683.489 L840.486 683.489 L839.926 683.489 L839.367 683.489 L838.808 683.489 L838.249 683.489 L837.689 683.489 L837.13 683.489 L836.571 683.489 L836.012 683.489 L835.452 683.489 L834.893 683.489 L834.334 683.489 L833.775 683.489 L833.215 683.489 L832.656 683.489 L832.097 683.489 L831.538 683.489 L830.978 683.489 L830.419 683.489 L829.86 683.489 L829.301 683.489 L828.741 683.489 L828.182 683.489 L827.623 683.489 L827.064 683.489 L826.504 683.489 L825.945 683.489 L825.386 683.489 L824.827 683.489 L824.267 683.489 L823.708 683.489 L823.149 683.489 L822.59 683.489 L822.03 683.489 L821.471 683.489 L820.912 683.489 L820.353 683.489 L819.793 683.489 L819.234 683.489 L818.675 683.489 L818.116 683.489 L817.556 683.489 L816.997 683.489 L816.438 683.489 L815.879 683.489 L815.319 683.489 L814.76 683.489 L814.201 683.489 L813.642 683.489 L813.082 683.489 L812.523 683.489 L811.964 683.489 L811.405 683.489 L810.845 683.489 L810.286 683.489 L809.727 683.489 L809.168 683.489 L808.608 683.489 L808.049 683.489 L807.49 683.489 L806.931 683.489 L806.371 683.489 L805.812 683.489 L805.253 683.489 L804.693 683.489 L804.134 683.489 L803.575 683.489 L803.016 683.489 L802.456 683.489 L801.897 683.489 L801.338 683.489 L800.779 683.489 L800.219 683.489 L799.66 683.489 L799.101 683.489 L798.542 683.489 L797.982 683.489 L797.423 683.489 L796.864 683.489 L796.305 683.489 L795.745 683.489 L795.186 683.489 L794.627 683.489 L794.068 683.489 L793.508 683.489 L792.949 683.489 L792.39 683.489 L791.831 683.489 L791.271 683.489 L790.712 683.489 L790.153 683.489 L789.594 683.489 L789.034 683.489 L788.475 683.489 L787.916 683.489 L787.357 683.489 L786.797 683.489 L786.238 683.489 L785.679 683.489 L785.12 683.489 L784.56 683.489 L784.001 683.489 L783.442 683.489 L782.883 683.489 L782.323 683.489 L781.764 683.489 L781.205 683.489 L780.646 683.489 L780.086 683.489 L779.527 683.489 L778.968 683.489 L778.409 683.489 L777.849 683.489 L777.29 683.489 L776.731 683.489 L776.172 683.489 L775.612 683.489 L775.053 683.489 L774.494 683.489 L773.935 683.489 L773.375 683.489 L772.816 683.489 L772.257 683.489 L771.698 683.489 L771.138 683.489 L770.579 683.489 L770.02 683.489 L769.461 683.489 L768.901 683.489 L768.342 683.489 L767.783 683.489 L767.224 683.489 L766.664 683.489 L766.105 683.489 L765.546 683.489 L764.987 683.489 L764.427 683.489 L763.868 683.489 L763.309 683.489 L762.75 683.489 L762.19 683.489 L761.631 683.489 L761.072 683.489 L760.513 683.489 L759.953 683.489 L759.394 683.489 L758.835 683.489 L758.276 683.489 L757.716 683.489 L757.157 683.489 L756.598 683.489 L756.039 683.489 L755.479 683.489 L754.92 683.489 L754.361 683.489 L753.802 683.489 L753.242 683.489 L752.683 683.489 L752.124 683.489 L751.565 683.489 L751.005 683.489 L750.446 683.489 L749.887 683.489 L749.328 683.489 L748.768 683.489 L748.209 683.489 L747.65 683.489 L747.091 683.489 L746.531 683.489 L745.972 683.489 L745.413 683.489 L744.854 683.489 L744.294 683.489 L743.735 683.489 L743.176 683.489 L742.617 683.489 L742.057 683.489 L741.498 683.489 L740.939 683.489 L740.38 683.489 L739.82 683.489 L739.261 683.489 L738.702 683.489 L738.143 683.489 L737.583 683.489 L737.024 683.489 L736.465 683.489 L735.906 683.489 L735.346 683.489 L734.787 683.489 L734.228 683.489 L733.669 683.489 L733.109 683.489 L732.55 683.489 L731.991 683.489 L731.432 683.489 L730.872 683.489 L730.313 683.489 L729.754 683.489 L729.195 683.489 L728.635 683.489 L728.076 683.489 L727.517 683.489 L726.958 683.489 L726.398 683.489 L725.839 683.489 L725.28 683.489 L724.721 683.489 L724.161 683.489 L723.602 683.489 L723.043 683.489 L722.484 683.489 L721.924 683.489 L721.365 683.489 L720.806 683.489 L720.247 683.489  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip343)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.025 720.806,687.025 721.365,687.025 721.924,687.025 722.484,687.025 723.043,687.025 723.602,687.025 724.161,687.025 724.721,687.025 725.28,687.025 725.839,687.025 726.398,687.025 726.958,687.025 727.517,687.025 728.076,687.025 728.635,687.025 729.195,687.025 729.754,687.025 730.313,687.025 730.872,687.025 731.432,687.025 731.991,687.025 732.55,687.025 733.109,687.025 733.669,687.025 734.228,687.025 734.787,687.025 735.346,687.025 735.906,687.025 736.465,687.025 737.024,687.025 737.583,687.025 738.143,687.025 738.702,687.025 739.261,687.025 739.82,687.025 740.38,687.025 740.939,687.025 741.498,687.025 742.057,687.025 742.617,687.025 743.176,687.025 743.735,687.025 744.294,687.025 744.854,687.025 745.413,687.025 745.972,687.025 746.531,687.025 747.091,687.025 747.65,687.025 748.209,687.025 748.768,687.025 749.328,687.025 749.887,687.025 750.446,687.025 751.005,687.025 751.565,687.025 752.124,687.025 752.683,687.025 753.242,687.025 753.802,687.025 754.361,687.025 754.92,687.025 755.479,687.025 756.039,687.025 756.598,687.025 757.157,687.025 757.716,687.025 758.276,687.025 758.835,687.025 759.394,687.025 759.953,687.025 760.513,687.025 761.072,687.025 761.631,687.025 762.19,687.025 762.75,687.025 763.309,687.025 763.868,687.025 764.427,687.025 764.987,687.025 765.546,687.025 766.105,687.025 766.664,687.025 767.224,687.025 767.783,687.025 768.342,687.025 768.901,687.025 769.461,687.025 770.02,687.025 770.579,687.025 771.138,687.025 771.698,687.025 772.257,687.025 772.816,687.025 773.375,687.025 773.935,687.025 774.494,687.025 775.053,687.025 775.612,687.025 776.172,687.025 776.731,687.025 777.29,687.025 777.849,687.025 778.409,687.025 778.968,687.025 779.527,687.025 780.086,687.025 780.646,687.025 781.205,687.025 781.764,687.025 782.323,687.025 782.883,687.025 783.442,687.025 784.001,687.025 784.56,687.025 785.12,687.025 785.679,687.025 786.238,687.025 786.797,687.025 787.357,687.025 787.916,687.025 788.475,687.025 789.034,687.025 789.594,687.025 790.153,687.025 790.712,687.025 791.271,687.025 791.831,687.025 792.39,687.025 792.949,687.025 793.508,687.025 794.068,687.025 794.627,687.025 795.186,687.025 795.745,687.025 796.305,687.025 796.864,687.025 797.423,687.025 797.982,687.025 798.542,687.025 799.101,687.025 799.66,687.025 800.219,687.025 800.779,687.025 801.338,687.025 801.897,687.025 802.456,687.025 803.016,687.025 803.575,687.025 804.134,687.025 804.693,687.025 805.253,687.025 805.812,687.025 806.371,687.025 806.931,687.025 807.49,687.025 808.049,687.025 808.608,687.025 809.168,687.025 809.727,687.025 810.286,687.025 810.845,687.025 811.405,687.025 811.964,687.025 812.523,687.025 813.082,687.025 813.642,687.025 814.201,687.025 814.76,687.025 815.319,687.025 815.879,687.025 816.438,687.025 816.997,687.025 817.556,687.025 818.116,687.025 818.675,687.025 819.234,687.025 819.793,687.025 820.353,687.025 820.912,687.025 821.471,687.025 822.03,687.025 822.59,687.025 823.149,687.025 823.708,687.025 824.267,687.025 824.827,687.025 825.386,687.025 825.945,687.025 826.504,687.025 827.064,687.025 827.623,687.025 828.182,687.025 828.741,687.025 829.301,687.025 829.86,687.025 830.419,687.025 830.978,687.025 831.538,687.025 832.097,687.025 832.656,687.025 833.215,687.025 833.775,687.025 834.334,687.025 834.893,687.025 835.452,687.025 836.012,687.025 836.571,687.025 837.13,687.025 837.689,687.025 838.249,687.025 838.808,687.025 839.367,687.025 839.926,687.025 840.486,687.025 841.045,687.025 841.604,687.025 842.163,687.025 842.723,687.025 843.282,687.025 843.841,687.025 844.4,687.025 844.96,687.025 845.519,687.025 846.078,687.025 846.637,687.025 847.197,687.025 847.756,687.025 848.315,687.025 848.874,687.025 849.434,687.025 849.993,687.025 850.552,687.025 851.111,687.025 851.671,687.025 852.23,687.025 852.789,687.025 853.348,687.025 853.908,687.025 854.467,687.025 855.026,687.025 855.585,687.025 856.145,687.025 856.704,687.025 857.263,687.025 857.822,687.025 858.382,687.025 858.941,687.025 859.5,687.025 860.059,687.025 860.619,687.025 861.178,687.025 861.737,687.025 862.296,687.025 862.856,687.025 863.415,687.025 863.974,687.025 864.533,687.025 865.093,687.025 865.652,687.025 866.211,687.025 866.77,687.025 867.33,687.025 867.889,687.025 868.448,687.025 869.007,687.025 869.567,687.025 870.126,687.025 870.685,687.025 871.244,687.025 871.804,687.025 872.363,687.025 872.922,687.025 873.481,687.025 874.041,687.025 874.6,687.025 875.159,687.025 875.718,687.025 876.278,687.025 876.837,687.025 877.396,687.025 877.955,687.025 878.515,687.025 879.074,687.025 879.633,687.025 880.192,687.025 880.752,687.025 881.311,687.025 881.87,687.025 882.429,687.025 882.989,687.025 883.548,687.025 884.107,687.025 884.666,687.025 885.226,687.025 885.785,687.025 886.344,687.025 886.903,687.025 887.463,687.025 888.022,687.025 888.581,687.025 889.14,687.025 889.7,687.025 890.259,687.025 890.818,687.025 891.377,687.025 891.937,687.025 892.496,687.025 893.055,687.025 893.614,687.025 894.174,687.025 894.733,687.025 895.292,687.025 895.851,687.025 896.411,687.025 896.97,687.025 897.529,687.025 898.088,687.025 898.648,687.025 899.207,687.025 899.766,687.025 900.325,687.025 900.885,687.025 901.444,687.025 902.003,687.025 902.562,687.025 903.122,687.025 903.681,687.025 904.24,687.025 904.799,687.025 905.359,687.025 905.918,687.025 906.477,687.025 907.036,687.025 907.596,687.025 908.155,687.025 908.714,687.025 909.273,687.025 909.833,687.025 910.392,687.025 910.951,687.025 911.51,687.025 912.07,687.025 912.629,687.025 913.188,687.025 913.747,687.025 914.307,687.025 914.866,687.025 915.425,687.025 915.984,687.025 916.544,687.025 917.103,687.025 917.662,687.025 918.221,687.025 918.781,687.025 919.34,687.025 919.899,687.025 920.458,687.025 921.018,687.025 921.577,687.025 922.136,687.025 922.695,687.025 923.255,687.025 923.814,687.025 924.373,687.025 924.932,687.025 925.492,687.025 926.051,687.025 926.61,687.025 927.169,687.025 927.729,687.025 928.288,687.025 928.847,687.025 929.406,687.025 929.966,687.025 930.525,687.025 931.084,687.025 931.644,687.025 932.203,687.025 932.762,687.025 933.321,687.025 933.881,687.025 934.44,687.025 934.999,687.025 935.558,687.025 936.118,687.025 936.677,687.025 937.236,687.025 937.795,687.025 938.355,687.025 938.914,687.025 939.473,687.025 940.032,687.025 940.592,687.025 941.151,687.025 941.71,687.025 942.269,687.025 942.829,687.025 943.388,687.025 943.947,687.025 944.506,687.025 945.066,687.025 945.625,687.025 946.184,687.025 946.743,687.025 947.303,687.025 947.862,687.025 948.421,687.025 948.98,687.025 949.54,687.025 950.099,687.025 950.658,687.025 951.217,687.025 951.777,687.025 952.336,687.025 952.895,687.025 953.454,687.025 954.014,687.025 954.573,687.025 955.132,687.025 955.691,687.025 956.251,687.025 956.81,687.025 957.369,687.025 957.928,687.025 958.488,687.025 959.047,687.025 959.606,687.025 960.165,687.025 960.725,687.025 961.284,687.025 961.843,687.025 962.402,687.025 962.962,687.025 963.521,687.025 964.08,687.025 964.639,687.025 965.199,687.025 965.758,687.025 966.317,687.025 966.876,687.025 967.436,687.025 967.995,687.025 968.554,687.025 969.113,687.025 969.673,687.025 970.232,687.025 970.791,687.025 971.35,687.025 971.91,687.025 972.469,687.025 973.028,687.025 973.587,687.025 974.147,687.025 974.706,687.025 975.265,687.025 975.824,687.025 976.384,687.025 976.943,687.025 977.502,687.025 978.061,687.025 978.621,687.025 979.18,687.025 979.739,687.025 980.298,687.025 980.858,687.025 981.417,687.025 981.976,687.025 982.535,687.025 983.095,687.025 983.654,687.025 984.213,687.025 984.772,687.025 985.332,687.025 985.891,687.025 986.45,687.025 987.009,687.025 987.569,687.025 988.128,687.025 988.687,687.025 989.246,687.025 989.806,687.025 990.365,687.025 990.924,687.025 991.483,687.025 992.043,687.025 992.602,687.025 993.161,687.025 993.72,687.025 994.28,687.025 994.839,687.025 995.398,687.025 995.957,687.025 996.517,687.025 997.076,687.025 997.635,687.025 998.194,687.025 998.754,687.025 999.313,687.025 999.872,687.025 1000.43,687.025 1000.99,687.025 1001.55,687.025 1002.11,687.025 1002.67,687.025 1003.23,687.025 1003.79,687.025 1004.35,687.025 1004.91,687.025 1005.46,687.025 1006.02,687.025 1006.58,687.025 1007.14,687.025 1007.7,687.025 1008.26,687.025 1008.82,687.025 1009.38,687.025 1009.94,687.025 1010.5,687.025 1011.06,687.025 1011.62,687.025 1012.18,687.025 1012.73,687.025 1013.29,687.025 1013.85,687.025 1014.41,687.025 1014.97,687.025 1015.53,687.025 1016.09,687.025 1016.65,687.025 1017.21,687.025 1017.77,687.025 1018.33,687.025 1018.89,687.025 1019.45,687.025 1020.01,687.025 1020.56,687.025 1021.12,687.025 1021.68,687.025 1022.24,687.025 1022.8,687.025 1023.36,687.025 1023.92,687.025 1024.48,687.025 1025.04,687.025 1025.6,687.025 1026.16,687.025 1026.72,687.025 1027.28,687.025 1027.83,687.025 1028.39,687.025 1028.95,687.025 1029.51,687.025 1030.07,687.025 1030.63,687.025 1031.19,687.025 1031.75,687.025 1032.31,687.025 1032.87,687.025 1033.43,687.025 1033.99,687.025 1034.55,687.025 1035.1,687.025 1035.66,687.025 1036.22,687.025 1036.78,687.025 1037.34,687.025 1037.9,687.025 1038.46,687.025 1039.02,687.025 1039.58,687.025 1040.14,687.025 1040.7,687.025 1041.26,687.025 1041.82,687.025 1042.38,687.025 1042.93,687.025 1043.49,687.025 1044.05,687.025 1044.61,687.025 1045.17,687.025 1045.73,687.025 1046.29,687.025 1046.85,687.025 1047.41,687.025 1047.97,687.025 1048.53,687.025 1049.09,687.025 1049.65,687.025 1050.2,687.025 1050.76,687.025 1051.32,687.025 1051.88,687.025 1052.44,687.025 1053,687.025 1053.56,687.025 1054.12,687.025 1054.68,687.025 1055.24,687.025 1055.8,687.025 1056.36,687.025 1056.92,687.025 1057.48,687.025 1058.03,687.025 1058.59,687.025 1059.15,687.025 1059.71,687.025 1060.27,687.025 1060.83,687.025 1061.39,687.025 1061.95,687.025 1062.51,687.025 1063.07,687.025 1063.63,687.025 1064.19,687.025 1064.75,687.025 1065.3,687.025 1065.86,687.025 1066.42,687.025 1066.98,687.025 1067.54,687.025 1068.1,687.025 1068.66,687.025 1069.22,687.025 1069.78,687.025 1070.34,687.025 1070.9,687.025 1071.46,687.025 1072.02,687.025 1072.57,687.025 1073.13,687.025 1073.69,687.025 1074.25,687.025 1074.81,687.025 1075.37,687.025 1075.93,687.025 1076.49,687.025 1077.05,687.025 1077.61,687.025 1078.17,687.025 1078.73,687.025 1079.29,687.025 1079.85,687.025 1080.4,687.025 1080.96,687.025 1081.52,687.025 1082.08,687.025 1082.64,687.025 1083.2,687.025 1083.76,687.025 1084.32,687.025 1084.88,687.025 1085.44,687.025 1086,687.025 1086.56,687.025 1087.12,687.025 1087.67,687.025 1088.23,687.025 1088.79,687.025 1089.35,687.025 1089.91,687.025 1090.47,687.025 1091.03,687.025 1091.59,687.025 1092.15,687.025 1092.71,687.025 1093.27,687.025 1093.83,687.025 1094.39,687.025 1094.94,687.025 1095.5,687.025 1096.06,687.025 1096.62,687.025 1097.18,687.025 1097.74,687.025 1098.3,687.025 1098.86,687.025 1099.42,687.025 1099.98,687.025 1100.54,687.025 1101.1,687.025 1101.66,687.025 1102.22,687.025 1102.77,687.025 1103.33,687.025 1103.89,687.025 1104.45,687.025 1105.01,687.025 1105.57,687.025 1106.13,687.025 1106.69,687.025 1107.25,687.025 1107.81,687.025 1108.37,687.025 1108.93,687.025 1109.49,687.025 1110.04,687.025 1110.6,687.025 1111.16,687.025 1111.72,687.025 1112.28,687.025 1112.84,687.025 1113.4,687.025 1113.96,687.025 1114.52,687.025 1115.08,687.025 1115.64,687.025 1116.2,687.025 1116.76,687.025 1117.31,687.025 1117.87,687.025 1118.43,687.025 1118.99,687.025 1119.55,687.025 1120.11,687.025 1120.67,687.025 1121.23,687.025 1121.79,687.025 1122.35,687.025 1122.91,687.025 1123.47,687.025 1124.03,687.025 1124.59,687.025 1125.14,687.025 1125.7,687.025 1126.26,687.025 1126.82,687.025 1127.38,687.025 1127.94,687.025 1128.5,687.025 1129.06,687.025 1129.62,687.025 1130.18,687.025 1130.74,687.025 1131.3,687.025 1131.86,687.025 1132.41,687.025 1132.97,687.025 1133.53,687.025 1134.09,687.025 1134.65,687.025 1135.21,687.025 1135.77,687.025 1136.33,687.025 1136.89,687.025 1137.45,687.025 1138.01,687.025 1138.57,687.025 1139.13,687.025 1139.68,687.025 1140.24,687.025 1140.8,687.025 1141.36,687.025 1141.92,687.025 1142.48,687.025 1143.04,687.025 1143.6,687.025 1144.16,687.025 1144.72,687.025 1145.28,687.025 1145.84,687.025 1146.4,687.025 1146.96,687.025 1147.51,687.025 1148.07,687.025 1148.63,687.025 1149.19,687.025 1149.75,687.025 1150.31,687.025 1150.87,687.025 1151.43,687.025 1151.99,687.025 1152.55,687.025 1153.11,687.025 1153.67,687.025 1154.23,687.025 1154.78,687.025 1155.34,687.025 1155.9,687.025 1156.46,687.025 1157.02,687.025 1157.58,687.025 1158.14,687.025 1158.7,687.025 1159.26,687.025 1159.82,687.025 1160.38,687.025 1160.94,687.025 1161.5,687.025 1162.05,687.025 1162.61,687.025 1163.17,687.025 1163.73,687.025 1164.29,687.025 1164.85,687.025 1165.41,687.025 1165.97,687.025 1166.53,687.025 1167.09,687.025 1167.65,687.025 1168.21,687.025 1168.77,687.025 1169.33,687.025 1169.88,687.025 1170.44,687.025 1171,687.025 1171.56,687.025 1172.12,687.025 1172.68,687.025 1173.24,687.025 1173.8,687.025 1174.36,687.025 1174.92,687.025 1175.48,687.025 1176.04,687.025 1176.6,687.025 1177.15,687.025 1177.71,687.025 1178.27,687.025 1178.83,687.025 1179.39,687.025 1179.95,687.025 1180.51,687.025 1181.07,687.025 1181.63,687.025 1182.19,687.025 1182.75,687.025 1183.31,687.025 1183.87,687.025 1184.43,687.025 1184.98,687.025 1185.54,687.025 1186.1,687.025 1186.66,687.025 1187.22,687.025 1187.78,687.025 1188.34,687.025 1188.9,687.025 1189.46,687.025 1190.02,687.025 1190.58,687.025 1191.14,687.025 1191.7,687.025 1192.25,687.025 1192.81,687.025 1193.37,687.025 1193.93,687.025 1194.49,687.025 1195.05,687.025 1195.61,687.025 1196.17,687.025 1196.73,687.025 1197.29,687.025 1197.85,687.025 1198.41,687.025 1198.97,687.025 1199.52,687.025 1200.08,687.025 1200.64,687.025 1201.2,687.025 1201.76,687.025 1202.32,687.025 1202.88,687.025 1203.44,687.025 1204,687.025 1204.56,687.025 1205.12,687.025 1205.68,687.025 1206.24,687.025 1206.8,687.025 1207.35,687.025 1207.91,687.025 1208.47,687.025 1209.03,687.025 1209.59,687.025 1210.15,687.025 1210.71,687.025 1211.27,687.025 1211.83,687.025 1212.39,687.025 1212.95,687.025 1213.51,687.025 1214.07,687.025 1214.62,687.025 1215.18,687.025 1215.74,687.025 1216.3,687.025 1216.86,687.025 1217.42,687.025 1217.98,687.025 1218.54,687.025 1219.1,687.025 1219.66,687.025 1220.22,687.025 1220.78,687.025 1221.34,687.025 1221.89,687.025 1222.45,687.025 1223.01,687.025 1223.57,687.025 1224.13,687.025 1224.69,687.025 1225.25,687.025 1225.81,687.025 1226.37,687.025 1226.93,687.025 1227.49,687.025 1228.05,687.025 1228.61,687.025 1229.17,687.025 1229.72,687.025 1230.28,687.025 1230.84,687.025 1231.4,687.025 1231.96,687.025 1232.52,687.025 1233.08,687.025 1233.64,687.025 1234.2,687.025 1234.76,687.025 1235.32,687.025 1235.88,687.025 1236.44,687.025 1236.99,687.025 1237.55,687.025 1238.11,687.025 1238.67,687.025 1239.23,687.025 1239.79,687.025 1240.35,687.025 1240.91,687.025 1241.47,687.025 1242.03,687.025 1242.59,687.025 1243.15,687.025 1243.71,687.025 1244.26,687.025 1244.82,687.025 1245.38,687.025 1245.94,687.025 1246.5,687.025 1247.06,687.025 1247.62,687.025 1248.18,687.025 1248.74,687.025 1249.3,687.025 1249.86,687.025 1250.42,687.025 1250.98,687.025 1251.54,687.025 1252.09,687.025 1252.65,687.025 1253.21,687.025 1253.77,687.025 1254.33,687.025 1254.89,687.025 1255.45,687.025 1256.01,687.025 1256.57,687.025 1257.13,687.025 1257.69,687.025 1258.25,687.025 1258.81,687.025 1259.36,687.025 1259.92,687.025 1260.48,687.025 1261.04,687.025 1261.6,687.025 1262.16,687.025 1262.72,687.025 1263.28,687.025 1263.84,687.025 1264.4,687.025 1264.96,687.025 1265.52,687.025 1266.08,687.025 1266.63,687.025 1267.19,687.025 1267.75,687.025 1268.31,687.025 1268.87,687.025 1269.43,687.025 1269.99,687.025 1270.55,687.025 1271.11,687.025 1271.67,687.025 1272.23,687.025 1272.79,687.025 1273.35,687.025 1273.91,687.025 1274.46,687.025 1275.02,687.025 1275.58,687.025 1276.14,687.025 1276.7,687.025 1277.26,687.025 1277.82,687.025 1278.38,687.025 1278.94,687.025 1279.5,687.025 1280.06,687.025 1280.62,687.025 1281.18,687.025 1281.73,687.025 1282.29,687.025 1282.85,687.025 1283.41,687.025 1283.97,687.025 1284.53,687.025 1285.09,687.025 1285.65,687.025 1286.21,687.025 1286.77,687.025 1287.33,687.025 1287.89,687.025 1288.45,687.025 1289,687.025 1289.56,687.025 1290.12,687.025 1290.68,687.025 1291.24,687.025 1291.8,687.025 1292.36,687.025 1292.92,687.025 1293.48,687.025 1294.04,687.025 1294.6,687.025 1295.16,687.025 1295.72,687.025 1296.28,687.025 1296.83,687.025 1297.39,687.025 1297.95,687.025 1298.51,687.025 1299.07,687.025 1299.63,687.025 1300.19,687.025 1300.75,687.025 1301.31,687.025 1301.87,687.025 1302.43,687.025 1302.99,687.025 1303.55,687.025 1304.1,687.025 1304.66,687.025 1305.22,687.025 1305.78,687.025 1306.34,687.025 1306.9,687.025 1307.46,687.025 1308.02,687.025 1308.58,687.025 1309.14,687.025 1309.7,687.025 1310.26,687.025 1310.82,687.025 1311.38,687.025 1311.93,687.025 1312.49,687.025 1313.05,687.025 1313.61,687.025 1314.17,687.025 1314.73,687.025 1315.29,687.025 1315.85,687.025 1316.41,687.025 1316.97,687.025 1317.53,687.025 1318.09,687.025 1318.65,687.025 1319.2,687.025 1319.76,687.025 1320.32,687.025 1320.88,687.025 1321.44,687.025 1322,687.025 1322.56,687.025 1323.12,687.025 1323.68,687.025 1324.24,687.025 1324.8,687.025 1325.36,687.025 1325.92,687.025 1326.47,687.025 1327.03,687.025 1327.59,687.025 1328.15,687.025 1328.71,687.025 1329.27,687.025 1329.83,687.025 1330.39,687.025 1330.95,687.025 1331.51,687.025 1332.07,687.025 1332.63,687.025 1333.19,687.025 1333.75,687.025 1334.3,687.025 1334.86,687.025 1335.42,687.025 1335.98,687.025 1336.54,687.025 1337.1,687.025 1337.66,687.025 1338.22,687.025 1338.78,687.025 1339.34,687.025 1339.9,687.025 1340.46,687.025 1341.02,687.025 1341.57,687.025 1342.13,687.025 1342.69,687.025 1343.25,687.025 1343.81,687.025 1344.37,687.025 1344.93,687.025 1345.49,687.025 1346.05,687.025 1346.61,687.025 1347.17,687.025 1347.73,687.025 1348.29,687.025 1348.84,687.025 1349.4,687.025 1349.96,687.025 1350.52,687.025 1351.08,687.025 1351.64,687.025 1352.2,687.025 1352.76,687.025 1353.32,687.025 1353.88,687.025 1354.44,687.025 1355,687.025 1355.56,687.025 1356.12,687.025 1356.67,687.025 1357.23,687.025 1357.79,687.025 1358.35,687.025 1358.91,687.025 1359.47,687.025 1360.03,687.025 1360.59,687.025 1361.15,687.025 1361.71,687.025 1362.27,687.025 1362.83,687.025 1363.39,687.025 1363.94,687.025 1364.5,687.025 1365.06,687.025 1365.62,687.025 1366.18,687.025 1366.74,687.025 1367.3,687.025 1367.86,687.025 1368.42,687.025 1368.98,687.025 1369.54,687.025 1370.1,687.025 1370.66,687.025 1371.21,687.025 1371.77,687.025 1372.33,687.025 1372.89,687.025 1373.45,687.025 1374.01,687.025 1374.57,687.025 1375.13,687.025 1375.69,687.025 1376.25,687.025 1376.81,687.025 1377.37,687.025 1377.93,687.025 1378.49,687.025 1379.04,687.025 1379.6,687.025 1380.16,687.025 1380.72,687.025 1381.28,687.025 1381.84,687.025 1382.4,687.025 1382.96,687.025 1383.52,687.025 1384.08,687.025 1384.64,687.025 1385.2,687.025 1385.76,687.025 1386.31,687.025 1386.87,687.025 1387.43,687.025 1387.99,687.025 1388.55,687.025 1389.11,687.025 1389.67,687.025 1390.23,687.025 1390.79,687.025 1391.35,687.025 1391.91,687.025 1392.47,687.025 1393.03,687.025 1393.58,687.025 1394.14,687.025 1394.7,687.025 1395.26,687.025 1395.82,687.025 1396.38,687.025 1396.94,687.025 1397.5,687.025 1398.06,687.025 1398.62,687.025 1399.18,687.025 1399.74,687.025 1400.3,687.025 1400.86,687.025 1401.41,687.025 1401.97,687.025 1402.53,687.025 1403.09,687.025 1403.65,687.025 1404.21,687.025 1404.77,687.025 1405.33,687.025 1405.89,687.025 1406.45,687.025 1407.01,687.025 1407.57,687.025 1408.13,687.025 1408.68,687.025 1409.24,687.025 1409.8,687.025 1410.36,687.025 1410.92,687.025 1411.48,687.025 1412.04,687.025 1412.6,687.025 1413.16,687.025 1413.72,687.025 1414.28,687.025 1414.84,687.025 1415.4,687.025 1415.95,687.025 1416.51,687.025 1417.07,687.025 1417.63,687.025 1418.19,687.025 1418.75,687.025 1419.31,687.025 1419.87,687.025 1420.43,687.025 1420.99,687.025 1421.55,687.025 1422.11,687.025 1422.67,687.025 1423.23,687.025 1423.78,687.025 1424.34,687.025 1424.9,687.025 1425.46,687.025 1426.02,687.025 1426.58,687.025 1427.14,687.025 1427.7,687.025 1428.26,687.025 1428.82,687.025 1429.38,687.025 1429.94,687.025 1430.5,687.025 1431.05,687.025 1431.61,687.025 1432.17,687.025 1432.73,687.025 1433.29,687.025 1433.85,687.025 1434.41,687.025 1434.97,687.025 1435.53,687.025 1436.09,687.025 1436.65,687.025 1437.21,687.025 1437.77,687.025 1438.33,687.025 1438.88,687.025 1439.44,687.025 1440,687.025 1440.56,687.025 1441.12,687.025 1441.68,687.025 1442.24,687.025 1442.8,687.025 1443.36,687.025 1443.92,687.025 1444.48,687.025 1445.04,687.025 1445.6,687.025 1446.15,687.025 1446.71,687.025 1447.27,687.025 1447.83,687.025 1448.39,687.025 1448.95,687.025 1449.51,687.025 1450.07,687.025 1450.63,687.025 1451.19,687.025 1451.75,687.025 1452.31,687.025 1452.87,687.025 1453.42,687.025 1453.98,687.025 1454.54,687.025 1455.1,687.025 1455.66,687.025 1456.22,687.025 1456.78,687.025 1457.34,687.025 1457.9,687.025 1458.46,687.025 1459.02,687.025 1459.58,687.025 1460.14,687.025 1460.7,687.025 1461.25,687.025 1461.81,687.025 1462.37,687.025 1462.93,687.025 1463.49,687.025 1464.05,687.025 1464.61,687.025 1465.17,687.025 1465.73,687.025 1466.29,687.025 1466.85,687.025 1467.41,687.025 1467.97,687.025 1468.52,687.025 1469.08,687.025 1469.64,687.025 1470.2,687.025 1470.76,687.025 1471.32,687.025 1471.88,687.025 1472.44,687.025 1473,687.025 1473.56,687.025 1474.12,687.025 1474.68,687.025 1475.24,687.025 1475.79,687.025 1476.35,687.025 1476.91,687.025 1477.47,687.025 1478.03,687.025 1478.59,687.025 1479.15,687.025 1479.71,687.025 1480.27,687.025 1480.83,687.025 1481.39,687.025 1481.95,687.025 1482.51,687.025 1483.07,687.025 1483.62,687.025 1484.18,687.025 1484.74,687.025 1485.3,687.025 1485.86,687.025 1486.42,687.025 1486.98,687.025 1487.54,687.025 1488.1,687.025 1488.66,687.025 1489.22,687.025 1489.78,687.025 1490.34,687.025 1490.89,687.025 1491.45,687.025 1492.01,687.025 1492.57,687.025 1493.13,687.025 1493.69,687.025 1494.25,687.025 1494.81,687.025 1495.37,687.025 1495.93,687.025 1496.49,687.025 1497.05,687.025 1497.61,687.025 1498.16,687.025 1498.72,687.025 1499.28,687.025 1499.84,687.025 1500.4,687.025 1500.96,687.025 1501.52,687.025 1502.08,687.025 1502.64,687.025 1503.2,687.025 1503.76,687.025 1504.32,687.025 1504.88,687.025 1505.44,687.025 1505.99,687.025 1506.55,687.025 1507.11,687.025 1507.67,687.025 1508.23,687.025 1508.79,687.025 1509.35,687.025 1509.91,687.025 1510.47,687.025 1511.03,687.025 1511.59,687.025 1512.15,687.025 1512.71,687.025 1513.26,687.025 1513.82,687.025 1514.38,687.025 1514.94,687.025 1515.5,687.025 1516.06,687.025 1516.62,687.025 1517.18,687.025 1517.74,687.025 1518.3,687.025 1518.86,687.025 1519.42,687.025 1519.98,687.025 1520.53,687.025 1521.09,687.025 1521.65,687.025 1522.21,687.025 1522.77,687.025 1523.33,687.025 1523.89,687.025 1524.45,687.025 1525.01,687.025 1525.57,687.025 1526.13,687.025 1526.69,687.025 1527.25,687.025 1527.81,687.025 1528.36,687.025 1528.92,687.025 1529.48,687.025 1530.04,687.025 1530.6,687.025 1531.16,687.025 1531.72,687.025 1532.28,687.025 1532.84,687.025 1533.4,687.025 1533.96,687.025 1534.52,687.025 1535.08,687.025 1535.63,687.025 1536.19,687.025 1536.75,687.025 1537.31,687.025 1537.87,687.025 1538.43,687.025 1538.99,687.025 1539.55,687.025 1540.11,687.025 1540.67,687.025 1541.23,687.025 1541.79,687.025 1542.35,687.025 1542.9,687.025 1543.46,687.025 1544.02,687.025 1544.58,687.025 1545.14,687.025 1545.7,687.025 1546.26,687.025 1546.82,687.025 1547.38,687.025 1547.94,687.025 1548.5,687.025 1549.06,687.025 1549.62,687.025 1550.18,687.025 1550.73,687.025 1551.29,687.025 1551.85,687.025 1552.41,687.025 1552.97,687.025 1553.53,687.025 1554.09,687.025 1554.65,687.025 1555.21,687.025 1555.77,687.025 1556.33,687.025 1556.89,687.025 1557.45,687.025 1558,687.025 1558.56,687.025 1559.12,687.025 1559.68,687.025 1560.24,687.025 1560.8,687.025 1561.36,687.025 1561.92,687.025 1562.48,687.025 1563.04,687.025 1563.6,687.025 1564.16,687.025 1564.72,687.025 1565.28,687.025 1565.83,687.025 1566.39,687.025 1566.95,687.025 1567.51,687.025 1568.07,687.025 1568.63,687.025 1569.19,687.025 1569.75,687.025 1570.31,687.025 1570.87,687.025 1571.43,687.025 1571.99,687.025 1572.55,687.025 1573.1,687.025 1573.66,687.025 1574.22,687.025 1574.78,687.025 1575.34,687.025 1575.9,687.025 1576.46,687.025 1577.02,687.025 1577.58,687.025 1578.14,687.025 1578.7,687.025 1579.26,687.025 1579.82,687.025 1580.37,687.025 1580.93,687.025 1581.49,687.025 1582.05,687.025 1582.61,687.025 1583.17,687.025 1583.73,687.025 1584.29,687.025 1584.85,687.025 1585.41,687.025 1585.97,687.025 1586.53,687.025 1587.09,687.025 1587.65,687.025 1588.2,687.025 1588.76,687.025 1589.32,687.025 1589.88,687.025 1590.44,687.025 1591,687.025 1591.56,687.025 1592.12,687.025 1592.68,687.025 1593.24,687.025 1593.8,687.025 1594.36,687.025 1594.92,687.025 1595.47,687.025 1596.03,687.025 1596.59,687.025 1597.15,687.025 1597.71,687.025 1598.27,687.025 1598.83,687.025 1599.39,687.025 1599.95,687.025 1600.51,687.025 1601.07,687.025 1601.63,687.025 1602.19,687.025 1602.74,687.025 1603.3,687.025 1603.86,687.025 1604.42,687.025 1604.98,687.025 1605.54,687.025 1606.1,687.025 1606.66,687.025 1607.22,687.025 1607.78,687.025 1608.34,687.025 1608.9,687.025 1609.46,687.025 1610.02,687.025 1610.57,687.025 1611.13,687.025 1611.69,687.025 1612.25,687.025 1612.81,687.025 1613.37,687.025 1613.93,687.025 1614.49,687.025 1615.05,687.025 1615.61,687.025 1616.17,687.025 1616.73,687.025 1617.29,687.025 1617.84,687.025 1618.4,687.025 1618.96,687.025 1619.52,687.025 1620.08,687.025 1620.64,687.025 1621.2,687.025 1621.76,687.025 1622.32,687.025 1622.88,687.025 1623.44,687.025 1624,687.025 1624.56,687.025 1625.11,687.025 1625.67,687.025 1626.23,687.025 1626.79,687.025 1627.35,687.025 1627.91,687.025 1628.47,687.025 1629.03,687.025 1629.59,687.025 1630.15,687.025 1630.71,687.025 1631.27,687.025 1631.83,687.025 1632.39,687.025 1632.94,687.025 1633.5,687.025 1634.06,687.025 1634.62,687.025 1635.18,687.025 1635.74,687.025 1636.3,687.025 1636.86,687.025 1637.42,687.025 1637.98,687.025 1638.54,687.025 1639.1,687.025 1639.66,687.025 1640.21,687.025 1640.77,687.025 1641.33,687.025 1641.89,687.025 1642.45,687.025 1643.01,687.025 1643.57,687.025 1644.13,687.025 1644.69,687.025 1645.25,687.025 1645.81,687.025 1646.37,687.025 1646.93,687.025 1647.48,687.025 1648.04,687.025 1648.6,687.025 1649.16,687.025 1649.72,687.025 1650.28,687.025 1650.84,687.025 1651.4,687.025 1651.96,687.025 1652.52,687.025 1653.08,687.025 1653.64,687.025 1654.2,687.025 1654.76,687.025 1655.31,687.025 1655.87,687.025 1656.43,687.025 1656.99,687.025 1657.55,687.025 1658.11,687.025 1658.67,687.025 1659.23,687.025 1659.79,687.025 1660.35,687.025 1660.91,687.025 1661.47,687.025 1662.03,687.025 1662.58,687.025 1663.14,687.025 1663.7,687.025 1664.26,687.025 1664.82,687.025 1665.38,687.025 1665.94,687.025 1666.5,687.025 1667.06,687.025 1667.62,687.025 1668.18,687.025 1668.74,687.025 1669.3,687.025 1669.85,687.025 1670.41,687.025 1670.97,687.025 1671.53,687.025 1672.09,687.025 1672.65,687.025 1673.21,687.025 1673.77,687.025 1674.33,687.025 1674.89,687.025 1675.45,687.025 1676.01,687.025 1676.57,687.025 1677.13,687.025 1677.68,687.025 1678.24,687.025 1678.8,687.025 1679.36,687.025 1679.92,687.025 1680.48,687.025 1681.04,687.025 1681.6,687.025 1682.16,687.025 1682.72,687.025 1683.28,687.025 1683.84,687.025 1684.4,687.025 1684.95,687.025 1685.51,687.025 1686.07,687.025 1686.63,687.025 1687.19,687.025 1687.75,687.025 1688.31,687.025 1688.87,687.025 1689.43,687.025 1689.99,687.025 1690.55,687.025 1691.11,687.025 1691.67,687.025 1692.23,687.025 1692.78,687.025 1693.34,687.025 1693.9,687.025 1694.46,687.025 1695.02,687.025 1695.58,687.025 1696.14,687.025 1696.7,687.025 1697.26,687.025 1697.82,687.025 1698.38,687.025 1698.94,687.025 1699.5,687.025 1700.05,687.025 1700.61,687.025 1701.17,687.025 1701.73,687.025 1702.29,687.025 1702.85,687.025 1703.41,687.025 1703.97,687.025 1704.53,687.025 1705.09,687.025 1705.65,687.025 1706.21,687.025 1706.77,687.025 1707.32,687.025 1707.88,687.025 1708.44,687.025 1709,687.025 1709.56,687.025 1710.12,687.025 1710.68,687.025 1711.24,687.025 1711.8,687.025 1712.36,687.025 1712.92,687.025 1713.48,687.025 1714.04,687.025 1714.6,687.025 1715.15,687.025 1715.71,687.025 1716.27,687.025 1716.83,687.025 1717.39,687.025 1717.95,687.025 1718.51,687.025 1719.07,687.025 1719.63,687.025 1720.19,687.025 1720.75,687.025 1721.31,687.025 1721.87,687.025 1722.42,687.025 1722.98,687.025 1723.54,687.025 1724.1,687.025 1724.66,687.025 1725.22,687.025 1725.78,687.025 1726.34,687.025 1726.9,687.025 1727.46,687.025 1728.02,687.025 1728.58,687.025 1729.14,687.025 1729.69,687.025 1730.25,687.025 1730.81,687.025 1731.37,687.025 1731.93,687.025 1732.49,687.025 1733.05,687.025 1733.61,687.025 1734.17,687.025 1734.73,687.025 1735.29,687.025 1735.85,687.025 1736.41,687.025 1736.97,687.025 1737.52,687.025 1738.08,687.025 1738.64,687.025 1739.2,687.025 1739.76,687.025 1740.32,687.025 1740.88,687.025 1741.44,687.025 1742,687.025 1742.56,687.025 1743.12,687.025 1743.68,687.025 1744.24,687.025 1744.79,687.025 1745.35,687.025 1745.91,687.025 1746.47,687.025 1747.03,687.025 1747.59,687.025 1748.15,687.025 1748.71,687.025 1749.27,687.025 1749.83,687.025 1750.39,687.025 1750.95,687.025 1751.51,687.025 1752.06,687.025 1752.62,687.025 1753.18,687.025 1753.74,687.025 1754.3,687.025 1754.86,687.025 1755.42,687.025 1755.98,687.025 1756.54,687.025 1757.1,687.025 1757.66,687.025 1758.22,687.025 1758.78,687.025 1759.34,687.025 1759.89,687.025 1760.45,687.025 1761.01,687.025 1761.57,687.025 1762.13,687.025 1762.69,687.025 1763.25,687.025 1763.81,687.025 1764.37,687.025 1764.93,687.025 1765.49,687.025 1766.05,687.025 1766.61,687.025 1767.16,687.025 1767.72,687.025 1768.28,687.025 1768.84,687.025 1769.4,687.025 1769.96,687.025 1770.52,687.025 1771.08,687.025 1771.64,687.025 1772.2,687.025 1772.76,687.025 1773.32,687.025 1773.88,687.025 1774.43,687.025 1774.99,687.025 1775.55,687.025 1776.11,687.025 1776.67,687.025 1777.23,687.025 1777.79,687.025 1778.35,687.025 1778.91,687.025 1779.47,687.025 1780.03,687.025 1780.59,687.025 1781.15,687.025 1781.71,687.025 1782.26,687.025 1782.82,687.025 1783.38,687.025 1783.94,687.025 1784.5,687.025 1785.06,687.025 1785.62,687.025 1786.18,687.025 1786.74,687.025 1787.3,687.025 1787.86,687.025 1788.42,687.025 1788.98,687.025 1789.53,687.025 1790.09,687.025 1790.65,687.025 1791.21,687.025 1791.77,687.025 1792.33,687.025 1792.89,687.025 1793.45,687.025 1794.01,687.025 1794.57,687.025 1795.13,687.025 1795.69,687.025 1796.25,687.025 1796.8,687.025 1797.36,687.025 1797.92,687.025 1798.48,687.025 1799.04,687.025 1799.6,687.025 1800.16,687.025 1800.72,687.025 1801.28,687.025 1801.84,687.025 1802.4,687.025 1802.96,687.025 1803.52,687.025 1804.08,687.025 1804.63,687.025 1805.19,687.025 1805.75,687.025 1806.31,687.025 1806.87,687.025 1807.43,687.025 1807.99,687.025 1808.55,687.025 1809.11,687.025 1809.67,687.025 1810.23,687.025 1810.79,687.025 1811.35,687.025 1811.9,687.025 1812.46,687.025 1813.02,687.025 1813.58,687.025 1814.14,687.025 1814.7,687.025 1815.26,687.025 1815.82,687.025 1816.38,687.025 1816.94,687.025 1817.5,687.025 1818.06,687.025 1818.62,687.025 1819.18,687.025 1819.73,687.025 1820.29,687.025 1820.85,687.025 1821.41,687.025 1821.97,687.025 1822.53,687.025 1823.09,687.025 1823.65,687.025 1824.21,687.025 1824.77,687.025 1825.33,687.025 1825.89,687.025 1826.45,687.025 1827,687.025 1827.56,687.025 1828.12,687.025 1828.68,687.025 1829.24,687.025 1829.8,687.025 1830.36,687.025 1830.92,687.025 1831.48,687.025 1832.04,687.025 1832.6,687.025 1833.16,687.025 1833.72,687.025 1834.27,687.025 1834.83,687.025 1835.39,687.025 1835.95,687.025 1836.51,687.025 1837.07,687.025 1837.63,687.025 1838.19,687.025 \"/>\n<path clip-path=\"url(#clip343)\" d=\"M720.247 685.584 L720.806 685.584 L721.365 685.584 L721.924 685.584 L722.484 685.584 L723.043 685.584 L723.602 685.584 L724.161 685.584 L724.721 685.584 L725.28 685.584 L725.839 685.584 L726.398 685.584 L726.958 685.584 L727.517 685.584 L728.076 685.584 L728.635 685.584 L729.195 685.584 L729.754 685.584 L730.313 685.584 L730.872 685.584 L731.432 685.584 L731.991 685.584 L732.55 685.584 L733.109 685.584 L733.669 685.584 L734.228 685.584 L734.787 685.584 L735.346 685.584 L735.906 685.584 L736.465 685.584 L737.024 685.584 L737.583 685.584 L738.143 685.584 L738.702 685.584 L739.261 685.584 L739.82 685.584 L740.38 685.584 L740.939 685.584 L741.498 685.584 L742.057 685.584 L742.617 685.584 L743.176 685.584 L743.735 685.584 L744.294 685.584 L744.854 685.584 L745.413 685.584 L745.972 685.584 L746.531 685.584 L747.091 685.584 L747.65 685.584 L748.209 685.584 L748.768 685.584 L749.328 685.584 L749.887 685.584 L750.446 685.584 L751.005 685.584 L751.565 685.584 L752.124 685.584 L752.683 685.584 L753.242 685.584 L753.802 685.584 L754.361 685.584 L754.92 685.584 L755.479 685.584 L756.039 685.584 L756.598 685.584 L757.157 685.584 L757.716 685.584 L758.276 685.584 L758.835 685.584 L759.394 685.584 L759.953 685.584 L760.513 685.584 L761.072 685.584 L761.631 685.584 L762.19 685.584 L762.75 685.584 L763.309 685.584 L763.868 685.584 L764.427 685.584 L764.987 685.584 L765.546 685.584 L766.105 685.584 L766.664 685.584 L767.224 685.584 L767.783 685.584 L768.342 685.584 L768.901 685.584 L769.461 685.584 L770.02 685.584 L770.579 685.584 L771.138 685.584 L771.698 685.584 L772.257 685.584 L772.816 685.584 L773.375 685.584 L773.935 685.584 L774.494 685.584 L775.053 685.584 L775.612 685.584 L776.172 685.584 L776.731 685.584 L777.29 685.584 L777.849 685.584 L778.409 685.584 L778.968 685.584 L779.527 685.584 L780.086 685.584 L780.646 685.584 L781.205 685.584 L781.764 685.584 L782.323 685.584 L782.883 685.584 L783.442 685.584 L784.001 685.584 L784.56 685.584 L785.12 685.584 L785.679 685.584 L786.238 685.584 L786.797 685.584 L787.357 685.584 L787.916 685.584 L788.475 685.584 L789.034 685.584 L789.594 685.584 L790.153 685.584 L790.712 685.584 L791.271 685.584 L791.831 685.584 L792.39 685.584 L792.949 685.584 L793.508 685.584 L794.068 685.584 L794.627 685.584 L795.186 685.584 L795.745 685.584 L796.305 685.584 L796.864 685.584 L797.423 685.584 L797.982 685.584 L798.542 685.584 L799.101 685.584 L799.66 685.584 L800.219 685.584 L800.779 685.584 L801.338 685.584 L801.897 685.584 L802.456 685.584 L803.016 685.584 L803.575 685.584 L804.134 685.584 L804.693 685.584 L805.253 685.584 L805.812 685.584 L806.371 685.584 L806.931 685.584 L807.49 685.584 L808.049 685.584 L808.608 685.584 L809.168 685.584 L809.727 685.584 L810.286 685.584 L810.845 685.584 L811.405 685.584 L811.964 685.584 L812.523 685.584 L813.082 685.584 L813.642 685.584 L814.201 685.584 L814.76 685.584 L815.319 685.584 L815.879 685.584 L816.438 685.584 L816.997 685.584 L817.556 685.584 L818.116 685.584 L818.675 685.584 L819.234 685.584 L819.793 685.584 L820.353 685.584 L820.912 685.584 L821.471 685.584 L822.03 685.584 L822.59 685.584 L823.149 685.584 L823.708 685.584 L824.267 685.584 L824.827 685.584 L825.386 685.584 L825.945 685.584 L826.504 685.584 L827.064 685.584 L827.623 685.584 L828.182 685.584 L828.741 685.584 L829.301 685.584 L829.86 685.584 L830.419 685.584 L830.978 685.584 L831.538 685.584 L832.097 685.584 L832.656 685.584 L833.215 685.584 L833.775 685.584 L834.334 685.584 L834.893 685.584 L835.452 685.584 L836.012 685.584 L836.571 685.584 L837.13 685.584 L837.689 685.584 L838.249 685.584 L838.808 685.584 L839.367 685.584 L839.926 685.584 L840.486 685.584 L841.045 685.584 L841.604 685.584 L842.163 685.584 L842.723 685.584 L843.282 685.584 L843.841 685.584 L844.4 685.584 L844.96 685.584 L845.519 685.584 L846.078 685.584 L846.637 685.584 L847.197 685.584 L847.756 685.584 L848.315 685.584 L848.874 685.584 L849.434 685.584 L849.993 685.584 L850.552 685.584 L851.111 685.584 L851.671 685.584 L852.23 685.584 L852.789 685.584 L853.348 685.584 L853.908 685.584 L854.467 685.584 L855.026 685.584 L855.585 685.584 L856.145 685.584 L856.704 685.584 L857.263 685.584 L857.822 685.584 L858.382 685.584 L858.941 685.584 L859.5 685.584 L860.059 685.584 L860.619 685.584 L861.178 685.584 L861.737 685.584 L862.296 685.584 L862.856 685.584 L863.415 685.584 L863.974 685.584 L864.533 685.584 L865.093 685.584 L865.652 685.584 L866.211 685.584 L866.77 685.584 L867.33 685.584 L867.889 685.584 L868.448 685.584 L869.007 685.584 L869.567 685.584 L870.126 685.584 L870.685 685.584 L871.244 685.584 L871.804 685.584 L872.363 685.584 L872.922 685.584 L873.481 685.584 L874.041 685.584 L874.6 685.584 L875.159 685.584 L875.718 685.584 L876.278 685.584 L876.837 685.584 L877.396 685.584 L877.955 685.584 L878.515 685.584 L879.074 685.584 L879.633 685.584 L880.192 685.584 L880.752 685.584 L881.311 685.584 L881.87 685.584 L882.429 685.584 L882.989 685.584 L883.548 685.584 L884.107 685.584 L884.666 685.584 L885.226 685.584 L885.785 685.584 L886.344 685.584 L886.903 685.584 L887.463 685.584 L888.022 685.584 L888.581 685.584 L889.14 685.584 L889.7 685.584 L890.259 685.584 L890.818 685.584 L891.377 685.584 L891.937 685.584 L892.496 685.584 L893.055 685.584 L893.614 685.584 L894.174 685.584 L894.733 685.584 L895.292 685.584 L895.851 685.584 L896.411 685.584 L896.97 685.584 L897.529 685.584 L898.088 685.584 L898.648 685.584 L899.207 685.584 L899.766 685.584 L900.325 685.584 L900.885 685.584 L901.444 685.584 L902.003 685.584 L902.562 685.584 L903.122 685.584 L903.681 685.584 L904.24 685.584 L904.799 685.584 L905.359 685.584 L905.918 685.584 L906.477 685.584 L907.036 685.584 L907.596 685.584 L908.155 685.584 L908.714 685.584 L909.273 685.584 L909.833 685.584 L910.392 685.584 L910.951 685.584 L911.51 685.584 L912.07 685.584 L912.629 685.584 L913.188 685.584 L913.747 685.584 L914.307 685.584 L914.866 685.584 L915.425 685.584 L915.984 685.584 L916.544 685.584 L917.103 685.584 L917.662 685.584 L918.221 685.584 L918.781 685.584 L919.34 685.584 L919.899 685.584 L920.458 685.584 L921.018 685.584 L921.577 685.584 L922.136 685.584 L922.695 685.584 L923.255 685.584 L923.814 685.584 L924.373 685.584 L924.932 685.584 L925.492 685.584 L926.051 685.584 L926.61 685.584 L927.169 685.584 L927.729 685.584 L928.288 685.584 L928.847 685.584 L929.406 685.584 L929.966 685.584 L930.525 685.584 L931.084 685.584 L931.644 685.584 L932.203 685.584 L932.762 685.584 L933.321 685.584 L933.881 685.584 L934.44 685.584 L934.999 685.584 L935.558 685.584 L936.118 685.584 L936.677 685.584 L937.236 685.584 L937.795 685.584 L938.355 685.584 L938.914 685.584 L939.473 685.584 L940.032 685.584 L940.592 685.584 L941.151 685.584 L941.71 685.584 L942.269 685.584 L942.829 685.584 L943.388 685.584 L943.947 685.584 L944.506 685.584 L945.066 685.584 L945.625 685.584 L946.184 685.584 L946.743 685.584 L947.303 685.584 L947.862 685.584 L948.421 685.584 L948.98 685.584 L949.54 685.584 L950.099 685.584 L950.658 685.584 L951.217 685.584 L951.777 685.584 L952.336 685.584 L952.895 685.584 L953.454 685.584 L954.014 685.584 L954.573 685.584 L955.132 685.584 L955.691 685.584 L956.251 685.584 L956.81 685.584 L957.369 685.584 L957.928 685.584 L958.488 685.584 L959.047 685.584 L959.606 685.584 L960.165 685.584 L960.725 685.584 L961.284 685.584 L961.843 685.584 L962.402 685.584 L962.962 685.584 L963.521 685.584 L964.08 685.584 L964.639 685.584 L965.199 685.584 L965.758 685.584 L966.317 685.584 L966.876 685.584 L967.436 685.584 L967.995 685.584 L968.554 685.584 L969.113 685.584 L969.673 685.584 L970.232 685.584 L970.791 685.584 L971.35 685.584 L971.91 685.584 L972.469 685.584 L973.028 685.584 L973.587 685.584 L974.147 685.584 L974.706 685.584 L975.265 685.584 L975.824 685.584 L976.384 685.584 L976.943 685.584 L977.502 685.584 L978.061 685.584 L978.621 685.584 L979.18 685.584 L979.739 685.584 L980.298 685.584 L980.858 685.584 L981.417 685.584 L981.976 685.584 L982.535 685.584 L983.095 685.584 L983.654 685.584 L984.213 685.584 L984.772 685.584 L985.332 685.584 L985.891 685.584 L986.45 685.584 L987.009 685.584 L987.569 685.584 L988.128 685.584 L988.687 685.584 L989.246 685.584 L989.806 685.584 L990.365 685.584 L990.924 685.584 L991.483 685.584 L992.043 685.584 L992.602 685.584 L993.161 685.584 L993.72 685.584 L994.28 685.584 L994.839 685.584 L995.398 685.584 L995.957 685.584 L996.517 685.584 L997.076 685.584 L997.635 685.584 L998.194 685.584 L998.754 685.584 L999.313 685.584 L999.872 685.584 L1000.43 685.584 L1000.99 685.584 L1001.55 685.584 L1002.11 685.584 L1002.67 685.584 L1003.23 685.584 L1003.79 685.584 L1004.35 685.584 L1004.91 685.584 L1005.46 685.584 L1006.02 685.584 L1006.58 685.584 L1007.14 685.584 L1007.7 685.584 L1008.26 685.584 L1008.82 685.584 L1009.38 685.584 L1009.94 685.584 L1010.5 685.584 L1011.06 685.584 L1011.62 685.584 L1012.18 685.584 L1012.73 685.584 L1013.29 685.584 L1013.85 685.584 L1014.41 685.584 L1014.97 685.584 L1015.53 685.584 L1016.09 685.584 L1016.65 685.584 L1017.21 685.584 L1017.77 685.584 L1018.33 685.584 L1018.89 685.584 L1019.45 685.584 L1020.01 685.584 L1020.56 685.584 L1021.12 685.584 L1021.68 685.584 L1022.24 685.584 L1022.8 685.584 L1023.36 685.584 L1023.92 685.584 L1024.48 685.584 L1025.04 685.584 L1025.6 685.584 L1026.16 685.584 L1026.72 685.584 L1027.28 685.584 L1027.83 685.584 L1028.39 685.584 L1028.95 685.584 L1029.51 685.584 L1030.07 685.584 L1030.63 685.584 L1031.19 685.584 L1031.75 685.584 L1032.31 685.584 L1032.87 685.584 L1033.43 685.584 L1033.99 685.584 L1034.55 685.584 L1035.1 685.584 L1035.66 685.584 L1036.22 685.584 L1036.78 685.584 L1037.34 685.584 L1037.9 685.584 L1038.46 685.584 L1039.02 685.584 L1039.58 685.584 L1040.14 685.584 L1040.7 685.584 L1041.26 685.584 L1041.82 685.584 L1042.38 685.584 L1042.93 685.584 L1043.49 685.584 L1044.05 685.584 L1044.61 685.584 L1045.17 685.584 L1045.73 685.584 L1046.29 685.584 L1046.85 685.584 L1047.41 685.584 L1047.97 685.584 L1048.53 685.584 L1049.09 685.584 L1049.65 685.584 L1050.2 685.584 L1050.76 685.584 L1051.32 685.584 L1051.88 685.584 L1052.44 685.584 L1053 685.584 L1053.56 685.584 L1054.12 685.584 L1054.68 685.584 L1055.24 685.584 L1055.8 685.584 L1056.36 685.584 L1056.92 685.584 L1057.48 685.584 L1058.03 685.584 L1058.59 685.584 L1059.15 685.584 L1059.71 685.584 L1060.27 685.584 L1060.83 685.584 L1061.39 685.584 L1061.95 685.584 L1062.51 685.584 L1063.07 685.584 L1063.63 685.584 L1064.19 685.584 L1064.75 685.584 L1065.3 685.584 L1065.86 685.584 L1066.42 685.584 L1066.98 685.584 L1067.54 685.584 L1068.1 685.584 L1068.66 685.584 L1069.22 685.584 L1069.78 685.584 L1070.34 685.584 L1070.9 685.584 L1071.46 685.584 L1072.02 685.584 L1072.57 685.584 L1073.13 685.584 L1073.69 685.584 L1074.25 685.584 L1074.81 685.584 L1075.37 685.584 L1075.93 685.584 L1076.49 685.584 L1077.05 685.584 L1077.61 685.584 L1078.17 685.584 L1078.73 685.584 L1079.29 685.584 L1079.85 685.584 L1080.4 685.584 L1080.96 685.584 L1081.52 685.584 L1082.08 685.584 L1082.64 685.584 L1083.2 685.584 L1083.76 685.584 L1084.32 685.584 L1084.88 685.584 L1085.44 685.584 L1086 685.584 L1086.56 685.584 L1087.12 685.584 L1087.67 685.584 L1088.23 685.584 L1088.79 685.584 L1089.35 685.584 L1089.91 685.584 L1090.47 685.584 L1091.03 685.584 L1091.59 685.584 L1092.15 685.584 L1092.71 685.584 L1093.27 685.584 L1093.83 685.584 L1094.39 685.584 L1094.94 685.584 L1095.5 685.584 L1096.06 685.584 L1096.62 685.584 L1097.18 685.584 L1097.74 685.584 L1098.3 685.584 L1098.86 685.584 L1099.42 685.584 L1099.98 685.584 L1100.54 685.584 L1101.1 685.584 L1101.66 685.584 L1102.22 685.584 L1102.77 685.584 L1103.33 685.584 L1103.89 685.584 L1104.45 685.584 L1105.01 685.584 L1105.57 685.584 L1106.13 685.584 L1106.69 685.584 L1107.25 685.584 L1107.81 685.584 L1108.37 685.584 L1108.93 685.584 L1109.49 685.584 L1110.04 685.584 L1110.6 685.584 L1111.16 685.584 L1111.72 685.584 L1112.28 685.584 L1112.84 685.584 L1113.4 685.584 L1113.96 685.584 L1114.52 685.584 L1115.08 685.584 L1115.64 685.584 L1116.2 685.584 L1116.76 685.584 L1117.31 685.584 L1117.87 685.584 L1118.43 685.584 L1118.99 685.584 L1119.55 685.584 L1120.11 685.584 L1120.67 685.584 L1121.23 685.584 L1121.79 685.584 L1122.35 685.584 L1122.91 685.584 L1123.47 685.584 L1124.03 685.584 L1124.59 685.584 L1125.14 685.584 L1125.7 685.584 L1126.26 685.584 L1126.82 685.584 L1127.38 685.584 L1127.94 685.584 L1128.5 685.584 L1129.06 685.584 L1129.62 685.584 L1130.18 685.584 L1130.74 685.584 L1131.3 685.584 L1131.86 685.584 L1132.41 685.584 L1132.97 685.584 L1133.53 685.584 L1134.09 685.584 L1134.65 685.584 L1135.21 685.584 L1135.77 685.584 L1136.33 685.584 L1136.89 685.584 L1137.45 685.584 L1138.01 685.584 L1138.57 685.584 L1139.13 685.584 L1139.68 685.584 L1140.24 685.584 L1140.8 685.584 L1141.36 685.584 L1141.92 685.584 L1142.48 685.584 L1143.04 685.584 L1143.6 685.584 L1144.16 685.584 L1144.72 685.584 L1145.28 685.584 L1145.84 685.584 L1146.4 685.584 L1146.96 685.584 L1147.51 685.584 L1148.07 685.584 L1148.63 685.584 L1149.19 685.584 L1149.75 685.584 L1150.31 685.584 L1150.87 685.584 L1151.43 685.584 L1151.99 685.584 L1152.55 685.584 L1153.11 685.584 L1153.67 685.584 L1154.23 685.584 L1154.78 685.584 L1155.34 685.584 L1155.9 685.584 L1156.46 685.584 L1157.02 685.584 L1157.58 685.584 L1158.14 685.584 L1158.7 685.584 L1159.26 685.584 L1159.82 685.584 L1160.38 685.584 L1160.94 685.584 L1161.5 685.584 L1162.05 685.584 L1162.61 685.584 L1163.17 685.584 L1163.73 685.584 L1164.29 685.584 L1164.85 685.584 L1165.41 685.584 L1165.97 685.584 L1166.53 685.584 L1167.09 685.584 L1167.65 685.584 L1168.21 685.584 L1168.77 685.584 L1169.33 685.584 L1169.88 685.584 L1170.44 685.584 L1171 685.584 L1171.56 685.584 L1172.12 685.584 L1172.68 685.584 L1173.24 685.584 L1173.8 685.584 L1174.36 685.584 L1174.92 685.584 L1175.48 685.584 L1176.04 685.584 L1176.6 685.584 L1177.15 685.584 L1177.71 685.584 L1178.27 685.584 L1178.83 685.584 L1179.39 685.584 L1179.95 685.584 L1180.51 685.584 L1181.07 685.584 L1181.63 685.584 L1182.19 685.584 L1182.75 685.584 L1183.31 685.584 L1183.87 685.584 L1184.43 685.584 L1184.98 685.584 L1185.54 685.584 L1186.1 685.584 L1186.66 685.584 L1187.22 685.584 L1187.78 685.584 L1188.34 685.584 L1188.9 685.584 L1189.46 685.584 L1190.02 685.584 L1190.58 685.584 L1191.14 685.584 L1191.7 685.584 L1192.25 685.584 L1192.81 685.584 L1193.37 685.584 L1193.93 685.584 L1194.49 685.584 L1195.05 685.584 L1195.61 685.584 L1196.17 685.584 L1196.73 685.584 L1197.29 685.584 L1197.85 685.584 L1198.41 685.584 L1198.97 685.584 L1199.52 685.584 L1200.08 685.584 L1200.64 685.584 L1201.2 685.584 L1201.76 685.584 L1202.32 685.584 L1202.88 685.584 L1203.44 685.584 L1204 685.584 L1204.56 685.584 L1205.12 685.584 L1205.68 685.584 L1206.24 685.584 L1206.8 685.584 L1207.35 685.584 L1207.91 685.584 L1208.47 685.584 L1209.03 685.584 L1209.59 685.584 L1210.15 685.584 L1210.71 685.584 L1211.27 685.584 L1211.83 685.584 L1212.39 685.584 L1212.95 685.584 L1213.51 685.584 L1214.07 685.584 L1214.62 685.584 L1215.18 685.584 L1215.74 685.584 L1216.3 685.584 L1216.86 685.584 L1217.42 685.584 L1217.98 685.584 L1218.54 685.584 L1219.1 685.584 L1219.66 685.584 L1220.22 685.584 L1220.78 685.584 L1221.34 685.584 L1221.89 685.584 L1222.45 685.584 L1223.01 685.584 L1223.57 685.584 L1224.13 685.584 L1224.69 685.584 L1225.25 685.584 L1225.81 685.584 L1226.37 685.584 L1226.93 685.584 L1227.49 685.584 L1228.05 685.584 L1228.61 685.584 L1229.17 685.584 L1229.72 685.584 L1230.28 685.584 L1230.84 685.584 L1231.4 685.584 L1231.96 685.584 L1232.52 685.584 L1233.08 685.584 L1233.64 685.584 L1234.2 685.584 L1234.76 685.584 L1235.32 685.584 L1235.88 685.584 L1236.44 685.584 L1236.99 685.584 L1237.55 685.584 L1238.11 685.584 L1238.67 685.584 L1239.23 685.584 L1239.79 685.584 L1240.35 685.584 L1240.91 685.584 L1241.47 685.584 L1242.03 685.584 L1242.59 685.584 L1243.15 685.584 L1243.71 685.584 L1244.26 685.584 L1244.82 685.584 L1245.38 685.584 L1245.94 685.584 L1246.5 685.584 L1247.06 685.584 L1247.62 685.584 L1248.18 685.584 L1248.74 685.584 L1249.3 685.584 L1249.86 685.584 L1250.42 685.584 L1250.98 685.584 L1251.54 685.584 L1252.09 685.584 L1252.65 685.584 L1253.21 685.584 L1253.77 685.584 L1254.33 685.584 L1254.89 685.584 L1255.45 685.584 L1256.01 685.584 L1256.57 685.584 L1257.13 685.584 L1257.69 685.584 L1258.25 685.584 L1258.81 685.584 L1259.36 685.584 L1259.92 685.584 L1260.48 685.584 L1261.04 685.584 L1261.6 685.584 L1262.16 685.584 L1262.72 685.584 L1263.28 685.584 L1263.84 685.584 L1264.4 685.584 L1264.96 685.584 L1265.52 685.584 L1266.08 685.584 L1266.63 685.584 L1267.19 685.584 L1267.75 685.584 L1268.31 685.584 L1268.87 685.584 L1269.43 685.584 L1269.99 685.584 L1270.55 685.584 L1271.11 685.584 L1271.67 685.584 L1272.23 685.584 L1272.79 685.584 L1273.35 685.584 L1273.91 685.584 L1274.46 685.584 L1275.02 685.584 L1275.58 685.584 L1276.14 685.584 L1276.7 685.584 L1277.26 685.584 L1277.82 685.584 L1278.38 685.584 L1278.94 685.584 L1279.5 685.584 L1280.06 685.584 L1280.62 685.584 L1281.18 685.584 L1281.73 685.584 L1282.29 685.584 L1282.85 685.584 L1283.41 685.584 L1283.97 685.584 L1284.53 685.584 L1285.09 685.584 L1285.65 685.584 L1286.21 685.584 L1286.77 685.584 L1287.33 685.584 L1287.89 685.584 L1288.45 685.584 L1289 685.584 L1289.56 685.584 L1290.12 685.584 L1290.68 685.584 L1291.24 685.584 L1291.8 685.584 L1292.36 685.584 L1292.92 685.584 L1293.48 685.584 L1294.04 685.584 L1294.6 685.584 L1295.16 685.584 L1295.72 685.584 L1296.28 685.584 L1296.83 685.584 L1297.39 685.584 L1297.95 685.584 L1298.51 685.584 L1299.07 685.584 L1299.63 685.584 L1300.19 685.584 L1300.75 685.584 L1301.31 685.584 L1301.87 685.584 L1302.43 685.584 L1302.99 685.584 L1303.55 685.584 L1304.1 685.584 L1304.66 685.584 L1305.22 685.584 L1305.78 685.584 L1306.34 685.584 L1306.9 685.584 L1307.46 685.584 L1308.02 685.584 L1308.58 685.584 L1309.14 685.584 L1309.7 685.584 L1310.26 685.584 L1310.82 685.584 L1311.38 685.584 L1311.93 685.584 L1312.49 685.584 L1313.05 685.584 L1313.61 685.584 L1314.17 685.584 L1314.73 685.584 L1315.29 685.584 L1315.85 685.584 L1316.41 685.584 L1316.97 685.584 L1317.53 685.584 L1318.09 685.584 L1318.65 685.584 L1319.2 685.584 L1319.76 685.584 L1320.32 685.584 L1320.88 685.584 L1321.44 685.584 L1322 685.584 L1322.56 685.584 L1323.12 685.584 L1323.68 685.584 L1324.24 685.584 L1324.8 685.584 L1325.36 685.584 L1325.92 685.584 L1326.47 685.584 L1327.03 685.584 L1327.59 685.584 L1328.15 685.584 L1328.71 685.584 L1329.27 685.584 L1329.83 685.584 L1330.39 685.584 L1330.95 685.584 L1331.51 685.584 L1332.07 685.584 L1332.63 685.584 L1333.19 685.584 L1333.75 685.584 L1334.3 685.584 L1334.86 685.584 L1335.42 685.584 L1335.98 685.584 L1336.54 685.584 L1337.1 685.584 L1337.66 685.584 L1338.22 685.584 L1338.78 685.584 L1339.34 685.584 L1339.9 685.584 L1340.46 685.584 L1341.02 685.584 L1341.57 685.584 L1342.13 685.584 L1342.69 685.584 L1343.25 685.584 L1343.81 685.584 L1344.37 685.584 L1344.93 685.584 L1345.49 685.584 L1346.05 685.584 L1346.61 685.584 L1347.17 685.584 L1347.73 685.584 L1348.29 685.584 L1348.84 685.584 L1349.4 685.584 L1349.96 685.584 L1350.52 685.584 L1351.08 685.584 L1351.64 685.584 L1352.2 685.584 L1352.76 685.584 L1353.32 685.584 L1353.88 685.584 L1354.44 685.584 L1355 685.584 L1355.56 685.584 L1356.12 685.584 L1356.67 685.584 L1357.23 685.584 L1357.79 685.584 L1358.35 685.584 L1358.91 685.584 L1359.47 685.584 L1360.03 685.584 L1360.59 685.584 L1361.15 685.584 L1361.71 685.584 L1362.27 685.584 L1362.83 685.584 L1363.39 685.584 L1363.94 685.584 L1364.5 685.584 L1365.06 685.584 L1365.62 685.584 L1366.18 685.584 L1366.74 685.584 L1367.3 685.584 L1367.86 685.584 L1368.42 685.584 L1368.98 685.584 L1369.54 685.584 L1370.1 685.584 L1370.66 685.584 L1371.21 685.584 L1371.77 685.584 L1372.33 685.584 L1372.89 685.584 L1373.45 685.584 L1374.01 685.584 L1374.57 685.584 L1375.13 685.584 L1375.69 685.584 L1376.25 685.584 L1376.81 685.584 L1377.37 685.584 L1377.93 685.584 L1378.49 685.584 L1379.04 685.584 L1379.6 685.584 L1380.16 685.584 L1380.72 685.584 L1381.28 685.584 L1381.84 685.584 L1382.4 685.584 L1382.96 685.584 L1383.52 685.584 L1384.08 685.584 L1384.64 685.584 L1385.2 685.584 L1385.76 685.584 L1386.31 685.584 L1386.87 685.584 L1387.43 685.584 L1387.99 685.584 L1388.55 685.584 L1389.11 685.584 L1389.67 685.584 L1390.23 685.584 L1390.79 685.584 L1391.35 685.584 L1391.91 685.584 L1392.47 685.584 L1393.03 685.584 L1393.58 685.584 L1394.14 685.584 L1394.7 685.584 L1395.26 685.584 L1395.82 685.584 L1396.38 685.584 L1396.94 685.584 L1397.5 685.584 L1398.06 685.584 L1398.62 685.584 L1399.18 685.584 L1399.74 685.584 L1400.3 685.584 L1400.86 685.584 L1401.41 685.584 L1401.97 685.584 L1402.53 685.584 L1403.09 685.584 L1403.65 685.584 L1404.21 685.584 L1404.77 685.584 L1405.33 685.584 L1405.89 685.584 L1406.45 685.584 L1407.01 685.584 L1407.57 685.584 L1408.13 685.584 L1408.68 685.584 L1409.24 685.584 L1409.8 685.584 L1410.36 685.584 L1410.92 685.584 L1411.48 685.584 L1412.04 685.584 L1412.6 685.584 L1413.16 685.584 L1413.72 685.584 L1414.28 685.584 L1414.84 685.584 L1415.4 685.584 L1415.95 685.584 L1416.51 685.584 L1417.07 685.584 L1417.63 685.584 L1418.19 685.584 L1418.75 685.584 L1419.31 685.584 L1419.87 685.584 L1420.43 685.584 L1420.99 685.584 L1421.55 685.584 L1422.11 685.584 L1422.67 685.584 L1423.23 685.584 L1423.78 685.584 L1424.34 685.584 L1424.9 685.584 L1425.46 685.584 L1426.02 685.584 L1426.58 685.584 L1427.14 685.584 L1427.7 685.584 L1428.26 685.584 L1428.82 685.584 L1429.38 685.584 L1429.94 685.584 L1430.5 685.584 L1431.05 685.584 L1431.61 685.584 L1432.17 685.584 L1432.73 685.584 L1433.29 685.584 L1433.85 685.584 L1434.41 685.584 L1434.97 685.584 L1435.53 685.584 L1436.09 685.584 L1436.65 685.584 L1437.21 685.584 L1437.77 685.584 L1438.33 685.584 L1438.88 685.584 L1439.44 685.584 L1440 685.584 L1440.56 685.584 L1441.12 685.584 L1441.68 685.584 L1442.24 685.584 L1442.8 685.584 L1443.36 685.584 L1443.92 685.584 L1444.48 685.584 L1445.04 685.584 L1445.6 685.584 L1446.15 685.584 L1446.71 685.584 L1447.27 685.584 L1447.83 685.584 L1448.39 685.584 L1448.95 685.584 L1449.51 685.584 L1450.07 685.584 L1450.63 685.584 L1451.19 685.584 L1451.75 685.584 L1452.31 685.584 L1452.87 685.584 L1453.42 685.584 L1453.98 685.584 L1454.54 685.584 L1455.1 685.584 L1455.66 685.584 L1456.22 685.584 L1456.78 685.584 L1457.34 685.584 L1457.9 685.584 L1458.46 685.584 L1459.02 685.584 L1459.58 685.584 L1460.14 685.584 L1460.7 685.584 L1461.25 685.584 L1461.81 685.584 L1462.37 685.584 L1462.93 685.584 L1463.49 685.584 L1464.05 685.584 L1464.61 685.584 L1465.17 685.584 L1465.73 685.584 L1466.29 685.584 L1466.85 685.584 L1467.41 685.584 L1467.97 685.584 L1468.52 685.584 L1469.08 685.584 L1469.64 685.584 L1470.2 685.584 L1470.76 685.584 L1471.32 685.584 L1471.88 685.584 L1472.44 685.584 L1473 685.584 L1473.56 685.584 L1474.12 685.584 L1474.68 685.584 L1475.24 685.584 L1475.79 685.584 L1476.35 685.584 L1476.91 685.584 L1477.47 685.584 L1478.03 685.584 L1478.59 685.584 L1479.15 685.584 L1479.71 685.584 L1480.27 685.584 L1480.83 685.584 L1481.39 685.584 L1481.95 685.584 L1482.51 685.584 L1483.07 685.584 L1483.62 685.584 L1484.18 685.584 L1484.74 685.584 L1485.3 685.584 L1485.86 685.584 L1486.42 685.584 L1486.98 685.584 L1487.54 685.584 L1488.1 685.584 L1488.66 685.584 L1489.22 685.584 L1489.78 685.584 L1490.34 685.584 L1490.89 685.584 L1491.45 685.584 L1492.01 685.584 L1492.57 685.584 L1493.13 685.584 L1493.69 685.584 L1494.25 685.584 L1494.81 685.584 L1495.37 685.584 L1495.93 685.584 L1496.49 685.584 L1497.05 685.584 L1497.61 685.584 L1498.16 685.584 L1498.72 685.584 L1499.28 685.584 L1499.84 685.584 L1500.4 685.584 L1500.96 685.584 L1501.52 685.584 L1502.08 685.584 L1502.64 685.584 L1503.2 685.584 L1503.76 685.584 L1504.32 685.584 L1504.88 685.584 L1505.44 685.584 L1505.99 685.584 L1506.55 685.584 L1507.11 685.584 L1507.67 685.584 L1508.23 685.584 L1508.79 685.584 L1509.35 685.584 L1509.91 685.584 L1510.47 685.584 L1511.03 685.584 L1511.59 685.584 L1512.15 685.584 L1512.71 685.584 L1513.26 685.584 L1513.82 685.584 L1514.38 685.584 L1514.94 685.584 L1515.5 685.584 L1516.06 685.584 L1516.62 685.584 L1517.18 685.584 L1517.74 685.584 L1518.3 685.584 L1518.86 685.584 L1519.42 685.584 L1519.98 685.584 L1520.53 685.584 L1521.09 685.584 L1521.65 685.584 L1522.21 685.584 L1522.77 685.584 L1523.33 685.584 L1523.89 685.584 L1524.45 685.584 L1525.01 685.584 L1525.57 685.584 L1526.13 685.584 L1526.69 685.584 L1527.25 685.584 L1527.81 685.584 L1528.36 685.584 L1528.92 685.584 L1529.48 685.584 L1530.04 685.584 L1530.6 685.584 L1531.16 685.584 L1531.72 685.584 L1532.28 685.584 L1532.84 685.584 L1533.4 685.584 L1533.96 685.584 L1534.52 685.584 L1535.08 685.584 L1535.63 685.584 L1536.19 685.584 L1536.75 685.584 L1537.31 685.584 L1537.87 685.584 L1538.43 685.584 L1538.99 685.584 L1539.55 685.584 L1540.11 685.584 L1540.67 685.584 L1541.23 685.584 L1541.79 685.584 L1542.35 685.584 L1542.9 685.584 L1543.46 685.584 L1544.02 685.584 L1544.58 685.584 L1545.14 685.584 L1545.7 685.584 L1546.26 685.584 L1546.82 685.584 L1547.38 685.584 L1547.94 685.584 L1548.5 685.584 L1549.06 685.584 L1549.62 685.584 L1550.18 685.584 L1550.73 685.584 L1551.29 685.584 L1551.85 685.584 L1552.41 685.584 L1552.97 685.584 L1553.53 685.584 L1554.09 685.584 L1554.65 685.584 L1555.21 685.584 L1555.77 685.584 L1556.33 685.584 L1556.89 685.584 L1557.45 685.584 L1558 685.584 L1558.56 685.584 L1559.12 685.584 L1559.68 685.584 L1560.24 685.584 L1560.8 685.584 L1561.36 685.584 L1561.92 685.584 L1562.48 685.584 L1563.04 685.584 L1563.6 685.584 L1564.16 685.584 L1564.72 685.584 L1565.28 685.584 L1565.83 685.584 L1566.39 685.584 L1566.95 685.584 L1567.51 685.584 L1568.07 685.584 L1568.63 685.584 L1569.19 685.584 L1569.75 685.584 L1570.31 685.584 L1570.87 685.584 L1571.43 685.584 L1571.99 685.584 L1572.55 685.584 L1573.1 685.584 L1573.66 685.584 L1574.22 685.584 L1574.78 685.584 L1575.34 685.584 L1575.9 685.584 L1576.46 685.584 L1577.02 685.584 L1577.58 685.584 L1578.14 685.584 L1578.7 685.584 L1579.26 685.584 L1579.82 685.584 L1580.37 685.584 L1580.93 685.584 L1581.49 685.584 L1582.05 685.584 L1582.61 685.584 L1583.17 685.584 L1583.73 685.584 L1584.29 685.584 L1584.85 685.584 L1585.41 685.584 L1585.97 685.584 L1586.53 685.584 L1587.09 685.584 L1587.65 685.584 L1588.2 685.584 L1588.76 685.584 L1589.32 685.584 L1589.88 685.584 L1590.44 685.584 L1591 685.584 L1591.56 685.584 L1592.12 685.584 L1592.68 685.584 L1593.24 685.584 L1593.8 685.584 L1594.36 685.584 L1594.92 685.584 L1595.47 685.584 L1596.03 685.584 L1596.59 685.584 L1597.15 685.584 L1597.71 685.584 L1598.27 685.584 L1598.83 685.584 L1599.39 685.584 L1599.95 685.584 L1600.51 685.584 L1601.07 685.584 L1601.63 685.584 L1602.19 685.584 L1602.74 685.584 L1603.3 685.584 L1603.86 685.584 L1604.42 685.584 L1604.98 685.584 L1605.54 685.584 L1606.1 685.584 L1606.66 685.584 L1607.22 685.584 L1607.78 685.584 L1608.34 685.584 L1608.9 685.584 L1609.46 685.584 L1610.02 685.584 L1610.57 685.584 L1611.13 685.584 L1611.69 685.584 L1612.25 685.584 L1612.81 685.584 L1613.37 685.584 L1613.93 685.584 L1614.49 685.584 L1615.05 685.584 L1615.61 685.584 L1616.17 685.584 L1616.73 685.584 L1617.29 685.584 L1617.84 685.584 L1618.4 685.584 L1618.96 685.584 L1619.52 685.584 L1620.08 685.584 L1620.64 685.584 L1621.2 685.584 L1621.76 685.584 L1622.32 685.584 L1622.88 685.584 L1623.44 685.584 L1624 685.584 L1624.56 685.584 L1625.11 685.584 L1625.67 685.584 L1626.23 685.584 L1626.79 685.584 L1627.35 685.584 L1627.91 685.584 L1628.47 685.584 L1629.03 685.584 L1629.59 685.584 L1630.15 685.584 L1630.71 685.584 L1631.27 685.584 L1631.83 685.584 L1632.39 685.584 L1632.94 685.584 L1633.5 685.584 L1634.06 685.584 L1634.62 685.584 L1635.18 685.584 L1635.74 685.584 L1636.3 685.584 L1636.86 685.584 L1637.42 685.584 L1637.98 685.584 L1638.54 685.584 L1639.1 685.584 L1639.66 685.584 L1640.21 685.584 L1640.77 685.584 L1641.33 685.584 L1641.89 685.584 L1642.45 685.584 L1643.01 685.584 L1643.57 685.584 L1644.13 685.584 L1644.69 685.584 L1645.25 685.584 L1645.81 685.584 L1646.37 685.584 L1646.93 685.584 L1647.48 685.584 L1648.04 685.584 L1648.6 685.584 L1649.16 685.584 L1649.72 685.584 L1650.28 685.584 L1650.84 685.584 L1651.4 685.584 L1651.96 685.584 L1652.52 685.584 L1653.08 685.584 L1653.64 685.584 L1654.2 685.584 L1654.76 685.584 L1655.31 685.584 L1655.87 685.584 L1656.43 685.584 L1656.99 685.584 L1657.55 685.584 L1658.11 685.584 L1658.67 685.584 L1659.23 685.584 L1659.79 685.584 L1660.35 685.584 L1660.91 685.584 L1661.47 685.584 L1662.03 685.584 L1662.58 685.584 L1663.14 685.584 L1663.7 685.584 L1664.26 685.584 L1664.82 685.584 L1665.38 685.584 L1665.94 685.584 L1666.5 685.584 L1667.06 685.584 L1667.62 685.584 L1668.18 685.584 L1668.74 685.584 L1669.3 685.584 L1669.85 685.584 L1670.41 685.584 L1670.97 685.584 L1671.53 685.584 L1672.09 685.584 L1672.65 685.584 L1673.21 685.584 L1673.77 685.584 L1674.33 685.584 L1674.89 685.584 L1675.45 685.584 L1676.01 685.584 L1676.57 685.584 L1677.13 685.584 L1677.68 685.584 L1678.24 685.584 L1678.8 685.584 L1679.36 685.584 L1679.92 685.584 L1680.48 685.584 L1681.04 685.584 L1681.6 685.584 L1682.16 685.584 L1682.72 685.584 L1683.28 685.584 L1683.84 685.584 L1684.4 685.584 L1684.95 685.584 L1685.51 685.584 L1686.07 685.584 L1686.63 685.584 L1687.19 685.584 L1687.75 685.584 L1688.31 685.584 L1688.87 685.584 L1689.43 685.584 L1689.99 685.584 L1690.55 685.584 L1691.11 685.584 L1691.67 685.584 L1692.23 685.584 L1692.78 685.584 L1693.34 685.584 L1693.9 685.584 L1694.46 685.584 L1695.02 685.584 L1695.58 685.584 L1696.14 685.584 L1696.7 685.584 L1697.26 685.584 L1697.82 685.584 L1698.38 685.584 L1698.94 685.584 L1699.5 685.584 L1700.05 685.584 L1700.61 685.584 L1701.17 685.584 L1701.73 685.584 L1702.29 685.584 L1702.85 685.584 L1703.41 685.584 L1703.97 685.584 L1704.53 685.584 L1705.09 685.584 L1705.65 685.584 L1706.21 685.584 L1706.77 685.584 L1707.32 685.584 L1707.88 685.584 L1708.44 685.584 L1709 685.584 L1709.56 685.584 L1710.12 685.584 L1710.68 685.584 L1711.24 685.584 L1711.8 685.584 L1712.36 685.584 L1712.92 685.584 L1713.48 685.584 L1714.04 685.584 L1714.6 685.584 L1715.15 685.584 L1715.71 685.584 L1716.27 685.584 L1716.83 685.584 L1717.39 685.584 L1717.95 685.584 L1718.51 685.584 L1719.07 685.584 L1719.63 685.584 L1720.19 685.584 L1720.75 685.584 L1721.31 685.584 L1721.87 685.584 L1722.42 685.584 L1722.98 685.584 L1723.54 685.584 L1724.1 685.584 L1724.66 685.584 L1725.22 685.584 L1725.78 685.584 L1726.34 685.584 L1726.9 685.584 L1727.46 685.584 L1728.02 685.584 L1728.58 685.584 L1729.14 685.584 L1729.69 685.584 L1730.25 685.584 L1730.81 685.584 L1731.37 685.584 L1731.93 685.584 L1732.49 685.584 L1733.05 685.584 L1733.61 685.584 L1734.17 685.584 L1734.73 685.584 L1735.29 685.584 L1735.85 685.584 L1736.41 685.584 L1736.97 685.584 L1737.52 685.584 L1738.08 685.584 L1738.64 685.584 L1739.2 685.584 L1739.76 685.584 L1740.32 685.584 L1740.88 685.584 L1741.44 685.584 L1742 685.584 L1742.56 685.584 L1743.12 685.584 L1743.68 685.584 L1744.24 685.584 L1744.79 685.584 L1745.35 685.584 L1745.91 685.584 L1746.47 685.584 L1747.03 685.584 L1747.59 685.584 L1748.15 685.584 L1748.71 685.584 L1749.27 685.584 L1749.83 685.584 L1750.39 685.584 L1750.95 685.584 L1751.51 685.584 L1752.06 685.584 L1752.62 685.584 L1753.18 685.584 L1753.74 685.584 L1754.3 685.584 L1754.86 685.584 L1755.42 685.584 L1755.98 685.584 L1756.54 685.584 L1757.1 685.584 L1757.66 685.584 L1758.22 685.584 L1758.78 685.584 L1759.34 685.584 L1759.89 685.584 L1760.45 685.584 L1761.01 685.584 L1761.57 685.584 L1762.13 685.584 L1762.69 685.584 L1763.25 685.584 L1763.81 685.584 L1764.37 685.584 L1764.93 685.584 L1765.49 685.584 L1766.05 685.584 L1766.61 685.584 L1767.16 685.584 L1767.72 685.584 L1768.28 685.584 L1768.84 685.584 L1769.4 685.584 L1769.96 685.584 L1770.52 685.584 L1771.08 685.584 L1771.64 685.584 L1772.2 685.584 L1772.76 685.584 L1773.32 685.584 L1773.88 685.584 L1774.43 685.584 L1774.99 685.584 L1775.55 685.584 L1776.11 685.584 L1776.67 685.584 L1777.23 685.584 L1777.79 685.584 L1778.35 685.584 L1778.91 685.584 L1779.47 685.584 L1780.03 685.584 L1780.59 685.584 L1781.15 685.584 L1781.71 685.584 L1782.26 685.584 L1782.82 685.584 L1783.38 685.584 L1783.94 685.584 L1784.5 685.584 L1785.06 685.584 L1785.62 685.584 L1786.18 685.584 L1786.74 685.584 L1787.3 685.584 L1787.86 685.584 L1788.42 685.584 L1788.98 685.584 L1789.53 685.584 L1790.09 685.584 L1790.65 685.584 L1791.21 685.584 L1791.77 685.584 L1792.33 685.584 L1792.89 685.584 L1793.45 685.584 L1794.01 685.584 L1794.57 685.584 L1795.13 685.584 L1795.69 685.584 L1796.25 685.584 L1796.8 685.584 L1797.36 685.584 L1797.92 685.584 L1798.48 685.584 L1799.04 685.584 L1799.6 685.584 L1800.16 685.584 L1800.72 685.584 L1801.28 685.584 L1801.84 685.584 L1802.4 685.584 L1802.96 685.584 L1803.52 685.584 L1804.08 685.584 L1804.63 685.584 L1805.19 685.584 L1805.75 685.584 L1806.31 685.584 L1806.87 685.584 L1807.43 685.584 L1807.99 685.584 L1808.55 685.584 L1809.11 685.584 L1809.67 685.584 L1810.23 685.584 L1810.79 685.584 L1811.35 685.584 L1811.9 685.584 L1812.46 685.584 L1813.02 685.584 L1813.58 685.584 L1814.14 685.584 L1814.7 685.584 L1815.26 685.584 L1815.82 685.584 L1816.38 685.584 L1816.94 685.584 L1817.5 685.584 L1818.06 685.584 L1818.62 685.584 L1819.18 685.584 L1819.73 685.584 L1820.29 685.584 L1820.85 685.584 L1821.41 685.584 L1821.97 685.584 L1822.53 685.584 L1823.09 685.584 L1823.65 685.584 L1824.21 685.584 L1824.77 685.584 L1825.33 685.584 L1825.89 685.584 L1826.45 685.584 L1827 685.584 L1827.56 685.584 L1828.12 685.584 L1828.68 685.584 L1829.24 685.584 L1829.8 685.584 L1830.36 685.584 L1830.92 685.584 L1831.48 685.584 L1832.04 685.584 L1832.6 685.584 L1833.16 685.584 L1833.72 685.584 L1834.27 685.584 L1834.83 685.584 L1835.39 685.584 L1835.95 685.584 L1836.51 685.584 L1837.07 685.584 L1837.63 685.584 L1838.19 685.584 L1838.19 683.555 L1837.63 683.555 L1837.07 683.555 L1836.51 683.555 L1835.95 683.555 L1835.39 683.555 L1834.83 683.555 L1834.27 683.555 L1833.72 683.555 L1833.16 683.555 L1832.6 683.555 L1832.04 683.555 L1831.48 683.555 L1830.92 683.555 L1830.36 683.555 L1829.8 683.555 L1829.24 683.555 L1828.68 683.555 L1828.12 683.555 L1827.56 683.555 L1827 683.555 L1826.45 683.555 L1825.89 683.555 L1825.33 683.555 L1824.77 683.555 L1824.21 683.555 L1823.65 683.555 L1823.09 683.555 L1822.53 683.555 L1821.97 683.555 L1821.41 683.555 L1820.85 683.555 L1820.29 683.555 L1819.73 683.555 L1819.18 683.555 L1818.62 683.555 L1818.06 683.555 L1817.5 683.555 L1816.94 683.555 L1816.38 683.555 L1815.82 683.555 L1815.26 683.555 L1814.7 683.555 L1814.14 683.555 L1813.58 683.555 L1813.02 683.555 L1812.46 683.555 L1811.9 683.555 L1811.35 683.555 L1810.79 683.555 L1810.23 683.555 L1809.67 683.555 L1809.11 683.555 L1808.55 683.555 L1807.99 683.555 L1807.43 683.555 L1806.87 683.555 L1806.31 683.555 L1805.75 683.555 L1805.19 683.555 L1804.63 683.555 L1804.08 683.555 L1803.52 683.555 L1802.96 683.555 L1802.4 683.555 L1801.84 683.555 L1801.28 683.555 L1800.72 683.555 L1800.16 683.555 L1799.6 683.555 L1799.04 683.555 L1798.48 683.555 L1797.92 683.555 L1797.36 683.555 L1796.8 683.555 L1796.25 683.555 L1795.69 683.555 L1795.13 683.555 L1794.57 683.555 L1794.01 683.555 L1793.45 683.555 L1792.89 683.555 L1792.33 683.555 L1791.77 683.555 L1791.21 683.555 L1790.65 683.555 L1790.09 683.555 L1789.53 683.555 L1788.98 683.555 L1788.42 683.555 L1787.86 683.555 L1787.3 683.555 L1786.74 683.555 L1786.18 683.555 L1785.62 683.555 L1785.06 683.555 L1784.5 683.555 L1783.94 683.555 L1783.38 683.555 L1782.82 683.555 L1782.26 683.555 L1781.71 683.555 L1781.15 683.555 L1780.59 683.555 L1780.03 683.555 L1779.47 683.555 L1778.91 683.555 L1778.35 683.555 L1777.79 683.555 L1777.23 683.555 L1776.67 683.555 L1776.11 683.555 L1775.55 683.555 L1774.99 683.555 L1774.43 683.555 L1773.88 683.555 L1773.32 683.555 L1772.76 683.555 L1772.2 683.555 L1771.64 683.555 L1771.08 683.555 L1770.52 683.555 L1769.96 683.555 L1769.4 683.555 L1768.84 683.555 L1768.28 683.555 L1767.72 683.555 L1767.16 683.555 L1766.61 683.555 L1766.05 683.555 L1765.49 683.555 L1764.93 683.555 L1764.37 683.555 L1763.81 683.555 L1763.25 683.555 L1762.69 683.555 L1762.13 683.555 L1761.57 683.555 L1761.01 683.555 L1760.45 683.555 L1759.89 683.555 L1759.34 683.555 L1758.78 683.555 L1758.22 683.555 L1757.66 683.555 L1757.1 683.555 L1756.54 683.555 L1755.98 683.555 L1755.42 683.555 L1754.86 683.555 L1754.3 683.555 L1753.74 683.555 L1753.18 683.555 L1752.62 683.555 L1752.06 683.555 L1751.51 683.555 L1750.95 683.555 L1750.39 683.555 L1749.83 683.555 L1749.27 683.555 L1748.71 683.555 L1748.15 683.555 L1747.59 683.555 L1747.03 683.555 L1746.47 683.555 L1745.91 683.555 L1745.35 683.555 L1744.79 683.555 L1744.24 683.555 L1743.68 683.555 L1743.12 683.555 L1742.56 683.555 L1742 683.555 L1741.44 683.555 L1740.88 683.555 L1740.32 683.555 L1739.76 683.555 L1739.2 683.555 L1738.64 683.555 L1738.08 683.555 L1737.52 683.555 L1736.97 683.555 L1736.41 683.555 L1735.85 683.555 L1735.29 683.555 L1734.73 683.555 L1734.17 683.555 L1733.61 683.555 L1733.05 683.555 L1732.49 683.555 L1731.93 683.555 L1731.37 683.555 L1730.81 683.555 L1730.25 683.555 L1729.69 683.555 L1729.14 683.555 L1728.58 683.555 L1728.02 683.555 L1727.46 683.555 L1726.9 683.555 L1726.34 683.555 L1725.78 683.555 L1725.22 683.555 L1724.66 683.555 L1724.1 683.555 L1723.54 683.555 L1722.98 683.555 L1722.42 683.555 L1721.87 683.555 L1721.31 683.555 L1720.75 683.555 L1720.19 683.555 L1719.63 683.555 L1719.07 683.555 L1718.51 683.555 L1717.95 683.555 L1717.39 683.555 L1716.83 683.555 L1716.27 683.555 L1715.71 683.555 L1715.15 683.555 L1714.6 683.555 L1714.04 683.555 L1713.48 683.555 L1712.92 683.555 L1712.36 683.555 L1711.8 683.555 L1711.24 683.555 L1710.68 683.555 L1710.12 683.555 L1709.56 683.555 L1709 683.555 L1708.44 683.555 L1707.88 683.555 L1707.32 683.555 L1706.77 683.555 L1706.21 683.555 L1705.65 683.555 L1705.09 683.555 L1704.53 683.555 L1703.97 683.555 L1703.41 683.555 L1702.85 683.555 L1702.29 683.555 L1701.73 683.555 L1701.17 683.555 L1700.61 683.555 L1700.05 683.555 L1699.5 683.555 L1698.94 683.555 L1698.38 683.555 L1697.82 683.555 L1697.26 683.555 L1696.7 683.555 L1696.14 683.555 L1695.58 683.555 L1695.02 683.555 L1694.46 683.555 L1693.9 683.555 L1693.34 683.555 L1692.78 683.555 L1692.23 683.555 L1691.67 683.555 L1691.11 683.555 L1690.55 683.555 L1689.99 683.555 L1689.43 683.555 L1688.87 683.555 L1688.31 683.555 L1687.75 683.555 L1687.19 683.555 L1686.63 683.555 L1686.07 683.555 L1685.51 683.555 L1684.95 683.555 L1684.4 683.555 L1683.84 683.555 L1683.28 683.555 L1682.72 683.555 L1682.16 683.555 L1681.6 683.555 L1681.04 683.555 L1680.48 683.555 L1679.92 683.555 L1679.36 683.555 L1678.8 683.555 L1678.24 683.555 L1677.68 683.555 L1677.13 683.555 L1676.57 683.555 L1676.01 683.555 L1675.45 683.555 L1674.89 683.555 L1674.33 683.555 L1673.77 683.555 L1673.21 683.555 L1672.65 683.555 L1672.09 683.555 L1671.53 683.555 L1670.97 683.555 L1670.41 683.555 L1669.85 683.555 L1669.3 683.555 L1668.74 683.555 L1668.18 683.555 L1667.62 683.555 L1667.06 683.555 L1666.5 683.555 L1665.94 683.555 L1665.38 683.555 L1664.82 683.555 L1664.26 683.555 L1663.7 683.555 L1663.14 683.555 L1662.58 683.555 L1662.03 683.555 L1661.47 683.555 L1660.91 683.555 L1660.35 683.555 L1659.79 683.555 L1659.23 683.555 L1658.67 683.555 L1658.11 683.555 L1657.55 683.555 L1656.99 683.555 L1656.43 683.555 L1655.87 683.555 L1655.31 683.555 L1654.76 683.555 L1654.2 683.555 L1653.64 683.555 L1653.08 683.555 L1652.52 683.555 L1651.96 683.555 L1651.4 683.555 L1650.84 683.555 L1650.28 683.555 L1649.72 683.555 L1649.16 683.555 L1648.6 683.555 L1648.04 683.555 L1647.48 683.555 L1646.93 683.555 L1646.37 683.555 L1645.81 683.555 L1645.25 683.555 L1644.69 683.555 L1644.13 683.555 L1643.57 683.555 L1643.01 683.555 L1642.45 683.555 L1641.89 683.555 L1641.33 683.555 L1640.77 683.555 L1640.21 683.555 L1639.66 683.555 L1639.1 683.555 L1638.54 683.555 L1637.98 683.555 L1637.42 683.555 L1636.86 683.555 L1636.3 683.555 L1635.74 683.555 L1635.18 683.555 L1634.62 683.555 L1634.06 683.555 L1633.5 683.555 L1632.94 683.555 L1632.39 683.555 L1631.83 683.555 L1631.27 683.555 L1630.71 683.555 L1630.15 683.555 L1629.59 683.555 L1629.03 683.555 L1628.47 683.555 L1627.91 683.555 L1627.35 683.555 L1626.79 683.555 L1626.23 683.555 L1625.67 683.555 L1625.11 683.555 L1624.56 683.555 L1624 683.555 L1623.44 683.555 L1622.88 683.555 L1622.32 683.555 L1621.76 683.555 L1621.2 683.555 L1620.64 683.555 L1620.08 683.555 L1619.52 683.555 L1618.96 683.555 L1618.4 683.555 L1617.84 683.555 L1617.29 683.555 L1616.73 683.555 L1616.17 683.555 L1615.61 683.555 L1615.05 683.555 L1614.49 683.555 L1613.93 683.555 L1613.37 683.555 L1612.81 683.555 L1612.25 683.555 L1611.69 683.555 L1611.13 683.555 L1610.57 683.555 L1610.02 683.555 L1609.46 683.555 L1608.9 683.555 L1608.34 683.555 L1607.78 683.555 L1607.22 683.555 L1606.66 683.555 L1606.1 683.555 L1605.54 683.555 L1604.98 683.555 L1604.42 683.555 L1603.86 683.555 L1603.3 683.555 L1602.74 683.555 L1602.19 683.555 L1601.63 683.555 L1601.07 683.555 L1600.51 683.555 L1599.95 683.555 L1599.39 683.555 L1598.83 683.555 L1598.27 683.555 L1597.71 683.555 L1597.15 683.555 L1596.59 683.555 L1596.03 683.555 L1595.47 683.555 L1594.92 683.555 L1594.36 683.555 L1593.8 683.555 L1593.24 683.555 L1592.68 683.555 L1592.12 683.555 L1591.56 683.555 L1591 683.555 L1590.44 683.555 L1589.88 683.555 L1589.32 683.555 L1588.76 683.555 L1588.2 683.555 L1587.65 683.555 L1587.09 683.555 L1586.53 683.555 L1585.97 683.555 L1585.41 683.555 L1584.85 683.555 L1584.29 683.555 L1583.73 683.555 L1583.17 683.555 L1582.61 683.555 L1582.05 683.555 L1581.49 683.555 L1580.93 683.555 L1580.37 683.555 L1579.82 683.555 L1579.26 683.555 L1578.7 683.555 L1578.14 683.555 L1577.58 683.555 L1577.02 683.555 L1576.46 683.555 L1575.9 683.555 L1575.34 683.555 L1574.78 683.555 L1574.22 683.555 L1573.66 683.555 L1573.1 683.555 L1572.55 683.555 L1571.99 683.555 L1571.43 683.555 L1570.87 683.555 L1570.31 683.555 L1569.75 683.555 L1569.19 683.555 L1568.63 683.555 L1568.07 683.555 L1567.51 683.555 L1566.95 683.555 L1566.39 683.555 L1565.83 683.555 L1565.28 683.555 L1564.72 683.555 L1564.16 683.555 L1563.6 683.555 L1563.04 683.555 L1562.48 683.555 L1561.92 683.555 L1561.36 683.555 L1560.8 683.555 L1560.24 683.555 L1559.68 683.555 L1559.12 683.555 L1558.56 683.555 L1558 683.555 L1557.45 683.555 L1556.89 683.555 L1556.33 683.555 L1555.77 683.555 L1555.21 683.555 L1554.65 683.555 L1554.09 683.555 L1553.53 683.555 L1552.97 683.555 L1552.41 683.555 L1551.85 683.555 L1551.29 683.555 L1550.73 683.555 L1550.18 683.555 L1549.62 683.555 L1549.06 683.555 L1548.5 683.555 L1547.94 683.555 L1547.38 683.555 L1546.82 683.555 L1546.26 683.555 L1545.7 683.555 L1545.14 683.555 L1544.58 683.555 L1544.02 683.555 L1543.46 683.555 L1542.9 683.555 L1542.35 683.555 L1541.79 683.555 L1541.23 683.555 L1540.67 683.555 L1540.11 683.555 L1539.55 683.555 L1538.99 683.555 L1538.43 683.555 L1537.87 683.555 L1537.31 683.555 L1536.75 683.555 L1536.19 683.555 L1535.63 683.555 L1535.08 683.555 L1534.52 683.555 L1533.96 683.555 L1533.4 683.555 L1532.84 683.555 L1532.28 683.555 L1531.72 683.555 L1531.16 683.555 L1530.6 683.555 L1530.04 683.555 L1529.48 683.555 L1528.92 683.555 L1528.36 683.555 L1527.81 683.555 L1527.25 683.555 L1526.69 683.555 L1526.13 683.555 L1525.57 683.555 L1525.01 683.555 L1524.45 683.555 L1523.89 683.555 L1523.33 683.555 L1522.77 683.555 L1522.21 683.555 L1521.65 683.555 L1521.09 683.555 L1520.53 683.555 L1519.98 683.555 L1519.42 683.555 L1518.86 683.555 L1518.3 683.555 L1517.74 683.555 L1517.18 683.555 L1516.62 683.555 L1516.06 683.555 L1515.5 683.555 L1514.94 683.555 L1514.38 683.555 L1513.82 683.555 L1513.26 683.555 L1512.71 683.555 L1512.15 683.555 L1511.59 683.555 L1511.03 683.555 L1510.47 683.555 L1509.91 683.555 L1509.35 683.555 L1508.79 683.555 L1508.23 683.555 L1507.67 683.555 L1507.11 683.555 L1506.55 683.555 L1505.99 683.555 L1505.44 683.555 L1504.88 683.555 L1504.32 683.555 L1503.76 683.555 L1503.2 683.555 L1502.64 683.555 L1502.08 683.555 L1501.52 683.555 L1500.96 683.555 L1500.4 683.555 L1499.84 683.555 L1499.28 683.555 L1498.72 683.555 L1498.16 683.555 L1497.61 683.555 L1497.05 683.555 L1496.49 683.555 L1495.93 683.555 L1495.37 683.555 L1494.81 683.555 L1494.25 683.555 L1493.69 683.555 L1493.13 683.555 L1492.57 683.555 L1492.01 683.555 L1491.45 683.555 L1490.89 683.555 L1490.34 683.555 L1489.78 683.555 L1489.22 683.555 L1488.66 683.555 L1488.1 683.555 L1487.54 683.555 L1486.98 683.555 L1486.42 683.555 L1485.86 683.555 L1485.3 683.555 L1484.74 683.555 L1484.18 683.555 L1483.62 683.555 L1483.07 683.555 L1482.51 683.555 L1481.95 683.555 L1481.39 683.555 L1480.83 683.555 L1480.27 683.555 L1479.71 683.555 L1479.15 683.555 L1478.59 683.555 L1478.03 683.555 L1477.47 683.555 L1476.91 683.555 L1476.35 683.555 L1475.79 683.555 L1475.24 683.555 L1474.68 683.555 L1474.12 683.555 L1473.56 683.555 L1473 683.555 L1472.44 683.555 L1471.88 683.555 L1471.32 683.555 L1470.76 683.555 L1470.2 683.555 L1469.64 683.555 L1469.08 683.555 L1468.52 683.555 L1467.97 683.555 L1467.41 683.555 L1466.85 683.555 L1466.29 683.555 L1465.73 683.555 L1465.17 683.555 L1464.61 683.555 L1464.05 683.555 L1463.49 683.555 L1462.93 683.555 L1462.37 683.555 L1461.81 683.555 L1461.25 683.555 L1460.7 683.555 L1460.14 683.555 L1459.58 683.555 L1459.02 683.555 L1458.46 683.555 L1457.9 683.555 L1457.34 683.555 L1456.78 683.555 L1456.22 683.555 L1455.66 683.555 L1455.1 683.555 L1454.54 683.555 L1453.98 683.555 L1453.42 683.555 L1452.87 683.555 L1452.31 683.555 L1451.75 683.555 L1451.19 683.555 L1450.63 683.555 L1450.07 683.555 L1449.51 683.555 L1448.95 683.555 L1448.39 683.555 L1447.83 683.555 L1447.27 683.555 L1446.71 683.555 L1446.15 683.555 L1445.6 683.555 L1445.04 683.555 L1444.48 683.555 L1443.92 683.555 L1443.36 683.555 L1442.8 683.555 L1442.24 683.555 L1441.68 683.555 L1441.12 683.555 L1440.56 683.555 L1440 683.555 L1439.44 683.555 L1438.88 683.555 L1438.33 683.555 L1437.77 683.555 L1437.21 683.555 L1436.65 683.555 L1436.09 683.555 L1435.53 683.555 L1434.97 683.555 L1434.41 683.555 L1433.85 683.555 L1433.29 683.555 L1432.73 683.555 L1432.17 683.555 L1431.61 683.555 L1431.05 683.555 L1430.5 683.555 L1429.94 683.555 L1429.38 683.555 L1428.82 683.555 L1428.26 683.555 L1427.7 683.555 L1427.14 683.555 L1426.58 683.555 L1426.02 683.555 L1425.46 683.555 L1424.9 683.555 L1424.34 683.555 L1423.78 683.555 L1423.23 683.555 L1422.67 683.555 L1422.11 683.555 L1421.55 683.555 L1420.99 683.555 L1420.43 683.555 L1419.87 683.555 L1419.31 683.555 L1418.75 683.555 L1418.19 683.555 L1417.63 683.555 L1417.07 683.555 L1416.51 683.555 L1415.95 683.555 L1415.4 683.555 L1414.84 683.555 L1414.28 683.555 L1413.72 683.555 L1413.16 683.555 L1412.6 683.555 L1412.04 683.555 L1411.48 683.555 L1410.92 683.555 L1410.36 683.555 L1409.8 683.555 L1409.24 683.555 L1408.68 683.555 L1408.13 683.555 L1407.57 683.555 L1407.01 683.555 L1406.45 683.555 L1405.89 683.555 L1405.33 683.555 L1404.77 683.555 L1404.21 683.555 L1403.65 683.555 L1403.09 683.555 L1402.53 683.555 L1401.97 683.555 L1401.41 683.555 L1400.86 683.555 L1400.3 683.555 L1399.74 683.555 L1399.18 683.555 L1398.62 683.555 L1398.06 683.555 L1397.5 683.555 L1396.94 683.555 L1396.38 683.555 L1395.82 683.555 L1395.26 683.555 L1394.7 683.555 L1394.14 683.555 L1393.58 683.555 L1393.03 683.555 L1392.47 683.555 L1391.91 683.555 L1391.35 683.555 L1390.79 683.555 L1390.23 683.555 L1389.67 683.555 L1389.11 683.555 L1388.55 683.555 L1387.99 683.555 L1387.43 683.555 L1386.87 683.555 L1386.31 683.555 L1385.76 683.555 L1385.2 683.555 L1384.64 683.555 L1384.08 683.555 L1383.52 683.555 L1382.96 683.555 L1382.4 683.555 L1381.84 683.555 L1381.28 683.555 L1380.72 683.555 L1380.16 683.555 L1379.6 683.555 L1379.04 683.555 L1378.49 683.555 L1377.93 683.555 L1377.37 683.555 L1376.81 683.555 L1376.25 683.555 L1375.69 683.555 L1375.13 683.555 L1374.57 683.555 L1374.01 683.555 L1373.45 683.555 L1372.89 683.555 L1372.33 683.555 L1371.77 683.555 L1371.21 683.555 L1370.66 683.555 L1370.1 683.555 L1369.54 683.555 L1368.98 683.555 L1368.42 683.555 L1367.86 683.555 L1367.3 683.555 L1366.74 683.555 L1366.18 683.555 L1365.62 683.555 L1365.06 683.555 L1364.5 683.555 L1363.94 683.555 L1363.39 683.555 L1362.83 683.555 L1362.27 683.555 L1361.71 683.555 L1361.15 683.555 L1360.59 683.555 L1360.03 683.555 L1359.47 683.555 L1358.91 683.555 L1358.35 683.555 L1357.79 683.555 L1357.23 683.555 L1356.67 683.555 L1356.12 683.555 L1355.56 683.555 L1355 683.555 L1354.44 683.555 L1353.88 683.555 L1353.32 683.555 L1352.76 683.555 L1352.2 683.555 L1351.64 683.555 L1351.08 683.555 L1350.52 683.555 L1349.96 683.555 L1349.4 683.555 L1348.84 683.555 L1348.29 683.555 L1347.73 683.555 L1347.17 683.555 L1346.61 683.555 L1346.05 683.555 L1345.49 683.555 L1344.93 683.555 L1344.37 683.555 L1343.81 683.555 L1343.25 683.555 L1342.69 683.555 L1342.13 683.555 L1341.57 683.555 L1341.02 683.555 L1340.46 683.555 L1339.9 683.555 L1339.34 683.555 L1338.78 683.555 L1338.22 683.555 L1337.66 683.555 L1337.1 683.555 L1336.54 683.555 L1335.98 683.555 L1335.42 683.555 L1334.86 683.555 L1334.3 683.555 L1333.75 683.555 L1333.19 683.555 L1332.63 683.555 L1332.07 683.555 L1331.51 683.555 L1330.95 683.555 L1330.39 683.555 L1329.83 683.555 L1329.27 683.555 L1328.71 683.555 L1328.15 683.555 L1327.59 683.555 L1327.03 683.555 L1326.47 683.555 L1325.92 683.555 L1325.36 683.555 L1324.8 683.555 L1324.24 683.555 L1323.68 683.555 L1323.12 683.555 L1322.56 683.555 L1322 683.555 L1321.44 683.555 L1320.88 683.555 L1320.32 683.555 L1319.76 683.555 L1319.2 683.555 L1318.65 683.555 L1318.09 683.555 L1317.53 683.555 L1316.97 683.555 L1316.41 683.555 L1315.85 683.555 L1315.29 683.555 L1314.73 683.555 L1314.17 683.555 L1313.61 683.555 L1313.05 683.555 L1312.49 683.555 L1311.93 683.555 L1311.38 683.555 L1310.82 683.555 L1310.26 683.555 L1309.7 683.555 L1309.14 683.555 L1308.58 683.555 L1308.02 683.555 L1307.46 683.555 L1306.9 683.555 L1306.34 683.555 L1305.78 683.555 L1305.22 683.555 L1304.66 683.555 L1304.1 683.555 L1303.55 683.555 L1302.99 683.555 L1302.43 683.555 L1301.87 683.555 L1301.31 683.555 L1300.75 683.555 L1300.19 683.555 L1299.63 683.555 L1299.07 683.555 L1298.51 683.555 L1297.95 683.555 L1297.39 683.555 L1296.83 683.555 L1296.28 683.555 L1295.72 683.555 L1295.16 683.555 L1294.6 683.555 L1294.04 683.555 L1293.48 683.555 L1292.92 683.555 L1292.36 683.555 L1291.8 683.555 L1291.24 683.555 L1290.68 683.555 L1290.12 683.555 L1289.56 683.555 L1289 683.555 L1288.45 683.555 L1287.89 683.555 L1287.33 683.555 L1286.77 683.555 L1286.21 683.555 L1285.65 683.555 L1285.09 683.555 L1284.53 683.555 L1283.97 683.555 L1283.41 683.555 L1282.85 683.555 L1282.29 683.555 L1281.73 683.555 L1281.18 683.555 L1280.62 683.555 L1280.06 683.555 L1279.5 683.555 L1278.94 683.555 L1278.38 683.555 L1277.82 683.555 L1277.26 683.555 L1276.7 683.555 L1276.14 683.555 L1275.58 683.555 L1275.02 683.555 L1274.46 683.555 L1273.91 683.555 L1273.35 683.555 L1272.79 683.555 L1272.23 683.555 L1271.67 683.555 L1271.11 683.555 L1270.55 683.555 L1269.99 683.555 L1269.43 683.555 L1268.87 683.555 L1268.31 683.555 L1267.75 683.555 L1267.19 683.555 L1266.63 683.555 L1266.08 683.555 L1265.52 683.555 L1264.96 683.555 L1264.4 683.555 L1263.84 683.555 L1263.28 683.555 L1262.72 683.555 L1262.16 683.555 L1261.6 683.555 L1261.04 683.555 L1260.48 683.555 L1259.92 683.555 L1259.36 683.555 L1258.81 683.555 L1258.25 683.555 L1257.69 683.555 L1257.13 683.555 L1256.57 683.555 L1256.01 683.555 L1255.45 683.555 L1254.89 683.555 L1254.33 683.555 L1253.77 683.555 L1253.21 683.555 L1252.65 683.555 L1252.09 683.555 L1251.54 683.555 L1250.98 683.555 L1250.42 683.555 L1249.86 683.555 L1249.3 683.555 L1248.74 683.555 L1248.18 683.555 L1247.62 683.555 L1247.06 683.555 L1246.5 683.555 L1245.94 683.555 L1245.38 683.555 L1244.82 683.555 L1244.26 683.555 L1243.71 683.555 L1243.15 683.555 L1242.59 683.555 L1242.03 683.555 L1241.47 683.555 L1240.91 683.555 L1240.35 683.555 L1239.79 683.555 L1239.23 683.555 L1238.67 683.555 L1238.11 683.555 L1237.55 683.555 L1236.99 683.555 L1236.44 683.555 L1235.88 683.555 L1235.32 683.555 L1234.76 683.555 L1234.2 683.555 L1233.64 683.555 L1233.08 683.555 L1232.52 683.555 L1231.96 683.555 L1231.4 683.555 L1230.84 683.555 L1230.28 683.555 L1229.72 683.555 L1229.17 683.555 L1228.61 683.555 L1228.05 683.555 L1227.49 683.555 L1226.93 683.555 L1226.37 683.555 L1225.81 683.555 L1225.25 683.555 L1224.69 683.555 L1224.13 683.555 L1223.57 683.555 L1223.01 683.555 L1222.45 683.555 L1221.89 683.555 L1221.34 683.555 L1220.78 683.555 L1220.22 683.555 L1219.66 683.555 L1219.1 683.555 L1218.54 683.555 L1217.98 683.555 L1217.42 683.555 L1216.86 683.555 L1216.3 683.555 L1215.74 683.555 L1215.18 683.555 L1214.62 683.555 L1214.07 683.555 L1213.51 683.555 L1212.95 683.555 L1212.39 683.555 L1211.83 683.555 L1211.27 683.555 L1210.71 683.555 L1210.15 683.555 L1209.59 683.555 L1209.03 683.555 L1208.47 683.555 L1207.91 683.555 L1207.35 683.555 L1206.8 683.555 L1206.24 683.555 L1205.68 683.555 L1205.12 683.555 L1204.56 683.555 L1204 683.555 L1203.44 683.555 L1202.88 683.555 L1202.32 683.555 L1201.76 683.555 L1201.2 683.555 L1200.64 683.555 L1200.08 683.555 L1199.52 683.555 L1198.97 683.555 L1198.41 683.555 L1197.85 683.555 L1197.29 683.555 L1196.73 683.555 L1196.17 683.555 L1195.61 683.555 L1195.05 683.555 L1194.49 683.555 L1193.93 683.555 L1193.37 683.555 L1192.81 683.555 L1192.25 683.555 L1191.7 683.555 L1191.14 683.555 L1190.58 683.555 L1190.02 683.555 L1189.46 683.555 L1188.9 683.555 L1188.34 683.555 L1187.78 683.555 L1187.22 683.555 L1186.66 683.555 L1186.1 683.555 L1185.54 683.555 L1184.98 683.555 L1184.43 683.555 L1183.87 683.555 L1183.31 683.555 L1182.75 683.555 L1182.19 683.555 L1181.63 683.555 L1181.07 683.555 L1180.51 683.555 L1179.95 683.555 L1179.39 683.555 L1178.83 683.555 L1178.27 683.555 L1177.71 683.555 L1177.15 683.555 L1176.6 683.555 L1176.04 683.555 L1175.48 683.555 L1174.92 683.555 L1174.36 683.555 L1173.8 683.555 L1173.24 683.555 L1172.68 683.555 L1172.12 683.555 L1171.56 683.555 L1171 683.555 L1170.44 683.555 L1169.88 683.555 L1169.33 683.555 L1168.77 683.555 L1168.21 683.555 L1167.65 683.555 L1167.09 683.555 L1166.53 683.555 L1165.97 683.555 L1165.41 683.555 L1164.85 683.555 L1164.29 683.555 L1163.73 683.555 L1163.17 683.555 L1162.61 683.555 L1162.05 683.555 L1161.5 683.555 L1160.94 683.555 L1160.38 683.555 L1159.82 683.555 L1159.26 683.555 L1158.7 683.555 L1158.14 683.555 L1157.58 683.555 L1157.02 683.555 L1156.46 683.555 L1155.9 683.555 L1155.34 683.555 L1154.78 683.555 L1154.23 683.555 L1153.67 683.555 L1153.11 683.555 L1152.55 683.555 L1151.99 683.555 L1151.43 683.555 L1150.87 683.555 L1150.31 683.555 L1149.75 683.555 L1149.19 683.555 L1148.63 683.555 L1148.07 683.555 L1147.51 683.555 L1146.96 683.555 L1146.4 683.555 L1145.84 683.555 L1145.28 683.555 L1144.72 683.555 L1144.16 683.555 L1143.6 683.555 L1143.04 683.555 L1142.48 683.555 L1141.92 683.555 L1141.36 683.555 L1140.8 683.555 L1140.24 683.555 L1139.68 683.555 L1139.13 683.555 L1138.57 683.555 L1138.01 683.555 L1137.45 683.555 L1136.89 683.555 L1136.33 683.555 L1135.77 683.555 L1135.21 683.555 L1134.65 683.555 L1134.09 683.555 L1133.53 683.555 L1132.97 683.555 L1132.41 683.555 L1131.86 683.555 L1131.3 683.555 L1130.74 683.555 L1130.18 683.555 L1129.62 683.555 L1129.06 683.555 L1128.5 683.555 L1127.94 683.555 L1127.38 683.555 L1126.82 683.555 L1126.26 683.555 L1125.7 683.555 L1125.14 683.555 L1124.59 683.555 L1124.03 683.555 L1123.47 683.555 L1122.91 683.555 L1122.35 683.555 L1121.79 683.555 L1121.23 683.555 L1120.67 683.555 L1120.11 683.555 L1119.55 683.555 L1118.99 683.555 L1118.43 683.555 L1117.87 683.555 L1117.31 683.555 L1116.76 683.555 L1116.2 683.555 L1115.64 683.555 L1115.08 683.555 L1114.52 683.555 L1113.96 683.555 L1113.4 683.555 L1112.84 683.555 L1112.28 683.555 L1111.72 683.555 L1111.16 683.555 L1110.6 683.555 L1110.04 683.555 L1109.49 683.555 L1108.93 683.555 L1108.37 683.555 L1107.81 683.555 L1107.25 683.555 L1106.69 683.555 L1106.13 683.555 L1105.57 683.555 L1105.01 683.555 L1104.45 683.555 L1103.89 683.555 L1103.33 683.555 L1102.77 683.555 L1102.22 683.555 L1101.66 683.555 L1101.1 683.555 L1100.54 683.555 L1099.98 683.555 L1099.42 683.555 L1098.86 683.555 L1098.3 683.555 L1097.74 683.555 L1097.18 683.555 L1096.62 683.555 L1096.06 683.555 L1095.5 683.555 L1094.94 683.555 L1094.39 683.555 L1093.83 683.555 L1093.27 683.555 L1092.71 683.555 L1092.15 683.555 L1091.59 683.555 L1091.03 683.555 L1090.47 683.555 L1089.91 683.555 L1089.35 683.555 L1088.79 683.555 L1088.23 683.555 L1087.67 683.555 L1087.12 683.555 L1086.56 683.555 L1086 683.555 L1085.44 683.555 L1084.88 683.555 L1084.32 683.555 L1083.76 683.555 L1083.2 683.555 L1082.64 683.555 L1082.08 683.555 L1081.52 683.555 L1080.96 683.555 L1080.4 683.555 L1079.85 683.555 L1079.29 683.555 L1078.73 683.555 L1078.17 683.555 L1077.61 683.555 L1077.05 683.555 L1076.49 683.555 L1075.93 683.555 L1075.37 683.555 L1074.81 683.555 L1074.25 683.555 L1073.69 683.555 L1073.13 683.555 L1072.57 683.555 L1072.02 683.555 L1071.46 683.555 L1070.9 683.555 L1070.34 683.555 L1069.78 683.555 L1069.22 683.555 L1068.66 683.555 L1068.1 683.555 L1067.54 683.555 L1066.98 683.555 L1066.42 683.555 L1065.86 683.555 L1065.3 683.555 L1064.75 683.555 L1064.19 683.555 L1063.63 683.555 L1063.07 683.555 L1062.51 683.555 L1061.95 683.555 L1061.39 683.555 L1060.83 683.555 L1060.27 683.555 L1059.71 683.555 L1059.15 683.555 L1058.59 683.555 L1058.03 683.555 L1057.48 683.555 L1056.92 683.555 L1056.36 683.555 L1055.8 683.555 L1055.24 683.555 L1054.68 683.555 L1054.12 683.555 L1053.56 683.555 L1053 683.555 L1052.44 683.555 L1051.88 683.555 L1051.32 683.555 L1050.76 683.555 L1050.2 683.555 L1049.65 683.555 L1049.09 683.555 L1048.53 683.555 L1047.97 683.555 L1047.41 683.555 L1046.85 683.555 L1046.29 683.555 L1045.73 683.555 L1045.17 683.555 L1044.61 683.555 L1044.05 683.555 L1043.49 683.555 L1042.93 683.555 L1042.38 683.555 L1041.82 683.555 L1041.26 683.555 L1040.7 683.555 L1040.14 683.555 L1039.58 683.555 L1039.02 683.555 L1038.46 683.555 L1037.9 683.555 L1037.34 683.555 L1036.78 683.555 L1036.22 683.555 L1035.66 683.555 L1035.1 683.555 L1034.55 683.555 L1033.99 683.555 L1033.43 683.555 L1032.87 683.555 L1032.31 683.555 L1031.75 683.555 L1031.19 683.555 L1030.63 683.555 L1030.07 683.555 L1029.51 683.555 L1028.95 683.555 L1028.39 683.555 L1027.83 683.555 L1027.28 683.555 L1026.72 683.555 L1026.16 683.555 L1025.6 683.555 L1025.04 683.555 L1024.48 683.555 L1023.92 683.555 L1023.36 683.555 L1022.8 683.555 L1022.24 683.555 L1021.68 683.555 L1021.12 683.555 L1020.56 683.555 L1020.01 683.555 L1019.45 683.555 L1018.89 683.555 L1018.33 683.555 L1017.77 683.555 L1017.21 683.555 L1016.65 683.555 L1016.09 683.555 L1015.53 683.555 L1014.97 683.555 L1014.41 683.555 L1013.85 683.555 L1013.29 683.555 L1012.73 683.555 L1012.18 683.555 L1011.62 683.555 L1011.06 683.555 L1010.5 683.555 L1009.94 683.555 L1009.38 683.555 L1008.82 683.555 L1008.26 683.555 L1007.7 683.555 L1007.14 683.555 L1006.58 683.555 L1006.02 683.555 L1005.46 683.555 L1004.91 683.555 L1004.35 683.555 L1003.79 683.555 L1003.23 683.555 L1002.67 683.555 L1002.11 683.555 L1001.55 683.555 L1000.99 683.555 L1000.43 683.555 L999.872 683.555 L999.313 683.555 L998.754 683.555 L998.194 683.555 L997.635 683.555 L997.076 683.555 L996.517 683.555 L995.957 683.555 L995.398 683.555 L994.839 683.555 L994.28 683.555 L993.72 683.555 L993.161 683.555 L992.602 683.555 L992.043 683.555 L991.483 683.555 L990.924 683.555 L990.365 683.555 L989.806 683.555 L989.246 683.555 L988.687 683.555 L988.128 683.555 L987.569 683.555 L987.009 683.555 L986.45 683.555 L985.891 683.555 L985.332 683.555 L984.772 683.555 L984.213 683.555 L983.654 683.555 L983.095 683.555 L982.535 683.555 L981.976 683.555 L981.417 683.555 L980.858 683.555 L980.298 683.555 L979.739 683.555 L979.18 683.555 L978.621 683.555 L978.061 683.555 L977.502 683.555 L976.943 683.555 L976.384 683.555 L975.824 683.555 L975.265 683.555 L974.706 683.555 L974.147 683.555 L973.587 683.555 L973.028 683.555 L972.469 683.555 L971.91 683.555 L971.35 683.555 L970.791 683.555 L970.232 683.555 L969.673 683.555 L969.113 683.555 L968.554 683.555 L967.995 683.555 L967.436 683.555 L966.876 683.555 L966.317 683.555 L965.758 683.555 L965.199 683.555 L964.639 683.555 L964.08 683.555 L963.521 683.555 L962.962 683.555 L962.402 683.555 L961.843 683.555 L961.284 683.555 L960.725 683.555 L960.165 683.555 L959.606 683.555 L959.047 683.555 L958.488 683.555 L957.928 683.555 L957.369 683.555 L956.81 683.555 L956.251 683.555 L955.691 683.555 L955.132 683.555 L954.573 683.555 L954.014 683.555 L953.454 683.555 L952.895 683.555 L952.336 683.555 L951.777 683.555 L951.217 683.555 L950.658 683.555 L950.099 683.555 L949.54 683.555 L948.98 683.555 L948.421 683.555 L947.862 683.555 L947.303 683.555 L946.743 683.555 L946.184 683.555 L945.625 683.555 L945.066 683.555 L944.506 683.555 L943.947 683.555 L943.388 683.555 L942.829 683.555 L942.269 683.555 L941.71 683.555 L941.151 683.555 L940.592 683.555 L940.032 683.555 L939.473 683.555 L938.914 683.555 L938.355 683.555 L937.795 683.555 L937.236 683.555 L936.677 683.555 L936.118 683.555 L935.558 683.555 L934.999 683.555 L934.44 683.555 L933.881 683.555 L933.321 683.555 L932.762 683.555 L932.203 683.555 L931.644 683.555 L931.084 683.555 L930.525 683.555 L929.966 683.555 L929.406 683.555 L928.847 683.555 L928.288 683.555 L927.729 683.555 L927.169 683.555 L926.61 683.555 L926.051 683.555 L925.492 683.555 L924.932 683.555 L924.373 683.555 L923.814 683.555 L923.255 683.555 L922.695 683.555 L922.136 683.555 L921.577 683.555 L921.018 683.555 L920.458 683.555 L919.899 683.555 L919.34 683.555 L918.781 683.555 L918.221 683.555 L917.662 683.555 L917.103 683.555 L916.544 683.555 L915.984 683.555 L915.425 683.555 L914.866 683.555 L914.307 683.555 L913.747 683.555 L913.188 683.555 L912.629 683.555 L912.07 683.555 L911.51 683.555 L910.951 683.555 L910.392 683.555 L909.833 683.555 L909.273 683.555 L908.714 683.555 L908.155 683.555 L907.596 683.555 L907.036 683.555 L906.477 683.555 L905.918 683.555 L905.359 683.555 L904.799 683.555 L904.24 683.555 L903.681 683.555 L903.122 683.555 L902.562 683.555 L902.003 683.555 L901.444 683.555 L900.885 683.555 L900.325 683.555 L899.766 683.555 L899.207 683.555 L898.648 683.555 L898.088 683.555 L897.529 683.555 L896.97 683.555 L896.411 683.555 L895.851 683.555 L895.292 683.555 L894.733 683.555 L894.174 683.555 L893.614 683.555 L893.055 683.555 L892.496 683.555 L891.937 683.555 L891.377 683.555 L890.818 683.555 L890.259 683.555 L889.7 683.555 L889.14 683.555 L888.581 683.555 L888.022 683.555 L887.463 683.555 L886.903 683.555 L886.344 683.555 L885.785 683.555 L885.226 683.555 L884.666 683.555 L884.107 683.555 L883.548 683.555 L882.989 683.555 L882.429 683.555 L881.87 683.555 L881.311 683.555 L880.752 683.555 L880.192 683.555 L879.633 683.555 L879.074 683.555 L878.515 683.555 L877.955 683.555 L877.396 683.555 L876.837 683.555 L876.278 683.555 L875.718 683.555 L875.159 683.555 L874.6 683.555 L874.041 683.555 L873.481 683.555 L872.922 683.555 L872.363 683.555 L871.804 683.555 L871.244 683.555 L870.685 683.555 L870.126 683.555 L869.567 683.555 L869.007 683.555 L868.448 683.555 L867.889 683.555 L867.33 683.555 L866.77 683.555 L866.211 683.555 L865.652 683.555 L865.093 683.555 L864.533 683.555 L863.974 683.555 L863.415 683.555 L862.856 683.555 L862.296 683.555 L861.737 683.555 L861.178 683.555 L860.619 683.555 L860.059 683.555 L859.5 683.555 L858.941 683.555 L858.382 683.555 L857.822 683.555 L857.263 683.555 L856.704 683.555 L856.145 683.555 L855.585 683.555 L855.026 683.555 L854.467 683.555 L853.908 683.555 L853.348 683.555 L852.789 683.555 L852.23 683.555 L851.671 683.555 L851.111 683.555 L850.552 683.555 L849.993 683.555 L849.434 683.555 L848.874 683.555 L848.315 683.555 L847.756 683.555 L847.197 683.555 L846.637 683.555 L846.078 683.555 L845.519 683.555 L844.96 683.555 L844.4 683.555 L843.841 683.555 L843.282 683.555 L842.723 683.555 L842.163 683.555 L841.604 683.555 L841.045 683.555 L840.486 683.555 L839.926 683.555 L839.367 683.555 L838.808 683.555 L838.249 683.555 L837.689 683.555 L837.13 683.555 L836.571 683.555 L836.012 683.555 L835.452 683.555 L834.893 683.555 L834.334 683.555 L833.775 683.555 L833.215 683.555 L832.656 683.555 L832.097 683.555 L831.538 683.555 L830.978 683.555 L830.419 683.555 L829.86 683.555 L829.301 683.555 L828.741 683.555 L828.182 683.555 L827.623 683.555 L827.064 683.555 L826.504 683.555 L825.945 683.555 L825.386 683.555 L824.827 683.555 L824.267 683.555 L823.708 683.555 L823.149 683.555 L822.59 683.555 L822.03 683.555 L821.471 683.555 L820.912 683.555 L820.353 683.555 L819.793 683.555 L819.234 683.555 L818.675 683.555 L818.116 683.555 L817.556 683.555 L816.997 683.555 L816.438 683.555 L815.879 683.555 L815.319 683.555 L814.76 683.555 L814.201 683.555 L813.642 683.555 L813.082 683.555 L812.523 683.555 L811.964 683.555 L811.405 683.555 L810.845 683.555 L810.286 683.555 L809.727 683.555 L809.168 683.555 L808.608 683.555 L808.049 683.555 L807.49 683.555 L806.931 683.555 L806.371 683.555 L805.812 683.555 L805.253 683.555 L804.693 683.555 L804.134 683.555 L803.575 683.555 L803.016 683.555 L802.456 683.555 L801.897 683.555 L801.338 683.555 L800.779 683.555 L800.219 683.555 L799.66 683.555 L799.101 683.555 L798.542 683.555 L797.982 683.555 L797.423 683.555 L796.864 683.555 L796.305 683.555 L795.745 683.555 L795.186 683.555 L794.627 683.555 L794.068 683.555 L793.508 683.555 L792.949 683.555 L792.39 683.555 L791.831 683.555 L791.271 683.555 L790.712 683.555 L790.153 683.555 L789.594 683.555 L789.034 683.555 L788.475 683.555 L787.916 683.555 L787.357 683.555 L786.797 683.555 L786.238 683.555 L785.679 683.555 L785.12 683.555 L784.56 683.555 L784.001 683.555 L783.442 683.555 L782.883 683.555 L782.323 683.555 L781.764 683.555 L781.205 683.555 L780.646 683.555 L780.086 683.555 L779.527 683.555 L778.968 683.555 L778.409 683.555 L777.849 683.555 L777.29 683.555 L776.731 683.555 L776.172 683.555 L775.612 683.555 L775.053 683.555 L774.494 683.555 L773.935 683.555 L773.375 683.555 L772.816 683.555 L772.257 683.555 L771.698 683.555 L771.138 683.555 L770.579 683.555 L770.02 683.555 L769.461 683.555 L768.901 683.555 L768.342 683.555 L767.783 683.555 L767.224 683.555 L766.664 683.555 L766.105 683.555 L765.546 683.555 L764.987 683.555 L764.427 683.555 L763.868 683.555 L763.309 683.555 L762.75 683.555 L762.19 683.555 L761.631 683.555 L761.072 683.555 L760.513 683.555 L759.953 683.555 L759.394 683.555 L758.835 683.555 L758.276 683.555 L757.716 683.555 L757.157 683.555 L756.598 683.555 L756.039 683.555 L755.479 683.555 L754.92 683.555 L754.361 683.555 L753.802 683.555 L753.242 683.555 L752.683 683.555 L752.124 683.555 L751.565 683.555 L751.005 683.555 L750.446 683.555 L749.887 683.555 L749.328 683.555 L748.768 683.555 L748.209 683.555 L747.65 683.555 L747.091 683.555 L746.531 683.555 L745.972 683.555 L745.413 683.555 L744.854 683.555 L744.294 683.555 L743.735 683.555 L743.176 683.555 L742.617 683.555 L742.057 683.555 L741.498 683.555 L740.939 683.555 L740.38 683.555 L739.82 683.555 L739.261 683.555 L738.702 683.555 L738.143 683.555 L737.583 683.555 L737.024 683.555 L736.465 683.555 L735.906 683.555 L735.346 683.555 L734.787 683.555 L734.228 683.555 L733.669 683.555 L733.109 683.555 L732.55 683.555 L731.991 683.555 L731.432 683.555 L730.872 683.555 L730.313 683.555 L729.754 683.555 L729.195 683.555 L728.635 683.555 L728.076 683.555 L727.517 683.555 L726.958 683.555 L726.398 683.555 L725.839 683.555 L725.28 683.555 L724.721 683.555 L724.161 683.555 L723.602 683.555 L723.043 683.555 L722.484 683.555 L721.924 683.555 L721.365 683.555 L720.806 683.555 L720.247 683.555  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip343)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.599 720.806,684.599 721.365,684.599 721.924,684.599 722.484,684.599 723.043,684.599 723.602,684.599 724.161,684.599 724.721,684.599 725.28,684.599 725.839,684.599 726.398,684.599 726.958,684.599 727.517,684.599 728.076,684.599 728.635,684.599 729.195,684.599 729.754,684.599 730.313,684.599 730.872,684.599 731.432,684.599 731.991,684.599 732.55,684.599 733.109,684.599 733.669,684.599 734.228,684.599 734.787,684.599 735.346,684.599 735.906,684.599 736.465,684.599 737.024,684.599 737.583,684.599 738.143,684.599 738.702,684.599 739.261,684.599 739.82,684.599 740.38,684.599 740.939,684.599 741.498,684.599 742.057,684.599 742.617,684.599 743.176,684.599 743.735,684.599 744.294,684.599 744.854,684.599 745.413,684.599 745.972,684.599 746.531,684.599 747.091,684.599 747.65,684.599 748.209,684.599 748.768,684.599 749.328,684.599 749.887,684.599 750.446,684.599 751.005,684.599 751.565,684.599 752.124,684.599 752.683,684.599 753.242,684.599 753.802,684.599 754.361,684.599 754.92,684.599 755.479,684.599 756.039,684.599 756.598,684.599 757.157,684.599 757.716,684.599 758.276,684.599 758.835,684.599 759.394,684.599 759.953,684.599 760.513,684.599 761.072,684.599 761.631,684.599 762.19,684.599 762.75,684.599 763.309,684.599 763.868,684.599 764.427,684.599 764.987,684.599 765.546,684.599 766.105,684.599 766.664,684.599 767.224,684.599 767.783,684.599 768.342,684.599 768.901,684.599 769.461,684.599 770.02,684.599 770.579,684.599 771.138,684.599 771.698,684.599 772.257,684.599 772.816,684.599 773.375,684.599 773.935,684.599 774.494,684.599 775.053,684.599 775.612,684.599 776.172,684.599 776.731,684.599 777.29,684.599 777.849,684.599 778.409,684.599 778.968,684.599 779.527,684.599 780.086,684.599 780.646,684.599 781.205,684.599 781.764,684.599 782.323,684.599 782.883,684.599 783.442,684.599 784.001,684.599 784.56,684.599 785.12,684.599 785.679,684.599 786.238,684.599 786.797,684.599 787.357,684.599 787.916,684.599 788.475,684.599 789.034,684.599 789.594,684.599 790.153,684.599 790.712,684.599 791.271,684.599 791.831,684.599 792.39,684.599 792.949,684.599 793.508,684.599 794.068,684.599 794.627,684.599 795.186,684.599 795.745,684.599 796.305,684.599 796.864,684.599 797.423,684.599 797.982,684.599 798.542,684.599 799.101,684.599 799.66,684.599 800.219,684.599 800.779,684.599 801.338,684.599 801.897,684.599 802.456,684.599 803.016,684.599 803.575,684.599 804.134,684.599 804.693,684.599 805.253,684.599 805.812,684.599 806.371,684.599 806.931,684.599 807.49,684.599 808.049,684.599 808.608,684.599 809.168,684.599 809.727,684.599 810.286,684.599 810.845,684.599 811.405,684.599 811.964,684.599 812.523,684.599 813.082,684.599 813.642,684.599 814.201,684.599 814.76,684.599 815.319,684.599 815.879,684.599 816.438,684.599 816.997,684.599 817.556,684.599 818.116,684.599 818.675,684.599 819.234,684.599 819.793,684.599 820.353,684.599 820.912,684.599 821.471,684.599 822.03,684.599 822.59,684.599 823.149,684.599 823.708,684.599 824.267,684.599 824.827,684.599 825.386,684.599 825.945,684.599 826.504,684.599 827.064,684.599 827.623,684.599 828.182,684.599 828.741,684.599 829.301,684.599 829.86,684.599 830.419,684.599 830.978,684.599 831.538,684.599 832.097,684.599 832.656,684.599 833.215,684.599 833.775,684.599 834.334,684.599 834.893,684.599 835.452,684.599 836.012,684.599 836.571,684.599 837.13,684.599 837.689,684.599 838.249,684.599 838.808,684.599 839.367,684.599 839.926,684.599 840.486,684.599 841.045,684.599 841.604,684.599 842.163,684.599 842.723,684.599 843.282,684.599 843.841,684.599 844.4,684.599 844.96,684.599 845.519,684.599 846.078,684.599 846.637,684.599 847.197,684.599 847.756,684.599 848.315,684.599 848.874,684.599 849.434,684.599 849.993,684.599 850.552,684.599 851.111,684.599 851.671,684.599 852.23,684.599 852.789,684.599 853.348,684.599 853.908,684.599 854.467,684.599 855.026,684.599 855.585,684.599 856.145,684.599 856.704,684.599 857.263,684.599 857.822,684.599 858.382,684.599 858.941,684.599 859.5,684.599 860.059,684.599 860.619,684.599 861.178,684.599 861.737,684.599 862.296,684.599 862.856,684.599 863.415,684.599 863.974,684.599 864.533,684.599 865.093,684.599 865.652,684.599 866.211,684.599 866.77,684.599 867.33,684.599 867.889,684.599 868.448,684.599 869.007,684.599 869.567,684.599 870.126,684.599 870.685,684.599 871.244,684.599 871.804,684.599 872.363,684.599 872.922,684.599 873.481,684.599 874.041,684.599 874.6,684.599 875.159,684.599 875.718,684.599 876.278,684.599 876.837,684.599 877.396,684.599 877.955,684.599 878.515,684.599 879.074,684.599 879.633,684.599 880.192,684.599 880.752,684.599 881.311,684.599 881.87,684.599 882.429,684.599 882.989,684.599 883.548,684.599 884.107,684.599 884.666,684.599 885.226,684.599 885.785,684.599 886.344,684.599 886.903,684.599 887.463,684.599 888.022,684.599 888.581,684.599 889.14,684.599 889.7,684.599 890.259,684.599 890.818,684.599 891.377,684.599 891.937,684.599 892.496,684.599 893.055,684.599 893.614,684.599 894.174,684.599 894.733,684.599 895.292,684.599 895.851,684.599 896.411,684.599 896.97,684.599 897.529,684.599 898.088,684.599 898.648,684.599 899.207,684.599 899.766,684.599 900.325,684.599 900.885,684.599 901.444,684.599 902.003,684.599 902.562,684.599 903.122,684.599 903.681,684.599 904.24,684.599 904.799,684.599 905.359,684.599 905.918,684.599 906.477,684.599 907.036,684.599 907.596,684.599 908.155,684.599 908.714,684.599 909.273,684.599 909.833,684.599 910.392,684.599 910.951,684.599 911.51,684.599 912.07,684.599 912.629,684.599 913.188,684.599 913.747,684.599 914.307,684.599 914.866,684.599 915.425,684.599 915.984,684.599 916.544,684.599 917.103,684.599 917.662,684.599 918.221,684.599 918.781,684.599 919.34,684.599 919.899,684.599 920.458,684.599 921.018,684.599 921.577,684.599 922.136,684.599 922.695,684.599 923.255,684.599 923.814,684.599 924.373,684.599 924.932,684.599 925.492,684.599 926.051,684.599 926.61,684.599 927.169,684.599 927.729,684.599 928.288,684.599 928.847,684.599 929.406,684.599 929.966,684.599 930.525,684.599 931.084,684.599 931.644,684.599 932.203,684.599 932.762,684.599 933.321,684.599 933.881,684.599 934.44,684.599 934.999,684.599 935.558,684.599 936.118,684.599 936.677,684.599 937.236,684.599 937.795,684.599 938.355,684.599 938.914,684.599 939.473,684.599 940.032,684.599 940.592,684.599 941.151,684.599 941.71,684.599 942.269,684.599 942.829,684.599 943.388,684.599 943.947,684.599 944.506,684.599 945.066,684.599 945.625,684.599 946.184,684.599 946.743,684.599 947.303,684.599 947.862,684.599 948.421,684.599 948.98,684.599 949.54,684.599 950.099,684.599 950.658,684.599 951.217,684.599 951.777,684.599 952.336,684.599 952.895,684.599 953.454,684.599 954.014,684.599 954.573,684.599 955.132,684.599 955.691,684.599 956.251,684.599 956.81,684.599 957.369,684.599 957.928,684.599 958.488,684.599 959.047,684.599 959.606,684.599 960.165,684.599 960.725,684.599 961.284,684.599 961.843,684.599 962.402,684.599 962.962,684.599 963.521,684.599 964.08,684.599 964.639,684.599 965.199,684.599 965.758,684.599 966.317,684.599 966.876,684.599 967.436,684.599 967.995,684.599 968.554,684.599 969.113,684.599 969.673,684.599 970.232,684.599 970.791,684.599 971.35,684.599 971.91,684.599 972.469,684.599 973.028,684.599 973.587,684.599 974.147,684.599 974.706,684.599 975.265,684.599 975.824,684.599 976.384,684.599 976.943,684.599 977.502,684.599 978.061,684.599 978.621,684.599 979.18,684.599 979.739,684.599 980.298,684.599 980.858,684.599 981.417,684.599 981.976,684.599 982.535,684.599 983.095,684.599 983.654,684.599 984.213,684.599 984.772,684.599 985.332,684.599 985.891,684.599 986.45,684.599 987.009,684.599 987.569,684.599 988.128,684.599 988.687,684.599 989.246,684.599 989.806,684.599 990.365,684.599 990.924,684.599 991.483,684.599 992.043,684.599 992.602,684.599 993.161,684.599 993.72,684.599 994.28,684.599 994.839,684.599 995.398,684.599 995.957,684.599 996.517,684.599 997.076,684.599 997.635,684.599 998.194,684.599 998.754,684.599 999.313,684.599 999.872,684.599 1000.43,684.599 1000.99,684.599 1001.55,684.599 1002.11,684.599 1002.67,684.599 1003.23,684.599 1003.79,684.599 1004.35,684.599 1004.91,684.599 1005.46,684.599 1006.02,684.599 1006.58,684.599 1007.14,684.599 1007.7,684.599 1008.26,684.599 1008.82,684.599 1009.38,684.599 1009.94,684.599 1010.5,684.599 1011.06,684.599 1011.62,684.599 1012.18,684.599 1012.73,684.599 1013.29,684.599 1013.85,684.599 1014.41,684.599 1014.97,684.599 1015.53,684.599 1016.09,684.599 1016.65,684.599 1017.21,684.599 1017.77,684.599 1018.33,684.599 1018.89,684.599 1019.45,684.599 1020.01,684.599 1020.56,684.599 1021.12,684.599 1021.68,684.599 1022.24,684.599 1022.8,684.599 1023.36,684.599 1023.92,684.599 1024.48,684.599 1025.04,684.599 1025.6,684.599 1026.16,684.599 1026.72,684.599 1027.28,684.599 1027.83,684.599 1028.39,684.599 1028.95,684.599 1029.51,684.599 1030.07,684.599 1030.63,684.599 1031.19,684.599 1031.75,684.599 1032.31,684.599 1032.87,684.599 1033.43,684.599 1033.99,684.599 1034.55,684.599 1035.1,684.599 1035.66,684.599 1036.22,684.599 1036.78,684.599 1037.34,684.599 1037.9,684.599 1038.46,684.599 1039.02,684.599 1039.58,684.599 1040.14,684.599 1040.7,684.599 1041.26,684.599 1041.82,684.599 1042.38,684.599 1042.93,684.599 1043.49,684.599 1044.05,684.599 1044.61,684.599 1045.17,684.599 1045.73,684.599 1046.29,684.599 1046.85,684.599 1047.41,684.599 1047.97,684.599 1048.53,684.599 1049.09,684.599 1049.65,684.599 1050.2,684.599 1050.76,684.599 1051.32,684.599 1051.88,684.599 1052.44,684.599 1053,684.599 1053.56,684.599 1054.12,684.599 1054.68,684.599 1055.24,684.599 1055.8,684.599 1056.36,684.599 1056.92,684.599 1057.48,684.599 1058.03,684.599 1058.59,684.599 1059.15,684.599 1059.71,684.599 1060.27,684.599 1060.83,684.599 1061.39,684.599 1061.95,684.599 1062.51,684.599 1063.07,684.599 1063.63,684.599 1064.19,684.599 1064.75,684.599 1065.3,684.599 1065.86,684.599 1066.42,684.599 1066.98,684.599 1067.54,684.599 1068.1,684.599 1068.66,684.599 1069.22,684.599 1069.78,684.599 1070.34,684.599 1070.9,684.599 1071.46,684.599 1072.02,684.599 1072.57,684.599 1073.13,684.599 1073.69,684.599 1074.25,684.599 1074.81,684.599 1075.37,684.599 1075.93,684.599 1076.49,684.599 1077.05,684.599 1077.61,684.599 1078.17,684.599 1078.73,684.599 1079.29,684.599 1079.85,684.599 1080.4,684.599 1080.96,684.599 1081.52,684.599 1082.08,684.599 1082.64,684.599 1083.2,684.599 1083.76,684.599 1084.32,684.599 1084.88,684.599 1085.44,684.599 1086,684.599 1086.56,684.599 1087.12,684.599 1087.67,684.599 1088.23,684.599 1088.79,684.599 1089.35,684.599 1089.91,684.599 1090.47,684.599 1091.03,684.599 1091.59,684.599 1092.15,684.599 1092.71,684.599 1093.27,684.599 1093.83,684.599 1094.39,684.599 1094.94,684.599 1095.5,684.599 1096.06,684.599 1096.62,684.599 1097.18,684.599 1097.74,684.599 1098.3,684.599 1098.86,684.599 1099.42,684.599 1099.98,684.599 1100.54,684.599 1101.1,684.599 1101.66,684.599 1102.22,684.599 1102.77,684.599 1103.33,684.599 1103.89,684.599 1104.45,684.599 1105.01,684.599 1105.57,684.599 1106.13,684.599 1106.69,684.599 1107.25,684.599 1107.81,684.599 1108.37,684.599 1108.93,684.599 1109.49,684.599 1110.04,684.599 1110.6,684.599 1111.16,684.599 1111.72,684.599 1112.28,684.599 1112.84,684.599 1113.4,684.599 1113.96,684.599 1114.52,684.599 1115.08,684.599 1115.64,684.599 1116.2,684.599 1116.76,684.599 1117.31,684.599 1117.87,684.599 1118.43,684.599 1118.99,684.599 1119.55,684.599 1120.11,684.599 1120.67,684.599 1121.23,684.599 1121.79,684.599 1122.35,684.599 1122.91,684.599 1123.47,684.599 1124.03,684.599 1124.59,684.599 1125.14,684.599 1125.7,684.599 1126.26,684.599 1126.82,684.599 1127.38,684.599 1127.94,684.599 1128.5,684.599 1129.06,684.599 1129.62,684.599 1130.18,684.599 1130.74,684.599 1131.3,684.599 1131.86,684.599 1132.41,684.599 1132.97,684.599 1133.53,684.599 1134.09,684.599 1134.65,684.599 1135.21,684.599 1135.77,684.599 1136.33,684.599 1136.89,684.599 1137.45,684.599 1138.01,684.599 1138.57,684.599 1139.13,684.599 1139.68,684.599 1140.24,684.599 1140.8,684.599 1141.36,684.599 1141.92,684.599 1142.48,684.599 1143.04,684.599 1143.6,684.599 1144.16,684.599 1144.72,684.599 1145.28,684.599 1145.84,684.599 1146.4,684.599 1146.96,684.599 1147.51,684.599 1148.07,684.599 1148.63,684.599 1149.19,684.599 1149.75,684.599 1150.31,684.599 1150.87,684.599 1151.43,684.599 1151.99,684.599 1152.55,684.599 1153.11,684.599 1153.67,684.599 1154.23,684.599 1154.78,684.599 1155.34,684.599 1155.9,684.599 1156.46,684.599 1157.02,684.599 1157.58,684.599 1158.14,684.599 1158.7,684.599 1159.26,684.599 1159.82,684.599 1160.38,684.599 1160.94,684.599 1161.5,684.599 1162.05,684.599 1162.61,684.599 1163.17,684.599 1163.73,684.599 1164.29,684.599 1164.85,684.599 1165.41,684.599 1165.97,684.599 1166.53,684.599 1167.09,684.599 1167.65,684.599 1168.21,684.599 1168.77,684.599 1169.33,684.599 1169.88,684.599 1170.44,684.599 1171,684.599 1171.56,684.599 1172.12,684.599 1172.68,684.599 1173.24,684.599 1173.8,684.599 1174.36,684.599 1174.92,684.599 1175.48,684.599 1176.04,684.599 1176.6,684.599 1177.15,684.599 1177.71,684.599 1178.27,684.599 1178.83,684.599 1179.39,684.599 1179.95,684.599 1180.51,684.599 1181.07,684.599 1181.63,684.599 1182.19,684.599 1182.75,684.599 1183.31,684.599 1183.87,684.599 1184.43,684.599 1184.98,684.599 1185.54,684.599 1186.1,684.599 1186.66,684.599 1187.22,684.599 1187.78,684.599 1188.34,684.599 1188.9,684.599 1189.46,684.599 1190.02,684.599 1190.58,684.599 1191.14,684.599 1191.7,684.599 1192.25,684.599 1192.81,684.599 1193.37,684.599 1193.93,684.599 1194.49,684.599 1195.05,684.599 1195.61,684.599 1196.17,684.599 1196.73,684.599 1197.29,684.599 1197.85,684.599 1198.41,684.599 1198.97,684.599 1199.52,684.599 1200.08,684.599 1200.64,684.599 1201.2,684.599 1201.76,684.599 1202.32,684.599 1202.88,684.599 1203.44,684.599 1204,684.599 1204.56,684.599 1205.12,684.599 1205.68,684.599 1206.24,684.599 1206.8,684.599 1207.35,684.599 1207.91,684.599 1208.47,684.599 1209.03,684.599 1209.59,684.599 1210.15,684.599 1210.71,684.599 1211.27,684.599 1211.83,684.599 1212.39,684.599 1212.95,684.599 1213.51,684.599 1214.07,684.599 1214.62,684.599 1215.18,684.599 1215.74,684.599 1216.3,684.599 1216.86,684.599 1217.42,684.599 1217.98,684.599 1218.54,684.599 1219.1,684.599 1219.66,684.599 1220.22,684.599 1220.78,684.599 1221.34,684.599 1221.89,684.599 1222.45,684.599 1223.01,684.599 1223.57,684.599 1224.13,684.599 1224.69,684.599 1225.25,684.599 1225.81,684.599 1226.37,684.599 1226.93,684.599 1227.49,684.599 1228.05,684.599 1228.61,684.599 1229.17,684.599 1229.72,684.599 1230.28,684.599 1230.84,684.599 1231.4,684.599 1231.96,684.599 1232.52,684.599 1233.08,684.599 1233.64,684.599 1234.2,684.599 1234.76,684.599 1235.32,684.599 1235.88,684.599 1236.44,684.599 1236.99,684.599 1237.55,684.599 1238.11,684.599 1238.67,684.599 1239.23,684.599 1239.79,684.599 1240.35,684.599 1240.91,684.599 1241.47,684.599 1242.03,684.599 1242.59,684.599 1243.15,684.599 1243.71,684.599 1244.26,684.599 1244.82,684.599 1245.38,684.599 1245.94,684.599 1246.5,684.599 1247.06,684.599 1247.62,684.599 1248.18,684.599 1248.74,684.599 1249.3,684.599 1249.86,684.599 1250.42,684.599 1250.98,684.599 1251.54,684.599 1252.09,684.599 1252.65,684.599 1253.21,684.599 1253.77,684.599 1254.33,684.599 1254.89,684.599 1255.45,684.599 1256.01,684.599 1256.57,684.599 1257.13,684.599 1257.69,684.599 1258.25,684.599 1258.81,684.599 1259.36,684.599 1259.92,684.599 1260.48,684.599 1261.04,684.599 1261.6,684.599 1262.16,684.599 1262.72,684.599 1263.28,684.599 1263.84,684.599 1264.4,684.599 1264.96,684.599 1265.52,684.599 1266.08,684.599 1266.63,684.599 1267.19,684.599 1267.75,684.599 1268.31,684.599 1268.87,684.599 1269.43,684.599 1269.99,684.599 1270.55,684.599 1271.11,684.599 1271.67,684.599 1272.23,684.599 1272.79,684.599 1273.35,684.599 1273.91,684.599 1274.46,684.599 1275.02,684.599 1275.58,684.599 1276.14,684.599 1276.7,684.599 1277.26,684.599 1277.82,684.599 1278.38,684.599 1278.94,684.599 1279.5,684.599 1280.06,684.599 1280.62,684.599 1281.18,684.599 1281.73,684.599 1282.29,684.599 1282.85,684.599 1283.41,684.599 1283.97,684.599 1284.53,684.599 1285.09,684.599 1285.65,684.599 1286.21,684.599 1286.77,684.599 1287.33,684.599 1287.89,684.599 1288.45,684.599 1289,684.599 1289.56,684.599 1290.12,684.599 1290.68,684.599 1291.24,684.599 1291.8,684.599 1292.36,684.599 1292.92,684.599 1293.48,684.599 1294.04,684.599 1294.6,684.599 1295.16,684.599 1295.72,684.599 1296.28,684.599 1296.83,684.599 1297.39,684.599 1297.95,684.599 1298.51,684.599 1299.07,684.599 1299.63,684.599 1300.19,684.599 1300.75,684.599 1301.31,684.599 1301.87,684.599 1302.43,684.599 1302.99,684.599 1303.55,684.599 1304.1,684.599 1304.66,684.599 1305.22,684.599 1305.78,684.599 1306.34,684.599 1306.9,684.599 1307.46,684.599 1308.02,684.599 1308.58,684.599 1309.14,684.599 1309.7,684.599 1310.26,684.599 1310.82,684.599 1311.38,684.599 1311.93,684.599 1312.49,684.599 1313.05,684.599 1313.61,684.599 1314.17,684.599 1314.73,684.599 1315.29,684.599 1315.85,684.599 1316.41,684.599 1316.97,684.599 1317.53,684.599 1318.09,684.599 1318.65,684.599 1319.2,684.599 1319.76,684.599 1320.32,684.599 1320.88,684.599 1321.44,684.599 1322,684.599 1322.56,684.599 1323.12,684.599 1323.68,684.599 1324.24,684.599 1324.8,684.599 1325.36,684.599 1325.92,684.599 1326.47,684.599 1327.03,684.599 1327.59,684.599 1328.15,684.599 1328.71,684.599 1329.27,684.599 1329.83,684.599 1330.39,684.599 1330.95,684.599 1331.51,684.599 1332.07,684.599 1332.63,684.599 1333.19,684.599 1333.75,684.599 1334.3,684.599 1334.86,684.599 1335.42,684.599 1335.98,684.599 1336.54,684.599 1337.1,684.599 1337.66,684.599 1338.22,684.599 1338.78,684.599 1339.34,684.599 1339.9,684.599 1340.46,684.599 1341.02,684.599 1341.57,684.599 1342.13,684.599 1342.69,684.599 1343.25,684.599 1343.81,684.599 1344.37,684.599 1344.93,684.599 1345.49,684.599 1346.05,684.599 1346.61,684.599 1347.17,684.599 1347.73,684.599 1348.29,684.599 1348.84,684.599 1349.4,684.599 1349.96,684.599 1350.52,684.599 1351.08,684.599 1351.64,684.599 1352.2,684.599 1352.76,684.599 1353.32,684.599 1353.88,684.599 1354.44,684.599 1355,684.599 1355.56,684.599 1356.12,684.599 1356.67,684.599 1357.23,684.599 1357.79,684.599 1358.35,684.599 1358.91,684.599 1359.47,684.599 1360.03,684.599 1360.59,684.599 1361.15,684.599 1361.71,684.599 1362.27,684.599 1362.83,684.599 1363.39,684.599 1363.94,684.599 1364.5,684.599 1365.06,684.599 1365.62,684.599 1366.18,684.599 1366.74,684.599 1367.3,684.599 1367.86,684.599 1368.42,684.599 1368.98,684.599 1369.54,684.599 1370.1,684.599 1370.66,684.599 1371.21,684.599 1371.77,684.599 1372.33,684.599 1372.89,684.599 1373.45,684.599 1374.01,684.599 1374.57,684.599 1375.13,684.599 1375.69,684.599 1376.25,684.599 1376.81,684.599 1377.37,684.599 1377.93,684.599 1378.49,684.599 1379.04,684.599 1379.6,684.599 1380.16,684.599 1380.72,684.599 1381.28,684.599 1381.84,684.599 1382.4,684.599 1382.96,684.599 1383.52,684.599 1384.08,684.599 1384.64,684.599 1385.2,684.599 1385.76,684.599 1386.31,684.599 1386.87,684.599 1387.43,684.599 1387.99,684.599 1388.55,684.599 1389.11,684.599 1389.67,684.599 1390.23,684.599 1390.79,684.599 1391.35,684.599 1391.91,684.599 1392.47,684.599 1393.03,684.599 1393.58,684.599 1394.14,684.599 1394.7,684.599 1395.26,684.599 1395.82,684.599 1396.38,684.599 1396.94,684.599 1397.5,684.599 1398.06,684.599 1398.62,684.599 1399.18,684.599 1399.74,684.599 1400.3,684.599 1400.86,684.599 1401.41,684.599 1401.97,684.599 1402.53,684.599 1403.09,684.599 1403.65,684.599 1404.21,684.599 1404.77,684.599 1405.33,684.599 1405.89,684.599 1406.45,684.599 1407.01,684.599 1407.57,684.599 1408.13,684.599 1408.68,684.599 1409.24,684.599 1409.8,684.599 1410.36,684.599 1410.92,684.599 1411.48,684.599 1412.04,684.599 1412.6,684.599 1413.16,684.599 1413.72,684.599 1414.28,684.599 1414.84,684.599 1415.4,684.599 1415.95,684.599 1416.51,684.599 1417.07,684.599 1417.63,684.599 1418.19,684.599 1418.75,684.599 1419.31,684.599 1419.87,684.599 1420.43,684.599 1420.99,684.599 1421.55,684.599 1422.11,684.599 1422.67,684.599 1423.23,684.599 1423.78,684.599 1424.34,684.599 1424.9,684.599 1425.46,684.599 1426.02,684.599 1426.58,684.599 1427.14,684.599 1427.7,684.599 1428.26,684.599 1428.82,684.599 1429.38,684.599 1429.94,684.599 1430.5,684.599 1431.05,684.599 1431.61,684.599 1432.17,684.599 1432.73,684.599 1433.29,684.599 1433.85,684.599 1434.41,684.599 1434.97,684.599 1435.53,684.599 1436.09,684.599 1436.65,684.599 1437.21,684.599 1437.77,684.599 1438.33,684.599 1438.88,684.599 1439.44,684.599 1440,684.599 1440.56,684.599 1441.12,684.599 1441.68,684.599 1442.24,684.599 1442.8,684.599 1443.36,684.599 1443.92,684.599 1444.48,684.599 1445.04,684.599 1445.6,684.599 1446.15,684.599 1446.71,684.599 1447.27,684.599 1447.83,684.599 1448.39,684.599 1448.95,684.599 1449.51,684.599 1450.07,684.599 1450.63,684.599 1451.19,684.599 1451.75,684.599 1452.31,684.599 1452.87,684.599 1453.42,684.599 1453.98,684.599 1454.54,684.599 1455.1,684.599 1455.66,684.599 1456.22,684.599 1456.78,684.599 1457.34,684.599 1457.9,684.599 1458.46,684.599 1459.02,684.599 1459.58,684.599 1460.14,684.599 1460.7,684.599 1461.25,684.599 1461.81,684.599 1462.37,684.599 1462.93,684.599 1463.49,684.599 1464.05,684.599 1464.61,684.599 1465.17,684.599 1465.73,684.599 1466.29,684.599 1466.85,684.599 1467.41,684.599 1467.97,684.599 1468.52,684.599 1469.08,684.599 1469.64,684.599 1470.2,684.599 1470.76,684.599 1471.32,684.599 1471.88,684.599 1472.44,684.599 1473,684.599 1473.56,684.599 1474.12,684.599 1474.68,684.599 1475.24,684.599 1475.79,684.599 1476.35,684.599 1476.91,684.599 1477.47,684.599 1478.03,684.599 1478.59,684.599 1479.15,684.599 1479.71,684.599 1480.27,684.599 1480.83,684.599 1481.39,684.599 1481.95,684.599 1482.51,684.599 1483.07,684.599 1483.62,684.599 1484.18,684.599 1484.74,684.599 1485.3,684.599 1485.86,684.599 1486.42,684.599 1486.98,684.599 1487.54,684.599 1488.1,684.599 1488.66,684.599 1489.22,684.599 1489.78,684.599 1490.34,684.599 1490.89,684.599 1491.45,684.599 1492.01,684.599 1492.57,684.599 1493.13,684.599 1493.69,684.599 1494.25,684.599 1494.81,684.599 1495.37,684.599 1495.93,684.599 1496.49,684.599 1497.05,684.599 1497.61,684.599 1498.16,684.599 1498.72,684.599 1499.28,684.599 1499.84,684.599 1500.4,684.599 1500.96,684.599 1501.52,684.599 1502.08,684.599 1502.64,684.599 1503.2,684.599 1503.76,684.599 1504.32,684.599 1504.88,684.599 1505.44,684.599 1505.99,684.599 1506.55,684.599 1507.11,684.599 1507.67,684.599 1508.23,684.599 1508.79,684.599 1509.35,684.599 1509.91,684.599 1510.47,684.599 1511.03,684.599 1511.59,684.599 1512.15,684.599 1512.71,684.599 1513.26,684.599 1513.82,684.599 1514.38,684.599 1514.94,684.599 1515.5,684.599 1516.06,684.599 1516.62,684.599 1517.18,684.599 1517.74,684.599 1518.3,684.599 1518.86,684.599 1519.42,684.599 1519.98,684.599 1520.53,684.599 1521.09,684.599 1521.65,684.599 1522.21,684.599 1522.77,684.599 1523.33,684.599 1523.89,684.599 1524.45,684.599 1525.01,684.599 1525.57,684.599 1526.13,684.599 1526.69,684.599 1527.25,684.599 1527.81,684.599 1528.36,684.599 1528.92,684.599 1529.48,684.599 1530.04,684.599 1530.6,684.599 1531.16,684.599 1531.72,684.599 1532.28,684.599 1532.84,684.599 1533.4,684.599 1533.96,684.599 1534.52,684.599 1535.08,684.599 1535.63,684.599 1536.19,684.599 1536.75,684.599 1537.31,684.599 1537.87,684.599 1538.43,684.599 1538.99,684.599 1539.55,684.599 1540.11,684.599 1540.67,684.599 1541.23,684.599 1541.79,684.599 1542.35,684.599 1542.9,684.599 1543.46,684.599 1544.02,684.599 1544.58,684.599 1545.14,684.599 1545.7,684.599 1546.26,684.599 1546.82,684.599 1547.38,684.599 1547.94,684.599 1548.5,684.599 1549.06,684.599 1549.62,684.599 1550.18,684.599 1550.73,684.599 1551.29,684.599 1551.85,684.599 1552.41,684.599 1552.97,684.599 1553.53,684.599 1554.09,684.599 1554.65,684.599 1555.21,684.599 1555.77,684.599 1556.33,684.599 1556.89,684.599 1557.45,684.599 1558,684.599 1558.56,684.599 1559.12,684.599 1559.68,684.599 1560.24,684.599 1560.8,684.599 1561.36,684.599 1561.92,684.599 1562.48,684.599 1563.04,684.599 1563.6,684.599 1564.16,684.599 1564.72,684.599 1565.28,684.599 1565.83,684.599 1566.39,684.599 1566.95,684.599 1567.51,684.599 1568.07,684.599 1568.63,684.599 1569.19,684.599 1569.75,684.599 1570.31,684.599 1570.87,684.599 1571.43,684.599 1571.99,684.599 1572.55,684.599 1573.1,684.599 1573.66,684.599 1574.22,684.599 1574.78,684.599 1575.34,684.599 1575.9,684.599 1576.46,684.599 1577.02,684.599 1577.58,684.599 1578.14,684.599 1578.7,684.599 1579.26,684.599 1579.82,684.599 1580.37,684.599 1580.93,684.599 1581.49,684.599 1582.05,684.599 1582.61,684.599 1583.17,684.599 1583.73,684.599 1584.29,684.599 1584.85,684.599 1585.41,684.599 1585.97,684.599 1586.53,684.599 1587.09,684.599 1587.65,684.599 1588.2,684.599 1588.76,684.599 1589.32,684.599 1589.88,684.599 1590.44,684.599 1591,684.599 1591.56,684.599 1592.12,684.599 1592.68,684.599 1593.24,684.599 1593.8,684.599 1594.36,684.599 1594.92,684.599 1595.47,684.599 1596.03,684.599 1596.59,684.599 1597.15,684.599 1597.71,684.599 1598.27,684.599 1598.83,684.599 1599.39,684.599 1599.95,684.599 1600.51,684.599 1601.07,684.599 1601.63,684.599 1602.19,684.599 1602.74,684.599 1603.3,684.599 1603.86,684.599 1604.42,684.599 1604.98,684.599 1605.54,684.599 1606.1,684.599 1606.66,684.599 1607.22,684.599 1607.78,684.599 1608.34,684.599 1608.9,684.599 1609.46,684.599 1610.02,684.599 1610.57,684.599 1611.13,684.599 1611.69,684.599 1612.25,684.599 1612.81,684.599 1613.37,684.599 1613.93,684.599 1614.49,684.599 1615.05,684.599 1615.61,684.599 1616.17,684.599 1616.73,684.599 1617.29,684.599 1617.84,684.599 1618.4,684.599 1618.96,684.599 1619.52,684.599 1620.08,684.599 1620.64,684.599 1621.2,684.599 1621.76,684.599 1622.32,684.599 1622.88,684.599 1623.44,684.599 1624,684.599 1624.56,684.599 1625.11,684.599 1625.67,684.599 1626.23,684.599 1626.79,684.599 1627.35,684.599 1627.91,684.599 1628.47,684.599 1629.03,684.599 1629.59,684.599 1630.15,684.599 1630.71,684.599 1631.27,684.599 1631.83,684.599 1632.39,684.599 1632.94,684.599 1633.5,684.599 1634.06,684.599 1634.62,684.599 1635.18,684.599 1635.74,684.599 1636.3,684.599 1636.86,684.599 1637.42,684.599 1637.98,684.599 1638.54,684.599 1639.1,684.599 1639.66,684.599 1640.21,684.599 1640.77,684.599 1641.33,684.599 1641.89,684.599 1642.45,684.599 1643.01,684.599 1643.57,684.599 1644.13,684.599 1644.69,684.599 1645.25,684.599 1645.81,684.599 1646.37,684.599 1646.93,684.599 1647.48,684.599 1648.04,684.599 1648.6,684.599 1649.16,684.599 1649.72,684.599 1650.28,684.599 1650.84,684.599 1651.4,684.599 1651.96,684.599 1652.52,684.599 1653.08,684.599 1653.64,684.599 1654.2,684.599 1654.76,684.599 1655.31,684.599 1655.87,684.599 1656.43,684.599 1656.99,684.599 1657.55,684.599 1658.11,684.599 1658.67,684.599 1659.23,684.599 1659.79,684.599 1660.35,684.599 1660.91,684.599 1661.47,684.599 1662.03,684.599 1662.58,684.599 1663.14,684.599 1663.7,684.599 1664.26,684.599 1664.82,684.599 1665.38,684.599 1665.94,684.599 1666.5,684.599 1667.06,684.599 1667.62,684.599 1668.18,684.599 1668.74,684.599 1669.3,684.599 1669.85,684.599 1670.41,684.599 1670.97,684.599 1671.53,684.599 1672.09,684.599 1672.65,684.599 1673.21,684.599 1673.77,684.599 1674.33,684.599 1674.89,684.599 1675.45,684.599 1676.01,684.599 1676.57,684.599 1677.13,684.599 1677.68,684.599 1678.24,684.599 1678.8,684.599 1679.36,684.599 1679.92,684.599 1680.48,684.599 1681.04,684.599 1681.6,684.599 1682.16,684.599 1682.72,684.599 1683.28,684.599 1683.84,684.599 1684.4,684.599 1684.95,684.599 1685.51,684.599 1686.07,684.599 1686.63,684.599 1687.19,684.599 1687.75,684.599 1688.31,684.599 1688.87,684.599 1689.43,684.599 1689.99,684.599 1690.55,684.599 1691.11,684.599 1691.67,684.599 1692.23,684.599 1692.78,684.599 1693.34,684.599 1693.9,684.599 1694.46,684.599 1695.02,684.599 1695.58,684.599 1696.14,684.599 1696.7,684.599 1697.26,684.599 1697.82,684.599 1698.38,684.599 1698.94,684.599 1699.5,684.599 1700.05,684.599 1700.61,684.599 1701.17,684.599 1701.73,684.599 1702.29,684.599 1702.85,684.599 1703.41,684.599 1703.97,684.599 1704.53,684.599 1705.09,684.599 1705.65,684.599 1706.21,684.599 1706.77,684.599 1707.32,684.599 1707.88,684.599 1708.44,684.599 1709,684.599 1709.56,684.599 1710.12,684.599 1710.68,684.599 1711.24,684.599 1711.8,684.599 1712.36,684.599 1712.92,684.599 1713.48,684.599 1714.04,684.599 1714.6,684.599 1715.15,684.599 1715.71,684.599 1716.27,684.599 1716.83,684.599 1717.39,684.599 1717.95,684.599 1718.51,684.599 1719.07,684.599 1719.63,684.599 1720.19,684.599 1720.75,684.599 1721.31,684.599 1721.87,684.599 1722.42,684.599 1722.98,684.599 1723.54,684.599 1724.1,684.599 1724.66,684.599 1725.22,684.599 1725.78,684.599 1726.34,684.599 1726.9,684.599 1727.46,684.599 1728.02,684.599 1728.58,684.599 1729.14,684.599 1729.69,684.599 1730.25,684.599 1730.81,684.599 1731.37,684.599 1731.93,684.599 1732.49,684.599 1733.05,684.599 1733.61,684.599 1734.17,684.599 1734.73,684.599 1735.29,684.599 1735.85,684.599 1736.41,684.599 1736.97,684.599 1737.52,684.599 1738.08,684.599 1738.64,684.599 1739.2,684.599 1739.76,684.599 1740.32,684.599 1740.88,684.599 1741.44,684.599 1742,684.599 1742.56,684.599 1743.12,684.599 1743.68,684.599 1744.24,684.599 1744.79,684.599 1745.35,684.599 1745.91,684.599 1746.47,684.599 1747.03,684.599 1747.59,684.599 1748.15,684.599 1748.71,684.599 1749.27,684.599 1749.83,684.599 1750.39,684.599 1750.95,684.599 1751.51,684.599 1752.06,684.599 1752.62,684.599 1753.18,684.599 1753.74,684.599 1754.3,684.599 1754.86,684.599 1755.42,684.599 1755.98,684.599 1756.54,684.599 1757.1,684.599 1757.66,684.599 1758.22,684.599 1758.78,684.599 1759.34,684.599 1759.89,684.599 1760.45,684.599 1761.01,684.599 1761.57,684.599 1762.13,684.599 1762.69,684.599 1763.25,684.599 1763.81,684.599 1764.37,684.599 1764.93,684.599 1765.49,684.599 1766.05,684.599 1766.61,684.599 1767.16,684.599 1767.72,684.599 1768.28,684.599 1768.84,684.599 1769.4,684.599 1769.96,684.599 1770.52,684.599 1771.08,684.599 1771.64,684.599 1772.2,684.599 1772.76,684.599 1773.32,684.599 1773.88,684.599 1774.43,684.599 1774.99,684.599 1775.55,684.599 1776.11,684.599 1776.67,684.599 1777.23,684.599 1777.79,684.599 1778.35,684.599 1778.91,684.599 1779.47,684.599 1780.03,684.599 1780.59,684.599 1781.15,684.599 1781.71,684.599 1782.26,684.599 1782.82,684.599 1783.38,684.599 1783.94,684.599 1784.5,684.599 1785.06,684.599 1785.62,684.599 1786.18,684.599 1786.74,684.599 1787.3,684.599 1787.86,684.599 1788.42,684.599 1788.98,684.599 1789.53,684.599 1790.09,684.599 1790.65,684.599 1791.21,684.599 1791.77,684.599 1792.33,684.599 1792.89,684.599 1793.45,684.599 1794.01,684.599 1794.57,684.599 1795.13,684.599 1795.69,684.599 1796.25,684.599 1796.8,684.599 1797.36,684.599 1797.92,684.599 1798.48,684.599 1799.04,684.599 1799.6,684.599 1800.16,684.599 1800.72,684.599 1801.28,684.599 1801.84,684.599 1802.4,684.599 1802.96,684.599 1803.52,684.599 1804.08,684.599 1804.63,684.599 1805.19,684.599 1805.75,684.599 1806.31,684.599 1806.87,684.599 1807.43,684.599 1807.99,684.599 1808.55,684.599 1809.11,684.599 1809.67,684.599 1810.23,684.599 1810.79,684.599 1811.35,684.599 1811.9,684.599 1812.46,684.599 1813.02,684.599 1813.58,684.599 1814.14,684.599 1814.7,684.599 1815.26,684.599 1815.82,684.599 1816.38,684.599 1816.94,684.599 1817.5,684.599 1818.06,684.599 1818.62,684.599 1819.18,684.599 1819.73,684.599 1820.29,684.599 1820.85,684.599 1821.41,684.599 1821.97,684.599 1822.53,684.599 1823.09,684.599 1823.65,684.599 1824.21,684.599 1824.77,684.599 1825.33,684.599 1825.89,684.599 1826.45,684.599 1827,684.599 1827.56,684.599 1828.12,684.599 1828.68,684.599 1829.24,684.599 1829.8,684.599 1830.36,684.599 1830.92,684.599 1831.48,684.599 1832.04,684.599 1832.6,684.599 1833.16,684.599 1833.72,684.599 1834.27,684.599 1834.83,684.599 1835.39,684.599 1835.95,684.599 1836.51,684.599 1837.07,684.599 1837.63,684.599 1838.19,684.599 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.032404850561628 ± 0.017800907108331817\nProjected Energy: -4.020191896247896 ± (0.004958036583706971, 0.005255164625949327)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.557786</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4397e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.7643e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.0559e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.393e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.996e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.929e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321637\n -3.363124291613353\n -0.7590191922770888\n  0.13584182219620722\n  0.15789998694608798\n  0.8767114411781378\n  1.5305929970973384\n  1.5835732611867401\n  3.0728703303258715\n  3.1256726539518374\n  4.862107221562174\n  6.260694850380592\n  6.402671211183112\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AdaptiveTimeStep","page":"API","title":"Rimu.AdaptiveTimeStep","text":"AdaptiveTimeStep(; damp_zombies=0.9, grow=1.01) <: TimeStepStrategy\n\nAdapt the time step to avoid zombies.\n\nParameters\n\ndamp_zombies: factor by which to decrease the time step for each zombie.\ngrow: factor by which to increase the time step when there are no zombies.\n\nSee also TimeStepStrategy, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep() <: TimeStepStrategy\n\nKeep the time_step constant.\n\nSee also TimeStepStrategy, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters, update_shift_parameters!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 12)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nboost = 1.0: Boost factor for the spawning process.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\nAdaptiveTimeStep\n\nSee also FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(\n    s::ShiftStrategy, shift, norm, time_step, boost=1.0, counter=0, shift_mode=false\n) -> DefaultShiftParameters\n\nInitialise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    new_time_step,\n    tnorm,\n    single_state,\n    step\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, deaths, clones, zombies, tnorm, len)\n-> new_time_step\n\nUpdate the time step according to the strategy s.\n\nSee also TimeStepStrategy.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v::AbstractDVec)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces, AbstractDVec.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem. The names should be unique and not contain spaces or special characters.\n\nFor a StochasticStyle, the first three stats are the number of clones, deaths, and zombies.\n\nSee also StochasticStyle, CompressionStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
