var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 12)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21595979719122613 ± 0.0016582842721159475\n   G2(1) = 0.9152077158870704 ± 0.0007226938618594068\n   G2(2) = 0.9819958405802915 ± 0.0006560364805764353\n   G2(3) = 0.9896330898740495 ± 0.001028313280678795\n   G2(4) = 0.9819958405802915 ± 0.0006560364805764353\n   G2(5) = 0.9152077158870704 ± 0.0007226938618594068\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.039460543170932 ± 0.14878658602127737\n   Replica 2: -4.030802901320717 ± 0.13403129629902583\n   Replica 3: -3.960345139825027 ± 0.1617397419277165\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip370\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip370)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip371\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip370)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip372\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.26 2211.02,1003.26 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.69 2211.02,745.69 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.119 2211.02,488.119 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.548 2211.02,230.548 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.26 423.181,1003.26 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.69 423.181,745.69 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.119 423.181,488.119 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.548 423.181,230.548 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.87 Q363.608 1253.74 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.53 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.87 Q344.395 1252.12 347.45 1247.53 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M290.043 1016.61 L306.363 1016.61 L306.363 1020.54 L284.418 1020.54 L284.418 1016.61 Q287.08 1013.85 291.664 1009.22 Q296.27 1004.57 297.451 1003.23 Q299.696 1000.7 300.576 998.967 Q301.478 997.207 301.478 995.518 Q301.478 992.763 299.534 991.027 Q297.613 989.291 294.511 989.291 Q292.312 989.291 289.858 990.055 Q287.427 990.819 284.65 992.369 L284.65 987.647 Q287.474 986.513 289.927 985.934 Q292.381 985.356 294.418 985.356 Q299.789 985.356 302.983 988.041 Q306.177 990.726 306.177 995.217 Q306.177 997.346 305.367 999.268 Q304.58 1001.17 302.474 1003.76 Q301.895 1004.43 298.793 1007.65 Q295.691 1010.84 290.043 1016.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M316.224 985.981 L334.58 985.981 L334.58 989.916 L320.506 989.916 L320.506 998.388 Q321.524 998.041 322.543 997.879 Q323.562 997.694 324.58 997.694 Q330.367 997.694 333.747 1000.86 Q337.126 1004.04 337.126 1009.45 Q337.126 1015.03 333.654 1018.13 Q330.182 1021.21 323.862 1021.21 Q321.687 1021.21 319.418 1020.84 Q317.173 1020.47 314.765 1019.73 L314.765 1015.03 Q316.849 1016.17 319.071 1016.72 Q321.293 1017.28 323.77 1017.28 Q327.774 1017.28 330.112 1015.17 Q332.45 1013.06 332.45 1009.45 Q332.45 1005.84 330.112 1003.74 Q327.774 1001.63 323.77 1001.63 Q321.895 1001.63 320.02 1002.05 Q318.168 1002.46 316.224 1003.34 L316.224 985.981 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M356.339 989.059 Q352.728 989.059 350.899 992.624 Q349.094 996.166 349.094 1003.3 Q349.094 1010.4 350.899 1013.97 Q352.728 1017.51 356.339 1017.51 Q359.973 1017.51 361.779 1013.97 Q363.608 1010.4 363.608 1003.3 Q363.608 996.166 361.779 992.624 Q359.973 989.059 356.339 989.059 M356.339 985.356 Q362.149 985.356 365.205 989.962 Q368.284 994.545 368.284 1003.3 Q368.284 1012.02 365.205 1016.63 Q362.149 1021.21 356.339 1021.21 Q350.529 1021.21 347.45 1016.63 Q344.395 1012.02 344.395 1003.3 Q344.395 994.545 347.45 989.962 Q350.529 985.356 356.339 985.356 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M286.062 728.41 L304.418 728.41 L304.418 732.345 L290.344 732.345 L290.344 740.817 Q291.363 740.47 292.381 740.308 Q293.4 740.123 294.418 740.123 Q300.205 740.123 303.585 743.294 Q306.964 746.465 306.964 751.882 Q306.964 757.461 303.492 760.562 Q300.02 763.641 293.701 763.641 Q291.525 763.641 289.256 763.271 Q287.011 762.9 284.603 762.16 L284.603 757.461 Q286.687 758.595 288.909 759.15 Q291.131 759.706 293.608 759.706 Q297.613 759.706 299.951 757.6 Q302.288 755.493 302.288 751.882 Q302.288 748.271 299.951 746.164 Q297.613 744.058 293.608 744.058 Q291.733 744.058 289.858 744.475 Q288.006 744.891 286.062 745.771 L286.062 728.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M326.177 731.489 Q322.566 731.489 320.737 735.053 Q318.932 738.595 318.932 745.725 Q318.932 752.831 320.737 756.396 Q322.566 759.937 326.177 759.937 Q329.811 759.937 331.617 756.396 Q333.446 752.831 333.446 745.725 Q333.446 738.595 331.617 735.053 Q329.811 731.489 326.177 731.489 M326.177 727.785 Q331.987 727.785 335.043 732.391 Q338.122 736.975 338.122 745.725 Q338.122 754.451 335.043 759.058 Q331.987 763.641 326.177 763.641 Q320.367 763.641 317.288 759.058 Q314.233 754.451 314.233 745.725 Q314.233 736.975 317.288 732.391 Q320.367 727.785 326.177 727.785 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M356.339 731.489 Q352.728 731.489 350.899 735.053 Q349.094 738.595 349.094 745.725 Q349.094 752.831 350.899 756.396 Q352.728 759.937 356.339 759.937 Q359.973 759.937 361.779 756.396 Q363.608 752.831 363.608 745.725 Q363.608 738.595 361.779 735.053 Q359.973 731.489 356.339 731.489 M356.339 727.785 Q362.149 727.785 365.205 732.391 Q368.284 736.975 368.284 745.725 Q368.284 754.451 365.205 759.058 Q362.149 763.641 356.339 763.641 Q350.529 763.641 347.45 759.058 Q344.395 754.451 344.395 745.725 Q344.395 736.975 347.45 732.391 Q350.529 727.785 356.339 727.785 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M284.835 470.839 L307.057 470.839 L307.057 472.83 L294.511 505.399 L289.627 505.399 L301.432 474.774 L284.835 474.774 L284.835 470.839 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M316.224 470.839 L334.58 470.839 L334.58 474.774 L320.506 474.774 L320.506 483.246 Q321.524 482.899 322.543 482.737 Q323.562 482.552 324.58 482.552 Q330.367 482.552 333.747 485.723 Q337.126 488.895 337.126 494.311 Q337.126 499.89 333.654 502.992 Q330.182 506.07 323.862 506.07 Q321.687 506.07 319.418 505.7 Q317.173 505.33 314.765 504.589 L314.765 499.89 Q316.849 501.024 319.071 501.58 Q321.293 502.135 323.77 502.135 Q327.774 502.135 330.112 500.029 Q332.45 497.922 332.45 494.311 Q332.45 490.7 330.112 488.594 Q327.774 486.487 323.77 486.487 Q321.895 486.487 320.02 486.904 Q318.168 487.321 316.224 488.2 L316.224 470.839 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M356.339 473.918 Q352.728 473.918 350.899 477.483 Q349.094 481.024 349.094 488.154 Q349.094 495.26 350.899 498.825 Q352.728 502.367 356.339 502.367 Q359.973 502.367 361.779 498.825 Q363.608 495.26 363.608 488.154 Q363.608 481.024 361.779 477.483 Q359.973 473.918 356.339 473.918 M356.339 470.214 Q362.149 470.214 365.205 474.821 Q368.284 479.404 368.284 488.154 Q368.284 496.881 365.205 501.487 Q362.149 506.07 356.339 506.07 Q350.529 506.07 347.45 501.487 Q344.395 496.881 344.395 488.154 Q344.395 479.404 347.45 474.821 Q350.529 470.214 356.339 470.214 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M256.664 243.893 L264.303 243.893 L264.303 217.528 L255.992 219.194 L255.992 214.935 L264.256 213.268 L268.932 213.268 L268.932 243.893 L276.571 243.893 L276.571 247.828 L256.664 247.828 L256.664 243.893 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M296.015 216.347 Q292.404 216.347 290.576 219.912 Q288.77 223.453 288.77 230.583 Q288.77 237.69 290.576 241.254 Q292.404 244.796 296.015 244.796 Q299.65 244.796 301.455 241.254 Q303.284 237.69 303.284 230.583 Q303.284 223.453 301.455 219.912 Q299.65 216.347 296.015 216.347 M296.015 212.643 Q301.826 212.643 304.881 217.25 Q307.96 221.833 307.96 230.583 Q307.96 239.31 304.881 243.916 Q301.826 248.5 296.015 248.5 Q290.205 248.5 287.127 243.916 Q284.071 239.31 284.071 230.583 Q284.071 221.833 287.127 217.25 Q290.205 212.643 296.015 212.643 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M326.177 216.347 Q322.566 216.347 320.737 219.912 Q318.932 223.453 318.932 230.583 Q318.932 237.69 320.737 241.254 Q322.566 244.796 326.177 244.796 Q329.811 244.796 331.617 241.254 Q333.446 237.69 333.446 230.583 Q333.446 223.453 331.617 219.912 Q329.811 216.347 326.177 216.347 M326.177 212.643 Q331.987 212.643 335.043 217.25 Q338.122 221.833 338.122 230.583 Q338.122 239.31 335.043 243.916 Q331.987 248.5 326.177 248.5 Q320.367 248.5 317.288 243.916 Q314.233 239.31 314.233 230.583 Q314.233 221.833 317.288 217.25 Q320.367 212.643 326.177 212.643 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M356.339 216.347 Q352.728 216.347 350.899 219.912 Q349.094 223.453 349.094 230.583 Q349.094 237.69 350.899 241.254 Q352.728 244.796 356.339 244.796 Q359.973 244.796 361.779 241.254 Q363.608 237.69 363.608 230.583 Q363.608 223.453 361.779 219.912 Q359.973 216.347 356.339 216.347 M356.339 212.643 Q362.149 212.643 365.205 217.25 Q368.284 221.833 368.284 230.583 Q368.284 239.31 365.205 243.916 Q362.149 248.5 356.339 248.5 Q350.529 248.5 347.45 243.916 Q344.395 239.31 344.395 230.583 Q344.395 221.833 347.45 217.25 Q350.529 212.643 356.339 212.643 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip372)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.548 4017.76,230.548 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1247.55 459.964,1245.99 460.533,1245.47 461.101,1244.85 461.669,1244.13 462.238,1242.32 462.806,1241.49 463.375,1240.51 463.943,1239.49 464.511,1237.34 465.08,1236.11 465.648,1234.79 466.216,1233.32 466.785,1231.77 467.353,1230.08 467.921,1228.25 468.49,1225.27 469.058,1221.14 469.626,1217.88 470.195,1214.48 470.763,1212.01 471.331,1209.34 471.9,1205.44 472.468,1201.41 473.036,1197.26 473.605,1192.97 474.173,1189.4 474.741,1185.66 475.31,1179.6 475.878,1175.36 476.446,1170.97 477.015,1165.32 477.583,1159.45 478.152,1153.22 478.72,1147.87 479.288,1141.24 479.857,1135.43 480.425,1128.42 480.993,1122.21 481.562,1115.81 482.13,1109.11 482.698,1101.19 483.267,1092.02 483.835,1082.77 484.403,1074.58 484.972,1066.13 485.54,1058.59 486.108,1049.7 486.677,1040.85 487.245,1031.74 487.813,1022.57 488.382,1011.16 488.95,1001.75 489.518,991.301 490.087,978.567 490.655,969.058 491.224,958.524 491.792,949.813 492.36,940.97 492.929,930 493.497,919.022 494.065,909.097 494.634,898.067 495.202,887.056 495.77,875.977 496.339,867.111 496.907,853.905 497.475,845.093 498.044,835.123 498.612,826.113 499.18,816.181 499.749,805.979 500.317,792.809 500.885,780.746 501.454,771.012 502.022,761.17 502.59,751.343 503.159,741.574 503.727,731.893 504.295,721.307 504.864,709.432 505.432,700.088 506.001,688.73 506.569,679.644 507.137,667.679 507.706,658.031 508.274,650.498 508.842,641.707 509.411,628.805 509.979,620.661 510.547,612.469 511.116,603.417 511.684,594.408 512.252,586.663 512.821,580.014 513.389,572.524 513.957,564.906 514.526,556.367 515.094,549.087 515.662,542.859 516.231,534.719 516.799,528.718 517.367,521.933 517.936,513.228 518.504,505.619 519.072,499.178 519.641,494.851 520.209,488.785 520.778,481.591 521.346,476.608 521.914,471.675 522.483,466.663 523.051,460.868 523.619,452.068 524.188,445.559 524.756,441.214 525.324,436.903 525.893,433.68 526.461,428.35 527.029,423.275 527.598,418.495 528.166,413.564 528.734,407.665 529.303,402.749 529.871,397.391 530.439,392.836 531.008,387.619 531.576,384.3 532.144,379.235 532.713,373.234 533.281,370.581 533.85,365.846 534.418,365.366 534.986,362.763 535.555,360.361 536.123,355.67 536.691,352.378 537.26,350.252 537.828,347.019 538.396,344.677 538.965,342.44 539.533,339.182 540.101,337.11 540.67,335.124 541.238,333.12 541.806,328.942 542.375,329.389 542.943,328.424 543.511,327.513 544.08,325.397 544.648,323.587 545.216,319.506 545.785,317.537 546.353,314.599 546.921,311.935 547.49,307.325 548.058,302.852 548.627,301.768 549.195,300.506 549.763,295.395 550.332,293.33 550.9,291.45 551.468,289.806 552.037,288.252 552.605,288.935 553.173,289.417 553.742,288.587 554.31,285.865 554.878,283.361 555.447,280.864 556.015,280.53 556.583,279.118 557.152,276.795 557.72,276.764 558.288,275.663 558.857,276.41 559.425,276.108 559.993,275.626 560.562,272.83 561.13,273.462 561.698,272.815 562.267,273.382 562.835,272.926 563.404,272.494 563.972,272.187 564.54,271.614 565.109,269.02 565.677,266.584 566.245,267.49 566.814,266.976 567.382,265.455 567.95,266.256 568.519,262.711 569.087,262.469 569.655,256.975 570.224,256.989 570.792,258.323 571.36,258.352 571.929,258.278 572.497,255.429 573.065,254.461 573.634,252.455 574.202,248.729 574.77,250.099 575.339,251.448 575.907,253.692 576.476,253.748 577.044,252.967 577.612,255.166 578.181,254.185 578.749,255.435 579.317,254.115 579.886,251.98 580.454,250.973 581.022,250.959 581.591,250.914 582.159,248.917 582.727,247.197 583.296,245.463 583.864,245.183 584.432,245.744 585.001,245.056 585.569,248.571 586.137,250.972 586.706,251.881 587.274,253.643 587.842,255.715 588.411,254.154 588.979,250.855 589.547,248.763 590.116,247.836 590.684,248.983 591.253,247.704 591.821,245.796 592.389,245.948 592.958,246.037 593.526,245.111 594.094,244.557 594.663,243.734 595.231,245.107 595.799,247.441 596.368,246.456 596.936,247.377 597.504,246.278 598.073,246.332 598.641,245.45 599.209,246.646 599.778,246.469 600.346,247.52 600.914,246.229 601.483,244.273 602.051,244.218 602.619,244.325 603.188,243.354 603.756,242.269 604.325,242.314 604.893,242.193 605.461,240.278 606.03,240.539 606.598,239.931 607.166,241.428 607.735,242.67 608.303,244.892 608.871,244.824 609.44,243.935 610.008,243.817 610.576,240.62 611.145,241.886 611.713,243.045 612.281,244.199 612.85,244.093 613.418,241.773 613.986,241.725 614.555,240.607 615.123,240.694 615.691,243.632 616.26,241.492 616.828,239.598 617.396,236.585 617.965,234.909 618.533,235.529 619.102,235.945 619.67,237.444 620.238,238.739 620.807,238.932 621.375,238.965 621.943,239.24 622.512,239.485 623.08,240.63 623.648,241.805 624.217,241.454 624.785,241.278 625.353,240.185 625.922,241.024 626.49,245.104 627.058,243.451 627.627,241.998 628.195,242.893 628.763,238.317 629.332,239.35 629.9,239.339 630.468,239.477 631.037,241.514 631.605,240.234 632.173,238.162 632.742,235.195 633.31,235.566 633.879,235.949 634.447,237.138 635.015,236.233 635.584,235.342 636.152,234.597 636.72,235.954 637.289,234.064 637.857,234.267 638.425,235.441 638.994,236.527 639.562,232.36 640.13,230.465 640.699,231.932 641.267,233.567 641.835,230.743 642.404,231.036 642.972,232.483 643.54,233.985 644.109,234.378 644.677,234.493 645.245,233.961 645.814,233.296 646.382,232.683 646.951,232.057 647.519,230.733 648.087,232.23 648.656,231.618 649.224,233.146 649.792,232.472 650.361,233.961 650.929,233.466 651.497,232.846 652.066,232.105 652.634,231.564 653.202,233.087 653.771,233.606 654.339,233.831 654.907,234.292 655.476,235.672 656.044,236.916 656.612,235.958 657.181,238.027 657.749,239.135 658.317,240.102 658.886,237.837 659.454,240.969 660.022,239.492 660.591,239.244 661.159,240.2 661.728,238.847 662.296,240.955 662.864,240.773 663.433,240.606 664.001,241.491 664.569,242.153 665.138,240.596 665.706,240.44 666.274,241.242 666.843,240.605 667.411,240.39 667.979,238.917 668.548,237.565 669.116,239.423 669.684,240.015 670.253,239.579 670.821,240.4 671.389,240.191 671.958,239.792 672.526,238.489 673.094,237.334 673.663,234.887 674.231,232.891 674.799,230.862 675.368,230.047 675.936,230.407 676.505,228.795 677.073,230.324 677.641,229.489 678.21,229.838 678.778,230.199 679.346,230.636 679.915,230.231 680.483,228.404 681.051,229.991 681.62,230.414 682.188,229.838 682.756,231.425 683.325,231.739 683.893,231.984 684.461,231.415 685.03,230.864 685.598,230.98 686.166,233.208 686.735,233.35 687.303,232.724 687.871,233.905 688.44,233.939 689.008,233.02 689.577,234.33 690.145,233.345 690.713,233.602 691.282,234.821 691.85,232.741 692.418,230.802 692.987,230.066 693.555,230.542 694.123,232.945 694.692,235.069 695.26,233.144 695.828,232.329 696.397,233.654 696.965,234.829 697.533,236.115 698.102,235.164 698.67,236.149 699.238,235.137 699.807,233.186 700.375,232.515 700.943,231.772 701.512,232.094 702.08,232.516 702.648,231.708 703.217,231.974 703.785,232.177 704.354,231.488 704.922,233.027 705.49,233.196 706.059,233.427 706.627,234.514 707.195,237.06 707.764,240.925 708.332,239.519 708.9,237.129 709.469,238.17 710.037,235.839 710.605,234.543 711.174,234.434 711.742,233.429 712.31,232.483 712.879,231.814 713.447,229.906 714.015,230.264 714.584,230.475 715.152,228.744 715.72,228.071 716.289,226.558 716.857,227.113 717.425,229.41 717.994,229.614 718.562,232.265 719.131,233.487 719.699,232.695 720.267,232.976 720.836,232.132 721.404,232.63 721.972,233.585 722.541,235.656 723.109,237.501 723.677,237.154 724.246,235.874 724.814,236.678 725.382,237.483 725.951,235.224 726.519,235.202 727.087,236.045 727.656,233.978 728.224,233.964 728.792,237.274 729.361,238.267 729.929,237.951 730.497,238.681 731.066,239.294 731.634,238.861 732.203,237.387 732.771,234.77 733.339,235.845 733.908,235.49 734.476,236.31 735.044,235.033 735.613,234.829 736.181,235.757 736.749,237.709 737.318,236.44 737.886,235.258 738.454,234.941 739.023,235.644 739.591,234.368 740.159,230.982 740.728,232.073 741.296,230.013 741.864,228.158 742.433,227.419 743.001,229.924 743.569,229.86 744.138,230.996 744.706,232.379 745.274,232.49 745.843,232.317 746.411,230.444 746.98,230.816 747.548,230.833 748.116,229.793 748.685,229.965 749.253,230.042 749.821,228.928 750.39,227.264 750.958,226.757 751.526,228.471 752.095,227.799 752.663,228.283 753.231,228.764 753.8,230.072 754.368,230.366 754.936,229.652 755.505,231.025 756.073,233.165 756.641,235.161 757.21,235.032 757.778,235.008 758.346,234.82 758.915,233.749 759.483,234.721 760.052,234.589 760.62,232.381 761.188,231.477 761.757,231.425 762.325,230.591 762.893,229.734 763.462,230.922 764.03,232.954 764.598,234.214 765.167,233.104 765.735,228.904 766.303,228.997 766.872,228.103 767.44,228.396 768.008,228.534 768.577,228.722 769.145,229.923 769.713,230.369 770.282,232.509 770.85,232.32 771.418,232.286 771.987,234.467 772.555,233.395 773.123,233.627 773.692,235.819 774.26,235.417 774.829,235.064 775.397,232.74 775.965,233.865 776.534,230.532 777.102,233.633 777.67,236.432 778.239,235.239 778.807,234.118 779.375,233.79 779.944,234.656 780.512,233.319 781.08,234.117 781.649,232.058 782.217,232.172 782.785,234.298 783.354,235.438 783.922,235.174 784.49,234.025 785.059,234.926 785.627,233.897 786.195,231.666 786.764,232.856 787.332,232.819 787.9,232.873 788.469,233.754 789.037,234.763 789.606,235.547 790.174,234.481 790.742,232.298 791.311,233.512 791.879,233.467 792.447,230.031 793.016,228.951 793.584,230.041 794.152,230.16 794.721,232.444 795.289,232.513 795.857,233.476 796.426,232.399 796.994,232.096 797.562,230.112 798.131,229.115 798.699,227.257 799.267,228.289 799.836,229.739 800.404,229.845 800.972,232.248 801.541,232.313 802.109,231.341 802.678,232.322 803.246,229.209 803.814,230.308 804.383,230.204 804.951,230.006 805.519,229.862 806.088,232.986 806.656,235.035 807.224,236.923 807.793,234.573 808.361,235.379 808.929,232.094 809.498,233.133 810.066,235.145 810.634,231.914 811.203,230.912 811.771,230.988 812.339,229.86 812.908,232.915 813.476,234.967 814.044,234.823 814.613,235.505 815.181,236.296 815.749,237.879 816.318,237.333 816.886,235.821 817.455,233.48 818.023,233.435 818.591,231.129 819.16,231.14 819.728,230.216 820.296,231.404 820.865,231.441 821.433,230.414 822.001,232.494 822.57,232.289 823.138,230.202 823.706,229.116 824.275,229.264 824.843,227.996 825.411,230.372 825.98,229.424 826.548,228.504 827.116,226.689 827.685,227.967 828.253,227.304 828.821,226.371 829.39,227.649 829.958,227.079 830.526,229.481 831.095,229.705 831.663,230.821 832.232,230.826 832.8,230.91 833.368,230.947 833.937,232.959 834.505,232.915 835.073,233.83 835.642,233.579 836.21,233.269 836.778,235.158 837.347,233.962 837.915,233.799 838.483,232.602 839.052,230.453 839.62,231.545 840.188,231.731 840.757,232.884 841.325,232.684 841.893,231.701 842.462,232.404 843.03,231.151 843.598,231.146 844.167,230.242 844.735,229.316 845.304,229.499 845.872,231.518 846.44,230.553 847.009,230.455 847.577,230.4 848.145,228.335 848.714,227.569 849.282,228.747 849.85,231.049 850.419,231.089 850.987,231.227 851.555,232.263 852.124,234.084 852.692,234.005 853.26,233.71 853.829,235.472 854.397,235.212 854.965,234.946 855.534,233.767 856.102,233.458 856.67,232.045 857.239,229.703 857.807,231.681 858.375,230.759 858.944,228.805 859.512,228.864 860.081,232.1 860.649,233.197 861.217,233.039 861.786,231.808 862.354,232.49 862.922,233.479 863.491,233.204 864.059,233.061 864.627,231.905 865.196,230.684 865.764,228.686 866.332,228.688 866.901,228.797 867.469,228.903 868.037,229.041 868.606,229.003 869.174,229.195 869.742,229.329 870.311,230.375 870.879,230.404 871.447,230.524 872.016,230.447 872.584,228.353 873.152,229.543 873.721,229.615 874.289,228.517 874.858,226.744 875.426,226.132 875.994,225.561 876.563,225.942 877.131,228.483 877.699,229.829 878.268,228.772 878.836,227.855 879.404,228.139 879.973,228.514 880.541,227.896 881.109,227.904 881.678,228.106 882.246,228.444 882.814,227.856 883.383,226.344 883.951,226.804 884.519,226.218 885.088,226.472 885.656,226.945 886.224,228.251 886.793,226.547 887.361,226.786 887.93,228.063 888.498,228.5 889.066,229.767 889.635,230.899 890.203,232.071 890.771,232.079 891.34,231.173 891.908,231.182 892.476,230.496 893.045,230.552 893.613,230.621 894.181,230.819 894.75,232.005 895.318,231.887 895.886,231.915 896.455,232.943 897.023,234.868 897.591,233.531 898.16,232.464 898.728,234.427 899.296,234.178 899.865,232.888 900.433,233.775 901.001,233.839 901.57,236.689 902.138,235.207 902.707,235.002 903.275,232.757 903.843,233.581 904.412,233.506 904.98,233.366 905.548,235.18 906.117,233.986 906.685,233.708 907.253,233.359 907.822,232.927 908.39,232.582 908.958,234.645 909.527,235.396 910.095,234.221 910.663,233.803 911.232,232.454 911.8,234.347 912.368,234.051 912.937,233.808 913.505,232.592 914.073,231.279 914.642,231.238 915.21,231.175 915.779,232.137 916.347,230.964 916.915,228.961 917.484,228.212 918.052,227.311 918.62,228.473 919.189,228.713 919.757,230.747 920.325,230.621 920.894,229.622 921.462,229.828 922.03,232.96 922.599,233.654 923.167,232.304 923.735,232.102 924.304,231.079 924.872,230.167 925.44,228.186 926.009,228.501 926.577,229.558 927.145,228.857 927.714,228.768 928.282,227.975 928.85,228.051 929.419,228.236 929.987,229.56 930.556,229.56 931.124,229.579 931.692,231.68 932.261,233.82 932.829,233.832 933.397,233.572 933.966,237.523 934.534,237.894 935.102,237.241 935.671,235.882 936.239,235.555 936.807,234.076 937.376,233.853 937.944,232.495 938.512,231.394 939.081,231.142 939.649,231.095 940.217,232.208 940.786,231.93 941.354,229.702 941.922,230.791 942.491,230.676 943.059,231.636 943.627,230.418 944.196,229.154 944.764,228.307 945.333,227.218 945.901,227.386 946.469,227.681 947.038,225.914 947.606,226.387 948.174,226.739 948.743,227.107 949.311,226.369 949.879,225.737 950.448,226.231 951.016,226.423 951.584,228.659 952.153,229.821 952.721,229.006 953.289,231.374 953.858,231.314 954.426,231.444 954.994,233.447 955.563,234.395 956.131,233.112 956.699,228.907 957.268,227.787 957.836,227.968 958.405,227.476 958.973,225.753 959.541,225.158 960.11,223.783 960.678,226.293 961.246,223.622 961.815,225.293 962.383,227.734 962.951,225.831 963.52,227.339 964.088,225.541 964.656,224.742 965.225,227.477 965.793,229.803 966.361,228.942 966.93,231.311 967.498,230.482 968.066,230.75 968.635,231.767 969.203,230.781 969.771,231.943 970.34,230.838 970.908,228.736 971.476,231.041 972.045,230.03 972.613,230.096 973.182,232.154 973.75,232.292 974.318,230.904 974.887,233.103 975.455,235.957 976.023,236.582 976.592,236.032 977.16,232.614 977.728,230.556 978.297,231.574 978.865,230.722 979.433,229.763 980.002,227.744 980.57,227.88 981.138,229.073 981.707,231.33 982.275,226.964 982.843,228.482 983.412,228.687 983.98,226.98 984.548,227.341 985.117,225.484 985.685,227.93 986.253,227.07 986.822,228.245 987.39,229.639 987.959,227.595 988.527,228.822 989.095,226.954 989.664,227.198 990.232,228.605 990.8,230.041 991.369,232.42 991.937,231.532 992.505,233.573 993.074,231.507 993.642,231.426 994.21,231.603 994.779,230.511 995.347,231.746 995.915,230.798 996.484,232.282 997.052,233.346 997.62,234.228 998.189,236.261 998.757,238.092 999.325,238.712 999.894,238.26 1000.46,236.754 1001.03,235.22 1001.6,233.916 1002.17,234.941 1002.74,235.604 1003.3,235.313 1003.87,232.053 1004.44,235.086 1005.01,234.988 1005.58,234.852 1006.15,233.54 1006.71,232.504 1007.28,229.248 1007.85,226.378 1008.42,227.78 1008.99,227.859 1009.56,227.097 1010.12,224.435 1010.69,227.008 1011.26,226.249 1011.83,227.591 1012.4,228.756 1012.97,231.989 1013.53,231.973 1014.1,230.979 1014.67,232.144 1015.24,232.405 1015.81,231.382 1016.38,231.41 1016.94,233.264 1017.51,231.968 1018.08,230.843 1018.65,229.812 1019.22,229.012 1019.79,232.349 1020.35,235.187 1020.92,235.165 1021.49,240.186 1022.06,241.729 1022.63,242.032 1023.2,241.136 1023.76,241.4 1024.33,241.449 1024.9,239.583 1025.47,237.895 1026.04,235.354 1026.61,232.882 1027.17,231.847 1027.74,230.704 1028.31,229.668 1028.88,229.866 1029.45,226.655 1030.02,229.214 1030.58,228.282 1031.15,226.53 1031.72,226.853 1032.29,228.256 1032.86,227.505 1033.43,227.703 1033.99,226.737 1034.56,226.996 1035.13,226.198 1035.7,227.495 1036.27,227.907 1036.84,232.413 1037.4,233.639 1037.97,232.281 1038.54,231.167 1039.11,233.198 1039.68,233.958 1040.25,236.683 1040.81,236.274 1041.38,237.827 1041.95,236.223 1042.52,236.909 1043.09,237.233 1043.66,236.649 1044.22,238.11 1044.79,239.534 1045.36,237.663 1045.93,235.138 1046.5,235.686 1047.07,232.023 1047.63,230.728 1048.2,231.447 1048.77,232.272 1049.34,230.735 1049.91,229.779 1050.48,228.638 1051.05,229.812 1051.61,228.733 1052.18,226.491 1052.75,225.498 1053.32,230.016 1053.89,231.137 1054.46,231.991 1055.02,229.606 1055.59,227.475 1056.16,229.567 1056.73,229.709 1057.3,228.738 1057.87,228.793 1058.43,229.759 1059,228.579 1059.57,228.707 1060.14,231.001 1060.71,230.018 1061.28,229.841 1061.84,229.91 1062.41,231.96 1062.98,232.747 1063.55,233.738 1064.12,232.333 1064.69,230.912 1065.25,229.559 1065.82,230.445 1066.39,229.392 1066.96,231.632 1067.53,231.722 1068.1,231.291 1068.66,230.412 1069.23,229.603 1069.8,228.48 1070.37,229.895 1070.94,228.791 1071.51,226.705 1072.07,226.041 1072.64,226.246 1073.21,226.463 1073.78,225.481 1074.35,225.73 1074.92,223.15 1075.48,224.482 1076.05,228.219 1076.62,229.51 1077.19,230.582 1077.76,228.491 1078.33,228.813 1078.89,227.886 1079.46,229.22 1080.03,228.037 1080.6,227.956 1081.17,228.185 1081.74,228.389 1082.3,229.322 1082.87,228.218 1083.44,227.224 1084.01,226.41 1084.58,227.734 1085.15,227.774 1085.71,228.064 1086.28,228.17 1086.85,229.201 1087.42,229.201 1087.99,230.345 1088.56,230.05 1089.12,232.247 1089.69,232.203 1090.26,231.25 1090.83,231.405 1091.4,230.595 1091.97,230.454 1092.53,229.518 1093.1,229.774 1093.67,227.831 1094.24,224.953 1094.81,225.274 1095.38,225.681 1095.94,226.029 1096.51,226.375 1097.08,224.689 1097.65,226.094 1098.22,225.464 1098.79,225.887 1099.35,226.382 1099.92,226.866 1100.49,226.145 1101.06,228.499 1101.63,227.534 1102.2,225.607 1102.76,227.292 1103.33,229.895 1103.9,231.122 1104.47,233.185 1105.04,233.103 1105.61,230.605 1106.17,228.566 1106.74,229.817 1107.31,231.008 1107.88,231.309 1108.45,232.272 1109.02,232.39 1109.58,230.425 1110.15,229.464 1110.72,229.424 1111.29,229.283 1111.86,229.297 1112.43,229.877 1112.99,230.105 1113.56,230.432 1114.13,230.629 1114.7,231.773 1115.27,230.708 1115.84,230.944 1116.4,231.089 1116.97,231.271 1117.54,234.399 1118.11,235.22 1118.68,234.908 1119.25,234.68 1119.81,235.316 1120.38,234.163 1120.95,235.02 1121.52,234.621 1122.09,234.481 1122.66,233.428 1123.23,232.533 1123.79,234.499 1124.36,235.488 1124.93,236.151 1125.5,236.957 1126.07,237.618 1126.64,237.044 1127.2,236.499 1127.77,236.191 1128.34,235.556 1128.91,235.197 1129.48,234.591 1130.05,233.377 1130.61,233.234 1131.18,234.036 1131.75,232.689 1132.32,232.453 1132.89,232.074 1133.46,233.056 1134.02,233.772 1134.59,232.584 1135.16,230.31 1135.73,231.317 1136.3,232.311 1136.87,232.183 1137.43,233.009 1138,231.963 1138.57,230.918 1139.14,230.678 1139.71,230.804 1140.28,231.956 1140.84,231.802 1141.41,232.746 1141.98,234.583 1142.55,234.382 1143.12,233.058 1143.69,231.852 1144.25,229.651 1144.82,230.464 1145.39,229.476 1145.96,233.614 1146.53,233.429 1147.1,233.037 1147.66,232.64 1148.23,231.291 1148.8,230.135 1149.37,228.963 1149.94,228.965 1150.51,226.936 1151.07,227.032 1151.64,228.34 1152.21,227.374 1152.78,226.37 1153.35,227.846 1153.92,230.022 1154.48,232.153 1155.05,230.929 1155.62,232.813 1156.19,231.495 1156.76,231.306 1157.33,230.251 1157.89,229.977 1158.46,233.117 1159.03,233.002 1159.6,230.689 1160.17,230.466 1160.74,229.261 1161.3,228.231 1161.87,227.351 1162.44,225.429 1163.01,225.542 1163.58,226.112 1164.15,227.493 1164.71,225.703 1165.28,227.106 1165.85,228.51 1166.42,229.52 1166.99,229.654 1167.56,231.798 1168.12,230.625 1168.69,229.574 1169.26,229.642 1169.83,229.706 1170.4,230.899 1170.97,232.022 1171.53,231.898 1172.1,230.812 1172.67,228.692 1173.24,227.839 1173.81,228.22 1174.38,227.412 1174.94,228.66 1175.51,229.67 1176.08,229.728 1176.65,233.823 1177.22,233.332 1177.79,231.043 1178.35,230.84 1178.92,229.629 1179.49,231.647 1180.06,233.667 1180.63,231.524 1181.2,231.389 1181.76,229.319 1182.33,230.457 1182.9,230.704 1183.47,233.982 1184.04,232.729 1184.61,232.511 1185.17,230.109 1185.74,230.144 1186.31,230.356 1186.88,230.19 1187.45,230.141 1188.02,233.428 1188.58,234.323 1189.15,234.256 1189.72,233.91 1190.29,231.73 1190.86,231.61 1191.43,231.405 1192,233.555 1192.56,235.537 1193.13,236.273 1193.7,234.775 1194.27,233.316 1194.84,236.048 1195.41,233.617 1195.97,232.164 1196.54,230.779 1197.11,232.674 1197.68,232.311 1198.25,232.211 1198.82,231.993 1199.38,231.811 1199.95,230.489 1200.52,229.409 1201.09,230.306 1201.66,230.342 1202.23,230.468 1202.79,231.681 1203.36,229.579 1203.93,230.651 1204.5,231.508 1205.07,232.382 1205.64,231.885 1206.2,230.726 1206.77,231.53 1207.34,231.337 1207.91,230.016 1208.48,231.942 1209.05,233.907 1209.61,230.499 1210.18,227.274 1210.75,227.683 1211.32,225.719 1211.89,226.266 1212.46,226.451 1213.02,226.66 1213.59,226.757 1214.16,227.339 1214.73,227.423 1215.3,227.306 1215.87,227.196 1216.43,227.58 1217,227.81 1217.57,228.92 1218.14,230.069 1218.71,227.96 1219.28,226.088 1219.84,226.17 1220.41,226.629 1220.98,227.044 1221.55,227.498 1222.12,226.874 1222.69,226.266 1223.25,225.679 1223.82,225.214 1224.39,224.48 1224.96,225.111 1225.53,224.458 1226.1,225.959 1226.66,225.25 1227.23,225.659 1227.8,224.954 1228.37,226.45 1228.94,227.824 1229.51,230.383 1230.07,230.447 1230.64,230.392 1231.21,229.429 1231.78,229.567 1232.35,229.812 1232.92,230.986 1233.48,229.872 1234.05,230.043 1234.62,230.253 1235.19,231.366 1235.76,231.219 1236.33,231.285 1236.89,230.322 1237.46,231.479 1238.03,230.343 1238.6,229.632 1239.17,230.85 1239.74,229.979 1240.3,228.01 1240.87,229.188 1241.44,228.369 1242.01,230.686 1242.58,233.136 1243.15,233.011 1243.71,235.007 1244.28,233.851 1244.85,234.54 1245.42,236.526 1245.99,233.931 1246.56,233.954 1247.12,233.695 1247.69,233.453 1248.26,232.145 1248.83,230.897 1249.4,229.004 1249.97,229.098 1250.53,231.013 1251.1,231.049 1251.67,232.232 1252.24,232.456 1252.81,232.208 1253.38,232.063 1253.94,230.935 1254.51,233.063 1255.08,231.89 1255.65,232 1256.22,233.295 1256.79,233.04 1257.35,230.843 1257.92,228.885 1258.49,228.944 1259.06,227.046 1259.63,226.267 1260.2,226.412 1260.76,227.569 1261.33,226.636 1261.9,230.164 1262.47,230.174 1263.04,229.306 1263.61,229.551 1264.18,228.74 1264.74,228.878 1265.31,230.847 1265.88,228.907 1266.45,227.257 1267.02,228.66 1267.59,228.779 1268.15,229.836 1268.72,229.86 1269.29,228.904 1269.86,226.231 1270.43,225.465 1271,225.784 1271.56,225.217 1272.13,226.702 1272.7,225.215 1273.27,226.624 1273.84,226.92 1274.41,227.168 1274.97,227.436 1275.54,225.607 1276.11,223.925 1276.68,223.711 1277.25,226.488 1277.82,226.594 1278.38,227.941 1278.95,228.393 1279.52,230.735 1280.09,230.86 1280.66,232.152 1281.23,230.121 1281.79,230.409 1282.36,232.464 1282.93,232.648 1283.5,230.502 1284.07,231.556 1284.64,233.608 1285.2,234.543 1285.77,234.577 1286.34,235.594 1286.91,234.342 1287.48,235.32 1288.05,236.081 1288.61,236.832 1289.18,236.558 1289.75,234.066 1290.32,234.814 1290.89,233.624 1291.46,231.618 1292.02,230.631 1292.59,227.649 1293.16,225.886 1293.73,225.215 1294.3,226.731 1294.87,226.946 1295.43,228.277 1296,225.58 1296.57,227.205 1297.14,226.598 1297.71,230.233 1298.28,229.528 1298.84,229.657 1299.41,232.717 1299.98,231.649 1300.55,231.739 1301.12,232.093 1301.69,233.028 1302.25,230.901 1302.82,232.049 1303.39,232.122 1303.96,232.143 1304.53,229.932 1305.1,231.118 1305.66,230.992 1306.23,231.125 1306.8,229.099 1307.37,230.347 1307.94,230.212 1308.51,230.411 1309.07,231.362 1309.64,233.471 1310.21,232.366 1310.78,231.248 1311.35,232.268 1311.92,233.304 1312.48,232.172 1313.05,234.022 1313.62,233.607 1314.19,233.685 1314.76,232.458 1315.33,231.139 1315.89,230.188 1316.46,230.123 1317.03,229.243 1317.6,231.53 1318.17,231.679 1318.74,233.692 1319.3,237.492 1319.87,238.074 1320.44,238.659 1321.01,239.379 1321.58,236.632 1322.15,237.208 1322.71,238.824 1323.28,239.439 1323.85,235.709 1324.42,235.238 1324.99,232.61 1325.56,232.485 1326.12,232.414 1326.69,232.135 1327.26,230.082 1327.83,230.151 1328.4,229.001 1328.97,231.517 1329.53,230.264 1330.1,230.108 1330.67,230.08 1331.24,229.154 1331.81,227.381 1332.38,227.576 1332.94,228.056 1333.51,229.21 1334.08,230.454 1334.65,232.519 1335.22,231.276 1335.79,230.174 1336.36,232.299 1336.92,233.135 1337.49,233 1338.06,233.717 1338.63,234.724 1339.2,234.423 1339.77,234.145 1340.33,230.604 1340.9,231.788 1341.47,232.794 1342.04,232.476 1342.61,231.212 1343.18,231.142 1343.74,230.177 1344.31,230.173 1344.88,229.181 1345.45,230.343 1346.02,229.403 1346.59,230.325 1347.15,230.536 1347.72,230.572 1348.29,230.36 1348.86,230.375 1349.43,232.361 1350,232.045 1350.56,229.875 1351.13,229.472 1351.7,230.604 1352.27,230.329 1352.84,227.325 1353.41,227.206 1353.97,225.442 1354.54,227.882 1355.11,226.903 1355.68,225.969 1356.25,225.325 1356.82,224.76 1357.38,227.219 1357.95,228.455 1358.52,227.785 1359.09,225.94 1359.66,226.393 1360.23,227.97 1360.79,227.072 1361.36,227.356 1361.93,228.568 1362.5,228.836 1363.07,230.127 1363.64,228.925 1364.2,228.019 1364.77,227.264 1365.34,228.661 1365.91,229.599 1366.48,232.7 1367.05,233.548 1367.61,233.42 1368.18,235.459 1368.75,233.25 1369.32,235.354 1369.89,235.212 1370.46,233.837 1371.02,231.613 1371.59,232.752 1372.16,233.687 1372.73,232.232 1373.3,229.112 1373.87,228.382 1374.43,228.712 1375,229.871 1375.57,229.868 1376.14,229.966 1376.71,228.826 1377.28,227.844 1377.84,228.165 1378.41,228.549 1378.98,230.927 1379.55,230.068 1380.12,231.266 1380.69,234.151 1381.25,233.777 1381.82,233.364 1382.39,233.035 1382.96,232.925 1383.53,231.645 1384.1,229.314 1384.66,229.318 1385.23,228.418 1385.8,228.537 1386.37,229.83 1386.94,229.905 1387.51,228.883 1388.07,232.426 1388.64,234.616 1389.21,237.376 1389.78,236.804 1390.35,236.512 1390.92,234.95 1391.48,232.743 1392.05,232.537 1392.62,232.611 1393.19,231.462 1393.76,233.338 1394.33,232.944 1394.89,232.658 1395.46,233.459 1396.03,233.202 1396.6,231.947 1397.17,232.821 1397.74,233.538 1398.3,233.246 1398.87,233.96 1399.44,234.776 1400.01,233.373 1400.58,234.245 1401.15,233.74 1401.71,234.539 1402.28,234.072 1402.85,233.987 1403.42,232.491 1403.99,230.359 1404.56,231.528 1405.13,230.479 1405.69,230.246 1406.26,230.235 1406.83,230.19 1407.4,229.081 1407.97,229.096 1408.54,229.124 1409.1,229.243 1409.67,232.022 1410.24,230.799 1410.81,232.004 1411.38,232.653 1411.95,233.491 1412.51,233.163 1413.08,232.885 1413.65,232.642 1414.22,231.511 1414.79,231.488 1415.36,232.319 1415.92,233.054 1416.49,233.039 1417.06,229.563 1417.63,230.419 1418.2,230.284 1418.77,230.129 1419.33,231.015 1419.9,227.978 1420.47,228.159 1421.04,226.149 1421.61,226.435 1422.18,227.581 1422.74,227.915 1423.31,229.148 1423.88,230.208 1424.45,231.05 1425.02,232.166 1425.59,233.104 1426.15,231.783 1426.72,232.84 1427.29,233.566 1427.86,234.418 1428.43,229.761 1429,228.771 1429.56,227.644 1430.13,228.874 1430.7,228.7 1431.27,229.794 1431.84,229.551 1432.41,228.643 1432.97,229.855 1433.54,228.948 1434.11,228.808 1434.68,228.921 1435.25,229.013 1435.82,227.965 1436.38,228.219 1436.95,231.36 1437.52,230.217 1438.09,231.382 1438.66,232.36 1439.23,232.055 1439.79,234.055 1440.36,231.708 1440.93,229.549 1441.5,231.525 1442.07,232.346 1442.64,234.119 1443.2,232.84 1443.77,232.583 1444.34,232.621 1444.91,232.529 1445.48,233.219 1446.05,233.884 1446.61,234.472 1447.18,233.957 1447.75,235.783 1448.32,236.338 1448.89,234.842 1449.46,234.232 1450.02,233.627 1450.59,234.392 1451.16,234.981 1451.73,235.591 1452.3,235.225 1452.87,233.625 1453.43,233.089 1454,233.863 1454.57,233.567 1455.14,234.224 1455.71,232.817 1456.28,230.184 1456.84,230.876 1457.41,230.622 1457.98,231.519 1458.55,233.209 1459.12,234.867 1459.69,234.571 1460.25,232.103 1460.82,230.887 1461.39,230.689 1461.96,229.445 1462.53,228.411 1463.1,228.363 1463.66,228.15 1464.23,227.179 1464.8,225.068 1465.37,224.414 1465.94,223.561 1466.51,223.904 1467.07,224.409 1467.64,223.717 1468.21,224.178 1468.78,224.612 1469.35,224.924 1469.92,223.2 1470.48,222.677 1471.05,223.097 1471.62,223.608 1472.19,222.861 1472.76,223.473 1473.33,220.728 1473.89,222.506 1474.46,224.856 1475.03,225.315 1475.6,225.866 1476.17,224.077 1476.74,225.705 1477.31,225.129 1477.87,226.381 1478.44,227.702 1479.01,227.915 1479.58,228.221 1480.15,227.341 1480.72,228.935 1481.28,228.986 1481.85,230.321 1482.42,230.427 1482.99,229.322 1483.56,228.429 1484.13,227.664 1484.69,228.814 1485.26,227.972 1485.83,226.205 1486.4,225.406 1486.97,226.927 1487.54,227.12 1488.1,226.62 1488.67,227.052 1489.24,226.361 1489.81,228.881 1490.38,230.15 1490.95,230.158 1491.51,231.324 1492.08,229.342 1492.65,228.494 1493.22,227.653 1493.79,229.942 1494.36,229.115 1494.92,229.312 1495.49,228.468 1496.06,229.786 1496.63,228.842 1497.2,230.241 1497.77,231.586 1498.33,231.869 1498.9,231.869 1499.47,231.876 1500.04,230.799 1500.61,229.801 1501.18,227.971 1501.74,228.209 1502.31,230.501 1502.88,229.45 1503.45,229.494 1504.02,227.677 1504.59,231.007 1505.15,228.938 1505.72,228.047 1506.29,231.361 1506.86,229.297 1507.43,229.336 1508,230.618 1508.56,231.557 1509.13,231.687 1509.7,231.686 1510.27,229.724 1510.84,225.665 1511.41,226.151 1511.97,226.569 1512.54,228.903 1513.11,229.227 1513.68,230.232 1514.25,230.288 1514.82,231.321 1515.38,228.022 1515.95,228.467 1516.52,227.801 1517.09,226.122 1517.66,225.552 1518.23,225.998 1518.79,227.663 1519.36,230.003 1519.93,228.194 1520.5,229.483 1521.07,228.51 1521.64,232.786 1522.2,232.923 1522.77,233.019 1523.34,231.961 1523.91,229.814 1524.48,228.91 1525.05,229.485 1525.61,228.739 1526.18,227.829 1526.75,230.476 1527.32,232.825 1527.89,231.802 1528.46,232.655 1529.02,231.405 1529.59,230.419 1530.16,230.543 1530.73,231.837 1531.3,232.034 1531.87,232.027 1532.43,233.105 1533,233.11 1533.57,231.868 1534.14,232.789 1534.71,233.811 1535.28,235.795 1535.84,237.653 1536.41,239.241 1536.98,240.649 1537.55,240.034 1538.12,239.281 1538.69,239.729 1539.25,238.024 1539.82,239.629 1540.39,239.996 1540.96,238.449 1541.53,237.906 1542.1,236.577 1542.66,236.232 1543.23,235.767 1543.8,235.405 1544.37,233.9 1544.94,233.646 1545.51,234.314 1546.08,233.804 1546.64,231.625 1547.21,231.395 1547.78,231.173 1548.35,233 1548.92,233.728 1549.49,232.415 1550.05,232.275 1550.62,229.074 1551.19,232.26 1551.76,232.087 1552.33,232.917 1552.9,231.608 1553.46,232.375 1554.03,232.037 1554.6,230.706 1555.17,230.7 1555.74,229.425 1556.31,227.439 1556.87,226.627 1557.44,226.714 1558.01,229.081 1558.58,227.865 1559.15,232.192 1559.72,234.306 1560.28,231.948 1560.85,231.88 1561.42,231.573 1561.99,230.506 1562.56,230.507 1563.13,231.597 1563.69,232.351 1564.26,233.317 1564.83,234.228 1565.4,233.778 1565.97,236.437 1566.54,237.912 1567.1,237.277 1567.67,235.941 1568.24,235.353 1568.81,233.963 1569.38,233.505 1569.95,233.228 1570.51,232.799 1571.08,233.864 1571.65,233.52 1572.22,232.031 1572.79,233.004 1573.36,232.721 1573.92,232.619 1574.49,233.449 1575.06,232.005 1575.63,231.854 1576.2,231.726 1576.77,231.32 1577.33,230.093 1577.9,228.926 1578.47,227.889 1579.04,227.845 1579.61,225.629 1580.18,224.905 1580.74,225.443 1581.31,224.763 1581.88,225.145 1582.45,225.299 1583.02,225.762 1583.59,228.186 1584.15,232.451 1584.72,233.168 1585.29,232.828 1585.86,231.611 1586.43,232.789 1587,231.661 1587.56,230.508 1588.13,232.56 1588.7,231.403 1589.27,229.154 1589.84,229.306 1590.41,230.132 1590.97,230.014 1591.54,230.881 1592.11,228.782 1592.68,226.838 1593.25,226.682 1593.82,227.946 1594.38,228.021 1594.95,228.335 1595.52,228.386 1596.09,227.62 1596.66,228.691 1597.23,228.646 1597.79,228.763 1598.36,227.883 1598.93,228.003 1599.5,227.012 1600.07,227.453 1600.64,227.694 1601.2,228.938 1601.77,229.89 1602.34,228.893 1602.91,228.994 1603.48,227.972 1604.05,227.929 1604.61,225.716 1605.18,226.061 1605.75,227.41 1606.32,226.417 1606.89,227.615 1607.46,227.753 1608.02,227.127 1608.59,226.433 1609.16,226.474 1609.73,225.501 1610.3,224.691 1610.87,226.103 1611.43,226.399 1612,226.498 1612.57,229.94 1613.14,232.05 1613.71,231.089 1614.28,230.147 1614.84,232.381 1615.41,232.122 1615.98,232.92 1616.55,232.809 1617.12,230.365 1617.69,230.183 1618.26,229.353 1618.82,229.531 1619.39,229.604 1619.96,229.753 1620.53,231.906 1621.1,232.802 1621.67,231.747 1622.23,232.562 1622.8,231.266 1623.37,234.296 1623.94,233.037 1624.51,233.83 1625.08,231.629 1625.64,233.599 1626.21,233.245 1626.78,232.877 1627.35,235.7 1627.92,236.307 1628.49,235.93 1629.05,234.478 1629.62,234.264 1630.19,234.089 1630.76,234.57 1631.33,233.273 1631.9,234.177 1632.46,234.001 1633.03,233.789 1633.6,234.58 1634.17,232.085 1634.74,232.952 1635.31,231.727 1635.87,233.584 1636.44,233.437 1637.01,231.899 1637.58,227.578 1638.15,225.786 1638.72,226.244 1639.28,226.429 1639.85,224.625 1640.42,225.124 1640.99,225.499 1641.56,226.759 1642.13,228.075 1642.69,227.142 1643.26,229.343 1643.83,227.374 1644.4,227.549 1644.97,227.901 1645.54,227.998 1646.1,232.408 1646.67,231.364 1647.24,230.349 1647.81,230.133 1648.38,229.171 1648.95,229.243 1649.51,229.44 1650.08,226.556 1650.65,229.083 1651.22,229.056 1651.79,229.319 1652.36,231.625 1652.92,232.444 1653.49,232.287 1654.06,231.045 1654.63,231.082 1655.2,231.097 1655.77,230.951 1656.33,231.839 1656.9,230.85 1657.47,229.709 1658.04,230.724 1658.61,230.585 1659.18,229.596 1659.74,230.598 1660.31,228.818 1660.88,227.753 1661.45,228.977 1662.02,231.292 1662.59,231.274 1663.15,230.47 1663.72,230.45 1664.29,231.394 1664.86,232.379 1665.43,230.253 1666,226.207 1666.56,225.487 1667.13,223.914 1667.7,223.391 1668.27,224.842 1668.84,227.376 1669.41,226.429 1669.97,226.614 1670.54,226.74 1671.11,228.98 1671.68,229.081 1672.25,230.291 1672.82,229.348 1673.38,230.384 1673.95,231.565 1674.52,233.775 1675.09,232.537 1675.66,235.752 1676.23,235.493 1676.79,234.958 1677.36,235.544 1677.93,236.219 1678.5,234.538 1679.07,235.256 1679.64,233.036 1680.2,230.983 1680.77,231 1681.34,232.209 1681.91,233.143 1682.48,234.087 1683.05,233.843 1683.61,234.696 1684.18,233.28 1684.75,233.042 1685.32,230.587 1685.89,231.675 1686.46,231.563 1687.02,228.503 1687.59,229.543 1688.16,228.477 1688.73,230.612 1689.3,230.507 1689.87,229.446 1690.44,229.481 1691,230.493 1691.57,232.644 1692.14,233.549 1692.71,233.441 1693.28,234.166 1693.85,237.035 1694.41,237.462 1694.98,236.882 1695.55,236.434 1696.12,236.099 1696.69,235.604 1697.26,233.239 1697.82,233.764 1698.39,233.589 1698.96,233.159 1699.53,233.95 1700.1,233.73 1700.67,232.093 1701.23,229.84 1701.8,230.753 1702.37,231.657 1702.94,231.637 1703.51,231.639 1704.08,231.428 1704.64,232.119 1705.21,229.169 1705.78,226.28 1706.35,224.462 1706.92,223.916 1707.49,221.08 1708.05,222.77 1708.62,220.196 1709.19,220.822 1709.76,220.24 1710.33,219.895 1710.9,220.618 1711.46,222.217 1712.03,224.953 1712.6,225.443 1713.17,227.848 1713.74,230.196 1714.31,230.438 1714.87,228.507 1715.44,229.651 1716.01,230.102 1716.58,231.187 1717.15,231.213 1717.72,233.299 1718.28,231.345 1718.85,232.385 1719.42,233.458 1719.99,233.41 1720.56,231.18 1721.13,228.166 1721.69,226.443 1722.26,225.537 1722.83,228.02 1723.4,231.507 1723.97,230.478 1724.54,228.294 1725.1,229.505 1725.67,229.89 1726.24,226.945 1726.81,226.817 1727.38,227.073 1727.95,228.359 1728.51,227.272 1729.08,224.43 1729.65,226.761 1730.22,230.49 1730.79,231.707 1731.36,231.614 1731.92,231.861 1732.49,231.001 1733.06,230.043 1733.63,229.17 1734.2,230.621 1734.77,229.868 1735.33,227.972 1735.9,226.902 1736.47,226.176 1737.04,229.66 1737.61,227.755 1738.18,229.108 1738.74,230.417 1739.31,230.454 1739.88,232.503 1740.45,230.502 1741.02,229.387 1741.59,229.57 1742.15,228.249 1742.72,228.388 1743.29,228.54 1743.86,230.855 1744.43,231.059 1745,232.175 1745.56,232.106 1746.13,233.116 1746.7,234.376 1747.27,238.311 1747.84,236.872 1748.41,235.484 1748.97,235.209 1749.54,233.988 1750.11,233.975 1750.68,234.859 1751.25,234.621 1751.82,234.481 1752.38,232.984 1752.95,233.035 1753.52,233.077 1754.09,231.968 1754.66,236.911 1755.23,236.437 1755.79,237.235 1756.36,234.554 1756.93,233.376 1757.5,234.39 1758.07,232.182 1758.64,233.857 1759.21,233.685 1759.77,230.348 1760.34,231.251 1760.91,230.857 1761.48,231.991 1762.05,231.866 1762.62,230.612 1763.18,231.608 1763.75,231.601 1764.32,231.638 1764.89,230.672 1765.46,229.381 1766.03,231.524 1766.59,231.529 1767.16,231.499 1767.73,232.077 1768.3,230.775 1768.87,232.709 1769.44,232.554 1770,230.33 1770.57,228.562 1771.14,230.687 1771.71,229.311 1772.28,228.297 1772.85,228.451 1773.41,230.564 1773.98,228.469 1774.55,227.486 1775.12,228.63 1775.69,230.827 1776.26,230.693 1776.82,228.565 1777.39,229.612 1777.96,230.54 1778.53,230.47 1779.1,230.456 1779.67,229.36 1780.23,231.522 1780.8,231.316 1781.37,231.154 1781.94,231.164 1782.51,229.974 1783.08,227.707 1783.64,227.627 1784.21,229.855 1784.78,230.88 1785.35,232.716 1785.92,230.371 1786.49,229.6 1787.05,229.729 1787.62,228.815 1788.19,228.014 1788.76,229.055 1789.33,228.939 1789.9,230.121 1790.46,227.195 1791.03,226.369 1791.6,226.846 1792.17,228.935 1792.74,226.975 1793.31,227.161 1793.87,227.354 1794.44,226.475 1795.01,228.826 1795.58,231.955 1796.15,229.668 1796.72,230.73 1797.28,230.886 1797.85,229.999 1798.42,231.033 1798.99,231.179 1799.56,231.104 1800.13,231.885 1800.69,231.666 1801.26,231.516 1801.83,230.663 1802.4,229.736 1802.97,230.032 1803.54,228.967 1804.1,228.988 1804.67,229.058 1805.24,228.252 1805.81,227.762 1806.38,228.008 1806.95,229.299 1807.51,230.61 1808.08,230.77 1808.65,229.676 1809.22,228.718 1809.79,228.805 1810.36,226.76 1810.92,224.994 1811.49,226.431 1812.06,228.813 1812.63,227.052 1813.2,228.192 1813.77,229.341 1814.33,229.397 1814.9,229.409 1815.47,229.35 1816.04,228.388 1816.61,225.574 1817.18,228.221 1817.74,230.584 1818.31,231.639 1818.88,232.664 1819.45,231.495 1820.02,231.416 1820.59,230.447 1821.15,229.2 1821.72,228.469 1822.29,227.577 1822.86,230.172 1823.43,230.491 1824,230.645 1824.56,231.795 1825.13,232.735 1825.7,230.625 1826.27,231.77 1826.84,231.743 1827.41,232.722 1827.97,232.707 1828.54,231.599 1829.11,232.751 1829.68,232.878 1830.25,233.693 1830.82,234.49 1831.39,236.248 1831.95,236.61 1832.52,237.259 1833.09,233.855 1833.66,229.513 1834.23,230.76 1834.8,230.753 1835.36,231.67 1835.93,232.412 1836.5,232.314 1837.07,231.131 1837.64,231.044 1838.21,230.986 1838.77,231.047 1839.34,231.977 1839.91,232.701 1840.48,231.618 1841.05,231.471 1841.62,231.288 1842.18,231.207 1842.75,231.14 1843.32,230.12 1843.89,230.358 1844.46,232.563 1845.03,233.567 1845.59,233.445 1846.16,233.147 1846.73,234.065 1847.3,233.721 1847.87,233.394 1848.44,234.244 1849,234.042 1849.57,235.778 1850.14,233.109 1850.71,232.921 1851.28,233.701 1851.85,231.527 1852.41,235.434 1852.98,235.006 1853.55,235.52 1854.12,235.297 1854.69,233.808 1855.26,231.337 1855.82,229.184 1856.39,230.165 1856.96,229.951 1857.53,232.21 1858.1,231 1858.67,230.734 1859.23,230.641 1859.8,231.544 1860.37,231.431 1860.94,231.355 1861.51,232.262 1862.08,232.016 1862.64,230.935 1863.21,230.905 1863.78,231.054 1864.35,232.006 1864.92,233.014 1865.49,231.641 1866.05,231.563 1866.62,228.116 1867.19,226.301 1867.76,227.433 1868.33,227.698 1868.9,229.806 1869.46,233.623 1870.03,233.369 1870.6,232.148 1871.17,232.864 1871.74,233.565 1872.31,233.341 1872.87,231.132 1873.44,229.92 1874.01,231.711 1874.58,232.457 1875.15,232.236 1875.72,231.161 1876.28,230.968 1876.85,231.14 1877.42,233.191 1877.99,232.814 1878.56,231.589 1879.13,231.4 1879.69,232.315 1880.26,232.232 1880.83,228.91 1881.4,228.912 1881.97,228.9 1882.54,228.701 1883.1,229.923 1883.67,230.714 1884.24,229.703 1884.81,230.676 1885.38,229.579 1885.95,229.58 1886.51,228.617 1887.08,228.73 1887.65,227.854 1888.22,232.245 1888.79,233.257 1889.36,233.086 1889.92,232.597 1890.49,232.345 1891.06,231.158 1891.63,231.19 1892.2,227.807 1892.77,226.744 1893.33,225.955 1893.9,226.415 1894.47,227.546 1895.04,227.653 1895.61,225.333 1896.18,225.787 1896.74,228.347 1897.31,228.675 1897.88,228.723 1898.45,228.792 1899.02,230.871 1899.59,229.866 1900.16,229.737 1900.72,230.826 1901.29,230.755 1901.86,230.633 1902.43,229.603 1903,227.561 1903.57,228.826 1904.13,231.941 1904.7,230.817 1905.27,231.989 1905.84,232.798 1906.41,230.755 1906.98,230.641 1907.54,229.542 1908.11,231.695 1908.68,230.534 1909.25,230.456 1909.82,233.72 1910.39,232.607 1910.95,230.166 1911.52,227.026 1912.09,226.108 1912.66,225.275 1913.23,223.61 1913.8,224.178 1914.36,225.47 1914.93,225.054 1915.5,226.479 1916.07,226.65 1916.64,225.844 1917.21,228.334 1917.77,229.57 1918.34,232.749 1918.91,231.718 1919.48,231.921 1920.05,230.726 1920.62,230.616 1921.18,229.485 1921.75,227.706 1922.32,225.931 1922.89,226.202 1923.46,224.512 1924.03,225.029 1924.59,227.682 1925.16,227.866 1925.73,228.093 1926.3,228.222 1926.87,228.442 1927.44,228.56 1928,229.606 1928.57,230.722 1929.14,230.789 1929.71,231.976 1930.28,230.875 1930.85,231.024 1931.41,230.937 1931.98,230.901 1932.55,227.69 1933.12,227.983 1933.69,230.477 1934.26,230.754 1934.82,228.718 1935.39,227.864 1935.96,227.069 1936.53,228.208 1937.1,228.332 1937.67,230.626 1938.23,229.815 1938.8,228.736 1939.37,228.91 1939.94,227.104 1940.51,226.408 1941.08,228.874 1941.64,227.893 1942.21,229.141 1942.78,229.351 1943.35,230.617 1943.92,230.632 1944.49,233.79 1945.05,235.634 1945.62,235.221 1946.19,235.061 1946.76,233.68 1947.33,233.443 1947.9,232.455 1948.46,232.596 1949.03,230.355 1949.6,228.207 1950.17,230.701 1950.74,231.604 1951.31,231.817 1951.87,232.744 1952.44,231.491 1953.01,230.727 1953.58,231.843 1954.15,234.841 1954.72,234.368 1955.28,233.288 1955.85,232.118 1956.42,229.985 1956.99,229.027 1957.56,229.147 1958.13,227.297 1958.69,227.595 1959.26,229.065 1959.83,228.325 1960.4,229.478 1960.97,232.639 1961.54,231.725 1962.1,232.881 1962.67,233.845 1963.24,234.722 1963.81,235.655 1964.38,237.406 1964.95,238.278 1965.51,236.9 1966.08,235.409 1966.65,234.995 1967.22,235.771 1967.79,232.273 1968.36,231.118 1968.92,230.001 1969.49,230.048 1970.06,230.139 1970.63,231.22 1971.2,230.097 1971.77,230.101 1972.34,231.07 1972.9,231.814 1973.47,230.855 1974.04,229.921 1974.61,229.833 1975.18,228.765 1975.75,228.888 1976.31,228.985 1976.88,228.346 1977.45,228.739 1978.02,228.695 1978.59,228.089 1979.16,226.215 1979.72,227.469 1980.29,228.712 1980.86,229.753 1981.43,230.012 1982,231.056 1982.57,228.873 1983.13,225.948 1983.7,226.203 1984.27,229.759 1984.84,228.828 1985.41,231.245 1985.98,229.03 1986.54,230.246 1987.11,231.363 1987.68,231.234 1988.25,230.044 1988.82,228.813 1989.39,227.862 1989.95,227.074 1990.52,224.346 1991.09,224.681 1991.66,222.855 1992.23,221.244 1992.8,223.037 1993.36,223.493 1993.93,220.93 1994.5,221.858 1995.07,223.801 1995.64,225.305 1996.21,226.802 1996.77,229.348 1997.34,230.608 1997.91,231.665 1998.48,231.994 1999.05,231.935 1999.62,232.139 2000.18,234.363 2000.75,231.955 2001.32,233.09 2001.89,233.015 2002.46,233.861 2003.03,231.803 2003.59,230.71 2004.16,230.957 2004.73,229.022 2005.3,228.18 2005.87,230.327 2006.44,230.173 2007,230.257 2007.57,233.302 2008.14,232.19 2008.71,233.269 2009.28,234.233 2009.85,234.101 2010.41,233.927 2010.98,233.765 2011.55,233.756 2012.12,232.41 2012.69,231.242 2013.26,232.28 2013.82,232.947 2014.39,235.911 2014.96,234.314 2015.53,234.351 2016.1,233.135 2016.67,231.852 2017.23,231.945 2017.8,229.954 2018.37,227.038 2018.94,226.375 2019.51,227.817 2020.08,228.098 2020.64,228.496 2021.21,228.803 2021.78,229.131 2022.35,231.102 2022.92,228.119 2023.49,229.307 2024.05,229.45 2024.62,229.589 2025.19,229.662 2025.76,230.987 2026.33,230.349 2026.9,230.426 2027.46,229.354 2028.03,228.653 2028.6,227.015 2029.17,228.396 2029.74,229.894 2030.31,229.992 2030.87,228.864 2031.44,230.211 2032.01,231.342 2032.58,230.199 2033.15,232.347 2033.72,231.243 2034.28,230.238 2034.85,233.313 2035.42,233.319 2035.99,235.138 2036.56,234.596 2037.13,235.31 2037.69,233.737 2038.26,234.628 2038.83,234.264 2039.4,234.022 2039.97,233.804 2040.54,231.62 2041.11,232.793 2041.67,232.735 2042.24,232.48 2042.81,230.575 2043.38,231.488 2043.95,232.486 2044.52,231.382 2045.08,233.558 2045.65,232.389 2046.22,232.306 2046.79,233.183 2047.36,234.131 2047.93,232.81 2048.49,231.583 2049.06,230.55 2049.63,231.698 2050.2,230.496 2050.77,229.893 2051.34,228.941 2051.9,231.009 2052.47,229.922 2053.04,230.817 2053.61,230.786 2054.18,233.748 2054.75,233.454 2055.31,231.19 2055.88,228.162 2056.45,228.401 2057.02,228.717 2057.59,229.8 2058.16,230.761 2058.72,229.595 2059.29,229.323 2059.86,230.253 2060.43,230.274 2061,233.517 2061.57,230.166 2062.13,230.95 2062.7,232.039 2063.27,236.122 2063.84,236.886 2064.41,236.339 2064.98,235.917 2065.54,235.476 2066.11,231.018 2066.68,227.856 2067.25,228.961 2067.82,228.137 2068.39,228.372 2068.95,229.529 2069.52,229.671 2070.09,230.63 2070.66,231.732 2071.23,235.694 2071.8,232.175 2072.36,233.221 2072.93,231.053 2073.5,230.081 2074.07,233.458 2074.64,233.247 2075.21,233.114 2075.77,231.892 2076.34,228.705 2076.91,228.506 2077.48,229.667 2078.05,228.712 2078.62,229.796 2079.18,230.825 2079.75,233.614 2080.32,231.344 2080.89,232.087 2081.46,233.998 2082.03,233.895 2082.59,230.73 2083.16,228.781 2083.73,229.976 2084.3,231.224 2084.87,231.146 2085.44,228.818 2086,229.821 2086.57,228.814 2087.14,229.931 2087.71,229.925 2088.28,232.07 2088.85,230.909 2089.41,229.646 2089.98,227.747 2090.55,229.712 2091.12,229.869 2091.69,230.845 2092.26,231.714 2092.82,232.667 2093.39,233.538 2093.96,232.276 2094.53,234.199 2095.1,234.889 2095.67,234.524 2096.23,235.162 2096.8,232.615 2097.37,232.399 2097.94,231.81 2098.51,229.654 2099.08,228.447 2099.64,226.581 2100.21,229.827 2100.78,229.685 2101.35,230.664 2101.92,230.5 2102.49,228.159 2103.05,229.247 2103.62,230.172 2104.19,227.262 2104.76,226.483 2105.33,229.85 2105.9,227.75 2106.46,227.681 2107.03,230.014 2107.6,230.864 2108.17,231.805 2108.74,231.709 2109.31,233.51 2109.87,234.329 2110.44,234.028 2111.01,233.681 2111.58,232.357 2112.15,233.339 2112.72,231.018 2113.29,228.961 2113.85,228.787 2114.42,229.812 2114.99,227.747 2115.56,225.83 2116.13,225.211 2116.7,228.679 2117.26,228.915 2117.83,231.104 2118.4,231.277 2118.97,230.153 2119.54,230.21 2120.11,230.257 2120.67,231.406 2121.24,232.226 2121.81,232.069 2122.38,232.155 2122.95,232.89 2123.52,234.627 2124.08,234.544 2124.65,234.175 2125.22,234.97 2125.79,235.616 2126.36,235.442 2126.93,234.033 2127.49,232.845 2128.06,231.799 2128.63,233.577 2129.2,230.285 2129.77,230.375 2130.34,229.255 2130.9,229.105 2131.47,230.013 2132.04,230.189 2132.61,230.199 2133.18,229.157 2133.75,229.254 2134.31,230.432 2134.88,230.327 2135.45,233.349 2136.02,233.045 2136.59,231.815 2137.16,232.468 2137.72,231.195 2138.29,231.922 2138.86,230.826 2139.43,228.836 2140,226.715 2140.57,226.845 2141.13,226.017 2141.7,226.143 2142.27,227.255 2142.84,227.479 2143.41,228.578 2143.98,228.72 2144.54,229.733 2145.11,231.721 2145.68,231.82 2146.25,231.668 2146.82,230.331 2147.39,230.213 2147.95,230.096 2148.52,230.078 2149.09,231.992 2149.66,230.651 2150.23,230.439 2150.8,226.252 2151.36,226.437 2151.93,227.666 2152.5,226.741 2153.07,225.763 2153.64,223.815 2154.21,223.287 2154.77,224.137 2155.34,223.654 2155.91,225.029 2156.48,226.608 2157.05,226.84 2157.62,225.14 2158.18,224.393 2158.75,225.905 2159.32,227.298 2159.89,229.681 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip370)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.031 ± 0.021\n  with uncertainty of ± 0.0018771027981931779\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01546 ± (0.00281496, 0.00306345) (MC)\n  95% confidence interval: [-4.02137, -4.00991] (MC)\n  linear error propagation: -4.01569 ± 0.00297696\n  |δ_y| = |0.00242114| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.0154590640934105, val_l = 0.005907360948559592, val_u = 0.005552551826191632)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip400\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip400)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip401\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip400)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip402\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1145.93 2211.02,1145.93 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,987.497 2211.02,987.497 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,829.066 2211.02,829.066 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,670.634 2211.02,670.634 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,512.203 2211.02,512.203 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,353.772 2211.02,353.772 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,195.341 2211.02,195.341 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1145.93 365.751,1145.93 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,987.497 365.751,987.497 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,829.066 365.751,829.066 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,670.634 365.751,670.634 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,512.203 365.751,512.203 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,353.772 365.751,353.772 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,195.341 365.751,195.341 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M298.909 1131.73 Q295.298 1131.73 293.469 1135.29 Q291.664 1138.83 291.664 1145.96 Q291.664 1153.07 293.469 1156.63 Q295.298 1160.18 298.909 1160.18 Q302.543 1160.18 304.349 1156.63 Q306.177 1153.07 306.177 1145.96 Q306.177 1138.83 304.349 1135.29 Q302.543 1131.73 298.909 1131.73 M298.909 1128.02 Q304.719 1128.02 307.775 1132.63 Q310.853 1137.21 310.853 1145.96 Q310.853 1154.69 307.775 1159.3 Q304.719 1163.88 298.909 1163.88 Q293.099 1163.88 290.02 1159.3 Q286.964 1154.69 286.964 1145.96 Q286.964 1137.21 290.02 1132.63 Q293.099 1128.02 298.909 1128.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M259.557 1000.84 L267.196 1000.84 L267.196 974.476 L258.886 976.143 L258.886 971.884 L267.15 970.217 L271.826 970.217 L271.826 1000.84 L279.465 1000.84 L279.465 1004.78 L259.557 1004.78 L259.557 1000.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M298.909 973.296 Q295.298 973.296 293.469 976.86 Q291.664 980.402 291.664 987.532 Q291.664 994.638 293.469 998.203 Q295.298 1001.74 298.909 1001.74 Q302.543 1001.74 304.349 998.203 Q306.177 994.638 306.177 987.532 Q306.177 980.402 304.349 976.86 Q302.543 973.296 298.909 973.296 M298.909 969.592 Q304.719 969.592 307.775 974.198 Q310.853 978.782 310.853 987.532 Q310.853 996.258 307.775 1000.86 Q304.719 1005.45 298.909 1005.45 Q293.099 1005.45 290.02 1000.86 Q286.964 996.258 286.964 987.532 Q286.964 978.782 290.02 974.198 Q293.099 969.592 298.909 969.592 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M262.775 842.41 L279.094 842.41 L279.094 846.346 L257.15 846.346 L257.15 842.41 Q259.812 839.656 264.395 835.026 Q269.002 830.373 270.182 829.031 Q272.428 826.508 273.307 824.772 Q274.21 823.012 274.21 821.323 Q274.21 818.568 272.266 816.832 Q270.344 815.096 267.242 815.096 Q265.043 815.096 262.59 815.86 Q260.159 816.624 257.381 818.174 L257.381 813.452 Q260.205 812.318 262.659 811.739 Q265.113 811.161 267.15 811.161 Q272.52 811.161 275.715 813.846 Q278.909 816.531 278.909 821.022 Q278.909 823.151 278.099 825.073 Q277.312 826.971 275.205 829.563 Q274.627 830.235 271.525 833.452 Q268.423 836.647 262.775 842.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M298.909 814.864 Q295.298 814.864 293.469 818.429 Q291.664 821.971 291.664 829.1 Q291.664 836.207 293.469 839.772 Q295.298 843.313 298.909 843.313 Q302.543 843.313 304.349 839.772 Q306.177 836.207 306.177 829.1 Q306.177 821.971 304.349 818.429 Q302.543 814.864 298.909 814.864 M298.909 811.161 Q304.719 811.161 307.775 815.767 Q310.853 820.35 310.853 829.1 Q310.853 837.827 307.775 842.434 Q304.719 847.017 298.909 847.017 Q293.099 847.017 290.02 842.434 Q286.964 837.827 286.964 829.1 Q286.964 820.35 290.02 815.767 Q293.099 811.161 298.909 811.161 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M272.914 669.28 Q276.27 669.998 278.145 672.266 Q280.043 674.535 280.043 677.868 Q280.043 682.984 276.525 685.785 Q273.006 688.586 266.525 688.586 Q264.349 688.586 262.034 688.146 Q259.742 687.729 257.289 686.873 L257.289 682.359 Q259.233 683.493 261.548 684.072 Q263.863 684.65 266.386 684.65 Q270.784 684.65 273.076 682.914 Q275.39 681.178 275.39 677.868 Q275.39 674.813 273.238 673.1 Q271.108 671.364 267.289 671.364 L263.261 671.364 L263.261 667.521 L267.474 667.521 Q270.923 667.521 272.752 666.155 Q274.58 664.766 274.58 662.174 Q274.58 659.512 272.682 658.1 Q270.807 656.665 267.289 656.665 Q265.367 656.665 263.168 657.081 Q260.969 657.498 258.33 658.377 L258.33 654.211 Q260.992 653.47 263.307 653.1 Q265.645 652.729 267.705 652.729 Q273.029 652.729 276.131 655.16 Q279.233 657.567 279.233 661.688 Q279.233 664.558 277.59 666.549 Q275.946 668.516 272.914 669.28 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M298.909 656.433 Q295.298 656.433 293.469 659.998 Q291.664 663.539 291.664 670.669 Q291.664 677.776 293.469 681.34 Q295.298 684.882 298.909 684.882 Q302.543 684.882 304.349 681.34 Q306.177 677.776 306.177 670.669 Q306.177 663.539 304.349 659.998 Q302.543 656.433 298.909 656.433 M298.909 652.729 Q304.719 652.729 307.775 657.336 Q310.853 661.919 310.853 670.669 Q310.853 679.396 307.775 684.002 Q304.719 688.586 298.909 688.586 Q293.099 688.586 290.02 684.002 Q286.964 679.396 286.964 670.669 Q286.964 661.919 290.02 657.336 Q293.099 652.729 298.909 652.729 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M271.594 498.997 L259.789 517.446 L271.594 517.446 L271.594 498.997 M270.367 494.923 L276.247 494.923 L276.247 517.446 L281.177 517.446 L281.177 521.335 L276.247 521.335 L276.247 529.483 L271.594 529.483 L271.594 521.335 L255.992 521.335 L255.992 516.821 L270.367 494.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M298.909 498.002 Q295.298 498.002 293.469 501.567 Q291.664 505.108 291.664 512.238 Q291.664 519.344 293.469 522.909 Q295.298 526.451 298.909 526.451 Q302.543 526.451 304.349 522.909 Q306.177 519.344 306.177 512.238 Q306.177 505.108 304.349 501.567 Q302.543 498.002 298.909 498.002 M298.909 494.298 Q304.719 494.298 307.775 498.905 Q310.853 503.488 310.853 512.238 Q310.853 520.965 307.775 525.571 Q304.719 530.154 298.909 530.154 Q293.099 530.154 290.02 525.571 Q286.964 520.965 286.964 512.238 Q286.964 503.488 290.02 498.905 Q293.099 494.298 298.909 494.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M258.793 336.492 L277.15 336.492 L277.15 340.427 L263.076 340.427 L263.076 348.899 Q264.094 348.552 265.113 348.39 Q266.131 348.205 267.15 348.205 Q272.937 348.205 276.316 351.376 Q279.696 354.547 279.696 359.964 Q279.696 365.543 276.224 368.644 Q272.752 371.723 266.432 371.723 Q264.256 371.723 261.988 371.353 Q259.742 370.982 257.335 370.242 L257.335 365.543 Q259.418 366.677 261.641 367.232 Q263.863 367.788 266.34 367.788 Q270.344 367.788 272.682 365.681 Q275.02 363.575 275.02 359.964 Q275.02 356.353 272.682 354.246 Q270.344 352.14 266.34 352.14 Q264.465 352.14 262.59 352.557 Q260.738 352.973 258.793 353.853 L258.793 336.492 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M298.909 339.57 Q295.298 339.57 293.469 343.135 Q291.664 346.677 291.664 353.807 Q291.664 360.913 293.469 364.478 Q295.298 368.019 298.909 368.019 Q302.543 368.019 304.349 364.478 Q306.177 360.913 306.177 353.807 Q306.177 346.677 304.349 343.135 Q302.543 339.57 298.909 339.57 M298.909 335.867 Q304.719 335.867 307.775 340.473 Q310.853 345.057 310.853 353.807 Q310.853 362.533 307.775 367.14 Q304.719 371.723 298.909 371.723 Q293.099 371.723 290.02 367.14 Q286.964 362.533 286.964 353.807 Q286.964 345.057 290.02 340.473 Q293.099 335.867 298.909 335.867 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M269.326 193.477 Q266.178 193.477 264.326 195.63 Q262.497 197.783 262.497 201.533 Q262.497 205.259 264.326 207.435 Q266.178 209.588 269.326 209.588 Q272.474 209.588 274.303 207.435 Q276.154 205.259 276.154 201.533 Q276.154 197.783 274.303 195.63 Q272.474 193.477 269.326 193.477 M278.608 178.824 L278.608 183.084 Q276.849 182.25 275.043 181.811 Q273.261 181.371 271.502 181.371 Q266.872 181.371 264.418 184.496 Q261.988 187.621 261.641 193.94 Q263.006 191.926 265.066 190.861 Q267.127 189.773 269.603 189.773 Q274.812 189.773 277.821 192.945 Q280.853 196.093 280.853 201.533 Q280.853 206.857 277.705 210.074 Q274.557 213.292 269.326 213.292 Q263.33 213.292 260.159 208.709 Q256.988 204.102 256.988 195.375 Q256.988 187.181 260.877 182.32 Q264.766 177.436 271.316 177.436 Q273.076 177.436 274.858 177.783 Q276.664 178.13 278.608 178.824 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M298.909 181.139 Q295.298 181.139 293.469 184.704 Q291.664 188.246 291.664 195.375 Q291.664 202.482 293.469 206.047 Q295.298 209.588 298.909 209.588 Q302.543 209.588 304.349 206.047 Q306.177 202.482 306.177 195.375 Q306.177 188.246 304.349 184.704 Q302.543 181.139 298.909 181.139 M298.909 177.436 Q304.719 177.436 307.775 182.042 Q310.853 186.625 310.853 195.375 Q310.853 204.102 307.775 208.709 Q304.719 213.292 298.909 213.292 Q293.099 213.292 290.02 208.709 Q286.964 204.102 286.964 195.375 Q286.964 186.625 290.02 182.042 Q293.099 177.436 298.909 177.436 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip402)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1029.19 400.199,921.946 400.786,823.545 401.372,733.392 401.958,650.941 402.545,575.681 403.131,507.143 403.718,549.31 404.304,582.782 404.891,520.365 405.477,464.714 406.063,415.746 406.65,444.397 407.236,399.441 407.823,362.273 408.409,326.075 408.995,351.911 409.582,321.966 410.168,294.819 410.755,272.398 411.341,251.762 411.927,234.106 412.514,219.895 413.1,245.571 413.687,302.315 414.273,321.852 414.86,339.755 415.446,328.114 416.032,319.707 416.619,338.076 417.205,354.933 417.792,369.747 418.378,383.692 418.964,380.897 419.551,379.236 420.137,413.158 420.724,414.538 421.31,416.151 421.896,433.21 422.483,450.031 423.069,468.294 423.656,473.82 424.242,491.515 424.829,498.178 425.415,515.199 426.001,522.383 426.588,529.913 427.174,538.62 427.761,555.806 428.347,580.777 428.933,603.893 429.52,617.499 430.106,631.495 430.693,638.363 431.279,652.721 431.865,665.616 432.452,678.958 433.038,691.59 433.625,714.937 434.211,726.854 434.798,742.967 435.384,768.653 435.97,778.666 436.557,792.538 437.143,798.182 437.73,804.068 438.316,818.011 438.902,831.417 439.489,840.454 440.075,853.128 440.662,865.324 441.248,877.385 441.835,881.866 442.421,900.134 443.007,904.282 443.594,911.914 444.18,916.587 444.767,923.919 445.353,931.942 445.939,948.118 446.526,961.015 447.112,967.608 447.699,974.477 448.285,981.314 448.871,988.016 449.458,994.53 450.044,1003.25 450.631,1014.99 451.217,1020.87 451.804,1031.37 452.39,1036.83 452.976,1048.67 453.563,1055.53 454.149,1058 454.736,1063.21 455.322,1076.97 455.908,1081.13 456.495,1085.51 457.081,1091.69 457.668,1097.9 458.254,1101.79 458.84,1103.73 459.427,1107.38 460.013,1111.38 460.6,1117.2 461.186,1120.86 461.773,1122.74 462.359,1128.16 462.945,1129.93 463.532,1133.2 464.118,1139.91 464.705,1144.88 465.291,1147.98 465.877,1147.65 466.464,1150.33 467.05,1155.01 467.637,1156.17 468.223,1157.36 468.809,1158.78 469.396,1161.58 469.982,1169.31 470.569,1173.54 471.155,1174.48 471.742,1175.46 472.328,1174.84 472.914,1177.58 473.501,1180.03 474.087,1182.14 474.674,1184.58 475.26,1188.59 475.846,1191.24 476.433,1194.65 477.019,1196.98 477.606,1200.38 478.192,1201.09 478.778,1204.44 479.365,1209.26 479.951,1209.34 480.538,1212.5 481.124,1209.62 481.711,1209.82 482.297,1209.79 482.883,1213.09 483.47,1214.5 484.056,1214.34 484.643,1215.79 485.229,1216.05 485.815,1216.23 486.402,1217.9 486.988,1217.97 487.575,1217.98 488.161,1218.07 488.748,1221.22 489.334,1218.05 489.92,1216.83 490.507,1215.57 491.093,1215.99 491.68,1216.04 492.266,1219.26 492.852,1219.67 493.439,1221.45 494.025,1222.93 494.612,1227.11 495.198,1231.2 495.784,1230.82 496.371,1230.7 496.957,1235.78 497.544,1236.89 498.13,1237.81 498.717,1238.46 499.303,1239.02 499.889,1236.65 500.476,1234.53 501.062,1234.15 501.649,1236.29 502.235,1238.21 502.821,1240.17 503.408,1239.34 503.994,1239.94 504.581,1241.77 505.167,1240.65 505.753,1240.93 506.34,1238.82 506.926,1238.06 507.513,1237.55 508.099,1240.07 508.686,1238.19 509.272,1237.95 509.858,1236.15 510.445,1235.67 511.031,1235.17 511.618,1234.52 512.204,1234.22 512.79,1236.58 513.377,1238.78 513.963,1236.7 514.55,1236.45 515.136,1237.51 515.722,1235.6 516.309,1239.3 516.895,1238.81 517.482,1245.11 518.068,1244.43 518.655,1242.05 519.241,1241.32 519.827,1240.73 520.414,1243.7 521,1244.33 521.587,1246.31 522.173,1250.53 522.759,1248.33 523.346,1246.11 523.932,1242.72 524.519,1242.07 525.105,1242.49 525.691,1239.11 526.278,1239.76 526.864,1237.57 527.451,1238.64 528.037,1240.79 528.624,1241.55 529.21,1241.06 529.796,1240.61 530.383,1242.66 530.969,1244.4 531.556,1246.2 532.142,1246.18 532.728,1245.11 533.315,1245.6 533.901,1240.76 534.488,1237.25 535.074,1235.58 535.661,1232.78 536.247,1229.55 536.833,1230.93 537.42,1234.57 538.006,1236.74 538.593,1237.47 539.179,1235.58 539.765,1236.75 540.352,1238.76 540.938,1238.19 541.525,1237.69 542.111,1238.49 542.697,1238.83 543.284,1239.53 543.87,1237.46 544.457,1234.12 545.043,1234.96 545.63,1233.39 546.216,1234.38 546.802,1233.92 547.389,1234.65 547.975,1232.76 548.562,1232.58 549.148,1230.85 549.734,1232.07 550.321,1234.17 550.907,1233.9 551.494,1233.43 552.08,1234.32 552.666,1235.38 553.253,1235.04 553.839,1234.9 554.426,1237.04 555.012,1236.47 555.599,1236.99 556.185,1234.86 556.771,1233.02 557.358,1229.89 557.944,1229.62 558.531,1230.4 559.117,1230.22 559.703,1233.95 560.29,1232.09 560.876,1230.34 561.463,1228.56 562.049,1228.36 562.635,1230.97 563.222,1230.76 563.808,1231.9 564.395,1231.54 564.981,1227.56 565.568,1229.95 566.154,1232.08 566.74,1235.67 567.327,1237.63 567.913,1236.74 568.5,1236.09 569.086,1234.07 569.672,1232.26 570.259,1231.81 570.845,1231.57 571.432,1231.01 572.018,1230.49 572.605,1228.81 573.191,1227.08 573.777,1227.24 574.364,1227.2 574.95,1228.32 575.537,1227.01 576.123,1221.57 576.709,1223.31 577.296,1224.84 577.882,1223.42 578.469,1228.91 579.055,1227.42 579.641,1227.21 580.228,1226.82 580.814,1224.02 581.401,1225.37 581.987,1227.75 582.574,1231.31 583.16,1230.73 583.746,1230.12 584.333,1228.49 584.919,1229.47 585.506,1230.45 586.092,1231.27 586.678,1229.46 587.265,1231.71 587.851,1231.37 588.438,1229.79 589.024,1228.3 589.61,1233.4 590.197,1235.74 590.783,1233.9 591.37,1231.81 591.956,1235.28 592.543,1234.91 593.129,1233.08 593.715,1231.14 594.302,1230.56 594.888,1230.33 595.475,1230.9 596.061,1231.65 596.647,1232.36 597.234,1233.09 597.82,1234.72 598.407,1232.83 598.993,1233.56 599.579,1231.61 600.166,1232.39 600.752,1230.47 601.339,1231.01 601.925,1231.72 602.512,1232.6 603.098,1233.24 603.684,1231.3 604.271,1230.58 604.857,1230.22 605.444,1229.56 606.03,1227.73 606.616,1226.03 607.203,1227.09 607.789,1224.34 608.376,1222.75 608.962,1221.32 609.548,1223.95 610.135,1219.8 610.721,1221.42 611.308,1221.51 611.894,1220.08 612.481,1221.56 613.067,1218.68 613.653,1218.66 614.24,1218.62 614.826,1217.25 615.413,1216.14 615.999,1217.82 616.585,1217.77 617.172,1216.51 617.758,1217.05 618.345,1217.08 618.931,1218.7 619.518,1220.2 620.104,1217.68 620.69,1216.71 621.277,1217.03 621.863,1215.77 622.45,1215.79 623.036,1216.05 623.622,1217.47 624.209,1218.74 624.795,1221.66 625.382,1224.06 625.968,1226.55 626.554,1227.57 627.141,1227.13 627.727,1229.15 628.314,1227.28 628.9,1228.33 629.487,1227.92 630.073,1227.49 630.659,1226.95 631.246,1227.45 631.832,1229.75 632.419,1227.81 633.005,1227.3 633.591,1228.02 634.178,1226.05 634.764,1225.63 635.351,1225.3 635.937,1225.98 636.523,1226.65 637.11,1226.49 637.696,1223.68 638.283,1223.44 638.869,1224.16 639.456,1222.62 640.042,1222.49 640.628,1223.56 641.215,1221.85 641.801,1223 642.388,1222.61 642.974,1221 643.56,1223.51 644.147,1225.89 644.733,1226.81 645.32,1226.23 645.906,1223.21 646.492,1220.47 647.079,1222.79 647.665,1223.75 648.252,1222.04 648.838,1220.48 649.425,1218.75 650.011,1219.82 650.597,1218.46 651.184,1219.6 651.77,1221.94 652.357,1222.72 652.943,1223.6 653.529,1223.17 654.116,1222.6 654.702,1223.57 655.289,1223.21 655.875,1222.91 656.462,1223.74 657.048,1221.78 657.634,1221.51 658.221,1221.15 658.807,1219.71 659.394,1216.41 659.98,1211.35 660.566,1212.88 661.153,1215.68 661.739,1214.2 662.326,1216.96 662.912,1218.46 663.498,1218.5 664.085,1219.67 664.671,1220.79 665.258,1221.58 665.844,1223.94 666.431,1223.51 667.017,1223.25 667.603,1225.43 668.19,1226.31 668.776,1228.27 669.363,1227.67 669.949,1224.88 670.535,1224.65 671.122,1221.35 671.708,1219.77 672.295,1220.69 672.881,1220.28 673.467,1221.28 674.054,1220.62 674.64,1219.37 675.227,1216.68 675.813,1214.23 676.4,1214.5 676.986,1215.95 677.572,1214.8 678.159,1213.63 678.745,1216.31 679.332,1216.23 679.918,1215.05 680.504,1217.52 681.091,1217.45 681.677,1213.19 682.264,1211.77 682.85,1211.98 683.436,1210.87 684.023,1209.9 684.609,1210.23 685.196,1211.89 685.782,1215.02 686.369,1213.56 686.955,1213.88 687.541,1212.72 688.128,1214.19 688.714,1214.34 689.301,1213.06 689.887,1210.47 690.473,1211.9 691.06,1213.24 691.646,1213.52 692.233,1212.53 692.819,1214.01 693.405,1218.17 693.992,1216.79 694.578,1219.34 695.165,1221.68 695.751,1222.66 696.338,1219.6 696.924,1219.7 697.51,1218.29 698.097,1216.54 698.683,1216.36 699.27,1216.53 699.856,1218.84 700.442,1218.37 701.029,1218.34 701.615,1219.64 702.202,1219.44 702.788,1219.36 703.375,1220.77 703.961,1222.89 704.547,1223.61 705.134,1221.56 705.72,1222.45 706.307,1221.91 706.893,1221.36 707.479,1219.77 708.066,1219.41 708.652,1220.31 709.239,1218.61 709.825,1215.91 710.411,1213.33 710.998,1213.38 711.584,1213.3 712.171,1213.43 712.757,1214.67 713.344,1213.37 713.93,1213.43 714.516,1216.11 715.103,1217.2 715.689,1217.24 716.276,1218.27 716.862,1219.34 717.448,1217.87 718.035,1215.31 718.621,1213.67 719.208,1214.97 719.794,1220.18 720.38,1220.11 720.967,1221.26 721.553,1220.96 722.14,1220.84 722.726,1220.65 723.313,1219.19 723.899,1218.65 724.485,1215.96 725.072,1216.15 725.658,1216.15 726.245,1213.37 726.831,1214.62 727.417,1214.26 728.004,1211.42 728.59,1211.79 729.177,1212.12 729.763,1214.93 730.349,1213.46 730.936,1217.57 731.522,1213.68 732.109,1210.07 732.695,1211.43 733.282,1212.73 733.868,1213.05 734.454,1211.88 735.041,1213.46 735.627,1212.39 736.214,1214.89 736.8,1214.71 737.386,1212 737.973,1210.47 738.559,1210.68 739.146,1212.02 739.732,1210.79 740.318,1211.98 740.905,1214.71 741.491,1213.18 742.078,1213.17 742.664,1213.05 743.251,1211.88 743.837,1210.53 744.423,1209.44 745.01,1210.66 745.596,1213.31 746.183,1211.74 746.769,1211.73 747.355,1215.97 747.942,1217.34 748.528,1216.01 749.115,1215.87 749.701,1213.01 750.288,1212.88 750.874,1211.62 751.46,1212.9 752.047,1213.24 752.633,1215.69 753.22,1216.95 753.806,1219.31 754.392,1218.1 754.979,1216.34 755.565,1216.23 756.152,1213.23 756.738,1213.11 757.324,1214.28 757.911,1213.03 758.497,1216.89 759.084,1215.55 759.67,1215.69 760.257,1215.94 760.843,1216.14 761.429,1212.23 762.016,1209.59 762.602,1207.1 763.189,1209.9 763.775,1208.79 764.361,1212.8 764.948,1211.46 765.534,1208.86 766.121,1212.82 766.707,1214.04 767.293,1213.94 767.88,1215.34 768.466,1211.52 769.053,1208.88 769.639,1208.95 770.226,1207.99 770.812,1206.87 771.398,1204.73 771.985,1205.23 772.571,1206.98 773.158,1209.8 773.744,1209.78 774.33,1212.61 774.917,1212.58 775.503,1213.72 776.09,1212.24 776.676,1212.17 777.262,1213.44 777.849,1210.83 778.435,1211.04 779.022,1213.62 779.608,1214.99 780.195,1214.84 780.781,1216.46 781.367,1213.54 781.954,1214.74 782.54,1215.92 783.127,1218.24 783.713,1216.73 784.299,1217.63 784.886,1218.87 785.472,1217.38 786.059,1218.16 786.645,1215.24 787.232,1214.99 787.818,1213.61 788.404,1213.59 788.991,1213.48 789.577,1213.43 790.164,1210.89 790.75,1210.88 791.336,1209.67 791.923,1209.91 792.509,1210.23 793.096,1207.78 793.682,1209.17 794.268,1209.29 794.855,1210.72 795.441,1213.37 796.028,1212 796.614,1211.74 797.201,1210.26 797.787,1210.46 798.373,1211.64 798.96,1210.73 799.546,1212.26 800.133,1212.25 800.719,1213.37 801.305,1214.54 801.892,1214.34 802.478,1211.83 803.065,1213.02 803.651,1213.14 804.237,1213.21 804.824,1215.8 805.41,1216.82 805.997,1215.41 806.583,1212.57 807.17,1212.51 807.756,1212.32 808.342,1211 808.929,1208.67 809.515,1208.68 810.102,1208.97 810.688,1206.67 811.274,1206.88 811.861,1207.1 812.447,1208.48 813.034,1208.78 813.62,1210.49 814.206,1213.39 814.793,1210.93 815.379,1212.06 815.966,1214.51 816.552,1214.47 817.139,1210.46 817.725,1209.04 818.311,1209.17 818.898,1210.66 819.484,1209.77 820.071,1208.48 820.657,1208.75 821.243,1208.87 821.83,1210.26 822.416,1211.76 823.003,1214.26 823.589,1214.3 824.175,1214.21 824.762,1214.12 825.348,1213.99 825.935,1214.07 826.521,1213.87 827.108,1213.74 827.694,1212.46 828.28,1212.42 828.867,1212.28 829.453,1212.37 830.04,1215 830.626,1213.56 831.212,1213.5 831.799,1214.9 832.385,1217.16 832.972,1218.02 833.558,1218.85 834.145,1218.49 834.731,1215.43 835.317,1213.79 835.904,1215.13 836.49,1216.33 837.077,1216.04 837.663,1215.63 838.249,1216.45 838.836,1216.5 839.422,1216.32 840.009,1215.95 840.595,1216.74 841.181,1218.7 841.768,1218.23 842.354,1219.05 842.941,1218.84 843.527,1218.35 844.114,1216.8 844.7,1218.99 845.286,1218.79 845.873,1217.29 846.459,1216.8 847.046,1215.26 847.632,1213.86 848.218,1212.38 848.805,1212.33 849.391,1213.43 849.978,1213.41 850.564,1214.25 851.15,1214.18 851.737,1214.1 852.323,1213.85 852.91,1212.35 853.496,1212.46 854.083,1212.39 854.669,1211.07 855.255,1208.59 855.842,1210.16 856.428,1211.43 857.015,1208.91 857.601,1209.13 858.187,1210.67 858.774,1209.49 859.36,1209.33 859.947,1205.66 860.533,1207.38 861.119,1207.52 861.706,1210.24 862.292,1209.15 862.879,1209.17 863.465,1209.27 864.052,1206.91 864.638,1208.3 865.224,1208.57 865.811,1208.93 866.397,1209.41 866.984,1209.78 867.57,1207.13 868.156,1206.09 868.743,1207.45 869.329,1207.88 869.916,1209.5 870.502,1207.07 871.089,1207.35 871.675,1207.57 872.261,1209.02 872.848,1210.62 873.434,1210.65 874.021,1210.71 874.607,1209.49 875.193,1210.93 875.78,1213.43 876.366,1214.4 876.953,1215.59 877.539,1214.21 878.125,1213.96 878.712,1211.46 879.298,1211.61 879.885,1212.86 880.471,1212.63 881.058,1208.71 881.644,1207.78 882.23,1209.4 882.817,1209.61 883.403,1210.86 883.99,1211.99 884.576,1214.48 885.162,1214.15 885.749,1212.87 886.335,1213.78 886.922,1213.93 887.508,1214.96 888.094,1214.93 888.681,1214.76 889.267,1213.16 889.854,1213.18 890.44,1213.19 891.027,1210.57 891.613,1207.85 892.199,1207.76 892.786,1208 893.372,1202.95 893.959,1202.31 894.545,1202.95 895.131,1204.5 895.718,1204.78 896.304,1206.52 896.891,1206.72 897.477,1208.34 898.063,1209.68 898.65,1209.97 899.236,1210.02 899.823,1208.61 900.409,1208.91 900.996,1211.68 901.582,1210.33 902.168,1210.47 902.755,1209.26 903.341,1210.76 903.928,1212.35 904.514,1213.45 905.1,1214.87 905.687,1214.74 906.273,1214.45 906.86,1216.73 907.446,1216.25 908.032,1215.91 908.619,1215.54 909.205,1216.55 909.792,1217.44 910.378,1216.94 910.965,1216.81 911.551,1214.11 912.137,1212.7 912.724,1213.74 913.31,1210.81 913.897,1210.87 914.483,1210.68 915.069,1208.14 915.656,1206.88 916.242,1208.4 916.829,1213.62 917.415,1215.06 918.002,1214.9 918.588,1215.58 919.174,1217.81 919.761,1218.67 920.347,1220.52 920.934,1217.55 921.52,1220.99 922.106,1219.07 922.693,1216.15 923.279,1218.6 923.866,1216.83 924.452,1219.15 925.038,1220.27 925.625,1217 926.211,1214.16 926.798,1215.26 927.384,1212.33 927.971,1213.35 928.557,1213.02 929.143,1211.73 929.73,1212.94 930.316,1211.48 930.903,1212.83 931.489,1215.46 932.075,1212.61 932.662,1213.87 933.248,1213.8 933.835,1211.23 934.421,1211.01 935.007,1212.71 935.594,1209.94 936.18,1206.28 936.767,1205.36 937.353,1205.91 937.94,1210.08 938.526,1212.61 939.112,1211.33 939.699,1212.38 940.285,1213.57 940.872,1216.12 941.458,1216.02 942.044,1214.59 942.631,1211.8 943.217,1217.25 943.804,1215.44 944.39,1215.23 944.976,1217.42 945.563,1217.05 946.149,1219.45 946.736,1216.52 947.322,1217.66 947.909,1216.27 948.495,1214.58 949.081,1217.17 949.668,1215.7 950.254,1218.08 950.841,1217.87 951.427,1216.19 952.013,1214.43 952.6,1211.46 953.186,1212.53 953.773,1209.94 954.359,1212.46 954.945,1212.54 955.532,1212.3 956.118,1213.64 956.705,1212.09 957.291,1213.25 957.878,1211.38 958.464,1210 959.05,1208.82 959.637,1206.17 960.223,1203.72 960.81,1202.75 961.396,1203.12 961.982,1204.83 962.569,1206.61 963.155,1208.14 963.742,1206.76 964.328,1205.82 964.915,1206.06 965.501,1210.05 966.087,1206.19 966.674,1206.2 967.26,1206.27 967.847,1207.81 968.433,1209.04 969.019,1213.08 969.606,1216.7 970.192,1215.05 970.779,1215.02 971.365,1216.04 971.951,1219.45 972.538,1216.39 973.124,1217.42 973.711,1215.85 974.297,1214.47 974.884,1210.45 975.47,1210.44 976.056,1211.65 976.643,1210.18 977.229,1209.81 977.816,1211.05 978.402,1210.99 978.988,1208.64 979.575,1210.21 980.161,1211.58 980.748,1212.87 981.334,1213.89 981.92,1209.74 982.507,1206.12 983.093,1206.04 983.68,1199.58 984.266,1197.38 984.853,1196.72 985.439,1197.58 986.025,1196.98 986.612,1196.65 987.198,1198.74 987.785,1200.66 988.371,1203.68 988.957,1206.68 989.544,1207.92 990.13,1209.32 990.717,1210.62 991.303,1210.39 991.889,1214.43 992.476,1211.32 993.062,1212.52 993.649,1214.77 994.235,1214.46 994.822,1212.8 995.408,1213.8 995.994,1213.62 996.581,1214.9 997.167,1214.67 997.754,1215.76 998.34,1214.24 998.926,1213.8 999.513,1208.21 1000.1,1206.62 1000.69,1208.26 1001.27,1209.61 1001.86,1207.05 1002.44,1206.02 1003.03,1202.5 1003.62,1202.87 1004.2,1200.77 1004.79,1202.61 1005.38,1201.61 1005.96,1201.04 1006.55,1201.61 1007.14,1199.62 1007.72,1197.63 1008.31,1199.77 1008.9,1202.78 1009.48,1201.98 1010.07,1206.46 1010.65,1208.05 1011.24,1207.15 1011.83,1206.09 1012.41,1207.98 1013,1209.17 1013.59,1210.62 1014.17,1209.2 1014.76,1210.57 1015.35,1213.42 1015.93,1214.76 1016.52,1209.23 1017.11,1207.83 1017.69,1206.74 1018.28,1209.7 1018.86,1212.4 1019.45,1209.85 1020.04,1209.7 1020.62,1210.93 1021.21,1210.91 1021.8,1209.74 1022.38,1211.24 1022.97,1211.13 1023.56,1208.3 1024.14,1209.52 1024.73,1209.75 1025.32,1209.69 1025.9,1207.13 1026.49,1206.1 1027.07,1204.8 1027.66,1206.49 1028.25,1208.23 1028.83,1209.92 1029.42,1208.83 1030.01,1210.16 1030.59,1207.37 1031.18,1207.24 1031.77,1207.75 1032.35,1208.83 1032.94,1209.85 1033.52,1211.28 1034.11,1209.56 1034.7,1210.96 1035.28,1213.61 1035.87,1214.54 1036.46,1214.39 1037.04,1214.22 1037.63,1215.55 1038.22,1215.37 1038.8,1218.7 1039.39,1217.22 1039.98,1212.7 1040.56,1211.14 1041.15,1209.82 1041.73,1212.44 1042.32,1212.09 1042.91,1213.29 1043.49,1211.69 1044.08,1213.2 1044.67,1213.37 1045.25,1213.14 1045.84,1212.95 1046.43,1211.83 1047.01,1213.24 1047.6,1214.54 1048.19,1215.64 1048.77,1214.09 1049.36,1214.11 1049.94,1213.81 1050.53,1213.74 1051.12,1212.51 1051.7,1212.54 1052.29,1211.14 1052.88,1211.52 1053.46,1208.77 1054.05,1208.78 1054.64,1209.94 1055.22,1209.73 1055.81,1210.72 1056.39,1210.9 1056.98,1212.07 1057.57,1211.78 1058.15,1214.23 1058.74,1217.9 1059.33,1217.63 1059.91,1217.25 1060.5,1216.94 1061.09,1216.62 1061.67,1218.83 1062.26,1217.22 1062.85,1218.11 1063.43,1217.71 1064.02,1217.2 1064.6,1216.7 1065.19,1217.69 1065.78,1214.86 1066.36,1216.11 1066.95,1218.6 1067.54,1216.61 1068.12,1213.43 1068.71,1211.91 1069.3,1209.3 1069.88,1209.34 1070.47,1212.42 1071.06,1214.97 1071.64,1213.45 1072.23,1211.98 1072.81,1211.59 1073.4,1210.36 1073.99,1210.17 1074.57,1212.59 1075.16,1213.8 1075.75,1213.87 1076.33,1214.08 1076.92,1214.09 1077.51,1213.4 1078.09,1213.13 1078.68,1212.73 1079.26,1212.48 1079.85,1211.04 1080.44,1212.35 1081.02,1212.05 1081.61,1211.86 1082.2,1211.62 1082.78,1207.67 1083.37,1206.54 1083.96,1206.81 1084.54,1206.99 1085.13,1206.09 1085.72,1207.43 1086.3,1206.26 1086.89,1206.65 1087.47,1206.73 1088.06,1207.95 1088.65,1209.01 1089.23,1206.49 1089.82,1205.14 1090.41,1204.18 1090.99,1203.03 1091.58,1202.04 1092.17,1202.59 1092.75,1203.11 1093.34,1203.36 1093.93,1204.02 1094.51,1204.35 1095.1,1205 1095.68,1206.42 1096.27,1206.53 1096.86,1205.46 1097.44,1207.07 1098.03,1207.31 1098.62,1207.74 1099.2,1206.47 1099.79,1205.51 1100.38,1206.92 1100.96,1209.73 1101.55,1208.47 1102.14,1207.2 1102.72,1207.32 1103.31,1206.24 1103.89,1207.5 1104.48,1208.77 1105.07,1209.06 1105.65,1208.9 1106.24,1207.45 1106.83,1207.61 1107.41,1206.39 1108,1204.03 1108.59,1204.18 1109.17,1205.75 1109.76,1207.21 1110.34,1209.94 1110.93,1208.94 1111.52,1210.18 1112.1,1205.01 1112.69,1205.17 1113.28,1205.59 1113.86,1206.03 1114.45,1207.67 1115.04,1209.1 1115.62,1210.58 1116.21,1210.62 1116.8,1213.2 1117.38,1213.17 1117.97,1211.61 1118.55,1212.88 1119.14,1214.21 1119.73,1212.47 1120.31,1209.81 1120.9,1207.15 1121.49,1208.64 1122.07,1206.27 1122.66,1207.87 1123.25,1208.08 1123.83,1209.39 1124.42,1209.74 1125.01,1205.81 1125.59,1205.89 1126.18,1208.74 1126.76,1209.01 1127.35,1210.52 1127.94,1211.85 1128.52,1213.01 1129.11,1215.48 1129.7,1215.47 1130.28,1214.88 1130.87,1213.26 1131.46,1215.58 1132.04,1213.94 1132.63,1212.27 1133.21,1211.05 1133.8,1210.91 1134.39,1208.24 1134.97,1209.68 1135.56,1211 1136.15,1210.94 1136.73,1210.88 1137.32,1209.4 1137.91,1207.99 1138.49,1208.11 1139.08,1209.44 1139.67,1212.09 1140.25,1213.2 1140.84,1212.79 1141.42,1213.86 1142.01,1212.37 1142.6,1211.16 1143.18,1211.1 1143.77,1205.98 1144.36,1206.52 1144.94,1209.33 1145.53,1209.57 1146.12,1211.08 1146.7,1208.57 1147.29,1206 1147.88,1208.62 1148.46,1208.77 1149.05,1211.34 1149.63,1209.95 1150.22,1209.64 1150.81,1205.51 1151.39,1207.01 1151.98,1207.23 1152.57,1210.19 1153.15,1210.16 1153.74,1209.9 1154.33,1210.12 1154.91,1210.19 1155.5,1206.07 1156.09,1204.87 1156.67,1204.86 1157.26,1205.21 1157.84,1207.87 1158.43,1207.99 1159.02,1208.22 1159.6,1205.49 1160.19,1202.92 1160.78,1201.87 1161.36,1203.62 1161.95,1205.35 1162.54,1201.84 1163.12,1204.77 1163.71,1206.52 1164.29,1208.22 1164.88,1205.83 1165.47,1206.24 1166.05,1206.32 1166.64,1206.55 1167.23,1206.75 1167.81,1208.38 1168.4,1209.73 1168.99,1208.64 1169.57,1208.6 1170.16,1208.44 1170.75,1206.92 1171.33,1209.53 1171.92,1208.21 1172.5,1207.13 1173.09,1206.01 1173.68,1206.59 1174.26,1208.01 1174.85,1207 1175.44,1207.22 1176.02,1208.86 1176.61,1206.45 1177.2,1203.95 1177.78,1208.15 1178.37,1212.19 1178.96,1211.76 1179.54,1214.28 1180.13,1213.72 1180.71,1213.59 1181.3,1213.43 1181.89,1213.4 1182.47,1212.77 1183.06,1212.74 1183.65,1212.97 1184.23,1213.18 1184.82,1212.79 1185.41,1212.57 1185.99,1211.25 1186.58,1209.85 1187.16,1212.5 1187.75,1214.91 1188.34,1214.91 1188.92,1214.45 1189.51,1214.03 1190.1,1213.54 1190.68,1214.4 1191.27,1215.25 1191.86,1216.09 1192.44,1216.79 1193.03,1217.83 1193.62,1217.2 1194.2,1218.14 1194.79,1216.42 1195.37,1217.42 1195.96,1217.04 1196.55,1218.04 1197.13,1216.31 1197.72,1214.69 1198.31,1211.55 1198.89,1211.47 1199.48,1211.54 1200.07,1212.76 1200.65,1212.61 1201.24,1212.33 1201.83,1210.87 1202.41,1212.26 1203,1212.06 1203.58,1211.81 1204.17,1210.42 1204.76,1210.59 1205.34,1210.49 1205.93,1211.68 1206.52,1210.23 1207.1,1211.63 1207.69,1212.53 1208.28,1211.02 1208.86,1212.11 1209.45,1214.59 1210.03,1213.18 1210.62,1214.24 1211.21,1211.39 1211.79,1208.3 1212.38,1208.4 1212.97,1205.82 1213.55,1207.17 1214.14,1206.22 1214.73,1203.62 1215.31,1206.74 1215.9,1206.63 1216.49,1206.87 1217.07,1207.1 1217.66,1208.67 1218.24,1210.2 1218.83,1212.57 1219.42,1212.49 1220,1210.12 1220.59,1210.06 1221.18,1208.56 1221.76,1208.24 1222.35,1208.51 1222.94,1208.65 1223.52,1210.03 1224.11,1207.34 1224.7,1208.76 1225.28,1208.59 1225.87,1206.92 1226.45,1207.17 1227.04,1209.87 1227.63,1212.32 1228.21,1212.29 1228.8,1214.7 1229.39,1215.76 1229.97,1215.69 1230.56,1214.34 1231.15,1215.58 1231.73,1211.26 1232.32,1211.26 1232.91,1212.36 1233.49,1212.08 1234.08,1213.12 1234.66,1212.99 1235.25,1210.56 1235.84,1212.99 1236.42,1215.09 1237.01,1213.42 1237.6,1213.32 1238.18,1212.04 1238.77,1212.02 1239.36,1213.24 1239.94,1216.62 1240.53,1217.69 1241.11,1217.41 1241.7,1218.24 1242.29,1216.51 1242.87,1218.46 1243.46,1216.84 1244.05,1216.56 1244.63,1216.34 1245.22,1216.09 1245.81,1218.45 1246.39,1220.67 1246.98,1221.1 1247.57,1217.8 1248.15,1217.77 1248.74,1216.18 1249.32,1215.68 1249.91,1212.8 1250.5,1212.64 1251.08,1211 1251.67,1213.52 1252.26,1213.16 1252.84,1210.59 1253.43,1210.31 1254.02,1212.95 1254.6,1211.63 1255.19,1209.02 1255.78,1207.77 1256.36,1207.63 1256.95,1206.25 1257.53,1207.7 1258.12,1206.38 1258.71,1205.3 1259.29,1204.22 1259.88,1204.41 1260.47,1207.4 1261.05,1206.37 1261.64,1207.76 1262.23,1210.21 1262.81,1211.42 1263.4,1215.16 1263.98,1217.43 1264.57,1218.39 1265.16,1216.62 1265.74,1216.45 1266.33,1214.87 1266.92,1218.3 1267.5,1216.39 1268.09,1217.23 1268.68,1212.78 1269.26,1213.67 1269.85,1213.53 1270.44,1209.71 1271.02,1211 1271.61,1210.86 1272.19,1210.39 1272.78,1209.17 1273.37,1211.78 1273.95,1210.33 1274.54,1210.2 1275.13,1210.14 1275.71,1212.88 1276.3,1211.4 1276.89,1211.55 1277.47,1211.37 1278.06,1213.9 1278.65,1212.37 1279.23,1212.54 1279.82,1212.3 1280.4,1211.11 1280.99,1208.44 1281.58,1209.76 1282.16,1211.12 1282.75,1209.82 1283.34,1208.47 1283.92,1209.83 1284.51,1207.46 1285.1,1207.9 1285.68,1207.72 1286.27,1209.19 1286.86,1210.8 1287.44,1211.98 1288.03,1212.07 1288.61,1213.18 1289.2,1210.35 1289.79,1210.13 1290.37,1207.58 1290.96,1202.71 1291.55,1201.8 1292.13,1200.87 1292.72,1199.76 1293.31,1203.02 1293.89,1202.14 1294.48,1199.93 1295.06,1198.95 1295.65,1203.44 1296.24,1203.91 1296.82,1207.1 1297.41,1207.21 1298,1207.25 1298.58,1207.55 1299.17,1210.09 1299.76,1210.02 1300.34,1211.47 1300.93,1208.35 1301.52,1209.9 1302.1,1210.1 1302.69,1210.15 1303.27,1211.32 1303.86,1213.58 1304.45,1213.41 1305.03,1212.88 1305.62,1211.5 1306.21,1209.97 1306.79,1207.38 1307.38,1208.89 1307.97,1210.26 1308.55,1207.6 1309.14,1206.5 1309.73,1206.61 1310.31,1205.65 1310.9,1204.3 1311.48,1204.58 1312.07,1204.83 1312.66,1209.2 1313.24,1207.71 1313.83,1206.41 1314.42,1206.76 1315,1208.3 1315.59,1208.37 1316.18,1209.57 1316.76,1209.58 1317.35,1210.83 1317.93,1209.41 1318.52,1210.59 1319.11,1209.46 1319.69,1209.21 1320.28,1209.16 1320.87,1209.43 1321.45,1209.41 1322.04,1206.92 1322.63,1207.28 1323.21,1209.96 1323.8,1210.48 1324.39,1209.09 1324.97,1209.43 1325.56,1213.2 1326.14,1213.43 1326.73,1215.72 1327.32,1212.79 1327.9,1214.08 1328.49,1215.34 1329.08,1216.26 1329.66,1217.09 1330.25,1214.16 1330.84,1212.69 1331.42,1213.58 1332.01,1215.96 1332.6,1215.51 1333.18,1213.64 1333.77,1214.82 1334.35,1214.55 1334.94,1213.12 1335.53,1212.83 1336.11,1211.25 1336.7,1212.77 1337.29,1213.94 1337.87,1214.95 1338.46,1213.28 1339.05,1212.15 1339.63,1208.28 1340.22,1207.16 1340.8,1207.25 1341.39,1204.61 1341.98,1207.27 1342.56,1204.56 1343.15,1204.62 1343.74,1206.23 1344.32,1208.95 1344.91,1207.49 1345.5,1206.26 1346.08,1208.01 1346.67,1211.89 1347.26,1212.84 1347.84,1212.48 1348.43,1211.07 1349.01,1211.09 1349.6,1210.98 1350.19,1212.43 1350.77,1213.7 1351.36,1213.36 1351.95,1212.94 1352.53,1210.01 1353.12,1211.08 1353.71,1209.59 1354.29,1205.94 1354.88,1206.32 1355.47,1206.76 1356.05,1207.11 1356.64,1207.18 1357.22,1208.74 1357.81,1211.63 1358.4,1211.66 1358.98,1212.82 1359.57,1212.72 1360.16,1211.15 1360.74,1211.07 1361.33,1212.37 1361.92,1207.96 1362.5,1205.16 1363.09,1201.58 1363.68,1202.13 1364.26,1202.35 1364.85,1204.17 1365.43,1206.84 1366.02,1207.05 1366.61,1206.9 1367.19,1208.3 1367.78,1205.92 1368.37,1206.34 1368.95,1206.64 1369.54,1205.58 1370.13,1205.83 1370.71,1207.35 1371.3,1206.21 1371.88,1205.26 1372.47,1205.55 1373.06,1204.59 1373.64,1203.47 1374.23,1205.14 1374.82,1203.97 1375.4,1204.51 1375.99,1203.43 1376.58,1203.92 1377.16,1203.94 1377.75,1205.74 1378.34,1208.36 1378.92,1206.9 1379.51,1208.19 1380.09,1208.49 1380.68,1208.51 1381.27,1208.57 1381.85,1209.97 1382.44,1209.99 1383.03,1209.99 1383.61,1209.88 1384.2,1206.42 1384.79,1207.92 1385.37,1206.4 1385.96,1205.55 1386.55,1204.45 1387.13,1204.79 1387.72,1205.07 1388.3,1205.32 1388.89,1206.69 1389.48,1206.69 1390.06,1205.63 1390.65,1204.66 1391.24,1204.62 1391.82,1208.92 1392.41,1207.87 1393,1208.04 1393.58,1208.24 1394.17,1207.14 1394.75,1210.94 1395.34,1210.77 1395.93,1213.35 1396.51,1213.1 1397.1,1211.76 1397.69,1211.42 1398.27,1209.94 1398.86,1208.65 1399.45,1207.6 1400.03,1206.18 1400.62,1204.96 1401.21,1206.56 1401.79,1205.2 1402.38,1204.23 1402.96,1203.09 1403.55,1208.84 1404.14,1210.1 1404.72,1211.56 1405.31,1210.09 1405.9,1210.35 1406.48,1209.02 1407.07,1209.35 1407.66,1210.51 1408.24,1209.04 1408.83,1210.19 1409.42,1210.4 1410,1210.31 1410.59,1210.23 1411.17,1211.58 1411.76,1211.33 1412.35,1207.44 1412.93,1208.86 1413.52,1207.41 1414.11,1206.16 1414.69,1206.5 1415.28,1203.94 1415.87,1206.81 1416.45,1209.49 1417.04,1207.03 1417.63,1205.98 1418.21,1203.7 1418.8,1205.22 1419.38,1205.49 1419.97,1205.39 1420.56,1205.46 1421.14,1204.54 1421.73,1203.64 1422.32,1202.82 1422.9,1203.37 1423.49,1200.98 1424.08,1200.15 1424.66,1201.9 1425.25,1202.56 1425.83,1203.23 1426.42,1202.19 1427.01,1201.35 1427.59,1200.48 1428.18,1200.81 1428.77,1202.71 1429.35,1203.31 1429.94,1202.28 1430.53,1202.57 1431.11,1201.66 1431.7,1203.34 1432.29,1206.6 1432.87,1205.74 1433.46,1206.05 1434.04,1204.92 1434.63,1202.77 1435.22,1200.62 1435.8,1200.88 1436.39,1203.89 1436.98,1205.38 1437.56,1205.62 1438.15,1207.18 1438.74,1208.5 1439.32,1208.61 1439.91,1208.93 1440.5,1210.21 1441.08,1212.93 1441.67,1213.88 1442.25,1215.09 1442.84,1214.83 1443.43,1214.37 1444.01,1215.38 1444.6,1214.97 1445.19,1214.59 1445.77,1214.35 1446.36,1216.63 1446.95,1217.47 1447.53,1217.14 1448.12,1216.68 1448.7,1217.78 1449.29,1217.21 1449.88,1220.8 1450.46,1218.83 1451.05,1216.09 1451.64,1215.66 1452.22,1215.1 1452.81,1217.45 1453.4,1215.58 1453.98,1216.41 1454.57,1214.98 1455.16,1213.43 1455.74,1213.24 1456.33,1212.92 1456.91,1214.08 1457.5,1212.16 1458.09,1212.14 1458.67,1210.5 1459.26,1210.37 1459.85,1211.76 1460.43,1212.91 1461.02,1213.92 1461.61,1212.55 1462.19,1213.65 1462.78,1215.92 1463.37,1217.03 1463.95,1215.25 1464.54,1215.1 1465.12,1215.81 1465.71,1215.36 1466.3,1216.32 1466.88,1213.26 1467.47,1211.71 1468.06,1211.71 1468.64,1210.26 1469.23,1212.73 1469.82,1213.82 1470.4,1214.92 1470.99,1212.13 1471.57,1213.18 1472.16,1212.97 1472.75,1214.05 1473.33,1212.45 1473.92,1213.66 1474.51,1211.95 1475.09,1210.26 1475.68,1209.88 1476.27,1209.85 1476.85,1209.81 1477.44,1211.13 1478.03,1212.38 1478.61,1214.69 1479.2,1214.45 1479.78,1211.64 1480.37,1212.96 1480.96,1212.93 1481.54,1215.23 1482.13,1211.13 1482.72,1213.71 1483.3,1214.86 1483.89,1210.77 1484.48,1213.34 1485.06,1213.32 1485.65,1211.74 1486.24,1210.56 1486.82,1210.38 1487.41,1210.35 1487.99,1212.78 1488.58,1217.88 1489.17,1217.39 1489.75,1216.98 1490.34,1214.16 1490.93,1213.79 1491.51,1212.56 1492.1,1212.5 1492.69,1211.21 1493.27,1215.33 1493.86,1214.83 1494.45,1215.72 1495.03,1217.89 1495.62,1218.71 1496.2,1218.27 1496.79,1216.3 1497.38,1213.44 1497.96,1215.72 1498.55,1214.17 1499.14,1215.41 1499.72,1210.09 1500.31,1209.87 1500.9,1209.69 1501.48,1210.96 1502.07,1213.62 1502.65,1214.77 1503.24,1214.09 1503.83,1215.05 1504.41,1216.23 1505,1212.98 1505.59,1210.03 1506.17,1211.26 1506.76,1210.16 1507.35,1211.68 1507.93,1212.9 1508.52,1212.74 1509.11,1211.12 1509.69,1210.84 1510.28,1210.81 1510.86,1209.42 1511.45,1209.35 1512.04,1210.85 1512.62,1209.66 1513.21,1208.32 1513.8,1205.74 1514.38,1203.26 1514.97,1201.08 1515.56,1199.08 1516.14,1199.61 1516.73,1200.33 1517.32,1199.55 1517.9,1201.48 1518.49,1199.26 1519.07,1198.57 1519.66,1200.3 1520.25,1200.79 1520.83,1202.29 1521.42,1202.57 1522.01,1203.02 1522.59,1203.35 1523.18,1205.12 1523.77,1205.36 1524.35,1204.44 1524.94,1204.99 1525.52,1207.65 1526.11,1207.91 1526.7,1208.17 1527.28,1205.86 1527.87,1204.88 1528.46,1206.46 1529.04,1206.59 1529.63,1210.56 1530.22,1206.6 1530.8,1206.77 1531.39,1205.69 1531.98,1207.28 1532.56,1206.29 1533.15,1206.67 1533.73,1208.3 1534.32,1208.31 1534.91,1209.9 1535.49,1212.42 1536.08,1213.51 1536.67,1213.5 1537.25,1210.63 1537.84,1212.19 1538.43,1206.83 1539.01,1204.13 1539.6,1207 1540.19,1207.05 1540.77,1207.4 1541.36,1208.72 1541.94,1208.72 1542.53,1207.35 1543.12,1206.38 1543.7,1205.12 1544.29,1203.9 1544.88,1204.38 1545.46,1200.95 1546.05,1198.94 1546.64,1199.56 1547.22,1201.08 1547.81,1201.69 1548.4,1203.32 1548.98,1203.82 1549.57,1204.09 1550.15,1204.57 1550.74,1203.17 1551.33,1203.52 1551.91,1205.32 1552.5,1204.06 1553.09,1204.36 1553.67,1204.43 1554.26,1203.34 1554.85,1205.08 1555.43,1205.23 1556.02,1205.36 1556.6,1205.84 1557.19,1207.36 1557.78,1208.84 1558.36,1210.18 1558.95,1210.3 1559.54,1213.13 1560.12,1214.16 1560.71,1213.62 1561.3,1214.6 1561.88,1214.26 1562.47,1214.2 1563.06,1213.76 1563.64,1210.84 1564.23,1205.55 1564.81,1204.6 1565.4,1204.96 1565.99,1206.44 1566.57,1204.93 1567.16,1206.29 1567.75,1207.71 1568.33,1205.14 1568.92,1206.54 1569.51,1209.34 1570.09,1209.19 1570.68,1208.18 1571.27,1208.34 1571.85,1207.26 1572.44,1209.89 1573.02,1212.36 1573.61,1212.65 1574.2,1211.16 1574.78,1211.13 1575.37,1210.8 1575.96,1210.79 1576.54,1211.8 1577.13,1210.54 1577.72,1210.64 1578.3,1210.54 1578.89,1211.68 1579.47,1211.6 1580.06,1212.9 1580.65,1212.44 1581.23,1212.21 1581.82,1210.72 1582.41,1209.57 1582.99,1210.84 1583.58,1210.75 1584.17,1212.07 1584.75,1212.19 1585.34,1215.02 1585.93,1214.71 1586.51,1213.13 1587.1,1214.45 1587.68,1213.05 1588.27,1212.95 1588.86,1213.8 1589.44,1214.75 1590.03,1214.8 1590.62,1216.12 1591.2,1217.25 1591.79,1215.63 1592.38,1215.37 1592.96,1215.35 1593.55,1211.14 1594.14,1208.51 1594.72,1209.68 1595.31,1210.85 1595.89,1208.05 1596.48,1208.33 1597.07,1207.29 1597.65,1207.37 1598.24,1210.39 1598.83,1210.62 1599.41,1211.67 1600,1211.47 1600.59,1211.41 1601.17,1211.24 1601.76,1208.56 1602.34,1207.4 1602.93,1208.67 1603.52,1207.62 1604.1,1209.2 1604.69,1205.37 1605.28,1206.86 1605.86,1205.8 1606.45,1208.49 1607.04,1205.99 1607.62,1206.36 1608.21,1206.75 1608.8,1203.14 1609.38,1202.25 1609.97,1202.58 1610.55,1204.28 1611.14,1204.45 1611.73,1204.58 1612.31,1203.89 1612.9,1205.42 1613.49,1204.21 1614.07,1204.35 1614.66,1204.53 1615.25,1203.45 1615.83,1206.49 1616.42,1205.37 1617.01,1206.85 1617.59,1204.48 1618.18,1204.59 1618.76,1206.45 1619.35,1211.84 1619.94,1214.15 1620.52,1213.7 1621.11,1213.57 1621.7,1215.93 1622.28,1215.45 1622.87,1215.11 1623.46,1213.66 1624.04,1212.11 1624.63,1213.34 1625.22,1210.67 1625.8,1213.16 1626.39,1213.02 1626.97,1212.65 1627.56,1212.6 1628.15,1207.13 1628.73,1208.39 1629.32,1209.65 1629.91,1209.92 1630.49,1211.14 1631.08,1211.08 1631.67,1210.87 1632.25,1214.5 1632.84,1211.44 1633.42,1211.51 1634.01,1211.22 1634.6,1208.36 1635.18,1207.3 1635.77,1207.45 1636.36,1208.97 1636.94,1208.91 1637.53,1208.88 1638.12,1209.05 1638.7,1207.92 1639.29,1209.13 1639.88,1210.56 1640.46,1209.3 1641.05,1209.47 1641.63,1210.71 1642.22,1209.48 1642.81,1211.71 1643.39,1213.09 1643.98,1211.62 1644.57,1208.76 1645.15,1208.76 1645.74,1209.75 1646.33,1209.78 1646.91,1208.6 1647.5,1207.34 1648.09,1209.96 1648.67,1215.04 1649.26,1216.04 1649.84,1218.13 1650.43,1218.94 1651.02,1217.31 1651.6,1214.28 1652.19,1215.55 1652.78,1215.41 1653.36,1215.35 1653.95,1212.64 1654.54,1212.56 1655.12,1211.08 1655.71,1212.26 1656.29,1210.99 1656.88,1209.52 1657.47,1206.71 1658.05,1208.19 1658.64,1204.09 1659.23,1204.29 1659.81,1204.84 1660.4,1204 1660.99,1203.02 1661.57,1205 1662.16,1204 1662.75,1206.68 1663.33,1209.19 1663.92,1209.16 1664.5,1207.63 1665.09,1206.42 1665.68,1205.17 1666.26,1205.39 1666.85,1204.23 1667.44,1205.91 1668.02,1206.14 1668.61,1209.17 1669.2,1207.8 1669.78,1207.91 1670.37,1211.73 1670.96,1210.47 1671.54,1211.83 1672.13,1209.21 1672.71,1209.34 1673.3,1210.67 1673.89,1210.65 1674.47,1209.41 1675.06,1206.71 1675.65,1205.52 1676.23,1205.58 1676.82,1204.6 1677.41,1200.89 1677.99,1200.19 1678.58,1200.75 1679.17,1201.16 1679.75,1201.44 1680.34,1201.93 1680.92,1204.78 1681.51,1204.05 1682.1,1204.19 1682.68,1204.66 1683.27,1203.6 1683.86,1203.79 1684.44,1205.77 1685.03,1208.56 1685.62,1207.44 1686.2,1206.3 1686.79,1206.29 1687.37,1206.27 1687.96,1206.5 1688.55,1205.61 1689.13,1209.28 1689.72,1212.93 1690.31,1215.3 1690.89,1216.13 1691.48,1219.83 1692.07,1217.95 1692.65,1221.35 1693.24,1220.82 1693.83,1221.78 1694.41,1222.46 1695,1221.83 1695.58,1220.08 1696.17,1216.87 1696.76,1216.4 1697.34,1213.52 1697.93,1210.64 1698.52,1210.35 1699.1,1212.77 1699.69,1211.39 1700.28,1210.85 1700.86,1209.49 1701.45,1209.45 1702.04,1206.81 1702.62,1209.2 1703.21,1207.87 1703.79,1206.47 1704.38,1206.46 1704.97,1209.2 1705.55,1212.96 1706.14,1215.17 1706.73,1216.41 1707.31,1213.43 1707.9,1209.11 1708.49,1210.38 1709.07,1213.12 1709.66,1211.66 1710.24,1211.2 1710.83,1214.91 1711.42,1215.16 1712,1214.93 1712.59,1213.4 1713.18,1214.82 1713.76,1218.45 1714.35,1215.69 1714.94,1211.11 1715.52,1209.58 1716.11,1209.67 1716.7,1209.34 1717.28,1210.38 1717.87,1211.57 1718.45,1212.68 1719.04,1210.9 1719.63,1211.84 1720.21,1214.23 1720.8,1215.63 1721.39,1216.63 1721.97,1212.38 1722.56,1214.78 1723.15,1213.16 1723.73,1211.55 1724.32,1211.51 1724.91,1208.94 1725.49,1211.4 1726.08,1212.8 1726.66,1212.6 1727.25,1214.28 1727.84,1214.16 1728.42,1214.03 1729.01,1211.17 1729.6,1210.91 1730.18,1209.49 1730.77,1209.54 1731.36,1208.23 1731.94,1206.58 1732.53,1201.52 1733.11,1203.15 1733.7,1204.75 1734.29,1204.97 1734.87,1206.39 1735.46,1206.33 1736.05,1205.13 1736.63,1205.32 1737.22,1205.4 1737.81,1207.18 1738.39,1207.06 1738.98,1206.95 1739.57,1208.28 1740.15,1202.02 1740.74,1202.46 1741.32,1201.3 1741.91,1204.52 1742.5,1205.91 1743.08,1204.56 1743.67,1207.24 1744.26,1205.1 1744.84,1205.23 1745.43,1209.35 1746.02,1208.22 1746.6,1208.7 1747.19,1207.26 1747.78,1207.39 1748.36,1208.93 1748.95,1207.68 1749.53,1207.66 1750.12,1207.59 1750.71,1208.77 1751.29,1210.39 1751.88,1207.73 1752.47,1207.7 1753.05,1207.71 1753.64,1206.96 1754.23,1208.56 1754.81,1206.12 1755.4,1206.27 1755.99,1209.01 1756.57,1211.23 1757.16,1208.62 1757.74,1210.34 1758.33,1211.64 1758.92,1211.5 1759.5,1208.9 1760.09,1211.53 1760.68,1212.81 1761.26,1211.46 1761.85,1208.75 1762.44,1208.91 1763.02,1211.57 1763.61,1210.31 1764.19,1209.17 1764.78,1209.26 1765.37,1209.28 1765.95,1210.65 1766.54,1207.97 1767.13,1208.2 1767.71,1208.39 1768.3,1208.36 1768.89,1209.84 1769.47,1212.69 1770.06,1212.86 1770.65,1210.14 1771.23,1208.88 1771.82,1206.56 1772.4,1209.45 1772.99,1210.42 1773.58,1210.29 1774.16,1211.45 1774.75,1212.5 1775.34,1211.26 1775.92,1211.44 1776.51,1210 1777.1,1213.67 1777.68,1214.79 1778.27,1214.29 1778.86,1211.77 1779.44,1214.26 1780.03,1214.12 1780.61,1213.96 1781.2,1215.14 1781.79,1212.29 1782.37,1208.41 1782.96,1211.25 1783.55,1209.94 1784.13,1209.74 1784.72,1210.84 1785.31,1209.56 1785.89,1209.36 1786.48,1209.44 1787.06,1208.45 1787.65,1208.69 1788.24,1208.85 1788.82,1209.9 1789.41,1211.06 1790,1210.71 1790.58,1212.05 1791.17,1212.07 1791.76,1212.02 1792.34,1213.06 1792.93,1213.73 1793.52,1213.49 1794.1,1211.94 1794.69,1210.32 1795.27,1210.12 1795.86,1211.49 1796.45,1212.71 1797.03,1212.65 1797.62,1215.25 1798.21,1217.55 1798.79,1215.89 1799.38,1213.01 1799.97,1215.26 1800.55,1213.92 1801.14,1212.53 1801.73,1212.49 1802.31,1212.51 1802.9,1212.61 1803.48,1213.84 1804.07,1217.42 1804.66,1214.23 1805.24,1211.32 1805.83,1210 1806.42,1208.68 1807,1210.1 1807.59,1210.18 1808.18,1211.37 1808.76,1212.94 1809.35,1213.89 1809.94,1215.05 1810.52,1211.88 1811.11,1211.49 1811.69,1211.29 1812.28,1209.85 1812.87,1208.63 1813.45,1211.23 1814.04,1209.79 1814.63,1209.8 1815.21,1208.54 1815.8,1208.5 1816.39,1209.84 1816.97,1208.37 1817.56,1208.15 1818.14,1207.07 1818.73,1205.99 1819.32,1203.68 1819.9,1203.08 1820.49,1202.11 1821.08,1206.24 1821.66,1211.61 1822.25,1210.07 1822.84,1210.07 1823.42,1208.92 1824.01,1207.96 1824.6,1208.04 1825.18,1209.48 1825.77,1209.57 1826.35,1209.63 1826.94,1209.55 1827.53,1208.37 1828.11,1207.42 1828.7,1208.73 1829.29,1208.89 1829.87,1209.09 1830.46,1209.18 1831.05,1209.24 1831.63,1210.51 1832.22,1210.22 1832.81,1207.46 1833.39,1206.14 1833.98,1206.22 1834.56,1206.53 1835.15,1205.31 1835.74,1205.66 1836.32,1205.99 1836.91,1204.85 1837.5,1205.01 1838.08,1202.74 1838.67,1205.97 1839.26,1206.14 1839.84,1205.1 1840.43,1207.76 1841.01,1202.82 1841.6,1203.24 1842.19,1202.48 1842.77,1202.64 1843.36,1204.4 1843.95,1207.42 1844.53,1210.11 1845.12,1208.91 1845.71,1209.19 1846.29,1206.36 1846.88,1207.84 1847.47,1208.17 1848.05,1208.28 1848.64,1207.14 1849.22,1207.26 1849.81,1207.33 1850.4,1206.17 1850.98,1206.44 1851.57,1207.76 1852.16,1207.79 1852.74,1207.6 1853.33,1206.39 1853.92,1205.08 1854.5,1206.75 1855.09,1206.82 1855.68,1211.12 1856.26,1213.45 1856.85,1212.14 1857.43,1211.88 1858.02,1209.31 1858.61,1204.53 1859.19,1204.78 1859.78,1206.24 1860.37,1205.3 1860.95,1204.37 1861.54,1204.57 1862.13,1207.28 1862.71,1208.79 1863.3,1206.55 1863.88,1205.59 1864.47,1205.82 1865.06,1207.13 1865.64,1207.36 1866.23,1207.13 1866.82,1204.54 1867.4,1204.95 1867.99,1206.43 1868.58,1206.64 1869.16,1205.47 1869.75,1205.53 1870.34,1209.66 1870.92,1209.7 1871.51,1209.75 1872.09,1210.04 1872.68,1208.56 1873.27,1207.58 1873.85,1208.84 1874.44,1207.64 1875.03,1209.02 1875.61,1209.04 1876.2,1210.27 1876.79,1210.18 1877.37,1211.32 1877.96,1205.88 1878.55,1204.56 1879.13,1204.71 1879.72,1205.26 1880.3,1205.53 1880.89,1206.97 1881.48,1206.92 1882.06,1211.15 1882.65,1212.54 1883.24,1213.62 1883.82,1213.16 1884.41,1211.85 1885,1211.79 1885.58,1214.76 1886.17,1214.32 1886.76,1211.23 1887.34,1210.88 1887.93,1210.86 1888.51,1210.82 1889.1,1208.26 1889.69,1209.51 1890.27,1209.69 1890.86,1208.34 1891.45,1208.42 1892.03,1208.57 1892.62,1209.86 1893.21,1212.44 1893.79,1210.93 1894.38,1207.07 1894.96,1208.44 1895.55,1206.97 1896.14,1205.91 1896.72,1208.43 1897.31,1208.56 1897.9,1209.94 1898.48,1207.26 1899.07,1208.69 1899.66,1208.79 1900.24,1204.69 1900.83,1206.01 1901.42,1209.03 1902,1212.97 1902.59,1214.2 1903.17,1215.35 1903.76,1217.56 1904.35,1217.02 1904.93,1215.57 1905.52,1216.21 1906.11,1214.56 1906.69,1214.45 1907.28,1215.55 1907.87,1212.55 1908.45,1211.06 1909.04,1207.09 1909.63,1208.33 1910.21,1208.05 1910.8,1209.52 1911.38,1209.65 1911.97,1211.07 1912.56,1213.32 1913.14,1215.61 1913.73,1215.39 1914.32,1217.6 1914.9,1217.11 1915.49,1213.93 1916.08,1213.77 1916.66,1213.55 1917.25,1213.45 1917.83,1213.23 1918.42,1213.13 1919.01,1211.87 1919.59,1210.49 1920.18,1210.41 1920.77,1208.91 1921.35,1210.26 1921.94,1210.06 1922.53,1210.16 1923.11,1210.19 1923.7,1214.21 1924.29,1213.91 1924.87,1210.85 1925.46,1210.51 1926.04,1213.05 1926.63,1214.17 1927.22,1215.23 1927.8,1213.89 1928.39,1213.79 1928.98,1210.97 1929.56,1211.98 1930.15,1213.35 1930.74,1213.18 1931.32,1215.48 1931.91,1216.44 1932.5,1213.45 1933.08,1214.72 1933.67,1213.23 1934.25,1213 1934.84,1211.44 1935.43,1211.42 1936.01,1207.45 1936.6,1205.04 1937.19,1205.44 1937.77,1205.53 1938.36,1207.15 1938.95,1207.37 1939.53,1208.55 1940.12,1208.32 1940.71,1211.09 1941.29,1213.78 1941.88,1210.71 1942.46,1209.58 1943.05,1209.28 1943.64,1208.09 1944.22,1209.61 1944.81,1210.54 1945.4,1209.14 1945.98,1205.33 1946.57,1205.82 1947.16,1207.09 1947.74,1208.49 1948.33,1211.13 1948.91,1212.35 1949.5,1212.23 1950.09,1214.58 1950.67,1214.29 1951.26,1212.52 1951.85,1213.49 1952.43,1212.1 1953.02,1208.15 1953.61,1209.25 1954.19,1207.77 1954.78,1206.5 1955.37,1205.31 1955.95,1204.04 1956.54,1201.7 1957.12,1200.43 1957.71,1201.98 1958.3,1203.7 1958.88,1204.1 1959.47,1203.02 1960.06,1207.29 1960.64,1208.7 1961.23,1210.09 1961.82,1210.04 1962.4,1209.94 1962.99,1208.59 1963.58,1209.99 1964.16,1209.99 1964.75,1208.79 1965.33,1207.84 1965.92,1209.01 1966.51,1210.18 1967.09,1210.3 1967.68,1211.66 1968.27,1211.55 1968.85,1211.47 1969.44,1212.31 1970.03,1211.87 1970.61,1211.97 1971.2,1212.77 1971.78,1215.18 1972.37,1213.72 1972.96,1212.24 1973.54,1210.98 1974.13,1210.67 1974.72,1209.37 1975.3,1212.1 1975.89,1215.8 1976.48,1215.59 1977.06,1211.25 1977.65,1212.44 1978.24,1209.45 1978.82,1212.21 1979.41,1210.72 1979.99,1209.33 1980.58,1209.47 1981.17,1210.95 1981.75,1212.5 1982.34,1213.73 1982.93,1214.79 1983.51,1218.28 1984.1,1218.01 1984.69,1220.43 1985.27,1222.63 1985.86,1220.62 1986.45,1220.24 1987.03,1223.6 1987.62,1222.68 1988.2,1220.48 1988.79,1218.77 1989.38,1217.02 1989.96,1213.93 1990.55,1212.38 1991.14,1211.05 1991.72,1210.61 1992.31,1210.65 1992.9,1210.36 1993.48,1207.52 1994.07,1210.45 1994.65,1208.99 1995.24,1209.02 1995.83,1207.9 1996.41,1210.41 1997,1211.75 1997.59,1211.43 1998.17,1213.85 1998.76,1214.94 1999.35,1212.31 1999.93,1212.51 2000.52,1212.41 2001.11,1208.59 2001.69,1209.92 2002.28,1208.53 2002.86,1207.25 2003.45,1207.32 2004.04,1207.45 2004.62,1207.57 2005.21,1207.51 2005.8,1209.12 2006.38,1210.54 2006.97,1209.22 2007.56,1208.34 2008.14,1204.55 2008.73,1206.43 2009.32,1206.29 2009.9,1207.73 2010.49,1209.27 2011.07,1209.12 2011.66,1211.59 2012.25,1215.26 2012.83,1216.17 2013.42,1214.47 2014.01,1214.19 2014.59,1213.75 2015.18,1213.41 2015.77,1213.05 2016.35,1210.61 2016.94,1214.34 2017.53,1212.91 2018.11,1212.76 2018.7,1212.61 2019.28,1212.54 2019.87,1210.9 2020.46,1211.69 2021.04,1211.6 2021.63,1212.95 2022.22,1213.86 2022.8,1215.95 2023.39,1214.31 2023.98,1212.49 2024.56,1212.38 2025.15,1213.81 2025.73,1212.16 2026.32,1210.75 2026.91,1212.16 2027.49,1209.48 2028.08,1210.82 2028.67,1212.06 2029.25,1208.21 2029.84,1208.13 2030.43,1205.77 2031.01,1206.34 2031.6,1205.34 2032.19,1207.21 2032.77,1206.01 2033.36,1206.36 2033.94,1206.58 2034.53,1206.76 2035.12,1209.43 2035.7,1207.93 2036.29,1207.95 2036.88,1208.21 2037.46,1210.56 2038.05,1209.41 2038.64,1208.14 2039.22,1209.48 2039.81,1206.72 2040.4,1208.12 2040.98,1208.17 2041.57,1207.03 2042.15,1205.77 2042.74,1207.34 2043.33,1208.83 2043.91,1210.1 2044.5,1208.66 2045.09,1210.14 2045.67,1210.9 2046.26,1212.11 2046.85,1209.55 2047.43,1210.91 2048.02,1209.8 2048.6,1209.83 2049.19,1206.1 2049.78,1206.39 2050.36,1209.17 2050.95,1212.95 2051.54,1212.71 2052.12,1212.37 2052.71,1211.05 2053.3,1209.87 2053.88,1211.32 2054.47,1211.69 2055.06,1210.55 2055.64,1210.53 2056.23,1206.47 2056.81,1210.6 2057.4,1209.63 2057.99,1208.25 2058.57,1203.07 2059.16,1201.97 2059.75,1202.5 2060.33,1202.89 2060.92,1203.32 2061.51,1208.81 2062.09,1212.76 2062.68,1211.44 2063.27,1212.51 2063.85,1212.28 2064.44,1210.88 2065.02,1210.73 2065.61,1209.55 2066.2,1208.16 2066.78,1203.14 2067.37,1207.45 2067.96,1206.09 2068.54,1208.75 2069.13,1209.96 2069.72,1205.73 2070.3,1205.92 2070.89,1206.02 2071.48,1207.49 2072.06,1211.46 2072.65,1211.75 2073.23,1210.35 2073.82,1211.57 2074.41,1210.25 2074.99,1208.98 2075.58,1205.47 2076.17,1208.25 2076.75,1207.29 2077.34,1204.85 2077.93,1204.9 2078.51,1208.79 2079.1,1211.23 2079.68,1209.78 2080.27,1208.23 2080.86,1208.31 2081.44,1211.21 2082.03,1210 2082.62,1211.28 2083.2,1209.92 2083.79,1209.94 2084.38,1207.27 2084.96,1208.69 2085.55,1210.26 2086.14,1212.66 2086.72,1210.27 2087.31,1210.09 2087.89,1208.89 2088.48,1207.79 2089.07,1206.56 2089.65,1205.41 2090.24,1206.93 2090.83,1204.47 2091.41,1203.51 2092,1203.86 2092.59,1202.96 2093.17,1206.05 2093.76,1206.27 2094.35,1206.97 2094.93,1209.64 2095.52,1211.17 2096.1,1213.56 2096.69,1209.59 2097.28,1209.79 2097.86,1208.58 2098.45,1208.79 2099.04,1211.72 2099.62,1210.42 2100.21,1209.29 2100.8,1212.94 2101.38,1214 2101.97,1209.88 2102.55,1212.53 2103.14,1212.69 2103.73,1209.83 2104.31,1208.78 2104.9,1207.59 2105.49,1207.68 2106.07,1205.39 2106.66,1204.28 2107.25,1204.57 2107.83,1204.92 2108.42,1206.51 2109.01,1205.23 2109.59,1208.08 2110.18,1210.65 2110.76,1210.9 2111.35,1209.66 2111.94,1212.27 2112.52,1214.73 2113.11,1215.62 2113.7,1211.41 2114.28,1211.17 2114.87,1208.46 2115.46,1208.23 2116.04,1209.62 2116.63,1209.56 2117.22,1209.51 2117.8,1208.07 2118.39,1207.02 2118.97,1207.18 2119.56,1207.03 2120.15,1206.07 2120.73,1203.83 2121.32,1203.83 2121.91,1204.2 2122.49,1203.11 2123.08,1202.18 2123.67,1202.28 2124.25,1203.93 2124.84,1205.34 2125.42,1206.6 2126.01,1204.33 2126.6,1208.39 2127.18,1208.29 2127.77,1209.7 2128.36,1209.92 2128.94,1208.81 2129.53,1208.61 2130.12,1208.6 2130.7,1209.92 2131.29,1209.83 2131.88,1208.38 2132.46,1208.52 2133.05,1204.73 2133.63,1205.04 2134.22,1206.53 2134.81,1205.67 2135.39,1207.23 2135.98,1206.3 2136.57,1207.64 2137.15,1210.13 2137.74,1212.82 2138.33,1212.75 2138.91,1213.88 2139.5,1213.84 2140.09,1212.55 2140.67,1212.35 2141.26,1211.05 2141.84,1210.92 2142.43,1209.7 2143.02,1207.22 2143.6,1207.07 2144.19,1207.23 2144.78,1208.88 2145.36,1209.04 2145.95,1209.19 2146.54,1209.22 2147.12,1206.83 2147.71,1208.48 2148.3,1208.74 2148.88,1213.99 2149.47,1213.86 2150.05,1212.43 2150.64,1213.66 2151.23,1214.97 2151.81,1217.52 2152.4,1218.34 2152.99,1217.46 2153.57,1218.22 2154.16,1216.68 2154.75,1214.84 2155.33,1214.64 2155.92,1216.86 2156.5,1217.92 2157.09,1216.19 2157.68,1214.56 2158.26,1211.66 \"/>\n<path clip-path=\"url(#clip402)\" d=\"M986.025 1210.12 L986.612 1210.12 L987.198 1210.12 L987.785 1210.12 L988.371 1210.12 L988.957 1210.12 L989.544 1210.12 L990.13 1210.12 L990.717 1210.12 L991.303 1210.12 L991.889 1210.12 L992.476 1210.12 L993.062 1210.12 L993.649 1210.12 L994.235 1210.12 L994.822 1210.12 L995.408 1210.12 L995.994 1210.12 L996.581 1210.12 L997.167 1210.12 L997.754 1210.12 L998.34 1210.12 L998.926 1210.12 L999.513 1210.12 L1000.1 1210.12 L1000.69 1210.12 L1001.27 1210.12 L1001.86 1210.12 L1002.44 1210.12 L1003.03 1210.12 L1003.62 1210.12 L1004.2 1210.12 L1004.79 1210.12 L1005.38 1210.12 L1005.96 1210.12 L1006.55 1210.12 L1007.14 1210.12 L1007.72 1210.12 L1008.31 1210.12 L1008.9 1210.12 L1009.48 1210.12 L1010.07 1210.12 L1010.65 1210.12 L1011.24 1210.12 L1011.83 1210.12 L1012.41 1210.12 L1013 1210.12 L1013.59 1210.12 L1014.17 1210.12 L1014.76 1210.12 L1015.35 1210.12 L1015.93 1210.12 L1016.52 1210.12 L1017.11 1210.12 L1017.69 1210.12 L1018.28 1210.12 L1018.86 1210.12 L1019.45 1210.12 L1020.04 1210.12 L1020.62 1210.12 L1021.21 1210.12 L1021.8 1210.12 L1022.38 1210.12 L1022.97 1210.12 L1023.56 1210.12 L1024.14 1210.12 L1024.73 1210.12 L1025.32 1210.12 L1025.9 1210.12 L1026.49 1210.12 L1027.07 1210.12 L1027.66 1210.12 L1028.25 1210.12 L1028.83 1210.12 L1029.42 1210.12 L1030.01 1210.12 L1030.59 1210.12 L1031.18 1210.12 L1031.77 1210.12 L1032.35 1210.12 L1032.94 1210.12 L1033.52 1210.12 L1034.11 1210.12 L1034.7 1210.12 L1035.28 1210.12 L1035.87 1210.12 L1036.46 1210.12 L1037.04 1210.12 L1037.63 1210.12 L1038.22 1210.12 L1038.8 1210.12 L1039.39 1210.12 L1039.98 1210.12 L1040.56 1210.12 L1041.15 1210.12 L1041.73 1210.12 L1042.32 1210.12 L1042.91 1210.12 L1043.49 1210.12 L1044.08 1210.12 L1044.67 1210.12 L1045.25 1210.12 L1045.84 1210.12 L1046.43 1210.12 L1047.01 1210.12 L1047.6 1210.12 L1048.19 1210.12 L1048.77 1210.12 L1049.36 1210.12 L1049.94 1210.12 L1050.53 1210.12 L1051.12 1210.12 L1051.7 1210.12 L1052.29 1210.12 L1052.88 1210.12 L1053.46 1210.12 L1054.05 1210.12 L1054.64 1210.12 L1055.22 1210.12 L1055.81 1210.12 L1056.39 1210.12 L1056.98 1210.12 L1057.57 1210.12 L1058.15 1210.12 L1058.74 1210.12 L1059.33 1210.12 L1059.91 1210.12 L1060.5 1210.12 L1061.09 1210.12 L1061.67 1210.12 L1062.26 1210.12 L1062.85 1210.12 L1063.43 1210.12 L1064.02 1210.12 L1064.6 1210.12 L1065.19 1210.12 L1065.78 1210.12 L1066.36 1210.12 L1066.95 1210.12 L1067.54 1210.12 L1068.12 1210.12 L1068.71 1210.12 L1069.3 1210.12 L1069.88 1210.12 L1070.47 1210.12 L1071.06 1210.12 L1071.64 1210.12 L1072.23 1210.12 L1072.81 1210.12 L1073.4 1210.12 L1073.99 1210.12 L1074.57 1210.12 L1075.16 1210.12 L1075.75 1210.12 L1076.33 1210.12 L1076.92 1210.12 L1077.51 1210.12 L1078.09 1210.12 L1078.68 1210.12 L1079.26 1210.12 L1079.85 1210.12 L1080.44 1210.12 L1081.02 1210.12 L1081.61 1210.12 L1082.2 1210.12 L1082.78 1210.12 L1083.37 1210.12 L1083.96 1210.12 L1084.54 1210.12 L1085.13 1210.12 L1085.72 1210.12 L1086.3 1210.12 L1086.89 1210.12 L1087.47 1210.12 L1088.06 1210.12 L1088.65 1210.12 L1089.23 1210.12 L1089.82 1210.12 L1090.41 1210.12 L1090.99 1210.12 L1091.58 1210.12 L1092.17 1210.12 L1092.75 1210.12 L1093.34 1210.12 L1093.93 1210.12 L1094.51 1210.12 L1095.1 1210.12 L1095.68 1210.12 L1096.27 1210.12 L1096.86 1210.12 L1097.44 1210.12 L1098.03 1210.12 L1098.62 1210.12 L1099.2 1210.12 L1099.79 1210.12 L1100.38 1210.12 L1100.96 1210.12 L1101.55 1210.12 L1102.14 1210.12 L1102.72 1210.12 L1103.31 1210.12 L1103.89 1210.12 L1104.48 1210.12 L1105.07 1210.12 L1105.65 1210.12 L1106.24 1210.12 L1106.83 1210.12 L1107.41 1210.12 L1108 1210.12 L1108.59 1210.12 L1109.17 1210.12 L1109.76 1210.12 L1110.34 1210.12 L1110.93 1210.12 L1111.52 1210.12 L1112.1 1210.12 L1112.69 1210.12 L1113.28 1210.12 L1113.86 1210.12 L1114.45 1210.12 L1115.04 1210.12 L1115.62 1210.12 L1116.21 1210.12 L1116.8 1210.12 L1117.38 1210.12 L1117.97 1210.12 L1118.55 1210.12 L1119.14 1210.12 L1119.73 1210.12 L1120.31 1210.12 L1120.9 1210.12 L1121.49 1210.12 L1122.07 1210.12 L1122.66 1210.12 L1123.25 1210.12 L1123.83 1210.12 L1124.42 1210.12 L1125.01 1210.12 L1125.59 1210.12 L1126.18 1210.12 L1126.76 1210.12 L1127.35 1210.12 L1127.94 1210.12 L1128.52 1210.12 L1129.11 1210.12 L1129.7 1210.12 L1130.28 1210.12 L1130.87 1210.12 L1131.46 1210.12 L1132.04 1210.12 L1132.63 1210.12 L1133.21 1210.12 L1133.8 1210.12 L1134.39 1210.12 L1134.97 1210.12 L1135.56 1210.12 L1136.15 1210.12 L1136.73 1210.12 L1137.32 1210.12 L1137.91 1210.12 L1138.49 1210.12 L1139.08 1210.12 L1139.67 1210.12 L1140.25 1210.12 L1140.84 1210.12 L1141.42 1210.12 L1142.01 1210.12 L1142.6 1210.12 L1143.18 1210.12 L1143.77 1210.12 L1144.36 1210.12 L1144.94 1210.12 L1145.53 1210.12 L1146.12 1210.12 L1146.7 1210.12 L1147.29 1210.12 L1147.88 1210.12 L1148.46 1210.12 L1149.05 1210.12 L1149.63 1210.12 L1150.22 1210.12 L1150.81 1210.12 L1151.39 1210.12 L1151.98 1210.12 L1152.57 1210.12 L1153.15 1210.12 L1153.74 1210.12 L1154.33 1210.12 L1154.91 1210.12 L1155.5 1210.12 L1156.09 1210.12 L1156.67 1210.12 L1157.26 1210.12 L1157.84 1210.12 L1158.43 1210.12 L1159.02 1210.12 L1159.6 1210.12 L1160.19 1210.12 L1160.78 1210.12 L1161.36 1210.12 L1161.95 1210.12 L1162.54 1210.12 L1163.12 1210.12 L1163.71 1210.12 L1164.29 1210.12 L1164.88 1210.12 L1165.47 1210.12 L1166.05 1210.12 L1166.64 1210.12 L1167.23 1210.12 L1167.81 1210.12 L1168.4 1210.12 L1168.99 1210.12 L1169.57 1210.12 L1170.16 1210.12 L1170.75 1210.12 L1171.33 1210.12 L1171.92 1210.12 L1172.5 1210.12 L1173.09 1210.12 L1173.68 1210.12 L1174.26 1210.12 L1174.85 1210.12 L1175.44 1210.12 L1176.02 1210.12 L1176.61 1210.12 L1177.2 1210.12 L1177.78 1210.12 L1178.37 1210.12 L1178.96 1210.12 L1179.54 1210.12 L1180.13 1210.12 L1180.71 1210.12 L1181.3 1210.12 L1181.89 1210.12 L1182.47 1210.12 L1183.06 1210.12 L1183.65 1210.12 L1184.23 1210.12 L1184.82 1210.12 L1185.41 1210.12 L1185.99 1210.12 L1186.58 1210.12 L1187.16 1210.12 L1187.75 1210.12 L1188.34 1210.12 L1188.92 1210.12 L1189.51 1210.12 L1190.1 1210.12 L1190.68 1210.12 L1191.27 1210.12 L1191.86 1210.12 L1192.44 1210.12 L1193.03 1210.12 L1193.62 1210.12 L1194.2 1210.12 L1194.79 1210.12 L1195.37 1210.12 L1195.96 1210.12 L1196.55 1210.12 L1197.13 1210.12 L1197.72 1210.12 L1198.31 1210.12 L1198.89 1210.12 L1199.48 1210.12 L1200.07 1210.12 L1200.65 1210.12 L1201.24 1210.12 L1201.83 1210.12 L1202.41 1210.12 L1203 1210.12 L1203.58 1210.12 L1204.17 1210.12 L1204.76 1210.12 L1205.34 1210.12 L1205.93 1210.12 L1206.52 1210.12 L1207.1 1210.12 L1207.69 1210.12 L1208.28 1210.12 L1208.86 1210.12 L1209.45 1210.12 L1210.03 1210.12 L1210.62 1210.12 L1211.21 1210.12 L1211.79 1210.12 L1212.38 1210.12 L1212.97 1210.12 L1213.55 1210.12 L1214.14 1210.12 L1214.73 1210.12 L1215.31 1210.12 L1215.9 1210.12 L1216.49 1210.12 L1217.07 1210.12 L1217.66 1210.12 L1218.24 1210.12 L1218.83 1210.12 L1219.42 1210.12 L1220 1210.12 L1220.59 1210.12 L1221.18 1210.12 L1221.76 1210.12 L1222.35 1210.12 L1222.94 1210.12 L1223.52 1210.12 L1224.11 1210.12 L1224.7 1210.12 L1225.28 1210.12 L1225.87 1210.12 L1226.45 1210.12 L1227.04 1210.12 L1227.63 1210.12 L1228.21 1210.12 L1228.8 1210.12 L1229.39 1210.12 L1229.97 1210.12 L1230.56 1210.12 L1231.15 1210.12 L1231.73 1210.12 L1232.32 1210.12 L1232.91 1210.12 L1233.49 1210.12 L1234.08 1210.12 L1234.66 1210.12 L1235.25 1210.12 L1235.84 1210.12 L1236.42 1210.12 L1237.01 1210.12 L1237.6 1210.12 L1238.18 1210.12 L1238.77 1210.12 L1239.36 1210.12 L1239.94 1210.12 L1240.53 1210.12 L1241.11 1210.12 L1241.7 1210.12 L1242.29 1210.12 L1242.87 1210.12 L1243.46 1210.12 L1244.05 1210.12 L1244.63 1210.12 L1245.22 1210.12 L1245.81 1210.12 L1246.39 1210.12 L1246.98 1210.12 L1247.57 1210.12 L1248.15 1210.12 L1248.74 1210.12 L1249.32 1210.12 L1249.91 1210.12 L1250.5 1210.12 L1251.08 1210.12 L1251.67 1210.12 L1252.26 1210.12 L1252.84 1210.12 L1253.43 1210.12 L1254.02 1210.12 L1254.6 1210.12 L1255.19 1210.12 L1255.78 1210.12 L1256.36 1210.12 L1256.95 1210.12 L1257.53 1210.12 L1258.12 1210.12 L1258.71 1210.12 L1259.29 1210.12 L1259.88 1210.12 L1260.47 1210.12 L1261.05 1210.12 L1261.64 1210.12 L1262.23 1210.12 L1262.81 1210.12 L1263.4 1210.12 L1263.98 1210.12 L1264.57 1210.12 L1265.16 1210.12 L1265.74 1210.12 L1266.33 1210.12 L1266.92 1210.12 L1267.5 1210.12 L1268.09 1210.12 L1268.68 1210.12 L1269.26 1210.12 L1269.85 1210.12 L1270.44 1210.12 L1271.02 1210.12 L1271.61 1210.12 L1272.19 1210.12 L1272.78 1210.12 L1273.37 1210.12 L1273.95 1210.12 L1274.54 1210.12 L1275.13 1210.12 L1275.71 1210.12 L1276.3 1210.12 L1276.89 1210.12 L1277.47 1210.12 L1278.06 1210.12 L1278.65 1210.12 L1279.23 1210.12 L1279.82 1210.12 L1280.4 1210.12 L1280.99 1210.12 L1281.58 1210.12 L1282.16 1210.12 L1282.75 1210.12 L1283.34 1210.12 L1283.92 1210.12 L1284.51 1210.12 L1285.1 1210.12 L1285.68 1210.12 L1286.27 1210.12 L1286.86 1210.12 L1287.44 1210.12 L1288.03 1210.12 L1288.61 1210.12 L1289.2 1210.12 L1289.79 1210.12 L1290.37 1210.12 L1290.96 1210.12 L1291.55 1210.12 L1292.13 1210.12 L1292.72 1210.12 L1293.31 1210.12 L1293.89 1210.12 L1294.48 1210.12 L1295.06 1210.12 L1295.65 1210.12 L1296.24 1210.12 L1296.82 1210.12 L1297.41 1210.12 L1298 1210.12 L1298.58 1210.12 L1299.17 1210.12 L1299.76 1210.12 L1300.34 1210.12 L1300.93 1210.12 L1301.52 1210.12 L1302.1 1210.12 L1302.69 1210.12 L1303.27 1210.12 L1303.86 1210.12 L1304.45 1210.12 L1305.03 1210.12 L1305.62 1210.12 L1306.21 1210.12 L1306.79 1210.12 L1307.38 1210.12 L1307.97 1210.12 L1308.55 1210.12 L1309.14 1210.12 L1309.73 1210.12 L1310.31 1210.12 L1310.9 1210.12 L1311.48 1210.12 L1312.07 1210.12 L1312.66 1210.12 L1313.24 1210.12 L1313.83 1210.12 L1314.42 1210.12 L1315 1210.12 L1315.59 1210.12 L1316.18 1210.12 L1316.76 1210.12 L1317.35 1210.12 L1317.93 1210.12 L1318.52 1210.12 L1319.11 1210.12 L1319.69 1210.12 L1320.28 1210.12 L1320.87 1210.12 L1321.45 1210.12 L1322.04 1210.12 L1322.63 1210.12 L1323.21 1210.12 L1323.8 1210.12 L1324.39 1210.12 L1324.97 1210.12 L1325.56 1210.12 L1326.14 1210.12 L1326.73 1210.12 L1327.32 1210.12 L1327.9 1210.12 L1328.49 1210.12 L1329.08 1210.12 L1329.66 1210.12 L1330.25 1210.12 L1330.84 1210.12 L1331.42 1210.12 L1332.01 1210.12 L1332.6 1210.12 L1333.18 1210.12 L1333.77 1210.12 L1334.35 1210.12 L1334.94 1210.12 L1335.53 1210.12 L1336.11 1210.12 L1336.7 1210.12 L1337.29 1210.12 L1337.87 1210.12 L1338.46 1210.12 L1339.05 1210.12 L1339.63 1210.12 L1340.22 1210.12 L1340.8 1210.12 L1341.39 1210.12 L1341.98 1210.12 L1342.56 1210.12 L1343.15 1210.12 L1343.74 1210.12 L1344.32 1210.12 L1344.91 1210.12 L1345.5 1210.12 L1346.08 1210.12 L1346.67 1210.12 L1347.26 1210.12 L1347.84 1210.12 L1348.43 1210.12 L1349.01 1210.12 L1349.6 1210.12 L1350.19 1210.12 L1350.77 1210.12 L1351.36 1210.12 L1351.95 1210.12 L1352.53 1210.12 L1353.12 1210.12 L1353.71 1210.12 L1354.29 1210.12 L1354.88 1210.12 L1355.47 1210.12 L1356.05 1210.12 L1356.64 1210.12 L1357.22 1210.12 L1357.81 1210.12 L1358.4 1210.12 L1358.98 1210.12 L1359.57 1210.12 L1360.16 1210.12 L1360.74 1210.12 L1361.33 1210.12 L1361.92 1210.12 L1362.5 1210.12 L1363.09 1210.12 L1363.68 1210.12 L1364.26 1210.12 L1364.85 1210.12 L1365.43 1210.12 L1366.02 1210.12 L1366.61 1210.12 L1367.19 1210.12 L1367.78 1210.12 L1368.37 1210.12 L1368.95 1210.12 L1369.54 1210.12 L1370.13 1210.12 L1370.71 1210.12 L1371.3 1210.12 L1371.88 1210.12 L1372.47 1210.12 L1373.06 1210.12 L1373.64 1210.12 L1374.23 1210.12 L1374.82 1210.12 L1375.4 1210.12 L1375.99 1210.12 L1376.58 1210.12 L1377.16 1210.12 L1377.75 1210.12 L1378.34 1210.12 L1378.92 1210.12 L1379.51 1210.12 L1380.09 1210.12 L1380.68 1210.12 L1381.27 1210.12 L1381.85 1210.12 L1382.44 1210.12 L1383.03 1210.12 L1383.61 1210.12 L1384.2 1210.12 L1384.79 1210.12 L1385.37 1210.12 L1385.96 1210.12 L1386.55 1210.12 L1387.13 1210.12 L1387.72 1210.12 L1388.3 1210.12 L1388.89 1210.12 L1389.48 1210.12 L1390.06 1210.12 L1390.65 1210.12 L1391.24 1210.12 L1391.82 1210.12 L1392.41 1210.12 L1393 1210.12 L1393.58 1210.12 L1394.17 1210.12 L1394.75 1210.12 L1395.34 1210.12 L1395.93 1210.12 L1396.51 1210.12 L1397.1 1210.12 L1397.69 1210.12 L1398.27 1210.12 L1398.86 1210.12 L1399.45 1210.12 L1400.03 1210.12 L1400.62 1210.12 L1401.21 1210.12 L1401.79 1210.12 L1402.38 1210.12 L1402.96 1210.12 L1403.55 1210.12 L1404.14 1210.12 L1404.72 1210.12 L1405.31 1210.12 L1405.9 1210.12 L1406.48 1210.12 L1407.07 1210.12 L1407.66 1210.12 L1408.24 1210.12 L1408.83 1210.12 L1409.42 1210.12 L1410 1210.12 L1410.59 1210.12 L1411.17 1210.12 L1411.76 1210.12 L1412.35 1210.12 L1412.93 1210.12 L1413.52 1210.12 L1414.11 1210.12 L1414.69 1210.12 L1415.28 1210.12 L1415.87 1210.12 L1416.45 1210.12 L1417.04 1210.12 L1417.63 1210.12 L1418.21 1210.12 L1418.8 1210.12 L1419.38 1210.12 L1419.97 1210.12 L1420.56 1210.12 L1421.14 1210.12 L1421.73 1210.12 L1422.32 1210.12 L1422.9 1210.12 L1423.49 1210.12 L1424.08 1210.12 L1424.66 1210.12 L1425.25 1210.12 L1425.83 1210.12 L1426.42 1210.12 L1427.01 1210.12 L1427.59 1210.12 L1428.18 1210.12 L1428.77 1210.12 L1429.35 1210.12 L1429.94 1210.12 L1430.53 1210.12 L1431.11 1210.12 L1431.7 1210.12 L1432.29 1210.12 L1432.87 1210.12 L1433.46 1210.12 L1434.04 1210.12 L1434.63 1210.12 L1435.22 1210.12 L1435.8 1210.12 L1436.39 1210.12 L1436.98 1210.12 L1437.56 1210.12 L1438.15 1210.12 L1438.74 1210.12 L1439.32 1210.12 L1439.91 1210.12 L1440.5 1210.12 L1441.08 1210.12 L1441.67 1210.12 L1442.25 1210.12 L1442.84 1210.12 L1443.43 1210.12 L1444.01 1210.12 L1444.6 1210.12 L1445.19 1210.12 L1445.77 1210.12 L1446.36 1210.12 L1446.95 1210.12 L1447.53 1210.12 L1448.12 1210.12 L1448.7 1210.12 L1449.29 1210.12 L1449.88 1210.12 L1450.46 1210.12 L1451.05 1210.12 L1451.64 1210.12 L1452.22 1210.12 L1452.81 1210.12 L1453.4 1210.12 L1453.98 1210.12 L1454.57 1210.12 L1455.16 1210.12 L1455.74 1210.12 L1456.33 1210.12 L1456.91 1210.12 L1457.5 1210.12 L1458.09 1210.12 L1458.67 1210.12 L1459.26 1210.12 L1459.85 1210.12 L1460.43 1210.12 L1461.02 1210.12 L1461.61 1210.12 L1462.19 1210.12 L1462.78 1210.12 L1463.37 1210.12 L1463.95 1210.12 L1464.54 1210.12 L1465.12 1210.12 L1465.71 1210.12 L1466.3 1210.12 L1466.88 1210.12 L1467.47 1210.12 L1468.06 1210.12 L1468.64 1210.12 L1469.23 1210.12 L1469.82 1210.12 L1470.4 1210.12 L1470.99 1210.12 L1471.57 1210.12 L1472.16 1210.12 L1472.75 1210.12 L1473.33 1210.12 L1473.92 1210.12 L1474.51 1210.12 L1475.09 1210.12 L1475.68 1210.12 L1476.27 1210.12 L1476.85 1210.12 L1477.44 1210.12 L1478.03 1210.12 L1478.61 1210.12 L1479.2 1210.12 L1479.78 1210.12 L1480.37 1210.12 L1480.96 1210.12 L1481.54 1210.12 L1482.13 1210.12 L1482.72 1210.12 L1483.3 1210.12 L1483.89 1210.12 L1484.48 1210.12 L1485.06 1210.12 L1485.65 1210.12 L1486.24 1210.12 L1486.82 1210.12 L1487.41 1210.12 L1487.99 1210.12 L1488.58 1210.12 L1489.17 1210.12 L1489.75 1210.12 L1490.34 1210.12 L1490.93 1210.12 L1491.51 1210.12 L1492.1 1210.12 L1492.69 1210.12 L1493.27 1210.12 L1493.86 1210.12 L1494.45 1210.12 L1495.03 1210.12 L1495.62 1210.12 L1496.2 1210.12 L1496.79 1210.12 L1497.38 1210.12 L1497.96 1210.12 L1498.55 1210.12 L1499.14 1210.12 L1499.72 1210.12 L1500.31 1210.12 L1500.9 1210.12 L1501.48 1210.12 L1502.07 1210.12 L1502.65 1210.12 L1503.24 1210.12 L1503.83 1210.12 L1504.41 1210.12 L1505 1210.12 L1505.59 1210.12 L1506.17 1210.12 L1506.76 1210.12 L1507.35 1210.12 L1507.93 1210.12 L1508.52 1210.12 L1509.11 1210.12 L1509.69 1210.12 L1510.28 1210.12 L1510.86 1210.12 L1511.45 1210.12 L1512.04 1210.12 L1512.62 1210.12 L1513.21 1210.12 L1513.8 1210.12 L1514.38 1210.12 L1514.97 1210.12 L1515.56 1210.12 L1516.14 1210.12 L1516.73 1210.12 L1517.32 1210.12 L1517.9 1210.12 L1518.49 1210.12 L1519.07 1210.12 L1519.66 1210.12 L1520.25 1210.12 L1520.83 1210.12 L1521.42 1210.12 L1522.01 1210.12 L1522.59 1210.12 L1523.18 1210.12 L1523.77 1210.12 L1524.35 1210.12 L1524.94 1210.12 L1525.52 1210.12 L1526.11 1210.12 L1526.7 1210.12 L1527.28 1210.12 L1527.87 1210.12 L1528.46 1210.12 L1529.04 1210.12 L1529.63 1210.12 L1530.22 1210.12 L1530.8 1210.12 L1531.39 1210.12 L1531.98 1210.12 L1532.56 1210.12 L1533.15 1210.12 L1533.73 1210.12 L1534.32 1210.12 L1534.91 1210.12 L1535.49 1210.12 L1536.08 1210.12 L1536.67 1210.12 L1537.25 1210.12 L1537.84 1210.12 L1538.43 1210.12 L1539.01 1210.12 L1539.6 1210.12 L1540.19 1210.12 L1540.77 1210.12 L1541.36 1210.12 L1541.94 1210.12 L1542.53 1210.12 L1543.12 1210.12 L1543.7 1210.12 L1544.29 1210.12 L1544.88 1210.12 L1545.46 1210.12 L1546.05 1210.12 L1546.64 1210.12 L1547.22 1210.12 L1547.81 1210.12 L1548.4 1210.12 L1548.98 1210.12 L1549.57 1210.12 L1550.15 1210.12 L1550.74 1210.12 L1551.33 1210.12 L1551.91 1210.12 L1552.5 1210.12 L1553.09 1210.12 L1553.67 1210.12 L1554.26 1210.12 L1554.85 1210.12 L1555.43 1210.12 L1556.02 1210.12 L1556.6 1210.12 L1557.19 1210.12 L1557.78 1210.12 L1558.36 1210.12 L1558.95 1210.12 L1559.54 1210.12 L1560.12 1210.12 L1560.71 1210.12 L1561.3 1210.12 L1561.88 1210.12 L1562.47 1210.12 L1563.06 1210.12 L1563.64 1210.12 L1564.23 1210.12 L1564.81 1210.12 L1565.4 1210.12 L1565.99 1210.12 L1566.57 1210.12 L1567.16 1210.12 L1567.75 1210.12 L1568.33 1210.12 L1568.92 1210.12 L1569.51 1210.12 L1570.09 1210.12 L1570.68 1210.12 L1571.27 1210.12 L1571.85 1210.12 L1572.44 1210.12 L1573.02 1210.12 L1573.61 1210.12 L1574.2 1210.12 L1574.78 1210.12 L1575.37 1210.12 L1575.96 1210.12 L1576.54 1210.12 L1577.13 1210.12 L1577.72 1210.12 L1578.3 1210.12 L1578.89 1210.12 L1579.47 1210.12 L1580.06 1210.12 L1580.65 1210.12 L1581.23 1210.12 L1581.82 1210.12 L1582.41 1210.12 L1582.99 1210.12 L1583.58 1210.12 L1584.17 1210.12 L1584.75 1210.12 L1585.34 1210.12 L1585.93 1210.12 L1586.51 1210.12 L1587.1 1210.12 L1587.68 1210.12 L1588.27 1210.12 L1588.86 1210.12 L1589.44 1210.12 L1590.03 1210.12 L1590.62 1210.12 L1591.2 1210.12 L1591.79 1210.12 L1592.38 1210.12 L1592.96 1210.12 L1593.55 1210.12 L1594.14 1210.12 L1594.72 1210.12 L1595.31 1210.12 L1595.89 1210.12 L1596.48 1210.12 L1597.07 1210.12 L1597.65 1210.12 L1598.24 1210.12 L1598.83 1210.12 L1599.41 1210.12 L1600 1210.12 L1600.59 1210.12 L1601.17 1210.12 L1601.76 1210.12 L1602.34 1210.12 L1602.93 1210.12 L1603.52 1210.12 L1604.1 1210.12 L1604.69 1210.12 L1605.28 1210.12 L1605.86 1210.12 L1606.45 1210.12 L1607.04 1210.12 L1607.62 1210.12 L1608.21 1210.12 L1608.8 1210.12 L1609.38 1210.12 L1609.97 1210.12 L1610.55 1210.12 L1611.14 1210.12 L1611.73 1210.12 L1612.31 1210.12 L1612.9 1210.12 L1613.49 1210.12 L1614.07 1210.12 L1614.66 1210.12 L1615.25 1210.12 L1615.83 1210.12 L1616.42 1210.12 L1617.01 1210.12 L1617.59 1210.12 L1618.18 1210.12 L1618.76 1210.12 L1619.35 1210.12 L1619.94 1210.12 L1620.52 1210.12 L1621.11 1210.12 L1621.7 1210.12 L1622.28 1210.12 L1622.87 1210.12 L1623.46 1210.12 L1624.04 1210.12 L1624.63 1210.12 L1625.22 1210.12 L1625.8 1210.12 L1626.39 1210.12 L1626.97 1210.12 L1627.56 1210.12 L1628.15 1210.12 L1628.73 1210.12 L1629.32 1210.12 L1629.91 1210.12 L1630.49 1210.12 L1631.08 1210.12 L1631.67 1210.12 L1632.25 1210.12 L1632.84 1210.12 L1633.42 1210.12 L1634.01 1210.12 L1634.6 1210.12 L1635.18 1210.12 L1635.77 1210.12 L1636.36 1210.12 L1636.94 1210.12 L1637.53 1210.12 L1638.12 1210.12 L1638.7 1210.12 L1639.29 1210.12 L1639.88 1210.12 L1640.46 1210.12 L1641.05 1210.12 L1641.63 1210.12 L1642.22 1210.12 L1642.81 1210.12 L1643.39 1210.12 L1643.98 1210.12 L1644.57 1210.12 L1645.15 1210.12 L1645.74 1210.12 L1646.33 1210.12 L1646.91 1210.12 L1647.5 1210.12 L1648.09 1210.12 L1648.67 1210.12 L1649.26 1210.12 L1649.84 1210.12 L1650.43 1210.12 L1651.02 1210.12 L1651.6 1210.12 L1652.19 1210.12 L1652.78 1210.12 L1653.36 1210.12 L1653.95 1210.12 L1654.54 1210.12 L1655.12 1210.12 L1655.71 1210.12 L1656.29 1210.12 L1656.88 1210.12 L1657.47 1210.12 L1658.05 1210.12 L1658.64 1210.12 L1659.23 1210.12 L1659.81 1210.12 L1660.4 1210.12 L1660.99 1210.12 L1661.57 1210.12 L1662.16 1210.12 L1662.75 1210.12 L1663.33 1210.12 L1663.92 1210.12 L1664.5 1210.12 L1665.09 1210.12 L1665.68 1210.12 L1666.26 1210.12 L1666.85 1210.12 L1667.44 1210.12 L1668.02 1210.12 L1668.61 1210.12 L1669.2 1210.12 L1669.78 1210.12 L1670.37 1210.12 L1670.96 1210.12 L1671.54 1210.12 L1672.13 1210.12 L1672.71 1210.12 L1673.3 1210.12 L1673.89 1210.12 L1674.47 1210.12 L1675.06 1210.12 L1675.65 1210.12 L1676.23 1210.12 L1676.82 1210.12 L1677.41 1210.12 L1677.99 1210.12 L1678.58 1210.12 L1679.17 1210.12 L1679.75 1210.12 L1680.34 1210.12 L1680.92 1210.12 L1681.51 1210.12 L1682.1 1210.12 L1682.68 1210.12 L1683.27 1210.12 L1683.86 1210.12 L1684.44 1210.12 L1685.03 1210.12 L1685.62 1210.12 L1686.2 1210.12 L1686.79 1210.12 L1687.37 1210.12 L1687.96 1210.12 L1688.55 1210.12 L1689.13 1210.12 L1689.72 1210.12 L1690.31 1210.12 L1690.89 1210.12 L1691.48 1210.12 L1692.07 1210.12 L1692.65 1210.12 L1693.24 1210.12 L1693.83 1210.12 L1694.41 1210.12 L1695 1210.12 L1695.58 1210.12 L1696.17 1210.12 L1696.76 1210.12 L1697.34 1210.12 L1697.93 1210.12 L1698.52 1210.12 L1699.1 1210.12 L1699.69 1210.12 L1700.28 1210.12 L1700.86 1210.12 L1701.45 1210.12 L1702.04 1210.12 L1702.62 1210.12 L1703.21 1210.12 L1703.79 1210.12 L1704.38 1210.12 L1704.97 1210.12 L1705.55 1210.12 L1706.14 1210.12 L1706.73 1210.12 L1707.31 1210.12 L1707.9 1210.12 L1708.49 1210.12 L1709.07 1210.12 L1709.66 1210.12 L1710.24 1210.12 L1710.83 1210.12 L1711.42 1210.12 L1712 1210.12 L1712.59 1210.12 L1713.18 1210.12 L1713.76 1210.12 L1714.35 1210.12 L1714.94 1210.12 L1715.52 1210.12 L1716.11 1210.12 L1716.7 1210.12 L1717.28 1210.12 L1717.87 1210.12 L1718.45 1210.12 L1719.04 1210.12 L1719.63 1210.12 L1720.21 1210.12 L1720.8 1210.12 L1721.39 1210.12 L1721.97 1210.12 L1722.56 1210.12 L1723.15 1210.12 L1723.73 1210.12 L1724.32 1210.12 L1724.91 1210.12 L1725.49 1210.12 L1726.08 1210.12 L1726.66 1210.12 L1727.25 1210.12 L1727.84 1210.12 L1728.42 1210.12 L1729.01 1210.12 L1729.6 1210.12 L1730.18 1210.12 L1730.77 1210.12 L1731.36 1210.12 L1731.94 1210.12 L1732.53 1210.12 L1733.11 1210.12 L1733.7 1210.12 L1734.29 1210.12 L1734.87 1210.12 L1735.46 1210.12 L1736.05 1210.12 L1736.63 1210.12 L1737.22 1210.12 L1737.81 1210.12 L1738.39 1210.12 L1738.98 1210.12 L1739.57 1210.12 L1740.15 1210.12 L1740.74 1210.12 L1741.32 1210.12 L1741.91 1210.12 L1742.5 1210.12 L1743.08 1210.12 L1743.67 1210.12 L1744.26 1210.12 L1744.84 1210.12 L1745.43 1210.12 L1746.02 1210.12 L1746.6 1210.12 L1747.19 1210.12 L1747.78 1210.12 L1748.36 1210.12 L1748.95 1210.12 L1749.53 1210.12 L1750.12 1210.12 L1750.71 1210.12 L1751.29 1210.12 L1751.88 1210.12 L1752.47 1210.12 L1753.05 1210.12 L1753.64 1210.12 L1754.23 1210.12 L1754.81 1210.12 L1755.4 1210.12 L1755.99 1210.12 L1756.57 1210.12 L1757.16 1210.12 L1757.74 1210.12 L1758.33 1210.12 L1758.92 1210.12 L1759.5 1210.12 L1760.09 1210.12 L1760.68 1210.12 L1761.26 1210.12 L1761.85 1210.12 L1762.44 1210.12 L1763.02 1210.12 L1763.61 1210.12 L1764.19 1210.12 L1764.78 1210.12 L1765.37 1210.12 L1765.95 1210.12 L1766.54 1210.12 L1767.13 1210.12 L1767.71 1210.12 L1768.3 1210.12 L1768.89 1210.12 L1769.47 1210.12 L1770.06 1210.12 L1770.65 1210.12 L1771.23 1210.12 L1771.82 1210.12 L1772.4 1210.12 L1772.99 1210.12 L1773.58 1210.12 L1774.16 1210.12 L1774.75 1210.12 L1775.34 1210.12 L1775.92 1210.12 L1776.51 1210.12 L1777.1 1210.12 L1777.68 1210.12 L1778.27 1210.12 L1778.86 1210.12 L1779.44 1210.12 L1780.03 1210.12 L1780.61 1210.12 L1781.2 1210.12 L1781.79 1210.12 L1782.37 1210.12 L1782.96 1210.12 L1783.55 1210.12 L1784.13 1210.12 L1784.72 1210.12 L1785.31 1210.12 L1785.89 1210.12 L1786.48 1210.12 L1787.06 1210.12 L1787.65 1210.12 L1788.24 1210.12 L1788.82 1210.12 L1789.41 1210.12 L1790 1210.12 L1790.58 1210.12 L1791.17 1210.12 L1791.76 1210.12 L1792.34 1210.12 L1792.93 1210.12 L1793.52 1210.12 L1794.1 1210.12 L1794.69 1210.12 L1795.27 1210.12 L1795.86 1210.12 L1796.45 1210.12 L1797.03 1210.12 L1797.62 1210.12 L1798.21 1210.12 L1798.79 1210.12 L1799.38 1210.12 L1799.97 1210.12 L1800.55 1210.12 L1801.14 1210.12 L1801.73 1210.12 L1802.31 1210.12 L1802.9 1210.12 L1803.48 1210.12 L1804.07 1210.12 L1804.66 1210.12 L1805.24 1210.12 L1805.83 1210.12 L1806.42 1210.12 L1807 1210.12 L1807.59 1210.12 L1808.18 1210.12 L1808.76 1210.12 L1809.35 1210.12 L1809.94 1210.12 L1810.52 1210.12 L1811.11 1210.12 L1811.69 1210.12 L1812.28 1210.12 L1812.87 1210.12 L1813.45 1210.12 L1814.04 1210.12 L1814.63 1210.12 L1815.21 1210.12 L1815.8 1210.12 L1816.39 1210.12 L1816.97 1210.12 L1817.56 1210.12 L1818.14 1210.12 L1818.73 1210.12 L1819.32 1210.12 L1819.9 1210.12 L1820.49 1210.12 L1821.08 1210.12 L1821.66 1210.12 L1822.25 1210.12 L1822.84 1210.12 L1823.42 1210.12 L1824.01 1210.12 L1824.6 1210.12 L1825.18 1210.12 L1825.77 1210.12 L1826.35 1210.12 L1826.94 1210.12 L1827.53 1210.12 L1828.11 1210.12 L1828.7 1210.12 L1829.29 1210.12 L1829.87 1210.12 L1830.46 1210.12 L1831.05 1210.12 L1831.63 1210.12 L1832.22 1210.12 L1832.81 1210.12 L1833.39 1210.12 L1833.98 1210.12 L1834.56 1210.12 L1835.15 1210.12 L1835.74 1210.12 L1836.32 1210.12 L1836.91 1210.12 L1837.5 1210.12 L1838.08 1210.12 L1838.67 1210.12 L1839.26 1210.12 L1839.84 1210.12 L1840.43 1210.12 L1841.01 1210.12 L1841.6 1210.12 L1842.19 1210.12 L1842.77 1210.12 L1843.36 1210.12 L1843.95 1210.12 L1844.53 1210.12 L1845.12 1210.12 L1845.71 1210.12 L1846.29 1210.12 L1846.88 1210.12 L1847.47 1210.12 L1848.05 1210.12 L1848.64 1210.12 L1849.22 1210.12 L1849.81 1210.12 L1850.4 1210.12 L1850.98 1210.12 L1851.57 1210.12 L1852.16 1210.12 L1852.74 1210.12 L1853.33 1210.12 L1853.92 1210.12 L1854.5 1210.12 L1855.09 1210.12 L1855.68 1210.12 L1856.26 1210.12 L1856.85 1210.12 L1857.43 1210.12 L1858.02 1210.12 L1858.61 1210.12 L1859.19 1210.12 L1859.78 1210.12 L1860.37 1210.12 L1860.95 1210.12 L1861.54 1210.12 L1862.13 1210.12 L1862.71 1210.12 L1863.3 1210.12 L1863.88 1210.12 L1864.47 1210.12 L1865.06 1210.12 L1865.64 1210.12 L1866.23 1210.12 L1866.82 1210.12 L1867.4 1210.12 L1867.99 1210.12 L1868.58 1210.12 L1869.16 1210.12 L1869.75 1210.12 L1870.34 1210.12 L1870.92 1210.12 L1871.51 1210.12 L1872.09 1210.12 L1872.68 1210.12 L1873.27 1210.12 L1873.85 1210.12 L1874.44 1210.12 L1875.03 1210.12 L1875.61 1210.12 L1876.2 1210.12 L1876.79 1210.12 L1877.37 1210.12 L1877.96 1210.12 L1878.55 1210.12 L1879.13 1210.12 L1879.72 1210.12 L1880.3 1210.12 L1880.89 1210.12 L1881.48 1210.12 L1882.06 1210.12 L1882.65 1210.12 L1883.24 1210.12 L1883.82 1210.12 L1884.41 1210.12 L1885 1210.12 L1885.58 1210.12 L1886.17 1210.12 L1886.76 1210.12 L1887.34 1210.12 L1887.93 1210.12 L1888.51 1210.12 L1889.1 1210.12 L1889.69 1210.12 L1890.27 1210.12 L1890.86 1210.12 L1891.45 1210.12 L1892.03 1210.12 L1892.62 1210.12 L1893.21 1210.12 L1893.79 1210.12 L1894.38 1210.12 L1894.96 1210.12 L1895.55 1210.12 L1896.14 1210.12 L1896.72 1210.12 L1897.31 1210.12 L1897.9 1210.12 L1898.48 1210.12 L1899.07 1210.12 L1899.66 1210.12 L1900.24 1210.12 L1900.83 1210.12 L1901.42 1210.12 L1902 1210.12 L1902.59 1210.12 L1903.17 1210.12 L1903.76 1210.12 L1904.35 1210.12 L1904.93 1210.12 L1905.52 1210.12 L1906.11 1210.12 L1906.69 1210.12 L1907.28 1210.12 L1907.87 1210.12 L1908.45 1210.12 L1909.04 1210.12 L1909.63 1210.12 L1910.21 1210.12 L1910.8 1210.12 L1911.38 1210.12 L1911.97 1210.12 L1912.56 1210.12 L1913.14 1210.12 L1913.73 1210.12 L1914.32 1210.12 L1914.9 1210.12 L1915.49 1210.12 L1916.08 1210.12 L1916.66 1210.12 L1917.25 1210.12 L1917.83 1210.12 L1918.42 1210.12 L1919.01 1210.12 L1919.59 1210.12 L1920.18 1210.12 L1920.77 1210.12 L1921.35 1210.12 L1921.94 1210.12 L1922.53 1210.12 L1923.11 1210.12 L1923.7 1210.12 L1924.29 1210.12 L1924.87 1210.12 L1925.46 1210.12 L1926.04 1210.12 L1926.63 1210.12 L1927.22 1210.12 L1927.8 1210.12 L1928.39 1210.12 L1928.98 1210.12 L1929.56 1210.12 L1930.15 1210.12 L1930.74 1210.12 L1931.32 1210.12 L1931.91 1210.12 L1932.5 1210.12 L1933.08 1210.12 L1933.67 1210.12 L1934.25 1210.12 L1934.84 1210.12 L1935.43 1210.12 L1936.01 1210.12 L1936.6 1210.12 L1937.19 1210.12 L1937.77 1210.12 L1938.36 1210.12 L1938.95 1210.12 L1939.53 1210.12 L1940.12 1210.12 L1940.71 1210.12 L1941.29 1210.12 L1941.88 1210.12 L1942.46 1210.12 L1943.05 1210.12 L1943.64 1210.12 L1944.22 1210.12 L1944.81 1210.12 L1945.4 1210.12 L1945.98 1210.12 L1946.57 1210.12 L1947.16 1210.12 L1947.74 1210.12 L1948.33 1210.12 L1948.91 1210.12 L1949.5 1210.12 L1950.09 1210.12 L1950.67 1210.12 L1951.26 1210.12 L1951.85 1210.12 L1952.43 1210.12 L1953.02 1210.12 L1953.61 1210.12 L1954.19 1210.12 L1954.78 1210.12 L1955.37 1210.12 L1955.95 1210.12 L1956.54 1210.12 L1957.12 1210.12 L1957.71 1210.12 L1958.3 1210.12 L1958.88 1210.12 L1959.47 1210.12 L1960.06 1210.12 L1960.64 1210.12 L1961.23 1210.12 L1961.82 1210.12 L1962.4 1210.12 L1962.99 1210.12 L1963.58 1210.12 L1964.16 1210.12 L1964.75 1210.12 L1965.33 1210.12 L1965.92 1210.12 L1966.51 1210.12 L1967.09 1210.12 L1967.68 1210.12 L1968.27 1210.12 L1968.85 1210.12 L1969.44 1210.12 L1970.03 1210.12 L1970.61 1210.12 L1971.2 1210.12 L1971.78 1210.12 L1972.37 1210.12 L1972.96 1210.12 L1973.54 1210.12 L1974.13 1210.12 L1974.72 1210.12 L1975.3 1210.12 L1975.89 1210.12 L1976.48 1210.12 L1977.06 1210.12 L1977.65 1210.12 L1978.24 1210.12 L1978.82 1210.12 L1979.41 1210.12 L1979.99 1210.12 L1980.58 1210.12 L1981.17 1210.12 L1981.75 1210.12 L1982.34 1210.12 L1982.93 1210.12 L1983.51 1210.12 L1984.1 1210.12 L1984.69 1210.12 L1985.27 1210.12 L1985.86 1210.12 L1986.45 1210.12 L1987.03 1210.12 L1987.62 1210.12 L1988.2 1210.12 L1988.79 1210.12 L1989.38 1210.12 L1989.96 1210.12 L1990.55 1210.12 L1991.14 1210.12 L1991.72 1210.12 L1992.31 1210.12 L1992.9 1210.12 L1993.48 1210.12 L1994.07 1210.12 L1994.65 1210.12 L1995.24 1210.12 L1995.83 1210.12 L1996.41 1210.12 L1997 1210.12 L1997.59 1210.12 L1998.17 1210.12 L1998.76 1210.12 L1999.35 1210.12 L1999.93 1210.12 L2000.52 1210.12 L2001.11 1210.12 L2001.69 1210.12 L2002.28 1210.12 L2002.86 1210.12 L2003.45 1210.12 L2004.04 1210.12 L2004.62 1210.12 L2005.21 1210.12 L2005.8 1210.12 L2006.38 1210.12 L2006.97 1210.12 L2007.56 1210.12 L2008.14 1210.12 L2008.73 1210.12 L2009.32 1210.12 L2009.9 1210.12 L2010.49 1210.12 L2011.07 1210.12 L2011.66 1210.12 L2012.25 1210.12 L2012.83 1210.12 L2013.42 1210.12 L2014.01 1210.12 L2014.59 1210.12 L2015.18 1210.12 L2015.77 1210.12 L2016.35 1210.12 L2016.94 1210.12 L2017.53 1210.12 L2018.11 1210.12 L2018.7 1210.12 L2019.28 1210.12 L2019.87 1210.12 L2020.46 1210.12 L2021.04 1210.12 L2021.63 1210.12 L2022.22 1210.12 L2022.8 1210.12 L2023.39 1210.12 L2023.98 1210.12 L2024.56 1210.12 L2025.15 1210.12 L2025.73 1210.12 L2026.32 1210.12 L2026.91 1210.12 L2027.49 1210.12 L2028.08 1210.12 L2028.67 1210.12 L2029.25 1210.12 L2029.84 1210.12 L2030.43 1210.12 L2031.01 1210.12 L2031.6 1210.12 L2032.19 1210.12 L2032.77 1210.12 L2033.36 1210.12 L2033.94 1210.12 L2034.53 1210.12 L2035.12 1210.12 L2035.7 1210.12 L2036.29 1210.12 L2036.88 1210.12 L2037.46 1210.12 L2038.05 1210.12 L2038.64 1210.12 L2039.22 1210.12 L2039.81 1210.12 L2040.4 1210.12 L2040.98 1210.12 L2041.57 1210.12 L2042.15 1210.12 L2042.74 1210.12 L2043.33 1210.12 L2043.91 1210.12 L2044.5 1210.12 L2045.09 1210.12 L2045.67 1210.12 L2046.26 1210.12 L2046.85 1210.12 L2047.43 1210.12 L2048.02 1210.12 L2048.6 1210.12 L2049.19 1210.12 L2049.78 1210.12 L2050.36 1210.12 L2050.95 1210.12 L2051.54 1210.12 L2052.12 1210.12 L2052.71 1210.12 L2053.3 1210.12 L2053.88 1210.12 L2054.47 1210.12 L2055.06 1210.12 L2055.64 1210.12 L2056.23 1210.12 L2056.81 1210.12 L2057.4 1210.12 L2057.99 1210.12 L2058.57 1210.12 L2059.16 1210.12 L2059.75 1210.12 L2060.33 1210.12 L2060.92 1210.12 L2061.51 1210.12 L2062.09 1210.12 L2062.68 1210.12 L2063.27 1210.12 L2063.85 1210.12 L2064.44 1210.12 L2065.02 1210.12 L2065.61 1210.12 L2066.2 1210.12 L2066.78 1210.12 L2067.37 1210.12 L2067.96 1210.12 L2068.54 1210.12 L2069.13 1210.12 L2069.72 1210.12 L2070.3 1210.12 L2070.89 1210.12 L2071.48 1210.12 L2072.06 1210.12 L2072.65 1210.12 L2073.23 1210.12 L2073.82 1210.12 L2074.41 1210.12 L2074.99 1210.12 L2075.58 1210.12 L2076.17 1210.12 L2076.75 1210.12 L2077.34 1210.12 L2077.93 1210.12 L2078.51 1210.12 L2079.1 1210.12 L2079.68 1210.12 L2080.27 1210.12 L2080.86 1210.12 L2081.44 1210.12 L2082.03 1210.12 L2082.62 1210.12 L2083.2 1210.12 L2083.79 1210.12 L2084.38 1210.12 L2084.96 1210.12 L2085.55 1210.12 L2086.14 1210.12 L2086.72 1210.12 L2087.31 1210.12 L2087.89 1210.12 L2088.48 1210.12 L2089.07 1210.12 L2089.65 1210.12 L2090.24 1210.12 L2090.83 1210.12 L2091.41 1210.12 L2092 1210.12 L2092.59 1210.12 L2093.17 1210.12 L2093.76 1210.12 L2094.35 1210.12 L2094.93 1210.12 L2095.52 1210.12 L2096.1 1210.12 L2096.69 1210.12 L2097.28 1210.12 L2097.86 1210.12 L2098.45 1210.12 L2099.04 1210.12 L2099.62 1210.12 L2100.21 1210.12 L2100.8 1210.12 L2101.38 1210.12 L2101.97 1210.12 L2102.55 1210.12 L2103.14 1210.12 L2103.73 1210.12 L2104.31 1210.12 L2104.9 1210.12 L2105.49 1210.12 L2106.07 1210.12 L2106.66 1210.12 L2107.25 1210.12 L2107.83 1210.12 L2108.42 1210.12 L2109.01 1210.12 L2109.59 1210.12 L2110.18 1210.12 L2110.76 1210.12 L2111.35 1210.12 L2111.94 1210.12 L2112.52 1210.12 L2113.11 1210.12 L2113.7 1210.12 L2114.28 1210.12 L2114.87 1210.12 L2115.46 1210.12 L2116.04 1210.12 L2116.63 1210.12 L2117.22 1210.12 L2117.8 1210.12 L2118.39 1210.12 L2118.97 1210.12 L2119.56 1210.12 L2120.15 1210.12 L2120.73 1210.12 L2121.32 1210.12 L2121.91 1210.12 L2122.49 1210.12 L2123.08 1210.12 L2123.67 1210.12 L2124.25 1210.12 L2124.84 1210.12 L2125.42 1210.12 L2126.01 1210.12 L2126.6 1210.12 L2127.18 1210.12 L2127.77 1210.12 L2128.36 1210.12 L2128.94 1210.12 L2129.53 1210.12 L2130.12 1210.12 L2130.7 1210.12 L2131.29 1210.12 L2131.88 1210.12 L2132.46 1210.12 L2133.05 1210.12 L2133.63 1210.12 L2134.22 1210.12 L2134.81 1210.12 L2135.39 1210.12 L2135.98 1210.12 L2136.57 1210.12 L2137.15 1210.12 L2137.74 1210.12 L2138.33 1210.12 L2138.91 1210.12 L2139.5 1210.12 L2140.09 1210.12 L2140.67 1210.12 L2141.26 1210.12 L2141.84 1210.12 L2142.43 1210.12 L2143.02 1210.12 L2143.6 1210.12 L2144.19 1210.12 L2144.78 1210.12 L2145.36 1210.12 L2145.95 1210.12 L2146.54 1210.12 L2147.12 1210.12 L2147.71 1210.12 L2148.3 1210.12 L2148.88 1210.12 L2149.47 1210.12 L2150.05 1210.12 L2150.64 1210.12 L2151.23 1210.12 L2151.81 1210.12 L2152.4 1210.12 L2152.99 1210.12 L2153.57 1210.12 L2154.16 1210.12 L2154.75 1210.12 L2155.33 1210.12 L2155.92 1210.12 L2156.5 1210.12 L2157.09 1210.12 L2157.68 1210.12 L2158.26 1210.12 L2158.26 1209.47 L2157.68 1209.47 L2157.09 1209.47 L2156.5 1209.47 L2155.92 1209.47 L2155.33 1209.47 L2154.75 1209.47 L2154.16 1209.47 L2153.57 1209.47 L2152.99 1209.47 L2152.4 1209.47 L2151.81 1209.47 L2151.23 1209.47 L2150.64 1209.47 L2150.05 1209.47 L2149.47 1209.47 L2148.88 1209.47 L2148.3 1209.47 L2147.71 1209.47 L2147.12 1209.47 L2146.54 1209.47 L2145.95 1209.47 L2145.36 1209.47 L2144.78 1209.47 L2144.19 1209.47 L2143.6 1209.47 L2143.02 1209.47 L2142.43 1209.47 L2141.84 1209.47 L2141.26 1209.47 L2140.67 1209.47 L2140.09 1209.47 L2139.5 1209.47 L2138.91 1209.47 L2138.33 1209.47 L2137.74 1209.47 L2137.15 1209.47 L2136.57 1209.47 L2135.98 1209.47 L2135.39 1209.47 L2134.81 1209.47 L2134.22 1209.47 L2133.63 1209.47 L2133.05 1209.47 L2132.46 1209.47 L2131.88 1209.47 L2131.29 1209.47 L2130.7 1209.47 L2130.12 1209.47 L2129.53 1209.47 L2128.94 1209.47 L2128.36 1209.47 L2127.77 1209.47 L2127.18 1209.47 L2126.6 1209.47 L2126.01 1209.47 L2125.42 1209.47 L2124.84 1209.47 L2124.25 1209.47 L2123.67 1209.47 L2123.08 1209.47 L2122.49 1209.47 L2121.91 1209.47 L2121.32 1209.47 L2120.73 1209.47 L2120.15 1209.47 L2119.56 1209.47 L2118.97 1209.47 L2118.39 1209.47 L2117.8 1209.47 L2117.22 1209.47 L2116.63 1209.47 L2116.04 1209.47 L2115.46 1209.47 L2114.87 1209.47 L2114.28 1209.47 L2113.7 1209.47 L2113.11 1209.47 L2112.52 1209.47 L2111.94 1209.47 L2111.35 1209.47 L2110.76 1209.47 L2110.18 1209.47 L2109.59 1209.47 L2109.01 1209.47 L2108.42 1209.47 L2107.83 1209.47 L2107.25 1209.47 L2106.66 1209.47 L2106.07 1209.47 L2105.49 1209.47 L2104.9 1209.47 L2104.31 1209.47 L2103.73 1209.47 L2103.14 1209.47 L2102.55 1209.47 L2101.97 1209.47 L2101.38 1209.47 L2100.8 1209.47 L2100.21 1209.47 L2099.62 1209.47 L2099.04 1209.47 L2098.45 1209.47 L2097.86 1209.47 L2097.28 1209.47 L2096.69 1209.47 L2096.1 1209.47 L2095.52 1209.47 L2094.93 1209.47 L2094.35 1209.47 L2093.76 1209.47 L2093.17 1209.47 L2092.59 1209.47 L2092 1209.47 L2091.41 1209.47 L2090.83 1209.47 L2090.24 1209.47 L2089.65 1209.47 L2089.07 1209.47 L2088.48 1209.47 L2087.89 1209.47 L2087.31 1209.47 L2086.72 1209.47 L2086.14 1209.47 L2085.55 1209.47 L2084.96 1209.47 L2084.38 1209.47 L2083.79 1209.47 L2083.2 1209.47 L2082.62 1209.47 L2082.03 1209.47 L2081.44 1209.47 L2080.86 1209.47 L2080.27 1209.47 L2079.68 1209.47 L2079.1 1209.47 L2078.51 1209.47 L2077.93 1209.47 L2077.34 1209.47 L2076.75 1209.47 L2076.17 1209.47 L2075.58 1209.47 L2074.99 1209.47 L2074.41 1209.47 L2073.82 1209.47 L2073.23 1209.47 L2072.65 1209.47 L2072.06 1209.47 L2071.48 1209.47 L2070.89 1209.47 L2070.3 1209.47 L2069.72 1209.47 L2069.13 1209.47 L2068.54 1209.47 L2067.96 1209.47 L2067.37 1209.47 L2066.78 1209.47 L2066.2 1209.47 L2065.61 1209.47 L2065.02 1209.47 L2064.44 1209.47 L2063.85 1209.47 L2063.27 1209.47 L2062.68 1209.47 L2062.09 1209.47 L2061.51 1209.47 L2060.92 1209.47 L2060.33 1209.47 L2059.75 1209.47 L2059.16 1209.47 L2058.57 1209.47 L2057.99 1209.47 L2057.4 1209.47 L2056.81 1209.47 L2056.23 1209.47 L2055.64 1209.47 L2055.06 1209.47 L2054.47 1209.47 L2053.88 1209.47 L2053.3 1209.47 L2052.71 1209.47 L2052.12 1209.47 L2051.54 1209.47 L2050.95 1209.47 L2050.36 1209.47 L2049.78 1209.47 L2049.19 1209.47 L2048.6 1209.47 L2048.02 1209.47 L2047.43 1209.47 L2046.85 1209.47 L2046.26 1209.47 L2045.67 1209.47 L2045.09 1209.47 L2044.5 1209.47 L2043.91 1209.47 L2043.33 1209.47 L2042.74 1209.47 L2042.15 1209.47 L2041.57 1209.47 L2040.98 1209.47 L2040.4 1209.47 L2039.81 1209.47 L2039.22 1209.47 L2038.64 1209.47 L2038.05 1209.47 L2037.46 1209.47 L2036.88 1209.47 L2036.29 1209.47 L2035.7 1209.47 L2035.12 1209.47 L2034.53 1209.47 L2033.94 1209.47 L2033.36 1209.47 L2032.77 1209.47 L2032.19 1209.47 L2031.6 1209.47 L2031.01 1209.47 L2030.43 1209.47 L2029.84 1209.47 L2029.25 1209.47 L2028.67 1209.47 L2028.08 1209.47 L2027.49 1209.47 L2026.91 1209.47 L2026.32 1209.47 L2025.73 1209.47 L2025.15 1209.47 L2024.56 1209.47 L2023.98 1209.47 L2023.39 1209.47 L2022.8 1209.47 L2022.22 1209.47 L2021.63 1209.47 L2021.04 1209.47 L2020.46 1209.47 L2019.87 1209.47 L2019.28 1209.47 L2018.7 1209.47 L2018.11 1209.47 L2017.53 1209.47 L2016.94 1209.47 L2016.35 1209.47 L2015.77 1209.47 L2015.18 1209.47 L2014.59 1209.47 L2014.01 1209.47 L2013.42 1209.47 L2012.83 1209.47 L2012.25 1209.47 L2011.66 1209.47 L2011.07 1209.47 L2010.49 1209.47 L2009.9 1209.47 L2009.32 1209.47 L2008.73 1209.47 L2008.14 1209.47 L2007.56 1209.47 L2006.97 1209.47 L2006.38 1209.47 L2005.8 1209.47 L2005.21 1209.47 L2004.62 1209.47 L2004.04 1209.47 L2003.45 1209.47 L2002.86 1209.47 L2002.28 1209.47 L2001.69 1209.47 L2001.11 1209.47 L2000.52 1209.47 L1999.93 1209.47 L1999.35 1209.47 L1998.76 1209.47 L1998.17 1209.47 L1997.59 1209.47 L1997 1209.47 L1996.41 1209.47 L1995.83 1209.47 L1995.24 1209.47 L1994.65 1209.47 L1994.07 1209.47 L1993.48 1209.47 L1992.9 1209.47 L1992.31 1209.47 L1991.72 1209.47 L1991.14 1209.47 L1990.55 1209.47 L1989.96 1209.47 L1989.38 1209.47 L1988.79 1209.47 L1988.2 1209.47 L1987.62 1209.47 L1987.03 1209.47 L1986.45 1209.47 L1985.86 1209.47 L1985.27 1209.47 L1984.69 1209.47 L1984.1 1209.47 L1983.51 1209.47 L1982.93 1209.47 L1982.34 1209.47 L1981.75 1209.47 L1981.17 1209.47 L1980.58 1209.47 L1979.99 1209.47 L1979.41 1209.47 L1978.82 1209.47 L1978.24 1209.47 L1977.65 1209.47 L1977.06 1209.47 L1976.48 1209.47 L1975.89 1209.47 L1975.3 1209.47 L1974.72 1209.47 L1974.13 1209.47 L1973.54 1209.47 L1972.96 1209.47 L1972.37 1209.47 L1971.78 1209.47 L1971.2 1209.47 L1970.61 1209.47 L1970.03 1209.47 L1969.44 1209.47 L1968.85 1209.47 L1968.27 1209.47 L1967.68 1209.47 L1967.09 1209.47 L1966.51 1209.47 L1965.92 1209.47 L1965.33 1209.47 L1964.75 1209.47 L1964.16 1209.47 L1963.58 1209.47 L1962.99 1209.47 L1962.4 1209.47 L1961.82 1209.47 L1961.23 1209.47 L1960.64 1209.47 L1960.06 1209.47 L1959.47 1209.47 L1958.88 1209.47 L1958.3 1209.47 L1957.71 1209.47 L1957.12 1209.47 L1956.54 1209.47 L1955.95 1209.47 L1955.37 1209.47 L1954.78 1209.47 L1954.19 1209.47 L1953.61 1209.47 L1953.02 1209.47 L1952.43 1209.47 L1951.85 1209.47 L1951.26 1209.47 L1950.67 1209.47 L1950.09 1209.47 L1949.5 1209.47 L1948.91 1209.47 L1948.33 1209.47 L1947.74 1209.47 L1947.16 1209.47 L1946.57 1209.47 L1945.98 1209.47 L1945.4 1209.47 L1944.81 1209.47 L1944.22 1209.47 L1943.64 1209.47 L1943.05 1209.47 L1942.46 1209.47 L1941.88 1209.47 L1941.29 1209.47 L1940.71 1209.47 L1940.12 1209.47 L1939.53 1209.47 L1938.95 1209.47 L1938.36 1209.47 L1937.77 1209.47 L1937.19 1209.47 L1936.6 1209.47 L1936.01 1209.47 L1935.43 1209.47 L1934.84 1209.47 L1934.25 1209.47 L1933.67 1209.47 L1933.08 1209.47 L1932.5 1209.47 L1931.91 1209.47 L1931.32 1209.47 L1930.74 1209.47 L1930.15 1209.47 L1929.56 1209.47 L1928.98 1209.47 L1928.39 1209.47 L1927.8 1209.47 L1927.22 1209.47 L1926.63 1209.47 L1926.04 1209.47 L1925.46 1209.47 L1924.87 1209.47 L1924.29 1209.47 L1923.7 1209.47 L1923.11 1209.47 L1922.53 1209.47 L1921.94 1209.47 L1921.35 1209.47 L1920.77 1209.47 L1920.18 1209.47 L1919.59 1209.47 L1919.01 1209.47 L1918.42 1209.47 L1917.83 1209.47 L1917.25 1209.47 L1916.66 1209.47 L1916.08 1209.47 L1915.49 1209.47 L1914.9 1209.47 L1914.32 1209.47 L1913.73 1209.47 L1913.14 1209.47 L1912.56 1209.47 L1911.97 1209.47 L1911.38 1209.47 L1910.8 1209.47 L1910.21 1209.47 L1909.63 1209.47 L1909.04 1209.47 L1908.45 1209.47 L1907.87 1209.47 L1907.28 1209.47 L1906.69 1209.47 L1906.11 1209.47 L1905.52 1209.47 L1904.93 1209.47 L1904.35 1209.47 L1903.76 1209.47 L1903.17 1209.47 L1902.59 1209.47 L1902 1209.47 L1901.42 1209.47 L1900.83 1209.47 L1900.24 1209.47 L1899.66 1209.47 L1899.07 1209.47 L1898.48 1209.47 L1897.9 1209.47 L1897.31 1209.47 L1896.72 1209.47 L1896.14 1209.47 L1895.55 1209.47 L1894.96 1209.47 L1894.38 1209.47 L1893.79 1209.47 L1893.21 1209.47 L1892.62 1209.47 L1892.03 1209.47 L1891.45 1209.47 L1890.86 1209.47 L1890.27 1209.47 L1889.69 1209.47 L1889.1 1209.47 L1888.51 1209.47 L1887.93 1209.47 L1887.34 1209.47 L1886.76 1209.47 L1886.17 1209.47 L1885.58 1209.47 L1885 1209.47 L1884.41 1209.47 L1883.82 1209.47 L1883.24 1209.47 L1882.65 1209.47 L1882.06 1209.47 L1881.48 1209.47 L1880.89 1209.47 L1880.3 1209.47 L1879.72 1209.47 L1879.13 1209.47 L1878.55 1209.47 L1877.96 1209.47 L1877.37 1209.47 L1876.79 1209.47 L1876.2 1209.47 L1875.61 1209.47 L1875.03 1209.47 L1874.44 1209.47 L1873.85 1209.47 L1873.27 1209.47 L1872.68 1209.47 L1872.09 1209.47 L1871.51 1209.47 L1870.92 1209.47 L1870.34 1209.47 L1869.75 1209.47 L1869.16 1209.47 L1868.58 1209.47 L1867.99 1209.47 L1867.4 1209.47 L1866.82 1209.47 L1866.23 1209.47 L1865.64 1209.47 L1865.06 1209.47 L1864.47 1209.47 L1863.88 1209.47 L1863.3 1209.47 L1862.71 1209.47 L1862.13 1209.47 L1861.54 1209.47 L1860.95 1209.47 L1860.37 1209.47 L1859.78 1209.47 L1859.19 1209.47 L1858.61 1209.47 L1858.02 1209.47 L1857.43 1209.47 L1856.85 1209.47 L1856.26 1209.47 L1855.68 1209.47 L1855.09 1209.47 L1854.5 1209.47 L1853.92 1209.47 L1853.33 1209.47 L1852.74 1209.47 L1852.16 1209.47 L1851.57 1209.47 L1850.98 1209.47 L1850.4 1209.47 L1849.81 1209.47 L1849.22 1209.47 L1848.64 1209.47 L1848.05 1209.47 L1847.47 1209.47 L1846.88 1209.47 L1846.29 1209.47 L1845.71 1209.47 L1845.12 1209.47 L1844.53 1209.47 L1843.95 1209.47 L1843.36 1209.47 L1842.77 1209.47 L1842.19 1209.47 L1841.6 1209.47 L1841.01 1209.47 L1840.43 1209.47 L1839.84 1209.47 L1839.26 1209.47 L1838.67 1209.47 L1838.08 1209.47 L1837.5 1209.47 L1836.91 1209.47 L1836.32 1209.47 L1835.74 1209.47 L1835.15 1209.47 L1834.56 1209.47 L1833.98 1209.47 L1833.39 1209.47 L1832.81 1209.47 L1832.22 1209.47 L1831.63 1209.47 L1831.05 1209.47 L1830.46 1209.47 L1829.87 1209.47 L1829.29 1209.47 L1828.7 1209.47 L1828.11 1209.47 L1827.53 1209.47 L1826.94 1209.47 L1826.35 1209.47 L1825.77 1209.47 L1825.18 1209.47 L1824.6 1209.47 L1824.01 1209.47 L1823.42 1209.47 L1822.84 1209.47 L1822.25 1209.47 L1821.66 1209.47 L1821.08 1209.47 L1820.49 1209.47 L1819.9 1209.47 L1819.32 1209.47 L1818.73 1209.47 L1818.14 1209.47 L1817.56 1209.47 L1816.97 1209.47 L1816.39 1209.47 L1815.8 1209.47 L1815.21 1209.47 L1814.63 1209.47 L1814.04 1209.47 L1813.45 1209.47 L1812.87 1209.47 L1812.28 1209.47 L1811.69 1209.47 L1811.11 1209.47 L1810.52 1209.47 L1809.94 1209.47 L1809.35 1209.47 L1808.76 1209.47 L1808.18 1209.47 L1807.59 1209.47 L1807 1209.47 L1806.42 1209.47 L1805.83 1209.47 L1805.24 1209.47 L1804.66 1209.47 L1804.07 1209.47 L1803.48 1209.47 L1802.9 1209.47 L1802.31 1209.47 L1801.73 1209.47 L1801.14 1209.47 L1800.55 1209.47 L1799.97 1209.47 L1799.38 1209.47 L1798.79 1209.47 L1798.21 1209.47 L1797.62 1209.47 L1797.03 1209.47 L1796.45 1209.47 L1795.86 1209.47 L1795.27 1209.47 L1794.69 1209.47 L1794.1 1209.47 L1793.52 1209.47 L1792.93 1209.47 L1792.34 1209.47 L1791.76 1209.47 L1791.17 1209.47 L1790.58 1209.47 L1790 1209.47 L1789.41 1209.47 L1788.82 1209.47 L1788.24 1209.47 L1787.65 1209.47 L1787.06 1209.47 L1786.48 1209.47 L1785.89 1209.47 L1785.31 1209.47 L1784.72 1209.47 L1784.13 1209.47 L1783.55 1209.47 L1782.96 1209.47 L1782.37 1209.47 L1781.79 1209.47 L1781.2 1209.47 L1780.61 1209.47 L1780.03 1209.47 L1779.44 1209.47 L1778.86 1209.47 L1778.27 1209.47 L1777.68 1209.47 L1777.1 1209.47 L1776.51 1209.47 L1775.92 1209.47 L1775.34 1209.47 L1774.75 1209.47 L1774.16 1209.47 L1773.58 1209.47 L1772.99 1209.47 L1772.4 1209.47 L1771.82 1209.47 L1771.23 1209.47 L1770.65 1209.47 L1770.06 1209.47 L1769.47 1209.47 L1768.89 1209.47 L1768.3 1209.47 L1767.71 1209.47 L1767.13 1209.47 L1766.54 1209.47 L1765.95 1209.47 L1765.37 1209.47 L1764.78 1209.47 L1764.19 1209.47 L1763.61 1209.47 L1763.02 1209.47 L1762.44 1209.47 L1761.85 1209.47 L1761.26 1209.47 L1760.68 1209.47 L1760.09 1209.47 L1759.5 1209.47 L1758.92 1209.47 L1758.33 1209.47 L1757.74 1209.47 L1757.16 1209.47 L1756.57 1209.47 L1755.99 1209.47 L1755.4 1209.47 L1754.81 1209.47 L1754.23 1209.47 L1753.64 1209.47 L1753.05 1209.47 L1752.47 1209.47 L1751.88 1209.47 L1751.29 1209.47 L1750.71 1209.47 L1750.12 1209.47 L1749.53 1209.47 L1748.95 1209.47 L1748.36 1209.47 L1747.78 1209.47 L1747.19 1209.47 L1746.6 1209.47 L1746.02 1209.47 L1745.43 1209.47 L1744.84 1209.47 L1744.26 1209.47 L1743.67 1209.47 L1743.08 1209.47 L1742.5 1209.47 L1741.91 1209.47 L1741.32 1209.47 L1740.74 1209.47 L1740.15 1209.47 L1739.57 1209.47 L1738.98 1209.47 L1738.39 1209.47 L1737.81 1209.47 L1737.22 1209.47 L1736.63 1209.47 L1736.05 1209.47 L1735.46 1209.47 L1734.87 1209.47 L1734.29 1209.47 L1733.7 1209.47 L1733.11 1209.47 L1732.53 1209.47 L1731.94 1209.47 L1731.36 1209.47 L1730.77 1209.47 L1730.18 1209.47 L1729.6 1209.47 L1729.01 1209.47 L1728.42 1209.47 L1727.84 1209.47 L1727.25 1209.47 L1726.66 1209.47 L1726.08 1209.47 L1725.49 1209.47 L1724.91 1209.47 L1724.32 1209.47 L1723.73 1209.47 L1723.15 1209.47 L1722.56 1209.47 L1721.97 1209.47 L1721.39 1209.47 L1720.8 1209.47 L1720.21 1209.47 L1719.63 1209.47 L1719.04 1209.47 L1718.45 1209.47 L1717.87 1209.47 L1717.28 1209.47 L1716.7 1209.47 L1716.11 1209.47 L1715.52 1209.47 L1714.94 1209.47 L1714.35 1209.47 L1713.76 1209.47 L1713.18 1209.47 L1712.59 1209.47 L1712 1209.47 L1711.42 1209.47 L1710.83 1209.47 L1710.24 1209.47 L1709.66 1209.47 L1709.07 1209.47 L1708.49 1209.47 L1707.9 1209.47 L1707.31 1209.47 L1706.73 1209.47 L1706.14 1209.47 L1705.55 1209.47 L1704.97 1209.47 L1704.38 1209.47 L1703.79 1209.47 L1703.21 1209.47 L1702.62 1209.47 L1702.04 1209.47 L1701.45 1209.47 L1700.86 1209.47 L1700.28 1209.47 L1699.69 1209.47 L1699.1 1209.47 L1698.52 1209.47 L1697.93 1209.47 L1697.34 1209.47 L1696.76 1209.47 L1696.17 1209.47 L1695.58 1209.47 L1695 1209.47 L1694.41 1209.47 L1693.83 1209.47 L1693.24 1209.47 L1692.65 1209.47 L1692.07 1209.47 L1691.48 1209.47 L1690.89 1209.47 L1690.31 1209.47 L1689.72 1209.47 L1689.13 1209.47 L1688.55 1209.47 L1687.96 1209.47 L1687.37 1209.47 L1686.79 1209.47 L1686.2 1209.47 L1685.62 1209.47 L1685.03 1209.47 L1684.44 1209.47 L1683.86 1209.47 L1683.27 1209.47 L1682.68 1209.47 L1682.1 1209.47 L1681.51 1209.47 L1680.92 1209.47 L1680.34 1209.47 L1679.75 1209.47 L1679.17 1209.47 L1678.58 1209.47 L1677.99 1209.47 L1677.41 1209.47 L1676.82 1209.47 L1676.23 1209.47 L1675.65 1209.47 L1675.06 1209.47 L1674.47 1209.47 L1673.89 1209.47 L1673.3 1209.47 L1672.71 1209.47 L1672.13 1209.47 L1671.54 1209.47 L1670.96 1209.47 L1670.37 1209.47 L1669.78 1209.47 L1669.2 1209.47 L1668.61 1209.47 L1668.02 1209.47 L1667.44 1209.47 L1666.85 1209.47 L1666.26 1209.47 L1665.68 1209.47 L1665.09 1209.47 L1664.5 1209.47 L1663.92 1209.47 L1663.33 1209.47 L1662.75 1209.47 L1662.16 1209.47 L1661.57 1209.47 L1660.99 1209.47 L1660.4 1209.47 L1659.81 1209.47 L1659.23 1209.47 L1658.64 1209.47 L1658.05 1209.47 L1657.47 1209.47 L1656.88 1209.47 L1656.29 1209.47 L1655.71 1209.47 L1655.12 1209.47 L1654.54 1209.47 L1653.95 1209.47 L1653.36 1209.47 L1652.78 1209.47 L1652.19 1209.47 L1651.6 1209.47 L1651.02 1209.47 L1650.43 1209.47 L1649.84 1209.47 L1649.26 1209.47 L1648.67 1209.47 L1648.09 1209.47 L1647.5 1209.47 L1646.91 1209.47 L1646.33 1209.47 L1645.74 1209.47 L1645.15 1209.47 L1644.57 1209.47 L1643.98 1209.47 L1643.39 1209.47 L1642.81 1209.47 L1642.22 1209.47 L1641.63 1209.47 L1641.05 1209.47 L1640.46 1209.47 L1639.88 1209.47 L1639.29 1209.47 L1638.7 1209.47 L1638.12 1209.47 L1637.53 1209.47 L1636.94 1209.47 L1636.36 1209.47 L1635.77 1209.47 L1635.18 1209.47 L1634.6 1209.47 L1634.01 1209.47 L1633.42 1209.47 L1632.84 1209.47 L1632.25 1209.47 L1631.67 1209.47 L1631.08 1209.47 L1630.49 1209.47 L1629.91 1209.47 L1629.32 1209.47 L1628.73 1209.47 L1628.15 1209.47 L1627.56 1209.47 L1626.97 1209.47 L1626.39 1209.47 L1625.8 1209.47 L1625.22 1209.47 L1624.63 1209.47 L1624.04 1209.47 L1623.46 1209.47 L1622.87 1209.47 L1622.28 1209.47 L1621.7 1209.47 L1621.11 1209.47 L1620.52 1209.47 L1619.94 1209.47 L1619.35 1209.47 L1618.76 1209.47 L1618.18 1209.47 L1617.59 1209.47 L1617.01 1209.47 L1616.42 1209.47 L1615.83 1209.47 L1615.25 1209.47 L1614.66 1209.47 L1614.07 1209.47 L1613.49 1209.47 L1612.9 1209.47 L1612.31 1209.47 L1611.73 1209.47 L1611.14 1209.47 L1610.55 1209.47 L1609.97 1209.47 L1609.38 1209.47 L1608.8 1209.47 L1608.21 1209.47 L1607.62 1209.47 L1607.04 1209.47 L1606.45 1209.47 L1605.86 1209.47 L1605.28 1209.47 L1604.69 1209.47 L1604.1 1209.47 L1603.52 1209.47 L1602.93 1209.47 L1602.34 1209.47 L1601.76 1209.47 L1601.17 1209.47 L1600.59 1209.47 L1600 1209.47 L1599.41 1209.47 L1598.83 1209.47 L1598.24 1209.47 L1597.65 1209.47 L1597.07 1209.47 L1596.48 1209.47 L1595.89 1209.47 L1595.31 1209.47 L1594.72 1209.47 L1594.14 1209.47 L1593.55 1209.47 L1592.96 1209.47 L1592.38 1209.47 L1591.79 1209.47 L1591.2 1209.47 L1590.62 1209.47 L1590.03 1209.47 L1589.44 1209.47 L1588.86 1209.47 L1588.27 1209.47 L1587.68 1209.47 L1587.1 1209.47 L1586.51 1209.47 L1585.93 1209.47 L1585.34 1209.47 L1584.75 1209.47 L1584.17 1209.47 L1583.58 1209.47 L1582.99 1209.47 L1582.41 1209.47 L1581.82 1209.47 L1581.23 1209.47 L1580.65 1209.47 L1580.06 1209.47 L1579.47 1209.47 L1578.89 1209.47 L1578.3 1209.47 L1577.72 1209.47 L1577.13 1209.47 L1576.54 1209.47 L1575.96 1209.47 L1575.37 1209.47 L1574.78 1209.47 L1574.2 1209.47 L1573.61 1209.47 L1573.02 1209.47 L1572.44 1209.47 L1571.85 1209.47 L1571.27 1209.47 L1570.68 1209.47 L1570.09 1209.47 L1569.51 1209.47 L1568.92 1209.47 L1568.33 1209.47 L1567.75 1209.47 L1567.16 1209.47 L1566.57 1209.47 L1565.99 1209.47 L1565.4 1209.47 L1564.81 1209.47 L1564.23 1209.47 L1563.64 1209.47 L1563.06 1209.47 L1562.47 1209.47 L1561.88 1209.47 L1561.3 1209.47 L1560.71 1209.47 L1560.12 1209.47 L1559.54 1209.47 L1558.95 1209.47 L1558.36 1209.47 L1557.78 1209.47 L1557.19 1209.47 L1556.6 1209.47 L1556.02 1209.47 L1555.43 1209.47 L1554.85 1209.47 L1554.26 1209.47 L1553.67 1209.47 L1553.09 1209.47 L1552.5 1209.47 L1551.91 1209.47 L1551.33 1209.47 L1550.74 1209.47 L1550.15 1209.47 L1549.57 1209.47 L1548.98 1209.47 L1548.4 1209.47 L1547.81 1209.47 L1547.22 1209.47 L1546.64 1209.47 L1546.05 1209.47 L1545.46 1209.47 L1544.88 1209.47 L1544.29 1209.47 L1543.7 1209.47 L1543.12 1209.47 L1542.53 1209.47 L1541.94 1209.47 L1541.36 1209.47 L1540.77 1209.47 L1540.19 1209.47 L1539.6 1209.47 L1539.01 1209.47 L1538.43 1209.47 L1537.84 1209.47 L1537.25 1209.47 L1536.67 1209.47 L1536.08 1209.47 L1535.49 1209.47 L1534.91 1209.47 L1534.32 1209.47 L1533.73 1209.47 L1533.15 1209.47 L1532.56 1209.47 L1531.98 1209.47 L1531.39 1209.47 L1530.8 1209.47 L1530.22 1209.47 L1529.63 1209.47 L1529.04 1209.47 L1528.46 1209.47 L1527.87 1209.47 L1527.28 1209.47 L1526.7 1209.47 L1526.11 1209.47 L1525.52 1209.47 L1524.94 1209.47 L1524.35 1209.47 L1523.77 1209.47 L1523.18 1209.47 L1522.59 1209.47 L1522.01 1209.47 L1521.42 1209.47 L1520.83 1209.47 L1520.25 1209.47 L1519.66 1209.47 L1519.07 1209.47 L1518.49 1209.47 L1517.9 1209.47 L1517.32 1209.47 L1516.73 1209.47 L1516.14 1209.47 L1515.56 1209.47 L1514.97 1209.47 L1514.38 1209.47 L1513.8 1209.47 L1513.21 1209.47 L1512.62 1209.47 L1512.04 1209.47 L1511.45 1209.47 L1510.86 1209.47 L1510.28 1209.47 L1509.69 1209.47 L1509.11 1209.47 L1508.52 1209.47 L1507.93 1209.47 L1507.35 1209.47 L1506.76 1209.47 L1506.17 1209.47 L1505.59 1209.47 L1505 1209.47 L1504.41 1209.47 L1503.83 1209.47 L1503.24 1209.47 L1502.65 1209.47 L1502.07 1209.47 L1501.48 1209.47 L1500.9 1209.47 L1500.31 1209.47 L1499.72 1209.47 L1499.14 1209.47 L1498.55 1209.47 L1497.96 1209.47 L1497.38 1209.47 L1496.79 1209.47 L1496.2 1209.47 L1495.62 1209.47 L1495.03 1209.47 L1494.45 1209.47 L1493.86 1209.47 L1493.27 1209.47 L1492.69 1209.47 L1492.1 1209.47 L1491.51 1209.47 L1490.93 1209.47 L1490.34 1209.47 L1489.75 1209.47 L1489.17 1209.47 L1488.58 1209.47 L1487.99 1209.47 L1487.41 1209.47 L1486.82 1209.47 L1486.24 1209.47 L1485.65 1209.47 L1485.06 1209.47 L1484.48 1209.47 L1483.89 1209.47 L1483.3 1209.47 L1482.72 1209.47 L1482.13 1209.47 L1481.54 1209.47 L1480.96 1209.47 L1480.37 1209.47 L1479.78 1209.47 L1479.2 1209.47 L1478.61 1209.47 L1478.03 1209.47 L1477.44 1209.47 L1476.85 1209.47 L1476.27 1209.47 L1475.68 1209.47 L1475.09 1209.47 L1474.51 1209.47 L1473.92 1209.47 L1473.33 1209.47 L1472.75 1209.47 L1472.16 1209.47 L1471.57 1209.47 L1470.99 1209.47 L1470.4 1209.47 L1469.82 1209.47 L1469.23 1209.47 L1468.64 1209.47 L1468.06 1209.47 L1467.47 1209.47 L1466.88 1209.47 L1466.3 1209.47 L1465.71 1209.47 L1465.12 1209.47 L1464.54 1209.47 L1463.95 1209.47 L1463.37 1209.47 L1462.78 1209.47 L1462.19 1209.47 L1461.61 1209.47 L1461.02 1209.47 L1460.43 1209.47 L1459.85 1209.47 L1459.26 1209.47 L1458.67 1209.47 L1458.09 1209.47 L1457.5 1209.47 L1456.91 1209.47 L1456.33 1209.47 L1455.74 1209.47 L1455.16 1209.47 L1454.57 1209.47 L1453.98 1209.47 L1453.4 1209.47 L1452.81 1209.47 L1452.22 1209.47 L1451.64 1209.47 L1451.05 1209.47 L1450.46 1209.47 L1449.88 1209.47 L1449.29 1209.47 L1448.7 1209.47 L1448.12 1209.47 L1447.53 1209.47 L1446.95 1209.47 L1446.36 1209.47 L1445.77 1209.47 L1445.19 1209.47 L1444.6 1209.47 L1444.01 1209.47 L1443.43 1209.47 L1442.84 1209.47 L1442.25 1209.47 L1441.67 1209.47 L1441.08 1209.47 L1440.5 1209.47 L1439.91 1209.47 L1439.32 1209.47 L1438.74 1209.47 L1438.15 1209.47 L1437.56 1209.47 L1436.98 1209.47 L1436.39 1209.47 L1435.8 1209.47 L1435.22 1209.47 L1434.63 1209.47 L1434.04 1209.47 L1433.46 1209.47 L1432.87 1209.47 L1432.29 1209.47 L1431.7 1209.47 L1431.11 1209.47 L1430.53 1209.47 L1429.94 1209.47 L1429.35 1209.47 L1428.77 1209.47 L1428.18 1209.47 L1427.59 1209.47 L1427.01 1209.47 L1426.42 1209.47 L1425.83 1209.47 L1425.25 1209.47 L1424.66 1209.47 L1424.08 1209.47 L1423.49 1209.47 L1422.9 1209.47 L1422.32 1209.47 L1421.73 1209.47 L1421.14 1209.47 L1420.56 1209.47 L1419.97 1209.47 L1419.38 1209.47 L1418.8 1209.47 L1418.21 1209.47 L1417.63 1209.47 L1417.04 1209.47 L1416.45 1209.47 L1415.87 1209.47 L1415.28 1209.47 L1414.69 1209.47 L1414.11 1209.47 L1413.52 1209.47 L1412.93 1209.47 L1412.35 1209.47 L1411.76 1209.47 L1411.17 1209.47 L1410.59 1209.47 L1410 1209.47 L1409.42 1209.47 L1408.83 1209.47 L1408.24 1209.47 L1407.66 1209.47 L1407.07 1209.47 L1406.48 1209.47 L1405.9 1209.47 L1405.31 1209.47 L1404.72 1209.47 L1404.14 1209.47 L1403.55 1209.47 L1402.96 1209.47 L1402.38 1209.47 L1401.79 1209.47 L1401.21 1209.47 L1400.62 1209.47 L1400.03 1209.47 L1399.45 1209.47 L1398.86 1209.47 L1398.27 1209.47 L1397.69 1209.47 L1397.1 1209.47 L1396.51 1209.47 L1395.93 1209.47 L1395.34 1209.47 L1394.75 1209.47 L1394.17 1209.47 L1393.58 1209.47 L1393 1209.47 L1392.41 1209.47 L1391.82 1209.47 L1391.24 1209.47 L1390.65 1209.47 L1390.06 1209.47 L1389.48 1209.47 L1388.89 1209.47 L1388.3 1209.47 L1387.72 1209.47 L1387.13 1209.47 L1386.55 1209.47 L1385.96 1209.47 L1385.37 1209.47 L1384.79 1209.47 L1384.2 1209.47 L1383.61 1209.47 L1383.03 1209.47 L1382.44 1209.47 L1381.85 1209.47 L1381.27 1209.47 L1380.68 1209.47 L1380.09 1209.47 L1379.51 1209.47 L1378.92 1209.47 L1378.34 1209.47 L1377.75 1209.47 L1377.16 1209.47 L1376.58 1209.47 L1375.99 1209.47 L1375.4 1209.47 L1374.82 1209.47 L1374.23 1209.47 L1373.64 1209.47 L1373.06 1209.47 L1372.47 1209.47 L1371.88 1209.47 L1371.3 1209.47 L1370.71 1209.47 L1370.13 1209.47 L1369.54 1209.47 L1368.95 1209.47 L1368.37 1209.47 L1367.78 1209.47 L1367.19 1209.47 L1366.61 1209.47 L1366.02 1209.47 L1365.43 1209.47 L1364.85 1209.47 L1364.26 1209.47 L1363.68 1209.47 L1363.09 1209.47 L1362.5 1209.47 L1361.92 1209.47 L1361.33 1209.47 L1360.74 1209.47 L1360.16 1209.47 L1359.57 1209.47 L1358.98 1209.47 L1358.4 1209.47 L1357.81 1209.47 L1357.22 1209.47 L1356.64 1209.47 L1356.05 1209.47 L1355.47 1209.47 L1354.88 1209.47 L1354.29 1209.47 L1353.71 1209.47 L1353.12 1209.47 L1352.53 1209.47 L1351.95 1209.47 L1351.36 1209.47 L1350.77 1209.47 L1350.19 1209.47 L1349.6 1209.47 L1349.01 1209.47 L1348.43 1209.47 L1347.84 1209.47 L1347.26 1209.47 L1346.67 1209.47 L1346.08 1209.47 L1345.5 1209.47 L1344.91 1209.47 L1344.32 1209.47 L1343.74 1209.47 L1343.15 1209.47 L1342.56 1209.47 L1341.98 1209.47 L1341.39 1209.47 L1340.8 1209.47 L1340.22 1209.47 L1339.63 1209.47 L1339.05 1209.47 L1338.46 1209.47 L1337.87 1209.47 L1337.29 1209.47 L1336.7 1209.47 L1336.11 1209.47 L1335.53 1209.47 L1334.94 1209.47 L1334.35 1209.47 L1333.77 1209.47 L1333.18 1209.47 L1332.6 1209.47 L1332.01 1209.47 L1331.42 1209.47 L1330.84 1209.47 L1330.25 1209.47 L1329.66 1209.47 L1329.08 1209.47 L1328.49 1209.47 L1327.9 1209.47 L1327.32 1209.47 L1326.73 1209.47 L1326.14 1209.47 L1325.56 1209.47 L1324.97 1209.47 L1324.39 1209.47 L1323.8 1209.47 L1323.21 1209.47 L1322.63 1209.47 L1322.04 1209.47 L1321.45 1209.47 L1320.87 1209.47 L1320.28 1209.47 L1319.69 1209.47 L1319.11 1209.47 L1318.52 1209.47 L1317.93 1209.47 L1317.35 1209.47 L1316.76 1209.47 L1316.18 1209.47 L1315.59 1209.47 L1315 1209.47 L1314.42 1209.47 L1313.83 1209.47 L1313.24 1209.47 L1312.66 1209.47 L1312.07 1209.47 L1311.48 1209.47 L1310.9 1209.47 L1310.31 1209.47 L1309.73 1209.47 L1309.14 1209.47 L1308.55 1209.47 L1307.97 1209.47 L1307.38 1209.47 L1306.79 1209.47 L1306.21 1209.47 L1305.62 1209.47 L1305.03 1209.47 L1304.45 1209.47 L1303.86 1209.47 L1303.27 1209.47 L1302.69 1209.47 L1302.1 1209.47 L1301.52 1209.47 L1300.93 1209.47 L1300.34 1209.47 L1299.76 1209.47 L1299.17 1209.47 L1298.58 1209.47 L1298 1209.47 L1297.41 1209.47 L1296.82 1209.47 L1296.24 1209.47 L1295.65 1209.47 L1295.06 1209.47 L1294.48 1209.47 L1293.89 1209.47 L1293.31 1209.47 L1292.72 1209.47 L1292.13 1209.47 L1291.55 1209.47 L1290.96 1209.47 L1290.37 1209.47 L1289.79 1209.47 L1289.2 1209.47 L1288.61 1209.47 L1288.03 1209.47 L1287.44 1209.47 L1286.86 1209.47 L1286.27 1209.47 L1285.68 1209.47 L1285.1 1209.47 L1284.51 1209.47 L1283.92 1209.47 L1283.34 1209.47 L1282.75 1209.47 L1282.16 1209.47 L1281.58 1209.47 L1280.99 1209.47 L1280.4 1209.47 L1279.82 1209.47 L1279.23 1209.47 L1278.65 1209.47 L1278.06 1209.47 L1277.47 1209.47 L1276.89 1209.47 L1276.3 1209.47 L1275.71 1209.47 L1275.13 1209.47 L1274.54 1209.47 L1273.95 1209.47 L1273.37 1209.47 L1272.78 1209.47 L1272.19 1209.47 L1271.61 1209.47 L1271.02 1209.47 L1270.44 1209.47 L1269.85 1209.47 L1269.26 1209.47 L1268.68 1209.47 L1268.09 1209.47 L1267.5 1209.47 L1266.92 1209.47 L1266.33 1209.47 L1265.74 1209.47 L1265.16 1209.47 L1264.57 1209.47 L1263.98 1209.47 L1263.4 1209.47 L1262.81 1209.47 L1262.23 1209.47 L1261.64 1209.47 L1261.05 1209.47 L1260.47 1209.47 L1259.88 1209.47 L1259.29 1209.47 L1258.71 1209.47 L1258.12 1209.47 L1257.53 1209.47 L1256.95 1209.47 L1256.36 1209.47 L1255.78 1209.47 L1255.19 1209.47 L1254.6 1209.47 L1254.02 1209.47 L1253.43 1209.47 L1252.84 1209.47 L1252.26 1209.47 L1251.67 1209.47 L1251.08 1209.47 L1250.5 1209.47 L1249.91 1209.47 L1249.32 1209.47 L1248.74 1209.47 L1248.15 1209.47 L1247.57 1209.47 L1246.98 1209.47 L1246.39 1209.47 L1245.81 1209.47 L1245.22 1209.47 L1244.63 1209.47 L1244.05 1209.47 L1243.46 1209.47 L1242.87 1209.47 L1242.29 1209.47 L1241.7 1209.47 L1241.11 1209.47 L1240.53 1209.47 L1239.94 1209.47 L1239.36 1209.47 L1238.77 1209.47 L1238.18 1209.47 L1237.6 1209.47 L1237.01 1209.47 L1236.42 1209.47 L1235.84 1209.47 L1235.25 1209.47 L1234.66 1209.47 L1234.08 1209.47 L1233.49 1209.47 L1232.91 1209.47 L1232.32 1209.47 L1231.73 1209.47 L1231.15 1209.47 L1230.56 1209.47 L1229.97 1209.47 L1229.39 1209.47 L1228.8 1209.47 L1228.21 1209.47 L1227.63 1209.47 L1227.04 1209.47 L1226.45 1209.47 L1225.87 1209.47 L1225.28 1209.47 L1224.7 1209.47 L1224.11 1209.47 L1223.52 1209.47 L1222.94 1209.47 L1222.35 1209.47 L1221.76 1209.47 L1221.18 1209.47 L1220.59 1209.47 L1220 1209.47 L1219.42 1209.47 L1218.83 1209.47 L1218.24 1209.47 L1217.66 1209.47 L1217.07 1209.47 L1216.49 1209.47 L1215.9 1209.47 L1215.31 1209.47 L1214.73 1209.47 L1214.14 1209.47 L1213.55 1209.47 L1212.97 1209.47 L1212.38 1209.47 L1211.79 1209.47 L1211.21 1209.47 L1210.62 1209.47 L1210.03 1209.47 L1209.45 1209.47 L1208.86 1209.47 L1208.28 1209.47 L1207.69 1209.47 L1207.1 1209.47 L1206.52 1209.47 L1205.93 1209.47 L1205.34 1209.47 L1204.76 1209.47 L1204.17 1209.47 L1203.58 1209.47 L1203 1209.47 L1202.41 1209.47 L1201.83 1209.47 L1201.24 1209.47 L1200.65 1209.47 L1200.07 1209.47 L1199.48 1209.47 L1198.89 1209.47 L1198.31 1209.47 L1197.72 1209.47 L1197.13 1209.47 L1196.55 1209.47 L1195.96 1209.47 L1195.37 1209.47 L1194.79 1209.47 L1194.2 1209.47 L1193.62 1209.47 L1193.03 1209.47 L1192.44 1209.47 L1191.86 1209.47 L1191.27 1209.47 L1190.68 1209.47 L1190.1 1209.47 L1189.51 1209.47 L1188.92 1209.47 L1188.34 1209.47 L1187.75 1209.47 L1187.16 1209.47 L1186.58 1209.47 L1185.99 1209.47 L1185.41 1209.47 L1184.82 1209.47 L1184.23 1209.47 L1183.65 1209.47 L1183.06 1209.47 L1182.47 1209.47 L1181.89 1209.47 L1181.3 1209.47 L1180.71 1209.47 L1180.13 1209.47 L1179.54 1209.47 L1178.96 1209.47 L1178.37 1209.47 L1177.78 1209.47 L1177.2 1209.47 L1176.61 1209.47 L1176.02 1209.47 L1175.44 1209.47 L1174.85 1209.47 L1174.26 1209.47 L1173.68 1209.47 L1173.09 1209.47 L1172.5 1209.47 L1171.92 1209.47 L1171.33 1209.47 L1170.75 1209.47 L1170.16 1209.47 L1169.57 1209.47 L1168.99 1209.47 L1168.4 1209.47 L1167.81 1209.47 L1167.23 1209.47 L1166.64 1209.47 L1166.05 1209.47 L1165.47 1209.47 L1164.88 1209.47 L1164.29 1209.47 L1163.71 1209.47 L1163.12 1209.47 L1162.54 1209.47 L1161.95 1209.47 L1161.36 1209.47 L1160.78 1209.47 L1160.19 1209.47 L1159.6 1209.47 L1159.02 1209.47 L1158.43 1209.47 L1157.84 1209.47 L1157.26 1209.47 L1156.67 1209.47 L1156.09 1209.47 L1155.5 1209.47 L1154.91 1209.47 L1154.33 1209.47 L1153.74 1209.47 L1153.15 1209.47 L1152.57 1209.47 L1151.98 1209.47 L1151.39 1209.47 L1150.81 1209.47 L1150.22 1209.47 L1149.63 1209.47 L1149.05 1209.47 L1148.46 1209.47 L1147.88 1209.47 L1147.29 1209.47 L1146.7 1209.47 L1146.12 1209.47 L1145.53 1209.47 L1144.94 1209.47 L1144.36 1209.47 L1143.77 1209.47 L1143.18 1209.47 L1142.6 1209.47 L1142.01 1209.47 L1141.42 1209.47 L1140.84 1209.47 L1140.25 1209.47 L1139.67 1209.47 L1139.08 1209.47 L1138.49 1209.47 L1137.91 1209.47 L1137.32 1209.47 L1136.73 1209.47 L1136.15 1209.47 L1135.56 1209.47 L1134.97 1209.47 L1134.39 1209.47 L1133.8 1209.47 L1133.21 1209.47 L1132.63 1209.47 L1132.04 1209.47 L1131.46 1209.47 L1130.87 1209.47 L1130.28 1209.47 L1129.7 1209.47 L1129.11 1209.47 L1128.52 1209.47 L1127.94 1209.47 L1127.35 1209.47 L1126.76 1209.47 L1126.18 1209.47 L1125.59 1209.47 L1125.01 1209.47 L1124.42 1209.47 L1123.83 1209.47 L1123.25 1209.47 L1122.66 1209.47 L1122.07 1209.47 L1121.49 1209.47 L1120.9 1209.47 L1120.31 1209.47 L1119.73 1209.47 L1119.14 1209.47 L1118.55 1209.47 L1117.97 1209.47 L1117.38 1209.47 L1116.8 1209.47 L1116.21 1209.47 L1115.62 1209.47 L1115.04 1209.47 L1114.45 1209.47 L1113.86 1209.47 L1113.28 1209.47 L1112.69 1209.47 L1112.1 1209.47 L1111.52 1209.47 L1110.93 1209.47 L1110.34 1209.47 L1109.76 1209.47 L1109.17 1209.47 L1108.59 1209.47 L1108 1209.47 L1107.41 1209.47 L1106.83 1209.47 L1106.24 1209.47 L1105.65 1209.47 L1105.07 1209.47 L1104.48 1209.47 L1103.89 1209.47 L1103.31 1209.47 L1102.72 1209.47 L1102.14 1209.47 L1101.55 1209.47 L1100.96 1209.47 L1100.38 1209.47 L1099.79 1209.47 L1099.2 1209.47 L1098.62 1209.47 L1098.03 1209.47 L1097.44 1209.47 L1096.86 1209.47 L1096.27 1209.47 L1095.68 1209.47 L1095.1 1209.47 L1094.51 1209.47 L1093.93 1209.47 L1093.34 1209.47 L1092.75 1209.47 L1092.17 1209.47 L1091.58 1209.47 L1090.99 1209.47 L1090.41 1209.47 L1089.82 1209.47 L1089.23 1209.47 L1088.65 1209.47 L1088.06 1209.47 L1087.47 1209.47 L1086.89 1209.47 L1086.3 1209.47 L1085.72 1209.47 L1085.13 1209.47 L1084.54 1209.47 L1083.96 1209.47 L1083.37 1209.47 L1082.78 1209.47 L1082.2 1209.47 L1081.61 1209.47 L1081.02 1209.47 L1080.44 1209.47 L1079.85 1209.47 L1079.26 1209.47 L1078.68 1209.47 L1078.09 1209.47 L1077.51 1209.47 L1076.92 1209.47 L1076.33 1209.47 L1075.75 1209.47 L1075.16 1209.47 L1074.57 1209.47 L1073.99 1209.47 L1073.4 1209.47 L1072.81 1209.47 L1072.23 1209.47 L1071.64 1209.47 L1071.06 1209.47 L1070.47 1209.47 L1069.88 1209.47 L1069.3 1209.47 L1068.71 1209.47 L1068.12 1209.47 L1067.54 1209.47 L1066.95 1209.47 L1066.36 1209.47 L1065.78 1209.47 L1065.19 1209.47 L1064.6 1209.47 L1064.02 1209.47 L1063.43 1209.47 L1062.85 1209.47 L1062.26 1209.47 L1061.67 1209.47 L1061.09 1209.47 L1060.5 1209.47 L1059.91 1209.47 L1059.33 1209.47 L1058.74 1209.47 L1058.15 1209.47 L1057.57 1209.47 L1056.98 1209.47 L1056.39 1209.47 L1055.81 1209.47 L1055.22 1209.47 L1054.64 1209.47 L1054.05 1209.47 L1053.46 1209.47 L1052.88 1209.47 L1052.29 1209.47 L1051.7 1209.47 L1051.12 1209.47 L1050.53 1209.47 L1049.94 1209.47 L1049.36 1209.47 L1048.77 1209.47 L1048.19 1209.47 L1047.6 1209.47 L1047.01 1209.47 L1046.43 1209.47 L1045.84 1209.47 L1045.25 1209.47 L1044.67 1209.47 L1044.08 1209.47 L1043.49 1209.47 L1042.91 1209.47 L1042.32 1209.47 L1041.73 1209.47 L1041.15 1209.47 L1040.56 1209.47 L1039.98 1209.47 L1039.39 1209.47 L1038.8 1209.47 L1038.22 1209.47 L1037.63 1209.47 L1037.04 1209.47 L1036.46 1209.47 L1035.87 1209.47 L1035.28 1209.47 L1034.7 1209.47 L1034.11 1209.47 L1033.52 1209.47 L1032.94 1209.47 L1032.35 1209.47 L1031.77 1209.47 L1031.18 1209.47 L1030.59 1209.47 L1030.01 1209.47 L1029.42 1209.47 L1028.83 1209.47 L1028.25 1209.47 L1027.66 1209.47 L1027.07 1209.47 L1026.49 1209.47 L1025.9 1209.47 L1025.32 1209.47 L1024.73 1209.47 L1024.14 1209.47 L1023.56 1209.47 L1022.97 1209.47 L1022.38 1209.47 L1021.8 1209.47 L1021.21 1209.47 L1020.62 1209.47 L1020.04 1209.47 L1019.45 1209.47 L1018.86 1209.47 L1018.28 1209.47 L1017.69 1209.47 L1017.11 1209.47 L1016.52 1209.47 L1015.93 1209.47 L1015.35 1209.47 L1014.76 1209.47 L1014.17 1209.47 L1013.59 1209.47 L1013 1209.47 L1012.41 1209.47 L1011.83 1209.47 L1011.24 1209.47 L1010.65 1209.47 L1010.07 1209.47 L1009.48 1209.47 L1008.9 1209.47 L1008.31 1209.47 L1007.72 1209.47 L1007.14 1209.47 L1006.55 1209.47 L1005.96 1209.47 L1005.38 1209.47 L1004.79 1209.47 L1004.2 1209.47 L1003.62 1209.47 L1003.03 1209.47 L1002.44 1209.47 L1001.86 1209.47 L1001.27 1209.47 L1000.69 1209.47 L1000.1 1209.47 L999.513 1209.47 L998.926 1209.47 L998.34 1209.47 L997.754 1209.47 L997.167 1209.47 L996.581 1209.47 L995.994 1209.47 L995.408 1209.47 L994.822 1209.47 L994.235 1209.47 L993.649 1209.47 L993.062 1209.47 L992.476 1209.47 L991.889 1209.47 L991.303 1209.47 L990.717 1209.47 L990.13 1209.47 L989.544 1209.47 L988.957 1209.47 L988.371 1209.47 L987.785 1209.47 L987.198 1209.47 L986.612 1209.47 L986.025 1209.47  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.79 986.612,1209.79 987.198,1209.79 987.785,1209.79 988.371,1209.79 988.957,1209.79 989.544,1209.79 990.13,1209.79 990.717,1209.79 991.303,1209.79 991.889,1209.79 992.476,1209.79 993.062,1209.79 993.649,1209.79 994.235,1209.79 994.822,1209.79 995.408,1209.79 995.994,1209.79 996.581,1209.79 997.167,1209.79 997.754,1209.79 998.34,1209.79 998.926,1209.79 999.513,1209.79 1000.1,1209.79 1000.69,1209.79 1001.27,1209.79 1001.86,1209.79 1002.44,1209.79 1003.03,1209.79 1003.62,1209.79 1004.2,1209.79 1004.79,1209.79 1005.38,1209.79 1005.96,1209.79 1006.55,1209.79 1007.14,1209.79 1007.72,1209.79 1008.31,1209.79 1008.9,1209.79 1009.48,1209.79 1010.07,1209.79 1010.65,1209.79 1011.24,1209.79 1011.83,1209.79 1012.41,1209.79 1013,1209.79 1013.59,1209.79 1014.17,1209.79 1014.76,1209.79 1015.35,1209.79 1015.93,1209.79 1016.52,1209.79 1017.11,1209.79 1017.69,1209.79 1018.28,1209.79 1018.86,1209.79 1019.45,1209.79 1020.04,1209.79 1020.62,1209.79 1021.21,1209.79 1021.8,1209.79 1022.38,1209.79 1022.97,1209.79 1023.56,1209.79 1024.14,1209.79 1024.73,1209.79 1025.32,1209.79 1025.9,1209.79 1026.49,1209.79 1027.07,1209.79 1027.66,1209.79 1028.25,1209.79 1028.83,1209.79 1029.42,1209.79 1030.01,1209.79 1030.59,1209.79 1031.18,1209.79 1031.77,1209.79 1032.35,1209.79 1032.94,1209.79 1033.52,1209.79 1034.11,1209.79 1034.7,1209.79 1035.28,1209.79 1035.87,1209.79 1036.46,1209.79 1037.04,1209.79 1037.63,1209.79 1038.22,1209.79 1038.8,1209.79 1039.39,1209.79 1039.98,1209.79 1040.56,1209.79 1041.15,1209.79 1041.73,1209.79 1042.32,1209.79 1042.91,1209.79 1043.49,1209.79 1044.08,1209.79 1044.67,1209.79 1045.25,1209.79 1045.84,1209.79 1046.43,1209.79 1047.01,1209.79 1047.6,1209.79 1048.19,1209.79 1048.77,1209.79 1049.36,1209.79 1049.94,1209.79 1050.53,1209.79 1051.12,1209.79 1051.7,1209.79 1052.29,1209.79 1052.88,1209.79 1053.46,1209.79 1054.05,1209.79 1054.64,1209.79 1055.22,1209.79 1055.81,1209.79 1056.39,1209.79 1056.98,1209.79 1057.57,1209.79 1058.15,1209.79 1058.74,1209.79 1059.33,1209.79 1059.91,1209.79 1060.5,1209.79 1061.09,1209.79 1061.67,1209.79 1062.26,1209.79 1062.85,1209.79 1063.43,1209.79 1064.02,1209.79 1064.6,1209.79 1065.19,1209.79 1065.78,1209.79 1066.36,1209.79 1066.95,1209.79 1067.54,1209.79 1068.12,1209.79 1068.71,1209.79 1069.3,1209.79 1069.88,1209.79 1070.47,1209.79 1071.06,1209.79 1071.64,1209.79 1072.23,1209.79 1072.81,1209.79 1073.4,1209.79 1073.99,1209.79 1074.57,1209.79 1075.16,1209.79 1075.75,1209.79 1076.33,1209.79 1076.92,1209.79 1077.51,1209.79 1078.09,1209.79 1078.68,1209.79 1079.26,1209.79 1079.85,1209.79 1080.44,1209.79 1081.02,1209.79 1081.61,1209.79 1082.2,1209.79 1082.78,1209.79 1083.37,1209.79 1083.96,1209.79 1084.54,1209.79 1085.13,1209.79 1085.72,1209.79 1086.3,1209.79 1086.89,1209.79 1087.47,1209.79 1088.06,1209.79 1088.65,1209.79 1089.23,1209.79 1089.82,1209.79 1090.41,1209.79 1090.99,1209.79 1091.58,1209.79 1092.17,1209.79 1092.75,1209.79 1093.34,1209.79 1093.93,1209.79 1094.51,1209.79 1095.1,1209.79 1095.68,1209.79 1096.27,1209.79 1096.86,1209.79 1097.44,1209.79 1098.03,1209.79 1098.62,1209.79 1099.2,1209.79 1099.79,1209.79 1100.38,1209.79 1100.96,1209.79 1101.55,1209.79 1102.14,1209.79 1102.72,1209.79 1103.31,1209.79 1103.89,1209.79 1104.48,1209.79 1105.07,1209.79 1105.65,1209.79 1106.24,1209.79 1106.83,1209.79 1107.41,1209.79 1108,1209.79 1108.59,1209.79 1109.17,1209.79 1109.76,1209.79 1110.34,1209.79 1110.93,1209.79 1111.52,1209.79 1112.1,1209.79 1112.69,1209.79 1113.28,1209.79 1113.86,1209.79 1114.45,1209.79 1115.04,1209.79 1115.62,1209.79 1116.21,1209.79 1116.8,1209.79 1117.38,1209.79 1117.97,1209.79 1118.55,1209.79 1119.14,1209.79 1119.73,1209.79 1120.31,1209.79 1120.9,1209.79 1121.49,1209.79 1122.07,1209.79 1122.66,1209.79 1123.25,1209.79 1123.83,1209.79 1124.42,1209.79 1125.01,1209.79 1125.59,1209.79 1126.18,1209.79 1126.76,1209.79 1127.35,1209.79 1127.94,1209.79 1128.52,1209.79 1129.11,1209.79 1129.7,1209.79 1130.28,1209.79 1130.87,1209.79 1131.46,1209.79 1132.04,1209.79 1132.63,1209.79 1133.21,1209.79 1133.8,1209.79 1134.39,1209.79 1134.97,1209.79 1135.56,1209.79 1136.15,1209.79 1136.73,1209.79 1137.32,1209.79 1137.91,1209.79 1138.49,1209.79 1139.08,1209.79 1139.67,1209.79 1140.25,1209.79 1140.84,1209.79 1141.42,1209.79 1142.01,1209.79 1142.6,1209.79 1143.18,1209.79 1143.77,1209.79 1144.36,1209.79 1144.94,1209.79 1145.53,1209.79 1146.12,1209.79 1146.7,1209.79 1147.29,1209.79 1147.88,1209.79 1148.46,1209.79 1149.05,1209.79 1149.63,1209.79 1150.22,1209.79 1150.81,1209.79 1151.39,1209.79 1151.98,1209.79 1152.57,1209.79 1153.15,1209.79 1153.74,1209.79 1154.33,1209.79 1154.91,1209.79 1155.5,1209.79 1156.09,1209.79 1156.67,1209.79 1157.26,1209.79 1157.84,1209.79 1158.43,1209.79 1159.02,1209.79 1159.6,1209.79 1160.19,1209.79 1160.78,1209.79 1161.36,1209.79 1161.95,1209.79 1162.54,1209.79 1163.12,1209.79 1163.71,1209.79 1164.29,1209.79 1164.88,1209.79 1165.47,1209.79 1166.05,1209.79 1166.64,1209.79 1167.23,1209.79 1167.81,1209.79 1168.4,1209.79 1168.99,1209.79 1169.57,1209.79 1170.16,1209.79 1170.75,1209.79 1171.33,1209.79 1171.92,1209.79 1172.5,1209.79 1173.09,1209.79 1173.68,1209.79 1174.26,1209.79 1174.85,1209.79 1175.44,1209.79 1176.02,1209.79 1176.61,1209.79 1177.2,1209.79 1177.78,1209.79 1178.37,1209.79 1178.96,1209.79 1179.54,1209.79 1180.13,1209.79 1180.71,1209.79 1181.3,1209.79 1181.89,1209.79 1182.47,1209.79 1183.06,1209.79 1183.65,1209.79 1184.23,1209.79 1184.82,1209.79 1185.41,1209.79 1185.99,1209.79 1186.58,1209.79 1187.16,1209.79 1187.75,1209.79 1188.34,1209.79 1188.92,1209.79 1189.51,1209.79 1190.1,1209.79 1190.68,1209.79 1191.27,1209.79 1191.86,1209.79 1192.44,1209.79 1193.03,1209.79 1193.62,1209.79 1194.2,1209.79 1194.79,1209.79 1195.37,1209.79 1195.96,1209.79 1196.55,1209.79 1197.13,1209.79 1197.72,1209.79 1198.31,1209.79 1198.89,1209.79 1199.48,1209.79 1200.07,1209.79 1200.65,1209.79 1201.24,1209.79 1201.83,1209.79 1202.41,1209.79 1203,1209.79 1203.58,1209.79 1204.17,1209.79 1204.76,1209.79 1205.34,1209.79 1205.93,1209.79 1206.52,1209.79 1207.1,1209.79 1207.69,1209.79 1208.28,1209.79 1208.86,1209.79 1209.45,1209.79 1210.03,1209.79 1210.62,1209.79 1211.21,1209.79 1211.79,1209.79 1212.38,1209.79 1212.97,1209.79 1213.55,1209.79 1214.14,1209.79 1214.73,1209.79 1215.31,1209.79 1215.9,1209.79 1216.49,1209.79 1217.07,1209.79 1217.66,1209.79 1218.24,1209.79 1218.83,1209.79 1219.42,1209.79 1220,1209.79 1220.59,1209.79 1221.18,1209.79 1221.76,1209.79 1222.35,1209.79 1222.94,1209.79 1223.52,1209.79 1224.11,1209.79 1224.7,1209.79 1225.28,1209.79 1225.87,1209.79 1226.45,1209.79 1227.04,1209.79 1227.63,1209.79 1228.21,1209.79 1228.8,1209.79 1229.39,1209.79 1229.97,1209.79 1230.56,1209.79 1231.15,1209.79 1231.73,1209.79 1232.32,1209.79 1232.91,1209.79 1233.49,1209.79 1234.08,1209.79 1234.66,1209.79 1235.25,1209.79 1235.84,1209.79 1236.42,1209.79 1237.01,1209.79 1237.6,1209.79 1238.18,1209.79 1238.77,1209.79 1239.36,1209.79 1239.94,1209.79 1240.53,1209.79 1241.11,1209.79 1241.7,1209.79 1242.29,1209.79 1242.87,1209.79 1243.46,1209.79 1244.05,1209.79 1244.63,1209.79 1245.22,1209.79 1245.81,1209.79 1246.39,1209.79 1246.98,1209.79 1247.57,1209.79 1248.15,1209.79 1248.74,1209.79 1249.32,1209.79 1249.91,1209.79 1250.5,1209.79 1251.08,1209.79 1251.67,1209.79 1252.26,1209.79 1252.84,1209.79 1253.43,1209.79 1254.02,1209.79 1254.6,1209.79 1255.19,1209.79 1255.78,1209.79 1256.36,1209.79 1256.95,1209.79 1257.53,1209.79 1258.12,1209.79 1258.71,1209.79 1259.29,1209.79 1259.88,1209.79 1260.47,1209.79 1261.05,1209.79 1261.64,1209.79 1262.23,1209.79 1262.81,1209.79 1263.4,1209.79 1263.98,1209.79 1264.57,1209.79 1265.16,1209.79 1265.74,1209.79 1266.33,1209.79 1266.92,1209.79 1267.5,1209.79 1268.09,1209.79 1268.68,1209.79 1269.26,1209.79 1269.85,1209.79 1270.44,1209.79 1271.02,1209.79 1271.61,1209.79 1272.19,1209.79 1272.78,1209.79 1273.37,1209.79 1273.95,1209.79 1274.54,1209.79 1275.13,1209.79 1275.71,1209.79 1276.3,1209.79 1276.89,1209.79 1277.47,1209.79 1278.06,1209.79 1278.65,1209.79 1279.23,1209.79 1279.82,1209.79 1280.4,1209.79 1280.99,1209.79 1281.58,1209.79 1282.16,1209.79 1282.75,1209.79 1283.34,1209.79 1283.92,1209.79 1284.51,1209.79 1285.1,1209.79 1285.68,1209.79 1286.27,1209.79 1286.86,1209.79 1287.44,1209.79 1288.03,1209.79 1288.61,1209.79 1289.2,1209.79 1289.79,1209.79 1290.37,1209.79 1290.96,1209.79 1291.55,1209.79 1292.13,1209.79 1292.72,1209.79 1293.31,1209.79 1293.89,1209.79 1294.48,1209.79 1295.06,1209.79 1295.65,1209.79 1296.24,1209.79 1296.82,1209.79 1297.41,1209.79 1298,1209.79 1298.58,1209.79 1299.17,1209.79 1299.76,1209.79 1300.34,1209.79 1300.93,1209.79 1301.52,1209.79 1302.1,1209.79 1302.69,1209.79 1303.27,1209.79 1303.86,1209.79 1304.45,1209.79 1305.03,1209.79 1305.62,1209.79 1306.21,1209.79 1306.79,1209.79 1307.38,1209.79 1307.97,1209.79 1308.55,1209.79 1309.14,1209.79 1309.73,1209.79 1310.31,1209.79 1310.9,1209.79 1311.48,1209.79 1312.07,1209.79 1312.66,1209.79 1313.24,1209.79 1313.83,1209.79 1314.42,1209.79 1315,1209.79 1315.59,1209.79 1316.18,1209.79 1316.76,1209.79 1317.35,1209.79 1317.93,1209.79 1318.52,1209.79 1319.11,1209.79 1319.69,1209.79 1320.28,1209.79 1320.87,1209.79 1321.45,1209.79 1322.04,1209.79 1322.63,1209.79 1323.21,1209.79 1323.8,1209.79 1324.39,1209.79 1324.97,1209.79 1325.56,1209.79 1326.14,1209.79 1326.73,1209.79 1327.32,1209.79 1327.9,1209.79 1328.49,1209.79 1329.08,1209.79 1329.66,1209.79 1330.25,1209.79 1330.84,1209.79 1331.42,1209.79 1332.01,1209.79 1332.6,1209.79 1333.18,1209.79 1333.77,1209.79 1334.35,1209.79 1334.94,1209.79 1335.53,1209.79 1336.11,1209.79 1336.7,1209.79 1337.29,1209.79 1337.87,1209.79 1338.46,1209.79 1339.05,1209.79 1339.63,1209.79 1340.22,1209.79 1340.8,1209.79 1341.39,1209.79 1341.98,1209.79 1342.56,1209.79 1343.15,1209.79 1343.74,1209.79 1344.32,1209.79 1344.91,1209.79 1345.5,1209.79 1346.08,1209.79 1346.67,1209.79 1347.26,1209.79 1347.84,1209.79 1348.43,1209.79 1349.01,1209.79 1349.6,1209.79 1350.19,1209.79 1350.77,1209.79 1351.36,1209.79 1351.95,1209.79 1352.53,1209.79 1353.12,1209.79 1353.71,1209.79 1354.29,1209.79 1354.88,1209.79 1355.47,1209.79 1356.05,1209.79 1356.64,1209.79 1357.22,1209.79 1357.81,1209.79 1358.4,1209.79 1358.98,1209.79 1359.57,1209.79 1360.16,1209.79 1360.74,1209.79 1361.33,1209.79 1361.92,1209.79 1362.5,1209.79 1363.09,1209.79 1363.68,1209.79 1364.26,1209.79 1364.85,1209.79 1365.43,1209.79 1366.02,1209.79 1366.61,1209.79 1367.19,1209.79 1367.78,1209.79 1368.37,1209.79 1368.95,1209.79 1369.54,1209.79 1370.13,1209.79 1370.71,1209.79 1371.3,1209.79 1371.88,1209.79 1372.47,1209.79 1373.06,1209.79 1373.64,1209.79 1374.23,1209.79 1374.82,1209.79 1375.4,1209.79 1375.99,1209.79 1376.58,1209.79 1377.16,1209.79 1377.75,1209.79 1378.34,1209.79 1378.92,1209.79 1379.51,1209.79 1380.09,1209.79 1380.68,1209.79 1381.27,1209.79 1381.85,1209.79 1382.44,1209.79 1383.03,1209.79 1383.61,1209.79 1384.2,1209.79 1384.79,1209.79 1385.37,1209.79 1385.96,1209.79 1386.55,1209.79 1387.13,1209.79 1387.72,1209.79 1388.3,1209.79 1388.89,1209.79 1389.48,1209.79 1390.06,1209.79 1390.65,1209.79 1391.24,1209.79 1391.82,1209.79 1392.41,1209.79 1393,1209.79 1393.58,1209.79 1394.17,1209.79 1394.75,1209.79 1395.34,1209.79 1395.93,1209.79 1396.51,1209.79 1397.1,1209.79 1397.69,1209.79 1398.27,1209.79 1398.86,1209.79 1399.45,1209.79 1400.03,1209.79 1400.62,1209.79 1401.21,1209.79 1401.79,1209.79 1402.38,1209.79 1402.96,1209.79 1403.55,1209.79 1404.14,1209.79 1404.72,1209.79 1405.31,1209.79 1405.9,1209.79 1406.48,1209.79 1407.07,1209.79 1407.66,1209.79 1408.24,1209.79 1408.83,1209.79 1409.42,1209.79 1410,1209.79 1410.59,1209.79 1411.17,1209.79 1411.76,1209.79 1412.35,1209.79 1412.93,1209.79 1413.52,1209.79 1414.11,1209.79 1414.69,1209.79 1415.28,1209.79 1415.87,1209.79 1416.45,1209.79 1417.04,1209.79 1417.63,1209.79 1418.21,1209.79 1418.8,1209.79 1419.38,1209.79 1419.97,1209.79 1420.56,1209.79 1421.14,1209.79 1421.73,1209.79 1422.32,1209.79 1422.9,1209.79 1423.49,1209.79 1424.08,1209.79 1424.66,1209.79 1425.25,1209.79 1425.83,1209.79 1426.42,1209.79 1427.01,1209.79 1427.59,1209.79 1428.18,1209.79 1428.77,1209.79 1429.35,1209.79 1429.94,1209.79 1430.53,1209.79 1431.11,1209.79 1431.7,1209.79 1432.29,1209.79 1432.87,1209.79 1433.46,1209.79 1434.04,1209.79 1434.63,1209.79 1435.22,1209.79 1435.8,1209.79 1436.39,1209.79 1436.98,1209.79 1437.56,1209.79 1438.15,1209.79 1438.74,1209.79 1439.32,1209.79 1439.91,1209.79 1440.5,1209.79 1441.08,1209.79 1441.67,1209.79 1442.25,1209.79 1442.84,1209.79 1443.43,1209.79 1444.01,1209.79 1444.6,1209.79 1445.19,1209.79 1445.77,1209.79 1446.36,1209.79 1446.95,1209.79 1447.53,1209.79 1448.12,1209.79 1448.7,1209.79 1449.29,1209.79 1449.88,1209.79 1450.46,1209.79 1451.05,1209.79 1451.64,1209.79 1452.22,1209.79 1452.81,1209.79 1453.4,1209.79 1453.98,1209.79 1454.57,1209.79 1455.16,1209.79 1455.74,1209.79 1456.33,1209.79 1456.91,1209.79 1457.5,1209.79 1458.09,1209.79 1458.67,1209.79 1459.26,1209.79 1459.85,1209.79 1460.43,1209.79 1461.02,1209.79 1461.61,1209.79 1462.19,1209.79 1462.78,1209.79 1463.37,1209.79 1463.95,1209.79 1464.54,1209.79 1465.12,1209.79 1465.71,1209.79 1466.3,1209.79 1466.88,1209.79 1467.47,1209.79 1468.06,1209.79 1468.64,1209.79 1469.23,1209.79 1469.82,1209.79 1470.4,1209.79 1470.99,1209.79 1471.57,1209.79 1472.16,1209.79 1472.75,1209.79 1473.33,1209.79 1473.92,1209.79 1474.51,1209.79 1475.09,1209.79 1475.68,1209.79 1476.27,1209.79 1476.85,1209.79 1477.44,1209.79 1478.03,1209.79 1478.61,1209.79 1479.2,1209.79 1479.78,1209.79 1480.37,1209.79 1480.96,1209.79 1481.54,1209.79 1482.13,1209.79 1482.72,1209.79 1483.3,1209.79 1483.89,1209.79 1484.48,1209.79 1485.06,1209.79 1485.65,1209.79 1486.24,1209.79 1486.82,1209.79 1487.41,1209.79 1487.99,1209.79 1488.58,1209.79 1489.17,1209.79 1489.75,1209.79 1490.34,1209.79 1490.93,1209.79 1491.51,1209.79 1492.1,1209.79 1492.69,1209.79 1493.27,1209.79 1493.86,1209.79 1494.45,1209.79 1495.03,1209.79 1495.62,1209.79 1496.2,1209.79 1496.79,1209.79 1497.38,1209.79 1497.96,1209.79 1498.55,1209.79 1499.14,1209.79 1499.72,1209.79 1500.31,1209.79 1500.9,1209.79 1501.48,1209.79 1502.07,1209.79 1502.65,1209.79 1503.24,1209.79 1503.83,1209.79 1504.41,1209.79 1505,1209.79 1505.59,1209.79 1506.17,1209.79 1506.76,1209.79 1507.35,1209.79 1507.93,1209.79 1508.52,1209.79 1509.11,1209.79 1509.69,1209.79 1510.28,1209.79 1510.86,1209.79 1511.45,1209.79 1512.04,1209.79 1512.62,1209.79 1513.21,1209.79 1513.8,1209.79 1514.38,1209.79 1514.97,1209.79 1515.56,1209.79 1516.14,1209.79 1516.73,1209.79 1517.32,1209.79 1517.9,1209.79 1518.49,1209.79 1519.07,1209.79 1519.66,1209.79 1520.25,1209.79 1520.83,1209.79 1521.42,1209.79 1522.01,1209.79 1522.59,1209.79 1523.18,1209.79 1523.77,1209.79 1524.35,1209.79 1524.94,1209.79 1525.52,1209.79 1526.11,1209.79 1526.7,1209.79 1527.28,1209.79 1527.87,1209.79 1528.46,1209.79 1529.04,1209.79 1529.63,1209.79 1530.22,1209.79 1530.8,1209.79 1531.39,1209.79 1531.98,1209.79 1532.56,1209.79 1533.15,1209.79 1533.73,1209.79 1534.32,1209.79 1534.91,1209.79 1535.49,1209.79 1536.08,1209.79 1536.67,1209.79 1537.25,1209.79 1537.84,1209.79 1538.43,1209.79 1539.01,1209.79 1539.6,1209.79 1540.19,1209.79 1540.77,1209.79 1541.36,1209.79 1541.94,1209.79 1542.53,1209.79 1543.12,1209.79 1543.7,1209.79 1544.29,1209.79 1544.88,1209.79 1545.46,1209.79 1546.05,1209.79 1546.64,1209.79 1547.22,1209.79 1547.81,1209.79 1548.4,1209.79 1548.98,1209.79 1549.57,1209.79 1550.15,1209.79 1550.74,1209.79 1551.33,1209.79 1551.91,1209.79 1552.5,1209.79 1553.09,1209.79 1553.67,1209.79 1554.26,1209.79 1554.85,1209.79 1555.43,1209.79 1556.02,1209.79 1556.6,1209.79 1557.19,1209.79 1557.78,1209.79 1558.36,1209.79 1558.95,1209.79 1559.54,1209.79 1560.12,1209.79 1560.71,1209.79 1561.3,1209.79 1561.88,1209.79 1562.47,1209.79 1563.06,1209.79 1563.64,1209.79 1564.23,1209.79 1564.81,1209.79 1565.4,1209.79 1565.99,1209.79 1566.57,1209.79 1567.16,1209.79 1567.75,1209.79 1568.33,1209.79 1568.92,1209.79 1569.51,1209.79 1570.09,1209.79 1570.68,1209.79 1571.27,1209.79 1571.85,1209.79 1572.44,1209.79 1573.02,1209.79 1573.61,1209.79 1574.2,1209.79 1574.78,1209.79 1575.37,1209.79 1575.96,1209.79 1576.54,1209.79 1577.13,1209.79 1577.72,1209.79 1578.3,1209.79 1578.89,1209.79 1579.47,1209.79 1580.06,1209.79 1580.65,1209.79 1581.23,1209.79 1581.82,1209.79 1582.41,1209.79 1582.99,1209.79 1583.58,1209.79 1584.17,1209.79 1584.75,1209.79 1585.34,1209.79 1585.93,1209.79 1586.51,1209.79 1587.1,1209.79 1587.68,1209.79 1588.27,1209.79 1588.86,1209.79 1589.44,1209.79 1590.03,1209.79 1590.62,1209.79 1591.2,1209.79 1591.79,1209.79 1592.38,1209.79 1592.96,1209.79 1593.55,1209.79 1594.14,1209.79 1594.72,1209.79 1595.31,1209.79 1595.89,1209.79 1596.48,1209.79 1597.07,1209.79 1597.65,1209.79 1598.24,1209.79 1598.83,1209.79 1599.41,1209.79 1600,1209.79 1600.59,1209.79 1601.17,1209.79 1601.76,1209.79 1602.34,1209.79 1602.93,1209.79 1603.52,1209.79 1604.1,1209.79 1604.69,1209.79 1605.28,1209.79 1605.86,1209.79 1606.45,1209.79 1607.04,1209.79 1607.62,1209.79 1608.21,1209.79 1608.8,1209.79 1609.38,1209.79 1609.97,1209.79 1610.55,1209.79 1611.14,1209.79 1611.73,1209.79 1612.31,1209.79 1612.9,1209.79 1613.49,1209.79 1614.07,1209.79 1614.66,1209.79 1615.25,1209.79 1615.83,1209.79 1616.42,1209.79 1617.01,1209.79 1617.59,1209.79 1618.18,1209.79 1618.76,1209.79 1619.35,1209.79 1619.94,1209.79 1620.52,1209.79 1621.11,1209.79 1621.7,1209.79 1622.28,1209.79 1622.87,1209.79 1623.46,1209.79 1624.04,1209.79 1624.63,1209.79 1625.22,1209.79 1625.8,1209.79 1626.39,1209.79 1626.97,1209.79 1627.56,1209.79 1628.15,1209.79 1628.73,1209.79 1629.32,1209.79 1629.91,1209.79 1630.49,1209.79 1631.08,1209.79 1631.67,1209.79 1632.25,1209.79 1632.84,1209.79 1633.42,1209.79 1634.01,1209.79 1634.6,1209.79 1635.18,1209.79 1635.77,1209.79 1636.36,1209.79 1636.94,1209.79 1637.53,1209.79 1638.12,1209.79 1638.7,1209.79 1639.29,1209.79 1639.88,1209.79 1640.46,1209.79 1641.05,1209.79 1641.63,1209.79 1642.22,1209.79 1642.81,1209.79 1643.39,1209.79 1643.98,1209.79 1644.57,1209.79 1645.15,1209.79 1645.74,1209.79 1646.33,1209.79 1646.91,1209.79 1647.5,1209.79 1648.09,1209.79 1648.67,1209.79 1649.26,1209.79 1649.84,1209.79 1650.43,1209.79 1651.02,1209.79 1651.6,1209.79 1652.19,1209.79 1652.78,1209.79 1653.36,1209.79 1653.95,1209.79 1654.54,1209.79 1655.12,1209.79 1655.71,1209.79 1656.29,1209.79 1656.88,1209.79 1657.47,1209.79 1658.05,1209.79 1658.64,1209.79 1659.23,1209.79 1659.81,1209.79 1660.4,1209.79 1660.99,1209.79 1661.57,1209.79 1662.16,1209.79 1662.75,1209.79 1663.33,1209.79 1663.92,1209.79 1664.5,1209.79 1665.09,1209.79 1665.68,1209.79 1666.26,1209.79 1666.85,1209.79 1667.44,1209.79 1668.02,1209.79 1668.61,1209.79 1669.2,1209.79 1669.78,1209.79 1670.37,1209.79 1670.96,1209.79 1671.54,1209.79 1672.13,1209.79 1672.71,1209.79 1673.3,1209.79 1673.89,1209.79 1674.47,1209.79 1675.06,1209.79 1675.65,1209.79 1676.23,1209.79 1676.82,1209.79 1677.41,1209.79 1677.99,1209.79 1678.58,1209.79 1679.17,1209.79 1679.75,1209.79 1680.34,1209.79 1680.92,1209.79 1681.51,1209.79 1682.1,1209.79 1682.68,1209.79 1683.27,1209.79 1683.86,1209.79 1684.44,1209.79 1685.03,1209.79 1685.62,1209.79 1686.2,1209.79 1686.79,1209.79 1687.37,1209.79 1687.96,1209.79 1688.55,1209.79 1689.13,1209.79 1689.72,1209.79 1690.31,1209.79 1690.89,1209.79 1691.48,1209.79 1692.07,1209.79 1692.65,1209.79 1693.24,1209.79 1693.83,1209.79 1694.41,1209.79 1695,1209.79 1695.58,1209.79 1696.17,1209.79 1696.76,1209.79 1697.34,1209.79 1697.93,1209.79 1698.52,1209.79 1699.1,1209.79 1699.69,1209.79 1700.28,1209.79 1700.86,1209.79 1701.45,1209.79 1702.04,1209.79 1702.62,1209.79 1703.21,1209.79 1703.79,1209.79 1704.38,1209.79 1704.97,1209.79 1705.55,1209.79 1706.14,1209.79 1706.73,1209.79 1707.31,1209.79 1707.9,1209.79 1708.49,1209.79 1709.07,1209.79 1709.66,1209.79 1710.24,1209.79 1710.83,1209.79 1711.42,1209.79 1712,1209.79 1712.59,1209.79 1713.18,1209.79 1713.76,1209.79 1714.35,1209.79 1714.94,1209.79 1715.52,1209.79 1716.11,1209.79 1716.7,1209.79 1717.28,1209.79 1717.87,1209.79 1718.45,1209.79 1719.04,1209.79 1719.63,1209.79 1720.21,1209.79 1720.8,1209.79 1721.39,1209.79 1721.97,1209.79 1722.56,1209.79 1723.15,1209.79 1723.73,1209.79 1724.32,1209.79 1724.91,1209.79 1725.49,1209.79 1726.08,1209.79 1726.66,1209.79 1727.25,1209.79 1727.84,1209.79 1728.42,1209.79 1729.01,1209.79 1729.6,1209.79 1730.18,1209.79 1730.77,1209.79 1731.36,1209.79 1731.94,1209.79 1732.53,1209.79 1733.11,1209.79 1733.7,1209.79 1734.29,1209.79 1734.87,1209.79 1735.46,1209.79 1736.05,1209.79 1736.63,1209.79 1737.22,1209.79 1737.81,1209.79 1738.39,1209.79 1738.98,1209.79 1739.57,1209.79 1740.15,1209.79 1740.74,1209.79 1741.32,1209.79 1741.91,1209.79 1742.5,1209.79 1743.08,1209.79 1743.67,1209.79 1744.26,1209.79 1744.84,1209.79 1745.43,1209.79 1746.02,1209.79 1746.6,1209.79 1747.19,1209.79 1747.78,1209.79 1748.36,1209.79 1748.95,1209.79 1749.53,1209.79 1750.12,1209.79 1750.71,1209.79 1751.29,1209.79 1751.88,1209.79 1752.47,1209.79 1753.05,1209.79 1753.64,1209.79 1754.23,1209.79 1754.81,1209.79 1755.4,1209.79 1755.99,1209.79 1756.57,1209.79 1757.16,1209.79 1757.74,1209.79 1758.33,1209.79 1758.92,1209.79 1759.5,1209.79 1760.09,1209.79 1760.68,1209.79 1761.26,1209.79 1761.85,1209.79 1762.44,1209.79 1763.02,1209.79 1763.61,1209.79 1764.19,1209.79 1764.78,1209.79 1765.37,1209.79 1765.95,1209.79 1766.54,1209.79 1767.13,1209.79 1767.71,1209.79 1768.3,1209.79 1768.89,1209.79 1769.47,1209.79 1770.06,1209.79 1770.65,1209.79 1771.23,1209.79 1771.82,1209.79 1772.4,1209.79 1772.99,1209.79 1773.58,1209.79 1774.16,1209.79 1774.75,1209.79 1775.34,1209.79 1775.92,1209.79 1776.51,1209.79 1777.1,1209.79 1777.68,1209.79 1778.27,1209.79 1778.86,1209.79 1779.44,1209.79 1780.03,1209.79 1780.61,1209.79 1781.2,1209.79 1781.79,1209.79 1782.37,1209.79 1782.96,1209.79 1783.55,1209.79 1784.13,1209.79 1784.72,1209.79 1785.31,1209.79 1785.89,1209.79 1786.48,1209.79 1787.06,1209.79 1787.65,1209.79 1788.24,1209.79 1788.82,1209.79 1789.41,1209.79 1790,1209.79 1790.58,1209.79 1791.17,1209.79 1791.76,1209.79 1792.34,1209.79 1792.93,1209.79 1793.52,1209.79 1794.1,1209.79 1794.69,1209.79 1795.27,1209.79 1795.86,1209.79 1796.45,1209.79 1797.03,1209.79 1797.62,1209.79 1798.21,1209.79 1798.79,1209.79 1799.38,1209.79 1799.97,1209.79 1800.55,1209.79 1801.14,1209.79 1801.73,1209.79 1802.31,1209.79 1802.9,1209.79 1803.48,1209.79 1804.07,1209.79 1804.66,1209.79 1805.24,1209.79 1805.83,1209.79 1806.42,1209.79 1807,1209.79 1807.59,1209.79 1808.18,1209.79 1808.76,1209.79 1809.35,1209.79 1809.94,1209.79 1810.52,1209.79 1811.11,1209.79 1811.69,1209.79 1812.28,1209.79 1812.87,1209.79 1813.45,1209.79 1814.04,1209.79 1814.63,1209.79 1815.21,1209.79 1815.8,1209.79 1816.39,1209.79 1816.97,1209.79 1817.56,1209.79 1818.14,1209.79 1818.73,1209.79 1819.32,1209.79 1819.9,1209.79 1820.49,1209.79 1821.08,1209.79 1821.66,1209.79 1822.25,1209.79 1822.84,1209.79 1823.42,1209.79 1824.01,1209.79 1824.6,1209.79 1825.18,1209.79 1825.77,1209.79 1826.35,1209.79 1826.94,1209.79 1827.53,1209.79 1828.11,1209.79 1828.7,1209.79 1829.29,1209.79 1829.87,1209.79 1830.46,1209.79 1831.05,1209.79 1831.63,1209.79 1832.22,1209.79 1832.81,1209.79 1833.39,1209.79 1833.98,1209.79 1834.56,1209.79 1835.15,1209.79 1835.74,1209.79 1836.32,1209.79 1836.91,1209.79 1837.5,1209.79 1838.08,1209.79 1838.67,1209.79 1839.26,1209.79 1839.84,1209.79 1840.43,1209.79 1841.01,1209.79 1841.6,1209.79 1842.19,1209.79 1842.77,1209.79 1843.36,1209.79 1843.95,1209.79 1844.53,1209.79 1845.12,1209.79 1845.71,1209.79 1846.29,1209.79 1846.88,1209.79 1847.47,1209.79 1848.05,1209.79 1848.64,1209.79 1849.22,1209.79 1849.81,1209.79 1850.4,1209.79 1850.98,1209.79 1851.57,1209.79 1852.16,1209.79 1852.74,1209.79 1853.33,1209.79 1853.92,1209.79 1854.5,1209.79 1855.09,1209.79 1855.68,1209.79 1856.26,1209.79 1856.85,1209.79 1857.43,1209.79 1858.02,1209.79 1858.61,1209.79 1859.19,1209.79 1859.78,1209.79 1860.37,1209.79 1860.95,1209.79 1861.54,1209.79 1862.13,1209.79 1862.71,1209.79 1863.3,1209.79 1863.88,1209.79 1864.47,1209.79 1865.06,1209.79 1865.64,1209.79 1866.23,1209.79 1866.82,1209.79 1867.4,1209.79 1867.99,1209.79 1868.58,1209.79 1869.16,1209.79 1869.75,1209.79 1870.34,1209.79 1870.92,1209.79 1871.51,1209.79 1872.09,1209.79 1872.68,1209.79 1873.27,1209.79 1873.85,1209.79 1874.44,1209.79 1875.03,1209.79 1875.61,1209.79 1876.2,1209.79 1876.79,1209.79 1877.37,1209.79 1877.96,1209.79 1878.55,1209.79 1879.13,1209.79 1879.72,1209.79 1880.3,1209.79 1880.89,1209.79 1881.48,1209.79 1882.06,1209.79 1882.65,1209.79 1883.24,1209.79 1883.82,1209.79 1884.41,1209.79 1885,1209.79 1885.58,1209.79 1886.17,1209.79 1886.76,1209.79 1887.34,1209.79 1887.93,1209.79 1888.51,1209.79 1889.1,1209.79 1889.69,1209.79 1890.27,1209.79 1890.86,1209.79 1891.45,1209.79 1892.03,1209.79 1892.62,1209.79 1893.21,1209.79 1893.79,1209.79 1894.38,1209.79 1894.96,1209.79 1895.55,1209.79 1896.14,1209.79 1896.72,1209.79 1897.31,1209.79 1897.9,1209.79 1898.48,1209.79 1899.07,1209.79 1899.66,1209.79 1900.24,1209.79 1900.83,1209.79 1901.42,1209.79 1902,1209.79 1902.59,1209.79 1903.17,1209.79 1903.76,1209.79 1904.35,1209.79 1904.93,1209.79 1905.52,1209.79 1906.11,1209.79 1906.69,1209.79 1907.28,1209.79 1907.87,1209.79 1908.45,1209.79 1909.04,1209.79 1909.63,1209.79 1910.21,1209.79 1910.8,1209.79 1911.38,1209.79 1911.97,1209.79 1912.56,1209.79 1913.14,1209.79 1913.73,1209.79 1914.32,1209.79 1914.9,1209.79 1915.49,1209.79 1916.08,1209.79 1916.66,1209.79 1917.25,1209.79 1917.83,1209.79 1918.42,1209.79 1919.01,1209.79 1919.59,1209.79 1920.18,1209.79 1920.77,1209.79 1921.35,1209.79 1921.94,1209.79 1922.53,1209.79 1923.11,1209.79 1923.7,1209.79 1924.29,1209.79 1924.87,1209.79 1925.46,1209.79 1926.04,1209.79 1926.63,1209.79 1927.22,1209.79 1927.8,1209.79 1928.39,1209.79 1928.98,1209.79 1929.56,1209.79 1930.15,1209.79 1930.74,1209.79 1931.32,1209.79 1931.91,1209.79 1932.5,1209.79 1933.08,1209.79 1933.67,1209.79 1934.25,1209.79 1934.84,1209.79 1935.43,1209.79 1936.01,1209.79 1936.6,1209.79 1937.19,1209.79 1937.77,1209.79 1938.36,1209.79 1938.95,1209.79 1939.53,1209.79 1940.12,1209.79 1940.71,1209.79 1941.29,1209.79 1941.88,1209.79 1942.46,1209.79 1943.05,1209.79 1943.64,1209.79 1944.22,1209.79 1944.81,1209.79 1945.4,1209.79 1945.98,1209.79 1946.57,1209.79 1947.16,1209.79 1947.74,1209.79 1948.33,1209.79 1948.91,1209.79 1949.5,1209.79 1950.09,1209.79 1950.67,1209.79 1951.26,1209.79 1951.85,1209.79 1952.43,1209.79 1953.02,1209.79 1953.61,1209.79 1954.19,1209.79 1954.78,1209.79 1955.37,1209.79 1955.95,1209.79 1956.54,1209.79 1957.12,1209.79 1957.71,1209.79 1958.3,1209.79 1958.88,1209.79 1959.47,1209.79 1960.06,1209.79 1960.64,1209.79 1961.23,1209.79 1961.82,1209.79 1962.4,1209.79 1962.99,1209.79 1963.58,1209.79 1964.16,1209.79 1964.75,1209.79 1965.33,1209.79 1965.92,1209.79 1966.51,1209.79 1967.09,1209.79 1967.68,1209.79 1968.27,1209.79 1968.85,1209.79 1969.44,1209.79 1970.03,1209.79 1970.61,1209.79 1971.2,1209.79 1971.78,1209.79 1972.37,1209.79 1972.96,1209.79 1973.54,1209.79 1974.13,1209.79 1974.72,1209.79 1975.3,1209.79 1975.89,1209.79 1976.48,1209.79 1977.06,1209.79 1977.65,1209.79 1978.24,1209.79 1978.82,1209.79 1979.41,1209.79 1979.99,1209.79 1980.58,1209.79 1981.17,1209.79 1981.75,1209.79 1982.34,1209.79 1982.93,1209.79 1983.51,1209.79 1984.1,1209.79 1984.69,1209.79 1985.27,1209.79 1985.86,1209.79 1986.45,1209.79 1987.03,1209.79 1987.62,1209.79 1988.2,1209.79 1988.79,1209.79 1989.38,1209.79 1989.96,1209.79 1990.55,1209.79 1991.14,1209.79 1991.72,1209.79 1992.31,1209.79 1992.9,1209.79 1993.48,1209.79 1994.07,1209.79 1994.65,1209.79 1995.24,1209.79 1995.83,1209.79 1996.41,1209.79 1997,1209.79 1997.59,1209.79 1998.17,1209.79 1998.76,1209.79 1999.35,1209.79 1999.93,1209.79 2000.52,1209.79 2001.11,1209.79 2001.69,1209.79 2002.28,1209.79 2002.86,1209.79 2003.45,1209.79 2004.04,1209.79 2004.62,1209.79 2005.21,1209.79 2005.8,1209.79 2006.38,1209.79 2006.97,1209.79 2007.56,1209.79 2008.14,1209.79 2008.73,1209.79 2009.32,1209.79 2009.9,1209.79 2010.49,1209.79 2011.07,1209.79 2011.66,1209.79 2012.25,1209.79 2012.83,1209.79 2013.42,1209.79 2014.01,1209.79 2014.59,1209.79 2015.18,1209.79 2015.77,1209.79 2016.35,1209.79 2016.94,1209.79 2017.53,1209.79 2018.11,1209.79 2018.7,1209.79 2019.28,1209.79 2019.87,1209.79 2020.46,1209.79 2021.04,1209.79 2021.63,1209.79 2022.22,1209.79 2022.8,1209.79 2023.39,1209.79 2023.98,1209.79 2024.56,1209.79 2025.15,1209.79 2025.73,1209.79 2026.32,1209.79 2026.91,1209.79 2027.49,1209.79 2028.08,1209.79 2028.67,1209.79 2029.25,1209.79 2029.84,1209.79 2030.43,1209.79 2031.01,1209.79 2031.6,1209.79 2032.19,1209.79 2032.77,1209.79 2033.36,1209.79 2033.94,1209.79 2034.53,1209.79 2035.12,1209.79 2035.7,1209.79 2036.29,1209.79 2036.88,1209.79 2037.46,1209.79 2038.05,1209.79 2038.64,1209.79 2039.22,1209.79 2039.81,1209.79 2040.4,1209.79 2040.98,1209.79 2041.57,1209.79 2042.15,1209.79 2042.74,1209.79 2043.33,1209.79 2043.91,1209.79 2044.5,1209.79 2045.09,1209.79 2045.67,1209.79 2046.26,1209.79 2046.85,1209.79 2047.43,1209.79 2048.02,1209.79 2048.6,1209.79 2049.19,1209.79 2049.78,1209.79 2050.36,1209.79 2050.95,1209.79 2051.54,1209.79 2052.12,1209.79 2052.71,1209.79 2053.3,1209.79 2053.88,1209.79 2054.47,1209.79 2055.06,1209.79 2055.64,1209.79 2056.23,1209.79 2056.81,1209.79 2057.4,1209.79 2057.99,1209.79 2058.57,1209.79 2059.16,1209.79 2059.75,1209.79 2060.33,1209.79 2060.92,1209.79 2061.51,1209.79 2062.09,1209.79 2062.68,1209.79 2063.27,1209.79 2063.85,1209.79 2064.44,1209.79 2065.02,1209.79 2065.61,1209.79 2066.2,1209.79 2066.78,1209.79 2067.37,1209.79 2067.96,1209.79 2068.54,1209.79 2069.13,1209.79 2069.72,1209.79 2070.3,1209.79 2070.89,1209.79 2071.48,1209.79 2072.06,1209.79 2072.65,1209.79 2073.23,1209.79 2073.82,1209.79 2074.41,1209.79 2074.99,1209.79 2075.58,1209.79 2076.17,1209.79 2076.75,1209.79 2077.34,1209.79 2077.93,1209.79 2078.51,1209.79 2079.1,1209.79 2079.68,1209.79 2080.27,1209.79 2080.86,1209.79 2081.44,1209.79 2082.03,1209.79 2082.62,1209.79 2083.2,1209.79 2083.79,1209.79 2084.38,1209.79 2084.96,1209.79 2085.55,1209.79 2086.14,1209.79 2086.72,1209.79 2087.31,1209.79 2087.89,1209.79 2088.48,1209.79 2089.07,1209.79 2089.65,1209.79 2090.24,1209.79 2090.83,1209.79 2091.41,1209.79 2092,1209.79 2092.59,1209.79 2093.17,1209.79 2093.76,1209.79 2094.35,1209.79 2094.93,1209.79 2095.52,1209.79 2096.1,1209.79 2096.69,1209.79 2097.28,1209.79 2097.86,1209.79 2098.45,1209.79 2099.04,1209.79 2099.62,1209.79 2100.21,1209.79 2100.8,1209.79 2101.38,1209.79 2101.97,1209.79 2102.55,1209.79 2103.14,1209.79 2103.73,1209.79 2104.31,1209.79 2104.9,1209.79 2105.49,1209.79 2106.07,1209.79 2106.66,1209.79 2107.25,1209.79 2107.83,1209.79 2108.42,1209.79 2109.01,1209.79 2109.59,1209.79 2110.18,1209.79 2110.76,1209.79 2111.35,1209.79 2111.94,1209.79 2112.52,1209.79 2113.11,1209.79 2113.7,1209.79 2114.28,1209.79 2114.87,1209.79 2115.46,1209.79 2116.04,1209.79 2116.63,1209.79 2117.22,1209.79 2117.8,1209.79 2118.39,1209.79 2118.97,1209.79 2119.56,1209.79 2120.15,1209.79 2120.73,1209.79 2121.32,1209.79 2121.91,1209.79 2122.49,1209.79 2123.08,1209.79 2123.67,1209.79 2124.25,1209.79 2124.84,1209.79 2125.42,1209.79 2126.01,1209.79 2126.6,1209.79 2127.18,1209.79 2127.77,1209.79 2128.36,1209.79 2128.94,1209.79 2129.53,1209.79 2130.12,1209.79 2130.7,1209.79 2131.29,1209.79 2131.88,1209.79 2132.46,1209.79 2133.05,1209.79 2133.63,1209.79 2134.22,1209.79 2134.81,1209.79 2135.39,1209.79 2135.98,1209.79 2136.57,1209.79 2137.15,1209.79 2137.74,1209.79 2138.33,1209.79 2138.91,1209.79 2139.5,1209.79 2140.09,1209.79 2140.67,1209.79 2141.26,1209.79 2141.84,1209.79 2142.43,1209.79 2143.02,1209.79 2143.6,1209.79 2144.19,1209.79 2144.78,1209.79 2145.36,1209.79 2145.95,1209.79 2146.54,1209.79 2147.12,1209.79 2147.71,1209.79 2148.3,1209.79 2148.88,1209.79 2149.47,1209.79 2150.05,1209.79 2150.64,1209.79 2151.23,1209.79 2151.81,1209.79 2152.4,1209.79 2152.99,1209.79 2153.57,1209.79 2154.16,1209.79 2154.75,1209.79 2155.33,1209.79 2155.92,1209.79 2156.5,1209.79 2157.09,1209.79 2157.68,1209.79 2158.26,1209.79 \"/>\n<path clip-path=\"url(#clip402)\" d=\"M986.025 1209.64 L986.612 1209.64 L987.198 1209.64 L987.785 1209.64 L988.371 1209.64 L988.957 1209.64 L989.544 1209.64 L990.13 1209.64 L990.717 1209.64 L991.303 1209.64 L991.889 1209.64 L992.476 1209.64 L993.062 1209.64 L993.649 1209.64 L994.235 1209.64 L994.822 1209.64 L995.408 1209.64 L995.994 1209.64 L996.581 1209.64 L997.167 1209.64 L997.754 1209.64 L998.34 1209.64 L998.926 1209.64 L999.513 1209.64 L1000.1 1209.64 L1000.69 1209.64 L1001.27 1209.64 L1001.86 1209.64 L1002.44 1209.64 L1003.03 1209.64 L1003.62 1209.64 L1004.2 1209.64 L1004.79 1209.64 L1005.38 1209.64 L1005.96 1209.64 L1006.55 1209.64 L1007.14 1209.64 L1007.72 1209.64 L1008.31 1209.64 L1008.9 1209.64 L1009.48 1209.64 L1010.07 1209.64 L1010.65 1209.64 L1011.24 1209.64 L1011.83 1209.64 L1012.41 1209.64 L1013 1209.64 L1013.59 1209.64 L1014.17 1209.64 L1014.76 1209.64 L1015.35 1209.64 L1015.93 1209.64 L1016.52 1209.64 L1017.11 1209.64 L1017.69 1209.64 L1018.28 1209.64 L1018.86 1209.64 L1019.45 1209.64 L1020.04 1209.64 L1020.62 1209.64 L1021.21 1209.64 L1021.8 1209.64 L1022.38 1209.64 L1022.97 1209.64 L1023.56 1209.64 L1024.14 1209.64 L1024.73 1209.64 L1025.32 1209.64 L1025.9 1209.64 L1026.49 1209.64 L1027.07 1209.64 L1027.66 1209.64 L1028.25 1209.64 L1028.83 1209.64 L1029.42 1209.64 L1030.01 1209.64 L1030.59 1209.64 L1031.18 1209.64 L1031.77 1209.64 L1032.35 1209.64 L1032.94 1209.64 L1033.52 1209.64 L1034.11 1209.64 L1034.7 1209.64 L1035.28 1209.64 L1035.87 1209.64 L1036.46 1209.64 L1037.04 1209.64 L1037.63 1209.64 L1038.22 1209.64 L1038.8 1209.64 L1039.39 1209.64 L1039.98 1209.64 L1040.56 1209.64 L1041.15 1209.64 L1041.73 1209.64 L1042.32 1209.64 L1042.91 1209.64 L1043.49 1209.64 L1044.08 1209.64 L1044.67 1209.64 L1045.25 1209.64 L1045.84 1209.64 L1046.43 1209.64 L1047.01 1209.64 L1047.6 1209.64 L1048.19 1209.64 L1048.77 1209.64 L1049.36 1209.64 L1049.94 1209.64 L1050.53 1209.64 L1051.12 1209.64 L1051.7 1209.64 L1052.29 1209.64 L1052.88 1209.64 L1053.46 1209.64 L1054.05 1209.64 L1054.64 1209.64 L1055.22 1209.64 L1055.81 1209.64 L1056.39 1209.64 L1056.98 1209.64 L1057.57 1209.64 L1058.15 1209.64 L1058.74 1209.64 L1059.33 1209.64 L1059.91 1209.64 L1060.5 1209.64 L1061.09 1209.64 L1061.67 1209.64 L1062.26 1209.64 L1062.85 1209.64 L1063.43 1209.64 L1064.02 1209.64 L1064.6 1209.64 L1065.19 1209.64 L1065.78 1209.64 L1066.36 1209.64 L1066.95 1209.64 L1067.54 1209.64 L1068.12 1209.64 L1068.71 1209.64 L1069.3 1209.64 L1069.88 1209.64 L1070.47 1209.64 L1071.06 1209.64 L1071.64 1209.64 L1072.23 1209.64 L1072.81 1209.64 L1073.4 1209.64 L1073.99 1209.64 L1074.57 1209.64 L1075.16 1209.64 L1075.75 1209.64 L1076.33 1209.64 L1076.92 1209.64 L1077.51 1209.64 L1078.09 1209.64 L1078.68 1209.64 L1079.26 1209.64 L1079.85 1209.64 L1080.44 1209.64 L1081.02 1209.64 L1081.61 1209.64 L1082.2 1209.64 L1082.78 1209.64 L1083.37 1209.64 L1083.96 1209.64 L1084.54 1209.64 L1085.13 1209.64 L1085.72 1209.64 L1086.3 1209.64 L1086.89 1209.64 L1087.47 1209.64 L1088.06 1209.64 L1088.65 1209.64 L1089.23 1209.64 L1089.82 1209.64 L1090.41 1209.64 L1090.99 1209.64 L1091.58 1209.64 L1092.17 1209.64 L1092.75 1209.64 L1093.34 1209.64 L1093.93 1209.64 L1094.51 1209.64 L1095.1 1209.64 L1095.68 1209.64 L1096.27 1209.64 L1096.86 1209.64 L1097.44 1209.64 L1098.03 1209.64 L1098.62 1209.64 L1099.2 1209.64 L1099.79 1209.64 L1100.38 1209.64 L1100.96 1209.64 L1101.55 1209.64 L1102.14 1209.64 L1102.72 1209.64 L1103.31 1209.64 L1103.89 1209.64 L1104.48 1209.64 L1105.07 1209.64 L1105.65 1209.64 L1106.24 1209.64 L1106.83 1209.64 L1107.41 1209.64 L1108 1209.64 L1108.59 1209.64 L1109.17 1209.64 L1109.76 1209.64 L1110.34 1209.64 L1110.93 1209.64 L1111.52 1209.64 L1112.1 1209.64 L1112.69 1209.64 L1113.28 1209.64 L1113.86 1209.64 L1114.45 1209.64 L1115.04 1209.64 L1115.62 1209.64 L1116.21 1209.64 L1116.8 1209.64 L1117.38 1209.64 L1117.97 1209.64 L1118.55 1209.64 L1119.14 1209.64 L1119.73 1209.64 L1120.31 1209.64 L1120.9 1209.64 L1121.49 1209.64 L1122.07 1209.64 L1122.66 1209.64 L1123.25 1209.64 L1123.83 1209.64 L1124.42 1209.64 L1125.01 1209.64 L1125.59 1209.64 L1126.18 1209.64 L1126.76 1209.64 L1127.35 1209.64 L1127.94 1209.64 L1128.52 1209.64 L1129.11 1209.64 L1129.7 1209.64 L1130.28 1209.64 L1130.87 1209.64 L1131.46 1209.64 L1132.04 1209.64 L1132.63 1209.64 L1133.21 1209.64 L1133.8 1209.64 L1134.39 1209.64 L1134.97 1209.64 L1135.56 1209.64 L1136.15 1209.64 L1136.73 1209.64 L1137.32 1209.64 L1137.91 1209.64 L1138.49 1209.64 L1139.08 1209.64 L1139.67 1209.64 L1140.25 1209.64 L1140.84 1209.64 L1141.42 1209.64 L1142.01 1209.64 L1142.6 1209.64 L1143.18 1209.64 L1143.77 1209.64 L1144.36 1209.64 L1144.94 1209.64 L1145.53 1209.64 L1146.12 1209.64 L1146.7 1209.64 L1147.29 1209.64 L1147.88 1209.64 L1148.46 1209.64 L1149.05 1209.64 L1149.63 1209.64 L1150.22 1209.64 L1150.81 1209.64 L1151.39 1209.64 L1151.98 1209.64 L1152.57 1209.64 L1153.15 1209.64 L1153.74 1209.64 L1154.33 1209.64 L1154.91 1209.64 L1155.5 1209.64 L1156.09 1209.64 L1156.67 1209.64 L1157.26 1209.64 L1157.84 1209.64 L1158.43 1209.64 L1159.02 1209.64 L1159.6 1209.64 L1160.19 1209.64 L1160.78 1209.64 L1161.36 1209.64 L1161.95 1209.64 L1162.54 1209.64 L1163.12 1209.64 L1163.71 1209.64 L1164.29 1209.64 L1164.88 1209.64 L1165.47 1209.64 L1166.05 1209.64 L1166.64 1209.64 L1167.23 1209.64 L1167.81 1209.64 L1168.4 1209.64 L1168.99 1209.64 L1169.57 1209.64 L1170.16 1209.64 L1170.75 1209.64 L1171.33 1209.64 L1171.92 1209.64 L1172.5 1209.64 L1173.09 1209.64 L1173.68 1209.64 L1174.26 1209.64 L1174.85 1209.64 L1175.44 1209.64 L1176.02 1209.64 L1176.61 1209.64 L1177.2 1209.64 L1177.78 1209.64 L1178.37 1209.64 L1178.96 1209.64 L1179.54 1209.64 L1180.13 1209.64 L1180.71 1209.64 L1181.3 1209.64 L1181.89 1209.64 L1182.47 1209.64 L1183.06 1209.64 L1183.65 1209.64 L1184.23 1209.64 L1184.82 1209.64 L1185.41 1209.64 L1185.99 1209.64 L1186.58 1209.64 L1187.16 1209.64 L1187.75 1209.64 L1188.34 1209.64 L1188.92 1209.64 L1189.51 1209.64 L1190.1 1209.64 L1190.68 1209.64 L1191.27 1209.64 L1191.86 1209.64 L1192.44 1209.64 L1193.03 1209.64 L1193.62 1209.64 L1194.2 1209.64 L1194.79 1209.64 L1195.37 1209.64 L1195.96 1209.64 L1196.55 1209.64 L1197.13 1209.64 L1197.72 1209.64 L1198.31 1209.64 L1198.89 1209.64 L1199.48 1209.64 L1200.07 1209.64 L1200.65 1209.64 L1201.24 1209.64 L1201.83 1209.64 L1202.41 1209.64 L1203 1209.64 L1203.58 1209.64 L1204.17 1209.64 L1204.76 1209.64 L1205.34 1209.64 L1205.93 1209.64 L1206.52 1209.64 L1207.1 1209.64 L1207.69 1209.64 L1208.28 1209.64 L1208.86 1209.64 L1209.45 1209.64 L1210.03 1209.64 L1210.62 1209.64 L1211.21 1209.64 L1211.79 1209.64 L1212.38 1209.64 L1212.97 1209.64 L1213.55 1209.64 L1214.14 1209.64 L1214.73 1209.64 L1215.31 1209.64 L1215.9 1209.64 L1216.49 1209.64 L1217.07 1209.64 L1217.66 1209.64 L1218.24 1209.64 L1218.83 1209.64 L1219.42 1209.64 L1220 1209.64 L1220.59 1209.64 L1221.18 1209.64 L1221.76 1209.64 L1222.35 1209.64 L1222.94 1209.64 L1223.52 1209.64 L1224.11 1209.64 L1224.7 1209.64 L1225.28 1209.64 L1225.87 1209.64 L1226.45 1209.64 L1227.04 1209.64 L1227.63 1209.64 L1228.21 1209.64 L1228.8 1209.64 L1229.39 1209.64 L1229.97 1209.64 L1230.56 1209.64 L1231.15 1209.64 L1231.73 1209.64 L1232.32 1209.64 L1232.91 1209.64 L1233.49 1209.64 L1234.08 1209.64 L1234.66 1209.64 L1235.25 1209.64 L1235.84 1209.64 L1236.42 1209.64 L1237.01 1209.64 L1237.6 1209.64 L1238.18 1209.64 L1238.77 1209.64 L1239.36 1209.64 L1239.94 1209.64 L1240.53 1209.64 L1241.11 1209.64 L1241.7 1209.64 L1242.29 1209.64 L1242.87 1209.64 L1243.46 1209.64 L1244.05 1209.64 L1244.63 1209.64 L1245.22 1209.64 L1245.81 1209.64 L1246.39 1209.64 L1246.98 1209.64 L1247.57 1209.64 L1248.15 1209.64 L1248.74 1209.64 L1249.32 1209.64 L1249.91 1209.64 L1250.5 1209.64 L1251.08 1209.64 L1251.67 1209.64 L1252.26 1209.64 L1252.84 1209.64 L1253.43 1209.64 L1254.02 1209.64 L1254.6 1209.64 L1255.19 1209.64 L1255.78 1209.64 L1256.36 1209.64 L1256.95 1209.64 L1257.53 1209.64 L1258.12 1209.64 L1258.71 1209.64 L1259.29 1209.64 L1259.88 1209.64 L1260.47 1209.64 L1261.05 1209.64 L1261.64 1209.64 L1262.23 1209.64 L1262.81 1209.64 L1263.4 1209.64 L1263.98 1209.64 L1264.57 1209.64 L1265.16 1209.64 L1265.74 1209.64 L1266.33 1209.64 L1266.92 1209.64 L1267.5 1209.64 L1268.09 1209.64 L1268.68 1209.64 L1269.26 1209.64 L1269.85 1209.64 L1270.44 1209.64 L1271.02 1209.64 L1271.61 1209.64 L1272.19 1209.64 L1272.78 1209.64 L1273.37 1209.64 L1273.95 1209.64 L1274.54 1209.64 L1275.13 1209.64 L1275.71 1209.64 L1276.3 1209.64 L1276.89 1209.64 L1277.47 1209.64 L1278.06 1209.64 L1278.65 1209.64 L1279.23 1209.64 L1279.82 1209.64 L1280.4 1209.64 L1280.99 1209.64 L1281.58 1209.64 L1282.16 1209.64 L1282.75 1209.64 L1283.34 1209.64 L1283.92 1209.64 L1284.51 1209.64 L1285.1 1209.64 L1285.68 1209.64 L1286.27 1209.64 L1286.86 1209.64 L1287.44 1209.64 L1288.03 1209.64 L1288.61 1209.64 L1289.2 1209.64 L1289.79 1209.64 L1290.37 1209.64 L1290.96 1209.64 L1291.55 1209.64 L1292.13 1209.64 L1292.72 1209.64 L1293.31 1209.64 L1293.89 1209.64 L1294.48 1209.64 L1295.06 1209.64 L1295.65 1209.64 L1296.24 1209.64 L1296.82 1209.64 L1297.41 1209.64 L1298 1209.64 L1298.58 1209.64 L1299.17 1209.64 L1299.76 1209.64 L1300.34 1209.64 L1300.93 1209.64 L1301.52 1209.64 L1302.1 1209.64 L1302.69 1209.64 L1303.27 1209.64 L1303.86 1209.64 L1304.45 1209.64 L1305.03 1209.64 L1305.62 1209.64 L1306.21 1209.64 L1306.79 1209.64 L1307.38 1209.64 L1307.97 1209.64 L1308.55 1209.64 L1309.14 1209.64 L1309.73 1209.64 L1310.31 1209.64 L1310.9 1209.64 L1311.48 1209.64 L1312.07 1209.64 L1312.66 1209.64 L1313.24 1209.64 L1313.83 1209.64 L1314.42 1209.64 L1315 1209.64 L1315.59 1209.64 L1316.18 1209.64 L1316.76 1209.64 L1317.35 1209.64 L1317.93 1209.64 L1318.52 1209.64 L1319.11 1209.64 L1319.69 1209.64 L1320.28 1209.64 L1320.87 1209.64 L1321.45 1209.64 L1322.04 1209.64 L1322.63 1209.64 L1323.21 1209.64 L1323.8 1209.64 L1324.39 1209.64 L1324.97 1209.64 L1325.56 1209.64 L1326.14 1209.64 L1326.73 1209.64 L1327.32 1209.64 L1327.9 1209.64 L1328.49 1209.64 L1329.08 1209.64 L1329.66 1209.64 L1330.25 1209.64 L1330.84 1209.64 L1331.42 1209.64 L1332.01 1209.64 L1332.6 1209.64 L1333.18 1209.64 L1333.77 1209.64 L1334.35 1209.64 L1334.94 1209.64 L1335.53 1209.64 L1336.11 1209.64 L1336.7 1209.64 L1337.29 1209.64 L1337.87 1209.64 L1338.46 1209.64 L1339.05 1209.64 L1339.63 1209.64 L1340.22 1209.64 L1340.8 1209.64 L1341.39 1209.64 L1341.98 1209.64 L1342.56 1209.64 L1343.15 1209.64 L1343.74 1209.64 L1344.32 1209.64 L1344.91 1209.64 L1345.5 1209.64 L1346.08 1209.64 L1346.67 1209.64 L1347.26 1209.64 L1347.84 1209.64 L1348.43 1209.64 L1349.01 1209.64 L1349.6 1209.64 L1350.19 1209.64 L1350.77 1209.64 L1351.36 1209.64 L1351.95 1209.64 L1352.53 1209.64 L1353.12 1209.64 L1353.71 1209.64 L1354.29 1209.64 L1354.88 1209.64 L1355.47 1209.64 L1356.05 1209.64 L1356.64 1209.64 L1357.22 1209.64 L1357.81 1209.64 L1358.4 1209.64 L1358.98 1209.64 L1359.57 1209.64 L1360.16 1209.64 L1360.74 1209.64 L1361.33 1209.64 L1361.92 1209.64 L1362.5 1209.64 L1363.09 1209.64 L1363.68 1209.64 L1364.26 1209.64 L1364.85 1209.64 L1365.43 1209.64 L1366.02 1209.64 L1366.61 1209.64 L1367.19 1209.64 L1367.78 1209.64 L1368.37 1209.64 L1368.95 1209.64 L1369.54 1209.64 L1370.13 1209.64 L1370.71 1209.64 L1371.3 1209.64 L1371.88 1209.64 L1372.47 1209.64 L1373.06 1209.64 L1373.64 1209.64 L1374.23 1209.64 L1374.82 1209.64 L1375.4 1209.64 L1375.99 1209.64 L1376.58 1209.64 L1377.16 1209.64 L1377.75 1209.64 L1378.34 1209.64 L1378.92 1209.64 L1379.51 1209.64 L1380.09 1209.64 L1380.68 1209.64 L1381.27 1209.64 L1381.85 1209.64 L1382.44 1209.64 L1383.03 1209.64 L1383.61 1209.64 L1384.2 1209.64 L1384.79 1209.64 L1385.37 1209.64 L1385.96 1209.64 L1386.55 1209.64 L1387.13 1209.64 L1387.72 1209.64 L1388.3 1209.64 L1388.89 1209.64 L1389.48 1209.64 L1390.06 1209.64 L1390.65 1209.64 L1391.24 1209.64 L1391.82 1209.64 L1392.41 1209.64 L1393 1209.64 L1393.58 1209.64 L1394.17 1209.64 L1394.75 1209.64 L1395.34 1209.64 L1395.93 1209.64 L1396.51 1209.64 L1397.1 1209.64 L1397.69 1209.64 L1398.27 1209.64 L1398.86 1209.64 L1399.45 1209.64 L1400.03 1209.64 L1400.62 1209.64 L1401.21 1209.64 L1401.79 1209.64 L1402.38 1209.64 L1402.96 1209.64 L1403.55 1209.64 L1404.14 1209.64 L1404.72 1209.64 L1405.31 1209.64 L1405.9 1209.64 L1406.48 1209.64 L1407.07 1209.64 L1407.66 1209.64 L1408.24 1209.64 L1408.83 1209.64 L1409.42 1209.64 L1410 1209.64 L1410.59 1209.64 L1411.17 1209.64 L1411.76 1209.64 L1412.35 1209.64 L1412.93 1209.64 L1413.52 1209.64 L1414.11 1209.64 L1414.69 1209.64 L1415.28 1209.64 L1415.87 1209.64 L1416.45 1209.64 L1417.04 1209.64 L1417.63 1209.64 L1418.21 1209.64 L1418.8 1209.64 L1419.38 1209.64 L1419.97 1209.64 L1420.56 1209.64 L1421.14 1209.64 L1421.73 1209.64 L1422.32 1209.64 L1422.9 1209.64 L1423.49 1209.64 L1424.08 1209.64 L1424.66 1209.64 L1425.25 1209.64 L1425.83 1209.64 L1426.42 1209.64 L1427.01 1209.64 L1427.59 1209.64 L1428.18 1209.64 L1428.77 1209.64 L1429.35 1209.64 L1429.94 1209.64 L1430.53 1209.64 L1431.11 1209.64 L1431.7 1209.64 L1432.29 1209.64 L1432.87 1209.64 L1433.46 1209.64 L1434.04 1209.64 L1434.63 1209.64 L1435.22 1209.64 L1435.8 1209.64 L1436.39 1209.64 L1436.98 1209.64 L1437.56 1209.64 L1438.15 1209.64 L1438.74 1209.64 L1439.32 1209.64 L1439.91 1209.64 L1440.5 1209.64 L1441.08 1209.64 L1441.67 1209.64 L1442.25 1209.64 L1442.84 1209.64 L1443.43 1209.64 L1444.01 1209.64 L1444.6 1209.64 L1445.19 1209.64 L1445.77 1209.64 L1446.36 1209.64 L1446.95 1209.64 L1447.53 1209.64 L1448.12 1209.64 L1448.7 1209.64 L1449.29 1209.64 L1449.88 1209.64 L1450.46 1209.64 L1451.05 1209.64 L1451.64 1209.64 L1452.22 1209.64 L1452.81 1209.64 L1453.4 1209.64 L1453.98 1209.64 L1454.57 1209.64 L1455.16 1209.64 L1455.74 1209.64 L1456.33 1209.64 L1456.91 1209.64 L1457.5 1209.64 L1458.09 1209.64 L1458.67 1209.64 L1459.26 1209.64 L1459.85 1209.64 L1460.43 1209.64 L1461.02 1209.64 L1461.61 1209.64 L1462.19 1209.64 L1462.78 1209.64 L1463.37 1209.64 L1463.95 1209.64 L1464.54 1209.64 L1465.12 1209.64 L1465.71 1209.64 L1466.3 1209.64 L1466.88 1209.64 L1467.47 1209.64 L1468.06 1209.64 L1468.64 1209.64 L1469.23 1209.64 L1469.82 1209.64 L1470.4 1209.64 L1470.99 1209.64 L1471.57 1209.64 L1472.16 1209.64 L1472.75 1209.64 L1473.33 1209.64 L1473.92 1209.64 L1474.51 1209.64 L1475.09 1209.64 L1475.68 1209.64 L1476.27 1209.64 L1476.85 1209.64 L1477.44 1209.64 L1478.03 1209.64 L1478.61 1209.64 L1479.2 1209.64 L1479.78 1209.64 L1480.37 1209.64 L1480.96 1209.64 L1481.54 1209.64 L1482.13 1209.64 L1482.72 1209.64 L1483.3 1209.64 L1483.89 1209.64 L1484.48 1209.64 L1485.06 1209.64 L1485.65 1209.64 L1486.24 1209.64 L1486.82 1209.64 L1487.41 1209.64 L1487.99 1209.64 L1488.58 1209.64 L1489.17 1209.64 L1489.75 1209.64 L1490.34 1209.64 L1490.93 1209.64 L1491.51 1209.64 L1492.1 1209.64 L1492.69 1209.64 L1493.27 1209.64 L1493.86 1209.64 L1494.45 1209.64 L1495.03 1209.64 L1495.62 1209.64 L1496.2 1209.64 L1496.79 1209.64 L1497.38 1209.64 L1497.96 1209.64 L1498.55 1209.64 L1499.14 1209.64 L1499.72 1209.64 L1500.31 1209.64 L1500.9 1209.64 L1501.48 1209.64 L1502.07 1209.64 L1502.65 1209.64 L1503.24 1209.64 L1503.83 1209.64 L1504.41 1209.64 L1505 1209.64 L1505.59 1209.64 L1506.17 1209.64 L1506.76 1209.64 L1507.35 1209.64 L1507.93 1209.64 L1508.52 1209.64 L1509.11 1209.64 L1509.69 1209.64 L1510.28 1209.64 L1510.86 1209.64 L1511.45 1209.64 L1512.04 1209.64 L1512.62 1209.64 L1513.21 1209.64 L1513.8 1209.64 L1514.38 1209.64 L1514.97 1209.64 L1515.56 1209.64 L1516.14 1209.64 L1516.73 1209.64 L1517.32 1209.64 L1517.9 1209.64 L1518.49 1209.64 L1519.07 1209.64 L1519.66 1209.64 L1520.25 1209.64 L1520.83 1209.64 L1521.42 1209.64 L1522.01 1209.64 L1522.59 1209.64 L1523.18 1209.64 L1523.77 1209.64 L1524.35 1209.64 L1524.94 1209.64 L1525.52 1209.64 L1526.11 1209.64 L1526.7 1209.64 L1527.28 1209.64 L1527.87 1209.64 L1528.46 1209.64 L1529.04 1209.64 L1529.63 1209.64 L1530.22 1209.64 L1530.8 1209.64 L1531.39 1209.64 L1531.98 1209.64 L1532.56 1209.64 L1533.15 1209.64 L1533.73 1209.64 L1534.32 1209.64 L1534.91 1209.64 L1535.49 1209.64 L1536.08 1209.64 L1536.67 1209.64 L1537.25 1209.64 L1537.84 1209.64 L1538.43 1209.64 L1539.01 1209.64 L1539.6 1209.64 L1540.19 1209.64 L1540.77 1209.64 L1541.36 1209.64 L1541.94 1209.64 L1542.53 1209.64 L1543.12 1209.64 L1543.7 1209.64 L1544.29 1209.64 L1544.88 1209.64 L1545.46 1209.64 L1546.05 1209.64 L1546.64 1209.64 L1547.22 1209.64 L1547.81 1209.64 L1548.4 1209.64 L1548.98 1209.64 L1549.57 1209.64 L1550.15 1209.64 L1550.74 1209.64 L1551.33 1209.64 L1551.91 1209.64 L1552.5 1209.64 L1553.09 1209.64 L1553.67 1209.64 L1554.26 1209.64 L1554.85 1209.64 L1555.43 1209.64 L1556.02 1209.64 L1556.6 1209.64 L1557.19 1209.64 L1557.78 1209.64 L1558.36 1209.64 L1558.95 1209.64 L1559.54 1209.64 L1560.12 1209.64 L1560.71 1209.64 L1561.3 1209.64 L1561.88 1209.64 L1562.47 1209.64 L1563.06 1209.64 L1563.64 1209.64 L1564.23 1209.64 L1564.81 1209.64 L1565.4 1209.64 L1565.99 1209.64 L1566.57 1209.64 L1567.16 1209.64 L1567.75 1209.64 L1568.33 1209.64 L1568.92 1209.64 L1569.51 1209.64 L1570.09 1209.64 L1570.68 1209.64 L1571.27 1209.64 L1571.85 1209.64 L1572.44 1209.64 L1573.02 1209.64 L1573.61 1209.64 L1574.2 1209.64 L1574.78 1209.64 L1575.37 1209.64 L1575.96 1209.64 L1576.54 1209.64 L1577.13 1209.64 L1577.72 1209.64 L1578.3 1209.64 L1578.89 1209.64 L1579.47 1209.64 L1580.06 1209.64 L1580.65 1209.64 L1581.23 1209.64 L1581.82 1209.64 L1582.41 1209.64 L1582.99 1209.64 L1583.58 1209.64 L1584.17 1209.64 L1584.75 1209.64 L1585.34 1209.64 L1585.93 1209.64 L1586.51 1209.64 L1587.1 1209.64 L1587.68 1209.64 L1588.27 1209.64 L1588.86 1209.64 L1589.44 1209.64 L1590.03 1209.64 L1590.62 1209.64 L1591.2 1209.64 L1591.79 1209.64 L1592.38 1209.64 L1592.96 1209.64 L1593.55 1209.64 L1594.14 1209.64 L1594.72 1209.64 L1595.31 1209.64 L1595.89 1209.64 L1596.48 1209.64 L1597.07 1209.64 L1597.65 1209.64 L1598.24 1209.64 L1598.83 1209.64 L1599.41 1209.64 L1600 1209.64 L1600.59 1209.64 L1601.17 1209.64 L1601.76 1209.64 L1602.34 1209.64 L1602.93 1209.64 L1603.52 1209.64 L1604.1 1209.64 L1604.69 1209.64 L1605.28 1209.64 L1605.86 1209.64 L1606.45 1209.64 L1607.04 1209.64 L1607.62 1209.64 L1608.21 1209.64 L1608.8 1209.64 L1609.38 1209.64 L1609.97 1209.64 L1610.55 1209.64 L1611.14 1209.64 L1611.73 1209.64 L1612.31 1209.64 L1612.9 1209.64 L1613.49 1209.64 L1614.07 1209.64 L1614.66 1209.64 L1615.25 1209.64 L1615.83 1209.64 L1616.42 1209.64 L1617.01 1209.64 L1617.59 1209.64 L1618.18 1209.64 L1618.76 1209.64 L1619.35 1209.64 L1619.94 1209.64 L1620.52 1209.64 L1621.11 1209.64 L1621.7 1209.64 L1622.28 1209.64 L1622.87 1209.64 L1623.46 1209.64 L1624.04 1209.64 L1624.63 1209.64 L1625.22 1209.64 L1625.8 1209.64 L1626.39 1209.64 L1626.97 1209.64 L1627.56 1209.64 L1628.15 1209.64 L1628.73 1209.64 L1629.32 1209.64 L1629.91 1209.64 L1630.49 1209.64 L1631.08 1209.64 L1631.67 1209.64 L1632.25 1209.64 L1632.84 1209.64 L1633.42 1209.64 L1634.01 1209.64 L1634.6 1209.64 L1635.18 1209.64 L1635.77 1209.64 L1636.36 1209.64 L1636.94 1209.64 L1637.53 1209.64 L1638.12 1209.64 L1638.7 1209.64 L1639.29 1209.64 L1639.88 1209.64 L1640.46 1209.64 L1641.05 1209.64 L1641.63 1209.64 L1642.22 1209.64 L1642.81 1209.64 L1643.39 1209.64 L1643.98 1209.64 L1644.57 1209.64 L1645.15 1209.64 L1645.74 1209.64 L1646.33 1209.64 L1646.91 1209.64 L1647.5 1209.64 L1648.09 1209.64 L1648.67 1209.64 L1649.26 1209.64 L1649.84 1209.64 L1650.43 1209.64 L1651.02 1209.64 L1651.6 1209.64 L1652.19 1209.64 L1652.78 1209.64 L1653.36 1209.64 L1653.95 1209.64 L1654.54 1209.64 L1655.12 1209.64 L1655.71 1209.64 L1656.29 1209.64 L1656.88 1209.64 L1657.47 1209.64 L1658.05 1209.64 L1658.64 1209.64 L1659.23 1209.64 L1659.81 1209.64 L1660.4 1209.64 L1660.99 1209.64 L1661.57 1209.64 L1662.16 1209.64 L1662.75 1209.64 L1663.33 1209.64 L1663.92 1209.64 L1664.5 1209.64 L1665.09 1209.64 L1665.68 1209.64 L1666.26 1209.64 L1666.85 1209.64 L1667.44 1209.64 L1668.02 1209.64 L1668.61 1209.64 L1669.2 1209.64 L1669.78 1209.64 L1670.37 1209.64 L1670.96 1209.64 L1671.54 1209.64 L1672.13 1209.64 L1672.71 1209.64 L1673.3 1209.64 L1673.89 1209.64 L1674.47 1209.64 L1675.06 1209.64 L1675.65 1209.64 L1676.23 1209.64 L1676.82 1209.64 L1677.41 1209.64 L1677.99 1209.64 L1678.58 1209.64 L1679.17 1209.64 L1679.75 1209.64 L1680.34 1209.64 L1680.92 1209.64 L1681.51 1209.64 L1682.1 1209.64 L1682.68 1209.64 L1683.27 1209.64 L1683.86 1209.64 L1684.44 1209.64 L1685.03 1209.64 L1685.62 1209.64 L1686.2 1209.64 L1686.79 1209.64 L1687.37 1209.64 L1687.96 1209.64 L1688.55 1209.64 L1689.13 1209.64 L1689.72 1209.64 L1690.31 1209.64 L1690.89 1209.64 L1691.48 1209.64 L1692.07 1209.64 L1692.65 1209.64 L1693.24 1209.64 L1693.83 1209.64 L1694.41 1209.64 L1695 1209.64 L1695.58 1209.64 L1696.17 1209.64 L1696.76 1209.64 L1697.34 1209.64 L1697.93 1209.64 L1698.52 1209.64 L1699.1 1209.64 L1699.69 1209.64 L1700.28 1209.64 L1700.86 1209.64 L1701.45 1209.64 L1702.04 1209.64 L1702.62 1209.64 L1703.21 1209.64 L1703.79 1209.64 L1704.38 1209.64 L1704.97 1209.64 L1705.55 1209.64 L1706.14 1209.64 L1706.73 1209.64 L1707.31 1209.64 L1707.9 1209.64 L1708.49 1209.64 L1709.07 1209.64 L1709.66 1209.64 L1710.24 1209.64 L1710.83 1209.64 L1711.42 1209.64 L1712 1209.64 L1712.59 1209.64 L1713.18 1209.64 L1713.76 1209.64 L1714.35 1209.64 L1714.94 1209.64 L1715.52 1209.64 L1716.11 1209.64 L1716.7 1209.64 L1717.28 1209.64 L1717.87 1209.64 L1718.45 1209.64 L1719.04 1209.64 L1719.63 1209.64 L1720.21 1209.64 L1720.8 1209.64 L1721.39 1209.64 L1721.97 1209.64 L1722.56 1209.64 L1723.15 1209.64 L1723.73 1209.64 L1724.32 1209.64 L1724.91 1209.64 L1725.49 1209.64 L1726.08 1209.64 L1726.66 1209.64 L1727.25 1209.64 L1727.84 1209.64 L1728.42 1209.64 L1729.01 1209.64 L1729.6 1209.64 L1730.18 1209.64 L1730.77 1209.64 L1731.36 1209.64 L1731.94 1209.64 L1732.53 1209.64 L1733.11 1209.64 L1733.7 1209.64 L1734.29 1209.64 L1734.87 1209.64 L1735.46 1209.64 L1736.05 1209.64 L1736.63 1209.64 L1737.22 1209.64 L1737.81 1209.64 L1738.39 1209.64 L1738.98 1209.64 L1739.57 1209.64 L1740.15 1209.64 L1740.74 1209.64 L1741.32 1209.64 L1741.91 1209.64 L1742.5 1209.64 L1743.08 1209.64 L1743.67 1209.64 L1744.26 1209.64 L1744.84 1209.64 L1745.43 1209.64 L1746.02 1209.64 L1746.6 1209.64 L1747.19 1209.64 L1747.78 1209.64 L1748.36 1209.64 L1748.95 1209.64 L1749.53 1209.64 L1750.12 1209.64 L1750.71 1209.64 L1751.29 1209.64 L1751.88 1209.64 L1752.47 1209.64 L1753.05 1209.64 L1753.64 1209.64 L1754.23 1209.64 L1754.81 1209.64 L1755.4 1209.64 L1755.99 1209.64 L1756.57 1209.64 L1757.16 1209.64 L1757.74 1209.64 L1758.33 1209.64 L1758.92 1209.64 L1759.5 1209.64 L1760.09 1209.64 L1760.68 1209.64 L1761.26 1209.64 L1761.85 1209.64 L1762.44 1209.64 L1763.02 1209.64 L1763.61 1209.64 L1764.19 1209.64 L1764.78 1209.64 L1765.37 1209.64 L1765.95 1209.64 L1766.54 1209.64 L1767.13 1209.64 L1767.71 1209.64 L1768.3 1209.64 L1768.89 1209.64 L1769.47 1209.64 L1770.06 1209.64 L1770.65 1209.64 L1771.23 1209.64 L1771.82 1209.64 L1772.4 1209.64 L1772.99 1209.64 L1773.58 1209.64 L1774.16 1209.64 L1774.75 1209.64 L1775.34 1209.64 L1775.92 1209.64 L1776.51 1209.64 L1777.1 1209.64 L1777.68 1209.64 L1778.27 1209.64 L1778.86 1209.64 L1779.44 1209.64 L1780.03 1209.64 L1780.61 1209.64 L1781.2 1209.64 L1781.79 1209.64 L1782.37 1209.64 L1782.96 1209.64 L1783.55 1209.64 L1784.13 1209.64 L1784.72 1209.64 L1785.31 1209.64 L1785.89 1209.64 L1786.48 1209.64 L1787.06 1209.64 L1787.65 1209.64 L1788.24 1209.64 L1788.82 1209.64 L1789.41 1209.64 L1790 1209.64 L1790.58 1209.64 L1791.17 1209.64 L1791.76 1209.64 L1792.34 1209.64 L1792.93 1209.64 L1793.52 1209.64 L1794.1 1209.64 L1794.69 1209.64 L1795.27 1209.64 L1795.86 1209.64 L1796.45 1209.64 L1797.03 1209.64 L1797.62 1209.64 L1798.21 1209.64 L1798.79 1209.64 L1799.38 1209.64 L1799.97 1209.64 L1800.55 1209.64 L1801.14 1209.64 L1801.73 1209.64 L1802.31 1209.64 L1802.9 1209.64 L1803.48 1209.64 L1804.07 1209.64 L1804.66 1209.64 L1805.24 1209.64 L1805.83 1209.64 L1806.42 1209.64 L1807 1209.64 L1807.59 1209.64 L1808.18 1209.64 L1808.76 1209.64 L1809.35 1209.64 L1809.94 1209.64 L1810.52 1209.64 L1811.11 1209.64 L1811.69 1209.64 L1812.28 1209.64 L1812.87 1209.64 L1813.45 1209.64 L1814.04 1209.64 L1814.63 1209.64 L1815.21 1209.64 L1815.8 1209.64 L1816.39 1209.64 L1816.97 1209.64 L1817.56 1209.64 L1818.14 1209.64 L1818.73 1209.64 L1819.32 1209.64 L1819.9 1209.64 L1820.49 1209.64 L1821.08 1209.64 L1821.66 1209.64 L1822.25 1209.64 L1822.84 1209.64 L1823.42 1209.64 L1824.01 1209.64 L1824.6 1209.64 L1825.18 1209.64 L1825.77 1209.64 L1826.35 1209.64 L1826.94 1209.64 L1827.53 1209.64 L1828.11 1209.64 L1828.7 1209.64 L1829.29 1209.64 L1829.87 1209.64 L1830.46 1209.64 L1831.05 1209.64 L1831.63 1209.64 L1832.22 1209.64 L1832.81 1209.64 L1833.39 1209.64 L1833.98 1209.64 L1834.56 1209.64 L1835.15 1209.64 L1835.74 1209.64 L1836.32 1209.64 L1836.91 1209.64 L1837.5 1209.64 L1838.08 1209.64 L1838.67 1209.64 L1839.26 1209.64 L1839.84 1209.64 L1840.43 1209.64 L1841.01 1209.64 L1841.6 1209.64 L1842.19 1209.64 L1842.77 1209.64 L1843.36 1209.64 L1843.95 1209.64 L1844.53 1209.64 L1845.12 1209.64 L1845.71 1209.64 L1846.29 1209.64 L1846.88 1209.64 L1847.47 1209.64 L1848.05 1209.64 L1848.64 1209.64 L1849.22 1209.64 L1849.81 1209.64 L1850.4 1209.64 L1850.98 1209.64 L1851.57 1209.64 L1852.16 1209.64 L1852.74 1209.64 L1853.33 1209.64 L1853.92 1209.64 L1854.5 1209.64 L1855.09 1209.64 L1855.68 1209.64 L1856.26 1209.64 L1856.85 1209.64 L1857.43 1209.64 L1858.02 1209.64 L1858.61 1209.64 L1859.19 1209.64 L1859.78 1209.64 L1860.37 1209.64 L1860.95 1209.64 L1861.54 1209.64 L1862.13 1209.64 L1862.71 1209.64 L1863.3 1209.64 L1863.88 1209.64 L1864.47 1209.64 L1865.06 1209.64 L1865.64 1209.64 L1866.23 1209.64 L1866.82 1209.64 L1867.4 1209.64 L1867.99 1209.64 L1868.58 1209.64 L1869.16 1209.64 L1869.75 1209.64 L1870.34 1209.64 L1870.92 1209.64 L1871.51 1209.64 L1872.09 1209.64 L1872.68 1209.64 L1873.27 1209.64 L1873.85 1209.64 L1874.44 1209.64 L1875.03 1209.64 L1875.61 1209.64 L1876.2 1209.64 L1876.79 1209.64 L1877.37 1209.64 L1877.96 1209.64 L1878.55 1209.64 L1879.13 1209.64 L1879.72 1209.64 L1880.3 1209.64 L1880.89 1209.64 L1881.48 1209.64 L1882.06 1209.64 L1882.65 1209.64 L1883.24 1209.64 L1883.82 1209.64 L1884.41 1209.64 L1885 1209.64 L1885.58 1209.64 L1886.17 1209.64 L1886.76 1209.64 L1887.34 1209.64 L1887.93 1209.64 L1888.51 1209.64 L1889.1 1209.64 L1889.69 1209.64 L1890.27 1209.64 L1890.86 1209.64 L1891.45 1209.64 L1892.03 1209.64 L1892.62 1209.64 L1893.21 1209.64 L1893.79 1209.64 L1894.38 1209.64 L1894.96 1209.64 L1895.55 1209.64 L1896.14 1209.64 L1896.72 1209.64 L1897.31 1209.64 L1897.9 1209.64 L1898.48 1209.64 L1899.07 1209.64 L1899.66 1209.64 L1900.24 1209.64 L1900.83 1209.64 L1901.42 1209.64 L1902 1209.64 L1902.59 1209.64 L1903.17 1209.64 L1903.76 1209.64 L1904.35 1209.64 L1904.93 1209.64 L1905.52 1209.64 L1906.11 1209.64 L1906.69 1209.64 L1907.28 1209.64 L1907.87 1209.64 L1908.45 1209.64 L1909.04 1209.64 L1909.63 1209.64 L1910.21 1209.64 L1910.8 1209.64 L1911.38 1209.64 L1911.97 1209.64 L1912.56 1209.64 L1913.14 1209.64 L1913.73 1209.64 L1914.32 1209.64 L1914.9 1209.64 L1915.49 1209.64 L1916.08 1209.64 L1916.66 1209.64 L1917.25 1209.64 L1917.83 1209.64 L1918.42 1209.64 L1919.01 1209.64 L1919.59 1209.64 L1920.18 1209.64 L1920.77 1209.64 L1921.35 1209.64 L1921.94 1209.64 L1922.53 1209.64 L1923.11 1209.64 L1923.7 1209.64 L1924.29 1209.64 L1924.87 1209.64 L1925.46 1209.64 L1926.04 1209.64 L1926.63 1209.64 L1927.22 1209.64 L1927.8 1209.64 L1928.39 1209.64 L1928.98 1209.64 L1929.56 1209.64 L1930.15 1209.64 L1930.74 1209.64 L1931.32 1209.64 L1931.91 1209.64 L1932.5 1209.64 L1933.08 1209.64 L1933.67 1209.64 L1934.25 1209.64 L1934.84 1209.64 L1935.43 1209.64 L1936.01 1209.64 L1936.6 1209.64 L1937.19 1209.64 L1937.77 1209.64 L1938.36 1209.64 L1938.95 1209.64 L1939.53 1209.64 L1940.12 1209.64 L1940.71 1209.64 L1941.29 1209.64 L1941.88 1209.64 L1942.46 1209.64 L1943.05 1209.64 L1943.64 1209.64 L1944.22 1209.64 L1944.81 1209.64 L1945.4 1209.64 L1945.98 1209.64 L1946.57 1209.64 L1947.16 1209.64 L1947.74 1209.64 L1948.33 1209.64 L1948.91 1209.64 L1949.5 1209.64 L1950.09 1209.64 L1950.67 1209.64 L1951.26 1209.64 L1951.85 1209.64 L1952.43 1209.64 L1953.02 1209.64 L1953.61 1209.64 L1954.19 1209.64 L1954.78 1209.64 L1955.37 1209.64 L1955.95 1209.64 L1956.54 1209.64 L1957.12 1209.64 L1957.71 1209.64 L1958.3 1209.64 L1958.88 1209.64 L1959.47 1209.64 L1960.06 1209.64 L1960.64 1209.64 L1961.23 1209.64 L1961.82 1209.64 L1962.4 1209.64 L1962.99 1209.64 L1963.58 1209.64 L1964.16 1209.64 L1964.75 1209.64 L1965.33 1209.64 L1965.92 1209.64 L1966.51 1209.64 L1967.09 1209.64 L1967.68 1209.64 L1968.27 1209.64 L1968.85 1209.64 L1969.44 1209.64 L1970.03 1209.64 L1970.61 1209.64 L1971.2 1209.64 L1971.78 1209.64 L1972.37 1209.64 L1972.96 1209.64 L1973.54 1209.64 L1974.13 1209.64 L1974.72 1209.64 L1975.3 1209.64 L1975.89 1209.64 L1976.48 1209.64 L1977.06 1209.64 L1977.65 1209.64 L1978.24 1209.64 L1978.82 1209.64 L1979.41 1209.64 L1979.99 1209.64 L1980.58 1209.64 L1981.17 1209.64 L1981.75 1209.64 L1982.34 1209.64 L1982.93 1209.64 L1983.51 1209.64 L1984.1 1209.64 L1984.69 1209.64 L1985.27 1209.64 L1985.86 1209.64 L1986.45 1209.64 L1987.03 1209.64 L1987.62 1209.64 L1988.2 1209.64 L1988.79 1209.64 L1989.38 1209.64 L1989.96 1209.64 L1990.55 1209.64 L1991.14 1209.64 L1991.72 1209.64 L1992.31 1209.64 L1992.9 1209.64 L1993.48 1209.64 L1994.07 1209.64 L1994.65 1209.64 L1995.24 1209.64 L1995.83 1209.64 L1996.41 1209.64 L1997 1209.64 L1997.59 1209.64 L1998.17 1209.64 L1998.76 1209.64 L1999.35 1209.64 L1999.93 1209.64 L2000.52 1209.64 L2001.11 1209.64 L2001.69 1209.64 L2002.28 1209.64 L2002.86 1209.64 L2003.45 1209.64 L2004.04 1209.64 L2004.62 1209.64 L2005.21 1209.64 L2005.8 1209.64 L2006.38 1209.64 L2006.97 1209.64 L2007.56 1209.64 L2008.14 1209.64 L2008.73 1209.64 L2009.32 1209.64 L2009.9 1209.64 L2010.49 1209.64 L2011.07 1209.64 L2011.66 1209.64 L2012.25 1209.64 L2012.83 1209.64 L2013.42 1209.64 L2014.01 1209.64 L2014.59 1209.64 L2015.18 1209.64 L2015.77 1209.64 L2016.35 1209.64 L2016.94 1209.64 L2017.53 1209.64 L2018.11 1209.64 L2018.7 1209.64 L2019.28 1209.64 L2019.87 1209.64 L2020.46 1209.64 L2021.04 1209.64 L2021.63 1209.64 L2022.22 1209.64 L2022.8 1209.64 L2023.39 1209.64 L2023.98 1209.64 L2024.56 1209.64 L2025.15 1209.64 L2025.73 1209.64 L2026.32 1209.64 L2026.91 1209.64 L2027.49 1209.64 L2028.08 1209.64 L2028.67 1209.64 L2029.25 1209.64 L2029.84 1209.64 L2030.43 1209.64 L2031.01 1209.64 L2031.6 1209.64 L2032.19 1209.64 L2032.77 1209.64 L2033.36 1209.64 L2033.94 1209.64 L2034.53 1209.64 L2035.12 1209.64 L2035.7 1209.64 L2036.29 1209.64 L2036.88 1209.64 L2037.46 1209.64 L2038.05 1209.64 L2038.64 1209.64 L2039.22 1209.64 L2039.81 1209.64 L2040.4 1209.64 L2040.98 1209.64 L2041.57 1209.64 L2042.15 1209.64 L2042.74 1209.64 L2043.33 1209.64 L2043.91 1209.64 L2044.5 1209.64 L2045.09 1209.64 L2045.67 1209.64 L2046.26 1209.64 L2046.85 1209.64 L2047.43 1209.64 L2048.02 1209.64 L2048.6 1209.64 L2049.19 1209.64 L2049.78 1209.64 L2050.36 1209.64 L2050.95 1209.64 L2051.54 1209.64 L2052.12 1209.64 L2052.71 1209.64 L2053.3 1209.64 L2053.88 1209.64 L2054.47 1209.64 L2055.06 1209.64 L2055.64 1209.64 L2056.23 1209.64 L2056.81 1209.64 L2057.4 1209.64 L2057.99 1209.64 L2058.57 1209.64 L2059.16 1209.64 L2059.75 1209.64 L2060.33 1209.64 L2060.92 1209.64 L2061.51 1209.64 L2062.09 1209.64 L2062.68 1209.64 L2063.27 1209.64 L2063.85 1209.64 L2064.44 1209.64 L2065.02 1209.64 L2065.61 1209.64 L2066.2 1209.64 L2066.78 1209.64 L2067.37 1209.64 L2067.96 1209.64 L2068.54 1209.64 L2069.13 1209.64 L2069.72 1209.64 L2070.3 1209.64 L2070.89 1209.64 L2071.48 1209.64 L2072.06 1209.64 L2072.65 1209.64 L2073.23 1209.64 L2073.82 1209.64 L2074.41 1209.64 L2074.99 1209.64 L2075.58 1209.64 L2076.17 1209.64 L2076.75 1209.64 L2077.34 1209.64 L2077.93 1209.64 L2078.51 1209.64 L2079.1 1209.64 L2079.68 1209.64 L2080.27 1209.64 L2080.86 1209.64 L2081.44 1209.64 L2082.03 1209.64 L2082.62 1209.64 L2083.2 1209.64 L2083.79 1209.64 L2084.38 1209.64 L2084.96 1209.64 L2085.55 1209.64 L2086.14 1209.64 L2086.72 1209.64 L2087.31 1209.64 L2087.89 1209.64 L2088.48 1209.64 L2089.07 1209.64 L2089.65 1209.64 L2090.24 1209.64 L2090.83 1209.64 L2091.41 1209.64 L2092 1209.64 L2092.59 1209.64 L2093.17 1209.64 L2093.76 1209.64 L2094.35 1209.64 L2094.93 1209.64 L2095.52 1209.64 L2096.1 1209.64 L2096.69 1209.64 L2097.28 1209.64 L2097.86 1209.64 L2098.45 1209.64 L2099.04 1209.64 L2099.62 1209.64 L2100.21 1209.64 L2100.8 1209.64 L2101.38 1209.64 L2101.97 1209.64 L2102.55 1209.64 L2103.14 1209.64 L2103.73 1209.64 L2104.31 1209.64 L2104.9 1209.64 L2105.49 1209.64 L2106.07 1209.64 L2106.66 1209.64 L2107.25 1209.64 L2107.83 1209.64 L2108.42 1209.64 L2109.01 1209.64 L2109.59 1209.64 L2110.18 1209.64 L2110.76 1209.64 L2111.35 1209.64 L2111.94 1209.64 L2112.52 1209.64 L2113.11 1209.64 L2113.7 1209.64 L2114.28 1209.64 L2114.87 1209.64 L2115.46 1209.64 L2116.04 1209.64 L2116.63 1209.64 L2117.22 1209.64 L2117.8 1209.64 L2118.39 1209.64 L2118.97 1209.64 L2119.56 1209.64 L2120.15 1209.64 L2120.73 1209.64 L2121.32 1209.64 L2121.91 1209.64 L2122.49 1209.64 L2123.08 1209.64 L2123.67 1209.64 L2124.25 1209.64 L2124.84 1209.64 L2125.42 1209.64 L2126.01 1209.64 L2126.6 1209.64 L2127.18 1209.64 L2127.77 1209.64 L2128.36 1209.64 L2128.94 1209.64 L2129.53 1209.64 L2130.12 1209.64 L2130.7 1209.64 L2131.29 1209.64 L2131.88 1209.64 L2132.46 1209.64 L2133.05 1209.64 L2133.63 1209.64 L2134.22 1209.64 L2134.81 1209.64 L2135.39 1209.64 L2135.98 1209.64 L2136.57 1209.64 L2137.15 1209.64 L2137.74 1209.64 L2138.33 1209.64 L2138.91 1209.64 L2139.5 1209.64 L2140.09 1209.64 L2140.67 1209.64 L2141.26 1209.64 L2141.84 1209.64 L2142.43 1209.64 L2143.02 1209.64 L2143.6 1209.64 L2144.19 1209.64 L2144.78 1209.64 L2145.36 1209.64 L2145.95 1209.64 L2146.54 1209.64 L2147.12 1209.64 L2147.71 1209.64 L2148.3 1209.64 L2148.88 1209.64 L2149.47 1209.64 L2150.05 1209.64 L2150.64 1209.64 L2151.23 1209.64 L2151.81 1209.64 L2152.4 1209.64 L2152.99 1209.64 L2153.57 1209.64 L2154.16 1209.64 L2154.75 1209.64 L2155.33 1209.64 L2155.92 1209.64 L2156.5 1209.64 L2157.09 1209.64 L2157.68 1209.64 L2158.26 1209.64 L2158.26 1209.46 L2157.68 1209.46 L2157.09 1209.46 L2156.5 1209.46 L2155.92 1209.46 L2155.33 1209.46 L2154.75 1209.46 L2154.16 1209.46 L2153.57 1209.46 L2152.99 1209.46 L2152.4 1209.46 L2151.81 1209.46 L2151.23 1209.46 L2150.64 1209.46 L2150.05 1209.46 L2149.47 1209.46 L2148.88 1209.46 L2148.3 1209.46 L2147.71 1209.46 L2147.12 1209.46 L2146.54 1209.46 L2145.95 1209.46 L2145.36 1209.46 L2144.78 1209.46 L2144.19 1209.46 L2143.6 1209.46 L2143.02 1209.46 L2142.43 1209.46 L2141.84 1209.46 L2141.26 1209.46 L2140.67 1209.46 L2140.09 1209.46 L2139.5 1209.46 L2138.91 1209.46 L2138.33 1209.46 L2137.74 1209.46 L2137.15 1209.46 L2136.57 1209.46 L2135.98 1209.46 L2135.39 1209.46 L2134.81 1209.46 L2134.22 1209.46 L2133.63 1209.46 L2133.05 1209.46 L2132.46 1209.46 L2131.88 1209.46 L2131.29 1209.46 L2130.7 1209.46 L2130.12 1209.46 L2129.53 1209.46 L2128.94 1209.46 L2128.36 1209.46 L2127.77 1209.46 L2127.18 1209.46 L2126.6 1209.46 L2126.01 1209.46 L2125.42 1209.46 L2124.84 1209.46 L2124.25 1209.46 L2123.67 1209.46 L2123.08 1209.46 L2122.49 1209.46 L2121.91 1209.46 L2121.32 1209.46 L2120.73 1209.46 L2120.15 1209.46 L2119.56 1209.46 L2118.97 1209.46 L2118.39 1209.46 L2117.8 1209.46 L2117.22 1209.46 L2116.63 1209.46 L2116.04 1209.46 L2115.46 1209.46 L2114.87 1209.46 L2114.28 1209.46 L2113.7 1209.46 L2113.11 1209.46 L2112.52 1209.46 L2111.94 1209.46 L2111.35 1209.46 L2110.76 1209.46 L2110.18 1209.46 L2109.59 1209.46 L2109.01 1209.46 L2108.42 1209.46 L2107.83 1209.46 L2107.25 1209.46 L2106.66 1209.46 L2106.07 1209.46 L2105.49 1209.46 L2104.9 1209.46 L2104.31 1209.46 L2103.73 1209.46 L2103.14 1209.46 L2102.55 1209.46 L2101.97 1209.46 L2101.38 1209.46 L2100.8 1209.46 L2100.21 1209.46 L2099.62 1209.46 L2099.04 1209.46 L2098.45 1209.46 L2097.86 1209.46 L2097.28 1209.46 L2096.69 1209.46 L2096.1 1209.46 L2095.52 1209.46 L2094.93 1209.46 L2094.35 1209.46 L2093.76 1209.46 L2093.17 1209.46 L2092.59 1209.46 L2092 1209.46 L2091.41 1209.46 L2090.83 1209.46 L2090.24 1209.46 L2089.65 1209.46 L2089.07 1209.46 L2088.48 1209.46 L2087.89 1209.46 L2087.31 1209.46 L2086.72 1209.46 L2086.14 1209.46 L2085.55 1209.46 L2084.96 1209.46 L2084.38 1209.46 L2083.79 1209.46 L2083.2 1209.46 L2082.62 1209.46 L2082.03 1209.46 L2081.44 1209.46 L2080.86 1209.46 L2080.27 1209.46 L2079.68 1209.46 L2079.1 1209.46 L2078.51 1209.46 L2077.93 1209.46 L2077.34 1209.46 L2076.75 1209.46 L2076.17 1209.46 L2075.58 1209.46 L2074.99 1209.46 L2074.41 1209.46 L2073.82 1209.46 L2073.23 1209.46 L2072.65 1209.46 L2072.06 1209.46 L2071.48 1209.46 L2070.89 1209.46 L2070.3 1209.46 L2069.72 1209.46 L2069.13 1209.46 L2068.54 1209.46 L2067.96 1209.46 L2067.37 1209.46 L2066.78 1209.46 L2066.2 1209.46 L2065.61 1209.46 L2065.02 1209.46 L2064.44 1209.46 L2063.85 1209.46 L2063.27 1209.46 L2062.68 1209.46 L2062.09 1209.46 L2061.51 1209.46 L2060.92 1209.46 L2060.33 1209.46 L2059.75 1209.46 L2059.16 1209.46 L2058.57 1209.46 L2057.99 1209.46 L2057.4 1209.46 L2056.81 1209.46 L2056.23 1209.46 L2055.64 1209.46 L2055.06 1209.46 L2054.47 1209.46 L2053.88 1209.46 L2053.3 1209.46 L2052.71 1209.46 L2052.12 1209.46 L2051.54 1209.46 L2050.95 1209.46 L2050.36 1209.46 L2049.78 1209.46 L2049.19 1209.46 L2048.6 1209.46 L2048.02 1209.46 L2047.43 1209.46 L2046.85 1209.46 L2046.26 1209.46 L2045.67 1209.46 L2045.09 1209.46 L2044.5 1209.46 L2043.91 1209.46 L2043.33 1209.46 L2042.74 1209.46 L2042.15 1209.46 L2041.57 1209.46 L2040.98 1209.46 L2040.4 1209.46 L2039.81 1209.46 L2039.22 1209.46 L2038.64 1209.46 L2038.05 1209.46 L2037.46 1209.46 L2036.88 1209.46 L2036.29 1209.46 L2035.7 1209.46 L2035.12 1209.46 L2034.53 1209.46 L2033.94 1209.46 L2033.36 1209.46 L2032.77 1209.46 L2032.19 1209.46 L2031.6 1209.46 L2031.01 1209.46 L2030.43 1209.46 L2029.84 1209.46 L2029.25 1209.46 L2028.67 1209.46 L2028.08 1209.46 L2027.49 1209.46 L2026.91 1209.46 L2026.32 1209.46 L2025.73 1209.46 L2025.15 1209.46 L2024.56 1209.46 L2023.98 1209.46 L2023.39 1209.46 L2022.8 1209.46 L2022.22 1209.46 L2021.63 1209.46 L2021.04 1209.46 L2020.46 1209.46 L2019.87 1209.46 L2019.28 1209.46 L2018.7 1209.46 L2018.11 1209.46 L2017.53 1209.46 L2016.94 1209.46 L2016.35 1209.46 L2015.77 1209.46 L2015.18 1209.46 L2014.59 1209.46 L2014.01 1209.46 L2013.42 1209.46 L2012.83 1209.46 L2012.25 1209.46 L2011.66 1209.46 L2011.07 1209.46 L2010.49 1209.46 L2009.9 1209.46 L2009.32 1209.46 L2008.73 1209.46 L2008.14 1209.46 L2007.56 1209.46 L2006.97 1209.46 L2006.38 1209.46 L2005.8 1209.46 L2005.21 1209.46 L2004.62 1209.46 L2004.04 1209.46 L2003.45 1209.46 L2002.86 1209.46 L2002.28 1209.46 L2001.69 1209.46 L2001.11 1209.46 L2000.52 1209.46 L1999.93 1209.46 L1999.35 1209.46 L1998.76 1209.46 L1998.17 1209.46 L1997.59 1209.46 L1997 1209.46 L1996.41 1209.46 L1995.83 1209.46 L1995.24 1209.46 L1994.65 1209.46 L1994.07 1209.46 L1993.48 1209.46 L1992.9 1209.46 L1992.31 1209.46 L1991.72 1209.46 L1991.14 1209.46 L1990.55 1209.46 L1989.96 1209.46 L1989.38 1209.46 L1988.79 1209.46 L1988.2 1209.46 L1987.62 1209.46 L1987.03 1209.46 L1986.45 1209.46 L1985.86 1209.46 L1985.27 1209.46 L1984.69 1209.46 L1984.1 1209.46 L1983.51 1209.46 L1982.93 1209.46 L1982.34 1209.46 L1981.75 1209.46 L1981.17 1209.46 L1980.58 1209.46 L1979.99 1209.46 L1979.41 1209.46 L1978.82 1209.46 L1978.24 1209.46 L1977.65 1209.46 L1977.06 1209.46 L1976.48 1209.46 L1975.89 1209.46 L1975.3 1209.46 L1974.72 1209.46 L1974.13 1209.46 L1973.54 1209.46 L1972.96 1209.46 L1972.37 1209.46 L1971.78 1209.46 L1971.2 1209.46 L1970.61 1209.46 L1970.03 1209.46 L1969.44 1209.46 L1968.85 1209.46 L1968.27 1209.46 L1967.68 1209.46 L1967.09 1209.46 L1966.51 1209.46 L1965.92 1209.46 L1965.33 1209.46 L1964.75 1209.46 L1964.16 1209.46 L1963.58 1209.46 L1962.99 1209.46 L1962.4 1209.46 L1961.82 1209.46 L1961.23 1209.46 L1960.64 1209.46 L1960.06 1209.46 L1959.47 1209.46 L1958.88 1209.46 L1958.3 1209.46 L1957.71 1209.46 L1957.12 1209.46 L1956.54 1209.46 L1955.95 1209.46 L1955.37 1209.46 L1954.78 1209.46 L1954.19 1209.46 L1953.61 1209.46 L1953.02 1209.46 L1952.43 1209.46 L1951.85 1209.46 L1951.26 1209.46 L1950.67 1209.46 L1950.09 1209.46 L1949.5 1209.46 L1948.91 1209.46 L1948.33 1209.46 L1947.74 1209.46 L1947.16 1209.46 L1946.57 1209.46 L1945.98 1209.46 L1945.4 1209.46 L1944.81 1209.46 L1944.22 1209.46 L1943.64 1209.46 L1943.05 1209.46 L1942.46 1209.46 L1941.88 1209.46 L1941.29 1209.46 L1940.71 1209.46 L1940.12 1209.46 L1939.53 1209.46 L1938.95 1209.46 L1938.36 1209.46 L1937.77 1209.46 L1937.19 1209.46 L1936.6 1209.46 L1936.01 1209.46 L1935.43 1209.46 L1934.84 1209.46 L1934.25 1209.46 L1933.67 1209.46 L1933.08 1209.46 L1932.5 1209.46 L1931.91 1209.46 L1931.32 1209.46 L1930.74 1209.46 L1930.15 1209.46 L1929.56 1209.46 L1928.98 1209.46 L1928.39 1209.46 L1927.8 1209.46 L1927.22 1209.46 L1926.63 1209.46 L1926.04 1209.46 L1925.46 1209.46 L1924.87 1209.46 L1924.29 1209.46 L1923.7 1209.46 L1923.11 1209.46 L1922.53 1209.46 L1921.94 1209.46 L1921.35 1209.46 L1920.77 1209.46 L1920.18 1209.46 L1919.59 1209.46 L1919.01 1209.46 L1918.42 1209.46 L1917.83 1209.46 L1917.25 1209.46 L1916.66 1209.46 L1916.08 1209.46 L1915.49 1209.46 L1914.9 1209.46 L1914.32 1209.46 L1913.73 1209.46 L1913.14 1209.46 L1912.56 1209.46 L1911.97 1209.46 L1911.38 1209.46 L1910.8 1209.46 L1910.21 1209.46 L1909.63 1209.46 L1909.04 1209.46 L1908.45 1209.46 L1907.87 1209.46 L1907.28 1209.46 L1906.69 1209.46 L1906.11 1209.46 L1905.52 1209.46 L1904.93 1209.46 L1904.35 1209.46 L1903.76 1209.46 L1903.17 1209.46 L1902.59 1209.46 L1902 1209.46 L1901.42 1209.46 L1900.83 1209.46 L1900.24 1209.46 L1899.66 1209.46 L1899.07 1209.46 L1898.48 1209.46 L1897.9 1209.46 L1897.31 1209.46 L1896.72 1209.46 L1896.14 1209.46 L1895.55 1209.46 L1894.96 1209.46 L1894.38 1209.46 L1893.79 1209.46 L1893.21 1209.46 L1892.62 1209.46 L1892.03 1209.46 L1891.45 1209.46 L1890.86 1209.46 L1890.27 1209.46 L1889.69 1209.46 L1889.1 1209.46 L1888.51 1209.46 L1887.93 1209.46 L1887.34 1209.46 L1886.76 1209.46 L1886.17 1209.46 L1885.58 1209.46 L1885 1209.46 L1884.41 1209.46 L1883.82 1209.46 L1883.24 1209.46 L1882.65 1209.46 L1882.06 1209.46 L1881.48 1209.46 L1880.89 1209.46 L1880.3 1209.46 L1879.72 1209.46 L1879.13 1209.46 L1878.55 1209.46 L1877.96 1209.46 L1877.37 1209.46 L1876.79 1209.46 L1876.2 1209.46 L1875.61 1209.46 L1875.03 1209.46 L1874.44 1209.46 L1873.85 1209.46 L1873.27 1209.46 L1872.68 1209.46 L1872.09 1209.46 L1871.51 1209.46 L1870.92 1209.46 L1870.34 1209.46 L1869.75 1209.46 L1869.16 1209.46 L1868.58 1209.46 L1867.99 1209.46 L1867.4 1209.46 L1866.82 1209.46 L1866.23 1209.46 L1865.64 1209.46 L1865.06 1209.46 L1864.47 1209.46 L1863.88 1209.46 L1863.3 1209.46 L1862.71 1209.46 L1862.13 1209.46 L1861.54 1209.46 L1860.95 1209.46 L1860.37 1209.46 L1859.78 1209.46 L1859.19 1209.46 L1858.61 1209.46 L1858.02 1209.46 L1857.43 1209.46 L1856.85 1209.46 L1856.26 1209.46 L1855.68 1209.46 L1855.09 1209.46 L1854.5 1209.46 L1853.92 1209.46 L1853.33 1209.46 L1852.74 1209.46 L1852.16 1209.46 L1851.57 1209.46 L1850.98 1209.46 L1850.4 1209.46 L1849.81 1209.46 L1849.22 1209.46 L1848.64 1209.46 L1848.05 1209.46 L1847.47 1209.46 L1846.88 1209.46 L1846.29 1209.46 L1845.71 1209.46 L1845.12 1209.46 L1844.53 1209.46 L1843.95 1209.46 L1843.36 1209.46 L1842.77 1209.46 L1842.19 1209.46 L1841.6 1209.46 L1841.01 1209.46 L1840.43 1209.46 L1839.84 1209.46 L1839.26 1209.46 L1838.67 1209.46 L1838.08 1209.46 L1837.5 1209.46 L1836.91 1209.46 L1836.32 1209.46 L1835.74 1209.46 L1835.15 1209.46 L1834.56 1209.46 L1833.98 1209.46 L1833.39 1209.46 L1832.81 1209.46 L1832.22 1209.46 L1831.63 1209.46 L1831.05 1209.46 L1830.46 1209.46 L1829.87 1209.46 L1829.29 1209.46 L1828.7 1209.46 L1828.11 1209.46 L1827.53 1209.46 L1826.94 1209.46 L1826.35 1209.46 L1825.77 1209.46 L1825.18 1209.46 L1824.6 1209.46 L1824.01 1209.46 L1823.42 1209.46 L1822.84 1209.46 L1822.25 1209.46 L1821.66 1209.46 L1821.08 1209.46 L1820.49 1209.46 L1819.9 1209.46 L1819.32 1209.46 L1818.73 1209.46 L1818.14 1209.46 L1817.56 1209.46 L1816.97 1209.46 L1816.39 1209.46 L1815.8 1209.46 L1815.21 1209.46 L1814.63 1209.46 L1814.04 1209.46 L1813.45 1209.46 L1812.87 1209.46 L1812.28 1209.46 L1811.69 1209.46 L1811.11 1209.46 L1810.52 1209.46 L1809.94 1209.46 L1809.35 1209.46 L1808.76 1209.46 L1808.18 1209.46 L1807.59 1209.46 L1807 1209.46 L1806.42 1209.46 L1805.83 1209.46 L1805.24 1209.46 L1804.66 1209.46 L1804.07 1209.46 L1803.48 1209.46 L1802.9 1209.46 L1802.31 1209.46 L1801.73 1209.46 L1801.14 1209.46 L1800.55 1209.46 L1799.97 1209.46 L1799.38 1209.46 L1798.79 1209.46 L1798.21 1209.46 L1797.62 1209.46 L1797.03 1209.46 L1796.45 1209.46 L1795.86 1209.46 L1795.27 1209.46 L1794.69 1209.46 L1794.1 1209.46 L1793.52 1209.46 L1792.93 1209.46 L1792.34 1209.46 L1791.76 1209.46 L1791.17 1209.46 L1790.58 1209.46 L1790 1209.46 L1789.41 1209.46 L1788.82 1209.46 L1788.24 1209.46 L1787.65 1209.46 L1787.06 1209.46 L1786.48 1209.46 L1785.89 1209.46 L1785.31 1209.46 L1784.72 1209.46 L1784.13 1209.46 L1783.55 1209.46 L1782.96 1209.46 L1782.37 1209.46 L1781.79 1209.46 L1781.2 1209.46 L1780.61 1209.46 L1780.03 1209.46 L1779.44 1209.46 L1778.86 1209.46 L1778.27 1209.46 L1777.68 1209.46 L1777.1 1209.46 L1776.51 1209.46 L1775.92 1209.46 L1775.34 1209.46 L1774.75 1209.46 L1774.16 1209.46 L1773.58 1209.46 L1772.99 1209.46 L1772.4 1209.46 L1771.82 1209.46 L1771.23 1209.46 L1770.65 1209.46 L1770.06 1209.46 L1769.47 1209.46 L1768.89 1209.46 L1768.3 1209.46 L1767.71 1209.46 L1767.13 1209.46 L1766.54 1209.46 L1765.95 1209.46 L1765.37 1209.46 L1764.78 1209.46 L1764.19 1209.46 L1763.61 1209.46 L1763.02 1209.46 L1762.44 1209.46 L1761.85 1209.46 L1761.26 1209.46 L1760.68 1209.46 L1760.09 1209.46 L1759.5 1209.46 L1758.92 1209.46 L1758.33 1209.46 L1757.74 1209.46 L1757.16 1209.46 L1756.57 1209.46 L1755.99 1209.46 L1755.4 1209.46 L1754.81 1209.46 L1754.23 1209.46 L1753.64 1209.46 L1753.05 1209.46 L1752.47 1209.46 L1751.88 1209.46 L1751.29 1209.46 L1750.71 1209.46 L1750.12 1209.46 L1749.53 1209.46 L1748.95 1209.46 L1748.36 1209.46 L1747.78 1209.46 L1747.19 1209.46 L1746.6 1209.46 L1746.02 1209.46 L1745.43 1209.46 L1744.84 1209.46 L1744.26 1209.46 L1743.67 1209.46 L1743.08 1209.46 L1742.5 1209.46 L1741.91 1209.46 L1741.32 1209.46 L1740.74 1209.46 L1740.15 1209.46 L1739.57 1209.46 L1738.98 1209.46 L1738.39 1209.46 L1737.81 1209.46 L1737.22 1209.46 L1736.63 1209.46 L1736.05 1209.46 L1735.46 1209.46 L1734.87 1209.46 L1734.29 1209.46 L1733.7 1209.46 L1733.11 1209.46 L1732.53 1209.46 L1731.94 1209.46 L1731.36 1209.46 L1730.77 1209.46 L1730.18 1209.46 L1729.6 1209.46 L1729.01 1209.46 L1728.42 1209.46 L1727.84 1209.46 L1727.25 1209.46 L1726.66 1209.46 L1726.08 1209.46 L1725.49 1209.46 L1724.91 1209.46 L1724.32 1209.46 L1723.73 1209.46 L1723.15 1209.46 L1722.56 1209.46 L1721.97 1209.46 L1721.39 1209.46 L1720.8 1209.46 L1720.21 1209.46 L1719.63 1209.46 L1719.04 1209.46 L1718.45 1209.46 L1717.87 1209.46 L1717.28 1209.46 L1716.7 1209.46 L1716.11 1209.46 L1715.52 1209.46 L1714.94 1209.46 L1714.35 1209.46 L1713.76 1209.46 L1713.18 1209.46 L1712.59 1209.46 L1712 1209.46 L1711.42 1209.46 L1710.83 1209.46 L1710.24 1209.46 L1709.66 1209.46 L1709.07 1209.46 L1708.49 1209.46 L1707.9 1209.46 L1707.31 1209.46 L1706.73 1209.46 L1706.14 1209.46 L1705.55 1209.46 L1704.97 1209.46 L1704.38 1209.46 L1703.79 1209.46 L1703.21 1209.46 L1702.62 1209.46 L1702.04 1209.46 L1701.45 1209.46 L1700.86 1209.46 L1700.28 1209.46 L1699.69 1209.46 L1699.1 1209.46 L1698.52 1209.46 L1697.93 1209.46 L1697.34 1209.46 L1696.76 1209.46 L1696.17 1209.46 L1695.58 1209.46 L1695 1209.46 L1694.41 1209.46 L1693.83 1209.46 L1693.24 1209.46 L1692.65 1209.46 L1692.07 1209.46 L1691.48 1209.46 L1690.89 1209.46 L1690.31 1209.46 L1689.72 1209.46 L1689.13 1209.46 L1688.55 1209.46 L1687.96 1209.46 L1687.37 1209.46 L1686.79 1209.46 L1686.2 1209.46 L1685.62 1209.46 L1685.03 1209.46 L1684.44 1209.46 L1683.86 1209.46 L1683.27 1209.46 L1682.68 1209.46 L1682.1 1209.46 L1681.51 1209.46 L1680.92 1209.46 L1680.34 1209.46 L1679.75 1209.46 L1679.17 1209.46 L1678.58 1209.46 L1677.99 1209.46 L1677.41 1209.46 L1676.82 1209.46 L1676.23 1209.46 L1675.65 1209.46 L1675.06 1209.46 L1674.47 1209.46 L1673.89 1209.46 L1673.3 1209.46 L1672.71 1209.46 L1672.13 1209.46 L1671.54 1209.46 L1670.96 1209.46 L1670.37 1209.46 L1669.78 1209.46 L1669.2 1209.46 L1668.61 1209.46 L1668.02 1209.46 L1667.44 1209.46 L1666.85 1209.46 L1666.26 1209.46 L1665.68 1209.46 L1665.09 1209.46 L1664.5 1209.46 L1663.92 1209.46 L1663.33 1209.46 L1662.75 1209.46 L1662.16 1209.46 L1661.57 1209.46 L1660.99 1209.46 L1660.4 1209.46 L1659.81 1209.46 L1659.23 1209.46 L1658.64 1209.46 L1658.05 1209.46 L1657.47 1209.46 L1656.88 1209.46 L1656.29 1209.46 L1655.71 1209.46 L1655.12 1209.46 L1654.54 1209.46 L1653.95 1209.46 L1653.36 1209.46 L1652.78 1209.46 L1652.19 1209.46 L1651.6 1209.46 L1651.02 1209.46 L1650.43 1209.46 L1649.84 1209.46 L1649.26 1209.46 L1648.67 1209.46 L1648.09 1209.46 L1647.5 1209.46 L1646.91 1209.46 L1646.33 1209.46 L1645.74 1209.46 L1645.15 1209.46 L1644.57 1209.46 L1643.98 1209.46 L1643.39 1209.46 L1642.81 1209.46 L1642.22 1209.46 L1641.63 1209.46 L1641.05 1209.46 L1640.46 1209.46 L1639.88 1209.46 L1639.29 1209.46 L1638.7 1209.46 L1638.12 1209.46 L1637.53 1209.46 L1636.94 1209.46 L1636.36 1209.46 L1635.77 1209.46 L1635.18 1209.46 L1634.6 1209.46 L1634.01 1209.46 L1633.42 1209.46 L1632.84 1209.46 L1632.25 1209.46 L1631.67 1209.46 L1631.08 1209.46 L1630.49 1209.46 L1629.91 1209.46 L1629.32 1209.46 L1628.73 1209.46 L1628.15 1209.46 L1627.56 1209.46 L1626.97 1209.46 L1626.39 1209.46 L1625.8 1209.46 L1625.22 1209.46 L1624.63 1209.46 L1624.04 1209.46 L1623.46 1209.46 L1622.87 1209.46 L1622.28 1209.46 L1621.7 1209.46 L1621.11 1209.46 L1620.52 1209.46 L1619.94 1209.46 L1619.35 1209.46 L1618.76 1209.46 L1618.18 1209.46 L1617.59 1209.46 L1617.01 1209.46 L1616.42 1209.46 L1615.83 1209.46 L1615.25 1209.46 L1614.66 1209.46 L1614.07 1209.46 L1613.49 1209.46 L1612.9 1209.46 L1612.31 1209.46 L1611.73 1209.46 L1611.14 1209.46 L1610.55 1209.46 L1609.97 1209.46 L1609.38 1209.46 L1608.8 1209.46 L1608.21 1209.46 L1607.62 1209.46 L1607.04 1209.46 L1606.45 1209.46 L1605.86 1209.46 L1605.28 1209.46 L1604.69 1209.46 L1604.1 1209.46 L1603.52 1209.46 L1602.93 1209.46 L1602.34 1209.46 L1601.76 1209.46 L1601.17 1209.46 L1600.59 1209.46 L1600 1209.46 L1599.41 1209.46 L1598.83 1209.46 L1598.24 1209.46 L1597.65 1209.46 L1597.07 1209.46 L1596.48 1209.46 L1595.89 1209.46 L1595.31 1209.46 L1594.72 1209.46 L1594.14 1209.46 L1593.55 1209.46 L1592.96 1209.46 L1592.38 1209.46 L1591.79 1209.46 L1591.2 1209.46 L1590.62 1209.46 L1590.03 1209.46 L1589.44 1209.46 L1588.86 1209.46 L1588.27 1209.46 L1587.68 1209.46 L1587.1 1209.46 L1586.51 1209.46 L1585.93 1209.46 L1585.34 1209.46 L1584.75 1209.46 L1584.17 1209.46 L1583.58 1209.46 L1582.99 1209.46 L1582.41 1209.46 L1581.82 1209.46 L1581.23 1209.46 L1580.65 1209.46 L1580.06 1209.46 L1579.47 1209.46 L1578.89 1209.46 L1578.3 1209.46 L1577.72 1209.46 L1577.13 1209.46 L1576.54 1209.46 L1575.96 1209.46 L1575.37 1209.46 L1574.78 1209.46 L1574.2 1209.46 L1573.61 1209.46 L1573.02 1209.46 L1572.44 1209.46 L1571.85 1209.46 L1571.27 1209.46 L1570.68 1209.46 L1570.09 1209.46 L1569.51 1209.46 L1568.92 1209.46 L1568.33 1209.46 L1567.75 1209.46 L1567.16 1209.46 L1566.57 1209.46 L1565.99 1209.46 L1565.4 1209.46 L1564.81 1209.46 L1564.23 1209.46 L1563.64 1209.46 L1563.06 1209.46 L1562.47 1209.46 L1561.88 1209.46 L1561.3 1209.46 L1560.71 1209.46 L1560.12 1209.46 L1559.54 1209.46 L1558.95 1209.46 L1558.36 1209.46 L1557.78 1209.46 L1557.19 1209.46 L1556.6 1209.46 L1556.02 1209.46 L1555.43 1209.46 L1554.85 1209.46 L1554.26 1209.46 L1553.67 1209.46 L1553.09 1209.46 L1552.5 1209.46 L1551.91 1209.46 L1551.33 1209.46 L1550.74 1209.46 L1550.15 1209.46 L1549.57 1209.46 L1548.98 1209.46 L1548.4 1209.46 L1547.81 1209.46 L1547.22 1209.46 L1546.64 1209.46 L1546.05 1209.46 L1545.46 1209.46 L1544.88 1209.46 L1544.29 1209.46 L1543.7 1209.46 L1543.12 1209.46 L1542.53 1209.46 L1541.94 1209.46 L1541.36 1209.46 L1540.77 1209.46 L1540.19 1209.46 L1539.6 1209.46 L1539.01 1209.46 L1538.43 1209.46 L1537.84 1209.46 L1537.25 1209.46 L1536.67 1209.46 L1536.08 1209.46 L1535.49 1209.46 L1534.91 1209.46 L1534.32 1209.46 L1533.73 1209.46 L1533.15 1209.46 L1532.56 1209.46 L1531.98 1209.46 L1531.39 1209.46 L1530.8 1209.46 L1530.22 1209.46 L1529.63 1209.46 L1529.04 1209.46 L1528.46 1209.46 L1527.87 1209.46 L1527.28 1209.46 L1526.7 1209.46 L1526.11 1209.46 L1525.52 1209.46 L1524.94 1209.46 L1524.35 1209.46 L1523.77 1209.46 L1523.18 1209.46 L1522.59 1209.46 L1522.01 1209.46 L1521.42 1209.46 L1520.83 1209.46 L1520.25 1209.46 L1519.66 1209.46 L1519.07 1209.46 L1518.49 1209.46 L1517.9 1209.46 L1517.32 1209.46 L1516.73 1209.46 L1516.14 1209.46 L1515.56 1209.46 L1514.97 1209.46 L1514.38 1209.46 L1513.8 1209.46 L1513.21 1209.46 L1512.62 1209.46 L1512.04 1209.46 L1511.45 1209.46 L1510.86 1209.46 L1510.28 1209.46 L1509.69 1209.46 L1509.11 1209.46 L1508.52 1209.46 L1507.93 1209.46 L1507.35 1209.46 L1506.76 1209.46 L1506.17 1209.46 L1505.59 1209.46 L1505 1209.46 L1504.41 1209.46 L1503.83 1209.46 L1503.24 1209.46 L1502.65 1209.46 L1502.07 1209.46 L1501.48 1209.46 L1500.9 1209.46 L1500.31 1209.46 L1499.72 1209.46 L1499.14 1209.46 L1498.55 1209.46 L1497.96 1209.46 L1497.38 1209.46 L1496.79 1209.46 L1496.2 1209.46 L1495.62 1209.46 L1495.03 1209.46 L1494.45 1209.46 L1493.86 1209.46 L1493.27 1209.46 L1492.69 1209.46 L1492.1 1209.46 L1491.51 1209.46 L1490.93 1209.46 L1490.34 1209.46 L1489.75 1209.46 L1489.17 1209.46 L1488.58 1209.46 L1487.99 1209.46 L1487.41 1209.46 L1486.82 1209.46 L1486.24 1209.46 L1485.65 1209.46 L1485.06 1209.46 L1484.48 1209.46 L1483.89 1209.46 L1483.3 1209.46 L1482.72 1209.46 L1482.13 1209.46 L1481.54 1209.46 L1480.96 1209.46 L1480.37 1209.46 L1479.78 1209.46 L1479.2 1209.46 L1478.61 1209.46 L1478.03 1209.46 L1477.44 1209.46 L1476.85 1209.46 L1476.27 1209.46 L1475.68 1209.46 L1475.09 1209.46 L1474.51 1209.46 L1473.92 1209.46 L1473.33 1209.46 L1472.75 1209.46 L1472.16 1209.46 L1471.57 1209.46 L1470.99 1209.46 L1470.4 1209.46 L1469.82 1209.46 L1469.23 1209.46 L1468.64 1209.46 L1468.06 1209.46 L1467.47 1209.46 L1466.88 1209.46 L1466.3 1209.46 L1465.71 1209.46 L1465.12 1209.46 L1464.54 1209.46 L1463.95 1209.46 L1463.37 1209.46 L1462.78 1209.46 L1462.19 1209.46 L1461.61 1209.46 L1461.02 1209.46 L1460.43 1209.46 L1459.85 1209.46 L1459.26 1209.46 L1458.67 1209.46 L1458.09 1209.46 L1457.5 1209.46 L1456.91 1209.46 L1456.33 1209.46 L1455.74 1209.46 L1455.16 1209.46 L1454.57 1209.46 L1453.98 1209.46 L1453.4 1209.46 L1452.81 1209.46 L1452.22 1209.46 L1451.64 1209.46 L1451.05 1209.46 L1450.46 1209.46 L1449.88 1209.46 L1449.29 1209.46 L1448.7 1209.46 L1448.12 1209.46 L1447.53 1209.46 L1446.95 1209.46 L1446.36 1209.46 L1445.77 1209.46 L1445.19 1209.46 L1444.6 1209.46 L1444.01 1209.46 L1443.43 1209.46 L1442.84 1209.46 L1442.25 1209.46 L1441.67 1209.46 L1441.08 1209.46 L1440.5 1209.46 L1439.91 1209.46 L1439.32 1209.46 L1438.74 1209.46 L1438.15 1209.46 L1437.56 1209.46 L1436.98 1209.46 L1436.39 1209.46 L1435.8 1209.46 L1435.22 1209.46 L1434.63 1209.46 L1434.04 1209.46 L1433.46 1209.46 L1432.87 1209.46 L1432.29 1209.46 L1431.7 1209.46 L1431.11 1209.46 L1430.53 1209.46 L1429.94 1209.46 L1429.35 1209.46 L1428.77 1209.46 L1428.18 1209.46 L1427.59 1209.46 L1427.01 1209.46 L1426.42 1209.46 L1425.83 1209.46 L1425.25 1209.46 L1424.66 1209.46 L1424.08 1209.46 L1423.49 1209.46 L1422.9 1209.46 L1422.32 1209.46 L1421.73 1209.46 L1421.14 1209.46 L1420.56 1209.46 L1419.97 1209.46 L1419.38 1209.46 L1418.8 1209.46 L1418.21 1209.46 L1417.63 1209.46 L1417.04 1209.46 L1416.45 1209.46 L1415.87 1209.46 L1415.28 1209.46 L1414.69 1209.46 L1414.11 1209.46 L1413.52 1209.46 L1412.93 1209.46 L1412.35 1209.46 L1411.76 1209.46 L1411.17 1209.46 L1410.59 1209.46 L1410 1209.46 L1409.42 1209.46 L1408.83 1209.46 L1408.24 1209.46 L1407.66 1209.46 L1407.07 1209.46 L1406.48 1209.46 L1405.9 1209.46 L1405.31 1209.46 L1404.72 1209.46 L1404.14 1209.46 L1403.55 1209.46 L1402.96 1209.46 L1402.38 1209.46 L1401.79 1209.46 L1401.21 1209.46 L1400.62 1209.46 L1400.03 1209.46 L1399.45 1209.46 L1398.86 1209.46 L1398.27 1209.46 L1397.69 1209.46 L1397.1 1209.46 L1396.51 1209.46 L1395.93 1209.46 L1395.34 1209.46 L1394.75 1209.46 L1394.17 1209.46 L1393.58 1209.46 L1393 1209.46 L1392.41 1209.46 L1391.82 1209.46 L1391.24 1209.46 L1390.65 1209.46 L1390.06 1209.46 L1389.48 1209.46 L1388.89 1209.46 L1388.3 1209.46 L1387.72 1209.46 L1387.13 1209.46 L1386.55 1209.46 L1385.96 1209.46 L1385.37 1209.46 L1384.79 1209.46 L1384.2 1209.46 L1383.61 1209.46 L1383.03 1209.46 L1382.44 1209.46 L1381.85 1209.46 L1381.27 1209.46 L1380.68 1209.46 L1380.09 1209.46 L1379.51 1209.46 L1378.92 1209.46 L1378.34 1209.46 L1377.75 1209.46 L1377.16 1209.46 L1376.58 1209.46 L1375.99 1209.46 L1375.4 1209.46 L1374.82 1209.46 L1374.23 1209.46 L1373.64 1209.46 L1373.06 1209.46 L1372.47 1209.46 L1371.88 1209.46 L1371.3 1209.46 L1370.71 1209.46 L1370.13 1209.46 L1369.54 1209.46 L1368.95 1209.46 L1368.37 1209.46 L1367.78 1209.46 L1367.19 1209.46 L1366.61 1209.46 L1366.02 1209.46 L1365.43 1209.46 L1364.85 1209.46 L1364.26 1209.46 L1363.68 1209.46 L1363.09 1209.46 L1362.5 1209.46 L1361.92 1209.46 L1361.33 1209.46 L1360.74 1209.46 L1360.16 1209.46 L1359.57 1209.46 L1358.98 1209.46 L1358.4 1209.46 L1357.81 1209.46 L1357.22 1209.46 L1356.64 1209.46 L1356.05 1209.46 L1355.47 1209.46 L1354.88 1209.46 L1354.29 1209.46 L1353.71 1209.46 L1353.12 1209.46 L1352.53 1209.46 L1351.95 1209.46 L1351.36 1209.46 L1350.77 1209.46 L1350.19 1209.46 L1349.6 1209.46 L1349.01 1209.46 L1348.43 1209.46 L1347.84 1209.46 L1347.26 1209.46 L1346.67 1209.46 L1346.08 1209.46 L1345.5 1209.46 L1344.91 1209.46 L1344.32 1209.46 L1343.74 1209.46 L1343.15 1209.46 L1342.56 1209.46 L1341.98 1209.46 L1341.39 1209.46 L1340.8 1209.46 L1340.22 1209.46 L1339.63 1209.46 L1339.05 1209.46 L1338.46 1209.46 L1337.87 1209.46 L1337.29 1209.46 L1336.7 1209.46 L1336.11 1209.46 L1335.53 1209.46 L1334.94 1209.46 L1334.35 1209.46 L1333.77 1209.46 L1333.18 1209.46 L1332.6 1209.46 L1332.01 1209.46 L1331.42 1209.46 L1330.84 1209.46 L1330.25 1209.46 L1329.66 1209.46 L1329.08 1209.46 L1328.49 1209.46 L1327.9 1209.46 L1327.32 1209.46 L1326.73 1209.46 L1326.14 1209.46 L1325.56 1209.46 L1324.97 1209.46 L1324.39 1209.46 L1323.8 1209.46 L1323.21 1209.46 L1322.63 1209.46 L1322.04 1209.46 L1321.45 1209.46 L1320.87 1209.46 L1320.28 1209.46 L1319.69 1209.46 L1319.11 1209.46 L1318.52 1209.46 L1317.93 1209.46 L1317.35 1209.46 L1316.76 1209.46 L1316.18 1209.46 L1315.59 1209.46 L1315 1209.46 L1314.42 1209.46 L1313.83 1209.46 L1313.24 1209.46 L1312.66 1209.46 L1312.07 1209.46 L1311.48 1209.46 L1310.9 1209.46 L1310.31 1209.46 L1309.73 1209.46 L1309.14 1209.46 L1308.55 1209.46 L1307.97 1209.46 L1307.38 1209.46 L1306.79 1209.46 L1306.21 1209.46 L1305.62 1209.46 L1305.03 1209.46 L1304.45 1209.46 L1303.86 1209.46 L1303.27 1209.46 L1302.69 1209.46 L1302.1 1209.46 L1301.52 1209.46 L1300.93 1209.46 L1300.34 1209.46 L1299.76 1209.46 L1299.17 1209.46 L1298.58 1209.46 L1298 1209.46 L1297.41 1209.46 L1296.82 1209.46 L1296.24 1209.46 L1295.65 1209.46 L1295.06 1209.46 L1294.48 1209.46 L1293.89 1209.46 L1293.31 1209.46 L1292.72 1209.46 L1292.13 1209.46 L1291.55 1209.46 L1290.96 1209.46 L1290.37 1209.46 L1289.79 1209.46 L1289.2 1209.46 L1288.61 1209.46 L1288.03 1209.46 L1287.44 1209.46 L1286.86 1209.46 L1286.27 1209.46 L1285.68 1209.46 L1285.1 1209.46 L1284.51 1209.46 L1283.92 1209.46 L1283.34 1209.46 L1282.75 1209.46 L1282.16 1209.46 L1281.58 1209.46 L1280.99 1209.46 L1280.4 1209.46 L1279.82 1209.46 L1279.23 1209.46 L1278.65 1209.46 L1278.06 1209.46 L1277.47 1209.46 L1276.89 1209.46 L1276.3 1209.46 L1275.71 1209.46 L1275.13 1209.46 L1274.54 1209.46 L1273.95 1209.46 L1273.37 1209.46 L1272.78 1209.46 L1272.19 1209.46 L1271.61 1209.46 L1271.02 1209.46 L1270.44 1209.46 L1269.85 1209.46 L1269.26 1209.46 L1268.68 1209.46 L1268.09 1209.46 L1267.5 1209.46 L1266.92 1209.46 L1266.33 1209.46 L1265.74 1209.46 L1265.16 1209.46 L1264.57 1209.46 L1263.98 1209.46 L1263.4 1209.46 L1262.81 1209.46 L1262.23 1209.46 L1261.64 1209.46 L1261.05 1209.46 L1260.47 1209.46 L1259.88 1209.46 L1259.29 1209.46 L1258.71 1209.46 L1258.12 1209.46 L1257.53 1209.46 L1256.95 1209.46 L1256.36 1209.46 L1255.78 1209.46 L1255.19 1209.46 L1254.6 1209.46 L1254.02 1209.46 L1253.43 1209.46 L1252.84 1209.46 L1252.26 1209.46 L1251.67 1209.46 L1251.08 1209.46 L1250.5 1209.46 L1249.91 1209.46 L1249.32 1209.46 L1248.74 1209.46 L1248.15 1209.46 L1247.57 1209.46 L1246.98 1209.46 L1246.39 1209.46 L1245.81 1209.46 L1245.22 1209.46 L1244.63 1209.46 L1244.05 1209.46 L1243.46 1209.46 L1242.87 1209.46 L1242.29 1209.46 L1241.7 1209.46 L1241.11 1209.46 L1240.53 1209.46 L1239.94 1209.46 L1239.36 1209.46 L1238.77 1209.46 L1238.18 1209.46 L1237.6 1209.46 L1237.01 1209.46 L1236.42 1209.46 L1235.84 1209.46 L1235.25 1209.46 L1234.66 1209.46 L1234.08 1209.46 L1233.49 1209.46 L1232.91 1209.46 L1232.32 1209.46 L1231.73 1209.46 L1231.15 1209.46 L1230.56 1209.46 L1229.97 1209.46 L1229.39 1209.46 L1228.8 1209.46 L1228.21 1209.46 L1227.63 1209.46 L1227.04 1209.46 L1226.45 1209.46 L1225.87 1209.46 L1225.28 1209.46 L1224.7 1209.46 L1224.11 1209.46 L1223.52 1209.46 L1222.94 1209.46 L1222.35 1209.46 L1221.76 1209.46 L1221.18 1209.46 L1220.59 1209.46 L1220 1209.46 L1219.42 1209.46 L1218.83 1209.46 L1218.24 1209.46 L1217.66 1209.46 L1217.07 1209.46 L1216.49 1209.46 L1215.9 1209.46 L1215.31 1209.46 L1214.73 1209.46 L1214.14 1209.46 L1213.55 1209.46 L1212.97 1209.46 L1212.38 1209.46 L1211.79 1209.46 L1211.21 1209.46 L1210.62 1209.46 L1210.03 1209.46 L1209.45 1209.46 L1208.86 1209.46 L1208.28 1209.46 L1207.69 1209.46 L1207.1 1209.46 L1206.52 1209.46 L1205.93 1209.46 L1205.34 1209.46 L1204.76 1209.46 L1204.17 1209.46 L1203.58 1209.46 L1203 1209.46 L1202.41 1209.46 L1201.83 1209.46 L1201.24 1209.46 L1200.65 1209.46 L1200.07 1209.46 L1199.48 1209.46 L1198.89 1209.46 L1198.31 1209.46 L1197.72 1209.46 L1197.13 1209.46 L1196.55 1209.46 L1195.96 1209.46 L1195.37 1209.46 L1194.79 1209.46 L1194.2 1209.46 L1193.62 1209.46 L1193.03 1209.46 L1192.44 1209.46 L1191.86 1209.46 L1191.27 1209.46 L1190.68 1209.46 L1190.1 1209.46 L1189.51 1209.46 L1188.92 1209.46 L1188.34 1209.46 L1187.75 1209.46 L1187.16 1209.46 L1186.58 1209.46 L1185.99 1209.46 L1185.41 1209.46 L1184.82 1209.46 L1184.23 1209.46 L1183.65 1209.46 L1183.06 1209.46 L1182.47 1209.46 L1181.89 1209.46 L1181.3 1209.46 L1180.71 1209.46 L1180.13 1209.46 L1179.54 1209.46 L1178.96 1209.46 L1178.37 1209.46 L1177.78 1209.46 L1177.2 1209.46 L1176.61 1209.46 L1176.02 1209.46 L1175.44 1209.46 L1174.85 1209.46 L1174.26 1209.46 L1173.68 1209.46 L1173.09 1209.46 L1172.5 1209.46 L1171.92 1209.46 L1171.33 1209.46 L1170.75 1209.46 L1170.16 1209.46 L1169.57 1209.46 L1168.99 1209.46 L1168.4 1209.46 L1167.81 1209.46 L1167.23 1209.46 L1166.64 1209.46 L1166.05 1209.46 L1165.47 1209.46 L1164.88 1209.46 L1164.29 1209.46 L1163.71 1209.46 L1163.12 1209.46 L1162.54 1209.46 L1161.95 1209.46 L1161.36 1209.46 L1160.78 1209.46 L1160.19 1209.46 L1159.6 1209.46 L1159.02 1209.46 L1158.43 1209.46 L1157.84 1209.46 L1157.26 1209.46 L1156.67 1209.46 L1156.09 1209.46 L1155.5 1209.46 L1154.91 1209.46 L1154.33 1209.46 L1153.74 1209.46 L1153.15 1209.46 L1152.57 1209.46 L1151.98 1209.46 L1151.39 1209.46 L1150.81 1209.46 L1150.22 1209.46 L1149.63 1209.46 L1149.05 1209.46 L1148.46 1209.46 L1147.88 1209.46 L1147.29 1209.46 L1146.7 1209.46 L1146.12 1209.46 L1145.53 1209.46 L1144.94 1209.46 L1144.36 1209.46 L1143.77 1209.46 L1143.18 1209.46 L1142.6 1209.46 L1142.01 1209.46 L1141.42 1209.46 L1140.84 1209.46 L1140.25 1209.46 L1139.67 1209.46 L1139.08 1209.46 L1138.49 1209.46 L1137.91 1209.46 L1137.32 1209.46 L1136.73 1209.46 L1136.15 1209.46 L1135.56 1209.46 L1134.97 1209.46 L1134.39 1209.46 L1133.8 1209.46 L1133.21 1209.46 L1132.63 1209.46 L1132.04 1209.46 L1131.46 1209.46 L1130.87 1209.46 L1130.28 1209.46 L1129.7 1209.46 L1129.11 1209.46 L1128.52 1209.46 L1127.94 1209.46 L1127.35 1209.46 L1126.76 1209.46 L1126.18 1209.46 L1125.59 1209.46 L1125.01 1209.46 L1124.42 1209.46 L1123.83 1209.46 L1123.25 1209.46 L1122.66 1209.46 L1122.07 1209.46 L1121.49 1209.46 L1120.9 1209.46 L1120.31 1209.46 L1119.73 1209.46 L1119.14 1209.46 L1118.55 1209.46 L1117.97 1209.46 L1117.38 1209.46 L1116.8 1209.46 L1116.21 1209.46 L1115.62 1209.46 L1115.04 1209.46 L1114.45 1209.46 L1113.86 1209.46 L1113.28 1209.46 L1112.69 1209.46 L1112.1 1209.46 L1111.52 1209.46 L1110.93 1209.46 L1110.34 1209.46 L1109.76 1209.46 L1109.17 1209.46 L1108.59 1209.46 L1108 1209.46 L1107.41 1209.46 L1106.83 1209.46 L1106.24 1209.46 L1105.65 1209.46 L1105.07 1209.46 L1104.48 1209.46 L1103.89 1209.46 L1103.31 1209.46 L1102.72 1209.46 L1102.14 1209.46 L1101.55 1209.46 L1100.96 1209.46 L1100.38 1209.46 L1099.79 1209.46 L1099.2 1209.46 L1098.62 1209.46 L1098.03 1209.46 L1097.44 1209.46 L1096.86 1209.46 L1096.27 1209.46 L1095.68 1209.46 L1095.1 1209.46 L1094.51 1209.46 L1093.93 1209.46 L1093.34 1209.46 L1092.75 1209.46 L1092.17 1209.46 L1091.58 1209.46 L1090.99 1209.46 L1090.41 1209.46 L1089.82 1209.46 L1089.23 1209.46 L1088.65 1209.46 L1088.06 1209.46 L1087.47 1209.46 L1086.89 1209.46 L1086.3 1209.46 L1085.72 1209.46 L1085.13 1209.46 L1084.54 1209.46 L1083.96 1209.46 L1083.37 1209.46 L1082.78 1209.46 L1082.2 1209.46 L1081.61 1209.46 L1081.02 1209.46 L1080.44 1209.46 L1079.85 1209.46 L1079.26 1209.46 L1078.68 1209.46 L1078.09 1209.46 L1077.51 1209.46 L1076.92 1209.46 L1076.33 1209.46 L1075.75 1209.46 L1075.16 1209.46 L1074.57 1209.46 L1073.99 1209.46 L1073.4 1209.46 L1072.81 1209.46 L1072.23 1209.46 L1071.64 1209.46 L1071.06 1209.46 L1070.47 1209.46 L1069.88 1209.46 L1069.3 1209.46 L1068.71 1209.46 L1068.12 1209.46 L1067.54 1209.46 L1066.95 1209.46 L1066.36 1209.46 L1065.78 1209.46 L1065.19 1209.46 L1064.6 1209.46 L1064.02 1209.46 L1063.43 1209.46 L1062.85 1209.46 L1062.26 1209.46 L1061.67 1209.46 L1061.09 1209.46 L1060.5 1209.46 L1059.91 1209.46 L1059.33 1209.46 L1058.74 1209.46 L1058.15 1209.46 L1057.57 1209.46 L1056.98 1209.46 L1056.39 1209.46 L1055.81 1209.46 L1055.22 1209.46 L1054.64 1209.46 L1054.05 1209.46 L1053.46 1209.46 L1052.88 1209.46 L1052.29 1209.46 L1051.7 1209.46 L1051.12 1209.46 L1050.53 1209.46 L1049.94 1209.46 L1049.36 1209.46 L1048.77 1209.46 L1048.19 1209.46 L1047.6 1209.46 L1047.01 1209.46 L1046.43 1209.46 L1045.84 1209.46 L1045.25 1209.46 L1044.67 1209.46 L1044.08 1209.46 L1043.49 1209.46 L1042.91 1209.46 L1042.32 1209.46 L1041.73 1209.46 L1041.15 1209.46 L1040.56 1209.46 L1039.98 1209.46 L1039.39 1209.46 L1038.8 1209.46 L1038.22 1209.46 L1037.63 1209.46 L1037.04 1209.46 L1036.46 1209.46 L1035.87 1209.46 L1035.28 1209.46 L1034.7 1209.46 L1034.11 1209.46 L1033.52 1209.46 L1032.94 1209.46 L1032.35 1209.46 L1031.77 1209.46 L1031.18 1209.46 L1030.59 1209.46 L1030.01 1209.46 L1029.42 1209.46 L1028.83 1209.46 L1028.25 1209.46 L1027.66 1209.46 L1027.07 1209.46 L1026.49 1209.46 L1025.9 1209.46 L1025.32 1209.46 L1024.73 1209.46 L1024.14 1209.46 L1023.56 1209.46 L1022.97 1209.46 L1022.38 1209.46 L1021.8 1209.46 L1021.21 1209.46 L1020.62 1209.46 L1020.04 1209.46 L1019.45 1209.46 L1018.86 1209.46 L1018.28 1209.46 L1017.69 1209.46 L1017.11 1209.46 L1016.52 1209.46 L1015.93 1209.46 L1015.35 1209.46 L1014.76 1209.46 L1014.17 1209.46 L1013.59 1209.46 L1013 1209.46 L1012.41 1209.46 L1011.83 1209.46 L1011.24 1209.46 L1010.65 1209.46 L1010.07 1209.46 L1009.48 1209.46 L1008.9 1209.46 L1008.31 1209.46 L1007.72 1209.46 L1007.14 1209.46 L1006.55 1209.46 L1005.96 1209.46 L1005.38 1209.46 L1004.79 1209.46 L1004.2 1209.46 L1003.62 1209.46 L1003.03 1209.46 L1002.44 1209.46 L1001.86 1209.46 L1001.27 1209.46 L1000.69 1209.46 L1000.1 1209.46 L999.513 1209.46 L998.926 1209.46 L998.34 1209.46 L997.754 1209.46 L997.167 1209.46 L996.581 1209.46 L995.994 1209.46 L995.408 1209.46 L994.822 1209.46 L994.235 1209.46 L993.649 1209.46 L993.062 1209.46 L992.476 1209.46 L991.889 1209.46 L991.303 1209.46 L990.717 1209.46 L990.13 1209.46 L989.544 1209.46 L988.957 1209.46 L988.371 1209.46 L987.785 1209.46 L987.198 1209.46 L986.612 1209.46 L986.025 1209.46  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.55 986.612,1209.55 987.198,1209.55 987.785,1209.55 988.371,1209.55 988.957,1209.55 989.544,1209.55 990.13,1209.55 990.717,1209.55 991.303,1209.55 991.889,1209.55 992.476,1209.55 993.062,1209.55 993.649,1209.55 994.235,1209.55 994.822,1209.55 995.408,1209.55 995.994,1209.55 996.581,1209.55 997.167,1209.55 997.754,1209.55 998.34,1209.55 998.926,1209.55 999.513,1209.55 1000.1,1209.55 1000.69,1209.55 1001.27,1209.55 1001.86,1209.55 1002.44,1209.55 1003.03,1209.55 1003.62,1209.55 1004.2,1209.55 1004.79,1209.55 1005.38,1209.55 1005.96,1209.55 1006.55,1209.55 1007.14,1209.55 1007.72,1209.55 1008.31,1209.55 1008.9,1209.55 1009.48,1209.55 1010.07,1209.55 1010.65,1209.55 1011.24,1209.55 1011.83,1209.55 1012.41,1209.55 1013,1209.55 1013.59,1209.55 1014.17,1209.55 1014.76,1209.55 1015.35,1209.55 1015.93,1209.55 1016.52,1209.55 1017.11,1209.55 1017.69,1209.55 1018.28,1209.55 1018.86,1209.55 1019.45,1209.55 1020.04,1209.55 1020.62,1209.55 1021.21,1209.55 1021.8,1209.55 1022.38,1209.55 1022.97,1209.55 1023.56,1209.55 1024.14,1209.55 1024.73,1209.55 1025.32,1209.55 1025.9,1209.55 1026.49,1209.55 1027.07,1209.55 1027.66,1209.55 1028.25,1209.55 1028.83,1209.55 1029.42,1209.55 1030.01,1209.55 1030.59,1209.55 1031.18,1209.55 1031.77,1209.55 1032.35,1209.55 1032.94,1209.55 1033.52,1209.55 1034.11,1209.55 1034.7,1209.55 1035.28,1209.55 1035.87,1209.55 1036.46,1209.55 1037.04,1209.55 1037.63,1209.55 1038.22,1209.55 1038.8,1209.55 1039.39,1209.55 1039.98,1209.55 1040.56,1209.55 1041.15,1209.55 1041.73,1209.55 1042.32,1209.55 1042.91,1209.55 1043.49,1209.55 1044.08,1209.55 1044.67,1209.55 1045.25,1209.55 1045.84,1209.55 1046.43,1209.55 1047.01,1209.55 1047.6,1209.55 1048.19,1209.55 1048.77,1209.55 1049.36,1209.55 1049.94,1209.55 1050.53,1209.55 1051.12,1209.55 1051.7,1209.55 1052.29,1209.55 1052.88,1209.55 1053.46,1209.55 1054.05,1209.55 1054.64,1209.55 1055.22,1209.55 1055.81,1209.55 1056.39,1209.55 1056.98,1209.55 1057.57,1209.55 1058.15,1209.55 1058.74,1209.55 1059.33,1209.55 1059.91,1209.55 1060.5,1209.55 1061.09,1209.55 1061.67,1209.55 1062.26,1209.55 1062.85,1209.55 1063.43,1209.55 1064.02,1209.55 1064.6,1209.55 1065.19,1209.55 1065.78,1209.55 1066.36,1209.55 1066.95,1209.55 1067.54,1209.55 1068.12,1209.55 1068.71,1209.55 1069.3,1209.55 1069.88,1209.55 1070.47,1209.55 1071.06,1209.55 1071.64,1209.55 1072.23,1209.55 1072.81,1209.55 1073.4,1209.55 1073.99,1209.55 1074.57,1209.55 1075.16,1209.55 1075.75,1209.55 1076.33,1209.55 1076.92,1209.55 1077.51,1209.55 1078.09,1209.55 1078.68,1209.55 1079.26,1209.55 1079.85,1209.55 1080.44,1209.55 1081.02,1209.55 1081.61,1209.55 1082.2,1209.55 1082.78,1209.55 1083.37,1209.55 1083.96,1209.55 1084.54,1209.55 1085.13,1209.55 1085.72,1209.55 1086.3,1209.55 1086.89,1209.55 1087.47,1209.55 1088.06,1209.55 1088.65,1209.55 1089.23,1209.55 1089.82,1209.55 1090.41,1209.55 1090.99,1209.55 1091.58,1209.55 1092.17,1209.55 1092.75,1209.55 1093.34,1209.55 1093.93,1209.55 1094.51,1209.55 1095.1,1209.55 1095.68,1209.55 1096.27,1209.55 1096.86,1209.55 1097.44,1209.55 1098.03,1209.55 1098.62,1209.55 1099.2,1209.55 1099.79,1209.55 1100.38,1209.55 1100.96,1209.55 1101.55,1209.55 1102.14,1209.55 1102.72,1209.55 1103.31,1209.55 1103.89,1209.55 1104.48,1209.55 1105.07,1209.55 1105.65,1209.55 1106.24,1209.55 1106.83,1209.55 1107.41,1209.55 1108,1209.55 1108.59,1209.55 1109.17,1209.55 1109.76,1209.55 1110.34,1209.55 1110.93,1209.55 1111.52,1209.55 1112.1,1209.55 1112.69,1209.55 1113.28,1209.55 1113.86,1209.55 1114.45,1209.55 1115.04,1209.55 1115.62,1209.55 1116.21,1209.55 1116.8,1209.55 1117.38,1209.55 1117.97,1209.55 1118.55,1209.55 1119.14,1209.55 1119.73,1209.55 1120.31,1209.55 1120.9,1209.55 1121.49,1209.55 1122.07,1209.55 1122.66,1209.55 1123.25,1209.55 1123.83,1209.55 1124.42,1209.55 1125.01,1209.55 1125.59,1209.55 1126.18,1209.55 1126.76,1209.55 1127.35,1209.55 1127.94,1209.55 1128.52,1209.55 1129.11,1209.55 1129.7,1209.55 1130.28,1209.55 1130.87,1209.55 1131.46,1209.55 1132.04,1209.55 1132.63,1209.55 1133.21,1209.55 1133.8,1209.55 1134.39,1209.55 1134.97,1209.55 1135.56,1209.55 1136.15,1209.55 1136.73,1209.55 1137.32,1209.55 1137.91,1209.55 1138.49,1209.55 1139.08,1209.55 1139.67,1209.55 1140.25,1209.55 1140.84,1209.55 1141.42,1209.55 1142.01,1209.55 1142.6,1209.55 1143.18,1209.55 1143.77,1209.55 1144.36,1209.55 1144.94,1209.55 1145.53,1209.55 1146.12,1209.55 1146.7,1209.55 1147.29,1209.55 1147.88,1209.55 1148.46,1209.55 1149.05,1209.55 1149.63,1209.55 1150.22,1209.55 1150.81,1209.55 1151.39,1209.55 1151.98,1209.55 1152.57,1209.55 1153.15,1209.55 1153.74,1209.55 1154.33,1209.55 1154.91,1209.55 1155.5,1209.55 1156.09,1209.55 1156.67,1209.55 1157.26,1209.55 1157.84,1209.55 1158.43,1209.55 1159.02,1209.55 1159.6,1209.55 1160.19,1209.55 1160.78,1209.55 1161.36,1209.55 1161.95,1209.55 1162.54,1209.55 1163.12,1209.55 1163.71,1209.55 1164.29,1209.55 1164.88,1209.55 1165.47,1209.55 1166.05,1209.55 1166.64,1209.55 1167.23,1209.55 1167.81,1209.55 1168.4,1209.55 1168.99,1209.55 1169.57,1209.55 1170.16,1209.55 1170.75,1209.55 1171.33,1209.55 1171.92,1209.55 1172.5,1209.55 1173.09,1209.55 1173.68,1209.55 1174.26,1209.55 1174.85,1209.55 1175.44,1209.55 1176.02,1209.55 1176.61,1209.55 1177.2,1209.55 1177.78,1209.55 1178.37,1209.55 1178.96,1209.55 1179.54,1209.55 1180.13,1209.55 1180.71,1209.55 1181.3,1209.55 1181.89,1209.55 1182.47,1209.55 1183.06,1209.55 1183.65,1209.55 1184.23,1209.55 1184.82,1209.55 1185.41,1209.55 1185.99,1209.55 1186.58,1209.55 1187.16,1209.55 1187.75,1209.55 1188.34,1209.55 1188.92,1209.55 1189.51,1209.55 1190.1,1209.55 1190.68,1209.55 1191.27,1209.55 1191.86,1209.55 1192.44,1209.55 1193.03,1209.55 1193.62,1209.55 1194.2,1209.55 1194.79,1209.55 1195.37,1209.55 1195.96,1209.55 1196.55,1209.55 1197.13,1209.55 1197.72,1209.55 1198.31,1209.55 1198.89,1209.55 1199.48,1209.55 1200.07,1209.55 1200.65,1209.55 1201.24,1209.55 1201.83,1209.55 1202.41,1209.55 1203,1209.55 1203.58,1209.55 1204.17,1209.55 1204.76,1209.55 1205.34,1209.55 1205.93,1209.55 1206.52,1209.55 1207.1,1209.55 1207.69,1209.55 1208.28,1209.55 1208.86,1209.55 1209.45,1209.55 1210.03,1209.55 1210.62,1209.55 1211.21,1209.55 1211.79,1209.55 1212.38,1209.55 1212.97,1209.55 1213.55,1209.55 1214.14,1209.55 1214.73,1209.55 1215.31,1209.55 1215.9,1209.55 1216.49,1209.55 1217.07,1209.55 1217.66,1209.55 1218.24,1209.55 1218.83,1209.55 1219.42,1209.55 1220,1209.55 1220.59,1209.55 1221.18,1209.55 1221.76,1209.55 1222.35,1209.55 1222.94,1209.55 1223.52,1209.55 1224.11,1209.55 1224.7,1209.55 1225.28,1209.55 1225.87,1209.55 1226.45,1209.55 1227.04,1209.55 1227.63,1209.55 1228.21,1209.55 1228.8,1209.55 1229.39,1209.55 1229.97,1209.55 1230.56,1209.55 1231.15,1209.55 1231.73,1209.55 1232.32,1209.55 1232.91,1209.55 1233.49,1209.55 1234.08,1209.55 1234.66,1209.55 1235.25,1209.55 1235.84,1209.55 1236.42,1209.55 1237.01,1209.55 1237.6,1209.55 1238.18,1209.55 1238.77,1209.55 1239.36,1209.55 1239.94,1209.55 1240.53,1209.55 1241.11,1209.55 1241.7,1209.55 1242.29,1209.55 1242.87,1209.55 1243.46,1209.55 1244.05,1209.55 1244.63,1209.55 1245.22,1209.55 1245.81,1209.55 1246.39,1209.55 1246.98,1209.55 1247.57,1209.55 1248.15,1209.55 1248.74,1209.55 1249.32,1209.55 1249.91,1209.55 1250.5,1209.55 1251.08,1209.55 1251.67,1209.55 1252.26,1209.55 1252.84,1209.55 1253.43,1209.55 1254.02,1209.55 1254.6,1209.55 1255.19,1209.55 1255.78,1209.55 1256.36,1209.55 1256.95,1209.55 1257.53,1209.55 1258.12,1209.55 1258.71,1209.55 1259.29,1209.55 1259.88,1209.55 1260.47,1209.55 1261.05,1209.55 1261.64,1209.55 1262.23,1209.55 1262.81,1209.55 1263.4,1209.55 1263.98,1209.55 1264.57,1209.55 1265.16,1209.55 1265.74,1209.55 1266.33,1209.55 1266.92,1209.55 1267.5,1209.55 1268.09,1209.55 1268.68,1209.55 1269.26,1209.55 1269.85,1209.55 1270.44,1209.55 1271.02,1209.55 1271.61,1209.55 1272.19,1209.55 1272.78,1209.55 1273.37,1209.55 1273.95,1209.55 1274.54,1209.55 1275.13,1209.55 1275.71,1209.55 1276.3,1209.55 1276.89,1209.55 1277.47,1209.55 1278.06,1209.55 1278.65,1209.55 1279.23,1209.55 1279.82,1209.55 1280.4,1209.55 1280.99,1209.55 1281.58,1209.55 1282.16,1209.55 1282.75,1209.55 1283.34,1209.55 1283.92,1209.55 1284.51,1209.55 1285.1,1209.55 1285.68,1209.55 1286.27,1209.55 1286.86,1209.55 1287.44,1209.55 1288.03,1209.55 1288.61,1209.55 1289.2,1209.55 1289.79,1209.55 1290.37,1209.55 1290.96,1209.55 1291.55,1209.55 1292.13,1209.55 1292.72,1209.55 1293.31,1209.55 1293.89,1209.55 1294.48,1209.55 1295.06,1209.55 1295.65,1209.55 1296.24,1209.55 1296.82,1209.55 1297.41,1209.55 1298,1209.55 1298.58,1209.55 1299.17,1209.55 1299.76,1209.55 1300.34,1209.55 1300.93,1209.55 1301.52,1209.55 1302.1,1209.55 1302.69,1209.55 1303.27,1209.55 1303.86,1209.55 1304.45,1209.55 1305.03,1209.55 1305.62,1209.55 1306.21,1209.55 1306.79,1209.55 1307.38,1209.55 1307.97,1209.55 1308.55,1209.55 1309.14,1209.55 1309.73,1209.55 1310.31,1209.55 1310.9,1209.55 1311.48,1209.55 1312.07,1209.55 1312.66,1209.55 1313.24,1209.55 1313.83,1209.55 1314.42,1209.55 1315,1209.55 1315.59,1209.55 1316.18,1209.55 1316.76,1209.55 1317.35,1209.55 1317.93,1209.55 1318.52,1209.55 1319.11,1209.55 1319.69,1209.55 1320.28,1209.55 1320.87,1209.55 1321.45,1209.55 1322.04,1209.55 1322.63,1209.55 1323.21,1209.55 1323.8,1209.55 1324.39,1209.55 1324.97,1209.55 1325.56,1209.55 1326.14,1209.55 1326.73,1209.55 1327.32,1209.55 1327.9,1209.55 1328.49,1209.55 1329.08,1209.55 1329.66,1209.55 1330.25,1209.55 1330.84,1209.55 1331.42,1209.55 1332.01,1209.55 1332.6,1209.55 1333.18,1209.55 1333.77,1209.55 1334.35,1209.55 1334.94,1209.55 1335.53,1209.55 1336.11,1209.55 1336.7,1209.55 1337.29,1209.55 1337.87,1209.55 1338.46,1209.55 1339.05,1209.55 1339.63,1209.55 1340.22,1209.55 1340.8,1209.55 1341.39,1209.55 1341.98,1209.55 1342.56,1209.55 1343.15,1209.55 1343.74,1209.55 1344.32,1209.55 1344.91,1209.55 1345.5,1209.55 1346.08,1209.55 1346.67,1209.55 1347.26,1209.55 1347.84,1209.55 1348.43,1209.55 1349.01,1209.55 1349.6,1209.55 1350.19,1209.55 1350.77,1209.55 1351.36,1209.55 1351.95,1209.55 1352.53,1209.55 1353.12,1209.55 1353.71,1209.55 1354.29,1209.55 1354.88,1209.55 1355.47,1209.55 1356.05,1209.55 1356.64,1209.55 1357.22,1209.55 1357.81,1209.55 1358.4,1209.55 1358.98,1209.55 1359.57,1209.55 1360.16,1209.55 1360.74,1209.55 1361.33,1209.55 1361.92,1209.55 1362.5,1209.55 1363.09,1209.55 1363.68,1209.55 1364.26,1209.55 1364.85,1209.55 1365.43,1209.55 1366.02,1209.55 1366.61,1209.55 1367.19,1209.55 1367.78,1209.55 1368.37,1209.55 1368.95,1209.55 1369.54,1209.55 1370.13,1209.55 1370.71,1209.55 1371.3,1209.55 1371.88,1209.55 1372.47,1209.55 1373.06,1209.55 1373.64,1209.55 1374.23,1209.55 1374.82,1209.55 1375.4,1209.55 1375.99,1209.55 1376.58,1209.55 1377.16,1209.55 1377.75,1209.55 1378.34,1209.55 1378.92,1209.55 1379.51,1209.55 1380.09,1209.55 1380.68,1209.55 1381.27,1209.55 1381.85,1209.55 1382.44,1209.55 1383.03,1209.55 1383.61,1209.55 1384.2,1209.55 1384.79,1209.55 1385.37,1209.55 1385.96,1209.55 1386.55,1209.55 1387.13,1209.55 1387.72,1209.55 1388.3,1209.55 1388.89,1209.55 1389.48,1209.55 1390.06,1209.55 1390.65,1209.55 1391.24,1209.55 1391.82,1209.55 1392.41,1209.55 1393,1209.55 1393.58,1209.55 1394.17,1209.55 1394.75,1209.55 1395.34,1209.55 1395.93,1209.55 1396.51,1209.55 1397.1,1209.55 1397.69,1209.55 1398.27,1209.55 1398.86,1209.55 1399.45,1209.55 1400.03,1209.55 1400.62,1209.55 1401.21,1209.55 1401.79,1209.55 1402.38,1209.55 1402.96,1209.55 1403.55,1209.55 1404.14,1209.55 1404.72,1209.55 1405.31,1209.55 1405.9,1209.55 1406.48,1209.55 1407.07,1209.55 1407.66,1209.55 1408.24,1209.55 1408.83,1209.55 1409.42,1209.55 1410,1209.55 1410.59,1209.55 1411.17,1209.55 1411.76,1209.55 1412.35,1209.55 1412.93,1209.55 1413.52,1209.55 1414.11,1209.55 1414.69,1209.55 1415.28,1209.55 1415.87,1209.55 1416.45,1209.55 1417.04,1209.55 1417.63,1209.55 1418.21,1209.55 1418.8,1209.55 1419.38,1209.55 1419.97,1209.55 1420.56,1209.55 1421.14,1209.55 1421.73,1209.55 1422.32,1209.55 1422.9,1209.55 1423.49,1209.55 1424.08,1209.55 1424.66,1209.55 1425.25,1209.55 1425.83,1209.55 1426.42,1209.55 1427.01,1209.55 1427.59,1209.55 1428.18,1209.55 1428.77,1209.55 1429.35,1209.55 1429.94,1209.55 1430.53,1209.55 1431.11,1209.55 1431.7,1209.55 1432.29,1209.55 1432.87,1209.55 1433.46,1209.55 1434.04,1209.55 1434.63,1209.55 1435.22,1209.55 1435.8,1209.55 1436.39,1209.55 1436.98,1209.55 1437.56,1209.55 1438.15,1209.55 1438.74,1209.55 1439.32,1209.55 1439.91,1209.55 1440.5,1209.55 1441.08,1209.55 1441.67,1209.55 1442.25,1209.55 1442.84,1209.55 1443.43,1209.55 1444.01,1209.55 1444.6,1209.55 1445.19,1209.55 1445.77,1209.55 1446.36,1209.55 1446.95,1209.55 1447.53,1209.55 1448.12,1209.55 1448.7,1209.55 1449.29,1209.55 1449.88,1209.55 1450.46,1209.55 1451.05,1209.55 1451.64,1209.55 1452.22,1209.55 1452.81,1209.55 1453.4,1209.55 1453.98,1209.55 1454.57,1209.55 1455.16,1209.55 1455.74,1209.55 1456.33,1209.55 1456.91,1209.55 1457.5,1209.55 1458.09,1209.55 1458.67,1209.55 1459.26,1209.55 1459.85,1209.55 1460.43,1209.55 1461.02,1209.55 1461.61,1209.55 1462.19,1209.55 1462.78,1209.55 1463.37,1209.55 1463.95,1209.55 1464.54,1209.55 1465.12,1209.55 1465.71,1209.55 1466.3,1209.55 1466.88,1209.55 1467.47,1209.55 1468.06,1209.55 1468.64,1209.55 1469.23,1209.55 1469.82,1209.55 1470.4,1209.55 1470.99,1209.55 1471.57,1209.55 1472.16,1209.55 1472.75,1209.55 1473.33,1209.55 1473.92,1209.55 1474.51,1209.55 1475.09,1209.55 1475.68,1209.55 1476.27,1209.55 1476.85,1209.55 1477.44,1209.55 1478.03,1209.55 1478.61,1209.55 1479.2,1209.55 1479.78,1209.55 1480.37,1209.55 1480.96,1209.55 1481.54,1209.55 1482.13,1209.55 1482.72,1209.55 1483.3,1209.55 1483.89,1209.55 1484.48,1209.55 1485.06,1209.55 1485.65,1209.55 1486.24,1209.55 1486.82,1209.55 1487.41,1209.55 1487.99,1209.55 1488.58,1209.55 1489.17,1209.55 1489.75,1209.55 1490.34,1209.55 1490.93,1209.55 1491.51,1209.55 1492.1,1209.55 1492.69,1209.55 1493.27,1209.55 1493.86,1209.55 1494.45,1209.55 1495.03,1209.55 1495.62,1209.55 1496.2,1209.55 1496.79,1209.55 1497.38,1209.55 1497.96,1209.55 1498.55,1209.55 1499.14,1209.55 1499.72,1209.55 1500.31,1209.55 1500.9,1209.55 1501.48,1209.55 1502.07,1209.55 1502.65,1209.55 1503.24,1209.55 1503.83,1209.55 1504.41,1209.55 1505,1209.55 1505.59,1209.55 1506.17,1209.55 1506.76,1209.55 1507.35,1209.55 1507.93,1209.55 1508.52,1209.55 1509.11,1209.55 1509.69,1209.55 1510.28,1209.55 1510.86,1209.55 1511.45,1209.55 1512.04,1209.55 1512.62,1209.55 1513.21,1209.55 1513.8,1209.55 1514.38,1209.55 1514.97,1209.55 1515.56,1209.55 1516.14,1209.55 1516.73,1209.55 1517.32,1209.55 1517.9,1209.55 1518.49,1209.55 1519.07,1209.55 1519.66,1209.55 1520.25,1209.55 1520.83,1209.55 1521.42,1209.55 1522.01,1209.55 1522.59,1209.55 1523.18,1209.55 1523.77,1209.55 1524.35,1209.55 1524.94,1209.55 1525.52,1209.55 1526.11,1209.55 1526.7,1209.55 1527.28,1209.55 1527.87,1209.55 1528.46,1209.55 1529.04,1209.55 1529.63,1209.55 1530.22,1209.55 1530.8,1209.55 1531.39,1209.55 1531.98,1209.55 1532.56,1209.55 1533.15,1209.55 1533.73,1209.55 1534.32,1209.55 1534.91,1209.55 1535.49,1209.55 1536.08,1209.55 1536.67,1209.55 1537.25,1209.55 1537.84,1209.55 1538.43,1209.55 1539.01,1209.55 1539.6,1209.55 1540.19,1209.55 1540.77,1209.55 1541.36,1209.55 1541.94,1209.55 1542.53,1209.55 1543.12,1209.55 1543.7,1209.55 1544.29,1209.55 1544.88,1209.55 1545.46,1209.55 1546.05,1209.55 1546.64,1209.55 1547.22,1209.55 1547.81,1209.55 1548.4,1209.55 1548.98,1209.55 1549.57,1209.55 1550.15,1209.55 1550.74,1209.55 1551.33,1209.55 1551.91,1209.55 1552.5,1209.55 1553.09,1209.55 1553.67,1209.55 1554.26,1209.55 1554.85,1209.55 1555.43,1209.55 1556.02,1209.55 1556.6,1209.55 1557.19,1209.55 1557.78,1209.55 1558.36,1209.55 1558.95,1209.55 1559.54,1209.55 1560.12,1209.55 1560.71,1209.55 1561.3,1209.55 1561.88,1209.55 1562.47,1209.55 1563.06,1209.55 1563.64,1209.55 1564.23,1209.55 1564.81,1209.55 1565.4,1209.55 1565.99,1209.55 1566.57,1209.55 1567.16,1209.55 1567.75,1209.55 1568.33,1209.55 1568.92,1209.55 1569.51,1209.55 1570.09,1209.55 1570.68,1209.55 1571.27,1209.55 1571.85,1209.55 1572.44,1209.55 1573.02,1209.55 1573.61,1209.55 1574.2,1209.55 1574.78,1209.55 1575.37,1209.55 1575.96,1209.55 1576.54,1209.55 1577.13,1209.55 1577.72,1209.55 1578.3,1209.55 1578.89,1209.55 1579.47,1209.55 1580.06,1209.55 1580.65,1209.55 1581.23,1209.55 1581.82,1209.55 1582.41,1209.55 1582.99,1209.55 1583.58,1209.55 1584.17,1209.55 1584.75,1209.55 1585.34,1209.55 1585.93,1209.55 1586.51,1209.55 1587.1,1209.55 1587.68,1209.55 1588.27,1209.55 1588.86,1209.55 1589.44,1209.55 1590.03,1209.55 1590.62,1209.55 1591.2,1209.55 1591.79,1209.55 1592.38,1209.55 1592.96,1209.55 1593.55,1209.55 1594.14,1209.55 1594.72,1209.55 1595.31,1209.55 1595.89,1209.55 1596.48,1209.55 1597.07,1209.55 1597.65,1209.55 1598.24,1209.55 1598.83,1209.55 1599.41,1209.55 1600,1209.55 1600.59,1209.55 1601.17,1209.55 1601.76,1209.55 1602.34,1209.55 1602.93,1209.55 1603.52,1209.55 1604.1,1209.55 1604.69,1209.55 1605.28,1209.55 1605.86,1209.55 1606.45,1209.55 1607.04,1209.55 1607.62,1209.55 1608.21,1209.55 1608.8,1209.55 1609.38,1209.55 1609.97,1209.55 1610.55,1209.55 1611.14,1209.55 1611.73,1209.55 1612.31,1209.55 1612.9,1209.55 1613.49,1209.55 1614.07,1209.55 1614.66,1209.55 1615.25,1209.55 1615.83,1209.55 1616.42,1209.55 1617.01,1209.55 1617.59,1209.55 1618.18,1209.55 1618.76,1209.55 1619.35,1209.55 1619.94,1209.55 1620.52,1209.55 1621.11,1209.55 1621.7,1209.55 1622.28,1209.55 1622.87,1209.55 1623.46,1209.55 1624.04,1209.55 1624.63,1209.55 1625.22,1209.55 1625.8,1209.55 1626.39,1209.55 1626.97,1209.55 1627.56,1209.55 1628.15,1209.55 1628.73,1209.55 1629.32,1209.55 1629.91,1209.55 1630.49,1209.55 1631.08,1209.55 1631.67,1209.55 1632.25,1209.55 1632.84,1209.55 1633.42,1209.55 1634.01,1209.55 1634.6,1209.55 1635.18,1209.55 1635.77,1209.55 1636.36,1209.55 1636.94,1209.55 1637.53,1209.55 1638.12,1209.55 1638.7,1209.55 1639.29,1209.55 1639.88,1209.55 1640.46,1209.55 1641.05,1209.55 1641.63,1209.55 1642.22,1209.55 1642.81,1209.55 1643.39,1209.55 1643.98,1209.55 1644.57,1209.55 1645.15,1209.55 1645.74,1209.55 1646.33,1209.55 1646.91,1209.55 1647.5,1209.55 1648.09,1209.55 1648.67,1209.55 1649.26,1209.55 1649.84,1209.55 1650.43,1209.55 1651.02,1209.55 1651.6,1209.55 1652.19,1209.55 1652.78,1209.55 1653.36,1209.55 1653.95,1209.55 1654.54,1209.55 1655.12,1209.55 1655.71,1209.55 1656.29,1209.55 1656.88,1209.55 1657.47,1209.55 1658.05,1209.55 1658.64,1209.55 1659.23,1209.55 1659.81,1209.55 1660.4,1209.55 1660.99,1209.55 1661.57,1209.55 1662.16,1209.55 1662.75,1209.55 1663.33,1209.55 1663.92,1209.55 1664.5,1209.55 1665.09,1209.55 1665.68,1209.55 1666.26,1209.55 1666.85,1209.55 1667.44,1209.55 1668.02,1209.55 1668.61,1209.55 1669.2,1209.55 1669.78,1209.55 1670.37,1209.55 1670.96,1209.55 1671.54,1209.55 1672.13,1209.55 1672.71,1209.55 1673.3,1209.55 1673.89,1209.55 1674.47,1209.55 1675.06,1209.55 1675.65,1209.55 1676.23,1209.55 1676.82,1209.55 1677.41,1209.55 1677.99,1209.55 1678.58,1209.55 1679.17,1209.55 1679.75,1209.55 1680.34,1209.55 1680.92,1209.55 1681.51,1209.55 1682.1,1209.55 1682.68,1209.55 1683.27,1209.55 1683.86,1209.55 1684.44,1209.55 1685.03,1209.55 1685.62,1209.55 1686.2,1209.55 1686.79,1209.55 1687.37,1209.55 1687.96,1209.55 1688.55,1209.55 1689.13,1209.55 1689.72,1209.55 1690.31,1209.55 1690.89,1209.55 1691.48,1209.55 1692.07,1209.55 1692.65,1209.55 1693.24,1209.55 1693.83,1209.55 1694.41,1209.55 1695,1209.55 1695.58,1209.55 1696.17,1209.55 1696.76,1209.55 1697.34,1209.55 1697.93,1209.55 1698.52,1209.55 1699.1,1209.55 1699.69,1209.55 1700.28,1209.55 1700.86,1209.55 1701.45,1209.55 1702.04,1209.55 1702.62,1209.55 1703.21,1209.55 1703.79,1209.55 1704.38,1209.55 1704.97,1209.55 1705.55,1209.55 1706.14,1209.55 1706.73,1209.55 1707.31,1209.55 1707.9,1209.55 1708.49,1209.55 1709.07,1209.55 1709.66,1209.55 1710.24,1209.55 1710.83,1209.55 1711.42,1209.55 1712,1209.55 1712.59,1209.55 1713.18,1209.55 1713.76,1209.55 1714.35,1209.55 1714.94,1209.55 1715.52,1209.55 1716.11,1209.55 1716.7,1209.55 1717.28,1209.55 1717.87,1209.55 1718.45,1209.55 1719.04,1209.55 1719.63,1209.55 1720.21,1209.55 1720.8,1209.55 1721.39,1209.55 1721.97,1209.55 1722.56,1209.55 1723.15,1209.55 1723.73,1209.55 1724.32,1209.55 1724.91,1209.55 1725.49,1209.55 1726.08,1209.55 1726.66,1209.55 1727.25,1209.55 1727.84,1209.55 1728.42,1209.55 1729.01,1209.55 1729.6,1209.55 1730.18,1209.55 1730.77,1209.55 1731.36,1209.55 1731.94,1209.55 1732.53,1209.55 1733.11,1209.55 1733.7,1209.55 1734.29,1209.55 1734.87,1209.55 1735.46,1209.55 1736.05,1209.55 1736.63,1209.55 1737.22,1209.55 1737.81,1209.55 1738.39,1209.55 1738.98,1209.55 1739.57,1209.55 1740.15,1209.55 1740.74,1209.55 1741.32,1209.55 1741.91,1209.55 1742.5,1209.55 1743.08,1209.55 1743.67,1209.55 1744.26,1209.55 1744.84,1209.55 1745.43,1209.55 1746.02,1209.55 1746.6,1209.55 1747.19,1209.55 1747.78,1209.55 1748.36,1209.55 1748.95,1209.55 1749.53,1209.55 1750.12,1209.55 1750.71,1209.55 1751.29,1209.55 1751.88,1209.55 1752.47,1209.55 1753.05,1209.55 1753.64,1209.55 1754.23,1209.55 1754.81,1209.55 1755.4,1209.55 1755.99,1209.55 1756.57,1209.55 1757.16,1209.55 1757.74,1209.55 1758.33,1209.55 1758.92,1209.55 1759.5,1209.55 1760.09,1209.55 1760.68,1209.55 1761.26,1209.55 1761.85,1209.55 1762.44,1209.55 1763.02,1209.55 1763.61,1209.55 1764.19,1209.55 1764.78,1209.55 1765.37,1209.55 1765.95,1209.55 1766.54,1209.55 1767.13,1209.55 1767.71,1209.55 1768.3,1209.55 1768.89,1209.55 1769.47,1209.55 1770.06,1209.55 1770.65,1209.55 1771.23,1209.55 1771.82,1209.55 1772.4,1209.55 1772.99,1209.55 1773.58,1209.55 1774.16,1209.55 1774.75,1209.55 1775.34,1209.55 1775.92,1209.55 1776.51,1209.55 1777.1,1209.55 1777.68,1209.55 1778.27,1209.55 1778.86,1209.55 1779.44,1209.55 1780.03,1209.55 1780.61,1209.55 1781.2,1209.55 1781.79,1209.55 1782.37,1209.55 1782.96,1209.55 1783.55,1209.55 1784.13,1209.55 1784.72,1209.55 1785.31,1209.55 1785.89,1209.55 1786.48,1209.55 1787.06,1209.55 1787.65,1209.55 1788.24,1209.55 1788.82,1209.55 1789.41,1209.55 1790,1209.55 1790.58,1209.55 1791.17,1209.55 1791.76,1209.55 1792.34,1209.55 1792.93,1209.55 1793.52,1209.55 1794.1,1209.55 1794.69,1209.55 1795.27,1209.55 1795.86,1209.55 1796.45,1209.55 1797.03,1209.55 1797.62,1209.55 1798.21,1209.55 1798.79,1209.55 1799.38,1209.55 1799.97,1209.55 1800.55,1209.55 1801.14,1209.55 1801.73,1209.55 1802.31,1209.55 1802.9,1209.55 1803.48,1209.55 1804.07,1209.55 1804.66,1209.55 1805.24,1209.55 1805.83,1209.55 1806.42,1209.55 1807,1209.55 1807.59,1209.55 1808.18,1209.55 1808.76,1209.55 1809.35,1209.55 1809.94,1209.55 1810.52,1209.55 1811.11,1209.55 1811.69,1209.55 1812.28,1209.55 1812.87,1209.55 1813.45,1209.55 1814.04,1209.55 1814.63,1209.55 1815.21,1209.55 1815.8,1209.55 1816.39,1209.55 1816.97,1209.55 1817.56,1209.55 1818.14,1209.55 1818.73,1209.55 1819.32,1209.55 1819.9,1209.55 1820.49,1209.55 1821.08,1209.55 1821.66,1209.55 1822.25,1209.55 1822.84,1209.55 1823.42,1209.55 1824.01,1209.55 1824.6,1209.55 1825.18,1209.55 1825.77,1209.55 1826.35,1209.55 1826.94,1209.55 1827.53,1209.55 1828.11,1209.55 1828.7,1209.55 1829.29,1209.55 1829.87,1209.55 1830.46,1209.55 1831.05,1209.55 1831.63,1209.55 1832.22,1209.55 1832.81,1209.55 1833.39,1209.55 1833.98,1209.55 1834.56,1209.55 1835.15,1209.55 1835.74,1209.55 1836.32,1209.55 1836.91,1209.55 1837.5,1209.55 1838.08,1209.55 1838.67,1209.55 1839.26,1209.55 1839.84,1209.55 1840.43,1209.55 1841.01,1209.55 1841.6,1209.55 1842.19,1209.55 1842.77,1209.55 1843.36,1209.55 1843.95,1209.55 1844.53,1209.55 1845.12,1209.55 1845.71,1209.55 1846.29,1209.55 1846.88,1209.55 1847.47,1209.55 1848.05,1209.55 1848.64,1209.55 1849.22,1209.55 1849.81,1209.55 1850.4,1209.55 1850.98,1209.55 1851.57,1209.55 1852.16,1209.55 1852.74,1209.55 1853.33,1209.55 1853.92,1209.55 1854.5,1209.55 1855.09,1209.55 1855.68,1209.55 1856.26,1209.55 1856.85,1209.55 1857.43,1209.55 1858.02,1209.55 1858.61,1209.55 1859.19,1209.55 1859.78,1209.55 1860.37,1209.55 1860.95,1209.55 1861.54,1209.55 1862.13,1209.55 1862.71,1209.55 1863.3,1209.55 1863.88,1209.55 1864.47,1209.55 1865.06,1209.55 1865.64,1209.55 1866.23,1209.55 1866.82,1209.55 1867.4,1209.55 1867.99,1209.55 1868.58,1209.55 1869.16,1209.55 1869.75,1209.55 1870.34,1209.55 1870.92,1209.55 1871.51,1209.55 1872.09,1209.55 1872.68,1209.55 1873.27,1209.55 1873.85,1209.55 1874.44,1209.55 1875.03,1209.55 1875.61,1209.55 1876.2,1209.55 1876.79,1209.55 1877.37,1209.55 1877.96,1209.55 1878.55,1209.55 1879.13,1209.55 1879.72,1209.55 1880.3,1209.55 1880.89,1209.55 1881.48,1209.55 1882.06,1209.55 1882.65,1209.55 1883.24,1209.55 1883.82,1209.55 1884.41,1209.55 1885,1209.55 1885.58,1209.55 1886.17,1209.55 1886.76,1209.55 1887.34,1209.55 1887.93,1209.55 1888.51,1209.55 1889.1,1209.55 1889.69,1209.55 1890.27,1209.55 1890.86,1209.55 1891.45,1209.55 1892.03,1209.55 1892.62,1209.55 1893.21,1209.55 1893.79,1209.55 1894.38,1209.55 1894.96,1209.55 1895.55,1209.55 1896.14,1209.55 1896.72,1209.55 1897.31,1209.55 1897.9,1209.55 1898.48,1209.55 1899.07,1209.55 1899.66,1209.55 1900.24,1209.55 1900.83,1209.55 1901.42,1209.55 1902,1209.55 1902.59,1209.55 1903.17,1209.55 1903.76,1209.55 1904.35,1209.55 1904.93,1209.55 1905.52,1209.55 1906.11,1209.55 1906.69,1209.55 1907.28,1209.55 1907.87,1209.55 1908.45,1209.55 1909.04,1209.55 1909.63,1209.55 1910.21,1209.55 1910.8,1209.55 1911.38,1209.55 1911.97,1209.55 1912.56,1209.55 1913.14,1209.55 1913.73,1209.55 1914.32,1209.55 1914.9,1209.55 1915.49,1209.55 1916.08,1209.55 1916.66,1209.55 1917.25,1209.55 1917.83,1209.55 1918.42,1209.55 1919.01,1209.55 1919.59,1209.55 1920.18,1209.55 1920.77,1209.55 1921.35,1209.55 1921.94,1209.55 1922.53,1209.55 1923.11,1209.55 1923.7,1209.55 1924.29,1209.55 1924.87,1209.55 1925.46,1209.55 1926.04,1209.55 1926.63,1209.55 1927.22,1209.55 1927.8,1209.55 1928.39,1209.55 1928.98,1209.55 1929.56,1209.55 1930.15,1209.55 1930.74,1209.55 1931.32,1209.55 1931.91,1209.55 1932.5,1209.55 1933.08,1209.55 1933.67,1209.55 1934.25,1209.55 1934.84,1209.55 1935.43,1209.55 1936.01,1209.55 1936.6,1209.55 1937.19,1209.55 1937.77,1209.55 1938.36,1209.55 1938.95,1209.55 1939.53,1209.55 1940.12,1209.55 1940.71,1209.55 1941.29,1209.55 1941.88,1209.55 1942.46,1209.55 1943.05,1209.55 1943.64,1209.55 1944.22,1209.55 1944.81,1209.55 1945.4,1209.55 1945.98,1209.55 1946.57,1209.55 1947.16,1209.55 1947.74,1209.55 1948.33,1209.55 1948.91,1209.55 1949.5,1209.55 1950.09,1209.55 1950.67,1209.55 1951.26,1209.55 1951.85,1209.55 1952.43,1209.55 1953.02,1209.55 1953.61,1209.55 1954.19,1209.55 1954.78,1209.55 1955.37,1209.55 1955.95,1209.55 1956.54,1209.55 1957.12,1209.55 1957.71,1209.55 1958.3,1209.55 1958.88,1209.55 1959.47,1209.55 1960.06,1209.55 1960.64,1209.55 1961.23,1209.55 1961.82,1209.55 1962.4,1209.55 1962.99,1209.55 1963.58,1209.55 1964.16,1209.55 1964.75,1209.55 1965.33,1209.55 1965.92,1209.55 1966.51,1209.55 1967.09,1209.55 1967.68,1209.55 1968.27,1209.55 1968.85,1209.55 1969.44,1209.55 1970.03,1209.55 1970.61,1209.55 1971.2,1209.55 1971.78,1209.55 1972.37,1209.55 1972.96,1209.55 1973.54,1209.55 1974.13,1209.55 1974.72,1209.55 1975.3,1209.55 1975.89,1209.55 1976.48,1209.55 1977.06,1209.55 1977.65,1209.55 1978.24,1209.55 1978.82,1209.55 1979.41,1209.55 1979.99,1209.55 1980.58,1209.55 1981.17,1209.55 1981.75,1209.55 1982.34,1209.55 1982.93,1209.55 1983.51,1209.55 1984.1,1209.55 1984.69,1209.55 1985.27,1209.55 1985.86,1209.55 1986.45,1209.55 1987.03,1209.55 1987.62,1209.55 1988.2,1209.55 1988.79,1209.55 1989.38,1209.55 1989.96,1209.55 1990.55,1209.55 1991.14,1209.55 1991.72,1209.55 1992.31,1209.55 1992.9,1209.55 1993.48,1209.55 1994.07,1209.55 1994.65,1209.55 1995.24,1209.55 1995.83,1209.55 1996.41,1209.55 1997,1209.55 1997.59,1209.55 1998.17,1209.55 1998.76,1209.55 1999.35,1209.55 1999.93,1209.55 2000.52,1209.55 2001.11,1209.55 2001.69,1209.55 2002.28,1209.55 2002.86,1209.55 2003.45,1209.55 2004.04,1209.55 2004.62,1209.55 2005.21,1209.55 2005.8,1209.55 2006.38,1209.55 2006.97,1209.55 2007.56,1209.55 2008.14,1209.55 2008.73,1209.55 2009.32,1209.55 2009.9,1209.55 2010.49,1209.55 2011.07,1209.55 2011.66,1209.55 2012.25,1209.55 2012.83,1209.55 2013.42,1209.55 2014.01,1209.55 2014.59,1209.55 2015.18,1209.55 2015.77,1209.55 2016.35,1209.55 2016.94,1209.55 2017.53,1209.55 2018.11,1209.55 2018.7,1209.55 2019.28,1209.55 2019.87,1209.55 2020.46,1209.55 2021.04,1209.55 2021.63,1209.55 2022.22,1209.55 2022.8,1209.55 2023.39,1209.55 2023.98,1209.55 2024.56,1209.55 2025.15,1209.55 2025.73,1209.55 2026.32,1209.55 2026.91,1209.55 2027.49,1209.55 2028.08,1209.55 2028.67,1209.55 2029.25,1209.55 2029.84,1209.55 2030.43,1209.55 2031.01,1209.55 2031.6,1209.55 2032.19,1209.55 2032.77,1209.55 2033.36,1209.55 2033.94,1209.55 2034.53,1209.55 2035.12,1209.55 2035.7,1209.55 2036.29,1209.55 2036.88,1209.55 2037.46,1209.55 2038.05,1209.55 2038.64,1209.55 2039.22,1209.55 2039.81,1209.55 2040.4,1209.55 2040.98,1209.55 2041.57,1209.55 2042.15,1209.55 2042.74,1209.55 2043.33,1209.55 2043.91,1209.55 2044.5,1209.55 2045.09,1209.55 2045.67,1209.55 2046.26,1209.55 2046.85,1209.55 2047.43,1209.55 2048.02,1209.55 2048.6,1209.55 2049.19,1209.55 2049.78,1209.55 2050.36,1209.55 2050.95,1209.55 2051.54,1209.55 2052.12,1209.55 2052.71,1209.55 2053.3,1209.55 2053.88,1209.55 2054.47,1209.55 2055.06,1209.55 2055.64,1209.55 2056.23,1209.55 2056.81,1209.55 2057.4,1209.55 2057.99,1209.55 2058.57,1209.55 2059.16,1209.55 2059.75,1209.55 2060.33,1209.55 2060.92,1209.55 2061.51,1209.55 2062.09,1209.55 2062.68,1209.55 2063.27,1209.55 2063.85,1209.55 2064.44,1209.55 2065.02,1209.55 2065.61,1209.55 2066.2,1209.55 2066.78,1209.55 2067.37,1209.55 2067.96,1209.55 2068.54,1209.55 2069.13,1209.55 2069.72,1209.55 2070.3,1209.55 2070.89,1209.55 2071.48,1209.55 2072.06,1209.55 2072.65,1209.55 2073.23,1209.55 2073.82,1209.55 2074.41,1209.55 2074.99,1209.55 2075.58,1209.55 2076.17,1209.55 2076.75,1209.55 2077.34,1209.55 2077.93,1209.55 2078.51,1209.55 2079.1,1209.55 2079.68,1209.55 2080.27,1209.55 2080.86,1209.55 2081.44,1209.55 2082.03,1209.55 2082.62,1209.55 2083.2,1209.55 2083.79,1209.55 2084.38,1209.55 2084.96,1209.55 2085.55,1209.55 2086.14,1209.55 2086.72,1209.55 2087.31,1209.55 2087.89,1209.55 2088.48,1209.55 2089.07,1209.55 2089.65,1209.55 2090.24,1209.55 2090.83,1209.55 2091.41,1209.55 2092,1209.55 2092.59,1209.55 2093.17,1209.55 2093.76,1209.55 2094.35,1209.55 2094.93,1209.55 2095.52,1209.55 2096.1,1209.55 2096.69,1209.55 2097.28,1209.55 2097.86,1209.55 2098.45,1209.55 2099.04,1209.55 2099.62,1209.55 2100.21,1209.55 2100.8,1209.55 2101.38,1209.55 2101.97,1209.55 2102.55,1209.55 2103.14,1209.55 2103.73,1209.55 2104.31,1209.55 2104.9,1209.55 2105.49,1209.55 2106.07,1209.55 2106.66,1209.55 2107.25,1209.55 2107.83,1209.55 2108.42,1209.55 2109.01,1209.55 2109.59,1209.55 2110.18,1209.55 2110.76,1209.55 2111.35,1209.55 2111.94,1209.55 2112.52,1209.55 2113.11,1209.55 2113.7,1209.55 2114.28,1209.55 2114.87,1209.55 2115.46,1209.55 2116.04,1209.55 2116.63,1209.55 2117.22,1209.55 2117.8,1209.55 2118.39,1209.55 2118.97,1209.55 2119.56,1209.55 2120.15,1209.55 2120.73,1209.55 2121.32,1209.55 2121.91,1209.55 2122.49,1209.55 2123.08,1209.55 2123.67,1209.55 2124.25,1209.55 2124.84,1209.55 2125.42,1209.55 2126.01,1209.55 2126.6,1209.55 2127.18,1209.55 2127.77,1209.55 2128.36,1209.55 2128.94,1209.55 2129.53,1209.55 2130.12,1209.55 2130.7,1209.55 2131.29,1209.55 2131.88,1209.55 2132.46,1209.55 2133.05,1209.55 2133.63,1209.55 2134.22,1209.55 2134.81,1209.55 2135.39,1209.55 2135.98,1209.55 2136.57,1209.55 2137.15,1209.55 2137.74,1209.55 2138.33,1209.55 2138.91,1209.55 2139.5,1209.55 2140.09,1209.55 2140.67,1209.55 2141.26,1209.55 2141.84,1209.55 2142.43,1209.55 2143.02,1209.55 2143.6,1209.55 2144.19,1209.55 2144.78,1209.55 2145.36,1209.55 2145.95,1209.55 2146.54,1209.55 2147.12,1209.55 2147.71,1209.55 2148.3,1209.55 2148.88,1209.55 2149.47,1209.55 2150.05,1209.55 2150.64,1209.55 2151.23,1209.55 2151.81,1209.55 2152.4,1209.55 2152.99,1209.55 2153.57,1209.55 2154.16,1209.55 2154.75,1209.55 2155.33,1209.55 2155.92,1209.55 2156.5,1209.55 2157.09,1209.55 2157.68,1209.55 2158.26,1209.55 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.2,1191.87 1399.99,899.083 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1226.73 985.439,1191.87 2158.26,1191.87 2158.26,1226.73 985.439,1226.73 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip400)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip400)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip403\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip403)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-7593.95 165.469,-7174.31 166.029,-7956.85 166.588,-8654.57 167.147,-9268.5 167.706,-8909.3 168.266,-9472.93 168.825,-9938.91 169.384,-10392.7 169.943,-10068.8 170.503,-10444.3 171.062,-10784.6 171.621,-11065.7 172.18,-11324.4 172.74,-11545.8 173.299,-11724 173.858,-11402 174.417,-10690.6 174.977,-10445.7 175.536,-10221.2 176.095,-10367.2 176.655,-10472.6 177.214,-10242.3 177.773,-10030.9 178.332,-9845.21 178.892,-9670.38 179.451,-9705.41 180.01,-9726.24 180.569,-9300.95 181.129,-9283.64 181.688,-9263.42 182.247,-9049.55 182.806,-8838.65 183.366,-8609.69 183.925,-8540.4 184.484,-8318.55 185.043,-8235.02 185.603,-8021.62 186.162,-7931.56 186.721,-7837.14 187.28,-7727.98 187.84,-7512.52 188.399,-7199.44 188.958,-6909.63 189.517,-6739.05 190.077,-6563.57 190.636,-6477.46 191.195,-6297.46 191.754,-6135.78 192.314,-5968.51 192.873,-5810.14 193.432,-5517.43 193.991,-5368.02 194.551,-5166 195.11,-4843.98 195.669,-4718.44 196.228,-4544.52 196.788,-4473.75 197.347,-4399.97 197.906,-4225.15 198.465,-4057.08 199.025,-3943.78 199.584,-3784.88 200.143,-3631.98 200.702,-3480.76 201.262,-3424.58 201.821,-3195.55 202.38,-3143.54 202.939,-3047.85 203.499,-2989.28 204.058,-2897.35 204.617,-2796.76 205.176,-2593.95 205.736,-2432.26 206.295,-2349.6 206.854,-2263.48 207.413,-2177.76 207.973,-2093.73 208.532,-2012.08 209.091,-1902.79 209.65,-1755.5 210.21,-1681.81 210.769,-1550.13 211.328,-1481.68 211.887,-1333.34 212.447,-1247.3 213.006,-1216.34 213.565,-1150.97 214.124,-978.522 214.684,-926.311 215.243,-871.448 215.802,-793.915 216.361,-716.079 216.921,-667.257 217.48,-642.971 218.039,-597.288 218.598,-547.093 219.158,-474.107 219.717,-428.284 220.276,-404.623 220.835,-336.675 221.395,-314.461 221.954,-273.535 222.513,-189.334 223.072,-127.127 223.632,-88.1906 224.191,-92.3886 224.75,-58.7316 225.309,-0.121953 225.869,14.4517 226.428,29.3539 226.987,47.2425 227.546,82.3546 228.106,179.273 228.665,232.253 229.224,244.024 229.783,256.338 230.343,248.601 230.902,282.916 231.461,313.672 232.02,340.091 232.58,370.687 233.139,420.994 233.698,454.17 234.257,496.926 234.817,526.074 235.376,568.729 235.935,577.652 236.494,619.663 237.054,680.086 237.613,681.084 238.172,720.643 238.731,684.582 239.291,687.059 239.85,686.717 240.409,728.124 240.968,745.826 241.528,743.713 242.087,761.906 242.646,765.26 243.205,767.492 243.765,788.352 244.324,789.334 244.883,789.445 245.442,790.475 246.002,829.982 246.561,790.308 247.12,775.043 247.679,759.147 248.239,764.434 248.798,765.078 249.357,805.422 249.916,810.58 250.476,832.957 251.035,851.471 251.594,903.881 252.153,955.119 252.713,950.328 253.272,948.875 253.831,1012.56 254.39,1026.54 254.95,1038.02 255.509,1046.12 256.068,1053.2 256.627,1023.5 257.187,996.924 257.746,992.073 258.305,1018.97 258.864,1042.99 259.424,1067.62 259.983,1057.24 260.542,1064.76 261.101,1087.71 261.661,1073.63 262.22,1077.17 262.779,1050.64 263.338,1041.15 263.898,1034.7 264.457,1066.42 265.016,1042.74 265.575,1039.83 266.135,1017.21 266.694,1011.2 267.253,1004.93 267.812,996.755 268.372,993.043 268.931,1022.57 269.49,1050.22 270.049,1024.13 270.609,1020.92 271.168,1034.26 271.727,1010.25 272.286,1056.72 272.846,1050.57 273.405,1129.52 273.964,1121.04 274.523,1091.21 275.083,1082.07 275.642,1074.57 276.201,1111.89 276.76,1119.71 277.32,1144.53 277.879,1197.48 278.438,1169.87 278.997,1142.14 279.557,1099.54 280.116,1091.42 280.675,1096.75 281.234,1054.36 281.794,1062.47 282.353,1034.96 282.912,1048.46 283.471,1075.43 284.031,1084.92 284.59,1078.79 285.149,1073.15 285.708,1098.82 286.268,1120.64 286.827,1143.16 287.386,1142.99 287.945,1129.48 288.505,1135.75 289.064,1075.07 289.623,1030.96 290.182,1010 290.742,975.013 291.301,934.432 291.86,951.722 292.419,997.386 292.979,1024.6 293.538,1033.77 294.097,1010.03 294.656,1024.77 295.216,1049.93 295.775,1042.76 296.334,1036.55 296.893,1046.53 297.453,1050.84 298.012,1059.61 298.571,1033.62 299.13,991.815 299.69,1002.3 300.249,982.641 300.808,994.962 301.368,989.212 301.927,998.388 302.486,974.661 303.045,972.485 303.605,950.735 304.164,966.087 304.723,992.437 305.282,989.053 305.842,983.1 306.401,994.29 306.96,1007.6 307.519,1003.24 308.079,1001.52 308.638,1028.34 309.197,1021.18 309.756,1027.75 310.316,1001.05 310.875,977.914 311.434,938.751 311.993,935.371 312.553,945.12 313.112,942.836 313.671,989.593 314.23,966.348 314.79,944.38 315.349,922.111 315.908,919.563 316.467,952.309 317.027,949.581 317.586,963.895 318.145,959.389 318.704,909.497 319.264,939.505 319.823,966.198 320.382,1011.14 320.941,1035.77 321.501,1024.63 322.06,1016.51 322.619,991.109 323.178,968.463 323.738,962.858 324.297,959.748 324.856,952.773 325.415,946.196 325.975,925.243 326.534,903.434 327.093,905.534 327.652,904.947 328.212,918.979 328.771,902.664 329.33,834.444 329.889,856.277 330.449,875.399 331.008,857.61 331.567,926.472 332.126,907.696 332.686,905.134 333.245,900.226 333.804,865.104 334.363,882.039 334.923,911.907 335.482,956.512 336.041,949.208 336.6,941.607 337.16,921.118 337.719,933.403 338.278,945.729 338.837,956.022 339.397,933.318 339.956,961.509 340.515,957.227 341.074,937.531 341.634,918.84 342.193,982.785 342.752,1012.07 343.311,988.999 343.871,962.804 344.43,1006.36 344.989,1001.69 345.548,978.755 346.108,954.459 346.667,947.187 347.226,944.197 347.785,951.373 348.345,960.817 348.904,969.631 349.463,978.83 350.022,999.224 350.582,975.585 351.141,984.709 351.7,960.3 352.259,970.126 352.819,946.042 353.378,952.802 353.937,961.678 354.496,972.647 355.056,980.688 355.615,956.381 356.174,947.403 356.733,942.904 357.293,934.62 357.852,911.659 358.411,890.389 358.97,903.576 359.53,869.152 360.089,849.266 360.648,831.265 361.207,864.219 361.767,812.267 362.326,832.497 362.885,833.657 363.444,815.785 364.004,834.271 364.563,798.229 365.122,797.9 365.681,797.38 366.241,780.2 366.8,766.283 367.359,787.434 367.918,786.797 368.478,770.986 369.037,777.796 369.596,778.093 370.155,798.427 370.715,817.252 371.274,785.632 371.833,773.489 372.392,777.464 372.952,761.639 373.511,761.899 374.07,765.248 374.629,783.05 375.189,798.9 375.748,835.499 376.307,865.669 376.866,896.906 377.426,909.629 377.985,904.12 378.544,929.493 379.103,906.012 379.663,919.205 380.222,914.04 380.781,908.589 381.34,901.816 381.9,908.165 382.459,936.975 383.018,912.705 383.577,906.217 384.137,915.314 384.696,890.564 385.255,885.349 385.814,881.122 386.374,889.652 386.933,898.045 387.492,896.122 388.051,860.893 388.611,857.826 389.17,866.833 389.729,847.529 390.288,845.958 390.848,859.407 391.407,837.975 391.966,852.358 392.525,847.433 393.085,827.246 393.644,858.749 394.203,888.614 394.762,900.114 395.322,892.777 395.881,854.93 396.44,820.664 396.999,849.651 397.559,861.702 398.118,840.261 398.677,820.743 399.236,799.088 399.796,812.412 400.355,795.41 400.914,809.683 401.473,839.058 402.033,848.828 402.592,859.924 403.151,854.466 403.71,847.339 404.27,859.465 404.829,854.916 405.388,851.275 405.947,861.63 406.507,837.085 407.066,833.667 407.625,829.191 408.184,811.147 408.744,769.662 409.303,706.343 409.862,725.46 410.421,760.561 410.981,742.032 411.54,776.576 412.099,795.428 412.658,795.917 413.218,810.574 413.777,824.592 414.336,834.539 414.895,864.184 415.455,858.753 416.014,855.513 416.573,882.752 417.132,893.865 417.692,918.357 418.251,910.881 418.81,875.893 419.369,873.032 419.929,831.6 420.488,811.8 421.047,823.388 421.606,818.29 422.166,830.838 422.725,822.506 423.284,806.806 423.843,773.161 424.403,742.378 424.962,745.73 425.521,763.941 426.08,749.575 426.64,734.924 427.199,768.522 427.758,767.415 428.318,752.658 428.877,783.619 429.436,782.783 429.995,729.397 430.555,711.582 431.114,714.198 431.673,700.325 432.232,688.088 432.792,692.25 433.351,713.036 433.91,752.31 434.469,734.02 435.029,737.995 435.588,723.495 436.147,741.9 436.706,743.744 437.266,727.755 437.825,695.243 438.384,713.117 438.943,729.987 439.503,733.546 440.062,721.066 440.621,739.659 441.18,791.849 441.74,774.537 442.299,806.499 442.858,835.804 443.417,848.125 443.977,809.753 444.536,810.963 445.095,793.295 445.654,771.378 446.214,769.069 446.773,771.2 447.332,800.141 447.891,794.312 448.451,793.975 449.01,810.233 449.569,807.768 450.128,806.731 450.688,824.405 451.247,851.013 451.806,859.972 452.365,834.25 452.925,845.441 453.484,838.686 454.043,831.838 454.602,811.833 455.162,807.354 455.721,818.64 456.28,797.322 456.839,763.458 457.399,731.134 457.958,731.748 458.517,730.745 459.076,732.329 459.636,747.93 460.195,731.58 460.754,732.384 461.313,765.976 461.873,779.651 462.432,780.18 462.991,793.032 463.55,806.499 464.11,788.069 464.669,755.931 465.228,735.32 465.787,751.692 466.347,817.011 466.906,816.049 467.465,830.572 468.024,826.732 468.584,825.214 469.143,822.896 469.702,804.579 470.261,797.766 470.821,764.122 471.38,766.497 471.939,766.48 472.498,731.548 473.058,747.25 473.617,742.716 474.176,707.136 474.735,711.853 475.295,715.936 475.854,751.225 476.413,732.789 476.972,784.291 477.532,735.436 478.091,690.256 478.65,707.307 479.209,723.555 479.769,727.629 480.328,712.966 480.887,732.791 481.446,719.339 482.006,750.714 482.565,748.459 483.124,714.411 483.683,695.251 484.243,697.911 484.802,714.632 485.361,699.321 485.92,714.226 486.48,748.359 487.039,729.266 487.598,729.127 488.157,727.572 488.717,712.963 489.276,696.045 489.835,682.352 490.394,697.645 490.954,730.876 491.513,711.191 492.072,710.991 492.631,764.201 493.191,781.33 493.75,764.7 494.309,762.979 494.868,727.148 495.428,725.466 495.987,709.669 496.546,725.757 497.105,729.966 497.665,760.709 498.224,776.508 498.783,806.124 499.342,790.942 499.902,768.855 500.461,767.447 501.02,729.837 501.579,728.292 502.139,743.054 502.698,727.355 503.257,775.798 503.816,758.928 504.376,760.647 504.935,763.862 505.494,766.287 506.053,717.308 506.613,684.222 507.172,652.976 507.731,688.165 508.29,674.175 508.85,724.519 509.409,707.662 509.968,675.103 510.527,724.672 511.087,740.015 511.646,738.711 512.205,756.314 512.764,708.437 513.324,675.314 513.883,676.223 514.442,664.123 515.001,650.074 515.561,623.232 516.12,629.612 516.679,651.444 517.238,686.789 517.798,686.596 518.357,722.044 518.916,721.694 519.475,736.046 520.035,717.449 520.594,716.614 521.153,732.501 521.712,699.788 522.272,702.417 522.831,734.727 523.39,751.91 523.949,750.029 524.509,770.325 525.068,733.783 525.627,748.741 526.186,763.551 526.746,792.647 527.305,773.788 527.864,784.987 528.423,800.62 528.983,781.865 529.542,791.692 530.101,755.061 530.66,751.863 531.22,734.579 531.779,734.419 532.338,733.002 532.897,732.307 533.457,700.488 534.016,700.443 534.575,685.281 535.134,688.219 535.694,692.18 536.253,661.521 536.812,678.981 537.371,680.494 537.931,698.375 538.49,731.572 539.049,714.423 539.608,711.189 540.168,692.65 540.727,695.08 541.286,709.903 541.845,698.476 542.405,717.639 542.964,717.531 543.523,731.574 544.082,746.218 544.642,743.724 545.201,712.284 545.76,727.171 546.319,728.714 546.879,729.609 547.438,762.104 547.997,774.806 548.556,757.243 549.116,721.6 549.675,720.815 550.234,718.486 550.793,701.953 551.353,672.703 551.912,672.856 552.471,676.45 553.031,647.642 553.59,650.227 554.149,652.983 554.708,670.239 555.268,674.121 555.827,695.497 556.386,731.895 556.945,701.043 557.505,715.202 558.064,745.852 558.623,745.457 559.182,695.075 559.742,677.312 560.301,678.981 560.86,697.605 561.419,686.473 561.979,670.274 562.538,673.711 563.097,675.152 563.656,692.589 564.216,711.397 564.775,742.757 565.334,743.308 565.893,742.172 566.453,741.04 567.012,739.374 567.571,740.442 568.13,737.895 568.69,736.208 569.249,720.138 569.808,719.747 570.367,717.905 570.927,719.124 571.486,752.061 572.045,734.044 572.604,733.215 573.164,750.75 573.723,779.186 574.282,789.961 574.841,800.252 575.401,795.824 575.96,757.404 576.519,736.886 577.078,753.719 577.638,768.656 578.197,765.027 578.756,759.882 579.315,770.221 579.875,770.912 580.434,768.55 580.993,764 581.552,773.878 582.112,798.408 582.671,792.497 583.23,802.83 583.789,800.194 584.349,794.032 584.908,774.645 585.467,802.088 586.026,799.572 586.586,780.7 587.145,774.607 587.704,755.325 588.263,737.774 588.823,719.213 589.382,718.61 589.941,732.404 590.5,732.065 591.06,742.668 591.619,741.802 592.178,740.712 592.737,737.584 593.297,718.827 593.856,720.239 594.415,719.377 594.974,702.752 595.534,671.627 596.093,691.404 596.652,707.306 597.211,675.753 597.771,678.488 598.33,697.71 598.889,682.993 599.448,680.996 600.008,634.937 600.567,656.466 601.126,658.268 601.685,692.327 602.245,678.655 602.804,678.894 603.363,680.187 603.922,650.676 604.482,668.104 605.041,671.436 605.6,675.966 606.159,681.905 606.719,686.608 607.278,653.425 607.837,640.299 608.396,657.357 608.956,662.829 609.515,683.1 610.074,652.641 610.633,656.146 611.193,658.898 611.752,677.064 612.311,697.123 612.87,697.537 613.43,698.313 613.989,682.969 614.548,700.954 615.107,732.327 615.667,744.57 616.226,759.422 616.785,742.192 617.344,739.064 617.904,707.661 618.463,709.573 619.022,725.27 619.581,722.317 620.141,673.219 620.7,661.529 621.259,681.861 621.818,684.504 622.378,700.128 622.937,714.309 623.496,745.556 624.055,741.343 624.615,725.366 625.174,736.689 625.733,738.604 626.292,751.598 626.852,751.196 627.411,749.064 627.97,728.985 628.529,729.288 629.089,729.301 629.648,696.53 630.207,662.449 630.766,661.256 631.326,664.331 631.885,600.936 632.444,592.903 633.003,600.984 633.563,620.407 634.122,623.926 634.681,645.748 635.24,648.185 635.8,668.573 636.359,685.316 636.918,689.02 637.477,689.586 638.037,671.883 638.596,675.752 639.155,710.378 639.714,693.521 640.274,695.245 640.833,680.102 641.392,698.933 641.951,718.845 642.511,732.577 643.07,750.356 643.629,748.742 644.188,745.095 644.748,773.676 645.307,767.683 645.866,763.457 646.425,758.857 646.985,771.484 647.544,782.675 648.103,776.414 648.662,774.737 649.222,740.933 649.781,723.253 650.34,736.296 650.899,699.524 651.459,700.216 652.018,697.923 652.577,666.09 653.136,650.224 653.696,669.287 654.255,734.68 654.814,752.766 655.373,750.779 655.933,759.29 656.492,787.235 657.051,798.026 657.61,821.197 658.17,783.993 658.729,827.103 659.288,803.091 659.847,766.457 660.407,797.149 660.966,774.973 661.525,804.134 662.084,818.177 662.644,777.124 663.203,741.545 663.762,755.302 664.321,718.551 664.881,731.363 665.44,727.164 665.999,711.086 666.558,726.23 667.118,707.87 667.677,724.836 668.236,757.788 668.795,722.103 669.355,737.869 669.914,736.989 670.473,704.733 671.032,702.061 671.592,723.387 672.151,688.635 672.71,642.768 673.269,631.202 673.829,638.036 674.388,690.309 674.947,722.087 675.506,706.065 676.066,719.152 676.625,734.174 677.184,766.124 677.743,764.857 678.303,746.957 678.862,711.913 679.421,780.257 679.981,757.557 680.54,754.964 681.099,782.328 681.658,777.766 682.218,807.849 682.777,771.079 683.336,785.361 683.895,768.011 684.455,746.819 685.014,779.196 685.573,760.841 686.132,790.687 686.692,787.971 687.251,766.928 687.81,744.955 688.369,707.663 688.929,721.068 689.488,688.601 690.047,720.226 690.606,721.206 691.166,718.154 691.725,735.009 692.284,715.594 692.843,730.149 693.403,706.69 693.962,689.38 694.521,674.605 695.08,641.337 695.64,610.57 696.199,598.416 696.758,603.056 697.317,624.514 697.877,646.853 698.436,666.013 698.995,648.782 699.554,636.942 700.114,639.981 700.673,689.949 701.232,641.631 701.791,641.773 702.351,642.555 702.91,661.933 703.469,677.351 704.028,727.978 704.588,773.412 705.147,752.721 705.706,752.324 706.265,765.116 706.825,807.862 707.384,769.444 707.943,782.437 708.502,762.722 709.062,745.341 709.621,695.045 710.18,694.856 710.739,710.072 711.299,691.586 711.858,686.988 712.417,702.528 712.976,701.825 713.536,672.348 714.095,691.937 714.654,709.203 715.213,725.333 715.773,738.131 716.332,686.098 716.891,640.753 717.45,639.666 718.01,558.7 718.569,531.191 719.128,522.913 719.687,533.601 720.247,526.119 720.806,521.968 721.365,548.228 721.924,572.203 722.484,610.133 723.043,647.68 723.602,663.275 724.161,680.868 724.721,697.106 725.28,694.257 725.839,744.877 726.398,705.921 726.958,720.962 727.517,749.145 728.076,745.316 728.635,724.448 729.195,736.945 729.754,734.777 730.313,750.79 730.872,747.909 731.432,761.509 731.991,742.511 732.55,737 733.109,666.949 733.669,647.038 734.228,667.489 734.787,684.502 735.346,652.316 735.906,639.499 736.465,595.385 737.024,599.962 737.583,573.604 738.143,596.739 738.702,584.126 739.261,577.035 739.82,584.2 740.38,559.179 740.939,534.261 741.498,561.145 742.057,598.878 742.617,588.799 743.176,645.023 743.735,664.965 744.294,653.596 744.854,640.321 745.413,663.99 745.972,678.957 746.531,697.125 747.091,679.265 747.65,696.448 748.209,732.181 748.768,748.988 749.328,679.654 749.887,662.177 750.446,648.545 751.005,685.629 751.565,719.39 752.124,687.48 752.683,685.55 753.242,701.073 753.802,700.772 754.361,686.131 754.92,704.915 755.479,703.512 756.039,668.009 756.598,683.33 757.157,686.275 757.716,685.421 758.276,653.342 758.835,640.503 759.394,624.202 759.953,645.367 760.513,667.197 761.072,688.365 761.631,674.74 762.19,691.326 762.75,656.438 763.309,654.698 763.868,661.115 764.427,674.716 764.987,687.485 765.546,705.409 766.105,683.827 766.664,701.37 767.224,734.64 767.783,746.224 768.342,744.398 768.901,742.324 769.461,758.965 770.02,756.626 770.579,798.451 771.138,779.911 771.698,723.234 772.257,703.663 772.816,687.127 773.375,719.978 773.935,715.566 774.494,730.655 775.053,710.523 775.612,729.517 776.172,731.55 776.731,728.764 777.29,726.285 777.849,712.301 778.409,730.006 778.968,746.319 779.527,760.104 780.086,740.622 780.646,740.86 781.205,737.167 781.764,736.264 782.323,720.805 782.883,721.228 783.442,703.66 784.001,708.354 784.56,673.931 785.12,674.099 785.679,688.606 786.238,685.935 786.797,698.429 787.357,700.636 787.916,715.369 788.475,711.67 789.034,742.424 789.594,788.35 790.153,785.049 790.712,780.299 791.271,776.356 791.831,772.317 792.39,800.003 792.949,779.817 793.508,791.049 794.068,785.994 794.627,779.675 795.186,773.374 795.745,785.808 796.305,750.243 796.864,766.008 797.423,797.137 797.982,772.261 798.542,732.387 799.101,713.29 799.66,680.605 800.219,681.089 800.779,719.64 801.338,751.671 801.897,732.628 802.456,714.119 803.016,709.24 803.575,693.836 804.134,691.449 804.693,721.823 805.253,736.958 805.812,737.934 806.371,740.49 806.931,740.665 807.49,731.924 808.049,728.553 808.608,723.55 809.168,720.483 809.727,702.442 810.286,718.842 810.845,715.07 811.405,712.673 811.964,709.642 812.523,660.089 813.082,645.941 813.642,649.416 814.201,651.673 814.76,640.343 815.319,657.081 815.879,642.433 816.438,647.364 816.997,648.316 817.556,663.708 818.116,676.931 818.675,645.314 819.234,628.453 819.793,616.444 820.353,601.96 820.912,589.506 821.471,596.418 822.03,603.035 822.59,606.059 823.149,614.353 823.708,618.478 824.267,626.624 824.827,644.533 825.386,645.913 825.945,632.428 826.504,652.6 827.064,655.664 827.623,661.047 828.182,645.094 828.741,633.031 829.301,650.766 829.86,685.944 830.419,670.178 830.978,654.277 831.538,655.751 832.097,642.22 832.656,657.951 833.215,673.961 833.775,677.627 834.334,675.602 834.893,657.391 835.452,659.376 836.012,644.122 836.571,614.455 837.13,616.388 837.689,636.088 838.249,654.321 838.808,688.552 839.367,676.053 839.926,691.61 840.486,626.771 841.045,628.744 841.604,634.046 842.163,639.534 842.723,660.14 843.282,678.101 843.841,696.651 844.4,697.105 844.96,729.431 845.519,729.043 846.078,709.595 846.637,725.433 847.197,742.154 847.756,720.296 848.315,686.954 848.874,653.566 849.434,672.355 849.993,642.56 850.552,662.624 851.111,665.302 851.671,681.668 852.23,686.075 852.789,636.803 853.348,637.818 853.908,673.503 854.467,676.961 855.026,695.93 855.585,712.502 856.145,727.033 856.704,758.12 857.263,757.935 857.822,750.55 858.382,730.273 858.941,759.267 859.5,738.764 860.059,717.807 860.619,702.56 861.178,700.775 861.737,667.32 862.296,685.396 862.856,701.892 863.415,701.13 863.974,700.409 864.533,681.895 865.093,664.111 865.652,665.608 866.211,682.288 866.77,715.526 867.33,729.492 867.889,724.343 868.448,737.749 869.007,719.125 869.567,703.841 870.126,703.202 870.685,638.954 871.244,645.693 871.804,680.898 872.363,683.932 872.922,702.893 873.481,671.434 874.041,639.241 874.6,672.063 875.159,673.879 875.718,706.184 876.278,688.68 876.837,684.818 877.396,633.108 877.955,651.813 878.515,654.571 879.074,691.779 879.633,691.376 880.192,688.156 880.752,690.832 881.311,691.715 881.87,640.061 882.429,625.052 882.989,624.947 883.548,629.265 884.107,662.598 884.666,664.115 885.226,667.017 885.785,632.869 886.344,600.632 886.903,587.457 887.463,609.37 888.022,631.094 888.581,587.084 889.14,623.782 889.7,645.742 890.259,667.049 890.818,637.135 891.377,642.205 891.937,643.236 892.496,646.155 893.055,648.573 893.614,668.995 894.174,686.003 894.733,672.252 895.292,671.761 895.851,669.837 896.411,650.773 896.97,683.492 897.529,666.932 898.088,653.411 898.648,639.345 899.207,646.613 899.766,664.442 900.325,651.726 900.885,654.469 901.444,675.014 902.003,644.864 902.562,613.449 903.122,666.104 903.681,716.779 904.24,711.372 904.799,743.043 905.359,735.962 905.918,734.373 906.477,732.355 907.036,732.037 907.596,724.075 908.155,723.749 908.714,726.546 909.273,729.274 909.833,724.276 910.392,721.59 910.951,705.002 911.51,687.456 912.07,720.735 912.629,750.874 913.188,750.96 913.747,745.114 914.307,739.828 914.866,733.786 915.425,744.506 915.984,755.168 916.544,765.672 917.103,774.451 917.662,787.58 918.221,779.573 918.781,791.467 919.34,769.841 919.899,782.35 920.458,777.589 921.018,790.119 921.577,768.42 922.136,748.14 922.695,708.78 923.255,707.814 923.814,708.718 924.373,723.912 924.932,722.081 925.492,718.526 926.051,700.3 926.61,717.681 927.169,715.202 927.729,712.056 928.288,694.625 928.847,696.691 929.406,695.454 929.966,710.378 930.525,692.231 931.084,709.819 931.644,721.071 932.203,702.189 932.762,715.801 933.321,746.906 933.881,729.187 934.44,742.471 934.999,706.734 935.558,668.088 936.118,669.27 936.677,636.997 937.236,653.882 937.795,641.979 938.355,609.354 938.914,648.506 939.473,647.094 940.032,650.134 940.592,652.99 941.151,672.703 941.71,691.866 942.269,721.52 942.829,720.523 943.388,690.857 943.947,690.15 944.506,671.359 945.066,667.319 945.625,670.635 946.184,672.41 946.743,689.703 947.303,656.056 947.862,673.763 948.421,671.616 948.98,650.753 949.54,653.927 950.099,687.771 950.658,718.467 951.217,718.045 951.777,748.328 952.336,761.619 952.895,760.657 953.454,743.803 954.014,759.339 954.573,705.167 955.132,705.117 955.691,718.883 956.251,715.42 956.81,728.462 957.369,726.846 957.928,696.411 958.488,726.827 959.047,753.215 959.606,732.225 960.165,730.933 960.725,714.87 961.284,714.708 961.843,729.953 962.402,772.39 962.962,785.708 963.521,782.276 964.08,792.621 964.639,771.001 965.199,795.47 965.758,775.055 966.317,771.618 966.876,768.847 967.436,765.688 967.995,795.312 968.554,823.146 969.113,828.529 969.673,787.164 970.232,786.753 970.791,766.857 971.35,760.555 971.91,724.406 972.469,722.394 973.028,701.944 973.587,733.43 974.147,729.03 974.706,696.706 975.265,693.213 975.824,726.36 976.384,709.794 976.943,677.132 977.502,661.433 978.061,659.65 978.621,642.346 979.18,660.562 979.739,643.938 980.298,630.437 980.858,616.841 981.417,619.231 981.976,656.755 982.535,643.862 983.095,661.332 983.654,691.996 984.213,707.213 984.772,754.032 985.332,782.551 985.891,794.504 986.45,772.391 987.009,770.2 987.569,750.431 988.128,793.403 988.687,769.481 989.246,780.02 989.806,724.172 990.365,735.356 990.924,733.636 991.483,685.742 992.043,701.896 992.602,700.138 993.161,694.203 993.72,678.979 994.28,711.73 994.839,693.537 995.398,691.923 995.957,691.105 996.517,725.425 997.076,706.956 997.635,708.755 998.194,706.528 998.754,738.206 999.313,719.032 999.872,721.232 1000.43,718.203 1000.99,703.28 1001.55,669.789 1002.11,686.3 1002.67,703.355 1003.23,687.066 1003.79,670.214 1004.35,687.197 1004.91,657.523 1005.46,663.011 1006.02,660.822 1006.58,679.204 1007.14,699.39 1007.7,714.173 1008.26,715.311 1008.82,729.277 1009.38,693.705 1009.94,691.045 1010.5,658.975 1011.06,597.925 1011.62,586.555 1012.18,574.947 1012.73,561.015 1013.29,601.809 1013.85,590.812 1014.41,563.146 1014.97,550.817 1015.53,607.149 1016.09,612.997 1016.65,653.03 1017.21,654.355 1017.77,654.877 1018.33,658.698 1018.89,690.534 1019.45,689.59 1020.01,707.788 1020.56,668.694 1021.12,688.105 1021.68,690.659 1022.24,691.222 1022.8,705.925 1023.36,734.191 1023.92,732.104 1024.48,725.494 1025.04,708.129 1025.6,688.997 1026.16,656.502 1026.72,675.475 1027.28,692.591 1027.83,659.249 1028.39,645.53 1028.95,646.861 1029.51,634.798 1030.07,617.915 1030.63,621.378 1031.19,624.57 1031.75,679.269 1032.31,660.608 1032.87,644.377 1033.43,648.702 1033.99,668.007 1034.55,668.913 1035.1,683.916 1035.66,684.084 1036.22,699.789 1036.78,681.952 1037.34,696.785 1037.9,682.647 1038.46,679.392 1039.02,678.831 1039.58,682.165 1040.14,681.986 1040.7,650.767 1041.26,655.195 1041.82,688.884 1042.38,695.417 1042.93,677.957 1043.49,682.261 1044.05,729.516 1044.61,732.364 1045.17,761.031 1045.73,724.373 1046.29,740.546 1046.85,756.296 1047.41,767.799 1047.97,778.246 1048.53,741.509 1049.09,723.142 1049.65,734.3 1050.2,764.07 1050.76,758.393 1051.32,734.946 1051.88,749.822 1052.44,746.449 1053,728.411 1053.56,724.809 1054.12,705.042 1054.68,724.071 1055.24,738.797 1055.8,751.41 1056.36,730.507 1056.92,716.352 1057.48,667.828 1058.03,653.79 1058.59,654.88 1059.15,621.803 1059.71,655.154 1060.27,621.104 1060.83,621.872 1061.39,642.143 1061.95,676.189 1062.51,657.915 1063.07,642.478 1063.63,664.45 1064.19,713.027 1064.75,724.925 1065.3,720.424 1065.86,702.768 1066.42,703.021 1066.98,701.696 1067.54,719.792 1068.1,735.732 1068.66,731.54 1069.22,726.245 1069.78,689.472 1070.34,702.867 1070.9,684.169 1071.46,638.468 1072.02,643.252 1072.57,648.769 1073.13,653.093 1073.69,654.063 1074.25,673.497 1074.81,709.822 1075.37,710.142 1075.93,724.653 1076.49,723.454 1077.05,703.755 1077.61,702.792 1078.17,719.05 1078.73,663.827 1079.29,628.689 1079.85,583.787 1080.4,590.731 1080.96,593.413 1081.52,616.269 1082.08,649.738 1082.64,652.312 1083.2,650.526 1083.76,667.998 1084.32,638.147 1084.88,643.491 1085.44,647.272 1086,633.975 1086.56,637.129 1087.12,656.096 1087.67,641.892 1088.23,629.882 1088.79,633.566 1089.35,621.472 1089.91,607.528 1090.47,628.373 1091.03,613.727 1091.59,620.568 1092.15,606.961 1092.71,613.104 1093.27,613.353 1093.83,635.892 1094.39,668.856 1094.94,650.523 1095.5,666.72 1096.06,670.421 1096.62,670.678 1097.18,671.483 1097.74,689.023 1098.3,689.24 1098.86,689.248 1099.42,687.823 1099.98,644.5 1100.54,663.308 1101.1,644.259 1101.66,633.573 1102.22,619.712 1102.77,623.979 1103.33,627.556 1103.89,630.666 1104.45,647.833 1105.01,647.906 1105.57,634.516 1106.13,622.389 1106.69,621.852 1107.25,675.807 1107.81,662.642 1108.37,664.804 1108.93,667.331 1109.49,653.527 1110.04,701.106 1110.6,699.061 1111.16,731.31 1111.72,728.19 1112.28,711.478 1112.84,707.153 1113.4,688.602 1113.96,672.382 1114.52,659.243 1115.08,641.512 1115.64,626.227 1116.2,646.252 1116.76,629.208 1117.31,617.049 1117.87,602.677 1118.43,674.858 1118.99,690.652 1119.55,708.888 1120.11,690.466 1120.67,693.715 1121.23,677.103 1121.79,681.151 1122.35,695.725 1122.91,677.265 1123.47,691.742 1124.03,694.428 1124.59,693.193 1125.14,692.254 1125.7,709.181 1126.26,705.985 1126.82,657.322 1127.38,675.054 1127.94,656.823 1128.5,641.166 1129.06,645.414 1129.62,613.409 1130.18,649.327 1130.74,682.935 1131.3,652.163 1131.86,638.926 1132.41,610.401 1132.97,629.488 1133.53,632.825 1134.09,631.607 1134.65,632.414 1135.21,620.916 1135.77,609.597 1136.33,599.281 1136.89,606.206 1137.45,576.306 1138.01,565.902 1138.57,587.764 1139.13,596.072 1139.68,604.491 1140.24,591.463 1140.8,580.966 1141.36,569.954 1141.92,574.178 1142.48,598.005 1143.04,605.502 1143.6,592.516 1144.16,596.165 1144.72,584.851 1145.28,605.913 1145.84,646.681 1146.4,635.91 1146.96,639.8 1147.51,625.666 1148.07,598.723 1148.63,571.734 1149.19,575.073 1149.75,612.768 1150.31,631.425 1150.87,634.447 1151.43,653.964 1151.99,670.535 1152.55,671.956 1153.11,675.971 1153.67,691.941 1154.23,726.043 1154.78,737.964 1155.34,753.191 1155.9,749.972 1156.46,744.12 1157.02,756.826 1157.58,751.719 1158.14,746.892 1158.7,743.842 1159.26,772.515 1159.82,782.952 1160.38,778.811 1160.94,773.114 1161.5,786.917 1162.05,779.723 1162.61,824.722 1163.17,800.015 1163.73,765.751 1164.29,760.328 1164.85,753.302 1165.41,782.744 1165.97,759.263 1166.53,769.775 1167.09,751.828 1167.65,732.409 1168.21,729.933 1168.77,725.949 1169.33,740.47 1169.88,716.441 1170.44,716.133 1171,695.634 1171.56,694.037 1172.12,711.445 1172.68,725.856 1173.24,738.512 1173.8,721.338 1174.36,735.106 1174.92,763.598 1175.48,777.452 1176.04,755.201 1176.6,753.296 1177.15,762.182 1177.71,756.619 1178.27,768.533 1178.83,730.283 1179.39,710.855 1179.95,710.853 1180.51,692.63 1181.07,723.555 1181.63,737.257 1182.19,751.093 1182.75,716.022 1183.31,729.21 1183.87,726.553 1184.43,740.189 1184.98,720.134 1185.54,735.192 1186.1,713.742 1186.66,692.671 1187.22,687.89 1187.78,687.477 1188.34,686.957 1188.9,703.509 1189.46,719.136 1190.02,748.096 1190.58,745.163 1191.14,709.859 1191.7,726.412 1192.25,726.051 1192.81,754.904 1193.37,703.466 1193.93,735.864 1194.49,750.336 1195.05,699.016 1195.61,731.235 1196.17,731.002 1196.73,711.219 1197.29,696.427 1197.85,694.064 1198.41,693.72 1198.97,724.253 1199.52,788.186 1200.08,782.069 1200.64,776.88 1201.2,741.477 1201.76,736.904 1202.32,721.504 1202.88,720.719 1203.44,704.553 1204,756.16 1204.56,749.961 1205.12,761.058 1205.68,788.231 1206.24,798.514 1206.8,793.064 1207.35,768.372 1207.91,732.505 1208.47,761.096 1209.03,741.576 1209.59,757.19 1210.15,690.541 1210.71,687.689 1211.27,685.433 1211.83,701.358 1212.39,734.704 1212.95,749.136 1213.51,740.599 1214.07,752.661 1214.62,767.499 1215.18,726.746 1215.74,689.779 1216.3,705.188 1216.86,691.373 1217.42,710.409 1217.98,725.664 1218.54,723.745 1219.1,703.38 1219.66,699.88 1220.22,699.538 1220.78,682.089 1221.34,681.22 1221.89,699.998 1222.45,685.084 1223.01,668.27 1223.57,635.924 1224.13,604.881 1224.69,577.517 1225.25,552.461 1225.81,559.105 1226.37,568.124 1226.93,558.307 1227.49,582.499 1228.05,554.735 1228.61,546.083 1229.17,567.71 1229.72,573.864 1230.28,592.634 1230.84,596.229 1231.4,601.827 1231.96,605.929 1232.52,628.203 1233.08,631.172 1233.64,619.677 1234.2,626.562 1234.76,659.909 1235.32,663.202 1235.88,666.426 1236.44,637.445 1236.99,625.208 1237.55,644.937 1238.11,646.557 1238.67,696.393 1239.23,646.722 1239.79,648.92 1240.35,635.358 1240.91,655.265 1241.47,642.841 1242.03,647.615 1242.59,668.104 1243.15,668.152 1243.71,688.156 1244.26,719.675 1244.82,733.365 1245.38,733.214 1245.94,697.252 1246.5,716.791 1247.06,649.586 1247.62,615.729 1248.18,651.752 1248.74,652.401 1249.3,656.817 1249.86,673.305 1250.42,673.299 1250.98,656.155 1251.54,643.945 1252.09,628.172 1252.65,612.926 1253.21,618.893 1253.77,575.876 1254.33,550.707 1254.89,558.488 1255.45,577.539 1256.01,585.181 1256.57,605.647 1257.13,611.814 1257.69,615.273 1258.25,621.217 1258.81,603.714 1259.36,608.121 1259.92,630.675 1260.48,614.876 1261.04,618.587 1261.6,619.525 1262.16,605.8 1262.72,627.66 1263.28,629.589 1263.84,631.206 1264.4,637.233 1264.96,656.306 1265.52,674.786 1266.08,691.562 1266.63,693.076 1267.19,728.64 1267.75,741.484 1268.31,734.801 1268.87,747.014 1269.43,742.812 1269.99,742.064 1270.55,736.44 1271.11,699.904 1271.67,633.548 1272.23,621.664 1272.79,626.207 1273.35,644.689 1273.91,625.803 1274.46,642.879 1275.02,660.684 1275.58,628.38 1276.14,645.994 1276.7,681.09 1277.26,679.147 1277.82,666.541 1278.38,668.528 1278.94,655.055 1279.5,687.937 1280.06,718.984 1280.62,722.572 1281.18,703.946 1281.73,703.573 1282.29,699.423 1282.85,699.305 1283.41,711.984 1283.97,696.082 1284.53,697.354 1285.09,696.105 1285.65,710.475 1286.21,709.412 1286.77,725.748 1287.33,719.912 1287.89,717.094 1288.45,698.432 1289,683.98 1289.56,699.844 1290.12,698.774 1290.68,715.299 1291.24,716.765 1291.8,752.252 1292.36,748.346 1292.92,728.573 1293.48,745.105 1294.04,727.597 1294.6,726.34 1295.16,737.013 1295.72,748.955 1296.28,749.575 1296.83,766.069 1297.39,780.301 1297.95,759.999 1298.51,756.727 1299.07,756.455 1299.63,703.673 1300.19,670.654 1300.75,685.321 1301.31,699.981 1301.87,664.926 1302.43,668.44 1302.99,655.381 1303.55,656.396 1304.1,694.187 1304.66,697.114 1305.22,710.272 1305.78,707.833 1306.34,707.014 1306.9,704.952 1307.46,671.327 1308.02,656.775 1308.58,672.716 1309.14,659.5 1309.7,679.288 1310.26,631.299 1310.82,650.01 1311.38,636.731 1311.93,670.41 1312.49,639.024 1313.05,643.676 1313.61,648.642 1314.17,603.355 1314.73,592.151 1315.29,596.336 1315.85,617.611 1316.41,619.78 1316.97,621.402 1317.53,612.702 1318.09,631.936 1318.65,616.826 1319.2,618.486 1319.76,620.763 1320.32,607.271 1320.88,645.395 1321.44,631.254 1322,649.808 1322.56,620.166 1323.12,621.56 1323.68,644.903 1324.24,712.409 1324.8,741.42 1325.36,735.704 1325.92,734.136 1326.47,763.645 1327.03,757.653 1327.59,753.454 1328.15,735.27 1328.71,715.796 1329.27,731.204 1329.83,697.7 1330.39,728.979 1330.95,727.213 1331.51,722.61 1332.07,721.902 1332.63,653.335 1333.19,669.214 1333.75,684.932 1334.3,688.395 1334.86,703.646 1335.42,702.938 1335.98,700.238 1336.54,745.834 1337.1,707.416 1337.66,708.297 1338.22,704.626 1338.78,668.734 1339.34,655.491 1339.9,657.386 1340.46,676.409 1341.02,675.665 1341.57,675.275 1342.13,677.405 1342.69,663.3 1343.25,678.461 1343.81,696.322 1344.37,680.613 1344.93,682.75 1345.49,698.283 1346.05,682.818 1346.61,710.791 1347.17,728.044 1347.73,709.693 1348.29,673.763 1348.84,673.818 1349.4,686.25 1349.96,686.589 1350.52,671.767 1351.08,655.988 1351.64,688.889 1352.2,752.497 1352.76,765.097 1353.32,791.263 1353.88,801.476 1354.44,780.996 1355,743.062 1355.56,758.879 1356.12,757.241 1356.67,756.485 1357.23,722.509 1357.79,721.41 1358.35,702.841 1358.91,717.741 1359.47,701.82 1360.03,683.288 1360.59,648.138 1361.15,666.665 1361.71,615.292 1362.27,617.776 1362.83,624.703 1363.39,614.08 1363.94,601.865 1364.5,626.685 1365.06,614.109 1365.62,647.688 1366.18,679.263 1366.74,678.865 1367.3,659.694 1367.86,644.459 1368.42,628.759 1368.98,631.519 1369.54,617.028 1370.1,638.1 1370.66,641 1371.21,678.903 1371.77,661.772 1372.33,663.18 1372.89,710.988 1373.45,695.273 1374.01,712.335 1374.57,679.416 1375.13,681.048 1375.69,697.739 1376.25,697.533 1376.81,681.946 1377.37,648.09 1377.93,633.183 1378.49,633.959 1379.04,621.625 1379.6,575.15 1380.16,566.38 1380.72,573.426 1381.28,578.541 1381.84,582.022 1382.4,588.134 1382.96,623.923 1383.52,614.809 1384.08,616.575 1384.64,622.417 1385.2,609.131 1385.76,611.56 1386.31,636.385 1386.87,671.364 1387.43,657.224 1387.99,642.926 1388.55,642.899 1389.11,642.534 1389.67,645.526 1390.23,634.359 1390.79,680.288 1391.35,726.05 1391.91,755.82 1392.47,766.23 1393.03,812.54 1393.58,789.074 1394.14,831.607 1394.7,825.026 1395.26,837.082 1395.82,845.615 1396.38,837.628 1396.94,815.744 1397.5,775.543 1398.06,769.602 1398.62,733.477 1399.18,697.435 1399.74,693.731 1400.3,724.117 1400.86,706.767 1401.41,699.962 1401.97,683.024 1402.53,682.421 1403.09,649.334 1403.65,679.29 1404.21,662.659 1404.77,645.162 1405.33,645.035 1405.89,679.29 1406.45,726.474 1407.01,754.218 1407.57,769.68 1408.13,732.3 1408.68,678.26 1409.24,694.162 1409.8,728.5 1410.36,710.173 1410.92,704.442 1411.48,750.885 1412.04,754.003 1412.6,751.14 1413.16,732.025 1413.72,749.766 1414.28,795.28 1414.84,760.665 1415.4,703.281 1415.95,684.13 1416.51,685.239 1417.07,681.023 1417.63,694.161 1418.19,709.082 1418.75,722.968 1419.31,700.58 1419.87,712.393 1420.43,742.387 1420.99,759.966 1421.55,772.463 1422.11,719.134 1422.67,749.33 1423.23,728.948 1423.78,708.821 1424.34,708.277 1424.9,676.045 1425.46,706.953 1426.02,724.491 1426.58,721.974 1427.14,743.03 1427.7,741.544 1428.26,739.827 1428.82,704.066 1429.38,700.748 1429.94,683.014 1430.5,683.609 1431.05,667.21 1431.61,646.523 1432.17,583.082 1432.73,603.48 1433.29,623.473 1433.85,626.293 1434.41,644.136 1434.97,643.289 1435.53,628.268 1436.09,630.7 1436.65,631.644 1437.21,654.052 1437.77,652.501 1438.33,651.07 1438.88,667.77 1439.44,589.266 1440,594.799 1440.56,580.343 1441.12,620.676 1441.68,638.028 1442.24,621.154 1442.8,654.796 1443.36,627.887 1443.92,629.564 1444.48,681.175 1445.04,667.023 1445.6,673.007 1446.15,655.063 1446.71,656.582 1447.27,675.921 1447.83,660.228 1448.39,659.999 1448.95,659.097 1449.51,673.967 1450.07,694.222 1450.63,660.878 1451.19,660.494 1451.75,660.675 1452.31,651.27 1452.87,671.304 1453.42,640.764 1453.98,642.544 1454.54,676.944 1455.1,704.792 1455.66,672.015 1456.22,693.604 1456.78,709.899 1457.34,708.186 1457.9,675.623 1458.46,708.545 1459.02,724.601 1459.58,707.603 1460.14,673.656 1460.7,675.677 1461.25,709.074 1461.81,693.25 1462.37,678.936 1462.93,680.04 1463.49,680.291 1464.05,697.554 1464.61,663.899 1465.17,666.842 1465.73,669.164 1466.29,668.817 1466.85,687.34 1467.41,723.135 1467.97,725.267 1468.52,691.168 1469.08,675.264 1469.64,646.248 1470.2,682.5 1470.76,694.669 1471.32,692.942 1471.88,707.55 1472.44,720.666 1473,705.103 1473.56,707.378 1474.12,689.305 1474.68,735.374 1475.24,749.362 1475.79,743.17 1476.35,711.526 1476.91,742.79 1477.47,740.971 1478.03,738.988 1478.59,753.748 1479.15,718.128 1479.71,669.429 1480.27,704.983 1480.83,688.562 1481.39,686.055 1481.95,699.904 1482.51,683.804 1483.07,681.346 1483.62,682.333 1484.18,669.863 1484.74,672.902 1485.3,674.918 1485.86,688.054 1486.42,702.587 1486.98,698.198 1487.54,715.081 1488.1,715.248 1488.66,714.627 1489.22,727.739 1489.78,736.14 1490.34,733.139 1490.89,713.646 1491.45,693.416 1492.01,690.889 1492.57,708.019 1493.13,723.349 1493.69,722.547 1494.25,755.17 1494.81,783.984 1495.37,763.2 1495.93,727.099 1496.49,755.262 1497.05,738.454 1497.61,721.134 1498.16,720.623 1498.72,720.79 1499.28,722.074 1499.84,737.558 1500.4,782.339 1500.96,742.371 1501.52,705.958 1502.08,689.341 1502.64,672.856 1503.2,690.61 1503.76,691.575 1504.32,706.549 1504.88,726.192 1505.44,738.075 1505.99,752.724 1506.55,712.872 1507.11,707.982 1507.67,705.567 1508.23,687.437 1508.79,672.24 1509.35,704.79 1509.91,686.751 1510.47,686.801 1511.03,671.003 1511.59,670.56 1512.15,687.359 1512.71,668.888 1513.26,666.204 1513.82,652.628 1514.38,639.065 1514.94,610.061 1515.5,602.57 1516.06,590.423 1516.62,642.165 1517.18,709.531 1517.74,690.241 1518.3,690.28 1518.86,675.78 1519.42,663.738 1519.98,664.721 1520.53,682.805 1521.09,683.989 1521.65,684.751 1522.21,683.661 1522.77,668.859 1523.33,657.009 1523.89,673.406 1524.45,675.394 1525.01,677.983 1525.57,679.037 1526.13,679.882 1526.69,695.753 1527.25,692.143 1527.81,657.474 1528.36,641.022 1528.92,642.015 1529.48,645.817 1530.04,630.54 1530.6,634.883 1531.16,639.056 1531.72,624.759 1532.28,626.811 1532.84,598.305 1533.4,638.837 1533.96,641.004 1534.52,627.97 1535.08,661.264 1535.63,599.332 1536.19,604.583 1536.75,595.082 1537.31,597.07 1537.87,619.114 1538.43,657.057 1538.99,690.677 1539.55,675.672 1540.11,679.154 1540.67,643.778 1541.23,662.333 1541.79,666.375 1542.35,667.776 1542.9,653.531 1543.46,655.005 1544.02,655.933 1544.58,641.401 1545.14,644.744 1545.7,661.319 1546.26,661.666 1546.82,659.206 1547.38,644.064 1547.94,627.726 1548.5,648.605 1549.06,649.5 1549.62,703.366 1550.18,732.58 1550.73,716.144 1551.29,712.942 1551.85,680.726 1552.41,620.832 1552.97,623.892 1553.53,642.263 1554.09,630.492 1554.65,618.716 1555.21,621.315 1555.77,655.267 1556.33,674.154 1556.89,646.16 1557.45,634.051 1558,636.944 1558.56,653.36 1559.12,656.206 1559.68,653.368 1560.24,620.86 1560.8,625.989 1561.36,644.592 1561.92,647.252 1562.48,632.578 1563.04,633.346 1563.6,685.075 1564.16,685.548 1564.72,686.25 1565.28,689.888 1565.83,671.244 1566.39,659.007 1566.95,674.849 1567.51,659.815 1568.07,677.027 1568.63,677.305 1569.19,692.727 1569.75,691.559 1570.31,705.864 1570.87,637.643 1571.43,621.161 1571.99,623.03 1572.55,629.954 1573.1,633.299 1573.66,651.428 1574.22,650.743 1574.78,703.716 1575.34,721.23 1575.9,734.758 1576.46,728.973 1577.02,712.504 1577.58,711.761 1578.14,749.004 1578.7,743.503 1579.26,704.83 1579.82,700.353 1580.37,700.184 1580.93,699.659 1581.49,667.518 1582.05,683.226 1582.61,685.468 1583.17,668.584 1583.73,669.609 1584.29,671.466 1584.85,687.639 1585.41,720.005 1585.97,701.055 1586.53,652.601 1587.09,669.856 1587.65,651.328 1588.2,638.135 1588.76,669.617 1589.32,671.348 1589.88,688.605 1590.44,655.036 1591,672.954 1591.56,674.192 1592.12,622.797 1592.68,639.374 1593.24,677.16 1593.8,726.591 1594.36,742.065 1594.92,756.469 1595.47,784.126 1596.03,777.385 1596.59,759.132 1597.15,767.197 1597.71,746.586 1598.27,745.16 1598.83,758.979 1599.39,721.381 1599.95,702.649 1600.51,652.908 1601.07,668.477 1601.63,664.927 1602.19,683.31 1602.74,684.987 1603.3,702.749 1603.86,731.007 1604.42,759.708 1604.98,756.894 1605.54,784.682 1606.1,778.446 1606.66,738.581 1607.22,736.575 1607.78,733.835 1608.34,732.578 1608.9,729.835 1609.46,728.625 1610.02,712.817 1610.57,695.549 1611.13,694.441 1611.69,675.679 1612.25,692.575 1612.81,690.122 1613.37,691.348 1613.93,691.797 1614.49,742.149 1615.05,738.422 1615.61,700.039 1616.17,695.689 1616.73,727.635 1617.29,741.606 1617.84,754.908 1618.4,738.112 1618.96,736.877 1619.52,701.518 1620.08,714.242 1620.64,731.418 1621.2,729.257 1621.76,758.101 1622.32,770.064 1622.88,732.662 1623.44,748.575 1624,729.8 1624.56,726.922 1625.11,707.4 1625.67,707.141 1626.23,657.354 1626.79,627.214 1627.35,632.174 1627.91,633.256 1628.47,653.676 1629.03,656.446 1629.59,671.129 1630.15,668.318 1630.71,702.966 1631.27,736.783 1631.83,698.314 1632.39,684.04 1632.94,680.363 1633.5,665.368 1634.06,684.435 1634.62,696.168 1635.18,678.549 1635.74,630.858 1636.3,636.989 1636.86,652.855 1637.42,670.464 1637.98,703.551 1638.54,718.778 1639.1,717.357 1639.66,746.832 1640.21,743.158 1640.77,720.993 1641.33,733.066 1641.89,715.649 1642.45,666.219 1643.01,679.974 1643.57,661.393 1644.13,645.464 1644.69,630.608 1645.25,614.575 1645.81,585.277 1646.37,569.34 1646.93,588.776 1647.48,610.392 1648.04,615.443 1648.6,601.794 1649.16,655.402 1649.72,673.054 1650.28,690.45 1650.84,689.881 1651.4,688.605 1651.96,671.72 1652.52,689.182 1653.08,689.257 1653.64,674.151 1654.2,662.273 1654.76,676.992 1655.31,691.584 1655.87,693.163 1656.43,710.155 1656.99,708.782 1657.55,707.775 1658.11,718.278 1658.67,712.787 1659.23,714.047 1659.79,724.118 1660.35,754.273 1660.91,735.944 1661.47,717.391 1662.03,701.589 1662.58,697.775 1663.14,681.507 1663.7,715.677 1664.26,762.075 1664.82,759.49 1665.38,705.032 1665.94,719.903 1666.5,682.426 1667.06,717.046 1667.62,698.393 1668.18,680.905 1668.74,682.698 1669.3,701.208 1669.85,720.704 1670.41,736.167 1670.97,749.356 1671.53,793.132 1672.09,789.808 1672.65,820.146 1673.21,847.653 1673.77,822.533 1674.33,817.722 1674.89,859.875 1675.45,848.359 1676.01,820.687 1676.57,799.247 1677.13,777.417 1677.68,738.611 1678.24,719.16 1678.8,702.504 1679.36,696.983 1679.92,697.462 1680.48,693.83 1681.04,658.248 1681.6,695.059 1682.16,676.73 1682.72,677.13 1683.28,663.01 1683.84,694.44 1684.4,711.258 1684.95,707.329 1685.51,737.624 1686.07,751.322 1686.63,718.317 1687.19,720.807 1687.75,719.601 1688.31,671.729 1688.87,688.413 1689.43,670.89 1689.99,654.833 1690.55,655.782 1691.11,657.429 1691.67,658.939 1692.23,658.092 1692.78,678.328 1693.34,696.154 1693.9,679.585 1694.46,668.537 1695.02,620.984 1695.58,644.568 1696.14,642.828 1696.7,660.841 1697.26,680.254 1697.82,678.383 1698.38,709.3 1698.94,755.266 1699.5,766.74 1700.05,745.403 1700.61,741.841 1701.17,736.34 1701.73,732.153 1702.29,727.55 1702.85,696.989 1703.41,743.709 1703.97,725.788 1704.53,723.925 1705.09,722.081 1705.65,721.228 1706.21,700.673 1706.77,710.562 1707.32,709.421 1707.88,726.31 1708.44,737.694 1709,763.982 1709.56,743.398 1710.12,720.52 1710.68,719.183 1711.24,737.082 1711.8,716.43 1712.36,698.736 1712.92,716.487 1713.48,682.776 1714.04,699.603 1714.6,715.213 1715.15,666.869 1715.71,665.913 1716.27,636.34 1716.83,643.484 1717.39,630.958 1717.95,654.322 1718.51,639.282 1719.07,643.761 1719.63,646.442 1720.19,648.796 1720.75,682.229 1721.31,663.41 1721.87,663.629 1722.42,666.971 1722.98,696.382 1723.54,682 1724.1,665.996 1724.66,682.777 1725.22,648.222 1725.78,665.734 1726.34,666.473 1726.9,652.099 1727.46,636.336 1728.02,656.068 1728.58,674.693 1729.14,690.64 1729.69,672.57 1730.25,691.14 1730.81,700.635 1731.37,715.793 1731.93,683.773 1732.49,700.736 1733.05,686.843 1733.61,687.253 1734.17,640.502 1734.73,644.156 1735.29,678.935 1735.85,726.341 1736.41,723.322 1736.97,719.014 1737.52,702.56 1738.08,687.683 1738.64,705.954 1739.2,710.515 1739.76,696.273 1740.32,696.032 1740.88,645.047 1741.44,696.904 1742,684.69 1742.56,667.416 1743.12,602.501 1743.68,588.698 1744.24,595.388 1744.79,600.275 1745.35,605.574 1745.91,674.376 1746.47,723.918 1747.03,707.404 1747.59,720.828 1748.15,717.882 1748.71,700.375 1749.27,698.457 1749.83,683.655 1750.39,666.287 1750.95,603.39 1751.51,657.339 1752.06,640.345 1752.62,673.683 1753.18,688.82 1753.74,635.784 1754.3,638.203 1754.86,639.476 1755.42,657.933 1755.98,707.654 1756.54,711.338 1757.1,693.729 1757.66,709.017 1758.22,692.545 1758.78,676.589 1759.34,632.557 1759.89,667.396 1760.45,655.436 1761.01,624.834 1761.57,625.393 1762.13,674.239 1762.69,704.81 1763.25,686.574 1763.81,667.12 1764.37,668.144 1764.93,704.564 1765.49,689.337 1766.05,705.382 1766.61,688.357 1767.16,688.646 1767.72,655.076 1768.28,672.891 1768.84,692.646 1769.4,722.752 1769.96,692.743 1770.52,690.537 1771.08,675.393 1771.64,661.622 1772.2,646.248 1772.76,631.862 1773.32,650.838 1773.88,619.967 1774.43,607.948 1774.99,612.37 1775.55,601.058 1776.11,639.836 1776.67,642.604 1777.23,651.314 1777.79,684.836 1778.35,704.072 1778.91,734.003 1779.47,684.268 1780.03,686.727 1780.59,671.587 1781.15,674.139 1781.71,710.933 1782.26,694.583 1782.82,680.451 1783.38,726.266 1783.94,739.491 1784.5,687.899 1785.06,721.088 1785.62,723.037 1786.18,687.267 1786.74,674.068 1787.3,659.162 1787.86,660.287 1788.42,631.524 1788.98,617.686 1789.53,621.275 1790.09,625.676 1790.65,645.589 1791.21,629.55 1791.77,665.262 1792.33,697.455 1792.89,700.679 1793.45,685.116 1794.01,717.766 1794.57,748.681 1795.13,759.825 1795.69,707.091 1796.25,703.966 1796.8,670.047 1797.36,667.153 1797.92,684.625 1798.48,683.839 1799.04,683.213 1799.6,665.213 1800.16,652.032 1800.72,653.997 1801.28,652.173 1801.84,640.089 1802.4,611.951 1802.96,612.002 1803.52,616.587 1804.08,602.92 1804.63,591.334 1805.19,592.526 1805.75,613.274 1806.31,630.941 1806.87,646.712 1807.43,618.293 1807.99,669.212 1808.55,667.882 1809.11,685.539 1809.67,688.3 1810.23,674.475 1810.79,671.877 1811.35,671.828 1811.9,688.307 1812.46,687.219 1813.02,669.092 1813.58,670.782 1814.14,623.243 1814.7,627.18 1815.26,645.797 1815.82,635.116 1816.38,654.577 1816.94,642.921 1817.5,659.755 1818.06,690.956 1818.62,724.757 1819.18,723.897 1819.73,738.019 1820.29,737.441 1820.85,721.362 1821.41,718.874 1821.97,702.564 1822.53,700.946 1823.09,685.593 1823.65,654.558 1824.21,652.637 1824.77,654.641 1825.33,675.336 1825.89,677.262 1826.45,679.201 1827,679.626 1827.56,649.648 1828.12,670.309 1828.68,673.613 1829.24,739.373 1829.8,737.797 1830.36,719.805 1830.92,735.192 1831.48,751.687 1832.04,783.634 1832.6,793.949 1833.16,782.904 1833.72,792.427 1834.27,773.05 1834.83,750.01 1835.39,747.592 1835.95,775.367 1836.51,788.714 1837.07,766.946 1837.63,746.539 1838.19,710.122 \"/>\n<path clip-path=\"url(#clip403)\" d=\"M720.247 690.898 L720.806 690.898 L721.365 690.898 L721.924 690.898 L722.484 690.898 L723.043 690.898 L723.602 690.898 L724.161 690.898 L724.721 690.898 L725.28 690.898 L725.839 690.898 L726.398 690.898 L726.958 690.898 L727.517 690.898 L728.076 690.898 L728.635 690.898 L729.195 690.898 L729.754 690.898 L730.313 690.898 L730.872 690.898 L731.432 690.898 L731.991 690.898 L732.55 690.898 L733.109 690.898 L733.669 690.898 L734.228 690.898 L734.787 690.898 L735.346 690.898 L735.906 690.898 L736.465 690.898 L737.024 690.898 L737.583 690.898 L738.143 690.898 L738.702 690.898 L739.261 690.898 L739.82 690.898 L740.38 690.898 L740.939 690.898 L741.498 690.898 L742.057 690.898 L742.617 690.898 L743.176 690.898 L743.735 690.898 L744.294 690.898 L744.854 690.898 L745.413 690.898 L745.972 690.898 L746.531 690.898 L747.091 690.898 L747.65 690.898 L748.209 690.898 L748.768 690.898 L749.328 690.898 L749.887 690.898 L750.446 690.898 L751.005 690.898 L751.565 690.898 L752.124 690.898 L752.683 690.898 L753.242 690.898 L753.802 690.898 L754.361 690.898 L754.92 690.898 L755.479 690.898 L756.039 690.898 L756.598 690.898 L757.157 690.898 L757.716 690.898 L758.276 690.898 L758.835 690.898 L759.394 690.898 L759.953 690.898 L760.513 690.898 L761.072 690.898 L761.631 690.898 L762.19 690.898 L762.75 690.898 L763.309 690.898 L763.868 690.898 L764.427 690.898 L764.987 690.898 L765.546 690.898 L766.105 690.898 L766.664 690.898 L767.224 690.898 L767.783 690.898 L768.342 690.898 L768.901 690.898 L769.461 690.898 L770.02 690.898 L770.579 690.898 L771.138 690.898 L771.698 690.898 L772.257 690.898 L772.816 690.898 L773.375 690.898 L773.935 690.898 L774.494 690.898 L775.053 690.898 L775.612 690.898 L776.172 690.898 L776.731 690.898 L777.29 690.898 L777.849 690.898 L778.409 690.898 L778.968 690.898 L779.527 690.898 L780.086 690.898 L780.646 690.898 L781.205 690.898 L781.764 690.898 L782.323 690.898 L782.883 690.898 L783.442 690.898 L784.001 690.898 L784.56 690.898 L785.12 690.898 L785.679 690.898 L786.238 690.898 L786.797 690.898 L787.357 690.898 L787.916 690.898 L788.475 690.898 L789.034 690.898 L789.594 690.898 L790.153 690.898 L790.712 690.898 L791.271 690.898 L791.831 690.898 L792.39 690.898 L792.949 690.898 L793.508 690.898 L794.068 690.898 L794.627 690.898 L795.186 690.898 L795.745 690.898 L796.305 690.898 L796.864 690.898 L797.423 690.898 L797.982 690.898 L798.542 690.898 L799.101 690.898 L799.66 690.898 L800.219 690.898 L800.779 690.898 L801.338 690.898 L801.897 690.898 L802.456 690.898 L803.016 690.898 L803.575 690.898 L804.134 690.898 L804.693 690.898 L805.253 690.898 L805.812 690.898 L806.371 690.898 L806.931 690.898 L807.49 690.898 L808.049 690.898 L808.608 690.898 L809.168 690.898 L809.727 690.898 L810.286 690.898 L810.845 690.898 L811.405 690.898 L811.964 690.898 L812.523 690.898 L813.082 690.898 L813.642 690.898 L814.201 690.898 L814.76 690.898 L815.319 690.898 L815.879 690.898 L816.438 690.898 L816.997 690.898 L817.556 690.898 L818.116 690.898 L818.675 690.898 L819.234 690.898 L819.793 690.898 L820.353 690.898 L820.912 690.898 L821.471 690.898 L822.03 690.898 L822.59 690.898 L823.149 690.898 L823.708 690.898 L824.267 690.898 L824.827 690.898 L825.386 690.898 L825.945 690.898 L826.504 690.898 L827.064 690.898 L827.623 690.898 L828.182 690.898 L828.741 690.898 L829.301 690.898 L829.86 690.898 L830.419 690.898 L830.978 690.898 L831.538 690.898 L832.097 690.898 L832.656 690.898 L833.215 690.898 L833.775 690.898 L834.334 690.898 L834.893 690.898 L835.452 690.898 L836.012 690.898 L836.571 690.898 L837.13 690.898 L837.689 690.898 L838.249 690.898 L838.808 690.898 L839.367 690.898 L839.926 690.898 L840.486 690.898 L841.045 690.898 L841.604 690.898 L842.163 690.898 L842.723 690.898 L843.282 690.898 L843.841 690.898 L844.4 690.898 L844.96 690.898 L845.519 690.898 L846.078 690.898 L846.637 690.898 L847.197 690.898 L847.756 690.898 L848.315 690.898 L848.874 690.898 L849.434 690.898 L849.993 690.898 L850.552 690.898 L851.111 690.898 L851.671 690.898 L852.23 690.898 L852.789 690.898 L853.348 690.898 L853.908 690.898 L854.467 690.898 L855.026 690.898 L855.585 690.898 L856.145 690.898 L856.704 690.898 L857.263 690.898 L857.822 690.898 L858.382 690.898 L858.941 690.898 L859.5 690.898 L860.059 690.898 L860.619 690.898 L861.178 690.898 L861.737 690.898 L862.296 690.898 L862.856 690.898 L863.415 690.898 L863.974 690.898 L864.533 690.898 L865.093 690.898 L865.652 690.898 L866.211 690.898 L866.77 690.898 L867.33 690.898 L867.889 690.898 L868.448 690.898 L869.007 690.898 L869.567 690.898 L870.126 690.898 L870.685 690.898 L871.244 690.898 L871.804 690.898 L872.363 690.898 L872.922 690.898 L873.481 690.898 L874.041 690.898 L874.6 690.898 L875.159 690.898 L875.718 690.898 L876.278 690.898 L876.837 690.898 L877.396 690.898 L877.955 690.898 L878.515 690.898 L879.074 690.898 L879.633 690.898 L880.192 690.898 L880.752 690.898 L881.311 690.898 L881.87 690.898 L882.429 690.898 L882.989 690.898 L883.548 690.898 L884.107 690.898 L884.666 690.898 L885.226 690.898 L885.785 690.898 L886.344 690.898 L886.903 690.898 L887.463 690.898 L888.022 690.898 L888.581 690.898 L889.14 690.898 L889.7 690.898 L890.259 690.898 L890.818 690.898 L891.377 690.898 L891.937 690.898 L892.496 690.898 L893.055 690.898 L893.614 690.898 L894.174 690.898 L894.733 690.898 L895.292 690.898 L895.851 690.898 L896.411 690.898 L896.97 690.898 L897.529 690.898 L898.088 690.898 L898.648 690.898 L899.207 690.898 L899.766 690.898 L900.325 690.898 L900.885 690.898 L901.444 690.898 L902.003 690.898 L902.562 690.898 L903.122 690.898 L903.681 690.898 L904.24 690.898 L904.799 690.898 L905.359 690.898 L905.918 690.898 L906.477 690.898 L907.036 690.898 L907.596 690.898 L908.155 690.898 L908.714 690.898 L909.273 690.898 L909.833 690.898 L910.392 690.898 L910.951 690.898 L911.51 690.898 L912.07 690.898 L912.629 690.898 L913.188 690.898 L913.747 690.898 L914.307 690.898 L914.866 690.898 L915.425 690.898 L915.984 690.898 L916.544 690.898 L917.103 690.898 L917.662 690.898 L918.221 690.898 L918.781 690.898 L919.34 690.898 L919.899 690.898 L920.458 690.898 L921.018 690.898 L921.577 690.898 L922.136 690.898 L922.695 690.898 L923.255 690.898 L923.814 690.898 L924.373 690.898 L924.932 690.898 L925.492 690.898 L926.051 690.898 L926.61 690.898 L927.169 690.898 L927.729 690.898 L928.288 690.898 L928.847 690.898 L929.406 690.898 L929.966 690.898 L930.525 690.898 L931.084 690.898 L931.644 690.898 L932.203 690.898 L932.762 690.898 L933.321 690.898 L933.881 690.898 L934.44 690.898 L934.999 690.898 L935.558 690.898 L936.118 690.898 L936.677 690.898 L937.236 690.898 L937.795 690.898 L938.355 690.898 L938.914 690.898 L939.473 690.898 L940.032 690.898 L940.592 690.898 L941.151 690.898 L941.71 690.898 L942.269 690.898 L942.829 690.898 L943.388 690.898 L943.947 690.898 L944.506 690.898 L945.066 690.898 L945.625 690.898 L946.184 690.898 L946.743 690.898 L947.303 690.898 L947.862 690.898 L948.421 690.898 L948.98 690.898 L949.54 690.898 L950.099 690.898 L950.658 690.898 L951.217 690.898 L951.777 690.898 L952.336 690.898 L952.895 690.898 L953.454 690.898 L954.014 690.898 L954.573 690.898 L955.132 690.898 L955.691 690.898 L956.251 690.898 L956.81 690.898 L957.369 690.898 L957.928 690.898 L958.488 690.898 L959.047 690.898 L959.606 690.898 L960.165 690.898 L960.725 690.898 L961.284 690.898 L961.843 690.898 L962.402 690.898 L962.962 690.898 L963.521 690.898 L964.08 690.898 L964.639 690.898 L965.199 690.898 L965.758 690.898 L966.317 690.898 L966.876 690.898 L967.436 690.898 L967.995 690.898 L968.554 690.898 L969.113 690.898 L969.673 690.898 L970.232 690.898 L970.791 690.898 L971.35 690.898 L971.91 690.898 L972.469 690.898 L973.028 690.898 L973.587 690.898 L974.147 690.898 L974.706 690.898 L975.265 690.898 L975.824 690.898 L976.384 690.898 L976.943 690.898 L977.502 690.898 L978.061 690.898 L978.621 690.898 L979.18 690.898 L979.739 690.898 L980.298 690.898 L980.858 690.898 L981.417 690.898 L981.976 690.898 L982.535 690.898 L983.095 690.898 L983.654 690.898 L984.213 690.898 L984.772 690.898 L985.332 690.898 L985.891 690.898 L986.45 690.898 L987.009 690.898 L987.569 690.898 L988.128 690.898 L988.687 690.898 L989.246 690.898 L989.806 690.898 L990.365 690.898 L990.924 690.898 L991.483 690.898 L992.043 690.898 L992.602 690.898 L993.161 690.898 L993.72 690.898 L994.28 690.898 L994.839 690.898 L995.398 690.898 L995.957 690.898 L996.517 690.898 L997.076 690.898 L997.635 690.898 L998.194 690.898 L998.754 690.898 L999.313 690.898 L999.872 690.898 L1000.43 690.898 L1000.99 690.898 L1001.55 690.898 L1002.11 690.898 L1002.67 690.898 L1003.23 690.898 L1003.79 690.898 L1004.35 690.898 L1004.91 690.898 L1005.46 690.898 L1006.02 690.898 L1006.58 690.898 L1007.14 690.898 L1007.7 690.898 L1008.26 690.898 L1008.82 690.898 L1009.38 690.898 L1009.94 690.898 L1010.5 690.898 L1011.06 690.898 L1011.62 690.898 L1012.18 690.898 L1012.73 690.898 L1013.29 690.898 L1013.85 690.898 L1014.41 690.898 L1014.97 690.898 L1015.53 690.898 L1016.09 690.898 L1016.65 690.898 L1017.21 690.898 L1017.77 690.898 L1018.33 690.898 L1018.89 690.898 L1019.45 690.898 L1020.01 690.898 L1020.56 690.898 L1021.12 690.898 L1021.68 690.898 L1022.24 690.898 L1022.8 690.898 L1023.36 690.898 L1023.92 690.898 L1024.48 690.898 L1025.04 690.898 L1025.6 690.898 L1026.16 690.898 L1026.72 690.898 L1027.28 690.898 L1027.83 690.898 L1028.39 690.898 L1028.95 690.898 L1029.51 690.898 L1030.07 690.898 L1030.63 690.898 L1031.19 690.898 L1031.75 690.898 L1032.31 690.898 L1032.87 690.898 L1033.43 690.898 L1033.99 690.898 L1034.55 690.898 L1035.1 690.898 L1035.66 690.898 L1036.22 690.898 L1036.78 690.898 L1037.34 690.898 L1037.9 690.898 L1038.46 690.898 L1039.02 690.898 L1039.58 690.898 L1040.14 690.898 L1040.7 690.898 L1041.26 690.898 L1041.82 690.898 L1042.38 690.898 L1042.93 690.898 L1043.49 690.898 L1044.05 690.898 L1044.61 690.898 L1045.17 690.898 L1045.73 690.898 L1046.29 690.898 L1046.85 690.898 L1047.41 690.898 L1047.97 690.898 L1048.53 690.898 L1049.09 690.898 L1049.65 690.898 L1050.2 690.898 L1050.76 690.898 L1051.32 690.898 L1051.88 690.898 L1052.44 690.898 L1053 690.898 L1053.56 690.898 L1054.12 690.898 L1054.68 690.898 L1055.24 690.898 L1055.8 690.898 L1056.36 690.898 L1056.92 690.898 L1057.48 690.898 L1058.03 690.898 L1058.59 690.898 L1059.15 690.898 L1059.71 690.898 L1060.27 690.898 L1060.83 690.898 L1061.39 690.898 L1061.95 690.898 L1062.51 690.898 L1063.07 690.898 L1063.63 690.898 L1064.19 690.898 L1064.75 690.898 L1065.3 690.898 L1065.86 690.898 L1066.42 690.898 L1066.98 690.898 L1067.54 690.898 L1068.1 690.898 L1068.66 690.898 L1069.22 690.898 L1069.78 690.898 L1070.34 690.898 L1070.9 690.898 L1071.46 690.898 L1072.02 690.898 L1072.57 690.898 L1073.13 690.898 L1073.69 690.898 L1074.25 690.898 L1074.81 690.898 L1075.37 690.898 L1075.93 690.898 L1076.49 690.898 L1077.05 690.898 L1077.61 690.898 L1078.17 690.898 L1078.73 690.898 L1079.29 690.898 L1079.85 690.898 L1080.4 690.898 L1080.96 690.898 L1081.52 690.898 L1082.08 690.898 L1082.64 690.898 L1083.2 690.898 L1083.76 690.898 L1084.32 690.898 L1084.88 690.898 L1085.44 690.898 L1086 690.898 L1086.56 690.898 L1087.12 690.898 L1087.67 690.898 L1088.23 690.898 L1088.79 690.898 L1089.35 690.898 L1089.91 690.898 L1090.47 690.898 L1091.03 690.898 L1091.59 690.898 L1092.15 690.898 L1092.71 690.898 L1093.27 690.898 L1093.83 690.898 L1094.39 690.898 L1094.94 690.898 L1095.5 690.898 L1096.06 690.898 L1096.62 690.898 L1097.18 690.898 L1097.74 690.898 L1098.3 690.898 L1098.86 690.898 L1099.42 690.898 L1099.98 690.898 L1100.54 690.898 L1101.1 690.898 L1101.66 690.898 L1102.22 690.898 L1102.77 690.898 L1103.33 690.898 L1103.89 690.898 L1104.45 690.898 L1105.01 690.898 L1105.57 690.898 L1106.13 690.898 L1106.69 690.898 L1107.25 690.898 L1107.81 690.898 L1108.37 690.898 L1108.93 690.898 L1109.49 690.898 L1110.04 690.898 L1110.6 690.898 L1111.16 690.898 L1111.72 690.898 L1112.28 690.898 L1112.84 690.898 L1113.4 690.898 L1113.96 690.898 L1114.52 690.898 L1115.08 690.898 L1115.64 690.898 L1116.2 690.898 L1116.76 690.898 L1117.31 690.898 L1117.87 690.898 L1118.43 690.898 L1118.99 690.898 L1119.55 690.898 L1120.11 690.898 L1120.67 690.898 L1121.23 690.898 L1121.79 690.898 L1122.35 690.898 L1122.91 690.898 L1123.47 690.898 L1124.03 690.898 L1124.59 690.898 L1125.14 690.898 L1125.7 690.898 L1126.26 690.898 L1126.82 690.898 L1127.38 690.898 L1127.94 690.898 L1128.5 690.898 L1129.06 690.898 L1129.62 690.898 L1130.18 690.898 L1130.74 690.898 L1131.3 690.898 L1131.86 690.898 L1132.41 690.898 L1132.97 690.898 L1133.53 690.898 L1134.09 690.898 L1134.65 690.898 L1135.21 690.898 L1135.77 690.898 L1136.33 690.898 L1136.89 690.898 L1137.45 690.898 L1138.01 690.898 L1138.57 690.898 L1139.13 690.898 L1139.68 690.898 L1140.24 690.898 L1140.8 690.898 L1141.36 690.898 L1141.92 690.898 L1142.48 690.898 L1143.04 690.898 L1143.6 690.898 L1144.16 690.898 L1144.72 690.898 L1145.28 690.898 L1145.84 690.898 L1146.4 690.898 L1146.96 690.898 L1147.51 690.898 L1148.07 690.898 L1148.63 690.898 L1149.19 690.898 L1149.75 690.898 L1150.31 690.898 L1150.87 690.898 L1151.43 690.898 L1151.99 690.898 L1152.55 690.898 L1153.11 690.898 L1153.67 690.898 L1154.23 690.898 L1154.78 690.898 L1155.34 690.898 L1155.9 690.898 L1156.46 690.898 L1157.02 690.898 L1157.58 690.898 L1158.14 690.898 L1158.7 690.898 L1159.26 690.898 L1159.82 690.898 L1160.38 690.898 L1160.94 690.898 L1161.5 690.898 L1162.05 690.898 L1162.61 690.898 L1163.17 690.898 L1163.73 690.898 L1164.29 690.898 L1164.85 690.898 L1165.41 690.898 L1165.97 690.898 L1166.53 690.898 L1167.09 690.898 L1167.65 690.898 L1168.21 690.898 L1168.77 690.898 L1169.33 690.898 L1169.88 690.898 L1170.44 690.898 L1171 690.898 L1171.56 690.898 L1172.12 690.898 L1172.68 690.898 L1173.24 690.898 L1173.8 690.898 L1174.36 690.898 L1174.92 690.898 L1175.48 690.898 L1176.04 690.898 L1176.6 690.898 L1177.15 690.898 L1177.71 690.898 L1178.27 690.898 L1178.83 690.898 L1179.39 690.898 L1179.95 690.898 L1180.51 690.898 L1181.07 690.898 L1181.63 690.898 L1182.19 690.898 L1182.75 690.898 L1183.31 690.898 L1183.87 690.898 L1184.43 690.898 L1184.98 690.898 L1185.54 690.898 L1186.1 690.898 L1186.66 690.898 L1187.22 690.898 L1187.78 690.898 L1188.34 690.898 L1188.9 690.898 L1189.46 690.898 L1190.02 690.898 L1190.58 690.898 L1191.14 690.898 L1191.7 690.898 L1192.25 690.898 L1192.81 690.898 L1193.37 690.898 L1193.93 690.898 L1194.49 690.898 L1195.05 690.898 L1195.61 690.898 L1196.17 690.898 L1196.73 690.898 L1197.29 690.898 L1197.85 690.898 L1198.41 690.898 L1198.97 690.898 L1199.52 690.898 L1200.08 690.898 L1200.64 690.898 L1201.2 690.898 L1201.76 690.898 L1202.32 690.898 L1202.88 690.898 L1203.44 690.898 L1204 690.898 L1204.56 690.898 L1205.12 690.898 L1205.68 690.898 L1206.24 690.898 L1206.8 690.898 L1207.35 690.898 L1207.91 690.898 L1208.47 690.898 L1209.03 690.898 L1209.59 690.898 L1210.15 690.898 L1210.71 690.898 L1211.27 690.898 L1211.83 690.898 L1212.39 690.898 L1212.95 690.898 L1213.51 690.898 L1214.07 690.898 L1214.62 690.898 L1215.18 690.898 L1215.74 690.898 L1216.3 690.898 L1216.86 690.898 L1217.42 690.898 L1217.98 690.898 L1218.54 690.898 L1219.1 690.898 L1219.66 690.898 L1220.22 690.898 L1220.78 690.898 L1221.34 690.898 L1221.89 690.898 L1222.45 690.898 L1223.01 690.898 L1223.57 690.898 L1224.13 690.898 L1224.69 690.898 L1225.25 690.898 L1225.81 690.898 L1226.37 690.898 L1226.93 690.898 L1227.49 690.898 L1228.05 690.898 L1228.61 690.898 L1229.17 690.898 L1229.72 690.898 L1230.28 690.898 L1230.84 690.898 L1231.4 690.898 L1231.96 690.898 L1232.52 690.898 L1233.08 690.898 L1233.64 690.898 L1234.2 690.898 L1234.76 690.898 L1235.32 690.898 L1235.88 690.898 L1236.44 690.898 L1236.99 690.898 L1237.55 690.898 L1238.11 690.898 L1238.67 690.898 L1239.23 690.898 L1239.79 690.898 L1240.35 690.898 L1240.91 690.898 L1241.47 690.898 L1242.03 690.898 L1242.59 690.898 L1243.15 690.898 L1243.71 690.898 L1244.26 690.898 L1244.82 690.898 L1245.38 690.898 L1245.94 690.898 L1246.5 690.898 L1247.06 690.898 L1247.62 690.898 L1248.18 690.898 L1248.74 690.898 L1249.3 690.898 L1249.86 690.898 L1250.42 690.898 L1250.98 690.898 L1251.54 690.898 L1252.09 690.898 L1252.65 690.898 L1253.21 690.898 L1253.77 690.898 L1254.33 690.898 L1254.89 690.898 L1255.45 690.898 L1256.01 690.898 L1256.57 690.898 L1257.13 690.898 L1257.69 690.898 L1258.25 690.898 L1258.81 690.898 L1259.36 690.898 L1259.92 690.898 L1260.48 690.898 L1261.04 690.898 L1261.6 690.898 L1262.16 690.898 L1262.72 690.898 L1263.28 690.898 L1263.84 690.898 L1264.4 690.898 L1264.96 690.898 L1265.52 690.898 L1266.08 690.898 L1266.63 690.898 L1267.19 690.898 L1267.75 690.898 L1268.31 690.898 L1268.87 690.898 L1269.43 690.898 L1269.99 690.898 L1270.55 690.898 L1271.11 690.898 L1271.67 690.898 L1272.23 690.898 L1272.79 690.898 L1273.35 690.898 L1273.91 690.898 L1274.46 690.898 L1275.02 690.898 L1275.58 690.898 L1276.14 690.898 L1276.7 690.898 L1277.26 690.898 L1277.82 690.898 L1278.38 690.898 L1278.94 690.898 L1279.5 690.898 L1280.06 690.898 L1280.62 690.898 L1281.18 690.898 L1281.73 690.898 L1282.29 690.898 L1282.85 690.898 L1283.41 690.898 L1283.97 690.898 L1284.53 690.898 L1285.09 690.898 L1285.65 690.898 L1286.21 690.898 L1286.77 690.898 L1287.33 690.898 L1287.89 690.898 L1288.45 690.898 L1289 690.898 L1289.56 690.898 L1290.12 690.898 L1290.68 690.898 L1291.24 690.898 L1291.8 690.898 L1292.36 690.898 L1292.92 690.898 L1293.48 690.898 L1294.04 690.898 L1294.6 690.898 L1295.16 690.898 L1295.72 690.898 L1296.28 690.898 L1296.83 690.898 L1297.39 690.898 L1297.95 690.898 L1298.51 690.898 L1299.07 690.898 L1299.63 690.898 L1300.19 690.898 L1300.75 690.898 L1301.31 690.898 L1301.87 690.898 L1302.43 690.898 L1302.99 690.898 L1303.55 690.898 L1304.1 690.898 L1304.66 690.898 L1305.22 690.898 L1305.78 690.898 L1306.34 690.898 L1306.9 690.898 L1307.46 690.898 L1308.02 690.898 L1308.58 690.898 L1309.14 690.898 L1309.7 690.898 L1310.26 690.898 L1310.82 690.898 L1311.38 690.898 L1311.93 690.898 L1312.49 690.898 L1313.05 690.898 L1313.61 690.898 L1314.17 690.898 L1314.73 690.898 L1315.29 690.898 L1315.85 690.898 L1316.41 690.898 L1316.97 690.898 L1317.53 690.898 L1318.09 690.898 L1318.65 690.898 L1319.2 690.898 L1319.76 690.898 L1320.32 690.898 L1320.88 690.898 L1321.44 690.898 L1322 690.898 L1322.56 690.898 L1323.12 690.898 L1323.68 690.898 L1324.24 690.898 L1324.8 690.898 L1325.36 690.898 L1325.92 690.898 L1326.47 690.898 L1327.03 690.898 L1327.59 690.898 L1328.15 690.898 L1328.71 690.898 L1329.27 690.898 L1329.83 690.898 L1330.39 690.898 L1330.95 690.898 L1331.51 690.898 L1332.07 690.898 L1332.63 690.898 L1333.19 690.898 L1333.75 690.898 L1334.3 690.898 L1334.86 690.898 L1335.42 690.898 L1335.98 690.898 L1336.54 690.898 L1337.1 690.898 L1337.66 690.898 L1338.22 690.898 L1338.78 690.898 L1339.34 690.898 L1339.9 690.898 L1340.46 690.898 L1341.02 690.898 L1341.57 690.898 L1342.13 690.898 L1342.69 690.898 L1343.25 690.898 L1343.81 690.898 L1344.37 690.898 L1344.93 690.898 L1345.49 690.898 L1346.05 690.898 L1346.61 690.898 L1347.17 690.898 L1347.73 690.898 L1348.29 690.898 L1348.84 690.898 L1349.4 690.898 L1349.96 690.898 L1350.52 690.898 L1351.08 690.898 L1351.64 690.898 L1352.2 690.898 L1352.76 690.898 L1353.32 690.898 L1353.88 690.898 L1354.44 690.898 L1355 690.898 L1355.56 690.898 L1356.12 690.898 L1356.67 690.898 L1357.23 690.898 L1357.79 690.898 L1358.35 690.898 L1358.91 690.898 L1359.47 690.898 L1360.03 690.898 L1360.59 690.898 L1361.15 690.898 L1361.71 690.898 L1362.27 690.898 L1362.83 690.898 L1363.39 690.898 L1363.94 690.898 L1364.5 690.898 L1365.06 690.898 L1365.62 690.898 L1366.18 690.898 L1366.74 690.898 L1367.3 690.898 L1367.86 690.898 L1368.42 690.898 L1368.98 690.898 L1369.54 690.898 L1370.1 690.898 L1370.66 690.898 L1371.21 690.898 L1371.77 690.898 L1372.33 690.898 L1372.89 690.898 L1373.45 690.898 L1374.01 690.898 L1374.57 690.898 L1375.13 690.898 L1375.69 690.898 L1376.25 690.898 L1376.81 690.898 L1377.37 690.898 L1377.93 690.898 L1378.49 690.898 L1379.04 690.898 L1379.6 690.898 L1380.16 690.898 L1380.72 690.898 L1381.28 690.898 L1381.84 690.898 L1382.4 690.898 L1382.96 690.898 L1383.52 690.898 L1384.08 690.898 L1384.64 690.898 L1385.2 690.898 L1385.76 690.898 L1386.31 690.898 L1386.87 690.898 L1387.43 690.898 L1387.99 690.898 L1388.55 690.898 L1389.11 690.898 L1389.67 690.898 L1390.23 690.898 L1390.79 690.898 L1391.35 690.898 L1391.91 690.898 L1392.47 690.898 L1393.03 690.898 L1393.58 690.898 L1394.14 690.898 L1394.7 690.898 L1395.26 690.898 L1395.82 690.898 L1396.38 690.898 L1396.94 690.898 L1397.5 690.898 L1398.06 690.898 L1398.62 690.898 L1399.18 690.898 L1399.74 690.898 L1400.3 690.898 L1400.86 690.898 L1401.41 690.898 L1401.97 690.898 L1402.53 690.898 L1403.09 690.898 L1403.65 690.898 L1404.21 690.898 L1404.77 690.898 L1405.33 690.898 L1405.89 690.898 L1406.45 690.898 L1407.01 690.898 L1407.57 690.898 L1408.13 690.898 L1408.68 690.898 L1409.24 690.898 L1409.8 690.898 L1410.36 690.898 L1410.92 690.898 L1411.48 690.898 L1412.04 690.898 L1412.6 690.898 L1413.16 690.898 L1413.72 690.898 L1414.28 690.898 L1414.84 690.898 L1415.4 690.898 L1415.95 690.898 L1416.51 690.898 L1417.07 690.898 L1417.63 690.898 L1418.19 690.898 L1418.75 690.898 L1419.31 690.898 L1419.87 690.898 L1420.43 690.898 L1420.99 690.898 L1421.55 690.898 L1422.11 690.898 L1422.67 690.898 L1423.23 690.898 L1423.78 690.898 L1424.34 690.898 L1424.9 690.898 L1425.46 690.898 L1426.02 690.898 L1426.58 690.898 L1427.14 690.898 L1427.7 690.898 L1428.26 690.898 L1428.82 690.898 L1429.38 690.898 L1429.94 690.898 L1430.5 690.898 L1431.05 690.898 L1431.61 690.898 L1432.17 690.898 L1432.73 690.898 L1433.29 690.898 L1433.85 690.898 L1434.41 690.898 L1434.97 690.898 L1435.53 690.898 L1436.09 690.898 L1436.65 690.898 L1437.21 690.898 L1437.77 690.898 L1438.33 690.898 L1438.88 690.898 L1439.44 690.898 L1440 690.898 L1440.56 690.898 L1441.12 690.898 L1441.68 690.898 L1442.24 690.898 L1442.8 690.898 L1443.36 690.898 L1443.92 690.898 L1444.48 690.898 L1445.04 690.898 L1445.6 690.898 L1446.15 690.898 L1446.71 690.898 L1447.27 690.898 L1447.83 690.898 L1448.39 690.898 L1448.95 690.898 L1449.51 690.898 L1450.07 690.898 L1450.63 690.898 L1451.19 690.898 L1451.75 690.898 L1452.31 690.898 L1452.87 690.898 L1453.42 690.898 L1453.98 690.898 L1454.54 690.898 L1455.1 690.898 L1455.66 690.898 L1456.22 690.898 L1456.78 690.898 L1457.34 690.898 L1457.9 690.898 L1458.46 690.898 L1459.02 690.898 L1459.58 690.898 L1460.14 690.898 L1460.7 690.898 L1461.25 690.898 L1461.81 690.898 L1462.37 690.898 L1462.93 690.898 L1463.49 690.898 L1464.05 690.898 L1464.61 690.898 L1465.17 690.898 L1465.73 690.898 L1466.29 690.898 L1466.85 690.898 L1467.41 690.898 L1467.97 690.898 L1468.52 690.898 L1469.08 690.898 L1469.64 690.898 L1470.2 690.898 L1470.76 690.898 L1471.32 690.898 L1471.88 690.898 L1472.44 690.898 L1473 690.898 L1473.56 690.898 L1474.12 690.898 L1474.68 690.898 L1475.24 690.898 L1475.79 690.898 L1476.35 690.898 L1476.91 690.898 L1477.47 690.898 L1478.03 690.898 L1478.59 690.898 L1479.15 690.898 L1479.71 690.898 L1480.27 690.898 L1480.83 690.898 L1481.39 690.898 L1481.95 690.898 L1482.51 690.898 L1483.07 690.898 L1483.62 690.898 L1484.18 690.898 L1484.74 690.898 L1485.3 690.898 L1485.86 690.898 L1486.42 690.898 L1486.98 690.898 L1487.54 690.898 L1488.1 690.898 L1488.66 690.898 L1489.22 690.898 L1489.78 690.898 L1490.34 690.898 L1490.89 690.898 L1491.45 690.898 L1492.01 690.898 L1492.57 690.898 L1493.13 690.898 L1493.69 690.898 L1494.25 690.898 L1494.81 690.898 L1495.37 690.898 L1495.93 690.898 L1496.49 690.898 L1497.05 690.898 L1497.61 690.898 L1498.16 690.898 L1498.72 690.898 L1499.28 690.898 L1499.84 690.898 L1500.4 690.898 L1500.96 690.898 L1501.52 690.898 L1502.08 690.898 L1502.64 690.898 L1503.2 690.898 L1503.76 690.898 L1504.32 690.898 L1504.88 690.898 L1505.44 690.898 L1505.99 690.898 L1506.55 690.898 L1507.11 690.898 L1507.67 690.898 L1508.23 690.898 L1508.79 690.898 L1509.35 690.898 L1509.91 690.898 L1510.47 690.898 L1511.03 690.898 L1511.59 690.898 L1512.15 690.898 L1512.71 690.898 L1513.26 690.898 L1513.82 690.898 L1514.38 690.898 L1514.94 690.898 L1515.5 690.898 L1516.06 690.898 L1516.62 690.898 L1517.18 690.898 L1517.74 690.898 L1518.3 690.898 L1518.86 690.898 L1519.42 690.898 L1519.98 690.898 L1520.53 690.898 L1521.09 690.898 L1521.65 690.898 L1522.21 690.898 L1522.77 690.898 L1523.33 690.898 L1523.89 690.898 L1524.45 690.898 L1525.01 690.898 L1525.57 690.898 L1526.13 690.898 L1526.69 690.898 L1527.25 690.898 L1527.81 690.898 L1528.36 690.898 L1528.92 690.898 L1529.48 690.898 L1530.04 690.898 L1530.6 690.898 L1531.16 690.898 L1531.72 690.898 L1532.28 690.898 L1532.84 690.898 L1533.4 690.898 L1533.96 690.898 L1534.52 690.898 L1535.08 690.898 L1535.63 690.898 L1536.19 690.898 L1536.75 690.898 L1537.31 690.898 L1537.87 690.898 L1538.43 690.898 L1538.99 690.898 L1539.55 690.898 L1540.11 690.898 L1540.67 690.898 L1541.23 690.898 L1541.79 690.898 L1542.35 690.898 L1542.9 690.898 L1543.46 690.898 L1544.02 690.898 L1544.58 690.898 L1545.14 690.898 L1545.7 690.898 L1546.26 690.898 L1546.82 690.898 L1547.38 690.898 L1547.94 690.898 L1548.5 690.898 L1549.06 690.898 L1549.62 690.898 L1550.18 690.898 L1550.73 690.898 L1551.29 690.898 L1551.85 690.898 L1552.41 690.898 L1552.97 690.898 L1553.53 690.898 L1554.09 690.898 L1554.65 690.898 L1555.21 690.898 L1555.77 690.898 L1556.33 690.898 L1556.89 690.898 L1557.45 690.898 L1558 690.898 L1558.56 690.898 L1559.12 690.898 L1559.68 690.898 L1560.24 690.898 L1560.8 690.898 L1561.36 690.898 L1561.92 690.898 L1562.48 690.898 L1563.04 690.898 L1563.6 690.898 L1564.16 690.898 L1564.72 690.898 L1565.28 690.898 L1565.83 690.898 L1566.39 690.898 L1566.95 690.898 L1567.51 690.898 L1568.07 690.898 L1568.63 690.898 L1569.19 690.898 L1569.75 690.898 L1570.31 690.898 L1570.87 690.898 L1571.43 690.898 L1571.99 690.898 L1572.55 690.898 L1573.1 690.898 L1573.66 690.898 L1574.22 690.898 L1574.78 690.898 L1575.34 690.898 L1575.9 690.898 L1576.46 690.898 L1577.02 690.898 L1577.58 690.898 L1578.14 690.898 L1578.7 690.898 L1579.26 690.898 L1579.82 690.898 L1580.37 690.898 L1580.93 690.898 L1581.49 690.898 L1582.05 690.898 L1582.61 690.898 L1583.17 690.898 L1583.73 690.898 L1584.29 690.898 L1584.85 690.898 L1585.41 690.898 L1585.97 690.898 L1586.53 690.898 L1587.09 690.898 L1587.65 690.898 L1588.2 690.898 L1588.76 690.898 L1589.32 690.898 L1589.88 690.898 L1590.44 690.898 L1591 690.898 L1591.56 690.898 L1592.12 690.898 L1592.68 690.898 L1593.24 690.898 L1593.8 690.898 L1594.36 690.898 L1594.92 690.898 L1595.47 690.898 L1596.03 690.898 L1596.59 690.898 L1597.15 690.898 L1597.71 690.898 L1598.27 690.898 L1598.83 690.898 L1599.39 690.898 L1599.95 690.898 L1600.51 690.898 L1601.07 690.898 L1601.63 690.898 L1602.19 690.898 L1602.74 690.898 L1603.3 690.898 L1603.86 690.898 L1604.42 690.898 L1604.98 690.898 L1605.54 690.898 L1606.1 690.898 L1606.66 690.898 L1607.22 690.898 L1607.78 690.898 L1608.34 690.898 L1608.9 690.898 L1609.46 690.898 L1610.02 690.898 L1610.57 690.898 L1611.13 690.898 L1611.69 690.898 L1612.25 690.898 L1612.81 690.898 L1613.37 690.898 L1613.93 690.898 L1614.49 690.898 L1615.05 690.898 L1615.61 690.898 L1616.17 690.898 L1616.73 690.898 L1617.29 690.898 L1617.84 690.898 L1618.4 690.898 L1618.96 690.898 L1619.52 690.898 L1620.08 690.898 L1620.64 690.898 L1621.2 690.898 L1621.76 690.898 L1622.32 690.898 L1622.88 690.898 L1623.44 690.898 L1624 690.898 L1624.56 690.898 L1625.11 690.898 L1625.67 690.898 L1626.23 690.898 L1626.79 690.898 L1627.35 690.898 L1627.91 690.898 L1628.47 690.898 L1629.03 690.898 L1629.59 690.898 L1630.15 690.898 L1630.71 690.898 L1631.27 690.898 L1631.83 690.898 L1632.39 690.898 L1632.94 690.898 L1633.5 690.898 L1634.06 690.898 L1634.62 690.898 L1635.18 690.898 L1635.74 690.898 L1636.3 690.898 L1636.86 690.898 L1637.42 690.898 L1637.98 690.898 L1638.54 690.898 L1639.1 690.898 L1639.66 690.898 L1640.21 690.898 L1640.77 690.898 L1641.33 690.898 L1641.89 690.898 L1642.45 690.898 L1643.01 690.898 L1643.57 690.898 L1644.13 690.898 L1644.69 690.898 L1645.25 690.898 L1645.81 690.898 L1646.37 690.898 L1646.93 690.898 L1647.48 690.898 L1648.04 690.898 L1648.6 690.898 L1649.16 690.898 L1649.72 690.898 L1650.28 690.898 L1650.84 690.898 L1651.4 690.898 L1651.96 690.898 L1652.52 690.898 L1653.08 690.898 L1653.64 690.898 L1654.2 690.898 L1654.76 690.898 L1655.31 690.898 L1655.87 690.898 L1656.43 690.898 L1656.99 690.898 L1657.55 690.898 L1658.11 690.898 L1658.67 690.898 L1659.23 690.898 L1659.79 690.898 L1660.35 690.898 L1660.91 690.898 L1661.47 690.898 L1662.03 690.898 L1662.58 690.898 L1663.14 690.898 L1663.7 690.898 L1664.26 690.898 L1664.82 690.898 L1665.38 690.898 L1665.94 690.898 L1666.5 690.898 L1667.06 690.898 L1667.62 690.898 L1668.18 690.898 L1668.74 690.898 L1669.3 690.898 L1669.85 690.898 L1670.41 690.898 L1670.97 690.898 L1671.53 690.898 L1672.09 690.898 L1672.65 690.898 L1673.21 690.898 L1673.77 690.898 L1674.33 690.898 L1674.89 690.898 L1675.45 690.898 L1676.01 690.898 L1676.57 690.898 L1677.13 690.898 L1677.68 690.898 L1678.24 690.898 L1678.8 690.898 L1679.36 690.898 L1679.92 690.898 L1680.48 690.898 L1681.04 690.898 L1681.6 690.898 L1682.16 690.898 L1682.72 690.898 L1683.28 690.898 L1683.84 690.898 L1684.4 690.898 L1684.95 690.898 L1685.51 690.898 L1686.07 690.898 L1686.63 690.898 L1687.19 690.898 L1687.75 690.898 L1688.31 690.898 L1688.87 690.898 L1689.43 690.898 L1689.99 690.898 L1690.55 690.898 L1691.11 690.898 L1691.67 690.898 L1692.23 690.898 L1692.78 690.898 L1693.34 690.898 L1693.9 690.898 L1694.46 690.898 L1695.02 690.898 L1695.58 690.898 L1696.14 690.898 L1696.7 690.898 L1697.26 690.898 L1697.82 690.898 L1698.38 690.898 L1698.94 690.898 L1699.5 690.898 L1700.05 690.898 L1700.61 690.898 L1701.17 690.898 L1701.73 690.898 L1702.29 690.898 L1702.85 690.898 L1703.41 690.898 L1703.97 690.898 L1704.53 690.898 L1705.09 690.898 L1705.65 690.898 L1706.21 690.898 L1706.77 690.898 L1707.32 690.898 L1707.88 690.898 L1708.44 690.898 L1709 690.898 L1709.56 690.898 L1710.12 690.898 L1710.68 690.898 L1711.24 690.898 L1711.8 690.898 L1712.36 690.898 L1712.92 690.898 L1713.48 690.898 L1714.04 690.898 L1714.6 690.898 L1715.15 690.898 L1715.71 690.898 L1716.27 690.898 L1716.83 690.898 L1717.39 690.898 L1717.95 690.898 L1718.51 690.898 L1719.07 690.898 L1719.63 690.898 L1720.19 690.898 L1720.75 690.898 L1721.31 690.898 L1721.87 690.898 L1722.42 690.898 L1722.98 690.898 L1723.54 690.898 L1724.1 690.898 L1724.66 690.898 L1725.22 690.898 L1725.78 690.898 L1726.34 690.898 L1726.9 690.898 L1727.46 690.898 L1728.02 690.898 L1728.58 690.898 L1729.14 690.898 L1729.69 690.898 L1730.25 690.898 L1730.81 690.898 L1731.37 690.898 L1731.93 690.898 L1732.49 690.898 L1733.05 690.898 L1733.61 690.898 L1734.17 690.898 L1734.73 690.898 L1735.29 690.898 L1735.85 690.898 L1736.41 690.898 L1736.97 690.898 L1737.52 690.898 L1738.08 690.898 L1738.64 690.898 L1739.2 690.898 L1739.76 690.898 L1740.32 690.898 L1740.88 690.898 L1741.44 690.898 L1742 690.898 L1742.56 690.898 L1743.12 690.898 L1743.68 690.898 L1744.24 690.898 L1744.79 690.898 L1745.35 690.898 L1745.91 690.898 L1746.47 690.898 L1747.03 690.898 L1747.59 690.898 L1748.15 690.898 L1748.71 690.898 L1749.27 690.898 L1749.83 690.898 L1750.39 690.898 L1750.95 690.898 L1751.51 690.898 L1752.06 690.898 L1752.62 690.898 L1753.18 690.898 L1753.74 690.898 L1754.3 690.898 L1754.86 690.898 L1755.42 690.898 L1755.98 690.898 L1756.54 690.898 L1757.1 690.898 L1757.66 690.898 L1758.22 690.898 L1758.78 690.898 L1759.34 690.898 L1759.89 690.898 L1760.45 690.898 L1761.01 690.898 L1761.57 690.898 L1762.13 690.898 L1762.69 690.898 L1763.25 690.898 L1763.81 690.898 L1764.37 690.898 L1764.93 690.898 L1765.49 690.898 L1766.05 690.898 L1766.61 690.898 L1767.16 690.898 L1767.72 690.898 L1768.28 690.898 L1768.84 690.898 L1769.4 690.898 L1769.96 690.898 L1770.52 690.898 L1771.08 690.898 L1771.64 690.898 L1772.2 690.898 L1772.76 690.898 L1773.32 690.898 L1773.88 690.898 L1774.43 690.898 L1774.99 690.898 L1775.55 690.898 L1776.11 690.898 L1776.67 690.898 L1777.23 690.898 L1777.79 690.898 L1778.35 690.898 L1778.91 690.898 L1779.47 690.898 L1780.03 690.898 L1780.59 690.898 L1781.15 690.898 L1781.71 690.898 L1782.26 690.898 L1782.82 690.898 L1783.38 690.898 L1783.94 690.898 L1784.5 690.898 L1785.06 690.898 L1785.62 690.898 L1786.18 690.898 L1786.74 690.898 L1787.3 690.898 L1787.86 690.898 L1788.42 690.898 L1788.98 690.898 L1789.53 690.898 L1790.09 690.898 L1790.65 690.898 L1791.21 690.898 L1791.77 690.898 L1792.33 690.898 L1792.89 690.898 L1793.45 690.898 L1794.01 690.898 L1794.57 690.898 L1795.13 690.898 L1795.69 690.898 L1796.25 690.898 L1796.8 690.898 L1797.36 690.898 L1797.92 690.898 L1798.48 690.898 L1799.04 690.898 L1799.6 690.898 L1800.16 690.898 L1800.72 690.898 L1801.28 690.898 L1801.84 690.898 L1802.4 690.898 L1802.96 690.898 L1803.52 690.898 L1804.08 690.898 L1804.63 690.898 L1805.19 690.898 L1805.75 690.898 L1806.31 690.898 L1806.87 690.898 L1807.43 690.898 L1807.99 690.898 L1808.55 690.898 L1809.11 690.898 L1809.67 690.898 L1810.23 690.898 L1810.79 690.898 L1811.35 690.898 L1811.9 690.898 L1812.46 690.898 L1813.02 690.898 L1813.58 690.898 L1814.14 690.898 L1814.7 690.898 L1815.26 690.898 L1815.82 690.898 L1816.38 690.898 L1816.94 690.898 L1817.5 690.898 L1818.06 690.898 L1818.62 690.898 L1819.18 690.898 L1819.73 690.898 L1820.29 690.898 L1820.85 690.898 L1821.41 690.898 L1821.97 690.898 L1822.53 690.898 L1823.09 690.898 L1823.65 690.898 L1824.21 690.898 L1824.77 690.898 L1825.33 690.898 L1825.89 690.898 L1826.45 690.898 L1827 690.898 L1827.56 690.898 L1828.12 690.898 L1828.68 690.898 L1829.24 690.898 L1829.8 690.898 L1830.36 690.898 L1830.92 690.898 L1831.48 690.898 L1832.04 690.898 L1832.6 690.898 L1833.16 690.898 L1833.72 690.898 L1834.27 690.898 L1834.83 690.898 L1835.39 690.898 L1835.95 690.898 L1836.51 690.898 L1837.07 690.898 L1837.63 690.898 L1838.19 690.898 L1838.19 682.661 L1837.63 682.661 L1837.07 682.661 L1836.51 682.661 L1835.95 682.661 L1835.39 682.661 L1834.83 682.661 L1834.27 682.661 L1833.72 682.661 L1833.16 682.661 L1832.6 682.661 L1832.04 682.661 L1831.48 682.661 L1830.92 682.661 L1830.36 682.661 L1829.8 682.661 L1829.24 682.661 L1828.68 682.661 L1828.12 682.661 L1827.56 682.661 L1827 682.661 L1826.45 682.661 L1825.89 682.661 L1825.33 682.661 L1824.77 682.661 L1824.21 682.661 L1823.65 682.661 L1823.09 682.661 L1822.53 682.661 L1821.97 682.661 L1821.41 682.661 L1820.85 682.661 L1820.29 682.661 L1819.73 682.661 L1819.18 682.661 L1818.62 682.661 L1818.06 682.661 L1817.5 682.661 L1816.94 682.661 L1816.38 682.661 L1815.82 682.661 L1815.26 682.661 L1814.7 682.661 L1814.14 682.661 L1813.58 682.661 L1813.02 682.661 L1812.46 682.661 L1811.9 682.661 L1811.35 682.661 L1810.79 682.661 L1810.23 682.661 L1809.67 682.661 L1809.11 682.661 L1808.55 682.661 L1807.99 682.661 L1807.43 682.661 L1806.87 682.661 L1806.31 682.661 L1805.75 682.661 L1805.19 682.661 L1804.63 682.661 L1804.08 682.661 L1803.52 682.661 L1802.96 682.661 L1802.4 682.661 L1801.84 682.661 L1801.28 682.661 L1800.72 682.661 L1800.16 682.661 L1799.6 682.661 L1799.04 682.661 L1798.48 682.661 L1797.92 682.661 L1797.36 682.661 L1796.8 682.661 L1796.25 682.661 L1795.69 682.661 L1795.13 682.661 L1794.57 682.661 L1794.01 682.661 L1793.45 682.661 L1792.89 682.661 L1792.33 682.661 L1791.77 682.661 L1791.21 682.661 L1790.65 682.661 L1790.09 682.661 L1789.53 682.661 L1788.98 682.661 L1788.42 682.661 L1787.86 682.661 L1787.3 682.661 L1786.74 682.661 L1786.18 682.661 L1785.62 682.661 L1785.06 682.661 L1784.5 682.661 L1783.94 682.661 L1783.38 682.661 L1782.82 682.661 L1782.26 682.661 L1781.71 682.661 L1781.15 682.661 L1780.59 682.661 L1780.03 682.661 L1779.47 682.661 L1778.91 682.661 L1778.35 682.661 L1777.79 682.661 L1777.23 682.661 L1776.67 682.661 L1776.11 682.661 L1775.55 682.661 L1774.99 682.661 L1774.43 682.661 L1773.88 682.661 L1773.32 682.661 L1772.76 682.661 L1772.2 682.661 L1771.64 682.661 L1771.08 682.661 L1770.52 682.661 L1769.96 682.661 L1769.4 682.661 L1768.84 682.661 L1768.28 682.661 L1767.72 682.661 L1767.16 682.661 L1766.61 682.661 L1766.05 682.661 L1765.49 682.661 L1764.93 682.661 L1764.37 682.661 L1763.81 682.661 L1763.25 682.661 L1762.69 682.661 L1762.13 682.661 L1761.57 682.661 L1761.01 682.661 L1760.45 682.661 L1759.89 682.661 L1759.34 682.661 L1758.78 682.661 L1758.22 682.661 L1757.66 682.661 L1757.1 682.661 L1756.54 682.661 L1755.98 682.661 L1755.42 682.661 L1754.86 682.661 L1754.3 682.661 L1753.74 682.661 L1753.18 682.661 L1752.62 682.661 L1752.06 682.661 L1751.51 682.661 L1750.95 682.661 L1750.39 682.661 L1749.83 682.661 L1749.27 682.661 L1748.71 682.661 L1748.15 682.661 L1747.59 682.661 L1747.03 682.661 L1746.47 682.661 L1745.91 682.661 L1745.35 682.661 L1744.79 682.661 L1744.24 682.661 L1743.68 682.661 L1743.12 682.661 L1742.56 682.661 L1742 682.661 L1741.44 682.661 L1740.88 682.661 L1740.32 682.661 L1739.76 682.661 L1739.2 682.661 L1738.64 682.661 L1738.08 682.661 L1737.52 682.661 L1736.97 682.661 L1736.41 682.661 L1735.85 682.661 L1735.29 682.661 L1734.73 682.661 L1734.17 682.661 L1733.61 682.661 L1733.05 682.661 L1732.49 682.661 L1731.93 682.661 L1731.37 682.661 L1730.81 682.661 L1730.25 682.661 L1729.69 682.661 L1729.14 682.661 L1728.58 682.661 L1728.02 682.661 L1727.46 682.661 L1726.9 682.661 L1726.34 682.661 L1725.78 682.661 L1725.22 682.661 L1724.66 682.661 L1724.1 682.661 L1723.54 682.661 L1722.98 682.661 L1722.42 682.661 L1721.87 682.661 L1721.31 682.661 L1720.75 682.661 L1720.19 682.661 L1719.63 682.661 L1719.07 682.661 L1718.51 682.661 L1717.95 682.661 L1717.39 682.661 L1716.83 682.661 L1716.27 682.661 L1715.71 682.661 L1715.15 682.661 L1714.6 682.661 L1714.04 682.661 L1713.48 682.661 L1712.92 682.661 L1712.36 682.661 L1711.8 682.661 L1711.24 682.661 L1710.68 682.661 L1710.12 682.661 L1709.56 682.661 L1709 682.661 L1708.44 682.661 L1707.88 682.661 L1707.32 682.661 L1706.77 682.661 L1706.21 682.661 L1705.65 682.661 L1705.09 682.661 L1704.53 682.661 L1703.97 682.661 L1703.41 682.661 L1702.85 682.661 L1702.29 682.661 L1701.73 682.661 L1701.17 682.661 L1700.61 682.661 L1700.05 682.661 L1699.5 682.661 L1698.94 682.661 L1698.38 682.661 L1697.82 682.661 L1697.26 682.661 L1696.7 682.661 L1696.14 682.661 L1695.58 682.661 L1695.02 682.661 L1694.46 682.661 L1693.9 682.661 L1693.34 682.661 L1692.78 682.661 L1692.23 682.661 L1691.67 682.661 L1691.11 682.661 L1690.55 682.661 L1689.99 682.661 L1689.43 682.661 L1688.87 682.661 L1688.31 682.661 L1687.75 682.661 L1687.19 682.661 L1686.63 682.661 L1686.07 682.661 L1685.51 682.661 L1684.95 682.661 L1684.4 682.661 L1683.84 682.661 L1683.28 682.661 L1682.72 682.661 L1682.16 682.661 L1681.6 682.661 L1681.04 682.661 L1680.48 682.661 L1679.92 682.661 L1679.36 682.661 L1678.8 682.661 L1678.24 682.661 L1677.68 682.661 L1677.13 682.661 L1676.57 682.661 L1676.01 682.661 L1675.45 682.661 L1674.89 682.661 L1674.33 682.661 L1673.77 682.661 L1673.21 682.661 L1672.65 682.661 L1672.09 682.661 L1671.53 682.661 L1670.97 682.661 L1670.41 682.661 L1669.85 682.661 L1669.3 682.661 L1668.74 682.661 L1668.18 682.661 L1667.62 682.661 L1667.06 682.661 L1666.5 682.661 L1665.94 682.661 L1665.38 682.661 L1664.82 682.661 L1664.26 682.661 L1663.7 682.661 L1663.14 682.661 L1662.58 682.661 L1662.03 682.661 L1661.47 682.661 L1660.91 682.661 L1660.35 682.661 L1659.79 682.661 L1659.23 682.661 L1658.67 682.661 L1658.11 682.661 L1657.55 682.661 L1656.99 682.661 L1656.43 682.661 L1655.87 682.661 L1655.31 682.661 L1654.76 682.661 L1654.2 682.661 L1653.64 682.661 L1653.08 682.661 L1652.52 682.661 L1651.96 682.661 L1651.4 682.661 L1650.84 682.661 L1650.28 682.661 L1649.72 682.661 L1649.16 682.661 L1648.6 682.661 L1648.04 682.661 L1647.48 682.661 L1646.93 682.661 L1646.37 682.661 L1645.81 682.661 L1645.25 682.661 L1644.69 682.661 L1644.13 682.661 L1643.57 682.661 L1643.01 682.661 L1642.45 682.661 L1641.89 682.661 L1641.33 682.661 L1640.77 682.661 L1640.21 682.661 L1639.66 682.661 L1639.1 682.661 L1638.54 682.661 L1637.98 682.661 L1637.42 682.661 L1636.86 682.661 L1636.3 682.661 L1635.74 682.661 L1635.18 682.661 L1634.62 682.661 L1634.06 682.661 L1633.5 682.661 L1632.94 682.661 L1632.39 682.661 L1631.83 682.661 L1631.27 682.661 L1630.71 682.661 L1630.15 682.661 L1629.59 682.661 L1629.03 682.661 L1628.47 682.661 L1627.91 682.661 L1627.35 682.661 L1626.79 682.661 L1626.23 682.661 L1625.67 682.661 L1625.11 682.661 L1624.56 682.661 L1624 682.661 L1623.44 682.661 L1622.88 682.661 L1622.32 682.661 L1621.76 682.661 L1621.2 682.661 L1620.64 682.661 L1620.08 682.661 L1619.52 682.661 L1618.96 682.661 L1618.4 682.661 L1617.84 682.661 L1617.29 682.661 L1616.73 682.661 L1616.17 682.661 L1615.61 682.661 L1615.05 682.661 L1614.49 682.661 L1613.93 682.661 L1613.37 682.661 L1612.81 682.661 L1612.25 682.661 L1611.69 682.661 L1611.13 682.661 L1610.57 682.661 L1610.02 682.661 L1609.46 682.661 L1608.9 682.661 L1608.34 682.661 L1607.78 682.661 L1607.22 682.661 L1606.66 682.661 L1606.1 682.661 L1605.54 682.661 L1604.98 682.661 L1604.42 682.661 L1603.86 682.661 L1603.3 682.661 L1602.74 682.661 L1602.19 682.661 L1601.63 682.661 L1601.07 682.661 L1600.51 682.661 L1599.95 682.661 L1599.39 682.661 L1598.83 682.661 L1598.27 682.661 L1597.71 682.661 L1597.15 682.661 L1596.59 682.661 L1596.03 682.661 L1595.47 682.661 L1594.92 682.661 L1594.36 682.661 L1593.8 682.661 L1593.24 682.661 L1592.68 682.661 L1592.12 682.661 L1591.56 682.661 L1591 682.661 L1590.44 682.661 L1589.88 682.661 L1589.32 682.661 L1588.76 682.661 L1588.2 682.661 L1587.65 682.661 L1587.09 682.661 L1586.53 682.661 L1585.97 682.661 L1585.41 682.661 L1584.85 682.661 L1584.29 682.661 L1583.73 682.661 L1583.17 682.661 L1582.61 682.661 L1582.05 682.661 L1581.49 682.661 L1580.93 682.661 L1580.37 682.661 L1579.82 682.661 L1579.26 682.661 L1578.7 682.661 L1578.14 682.661 L1577.58 682.661 L1577.02 682.661 L1576.46 682.661 L1575.9 682.661 L1575.34 682.661 L1574.78 682.661 L1574.22 682.661 L1573.66 682.661 L1573.1 682.661 L1572.55 682.661 L1571.99 682.661 L1571.43 682.661 L1570.87 682.661 L1570.31 682.661 L1569.75 682.661 L1569.19 682.661 L1568.63 682.661 L1568.07 682.661 L1567.51 682.661 L1566.95 682.661 L1566.39 682.661 L1565.83 682.661 L1565.28 682.661 L1564.72 682.661 L1564.16 682.661 L1563.6 682.661 L1563.04 682.661 L1562.48 682.661 L1561.92 682.661 L1561.36 682.661 L1560.8 682.661 L1560.24 682.661 L1559.68 682.661 L1559.12 682.661 L1558.56 682.661 L1558 682.661 L1557.45 682.661 L1556.89 682.661 L1556.33 682.661 L1555.77 682.661 L1555.21 682.661 L1554.65 682.661 L1554.09 682.661 L1553.53 682.661 L1552.97 682.661 L1552.41 682.661 L1551.85 682.661 L1551.29 682.661 L1550.73 682.661 L1550.18 682.661 L1549.62 682.661 L1549.06 682.661 L1548.5 682.661 L1547.94 682.661 L1547.38 682.661 L1546.82 682.661 L1546.26 682.661 L1545.7 682.661 L1545.14 682.661 L1544.58 682.661 L1544.02 682.661 L1543.46 682.661 L1542.9 682.661 L1542.35 682.661 L1541.79 682.661 L1541.23 682.661 L1540.67 682.661 L1540.11 682.661 L1539.55 682.661 L1538.99 682.661 L1538.43 682.661 L1537.87 682.661 L1537.31 682.661 L1536.75 682.661 L1536.19 682.661 L1535.63 682.661 L1535.08 682.661 L1534.52 682.661 L1533.96 682.661 L1533.4 682.661 L1532.84 682.661 L1532.28 682.661 L1531.72 682.661 L1531.16 682.661 L1530.6 682.661 L1530.04 682.661 L1529.48 682.661 L1528.92 682.661 L1528.36 682.661 L1527.81 682.661 L1527.25 682.661 L1526.69 682.661 L1526.13 682.661 L1525.57 682.661 L1525.01 682.661 L1524.45 682.661 L1523.89 682.661 L1523.33 682.661 L1522.77 682.661 L1522.21 682.661 L1521.65 682.661 L1521.09 682.661 L1520.53 682.661 L1519.98 682.661 L1519.42 682.661 L1518.86 682.661 L1518.3 682.661 L1517.74 682.661 L1517.18 682.661 L1516.62 682.661 L1516.06 682.661 L1515.5 682.661 L1514.94 682.661 L1514.38 682.661 L1513.82 682.661 L1513.26 682.661 L1512.71 682.661 L1512.15 682.661 L1511.59 682.661 L1511.03 682.661 L1510.47 682.661 L1509.91 682.661 L1509.35 682.661 L1508.79 682.661 L1508.23 682.661 L1507.67 682.661 L1507.11 682.661 L1506.55 682.661 L1505.99 682.661 L1505.44 682.661 L1504.88 682.661 L1504.32 682.661 L1503.76 682.661 L1503.2 682.661 L1502.64 682.661 L1502.08 682.661 L1501.52 682.661 L1500.96 682.661 L1500.4 682.661 L1499.84 682.661 L1499.28 682.661 L1498.72 682.661 L1498.16 682.661 L1497.61 682.661 L1497.05 682.661 L1496.49 682.661 L1495.93 682.661 L1495.37 682.661 L1494.81 682.661 L1494.25 682.661 L1493.69 682.661 L1493.13 682.661 L1492.57 682.661 L1492.01 682.661 L1491.45 682.661 L1490.89 682.661 L1490.34 682.661 L1489.78 682.661 L1489.22 682.661 L1488.66 682.661 L1488.1 682.661 L1487.54 682.661 L1486.98 682.661 L1486.42 682.661 L1485.86 682.661 L1485.3 682.661 L1484.74 682.661 L1484.18 682.661 L1483.62 682.661 L1483.07 682.661 L1482.51 682.661 L1481.95 682.661 L1481.39 682.661 L1480.83 682.661 L1480.27 682.661 L1479.71 682.661 L1479.15 682.661 L1478.59 682.661 L1478.03 682.661 L1477.47 682.661 L1476.91 682.661 L1476.35 682.661 L1475.79 682.661 L1475.24 682.661 L1474.68 682.661 L1474.12 682.661 L1473.56 682.661 L1473 682.661 L1472.44 682.661 L1471.88 682.661 L1471.32 682.661 L1470.76 682.661 L1470.2 682.661 L1469.64 682.661 L1469.08 682.661 L1468.52 682.661 L1467.97 682.661 L1467.41 682.661 L1466.85 682.661 L1466.29 682.661 L1465.73 682.661 L1465.17 682.661 L1464.61 682.661 L1464.05 682.661 L1463.49 682.661 L1462.93 682.661 L1462.37 682.661 L1461.81 682.661 L1461.25 682.661 L1460.7 682.661 L1460.14 682.661 L1459.58 682.661 L1459.02 682.661 L1458.46 682.661 L1457.9 682.661 L1457.34 682.661 L1456.78 682.661 L1456.22 682.661 L1455.66 682.661 L1455.1 682.661 L1454.54 682.661 L1453.98 682.661 L1453.42 682.661 L1452.87 682.661 L1452.31 682.661 L1451.75 682.661 L1451.19 682.661 L1450.63 682.661 L1450.07 682.661 L1449.51 682.661 L1448.95 682.661 L1448.39 682.661 L1447.83 682.661 L1447.27 682.661 L1446.71 682.661 L1446.15 682.661 L1445.6 682.661 L1445.04 682.661 L1444.48 682.661 L1443.92 682.661 L1443.36 682.661 L1442.8 682.661 L1442.24 682.661 L1441.68 682.661 L1441.12 682.661 L1440.56 682.661 L1440 682.661 L1439.44 682.661 L1438.88 682.661 L1438.33 682.661 L1437.77 682.661 L1437.21 682.661 L1436.65 682.661 L1436.09 682.661 L1435.53 682.661 L1434.97 682.661 L1434.41 682.661 L1433.85 682.661 L1433.29 682.661 L1432.73 682.661 L1432.17 682.661 L1431.61 682.661 L1431.05 682.661 L1430.5 682.661 L1429.94 682.661 L1429.38 682.661 L1428.82 682.661 L1428.26 682.661 L1427.7 682.661 L1427.14 682.661 L1426.58 682.661 L1426.02 682.661 L1425.46 682.661 L1424.9 682.661 L1424.34 682.661 L1423.78 682.661 L1423.23 682.661 L1422.67 682.661 L1422.11 682.661 L1421.55 682.661 L1420.99 682.661 L1420.43 682.661 L1419.87 682.661 L1419.31 682.661 L1418.75 682.661 L1418.19 682.661 L1417.63 682.661 L1417.07 682.661 L1416.51 682.661 L1415.95 682.661 L1415.4 682.661 L1414.84 682.661 L1414.28 682.661 L1413.72 682.661 L1413.16 682.661 L1412.6 682.661 L1412.04 682.661 L1411.48 682.661 L1410.92 682.661 L1410.36 682.661 L1409.8 682.661 L1409.24 682.661 L1408.68 682.661 L1408.13 682.661 L1407.57 682.661 L1407.01 682.661 L1406.45 682.661 L1405.89 682.661 L1405.33 682.661 L1404.77 682.661 L1404.21 682.661 L1403.65 682.661 L1403.09 682.661 L1402.53 682.661 L1401.97 682.661 L1401.41 682.661 L1400.86 682.661 L1400.3 682.661 L1399.74 682.661 L1399.18 682.661 L1398.62 682.661 L1398.06 682.661 L1397.5 682.661 L1396.94 682.661 L1396.38 682.661 L1395.82 682.661 L1395.26 682.661 L1394.7 682.661 L1394.14 682.661 L1393.58 682.661 L1393.03 682.661 L1392.47 682.661 L1391.91 682.661 L1391.35 682.661 L1390.79 682.661 L1390.23 682.661 L1389.67 682.661 L1389.11 682.661 L1388.55 682.661 L1387.99 682.661 L1387.43 682.661 L1386.87 682.661 L1386.31 682.661 L1385.76 682.661 L1385.2 682.661 L1384.64 682.661 L1384.08 682.661 L1383.52 682.661 L1382.96 682.661 L1382.4 682.661 L1381.84 682.661 L1381.28 682.661 L1380.72 682.661 L1380.16 682.661 L1379.6 682.661 L1379.04 682.661 L1378.49 682.661 L1377.93 682.661 L1377.37 682.661 L1376.81 682.661 L1376.25 682.661 L1375.69 682.661 L1375.13 682.661 L1374.57 682.661 L1374.01 682.661 L1373.45 682.661 L1372.89 682.661 L1372.33 682.661 L1371.77 682.661 L1371.21 682.661 L1370.66 682.661 L1370.1 682.661 L1369.54 682.661 L1368.98 682.661 L1368.42 682.661 L1367.86 682.661 L1367.3 682.661 L1366.74 682.661 L1366.18 682.661 L1365.62 682.661 L1365.06 682.661 L1364.5 682.661 L1363.94 682.661 L1363.39 682.661 L1362.83 682.661 L1362.27 682.661 L1361.71 682.661 L1361.15 682.661 L1360.59 682.661 L1360.03 682.661 L1359.47 682.661 L1358.91 682.661 L1358.35 682.661 L1357.79 682.661 L1357.23 682.661 L1356.67 682.661 L1356.12 682.661 L1355.56 682.661 L1355 682.661 L1354.44 682.661 L1353.88 682.661 L1353.32 682.661 L1352.76 682.661 L1352.2 682.661 L1351.64 682.661 L1351.08 682.661 L1350.52 682.661 L1349.96 682.661 L1349.4 682.661 L1348.84 682.661 L1348.29 682.661 L1347.73 682.661 L1347.17 682.661 L1346.61 682.661 L1346.05 682.661 L1345.49 682.661 L1344.93 682.661 L1344.37 682.661 L1343.81 682.661 L1343.25 682.661 L1342.69 682.661 L1342.13 682.661 L1341.57 682.661 L1341.02 682.661 L1340.46 682.661 L1339.9 682.661 L1339.34 682.661 L1338.78 682.661 L1338.22 682.661 L1337.66 682.661 L1337.1 682.661 L1336.54 682.661 L1335.98 682.661 L1335.42 682.661 L1334.86 682.661 L1334.3 682.661 L1333.75 682.661 L1333.19 682.661 L1332.63 682.661 L1332.07 682.661 L1331.51 682.661 L1330.95 682.661 L1330.39 682.661 L1329.83 682.661 L1329.27 682.661 L1328.71 682.661 L1328.15 682.661 L1327.59 682.661 L1327.03 682.661 L1326.47 682.661 L1325.92 682.661 L1325.36 682.661 L1324.8 682.661 L1324.24 682.661 L1323.68 682.661 L1323.12 682.661 L1322.56 682.661 L1322 682.661 L1321.44 682.661 L1320.88 682.661 L1320.32 682.661 L1319.76 682.661 L1319.2 682.661 L1318.65 682.661 L1318.09 682.661 L1317.53 682.661 L1316.97 682.661 L1316.41 682.661 L1315.85 682.661 L1315.29 682.661 L1314.73 682.661 L1314.17 682.661 L1313.61 682.661 L1313.05 682.661 L1312.49 682.661 L1311.93 682.661 L1311.38 682.661 L1310.82 682.661 L1310.26 682.661 L1309.7 682.661 L1309.14 682.661 L1308.58 682.661 L1308.02 682.661 L1307.46 682.661 L1306.9 682.661 L1306.34 682.661 L1305.78 682.661 L1305.22 682.661 L1304.66 682.661 L1304.1 682.661 L1303.55 682.661 L1302.99 682.661 L1302.43 682.661 L1301.87 682.661 L1301.31 682.661 L1300.75 682.661 L1300.19 682.661 L1299.63 682.661 L1299.07 682.661 L1298.51 682.661 L1297.95 682.661 L1297.39 682.661 L1296.83 682.661 L1296.28 682.661 L1295.72 682.661 L1295.16 682.661 L1294.6 682.661 L1294.04 682.661 L1293.48 682.661 L1292.92 682.661 L1292.36 682.661 L1291.8 682.661 L1291.24 682.661 L1290.68 682.661 L1290.12 682.661 L1289.56 682.661 L1289 682.661 L1288.45 682.661 L1287.89 682.661 L1287.33 682.661 L1286.77 682.661 L1286.21 682.661 L1285.65 682.661 L1285.09 682.661 L1284.53 682.661 L1283.97 682.661 L1283.41 682.661 L1282.85 682.661 L1282.29 682.661 L1281.73 682.661 L1281.18 682.661 L1280.62 682.661 L1280.06 682.661 L1279.5 682.661 L1278.94 682.661 L1278.38 682.661 L1277.82 682.661 L1277.26 682.661 L1276.7 682.661 L1276.14 682.661 L1275.58 682.661 L1275.02 682.661 L1274.46 682.661 L1273.91 682.661 L1273.35 682.661 L1272.79 682.661 L1272.23 682.661 L1271.67 682.661 L1271.11 682.661 L1270.55 682.661 L1269.99 682.661 L1269.43 682.661 L1268.87 682.661 L1268.31 682.661 L1267.75 682.661 L1267.19 682.661 L1266.63 682.661 L1266.08 682.661 L1265.52 682.661 L1264.96 682.661 L1264.4 682.661 L1263.84 682.661 L1263.28 682.661 L1262.72 682.661 L1262.16 682.661 L1261.6 682.661 L1261.04 682.661 L1260.48 682.661 L1259.92 682.661 L1259.36 682.661 L1258.81 682.661 L1258.25 682.661 L1257.69 682.661 L1257.13 682.661 L1256.57 682.661 L1256.01 682.661 L1255.45 682.661 L1254.89 682.661 L1254.33 682.661 L1253.77 682.661 L1253.21 682.661 L1252.65 682.661 L1252.09 682.661 L1251.54 682.661 L1250.98 682.661 L1250.42 682.661 L1249.86 682.661 L1249.3 682.661 L1248.74 682.661 L1248.18 682.661 L1247.62 682.661 L1247.06 682.661 L1246.5 682.661 L1245.94 682.661 L1245.38 682.661 L1244.82 682.661 L1244.26 682.661 L1243.71 682.661 L1243.15 682.661 L1242.59 682.661 L1242.03 682.661 L1241.47 682.661 L1240.91 682.661 L1240.35 682.661 L1239.79 682.661 L1239.23 682.661 L1238.67 682.661 L1238.11 682.661 L1237.55 682.661 L1236.99 682.661 L1236.44 682.661 L1235.88 682.661 L1235.32 682.661 L1234.76 682.661 L1234.2 682.661 L1233.64 682.661 L1233.08 682.661 L1232.52 682.661 L1231.96 682.661 L1231.4 682.661 L1230.84 682.661 L1230.28 682.661 L1229.72 682.661 L1229.17 682.661 L1228.61 682.661 L1228.05 682.661 L1227.49 682.661 L1226.93 682.661 L1226.37 682.661 L1225.81 682.661 L1225.25 682.661 L1224.69 682.661 L1224.13 682.661 L1223.57 682.661 L1223.01 682.661 L1222.45 682.661 L1221.89 682.661 L1221.34 682.661 L1220.78 682.661 L1220.22 682.661 L1219.66 682.661 L1219.1 682.661 L1218.54 682.661 L1217.98 682.661 L1217.42 682.661 L1216.86 682.661 L1216.3 682.661 L1215.74 682.661 L1215.18 682.661 L1214.62 682.661 L1214.07 682.661 L1213.51 682.661 L1212.95 682.661 L1212.39 682.661 L1211.83 682.661 L1211.27 682.661 L1210.71 682.661 L1210.15 682.661 L1209.59 682.661 L1209.03 682.661 L1208.47 682.661 L1207.91 682.661 L1207.35 682.661 L1206.8 682.661 L1206.24 682.661 L1205.68 682.661 L1205.12 682.661 L1204.56 682.661 L1204 682.661 L1203.44 682.661 L1202.88 682.661 L1202.32 682.661 L1201.76 682.661 L1201.2 682.661 L1200.64 682.661 L1200.08 682.661 L1199.52 682.661 L1198.97 682.661 L1198.41 682.661 L1197.85 682.661 L1197.29 682.661 L1196.73 682.661 L1196.17 682.661 L1195.61 682.661 L1195.05 682.661 L1194.49 682.661 L1193.93 682.661 L1193.37 682.661 L1192.81 682.661 L1192.25 682.661 L1191.7 682.661 L1191.14 682.661 L1190.58 682.661 L1190.02 682.661 L1189.46 682.661 L1188.9 682.661 L1188.34 682.661 L1187.78 682.661 L1187.22 682.661 L1186.66 682.661 L1186.1 682.661 L1185.54 682.661 L1184.98 682.661 L1184.43 682.661 L1183.87 682.661 L1183.31 682.661 L1182.75 682.661 L1182.19 682.661 L1181.63 682.661 L1181.07 682.661 L1180.51 682.661 L1179.95 682.661 L1179.39 682.661 L1178.83 682.661 L1178.27 682.661 L1177.71 682.661 L1177.15 682.661 L1176.6 682.661 L1176.04 682.661 L1175.48 682.661 L1174.92 682.661 L1174.36 682.661 L1173.8 682.661 L1173.24 682.661 L1172.68 682.661 L1172.12 682.661 L1171.56 682.661 L1171 682.661 L1170.44 682.661 L1169.88 682.661 L1169.33 682.661 L1168.77 682.661 L1168.21 682.661 L1167.65 682.661 L1167.09 682.661 L1166.53 682.661 L1165.97 682.661 L1165.41 682.661 L1164.85 682.661 L1164.29 682.661 L1163.73 682.661 L1163.17 682.661 L1162.61 682.661 L1162.05 682.661 L1161.5 682.661 L1160.94 682.661 L1160.38 682.661 L1159.82 682.661 L1159.26 682.661 L1158.7 682.661 L1158.14 682.661 L1157.58 682.661 L1157.02 682.661 L1156.46 682.661 L1155.9 682.661 L1155.34 682.661 L1154.78 682.661 L1154.23 682.661 L1153.67 682.661 L1153.11 682.661 L1152.55 682.661 L1151.99 682.661 L1151.43 682.661 L1150.87 682.661 L1150.31 682.661 L1149.75 682.661 L1149.19 682.661 L1148.63 682.661 L1148.07 682.661 L1147.51 682.661 L1146.96 682.661 L1146.4 682.661 L1145.84 682.661 L1145.28 682.661 L1144.72 682.661 L1144.16 682.661 L1143.6 682.661 L1143.04 682.661 L1142.48 682.661 L1141.92 682.661 L1141.36 682.661 L1140.8 682.661 L1140.24 682.661 L1139.68 682.661 L1139.13 682.661 L1138.57 682.661 L1138.01 682.661 L1137.45 682.661 L1136.89 682.661 L1136.33 682.661 L1135.77 682.661 L1135.21 682.661 L1134.65 682.661 L1134.09 682.661 L1133.53 682.661 L1132.97 682.661 L1132.41 682.661 L1131.86 682.661 L1131.3 682.661 L1130.74 682.661 L1130.18 682.661 L1129.62 682.661 L1129.06 682.661 L1128.5 682.661 L1127.94 682.661 L1127.38 682.661 L1126.82 682.661 L1126.26 682.661 L1125.7 682.661 L1125.14 682.661 L1124.59 682.661 L1124.03 682.661 L1123.47 682.661 L1122.91 682.661 L1122.35 682.661 L1121.79 682.661 L1121.23 682.661 L1120.67 682.661 L1120.11 682.661 L1119.55 682.661 L1118.99 682.661 L1118.43 682.661 L1117.87 682.661 L1117.31 682.661 L1116.76 682.661 L1116.2 682.661 L1115.64 682.661 L1115.08 682.661 L1114.52 682.661 L1113.96 682.661 L1113.4 682.661 L1112.84 682.661 L1112.28 682.661 L1111.72 682.661 L1111.16 682.661 L1110.6 682.661 L1110.04 682.661 L1109.49 682.661 L1108.93 682.661 L1108.37 682.661 L1107.81 682.661 L1107.25 682.661 L1106.69 682.661 L1106.13 682.661 L1105.57 682.661 L1105.01 682.661 L1104.45 682.661 L1103.89 682.661 L1103.33 682.661 L1102.77 682.661 L1102.22 682.661 L1101.66 682.661 L1101.1 682.661 L1100.54 682.661 L1099.98 682.661 L1099.42 682.661 L1098.86 682.661 L1098.3 682.661 L1097.74 682.661 L1097.18 682.661 L1096.62 682.661 L1096.06 682.661 L1095.5 682.661 L1094.94 682.661 L1094.39 682.661 L1093.83 682.661 L1093.27 682.661 L1092.71 682.661 L1092.15 682.661 L1091.59 682.661 L1091.03 682.661 L1090.47 682.661 L1089.91 682.661 L1089.35 682.661 L1088.79 682.661 L1088.23 682.661 L1087.67 682.661 L1087.12 682.661 L1086.56 682.661 L1086 682.661 L1085.44 682.661 L1084.88 682.661 L1084.32 682.661 L1083.76 682.661 L1083.2 682.661 L1082.64 682.661 L1082.08 682.661 L1081.52 682.661 L1080.96 682.661 L1080.4 682.661 L1079.85 682.661 L1079.29 682.661 L1078.73 682.661 L1078.17 682.661 L1077.61 682.661 L1077.05 682.661 L1076.49 682.661 L1075.93 682.661 L1075.37 682.661 L1074.81 682.661 L1074.25 682.661 L1073.69 682.661 L1073.13 682.661 L1072.57 682.661 L1072.02 682.661 L1071.46 682.661 L1070.9 682.661 L1070.34 682.661 L1069.78 682.661 L1069.22 682.661 L1068.66 682.661 L1068.1 682.661 L1067.54 682.661 L1066.98 682.661 L1066.42 682.661 L1065.86 682.661 L1065.3 682.661 L1064.75 682.661 L1064.19 682.661 L1063.63 682.661 L1063.07 682.661 L1062.51 682.661 L1061.95 682.661 L1061.39 682.661 L1060.83 682.661 L1060.27 682.661 L1059.71 682.661 L1059.15 682.661 L1058.59 682.661 L1058.03 682.661 L1057.48 682.661 L1056.92 682.661 L1056.36 682.661 L1055.8 682.661 L1055.24 682.661 L1054.68 682.661 L1054.12 682.661 L1053.56 682.661 L1053 682.661 L1052.44 682.661 L1051.88 682.661 L1051.32 682.661 L1050.76 682.661 L1050.2 682.661 L1049.65 682.661 L1049.09 682.661 L1048.53 682.661 L1047.97 682.661 L1047.41 682.661 L1046.85 682.661 L1046.29 682.661 L1045.73 682.661 L1045.17 682.661 L1044.61 682.661 L1044.05 682.661 L1043.49 682.661 L1042.93 682.661 L1042.38 682.661 L1041.82 682.661 L1041.26 682.661 L1040.7 682.661 L1040.14 682.661 L1039.58 682.661 L1039.02 682.661 L1038.46 682.661 L1037.9 682.661 L1037.34 682.661 L1036.78 682.661 L1036.22 682.661 L1035.66 682.661 L1035.1 682.661 L1034.55 682.661 L1033.99 682.661 L1033.43 682.661 L1032.87 682.661 L1032.31 682.661 L1031.75 682.661 L1031.19 682.661 L1030.63 682.661 L1030.07 682.661 L1029.51 682.661 L1028.95 682.661 L1028.39 682.661 L1027.83 682.661 L1027.28 682.661 L1026.72 682.661 L1026.16 682.661 L1025.6 682.661 L1025.04 682.661 L1024.48 682.661 L1023.92 682.661 L1023.36 682.661 L1022.8 682.661 L1022.24 682.661 L1021.68 682.661 L1021.12 682.661 L1020.56 682.661 L1020.01 682.661 L1019.45 682.661 L1018.89 682.661 L1018.33 682.661 L1017.77 682.661 L1017.21 682.661 L1016.65 682.661 L1016.09 682.661 L1015.53 682.661 L1014.97 682.661 L1014.41 682.661 L1013.85 682.661 L1013.29 682.661 L1012.73 682.661 L1012.18 682.661 L1011.62 682.661 L1011.06 682.661 L1010.5 682.661 L1009.94 682.661 L1009.38 682.661 L1008.82 682.661 L1008.26 682.661 L1007.7 682.661 L1007.14 682.661 L1006.58 682.661 L1006.02 682.661 L1005.46 682.661 L1004.91 682.661 L1004.35 682.661 L1003.79 682.661 L1003.23 682.661 L1002.67 682.661 L1002.11 682.661 L1001.55 682.661 L1000.99 682.661 L1000.43 682.661 L999.872 682.661 L999.313 682.661 L998.754 682.661 L998.194 682.661 L997.635 682.661 L997.076 682.661 L996.517 682.661 L995.957 682.661 L995.398 682.661 L994.839 682.661 L994.28 682.661 L993.72 682.661 L993.161 682.661 L992.602 682.661 L992.043 682.661 L991.483 682.661 L990.924 682.661 L990.365 682.661 L989.806 682.661 L989.246 682.661 L988.687 682.661 L988.128 682.661 L987.569 682.661 L987.009 682.661 L986.45 682.661 L985.891 682.661 L985.332 682.661 L984.772 682.661 L984.213 682.661 L983.654 682.661 L983.095 682.661 L982.535 682.661 L981.976 682.661 L981.417 682.661 L980.858 682.661 L980.298 682.661 L979.739 682.661 L979.18 682.661 L978.621 682.661 L978.061 682.661 L977.502 682.661 L976.943 682.661 L976.384 682.661 L975.824 682.661 L975.265 682.661 L974.706 682.661 L974.147 682.661 L973.587 682.661 L973.028 682.661 L972.469 682.661 L971.91 682.661 L971.35 682.661 L970.791 682.661 L970.232 682.661 L969.673 682.661 L969.113 682.661 L968.554 682.661 L967.995 682.661 L967.436 682.661 L966.876 682.661 L966.317 682.661 L965.758 682.661 L965.199 682.661 L964.639 682.661 L964.08 682.661 L963.521 682.661 L962.962 682.661 L962.402 682.661 L961.843 682.661 L961.284 682.661 L960.725 682.661 L960.165 682.661 L959.606 682.661 L959.047 682.661 L958.488 682.661 L957.928 682.661 L957.369 682.661 L956.81 682.661 L956.251 682.661 L955.691 682.661 L955.132 682.661 L954.573 682.661 L954.014 682.661 L953.454 682.661 L952.895 682.661 L952.336 682.661 L951.777 682.661 L951.217 682.661 L950.658 682.661 L950.099 682.661 L949.54 682.661 L948.98 682.661 L948.421 682.661 L947.862 682.661 L947.303 682.661 L946.743 682.661 L946.184 682.661 L945.625 682.661 L945.066 682.661 L944.506 682.661 L943.947 682.661 L943.388 682.661 L942.829 682.661 L942.269 682.661 L941.71 682.661 L941.151 682.661 L940.592 682.661 L940.032 682.661 L939.473 682.661 L938.914 682.661 L938.355 682.661 L937.795 682.661 L937.236 682.661 L936.677 682.661 L936.118 682.661 L935.558 682.661 L934.999 682.661 L934.44 682.661 L933.881 682.661 L933.321 682.661 L932.762 682.661 L932.203 682.661 L931.644 682.661 L931.084 682.661 L930.525 682.661 L929.966 682.661 L929.406 682.661 L928.847 682.661 L928.288 682.661 L927.729 682.661 L927.169 682.661 L926.61 682.661 L926.051 682.661 L925.492 682.661 L924.932 682.661 L924.373 682.661 L923.814 682.661 L923.255 682.661 L922.695 682.661 L922.136 682.661 L921.577 682.661 L921.018 682.661 L920.458 682.661 L919.899 682.661 L919.34 682.661 L918.781 682.661 L918.221 682.661 L917.662 682.661 L917.103 682.661 L916.544 682.661 L915.984 682.661 L915.425 682.661 L914.866 682.661 L914.307 682.661 L913.747 682.661 L913.188 682.661 L912.629 682.661 L912.07 682.661 L911.51 682.661 L910.951 682.661 L910.392 682.661 L909.833 682.661 L909.273 682.661 L908.714 682.661 L908.155 682.661 L907.596 682.661 L907.036 682.661 L906.477 682.661 L905.918 682.661 L905.359 682.661 L904.799 682.661 L904.24 682.661 L903.681 682.661 L903.122 682.661 L902.562 682.661 L902.003 682.661 L901.444 682.661 L900.885 682.661 L900.325 682.661 L899.766 682.661 L899.207 682.661 L898.648 682.661 L898.088 682.661 L897.529 682.661 L896.97 682.661 L896.411 682.661 L895.851 682.661 L895.292 682.661 L894.733 682.661 L894.174 682.661 L893.614 682.661 L893.055 682.661 L892.496 682.661 L891.937 682.661 L891.377 682.661 L890.818 682.661 L890.259 682.661 L889.7 682.661 L889.14 682.661 L888.581 682.661 L888.022 682.661 L887.463 682.661 L886.903 682.661 L886.344 682.661 L885.785 682.661 L885.226 682.661 L884.666 682.661 L884.107 682.661 L883.548 682.661 L882.989 682.661 L882.429 682.661 L881.87 682.661 L881.311 682.661 L880.752 682.661 L880.192 682.661 L879.633 682.661 L879.074 682.661 L878.515 682.661 L877.955 682.661 L877.396 682.661 L876.837 682.661 L876.278 682.661 L875.718 682.661 L875.159 682.661 L874.6 682.661 L874.041 682.661 L873.481 682.661 L872.922 682.661 L872.363 682.661 L871.804 682.661 L871.244 682.661 L870.685 682.661 L870.126 682.661 L869.567 682.661 L869.007 682.661 L868.448 682.661 L867.889 682.661 L867.33 682.661 L866.77 682.661 L866.211 682.661 L865.652 682.661 L865.093 682.661 L864.533 682.661 L863.974 682.661 L863.415 682.661 L862.856 682.661 L862.296 682.661 L861.737 682.661 L861.178 682.661 L860.619 682.661 L860.059 682.661 L859.5 682.661 L858.941 682.661 L858.382 682.661 L857.822 682.661 L857.263 682.661 L856.704 682.661 L856.145 682.661 L855.585 682.661 L855.026 682.661 L854.467 682.661 L853.908 682.661 L853.348 682.661 L852.789 682.661 L852.23 682.661 L851.671 682.661 L851.111 682.661 L850.552 682.661 L849.993 682.661 L849.434 682.661 L848.874 682.661 L848.315 682.661 L847.756 682.661 L847.197 682.661 L846.637 682.661 L846.078 682.661 L845.519 682.661 L844.96 682.661 L844.4 682.661 L843.841 682.661 L843.282 682.661 L842.723 682.661 L842.163 682.661 L841.604 682.661 L841.045 682.661 L840.486 682.661 L839.926 682.661 L839.367 682.661 L838.808 682.661 L838.249 682.661 L837.689 682.661 L837.13 682.661 L836.571 682.661 L836.012 682.661 L835.452 682.661 L834.893 682.661 L834.334 682.661 L833.775 682.661 L833.215 682.661 L832.656 682.661 L832.097 682.661 L831.538 682.661 L830.978 682.661 L830.419 682.661 L829.86 682.661 L829.301 682.661 L828.741 682.661 L828.182 682.661 L827.623 682.661 L827.064 682.661 L826.504 682.661 L825.945 682.661 L825.386 682.661 L824.827 682.661 L824.267 682.661 L823.708 682.661 L823.149 682.661 L822.59 682.661 L822.03 682.661 L821.471 682.661 L820.912 682.661 L820.353 682.661 L819.793 682.661 L819.234 682.661 L818.675 682.661 L818.116 682.661 L817.556 682.661 L816.997 682.661 L816.438 682.661 L815.879 682.661 L815.319 682.661 L814.76 682.661 L814.201 682.661 L813.642 682.661 L813.082 682.661 L812.523 682.661 L811.964 682.661 L811.405 682.661 L810.845 682.661 L810.286 682.661 L809.727 682.661 L809.168 682.661 L808.608 682.661 L808.049 682.661 L807.49 682.661 L806.931 682.661 L806.371 682.661 L805.812 682.661 L805.253 682.661 L804.693 682.661 L804.134 682.661 L803.575 682.661 L803.016 682.661 L802.456 682.661 L801.897 682.661 L801.338 682.661 L800.779 682.661 L800.219 682.661 L799.66 682.661 L799.101 682.661 L798.542 682.661 L797.982 682.661 L797.423 682.661 L796.864 682.661 L796.305 682.661 L795.745 682.661 L795.186 682.661 L794.627 682.661 L794.068 682.661 L793.508 682.661 L792.949 682.661 L792.39 682.661 L791.831 682.661 L791.271 682.661 L790.712 682.661 L790.153 682.661 L789.594 682.661 L789.034 682.661 L788.475 682.661 L787.916 682.661 L787.357 682.661 L786.797 682.661 L786.238 682.661 L785.679 682.661 L785.12 682.661 L784.56 682.661 L784.001 682.661 L783.442 682.661 L782.883 682.661 L782.323 682.661 L781.764 682.661 L781.205 682.661 L780.646 682.661 L780.086 682.661 L779.527 682.661 L778.968 682.661 L778.409 682.661 L777.849 682.661 L777.29 682.661 L776.731 682.661 L776.172 682.661 L775.612 682.661 L775.053 682.661 L774.494 682.661 L773.935 682.661 L773.375 682.661 L772.816 682.661 L772.257 682.661 L771.698 682.661 L771.138 682.661 L770.579 682.661 L770.02 682.661 L769.461 682.661 L768.901 682.661 L768.342 682.661 L767.783 682.661 L767.224 682.661 L766.664 682.661 L766.105 682.661 L765.546 682.661 L764.987 682.661 L764.427 682.661 L763.868 682.661 L763.309 682.661 L762.75 682.661 L762.19 682.661 L761.631 682.661 L761.072 682.661 L760.513 682.661 L759.953 682.661 L759.394 682.661 L758.835 682.661 L758.276 682.661 L757.716 682.661 L757.157 682.661 L756.598 682.661 L756.039 682.661 L755.479 682.661 L754.92 682.661 L754.361 682.661 L753.802 682.661 L753.242 682.661 L752.683 682.661 L752.124 682.661 L751.565 682.661 L751.005 682.661 L750.446 682.661 L749.887 682.661 L749.328 682.661 L748.768 682.661 L748.209 682.661 L747.65 682.661 L747.091 682.661 L746.531 682.661 L745.972 682.661 L745.413 682.661 L744.854 682.661 L744.294 682.661 L743.735 682.661 L743.176 682.661 L742.617 682.661 L742.057 682.661 L741.498 682.661 L740.939 682.661 L740.38 682.661 L739.82 682.661 L739.261 682.661 L738.702 682.661 L738.143 682.661 L737.583 682.661 L737.024 682.661 L736.465 682.661 L735.906 682.661 L735.346 682.661 L734.787 682.661 L734.228 682.661 L733.669 682.661 L733.109 682.661 L732.55 682.661 L731.991 682.661 L731.432 682.661 L730.872 682.661 L730.313 682.661 L729.754 682.661 L729.195 682.661 L728.635 682.661 L728.076 682.661 L727.517 682.661 L726.958 682.661 L726.398 682.661 L725.839 682.661 L725.28 682.661 L724.721 682.661 L724.161 682.661 L723.602 682.661 L723.043 682.661 L722.484 682.661 L721.924 682.661 L721.365 682.661 L720.806 682.661 L720.247 682.661  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.779 720.806,686.779 721.365,686.779 721.924,686.779 722.484,686.779 723.043,686.779 723.602,686.779 724.161,686.779 724.721,686.779 725.28,686.779 725.839,686.779 726.398,686.779 726.958,686.779 727.517,686.779 728.076,686.779 728.635,686.779 729.195,686.779 729.754,686.779 730.313,686.779 730.872,686.779 731.432,686.779 731.991,686.779 732.55,686.779 733.109,686.779 733.669,686.779 734.228,686.779 734.787,686.779 735.346,686.779 735.906,686.779 736.465,686.779 737.024,686.779 737.583,686.779 738.143,686.779 738.702,686.779 739.261,686.779 739.82,686.779 740.38,686.779 740.939,686.779 741.498,686.779 742.057,686.779 742.617,686.779 743.176,686.779 743.735,686.779 744.294,686.779 744.854,686.779 745.413,686.779 745.972,686.779 746.531,686.779 747.091,686.779 747.65,686.779 748.209,686.779 748.768,686.779 749.328,686.779 749.887,686.779 750.446,686.779 751.005,686.779 751.565,686.779 752.124,686.779 752.683,686.779 753.242,686.779 753.802,686.779 754.361,686.779 754.92,686.779 755.479,686.779 756.039,686.779 756.598,686.779 757.157,686.779 757.716,686.779 758.276,686.779 758.835,686.779 759.394,686.779 759.953,686.779 760.513,686.779 761.072,686.779 761.631,686.779 762.19,686.779 762.75,686.779 763.309,686.779 763.868,686.779 764.427,686.779 764.987,686.779 765.546,686.779 766.105,686.779 766.664,686.779 767.224,686.779 767.783,686.779 768.342,686.779 768.901,686.779 769.461,686.779 770.02,686.779 770.579,686.779 771.138,686.779 771.698,686.779 772.257,686.779 772.816,686.779 773.375,686.779 773.935,686.779 774.494,686.779 775.053,686.779 775.612,686.779 776.172,686.779 776.731,686.779 777.29,686.779 777.849,686.779 778.409,686.779 778.968,686.779 779.527,686.779 780.086,686.779 780.646,686.779 781.205,686.779 781.764,686.779 782.323,686.779 782.883,686.779 783.442,686.779 784.001,686.779 784.56,686.779 785.12,686.779 785.679,686.779 786.238,686.779 786.797,686.779 787.357,686.779 787.916,686.779 788.475,686.779 789.034,686.779 789.594,686.779 790.153,686.779 790.712,686.779 791.271,686.779 791.831,686.779 792.39,686.779 792.949,686.779 793.508,686.779 794.068,686.779 794.627,686.779 795.186,686.779 795.745,686.779 796.305,686.779 796.864,686.779 797.423,686.779 797.982,686.779 798.542,686.779 799.101,686.779 799.66,686.779 800.219,686.779 800.779,686.779 801.338,686.779 801.897,686.779 802.456,686.779 803.016,686.779 803.575,686.779 804.134,686.779 804.693,686.779 805.253,686.779 805.812,686.779 806.371,686.779 806.931,686.779 807.49,686.779 808.049,686.779 808.608,686.779 809.168,686.779 809.727,686.779 810.286,686.779 810.845,686.779 811.405,686.779 811.964,686.779 812.523,686.779 813.082,686.779 813.642,686.779 814.201,686.779 814.76,686.779 815.319,686.779 815.879,686.779 816.438,686.779 816.997,686.779 817.556,686.779 818.116,686.779 818.675,686.779 819.234,686.779 819.793,686.779 820.353,686.779 820.912,686.779 821.471,686.779 822.03,686.779 822.59,686.779 823.149,686.779 823.708,686.779 824.267,686.779 824.827,686.779 825.386,686.779 825.945,686.779 826.504,686.779 827.064,686.779 827.623,686.779 828.182,686.779 828.741,686.779 829.301,686.779 829.86,686.779 830.419,686.779 830.978,686.779 831.538,686.779 832.097,686.779 832.656,686.779 833.215,686.779 833.775,686.779 834.334,686.779 834.893,686.779 835.452,686.779 836.012,686.779 836.571,686.779 837.13,686.779 837.689,686.779 838.249,686.779 838.808,686.779 839.367,686.779 839.926,686.779 840.486,686.779 841.045,686.779 841.604,686.779 842.163,686.779 842.723,686.779 843.282,686.779 843.841,686.779 844.4,686.779 844.96,686.779 845.519,686.779 846.078,686.779 846.637,686.779 847.197,686.779 847.756,686.779 848.315,686.779 848.874,686.779 849.434,686.779 849.993,686.779 850.552,686.779 851.111,686.779 851.671,686.779 852.23,686.779 852.789,686.779 853.348,686.779 853.908,686.779 854.467,686.779 855.026,686.779 855.585,686.779 856.145,686.779 856.704,686.779 857.263,686.779 857.822,686.779 858.382,686.779 858.941,686.779 859.5,686.779 860.059,686.779 860.619,686.779 861.178,686.779 861.737,686.779 862.296,686.779 862.856,686.779 863.415,686.779 863.974,686.779 864.533,686.779 865.093,686.779 865.652,686.779 866.211,686.779 866.77,686.779 867.33,686.779 867.889,686.779 868.448,686.779 869.007,686.779 869.567,686.779 870.126,686.779 870.685,686.779 871.244,686.779 871.804,686.779 872.363,686.779 872.922,686.779 873.481,686.779 874.041,686.779 874.6,686.779 875.159,686.779 875.718,686.779 876.278,686.779 876.837,686.779 877.396,686.779 877.955,686.779 878.515,686.779 879.074,686.779 879.633,686.779 880.192,686.779 880.752,686.779 881.311,686.779 881.87,686.779 882.429,686.779 882.989,686.779 883.548,686.779 884.107,686.779 884.666,686.779 885.226,686.779 885.785,686.779 886.344,686.779 886.903,686.779 887.463,686.779 888.022,686.779 888.581,686.779 889.14,686.779 889.7,686.779 890.259,686.779 890.818,686.779 891.377,686.779 891.937,686.779 892.496,686.779 893.055,686.779 893.614,686.779 894.174,686.779 894.733,686.779 895.292,686.779 895.851,686.779 896.411,686.779 896.97,686.779 897.529,686.779 898.088,686.779 898.648,686.779 899.207,686.779 899.766,686.779 900.325,686.779 900.885,686.779 901.444,686.779 902.003,686.779 902.562,686.779 903.122,686.779 903.681,686.779 904.24,686.779 904.799,686.779 905.359,686.779 905.918,686.779 906.477,686.779 907.036,686.779 907.596,686.779 908.155,686.779 908.714,686.779 909.273,686.779 909.833,686.779 910.392,686.779 910.951,686.779 911.51,686.779 912.07,686.779 912.629,686.779 913.188,686.779 913.747,686.779 914.307,686.779 914.866,686.779 915.425,686.779 915.984,686.779 916.544,686.779 917.103,686.779 917.662,686.779 918.221,686.779 918.781,686.779 919.34,686.779 919.899,686.779 920.458,686.779 921.018,686.779 921.577,686.779 922.136,686.779 922.695,686.779 923.255,686.779 923.814,686.779 924.373,686.779 924.932,686.779 925.492,686.779 926.051,686.779 926.61,686.779 927.169,686.779 927.729,686.779 928.288,686.779 928.847,686.779 929.406,686.779 929.966,686.779 930.525,686.779 931.084,686.779 931.644,686.779 932.203,686.779 932.762,686.779 933.321,686.779 933.881,686.779 934.44,686.779 934.999,686.779 935.558,686.779 936.118,686.779 936.677,686.779 937.236,686.779 937.795,686.779 938.355,686.779 938.914,686.779 939.473,686.779 940.032,686.779 940.592,686.779 941.151,686.779 941.71,686.779 942.269,686.779 942.829,686.779 943.388,686.779 943.947,686.779 944.506,686.779 945.066,686.779 945.625,686.779 946.184,686.779 946.743,686.779 947.303,686.779 947.862,686.779 948.421,686.779 948.98,686.779 949.54,686.779 950.099,686.779 950.658,686.779 951.217,686.779 951.777,686.779 952.336,686.779 952.895,686.779 953.454,686.779 954.014,686.779 954.573,686.779 955.132,686.779 955.691,686.779 956.251,686.779 956.81,686.779 957.369,686.779 957.928,686.779 958.488,686.779 959.047,686.779 959.606,686.779 960.165,686.779 960.725,686.779 961.284,686.779 961.843,686.779 962.402,686.779 962.962,686.779 963.521,686.779 964.08,686.779 964.639,686.779 965.199,686.779 965.758,686.779 966.317,686.779 966.876,686.779 967.436,686.779 967.995,686.779 968.554,686.779 969.113,686.779 969.673,686.779 970.232,686.779 970.791,686.779 971.35,686.779 971.91,686.779 972.469,686.779 973.028,686.779 973.587,686.779 974.147,686.779 974.706,686.779 975.265,686.779 975.824,686.779 976.384,686.779 976.943,686.779 977.502,686.779 978.061,686.779 978.621,686.779 979.18,686.779 979.739,686.779 980.298,686.779 980.858,686.779 981.417,686.779 981.976,686.779 982.535,686.779 983.095,686.779 983.654,686.779 984.213,686.779 984.772,686.779 985.332,686.779 985.891,686.779 986.45,686.779 987.009,686.779 987.569,686.779 988.128,686.779 988.687,686.779 989.246,686.779 989.806,686.779 990.365,686.779 990.924,686.779 991.483,686.779 992.043,686.779 992.602,686.779 993.161,686.779 993.72,686.779 994.28,686.779 994.839,686.779 995.398,686.779 995.957,686.779 996.517,686.779 997.076,686.779 997.635,686.779 998.194,686.779 998.754,686.779 999.313,686.779 999.872,686.779 1000.43,686.779 1000.99,686.779 1001.55,686.779 1002.11,686.779 1002.67,686.779 1003.23,686.779 1003.79,686.779 1004.35,686.779 1004.91,686.779 1005.46,686.779 1006.02,686.779 1006.58,686.779 1007.14,686.779 1007.7,686.779 1008.26,686.779 1008.82,686.779 1009.38,686.779 1009.94,686.779 1010.5,686.779 1011.06,686.779 1011.62,686.779 1012.18,686.779 1012.73,686.779 1013.29,686.779 1013.85,686.779 1014.41,686.779 1014.97,686.779 1015.53,686.779 1016.09,686.779 1016.65,686.779 1017.21,686.779 1017.77,686.779 1018.33,686.779 1018.89,686.779 1019.45,686.779 1020.01,686.779 1020.56,686.779 1021.12,686.779 1021.68,686.779 1022.24,686.779 1022.8,686.779 1023.36,686.779 1023.92,686.779 1024.48,686.779 1025.04,686.779 1025.6,686.779 1026.16,686.779 1026.72,686.779 1027.28,686.779 1027.83,686.779 1028.39,686.779 1028.95,686.779 1029.51,686.779 1030.07,686.779 1030.63,686.779 1031.19,686.779 1031.75,686.779 1032.31,686.779 1032.87,686.779 1033.43,686.779 1033.99,686.779 1034.55,686.779 1035.1,686.779 1035.66,686.779 1036.22,686.779 1036.78,686.779 1037.34,686.779 1037.9,686.779 1038.46,686.779 1039.02,686.779 1039.58,686.779 1040.14,686.779 1040.7,686.779 1041.26,686.779 1041.82,686.779 1042.38,686.779 1042.93,686.779 1043.49,686.779 1044.05,686.779 1044.61,686.779 1045.17,686.779 1045.73,686.779 1046.29,686.779 1046.85,686.779 1047.41,686.779 1047.97,686.779 1048.53,686.779 1049.09,686.779 1049.65,686.779 1050.2,686.779 1050.76,686.779 1051.32,686.779 1051.88,686.779 1052.44,686.779 1053,686.779 1053.56,686.779 1054.12,686.779 1054.68,686.779 1055.24,686.779 1055.8,686.779 1056.36,686.779 1056.92,686.779 1057.48,686.779 1058.03,686.779 1058.59,686.779 1059.15,686.779 1059.71,686.779 1060.27,686.779 1060.83,686.779 1061.39,686.779 1061.95,686.779 1062.51,686.779 1063.07,686.779 1063.63,686.779 1064.19,686.779 1064.75,686.779 1065.3,686.779 1065.86,686.779 1066.42,686.779 1066.98,686.779 1067.54,686.779 1068.1,686.779 1068.66,686.779 1069.22,686.779 1069.78,686.779 1070.34,686.779 1070.9,686.779 1071.46,686.779 1072.02,686.779 1072.57,686.779 1073.13,686.779 1073.69,686.779 1074.25,686.779 1074.81,686.779 1075.37,686.779 1075.93,686.779 1076.49,686.779 1077.05,686.779 1077.61,686.779 1078.17,686.779 1078.73,686.779 1079.29,686.779 1079.85,686.779 1080.4,686.779 1080.96,686.779 1081.52,686.779 1082.08,686.779 1082.64,686.779 1083.2,686.779 1083.76,686.779 1084.32,686.779 1084.88,686.779 1085.44,686.779 1086,686.779 1086.56,686.779 1087.12,686.779 1087.67,686.779 1088.23,686.779 1088.79,686.779 1089.35,686.779 1089.91,686.779 1090.47,686.779 1091.03,686.779 1091.59,686.779 1092.15,686.779 1092.71,686.779 1093.27,686.779 1093.83,686.779 1094.39,686.779 1094.94,686.779 1095.5,686.779 1096.06,686.779 1096.62,686.779 1097.18,686.779 1097.74,686.779 1098.3,686.779 1098.86,686.779 1099.42,686.779 1099.98,686.779 1100.54,686.779 1101.1,686.779 1101.66,686.779 1102.22,686.779 1102.77,686.779 1103.33,686.779 1103.89,686.779 1104.45,686.779 1105.01,686.779 1105.57,686.779 1106.13,686.779 1106.69,686.779 1107.25,686.779 1107.81,686.779 1108.37,686.779 1108.93,686.779 1109.49,686.779 1110.04,686.779 1110.6,686.779 1111.16,686.779 1111.72,686.779 1112.28,686.779 1112.84,686.779 1113.4,686.779 1113.96,686.779 1114.52,686.779 1115.08,686.779 1115.64,686.779 1116.2,686.779 1116.76,686.779 1117.31,686.779 1117.87,686.779 1118.43,686.779 1118.99,686.779 1119.55,686.779 1120.11,686.779 1120.67,686.779 1121.23,686.779 1121.79,686.779 1122.35,686.779 1122.91,686.779 1123.47,686.779 1124.03,686.779 1124.59,686.779 1125.14,686.779 1125.7,686.779 1126.26,686.779 1126.82,686.779 1127.38,686.779 1127.94,686.779 1128.5,686.779 1129.06,686.779 1129.62,686.779 1130.18,686.779 1130.74,686.779 1131.3,686.779 1131.86,686.779 1132.41,686.779 1132.97,686.779 1133.53,686.779 1134.09,686.779 1134.65,686.779 1135.21,686.779 1135.77,686.779 1136.33,686.779 1136.89,686.779 1137.45,686.779 1138.01,686.779 1138.57,686.779 1139.13,686.779 1139.68,686.779 1140.24,686.779 1140.8,686.779 1141.36,686.779 1141.92,686.779 1142.48,686.779 1143.04,686.779 1143.6,686.779 1144.16,686.779 1144.72,686.779 1145.28,686.779 1145.84,686.779 1146.4,686.779 1146.96,686.779 1147.51,686.779 1148.07,686.779 1148.63,686.779 1149.19,686.779 1149.75,686.779 1150.31,686.779 1150.87,686.779 1151.43,686.779 1151.99,686.779 1152.55,686.779 1153.11,686.779 1153.67,686.779 1154.23,686.779 1154.78,686.779 1155.34,686.779 1155.9,686.779 1156.46,686.779 1157.02,686.779 1157.58,686.779 1158.14,686.779 1158.7,686.779 1159.26,686.779 1159.82,686.779 1160.38,686.779 1160.94,686.779 1161.5,686.779 1162.05,686.779 1162.61,686.779 1163.17,686.779 1163.73,686.779 1164.29,686.779 1164.85,686.779 1165.41,686.779 1165.97,686.779 1166.53,686.779 1167.09,686.779 1167.65,686.779 1168.21,686.779 1168.77,686.779 1169.33,686.779 1169.88,686.779 1170.44,686.779 1171,686.779 1171.56,686.779 1172.12,686.779 1172.68,686.779 1173.24,686.779 1173.8,686.779 1174.36,686.779 1174.92,686.779 1175.48,686.779 1176.04,686.779 1176.6,686.779 1177.15,686.779 1177.71,686.779 1178.27,686.779 1178.83,686.779 1179.39,686.779 1179.95,686.779 1180.51,686.779 1181.07,686.779 1181.63,686.779 1182.19,686.779 1182.75,686.779 1183.31,686.779 1183.87,686.779 1184.43,686.779 1184.98,686.779 1185.54,686.779 1186.1,686.779 1186.66,686.779 1187.22,686.779 1187.78,686.779 1188.34,686.779 1188.9,686.779 1189.46,686.779 1190.02,686.779 1190.58,686.779 1191.14,686.779 1191.7,686.779 1192.25,686.779 1192.81,686.779 1193.37,686.779 1193.93,686.779 1194.49,686.779 1195.05,686.779 1195.61,686.779 1196.17,686.779 1196.73,686.779 1197.29,686.779 1197.85,686.779 1198.41,686.779 1198.97,686.779 1199.52,686.779 1200.08,686.779 1200.64,686.779 1201.2,686.779 1201.76,686.779 1202.32,686.779 1202.88,686.779 1203.44,686.779 1204,686.779 1204.56,686.779 1205.12,686.779 1205.68,686.779 1206.24,686.779 1206.8,686.779 1207.35,686.779 1207.91,686.779 1208.47,686.779 1209.03,686.779 1209.59,686.779 1210.15,686.779 1210.71,686.779 1211.27,686.779 1211.83,686.779 1212.39,686.779 1212.95,686.779 1213.51,686.779 1214.07,686.779 1214.62,686.779 1215.18,686.779 1215.74,686.779 1216.3,686.779 1216.86,686.779 1217.42,686.779 1217.98,686.779 1218.54,686.779 1219.1,686.779 1219.66,686.779 1220.22,686.779 1220.78,686.779 1221.34,686.779 1221.89,686.779 1222.45,686.779 1223.01,686.779 1223.57,686.779 1224.13,686.779 1224.69,686.779 1225.25,686.779 1225.81,686.779 1226.37,686.779 1226.93,686.779 1227.49,686.779 1228.05,686.779 1228.61,686.779 1229.17,686.779 1229.72,686.779 1230.28,686.779 1230.84,686.779 1231.4,686.779 1231.96,686.779 1232.52,686.779 1233.08,686.779 1233.64,686.779 1234.2,686.779 1234.76,686.779 1235.32,686.779 1235.88,686.779 1236.44,686.779 1236.99,686.779 1237.55,686.779 1238.11,686.779 1238.67,686.779 1239.23,686.779 1239.79,686.779 1240.35,686.779 1240.91,686.779 1241.47,686.779 1242.03,686.779 1242.59,686.779 1243.15,686.779 1243.71,686.779 1244.26,686.779 1244.82,686.779 1245.38,686.779 1245.94,686.779 1246.5,686.779 1247.06,686.779 1247.62,686.779 1248.18,686.779 1248.74,686.779 1249.3,686.779 1249.86,686.779 1250.42,686.779 1250.98,686.779 1251.54,686.779 1252.09,686.779 1252.65,686.779 1253.21,686.779 1253.77,686.779 1254.33,686.779 1254.89,686.779 1255.45,686.779 1256.01,686.779 1256.57,686.779 1257.13,686.779 1257.69,686.779 1258.25,686.779 1258.81,686.779 1259.36,686.779 1259.92,686.779 1260.48,686.779 1261.04,686.779 1261.6,686.779 1262.16,686.779 1262.72,686.779 1263.28,686.779 1263.84,686.779 1264.4,686.779 1264.96,686.779 1265.52,686.779 1266.08,686.779 1266.63,686.779 1267.19,686.779 1267.75,686.779 1268.31,686.779 1268.87,686.779 1269.43,686.779 1269.99,686.779 1270.55,686.779 1271.11,686.779 1271.67,686.779 1272.23,686.779 1272.79,686.779 1273.35,686.779 1273.91,686.779 1274.46,686.779 1275.02,686.779 1275.58,686.779 1276.14,686.779 1276.7,686.779 1277.26,686.779 1277.82,686.779 1278.38,686.779 1278.94,686.779 1279.5,686.779 1280.06,686.779 1280.62,686.779 1281.18,686.779 1281.73,686.779 1282.29,686.779 1282.85,686.779 1283.41,686.779 1283.97,686.779 1284.53,686.779 1285.09,686.779 1285.65,686.779 1286.21,686.779 1286.77,686.779 1287.33,686.779 1287.89,686.779 1288.45,686.779 1289,686.779 1289.56,686.779 1290.12,686.779 1290.68,686.779 1291.24,686.779 1291.8,686.779 1292.36,686.779 1292.92,686.779 1293.48,686.779 1294.04,686.779 1294.6,686.779 1295.16,686.779 1295.72,686.779 1296.28,686.779 1296.83,686.779 1297.39,686.779 1297.95,686.779 1298.51,686.779 1299.07,686.779 1299.63,686.779 1300.19,686.779 1300.75,686.779 1301.31,686.779 1301.87,686.779 1302.43,686.779 1302.99,686.779 1303.55,686.779 1304.1,686.779 1304.66,686.779 1305.22,686.779 1305.78,686.779 1306.34,686.779 1306.9,686.779 1307.46,686.779 1308.02,686.779 1308.58,686.779 1309.14,686.779 1309.7,686.779 1310.26,686.779 1310.82,686.779 1311.38,686.779 1311.93,686.779 1312.49,686.779 1313.05,686.779 1313.61,686.779 1314.17,686.779 1314.73,686.779 1315.29,686.779 1315.85,686.779 1316.41,686.779 1316.97,686.779 1317.53,686.779 1318.09,686.779 1318.65,686.779 1319.2,686.779 1319.76,686.779 1320.32,686.779 1320.88,686.779 1321.44,686.779 1322,686.779 1322.56,686.779 1323.12,686.779 1323.68,686.779 1324.24,686.779 1324.8,686.779 1325.36,686.779 1325.92,686.779 1326.47,686.779 1327.03,686.779 1327.59,686.779 1328.15,686.779 1328.71,686.779 1329.27,686.779 1329.83,686.779 1330.39,686.779 1330.95,686.779 1331.51,686.779 1332.07,686.779 1332.63,686.779 1333.19,686.779 1333.75,686.779 1334.3,686.779 1334.86,686.779 1335.42,686.779 1335.98,686.779 1336.54,686.779 1337.1,686.779 1337.66,686.779 1338.22,686.779 1338.78,686.779 1339.34,686.779 1339.9,686.779 1340.46,686.779 1341.02,686.779 1341.57,686.779 1342.13,686.779 1342.69,686.779 1343.25,686.779 1343.81,686.779 1344.37,686.779 1344.93,686.779 1345.49,686.779 1346.05,686.779 1346.61,686.779 1347.17,686.779 1347.73,686.779 1348.29,686.779 1348.84,686.779 1349.4,686.779 1349.96,686.779 1350.52,686.779 1351.08,686.779 1351.64,686.779 1352.2,686.779 1352.76,686.779 1353.32,686.779 1353.88,686.779 1354.44,686.779 1355,686.779 1355.56,686.779 1356.12,686.779 1356.67,686.779 1357.23,686.779 1357.79,686.779 1358.35,686.779 1358.91,686.779 1359.47,686.779 1360.03,686.779 1360.59,686.779 1361.15,686.779 1361.71,686.779 1362.27,686.779 1362.83,686.779 1363.39,686.779 1363.94,686.779 1364.5,686.779 1365.06,686.779 1365.62,686.779 1366.18,686.779 1366.74,686.779 1367.3,686.779 1367.86,686.779 1368.42,686.779 1368.98,686.779 1369.54,686.779 1370.1,686.779 1370.66,686.779 1371.21,686.779 1371.77,686.779 1372.33,686.779 1372.89,686.779 1373.45,686.779 1374.01,686.779 1374.57,686.779 1375.13,686.779 1375.69,686.779 1376.25,686.779 1376.81,686.779 1377.37,686.779 1377.93,686.779 1378.49,686.779 1379.04,686.779 1379.6,686.779 1380.16,686.779 1380.72,686.779 1381.28,686.779 1381.84,686.779 1382.4,686.779 1382.96,686.779 1383.52,686.779 1384.08,686.779 1384.64,686.779 1385.2,686.779 1385.76,686.779 1386.31,686.779 1386.87,686.779 1387.43,686.779 1387.99,686.779 1388.55,686.779 1389.11,686.779 1389.67,686.779 1390.23,686.779 1390.79,686.779 1391.35,686.779 1391.91,686.779 1392.47,686.779 1393.03,686.779 1393.58,686.779 1394.14,686.779 1394.7,686.779 1395.26,686.779 1395.82,686.779 1396.38,686.779 1396.94,686.779 1397.5,686.779 1398.06,686.779 1398.62,686.779 1399.18,686.779 1399.74,686.779 1400.3,686.779 1400.86,686.779 1401.41,686.779 1401.97,686.779 1402.53,686.779 1403.09,686.779 1403.65,686.779 1404.21,686.779 1404.77,686.779 1405.33,686.779 1405.89,686.779 1406.45,686.779 1407.01,686.779 1407.57,686.779 1408.13,686.779 1408.68,686.779 1409.24,686.779 1409.8,686.779 1410.36,686.779 1410.92,686.779 1411.48,686.779 1412.04,686.779 1412.6,686.779 1413.16,686.779 1413.72,686.779 1414.28,686.779 1414.84,686.779 1415.4,686.779 1415.95,686.779 1416.51,686.779 1417.07,686.779 1417.63,686.779 1418.19,686.779 1418.75,686.779 1419.31,686.779 1419.87,686.779 1420.43,686.779 1420.99,686.779 1421.55,686.779 1422.11,686.779 1422.67,686.779 1423.23,686.779 1423.78,686.779 1424.34,686.779 1424.9,686.779 1425.46,686.779 1426.02,686.779 1426.58,686.779 1427.14,686.779 1427.7,686.779 1428.26,686.779 1428.82,686.779 1429.38,686.779 1429.94,686.779 1430.5,686.779 1431.05,686.779 1431.61,686.779 1432.17,686.779 1432.73,686.779 1433.29,686.779 1433.85,686.779 1434.41,686.779 1434.97,686.779 1435.53,686.779 1436.09,686.779 1436.65,686.779 1437.21,686.779 1437.77,686.779 1438.33,686.779 1438.88,686.779 1439.44,686.779 1440,686.779 1440.56,686.779 1441.12,686.779 1441.68,686.779 1442.24,686.779 1442.8,686.779 1443.36,686.779 1443.92,686.779 1444.48,686.779 1445.04,686.779 1445.6,686.779 1446.15,686.779 1446.71,686.779 1447.27,686.779 1447.83,686.779 1448.39,686.779 1448.95,686.779 1449.51,686.779 1450.07,686.779 1450.63,686.779 1451.19,686.779 1451.75,686.779 1452.31,686.779 1452.87,686.779 1453.42,686.779 1453.98,686.779 1454.54,686.779 1455.1,686.779 1455.66,686.779 1456.22,686.779 1456.78,686.779 1457.34,686.779 1457.9,686.779 1458.46,686.779 1459.02,686.779 1459.58,686.779 1460.14,686.779 1460.7,686.779 1461.25,686.779 1461.81,686.779 1462.37,686.779 1462.93,686.779 1463.49,686.779 1464.05,686.779 1464.61,686.779 1465.17,686.779 1465.73,686.779 1466.29,686.779 1466.85,686.779 1467.41,686.779 1467.97,686.779 1468.52,686.779 1469.08,686.779 1469.64,686.779 1470.2,686.779 1470.76,686.779 1471.32,686.779 1471.88,686.779 1472.44,686.779 1473,686.779 1473.56,686.779 1474.12,686.779 1474.68,686.779 1475.24,686.779 1475.79,686.779 1476.35,686.779 1476.91,686.779 1477.47,686.779 1478.03,686.779 1478.59,686.779 1479.15,686.779 1479.71,686.779 1480.27,686.779 1480.83,686.779 1481.39,686.779 1481.95,686.779 1482.51,686.779 1483.07,686.779 1483.62,686.779 1484.18,686.779 1484.74,686.779 1485.3,686.779 1485.86,686.779 1486.42,686.779 1486.98,686.779 1487.54,686.779 1488.1,686.779 1488.66,686.779 1489.22,686.779 1489.78,686.779 1490.34,686.779 1490.89,686.779 1491.45,686.779 1492.01,686.779 1492.57,686.779 1493.13,686.779 1493.69,686.779 1494.25,686.779 1494.81,686.779 1495.37,686.779 1495.93,686.779 1496.49,686.779 1497.05,686.779 1497.61,686.779 1498.16,686.779 1498.72,686.779 1499.28,686.779 1499.84,686.779 1500.4,686.779 1500.96,686.779 1501.52,686.779 1502.08,686.779 1502.64,686.779 1503.2,686.779 1503.76,686.779 1504.32,686.779 1504.88,686.779 1505.44,686.779 1505.99,686.779 1506.55,686.779 1507.11,686.779 1507.67,686.779 1508.23,686.779 1508.79,686.779 1509.35,686.779 1509.91,686.779 1510.47,686.779 1511.03,686.779 1511.59,686.779 1512.15,686.779 1512.71,686.779 1513.26,686.779 1513.82,686.779 1514.38,686.779 1514.94,686.779 1515.5,686.779 1516.06,686.779 1516.62,686.779 1517.18,686.779 1517.74,686.779 1518.3,686.779 1518.86,686.779 1519.42,686.779 1519.98,686.779 1520.53,686.779 1521.09,686.779 1521.65,686.779 1522.21,686.779 1522.77,686.779 1523.33,686.779 1523.89,686.779 1524.45,686.779 1525.01,686.779 1525.57,686.779 1526.13,686.779 1526.69,686.779 1527.25,686.779 1527.81,686.779 1528.36,686.779 1528.92,686.779 1529.48,686.779 1530.04,686.779 1530.6,686.779 1531.16,686.779 1531.72,686.779 1532.28,686.779 1532.84,686.779 1533.4,686.779 1533.96,686.779 1534.52,686.779 1535.08,686.779 1535.63,686.779 1536.19,686.779 1536.75,686.779 1537.31,686.779 1537.87,686.779 1538.43,686.779 1538.99,686.779 1539.55,686.779 1540.11,686.779 1540.67,686.779 1541.23,686.779 1541.79,686.779 1542.35,686.779 1542.9,686.779 1543.46,686.779 1544.02,686.779 1544.58,686.779 1545.14,686.779 1545.7,686.779 1546.26,686.779 1546.82,686.779 1547.38,686.779 1547.94,686.779 1548.5,686.779 1549.06,686.779 1549.62,686.779 1550.18,686.779 1550.73,686.779 1551.29,686.779 1551.85,686.779 1552.41,686.779 1552.97,686.779 1553.53,686.779 1554.09,686.779 1554.65,686.779 1555.21,686.779 1555.77,686.779 1556.33,686.779 1556.89,686.779 1557.45,686.779 1558,686.779 1558.56,686.779 1559.12,686.779 1559.68,686.779 1560.24,686.779 1560.8,686.779 1561.36,686.779 1561.92,686.779 1562.48,686.779 1563.04,686.779 1563.6,686.779 1564.16,686.779 1564.72,686.779 1565.28,686.779 1565.83,686.779 1566.39,686.779 1566.95,686.779 1567.51,686.779 1568.07,686.779 1568.63,686.779 1569.19,686.779 1569.75,686.779 1570.31,686.779 1570.87,686.779 1571.43,686.779 1571.99,686.779 1572.55,686.779 1573.1,686.779 1573.66,686.779 1574.22,686.779 1574.78,686.779 1575.34,686.779 1575.9,686.779 1576.46,686.779 1577.02,686.779 1577.58,686.779 1578.14,686.779 1578.7,686.779 1579.26,686.779 1579.82,686.779 1580.37,686.779 1580.93,686.779 1581.49,686.779 1582.05,686.779 1582.61,686.779 1583.17,686.779 1583.73,686.779 1584.29,686.779 1584.85,686.779 1585.41,686.779 1585.97,686.779 1586.53,686.779 1587.09,686.779 1587.65,686.779 1588.2,686.779 1588.76,686.779 1589.32,686.779 1589.88,686.779 1590.44,686.779 1591,686.779 1591.56,686.779 1592.12,686.779 1592.68,686.779 1593.24,686.779 1593.8,686.779 1594.36,686.779 1594.92,686.779 1595.47,686.779 1596.03,686.779 1596.59,686.779 1597.15,686.779 1597.71,686.779 1598.27,686.779 1598.83,686.779 1599.39,686.779 1599.95,686.779 1600.51,686.779 1601.07,686.779 1601.63,686.779 1602.19,686.779 1602.74,686.779 1603.3,686.779 1603.86,686.779 1604.42,686.779 1604.98,686.779 1605.54,686.779 1606.1,686.779 1606.66,686.779 1607.22,686.779 1607.78,686.779 1608.34,686.779 1608.9,686.779 1609.46,686.779 1610.02,686.779 1610.57,686.779 1611.13,686.779 1611.69,686.779 1612.25,686.779 1612.81,686.779 1613.37,686.779 1613.93,686.779 1614.49,686.779 1615.05,686.779 1615.61,686.779 1616.17,686.779 1616.73,686.779 1617.29,686.779 1617.84,686.779 1618.4,686.779 1618.96,686.779 1619.52,686.779 1620.08,686.779 1620.64,686.779 1621.2,686.779 1621.76,686.779 1622.32,686.779 1622.88,686.779 1623.44,686.779 1624,686.779 1624.56,686.779 1625.11,686.779 1625.67,686.779 1626.23,686.779 1626.79,686.779 1627.35,686.779 1627.91,686.779 1628.47,686.779 1629.03,686.779 1629.59,686.779 1630.15,686.779 1630.71,686.779 1631.27,686.779 1631.83,686.779 1632.39,686.779 1632.94,686.779 1633.5,686.779 1634.06,686.779 1634.62,686.779 1635.18,686.779 1635.74,686.779 1636.3,686.779 1636.86,686.779 1637.42,686.779 1637.98,686.779 1638.54,686.779 1639.1,686.779 1639.66,686.779 1640.21,686.779 1640.77,686.779 1641.33,686.779 1641.89,686.779 1642.45,686.779 1643.01,686.779 1643.57,686.779 1644.13,686.779 1644.69,686.779 1645.25,686.779 1645.81,686.779 1646.37,686.779 1646.93,686.779 1647.48,686.779 1648.04,686.779 1648.6,686.779 1649.16,686.779 1649.72,686.779 1650.28,686.779 1650.84,686.779 1651.4,686.779 1651.96,686.779 1652.52,686.779 1653.08,686.779 1653.64,686.779 1654.2,686.779 1654.76,686.779 1655.31,686.779 1655.87,686.779 1656.43,686.779 1656.99,686.779 1657.55,686.779 1658.11,686.779 1658.67,686.779 1659.23,686.779 1659.79,686.779 1660.35,686.779 1660.91,686.779 1661.47,686.779 1662.03,686.779 1662.58,686.779 1663.14,686.779 1663.7,686.779 1664.26,686.779 1664.82,686.779 1665.38,686.779 1665.94,686.779 1666.5,686.779 1667.06,686.779 1667.62,686.779 1668.18,686.779 1668.74,686.779 1669.3,686.779 1669.85,686.779 1670.41,686.779 1670.97,686.779 1671.53,686.779 1672.09,686.779 1672.65,686.779 1673.21,686.779 1673.77,686.779 1674.33,686.779 1674.89,686.779 1675.45,686.779 1676.01,686.779 1676.57,686.779 1677.13,686.779 1677.68,686.779 1678.24,686.779 1678.8,686.779 1679.36,686.779 1679.92,686.779 1680.48,686.779 1681.04,686.779 1681.6,686.779 1682.16,686.779 1682.72,686.779 1683.28,686.779 1683.84,686.779 1684.4,686.779 1684.95,686.779 1685.51,686.779 1686.07,686.779 1686.63,686.779 1687.19,686.779 1687.75,686.779 1688.31,686.779 1688.87,686.779 1689.43,686.779 1689.99,686.779 1690.55,686.779 1691.11,686.779 1691.67,686.779 1692.23,686.779 1692.78,686.779 1693.34,686.779 1693.9,686.779 1694.46,686.779 1695.02,686.779 1695.58,686.779 1696.14,686.779 1696.7,686.779 1697.26,686.779 1697.82,686.779 1698.38,686.779 1698.94,686.779 1699.5,686.779 1700.05,686.779 1700.61,686.779 1701.17,686.779 1701.73,686.779 1702.29,686.779 1702.85,686.779 1703.41,686.779 1703.97,686.779 1704.53,686.779 1705.09,686.779 1705.65,686.779 1706.21,686.779 1706.77,686.779 1707.32,686.779 1707.88,686.779 1708.44,686.779 1709,686.779 1709.56,686.779 1710.12,686.779 1710.68,686.779 1711.24,686.779 1711.8,686.779 1712.36,686.779 1712.92,686.779 1713.48,686.779 1714.04,686.779 1714.6,686.779 1715.15,686.779 1715.71,686.779 1716.27,686.779 1716.83,686.779 1717.39,686.779 1717.95,686.779 1718.51,686.779 1719.07,686.779 1719.63,686.779 1720.19,686.779 1720.75,686.779 1721.31,686.779 1721.87,686.779 1722.42,686.779 1722.98,686.779 1723.54,686.779 1724.1,686.779 1724.66,686.779 1725.22,686.779 1725.78,686.779 1726.34,686.779 1726.9,686.779 1727.46,686.779 1728.02,686.779 1728.58,686.779 1729.14,686.779 1729.69,686.779 1730.25,686.779 1730.81,686.779 1731.37,686.779 1731.93,686.779 1732.49,686.779 1733.05,686.779 1733.61,686.779 1734.17,686.779 1734.73,686.779 1735.29,686.779 1735.85,686.779 1736.41,686.779 1736.97,686.779 1737.52,686.779 1738.08,686.779 1738.64,686.779 1739.2,686.779 1739.76,686.779 1740.32,686.779 1740.88,686.779 1741.44,686.779 1742,686.779 1742.56,686.779 1743.12,686.779 1743.68,686.779 1744.24,686.779 1744.79,686.779 1745.35,686.779 1745.91,686.779 1746.47,686.779 1747.03,686.779 1747.59,686.779 1748.15,686.779 1748.71,686.779 1749.27,686.779 1749.83,686.779 1750.39,686.779 1750.95,686.779 1751.51,686.779 1752.06,686.779 1752.62,686.779 1753.18,686.779 1753.74,686.779 1754.3,686.779 1754.86,686.779 1755.42,686.779 1755.98,686.779 1756.54,686.779 1757.1,686.779 1757.66,686.779 1758.22,686.779 1758.78,686.779 1759.34,686.779 1759.89,686.779 1760.45,686.779 1761.01,686.779 1761.57,686.779 1762.13,686.779 1762.69,686.779 1763.25,686.779 1763.81,686.779 1764.37,686.779 1764.93,686.779 1765.49,686.779 1766.05,686.779 1766.61,686.779 1767.16,686.779 1767.72,686.779 1768.28,686.779 1768.84,686.779 1769.4,686.779 1769.96,686.779 1770.52,686.779 1771.08,686.779 1771.64,686.779 1772.2,686.779 1772.76,686.779 1773.32,686.779 1773.88,686.779 1774.43,686.779 1774.99,686.779 1775.55,686.779 1776.11,686.779 1776.67,686.779 1777.23,686.779 1777.79,686.779 1778.35,686.779 1778.91,686.779 1779.47,686.779 1780.03,686.779 1780.59,686.779 1781.15,686.779 1781.71,686.779 1782.26,686.779 1782.82,686.779 1783.38,686.779 1783.94,686.779 1784.5,686.779 1785.06,686.779 1785.62,686.779 1786.18,686.779 1786.74,686.779 1787.3,686.779 1787.86,686.779 1788.42,686.779 1788.98,686.779 1789.53,686.779 1790.09,686.779 1790.65,686.779 1791.21,686.779 1791.77,686.779 1792.33,686.779 1792.89,686.779 1793.45,686.779 1794.01,686.779 1794.57,686.779 1795.13,686.779 1795.69,686.779 1796.25,686.779 1796.8,686.779 1797.36,686.779 1797.92,686.779 1798.48,686.779 1799.04,686.779 1799.6,686.779 1800.16,686.779 1800.72,686.779 1801.28,686.779 1801.84,686.779 1802.4,686.779 1802.96,686.779 1803.52,686.779 1804.08,686.779 1804.63,686.779 1805.19,686.779 1805.75,686.779 1806.31,686.779 1806.87,686.779 1807.43,686.779 1807.99,686.779 1808.55,686.779 1809.11,686.779 1809.67,686.779 1810.23,686.779 1810.79,686.779 1811.35,686.779 1811.9,686.779 1812.46,686.779 1813.02,686.779 1813.58,686.779 1814.14,686.779 1814.7,686.779 1815.26,686.779 1815.82,686.779 1816.38,686.779 1816.94,686.779 1817.5,686.779 1818.06,686.779 1818.62,686.779 1819.18,686.779 1819.73,686.779 1820.29,686.779 1820.85,686.779 1821.41,686.779 1821.97,686.779 1822.53,686.779 1823.09,686.779 1823.65,686.779 1824.21,686.779 1824.77,686.779 1825.33,686.779 1825.89,686.779 1826.45,686.779 1827,686.779 1827.56,686.779 1828.12,686.779 1828.68,686.779 1829.24,686.779 1829.8,686.779 1830.36,686.779 1830.92,686.779 1831.48,686.779 1832.04,686.779 1832.6,686.779 1833.16,686.779 1833.72,686.779 1834.27,686.779 1834.83,686.779 1835.39,686.779 1835.95,686.779 1836.51,686.779 1837.07,686.779 1837.63,686.779 1838.19,686.779 \"/>\n<path clip-path=\"url(#clip403)\" d=\"M720.247 684.832 L720.806 684.832 L721.365 684.832 L721.924 684.832 L722.484 684.832 L723.043 684.832 L723.602 684.832 L724.161 684.832 L724.721 684.832 L725.28 684.832 L725.839 684.832 L726.398 684.832 L726.958 684.832 L727.517 684.832 L728.076 684.832 L728.635 684.832 L729.195 684.832 L729.754 684.832 L730.313 684.832 L730.872 684.832 L731.432 684.832 L731.991 684.832 L732.55 684.832 L733.109 684.832 L733.669 684.832 L734.228 684.832 L734.787 684.832 L735.346 684.832 L735.906 684.832 L736.465 684.832 L737.024 684.832 L737.583 684.832 L738.143 684.832 L738.702 684.832 L739.261 684.832 L739.82 684.832 L740.38 684.832 L740.939 684.832 L741.498 684.832 L742.057 684.832 L742.617 684.832 L743.176 684.832 L743.735 684.832 L744.294 684.832 L744.854 684.832 L745.413 684.832 L745.972 684.832 L746.531 684.832 L747.091 684.832 L747.65 684.832 L748.209 684.832 L748.768 684.832 L749.328 684.832 L749.887 684.832 L750.446 684.832 L751.005 684.832 L751.565 684.832 L752.124 684.832 L752.683 684.832 L753.242 684.832 L753.802 684.832 L754.361 684.832 L754.92 684.832 L755.479 684.832 L756.039 684.832 L756.598 684.832 L757.157 684.832 L757.716 684.832 L758.276 684.832 L758.835 684.832 L759.394 684.832 L759.953 684.832 L760.513 684.832 L761.072 684.832 L761.631 684.832 L762.19 684.832 L762.75 684.832 L763.309 684.832 L763.868 684.832 L764.427 684.832 L764.987 684.832 L765.546 684.832 L766.105 684.832 L766.664 684.832 L767.224 684.832 L767.783 684.832 L768.342 684.832 L768.901 684.832 L769.461 684.832 L770.02 684.832 L770.579 684.832 L771.138 684.832 L771.698 684.832 L772.257 684.832 L772.816 684.832 L773.375 684.832 L773.935 684.832 L774.494 684.832 L775.053 684.832 L775.612 684.832 L776.172 684.832 L776.731 684.832 L777.29 684.832 L777.849 684.832 L778.409 684.832 L778.968 684.832 L779.527 684.832 L780.086 684.832 L780.646 684.832 L781.205 684.832 L781.764 684.832 L782.323 684.832 L782.883 684.832 L783.442 684.832 L784.001 684.832 L784.56 684.832 L785.12 684.832 L785.679 684.832 L786.238 684.832 L786.797 684.832 L787.357 684.832 L787.916 684.832 L788.475 684.832 L789.034 684.832 L789.594 684.832 L790.153 684.832 L790.712 684.832 L791.271 684.832 L791.831 684.832 L792.39 684.832 L792.949 684.832 L793.508 684.832 L794.068 684.832 L794.627 684.832 L795.186 684.832 L795.745 684.832 L796.305 684.832 L796.864 684.832 L797.423 684.832 L797.982 684.832 L798.542 684.832 L799.101 684.832 L799.66 684.832 L800.219 684.832 L800.779 684.832 L801.338 684.832 L801.897 684.832 L802.456 684.832 L803.016 684.832 L803.575 684.832 L804.134 684.832 L804.693 684.832 L805.253 684.832 L805.812 684.832 L806.371 684.832 L806.931 684.832 L807.49 684.832 L808.049 684.832 L808.608 684.832 L809.168 684.832 L809.727 684.832 L810.286 684.832 L810.845 684.832 L811.405 684.832 L811.964 684.832 L812.523 684.832 L813.082 684.832 L813.642 684.832 L814.201 684.832 L814.76 684.832 L815.319 684.832 L815.879 684.832 L816.438 684.832 L816.997 684.832 L817.556 684.832 L818.116 684.832 L818.675 684.832 L819.234 684.832 L819.793 684.832 L820.353 684.832 L820.912 684.832 L821.471 684.832 L822.03 684.832 L822.59 684.832 L823.149 684.832 L823.708 684.832 L824.267 684.832 L824.827 684.832 L825.386 684.832 L825.945 684.832 L826.504 684.832 L827.064 684.832 L827.623 684.832 L828.182 684.832 L828.741 684.832 L829.301 684.832 L829.86 684.832 L830.419 684.832 L830.978 684.832 L831.538 684.832 L832.097 684.832 L832.656 684.832 L833.215 684.832 L833.775 684.832 L834.334 684.832 L834.893 684.832 L835.452 684.832 L836.012 684.832 L836.571 684.832 L837.13 684.832 L837.689 684.832 L838.249 684.832 L838.808 684.832 L839.367 684.832 L839.926 684.832 L840.486 684.832 L841.045 684.832 L841.604 684.832 L842.163 684.832 L842.723 684.832 L843.282 684.832 L843.841 684.832 L844.4 684.832 L844.96 684.832 L845.519 684.832 L846.078 684.832 L846.637 684.832 L847.197 684.832 L847.756 684.832 L848.315 684.832 L848.874 684.832 L849.434 684.832 L849.993 684.832 L850.552 684.832 L851.111 684.832 L851.671 684.832 L852.23 684.832 L852.789 684.832 L853.348 684.832 L853.908 684.832 L854.467 684.832 L855.026 684.832 L855.585 684.832 L856.145 684.832 L856.704 684.832 L857.263 684.832 L857.822 684.832 L858.382 684.832 L858.941 684.832 L859.5 684.832 L860.059 684.832 L860.619 684.832 L861.178 684.832 L861.737 684.832 L862.296 684.832 L862.856 684.832 L863.415 684.832 L863.974 684.832 L864.533 684.832 L865.093 684.832 L865.652 684.832 L866.211 684.832 L866.77 684.832 L867.33 684.832 L867.889 684.832 L868.448 684.832 L869.007 684.832 L869.567 684.832 L870.126 684.832 L870.685 684.832 L871.244 684.832 L871.804 684.832 L872.363 684.832 L872.922 684.832 L873.481 684.832 L874.041 684.832 L874.6 684.832 L875.159 684.832 L875.718 684.832 L876.278 684.832 L876.837 684.832 L877.396 684.832 L877.955 684.832 L878.515 684.832 L879.074 684.832 L879.633 684.832 L880.192 684.832 L880.752 684.832 L881.311 684.832 L881.87 684.832 L882.429 684.832 L882.989 684.832 L883.548 684.832 L884.107 684.832 L884.666 684.832 L885.226 684.832 L885.785 684.832 L886.344 684.832 L886.903 684.832 L887.463 684.832 L888.022 684.832 L888.581 684.832 L889.14 684.832 L889.7 684.832 L890.259 684.832 L890.818 684.832 L891.377 684.832 L891.937 684.832 L892.496 684.832 L893.055 684.832 L893.614 684.832 L894.174 684.832 L894.733 684.832 L895.292 684.832 L895.851 684.832 L896.411 684.832 L896.97 684.832 L897.529 684.832 L898.088 684.832 L898.648 684.832 L899.207 684.832 L899.766 684.832 L900.325 684.832 L900.885 684.832 L901.444 684.832 L902.003 684.832 L902.562 684.832 L903.122 684.832 L903.681 684.832 L904.24 684.832 L904.799 684.832 L905.359 684.832 L905.918 684.832 L906.477 684.832 L907.036 684.832 L907.596 684.832 L908.155 684.832 L908.714 684.832 L909.273 684.832 L909.833 684.832 L910.392 684.832 L910.951 684.832 L911.51 684.832 L912.07 684.832 L912.629 684.832 L913.188 684.832 L913.747 684.832 L914.307 684.832 L914.866 684.832 L915.425 684.832 L915.984 684.832 L916.544 684.832 L917.103 684.832 L917.662 684.832 L918.221 684.832 L918.781 684.832 L919.34 684.832 L919.899 684.832 L920.458 684.832 L921.018 684.832 L921.577 684.832 L922.136 684.832 L922.695 684.832 L923.255 684.832 L923.814 684.832 L924.373 684.832 L924.932 684.832 L925.492 684.832 L926.051 684.832 L926.61 684.832 L927.169 684.832 L927.729 684.832 L928.288 684.832 L928.847 684.832 L929.406 684.832 L929.966 684.832 L930.525 684.832 L931.084 684.832 L931.644 684.832 L932.203 684.832 L932.762 684.832 L933.321 684.832 L933.881 684.832 L934.44 684.832 L934.999 684.832 L935.558 684.832 L936.118 684.832 L936.677 684.832 L937.236 684.832 L937.795 684.832 L938.355 684.832 L938.914 684.832 L939.473 684.832 L940.032 684.832 L940.592 684.832 L941.151 684.832 L941.71 684.832 L942.269 684.832 L942.829 684.832 L943.388 684.832 L943.947 684.832 L944.506 684.832 L945.066 684.832 L945.625 684.832 L946.184 684.832 L946.743 684.832 L947.303 684.832 L947.862 684.832 L948.421 684.832 L948.98 684.832 L949.54 684.832 L950.099 684.832 L950.658 684.832 L951.217 684.832 L951.777 684.832 L952.336 684.832 L952.895 684.832 L953.454 684.832 L954.014 684.832 L954.573 684.832 L955.132 684.832 L955.691 684.832 L956.251 684.832 L956.81 684.832 L957.369 684.832 L957.928 684.832 L958.488 684.832 L959.047 684.832 L959.606 684.832 L960.165 684.832 L960.725 684.832 L961.284 684.832 L961.843 684.832 L962.402 684.832 L962.962 684.832 L963.521 684.832 L964.08 684.832 L964.639 684.832 L965.199 684.832 L965.758 684.832 L966.317 684.832 L966.876 684.832 L967.436 684.832 L967.995 684.832 L968.554 684.832 L969.113 684.832 L969.673 684.832 L970.232 684.832 L970.791 684.832 L971.35 684.832 L971.91 684.832 L972.469 684.832 L973.028 684.832 L973.587 684.832 L974.147 684.832 L974.706 684.832 L975.265 684.832 L975.824 684.832 L976.384 684.832 L976.943 684.832 L977.502 684.832 L978.061 684.832 L978.621 684.832 L979.18 684.832 L979.739 684.832 L980.298 684.832 L980.858 684.832 L981.417 684.832 L981.976 684.832 L982.535 684.832 L983.095 684.832 L983.654 684.832 L984.213 684.832 L984.772 684.832 L985.332 684.832 L985.891 684.832 L986.45 684.832 L987.009 684.832 L987.569 684.832 L988.128 684.832 L988.687 684.832 L989.246 684.832 L989.806 684.832 L990.365 684.832 L990.924 684.832 L991.483 684.832 L992.043 684.832 L992.602 684.832 L993.161 684.832 L993.72 684.832 L994.28 684.832 L994.839 684.832 L995.398 684.832 L995.957 684.832 L996.517 684.832 L997.076 684.832 L997.635 684.832 L998.194 684.832 L998.754 684.832 L999.313 684.832 L999.872 684.832 L1000.43 684.832 L1000.99 684.832 L1001.55 684.832 L1002.11 684.832 L1002.67 684.832 L1003.23 684.832 L1003.79 684.832 L1004.35 684.832 L1004.91 684.832 L1005.46 684.832 L1006.02 684.832 L1006.58 684.832 L1007.14 684.832 L1007.7 684.832 L1008.26 684.832 L1008.82 684.832 L1009.38 684.832 L1009.94 684.832 L1010.5 684.832 L1011.06 684.832 L1011.62 684.832 L1012.18 684.832 L1012.73 684.832 L1013.29 684.832 L1013.85 684.832 L1014.41 684.832 L1014.97 684.832 L1015.53 684.832 L1016.09 684.832 L1016.65 684.832 L1017.21 684.832 L1017.77 684.832 L1018.33 684.832 L1018.89 684.832 L1019.45 684.832 L1020.01 684.832 L1020.56 684.832 L1021.12 684.832 L1021.68 684.832 L1022.24 684.832 L1022.8 684.832 L1023.36 684.832 L1023.92 684.832 L1024.48 684.832 L1025.04 684.832 L1025.6 684.832 L1026.16 684.832 L1026.72 684.832 L1027.28 684.832 L1027.83 684.832 L1028.39 684.832 L1028.95 684.832 L1029.51 684.832 L1030.07 684.832 L1030.63 684.832 L1031.19 684.832 L1031.75 684.832 L1032.31 684.832 L1032.87 684.832 L1033.43 684.832 L1033.99 684.832 L1034.55 684.832 L1035.1 684.832 L1035.66 684.832 L1036.22 684.832 L1036.78 684.832 L1037.34 684.832 L1037.9 684.832 L1038.46 684.832 L1039.02 684.832 L1039.58 684.832 L1040.14 684.832 L1040.7 684.832 L1041.26 684.832 L1041.82 684.832 L1042.38 684.832 L1042.93 684.832 L1043.49 684.832 L1044.05 684.832 L1044.61 684.832 L1045.17 684.832 L1045.73 684.832 L1046.29 684.832 L1046.85 684.832 L1047.41 684.832 L1047.97 684.832 L1048.53 684.832 L1049.09 684.832 L1049.65 684.832 L1050.2 684.832 L1050.76 684.832 L1051.32 684.832 L1051.88 684.832 L1052.44 684.832 L1053 684.832 L1053.56 684.832 L1054.12 684.832 L1054.68 684.832 L1055.24 684.832 L1055.8 684.832 L1056.36 684.832 L1056.92 684.832 L1057.48 684.832 L1058.03 684.832 L1058.59 684.832 L1059.15 684.832 L1059.71 684.832 L1060.27 684.832 L1060.83 684.832 L1061.39 684.832 L1061.95 684.832 L1062.51 684.832 L1063.07 684.832 L1063.63 684.832 L1064.19 684.832 L1064.75 684.832 L1065.3 684.832 L1065.86 684.832 L1066.42 684.832 L1066.98 684.832 L1067.54 684.832 L1068.1 684.832 L1068.66 684.832 L1069.22 684.832 L1069.78 684.832 L1070.34 684.832 L1070.9 684.832 L1071.46 684.832 L1072.02 684.832 L1072.57 684.832 L1073.13 684.832 L1073.69 684.832 L1074.25 684.832 L1074.81 684.832 L1075.37 684.832 L1075.93 684.832 L1076.49 684.832 L1077.05 684.832 L1077.61 684.832 L1078.17 684.832 L1078.73 684.832 L1079.29 684.832 L1079.85 684.832 L1080.4 684.832 L1080.96 684.832 L1081.52 684.832 L1082.08 684.832 L1082.64 684.832 L1083.2 684.832 L1083.76 684.832 L1084.32 684.832 L1084.88 684.832 L1085.44 684.832 L1086 684.832 L1086.56 684.832 L1087.12 684.832 L1087.67 684.832 L1088.23 684.832 L1088.79 684.832 L1089.35 684.832 L1089.91 684.832 L1090.47 684.832 L1091.03 684.832 L1091.59 684.832 L1092.15 684.832 L1092.71 684.832 L1093.27 684.832 L1093.83 684.832 L1094.39 684.832 L1094.94 684.832 L1095.5 684.832 L1096.06 684.832 L1096.62 684.832 L1097.18 684.832 L1097.74 684.832 L1098.3 684.832 L1098.86 684.832 L1099.42 684.832 L1099.98 684.832 L1100.54 684.832 L1101.1 684.832 L1101.66 684.832 L1102.22 684.832 L1102.77 684.832 L1103.33 684.832 L1103.89 684.832 L1104.45 684.832 L1105.01 684.832 L1105.57 684.832 L1106.13 684.832 L1106.69 684.832 L1107.25 684.832 L1107.81 684.832 L1108.37 684.832 L1108.93 684.832 L1109.49 684.832 L1110.04 684.832 L1110.6 684.832 L1111.16 684.832 L1111.72 684.832 L1112.28 684.832 L1112.84 684.832 L1113.4 684.832 L1113.96 684.832 L1114.52 684.832 L1115.08 684.832 L1115.64 684.832 L1116.2 684.832 L1116.76 684.832 L1117.31 684.832 L1117.87 684.832 L1118.43 684.832 L1118.99 684.832 L1119.55 684.832 L1120.11 684.832 L1120.67 684.832 L1121.23 684.832 L1121.79 684.832 L1122.35 684.832 L1122.91 684.832 L1123.47 684.832 L1124.03 684.832 L1124.59 684.832 L1125.14 684.832 L1125.7 684.832 L1126.26 684.832 L1126.82 684.832 L1127.38 684.832 L1127.94 684.832 L1128.5 684.832 L1129.06 684.832 L1129.62 684.832 L1130.18 684.832 L1130.74 684.832 L1131.3 684.832 L1131.86 684.832 L1132.41 684.832 L1132.97 684.832 L1133.53 684.832 L1134.09 684.832 L1134.65 684.832 L1135.21 684.832 L1135.77 684.832 L1136.33 684.832 L1136.89 684.832 L1137.45 684.832 L1138.01 684.832 L1138.57 684.832 L1139.13 684.832 L1139.68 684.832 L1140.24 684.832 L1140.8 684.832 L1141.36 684.832 L1141.92 684.832 L1142.48 684.832 L1143.04 684.832 L1143.6 684.832 L1144.16 684.832 L1144.72 684.832 L1145.28 684.832 L1145.84 684.832 L1146.4 684.832 L1146.96 684.832 L1147.51 684.832 L1148.07 684.832 L1148.63 684.832 L1149.19 684.832 L1149.75 684.832 L1150.31 684.832 L1150.87 684.832 L1151.43 684.832 L1151.99 684.832 L1152.55 684.832 L1153.11 684.832 L1153.67 684.832 L1154.23 684.832 L1154.78 684.832 L1155.34 684.832 L1155.9 684.832 L1156.46 684.832 L1157.02 684.832 L1157.58 684.832 L1158.14 684.832 L1158.7 684.832 L1159.26 684.832 L1159.82 684.832 L1160.38 684.832 L1160.94 684.832 L1161.5 684.832 L1162.05 684.832 L1162.61 684.832 L1163.17 684.832 L1163.73 684.832 L1164.29 684.832 L1164.85 684.832 L1165.41 684.832 L1165.97 684.832 L1166.53 684.832 L1167.09 684.832 L1167.65 684.832 L1168.21 684.832 L1168.77 684.832 L1169.33 684.832 L1169.88 684.832 L1170.44 684.832 L1171 684.832 L1171.56 684.832 L1172.12 684.832 L1172.68 684.832 L1173.24 684.832 L1173.8 684.832 L1174.36 684.832 L1174.92 684.832 L1175.48 684.832 L1176.04 684.832 L1176.6 684.832 L1177.15 684.832 L1177.71 684.832 L1178.27 684.832 L1178.83 684.832 L1179.39 684.832 L1179.95 684.832 L1180.51 684.832 L1181.07 684.832 L1181.63 684.832 L1182.19 684.832 L1182.75 684.832 L1183.31 684.832 L1183.87 684.832 L1184.43 684.832 L1184.98 684.832 L1185.54 684.832 L1186.1 684.832 L1186.66 684.832 L1187.22 684.832 L1187.78 684.832 L1188.34 684.832 L1188.9 684.832 L1189.46 684.832 L1190.02 684.832 L1190.58 684.832 L1191.14 684.832 L1191.7 684.832 L1192.25 684.832 L1192.81 684.832 L1193.37 684.832 L1193.93 684.832 L1194.49 684.832 L1195.05 684.832 L1195.61 684.832 L1196.17 684.832 L1196.73 684.832 L1197.29 684.832 L1197.85 684.832 L1198.41 684.832 L1198.97 684.832 L1199.52 684.832 L1200.08 684.832 L1200.64 684.832 L1201.2 684.832 L1201.76 684.832 L1202.32 684.832 L1202.88 684.832 L1203.44 684.832 L1204 684.832 L1204.56 684.832 L1205.12 684.832 L1205.68 684.832 L1206.24 684.832 L1206.8 684.832 L1207.35 684.832 L1207.91 684.832 L1208.47 684.832 L1209.03 684.832 L1209.59 684.832 L1210.15 684.832 L1210.71 684.832 L1211.27 684.832 L1211.83 684.832 L1212.39 684.832 L1212.95 684.832 L1213.51 684.832 L1214.07 684.832 L1214.62 684.832 L1215.18 684.832 L1215.74 684.832 L1216.3 684.832 L1216.86 684.832 L1217.42 684.832 L1217.98 684.832 L1218.54 684.832 L1219.1 684.832 L1219.66 684.832 L1220.22 684.832 L1220.78 684.832 L1221.34 684.832 L1221.89 684.832 L1222.45 684.832 L1223.01 684.832 L1223.57 684.832 L1224.13 684.832 L1224.69 684.832 L1225.25 684.832 L1225.81 684.832 L1226.37 684.832 L1226.93 684.832 L1227.49 684.832 L1228.05 684.832 L1228.61 684.832 L1229.17 684.832 L1229.72 684.832 L1230.28 684.832 L1230.84 684.832 L1231.4 684.832 L1231.96 684.832 L1232.52 684.832 L1233.08 684.832 L1233.64 684.832 L1234.2 684.832 L1234.76 684.832 L1235.32 684.832 L1235.88 684.832 L1236.44 684.832 L1236.99 684.832 L1237.55 684.832 L1238.11 684.832 L1238.67 684.832 L1239.23 684.832 L1239.79 684.832 L1240.35 684.832 L1240.91 684.832 L1241.47 684.832 L1242.03 684.832 L1242.59 684.832 L1243.15 684.832 L1243.71 684.832 L1244.26 684.832 L1244.82 684.832 L1245.38 684.832 L1245.94 684.832 L1246.5 684.832 L1247.06 684.832 L1247.62 684.832 L1248.18 684.832 L1248.74 684.832 L1249.3 684.832 L1249.86 684.832 L1250.42 684.832 L1250.98 684.832 L1251.54 684.832 L1252.09 684.832 L1252.65 684.832 L1253.21 684.832 L1253.77 684.832 L1254.33 684.832 L1254.89 684.832 L1255.45 684.832 L1256.01 684.832 L1256.57 684.832 L1257.13 684.832 L1257.69 684.832 L1258.25 684.832 L1258.81 684.832 L1259.36 684.832 L1259.92 684.832 L1260.48 684.832 L1261.04 684.832 L1261.6 684.832 L1262.16 684.832 L1262.72 684.832 L1263.28 684.832 L1263.84 684.832 L1264.4 684.832 L1264.96 684.832 L1265.52 684.832 L1266.08 684.832 L1266.63 684.832 L1267.19 684.832 L1267.75 684.832 L1268.31 684.832 L1268.87 684.832 L1269.43 684.832 L1269.99 684.832 L1270.55 684.832 L1271.11 684.832 L1271.67 684.832 L1272.23 684.832 L1272.79 684.832 L1273.35 684.832 L1273.91 684.832 L1274.46 684.832 L1275.02 684.832 L1275.58 684.832 L1276.14 684.832 L1276.7 684.832 L1277.26 684.832 L1277.82 684.832 L1278.38 684.832 L1278.94 684.832 L1279.5 684.832 L1280.06 684.832 L1280.62 684.832 L1281.18 684.832 L1281.73 684.832 L1282.29 684.832 L1282.85 684.832 L1283.41 684.832 L1283.97 684.832 L1284.53 684.832 L1285.09 684.832 L1285.65 684.832 L1286.21 684.832 L1286.77 684.832 L1287.33 684.832 L1287.89 684.832 L1288.45 684.832 L1289 684.832 L1289.56 684.832 L1290.12 684.832 L1290.68 684.832 L1291.24 684.832 L1291.8 684.832 L1292.36 684.832 L1292.92 684.832 L1293.48 684.832 L1294.04 684.832 L1294.6 684.832 L1295.16 684.832 L1295.72 684.832 L1296.28 684.832 L1296.83 684.832 L1297.39 684.832 L1297.95 684.832 L1298.51 684.832 L1299.07 684.832 L1299.63 684.832 L1300.19 684.832 L1300.75 684.832 L1301.31 684.832 L1301.87 684.832 L1302.43 684.832 L1302.99 684.832 L1303.55 684.832 L1304.1 684.832 L1304.66 684.832 L1305.22 684.832 L1305.78 684.832 L1306.34 684.832 L1306.9 684.832 L1307.46 684.832 L1308.02 684.832 L1308.58 684.832 L1309.14 684.832 L1309.7 684.832 L1310.26 684.832 L1310.82 684.832 L1311.38 684.832 L1311.93 684.832 L1312.49 684.832 L1313.05 684.832 L1313.61 684.832 L1314.17 684.832 L1314.73 684.832 L1315.29 684.832 L1315.85 684.832 L1316.41 684.832 L1316.97 684.832 L1317.53 684.832 L1318.09 684.832 L1318.65 684.832 L1319.2 684.832 L1319.76 684.832 L1320.32 684.832 L1320.88 684.832 L1321.44 684.832 L1322 684.832 L1322.56 684.832 L1323.12 684.832 L1323.68 684.832 L1324.24 684.832 L1324.8 684.832 L1325.36 684.832 L1325.92 684.832 L1326.47 684.832 L1327.03 684.832 L1327.59 684.832 L1328.15 684.832 L1328.71 684.832 L1329.27 684.832 L1329.83 684.832 L1330.39 684.832 L1330.95 684.832 L1331.51 684.832 L1332.07 684.832 L1332.63 684.832 L1333.19 684.832 L1333.75 684.832 L1334.3 684.832 L1334.86 684.832 L1335.42 684.832 L1335.98 684.832 L1336.54 684.832 L1337.1 684.832 L1337.66 684.832 L1338.22 684.832 L1338.78 684.832 L1339.34 684.832 L1339.9 684.832 L1340.46 684.832 L1341.02 684.832 L1341.57 684.832 L1342.13 684.832 L1342.69 684.832 L1343.25 684.832 L1343.81 684.832 L1344.37 684.832 L1344.93 684.832 L1345.49 684.832 L1346.05 684.832 L1346.61 684.832 L1347.17 684.832 L1347.73 684.832 L1348.29 684.832 L1348.84 684.832 L1349.4 684.832 L1349.96 684.832 L1350.52 684.832 L1351.08 684.832 L1351.64 684.832 L1352.2 684.832 L1352.76 684.832 L1353.32 684.832 L1353.88 684.832 L1354.44 684.832 L1355 684.832 L1355.56 684.832 L1356.12 684.832 L1356.67 684.832 L1357.23 684.832 L1357.79 684.832 L1358.35 684.832 L1358.91 684.832 L1359.47 684.832 L1360.03 684.832 L1360.59 684.832 L1361.15 684.832 L1361.71 684.832 L1362.27 684.832 L1362.83 684.832 L1363.39 684.832 L1363.94 684.832 L1364.5 684.832 L1365.06 684.832 L1365.62 684.832 L1366.18 684.832 L1366.74 684.832 L1367.3 684.832 L1367.86 684.832 L1368.42 684.832 L1368.98 684.832 L1369.54 684.832 L1370.1 684.832 L1370.66 684.832 L1371.21 684.832 L1371.77 684.832 L1372.33 684.832 L1372.89 684.832 L1373.45 684.832 L1374.01 684.832 L1374.57 684.832 L1375.13 684.832 L1375.69 684.832 L1376.25 684.832 L1376.81 684.832 L1377.37 684.832 L1377.93 684.832 L1378.49 684.832 L1379.04 684.832 L1379.6 684.832 L1380.16 684.832 L1380.72 684.832 L1381.28 684.832 L1381.84 684.832 L1382.4 684.832 L1382.96 684.832 L1383.52 684.832 L1384.08 684.832 L1384.64 684.832 L1385.2 684.832 L1385.76 684.832 L1386.31 684.832 L1386.87 684.832 L1387.43 684.832 L1387.99 684.832 L1388.55 684.832 L1389.11 684.832 L1389.67 684.832 L1390.23 684.832 L1390.79 684.832 L1391.35 684.832 L1391.91 684.832 L1392.47 684.832 L1393.03 684.832 L1393.58 684.832 L1394.14 684.832 L1394.7 684.832 L1395.26 684.832 L1395.82 684.832 L1396.38 684.832 L1396.94 684.832 L1397.5 684.832 L1398.06 684.832 L1398.62 684.832 L1399.18 684.832 L1399.74 684.832 L1400.3 684.832 L1400.86 684.832 L1401.41 684.832 L1401.97 684.832 L1402.53 684.832 L1403.09 684.832 L1403.65 684.832 L1404.21 684.832 L1404.77 684.832 L1405.33 684.832 L1405.89 684.832 L1406.45 684.832 L1407.01 684.832 L1407.57 684.832 L1408.13 684.832 L1408.68 684.832 L1409.24 684.832 L1409.8 684.832 L1410.36 684.832 L1410.92 684.832 L1411.48 684.832 L1412.04 684.832 L1412.6 684.832 L1413.16 684.832 L1413.72 684.832 L1414.28 684.832 L1414.84 684.832 L1415.4 684.832 L1415.95 684.832 L1416.51 684.832 L1417.07 684.832 L1417.63 684.832 L1418.19 684.832 L1418.75 684.832 L1419.31 684.832 L1419.87 684.832 L1420.43 684.832 L1420.99 684.832 L1421.55 684.832 L1422.11 684.832 L1422.67 684.832 L1423.23 684.832 L1423.78 684.832 L1424.34 684.832 L1424.9 684.832 L1425.46 684.832 L1426.02 684.832 L1426.58 684.832 L1427.14 684.832 L1427.7 684.832 L1428.26 684.832 L1428.82 684.832 L1429.38 684.832 L1429.94 684.832 L1430.5 684.832 L1431.05 684.832 L1431.61 684.832 L1432.17 684.832 L1432.73 684.832 L1433.29 684.832 L1433.85 684.832 L1434.41 684.832 L1434.97 684.832 L1435.53 684.832 L1436.09 684.832 L1436.65 684.832 L1437.21 684.832 L1437.77 684.832 L1438.33 684.832 L1438.88 684.832 L1439.44 684.832 L1440 684.832 L1440.56 684.832 L1441.12 684.832 L1441.68 684.832 L1442.24 684.832 L1442.8 684.832 L1443.36 684.832 L1443.92 684.832 L1444.48 684.832 L1445.04 684.832 L1445.6 684.832 L1446.15 684.832 L1446.71 684.832 L1447.27 684.832 L1447.83 684.832 L1448.39 684.832 L1448.95 684.832 L1449.51 684.832 L1450.07 684.832 L1450.63 684.832 L1451.19 684.832 L1451.75 684.832 L1452.31 684.832 L1452.87 684.832 L1453.42 684.832 L1453.98 684.832 L1454.54 684.832 L1455.1 684.832 L1455.66 684.832 L1456.22 684.832 L1456.78 684.832 L1457.34 684.832 L1457.9 684.832 L1458.46 684.832 L1459.02 684.832 L1459.58 684.832 L1460.14 684.832 L1460.7 684.832 L1461.25 684.832 L1461.81 684.832 L1462.37 684.832 L1462.93 684.832 L1463.49 684.832 L1464.05 684.832 L1464.61 684.832 L1465.17 684.832 L1465.73 684.832 L1466.29 684.832 L1466.85 684.832 L1467.41 684.832 L1467.97 684.832 L1468.52 684.832 L1469.08 684.832 L1469.64 684.832 L1470.2 684.832 L1470.76 684.832 L1471.32 684.832 L1471.88 684.832 L1472.44 684.832 L1473 684.832 L1473.56 684.832 L1474.12 684.832 L1474.68 684.832 L1475.24 684.832 L1475.79 684.832 L1476.35 684.832 L1476.91 684.832 L1477.47 684.832 L1478.03 684.832 L1478.59 684.832 L1479.15 684.832 L1479.71 684.832 L1480.27 684.832 L1480.83 684.832 L1481.39 684.832 L1481.95 684.832 L1482.51 684.832 L1483.07 684.832 L1483.62 684.832 L1484.18 684.832 L1484.74 684.832 L1485.3 684.832 L1485.86 684.832 L1486.42 684.832 L1486.98 684.832 L1487.54 684.832 L1488.1 684.832 L1488.66 684.832 L1489.22 684.832 L1489.78 684.832 L1490.34 684.832 L1490.89 684.832 L1491.45 684.832 L1492.01 684.832 L1492.57 684.832 L1493.13 684.832 L1493.69 684.832 L1494.25 684.832 L1494.81 684.832 L1495.37 684.832 L1495.93 684.832 L1496.49 684.832 L1497.05 684.832 L1497.61 684.832 L1498.16 684.832 L1498.72 684.832 L1499.28 684.832 L1499.84 684.832 L1500.4 684.832 L1500.96 684.832 L1501.52 684.832 L1502.08 684.832 L1502.64 684.832 L1503.2 684.832 L1503.76 684.832 L1504.32 684.832 L1504.88 684.832 L1505.44 684.832 L1505.99 684.832 L1506.55 684.832 L1507.11 684.832 L1507.67 684.832 L1508.23 684.832 L1508.79 684.832 L1509.35 684.832 L1509.91 684.832 L1510.47 684.832 L1511.03 684.832 L1511.59 684.832 L1512.15 684.832 L1512.71 684.832 L1513.26 684.832 L1513.82 684.832 L1514.38 684.832 L1514.94 684.832 L1515.5 684.832 L1516.06 684.832 L1516.62 684.832 L1517.18 684.832 L1517.74 684.832 L1518.3 684.832 L1518.86 684.832 L1519.42 684.832 L1519.98 684.832 L1520.53 684.832 L1521.09 684.832 L1521.65 684.832 L1522.21 684.832 L1522.77 684.832 L1523.33 684.832 L1523.89 684.832 L1524.45 684.832 L1525.01 684.832 L1525.57 684.832 L1526.13 684.832 L1526.69 684.832 L1527.25 684.832 L1527.81 684.832 L1528.36 684.832 L1528.92 684.832 L1529.48 684.832 L1530.04 684.832 L1530.6 684.832 L1531.16 684.832 L1531.72 684.832 L1532.28 684.832 L1532.84 684.832 L1533.4 684.832 L1533.96 684.832 L1534.52 684.832 L1535.08 684.832 L1535.63 684.832 L1536.19 684.832 L1536.75 684.832 L1537.31 684.832 L1537.87 684.832 L1538.43 684.832 L1538.99 684.832 L1539.55 684.832 L1540.11 684.832 L1540.67 684.832 L1541.23 684.832 L1541.79 684.832 L1542.35 684.832 L1542.9 684.832 L1543.46 684.832 L1544.02 684.832 L1544.58 684.832 L1545.14 684.832 L1545.7 684.832 L1546.26 684.832 L1546.82 684.832 L1547.38 684.832 L1547.94 684.832 L1548.5 684.832 L1549.06 684.832 L1549.62 684.832 L1550.18 684.832 L1550.73 684.832 L1551.29 684.832 L1551.85 684.832 L1552.41 684.832 L1552.97 684.832 L1553.53 684.832 L1554.09 684.832 L1554.65 684.832 L1555.21 684.832 L1555.77 684.832 L1556.33 684.832 L1556.89 684.832 L1557.45 684.832 L1558 684.832 L1558.56 684.832 L1559.12 684.832 L1559.68 684.832 L1560.24 684.832 L1560.8 684.832 L1561.36 684.832 L1561.92 684.832 L1562.48 684.832 L1563.04 684.832 L1563.6 684.832 L1564.16 684.832 L1564.72 684.832 L1565.28 684.832 L1565.83 684.832 L1566.39 684.832 L1566.95 684.832 L1567.51 684.832 L1568.07 684.832 L1568.63 684.832 L1569.19 684.832 L1569.75 684.832 L1570.31 684.832 L1570.87 684.832 L1571.43 684.832 L1571.99 684.832 L1572.55 684.832 L1573.1 684.832 L1573.66 684.832 L1574.22 684.832 L1574.78 684.832 L1575.34 684.832 L1575.9 684.832 L1576.46 684.832 L1577.02 684.832 L1577.58 684.832 L1578.14 684.832 L1578.7 684.832 L1579.26 684.832 L1579.82 684.832 L1580.37 684.832 L1580.93 684.832 L1581.49 684.832 L1582.05 684.832 L1582.61 684.832 L1583.17 684.832 L1583.73 684.832 L1584.29 684.832 L1584.85 684.832 L1585.41 684.832 L1585.97 684.832 L1586.53 684.832 L1587.09 684.832 L1587.65 684.832 L1588.2 684.832 L1588.76 684.832 L1589.32 684.832 L1589.88 684.832 L1590.44 684.832 L1591 684.832 L1591.56 684.832 L1592.12 684.832 L1592.68 684.832 L1593.24 684.832 L1593.8 684.832 L1594.36 684.832 L1594.92 684.832 L1595.47 684.832 L1596.03 684.832 L1596.59 684.832 L1597.15 684.832 L1597.71 684.832 L1598.27 684.832 L1598.83 684.832 L1599.39 684.832 L1599.95 684.832 L1600.51 684.832 L1601.07 684.832 L1601.63 684.832 L1602.19 684.832 L1602.74 684.832 L1603.3 684.832 L1603.86 684.832 L1604.42 684.832 L1604.98 684.832 L1605.54 684.832 L1606.1 684.832 L1606.66 684.832 L1607.22 684.832 L1607.78 684.832 L1608.34 684.832 L1608.9 684.832 L1609.46 684.832 L1610.02 684.832 L1610.57 684.832 L1611.13 684.832 L1611.69 684.832 L1612.25 684.832 L1612.81 684.832 L1613.37 684.832 L1613.93 684.832 L1614.49 684.832 L1615.05 684.832 L1615.61 684.832 L1616.17 684.832 L1616.73 684.832 L1617.29 684.832 L1617.84 684.832 L1618.4 684.832 L1618.96 684.832 L1619.52 684.832 L1620.08 684.832 L1620.64 684.832 L1621.2 684.832 L1621.76 684.832 L1622.32 684.832 L1622.88 684.832 L1623.44 684.832 L1624 684.832 L1624.56 684.832 L1625.11 684.832 L1625.67 684.832 L1626.23 684.832 L1626.79 684.832 L1627.35 684.832 L1627.91 684.832 L1628.47 684.832 L1629.03 684.832 L1629.59 684.832 L1630.15 684.832 L1630.71 684.832 L1631.27 684.832 L1631.83 684.832 L1632.39 684.832 L1632.94 684.832 L1633.5 684.832 L1634.06 684.832 L1634.62 684.832 L1635.18 684.832 L1635.74 684.832 L1636.3 684.832 L1636.86 684.832 L1637.42 684.832 L1637.98 684.832 L1638.54 684.832 L1639.1 684.832 L1639.66 684.832 L1640.21 684.832 L1640.77 684.832 L1641.33 684.832 L1641.89 684.832 L1642.45 684.832 L1643.01 684.832 L1643.57 684.832 L1644.13 684.832 L1644.69 684.832 L1645.25 684.832 L1645.81 684.832 L1646.37 684.832 L1646.93 684.832 L1647.48 684.832 L1648.04 684.832 L1648.6 684.832 L1649.16 684.832 L1649.72 684.832 L1650.28 684.832 L1650.84 684.832 L1651.4 684.832 L1651.96 684.832 L1652.52 684.832 L1653.08 684.832 L1653.64 684.832 L1654.2 684.832 L1654.76 684.832 L1655.31 684.832 L1655.87 684.832 L1656.43 684.832 L1656.99 684.832 L1657.55 684.832 L1658.11 684.832 L1658.67 684.832 L1659.23 684.832 L1659.79 684.832 L1660.35 684.832 L1660.91 684.832 L1661.47 684.832 L1662.03 684.832 L1662.58 684.832 L1663.14 684.832 L1663.7 684.832 L1664.26 684.832 L1664.82 684.832 L1665.38 684.832 L1665.94 684.832 L1666.5 684.832 L1667.06 684.832 L1667.62 684.832 L1668.18 684.832 L1668.74 684.832 L1669.3 684.832 L1669.85 684.832 L1670.41 684.832 L1670.97 684.832 L1671.53 684.832 L1672.09 684.832 L1672.65 684.832 L1673.21 684.832 L1673.77 684.832 L1674.33 684.832 L1674.89 684.832 L1675.45 684.832 L1676.01 684.832 L1676.57 684.832 L1677.13 684.832 L1677.68 684.832 L1678.24 684.832 L1678.8 684.832 L1679.36 684.832 L1679.92 684.832 L1680.48 684.832 L1681.04 684.832 L1681.6 684.832 L1682.16 684.832 L1682.72 684.832 L1683.28 684.832 L1683.84 684.832 L1684.4 684.832 L1684.95 684.832 L1685.51 684.832 L1686.07 684.832 L1686.63 684.832 L1687.19 684.832 L1687.75 684.832 L1688.31 684.832 L1688.87 684.832 L1689.43 684.832 L1689.99 684.832 L1690.55 684.832 L1691.11 684.832 L1691.67 684.832 L1692.23 684.832 L1692.78 684.832 L1693.34 684.832 L1693.9 684.832 L1694.46 684.832 L1695.02 684.832 L1695.58 684.832 L1696.14 684.832 L1696.7 684.832 L1697.26 684.832 L1697.82 684.832 L1698.38 684.832 L1698.94 684.832 L1699.5 684.832 L1700.05 684.832 L1700.61 684.832 L1701.17 684.832 L1701.73 684.832 L1702.29 684.832 L1702.85 684.832 L1703.41 684.832 L1703.97 684.832 L1704.53 684.832 L1705.09 684.832 L1705.65 684.832 L1706.21 684.832 L1706.77 684.832 L1707.32 684.832 L1707.88 684.832 L1708.44 684.832 L1709 684.832 L1709.56 684.832 L1710.12 684.832 L1710.68 684.832 L1711.24 684.832 L1711.8 684.832 L1712.36 684.832 L1712.92 684.832 L1713.48 684.832 L1714.04 684.832 L1714.6 684.832 L1715.15 684.832 L1715.71 684.832 L1716.27 684.832 L1716.83 684.832 L1717.39 684.832 L1717.95 684.832 L1718.51 684.832 L1719.07 684.832 L1719.63 684.832 L1720.19 684.832 L1720.75 684.832 L1721.31 684.832 L1721.87 684.832 L1722.42 684.832 L1722.98 684.832 L1723.54 684.832 L1724.1 684.832 L1724.66 684.832 L1725.22 684.832 L1725.78 684.832 L1726.34 684.832 L1726.9 684.832 L1727.46 684.832 L1728.02 684.832 L1728.58 684.832 L1729.14 684.832 L1729.69 684.832 L1730.25 684.832 L1730.81 684.832 L1731.37 684.832 L1731.93 684.832 L1732.49 684.832 L1733.05 684.832 L1733.61 684.832 L1734.17 684.832 L1734.73 684.832 L1735.29 684.832 L1735.85 684.832 L1736.41 684.832 L1736.97 684.832 L1737.52 684.832 L1738.08 684.832 L1738.64 684.832 L1739.2 684.832 L1739.76 684.832 L1740.32 684.832 L1740.88 684.832 L1741.44 684.832 L1742 684.832 L1742.56 684.832 L1743.12 684.832 L1743.68 684.832 L1744.24 684.832 L1744.79 684.832 L1745.35 684.832 L1745.91 684.832 L1746.47 684.832 L1747.03 684.832 L1747.59 684.832 L1748.15 684.832 L1748.71 684.832 L1749.27 684.832 L1749.83 684.832 L1750.39 684.832 L1750.95 684.832 L1751.51 684.832 L1752.06 684.832 L1752.62 684.832 L1753.18 684.832 L1753.74 684.832 L1754.3 684.832 L1754.86 684.832 L1755.42 684.832 L1755.98 684.832 L1756.54 684.832 L1757.1 684.832 L1757.66 684.832 L1758.22 684.832 L1758.78 684.832 L1759.34 684.832 L1759.89 684.832 L1760.45 684.832 L1761.01 684.832 L1761.57 684.832 L1762.13 684.832 L1762.69 684.832 L1763.25 684.832 L1763.81 684.832 L1764.37 684.832 L1764.93 684.832 L1765.49 684.832 L1766.05 684.832 L1766.61 684.832 L1767.16 684.832 L1767.72 684.832 L1768.28 684.832 L1768.84 684.832 L1769.4 684.832 L1769.96 684.832 L1770.52 684.832 L1771.08 684.832 L1771.64 684.832 L1772.2 684.832 L1772.76 684.832 L1773.32 684.832 L1773.88 684.832 L1774.43 684.832 L1774.99 684.832 L1775.55 684.832 L1776.11 684.832 L1776.67 684.832 L1777.23 684.832 L1777.79 684.832 L1778.35 684.832 L1778.91 684.832 L1779.47 684.832 L1780.03 684.832 L1780.59 684.832 L1781.15 684.832 L1781.71 684.832 L1782.26 684.832 L1782.82 684.832 L1783.38 684.832 L1783.94 684.832 L1784.5 684.832 L1785.06 684.832 L1785.62 684.832 L1786.18 684.832 L1786.74 684.832 L1787.3 684.832 L1787.86 684.832 L1788.42 684.832 L1788.98 684.832 L1789.53 684.832 L1790.09 684.832 L1790.65 684.832 L1791.21 684.832 L1791.77 684.832 L1792.33 684.832 L1792.89 684.832 L1793.45 684.832 L1794.01 684.832 L1794.57 684.832 L1795.13 684.832 L1795.69 684.832 L1796.25 684.832 L1796.8 684.832 L1797.36 684.832 L1797.92 684.832 L1798.48 684.832 L1799.04 684.832 L1799.6 684.832 L1800.16 684.832 L1800.72 684.832 L1801.28 684.832 L1801.84 684.832 L1802.4 684.832 L1802.96 684.832 L1803.52 684.832 L1804.08 684.832 L1804.63 684.832 L1805.19 684.832 L1805.75 684.832 L1806.31 684.832 L1806.87 684.832 L1807.43 684.832 L1807.99 684.832 L1808.55 684.832 L1809.11 684.832 L1809.67 684.832 L1810.23 684.832 L1810.79 684.832 L1811.35 684.832 L1811.9 684.832 L1812.46 684.832 L1813.02 684.832 L1813.58 684.832 L1814.14 684.832 L1814.7 684.832 L1815.26 684.832 L1815.82 684.832 L1816.38 684.832 L1816.94 684.832 L1817.5 684.832 L1818.06 684.832 L1818.62 684.832 L1819.18 684.832 L1819.73 684.832 L1820.29 684.832 L1820.85 684.832 L1821.41 684.832 L1821.97 684.832 L1822.53 684.832 L1823.09 684.832 L1823.65 684.832 L1824.21 684.832 L1824.77 684.832 L1825.33 684.832 L1825.89 684.832 L1826.45 684.832 L1827 684.832 L1827.56 684.832 L1828.12 684.832 L1828.68 684.832 L1829.24 684.832 L1829.8 684.832 L1830.36 684.832 L1830.92 684.832 L1831.48 684.832 L1832.04 684.832 L1832.6 684.832 L1833.16 684.832 L1833.72 684.832 L1834.27 684.832 L1834.83 684.832 L1835.39 684.832 L1835.95 684.832 L1836.51 684.832 L1837.07 684.832 L1837.63 684.832 L1838.19 684.832 L1838.19 682.556 L1837.63 682.556 L1837.07 682.556 L1836.51 682.556 L1835.95 682.556 L1835.39 682.556 L1834.83 682.556 L1834.27 682.556 L1833.72 682.556 L1833.16 682.556 L1832.6 682.556 L1832.04 682.556 L1831.48 682.556 L1830.92 682.556 L1830.36 682.556 L1829.8 682.556 L1829.24 682.556 L1828.68 682.556 L1828.12 682.556 L1827.56 682.556 L1827 682.556 L1826.45 682.556 L1825.89 682.556 L1825.33 682.556 L1824.77 682.556 L1824.21 682.556 L1823.65 682.556 L1823.09 682.556 L1822.53 682.556 L1821.97 682.556 L1821.41 682.556 L1820.85 682.556 L1820.29 682.556 L1819.73 682.556 L1819.18 682.556 L1818.62 682.556 L1818.06 682.556 L1817.5 682.556 L1816.94 682.556 L1816.38 682.556 L1815.82 682.556 L1815.26 682.556 L1814.7 682.556 L1814.14 682.556 L1813.58 682.556 L1813.02 682.556 L1812.46 682.556 L1811.9 682.556 L1811.35 682.556 L1810.79 682.556 L1810.23 682.556 L1809.67 682.556 L1809.11 682.556 L1808.55 682.556 L1807.99 682.556 L1807.43 682.556 L1806.87 682.556 L1806.31 682.556 L1805.75 682.556 L1805.19 682.556 L1804.63 682.556 L1804.08 682.556 L1803.52 682.556 L1802.96 682.556 L1802.4 682.556 L1801.84 682.556 L1801.28 682.556 L1800.72 682.556 L1800.16 682.556 L1799.6 682.556 L1799.04 682.556 L1798.48 682.556 L1797.92 682.556 L1797.36 682.556 L1796.8 682.556 L1796.25 682.556 L1795.69 682.556 L1795.13 682.556 L1794.57 682.556 L1794.01 682.556 L1793.45 682.556 L1792.89 682.556 L1792.33 682.556 L1791.77 682.556 L1791.21 682.556 L1790.65 682.556 L1790.09 682.556 L1789.53 682.556 L1788.98 682.556 L1788.42 682.556 L1787.86 682.556 L1787.3 682.556 L1786.74 682.556 L1786.18 682.556 L1785.62 682.556 L1785.06 682.556 L1784.5 682.556 L1783.94 682.556 L1783.38 682.556 L1782.82 682.556 L1782.26 682.556 L1781.71 682.556 L1781.15 682.556 L1780.59 682.556 L1780.03 682.556 L1779.47 682.556 L1778.91 682.556 L1778.35 682.556 L1777.79 682.556 L1777.23 682.556 L1776.67 682.556 L1776.11 682.556 L1775.55 682.556 L1774.99 682.556 L1774.43 682.556 L1773.88 682.556 L1773.32 682.556 L1772.76 682.556 L1772.2 682.556 L1771.64 682.556 L1771.08 682.556 L1770.52 682.556 L1769.96 682.556 L1769.4 682.556 L1768.84 682.556 L1768.28 682.556 L1767.72 682.556 L1767.16 682.556 L1766.61 682.556 L1766.05 682.556 L1765.49 682.556 L1764.93 682.556 L1764.37 682.556 L1763.81 682.556 L1763.25 682.556 L1762.69 682.556 L1762.13 682.556 L1761.57 682.556 L1761.01 682.556 L1760.45 682.556 L1759.89 682.556 L1759.34 682.556 L1758.78 682.556 L1758.22 682.556 L1757.66 682.556 L1757.1 682.556 L1756.54 682.556 L1755.98 682.556 L1755.42 682.556 L1754.86 682.556 L1754.3 682.556 L1753.74 682.556 L1753.18 682.556 L1752.62 682.556 L1752.06 682.556 L1751.51 682.556 L1750.95 682.556 L1750.39 682.556 L1749.83 682.556 L1749.27 682.556 L1748.71 682.556 L1748.15 682.556 L1747.59 682.556 L1747.03 682.556 L1746.47 682.556 L1745.91 682.556 L1745.35 682.556 L1744.79 682.556 L1744.24 682.556 L1743.68 682.556 L1743.12 682.556 L1742.56 682.556 L1742 682.556 L1741.44 682.556 L1740.88 682.556 L1740.32 682.556 L1739.76 682.556 L1739.2 682.556 L1738.64 682.556 L1738.08 682.556 L1737.52 682.556 L1736.97 682.556 L1736.41 682.556 L1735.85 682.556 L1735.29 682.556 L1734.73 682.556 L1734.17 682.556 L1733.61 682.556 L1733.05 682.556 L1732.49 682.556 L1731.93 682.556 L1731.37 682.556 L1730.81 682.556 L1730.25 682.556 L1729.69 682.556 L1729.14 682.556 L1728.58 682.556 L1728.02 682.556 L1727.46 682.556 L1726.9 682.556 L1726.34 682.556 L1725.78 682.556 L1725.22 682.556 L1724.66 682.556 L1724.1 682.556 L1723.54 682.556 L1722.98 682.556 L1722.42 682.556 L1721.87 682.556 L1721.31 682.556 L1720.75 682.556 L1720.19 682.556 L1719.63 682.556 L1719.07 682.556 L1718.51 682.556 L1717.95 682.556 L1717.39 682.556 L1716.83 682.556 L1716.27 682.556 L1715.71 682.556 L1715.15 682.556 L1714.6 682.556 L1714.04 682.556 L1713.48 682.556 L1712.92 682.556 L1712.36 682.556 L1711.8 682.556 L1711.24 682.556 L1710.68 682.556 L1710.12 682.556 L1709.56 682.556 L1709 682.556 L1708.44 682.556 L1707.88 682.556 L1707.32 682.556 L1706.77 682.556 L1706.21 682.556 L1705.65 682.556 L1705.09 682.556 L1704.53 682.556 L1703.97 682.556 L1703.41 682.556 L1702.85 682.556 L1702.29 682.556 L1701.73 682.556 L1701.17 682.556 L1700.61 682.556 L1700.05 682.556 L1699.5 682.556 L1698.94 682.556 L1698.38 682.556 L1697.82 682.556 L1697.26 682.556 L1696.7 682.556 L1696.14 682.556 L1695.58 682.556 L1695.02 682.556 L1694.46 682.556 L1693.9 682.556 L1693.34 682.556 L1692.78 682.556 L1692.23 682.556 L1691.67 682.556 L1691.11 682.556 L1690.55 682.556 L1689.99 682.556 L1689.43 682.556 L1688.87 682.556 L1688.31 682.556 L1687.75 682.556 L1687.19 682.556 L1686.63 682.556 L1686.07 682.556 L1685.51 682.556 L1684.95 682.556 L1684.4 682.556 L1683.84 682.556 L1683.28 682.556 L1682.72 682.556 L1682.16 682.556 L1681.6 682.556 L1681.04 682.556 L1680.48 682.556 L1679.92 682.556 L1679.36 682.556 L1678.8 682.556 L1678.24 682.556 L1677.68 682.556 L1677.13 682.556 L1676.57 682.556 L1676.01 682.556 L1675.45 682.556 L1674.89 682.556 L1674.33 682.556 L1673.77 682.556 L1673.21 682.556 L1672.65 682.556 L1672.09 682.556 L1671.53 682.556 L1670.97 682.556 L1670.41 682.556 L1669.85 682.556 L1669.3 682.556 L1668.74 682.556 L1668.18 682.556 L1667.62 682.556 L1667.06 682.556 L1666.5 682.556 L1665.94 682.556 L1665.38 682.556 L1664.82 682.556 L1664.26 682.556 L1663.7 682.556 L1663.14 682.556 L1662.58 682.556 L1662.03 682.556 L1661.47 682.556 L1660.91 682.556 L1660.35 682.556 L1659.79 682.556 L1659.23 682.556 L1658.67 682.556 L1658.11 682.556 L1657.55 682.556 L1656.99 682.556 L1656.43 682.556 L1655.87 682.556 L1655.31 682.556 L1654.76 682.556 L1654.2 682.556 L1653.64 682.556 L1653.08 682.556 L1652.52 682.556 L1651.96 682.556 L1651.4 682.556 L1650.84 682.556 L1650.28 682.556 L1649.72 682.556 L1649.16 682.556 L1648.6 682.556 L1648.04 682.556 L1647.48 682.556 L1646.93 682.556 L1646.37 682.556 L1645.81 682.556 L1645.25 682.556 L1644.69 682.556 L1644.13 682.556 L1643.57 682.556 L1643.01 682.556 L1642.45 682.556 L1641.89 682.556 L1641.33 682.556 L1640.77 682.556 L1640.21 682.556 L1639.66 682.556 L1639.1 682.556 L1638.54 682.556 L1637.98 682.556 L1637.42 682.556 L1636.86 682.556 L1636.3 682.556 L1635.74 682.556 L1635.18 682.556 L1634.62 682.556 L1634.06 682.556 L1633.5 682.556 L1632.94 682.556 L1632.39 682.556 L1631.83 682.556 L1631.27 682.556 L1630.71 682.556 L1630.15 682.556 L1629.59 682.556 L1629.03 682.556 L1628.47 682.556 L1627.91 682.556 L1627.35 682.556 L1626.79 682.556 L1626.23 682.556 L1625.67 682.556 L1625.11 682.556 L1624.56 682.556 L1624 682.556 L1623.44 682.556 L1622.88 682.556 L1622.32 682.556 L1621.76 682.556 L1621.2 682.556 L1620.64 682.556 L1620.08 682.556 L1619.52 682.556 L1618.96 682.556 L1618.4 682.556 L1617.84 682.556 L1617.29 682.556 L1616.73 682.556 L1616.17 682.556 L1615.61 682.556 L1615.05 682.556 L1614.49 682.556 L1613.93 682.556 L1613.37 682.556 L1612.81 682.556 L1612.25 682.556 L1611.69 682.556 L1611.13 682.556 L1610.57 682.556 L1610.02 682.556 L1609.46 682.556 L1608.9 682.556 L1608.34 682.556 L1607.78 682.556 L1607.22 682.556 L1606.66 682.556 L1606.1 682.556 L1605.54 682.556 L1604.98 682.556 L1604.42 682.556 L1603.86 682.556 L1603.3 682.556 L1602.74 682.556 L1602.19 682.556 L1601.63 682.556 L1601.07 682.556 L1600.51 682.556 L1599.95 682.556 L1599.39 682.556 L1598.83 682.556 L1598.27 682.556 L1597.71 682.556 L1597.15 682.556 L1596.59 682.556 L1596.03 682.556 L1595.47 682.556 L1594.92 682.556 L1594.36 682.556 L1593.8 682.556 L1593.24 682.556 L1592.68 682.556 L1592.12 682.556 L1591.56 682.556 L1591 682.556 L1590.44 682.556 L1589.88 682.556 L1589.32 682.556 L1588.76 682.556 L1588.2 682.556 L1587.65 682.556 L1587.09 682.556 L1586.53 682.556 L1585.97 682.556 L1585.41 682.556 L1584.85 682.556 L1584.29 682.556 L1583.73 682.556 L1583.17 682.556 L1582.61 682.556 L1582.05 682.556 L1581.49 682.556 L1580.93 682.556 L1580.37 682.556 L1579.82 682.556 L1579.26 682.556 L1578.7 682.556 L1578.14 682.556 L1577.58 682.556 L1577.02 682.556 L1576.46 682.556 L1575.9 682.556 L1575.34 682.556 L1574.78 682.556 L1574.22 682.556 L1573.66 682.556 L1573.1 682.556 L1572.55 682.556 L1571.99 682.556 L1571.43 682.556 L1570.87 682.556 L1570.31 682.556 L1569.75 682.556 L1569.19 682.556 L1568.63 682.556 L1568.07 682.556 L1567.51 682.556 L1566.95 682.556 L1566.39 682.556 L1565.83 682.556 L1565.28 682.556 L1564.72 682.556 L1564.16 682.556 L1563.6 682.556 L1563.04 682.556 L1562.48 682.556 L1561.92 682.556 L1561.36 682.556 L1560.8 682.556 L1560.24 682.556 L1559.68 682.556 L1559.12 682.556 L1558.56 682.556 L1558 682.556 L1557.45 682.556 L1556.89 682.556 L1556.33 682.556 L1555.77 682.556 L1555.21 682.556 L1554.65 682.556 L1554.09 682.556 L1553.53 682.556 L1552.97 682.556 L1552.41 682.556 L1551.85 682.556 L1551.29 682.556 L1550.73 682.556 L1550.18 682.556 L1549.62 682.556 L1549.06 682.556 L1548.5 682.556 L1547.94 682.556 L1547.38 682.556 L1546.82 682.556 L1546.26 682.556 L1545.7 682.556 L1545.14 682.556 L1544.58 682.556 L1544.02 682.556 L1543.46 682.556 L1542.9 682.556 L1542.35 682.556 L1541.79 682.556 L1541.23 682.556 L1540.67 682.556 L1540.11 682.556 L1539.55 682.556 L1538.99 682.556 L1538.43 682.556 L1537.87 682.556 L1537.31 682.556 L1536.75 682.556 L1536.19 682.556 L1535.63 682.556 L1535.08 682.556 L1534.52 682.556 L1533.96 682.556 L1533.4 682.556 L1532.84 682.556 L1532.28 682.556 L1531.72 682.556 L1531.16 682.556 L1530.6 682.556 L1530.04 682.556 L1529.48 682.556 L1528.92 682.556 L1528.36 682.556 L1527.81 682.556 L1527.25 682.556 L1526.69 682.556 L1526.13 682.556 L1525.57 682.556 L1525.01 682.556 L1524.45 682.556 L1523.89 682.556 L1523.33 682.556 L1522.77 682.556 L1522.21 682.556 L1521.65 682.556 L1521.09 682.556 L1520.53 682.556 L1519.98 682.556 L1519.42 682.556 L1518.86 682.556 L1518.3 682.556 L1517.74 682.556 L1517.18 682.556 L1516.62 682.556 L1516.06 682.556 L1515.5 682.556 L1514.94 682.556 L1514.38 682.556 L1513.82 682.556 L1513.26 682.556 L1512.71 682.556 L1512.15 682.556 L1511.59 682.556 L1511.03 682.556 L1510.47 682.556 L1509.91 682.556 L1509.35 682.556 L1508.79 682.556 L1508.23 682.556 L1507.67 682.556 L1507.11 682.556 L1506.55 682.556 L1505.99 682.556 L1505.44 682.556 L1504.88 682.556 L1504.32 682.556 L1503.76 682.556 L1503.2 682.556 L1502.64 682.556 L1502.08 682.556 L1501.52 682.556 L1500.96 682.556 L1500.4 682.556 L1499.84 682.556 L1499.28 682.556 L1498.72 682.556 L1498.16 682.556 L1497.61 682.556 L1497.05 682.556 L1496.49 682.556 L1495.93 682.556 L1495.37 682.556 L1494.81 682.556 L1494.25 682.556 L1493.69 682.556 L1493.13 682.556 L1492.57 682.556 L1492.01 682.556 L1491.45 682.556 L1490.89 682.556 L1490.34 682.556 L1489.78 682.556 L1489.22 682.556 L1488.66 682.556 L1488.1 682.556 L1487.54 682.556 L1486.98 682.556 L1486.42 682.556 L1485.86 682.556 L1485.3 682.556 L1484.74 682.556 L1484.18 682.556 L1483.62 682.556 L1483.07 682.556 L1482.51 682.556 L1481.95 682.556 L1481.39 682.556 L1480.83 682.556 L1480.27 682.556 L1479.71 682.556 L1479.15 682.556 L1478.59 682.556 L1478.03 682.556 L1477.47 682.556 L1476.91 682.556 L1476.35 682.556 L1475.79 682.556 L1475.24 682.556 L1474.68 682.556 L1474.12 682.556 L1473.56 682.556 L1473 682.556 L1472.44 682.556 L1471.88 682.556 L1471.32 682.556 L1470.76 682.556 L1470.2 682.556 L1469.64 682.556 L1469.08 682.556 L1468.52 682.556 L1467.97 682.556 L1467.41 682.556 L1466.85 682.556 L1466.29 682.556 L1465.73 682.556 L1465.17 682.556 L1464.61 682.556 L1464.05 682.556 L1463.49 682.556 L1462.93 682.556 L1462.37 682.556 L1461.81 682.556 L1461.25 682.556 L1460.7 682.556 L1460.14 682.556 L1459.58 682.556 L1459.02 682.556 L1458.46 682.556 L1457.9 682.556 L1457.34 682.556 L1456.78 682.556 L1456.22 682.556 L1455.66 682.556 L1455.1 682.556 L1454.54 682.556 L1453.98 682.556 L1453.42 682.556 L1452.87 682.556 L1452.31 682.556 L1451.75 682.556 L1451.19 682.556 L1450.63 682.556 L1450.07 682.556 L1449.51 682.556 L1448.95 682.556 L1448.39 682.556 L1447.83 682.556 L1447.27 682.556 L1446.71 682.556 L1446.15 682.556 L1445.6 682.556 L1445.04 682.556 L1444.48 682.556 L1443.92 682.556 L1443.36 682.556 L1442.8 682.556 L1442.24 682.556 L1441.68 682.556 L1441.12 682.556 L1440.56 682.556 L1440 682.556 L1439.44 682.556 L1438.88 682.556 L1438.33 682.556 L1437.77 682.556 L1437.21 682.556 L1436.65 682.556 L1436.09 682.556 L1435.53 682.556 L1434.97 682.556 L1434.41 682.556 L1433.85 682.556 L1433.29 682.556 L1432.73 682.556 L1432.17 682.556 L1431.61 682.556 L1431.05 682.556 L1430.5 682.556 L1429.94 682.556 L1429.38 682.556 L1428.82 682.556 L1428.26 682.556 L1427.7 682.556 L1427.14 682.556 L1426.58 682.556 L1426.02 682.556 L1425.46 682.556 L1424.9 682.556 L1424.34 682.556 L1423.78 682.556 L1423.23 682.556 L1422.67 682.556 L1422.11 682.556 L1421.55 682.556 L1420.99 682.556 L1420.43 682.556 L1419.87 682.556 L1419.31 682.556 L1418.75 682.556 L1418.19 682.556 L1417.63 682.556 L1417.07 682.556 L1416.51 682.556 L1415.95 682.556 L1415.4 682.556 L1414.84 682.556 L1414.28 682.556 L1413.72 682.556 L1413.16 682.556 L1412.6 682.556 L1412.04 682.556 L1411.48 682.556 L1410.92 682.556 L1410.36 682.556 L1409.8 682.556 L1409.24 682.556 L1408.68 682.556 L1408.13 682.556 L1407.57 682.556 L1407.01 682.556 L1406.45 682.556 L1405.89 682.556 L1405.33 682.556 L1404.77 682.556 L1404.21 682.556 L1403.65 682.556 L1403.09 682.556 L1402.53 682.556 L1401.97 682.556 L1401.41 682.556 L1400.86 682.556 L1400.3 682.556 L1399.74 682.556 L1399.18 682.556 L1398.62 682.556 L1398.06 682.556 L1397.5 682.556 L1396.94 682.556 L1396.38 682.556 L1395.82 682.556 L1395.26 682.556 L1394.7 682.556 L1394.14 682.556 L1393.58 682.556 L1393.03 682.556 L1392.47 682.556 L1391.91 682.556 L1391.35 682.556 L1390.79 682.556 L1390.23 682.556 L1389.67 682.556 L1389.11 682.556 L1388.55 682.556 L1387.99 682.556 L1387.43 682.556 L1386.87 682.556 L1386.31 682.556 L1385.76 682.556 L1385.2 682.556 L1384.64 682.556 L1384.08 682.556 L1383.52 682.556 L1382.96 682.556 L1382.4 682.556 L1381.84 682.556 L1381.28 682.556 L1380.72 682.556 L1380.16 682.556 L1379.6 682.556 L1379.04 682.556 L1378.49 682.556 L1377.93 682.556 L1377.37 682.556 L1376.81 682.556 L1376.25 682.556 L1375.69 682.556 L1375.13 682.556 L1374.57 682.556 L1374.01 682.556 L1373.45 682.556 L1372.89 682.556 L1372.33 682.556 L1371.77 682.556 L1371.21 682.556 L1370.66 682.556 L1370.1 682.556 L1369.54 682.556 L1368.98 682.556 L1368.42 682.556 L1367.86 682.556 L1367.3 682.556 L1366.74 682.556 L1366.18 682.556 L1365.62 682.556 L1365.06 682.556 L1364.5 682.556 L1363.94 682.556 L1363.39 682.556 L1362.83 682.556 L1362.27 682.556 L1361.71 682.556 L1361.15 682.556 L1360.59 682.556 L1360.03 682.556 L1359.47 682.556 L1358.91 682.556 L1358.35 682.556 L1357.79 682.556 L1357.23 682.556 L1356.67 682.556 L1356.12 682.556 L1355.56 682.556 L1355 682.556 L1354.44 682.556 L1353.88 682.556 L1353.32 682.556 L1352.76 682.556 L1352.2 682.556 L1351.64 682.556 L1351.08 682.556 L1350.52 682.556 L1349.96 682.556 L1349.4 682.556 L1348.84 682.556 L1348.29 682.556 L1347.73 682.556 L1347.17 682.556 L1346.61 682.556 L1346.05 682.556 L1345.49 682.556 L1344.93 682.556 L1344.37 682.556 L1343.81 682.556 L1343.25 682.556 L1342.69 682.556 L1342.13 682.556 L1341.57 682.556 L1341.02 682.556 L1340.46 682.556 L1339.9 682.556 L1339.34 682.556 L1338.78 682.556 L1338.22 682.556 L1337.66 682.556 L1337.1 682.556 L1336.54 682.556 L1335.98 682.556 L1335.42 682.556 L1334.86 682.556 L1334.3 682.556 L1333.75 682.556 L1333.19 682.556 L1332.63 682.556 L1332.07 682.556 L1331.51 682.556 L1330.95 682.556 L1330.39 682.556 L1329.83 682.556 L1329.27 682.556 L1328.71 682.556 L1328.15 682.556 L1327.59 682.556 L1327.03 682.556 L1326.47 682.556 L1325.92 682.556 L1325.36 682.556 L1324.8 682.556 L1324.24 682.556 L1323.68 682.556 L1323.12 682.556 L1322.56 682.556 L1322 682.556 L1321.44 682.556 L1320.88 682.556 L1320.32 682.556 L1319.76 682.556 L1319.2 682.556 L1318.65 682.556 L1318.09 682.556 L1317.53 682.556 L1316.97 682.556 L1316.41 682.556 L1315.85 682.556 L1315.29 682.556 L1314.73 682.556 L1314.17 682.556 L1313.61 682.556 L1313.05 682.556 L1312.49 682.556 L1311.93 682.556 L1311.38 682.556 L1310.82 682.556 L1310.26 682.556 L1309.7 682.556 L1309.14 682.556 L1308.58 682.556 L1308.02 682.556 L1307.46 682.556 L1306.9 682.556 L1306.34 682.556 L1305.78 682.556 L1305.22 682.556 L1304.66 682.556 L1304.1 682.556 L1303.55 682.556 L1302.99 682.556 L1302.43 682.556 L1301.87 682.556 L1301.31 682.556 L1300.75 682.556 L1300.19 682.556 L1299.63 682.556 L1299.07 682.556 L1298.51 682.556 L1297.95 682.556 L1297.39 682.556 L1296.83 682.556 L1296.28 682.556 L1295.72 682.556 L1295.16 682.556 L1294.6 682.556 L1294.04 682.556 L1293.48 682.556 L1292.92 682.556 L1292.36 682.556 L1291.8 682.556 L1291.24 682.556 L1290.68 682.556 L1290.12 682.556 L1289.56 682.556 L1289 682.556 L1288.45 682.556 L1287.89 682.556 L1287.33 682.556 L1286.77 682.556 L1286.21 682.556 L1285.65 682.556 L1285.09 682.556 L1284.53 682.556 L1283.97 682.556 L1283.41 682.556 L1282.85 682.556 L1282.29 682.556 L1281.73 682.556 L1281.18 682.556 L1280.62 682.556 L1280.06 682.556 L1279.5 682.556 L1278.94 682.556 L1278.38 682.556 L1277.82 682.556 L1277.26 682.556 L1276.7 682.556 L1276.14 682.556 L1275.58 682.556 L1275.02 682.556 L1274.46 682.556 L1273.91 682.556 L1273.35 682.556 L1272.79 682.556 L1272.23 682.556 L1271.67 682.556 L1271.11 682.556 L1270.55 682.556 L1269.99 682.556 L1269.43 682.556 L1268.87 682.556 L1268.31 682.556 L1267.75 682.556 L1267.19 682.556 L1266.63 682.556 L1266.08 682.556 L1265.52 682.556 L1264.96 682.556 L1264.4 682.556 L1263.84 682.556 L1263.28 682.556 L1262.72 682.556 L1262.16 682.556 L1261.6 682.556 L1261.04 682.556 L1260.48 682.556 L1259.92 682.556 L1259.36 682.556 L1258.81 682.556 L1258.25 682.556 L1257.69 682.556 L1257.13 682.556 L1256.57 682.556 L1256.01 682.556 L1255.45 682.556 L1254.89 682.556 L1254.33 682.556 L1253.77 682.556 L1253.21 682.556 L1252.65 682.556 L1252.09 682.556 L1251.54 682.556 L1250.98 682.556 L1250.42 682.556 L1249.86 682.556 L1249.3 682.556 L1248.74 682.556 L1248.18 682.556 L1247.62 682.556 L1247.06 682.556 L1246.5 682.556 L1245.94 682.556 L1245.38 682.556 L1244.82 682.556 L1244.26 682.556 L1243.71 682.556 L1243.15 682.556 L1242.59 682.556 L1242.03 682.556 L1241.47 682.556 L1240.91 682.556 L1240.35 682.556 L1239.79 682.556 L1239.23 682.556 L1238.67 682.556 L1238.11 682.556 L1237.55 682.556 L1236.99 682.556 L1236.44 682.556 L1235.88 682.556 L1235.32 682.556 L1234.76 682.556 L1234.2 682.556 L1233.64 682.556 L1233.08 682.556 L1232.52 682.556 L1231.96 682.556 L1231.4 682.556 L1230.84 682.556 L1230.28 682.556 L1229.72 682.556 L1229.17 682.556 L1228.61 682.556 L1228.05 682.556 L1227.49 682.556 L1226.93 682.556 L1226.37 682.556 L1225.81 682.556 L1225.25 682.556 L1224.69 682.556 L1224.13 682.556 L1223.57 682.556 L1223.01 682.556 L1222.45 682.556 L1221.89 682.556 L1221.34 682.556 L1220.78 682.556 L1220.22 682.556 L1219.66 682.556 L1219.1 682.556 L1218.54 682.556 L1217.98 682.556 L1217.42 682.556 L1216.86 682.556 L1216.3 682.556 L1215.74 682.556 L1215.18 682.556 L1214.62 682.556 L1214.07 682.556 L1213.51 682.556 L1212.95 682.556 L1212.39 682.556 L1211.83 682.556 L1211.27 682.556 L1210.71 682.556 L1210.15 682.556 L1209.59 682.556 L1209.03 682.556 L1208.47 682.556 L1207.91 682.556 L1207.35 682.556 L1206.8 682.556 L1206.24 682.556 L1205.68 682.556 L1205.12 682.556 L1204.56 682.556 L1204 682.556 L1203.44 682.556 L1202.88 682.556 L1202.32 682.556 L1201.76 682.556 L1201.2 682.556 L1200.64 682.556 L1200.08 682.556 L1199.52 682.556 L1198.97 682.556 L1198.41 682.556 L1197.85 682.556 L1197.29 682.556 L1196.73 682.556 L1196.17 682.556 L1195.61 682.556 L1195.05 682.556 L1194.49 682.556 L1193.93 682.556 L1193.37 682.556 L1192.81 682.556 L1192.25 682.556 L1191.7 682.556 L1191.14 682.556 L1190.58 682.556 L1190.02 682.556 L1189.46 682.556 L1188.9 682.556 L1188.34 682.556 L1187.78 682.556 L1187.22 682.556 L1186.66 682.556 L1186.1 682.556 L1185.54 682.556 L1184.98 682.556 L1184.43 682.556 L1183.87 682.556 L1183.31 682.556 L1182.75 682.556 L1182.19 682.556 L1181.63 682.556 L1181.07 682.556 L1180.51 682.556 L1179.95 682.556 L1179.39 682.556 L1178.83 682.556 L1178.27 682.556 L1177.71 682.556 L1177.15 682.556 L1176.6 682.556 L1176.04 682.556 L1175.48 682.556 L1174.92 682.556 L1174.36 682.556 L1173.8 682.556 L1173.24 682.556 L1172.68 682.556 L1172.12 682.556 L1171.56 682.556 L1171 682.556 L1170.44 682.556 L1169.88 682.556 L1169.33 682.556 L1168.77 682.556 L1168.21 682.556 L1167.65 682.556 L1167.09 682.556 L1166.53 682.556 L1165.97 682.556 L1165.41 682.556 L1164.85 682.556 L1164.29 682.556 L1163.73 682.556 L1163.17 682.556 L1162.61 682.556 L1162.05 682.556 L1161.5 682.556 L1160.94 682.556 L1160.38 682.556 L1159.82 682.556 L1159.26 682.556 L1158.7 682.556 L1158.14 682.556 L1157.58 682.556 L1157.02 682.556 L1156.46 682.556 L1155.9 682.556 L1155.34 682.556 L1154.78 682.556 L1154.23 682.556 L1153.67 682.556 L1153.11 682.556 L1152.55 682.556 L1151.99 682.556 L1151.43 682.556 L1150.87 682.556 L1150.31 682.556 L1149.75 682.556 L1149.19 682.556 L1148.63 682.556 L1148.07 682.556 L1147.51 682.556 L1146.96 682.556 L1146.4 682.556 L1145.84 682.556 L1145.28 682.556 L1144.72 682.556 L1144.16 682.556 L1143.6 682.556 L1143.04 682.556 L1142.48 682.556 L1141.92 682.556 L1141.36 682.556 L1140.8 682.556 L1140.24 682.556 L1139.68 682.556 L1139.13 682.556 L1138.57 682.556 L1138.01 682.556 L1137.45 682.556 L1136.89 682.556 L1136.33 682.556 L1135.77 682.556 L1135.21 682.556 L1134.65 682.556 L1134.09 682.556 L1133.53 682.556 L1132.97 682.556 L1132.41 682.556 L1131.86 682.556 L1131.3 682.556 L1130.74 682.556 L1130.18 682.556 L1129.62 682.556 L1129.06 682.556 L1128.5 682.556 L1127.94 682.556 L1127.38 682.556 L1126.82 682.556 L1126.26 682.556 L1125.7 682.556 L1125.14 682.556 L1124.59 682.556 L1124.03 682.556 L1123.47 682.556 L1122.91 682.556 L1122.35 682.556 L1121.79 682.556 L1121.23 682.556 L1120.67 682.556 L1120.11 682.556 L1119.55 682.556 L1118.99 682.556 L1118.43 682.556 L1117.87 682.556 L1117.31 682.556 L1116.76 682.556 L1116.2 682.556 L1115.64 682.556 L1115.08 682.556 L1114.52 682.556 L1113.96 682.556 L1113.4 682.556 L1112.84 682.556 L1112.28 682.556 L1111.72 682.556 L1111.16 682.556 L1110.6 682.556 L1110.04 682.556 L1109.49 682.556 L1108.93 682.556 L1108.37 682.556 L1107.81 682.556 L1107.25 682.556 L1106.69 682.556 L1106.13 682.556 L1105.57 682.556 L1105.01 682.556 L1104.45 682.556 L1103.89 682.556 L1103.33 682.556 L1102.77 682.556 L1102.22 682.556 L1101.66 682.556 L1101.1 682.556 L1100.54 682.556 L1099.98 682.556 L1099.42 682.556 L1098.86 682.556 L1098.3 682.556 L1097.74 682.556 L1097.18 682.556 L1096.62 682.556 L1096.06 682.556 L1095.5 682.556 L1094.94 682.556 L1094.39 682.556 L1093.83 682.556 L1093.27 682.556 L1092.71 682.556 L1092.15 682.556 L1091.59 682.556 L1091.03 682.556 L1090.47 682.556 L1089.91 682.556 L1089.35 682.556 L1088.79 682.556 L1088.23 682.556 L1087.67 682.556 L1087.12 682.556 L1086.56 682.556 L1086 682.556 L1085.44 682.556 L1084.88 682.556 L1084.32 682.556 L1083.76 682.556 L1083.2 682.556 L1082.64 682.556 L1082.08 682.556 L1081.52 682.556 L1080.96 682.556 L1080.4 682.556 L1079.85 682.556 L1079.29 682.556 L1078.73 682.556 L1078.17 682.556 L1077.61 682.556 L1077.05 682.556 L1076.49 682.556 L1075.93 682.556 L1075.37 682.556 L1074.81 682.556 L1074.25 682.556 L1073.69 682.556 L1073.13 682.556 L1072.57 682.556 L1072.02 682.556 L1071.46 682.556 L1070.9 682.556 L1070.34 682.556 L1069.78 682.556 L1069.22 682.556 L1068.66 682.556 L1068.1 682.556 L1067.54 682.556 L1066.98 682.556 L1066.42 682.556 L1065.86 682.556 L1065.3 682.556 L1064.75 682.556 L1064.19 682.556 L1063.63 682.556 L1063.07 682.556 L1062.51 682.556 L1061.95 682.556 L1061.39 682.556 L1060.83 682.556 L1060.27 682.556 L1059.71 682.556 L1059.15 682.556 L1058.59 682.556 L1058.03 682.556 L1057.48 682.556 L1056.92 682.556 L1056.36 682.556 L1055.8 682.556 L1055.24 682.556 L1054.68 682.556 L1054.12 682.556 L1053.56 682.556 L1053 682.556 L1052.44 682.556 L1051.88 682.556 L1051.32 682.556 L1050.76 682.556 L1050.2 682.556 L1049.65 682.556 L1049.09 682.556 L1048.53 682.556 L1047.97 682.556 L1047.41 682.556 L1046.85 682.556 L1046.29 682.556 L1045.73 682.556 L1045.17 682.556 L1044.61 682.556 L1044.05 682.556 L1043.49 682.556 L1042.93 682.556 L1042.38 682.556 L1041.82 682.556 L1041.26 682.556 L1040.7 682.556 L1040.14 682.556 L1039.58 682.556 L1039.02 682.556 L1038.46 682.556 L1037.9 682.556 L1037.34 682.556 L1036.78 682.556 L1036.22 682.556 L1035.66 682.556 L1035.1 682.556 L1034.55 682.556 L1033.99 682.556 L1033.43 682.556 L1032.87 682.556 L1032.31 682.556 L1031.75 682.556 L1031.19 682.556 L1030.63 682.556 L1030.07 682.556 L1029.51 682.556 L1028.95 682.556 L1028.39 682.556 L1027.83 682.556 L1027.28 682.556 L1026.72 682.556 L1026.16 682.556 L1025.6 682.556 L1025.04 682.556 L1024.48 682.556 L1023.92 682.556 L1023.36 682.556 L1022.8 682.556 L1022.24 682.556 L1021.68 682.556 L1021.12 682.556 L1020.56 682.556 L1020.01 682.556 L1019.45 682.556 L1018.89 682.556 L1018.33 682.556 L1017.77 682.556 L1017.21 682.556 L1016.65 682.556 L1016.09 682.556 L1015.53 682.556 L1014.97 682.556 L1014.41 682.556 L1013.85 682.556 L1013.29 682.556 L1012.73 682.556 L1012.18 682.556 L1011.62 682.556 L1011.06 682.556 L1010.5 682.556 L1009.94 682.556 L1009.38 682.556 L1008.82 682.556 L1008.26 682.556 L1007.7 682.556 L1007.14 682.556 L1006.58 682.556 L1006.02 682.556 L1005.46 682.556 L1004.91 682.556 L1004.35 682.556 L1003.79 682.556 L1003.23 682.556 L1002.67 682.556 L1002.11 682.556 L1001.55 682.556 L1000.99 682.556 L1000.43 682.556 L999.872 682.556 L999.313 682.556 L998.754 682.556 L998.194 682.556 L997.635 682.556 L997.076 682.556 L996.517 682.556 L995.957 682.556 L995.398 682.556 L994.839 682.556 L994.28 682.556 L993.72 682.556 L993.161 682.556 L992.602 682.556 L992.043 682.556 L991.483 682.556 L990.924 682.556 L990.365 682.556 L989.806 682.556 L989.246 682.556 L988.687 682.556 L988.128 682.556 L987.569 682.556 L987.009 682.556 L986.45 682.556 L985.891 682.556 L985.332 682.556 L984.772 682.556 L984.213 682.556 L983.654 682.556 L983.095 682.556 L982.535 682.556 L981.976 682.556 L981.417 682.556 L980.858 682.556 L980.298 682.556 L979.739 682.556 L979.18 682.556 L978.621 682.556 L978.061 682.556 L977.502 682.556 L976.943 682.556 L976.384 682.556 L975.824 682.556 L975.265 682.556 L974.706 682.556 L974.147 682.556 L973.587 682.556 L973.028 682.556 L972.469 682.556 L971.91 682.556 L971.35 682.556 L970.791 682.556 L970.232 682.556 L969.673 682.556 L969.113 682.556 L968.554 682.556 L967.995 682.556 L967.436 682.556 L966.876 682.556 L966.317 682.556 L965.758 682.556 L965.199 682.556 L964.639 682.556 L964.08 682.556 L963.521 682.556 L962.962 682.556 L962.402 682.556 L961.843 682.556 L961.284 682.556 L960.725 682.556 L960.165 682.556 L959.606 682.556 L959.047 682.556 L958.488 682.556 L957.928 682.556 L957.369 682.556 L956.81 682.556 L956.251 682.556 L955.691 682.556 L955.132 682.556 L954.573 682.556 L954.014 682.556 L953.454 682.556 L952.895 682.556 L952.336 682.556 L951.777 682.556 L951.217 682.556 L950.658 682.556 L950.099 682.556 L949.54 682.556 L948.98 682.556 L948.421 682.556 L947.862 682.556 L947.303 682.556 L946.743 682.556 L946.184 682.556 L945.625 682.556 L945.066 682.556 L944.506 682.556 L943.947 682.556 L943.388 682.556 L942.829 682.556 L942.269 682.556 L941.71 682.556 L941.151 682.556 L940.592 682.556 L940.032 682.556 L939.473 682.556 L938.914 682.556 L938.355 682.556 L937.795 682.556 L937.236 682.556 L936.677 682.556 L936.118 682.556 L935.558 682.556 L934.999 682.556 L934.44 682.556 L933.881 682.556 L933.321 682.556 L932.762 682.556 L932.203 682.556 L931.644 682.556 L931.084 682.556 L930.525 682.556 L929.966 682.556 L929.406 682.556 L928.847 682.556 L928.288 682.556 L927.729 682.556 L927.169 682.556 L926.61 682.556 L926.051 682.556 L925.492 682.556 L924.932 682.556 L924.373 682.556 L923.814 682.556 L923.255 682.556 L922.695 682.556 L922.136 682.556 L921.577 682.556 L921.018 682.556 L920.458 682.556 L919.899 682.556 L919.34 682.556 L918.781 682.556 L918.221 682.556 L917.662 682.556 L917.103 682.556 L916.544 682.556 L915.984 682.556 L915.425 682.556 L914.866 682.556 L914.307 682.556 L913.747 682.556 L913.188 682.556 L912.629 682.556 L912.07 682.556 L911.51 682.556 L910.951 682.556 L910.392 682.556 L909.833 682.556 L909.273 682.556 L908.714 682.556 L908.155 682.556 L907.596 682.556 L907.036 682.556 L906.477 682.556 L905.918 682.556 L905.359 682.556 L904.799 682.556 L904.24 682.556 L903.681 682.556 L903.122 682.556 L902.562 682.556 L902.003 682.556 L901.444 682.556 L900.885 682.556 L900.325 682.556 L899.766 682.556 L899.207 682.556 L898.648 682.556 L898.088 682.556 L897.529 682.556 L896.97 682.556 L896.411 682.556 L895.851 682.556 L895.292 682.556 L894.733 682.556 L894.174 682.556 L893.614 682.556 L893.055 682.556 L892.496 682.556 L891.937 682.556 L891.377 682.556 L890.818 682.556 L890.259 682.556 L889.7 682.556 L889.14 682.556 L888.581 682.556 L888.022 682.556 L887.463 682.556 L886.903 682.556 L886.344 682.556 L885.785 682.556 L885.226 682.556 L884.666 682.556 L884.107 682.556 L883.548 682.556 L882.989 682.556 L882.429 682.556 L881.87 682.556 L881.311 682.556 L880.752 682.556 L880.192 682.556 L879.633 682.556 L879.074 682.556 L878.515 682.556 L877.955 682.556 L877.396 682.556 L876.837 682.556 L876.278 682.556 L875.718 682.556 L875.159 682.556 L874.6 682.556 L874.041 682.556 L873.481 682.556 L872.922 682.556 L872.363 682.556 L871.804 682.556 L871.244 682.556 L870.685 682.556 L870.126 682.556 L869.567 682.556 L869.007 682.556 L868.448 682.556 L867.889 682.556 L867.33 682.556 L866.77 682.556 L866.211 682.556 L865.652 682.556 L865.093 682.556 L864.533 682.556 L863.974 682.556 L863.415 682.556 L862.856 682.556 L862.296 682.556 L861.737 682.556 L861.178 682.556 L860.619 682.556 L860.059 682.556 L859.5 682.556 L858.941 682.556 L858.382 682.556 L857.822 682.556 L857.263 682.556 L856.704 682.556 L856.145 682.556 L855.585 682.556 L855.026 682.556 L854.467 682.556 L853.908 682.556 L853.348 682.556 L852.789 682.556 L852.23 682.556 L851.671 682.556 L851.111 682.556 L850.552 682.556 L849.993 682.556 L849.434 682.556 L848.874 682.556 L848.315 682.556 L847.756 682.556 L847.197 682.556 L846.637 682.556 L846.078 682.556 L845.519 682.556 L844.96 682.556 L844.4 682.556 L843.841 682.556 L843.282 682.556 L842.723 682.556 L842.163 682.556 L841.604 682.556 L841.045 682.556 L840.486 682.556 L839.926 682.556 L839.367 682.556 L838.808 682.556 L838.249 682.556 L837.689 682.556 L837.13 682.556 L836.571 682.556 L836.012 682.556 L835.452 682.556 L834.893 682.556 L834.334 682.556 L833.775 682.556 L833.215 682.556 L832.656 682.556 L832.097 682.556 L831.538 682.556 L830.978 682.556 L830.419 682.556 L829.86 682.556 L829.301 682.556 L828.741 682.556 L828.182 682.556 L827.623 682.556 L827.064 682.556 L826.504 682.556 L825.945 682.556 L825.386 682.556 L824.827 682.556 L824.267 682.556 L823.708 682.556 L823.149 682.556 L822.59 682.556 L822.03 682.556 L821.471 682.556 L820.912 682.556 L820.353 682.556 L819.793 682.556 L819.234 682.556 L818.675 682.556 L818.116 682.556 L817.556 682.556 L816.997 682.556 L816.438 682.556 L815.879 682.556 L815.319 682.556 L814.76 682.556 L814.201 682.556 L813.642 682.556 L813.082 682.556 L812.523 682.556 L811.964 682.556 L811.405 682.556 L810.845 682.556 L810.286 682.556 L809.727 682.556 L809.168 682.556 L808.608 682.556 L808.049 682.556 L807.49 682.556 L806.931 682.556 L806.371 682.556 L805.812 682.556 L805.253 682.556 L804.693 682.556 L804.134 682.556 L803.575 682.556 L803.016 682.556 L802.456 682.556 L801.897 682.556 L801.338 682.556 L800.779 682.556 L800.219 682.556 L799.66 682.556 L799.101 682.556 L798.542 682.556 L797.982 682.556 L797.423 682.556 L796.864 682.556 L796.305 682.556 L795.745 682.556 L795.186 682.556 L794.627 682.556 L794.068 682.556 L793.508 682.556 L792.949 682.556 L792.39 682.556 L791.831 682.556 L791.271 682.556 L790.712 682.556 L790.153 682.556 L789.594 682.556 L789.034 682.556 L788.475 682.556 L787.916 682.556 L787.357 682.556 L786.797 682.556 L786.238 682.556 L785.679 682.556 L785.12 682.556 L784.56 682.556 L784.001 682.556 L783.442 682.556 L782.883 682.556 L782.323 682.556 L781.764 682.556 L781.205 682.556 L780.646 682.556 L780.086 682.556 L779.527 682.556 L778.968 682.556 L778.409 682.556 L777.849 682.556 L777.29 682.556 L776.731 682.556 L776.172 682.556 L775.612 682.556 L775.053 682.556 L774.494 682.556 L773.935 682.556 L773.375 682.556 L772.816 682.556 L772.257 682.556 L771.698 682.556 L771.138 682.556 L770.579 682.556 L770.02 682.556 L769.461 682.556 L768.901 682.556 L768.342 682.556 L767.783 682.556 L767.224 682.556 L766.664 682.556 L766.105 682.556 L765.546 682.556 L764.987 682.556 L764.427 682.556 L763.868 682.556 L763.309 682.556 L762.75 682.556 L762.19 682.556 L761.631 682.556 L761.072 682.556 L760.513 682.556 L759.953 682.556 L759.394 682.556 L758.835 682.556 L758.276 682.556 L757.716 682.556 L757.157 682.556 L756.598 682.556 L756.039 682.556 L755.479 682.556 L754.92 682.556 L754.361 682.556 L753.802 682.556 L753.242 682.556 L752.683 682.556 L752.124 682.556 L751.565 682.556 L751.005 682.556 L750.446 682.556 L749.887 682.556 L749.328 682.556 L748.768 682.556 L748.209 682.556 L747.65 682.556 L747.091 682.556 L746.531 682.556 L745.972 682.556 L745.413 682.556 L744.854 682.556 L744.294 682.556 L743.735 682.556 L743.176 682.556 L742.617 682.556 L742.057 682.556 L741.498 682.556 L740.939 682.556 L740.38 682.556 L739.82 682.556 L739.261 682.556 L738.702 682.556 L738.143 682.556 L737.583 682.556 L737.024 682.556 L736.465 682.556 L735.906 682.556 L735.346 682.556 L734.787 682.556 L734.228 682.556 L733.669 682.556 L733.109 682.556 L732.55 682.556 L731.991 682.556 L731.432 682.556 L730.872 682.556 L730.313 682.556 L729.754 682.556 L729.195 682.556 L728.635 682.556 L728.076 682.556 L727.517 682.556 L726.958 682.556 L726.398 682.556 L725.839 682.556 L725.28 682.556 L724.721 682.556 L724.161 682.556 L723.602 682.556 L723.043 682.556 L722.484 682.556 L721.924 682.556 L721.365 682.556 L720.806 682.556 L720.247 682.556  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip403)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.659 720.806,683.659 721.365,683.659 721.924,683.659 722.484,683.659 723.043,683.659 723.602,683.659 724.161,683.659 724.721,683.659 725.28,683.659 725.839,683.659 726.398,683.659 726.958,683.659 727.517,683.659 728.076,683.659 728.635,683.659 729.195,683.659 729.754,683.659 730.313,683.659 730.872,683.659 731.432,683.659 731.991,683.659 732.55,683.659 733.109,683.659 733.669,683.659 734.228,683.659 734.787,683.659 735.346,683.659 735.906,683.659 736.465,683.659 737.024,683.659 737.583,683.659 738.143,683.659 738.702,683.659 739.261,683.659 739.82,683.659 740.38,683.659 740.939,683.659 741.498,683.659 742.057,683.659 742.617,683.659 743.176,683.659 743.735,683.659 744.294,683.659 744.854,683.659 745.413,683.659 745.972,683.659 746.531,683.659 747.091,683.659 747.65,683.659 748.209,683.659 748.768,683.659 749.328,683.659 749.887,683.659 750.446,683.659 751.005,683.659 751.565,683.659 752.124,683.659 752.683,683.659 753.242,683.659 753.802,683.659 754.361,683.659 754.92,683.659 755.479,683.659 756.039,683.659 756.598,683.659 757.157,683.659 757.716,683.659 758.276,683.659 758.835,683.659 759.394,683.659 759.953,683.659 760.513,683.659 761.072,683.659 761.631,683.659 762.19,683.659 762.75,683.659 763.309,683.659 763.868,683.659 764.427,683.659 764.987,683.659 765.546,683.659 766.105,683.659 766.664,683.659 767.224,683.659 767.783,683.659 768.342,683.659 768.901,683.659 769.461,683.659 770.02,683.659 770.579,683.659 771.138,683.659 771.698,683.659 772.257,683.659 772.816,683.659 773.375,683.659 773.935,683.659 774.494,683.659 775.053,683.659 775.612,683.659 776.172,683.659 776.731,683.659 777.29,683.659 777.849,683.659 778.409,683.659 778.968,683.659 779.527,683.659 780.086,683.659 780.646,683.659 781.205,683.659 781.764,683.659 782.323,683.659 782.883,683.659 783.442,683.659 784.001,683.659 784.56,683.659 785.12,683.659 785.679,683.659 786.238,683.659 786.797,683.659 787.357,683.659 787.916,683.659 788.475,683.659 789.034,683.659 789.594,683.659 790.153,683.659 790.712,683.659 791.271,683.659 791.831,683.659 792.39,683.659 792.949,683.659 793.508,683.659 794.068,683.659 794.627,683.659 795.186,683.659 795.745,683.659 796.305,683.659 796.864,683.659 797.423,683.659 797.982,683.659 798.542,683.659 799.101,683.659 799.66,683.659 800.219,683.659 800.779,683.659 801.338,683.659 801.897,683.659 802.456,683.659 803.016,683.659 803.575,683.659 804.134,683.659 804.693,683.659 805.253,683.659 805.812,683.659 806.371,683.659 806.931,683.659 807.49,683.659 808.049,683.659 808.608,683.659 809.168,683.659 809.727,683.659 810.286,683.659 810.845,683.659 811.405,683.659 811.964,683.659 812.523,683.659 813.082,683.659 813.642,683.659 814.201,683.659 814.76,683.659 815.319,683.659 815.879,683.659 816.438,683.659 816.997,683.659 817.556,683.659 818.116,683.659 818.675,683.659 819.234,683.659 819.793,683.659 820.353,683.659 820.912,683.659 821.471,683.659 822.03,683.659 822.59,683.659 823.149,683.659 823.708,683.659 824.267,683.659 824.827,683.659 825.386,683.659 825.945,683.659 826.504,683.659 827.064,683.659 827.623,683.659 828.182,683.659 828.741,683.659 829.301,683.659 829.86,683.659 830.419,683.659 830.978,683.659 831.538,683.659 832.097,683.659 832.656,683.659 833.215,683.659 833.775,683.659 834.334,683.659 834.893,683.659 835.452,683.659 836.012,683.659 836.571,683.659 837.13,683.659 837.689,683.659 838.249,683.659 838.808,683.659 839.367,683.659 839.926,683.659 840.486,683.659 841.045,683.659 841.604,683.659 842.163,683.659 842.723,683.659 843.282,683.659 843.841,683.659 844.4,683.659 844.96,683.659 845.519,683.659 846.078,683.659 846.637,683.659 847.197,683.659 847.756,683.659 848.315,683.659 848.874,683.659 849.434,683.659 849.993,683.659 850.552,683.659 851.111,683.659 851.671,683.659 852.23,683.659 852.789,683.659 853.348,683.659 853.908,683.659 854.467,683.659 855.026,683.659 855.585,683.659 856.145,683.659 856.704,683.659 857.263,683.659 857.822,683.659 858.382,683.659 858.941,683.659 859.5,683.659 860.059,683.659 860.619,683.659 861.178,683.659 861.737,683.659 862.296,683.659 862.856,683.659 863.415,683.659 863.974,683.659 864.533,683.659 865.093,683.659 865.652,683.659 866.211,683.659 866.77,683.659 867.33,683.659 867.889,683.659 868.448,683.659 869.007,683.659 869.567,683.659 870.126,683.659 870.685,683.659 871.244,683.659 871.804,683.659 872.363,683.659 872.922,683.659 873.481,683.659 874.041,683.659 874.6,683.659 875.159,683.659 875.718,683.659 876.278,683.659 876.837,683.659 877.396,683.659 877.955,683.659 878.515,683.659 879.074,683.659 879.633,683.659 880.192,683.659 880.752,683.659 881.311,683.659 881.87,683.659 882.429,683.659 882.989,683.659 883.548,683.659 884.107,683.659 884.666,683.659 885.226,683.659 885.785,683.659 886.344,683.659 886.903,683.659 887.463,683.659 888.022,683.659 888.581,683.659 889.14,683.659 889.7,683.659 890.259,683.659 890.818,683.659 891.377,683.659 891.937,683.659 892.496,683.659 893.055,683.659 893.614,683.659 894.174,683.659 894.733,683.659 895.292,683.659 895.851,683.659 896.411,683.659 896.97,683.659 897.529,683.659 898.088,683.659 898.648,683.659 899.207,683.659 899.766,683.659 900.325,683.659 900.885,683.659 901.444,683.659 902.003,683.659 902.562,683.659 903.122,683.659 903.681,683.659 904.24,683.659 904.799,683.659 905.359,683.659 905.918,683.659 906.477,683.659 907.036,683.659 907.596,683.659 908.155,683.659 908.714,683.659 909.273,683.659 909.833,683.659 910.392,683.659 910.951,683.659 911.51,683.659 912.07,683.659 912.629,683.659 913.188,683.659 913.747,683.659 914.307,683.659 914.866,683.659 915.425,683.659 915.984,683.659 916.544,683.659 917.103,683.659 917.662,683.659 918.221,683.659 918.781,683.659 919.34,683.659 919.899,683.659 920.458,683.659 921.018,683.659 921.577,683.659 922.136,683.659 922.695,683.659 923.255,683.659 923.814,683.659 924.373,683.659 924.932,683.659 925.492,683.659 926.051,683.659 926.61,683.659 927.169,683.659 927.729,683.659 928.288,683.659 928.847,683.659 929.406,683.659 929.966,683.659 930.525,683.659 931.084,683.659 931.644,683.659 932.203,683.659 932.762,683.659 933.321,683.659 933.881,683.659 934.44,683.659 934.999,683.659 935.558,683.659 936.118,683.659 936.677,683.659 937.236,683.659 937.795,683.659 938.355,683.659 938.914,683.659 939.473,683.659 940.032,683.659 940.592,683.659 941.151,683.659 941.71,683.659 942.269,683.659 942.829,683.659 943.388,683.659 943.947,683.659 944.506,683.659 945.066,683.659 945.625,683.659 946.184,683.659 946.743,683.659 947.303,683.659 947.862,683.659 948.421,683.659 948.98,683.659 949.54,683.659 950.099,683.659 950.658,683.659 951.217,683.659 951.777,683.659 952.336,683.659 952.895,683.659 953.454,683.659 954.014,683.659 954.573,683.659 955.132,683.659 955.691,683.659 956.251,683.659 956.81,683.659 957.369,683.659 957.928,683.659 958.488,683.659 959.047,683.659 959.606,683.659 960.165,683.659 960.725,683.659 961.284,683.659 961.843,683.659 962.402,683.659 962.962,683.659 963.521,683.659 964.08,683.659 964.639,683.659 965.199,683.659 965.758,683.659 966.317,683.659 966.876,683.659 967.436,683.659 967.995,683.659 968.554,683.659 969.113,683.659 969.673,683.659 970.232,683.659 970.791,683.659 971.35,683.659 971.91,683.659 972.469,683.659 973.028,683.659 973.587,683.659 974.147,683.659 974.706,683.659 975.265,683.659 975.824,683.659 976.384,683.659 976.943,683.659 977.502,683.659 978.061,683.659 978.621,683.659 979.18,683.659 979.739,683.659 980.298,683.659 980.858,683.659 981.417,683.659 981.976,683.659 982.535,683.659 983.095,683.659 983.654,683.659 984.213,683.659 984.772,683.659 985.332,683.659 985.891,683.659 986.45,683.659 987.009,683.659 987.569,683.659 988.128,683.659 988.687,683.659 989.246,683.659 989.806,683.659 990.365,683.659 990.924,683.659 991.483,683.659 992.043,683.659 992.602,683.659 993.161,683.659 993.72,683.659 994.28,683.659 994.839,683.659 995.398,683.659 995.957,683.659 996.517,683.659 997.076,683.659 997.635,683.659 998.194,683.659 998.754,683.659 999.313,683.659 999.872,683.659 1000.43,683.659 1000.99,683.659 1001.55,683.659 1002.11,683.659 1002.67,683.659 1003.23,683.659 1003.79,683.659 1004.35,683.659 1004.91,683.659 1005.46,683.659 1006.02,683.659 1006.58,683.659 1007.14,683.659 1007.7,683.659 1008.26,683.659 1008.82,683.659 1009.38,683.659 1009.94,683.659 1010.5,683.659 1011.06,683.659 1011.62,683.659 1012.18,683.659 1012.73,683.659 1013.29,683.659 1013.85,683.659 1014.41,683.659 1014.97,683.659 1015.53,683.659 1016.09,683.659 1016.65,683.659 1017.21,683.659 1017.77,683.659 1018.33,683.659 1018.89,683.659 1019.45,683.659 1020.01,683.659 1020.56,683.659 1021.12,683.659 1021.68,683.659 1022.24,683.659 1022.8,683.659 1023.36,683.659 1023.92,683.659 1024.48,683.659 1025.04,683.659 1025.6,683.659 1026.16,683.659 1026.72,683.659 1027.28,683.659 1027.83,683.659 1028.39,683.659 1028.95,683.659 1029.51,683.659 1030.07,683.659 1030.63,683.659 1031.19,683.659 1031.75,683.659 1032.31,683.659 1032.87,683.659 1033.43,683.659 1033.99,683.659 1034.55,683.659 1035.1,683.659 1035.66,683.659 1036.22,683.659 1036.78,683.659 1037.34,683.659 1037.9,683.659 1038.46,683.659 1039.02,683.659 1039.58,683.659 1040.14,683.659 1040.7,683.659 1041.26,683.659 1041.82,683.659 1042.38,683.659 1042.93,683.659 1043.49,683.659 1044.05,683.659 1044.61,683.659 1045.17,683.659 1045.73,683.659 1046.29,683.659 1046.85,683.659 1047.41,683.659 1047.97,683.659 1048.53,683.659 1049.09,683.659 1049.65,683.659 1050.2,683.659 1050.76,683.659 1051.32,683.659 1051.88,683.659 1052.44,683.659 1053,683.659 1053.56,683.659 1054.12,683.659 1054.68,683.659 1055.24,683.659 1055.8,683.659 1056.36,683.659 1056.92,683.659 1057.48,683.659 1058.03,683.659 1058.59,683.659 1059.15,683.659 1059.71,683.659 1060.27,683.659 1060.83,683.659 1061.39,683.659 1061.95,683.659 1062.51,683.659 1063.07,683.659 1063.63,683.659 1064.19,683.659 1064.75,683.659 1065.3,683.659 1065.86,683.659 1066.42,683.659 1066.98,683.659 1067.54,683.659 1068.1,683.659 1068.66,683.659 1069.22,683.659 1069.78,683.659 1070.34,683.659 1070.9,683.659 1071.46,683.659 1072.02,683.659 1072.57,683.659 1073.13,683.659 1073.69,683.659 1074.25,683.659 1074.81,683.659 1075.37,683.659 1075.93,683.659 1076.49,683.659 1077.05,683.659 1077.61,683.659 1078.17,683.659 1078.73,683.659 1079.29,683.659 1079.85,683.659 1080.4,683.659 1080.96,683.659 1081.52,683.659 1082.08,683.659 1082.64,683.659 1083.2,683.659 1083.76,683.659 1084.32,683.659 1084.88,683.659 1085.44,683.659 1086,683.659 1086.56,683.659 1087.12,683.659 1087.67,683.659 1088.23,683.659 1088.79,683.659 1089.35,683.659 1089.91,683.659 1090.47,683.659 1091.03,683.659 1091.59,683.659 1092.15,683.659 1092.71,683.659 1093.27,683.659 1093.83,683.659 1094.39,683.659 1094.94,683.659 1095.5,683.659 1096.06,683.659 1096.62,683.659 1097.18,683.659 1097.74,683.659 1098.3,683.659 1098.86,683.659 1099.42,683.659 1099.98,683.659 1100.54,683.659 1101.1,683.659 1101.66,683.659 1102.22,683.659 1102.77,683.659 1103.33,683.659 1103.89,683.659 1104.45,683.659 1105.01,683.659 1105.57,683.659 1106.13,683.659 1106.69,683.659 1107.25,683.659 1107.81,683.659 1108.37,683.659 1108.93,683.659 1109.49,683.659 1110.04,683.659 1110.6,683.659 1111.16,683.659 1111.72,683.659 1112.28,683.659 1112.84,683.659 1113.4,683.659 1113.96,683.659 1114.52,683.659 1115.08,683.659 1115.64,683.659 1116.2,683.659 1116.76,683.659 1117.31,683.659 1117.87,683.659 1118.43,683.659 1118.99,683.659 1119.55,683.659 1120.11,683.659 1120.67,683.659 1121.23,683.659 1121.79,683.659 1122.35,683.659 1122.91,683.659 1123.47,683.659 1124.03,683.659 1124.59,683.659 1125.14,683.659 1125.7,683.659 1126.26,683.659 1126.82,683.659 1127.38,683.659 1127.94,683.659 1128.5,683.659 1129.06,683.659 1129.62,683.659 1130.18,683.659 1130.74,683.659 1131.3,683.659 1131.86,683.659 1132.41,683.659 1132.97,683.659 1133.53,683.659 1134.09,683.659 1134.65,683.659 1135.21,683.659 1135.77,683.659 1136.33,683.659 1136.89,683.659 1137.45,683.659 1138.01,683.659 1138.57,683.659 1139.13,683.659 1139.68,683.659 1140.24,683.659 1140.8,683.659 1141.36,683.659 1141.92,683.659 1142.48,683.659 1143.04,683.659 1143.6,683.659 1144.16,683.659 1144.72,683.659 1145.28,683.659 1145.84,683.659 1146.4,683.659 1146.96,683.659 1147.51,683.659 1148.07,683.659 1148.63,683.659 1149.19,683.659 1149.75,683.659 1150.31,683.659 1150.87,683.659 1151.43,683.659 1151.99,683.659 1152.55,683.659 1153.11,683.659 1153.67,683.659 1154.23,683.659 1154.78,683.659 1155.34,683.659 1155.9,683.659 1156.46,683.659 1157.02,683.659 1157.58,683.659 1158.14,683.659 1158.7,683.659 1159.26,683.659 1159.82,683.659 1160.38,683.659 1160.94,683.659 1161.5,683.659 1162.05,683.659 1162.61,683.659 1163.17,683.659 1163.73,683.659 1164.29,683.659 1164.85,683.659 1165.41,683.659 1165.97,683.659 1166.53,683.659 1167.09,683.659 1167.65,683.659 1168.21,683.659 1168.77,683.659 1169.33,683.659 1169.88,683.659 1170.44,683.659 1171,683.659 1171.56,683.659 1172.12,683.659 1172.68,683.659 1173.24,683.659 1173.8,683.659 1174.36,683.659 1174.92,683.659 1175.48,683.659 1176.04,683.659 1176.6,683.659 1177.15,683.659 1177.71,683.659 1178.27,683.659 1178.83,683.659 1179.39,683.659 1179.95,683.659 1180.51,683.659 1181.07,683.659 1181.63,683.659 1182.19,683.659 1182.75,683.659 1183.31,683.659 1183.87,683.659 1184.43,683.659 1184.98,683.659 1185.54,683.659 1186.1,683.659 1186.66,683.659 1187.22,683.659 1187.78,683.659 1188.34,683.659 1188.9,683.659 1189.46,683.659 1190.02,683.659 1190.58,683.659 1191.14,683.659 1191.7,683.659 1192.25,683.659 1192.81,683.659 1193.37,683.659 1193.93,683.659 1194.49,683.659 1195.05,683.659 1195.61,683.659 1196.17,683.659 1196.73,683.659 1197.29,683.659 1197.85,683.659 1198.41,683.659 1198.97,683.659 1199.52,683.659 1200.08,683.659 1200.64,683.659 1201.2,683.659 1201.76,683.659 1202.32,683.659 1202.88,683.659 1203.44,683.659 1204,683.659 1204.56,683.659 1205.12,683.659 1205.68,683.659 1206.24,683.659 1206.8,683.659 1207.35,683.659 1207.91,683.659 1208.47,683.659 1209.03,683.659 1209.59,683.659 1210.15,683.659 1210.71,683.659 1211.27,683.659 1211.83,683.659 1212.39,683.659 1212.95,683.659 1213.51,683.659 1214.07,683.659 1214.62,683.659 1215.18,683.659 1215.74,683.659 1216.3,683.659 1216.86,683.659 1217.42,683.659 1217.98,683.659 1218.54,683.659 1219.1,683.659 1219.66,683.659 1220.22,683.659 1220.78,683.659 1221.34,683.659 1221.89,683.659 1222.45,683.659 1223.01,683.659 1223.57,683.659 1224.13,683.659 1224.69,683.659 1225.25,683.659 1225.81,683.659 1226.37,683.659 1226.93,683.659 1227.49,683.659 1228.05,683.659 1228.61,683.659 1229.17,683.659 1229.72,683.659 1230.28,683.659 1230.84,683.659 1231.4,683.659 1231.96,683.659 1232.52,683.659 1233.08,683.659 1233.64,683.659 1234.2,683.659 1234.76,683.659 1235.32,683.659 1235.88,683.659 1236.44,683.659 1236.99,683.659 1237.55,683.659 1238.11,683.659 1238.67,683.659 1239.23,683.659 1239.79,683.659 1240.35,683.659 1240.91,683.659 1241.47,683.659 1242.03,683.659 1242.59,683.659 1243.15,683.659 1243.71,683.659 1244.26,683.659 1244.82,683.659 1245.38,683.659 1245.94,683.659 1246.5,683.659 1247.06,683.659 1247.62,683.659 1248.18,683.659 1248.74,683.659 1249.3,683.659 1249.86,683.659 1250.42,683.659 1250.98,683.659 1251.54,683.659 1252.09,683.659 1252.65,683.659 1253.21,683.659 1253.77,683.659 1254.33,683.659 1254.89,683.659 1255.45,683.659 1256.01,683.659 1256.57,683.659 1257.13,683.659 1257.69,683.659 1258.25,683.659 1258.81,683.659 1259.36,683.659 1259.92,683.659 1260.48,683.659 1261.04,683.659 1261.6,683.659 1262.16,683.659 1262.72,683.659 1263.28,683.659 1263.84,683.659 1264.4,683.659 1264.96,683.659 1265.52,683.659 1266.08,683.659 1266.63,683.659 1267.19,683.659 1267.75,683.659 1268.31,683.659 1268.87,683.659 1269.43,683.659 1269.99,683.659 1270.55,683.659 1271.11,683.659 1271.67,683.659 1272.23,683.659 1272.79,683.659 1273.35,683.659 1273.91,683.659 1274.46,683.659 1275.02,683.659 1275.58,683.659 1276.14,683.659 1276.7,683.659 1277.26,683.659 1277.82,683.659 1278.38,683.659 1278.94,683.659 1279.5,683.659 1280.06,683.659 1280.62,683.659 1281.18,683.659 1281.73,683.659 1282.29,683.659 1282.85,683.659 1283.41,683.659 1283.97,683.659 1284.53,683.659 1285.09,683.659 1285.65,683.659 1286.21,683.659 1286.77,683.659 1287.33,683.659 1287.89,683.659 1288.45,683.659 1289,683.659 1289.56,683.659 1290.12,683.659 1290.68,683.659 1291.24,683.659 1291.8,683.659 1292.36,683.659 1292.92,683.659 1293.48,683.659 1294.04,683.659 1294.6,683.659 1295.16,683.659 1295.72,683.659 1296.28,683.659 1296.83,683.659 1297.39,683.659 1297.95,683.659 1298.51,683.659 1299.07,683.659 1299.63,683.659 1300.19,683.659 1300.75,683.659 1301.31,683.659 1301.87,683.659 1302.43,683.659 1302.99,683.659 1303.55,683.659 1304.1,683.659 1304.66,683.659 1305.22,683.659 1305.78,683.659 1306.34,683.659 1306.9,683.659 1307.46,683.659 1308.02,683.659 1308.58,683.659 1309.14,683.659 1309.7,683.659 1310.26,683.659 1310.82,683.659 1311.38,683.659 1311.93,683.659 1312.49,683.659 1313.05,683.659 1313.61,683.659 1314.17,683.659 1314.73,683.659 1315.29,683.659 1315.85,683.659 1316.41,683.659 1316.97,683.659 1317.53,683.659 1318.09,683.659 1318.65,683.659 1319.2,683.659 1319.76,683.659 1320.32,683.659 1320.88,683.659 1321.44,683.659 1322,683.659 1322.56,683.659 1323.12,683.659 1323.68,683.659 1324.24,683.659 1324.8,683.659 1325.36,683.659 1325.92,683.659 1326.47,683.659 1327.03,683.659 1327.59,683.659 1328.15,683.659 1328.71,683.659 1329.27,683.659 1329.83,683.659 1330.39,683.659 1330.95,683.659 1331.51,683.659 1332.07,683.659 1332.63,683.659 1333.19,683.659 1333.75,683.659 1334.3,683.659 1334.86,683.659 1335.42,683.659 1335.98,683.659 1336.54,683.659 1337.1,683.659 1337.66,683.659 1338.22,683.659 1338.78,683.659 1339.34,683.659 1339.9,683.659 1340.46,683.659 1341.02,683.659 1341.57,683.659 1342.13,683.659 1342.69,683.659 1343.25,683.659 1343.81,683.659 1344.37,683.659 1344.93,683.659 1345.49,683.659 1346.05,683.659 1346.61,683.659 1347.17,683.659 1347.73,683.659 1348.29,683.659 1348.84,683.659 1349.4,683.659 1349.96,683.659 1350.52,683.659 1351.08,683.659 1351.64,683.659 1352.2,683.659 1352.76,683.659 1353.32,683.659 1353.88,683.659 1354.44,683.659 1355,683.659 1355.56,683.659 1356.12,683.659 1356.67,683.659 1357.23,683.659 1357.79,683.659 1358.35,683.659 1358.91,683.659 1359.47,683.659 1360.03,683.659 1360.59,683.659 1361.15,683.659 1361.71,683.659 1362.27,683.659 1362.83,683.659 1363.39,683.659 1363.94,683.659 1364.5,683.659 1365.06,683.659 1365.62,683.659 1366.18,683.659 1366.74,683.659 1367.3,683.659 1367.86,683.659 1368.42,683.659 1368.98,683.659 1369.54,683.659 1370.1,683.659 1370.66,683.659 1371.21,683.659 1371.77,683.659 1372.33,683.659 1372.89,683.659 1373.45,683.659 1374.01,683.659 1374.57,683.659 1375.13,683.659 1375.69,683.659 1376.25,683.659 1376.81,683.659 1377.37,683.659 1377.93,683.659 1378.49,683.659 1379.04,683.659 1379.6,683.659 1380.16,683.659 1380.72,683.659 1381.28,683.659 1381.84,683.659 1382.4,683.659 1382.96,683.659 1383.52,683.659 1384.08,683.659 1384.64,683.659 1385.2,683.659 1385.76,683.659 1386.31,683.659 1386.87,683.659 1387.43,683.659 1387.99,683.659 1388.55,683.659 1389.11,683.659 1389.67,683.659 1390.23,683.659 1390.79,683.659 1391.35,683.659 1391.91,683.659 1392.47,683.659 1393.03,683.659 1393.58,683.659 1394.14,683.659 1394.7,683.659 1395.26,683.659 1395.82,683.659 1396.38,683.659 1396.94,683.659 1397.5,683.659 1398.06,683.659 1398.62,683.659 1399.18,683.659 1399.74,683.659 1400.3,683.659 1400.86,683.659 1401.41,683.659 1401.97,683.659 1402.53,683.659 1403.09,683.659 1403.65,683.659 1404.21,683.659 1404.77,683.659 1405.33,683.659 1405.89,683.659 1406.45,683.659 1407.01,683.659 1407.57,683.659 1408.13,683.659 1408.68,683.659 1409.24,683.659 1409.8,683.659 1410.36,683.659 1410.92,683.659 1411.48,683.659 1412.04,683.659 1412.6,683.659 1413.16,683.659 1413.72,683.659 1414.28,683.659 1414.84,683.659 1415.4,683.659 1415.95,683.659 1416.51,683.659 1417.07,683.659 1417.63,683.659 1418.19,683.659 1418.75,683.659 1419.31,683.659 1419.87,683.659 1420.43,683.659 1420.99,683.659 1421.55,683.659 1422.11,683.659 1422.67,683.659 1423.23,683.659 1423.78,683.659 1424.34,683.659 1424.9,683.659 1425.46,683.659 1426.02,683.659 1426.58,683.659 1427.14,683.659 1427.7,683.659 1428.26,683.659 1428.82,683.659 1429.38,683.659 1429.94,683.659 1430.5,683.659 1431.05,683.659 1431.61,683.659 1432.17,683.659 1432.73,683.659 1433.29,683.659 1433.85,683.659 1434.41,683.659 1434.97,683.659 1435.53,683.659 1436.09,683.659 1436.65,683.659 1437.21,683.659 1437.77,683.659 1438.33,683.659 1438.88,683.659 1439.44,683.659 1440,683.659 1440.56,683.659 1441.12,683.659 1441.68,683.659 1442.24,683.659 1442.8,683.659 1443.36,683.659 1443.92,683.659 1444.48,683.659 1445.04,683.659 1445.6,683.659 1446.15,683.659 1446.71,683.659 1447.27,683.659 1447.83,683.659 1448.39,683.659 1448.95,683.659 1449.51,683.659 1450.07,683.659 1450.63,683.659 1451.19,683.659 1451.75,683.659 1452.31,683.659 1452.87,683.659 1453.42,683.659 1453.98,683.659 1454.54,683.659 1455.1,683.659 1455.66,683.659 1456.22,683.659 1456.78,683.659 1457.34,683.659 1457.9,683.659 1458.46,683.659 1459.02,683.659 1459.58,683.659 1460.14,683.659 1460.7,683.659 1461.25,683.659 1461.81,683.659 1462.37,683.659 1462.93,683.659 1463.49,683.659 1464.05,683.659 1464.61,683.659 1465.17,683.659 1465.73,683.659 1466.29,683.659 1466.85,683.659 1467.41,683.659 1467.97,683.659 1468.52,683.659 1469.08,683.659 1469.64,683.659 1470.2,683.659 1470.76,683.659 1471.32,683.659 1471.88,683.659 1472.44,683.659 1473,683.659 1473.56,683.659 1474.12,683.659 1474.68,683.659 1475.24,683.659 1475.79,683.659 1476.35,683.659 1476.91,683.659 1477.47,683.659 1478.03,683.659 1478.59,683.659 1479.15,683.659 1479.71,683.659 1480.27,683.659 1480.83,683.659 1481.39,683.659 1481.95,683.659 1482.51,683.659 1483.07,683.659 1483.62,683.659 1484.18,683.659 1484.74,683.659 1485.3,683.659 1485.86,683.659 1486.42,683.659 1486.98,683.659 1487.54,683.659 1488.1,683.659 1488.66,683.659 1489.22,683.659 1489.78,683.659 1490.34,683.659 1490.89,683.659 1491.45,683.659 1492.01,683.659 1492.57,683.659 1493.13,683.659 1493.69,683.659 1494.25,683.659 1494.81,683.659 1495.37,683.659 1495.93,683.659 1496.49,683.659 1497.05,683.659 1497.61,683.659 1498.16,683.659 1498.72,683.659 1499.28,683.659 1499.84,683.659 1500.4,683.659 1500.96,683.659 1501.52,683.659 1502.08,683.659 1502.64,683.659 1503.2,683.659 1503.76,683.659 1504.32,683.659 1504.88,683.659 1505.44,683.659 1505.99,683.659 1506.55,683.659 1507.11,683.659 1507.67,683.659 1508.23,683.659 1508.79,683.659 1509.35,683.659 1509.91,683.659 1510.47,683.659 1511.03,683.659 1511.59,683.659 1512.15,683.659 1512.71,683.659 1513.26,683.659 1513.82,683.659 1514.38,683.659 1514.94,683.659 1515.5,683.659 1516.06,683.659 1516.62,683.659 1517.18,683.659 1517.74,683.659 1518.3,683.659 1518.86,683.659 1519.42,683.659 1519.98,683.659 1520.53,683.659 1521.09,683.659 1521.65,683.659 1522.21,683.659 1522.77,683.659 1523.33,683.659 1523.89,683.659 1524.45,683.659 1525.01,683.659 1525.57,683.659 1526.13,683.659 1526.69,683.659 1527.25,683.659 1527.81,683.659 1528.36,683.659 1528.92,683.659 1529.48,683.659 1530.04,683.659 1530.6,683.659 1531.16,683.659 1531.72,683.659 1532.28,683.659 1532.84,683.659 1533.4,683.659 1533.96,683.659 1534.52,683.659 1535.08,683.659 1535.63,683.659 1536.19,683.659 1536.75,683.659 1537.31,683.659 1537.87,683.659 1538.43,683.659 1538.99,683.659 1539.55,683.659 1540.11,683.659 1540.67,683.659 1541.23,683.659 1541.79,683.659 1542.35,683.659 1542.9,683.659 1543.46,683.659 1544.02,683.659 1544.58,683.659 1545.14,683.659 1545.7,683.659 1546.26,683.659 1546.82,683.659 1547.38,683.659 1547.94,683.659 1548.5,683.659 1549.06,683.659 1549.62,683.659 1550.18,683.659 1550.73,683.659 1551.29,683.659 1551.85,683.659 1552.41,683.659 1552.97,683.659 1553.53,683.659 1554.09,683.659 1554.65,683.659 1555.21,683.659 1555.77,683.659 1556.33,683.659 1556.89,683.659 1557.45,683.659 1558,683.659 1558.56,683.659 1559.12,683.659 1559.68,683.659 1560.24,683.659 1560.8,683.659 1561.36,683.659 1561.92,683.659 1562.48,683.659 1563.04,683.659 1563.6,683.659 1564.16,683.659 1564.72,683.659 1565.28,683.659 1565.83,683.659 1566.39,683.659 1566.95,683.659 1567.51,683.659 1568.07,683.659 1568.63,683.659 1569.19,683.659 1569.75,683.659 1570.31,683.659 1570.87,683.659 1571.43,683.659 1571.99,683.659 1572.55,683.659 1573.1,683.659 1573.66,683.659 1574.22,683.659 1574.78,683.659 1575.34,683.659 1575.9,683.659 1576.46,683.659 1577.02,683.659 1577.58,683.659 1578.14,683.659 1578.7,683.659 1579.26,683.659 1579.82,683.659 1580.37,683.659 1580.93,683.659 1581.49,683.659 1582.05,683.659 1582.61,683.659 1583.17,683.659 1583.73,683.659 1584.29,683.659 1584.85,683.659 1585.41,683.659 1585.97,683.659 1586.53,683.659 1587.09,683.659 1587.65,683.659 1588.2,683.659 1588.76,683.659 1589.32,683.659 1589.88,683.659 1590.44,683.659 1591,683.659 1591.56,683.659 1592.12,683.659 1592.68,683.659 1593.24,683.659 1593.8,683.659 1594.36,683.659 1594.92,683.659 1595.47,683.659 1596.03,683.659 1596.59,683.659 1597.15,683.659 1597.71,683.659 1598.27,683.659 1598.83,683.659 1599.39,683.659 1599.95,683.659 1600.51,683.659 1601.07,683.659 1601.63,683.659 1602.19,683.659 1602.74,683.659 1603.3,683.659 1603.86,683.659 1604.42,683.659 1604.98,683.659 1605.54,683.659 1606.1,683.659 1606.66,683.659 1607.22,683.659 1607.78,683.659 1608.34,683.659 1608.9,683.659 1609.46,683.659 1610.02,683.659 1610.57,683.659 1611.13,683.659 1611.69,683.659 1612.25,683.659 1612.81,683.659 1613.37,683.659 1613.93,683.659 1614.49,683.659 1615.05,683.659 1615.61,683.659 1616.17,683.659 1616.73,683.659 1617.29,683.659 1617.84,683.659 1618.4,683.659 1618.96,683.659 1619.52,683.659 1620.08,683.659 1620.64,683.659 1621.2,683.659 1621.76,683.659 1622.32,683.659 1622.88,683.659 1623.44,683.659 1624,683.659 1624.56,683.659 1625.11,683.659 1625.67,683.659 1626.23,683.659 1626.79,683.659 1627.35,683.659 1627.91,683.659 1628.47,683.659 1629.03,683.659 1629.59,683.659 1630.15,683.659 1630.71,683.659 1631.27,683.659 1631.83,683.659 1632.39,683.659 1632.94,683.659 1633.5,683.659 1634.06,683.659 1634.62,683.659 1635.18,683.659 1635.74,683.659 1636.3,683.659 1636.86,683.659 1637.42,683.659 1637.98,683.659 1638.54,683.659 1639.1,683.659 1639.66,683.659 1640.21,683.659 1640.77,683.659 1641.33,683.659 1641.89,683.659 1642.45,683.659 1643.01,683.659 1643.57,683.659 1644.13,683.659 1644.69,683.659 1645.25,683.659 1645.81,683.659 1646.37,683.659 1646.93,683.659 1647.48,683.659 1648.04,683.659 1648.6,683.659 1649.16,683.659 1649.72,683.659 1650.28,683.659 1650.84,683.659 1651.4,683.659 1651.96,683.659 1652.52,683.659 1653.08,683.659 1653.64,683.659 1654.2,683.659 1654.76,683.659 1655.31,683.659 1655.87,683.659 1656.43,683.659 1656.99,683.659 1657.55,683.659 1658.11,683.659 1658.67,683.659 1659.23,683.659 1659.79,683.659 1660.35,683.659 1660.91,683.659 1661.47,683.659 1662.03,683.659 1662.58,683.659 1663.14,683.659 1663.7,683.659 1664.26,683.659 1664.82,683.659 1665.38,683.659 1665.94,683.659 1666.5,683.659 1667.06,683.659 1667.62,683.659 1668.18,683.659 1668.74,683.659 1669.3,683.659 1669.85,683.659 1670.41,683.659 1670.97,683.659 1671.53,683.659 1672.09,683.659 1672.65,683.659 1673.21,683.659 1673.77,683.659 1674.33,683.659 1674.89,683.659 1675.45,683.659 1676.01,683.659 1676.57,683.659 1677.13,683.659 1677.68,683.659 1678.24,683.659 1678.8,683.659 1679.36,683.659 1679.92,683.659 1680.48,683.659 1681.04,683.659 1681.6,683.659 1682.16,683.659 1682.72,683.659 1683.28,683.659 1683.84,683.659 1684.4,683.659 1684.95,683.659 1685.51,683.659 1686.07,683.659 1686.63,683.659 1687.19,683.659 1687.75,683.659 1688.31,683.659 1688.87,683.659 1689.43,683.659 1689.99,683.659 1690.55,683.659 1691.11,683.659 1691.67,683.659 1692.23,683.659 1692.78,683.659 1693.34,683.659 1693.9,683.659 1694.46,683.659 1695.02,683.659 1695.58,683.659 1696.14,683.659 1696.7,683.659 1697.26,683.659 1697.82,683.659 1698.38,683.659 1698.94,683.659 1699.5,683.659 1700.05,683.659 1700.61,683.659 1701.17,683.659 1701.73,683.659 1702.29,683.659 1702.85,683.659 1703.41,683.659 1703.97,683.659 1704.53,683.659 1705.09,683.659 1705.65,683.659 1706.21,683.659 1706.77,683.659 1707.32,683.659 1707.88,683.659 1708.44,683.659 1709,683.659 1709.56,683.659 1710.12,683.659 1710.68,683.659 1711.24,683.659 1711.8,683.659 1712.36,683.659 1712.92,683.659 1713.48,683.659 1714.04,683.659 1714.6,683.659 1715.15,683.659 1715.71,683.659 1716.27,683.659 1716.83,683.659 1717.39,683.659 1717.95,683.659 1718.51,683.659 1719.07,683.659 1719.63,683.659 1720.19,683.659 1720.75,683.659 1721.31,683.659 1721.87,683.659 1722.42,683.659 1722.98,683.659 1723.54,683.659 1724.1,683.659 1724.66,683.659 1725.22,683.659 1725.78,683.659 1726.34,683.659 1726.9,683.659 1727.46,683.659 1728.02,683.659 1728.58,683.659 1729.14,683.659 1729.69,683.659 1730.25,683.659 1730.81,683.659 1731.37,683.659 1731.93,683.659 1732.49,683.659 1733.05,683.659 1733.61,683.659 1734.17,683.659 1734.73,683.659 1735.29,683.659 1735.85,683.659 1736.41,683.659 1736.97,683.659 1737.52,683.659 1738.08,683.659 1738.64,683.659 1739.2,683.659 1739.76,683.659 1740.32,683.659 1740.88,683.659 1741.44,683.659 1742,683.659 1742.56,683.659 1743.12,683.659 1743.68,683.659 1744.24,683.659 1744.79,683.659 1745.35,683.659 1745.91,683.659 1746.47,683.659 1747.03,683.659 1747.59,683.659 1748.15,683.659 1748.71,683.659 1749.27,683.659 1749.83,683.659 1750.39,683.659 1750.95,683.659 1751.51,683.659 1752.06,683.659 1752.62,683.659 1753.18,683.659 1753.74,683.659 1754.3,683.659 1754.86,683.659 1755.42,683.659 1755.98,683.659 1756.54,683.659 1757.1,683.659 1757.66,683.659 1758.22,683.659 1758.78,683.659 1759.34,683.659 1759.89,683.659 1760.45,683.659 1761.01,683.659 1761.57,683.659 1762.13,683.659 1762.69,683.659 1763.25,683.659 1763.81,683.659 1764.37,683.659 1764.93,683.659 1765.49,683.659 1766.05,683.659 1766.61,683.659 1767.16,683.659 1767.72,683.659 1768.28,683.659 1768.84,683.659 1769.4,683.659 1769.96,683.659 1770.52,683.659 1771.08,683.659 1771.64,683.659 1772.2,683.659 1772.76,683.659 1773.32,683.659 1773.88,683.659 1774.43,683.659 1774.99,683.659 1775.55,683.659 1776.11,683.659 1776.67,683.659 1777.23,683.659 1777.79,683.659 1778.35,683.659 1778.91,683.659 1779.47,683.659 1780.03,683.659 1780.59,683.659 1781.15,683.659 1781.71,683.659 1782.26,683.659 1782.82,683.659 1783.38,683.659 1783.94,683.659 1784.5,683.659 1785.06,683.659 1785.62,683.659 1786.18,683.659 1786.74,683.659 1787.3,683.659 1787.86,683.659 1788.42,683.659 1788.98,683.659 1789.53,683.659 1790.09,683.659 1790.65,683.659 1791.21,683.659 1791.77,683.659 1792.33,683.659 1792.89,683.659 1793.45,683.659 1794.01,683.659 1794.57,683.659 1795.13,683.659 1795.69,683.659 1796.25,683.659 1796.8,683.659 1797.36,683.659 1797.92,683.659 1798.48,683.659 1799.04,683.659 1799.6,683.659 1800.16,683.659 1800.72,683.659 1801.28,683.659 1801.84,683.659 1802.4,683.659 1802.96,683.659 1803.52,683.659 1804.08,683.659 1804.63,683.659 1805.19,683.659 1805.75,683.659 1806.31,683.659 1806.87,683.659 1807.43,683.659 1807.99,683.659 1808.55,683.659 1809.11,683.659 1809.67,683.659 1810.23,683.659 1810.79,683.659 1811.35,683.659 1811.9,683.659 1812.46,683.659 1813.02,683.659 1813.58,683.659 1814.14,683.659 1814.7,683.659 1815.26,683.659 1815.82,683.659 1816.38,683.659 1816.94,683.659 1817.5,683.659 1818.06,683.659 1818.62,683.659 1819.18,683.659 1819.73,683.659 1820.29,683.659 1820.85,683.659 1821.41,683.659 1821.97,683.659 1822.53,683.659 1823.09,683.659 1823.65,683.659 1824.21,683.659 1824.77,683.659 1825.33,683.659 1825.89,683.659 1826.45,683.659 1827,683.659 1827.56,683.659 1828.12,683.659 1828.68,683.659 1829.24,683.659 1829.8,683.659 1830.36,683.659 1830.92,683.659 1831.48,683.659 1832.04,683.659 1832.6,683.659 1833.16,683.659 1833.72,683.659 1834.27,683.659 1834.83,683.659 1835.39,683.659 1835.95,683.659 1836.51,683.659 1837.07,683.659 1837.63,683.659 1838.19,683.659 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.031168571019806 ± 0.020733278072416053\nProjected Energy: -4.0154590640934105 ± (0.005907360948559592, 0.005552551826191632)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.51607</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3345e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.1251e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.057e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.353e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.986e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.518e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321623\n -3.3631242916133743\n -0.7590191922770604\n  0.13584182219621788\n  0.15789998694608798\n  0.8767114411781378\n  1.5305929970973224\n  1.5835732611867384\n  3.0728703303258698\n  3.125672653951831\n  4.86210722156217\n  6.260694850380593\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AdaptiveTimeStep","page":"API","title":"Rimu.AdaptiveTimeStep","text":"AdaptiveTimeStep(; damp_zombies=0.9, grow=1.01) <: TimeStepStrategy\n\nAdapt the time step to avoid zombies.\n\nParameters\n\ndamp_zombies: factor by which to decrease the time step for each zombie.\ngrow: factor by which to increase the time step when there are no zombies.\n\nSee also TimeStepStrategy, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep() <: TimeStepStrategy\n\nKeep the time_step constant.\n\nSee also TimeStepStrategy, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 12)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\nAdaptiveTimeStep\n\nSee also FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    new_time_step,\n    tnorm,\n    single_state,\n    step\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, deaths, clones, zombies, tnorm, len)\n-> new_time_step\n\nUpdate the time step according to the strategy s.\n\nSee also TimeStepStrategy.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v::AbstractDVec)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces, AbstractDVec.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem. The names should be unique and not contain spaces or special characters.\n\nFor a StochasticStyle, the first three stats are the number of clones, deaths, and zombies.\n\nSee also StochasticStyle, CompressionStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
