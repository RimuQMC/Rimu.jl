var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 12)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21556054678425798 ± 0.0024297336138676675\n   G2(1) = 0.9158526389755027 ± 0.0010490788260822375\n   G2(2) = 0.9813642446443596 ± 0.0007503032013781159\n   G2(3) = 0.990005685976017 ± 0.0012942197861105194\n   G2(4) = 0.9813642446443596 ± 0.0007503032013781159\n   G2(5) = 0.9158526389755027 ± 0.0010490788260822375\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.026475857227454 ± 0.11760237205678559\n   Replica 2: -4.008576434240194 ± 0.12751671815669205\n   Replica 3: -4.0142200733389775 ± 0.1317880982765862\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip140\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip140)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip141\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip140)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip142\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.36 2211.02,1003.36 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.884 2211.02,745.884 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.412 2211.02,488.412 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.94 2211.02,230.94 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.36 423.181,1003.36 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.884 423.181,745.884 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.412 423.181,488.412 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.94 423.181,230.94 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.97 350.899 1271.53 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.53 Q363.608 1267.97 363.608 1260.86 Q363.608 1253.73 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.92 Q362.149 1242.92 365.205 1247.53 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.86 Q344.395 1252.11 347.45 1247.53 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M290.043 1016.7 L306.363 1016.7 L306.363 1020.64 L284.418 1020.64 L284.418 1016.7 Q287.08 1013.95 291.664 1009.32 Q296.27 1004.66 297.451 1003.32 Q299.696 1000.8 300.576 999.062 Q301.478 997.302 301.478 995.612 Q301.478 992.858 299.534 991.122 Q297.613 989.386 294.511 989.386 Q292.312 989.386 289.858 990.15 Q287.427 990.913 284.65 992.464 L284.65 987.742 Q287.474 986.608 289.927 986.029 Q292.381 985.45 294.418 985.45 Q299.789 985.45 302.983 988.136 Q306.177 990.821 306.177 995.312 Q306.177 997.441 305.367 999.362 Q304.58 1001.26 302.474 1003.85 Q301.895 1004.52 298.793 1007.74 Q295.691 1010.94 290.043 1016.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M316.224 986.075 L334.58 986.075 L334.58 990.011 L320.506 990.011 L320.506 998.483 Q321.524 998.136 322.543 997.974 Q323.562 997.788 324.58 997.788 Q330.367 997.788 333.747 1000.96 Q337.126 1004.13 337.126 1009.55 Q337.126 1015.13 333.654 1018.23 Q330.182 1021.31 323.862 1021.31 Q321.687 1021.31 319.418 1020.94 Q317.173 1020.57 314.765 1019.83 L314.765 1015.13 Q316.849 1016.26 319.071 1016.82 Q321.293 1017.37 323.77 1017.37 Q327.774 1017.37 330.112 1015.27 Q332.45 1013.16 332.45 1009.55 Q332.45 1005.94 330.112 1003.83 Q327.774 1001.72 323.77 1001.72 Q321.895 1001.72 320.02 1002.14 Q318.168 1002.56 316.224 1003.44 L316.224 986.075 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M356.339 989.154 Q352.728 989.154 350.899 992.719 Q349.094 996.261 349.094 1003.39 Q349.094 1010.5 350.899 1014.06 Q352.728 1017.6 356.339 1017.6 Q359.973 1017.6 361.779 1014.06 Q363.608 1010.5 363.608 1003.39 Q363.608 996.261 361.779 992.719 Q359.973 989.154 356.339 989.154 M356.339 985.45 Q362.149 985.45 365.205 990.057 Q368.284 994.64 368.284 1003.39 Q368.284 1012.12 365.205 1016.72 Q362.149 1021.31 356.339 1021.31 Q350.529 1021.31 347.45 1016.72 Q344.395 1012.12 344.395 1003.39 Q344.395 994.64 347.45 990.057 Q350.529 985.45 356.339 985.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M286.062 728.604 L304.418 728.604 L304.418 732.539 L290.344 732.539 L290.344 741.011 Q291.363 740.664 292.381 740.502 Q293.4 740.316 294.418 740.316 Q300.205 740.316 303.585 743.488 Q306.964 746.659 306.964 752.076 Q306.964 757.654 303.492 760.756 Q300.02 763.835 293.701 763.835 Q291.525 763.835 289.256 763.464 Q287.011 763.094 284.603 762.353 L284.603 757.654 Q286.687 758.789 288.909 759.344 Q291.131 759.9 293.608 759.9 Q297.613 759.9 299.951 757.793 Q302.288 755.687 302.288 752.076 Q302.288 748.465 299.951 746.358 Q297.613 744.252 293.608 744.252 Q291.733 744.252 289.858 744.668 Q288.006 745.085 286.062 745.965 L286.062 728.604 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M326.177 731.682 Q322.566 731.682 320.737 735.247 Q318.932 738.789 318.932 745.918 Q318.932 753.025 320.737 756.589 Q322.566 760.131 326.177 760.131 Q329.811 760.131 331.617 756.589 Q333.446 753.025 333.446 745.918 Q333.446 738.789 331.617 735.247 Q329.811 731.682 326.177 731.682 M326.177 727.979 Q331.987 727.979 335.043 732.585 Q338.122 737.168 338.122 745.918 Q338.122 754.645 335.043 759.252 Q331.987 763.835 326.177 763.835 Q320.367 763.835 317.288 759.252 Q314.233 754.645 314.233 745.918 Q314.233 737.168 317.288 732.585 Q320.367 727.979 326.177 727.979 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M356.339 731.682 Q352.728 731.682 350.899 735.247 Q349.094 738.789 349.094 745.918 Q349.094 753.025 350.899 756.589 Q352.728 760.131 356.339 760.131 Q359.973 760.131 361.779 756.589 Q363.608 753.025 363.608 745.918 Q363.608 738.789 361.779 735.247 Q359.973 731.682 356.339 731.682 M356.339 727.979 Q362.149 727.979 365.205 732.585 Q368.284 737.168 368.284 745.918 Q368.284 754.645 365.205 759.252 Q362.149 763.835 356.339 763.835 Q350.529 763.835 347.45 759.252 Q344.395 754.645 344.395 745.918 Q344.395 737.168 347.45 732.585 Q350.529 727.979 356.339 727.979 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M284.835 471.132 L307.057 471.132 L307.057 473.122 L294.511 505.692 L289.627 505.692 L301.432 475.067 L284.835 475.067 L284.835 471.132 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M316.224 471.132 L334.58 471.132 L334.58 475.067 L320.506 475.067 L320.506 483.539 Q321.524 483.192 322.543 483.03 Q323.562 482.844 324.58 482.844 Q330.367 482.844 333.747 486.016 Q337.126 489.187 337.126 494.604 Q337.126 500.182 333.654 503.284 Q330.182 506.363 323.862 506.363 Q321.687 506.363 319.418 505.993 Q317.173 505.622 314.765 504.881 L314.765 500.182 Q316.849 501.317 319.071 501.872 Q321.293 502.428 323.77 502.428 Q327.774 502.428 330.112 500.321 Q332.45 498.215 332.45 494.604 Q332.45 490.993 330.112 488.886 Q327.774 486.78 323.77 486.78 Q321.895 486.78 320.02 487.196 Q318.168 487.613 316.224 488.493 L316.224 471.132 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M356.339 474.21 Q352.728 474.21 350.899 477.775 Q349.094 481.317 349.094 488.446 Q349.094 495.553 350.899 499.118 Q352.728 502.659 356.339 502.659 Q359.973 502.659 361.779 499.118 Q363.608 495.553 363.608 488.446 Q363.608 481.317 361.779 477.775 Q359.973 474.21 356.339 474.21 M356.339 470.507 Q362.149 470.507 365.205 475.113 Q368.284 479.696 368.284 488.446 Q368.284 497.173 365.205 501.78 Q362.149 506.363 356.339 506.363 Q350.529 506.363 347.45 501.78 Q344.395 497.173 344.395 488.446 Q344.395 479.696 347.45 475.113 Q350.529 470.507 356.339 470.507 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M256.664 244.284 L264.303 244.284 L264.303 217.919 L255.992 219.586 L255.992 215.326 L264.256 213.66 L268.932 213.66 L268.932 244.284 L276.571 244.284 L276.571 248.22 L256.664 248.22 L256.664 244.284 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M296.015 216.738 Q292.404 216.738 290.576 220.303 Q288.77 223.845 288.77 230.974 Q288.77 238.081 290.576 241.646 Q292.404 245.187 296.015 245.187 Q299.65 245.187 301.455 241.646 Q303.284 238.081 303.284 230.974 Q303.284 223.845 301.455 220.303 Q299.65 216.738 296.015 216.738 M296.015 213.035 Q301.826 213.035 304.881 217.641 Q307.96 222.224 307.96 230.974 Q307.96 239.701 304.881 244.308 Q301.826 248.891 296.015 248.891 Q290.205 248.891 287.127 244.308 Q284.071 239.701 284.071 230.974 Q284.071 222.224 287.127 217.641 Q290.205 213.035 296.015 213.035 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M326.177 216.738 Q322.566 216.738 320.737 220.303 Q318.932 223.845 318.932 230.974 Q318.932 238.081 320.737 241.646 Q322.566 245.187 326.177 245.187 Q329.811 245.187 331.617 241.646 Q333.446 238.081 333.446 230.974 Q333.446 223.845 331.617 220.303 Q329.811 216.738 326.177 216.738 M326.177 213.035 Q331.987 213.035 335.043 217.641 Q338.122 222.224 338.122 230.974 Q338.122 239.701 335.043 244.308 Q331.987 248.891 326.177 248.891 Q320.367 248.891 317.288 244.308 Q314.233 239.701 314.233 230.974 Q314.233 222.224 317.288 217.641 Q320.367 213.035 326.177 213.035 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M356.339 216.738 Q352.728 216.738 350.899 220.303 Q349.094 223.845 349.094 230.974 Q349.094 238.081 350.899 241.646 Q352.728 245.187 356.339 245.187 Q359.973 245.187 361.779 241.646 Q363.608 238.081 363.608 230.974 Q363.608 223.845 361.779 220.303 Q359.973 216.738 356.339 216.738 M356.339 213.035 Q362.149 213.035 365.205 217.641 Q368.284 222.224 368.284 230.974 Q368.284 239.701 365.205 244.308 Q362.149 248.891 356.339 248.891 Q350.529 248.891 347.45 244.308 Q344.395 239.701 344.395 230.974 Q344.395 222.224 347.45 217.641 Q350.529 213.035 356.339 213.035 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip142)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.94 4017.76,230.94 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1246.4 461.101,1245.74 461.669,1245 462.238,1244.18 462.806,1242.23 463.375,1241.24 463.943,1240.17 464.511,1238.99 465.08,1237.71 465.648,1236.32 466.216,1234.81 466.785,1233.18 467.353,1231.42 467.921,1228.5 468.49,1226.46 469.058,1223.23 469.626,1220.86 470.195,1218.33 470.763,1213.58 471.331,1210.66 471.9,1207.61 472.468,1203.34 473.036,1199.91 473.605,1196.26 474.173,1190.38 474.741,1186.42 475.31,1182.28 475.878,1177.85 476.446,1172.25 477.015,1167.48 477.583,1161.42 478.152,1156.22 478.72,1150.79 479.288,1144.06 479.857,1138.26 480.425,1130.18 480.993,1123.73 481.562,1116.06 482.13,1108.14 482.698,1101.03 483.267,1093.62 483.835,1086.04 484.403,1077.19 484.972,1069.18 485.54,1059.95 486.108,1051.44 486.677,1041.69 487.245,1032.71 487.813,1022.44 488.382,1009.02 488.95,998.66 489.518,989.227 490.087,979.626 490.655,967.961 491.224,957.931 491.792,944.813 492.36,933.768 492.929,922.658 493.497,912.582 494.065,901.353 494.634,890.2 495.202,877.938 495.77,866.694 496.339,854.559 496.907,842.478 497.475,832.51 498.044,822.41 498.612,811.439 499.18,799.427 499.749,788.607 500.317,775.717 500.885,761.924 501.454,751.523 502.022,741.325 502.59,731.896 503.159,722.766 503.727,711.621 504.295,700.548 504.864,690.754 505.432,679.105 506.001,668.65 506.569,659.439 507.137,650.416 507.706,641.365 508.274,631.352 508.842,621.561 509.411,610.057 509.979,597.555 510.547,589.643 511.116,580.888 511.684,574.196 512.252,567.631 512.821,560.004 513.389,550.378 513.957,544.141 514.526,535.915 515.094,528.92 515.662,520.984 516.231,511.093 516.799,504.462 517.367,498.973 517.936,493.83 518.504,488.649 519.072,481.43 519.641,475.21 520.209,470.488 520.778,464.486 521.346,458.83 521.914,451.163 522.483,446.974 523.051,443.773 523.619,439.538 524.188,433.114 524.756,427.761 525.324,424.798 525.893,418.91 526.461,415.263 527.029,410.725 527.598,406.117 528.166,402.595 528.734,399.18 529.303,395.763 529.871,390.393 530.439,385.136 531.008,381.032 531.576,379.368 532.144,376.331 532.713,372.248 533.281,370.541 533.85,365.607 534.418,362.94 534.986,361.084 535.555,359.335 536.123,354.357 536.691,349.648 537.26,346.296 537.828,344.203 538.396,341.089 538.965,341.206 539.533,335.83 540.101,330.855 540.67,326.204 541.238,324.842 541.806,321.277 542.375,322.034 542.943,320.69 543.511,319.198 544.08,317.805 544.648,315.4 545.216,312.893 545.785,311.554 546.353,311.079 546.921,307.655 547.49,306.31 548.058,304.142 548.627,302.891 549.195,300.863 549.763,297.538 550.332,296.407 550.9,293.471 551.468,290.774 552.037,290.059 552.605,288.326 553.173,285.515 553.742,285.954 554.31,285.459 554.878,285.8 555.447,286.164 556.015,286.514 556.583,285.613 557.152,283.743 557.72,280.055 558.288,279.412 558.857,274.755 559.425,273.437 559.993,273.242 560.562,273.008 561.13,271.72 561.698,273.307 562.267,272.11 562.835,271.786 563.404,268.348 563.972,266.008 564.54,264.097 565.109,262.075 565.677,261.304 566.245,261.633 566.814,259.827 567.382,260.16 567.95,259.23 568.519,258.473 569.087,256.741 569.655,254.055 570.224,252.69 570.792,253.266 571.36,253.888 571.929,253.494 572.497,255.06 573.065,255.423 573.634,256.908 574.202,256.899 574.77,258.003 575.339,259.147 575.907,258.073 576.476,255.105 577.044,256.338 577.612,257.457 578.181,257.564 578.749,257.425 579.317,256.336 579.886,256.067 580.454,252.767 581.022,250.948 581.591,252.197 582.159,255.453 582.727,253.389 583.296,254.496 583.864,254.544 584.432,253.592 585.001,253.497 585.569,251.438 586.137,250.885 586.706,250.962 587.274,249.107 587.842,249.337 588.411,252.55 588.979,251.539 589.547,251.755 590.116,251.777 590.684,250.628 591.253,251.614 591.821,250.562 592.389,251.56 592.958,252.363 593.526,252.234 594.094,252.15 594.663,251.895 595.231,249.833 595.799,250.183 596.368,250.017 596.936,246.626 597.504,246.911 598.073,247.034 598.641,247.184 599.209,246.404 599.778,246.794 600.346,248.032 600.914,245.86 601.483,248.941 602.051,249.098 602.619,248.749 603.188,248.516 603.756,249.405 604.325,249.085 604.893,250.94 605.461,250.619 606.03,250.292 606.598,247.644 607.166,245.531 607.735,246.666 608.303,245.466 608.871,245.443 609.44,245.183 610.008,246.23 610.576,246.211 611.145,244.998 611.713,241.884 612.281,241.085 612.85,239.164 613.418,239.394 613.986,238.615 614.555,239.008 615.123,237.316 615.691,236.605 616.26,235.013 616.828,235.462 617.396,235.925 617.965,235.479 618.533,235.099 619.102,235.533 619.67,233.042 620.238,235.87 620.807,234.291 621.375,236.247 621.943,237.589 622.512,238.96 623.08,239.265 623.648,238.48 624.217,240.638 624.785,240.598 625.353,238.909 625.922,240.104 626.49,240.342 627.058,240.488 627.627,240.627 628.195,240.918 628.763,241.069 629.332,239.376 629.9,240.738 630.468,237.965 631.037,238.121 631.605,237.285 632.173,240.59 632.742,237.739 633.31,236.965 633.879,239.552 634.447,235.627 635.015,234.986 635.584,235.348 636.152,234.57 636.72,235.03 637.289,236.494 637.857,237.092 638.425,234.184 638.994,234.596 639.562,233.828 640.13,237.492 640.699,236.683 641.267,238.911 641.835,238.962 642.404,238.961 642.972,240.029 643.54,240.213 644.109,240.272 644.677,240.164 645.245,240.214 645.814,240.279 646.382,241.196 646.951,243.057 647.519,242.691 648.087,243.357 648.656,242.119 649.224,240.931 649.792,241.902 650.361,241.554 650.929,239.417 651.497,237.454 652.066,234.459 652.634,234.818 653.202,233.095 653.771,235.392 654.339,233.624 654.907,234.075 655.476,234.309 656.044,233.724 656.612,234.125 657.181,233.405 657.749,234.729 658.317,235.208 658.886,234.664 659.454,234.778 660.022,235.006 660.591,235.438 661.159,235.688 661.728,234.805 662.296,235.024 662.864,234.292 663.433,233.832 664.001,237.534 664.569,238.445 665.138,239.531 665.706,240.512 666.274,239.341 666.843,239.243 667.411,237.204 667.979,238.26 668.548,238.313 669.116,238.3 669.684,238.193 670.253,239.025 670.821,238.749 671.389,238.792 671.958,236.501 672.526,236.494 673.094,236.432 673.663,237.695 674.231,236.641 674.799,236.592 675.368,236.729 675.936,236.782 676.505,235.653 677.073,236.934 677.641,236.014 678.21,235.211 678.778,235.361 679.346,236.461 679.915,236.283 680.483,237.402 681.051,237.373 681.62,235.06 682.188,235.125 682.756,232.088 683.325,232.55 683.893,232.831 684.461,233.007 685.03,233.208 685.598,233.408 686.166,233.541 686.735,235.825 687.303,234.892 687.871,234.918 688.44,234.007 689.008,236.167 689.577,236.146 690.145,236.054 690.713,235.958 691.282,237.053 691.85,237.081 692.418,241.204 692.987,239.928 693.555,237.519 694.123,237.556 694.692,237.386 695.26,236.221 695.828,237.269 696.397,236.959 696.965,236.85 697.533,234.461 698.102,234.49 698.67,233.512 699.238,231.582 699.807,235.912 700.375,234.784 700.943,235.853 701.512,234.983 702.08,233 702.648,234.094 703.217,233.239 703.785,233.282 704.354,235.312 704.922,233.204 705.49,232.293 706.059,231.57 706.627,231.864 707.195,233.092 707.764,231.19 708.332,233.64 708.9,232.642 709.469,233.02 710.037,231.214 710.605,233.794 711.174,231.924 711.742,232.116 712.31,233.288 712.879,235.387 713.447,235.279 714.015,236.409 714.584,235.467 715.152,234.449 715.72,236.682 716.289,238.785 716.857,237.183 717.425,236.954 717.994,235.821 718.562,234.599 719.131,234.862 719.699,234.592 720.267,235.61 720.836,234.574 721.404,234.387 721.972,233.447 722.541,232.465 723.109,231.568 723.677,230.573 724.246,230.923 724.814,232.136 725.382,233.115 725.951,232.123 726.519,229.183 727.087,228.622 727.656,227.112 728.224,228.701 728.792,230.128 729.361,230.446 729.929,229.753 730.497,229.131 731.066,230.636 731.634,231.927 732.203,232.163 732.771,233.221 733.339,233.209 733.908,232.297 734.476,232.405 735.044,232.515 735.613,234.61 736.181,233.635 736.749,232.979 737.318,231.862 737.886,231.954 738.454,233.241 739.023,233.341 739.591,234.369 740.159,232.474 740.728,228.649 741.296,227.865 741.864,228.311 742.433,227.897 743.001,227.377 743.569,226.839 744.138,226.248 744.706,226.897 745.274,225.299 745.843,226.811 746.411,229.371 746.98,228.671 747.548,229.154 748.116,229.724 748.685,230.401 749.253,229.664 749.821,230.077 750.39,230.482 750.958,232.791 751.526,232.903 752.095,234.125 752.663,234.136 753.231,231.282 753.8,230.376 754.368,230.485 754.936,232.01 755.505,232.175 756.073,232.494 756.641,231.454 757.21,233.713 757.778,232.91 758.346,231.981 758.915,231.236 759.483,230.176 760.052,231.451 760.62,232.834 761.188,233.944 761.757,233.948 762.325,231.749 762.893,234.243 763.462,235.467 764.03,235.533 764.598,235.31 765.167,233.244 765.735,233.558 766.303,235.753 766.872,235.669 767.44,233.581 768.008,234.658 768.577,235.818 769.145,235.831 769.713,234.71 770.282,237.948 770.85,237.743 771.418,237.573 771.987,237.377 772.555,235.017 773.123,236.209 773.692,236.064 774.26,237.126 774.829,236.865 775.397,235.538 775.965,239.371 776.534,239.049 777.102,235.828 777.67,236.77 778.239,237.547 778.807,237.243 779.375,235.926 779.944,235.88 780.512,235.725 781.08,236.501 781.649,237.315 782.217,238.07 782.785,238.655 783.354,239.207 783.922,235.632 784.49,235.452 785.059,235.208 785.627,235.03 786.195,233.604 786.764,233.15 787.332,233.053 787.9,233.135 788.469,233.133 789.037,234.066 789.606,232.517 790.174,230.558 790.742,230.482 791.311,229.578 791.879,230.716 792.447,230.75 793.016,230.804 793.584,232.177 794.152,231.09 794.721,231.189 795.289,232.254 795.857,232.987 796.426,232.927 796.994,230.826 797.562,229.034 798.131,230.187 798.699,229.241 799.267,232.409 799.836,232.435 800.404,230.528 800.972,227.5 801.541,227.783 802.109,227.285 802.678,226.661 803.246,229.104 803.814,230.396 804.383,230.514 804.951,228.718 805.519,229.064 806.088,230.238 806.656,230.603 807.224,233.769 807.793,233.813 808.361,234.862 808.929,233.807 809.498,231.625 810.066,230.602 810.634,230.868 811.203,228.897 811.771,230.209 812.339,230.291 812.908,230.392 813.476,228.288 814.044,229.802 814.613,232.252 815.181,232.143 815.749,231.041 816.318,231.014 816.886,233.163 817.455,233.926 818.023,232.907 818.591,233.105 819.16,234.225 819.728,232.012 820.296,232.857 820.865,231.742 821.433,229.715 822.001,228.849 822.57,228.145 823.138,230.29 823.706,230.424 824.275,228.696 824.843,227.872 825.411,229.42 825.98,229.735 826.548,230.117 827.116,230.402 827.685,230.655 828.253,231.05 828.821,232.885 829.39,234.03 829.958,235.095 830.526,235.115 831.095,235.888 831.663,235.602 832.232,236.277 832.8,237.137 833.368,236.807 833.937,236.555 834.505,237.48 835.073,237.058 835.642,236.615 836.21,236.175 836.778,234.774 837.347,233.578 837.915,235.622 838.483,235.496 839.052,233.343 839.62,233.393 840.188,234.483 840.757,235.321 841.325,235.253 841.893,235.035 842.462,232.711 843.03,231.737 843.598,233.681 844.167,232.428 844.735,231.227 845.304,231.191 845.872,232.374 846.44,233.201 847.009,231.915 847.577,234.046 848.145,233.659 848.714,235.518 849.282,232.151 849.85,231.859 850.419,232.029 850.987,230.902 851.555,231.889 852.124,232.806 852.692,232.853 853.26,230.619 853.829,232.633 854.397,232.752 854.965,232.686 855.534,232.592 856.102,233.396 856.67,234.285 857.239,234.08 857.807,232.796 858.375,232.619 858.944,233.602 859.512,232.464 860.081,233.524 860.649,232.743 861.217,231.562 861.786,232.699 862.354,232.646 862.922,235.704 863.491,235.14 864.059,234.91 864.627,233.637 865.196,232.502 865.764,232.604 866.332,232.269 866.901,232.061 867.469,231.283 868.037,231.12 868.606,231.127 869.174,230.144 869.742,231.302 870.311,229.342 870.879,229.415 871.447,229.401 872.016,229.496 872.584,228.609 873.152,226.861 873.721,224.071 874.289,224.72 874.858,226.267 875.426,226.638 875.994,227.013 876.563,229.229 877.131,228.582 877.699,229.681 878.268,229.809 878.836,230.127 879.404,229.612 879.973,229.743 880.541,230.866 881.109,229.913 881.678,230.04 882.246,227.052 882.814,226.491 883.383,223.921 883.951,224.241 884.519,225.89 885.088,228.483 885.656,228.946 886.224,232.233 886.793,231.01 887.361,230.048 887.93,228.329 888.498,228.514 889.066,231.974 889.635,234.294 890.203,234.017 890.771,232.9 891.34,229.627 891.908,229.821 892.476,231.066 893.045,232.179 893.613,232.423 894.181,235.516 894.75,236.605 895.318,234.263 895.886,234.115 896.455,233.799 897.023,231.525 897.591,231.428 898.16,230.304 898.728,230.264 899.296,230.381 899.865,230.4 900.433,228.266 901.001,229.71 901.57,229.952 902.138,229.143 902.707,228.357 903.275,227.671 903.843,227.136 904.412,224.485 904.98,222.878 905.548,224.74 906.117,224.031 906.685,224.845 907.253,227.34 907.822,228.815 908.39,229.005 908.958,229.163 909.527,230.621 910.095,231.854 910.663,234.055 911.232,230.848 911.8,230.062 912.368,229.25 912.937,227.599 913.505,226.991 914.073,227.469 914.642,228.895 915.21,228.285 915.779,228.722 916.347,230.263 916.915,229.597 917.484,231.939 918.052,232.131 918.62,234.387 919.189,234.268 919.757,233.309 920.325,234.323 920.894,232.394 921.462,233.436 922.03,233.49 922.599,232.54 923.167,232.369 923.735,231.39 924.304,231.662 924.872,233.827 925.44,232.784 926.009,232.786 926.577,232.75 927.145,232.647 927.714,232.939 928.282,232.908 928.85,230.775 929.419,229.725 929.987,229.026 930.556,231.38 931.124,233.374 931.692,234.382 932.261,233.24 932.829,231.026 933.397,231.964 933.966,232.049 934.534,234.138 935.102,235.123 935.671,235.955 936.239,234.586 936.807,236.274 937.376,233.024 937.944,233.021 938.512,231.967 939.081,235.183 939.649,236.941 940.217,237.655 940.786,236.366 941.354,234.866 941.922,234.575 942.491,233.345 943.059,233.154 943.627,232.182 944.196,232.115 944.764,231.188 945.333,231.263 945.901,230.292 946.469,232.355 947.038,234.392 947.606,233.147 948.174,234.225 948.743,233.227 949.311,232.888 949.879,230.798 950.448,234.789 951.016,233.622 951.584,234.293 952.153,234.009 952.721,234.871 953.289,235.565 953.858,234.397 954.426,235.111 954.994,234.727 955.563,234.488 956.131,231.964 956.699,233.007 957.268,235.831 957.836,235.584 958.405,235.155 958.973,233.795 959.541,233.337 960.11,235.247 960.678,231.807 961.246,233.116 961.815,229.687 962.383,230.881 962.951,229.899 963.52,230.161 964.088,230.221 964.656,230.429 965.225,232.527 965.793,233.53 966.361,231.012 966.93,229.011 967.498,228.105 968.066,230.276 968.635,231.438 969.203,228.202 969.771,227.458 970.34,227.729 970.908,227.941 971.476,228.217 972.045,227.565 972.613,226.783 973.182,225.255 973.75,226.592 974.318,229.117 974.887,229.391 975.455,227.482 976.023,229.771 976.592,231.948 977.16,229.857 977.728,229.843 978.297,230.925 978.865,229.857 979.433,229.984 980.002,230.112 980.57,231.244 981.138,232.356 981.707,233.158 982.275,232.009 982.843,231.075 983.412,231.165 983.98,230.193 984.548,232.375 985.117,231.222 985.685,231.104 986.253,231.081 986.822,232.08 987.39,231.051 987.959,232.194 988.527,230.171 989.095,229.477 989.664,229.761 990.232,229.622 990.8,230.852 991.369,230.852 991.937,227.775 992.505,226.978 993.074,228.373 993.642,231.988 994.21,233.159 994.779,232.893 995.347,232.767 995.915,230.852 996.484,229.866 997.052,230.954 997.62,233.985 998.189,233.937 998.757,233.769 999.325,235.906 999.894,235.589 1000.46,236.11 1001.03,235.874 1001.6,233.46 1002.17,232.39 1002.74,232.169 1003.3,230.889 1003.87,228.989 1004.44,229.385 1005.01,230.436 1005.58,229.634 1006.15,230.673 1006.71,230.353 1007.28,230.351 1007.85,230.581 1008.42,231.544 1008.99,231.519 1009.56,231.445 1010.12,229.527 1010.69,228.572 1011.26,226.867 1011.83,227.409 1012.4,226.589 1012.97,225.877 1013.53,229.464 1014.1,228.472 1014.67,229.599 1015.24,226.681 1015.81,228.142 1016.38,227.433 1016.94,227.727 1017.51,229.074 1018.08,228.407 1018.65,227.812 1019.22,227.121 1019.79,226.498 1020.35,226.865 1020.92,227.387 1021.49,226.976 1022.06,225.322 1022.63,224.783 1023.2,225.356 1023.76,225.901 1024.33,227.61 1024.9,229.216 1025.47,229.5 1026.04,228.612 1026.61,227.962 1027.17,226.163 1027.74,229.734 1028.31,230.978 1028.88,233.064 1029.45,232.171 1030.02,233.439 1030.58,231.376 1031.15,230.572 1031.72,228.694 1032.29,229.058 1032.86,230.306 1033.43,229.502 1033.99,232.868 1034.56,232.912 1035.13,235.033 1035.7,232.869 1036.27,232.889 1036.84,234.762 1037.4,236.561 1037.97,236.207 1038.54,231.643 1039.11,233.885 1039.68,234.72 1040.25,234.352 1040.81,234.339 1041.38,234.149 1041.95,235.072 1042.52,237.179 1043.09,239.744 1043.66,238.13 1044.22,236.588 1044.79,237.36 1045.36,237.032 1045.93,235.465 1046.5,235.222 1047.07,234.957 1047.63,233.749 1048.2,232.735 1048.77,232.691 1049.34,233.644 1049.91,233.31 1050.48,237.345 1051.05,236.852 1051.61,237.315 1052.18,236.785 1052.75,236.469 1053.32,236.159 1053.89,234.904 1054.46,234.644 1055.02,232.291 1055.59,234.165 1056.16,234.043 1056.73,232.892 1057.3,232.798 1057.87,230.336 1058.43,229.247 1059,229.164 1059.57,232.266 1060.14,233.229 1060.71,229.929 1061.28,231.925 1061.84,230.766 1062.41,228.874 1062.98,228.921 1063.55,228.083 1064.12,229.347 1064.69,231.598 1065.25,233.582 1065.82,233.497 1066.39,233.191 1066.96,232.931 1067.53,232.547 1068.1,233.42 1068.66,233.118 1069.23,233.985 1069.8,234.871 1070.37,233.351 1070.94,235.057 1071.51,233.759 1072.07,234.586 1072.64,236.203 1073.21,235.637 1073.78,235.463 1074.35,233.983 1074.92,231.481 1075.48,230.253 1076.05,229.216 1076.62,229.201 1077.19,231.228 1077.76,230.044 1078.33,230.09 1078.89,229.985 1079.46,229.894 1080.03,228.921 1080.6,228.237 1081.17,228.013 1081.74,226.851 1082.3,225.171 1082.87,223.198 1083.44,225.98 1084.01,228.335 1084.58,228.607 1085.15,229.807 1085.71,230.014 1086.28,228.983 1086.85,230.225 1087.42,233.404 1087.99,230.949 1088.56,231.043 1089.12,229.847 1089.69,231.109 1090.26,231.998 1090.83,232.025 1091.4,232.94 1091.97,230.823 1092.53,230.967 1093.1,231.662 1093.67,231.825 1094.24,232.656 1094.81,232.523 1095.38,233.301 1095.94,234.015 1096.51,233.62 1097.08,233.248 1097.65,233.146 1098.22,233.226 1098.79,233.057 1099.35,232.831 1099.92,232.587 1100.49,231.254 1101.06,232.268 1101.63,232.024 1102.2,231.962 1102.76,234.164 1103.33,232.776 1103.9,232.634 1104.47,234.869 1105.04,235.476 1105.61,236.039 1106.17,233.543 1106.74,232.184 1107.31,231.17 1107.88,229.796 1108.45,229.962 1109.02,226.901 1109.58,227.096 1110.15,226.144 1110.72,226.357 1111.29,227.642 1111.86,227.976 1112.43,227.961 1112.99,226.179 1113.56,225.562 1114.13,224.95 1114.7,227.567 1115.27,225.635 1115.84,226.964 1116.4,226.144 1116.97,227.5 1117.54,230.948 1118.11,229.894 1118.68,228.095 1119.25,227.11 1119.81,228.243 1120.38,230.558 1120.95,231.303 1121.52,232.455 1122.09,232.39 1122.66,233.285 1123.23,234.241 1123.79,236.43 1124.36,237.148 1124.93,235.682 1125.5,233.296 1126.07,231.01 1126.64,230.044 1127.2,230.976 1127.77,230.923 1128.34,231.94 1128.91,231.781 1129.48,231.567 1130.05,232.365 1130.61,230.356 1131.18,229.333 1131.75,228.442 1132.32,228.618 1132.89,227.88 1133.46,227.032 1134.02,225.195 1134.59,225.389 1135.16,226.978 1135.73,227.157 1136.3,226.447 1136.87,228.895 1137.43,232.132 1138,231.892 1138.57,231.872 1139.14,229.583 1139.71,232.73 1140.28,231.516 1140.84,231.528 1141.41,227.396 1141.98,228.659 1142.55,228.918 1143.12,228.214 1143.69,231.499 1144.25,230.367 1144.82,233.604 1145.39,234.209 1145.96,234.074 1146.53,233.964 1147.1,233.686 1147.66,232.344 1148.23,231.231 1148.8,232.176 1149.37,232.157 1149.94,232.104 1150.51,231.982 1151.07,232.782 1151.64,232.66 1152.21,231.692 1152.78,231.594 1153.35,232.775 1153.92,233.908 1154.48,232.612 1155.05,230.424 1155.62,229.583 1156.19,230.779 1156.76,229.719 1157.33,228.645 1157.89,230.771 1158.46,230.573 1159.03,231.724 1159.6,230.532 1160.17,230.572 1160.74,232.592 1161.3,233.506 1161.87,231.909 1162.44,231.679 1163.01,230.464 1163.58,229.424 1164.15,228.72 1164.71,229.76 1165.28,229.818 1165.85,227.669 1166.42,226.949 1166.99,229.217 1167.56,231.09 1168.12,233.152 1168.69,232.79 1169.26,231.374 1169.83,231.276 1170.4,231.088 1170.97,230.049 1171.53,229.954 1172.1,230.97 1172.67,231.852 1173.24,229.669 1173.81,231.61 1174.38,230.646 1174.94,231.783 1175.51,230.747 1176.08,228.945 1176.65,228.756 1177.22,228.725 1177.79,229.64 1178.35,228.436 1178.92,228.657 1179.49,228.737 1180.06,229.977 1180.63,230.074 1181.2,231.177 1181.76,230.916 1182.33,232.136 1182.9,230.939 1183.47,232.175 1184.04,234.112 1184.61,234.093 1185.17,233.669 1185.74,232.469 1186.31,234.512 1186.88,234.207 1187.45,233.917 1188.02,231.718 1188.58,231.542 1189.15,234.606 1189.72,235.498 1190.29,235.053 1190.86,234.721 1191.43,233.18 1192,230.836 1192.56,231.863 1193.13,230.734 1193.7,230.57 1194.27,231.529 1194.84,231.606 1195.41,230.5 1195.97,231.529 1196.54,231.187 1197.11,231.25 1197.68,229.082 1198.25,229.192 1198.82,228.22 1199.38,226.419 1199.95,225.464 1200.52,227.028 1201.09,228.454 1201.66,229.605 1202.23,229.65 1202.79,227.922 1203.36,230.395 1203.93,230.694 1204.5,230.875 1205.07,230.96 1205.64,230.033 1206.2,230.071 1206.77,230.2 1207.34,231.413 1207.91,232.431 1208.48,232.308 1209.05,231.198 1209.61,233.393 1210.18,231.216 1210.75,233.146 1211.32,233.931 1211.89,234.732 1212.46,233.339 1213.02,232.308 1213.59,234.299 1214.16,234.842 1214.73,233.59 1215.3,234.3 1215.87,232.954 1216.43,233.753 1217,231.445 1217.57,232.315 1218.14,233.047 1218.71,230.757 1219.28,229.555 1219.84,229.633 1220.41,228.763 1220.98,228.979 1221.55,229.132 1222.12,229.178 1222.69,229.178 1223.25,229.288 1223.82,229.494 1224.39,228.303 1224.96,229.48 1225.53,229.672 1226.1,230.832 1226.66,230.977 1227.23,230.873 1227.8,230.88 1228.37,231.801 1228.94,230.584 1229.51,231.545 1230.07,232.301 1230.64,232.252 1231.21,230.999 1231.78,230.97 1232.35,228.731 1232.92,228.01 1233.48,228.141 1234.05,229.466 1234.62,229.616 1235.19,229.91 1235.76,230.929 1236.33,231.851 1236.89,232.744 1237.46,232.302 1238.03,232.225 1238.6,231.182 1239.17,231.246 1239.74,229.054 1240.3,228.47 1240.87,230.755 1241.44,232.824 1242.01,234.623 1242.58,234.193 1243.15,233.791 1243.71,233.512 1244.28,233.25 1244.85,231.985 1245.42,231.669 1245.99,232.467 1246.56,236.284 1247.12,236.92 1247.69,236.599 1248.26,234.142 1248.83,233.136 1249.4,231.939 1249.97,230.721 1250.53,230.776 1251.1,230.659 1251.67,228.667 1252.24,227.841 1252.81,227.117 1253.38,226.349 1253.94,226.444 1254.51,226.527 1255.08,225.712 1255.65,225.1 1256.22,222.384 1256.79,222.751 1257.35,221.33 1257.92,219.895 1258.49,222.863 1259.06,226.363 1259.63,228.737 1260.2,230.901 1260.76,231.045 1261.33,229.134 1261.9,230.312 1262.47,233.649 1263.04,230.692 1263.61,231.866 1264.18,229.799 1264.74,230.935 1265.31,229.897 1265.88,230.108 1266.45,229.986 1267.02,229.167 1267.59,231.713 1268.15,229.726 1268.72,227.945 1269.29,227.331 1269.86,227.769 1270.43,229.098 1271,228.139 1271.56,228.158 1272.13,230.291 1272.7,232.179 1273.27,232.192 1273.84,232.003 1274.41,232.093 1274.97,229.04 1275.54,229.072 1276.11,229.549 1276.68,230.619 1277.25,232.622 1277.82,235.626 1278.38,235.259 1278.95,232.812 1279.52,232.668 1280.09,231.644 1280.66,230.565 1281.23,230.619 1281.79,233.041 1282.36,232.775 1282.93,231.657 1283.5,229.752 1284.07,232.013 1284.64,232.058 1285.2,232.847 1285.77,232.704 1286.34,231.683 1286.91,230.783 1287.48,230.82 1288.05,227.738 1288.61,227.193 1289.18,229.521 1289.75,228.623 1290.32,227.821 1290.89,229.28 1291.46,229.378 1292.02,227.465 1292.59,228.629 1293.16,227.958 1293.73,230.251 1294.3,232.583 1294.87,232.56 1295.43,231.523 1296,232.668 1296.57,233.636 1297.14,234.609 1297.71,233.43 1298.28,233.303 1298.84,234.216 1299.41,234.13 1299.98,233.947 1300.55,233.836 1301.12,233.708 1301.69,233.709 1302.25,230.634 1302.82,229.541 1303.39,228.434 1303.96,231.934 1304.53,233.179 1305.1,232.894 1305.66,230.883 1306.23,230.857 1306.8,228.711 1307.37,228.797 1307.94,227.865 1308.51,228.211 1309.07,229.444 1309.64,231.532 1310.21,232.526 1310.78,233.368 1311.35,232.258 1311.92,233.154 1312.48,234.184 1313.05,230.843 1313.62,230.668 1314.19,230.697 1314.76,232.14 1315.33,231.943 1315.89,228.946 1316.46,228.173 1317.03,227.383 1317.6,225.557 1318.17,228.242 1318.74,227.473 1319.3,226.791 1319.87,228.27 1320.44,230.779 1321.01,229.822 1321.58,231.467 1322.15,234.802 1322.71,235.664 1323.28,236.572 1323.85,237.436 1324.42,238.05 1324.99,236.451 1325.56,238.228 1326.12,237.655 1326.69,238.233 1327.26,237.641 1327.83,237.017 1328.4,235.665 1328.97,237.443 1329.53,240.042 1330.1,239.39 1330.67,239.543 1331.24,239.926 1331.81,239.112 1332.38,239.751 1332.94,239.077 1333.51,238.445 1334.08,238.942 1334.65,237.32 1335.22,236.655 1335.79,236.849 1336.36,234.173 1336.92,232.759 1337.49,234.389 1338.06,233.917 1338.63,232.301 1339.2,231.028 1339.77,225.046 1340.33,226.35 1340.9,223.501 1341.47,224.071 1342.04,222.317 1342.61,224.702 1343.18,225.979 1343.74,227.129 1344.31,230.419 1344.88,230.302 1345.45,228.158 1346.02,229.111 1346.59,230.142 1347.15,232.285 1347.72,233.16 1348.29,232.944 1348.86,232.684 1349.43,230.447 1350,230.227 1350.56,228.226 1351.13,228.228 1351.7,228.405 1352.27,226.434 1352.84,227.687 1353.41,227.667 1353.97,228.01 1354.54,227.056 1355.11,227.255 1355.68,227.466 1356.25,228.738 1356.82,229.819 1357.38,226.669 1357.95,225.773 1358.52,224.881 1359.09,229.106 1359.66,225.829 1360.23,225.133 1360.79,227.304 1361.36,229.649 1361.93,230.572 1362.5,231.54 1363.07,231.262 1363.64,231.104 1364.2,232.165 1364.77,231.2 1365.34,230.08 1365.91,230.358 1366.48,231.613 1367.05,230.536 1367.61,230.616 1368.18,229.724 1368.75,228.554 1369.32,228.918 1369.89,228.243 1370.46,226.551 1371.02,229.051 1371.59,232.315 1372.16,233.502 1372.73,232.232 1373.3,228.999 1373.87,230.888 1374.43,230.593 1375,229.53 1375.57,230.683 1376.14,230.445 1376.71,231.475 1377.28,232.446 1377.84,234.28 1378.41,234.146 1378.98,234.068 1379.55,231.809 1380.12,233.72 1380.69,234.68 1381.25,232.359 1381.82,231.296 1382.39,230.306 1382.96,231.544 1383.53,231.52 1384.1,231.396 1384.66,230.337 1385.23,230.346 1385.8,230.477 1386.37,230.624 1386.94,231.843 1387.51,232.704 1388.07,234.67 1388.64,235.385 1389.21,235.184 1389.78,233.874 1390.35,235.143 1390.92,234.905 1391.48,235.661 1392.05,236.198 1392.62,235.602 1393.19,235.222 1393.76,233.759 1394.33,233.386 1394.89,233.057 1395.46,233.969 1396.03,232.487 1396.6,232.324 1397.17,230.131 1397.74,229.991 1398.3,230.018 1398.87,230.958 1399.44,229.899 1400.01,230.59 1400.58,230.464 1401.15,229.436 1401.71,229.387 1402.28,231.439 1402.85,231.07 1403.42,229.018 1403.99,228.971 1404.56,228.167 1405.13,229.223 1405.69,230.051 1406.26,229.098 1406.83,231.126 1407.4,232.933 1407.97,232.517 1408.54,231.485 1409.1,231.191 1409.67,229.171 1410.24,230.157 1410.81,232.425 1411.38,230.275 1411.95,229.385 1412.51,230.49 1413.08,229.564 1413.65,231.834 1414.22,230.901 1414.79,233.041 1415.36,231.807 1415.92,230.82 1416.49,232.875 1417.06,231.543 1417.63,233.547 1418.2,231.402 1418.77,231.306 1419.33,229.168 1419.9,231.058 1420.47,231.224 1421.04,233.453 1421.61,234.393 1422.18,233.166 1422.74,232.998 1423.31,232.81 1423.88,231.609 1424.45,229.332 1425.02,229.428 1425.59,229.509 1426.15,229.631 1426.72,226.596 1427.29,225.682 1427.86,226.987 1428.43,230.332 1429,231.555 1429.56,229.423 1430.13,230.748 1430.7,230.938 1431.27,228.741 1431.84,227.583 1432.41,226.81 1432.97,227.113 1433.54,226.178 1434.11,226.639 1434.68,226.764 1435.25,227.971 1435.82,229.37 1436.38,230.225 1436.95,232.507 1437.52,231.266 1438.09,231.166 1438.66,229.126 1439.23,230.271 1439.79,230.255 1440.36,227.104 1440.93,226.442 1441.5,225.635 1442.07,225.91 1442.64,226.235 1443.2,227.577 1443.77,225.738 1444.34,229.317 1444.91,229.406 1445.48,229.763 1446.05,228.736 1446.61,229.84 1447.18,231.008 1447.75,229.037 1448.32,228.071 1448.89,228.399 1449.46,228.494 1450.02,228.792 1450.59,229.077 1451.16,225.994 1451.73,227.418 1452.3,227.831 1452.87,227.062 1453.43,227.341 1454,227.537 1454.57,226.679 1455.14,226.96 1455.71,228.179 1456.28,228.608 1456.84,227.85 1457.41,226.182 1457.98,227.516 1458.55,224.689 1459.12,223.897 1459.69,224.66 1460.25,224.046 1460.82,225.766 1461.39,227.408 1461.96,226.856 1462.53,228.315 1463.1,230.695 1463.66,231.919 1464.23,234.224 1464.8,233.933 1465.37,233.816 1465.94,232.833 1466.51,230.825 1467.07,229.995 1467.64,230.395 1468.21,228.451 1468.78,227.809 1469.35,228.362 1469.92,229.643 1470.48,226.707 1471.05,228.258 1471.62,230.595 1472.19,229.842 1472.76,228.999 1473.33,229.026 1473.89,229.429 1474.46,229.755 1475.03,230.045 1475.6,232.214 1476.17,232.312 1476.74,229.379 1477.31,230.54 1477.87,230.834 1478.44,232.802 1479.01,231.804 1479.58,233.025 1480.15,234.097 1480.72,234.04 1481.28,233.766 1481.85,235.732 1482.42,235.647 1482.99,235.269 1483.56,238.029 1484.13,236.775 1484.69,235.382 1485.26,234.071 1485.83,235.043 1486.4,235.927 1486.97,235.755 1487.54,235.536 1488.1,234.052 1488.67,235.926 1489.24,235.551 1489.81,235.251 1490.38,233.81 1490.95,233.739 1491.51,233.567 1492.08,234.364 1492.65,234.271 1493.22,233.169 1493.79,233.02 1494.36,233.059 1494.92,233.803 1495.49,233.407 1496.06,231.144 1496.63,232.048 1497.2,230.848 1497.77,230.991 1498.33,231.804 1498.9,231.751 1499.47,231.726 1500.04,230.685 1500.61,228.627 1501.18,230.976 1501.74,230.087 1502.31,232.428 1502.88,233.437 1503.45,232.231 1504.02,233.135 1504.59,232.059 1505.15,230.966 1505.72,232.95 1506.29,232.723 1506.86,234.754 1507.43,234.551 1508,234.346 1508.56,234.023 1509.13,232.836 1509.7,231.625 1510.27,232.485 1510.84,232.399 1511.41,232.276 1511.97,231.028 1512.54,229.948 1513.11,230 1513.68,232.156 1514.25,233.241 1514.82,232.99 1515.38,231.85 1515.95,231.808 1516.52,229.441 1517.09,229.685 1517.66,229.668 1518.23,231.671 1518.79,232.485 1519.36,231.184 1519.93,230.293 1520.5,230.326 1521.07,229.354 1521.64,229.483 1522.2,230.329 1522.77,231.631 1523.34,231.506 1523.91,231.486 1524.48,232.457 1525.05,232.42 1525.61,231.234 1526.18,230.299 1526.75,229.514 1527.32,227.467 1527.89,228.843 1528.46,227.923 1529.02,229.052 1529.59,228.115 1530.16,229.185 1530.73,229.142 1531.3,229.311 1531.87,229.603 1532.43,229.659 1533,228.678 1533.57,232.017 1534.14,231.913 1534.71,230.712 1535.28,229.011 1535.84,231.292 1536.41,231.207 1536.98,235.187 1537.55,234.771 1538.12,235.464 1538.69,236.406 1539.25,240.048 1539.82,238.526 1540.39,237.91 1540.96,236.476 1541.53,236.214 1542.1,234.856 1542.66,234.429 1543.23,234.951 1543.8,236.634 1544.37,232.901 1544.94,233.445 1545.51,231.018 1546.08,229.917 1546.64,230.757 1547.21,228.499 1547.78,227.619 1548.35,230.799 1548.92,231.814 1549.49,229.685 1550.05,226.668 1550.62,229.203 1551.19,230.422 1551.76,232.421 1552.33,233.489 1552.9,234.083 1553.46,234.011 1554.03,230.785 1554.6,231.952 1555.17,231.298 1555.74,229.958 1556.31,228.808 1556.87,228.914 1557.44,228.08 1558.01,228.288 1558.58,229.577 1559.15,229.525 1559.72,229.52 1560.28,227.363 1560.85,228.349 1561.42,227.414 1561.99,229.643 1562.56,226.596 1563.13,227.035 1563.69,227.313 1564.26,226.229 1564.83,226.765 1565.4,225.143 1565.97,225.679 1566.54,224.134 1567.1,223.383 1567.67,223.959 1568.24,226.652 1568.81,227.03 1569.38,226.496 1569.95,226.929 1570.51,227.443 1571.08,228.86 1571.65,229.144 1572.22,227.119 1572.79,227.461 1573.36,228.85 1573.92,228.988 1574.49,229.494 1575.06,227.404 1575.63,229.638 1576.2,228.56 1576.77,228.751 1577.33,232.182 1577.9,233.184 1578.47,233.201 1579.04,232.259 1579.61,234.38 1580.18,233.1 1580.74,233.828 1581.31,233.715 1581.88,234.727 1582.45,234.476 1583.02,235.407 1583.59,234.091 1584.15,232.961 1584.72,235.002 1585.29,233.785 1585.86,233.441 1586.43,235.321 1587,236.053 1587.56,232.515 1588.13,232.364 1588.7,232.333 1589.27,232.209 1589.84,232.142 1590.41,230.12 1590.97,230.146 1591.54,228.252 1592.11,230.508 1592.68,227.478 1593.25,229.652 1593.82,230.557 1594.38,231.779 1594.95,230.637 1595.52,231.694 1596.09,232.712 1596.66,231.43 1597.23,234.439 1597.79,233.218 1598.36,234.166 1598.93,234.96 1599.5,233.701 1600.07,234.646 1600.64,235.441 1601.2,233.273 1601.77,231.168 1602.34,229.978 1602.91,231.145 1603.48,230.011 1604.05,228.975 1604.61,229.089 1605.18,229.16 1605.75,228.257 1606.32,228.54 1606.89,227.494 1607.46,228.858 1608.02,228.119 1608.59,229.433 1609.16,233.724 1609.73,234.426 1610.3,236.218 1610.87,235.987 1611.43,235.576 1612,235.265 1612.57,234.773 1613.14,235.286 1613.71,235.035 1614.28,234.59 1614.84,236.232 1615.41,236.902 1615.98,237.386 1616.55,237.701 1617.12,238.148 1617.69,237.361 1618.26,235.793 1618.82,236.193 1619.39,235.732 1619.96,235.016 1620.53,234.406 1621.1,230.01 1621.67,228.864 1622.23,230.051 1622.8,230.047 1623.37,231.956 1623.94,231.854 1624.51,230.326 1625.08,230.203 1625.64,230.184 1626.21,230.027 1626.78,230.106 1627.35,228.99 1627.92,226.899 1628.49,228.081 1629.05,228.132 1629.62,226 1630.19,226.191 1630.76,227.394 1631.33,225.58 1631.9,226.927 1632.46,227.15 1633.03,226.388 1633.6,225.556 1634.17,226.913 1634.74,229.206 1635.31,230.195 1635.87,231.305 1636.44,231.368 1637.01,231.342 1637.58,231.357 1638.15,230.106 1638.72,229.041 1639.28,229.025 1639.85,230.925 1640.42,229.88 1640.99,230.953 1641.56,230.915 1642.13,229.949 1642.69,229.913 1643.26,229.95 1643.83,233 1644.4,231.838 1644.97,232.708 1645.54,231.305 1646.1,229.406 1646.67,230.543 1647.24,229.522 1647.81,228.454 1648.38,229.868 1648.95,227.962 1649.51,228.047 1650.08,230.307 1650.65,229.128 1651.22,226.121 1651.79,225.494 1652.36,226.794 1652.92,227.92 1653.49,228.186 1654.06,227.53 1654.63,228.886 1655.2,229.127 1655.77,229.158 1656.33,230.355 1656.9,229.48 1657.47,228.379 1658.04,229.614 1658.61,229.629 1659.18,228.812 1659.74,230.925 1660.31,230.09 1660.88,234.335 1661.45,233.261 1662.02,234.05 1662.59,232.689 1663.15,231.683 1663.72,234.521 1664.29,234.217 1664.86,232.064 1665.43,233.027 1666,233.703 1666.56,233.383 1667.13,236.371 1667.7,234.778 1668.27,232.511 1668.84,230.51 1669.41,232.554 1669.97,233.566 1670.54,233.413 1671.11,234.328 1671.68,232.185 1672.25,229.925 1672.82,229.993 1673.38,230.016 1673.95,231.179 1674.52,230.203 1675.09,228.477 1675.66,228.712 1676.23,228.891 1676.79,229.049 1677.36,232.148 1677.93,228.894 1678.5,228.973 1679.07,229.089 1679.64,229.184 1680.2,230.129 1680.77,230.395 1681.34,228.67 1681.91,228.867 1682.48,229.094 1683.05,228.255 1683.61,225.141 1684.18,225.531 1684.75,227.843 1685.32,227.998 1685.89,230.437 1686.46,227.559 1687.02,232.032 1687.59,233.09 1688.16,233.78 1688.73,232.434 1689.3,232.382 1689.87,230.303 1690.44,229.466 1691,228.627 1691.57,230.974 1692.14,231.79 1692.71,231.661 1693.28,231.694 1693.85,229.525 1694.41,229.607 1694.98,229.696 1695.55,229.858 1696.12,230.987 1696.69,230.077 1697.26,230.048 1697.82,231.222 1698.39,231.218 1698.96,232.281 1699.53,232.213 1700.1,232.164 1700.67,229.854 1701.23,229.021 1701.8,227.123 1702.37,227.656 1702.94,225.886 1703.51,227.298 1704.08,225.481 1704.64,227.123 1705.21,229.518 1705.78,227.451 1706.35,227.523 1706.92,228.827 1707.49,230.068 1708.05,230.119 1708.62,230.212 1709.19,231.351 1709.76,234.577 1710.33,234.641 1710.9,235.146 1711.46,230.875 1712.03,229.009 1712.6,230.123 1713.17,229.066 1713.74,229.069 1714.31,230.38 1714.87,231.447 1715.44,232.472 1716.01,231.42 1716.58,232.372 1717.15,231.338 1717.72,229.542 1718.28,232.658 1718.85,233.592 1719.42,234.561 1719.99,234.124 1720.56,232.825 1721.13,232.724 1721.69,230.507 1722.26,232.538 1722.83,231.252 1723.4,232.514 1723.97,232.351 1724.54,231.109 1725.1,231.083 1725.67,230.224 1726.24,230.293 1726.81,231.469 1727.38,231.422 1727.95,232.192 1728.51,233.11 1729.08,231.951 1729.65,233.308 1730.22,229.095 1730.79,228.172 1731.36,228.475 1731.92,229.503 1732.49,230.775 1733.06,230.543 1733.63,231.766 1734.2,229.857 1734.77,229.944 1735.33,231.158 1735.9,231.278 1736.47,230.231 1737.04,229.35 1737.61,232.394 1738.18,232.285 1738.74,234.218 1739.31,233.775 1739.88,234.605 1740.45,232.444 1741.02,230.297 1741.59,230.33 1742.15,231.58 1742.72,233.856 1743.29,232.458 1743.86,230.247 1744.43,228.162 1745,228.286 1745.56,228.657 1746.13,231.978 1746.7,231.672 1747.27,231.678 1747.84,230.502 1748.41,231.472 1748.97,230.461 1749.54,230.594 1750.11,231.839 1750.68,230.579 1751.25,229.62 1751.82,227.974 1752.38,228.363 1752.95,233.842 1753.52,232.551 1754.09,233.601 1754.66,231.379 1755.23,230.488 1755.79,228.496 1756.36,230.643 1756.93,229.777 1757.5,227.89 1758.07,227.061 1758.64,228.487 1759.21,228.738 1759.77,229.014 1760.34,229.014 1760.91,228.095 1761.48,228.311 1762.05,228.467 1762.62,226.57 1763.18,227.079 1763.75,226.417 1764.32,226.758 1764.89,227.176 1765.46,225.439 1766.03,223.909 1766.59,226.579 1767.16,226.179 1767.73,225.7 1768.3,226.928 1768.87,226.294 1769.44,224.622 1770,224.263 1770.57,224.832 1771.14,225.368 1771.71,225.11 1772.28,226.642 1772.85,227.241 1773.41,227.502 1773.98,225.842 1774.55,225.281 1775.12,225.686 1775.69,227.406 1776.26,225.746 1776.82,226.478 1777.39,228.137 1777.96,229.694 1778.53,229.097 1779.1,230.672 1779.67,230.806 1780.23,233.238 1780.8,233.254 1781.37,234.426 1781.94,234.44 1782.51,234.601 1783.08,234.7 1783.64,235.65 1784.21,233.38 1784.78,234.214 1785.35,236.093 1785.92,236.766 1786.49,236.451 1787.05,235.207 1787.62,236.186 1788.19,235.136 1788.76,236.931 1789.33,234.786 1789.9,235.759 1790.46,238.816 1791.03,239.373 1791.6,239.845 1792.17,240.391 1792.74,241.798 1793.31,238.281 1793.87,237.065 1794.44,237.605 1795.01,237.059 1795.58,234.523 1796.15,231.324 1796.72,231.271 1797.28,230.326 1797.85,230.396 1798.42,229.598 1798.99,231.897 1799.56,230.784 1800.13,231.861 1800.69,232.745 1801.26,232.658 1801.83,233.581 1802.4,233.397 1802.97,236.34 1803.54,235.829 1804.1,234.575 1804.67,233.364 1805.24,233.388 1805.81,232.204 1806.38,232.037 1806.95,233.053 1807.51,234.007 1808.08,232.733 1808.65,232.486 1809.22,232.384 1809.79,234.308 1810.36,234.963 1810.92,234.689 1811.49,236.242 1812.06,234.845 1812.63,234.45 1813.2,234.144 1813.77,231.654 1814.33,230.549 1814.9,233.675 1815.47,232.527 1816.04,231.215 1816.61,233.093 1817.18,230.71 1817.74,232.496 1818.31,234.396 1818.88,233.949 1819.45,233.636 1820.02,234.53 1820.59,232.991 1821.15,232.723 1821.72,233.403 1822.29,233.213 1822.86,232.948 1823.43,231.698 1824,232.866 1824.56,232.497 1825.13,233.355 1825.7,234.025 1826.27,232.647 1826.84,231.165 1827.41,232.189 1827.97,231.937 1828.54,232.881 1829.11,232.552 1829.68,231.449 1830.25,232.194 1830.82,232.929 1831.39,234.61 1831.95,234.282 1832.52,234.008 1833.09,233.674 1833.66,234.425 1834.23,233.146 1834.8,232.067 1835.36,232.1 1835.93,229.719 1836.5,228.704 1837.07,228.753 1837.64,226.492 1838.21,227.645 1838.77,226.563 1839.34,227.746 1839.91,227.797 1840.48,228.008 1841.05,230.209 1841.62,229.852 1842.18,227.736 1842.75,227.026 1843.32,230.468 1843.89,230.304 1844.46,229.334 1845.03,227.317 1845.59,227.507 1846.16,227.929 1846.73,224.168 1847.3,224.67 1847.87,223.994 1848.44,224.453 1849,227.83 1849.57,230.972 1850.14,231.121 1850.71,230.129 1851.28,230.161 1851.85,230.202 1852.41,228.074 1852.98,230.116 1853.55,230.299 1854.12,230.35 1854.69,228.407 1855.26,228.621 1855.82,229.759 1856.39,231.911 1856.96,230.722 1857.53,232.623 1858.1,230.617 1858.67,230.907 1859.23,229.954 1859.8,231.15 1860.37,231.294 1860.94,232.443 1861.51,233.305 1862.08,233.129 1862.64,233.128 1863.21,230.671 1863.78,231.609 1864.35,232.469 1864.92,234.303 1865.49,233.943 1866.05,231.655 1866.62,231.44 1867.19,229.481 1867.76,229.412 1868.33,231.715 1868.9,228.572 1869.46,227.48 1870.03,225.73 1870.6,225.163 1871.17,225.626 1871.74,226.066 1872.31,226.347 1872.87,224.661 1873.44,228.269 1874.01,228.268 1874.58,229.537 1875.15,227.7 1875.72,227.868 1876.28,227.147 1876.85,229.669 1877.42,229.67 1877.99,230.917 1878.56,229.92 1879.13,229.942 1879.69,230.145 1880.26,229.376 1880.83,228.642 1881.4,227.774 1881.97,231.086 1882.54,232.112 1883.1,231.165 1883.67,231.279 1884.24,231.308 1884.81,233.387 1885.38,235.151 1885.95,235.804 1886.51,237.493 1887.08,239.241 1887.65,238.6 1888.22,235.029 1888.79,234.899 1889.36,232.508 1889.92,236.468 1890.49,234.915 1891.06,236.473 1891.63,235.9 1892.2,234.593 1892.77,233.227 1893.33,234.043 1893.9,233.895 1894.47,233.817 1895.04,234.665 1895.61,234.348 1896.18,232.102 1896.74,231.833 1897.31,231.762 1897.88,230.783 1898.45,229.744 1899.02,229.634 1899.59,229.694 1900.16,228.757 1900.72,230.032 1901.29,231.075 1901.86,231.098 1902.43,231.248 1903,232.126 1903.57,234.033 1904.13,233.733 1904.7,232.342 1905.27,230.993 1905.84,233.935 1906.41,233.752 1906.98,234.57 1907.54,233.295 1908.11,230.85 1908.68,231.598 1909.25,233.337 1909.82,232.981 1910.39,230.592 1910.95,230.476 1911.52,231.638 1912.09,231.533 1912.66,232.373 1913.23,231.966 1913.8,231.773 1914.36,231.532 1914.93,230.442 1915.5,230.251 1916.07,228.358 1916.64,227.441 1917.21,226.656 1917.77,226.837 1918.34,226.023 1918.91,226.989 1919.48,226.138 1920.05,226.266 1920.62,226.637 1921.18,224.902 1921.75,224.232 1922.32,225.873 1922.89,228.381 1923.46,227.674 1924.03,228.016 1924.59,228.263 1925.16,226.388 1925.73,229.664 1926.3,228.971 1926.87,230.129 1927.44,231.32 1928,229.326 1928.57,227.201 1929.14,228.514 1929.71,227.609 1930.28,226.972 1930.85,227.082 1931.41,226.387 1931.98,224.321 1932.55,224.678 1933.12,226.234 1933.69,227.602 1934.26,229.832 1934.82,227.796 1935.39,228.023 1935.96,227.357 1936.53,226.522 1937.1,228.975 1937.67,229.234 1938.23,229.312 1938.8,229.491 1939.37,227.431 1939.94,225.915 1940.51,225.291 1941.08,226.566 1941.64,228.131 1942.21,228.262 1942.78,229.63 1943.35,230.711 1943.92,229.647 1944.49,229.79 1945.05,229.885 1945.62,230.132 1946.19,230.277 1946.76,232.508 1947.33,232.875 1947.9,230.775 1948.46,231.076 1949.03,229.073 1949.6,229.243 1950.17,228.191 1950.74,229.468 1951.31,229.585 1951.87,227.787 1952.44,227.068 1953.01,228.332 1953.58,229.595 1954.15,229.779 1954.72,232.021 1955.28,233.082 1955.85,231.964 1956.42,232.175 1956.99,231.249 1957.56,230.331 1958.13,228.756 1958.69,225.901 1959.26,228.508 1959.83,230.954 1960.4,231.192 1960.97,234.266 1961.54,236.268 1962.1,235.914 1962.67,238.809 1963.24,237.174 1963.81,239.963 1964.38,240.716 1964.95,239.965 1965.51,236.329 1966.08,236.888 1966.65,240.557 1967.22,238.862 1967.79,238.318 1968.36,236.96 1968.92,235.562 1969.49,235.131 1970.06,233.594 1970.63,234.378 1971.2,236.267 1971.77,235.929 1972.34,233.425 1972.9,233.351 1973.47,232.076 1974.04,230.166 1974.61,231.12 1975.18,230.062 1975.75,229.146 1976.31,228.23 1976.88,228.347 1977.45,229.392 1978.02,230.429 1978.59,229.414 1979.16,232.452 1979.72,233.185 1980.29,233.044 1980.86,233.062 1981.43,233.82 1982,233.554 1982.57,233.263 1983.13,231.989 1983.7,233.201 1984.27,232.891 1984.84,230.46 1985.41,230.612 1985.98,230.461 1986.54,230.431 1987.11,229.427 1987.68,228.505 1988.25,227.675 1988.82,226.918 1989.39,227.113 1989.95,227.48 1990.52,227.791 1991.09,229.113 1991.66,228.221 1992.23,229.313 1992.8,229.362 1993.36,229.451 1993.93,226.451 1994.5,227.696 1995.07,228.061 1995.64,228.15 1996.21,226.394 1996.77,227.725 1997.34,227.919 1997.91,226.241 1998.48,228.69 1999.05,229.167 1999.62,230.415 2000.18,230.378 2000.75,231.491 2001.32,231.588 2001.89,228.331 2002.46,227.494 2003.03,227.763 2003.59,228.919 2004.16,229.374 2004.73,229.628 2005.3,230.978 2005.87,230.897 2006.44,230.07 2007,231.994 2007.57,232.93 2008.14,232.842 2008.71,233.776 2009.28,234.623 2009.85,234.497 2010.41,235.161 2010.98,234.773 2011.55,233.583 2012.12,234.602 2012.69,236.318 2013.26,235.946 2013.82,236.845 2014.39,237.402 2014.96,238.047 2015.53,236.491 2016.1,238.159 2016.67,235.67 2017.23,236.328 2017.8,236.882 2018.37,235.398 2018.94,235.178 2019.51,236.896 2020.08,235.381 2020.64,234.744 2021.21,234.436 2021.78,234.373 2022.35,234.055 2022.92,234.716 2023.49,230.227 2024.05,231.334 2024.62,232.316 2025.19,231.156 2025.76,233.039 2026.33,235.921 2026.9,235.201 2027.46,238.89 2028.03,239.063 2028.6,237.409 2029.17,237.915 2029.74,237.467 2030.31,239.83 2030.87,235.024 2031.44,233.574 2032.01,232.189 2032.58,231.634 2033.15,231.402 2033.72,230.04 2034.28,230.913 2034.85,232.797 2035.42,232.323 2035.99,232.319 2036.56,232.053 2037.13,230.784 2037.69,230.601 2038.26,231.569 2038.83,231.31 2039.4,229.925 2039.97,230.654 2040.54,231.435 2041.11,228.215 2041.67,228.173 2042.24,227.344 2042.81,228.43 2043.38,225.499 2043.95,225.87 2044.52,225.133 2045.08,223.423 2045.65,225.02 2046.22,224.133 2046.79,223.354 2047.36,226.784 2047.93,223.949 2048.49,225.182 2049.06,227.52 2049.63,227.455 2050.2,228.703 2050.77,230.984 2051.34,230.795 2051.9,232.813 2052.47,232.597 2053.04,235.519 2053.61,235.942 2054.18,235.355 2054.75,234.369 2055.31,232.903 2055.88,232.39 2056.45,231.418 2057.02,232.334 2057.59,232.098 2058.16,231.76 2058.72,231.681 2059.29,230.634 2059.86,229.591 2060.43,228.532 2061,228.684 2061.57,229.845 2062.13,229.796 2062.7,227.712 2063.27,226.745 2063.84,226.873 2064.41,226.138 2064.98,226.422 2065.54,226.607 2066.11,224.895 2066.68,225.254 2067.25,226.467 2067.82,227.861 2068.39,226.943 2068.95,226.244 2069.52,226.447 2070.09,224.819 2070.66,227.235 2071.23,227.344 2071.8,225.706 2072.36,225.951 2072.93,227.195 2073.5,229.703 2074.07,232.091 2074.64,231.132 2075.21,232.241 2075.77,232.086 2076.34,230.961 2076.91,231.011 2077.48,230.9 2078.05,232.072 2078.62,231.827 2079.18,232.648 2079.75,231.441 2080.32,232.58 2080.89,231.563 2081.46,231.566 2082.03,231.408 2082.59,231.338 2083.16,232.365 2083.73,230.158 2084.3,228.274 2084.87,228.352 2085.44,230.559 2086,231.667 2086.57,231.808 2087.14,231.662 2087.71,230.774 2088.28,230.786 2088.85,229.826 2089.41,234.022 2089.98,232.895 2090.55,233.827 2091.12,232.724 2091.69,231.589 2092.26,231.503 2092.82,228.652 2093.39,228.958 2093.96,228.925 2094.53,230.248 2095.1,229.148 2095.67,229.313 2096.23,229.576 2096.8,230.757 2097.37,229.707 2097.94,227.979 2098.51,228.298 2099.08,225.436 2099.64,226.963 2100.21,227.266 2100.78,230.64 2101.35,229.61 2101.92,230.705 2102.49,228.537 2103.05,227.902 2103.62,229.022 2104.19,228.204 2104.76,228.384 2105.33,229.568 2105.9,230.944 2106.46,230.872 2107.03,230.893 2107.6,231.977 2108.17,230.905 2108.74,229.963 2109.31,229.13 2109.87,227.281 2110.44,228.66 2111.01,228.842 2111.58,230.038 2112.15,230.239 2112.72,231.353 2113.29,232.601 2113.85,234.701 2114.42,232.244 2114.99,231.999 2115.56,233.083 2116.13,234.237 2116.7,233.138 2117.26,228.753 2117.83,230.105 2118.4,230.241 2118.97,230.645 2119.54,230.81 2120.11,230.823 2120.67,231.864 2121.24,230.523 2121.81,231.654 2122.38,232.726 2122.95,233.72 2123.52,231.589 2124.08,230.549 2124.65,230.652 2125.22,230.72 2125.79,233.999 2126.36,234.794 2126.93,232.6 2127.49,232.547 2128.06,232.355 2128.63,230.339 2129.2,227.394 2129.77,227.782 2130.34,227.018 2130.9,228.187 2131.47,229.484 2132.04,230.572 2132.61,230.828 2133.18,232.095 2133.75,231.108 2134.31,230.923 2134.88,234.047 2135.45,232.918 2136.02,232.68 2136.59,233.616 2137.16,232.324 2137.72,232.894 2138.29,232.81 2138.86,234.869 2139.43,236.717 2140,234.174 2140.57,233.939 2141.13,232.807 2141.7,231.399 2142.27,229.388 2142.84,232.308 2143.41,233.256 2143.98,235.295 2144.54,235.982 2145.11,235.553 2145.68,235.319 2146.25,235.086 2146.82,234.535 2147.39,236.316 2147.95,235.973 2148.52,235.673 2149.09,235.332 2149.66,235.923 2150.23,235.324 2150.8,235.016 2151.36,233.714 2151.93,234.566 2152.5,234.225 2153.07,233.745 2153.64,233.546 2154.21,234.369 2154.77,234.019 2155.34,231.728 2155.91,231.673 2156.48,231.446 2157.05,230.245 2157.62,230.04 2158.18,229.029 2158.75,227.171 2159.32,227.303 2159.89,225.508 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.019 ± 0.021\n  with uncertainty of ± 0.0018645597300902608\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01334 ± (0.00373118, 0.00385577) (MC)\n  95% confidence interval: [-4.02103, -4.006] (MC)\n  linear error propagation: -4.01337 ± 0.00382149\n  |δ_y| = |0.00189117| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.013337242760377, val_l = 0.007689845769954573, val_u = 0.0073406202819183974)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip170\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip170)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip171\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip170)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip172\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1145.63 2211.02,1145.63 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,997.85 2211.02,997.85 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,850.071 2211.02,850.071 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,702.292 2211.02,702.292 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,554.513 2211.02,554.513 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,406.734 2211.02,406.734 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,258.955 2211.02,258.955 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1145.63 365.751,1145.63 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,997.85 365.751,997.85 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,850.071 365.751,850.071 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,702.292 365.751,702.292 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,554.513 365.751,554.513 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,406.734 365.751,406.734 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,258.955 365.751,258.955 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M298.909 1131.43 Q295.298 1131.43 293.469 1134.99 Q291.664 1138.53 291.664 1145.66 Q291.664 1152.77 293.469 1156.33 Q295.298 1159.88 298.909 1159.88 Q302.543 1159.88 304.349 1156.33 Q306.177 1152.77 306.177 1145.66 Q306.177 1138.53 304.349 1134.99 Q302.543 1131.43 298.909 1131.43 M298.909 1127.72 Q304.719 1127.72 307.775 1132.33 Q310.853 1136.91 310.853 1145.66 Q310.853 1154.39 307.775 1159 Q304.719 1163.58 298.909 1163.58 Q293.099 1163.58 290.02 1159 Q286.964 1154.39 286.964 1145.66 Q286.964 1136.91 290.02 1132.33 Q293.099 1127.72 298.909 1127.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M259.557 1011.19 L267.196 1011.19 L267.196 984.829 L258.886 986.496 L258.886 982.236 L267.15 980.57 L271.826 980.57 L271.826 1011.19 L279.465 1011.19 L279.465 1015.13 L259.557 1015.13 L259.557 1011.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M298.909 983.648 Q295.298 983.648 293.469 987.213 Q291.664 990.755 291.664 997.884 Q291.664 1004.99 293.469 1008.56 Q295.298 1012.1 298.909 1012.1 Q302.543 1012.1 304.349 1008.56 Q306.177 1004.99 306.177 997.884 Q306.177 990.755 304.349 987.213 Q302.543 983.648 298.909 983.648 M298.909 979.945 Q304.719 979.945 307.775 984.551 Q310.853 989.135 310.853 997.884 Q310.853 1006.61 307.775 1011.22 Q304.719 1015.8 298.909 1015.8 Q293.099 1015.8 290.02 1011.22 Q286.964 1006.61 286.964 997.884 Q286.964 989.135 290.02 984.551 Q293.099 979.945 298.909 979.945 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M262.775 863.416 L279.094 863.416 L279.094 867.351 L257.15 867.351 L257.15 863.416 Q259.812 860.661 264.395 856.031 Q269.002 851.379 270.182 850.036 Q272.428 847.513 273.307 845.777 Q274.21 844.018 274.21 842.328 Q274.21 839.573 272.266 837.837 Q270.344 836.101 267.242 836.101 Q265.043 836.101 262.59 836.865 Q260.159 837.629 257.381 839.18 L257.381 834.457 Q260.205 833.323 262.659 832.744 Q265.113 832.166 267.15 832.166 Q272.52 832.166 275.715 834.851 Q278.909 837.536 278.909 842.027 Q278.909 844.156 278.099 846.078 Q277.312 847.976 275.205 850.568 Q274.627 851.24 271.525 854.457 Q268.423 857.652 262.775 863.416 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M298.909 835.869 Q295.298 835.869 293.469 839.434 Q291.664 842.976 291.664 850.105 Q291.664 857.212 293.469 860.777 Q295.298 864.318 298.909 864.318 Q302.543 864.318 304.349 860.777 Q306.177 857.212 306.177 850.105 Q306.177 842.976 304.349 839.434 Q302.543 835.869 298.909 835.869 M298.909 832.166 Q304.719 832.166 307.775 836.772 Q310.853 841.356 310.853 850.105 Q310.853 858.832 307.775 863.439 Q304.719 868.022 298.909 868.022 Q293.099 868.022 290.02 863.439 Q286.964 858.832 286.964 850.105 Q286.964 841.356 290.02 836.772 Q293.099 832.166 298.909 832.166 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M272.914 700.938 Q276.27 701.655 278.145 703.924 Q280.043 706.192 280.043 709.525 Q280.043 714.641 276.525 717.442 Q273.006 720.243 266.525 720.243 Q264.349 720.243 262.034 719.803 Q259.742 719.387 257.289 718.53 L257.289 714.016 Q259.233 715.15 261.548 715.729 Q263.863 716.308 266.386 716.308 Q270.784 716.308 273.076 714.572 Q275.39 712.836 275.39 709.525 Q275.39 706.47 273.238 704.757 Q271.108 703.021 267.289 703.021 L263.261 703.021 L263.261 699.178 L267.474 699.178 Q270.923 699.178 272.752 697.813 Q274.58 696.424 274.58 693.831 Q274.58 691.169 272.682 689.757 Q270.807 688.322 267.289 688.322 Q265.367 688.322 263.168 688.739 Q260.969 689.155 258.33 690.035 L258.33 685.868 Q260.992 685.127 263.307 684.757 Q265.645 684.387 267.705 684.387 Q273.029 684.387 276.131 686.817 Q279.233 689.225 279.233 693.345 Q279.233 696.215 277.59 698.206 Q275.946 700.174 272.914 700.938 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M298.909 688.09 Q295.298 688.09 293.469 691.655 Q291.664 695.197 291.664 702.326 Q291.664 709.433 293.469 712.998 Q295.298 716.539 298.909 716.539 Q302.543 716.539 304.349 712.998 Q306.177 709.433 306.177 702.326 Q306.177 695.197 304.349 691.655 Q302.543 688.09 298.909 688.09 M298.909 684.387 Q304.719 684.387 307.775 688.993 Q310.853 693.576 310.853 702.326 Q310.853 711.053 307.775 715.66 Q304.719 720.243 298.909 720.243 Q293.099 720.243 290.02 715.66 Q286.964 711.053 286.964 702.326 Q286.964 693.576 290.02 688.993 Q293.099 684.387 298.909 684.387 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M271.594 541.307 L259.789 559.756 L271.594 559.756 L271.594 541.307 M270.367 537.233 L276.247 537.233 L276.247 559.756 L281.177 559.756 L281.177 563.645 L276.247 563.645 L276.247 571.793 L271.594 571.793 L271.594 563.645 L255.992 563.645 L255.992 559.131 L270.367 537.233 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M298.909 540.311 Q295.298 540.311 293.469 543.876 Q291.664 547.418 291.664 554.547 Q291.664 561.654 293.469 565.219 Q295.298 568.76 298.909 568.76 Q302.543 568.76 304.349 565.219 Q306.177 561.654 306.177 554.547 Q306.177 547.418 304.349 543.876 Q302.543 540.311 298.909 540.311 M298.909 536.608 Q304.719 536.608 307.775 541.214 Q310.853 545.797 310.853 554.547 Q310.853 563.274 307.775 567.881 Q304.719 572.464 298.909 572.464 Q293.099 572.464 290.02 567.881 Q286.964 563.274 286.964 554.547 Q286.964 545.797 290.02 541.214 Q293.099 536.608 298.909 536.608 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M258.793 389.454 L277.15 389.454 L277.15 393.389 L263.076 393.389 L263.076 401.861 Q264.094 401.514 265.113 401.352 Q266.131 401.167 267.15 401.167 Q272.937 401.167 276.316 404.338 Q279.696 407.509 279.696 412.926 Q279.696 418.504 276.224 421.606 Q272.752 424.685 266.432 424.685 Q264.256 424.685 261.988 424.315 Q259.742 423.944 257.335 423.204 L257.335 418.504 Q259.418 419.639 261.641 420.194 Q263.863 420.75 266.34 420.75 Q270.344 420.75 272.682 418.643 Q275.02 416.537 275.02 412.926 Q275.02 409.315 272.682 407.208 Q270.344 405.102 266.34 405.102 Q264.465 405.102 262.59 405.518 Q260.738 405.935 258.793 406.815 L258.793 389.454 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M298.909 392.532 Q295.298 392.532 293.469 396.097 Q291.664 399.639 291.664 406.768 Q291.664 413.875 293.469 417.44 Q295.298 420.981 298.909 420.981 Q302.543 420.981 304.349 417.44 Q306.177 413.875 306.177 406.768 Q306.177 399.639 304.349 396.097 Q302.543 392.532 298.909 392.532 M298.909 388.829 Q304.719 388.829 307.775 393.435 Q310.853 398.018 310.853 406.768 Q310.853 415.495 307.775 420.102 Q304.719 424.685 298.909 424.685 Q293.099 424.685 290.02 420.102 Q286.964 415.495 286.964 406.768 Q286.964 398.018 290.02 393.435 Q293.099 388.829 298.909 388.829 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M269.326 257.091 Q266.178 257.091 264.326 259.244 Q262.497 261.397 262.497 265.147 Q262.497 268.874 264.326 271.05 Q266.178 273.202 269.326 273.202 Q272.474 273.202 274.303 271.05 Q276.154 268.874 276.154 265.147 Q276.154 261.397 274.303 259.244 Q272.474 257.091 269.326 257.091 M278.608 242.439 L278.608 246.698 Q276.849 245.864 275.043 245.425 Q273.261 244.985 271.502 244.985 Q266.872 244.985 264.418 248.11 Q261.988 251.235 261.641 257.554 Q263.006 255.54 265.066 254.476 Q267.127 253.388 269.603 253.388 Q274.812 253.388 277.821 256.559 Q280.853 259.707 280.853 265.147 Q280.853 270.471 277.705 273.688 Q274.557 276.906 269.326 276.906 Q263.33 276.906 260.159 272.323 Q256.988 267.716 256.988 258.989 Q256.988 250.795 260.877 245.934 Q264.766 241.05 271.316 241.05 Q273.076 241.05 274.858 241.397 Q276.664 241.744 278.608 242.439 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M298.909 244.753 Q295.298 244.753 293.469 248.318 Q291.664 251.86 291.664 258.989 Q291.664 266.096 293.469 269.661 Q295.298 273.202 298.909 273.202 Q302.543 273.202 304.349 269.661 Q306.177 266.096 306.177 258.989 Q306.177 251.86 304.349 248.318 Q302.543 244.753 298.909 244.753 M298.909 241.05 Q304.719 241.05 307.775 245.656 Q310.853 250.239 310.853 258.989 Q310.853 267.716 307.775 272.323 Q304.719 276.906 298.909 276.906 Q293.099 276.906 290.02 272.323 Q286.964 267.716 286.964 258.989 Q286.964 250.239 290.02 245.656 Q293.099 241.05 298.909 241.05 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip172)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1036.74 400.199,936.706 400.786,844.921 401.372,760.83 401.958,683.922 402.545,613.723 403.131,549.793 403.718,491.724 404.304,439.136 404.891,480.995 405.477,434.145 406.063,391.998 406.65,354.251 407.236,390.496 407.823,357.653 408.409,328.555 408.995,302.958 409.582,280.632 410.168,261.361 410.755,244.94 411.341,231.178 411.927,219.895 412.514,249.967 413.1,241.974 413.687,269.997 414.273,265.465 414.86,262.737 415.446,314.912 416.032,314.519 416.619,314.175 417.205,337.277 417.792,338.835 418.378,342.148 418.964,381.793 419.551,384.236 420.137,387.47 420.724,392.761 421.31,412.008 421.896,417.238 422.483,436.343 423.069,442.513 423.656,449.428 424.242,468.192 424.829,475.112 425.415,501.798 426.001,511.095 426.588,529.047 427.174,546.866 427.761,556.663 428.347,567.246 428.933,577.747 429.52,595.325 430.106,606.046 430.693,623.012 431.279,634.418 431.865,651.659 432.452,663.48 433.038,680.939 433.625,712.382 434.211,727.695 434.798,737.971 435.384,748.347 435.97,766.667 436.557,777.54 437.143,799.728 437.73,813.223 438.316,826.382 438.902,835.453 439.489,848.085 440.075,860.044 440.662,875.127 441.248,886.634 441.835,900.49 442.421,913.833 443.007,920.928 443.594,928.287 444.18,937.899 444.767,950.1 445.353,959.066 445.939,973.105 446.526,989.112 447.112,996.856 447.699,1004.11 448.285,1009.62 448.871,1014.51 449.458,1023.88 450.044,1033.08 450.631,1039.58 451.217,1049.99 451.804,1057.97 452.39,1063.49 452.976,1068.73 453.563,1074.11 454.149,1081.43 454.736,1088.4 455.322,1098.63 455.908,1110.72 456.495,1114.62 457.081,1120.13 457.668,1122.12 458.254,1124.01 458.84,1127.84 459.427,1135.19 460.013,1136.95 460.6,1142.14 461.186,1145.42 461.773,1150.35 462.359,1158.54 462.945,1161.65 463.532,1163.07 464.118,1164.06 464.705,1165.21 465.291,1169.62 465.877,1172.61 466.464,1173.44 467.05,1176.3 467.637,1178.76 468.223,1184.32 468.809,1184.85 469.396,1184.02 469.982,1184.78 470.569,1188.82 471.155,1191.43 471.742,1190.69 472.328,1194.23 472.914,1194.68 473.501,1196.47 474.087,1198.45 474.674,1199 475.26,1199.48 475.846,1200.03 476.433,1203.37 477.019,1206.66 477.606,1208.46 478.192,1207.01 478.778,1207.48 479.365,1209.44 479.951,1208.26 480.538,1211.48 481.124,1211.76 481.711,1211 482.297,1210.15 482.883,1213.64 483.47,1216.87 484.056,1218.4 484.643,1218.35 485.229,1219.69 485.815,1216.86 486.402,1221.21 486.988,1225.14 487.575,1228.74 488.161,1228.2 488.748,1230.53 489.334,1227.38 489.92,1226.92 490.507,1226.68 491.093,1226.34 491.68,1227.33 492.266,1228.5 492.852,1228.24 493.439,1226.92 494.025,1229.34 494.612,1229.21 495.198,1230.15 495.784,1229.98 496.371,1230.82 496.957,1233.32 497.544,1233.16 498.13,1235.27 498.717,1237.15 499.303,1236.62 499.889,1237.37 500.476,1239.5 501.062,1237.67 501.649,1236.98 502.235,1235.28 502.821,1233.53 503.408,1231.8 503.994,1231.6 504.581,1232.62 505.167,1235.92 505.753,1235.55 506.34,1240.12 506.926,1240.7 507.513,1239.94 508.099,1239.24 508.686,1239.82 509.272,1236.93 509.858,1237.4 510.445,1236.83 511.031,1240.06 511.618,1242.02 512.204,1243.52 512.79,1245.19 513.377,1245.39 513.963,1244.29 514.55,1245.75 515.136,1244.68 515.722,1245.12 516.309,1245.37 516.895,1246.81 517.482,1249.43 518.068,1250.53 518.655,1249.34 519.241,1248.07 519.827,1248.01 520.414,1245.61 521,1244.62 521.587,1242.26 522.173,1241.67 522.759,1239.74 523.346,1237.73 523.932,1238.37 524.519,1241.3 525.105,1239.26 525.691,1237.33 526.278,1236.58 526.864,1236.13 527.451,1236.82 528.037,1236.55 528.624,1239.93 529.21,1241.59 529.796,1239.64 530.383,1235.24 530.969,1237.15 531.556,1235.3 532.142,1234.7 532.728,1235.29 533.315,1234.88 533.901,1236.81 534.488,1237 535.074,1236.45 535.661,1238.19 536.247,1237.5 536.833,1233.24 537.42,1233.94 538.006,1233.21 538.593,1232.7 539.179,1233.59 539.765,1231.95 540.352,1232.73 540.938,1231.08 541.525,1229.65 542.111,1229.3 542.697,1228.91 543.284,1228.72 543.87,1230.7 544.457,1229.84 545.043,1229.59 545.63,1233.19 546.216,1232.49 546.802,1231.97 547.389,1231.42 547.975,1231.97 548.562,1231.15 549.148,1229.31 549.734,1231.5 550.321,1227.49 550.907,1226.89 551.494,1226.88 552.08,1226.75 552.666,1225.28 553.253,1225.23 553.839,1222.6 554.426,1222.52 555.012,1222.45 555.599,1225.16 556.185,1227.29 556.771,1225.6 557.358,1226.66 557.944,1226.35 558.531,1226.33 559.117,1224.75 559.703,1224.42 560.29,1225.51 560.876,1228.88 561.463,1229.57 562.049,1231.6 562.635,1231.14 563.222,1231.87 563.808,1231.23 564.395,1233.04 564.981,1233.73 565.568,1235.47 566.154,1234.85 566.74,1234.2 567.327,1234.61 567.913,1234.95 568.5,1234.35 569.086,1237.17 569.672,1233.8 570.259,1235.54 570.845,1233.16 571.432,1231.46 572.018,1229.69 572.605,1229.14 573.191,1229.88 573.777,1227.16 574.364,1226.98 574.95,1228.75 575.537,1227.16 576.123,1226.66 576.709,1226.27 577.296,1225.89 577.882,1225.32 578.469,1224.91 579.055,1226.68 579.641,1224.88 580.228,1227.92 580.814,1227.58 581.401,1228.4 581.987,1224.35 582.574,1227.49 583.16,1228.25 583.746,1225.06 584.333,1229.49 584.919,1230.13 585.506,1229.61 586.092,1230.43 586.678,1229.8 587.265,1227.99 587.851,1227.16 588.438,1230.43 589.024,1229.88 589.61,1230.69 590.197,1226.32 590.783,1227.12 591.37,1224.36 591.956,1224.12 592.543,1223.93 593.129,1222.49 593.715,1222.06 594.302,1221.78 594.888,1221.69 595.475,1221.42 596.061,1221.13 596.647,1219.83 597.234,1217.39 597.82,1217.54 598.407,1216.48 598.993,1217.66 599.579,1218.81 600.166,1217.43 600.752,1217.59 601.339,1219.87 601.925,1221.99 602.512,1225.36 603.098,1224.86 603.684,1226.79 604.271,1224.05 604.857,1226.02 605.444,1225.43 606.03,1225.08 606.616,1225.69 607.203,1225.16 607.789,1225.93 608.376,1224.32 608.962,1223.67 609.548,1224.21 610.135,1223.99 610.721,1223.63 611.308,1223.03 611.894,1222.63 612.481,1223.56 613.067,1223.22 613.653,1223.98 614.24,1224.45 614.826,1220.02 615.413,1218.8 615.999,1217.34 616.585,1215.99 617.172,1217.15 617.758,1217.07 618.345,1219.28 618.931,1217.9 619.518,1217.66 620.104,1217.51 620.69,1217.47 621.277,1216.32 621.863,1216.46 622.45,1216.23 623.036,1218.75 623.622,1218.63 624.209,1218.57 624.795,1216.96 625.382,1218.04 625.968,1217.97 626.554,1217.68 627.141,1217.48 627.727,1218.68 628.314,1217.06 628.9,1218.01 629.487,1218.83 630.073,1218.56 630.659,1217.16 631.246,1217.24 631.832,1215.8 632.419,1215.69 633.005,1218.26 633.591,1218.09 634.178,1221.56 634.764,1220.99 635.351,1220.63 635.937,1220.38 636.523,1220.09 637.11,1219.81 637.696,1219.59 638.283,1216.85 638.869,1217.83 639.456,1217.71 640.042,1218.69 640.628,1216.08 641.215,1215.99 641.801,1215.98 642.388,1215.97 642.974,1214.57 643.56,1214.39 644.147,1209.38 644.733,1210.65 645.32,1213.29 645.906,1213.09 646.492,1213.14 647.079,1214.37 647.665,1213.01 648.252,1213.23 648.838,1213.22 649.425,1215.89 650.011,1215.78 650.597,1216.85 651.184,1219.05 651.77,1213.95 652.357,1215.16 652.943,1213.82 653.529,1214.73 654.116,1216.96 654.702,1215.63 655.289,1216.56 655.875,1216.46 656.462,1214.02 657.048,1216.4 657.634,1217.41 658.221,1218.23 658.807,1217.87 659.394,1216.41 659.98,1218.59 660.566,1215.71 661.153,1216.82 661.739,1216.34 662.326,1218.41 662.912,1215.37 663.498,1217.5 664.085,1217.26 664.671,1215.85 665.258,1213.33 665.844,1213.36 666.431,1211.93 667.017,1212.91 667.603,1214 668.19,1211.3 668.776,1208.69 669.363,1210.39 669.949,1210.52 670.535,1211.72 671.122,1213.04 671.708,1212.65 672.295,1212.87 672.881,1211.59 673.467,1212.7 674.054,1212.84 674.64,1213.86 675.227,1214.96 675.813,1215.97 676.4,1217.13 676.986,1216.72 677.572,1215.3 678.159,1214.13 678.745,1215.24 679.332,1218.66 679.918,1219.35 680.504,1221.17 681.091,1219.4 681.677,1217.78 682.264,1217.43 682.85,1218.25 683.436,1219.01 684.023,1217.29 684.609,1215.78 685.196,1215.48 685.782,1214.21 686.369,1214.18 686.955,1215.19 687.541,1215.03 688.128,1214.87 688.714,1212.38 689.301,1213.44 689.887,1214.15 690.473,1215.41 691.06,1215.28 691.646,1213.75 692.233,1213.58 692.819,1212.31 693.405,1214.46 693.992,1218.9 694.578,1219.87 695.165,1219.42 695.751,1219.96 696.338,1220.64 696.924,1221.35 697.51,1222.13 698.097,1221.48 698.683,1223.44 699.27,1221.81 699.856,1218.91 700.442,1219.76 701.029,1219.25 701.615,1218.63 702.202,1217.86 702.788,1218.74 703.375,1218.28 703.961,1217.83 704.547,1215.13 705.134,1214.96 705.72,1213.48 706.307,1213.39 706.893,1216.67 707.479,1217.72 708.066,1217.61 708.652,1215.83 709.239,1215.61 709.825,1215.21 710.411,1216.39 710.998,1213.73 711.584,1214.61 712.171,1215.66 712.757,1216.5 713.344,1217.74 713.93,1216.26 714.516,1214.63 715.103,1213.28 715.689,1213.21 716.276,1215.72 716.862,1212.78 717.448,1211.26 718.035,1211.08 718.621,1211.24 719.208,1213.56 719.794,1213.14 720.38,1210.5 720.967,1210.49 721.553,1212.83 722.14,1211.51 722.726,1210.06 723.313,1209.93 723.899,1211.14 724.485,1207.24 725.072,1207.32 725.658,1207.36 726.245,1207.44 726.831,1210.07 727.417,1208.57 728.004,1208.62 728.59,1207.26 729.177,1207.42 729.763,1208.85 730.349,1204.22 730.936,1204.41 731.522,1208.02 732.109,1206.8 732.695,1205.75 733.282,1205.95 733.868,1207.36 734.454,1207.3 735.041,1207.37 735.627,1206.34 736.214,1205.26 736.8,1204.22 737.386,1203.37 737.973,1202.54 738.559,1206.56 739.146,1206.66 739.732,1206.85 740.318,1206.96 740.905,1208.54 741.491,1209.01 742.078,1209.07 742.664,1208.93 743.251,1208.88 743.837,1207.73 744.423,1209.48 745.01,1211.74 745.596,1211.84 746.183,1212.9 746.769,1211.6 747.355,1211.57 747.942,1211.51 748.528,1209.9 749.115,1211.15 749.701,1211.03 750.288,1209.78 750.874,1208.89 751.46,1208.91 752.047,1211.33 752.633,1213.43 753.22,1212.12 753.806,1213.24 754.392,1209.57 754.979,1209.51 755.565,1211.71 756.152,1215.26 756.738,1215.01 757.324,1215.66 757.911,1216.47 758.497,1213.72 759.084,1212.25 759.67,1212.12 760.257,1214.23 760.843,1213.88 761.429,1212.55 762.016,1212.14 762.602,1208.44 763.189,1208.32 763.775,1207.02 764.361,1208.17 764.948,1210.66 765.534,1211.84 766.121,1211.54 766.707,1213.85 767.293,1212.36 767.88,1212.28 768.466,1212.18 769.053,1214.65 769.639,1212.94 770.226,1210.1 770.812,1210.2 771.398,1211.46 771.985,1211.49 772.571,1208.97 773.158,1208.02 773.744,1209.15 774.33,1208.87 774.917,1207.51 775.503,1210.03 776.09,1209.01 776.676,1210.28 777.262,1212.63 777.849,1213.67 778.435,1214.54 779.022,1212.1 779.608,1211.96 780.195,1213.99 780.781,1215 781.367,1213.26 781.954,1212.93 782.54,1212.51 783.127,1212.2 783.713,1211.91 784.299,1211.46 784.886,1209.3 785.472,1207.92 786.059,1206.59 786.645,1206.47 787.232,1205.47 787.818,1205.69 788.404,1204.79 788.991,1203.65 789.577,1203.9 790.164,1204.06 790.75,1202.84 791.336,1203.19 791.923,1203.57 792.509,1203.96 793.096,1205.49 793.682,1206.8 794.268,1204.34 794.855,1204.38 795.441,1206.8 796.028,1206.69 796.614,1205.35 797.201,1204.29 797.787,1204.27 798.373,1204.42 798.96,1207.06 799.546,1208.16 800.133,1205.86 800.719,1207.27 801.305,1208.64 801.892,1208.68 802.478,1207.29 803.065,1206.28 803.651,1207.74 804.237,1205.22 804.824,1205.6 805.41,1203.35 805.997,1207.2 806.583,1207.51 807.17,1207.29 807.756,1208.59 808.342,1207.43 808.929,1206.34 809.515,1206.24 810.102,1208.81 810.688,1206.46 811.274,1206.28 811.861,1206.32 812.447,1206.39 813.034,1205.41 813.62,1204.31 814.206,1204.47 814.793,1205.9 815.379,1206.07 815.966,1204.88 816.552,1206.15 817.139,1204.87 817.725,1205.73 818.311,1207.07 818.898,1205.73 819.484,1205.75 820.071,1202.12 820.657,1202.67 821.243,1202.84 821.83,1204.25 822.416,1205.52 823.003,1205.36 823.589,1205.72 824.175,1205.93 824.762,1206.82 825.348,1207 825.935,1206.99 826.521,1208.13 827.108,1206.8 827.694,1209.08 828.28,1209.03 828.867,1209.08 829.453,1209.01 830.04,1210.08 830.626,1212.17 831.212,1215.51 831.799,1214.92 832.385,1213.26 832.972,1212.93 833.558,1212.59 834.145,1210.1 834.731,1210.89 835.317,1209.66 835.904,1209.54 836.49,1209.19 837.077,1209.81 837.663,1209.69 838.249,1208.4 838.836,1209.52 839.422,1209.4 840.009,1212.91 840.595,1213.65 841.181,1216.75 841.768,1216.53 842.354,1214.77 842.941,1211.86 843.527,1211.37 844.114,1207.57 844.7,1208.97 845.286,1210.1 845.873,1212.13 846.459,1211.97 847.046,1207.98 847.632,1205.23 848.218,1205.48 848.805,1206.72 849.391,1210.51 849.978,1210.31 850.564,1208.88 851.15,1207.58 851.737,1207.26 852.323,1203.59 852.91,1202.21 853.496,1204.83 854.083,1204.93 854.669,1205.23 855.255,1207.83 855.842,1207.93 856.428,1209.23 857.015,1209.3 857.601,1209.17 858.187,1209.16 858.774,1211.67 859.36,1210.05 859.947,1209.79 860.533,1210.76 861.119,1211.72 861.706,1212.58 862.292,1213.28 862.879,1216.45 863.465,1218.47 864.052,1216.49 864.638,1217.46 865.224,1216.67 865.811,1213.9 866.397,1212.26 866.984,1212.09 867.57,1211.94 868.156,1210.28 868.743,1208.84 869.329,1206.24 869.916,1209.93 870.502,1210.85 871.089,1211.82 871.675,1213.79 872.261,1214.57 872.848,1214.11 873.434,1212.52 874.021,1213.28 874.607,1212.83 875.193,1211.08 875.78,1211.88 876.366,1209.16 876.953,1208.92 877.539,1206.24 878.125,1206.3 878.712,1207.35 879.298,1206.11 879.885,1208.29 880.471,1207.04 881.058,1206.92 881.644,1207.97 882.23,1208.13 882.817,1209.25 883.403,1208.92 883.99,1206.36 884.576,1207.52 885.162,1207.48 885.749,1207.48 886.335,1207.56 886.922,1207.18 887.508,1207.17 888.094,1209.62 888.681,1210.85 889.267,1211.7 889.854,1208.99 890.44,1206.64 891.027,1205.4 891.613,1206.66 892.199,1209.2 892.786,1208.1 893.372,1207.98 893.959,1205.5 894.545,1204.27 895.131,1203.2 895.718,1204.69 896.304,1202.62 896.891,1206.32 897.477,1206.27 898.063,1207.46 898.65,1203.66 899.236,1201.5 899.823,1200.52 900.409,1201.88 900.996,1203.52 901.582,1203.77 902.168,1205.13 902.755,1205.3 903.341,1206.39 903.928,1206.44 904.514,1207.5 905.1,1207.41 905.687,1208.54 906.273,1206.13 906.86,1203.71 907.446,1205.09 908.032,1203.78 908.619,1204.87 909.205,1205.22 909.792,1207.62 910.378,1202.95 910.965,1204.23 911.551,1203.38 912.137,1203.63 912.724,1202.55 913.31,1201.64 913.897,1202.91 914.483,1201.99 915.069,1202.35 915.656,1202.54 916.242,1205.42 916.829,1204.17 917.415,1200.81 918.002,1200.99 918.588,1201.39 919.174,1202.89 919.761,1203.36 920.347,1201.06 920.934,1205 921.52,1203.44 922.106,1207.41 922.693,1206.04 923.279,1207.19 923.866,1206.91 924.452,1206.86 925.038,1206.63 925.625,1204.18 926.211,1202.97 926.798,1205.86 927.384,1208.2 927.971,1209.31 928.557,1206.83 929.143,1205.49 929.73,1209.26 930.316,1210.19 930.903,1209.96 931.489,1209.78 932.075,1209.53 932.662,1210.35 933.248,1211.34 933.835,1213.22 934.421,1211.79 935.007,1208.94 935.594,1208.66 936.18,1210.93 936.767,1208.33 937.353,1205.81 937.94,1208.24 938.526,1208.28 939.112,1207.04 939.699,1208.29 940.285,1208.16 940.872,1208.04 941.458,1206.73 942.044,1205.42 942.631,1204.45 943.217,1205.74 943.804,1206.81 944.39,1206.7 944.976,1207.84 945.563,1205.3 946.149,1206.62 946.736,1206.75 947.322,1206.77 947.909,1205.6 948.495,1206.78 949.081,1205.43 949.668,1207.78 950.254,1208.6 950.841,1208.31 951.427,1208.5 952.013,1207.09 952.6,1207.09 953.186,1210.69 953.773,1211.69 954.359,1210.15 954.945,1205.98 955.532,1204.58 956.118,1204.85 956.705,1204.95 957.291,1207.15 957.878,1208.31 958.464,1207.06 959.05,1203.5 959.637,1203.49 960.223,1203.62 960.81,1201.04 961.396,1201.3 961.982,1200.58 962.569,1200.74 963.155,1203.46 963.742,1204.66 964.328,1204.89 964.915,1206.36 965.501,1208.58 966.087,1208.16 966.674,1206.97 967.26,1207.92 967.847,1206.73 968.433,1207.11 969.019,1207.13 969.606,1206.87 970.192,1205.75 970.779,1205.77 971.365,1205.84 971.951,1208.08 972.538,1209.22 973.124,1211.27 973.711,1210.73 974.297,1211.77 974.884,1212.7 975.47,1208.63 976.056,1209.82 976.643,1208.56 977.229,1212 977.816,1210.39 978.402,1211.28 978.988,1211.02 979.575,1209.52 980.161,1210.34 980.748,1211.09 981.334,1211.97 981.92,1212.79 982.507,1212.46 983.093,1211.94 983.68,1212.51 984.266,1214.52 984.853,1215.28 985.439,1214.75 986.025,1214.25 986.612,1212.37 987.198,1210.57 987.785,1210.28 988.371,1211.35 988.957,1212.16 989.544,1214.33 990.13,1210.27 990.717,1208.84 991.303,1206.39 991.889,1207.39 992.476,1205.88 993.062,1208.24 993.649,1209.17 994.235,1211.37 994.822,1211 995.408,1209.58 995.994,1210.54 996.581,1206.63 997.167,1206.53 997.754,1204 998.34,1206.44 998.926,1206.38 999.513,1204.13 1000.1,1201.93 1000.69,1202.22 1001.27,1207.45 1001.86,1204.81 1002.44,1203.76 1003.03,1204.11 1003.62,1204.04 1004.2,1204.19 1004.79,1203.03 1005.38,1200.45 1005.96,1197.29 1006.55,1198.99 1007.14,1200.64 1007.72,1199.6 1008.31,1199.84 1008.9,1201.54 1009.48,1201.72 1010.07,1201.94 1010.65,1203.26 1011.24,1204.39 1011.83,1204.4 1012.41,1203.24 1013,1203.57 1013.59,1198.77 1014.17,1199.2 1014.76,1198.52 1015.35,1199 1015.93,1199.24 1016.52,1199.47 1017.11,1200.83 1017.69,1201.05 1018.28,1203.72 1018.86,1201.49 1019.45,1201.56 1020.04,1202.84 1020.62,1202.91 1021.21,1205.75 1021.8,1207.04 1022.38,1207.17 1022.97,1203.58 1023.56,1202.42 1024.14,1206.23 1024.73,1203.92 1025.32,1205.26 1025.9,1207.47 1026.49,1207.46 1027.07,1208.49 1027.66,1207.08 1028.25,1204.48 1028.83,1202.14 1029.42,1202.18 1030.01,1202.48 1030.59,1202.73 1031.18,1203.14 1031.77,1202.07 1032.35,1202.37 1032.94,1201.3 1033.52,1200.19 1034.11,1201.89 1034.7,1199.83 1035.28,1201.26 1035.87,1200.22 1036.46,1198.24 1037.04,1198.78 1037.63,1198.88 1038.22,1200.51 1038.8,1203.38 1039.39,1204.8 1039.98,1206.03 1040.56,1206.09 1041.15,1203.76 1041.73,1205.14 1042.32,1205.1 1042.91,1205.25 1043.49,1205.37 1044.08,1206.54 1044.67,1207.38 1045.25,1207.71 1045.84,1209.13 1046.43,1211.18 1047.01,1213.61 1047.6,1210.55 1048.19,1207.91 1048.77,1207.65 1049.36,1206.3 1049.94,1206.09 1050.53,1207.32 1051.12,1205.91 1051.7,1202.2 1052.29,1205.02 1052.88,1204.91 1053.46,1206.31 1054.05,1204.86 1054.64,1203.81 1055.22,1203.75 1055.81,1202.66 1056.39,1205.09 1056.98,1204.92 1057.57,1204.11 1058.15,1203.9 1058.74,1202.91 1059.33,1203.03 1059.91,1202.08 1060.5,1201.18 1061.09,1201.58 1061.67,1201.95 1062.26,1202.02 1062.85,1201.87 1063.43,1202.02 1064.02,1202.24 1064.6,1202.48 1065.19,1204 1065.78,1202.81 1066.36,1203.06 1066.95,1203.11 1067.54,1200.5 1068.12,1202.06 1068.71,1202.18 1069.3,1199.52 1069.88,1198.72 1070.47,1197.95 1071.06,1200.77 1071.64,1202.3 1072.23,1203.46 1072.81,1205.06 1073.4,1204.89 1073.99,1208.49 1074.57,1208.36 1075.16,1209.56 1075.75,1209.42 1076.33,1208.02 1076.92,1207.71 1077.51,1207.79 1078.09,1209.94 1078.68,1210.77 1079.26,1211.6 1079.85,1208.69 1080.44,1211.02 1081.02,1209.59 1081.61,1210.64 1082.2,1209.17 1082.78,1205.22 1083.37,1206.45 1083.96,1208.58 1084.54,1209.79 1085.13,1208.56 1085.72,1205.91 1086.3,1205.05 1086.89,1203.69 1087.47,1203.73 1088.06,1202.65 1088.65,1201.47 1089.23,1198.82 1089.82,1197.85 1090.41,1199.43 1090.99,1202.13 1091.58,1204.75 1092.17,1205.88 1092.75,1204.81 1093.34,1204.87 1093.93,1203.68 1094.51,1203.85 1095.1,1204.08 1095.68,1203.13 1096.27,1205.45 1096.86,1206.66 1097.44,1207.74 1098.03,1207.59 1098.62,1208.5 1099.2,1209.56 1099.79,1211.79 1100.38,1211.7 1100.96,1209.97 1101.55,1209.86 1102.14,1210.77 1102.72,1208.02 1103.31,1204.27 1103.89,1204.53 1104.48,1204.53 1105.07,1207.19 1105.65,1203.53 1106.24,1204.92 1106.83,1204.89 1107.41,1209.71 1108,1208.31 1108.59,1208.06 1109.17,1208.93 1109.76,1205.15 1110.34,1206.46 1110.93,1202.68 1111.52,1201.91 1112.1,1201.99 1112.69,1202.05 1113.28,1202.31 1113.86,1203.82 1114.45,1205.09 1115.04,1203.98 1115.62,1203.97 1116.21,1204.01 1116.8,1204.12 1117.38,1203.16 1117.97,1203.26 1118.55,1204.36 1119.14,1204.45 1119.73,1203.05 1120.31,1201.68 1120.9,1203.14 1121.49,1205.66 1122.07,1206.66 1122.66,1205.29 1123.25,1206.53 1123.83,1207.81 1124.42,1205.38 1125.01,1205.62 1125.59,1204.28 1126.18,1205.66 1126.76,1205.62 1127.35,1203.26 1127.94,1202.15 1128.52,1203.96 1129.11,1204.21 1129.7,1205.62 1130.28,1206.84 1130.87,1207.7 1131.46,1206.54 1132.04,1206.5 1132.63,1209.03 1133.21,1209.95 1133.8,1207.39 1134.39,1205.24 1134.97,1202.82 1135.56,1203.19 1136.15,1204.81 1136.73,1204.91 1137.32,1205.13 1137.91,1206.34 1138.49,1206.47 1139.08,1205.3 1139.67,1204.27 1140.25,1206.8 1140.84,1204.56 1141.42,1205.68 1142.01,1204.35 1142.6,1205.54 1143.18,1207.66 1143.77,1207.92 1144.36,1208.01 1144.94,1206.99 1145.53,1208.43 1146.12,1208.23 1146.7,1208.19 1147.29,1206.79 1147.88,1206.7 1148.46,1205.42 1149.05,1205.72 1149.63,1204.3 1150.22,1205.67 1150.81,1204.22 1151.39,1201.92 1151.98,1201.87 1152.57,1202.3 1153.15,1203.64 1153.74,1201.21 1154.33,1201.48 1154.91,1201.75 1155.5,1204.26 1156.09,1204.45 1156.67,1200.84 1157.26,1199.71 1157.84,1200.13 1158.43,1200.42 1159.02,1202.14 1159.6,1204.84 1160.19,1203.64 1160.78,1204.94 1161.36,1205.14 1161.95,1204.02 1162.54,1203.92 1163.12,1205.2 1163.71,1204 1164.29,1204.39 1164.88,1204.31 1165.47,1206.84 1166.05,1206.76 1166.64,1207.93 1167.23,1210.09 1167.81,1211.31 1168.4,1209.61 1168.99,1208.04 1169.57,1206.75 1170.16,1206.73 1170.75,1208.78 1171.33,1205.96 1171.92,1205.62 1172.5,1205.41 1173.09,1205.31 1173.68,1206.4 1174.26,1206.38 1174.85,1206.24 1175.44,1204.84 1176.02,1203.64 1176.61,1203.75 1177.2,1205.02 1177.78,1202.44 1178.37,1204.93 1178.96,1202.66 1179.54,1201.69 1180.13,1200.68 1180.71,1202.23 1181.3,1203.38 1181.89,1201.02 1182.47,1200.3 1183.06,1201.68 1183.65,1200.79 1184.23,1202.29 1184.82,1201.31 1185.41,1203.95 1185.99,1202.92 1186.58,1202.03 1187.16,1204.66 1187.75,1206.07 1188.34,1206.01 1188.92,1207.06 1189.51,1206.86 1190.1,1206.72 1190.68,1206.71 1191.27,1206.75 1191.86,1206.66 1192.44,1206.46 1193.03,1207.89 1193.62,1206.57 1194.2,1206.38 1194.79,1205.05 1195.37,1204.89 1195.96,1205.01 1196.55,1205 1197.13,1203.92 1197.72,1205.33 1198.31,1204.21 1198.89,1203.31 1199.48,1203.34 1200.07,1204.77 1200.65,1204.81 1201.24,1207.43 1201.83,1208.32 1202.41,1208.23 1203,1206.75 1203.58,1206.61 1204.17,1206.29 1204.76,1205.12 1205.34,1204.04 1205.93,1202.98 1206.52,1203.45 1207.1,1203.51 1207.69,1204.7 1208.28,1204.62 1208.86,1207.18 1209.45,1207.91 1210.03,1205.29 1210.62,1202.87 1211.21,1200.72 1211.79,1201.14 1212.38,1201.53 1212.97,1201.8 1213.55,1202.04 1214.14,1203.48 1214.73,1203.82 1215.31,1202.87 1215.9,1198.35 1216.49,1197.48 1217.07,1197.72 1217.66,1200.48 1218.24,1201.58 1218.83,1202.94 1219.42,1204.34 1220,1204.28 1220.59,1204.42 1221.18,1206.76 1221.76,1207.78 1222.35,1208.69 1222.94,1209.67 1223.52,1209.67 1224.11,1209.68 1224.7,1210.73 1225.28,1211.56 1225.87,1214.85 1226.45,1214.62 1227.04,1216.46 1227.63,1218.34 1228.21,1215.15 1228.8,1211.26 1229.39,1208.59 1229.97,1206.11 1230.56,1205.95 1231.15,1208.18 1231.73,1206.84 1232.32,1202.95 1232.91,1206.35 1233.49,1204.98 1234.08,1207.38 1234.66,1206.08 1235.25,1207.29 1235.84,1207.07 1236.42,1207.23 1237.01,1208.21 1237.6,1205.27 1238.18,1207.58 1238.77,1209.69 1239.36,1210.47 1239.94,1210.05 1240.53,1208.57 1241.11,1209.73 1241.7,1209.77 1242.29,1207.34 1242.87,1205.14 1243.46,1205.1 1244.05,1205.29 1244.63,1205.16 1245.22,1208.71 1245.81,1208.72 1246.39,1208.2 1246.98,1206.98 1247.57,1204.64 1248.15,1201.08 1248.74,1201.4 1249.32,1204.17 1249.91,1204.3 1250.5,1205.46 1251.08,1206.71 1251.67,1206.65 1252.26,1203.82 1252.84,1204.09 1253.43,1205.35 1254.02,1207.57 1254.6,1204.95 1255.19,1204.87 1255.78,1203.92 1256.36,1204.04 1256.95,1205.2 1257.53,1206.24 1258.12,1206.2 1258.71,1209.8 1259.29,1210.51 1259.88,1207.88 1260.47,1208.96 1261.05,1209.95 1261.64,1208.32 1262.23,1208.24 1262.81,1210.51 1263.4,1209.23 1263.98,1210.07 1264.57,1207.46 1265.16,1204.74 1265.74,1204.73 1266.33,1205.91 1266.92,1204.55 1267.5,1203.38 1268.09,1202.17 1268.68,1203.47 1269.26,1203.56 1269.85,1202.44 1270.44,1202.46 1271.02,1202.61 1271.61,1202.67 1272.19,1202.75 1272.78,1202.69 1273.37,1206.23 1273.95,1207.51 1274.54,1208.84 1275.13,1204.8 1275.71,1203.32 1276.3,1203.6 1276.89,1205.91 1277.47,1205.94 1278.06,1208.46 1278.65,1208.41 1279.23,1209.54 1279.82,1209.21 1280.4,1207.83 1280.99,1205.42 1281.58,1204.24 1282.16,1203.22 1282.75,1204.47 1283.34,1203.39 1283.92,1202.13 1284.51,1205.97 1285.1,1206.18 1285.68,1206.15 1286.27,1204.46 1286.86,1204.67 1287.44,1208.15 1288.03,1209.1 1288.61,1210.08 1289.2,1212.3 1289.79,1209.29 1290.37,1210.25 1290.96,1211.12 1291.55,1209.49 1292.13,1206.62 1292.72,1207.74 1293.31,1205.84 1293.89,1201.92 1294.48,1200.81 1295.06,1199.64 1295.65,1198.49 1296.24,1197.62 1296.82,1199.34 1297.41,1197.12 1298,1197.62 1298.58,1196.79 1299.17,1197.32 1299.76,1197.9 1300.34,1199.35 1300.93,1197.15 1301.52,1193.93 1302.1,1194.49 1302.69,1194.12 1303.27,1193.47 1303.86,1194.22 1304.45,1193.28 1305.03,1193.87 1305.62,1194.43 1306.21,1193.67 1306.79,1195.4 1307.38,1196.03 1307.97,1195.67 1308.55,1198.68 1309.14,1200.27 1309.73,1198.31 1310.31,1198.79 1310.9,1200.62 1311.48,1202.08 1312.07,1209.06 1312.66,1207.68 1313.24,1211.1 1313.83,1210.6 1314.42,1212.8 1315,1210.22 1315.59,1208.88 1316.18,1207.65 1316.76,1203.9 1317.35,1204.04 1317.93,1206.57 1318.52,1205.52 1319.11,1204.35 1319.69,1201.86 1320.28,1200.8 1320.87,1201.01 1321.45,1201.26 1322.04,1203.85 1322.63,1204.11 1323.21,1206.47 1323.8,1206.53 1324.39,1206.39 1324.97,1208.74 1325.56,1207.38 1326.14,1207.48 1326.73,1207.16 1327.32,1208.34 1327.9,1208.19 1328.49,1208.03 1329.08,1206.63 1329.66,1205.41 1330.25,1209.12 1330.84,1210.26 1331.42,1211.42 1332.01,1206.63 1332.6,1210.49 1333.18,1211.42 1333.77,1209.02 1334.35,1206.37 1334.94,1205.32 1335.53,1204.19 1336.11,1204.51 1336.7,1204.68 1337.29,1203.44 1337.87,1204.54 1338.46,1205.84 1339.05,1205.54 1339.63,1204.08 1340.22,1205.33 1340.8,1205.24 1341.39,1206.29 1341.98,1207.69 1342.56,1207.32 1343.15,1208.15 1343.74,1210.19 1344.32,1207.37 1344.91,1203.6 1345.5,1202.17 1346.08,1203.6 1346.67,1207.36 1347.26,1205.19 1347.84,1205.54 1348.43,1206.79 1349.01,1205.47 1349.6,1205.76 1350.19,1204.56 1350.77,1203.41 1351.36,1201.23 1351.95,1201.31 1352.53,1201.32 1353.12,1203.9 1353.71,1201.64 1354.29,1200.45 1354.88,1203.09 1355.47,1204.3 1356.05,1205.45 1356.64,1204.02 1357.22,1204.03 1357.81,1204.16 1358.4,1205.39 1358.98,1205.4 1359.57,1205.25 1360.16,1205.09 1360.74,1203.67 1361.33,1202.64 1361.92,1200.29 1362.5,1199.37 1363.09,1199.5 1363.68,1200.94 1364.26,1199.39 1364.85,1199.57 1365.43,1198.59 1366.02,1197.85 1366.61,1198.43 1367.19,1198.77 1367.78,1200.39 1368.37,1200.76 1368.95,1201.09 1369.54,1199.97 1370.13,1201.64 1370.71,1201.8 1371.3,1204.33 1371.88,1204.52 1372.47,1204.51 1373.06,1203.43 1373.64,1204.67 1374.23,1203.88 1374.82,1204.04 1375.4,1205.25 1375.99,1205.34 1376.58,1202.98 1377.16,1203.4 1377.75,1205.79 1378.34,1205.89 1378.92,1206.88 1379.51,1205.71 1380.09,1204.78 1380.68,1205.91 1381.27,1203.58 1381.85,1201.46 1382.44,1201.9 1383.03,1203.08 1383.61,1203.41 1384.2,1205.77 1384.79,1204.65 1385.37,1202.01 1385.96,1204.5 1386.55,1205.56 1387.13,1204.3 1387.72,1205.39 1388.3,1202.77 1388.89,1203.84 1389.48,1201.33 1390.06,1202.73 1390.65,1203.87 1391.24,1201.46 1391.82,1202.98 1392.41,1200.61 1393,1203.07 1393.58,1203.17 1394.17,1205.66 1394.75,1203.49 1395.34,1203.3 1395.93,1200.68 1396.51,1199.51 1397.1,1200.88 1397.69,1201.02 1398.27,1201.2 1398.86,1202.56 1399.45,1205.21 1400.03,1205.13 1400.62,1205.07 1401.21,1204.96 1401.79,1208.54 1402.38,1209.7 1402.96,1208.3 1403.55,1204.48 1404.14,1203.07 1404.72,1205.55 1405.31,1204.03 1405.9,1203.81 1406.48,1206.38 1407.07,1207.79 1407.66,1208.77 1408.24,1208.51 1408.83,1209.68 1409.42,1209.26 1410,1209.21 1410.59,1207.9 1411.17,1206.33 1411.76,1205.37 1412.35,1202.71 1412.93,1204.13 1413.52,1204.24 1414.11,1206.62 1414.69,1205.32 1415.28,1205.36 1415.87,1209.05 1416.45,1209.91 1417.04,1210.96 1417.63,1210.76 1418.21,1210.49 1418.8,1209.04 1419.38,1211.26 1419.97,1207.2 1420.56,1207.13 1421.14,1206.75 1421.73,1207.98 1422.32,1206.74 1422.9,1205.4 1423.49,1207.7 1424.08,1208.87 1424.66,1208.56 1425.25,1208.5 1425.83,1208.21 1426.42,1207.93 1427.01,1211.57 1427.59,1210.02 1428.18,1209.62 1428.77,1210.59 1429.35,1210.35 1429.94,1210.2 1430.53,1211.28 1431.11,1211.05 1431.7,1209.72 1432.29,1209.28 1432.87,1210.22 1433.46,1212.24 1434.04,1210.79 1434.63,1214.17 1435.22,1215.23 1435.8,1214.5 1436.39,1215.36 1436.98,1213.52 1437.56,1211.72 1438.15,1212.45 1438.74,1210.84 1439.32,1208.11 1439.91,1206.69 1440.5,1203.96 1441.08,1204.23 1441.67,1204.29 1442.25,1205.38 1442.84,1207.69 1443.43,1208.67 1444.01,1208.22 1444.6,1210.5 1445.19,1211.31 1445.77,1210.74 1446.36,1209.3 1446.95,1212.76 1447.53,1211.04 1448.12,1208.37 1448.7,1209.26 1449.29,1210.27 1449.88,1210.29 1450.46,1209.86 1451.05,1209.51 1451.64,1209.2 1452.22,1206.68 1452.81,1206.54 1453.4,1209.94 1453.98,1208.62 1454.57,1208.28 1455.16,1205.98 1455.74,1207.11 1456.33,1205.65 1456.91,1204.35 1457.5,1204.34 1458.09,1204.59 1458.67,1202.22 1459.26,1202.21 1459.85,1202.54 1460.43,1199.19 1461.02,1200.51 1461.61,1202.01 1462.19,1203.45 1462.78,1202.24 1463.37,1201.1 1463.95,1201.19 1464.54,1201.34 1465.12,1202.98 1465.71,1200.7 1466.3,1201.03 1466.88,1201.27 1467.47,1202.87 1468.06,1202.89 1468.64,1203.02 1469.23,1202.03 1469.82,1202.06 1470.4,1203.27 1470.99,1203.4 1471.57,1203.3 1472.16,1202.38 1472.75,1202.78 1473.33,1205.38 1473.92,1204.31 1474.51,1205.69 1475.09,1205.53 1475.68,1204.58 1476.27,1204.62 1476.85,1204.63 1477.44,1205.83 1478.03,1208.24 1478.61,1205.55 1479.2,1206.59 1479.78,1203.86 1480.37,1202.65 1480.96,1204 1481.54,1202.92 1482.13,1204.13 1482.72,1205.38 1483.3,1203.06 1483.89,1203.28 1484.48,1200.85 1485.06,1201 1485.65,1201.16 1486.24,1201.46 1486.82,1202.78 1487.41,1204.16 1487.99,1203.13 1488.58,1203.2 1489.17,1203.31 1489.75,1204.74 1490.34,1206 1490.93,1205.97 1491.51,1203.46 1492.1,1202.16 1492.69,1202.4 1493.27,1203.69 1493.86,1203.72 1494.45,1206.47 1495.03,1206.22 1495.62,1206.27 1496.2,1203.95 1496.79,1202.98 1497.38,1204.47 1497.96,1205.51 1498.55,1205.49 1499.14,1206.64 1499.72,1206.52 1500.31,1205.57 1500.9,1204.06 1501.48,1204.19 1502.07,1204.2 1502.65,1203.05 1503.24,1203.06 1503.83,1204.41 1504.41,1205.5 1505,1206.43 1505.59,1208.86 1506.17,1207.33 1506.76,1208.45 1507.35,1207.2 1507.93,1208.34 1508.52,1207.15 1509.11,1207.24 1509.69,1207.09 1510.28,1206.78 1510.86,1206.75 1511.45,1207.92 1512.04,1204.07 1512.62,1204.17 1513.21,1205.55 1513.8,1207.55 1514.38,1204.92 1514.97,1205.01 1515.56,1200.34 1516.14,1200.73 1516.73,1199.82 1517.32,1198.61 1517.9,1194.19 1518.49,1195.78 1519.07,1196.33 1519.66,1197.86 1520.25,1198.04 1520.83,1199.51 1521.42,1199.93 1522.01,1199.23 1522.59,1197.16 1523.18,1201.42 1523.77,1200.73 1524.35,1203.52 1524.94,1204.81 1525.52,1203.85 1526.11,1206.49 1526.7,1207.58 1527.28,1203.94 1527.87,1202.75 1528.46,1205.22 1529.04,1208.77 1529.63,1205.91 1530.22,1204.53 1530.8,1202.2 1531.39,1200.91 1531.98,1200.15 1532.56,1200.17 1533.15,1203.88 1533.73,1202.51 1534.32,1203.26 1534.91,1204.82 1535.49,1206.18 1536.08,1206.11 1536.67,1207.13 1537.25,1206.95 1537.84,1205.51 1538.43,1205.6 1539.01,1205.64 1539.6,1208.19 1540.19,1207.12 1540.77,1208.27 1541.36,1205.75 1541.94,1209.34 1542.53,1208.92 1543.12,1208.69 1543.7,1210.04 1544.29,1209.52 1544.88,1211.51 1545.46,1211.01 1546.05,1212.93 1546.64,1213.96 1547.22,1213.46 1547.81,1210.49 1548.4,1210.15 1548.98,1210.86 1549.57,1210.46 1550.15,1209.95 1550.74,1208.37 1551.33,1208.09 1551.91,1210.49 1552.5,1210.18 1553.09,1208.64 1553.67,1208.53 1554.26,1207.98 1554.85,1210.46 1555.43,1207.93 1556.02,1209.22 1556.6,1209.05 1557.19,1205.08 1557.78,1203.88 1558.36,1203.81 1558.95,1204.86 1559.54,1202.34 1560.12,1203.76 1560.71,1202.86 1561.3,1202.93 1561.88,1201.67 1562.47,1201.88 1563.06,1200.71 1563.64,1202.15 1564.23,1203.4 1564.81,1200.96 1565.4,1202.3 1565.99,1202.63 1566.57,1200.37 1567.16,1199.41 1567.75,1203.45 1568.33,1203.59 1568.92,1203.59 1569.51,1203.7 1570.09,1203.75 1570.68,1206.09 1571.27,1206.08 1571.85,1208.31 1572.44,1205.74 1573.02,1209.29 1573.61,1206.83 1574.2,1205.8 1574.78,1204.38 1575.37,1205.7 1575.96,1204.46 1576.54,1203.25 1577.13,1204.72 1577.72,1201.17 1578.3,1202.53 1578.89,1201.36 1579.47,1200.36 1580.06,1201.74 1580.65,1200.57 1581.23,1199.55 1581.82,1201.99 1582.41,1204.41 1582.99,1205.79 1583.58,1204.45 1584.17,1205.77 1584.75,1207 1585.34,1206.92 1585.93,1206.88 1586.51,1207.97 1587.1,1207.7 1587.68,1208.98 1588.27,1207.47 1588.86,1208.38 1589.44,1206.91 1590.03,1201.91 1590.62,1201.02 1591.2,1198.84 1591.79,1198.99 1592.38,1199.35 1592.96,1199.61 1593.55,1200.09 1594.14,1199.4 1594.72,1199.6 1595.31,1200.02 1595.89,1198.01 1596.48,1197.1 1597.07,1196.39 1597.65,1195.87 1598.24,1195.19 1598.83,1195.95 1599.41,1197.65 1600,1197.07 1600.59,1197.49 1601.17,1198.22 1601.76,1198.84 1602.34,1203.92 1602.93,1205.28 1603.52,1203.94 1604.1,1203.96 1604.69,1201.75 1605.28,1201.84 1605.86,1203.61 1606.45,1203.77 1607.04,1203.81 1607.62,1204.01 1608.21,1203.94 1608.8,1205.26 1609.38,1207.75 1609.97,1206.46 1610.55,1206.47 1611.14,1209.02 1611.73,1208.91 1612.31,1207.62 1612.9,1209.81 1613.49,1208.37 1614.07,1208.2 1614.66,1209.17 1615.25,1210.25 1615.83,1208.79 1616.42,1206.2 1617.01,1205.09 1617.59,1203.8 1618.18,1203.72 1618.76,1203.74 1619.35,1203.72 1619.94,1205.17 1620.52,1206.44 1621.11,1206.5 1621.7,1204.32 1622.28,1205.54 1622.87,1204.31 1623.46,1204.35 1624.04,1205.49 1624.63,1205.55 1625.22,1205.53 1625.8,1201.98 1626.39,1203.3 1626.97,1202.26 1627.56,1203.86 1628.15,1206.07 1628.73,1204.78 1629.32,1205.98 1629.91,1207.26 1630.49,1205.67 1631.08,1207.92 1631.67,1207.89 1632.25,1205.31 1632.84,1206.71 1633.42,1210.26 1634.01,1211.1 1634.6,1209.71 1635.18,1208.49 1635.77,1208.25 1636.36,1209.08 1636.94,1207.57 1637.53,1207.34 1638.12,1207.34 1638.7,1205.98 1639.29,1207.02 1639.88,1208.34 1640.46,1206.95 1641.05,1206.97 1641.63,1207.95 1642.22,1205.53 1642.81,1206.51 1643.39,1201.55 1643.98,1202.73 1644.57,1201.75 1645.15,1203.28 1645.74,1204.42 1646.33,1201.07 1646.91,1201.35 1647.5,1203.8 1648.09,1202.64 1648.67,1201.8 1649.26,1202.11 1649.84,1198.54 1650.43,1200.29 1651.02,1202.87 1651.6,1205.17 1652.19,1202.79 1652.78,1201.56 1653.36,1201.68 1653.95,1200.55 1654.54,1202.99 1655.12,1205.61 1655.71,1205.55 1656.29,1205.55 1656.88,1204.21 1657.47,1205.34 1658.05,1207.38 1658.64,1207.16 1659.23,1207 1659.81,1206.86 1660.4,1203.28 1660.99,1207.06 1661.57,1207.02 1662.16,1206.93 1662.75,1206.86 1663.33,1205.79 1663.92,1205.5 1664.5,1207.53 1665.09,1207.35 1665.68,1207.13 1666.26,1208.16 1666.85,1211.85 1667.44,1211.53 1668.02,1208.95 1668.61,1208.84 1669.2,1206.06 1669.78,1209.44 1670.37,1204.28 1670.96,1203.02 1671.54,1202.16 1672.13,1203.67 1672.71,1203.7 1673.3,1206.1 1673.89,1207.09 1674.47,1208.11 1675.06,1205.42 1675.65,1204.46 1676.23,1204.59 1676.82,1204.53 1677.41,1207.06 1677.99,1206.99 1678.58,1206.92 1679.17,1206.76 1679.75,1205.46 1680.34,1206.53 1680.92,1206.58 1681.51,1205.23 1682.1,1205.23 1682.68,1203.97 1683.27,1204.02 1683.86,1204.05 1684.44,1206.73 1685.03,1207.73 1685.62,1209.99 1686.2,1209.45 1686.79,1211.59 1687.37,1210.06 1687.96,1212.26 1688.55,1210.47 1689.13,1207.76 1689.72,1210.21 1690.31,1210.21 1690.89,1208.76 1691.48,1207.36 1692.07,1207.32 1692.65,1207.23 1693.24,1205.91 1693.83,1202.12 1694.41,1201.96 1695,1201.28 1695.58,1206.19 1696.17,1208.38 1696.76,1207.12 1697.34,1208.38 1697.93,1208.41 1698.52,1206.92 1699.1,1205.69 1699.69,1204.48 1700.28,1205.67 1700.86,1204.55 1701.45,1205.73 1702.04,1207.82 1702.62,1204.2 1703.21,1203.07 1703.79,1201.87 1704.38,1202.3 1704.97,1203.75 1705.55,1203.82 1706.14,1206.38 1706.73,1204.01 1707.31,1205.48 1707.9,1203.99 1708.49,1204.15 1709.07,1205.57 1709.66,1205.6 1710.24,1206.6 1710.83,1206.54 1711.42,1205.18 1712,1205.22 1712.59,1204.3 1713.18,1203.2 1713.76,1204.51 1714.35,1202.89 1714.94,1207.77 1715.52,1208.89 1716.11,1208.6 1716.7,1207.46 1717.28,1206 1717.87,1206.28 1718.45,1204.86 1719.04,1207.07 1719.63,1206.99 1720.21,1205.6 1720.8,1205.45 1721.39,1206.67 1721.97,1207.71 1722.56,1204.19 1723.15,1204.28 1723.73,1201.98 1724.32,1202.43 1724.91,1201.39 1725.49,1203.84 1726.08,1206.32 1726.66,1206.3 1727.25,1204.85 1727.84,1202.16 1728.42,1203.74 1729.01,1206.29 1729.6,1208.74 1730.18,1208.66 1730.77,1208.29 1731.36,1204.46 1731.94,1204.79 1732.53,1204.77 1733.11,1206.13 1733.7,1205 1734.29,1206.17 1734.87,1206.03 1735.46,1204.58 1736.05,1206.03 1736.63,1207.16 1737.22,1209.12 1737.81,1208.73 1738.39,1202.37 1738.98,1203.82 1739.57,1202.55 1740.15,1205.1 1740.74,1206.13 1741.32,1208.47 1741.91,1206.02 1742.5,1207.04 1743.08,1209.27 1743.67,1210.3 1744.26,1208.73 1744.84,1208.49 1745.43,1208.22 1746.02,1208.26 1746.6,1209.38 1747.19,1209.2 1747.78,1209.07 1748.36,1211.34 1748.95,1210.85 1749.53,1211.71 1750.12,1211.42 1750.71,1211.02 1751.29,1213.14 1751.88,1215.04 1752.47,1212.09 1753.05,1212.66 1753.64,1213.33 1754.23,1212.02 1754.81,1212.85 1755.4,1214.9 1755.99,1215.46 1756.57,1214.95 1757.16,1214.47 1757.74,1214.9 1758.33,1213.25 1758.92,1212.65 1759.5,1212.43 1760.09,1214.44 1760.68,1215.21 1761.26,1214.87 1761.85,1212.98 1762.44,1215 1763.02,1214.27 1763.61,1212.43 1764.19,1210.68 1764.78,1211.4 1765.37,1209.6 1765.95,1209.45 1766.54,1206.61 1767.13,1206.53 1767.71,1205.1 1768.3,1205.01 1768.89,1204.74 1769.47,1204.54 1770.06,1203.33 1770.65,1205.89 1771.23,1204.86 1771.82,1202.57 1772.4,1201.66 1772.99,1201.9 1773.58,1203.24 1774.16,1201.99 1774.75,1203.1 1775.34,1200.89 1775.92,1203.28 1776.51,1202.04 1777.1,1198.33 1777.68,1197.49 1778.27,1196.74 1778.86,1195.89 1779.44,1194.01 1780.03,1197.91 1780.61,1199.18 1781.2,1198.4 1781.79,1198.89 1782.37,1201.73 1782.96,1205.4 1783.55,1205.46 1784.13,1206.55 1784.72,1206.49 1785.31,1207.43 1785.89,1204.77 1786.48,1206.05 1787.06,1204.8 1787.65,1203.74 1788.24,1203.8 1788.82,1202.68 1789.41,1202.83 1790,1199.32 1790.58,1199.79 1791.17,1201.16 1791.76,1202.49 1792.34,1202.41 1792.93,1203.74 1793.52,1203.91 1794.1,1202.69 1794.69,1201.52 1795.27,1202.95 1795.86,1203.2 1796.45,1203.28 1797.03,1200.99 1797.62,1200.14 1798.21,1200.37 1798.79,1198.46 1799.38,1199.98 1799.97,1200.36 1800.55,1200.63 1801.14,1203.48 1801.73,1204.76 1802.31,1201.1 1802.9,1202.39 1803.48,1203.89 1804.07,1201.68 1804.66,1204.42 1805.24,1202.34 1805.83,1200.07 1806.42,1200.52 1807,1200.82 1807.59,1199.7 1808.18,1201.43 1808.76,1201.7 1809.35,1200.86 1809.94,1201.02 1810.52,1201.28 1811.11,1202.7 1811.69,1201.31 1812.28,1201.7 1812.87,1200.66 1813.45,1199.82 1814.04,1201.36 1814.63,1203.06 1815.21,1201.86 1815.8,1202.12 1816.39,1200.99 1816.97,1201.34 1817.56,1202.59 1818.14,1201.71 1818.73,1200.82 1819.32,1198.8 1819.9,1199.1 1820.49,1199.34 1821.08,1199.66 1821.66,1198.72 1822.25,1200.14 1822.84,1201.35 1823.42,1201.29 1824.01,1204.05 1824.6,1205.27 1825.18,1205.26 1825.77,1207.95 1826.35,1206.71 1826.94,1208.04 1827.53,1206.76 1828.11,1206.78 1828.7,1206.6 1829.29,1204.1 1829.87,1204.53 1830.46,1207.03 1831.05,1207.93 1831.63,1204 1832.22,1204.2 1832.81,1205.35 1833.39,1207.74 1833.98,1207.61 1834.56,1207.19 1835.15,1211.64 1835.74,1211.21 1836.32,1212.14 1836.91,1211.77 1837.5,1207.98 1838.08,1204.38 1838.67,1204.2 1839.26,1205.36 1839.84,1205.34 1840.43,1205.31 1841.01,1207.82 1841.6,1205.5 1842.19,1205.3 1842.77,1205.26 1843.36,1207.54 1843.95,1207.35 1844.53,1206.07 1845.12,1203.58 1845.71,1204.95 1846.29,1202.73 1846.88,1205.04 1847.47,1204.71 1848.05,1205.82 1848.64,1204.45 1849.22,1204.27 1849.81,1202.92 1850.4,1201.87 1850.98,1202.02 1851.57,1201.97 1852.16,1204.8 1852.74,1203.71 1853.33,1202.69 1853.92,1200.5 1854.5,1200.85 1855.09,1203.46 1855.68,1203.7 1856.26,1205.98 1856.85,1206.09 1857.43,1203.43 1858.02,1207.09 1858.61,1208.42 1859.19,1210.54 1859.78,1211.32 1860.37,1210.91 1860.95,1210.52 1861.54,1210.31 1862.13,1212.37 1862.71,1208.31 1863.3,1208.37 1863.88,1206.95 1864.47,1209.13 1865.06,1209.01 1865.64,1209.92 1866.23,1207.06 1866.82,1207.09 1867.4,1205.66 1867.99,1206.83 1868.58,1206.82 1869.16,1206.61 1869.75,1207.53 1870.34,1208.42 1870.92,1209.49 1871.51,1205.69 1872.09,1204.48 1872.68,1205.57 1873.27,1205.43 1873.85,1205.38 1874.44,1202.94 1875.03,1200.81 1875.61,1199.95 1876.2,1197.84 1876.79,1195.63 1877.37,1196.2 1877.96,1200.23 1878.55,1200.28 1879.13,1203 1879.72,1198.31 1880.3,1200.01 1880.89,1198.09 1881.48,1198.63 1882.06,1200.06 1882.65,1201.58 1883.24,1200.57 1883.82,1200.67 1884.41,1200.69 1885,1199.63 1885.58,1199.92 1886.17,1202.47 1886.76,1202.76 1887.34,1202.83 1887.93,1203.95 1888.51,1205.17 1889.1,1205.33 1889.69,1205.29 1890.27,1206.41 1890.86,1204.97 1891.45,1203.77 1892.03,1203.74 1892.62,1203.56 1893.21,1202.53 1893.79,1200.26 1894.38,1200.54 1894.96,1202.11 1895.55,1203.66 1896.14,1200.21 1896.72,1200.35 1897.31,1199.33 1897.9,1200.74 1898.48,1203.55 1899.07,1202.68 1899.66,1200.63 1900.24,1200.99 1900.83,1203.74 1901.42,1203.89 1902,1202.54 1902.59,1202.64 1903.17,1201.64 1903.76,1202.09 1904.35,1202.29 1904.93,1202.55 1905.52,1203.82 1906.11,1204.05 1906.69,1206.28 1907.28,1207.41 1907.87,1208.41 1908.45,1208.29 1909.04,1209.34 1909.63,1208.32 1910.21,1209.41 1910.8,1209.37 1911.38,1209.04 1911.97,1211.16 1912.56,1212.08 1913.14,1210.32 1913.73,1207.51 1914.32,1208.4 1914.9,1208.07 1915.49,1207.85 1916.08,1210.1 1916.66,1206.38 1917.25,1207.22 1917.83,1205.91 1918.42,1204.53 1919.01,1206.86 1919.59,1209.38 1920.18,1207.93 1920.77,1209.04 1921.35,1209.86 1921.94,1209.82 1922.53,1210.72 1923.11,1213.23 1923.7,1212.97 1924.29,1211.3 1924.87,1209.81 1925.46,1207.28 1926.04,1209.69 1926.63,1209.5 1927.22,1210.34 1927.8,1211.39 1928.39,1208.63 1928.98,1208.38 1929.56,1208.32 1930.15,1208.15 1930.74,1210.59 1931.32,1212.44 1931.91,1213.28 1932.5,1211.93 1933.08,1210.2 1933.67,1210.11 1934.25,1208.57 1934.84,1207.34 1935.43,1208.59 1936.01,1208.45 1936.6,1208.37 1937.19,1208.1 1937.77,1207.95 1938.36,1205.35 1938.95,1204.89 1939.53,1207.3 1940.12,1206.95 1940.71,1209.29 1941.29,1209.14 1941.88,1210.41 1942.46,1208.98 1943.05,1208.87 1943.64,1211 1944.22,1211.92 1944.81,1210.53 1945.4,1209.11 1945.98,1208.93 1946.57,1206.33 1947.16,1205.06 1947.74,1206.32 1948.33,1206.05 1948.91,1207.11 1949.5,1208.18 1950.09,1210.03 1950.67,1213.41 1951.26,1210.49 1951.85,1207.68 1952.43,1207.4 1953.02,1203.79 1953.61,1201.36 1954.19,1201.66 1954.78,1198.13 1955.37,1199.88 1955.95,1196.44 1956.54,1195.35 1957.12,1196.01 1957.71,1200.09 1958.3,1199.3 1958.88,1194.84 1959.47,1196.62 1960.06,1197.08 1960.64,1198.51 1961.23,1200.01 1961.82,1200.42 1962.4,1202.12 1962.99,1201.14 1963.58,1198.84 1964.16,1199.12 1964.75,1201.95 1965.33,1201.98 1965.92,1203.41 1966.51,1205.63 1967.09,1204.53 1967.68,1205.76 1968.27,1206.85 1968.85,1207.96 1969.44,1207.89 1970.03,1206.73 1970.61,1205.55 1971.2,1206.75 1971.78,1203.23 1972.37,1202.33 1972.96,1202.45 1973.54,1202.38 1974.13,1201.44 1974.72,1201.68 1975.3,1201.97 1975.89,1203.41 1976.48,1201.96 1977.06,1202.27 1977.65,1205.08 1978.24,1204.91 1978.82,1205.09 1979.41,1205.14 1979.99,1206.33 1980.58,1207.44 1981.17,1208.46 1981.75,1209.42 1982.34,1209.29 1982.93,1208.95 1983.51,1208.66 1984.1,1207.19 1984.69,1208.27 1985.27,1207.06 1985.86,1207.04 1986.45,1206.97 1987.03,1210.51 1987.62,1209.16 1988.2,1208.81 1988.79,1208.77 1989.38,1210.88 1989.96,1209.43 1990.55,1209.28 1991.14,1211.31 1991.72,1208.56 1992.31,1208.05 1992.9,1206.63 1993.48,1206.69 1994.07,1205.4 1994.65,1205.27 1995.24,1209.07 1995.83,1210.1 1996.41,1209.87 1997,1208.59 1997.59,1208.11 1998.17,1207.85 1998.76,1206.3 1999.35,1206.39 1999.93,1207.36 2000.52,1205.13 2001.11,1204 2001.69,1204.06 2002.28,1202.92 2002.86,1201.86 2003.45,1201.92 2004.04,1201.06 2004.62,1201.42 2005.21,1202.73 2005.8,1201.47 2006.38,1199.37 2006.97,1199.68 2007.56,1198.51 2008.14,1197.72 2008.73,1196.81 2009.32,1198.48 2009.9,1196.39 2010.49,1199.15 2011.07,1198.27 2011.66,1197.49 2012.25,1199.1 2012.83,1199.26 2013.42,1197.14 2014.01,1198.78 2014.59,1199.43 2015.18,1199.71 2015.77,1199.7 2016.35,1199.99 2016.94,1199.14 2017.53,1204.32 2018.11,1203.04 2018.7,1201.88 2019.28,1203.21 2019.87,1201 2020.46,1197.56 2021.04,1198.3 2021.63,1193.85 2022.22,1193.47 2022.8,1195.23 2023.39,1194.48 2023.98,1194.85 2024.56,1191.91 2025.15,1197.37 2025.73,1198.98 2026.32,1200.54 2026.91,1201.17 2027.49,1201.42 2028.08,1203.01 2028.67,1202 2029.25,1199.8 2029.84,1200.31 2030.43,1200.28 2031.01,1200.56 2031.6,1202.02 2032.19,1202.24 2032.77,1201.12 2033.36,1201.41 2033.94,1203.02 2034.53,1202.19 2035.12,1201.28 2035.7,1205.04 2036.29,1205.15 2036.88,1206.18 2037.46,1204.99 2038.05,1208.47 2038.64,1208.16 2039.22,1209.14 2039.81,1211.26 2040.4,1209.57 2040.98,1210.74 2041.57,1211.8 2042.15,1207.98 2042.74,1211.38 2043.33,1210.1 2043.91,1207.51 2044.5,1207.66 2045.09,1206.29 2045.67,1203.67 2046.26,1203.89 2046.85,1201.53 2047.43,1201.74 2048.02,1198.27 2048.6,1197.67 2049.19,1198.24 2049.78,1199.3 2050.36,1200.94 2050.95,1201.5 2051.54,1202.6 2052.12,1201.52 2052.71,1201.76 2053.3,1202.13 2053.88,1202.21 2054.47,1203.42 2055.06,1204.64 2055.64,1205.91 2056.23,1205.79 2056.81,1204.48 2057.4,1204.57 2057.99,1207.03 2058.57,1208.23 2059.16,1208.18 2059.75,1209.13 2060.33,1208.91 2060.92,1208.79 2061.51,1210.89 2062.09,1210.61 2062.68,1209.32 2063.27,1207.8 2063.85,1208.94 2064.44,1209.85 2065.02,1209.72 2065.61,1211.72 2066.2,1209.04 2066.78,1209 2067.37,1210.99 2067.96,1210.83 2068.54,1209.49 2069.13,1206.65 2069.72,1203.88 2070.3,1204.98 2070.89,1203.67 2071.48,1203.83 2072.06,1205.12 2072.65,1205.06 2073.23,1205.19 2073.82,1203.82 2074.41,1204.08 2074.99,1203.09 2075.58,1204.47 2076.17,1203.12 2076.75,1204.28 2077.34,1204.26 2077.93,1204.43 2078.51,1204.5 2079.1,1203.29 2079.68,1205.84 2080.27,1208.06 2080.86,1208.03 2081.44,1205.51 2082.03,1204.22 2082.62,1204.04 2083.2,1204.19 2083.79,1205.21 2084.38,1205.2 2084.96,1206.33 2085.55,1201.44 2086.14,1202.69 2086.72,1201.55 2087.31,1202.78 2087.89,1204.07 2088.48,1204.15 2089.07,1207.48 2089.65,1207.17 2090.24,1207.26 2090.83,1205.76 2091.41,1207.06 2092,1206.9 2092.59,1206.64 2093.17,1205.28 2093.76,1206.52 2094.35,1208.57 2094.93,1208.26 2095.52,1211.66 2096.1,1210.01 2096.69,1209.74 2097.28,1205.88 2097.86,1207.1 2098.45,1205.85 2099.04,1208.39 2099.62,1209.18 2100.21,1207.94 2100.8,1208.94 2101.38,1208.8 2101.97,1207.47 2102.55,1205.89 2103.14,1205.98 2103.73,1205.95 2104.31,1204.68 2104.9,1205.92 2105.49,1207.02 2106.07,1208.02 2106.66,1210.22 2107.25,1208.69 2107.83,1208.53 2108.42,1207.18 2109.01,1206.97 2109.59,1205.68 2110.18,1204.21 2110.76,1201.7 2111.35,1204.5 2111.94,1204.76 2112.52,1203.46 2113.11,1202.06 2113.7,1203.27 2114.28,1208.36 2114.87,1206.82 2115.46,1206.68 2116.04,1206.23 2116.63,1206.04 2117.22,1206.03 2117.8,1204.81 2118.39,1206.36 2118.97,1205.05 2119.56,1203.77 2120.15,1202.57 2120.73,1205 2121.32,1206.21 2121.91,1206.09 2122.49,1206.02 2123.08,1202.18 2123.67,1201.18 2124.25,1203.66 2124.84,1203.69 2125.42,1203.88 2126.01,1206.21 2126.6,1209.66 2127.18,1209.29 2127.77,1210.25 2128.36,1208.98 2128.94,1207.52 2129.53,1206.29 2130.12,1205.99 2130.7,1204.51 2131.29,1205.64 2131.88,1205.86 2132.46,1202.19 2133.05,1203.45 2133.63,1203.68 2134.22,1202.54 2134.81,1204 2135.39,1203.3 2135.98,1203.35 2136.57,1200.89 2137.15,1198.62 2137.74,1201.48 2138.33,1201.68 2138.91,1202.94 2139.5,1204.55 2140.09,1206.89 2140.67,1203.51 2141.26,1202.37 2141.84,1199.92 2142.43,1199.01 2143.02,1199.4 2143.6,1199.57 2144.19,1199.74 2144.78,1200.29 2145.36,1198.12 2145.95,1198.4 2146.54,1198.63 2147.12,1198.93 2147.71,1198.13 2148.3,1198.72 2148.88,1198.98 2149.47,1200.42 2150.05,1199.35 2150.64,1199.67 2151.23,1200.16 2151.81,1200.33 2152.4,1199.3 2152.99,1199.63 2153.57,1202.25 2154.16,1202.29 2154.75,1202.54 2155.33,1203.94 2155.92,1204.19 2156.5,1205.4 2157.09,1207.61 2157.68,1207.54 2158.26,1209.72 \"/>\n<path clip-path=\"url(#clip172)\" d=\"M986.025 1205.32 L986.612 1205.32 L987.198 1205.32 L987.785 1205.32 L988.371 1205.32 L988.957 1205.32 L989.544 1205.32 L990.13 1205.32 L990.717 1205.32 L991.303 1205.32 L991.889 1205.32 L992.476 1205.32 L993.062 1205.32 L993.649 1205.32 L994.235 1205.32 L994.822 1205.32 L995.408 1205.32 L995.994 1205.32 L996.581 1205.32 L997.167 1205.32 L997.754 1205.32 L998.34 1205.32 L998.926 1205.32 L999.513 1205.32 L1000.1 1205.32 L1000.69 1205.32 L1001.27 1205.32 L1001.86 1205.32 L1002.44 1205.32 L1003.03 1205.32 L1003.62 1205.32 L1004.2 1205.32 L1004.79 1205.32 L1005.38 1205.32 L1005.96 1205.32 L1006.55 1205.32 L1007.14 1205.32 L1007.72 1205.32 L1008.31 1205.32 L1008.9 1205.32 L1009.48 1205.32 L1010.07 1205.32 L1010.65 1205.32 L1011.24 1205.32 L1011.83 1205.32 L1012.41 1205.32 L1013 1205.32 L1013.59 1205.32 L1014.17 1205.32 L1014.76 1205.32 L1015.35 1205.32 L1015.93 1205.32 L1016.52 1205.32 L1017.11 1205.32 L1017.69 1205.32 L1018.28 1205.32 L1018.86 1205.32 L1019.45 1205.32 L1020.04 1205.32 L1020.62 1205.32 L1021.21 1205.32 L1021.8 1205.32 L1022.38 1205.32 L1022.97 1205.32 L1023.56 1205.32 L1024.14 1205.32 L1024.73 1205.32 L1025.32 1205.32 L1025.9 1205.32 L1026.49 1205.32 L1027.07 1205.32 L1027.66 1205.32 L1028.25 1205.32 L1028.83 1205.32 L1029.42 1205.32 L1030.01 1205.32 L1030.59 1205.32 L1031.18 1205.32 L1031.77 1205.32 L1032.35 1205.32 L1032.94 1205.32 L1033.52 1205.32 L1034.11 1205.32 L1034.7 1205.32 L1035.28 1205.32 L1035.87 1205.32 L1036.46 1205.32 L1037.04 1205.32 L1037.63 1205.32 L1038.22 1205.32 L1038.8 1205.32 L1039.39 1205.32 L1039.98 1205.32 L1040.56 1205.32 L1041.15 1205.32 L1041.73 1205.32 L1042.32 1205.32 L1042.91 1205.32 L1043.49 1205.32 L1044.08 1205.32 L1044.67 1205.32 L1045.25 1205.32 L1045.84 1205.32 L1046.43 1205.32 L1047.01 1205.32 L1047.6 1205.32 L1048.19 1205.32 L1048.77 1205.32 L1049.36 1205.32 L1049.94 1205.32 L1050.53 1205.32 L1051.12 1205.32 L1051.7 1205.32 L1052.29 1205.32 L1052.88 1205.32 L1053.46 1205.32 L1054.05 1205.32 L1054.64 1205.32 L1055.22 1205.32 L1055.81 1205.32 L1056.39 1205.32 L1056.98 1205.32 L1057.57 1205.32 L1058.15 1205.32 L1058.74 1205.32 L1059.33 1205.32 L1059.91 1205.32 L1060.5 1205.32 L1061.09 1205.32 L1061.67 1205.32 L1062.26 1205.32 L1062.85 1205.32 L1063.43 1205.32 L1064.02 1205.32 L1064.6 1205.32 L1065.19 1205.32 L1065.78 1205.32 L1066.36 1205.32 L1066.95 1205.32 L1067.54 1205.32 L1068.12 1205.32 L1068.71 1205.32 L1069.3 1205.32 L1069.88 1205.32 L1070.47 1205.32 L1071.06 1205.32 L1071.64 1205.32 L1072.23 1205.32 L1072.81 1205.32 L1073.4 1205.32 L1073.99 1205.32 L1074.57 1205.32 L1075.16 1205.32 L1075.75 1205.32 L1076.33 1205.32 L1076.92 1205.32 L1077.51 1205.32 L1078.09 1205.32 L1078.68 1205.32 L1079.26 1205.32 L1079.85 1205.32 L1080.44 1205.32 L1081.02 1205.32 L1081.61 1205.32 L1082.2 1205.32 L1082.78 1205.32 L1083.37 1205.32 L1083.96 1205.32 L1084.54 1205.32 L1085.13 1205.32 L1085.72 1205.32 L1086.3 1205.32 L1086.89 1205.32 L1087.47 1205.32 L1088.06 1205.32 L1088.65 1205.32 L1089.23 1205.32 L1089.82 1205.32 L1090.41 1205.32 L1090.99 1205.32 L1091.58 1205.32 L1092.17 1205.32 L1092.75 1205.32 L1093.34 1205.32 L1093.93 1205.32 L1094.51 1205.32 L1095.1 1205.32 L1095.68 1205.32 L1096.27 1205.32 L1096.86 1205.32 L1097.44 1205.32 L1098.03 1205.32 L1098.62 1205.32 L1099.2 1205.32 L1099.79 1205.32 L1100.38 1205.32 L1100.96 1205.32 L1101.55 1205.32 L1102.14 1205.32 L1102.72 1205.32 L1103.31 1205.32 L1103.89 1205.32 L1104.48 1205.32 L1105.07 1205.32 L1105.65 1205.32 L1106.24 1205.32 L1106.83 1205.32 L1107.41 1205.32 L1108 1205.32 L1108.59 1205.32 L1109.17 1205.32 L1109.76 1205.32 L1110.34 1205.32 L1110.93 1205.32 L1111.52 1205.32 L1112.1 1205.32 L1112.69 1205.32 L1113.28 1205.32 L1113.86 1205.32 L1114.45 1205.32 L1115.04 1205.32 L1115.62 1205.32 L1116.21 1205.32 L1116.8 1205.32 L1117.38 1205.32 L1117.97 1205.32 L1118.55 1205.32 L1119.14 1205.32 L1119.73 1205.32 L1120.31 1205.32 L1120.9 1205.32 L1121.49 1205.32 L1122.07 1205.32 L1122.66 1205.32 L1123.25 1205.32 L1123.83 1205.32 L1124.42 1205.32 L1125.01 1205.32 L1125.59 1205.32 L1126.18 1205.32 L1126.76 1205.32 L1127.35 1205.32 L1127.94 1205.32 L1128.52 1205.32 L1129.11 1205.32 L1129.7 1205.32 L1130.28 1205.32 L1130.87 1205.32 L1131.46 1205.32 L1132.04 1205.32 L1132.63 1205.32 L1133.21 1205.32 L1133.8 1205.32 L1134.39 1205.32 L1134.97 1205.32 L1135.56 1205.32 L1136.15 1205.32 L1136.73 1205.32 L1137.32 1205.32 L1137.91 1205.32 L1138.49 1205.32 L1139.08 1205.32 L1139.67 1205.32 L1140.25 1205.32 L1140.84 1205.32 L1141.42 1205.32 L1142.01 1205.32 L1142.6 1205.32 L1143.18 1205.32 L1143.77 1205.32 L1144.36 1205.32 L1144.94 1205.32 L1145.53 1205.32 L1146.12 1205.32 L1146.7 1205.32 L1147.29 1205.32 L1147.88 1205.32 L1148.46 1205.32 L1149.05 1205.32 L1149.63 1205.32 L1150.22 1205.32 L1150.81 1205.32 L1151.39 1205.32 L1151.98 1205.32 L1152.57 1205.32 L1153.15 1205.32 L1153.74 1205.32 L1154.33 1205.32 L1154.91 1205.32 L1155.5 1205.32 L1156.09 1205.32 L1156.67 1205.32 L1157.26 1205.32 L1157.84 1205.32 L1158.43 1205.32 L1159.02 1205.32 L1159.6 1205.32 L1160.19 1205.32 L1160.78 1205.32 L1161.36 1205.32 L1161.95 1205.32 L1162.54 1205.32 L1163.12 1205.32 L1163.71 1205.32 L1164.29 1205.32 L1164.88 1205.32 L1165.47 1205.32 L1166.05 1205.32 L1166.64 1205.32 L1167.23 1205.32 L1167.81 1205.32 L1168.4 1205.32 L1168.99 1205.32 L1169.57 1205.32 L1170.16 1205.32 L1170.75 1205.32 L1171.33 1205.32 L1171.92 1205.32 L1172.5 1205.32 L1173.09 1205.32 L1173.68 1205.32 L1174.26 1205.32 L1174.85 1205.32 L1175.44 1205.32 L1176.02 1205.32 L1176.61 1205.32 L1177.2 1205.32 L1177.78 1205.32 L1178.37 1205.32 L1178.96 1205.32 L1179.54 1205.32 L1180.13 1205.32 L1180.71 1205.32 L1181.3 1205.32 L1181.89 1205.32 L1182.47 1205.32 L1183.06 1205.32 L1183.65 1205.32 L1184.23 1205.32 L1184.82 1205.32 L1185.41 1205.32 L1185.99 1205.32 L1186.58 1205.32 L1187.16 1205.32 L1187.75 1205.32 L1188.34 1205.32 L1188.92 1205.32 L1189.51 1205.32 L1190.1 1205.32 L1190.68 1205.32 L1191.27 1205.32 L1191.86 1205.32 L1192.44 1205.32 L1193.03 1205.32 L1193.62 1205.32 L1194.2 1205.32 L1194.79 1205.32 L1195.37 1205.32 L1195.96 1205.32 L1196.55 1205.32 L1197.13 1205.32 L1197.72 1205.32 L1198.31 1205.32 L1198.89 1205.32 L1199.48 1205.32 L1200.07 1205.32 L1200.65 1205.32 L1201.24 1205.32 L1201.83 1205.32 L1202.41 1205.32 L1203 1205.32 L1203.58 1205.32 L1204.17 1205.32 L1204.76 1205.32 L1205.34 1205.32 L1205.93 1205.32 L1206.52 1205.32 L1207.1 1205.32 L1207.69 1205.32 L1208.28 1205.32 L1208.86 1205.32 L1209.45 1205.32 L1210.03 1205.32 L1210.62 1205.32 L1211.21 1205.32 L1211.79 1205.32 L1212.38 1205.32 L1212.97 1205.32 L1213.55 1205.32 L1214.14 1205.32 L1214.73 1205.32 L1215.31 1205.32 L1215.9 1205.32 L1216.49 1205.32 L1217.07 1205.32 L1217.66 1205.32 L1218.24 1205.32 L1218.83 1205.32 L1219.42 1205.32 L1220 1205.32 L1220.59 1205.32 L1221.18 1205.32 L1221.76 1205.32 L1222.35 1205.32 L1222.94 1205.32 L1223.52 1205.32 L1224.11 1205.32 L1224.7 1205.32 L1225.28 1205.32 L1225.87 1205.32 L1226.45 1205.32 L1227.04 1205.32 L1227.63 1205.32 L1228.21 1205.32 L1228.8 1205.32 L1229.39 1205.32 L1229.97 1205.32 L1230.56 1205.32 L1231.15 1205.32 L1231.73 1205.32 L1232.32 1205.32 L1232.91 1205.32 L1233.49 1205.32 L1234.08 1205.32 L1234.66 1205.32 L1235.25 1205.32 L1235.84 1205.32 L1236.42 1205.32 L1237.01 1205.32 L1237.6 1205.32 L1238.18 1205.32 L1238.77 1205.32 L1239.36 1205.32 L1239.94 1205.32 L1240.53 1205.32 L1241.11 1205.32 L1241.7 1205.32 L1242.29 1205.32 L1242.87 1205.32 L1243.46 1205.32 L1244.05 1205.32 L1244.63 1205.32 L1245.22 1205.32 L1245.81 1205.32 L1246.39 1205.32 L1246.98 1205.32 L1247.57 1205.32 L1248.15 1205.32 L1248.74 1205.32 L1249.32 1205.32 L1249.91 1205.32 L1250.5 1205.32 L1251.08 1205.32 L1251.67 1205.32 L1252.26 1205.32 L1252.84 1205.32 L1253.43 1205.32 L1254.02 1205.32 L1254.6 1205.32 L1255.19 1205.32 L1255.78 1205.32 L1256.36 1205.32 L1256.95 1205.32 L1257.53 1205.32 L1258.12 1205.32 L1258.71 1205.32 L1259.29 1205.32 L1259.88 1205.32 L1260.47 1205.32 L1261.05 1205.32 L1261.64 1205.32 L1262.23 1205.32 L1262.81 1205.32 L1263.4 1205.32 L1263.98 1205.32 L1264.57 1205.32 L1265.16 1205.32 L1265.74 1205.32 L1266.33 1205.32 L1266.92 1205.32 L1267.5 1205.32 L1268.09 1205.32 L1268.68 1205.32 L1269.26 1205.32 L1269.85 1205.32 L1270.44 1205.32 L1271.02 1205.32 L1271.61 1205.32 L1272.19 1205.32 L1272.78 1205.32 L1273.37 1205.32 L1273.95 1205.32 L1274.54 1205.32 L1275.13 1205.32 L1275.71 1205.32 L1276.3 1205.32 L1276.89 1205.32 L1277.47 1205.32 L1278.06 1205.32 L1278.65 1205.32 L1279.23 1205.32 L1279.82 1205.32 L1280.4 1205.32 L1280.99 1205.32 L1281.58 1205.32 L1282.16 1205.32 L1282.75 1205.32 L1283.34 1205.32 L1283.92 1205.32 L1284.51 1205.32 L1285.1 1205.32 L1285.68 1205.32 L1286.27 1205.32 L1286.86 1205.32 L1287.44 1205.32 L1288.03 1205.32 L1288.61 1205.32 L1289.2 1205.32 L1289.79 1205.32 L1290.37 1205.32 L1290.96 1205.32 L1291.55 1205.32 L1292.13 1205.32 L1292.72 1205.32 L1293.31 1205.32 L1293.89 1205.32 L1294.48 1205.32 L1295.06 1205.32 L1295.65 1205.32 L1296.24 1205.32 L1296.82 1205.32 L1297.41 1205.32 L1298 1205.32 L1298.58 1205.32 L1299.17 1205.32 L1299.76 1205.32 L1300.34 1205.32 L1300.93 1205.32 L1301.52 1205.32 L1302.1 1205.32 L1302.69 1205.32 L1303.27 1205.32 L1303.86 1205.32 L1304.45 1205.32 L1305.03 1205.32 L1305.62 1205.32 L1306.21 1205.32 L1306.79 1205.32 L1307.38 1205.32 L1307.97 1205.32 L1308.55 1205.32 L1309.14 1205.32 L1309.73 1205.32 L1310.31 1205.32 L1310.9 1205.32 L1311.48 1205.32 L1312.07 1205.32 L1312.66 1205.32 L1313.24 1205.32 L1313.83 1205.32 L1314.42 1205.32 L1315 1205.32 L1315.59 1205.32 L1316.18 1205.32 L1316.76 1205.32 L1317.35 1205.32 L1317.93 1205.32 L1318.52 1205.32 L1319.11 1205.32 L1319.69 1205.32 L1320.28 1205.32 L1320.87 1205.32 L1321.45 1205.32 L1322.04 1205.32 L1322.63 1205.32 L1323.21 1205.32 L1323.8 1205.32 L1324.39 1205.32 L1324.97 1205.32 L1325.56 1205.32 L1326.14 1205.32 L1326.73 1205.32 L1327.32 1205.32 L1327.9 1205.32 L1328.49 1205.32 L1329.08 1205.32 L1329.66 1205.32 L1330.25 1205.32 L1330.84 1205.32 L1331.42 1205.32 L1332.01 1205.32 L1332.6 1205.32 L1333.18 1205.32 L1333.77 1205.32 L1334.35 1205.32 L1334.94 1205.32 L1335.53 1205.32 L1336.11 1205.32 L1336.7 1205.32 L1337.29 1205.32 L1337.87 1205.32 L1338.46 1205.32 L1339.05 1205.32 L1339.63 1205.32 L1340.22 1205.32 L1340.8 1205.32 L1341.39 1205.32 L1341.98 1205.32 L1342.56 1205.32 L1343.15 1205.32 L1343.74 1205.32 L1344.32 1205.32 L1344.91 1205.32 L1345.5 1205.32 L1346.08 1205.32 L1346.67 1205.32 L1347.26 1205.32 L1347.84 1205.32 L1348.43 1205.32 L1349.01 1205.32 L1349.6 1205.32 L1350.19 1205.32 L1350.77 1205.32 L1351.36 1205.32 L1351.95 1205.32 L1352.53 1205.32 L1353.12 1205.32 L1353.71 1205.32 L1354.29 1205.32 L1354.88 1205.32 L1355.47 1205.32 L1356.05 1205.32 L1356.64 1205.32 L1357.22 1205.32 L1357.81 1205.32 L1358.4 1205.32 L1358.98 1205.32 L1359.57 1205.32 L1360.16 1205.32 L1360.74 1205.32 L1361.33 1205.32 L1361.92 1205.32 L1362.5 1205.32 L1363.09 1205.32 L1363.68 1205.32 L1364.26 1205.32 L1364.85 1205.32 L1365.43 1205.32 L1366.02 1205.32 L1366.61 1205.32 L1367.19 1205.32 L1367.78 1205.32 L1368.37 1205.32 L1368.95 1205.32 L1369.54 1205.32 L1370.13 1205.32 L1370.71 1205.32 L1371.3 1205.32 L1371.88 1205.32 L1372.47 1205.32 L1373.06 1205.32 L1373.64 1205.32 L1374.23 1205.32 L1374.82 1205.32 L1375.4 1205.32 L1375.99 1205.32 L1376.58 1205.32 L1377.16 1205.32 L1377.75 1205.32 L1378.34 1205.32 L1378.92 1205.32 L1379.51 1205.32 L1380.09 1205.32 L1380.68 1205.32 L1381.27 1205.32 L1381.85 1205.32 L1382.44 1205.32 L1383.03 1205.32 L1383.61 1205.32 L1384.2 1205.32 L1384.79 1205.32 L1385.37 1205.32 L1385.96 1205.32 L1386.55 1205.32 L1387.13 1205.32 L1387.72 1205.32 L1388.3 1205.32 L1388.89 1205.32 L1389.48 1205.32 L1390.06 1205.32 L1390.65 1205.32 L1391.24 1205.32 L1391.82 1205.32 L1392.41 1205.32 L1393 1205.32 L1393.58 1205.32 L1394.17 1205.32 L1394.75 1205.32 L1395.34 1205.32 L1395.93 1205.32 L1396.51 1205.32 L1397.1 1205.32 L1397.69 1205.32 L1398.27 1205.32 L1398.86 1205.32 L1399.45 1205.32 L1400.03 1205.32 L1400.62 1205.32 L1401.21 1205.32 L1401.79 1205.32 L1402.38 1205.32 L1402.96 1205.32 L1403.55 1205.32 L1404.14 1205.32 L1404.72 1205.32 L1405.31 1205.32 L1405.9 1205.32 L1406.48 1205.32 L1407.07 1205.32 L1407.66 1205.32 L1408.24 1205.32 L1408.83 1205.32 L1409.42 1205.32 L1410 1205.32 L1410.59 1205.32 L1411.17 1205.32 L1411.76 1205.32 L1412.35 1205.32 L1412.93 1205.32 L1413.52 1205.32 L1414.11 1205.32 L1414.69 1205.32 L1415.28 1205.32 L1415.87 1205.32 L1416.45 1205.32 L1417.04 1205.32 L1417.63 1205.32 L1418.21 1205.32 L1418.8 1205.32 L1419.38 1205.32 L1419.97 1205.32 L1420.56 1205.32 L1421.14 1205.32 L1421.73 1205.32 L1422.32 1205.32 L1422.9 1205.32 L1423.49 1205.32 L1424.08 1205.32 L1424.66 1205.32 L1425.25 1205.32 L1425.83 1205.32 L1426.42 1205.32 L1427.01 1205.32 L1427.59 1205.32 L1428.18 1205.32 L1428.77 1205.32 L1429.35 1205.32 L1429.94 1205.32 L1430.53 1205.32 L1431.11 1205.32 L1431.7 1205.32 L1432.29 1205.32 L1432.87 1205.32 L1433.46 1205.32 L1434.04 1205.32 L1434.63 1205.32 L1435.22 1205.32 L1435.8 1205.32 L1436.39 1205.32 L1436.98 1205.32 L1437.56 1205.32 L1438.15 1205.32 L1438.74 1205.32 L1439.32 1205.32 L1439.91 1205.32 L1440.5 1205.32 L1441.08 1205.32 L1441.67 1205.32 L1442.25 1205.32 L1442.84 1205.32 L1443.43 1205.32 L1444.01 1205.32 L1444.6 1205.32 L1445.19 1205.32 L1445.77 1205.32 L1446.36 1205.32 L1446.95 1205.32 L1447.53 1205.32 L1448.12 1205.32 L1448.7 1205.32 L1449.29 1205.32 L1449.88 1205.32 L1450.46 1205.32 L1451.05 1205.32 L1451.64 1205.32 L1452.22 1205.32 L1452.81 1205.32 L1453.4 1205.32 L1453.98 1205.32 L1454.57 1205.32 L1455.16 1205.32 L1455.74 1205.32 L1456.33 1205.32 L1456.91 1205.32 L1457.5 1205.32 L1458.09 1205.32 L1458.67 1205.32 L1459.26 1205.32 L1459.85 1205.32 L1460.43 1205.32 L1461.02 1205.32 L1461.61 1205.32 L1462.19 1205.32 L1462.78 1205.32 L1463.37 1205.32 L1463.95 1205.32 L1464.54 1205.32 L1465.12 1205.32 L1465.71 1205.32 L1466.3 1205.32 L1466.88 1205.32 L1467.47 1205.32 L1468.06 1205.32 L1468.64 1205.32 L1469.23 1205.32 L1469.82 1205.32 L1470.4 1205.32 L1470.99 1205.32 L1471.57 1205.32 L1472.16 1205.32 L1472.75 1205.32 L1473.33 1205.32 L1473.92 1205.32 L1474.51 1205.32 L1475.09 1205.32 L1475.68 1205.32 L1476.27 1205.32 L1476.85 1205.32 L1477.44 1205.32 L1478.03 1205.32 L1478.61 1205.32 L1479.2 1205.32 L1479.78 1205.32 L1480.37 1205.32 L1480.96 1205.32 L1481.54 1205.32 L1482.13 1205.32 L1482.72 1205.32 L1483.3 1205.32 L1483.89 1205.32 L1484.48 1205.32 L1485.06 1205.32 L1485.65 1205.32 L1486.24 1205.32 L1486.82 1205.32 L1487.41 1205.32 L1487.99 1205.32 L1488.58 1205.32 L1489.17 1205.32 L1489.75 1205.32 L1490.34 1205.32 L1490.93 1205.32 L1491.51 1205.32 L1492.1 1205.32 L1492.69 1205.32 L1493.27 1205.32 L1493.86 1205.32 L1494.45 1205.32 L1495.03 1205.32 L1495.62 1205.32 L1496.2 1205.32 L1496.79 1205.32 L1497.38 1205.32 L1497.96 1205.32 L1498.55 1205.32 L1499.14 1205.32 L1499.72 1205.32 L1500.31 1205.32 L1500.9 1205.32 L1501.48 1205.32 L1502.07 1205.32 L1502.65 1205.32 L1503.24 1205.32 L1503.83 1205.32 L1504.41 1205.32 L1505 1205.32 L1505.59 1205.32 L1506.17 1205.32 L1506.76 1205.32 L1507.35 1205.32 L1507.93 1205.32 L1508.52 1205.32 L1509.11 1205.32 L1509.69 1205.32 L1510.28 1205.32 L1510.86 1205.32 L1511.45 1205.32 L1512.04 1205.32 L1512.62 1205.32 L1513.21 1205.32 L1513.8 1205.32 L1514.38 1205.32 L1514.97 1205.32 L1515.56 1205.32 L1516.14 1205.32 L1516.73 1205.32 L1517.32 1205.32 L1517.9 1205.32 L1518.49 1205.32 L1519.07 1205.32 L1519.66 1205.32 L1520.25 1205.32 L1520.83 1205.32 L1521.42 1205.32 L1522.01 1205.32 L1522.59 1205.32 L1523.18 1205.32 L1523.77 1205.32 L1524.35 1205.32 L1524.94 1205.32 L1525.52 1205.32 L1526.11 1205.32 L1526.7 1205.32 L1527.28 1205.32 L1527.87 1205.32 L1528.46 1205.32 L1529.04 1205.32 L1529.63 1205.32 L1530.22 1205.32 L1530.8 1205.32 L1531.39 1205.32 L1531.98 1205.32 L1532.56 1205.32 L1533.15 1205.32 L1533.73 1205.32 L1534.32 1205.32 L1534.91 1205.32 L1535.49 1205.32 L1536.08 1205.32 L1536.67 1205.32 L1537.25 1205.32 L1537.84 1205.32 L1538.43 1205.32 L1539.01 1205.32 L1539.6 1205.32 L1540.19 1205.32 L1540.77 1205.32 L1541.36 1205.32 L1541.94 1205.32 L1542.53 1205.32 L1543.12 1205.32 L1543.7 1205.32 L1544.29 1205.32 L1544.88 1205.32 L1545.46 1205.32 L1546.05 1205.32 L1546.64 1205.32 L1547.22 1205.32 L1547.81 1205.32 L1548.4 1205.32 L1548.98 1205.32 L1549.57 1205.32 L1550.15 1205.32 L1550.74 1205.32 L1551.33 1205.32 L1551.91 1205.32 L1552.5 1205.32 L1553.09 1205.32 L1553.67 1205.32 L1554.26 1205.32 L1554.85 1205.32 L1555.43 1205.32 L1556.02 1205.32 L1556.6 1205.32 L1557.19 1205.32 L1557.78 1205.32 L1558.36 1205.32 L1558.95 1205.32 L1559.54 1205.32 L1560.12 1205.32 L1560.71 1205.32 L1561.3 1205.32 L1561.88 1205.32 L1562.47 1205.32 L1563.06 1205.32 L1563.64 1205.32 L1564.23 1205.32 L1564.81 1205.32 L1565.4 1205.32 L1565.99 1205.32 L1566.57 1205.32 L1567.16 1205.32 L1567.75 1205.32 L1568.33 1205.32 L1568.92 1205.32 L1569.51 1205.32 L1570.09 1205.32 L1570.68 1205.32 L1571.27 1205.32 L1571.85 1205.32 L1572.44 1205.32 L1573.02 1205.32 L1573.61 1205.32 L1574.2 1205.32 L1574.78 1205.32 L1575.37 1205.32 L1575.96 1205.32 L1576.54 1205.32 L1577.13 1205.32 L1577.72 1205.32 L1578.3 1205.32 L1578.89 1205.32 L1579.47 1205.32 L1580.06 1205.32 L1580.65 1205.32 L1581.23 1205.32 L1581.82 1205.32 L1582.41 1205.32 L1582.99 1205.32 L1583.58 1205.32 L1584.17 1205.32 L1584.75 1205.32 L1585.34 1205.32 L1585.93 1205.32 L1586.51 1205.32 L1587.1 1205.32 L1587.68 1205.32 L1588.27 1205.32 L1588.86 1205.32 L1589.44 1205.32 L1590.03 1205.32 L1590.62 1205.32 L1591.2 1205.32 L1591.79 1205.32 L1592.38 1205.32 L1592.96 1205.32 L1593.55 1205.32 L1594.14 1205.32 L1594.72 1205.32 L1595.31 1205.32 L1595.89 1205.32 L1596.48 1205.32 L1597.07 1205.32 L1597.65 1205.32 L1598.24 1205.32 L1598.83 1205.32 L1599.41 1205.32 L1600 1205.32 L1600.59 1205.32 L1601.17 1205.32 L1601.76 1205.32 L1602.34 1205.32 L1602.93 1205.32 L1603.52 1205.32 L1604.1 1205.32 L1604.69 1205.32 L1605.28 1205.32 L1605.86 1205.32 L1606.45 1205.32 L1607.04 1205.32 L1607.62 1205.32 L1608.21 1205.32 L1608.8 1205.32 L1609.38 1205.32 L1609.97 1205.32 L1610.55 1205.32 L1611.14 1205.32 L1611.73 1205.32 L1612.31 1205.32 L1612.9 1205.32 L1613.49 1205.32 L1614.07 1205.32 L1614.66 1205.32 L1615.25 1205.32 L1615.83 1205.32 L1616.42 1205.32 L1617.01 1205.32 L1617.59 1205.32 L1618.18 1205.32 L1618.76 1205.32 L1619.35 1205.32 L1619.94 1205.32 L1620.52 1205.32 L1621.11 1205.32 L1621.7 1205.32 L1622.28 1205.32 L1622.87 1205.32 L1623.46 1205.32 L1624.04 1205.32 L1624.63 1205.32 L1625.22 1205.32 L1625.8 1205.32 L1626.39 1205.32 L1626.97 1205.32 L1627.56 1205.32 L1628.15 1205.32 L1628.73 1205.32 L1629.32 1205.32 L1629.91 1205.32 L1630.49 1205.32 L1631.08 1205.32 L1631.67 1205.32 L1632.25 1205.32 L1632.84 1205.32 L1633.42 1205.32 L1634.01 1205.32 L1634.6 1205.32 L1635.18 1205.32 L1635.77 1205.32 L1636.36 1205.32 L1636.94 1205.32 L1637.53 1205.32 L1638.12 1205.32 L1638.7 1205.32 L1639.29 1205.32 L1639.88 1205.32 L1640.46 1205.32 L1641.05 1205.32 L1641.63 1205.32 L1642.22 1205.32 L1642.81 1205.32 L1643.39 1205.32 L1643.98 1205.32 L1644.57 1205.32 L1645.15 1205.32 L1645.74 1205.32 L1646.33 1205.32 L1646.91 1205.32 L1647.5 1205.32 L1648.09 1205.32 L1648.67 1205.32 L1649.26 1205.32 L1649.84 1205.32 L1650.43 1205.32 L1651.02 1205.32 L1651.6 1205.32 L1652.19 1205.32 L1652.78 1205.32 L1653.36 1205.32 L1653.95 1205.32 L1654.54 1205.32 L1655.12 1205.32 L1655.71 1205.32 L1656.29 1205.32 L1656.88 1205.32 L1657.47 1205.32 L1658.05 1205.32 L1658.64 1205.32 L1659.23 1205.32 L1659.81 1205.32 L1660.4 1205.32 L1660.99 1205.32 L1661.57 1205.32 L1662.16 1205.32 L1662.75 1205.32 L1663.33 1205.32 L1663.92 1205.32 L1664.5 1205.32 L1665.09 1205.32 L1665.68 1205.32 L1666.26 1205.32 L1666.85 1205.32 L1667.44 1205.32 L1668.02 1205.32 L1668.61 1205.32 L1669.2 1205.32 L1669.78 1205.32 L1670.37 1205.32 L1670.96 1205.32 L1671.54 1205.32 L1672.13 1205.32 L1672.71 1205.32 L1673.3 1205.32 L1673.89 1205.32 L1674.47 1205.32 L1675.06 1205.32 L1675.65 1205.32 L1676.23 1205.32 L1676.82 1205.32 L1677.41 1205.32 L1677.99 1205.32 L1678.58 1205.32 L1679.17 1205.32 L1679.75 1205.32 L1680.34 1205.32 L1680.92 1205.32 L1681.51 1205.32 L1682.1 1205.32 L1682.68 1205.32 L1683.27 1205.32 L1683.86 1205.32 L1684.44 1205.32 L1685.03 1205.32 L1685.62 1205.32 L1686.2 1205.32 L1686.79 1205.32 L1687.37 1205.32 L1687.96 1205.32 L1688.55 1205.32 L1689.13 1205.32 L1689.72 1205.32 L1690.31 1205.32 L1690.89 1205.32 L1691.48 1205.32 L1692.07 1205.32 L1692.65 1205.32 L1693.24 1205.32 L1693.83 1205.32 L1694.41 1205.32 L1695 1205.32 L1695.58 1205.32 L1696.17 1205.32 L1696.76 1205.32 L1697.34 1205.32 L1697.93 1205.32 L1698.52 1205.32 L1699.1 1205.32 L1699.69 1205.32 L1700.28 1205.32 L1700.86 1205.32 L1701.45 1205.32 L1702.04 1205.32 L1702.62 1205.32 L1703.21 1205.32 L1703.79 1205.32 L1704.38 1205.32 L1704.97 1205.32 L1705.55 1205.32 L1706.14 1205.32 L1706.73 1205.32 L1707.31 1205.32 L1707.9 1205.32 L1708.49 1205.32 L1709.07 1205.32 L1709.66 1205.32 L1710.24 1205.32 L1710.83 1205.32 L1711.42 1205.32 L1712 1205.32 L1712.59 1205.32 L1713.18 1205.32 L1713.76 1205.32 L1714.35 1205.32 L1714.94 1205.32 L1715.52 1205.32 L1716.11 1205.32 L1716.7 1205.32 L1717.28 1205.32 L1717.87 1205.32 L1718.45 1205.32 L1719.04 1205.32 L1719.63 1205.32 L1720.21 1205.32 L1720.8 1205.32 L1721.39 1205.32 L1721.97 1205.32 L1722.56 1205.32 L1723.15 1205.32 L1723.73 1205.32 L1724.32 1205.32 L1724.91 1205.32 L1725.49 1205.32 L1726.08 1205.32 L1726.66 1205.32 L1727.25 1205.32 L1727.84 1205.32 L1728.42 1205.32 L1729.01 1205.32 L1729.6 1205.32 L1730.18 1205.32 L1730.77 1205.32 L1731.36 1205.32 L1731.94 1205.32 L1732.53 1205.32 L1733.11 1205.32 L1733.7 1205.32 L1734.29 1205.32 L1734.87 1205.32 L1735.46 1205.32 L1736.05 1205.32 L1736.63 1205.32 L1737.22 1205.32 L1737.81 1205.32 L1738.39 1205.32 L1738.98 1205.32 L1739.57 1205.32 L1740.15 1205.32 L1740.74 1205.32 L1741.32 1205.32 L1741.91 1205.32 L1742.5 1205.32 L1743.08 1205.32 L1743.67 1205.32 L1744.26 1205.32 L1744.84 1205.32 L1745.43 1205.32 L1746.02 1205.32 L1746.6 1205.32 L1747.19 1205.32 L1747.78 1205.32 L1748.36 1205.32 L1748.95 1205.32 L1749.53 1205.32 L1750.12 1205.32 L1750.71 1205.32 L1751.29 1205.32 L1751.88 1205.32 L1752.47 1205.32 L1753.05 1205.32 L1753.64 1205.32 L1754.23 1205.32 L1754.81 1205.32 L1755.4 1205.32 L1755.99 1205.32 L1756.57 1205.32 L1757.16 1205.32 L1757.74 1205.32 L1758.33 1205.32 L1758.92 1205.32 L1759.5 1205.32 L1760.09 1205.32 L1760.68 1205.32 L1761.26 1205.32 L1761.85 1205.32 L1762.44 1205.32 L1763.02 1205.32 L1763.61 1205.32 L1764.19 1205.32 L1764.78 1205.32 L1765.37 1205.32 L1765.95 1205.32 L1766.54 1205.32 L1767.13 1205.32 L1767.71 1205.32 L1768.3 1205.32 L1768.89 1205.32 L1769.47 1205.32 L1770.06 1205.32 L1770.65 1205.32 L1771.23 1205.32 L1771.82 1205.32 L1772.4 1205.32 L1772.99 1205.32 L1773.58 1205.32 L1774.16 1205.32 L1774.75 1205.32 L1775.34 1205.32 L1775.92 1205.32 L1776.51 1205.32 L1777.1 1205.32 L1777.68 1205.32 L1778.27 1205.32 L1778.86 1205.32 L1779.44 1205.32 L1780.03 1205.32 L1780.61 1205.32 L1781.2 1205.32 L1781.79 1205.32 L1782.37 1205.32 L1782.96 1205.32 L1783.55 1205.32 L1784.13 1205.32 L1784.72 1205.32 L1785.31 1205.32 L1785.89 1205.32 L1786.48 1205.32 L1787.06 1205.32 L1787.65 1205.32 L1788.24 1205.32 L1788.82 1205.32 L1789.41 1205.32 L1790 1205.32 L1790.58 1205.32 L1791.17 1205.32 L1791.76 1205.32 L1792.34 1205.32 L1792.93 1205.32 L1793.52 1205.32 L1794.1 1205.32 L1794.69 1205.32 L1795.27 1205.32 L1795.86 1205.32 L1796.45 1205.32 L1797.03 1205.32 L1797.62 1205.32 L1798.21 1205.32 L1798.79 1205.32 L1799.38 1205.32 L1799.97 1205.32 L1800.55 1205.32 L1801.14 1205.32 L1801.73 1205.32 L1802.31 1205.32 L1802.9 1205.32 L1803.48 1205.32 L1804.07 1205.32 L1804.66 1205.32 L1805.24 1205.32 L1805.83 1205.32 L1806.42 1205.32 L1807 1205.32 L1807.59 1205.32 L1808.18 1205.32 L1808.76 1205.32 L1809.35 1205.32 L1809.94 1205.32 L1810.52 1205.32 L1811.11 1205.32 L1811.69 1205.32 L1812.28 1205.32 L1812.87 1205.32 L1813.45 1205.32 L1814.04 1205.32 L1814.63 1205.32 L1815.21 1205.32 L1815.8 1205.32 L1816.39 1205.32 L1816.97 1205.32 L1817.56 1205.32 L1818.14 1205.32 L1818.73 1205.32 L1819.32 1205.32 L1819.9 1205.32 L1820.49 1205.32 L1821.08 1205.32 L1821.66 1205.32 L1822.25 1205.32 L1822.84 1205.32 L1823.42 1205.32 L1824.01 1205.32 L1824.6 1205.32 L1825.18 1205.32 L1825.77 1205.32 L1826.35 1205.32 L1826.94 1205.32 L1827.53 1205.32 L1828.11 1205.32 L1828.7 1205.32 L1829.29 1205.32 L1829.87 1205.32 L1830.46 1205.32 L1831.05 1205.32 L1831.63 1205.32 L1832.22 1205.32 L1832.81 1205.32 L1833.39 1205.32 L1833.98 1205.32 L1834.56 1205.32 L1835.15 1205.32 L1835.74 1205.32 L1836.32 1205.32 L1836.91 1205.32 L1837.5 1205.32 L1838.08 1205.32 L1838.67 1205.32 L1839.26 1205.32 L1839.84 1205.32 L1840.43 1205.32 L1841.01 1205.32 L1841.6 1205.32 L1842.19 1205.32 L1842.77 1205.32 L1843.36 1205.32 L1843.95 1205.32 L1844.53 1205.32 L1845.12 1205.32 L1845.71 1205.32 L1846.29 1205.32 L1846.88 1205.32 L1847.47 1205.32 L1848.05 1205.32 L1848.64 1205.32 L1849.22 1205.32 L1849.81 1205.32 L1850.4 1205.32 L1850.98 1205.32 L1851.57 1205.32 L1852.16 1205.32 L1852.74 1205.32 L1853.33 1205.32 L1853.92 1205.32 L1854.5 1205.32 L1855.09 1205.32 L1855.68 1205.32 L1856.26 1205.32 L1856.85 1205.32 L1857.43 1205.32 L1858.02 1205.32 L1858.61 1205.32 L1859.19 1205.32 L1859.78 1205.32 L1860.37 1205.32 L1860.95 1205.32 L1861.54 1205.32 L1862.13 1205.32 L1862.71 1205.32 L1863.3 1205.32 L1863.88 1205.32 L1864.47 1205.32 L1865.06 1205.32 L1865.64 1205.32 L1866.23 1205.32 L1866.82 1205.32 L1867.4 1205.32 L1867.99 1205.32 L1868.58 1205.32 L1869.16 1205.32 L1869.75 1205.32 L1870.34 1205.32 L1870.92 1205.32 L1871.51 1205.32 L1872.09 1205.32 L1872.68 1205.32 L1873.27 1205.32 L1873.85 1205.32 L1874.44 1205.32 L1875.03 1205.32 L1875.61 1205.32 L1876.2 1205.32 L1876.79 1205.32 L1877.37 1205.32 L1877.96 1205.32 L1878.55 1205.32 L1879.13 1205.32 L1879.72 1205.32 L1880.3 1205.32 L1880.89 1205.32 L1881.48 1205.32 L1882.06 1205.32 L1882.65 1205.32 L1883.24 1205.32 L1883.82 1205.32 L1884.41 1205.32 L1885 1205.32 L1885.58 1205.32 L1886.17 1205.32 L1886.76 1205.32 L1887.34 1205.32 L1887.93 1205.32 L1888.51 1205.32 L1889.1 1205.32 L1889.69 1205.32 L1890.27 1205.32 L1890.86 1205.32 L1891.45 1205.32 L1892.03 1205.32 L1892.62 1205.32 L1893.21 1205.32 L1893.79 1205.32 L1894.38 1205.32 L1894.96 1205.32 L1895.55 1205.32 L1896.14 1205.32 L1896.72 1205.32 L1897.31 1205.32 L1897.9 1205.32 L1898.48 1205.32 L1899.07 1205.32 L1899.66 1205.32 L1900.24 1205.32 L1900.83 1205.32 L1901.42 1205.32 L1902 1205.32 L1902.59 1205.32 L1903.17 1205.32 L1903.76 1205.32 L1904.35 1205.32 L1904.93 1205.32 L1905.52 1205.32 L1906.11 1205.32 L1906.69 1205.32 L1907.28 1205.32 L1907.87 1205.32 L1908.45 1205.32 L1909.04 1205.32 L1909.63 1205.32 L1910.21 1205.32 L1910.8 1205.32 L1911.38 1205.32 L1911.97 1205.32 L1912.56 1205.32 L1913.14 1205.32 L1913.73 1205.32 L1914.32 1205.32 L1914.9 1205.32 L1915.49 1205.32 L1916.08 1205.32 L1916.66 1205.32 L1917.25 1205.32 L1917.83 1205.32 L1918.42 1205.32 L1919.01 1205.32 L1919.59 1205.32 L1920.18 1205.32 L1920.77 1205.32 L1921.35 1205.32 L1921.94 1205.32 L1922.53 1205.32 L1923.11 1205.32 L1923.7 1205.32 L1924.29 1205.32 L1924.87 1205.32 L1925.46 1205.32 L1926.04 1205.32 L1926.63 1205.32 L1927.22 1205.32 L1927.8 1205.32 L1928.39 1205.32 L1928.98 1205.32 L1929.56 1205.32 L1930.15 1205.32 L1930.74 1205.32 L1931.32 1205.32 L1931.91 1205.32 L1932.5 1205.32 L1933.08 1205.32 L1933.67 1205.32 L1934.25 1205.32 L1934.84 1205.32 L1935.43 1205.32 L1936.01 1205.32 L1936.6 1205.32 L1937.19 1205.32 L1937.77 1205.32 L1938.36 1205.32 L1938.95 1205.32 L1939.53 1205.32 L1940.12 1205.32 L1940.71 1205.32 L1941.29 1205.32 L1941.88 1205.32 L1942.46 1205.32 L1943.05 1205.32 L1943.64 1205.32 L1944.22 1205.32 L1944.81 1205.32 L1945.4 1205.32 L1945.98 1205.32 L1946.57 1205.32 L1947.16 1205.32 L1947.74 1205.32 L1948.33 1205.32 L1948.91 1205.32 L1949.5 1205.32 L1950.09 1205.32 L1950.67 1205.32 L1951.26 1205.32 L1951.85 1205.32 L1952.43 1205.32 L1953.02 1205.32 L1953.61 1205.32 L1954.19 1205.32 L1954.78 1205.32 L1955.37 1205.32 L1955.95 1205.32 L1956.54 1205.32 L1957.12 1205.32 L1957.71 1205.32 L1958.3 1205.32 L1958.88 1205.32 L1959.47 1205.32 L1960.06 1205.32 L1960.64 1205.32 L1961.23 1205.32 L1961.82 1205.32 L1962.4 1205.32 L1962.99 1205.32 L1963.58 1205.32 L1964.16 1205.32 L1964.75 1205.32 L1965.33 1205.32 L1965.92 1205.32 L1966.51 1205.32 L1967.09 1205.32 L1967.68 1205.32 L1968.27 1205.32 L1968.85 1205.32 L1969.44 1205.32 L1970.03 1205.32 L1970.61 1205.32 L1971.2 1205.32 L1971.78 1205.32 L1972.37 1205.32 L1972.96 1205.32 L1973.54 1205.32 L1974.13 1205.32 L1974.72 1205.32 L1975.3 1205.32 L1975.89 1205.32 L1976.48 1205.32 L1977.06 1205.32 L1977.65 1205.32 L1978.24 1205.32 L1978.82 1205.32 L1979.41 1205.32 L1979.99 1205.32 L1980.58 1205.32 L1981.17 1205.32 L1981.75 1205.32 L1982.34 1205.32 L1982.93 1205.32 L1983.51 1205.32 L1984.1 1205.32 L1984.69 1205.32 L1985.27 1205.32 L1985.86 1205.32 L1986.45 1205.32 L1987.03 1205.32 L1987.62 1205.32 L1988.2 1205.32 L1988.79 1205.32 L1989.38 1205.32 L1989.96 1205.32 L1990.55 1205.32 L1991.14 1205.32 L1991.72 1205.32 L1992.31 1205.32 L1992.9 1205.32 L1993.48 1205.32 L1994.07 1205.32 L1994.65 1205.32 L1995.24 1205.32 L1995.83 1205.32 L1996.41 1205.32 L1997 1205.32 L1997.59 1205.32 L1998.17 1205.32 L1998.76 1205.32 L1999.35 1205.32 L1999.93 1205.32 L2000.52 1205.32 L2001.11 1205.32 L2001.69 1205.32 L2002.28 1205.32 L2002.86 1205.32 L2003.45 1205.32 L2004.04 1205.32 L2004.62 1205.32 L2005.21 1205.32 L2005.8 1205.32 L2006.38 1205.32 L2006.97 1205.32 L2007.56 1205.32 L2008.14 1205.32 L2008.73 1205.32 L2009.32 1205.32 L2009.9 1205.32 L2010.49 1205.32 L2011.07 1205.32 L2011.66 1205.32 L2012.25 1205.32 L2012.83 1205.32 L2013.42 1205.32 L2014.01 1205.32 L2014.59 1205.32 L2015.18 1205.32 L2015.77 1205.32 L2016.35 1205.32 L2016.94 1205.32 L2017.53 1205.32 L2018.11 1205.32 L2018.7 1205.32 L2019.28 1205.32 L2019.87 1205.32 L2020.46 1205.32 L2021.04 1205.32 L2021.63 1205.32 L2022.22 1205.32 L2022.8 1205.32 L2023.39 1205.32 L2023.98 1205.32 L2024.56 1205.32 L2025.15 1205.32 L2025.73 1205.32 L2026.32 1205.32 L2026.91 1205.32 L2027.49 1205.32 L2028.08 1205.32 L2028.67 1205.32 L2029.25 1205.32 L2029.84 1205.32 L2030.43 1205.32 L2031.01 1205.32 L2031.6 1205.32 L2032.19 1205.32 L2032.77 1205.32 L2033.36 1205.32 L2033.94 1205.32 L2034.53 1205.32 L2035.12 1205.32 L2035.7 1205.32 L2036.29 1205.32 L2036.88 1205.32 L2037.46 1205.32 L2038.05 1205.32 L2038.64 1205.32 L2039.22 1205.32 L2039.81 1205.32 L2040.4 1205.32 L2040.98 1205.32 L2041.57 1205.32 L2042.15 1205.32 L2042.74 1205.32 L2043.33 1205.32 L2043.91 1205.32 L2044.5 1205.32 L2045.09 1205.32 L2045.67 1205.32 L2046.26 1205.32 L2046.85 1205.32 L2047.43 1205.32 L2048.02 1205.32 L2048.6 1205.32 L2049.19 1205.32 L2049.78 1205.32 L2050.36 1205.32 L2050.95 1205.32 L2051.54 1205.32 L2052.12 1205.32 L2052.71 1205.32 L2053.3 1205.32 L2053.88 1205.32 L2054.47 1205.32 L2055.06 1205.32 L2055.64 1205.32 L2056.23 1205.32 L2056.81 1205.32 L2057.4 1205.32 L2057.99 1205.32 L2058.57 1205.32 L2059.16 1205.32 L2059.75 1205.32 L2060.33 1205.32 L2060.92 1205.32 L2061.51 1205.32 L2062.09 1205.32 L2062.68 1205.32 L2063.27 1205.32 L2063.85 1205.32 L2064.44 1205.32 L2065.02 1205.32 L2065.61 1205.32 L2066.2 1205.32 L2066.78 1205.32 L2067.37 1205.32 L2067.96 1205.32 L2068.54 1205.32 L2069.13 1205.32 L2069.72 1205.32 L2070.3 1205.32 L2070.89 1205.32 L2071.48 1205.32 L2072.06 1205.32 L2072.65 1205.32 L2073.23 1205.32 L2073.82 1205.32 L2074.41 1205.32 L2074.99 1205.32 L2075.58 1205.32 L2076.17 1205.32 L2076.75 1205.32 L2077.34 1205.32 L2077.93 1205.32 L2078.51 1205.32 L2079.1 1205.32 L2079.68 1205.32 L2080.27 1205.32 L2080.86 1205.32 L2081.44 1205.32 L2082.03 1205.32 L2082.62 1205.32 L2083.2 1205.32 L2083.79 1205.32 L2084.38 1205.32 L2084.96 1205.32 L2085.55 1205.32 L2086.14 1205.32 L2086.72 1205.32 L2087.31 1205.32 L2087.89 1205.32 L2088.48 1205.32 L2089.07 1205.32 L2089.65 1205.32 L2090.24 1205.32 L2090.83 1205.32 L2091.41 1205.32 L2092 1205.32 L2092.59 1205.32 L2093.17 1205.32 L2093.76 1205.32 L2094.35 1205.32 L2094.93 1205.32 L2095.52 1205.32 L2096.1 1205.32 L2096.69 1205.32 L2097.28 1205.32 L2097.86 1205.32 L2098.45 1205.32 L2099.04 1205.32 L2099.62 1205.32 L2100.21 1205.32 L2100.8 1205.32 L2101.38 1205.32 L2101.97 1205.32 L2102.55 1205.32 L2103.14 1205.32 L2103.73 1205.32 L2104.31 1205.32 L2104.9 1205.32 L2105.49 1205.32 L2106.07 1205.32 L2106.66 1205.32 L2107.25 1205.32 L2107.83 1205.32 L2108.42 1205.32 L2109.01 1205.32 L2109.59 1205.32 L2110.18 1205.32 L2110.76 1205.32 L2111.35 1205.32 L2111.94 1205.32 L2112.52 1205.32 L2113.11 1205.32 L2113.7 1205.32 L2114.28 1205.32 L2114.87 1205.32 L2115.46 1205.32 L2116.04 1205.32 L2116.63 1205.32 L2117.22 1205.32 L2117.8 1205.32 L2118.39 1205.32 L2118.97 1205.32 L2119.56 1205.32 L2120.15 1205.32 L2120.73 1205.32 L2121.32 1205.32 L2121.91 1205.32 L2122.49 1205.32 L2123.08 1205.32 L2123.67 1205.32 L2124.25 1205.32 L2124.84 1205.32 L2125.42 1205.32 L2126.01 1205.32 L2126.6 1205.32 L2127.18 1205.32 L2127.77 1205.32 L2128.36 1205.32 L2128.94 1205.32 L2129.53 1205.32 L2130.12 1205.32 L2130.7 1205.32 L2131.29 1205.32 L2131.88 1205.32 L2132.46 1205.32 L2133.05 1205.32 L2133.63 1205.32 L2134.22 1205.32 L2134.81 1205.32 L2135.39 1205.32 L2135.98 1205.32 L2136.57 1205.32 L2137.15 1205.32 L2137.74 1205.32 L2138.33 1205.32 L2138.91 1205.32 L2139.5 1205.32 L2140.09 1205.32 L2140.67 1205.32 L2141.26 1205.32 L2141.84 1205.32 L2142.43 1205.32 L2143.02 1205.32 L2143.6 1205.32 L2144.19 1205.32 L2144.78 1205.32 L2145.36 1205.32 L2145.95 1205.32 L2146.54 1205.32 L2147.12 1205.32 L2147.71 1205.32 L2148.3 1205.32 L2148.88 1205.32 L2149.47 1205.32 L2150.05 1205.32 L2150.64 1205.32 L2151.23 1205.32 L2151.81 1205.32 L2152.4 1205.32 L2152.99 1205.32 L2153.57 1205.32 L2154.16 1205.32 L2154.75 1205.32 L2155.33 1205.32 L2155.92 1205.32 L2156.5 1205.32 L2157.09 1205.32 L2157.68 1205.32 L2158.26 1205.32 L2158.26 1204.71 L2157.68 1204.71 L2157.09 1204.71 L2156.5 1204.71 L2155.92 1204.71 L2155.33 1204.71 L2154.75 1204.71 L2154.16 1204.71 L2153.57 1204.71 L2152.99 1204.71 L2152.4 1204.71 L2151.81 1204.71 L2151.23 1204.71 L2150.64 1204.71 L2150.05 1204.71 L2149.47 1204.71 L2148.88 1204.71 L2148.3 1204.71 L2147.71 1204.71 L2147.12 1204.71 L2146.54 1204.71 L2145.95 1204.71 L2145.36 1204.71 L2144.78 1204.71 L2144.19 1204.71 L2143.6 1204.71 L2143.02 1204.71 L2142.43 1204.71 L2141.84 1204.71 L2141.26 1204.71 L2140.67 1204.71 L2140.09 1204.71 L2139.5 1204.71 L2138.91 1204.71 L2138.33 1204.71 L2137.74 1204.71 L2137.15 1204.71 L2136.57 1204.71 L2135.98 1204.71 L2135.39 1204.71 L2134.81 1204.71 L2134.22 1204.71 L2133.63 1204.71 L2133.05 1204.71 L2132.46 1204.71 L2131.88 1204.71 L2131.29 1204.71 L2130.7 1204.71 L2130.12 1204.71 L2129.53 1204.71 L2128.94 1204.71 L2128.36 1204.71 L2127.77 1204.71 L2127.18 1204.71 L2126.6 1204.71 L2126.01 1204.71 L2125.42 1204.71 L2124.84 1204.71 L2124.25 1204.71 L2123.67 1204.71 L2123.08 1204.71 L2122.49 1204.71 L2121.91 1204.71 L2121.32 1204.71 L2120.73 1204.71 L2120.15 1204.71 L2119.56 1204.71 L2118.97 1204.71 L2118.39 1204.71 L2117.8 1204.71 L2117.22 1204.71 L2116.63 1204.71 L2116.04 1204.71 L2115.46 1204.71 L2114.87 1204.71 L2114.28 1204.71 L2113.7 1204.71 L2113.11 1204.71 L2112.52 1204.71 L2111.94 1204.71 L2111.35 1204.71 L2110.76 1204.71 L2110.18 1204.71 L2109.59 1204.71 L2109.01 1204.71 L2108.42 1204.71 L2107.83 1204.71 L2107.25 1204.71 L2106.66 1204.71 L2106.07 1204.71 L2105.49 1204.71 L2104.9 1204.71 L2104.31 1204.71 L2103.73 1204.71 L2103.14 1204.71 L2102.55 1204.71 L2101.97 1204.71 L2101.38 1204.71 L2100.8 1204.71 L2100.21 1204.71 L2099.62 1204.71 L2099.04 1204.71 L2098.45 1204.71 L2097.86 1204.71 L2097.28 1204.71 L2096.69 1204.71 L2096.1 1204.71 L2095.52 1204.71 L2094.93 1204.71 L2094.35 1204.71 L2093.76 1204.71 L2093.17 1204.71 L2092.59 1204.71 L2092 1204.71 L2091.41 1204.71 L2090.83 1204.71 L2090.24 1204.71 L2089.65 1204.71 L2089.07 1204.71 L2088.48 1204.71 L2087.89 1204.71 L2087.31 1204.71 L2086.72 1204.71 L2086.14 1204.71 L2085.55 1204.71 L2084.96 1204.71 L2084.38 1204.71 L2083.79 1204.71 L2083.2 1204.71 L2082.62 1204.71 L2082.03 1204.71 L2081.44 1204.71 L2080.86 1204.71 L2080.27 1204.71 L2079.68 1204.71 L2079.1 1204.71 L2078.51 1204.71 L2077.93 1204.71 L2077.34 1204.71 L2076.75 1204.71 L2076.17 1204.71 L2075.58 1204.71 L2074.99 1204.71 L2074.41 1204.71 L2073.82 1204.71 L2073.23 1204.71 L2072.65 1204.71 L2072.06 1204.71 L2071.48 1204.71 L2070.89 1204.71 L2070.3 1204.71 L2069.72 1204.71 L2069.13 1204.71 L2068.54 1204.71 L2067.96 1204.71 L2067.37 1204.71 L2066.78 1204.71 L2066.2 1204.71 L2065.61 1204.71 L2065.02 1204.71 L2064.44 1204.71 L2063.85 1204.71 L2063.27 1204.71 L2062.68 1204.71 L2062.09 1204.71 L2061.51 1204.71 L2060.92 1204.71 L2060.33 1204.71 L2059.75 1204.71 L2059.16 1204.71 L2058.57 1204.71 L2057.99 1204.71 L2057.4 1204.71 L2056.81 1204.71 L2056.23 1204.71 L2055.64 1204.71 L2055.06 1204.71 L2054.47 1204.71 L2053.88 1204.71 L2053.3 1204.71 L2052.71 1204.71 L2052.12 1204.71 L2051.54 1204.71 L2050.95 1204.71 L2050.36 1204.71 L2049.78 1204.71 L2049.19 1204.71 L2048.6 1204.71 L2048.02 1204.71 L2047.43 1204.71 L2046.85 1204.71 L2046.26 1204.71 L2045.67 1204.71 L2045.09 1204.71 L2044.5 1204.71 L2043.91 1204.71 L2043.33 1204.71 L2042.74 1204.71 L2042.15 1204.71 L2041.57 1204.71 L2040.98 1204.71 L2040.4 1204.71 L2039.81 1204.71 L2039.22 1204.71 L2038.64 1204.71 L2038.05 1204.71 L2037.46 1204.71 L2036.88 1204.71 L2036.29 1204.71 L2035.7 1204.71 L2035.12 1204.71 L2034.53 1204.71 L2033.94 1204.71 L2033.36 1204.71 L2032.77 1204.71 L2032.19 1204.71 L2031.6 1204.71 L2031.01 1204.71 L2030.43 1204.71 L2029.84 1204.71 L2029.25 1204.71 L2028.67 1204.71 L2028.08 1204.71 L2027.49 1204.71 L2026.91 1204.71 L2026.32 1204.71 L2025.73 1204.71 L2025.15 1204.71 L2024.56 1204.71 L2023.98 1204.71 L2023.39 1204.71 L2022.8 1204.71 L2022.22 1204.71 L2021.63 1204.71 L2021.04 1204.71 L2020.46 1204.71 L2019.87 1204.71 L2019.28 1204.71 L2018.7 1204.71 L2018.11 1204.71 L2017.53 1204.71 L2016.94 1204.71 L2016.35 1204.71 L2015.77 1204.71 L2015.18 1204.71 L2014.59 1204.71 L2014.01 1204.71 L2013.42 1204.71 L2012.83 1204.71 L2012.25 1204.71 L2011.66 1204.71 L2011.07 1204.71 L2010.49 1204.71 L2009.9 1204.71 L2009.32 1204.71 L2008.73 1204.71 L2008.14 1204.71 L2007.56 1204.71 L2006.97 1204.71 L2006.38 1204.71 L2005.8 1204.71 L2005.21 1204.71 L2004.62 1204.71 L2004.04 1204.71 L2003.45 1204.71 L2002.86 1204.71 L2002.28 1204.71 L2001.69 1204.71 L2001.11 1204.71 L2000.52 1204.71 L1999.93 1204.71 L1999.35 1204.71 L1998.76 1204.71 L1998.17 1204.71 L1997.59 1204.71 L1997 1204.71 L1996.41 1204.71 L1995.83 1204.71 L1995.24 1204.71 L1994.65 1204.71 L1994.07 1204.71 L1993.48 1204.71 L1992.9 1204.71 L1992.31 1204.71 L1991.72 1204.71 L1991.14 1204.71 L1990.55 1204.71 L1989.96 1204.71 L1989.38 1204.71 L1988.79 1204.71 L1988.2 1204.71 L1987.62 1204.71 L1987.03 1204.71 L1986.45 1204.71 L1985.86 1204.71 L1985.27 1204.71 L1984.69 1204.71 L1984.1 1204.71 L1983.51 1204.71 L1982.93 1204.71 L1982.34 1204.71 L1981.75 1204.71 L1981.17 1204.71 L1980.58 1204.71 L1979.99 1204.71 L1979.41 1204.71 L1978.82 1204.71 L1978.24 1204.71 L1977.65 1204.71 L1977.06 1204.71 L1976.48 1204.71 L1975.89 1204.71 L1975.3 1204.71 L1974.72 1204.71 L1974.13 1204.71 L1973.54 1204.71 L1972.96 1204.71 L1972.37 1204.71 L1971.78 1204.71 L1971.2 1204.71 L1970.61 1204.71 L1970.03 1204.71 L1969.44 1204.71 L1968.85 1204.71 L1968.27 1204.71 L1967.68 1204.71 L1967.09 1204.71 L1966.51 1204.71 L1965.92 1204.71 L1965.33 1204.71 L1964.75 1204.71 L1964.16 1204.71 L1963.58 1204.71 L1962.99 1204.71 L1962.4 1204.71 L1961.82 1204.71 L1961.23 1204.71 L1960.64 1204.71 L1960.06 1204.71 L1959.47 1204.71 L1958.88 1204.71 L1958.3 1204.71 L1957.71 1204.71 L1957.12 1204.71 L1956.54 1204.71 L1955.95 1204.71 L1955.37 1204.71 L1954.78 1204.71 L1954.19 1204.71 L1953.61 1204.71 L1953.02 1204.71 L1952.43 1204.71 L1951.85 1204.71 L1951.26 1204.71 L1950.67 1204.71 L1950.09 1204.71 L1949.5 1204.71 L1948.91 1204.71 L1948.33 1204.71 L1947.74 1204.71 L1947.16 1204.71 L1946.57 1204.71 L1945.98 1204.71 L1945.4 1204.71 L1944.81 1204.71 L1944.22 1204.71 L1943.64 1204.71 L1943.05 1204.71 L1942.46 1204.71 L1941.88 1204.71 L1941.29 1204.71 L1940.71 1204.71 L1940.12 1204.71 L1939.53 1204.71 L1938.95 1204.71 L1938.36 1204.71 L1937.77 1204.71 L1937.19 1204.71 L1936.6 1204.71 L1936.01 1204.71 L1935.43 1204.71 L1934.84 1204.71 L1934.25 1204.71 L1933.67 1204.71 L1933.08 1204.71 L1932.5 1204.71 L1931.91 1204.71 L1931.32 1204.71 L1930.74 1204.71 L1930.15 1204.71 L1929.56 1204.71 L1928.98 1204.71 L1928.39 1204.71 L1927.8 1204.71 L1927.22 1204.71 L1926.63 1204.71 L1926.04 1204.71 L1925.46 1204.71 L1924.87 1204.71 L1924.29 1204.71 L1923.7 1204.71 L1923.11 1204.71 L1922.53 1204.71 L1921.94 1204.71 L1921.35 1204.71 L1920.77 1204.71 L1920.18 1204.71 L1919.59 1204.71 L1919.01 1204.71 L1918.42 1204.71 L1917.83 1204.71 L1917.25 1204.71 L1916.66 1204.71 L1916.08 1204.71 L1915.49 1204.71 L1914.9 1204.71 L1914.32 1204.71 L1913.73 1204.71 L1913.14 1204.71 L1912.56 1204.71 L1911.97 1204.71 L1911.38 1204.71 L1910.8 1204.71 L1910.21 1204.71 L1909.63 1204.71 L1909.04 1204.71 L1908.45 1204.71 L1907.87 1204.71 L1907.28 1204.71 L1906.69 1204.71 L1906.11 1204.71 L1905.52 1204.71 L1904.93 1204.71 L1904.35 1204.71 L1903.76 1204.71 L1903.17 1204.71 L1902.59 1204.71 L1902 1204.71 L1901.42 1204.71 L1900.83 1204.71 L1900.24 1204.71 L1899.66 1204.71 L1899.07 1204.71 L1898.48 1204.71 L1897.9 1204.71 L1897.31 1204.71 L1896.72 1204.71 L1896.14 1204.71 L1895.55 1204.71 L1894.96 1204.71 L1894.38 1204.71 L1893.79 1204.71 L1893.21 1204.71 L1892.62 1204.71 L1892.03 1204.71 L1891.45 1204.71 L1890.86 1204.71 L1890.27 1204.71 L1889.69 1204.71 L1889.1 1204.71 L1888.51 1204.71 L1887.93 1204.71 L1887.34 1204.71 L1886.76 1204.71 L1886.17 1204.71 L1885.58 1204.71 L1885 1204.71 L1884.41 1204.71 L1883.82 1204.71 L1883.24 1204.71 L1882.65 1204.71 L1882.06 1204.71 L1881.48 1204.71 L1880.89 1204.71 L1880.3 1204.71 L1879.72 1204.71 L1879.13 1204.71 L1878.55 1204.71 L1877.96 1204.71 L1877.37 1204.71 L1876.79 1204.71 L1876.2 1204.71 L1875.61 1204.71 L1875.03 1204.71 L1874.44 1204.71 L1873.85 1204.71 L1873.27 1204.71 L1872.68 1204.71 L1872.09 1204.71 L1871.51 1204.71 L1870.92 1204.71 L1870.34 1204.71 L1869.75 1204.71 L1869.16 1204.71 L1868.58 1204.71 L1867.99 1204.71 L1867.4 1204.71 L1866.82 1204.71 L1866.23 1204.71 L1865.64 1204.71 L1865.06 1204.71 L1864.47 1204.71 L1863.88 1204.71 L1863.3 1204.71 L1862.71 1204.71 L1862.13 1204.71 L1861.54 1204.71 L1860.95 1204.71 L1860.37 1204.71 L1859.78 1204.71 L1859.19 1204.71 L1858.61 1204.71 L1858.02 1204.71 L1857.43 1204.71 L1856.85 1204.71 L1856.26 1204.71 L1855.68 1204.71 L1855.09 1204.71 L1854.5 1204.71 L1853.92 1204.71 L1853.33 1204.71 L1852.74 1204.71 L1852.16 1204.71 L1851.57 1204.71 L1850.98 1204.71 L1850.4 1204.71 L1849.81 1204.71 L1849.22 1204.71 L1848.64 1204.71 L1848.05 1204.71 L1847.47 1204.71 L1846.88 1204.71 L1846.29 1204.71 L1845.71 1204.71 L1845.12 1204.71 L1844.53 1204.71 L1843.95 1204.71 L1843.36 1204.71 L1842.77 1204.71 L1842.19 1204.71 L1841.6 1204.71 L1841.01 1204.71 L1840.43 1204.71 L1839.84 1204.71 L1839.26 1204.71 L1838.67 1204.71 L1838.08 1204.71 L1837.5 1204.71 L1836.91 1204.71 L1836.32 1204.71 L1835.74 1204.71 L1835.15 1204.71 L1834.56 1204.71 L1833.98 1204.71 L1833.39 1204.71 L1832.81 1204.71 L1832.22 1204.71 L1831.63 1204.71 L1831.05 1204.71 L1830.46 1204.71 L1829.87 1204.71 L1829.29 1204.71 L1828.7 1204.71 L1828.11 1204.71 L1827.53 1204.71 L1826.94 1204.71 L1826.35 1204.71 L1825.77 1204.71 L1825.18 1204.71 L1824.6 1204.71 L1824.01 1204.71 L1823.42 1204.71 L1822.84 1204.71 L1822.25 1204.71 L1821.66 1204.71 L1821.08 1204.71 L1820.49 1204.71 L1819.9 1204.71 L1819.32 1204.71 L1818.73 1204.71 L1818.14 1204.71 L1817.56 1204.71 L1816.97 1204.71 L1816.39 1204.71 L1815.8 1204.71 L1815.21 1204.71 L1814.63 1204.71 L1814.04 1204.71 L1813.45 1204.71 L1812.87 1204.71 L1812.28 1204.71 L1811.69 1204.71 L1811.11 1204.71 L1810.52 1204.71 L1809.94 1204.71 L1809.35 1204.71 L1808.76 1204.71 L1808.18 1204.71 L1807.59 1204.71 L1807 1204.71 L1806.42 1204.71 L1805.83 1204.71 L1805.24 1204.71 L1804.66 1204.71 L1804.07 1204.71 L1803.48 1204.71 L1802.9 1204.71 L1802.31 1204.71 L1801.73 1204.71 L1801.14 1204.71 L1800.55 1204.71 L1799.97 1204.71 L1799.38 1204.71 L1798.79 1204.71 L1798.21 1204.71 L1797.62 1204.71 L1797.03 1204.71 L1796.45 1204.71 L1795.86 1204.71 L1795.27 1204.71 L1794.69 1204.71 L1794.1 1204.71 L1793.52 1204.71 L1792.93 1204.71 L1792.34 1204.71 L1791.76 1204.71 L1791.17 1204.71 L1790.58 1204.71 L1790 1204.71 L1789.41 1204.71 L1788.82 1204.71 L1788.24 1204.71 L1787.65 1204.71 L1787.06 1204.71 L1786.48 1204.71 L1785.89 1204.71 L1785.31 1204.71 L1784.72 1204.71 L1784.13 1204.71 L1783.55 1204.71 L1782.96 1204.71 L1782.37 1204.71 L1781.79 1204.71 L1781.2 1204.71 L1780.61 1204.71 L1780.03 1204.71 L1779.44 1204.71 L1778.86 1204.71 L1778.27 1204.71 L1777.68 1204.71 L1777.1 1204.71 L1776.51 1204.71 L1775.92 1204.71 L1775.34 1204.71 L1774.75 1204.71 L1774.16 1204.71 L1773.58 1204.71 L1772.99 1204.71 L1772.4 1204.71 L1771.82 1204.71 L1771.23 1204.71 L1770.65 1204.71 L1770.06 1204.71 L1769.47 1204.71 L1768.89 1204.71 L1768.3 1204.71 L1767.71 1204.71 L1767.13 1204.71 L1766.54 1204.71 L1765.95 1204.71 L1765.37 1204.71 L1764.78 1204.71 L1764.19 1204.71 L1763.61 1204.71 L1763.02 1204.71 L1762.44 1204.71 L1761.85 1204.71 L1761.26 1204.71 L1760.68 1204.71 L1760.09 1204.71 L1759.5 1204.71 L1758.92 1204.71 L1758.33 1204.71 L1757.74 1204.71 L1757.16 1204.71 L1756.57 1204.71 L1755.99 1204.71 L1755.4 1204.71 L1754.81 1204.71 L1754.23 1204.71 L1753.64 1204.71 L1753.05 1204.71 L1752.47 1204.71 L1751.88 1204.71 L1751.29 1204.71 L1750.71 1204.71 L1750.12 1204.71 L1749.53 1204.71 L1748.95 1204.71 L1748.36 1204.71 L1747.78 1204.71 L1747.19 1204.71 L1746.6 1204.71 L1746.02 1204.71 L1745.43 1204.71 L1744.84 1204.71 L1744.26 1204.71 L1743.67 1204.71 L1743.08 1204.71 L1742.5 1204.71 L1741.91 1204.71 L1741.32 1204.71 L1740.74 1204.71 L1740.15 1204.71 L1739.57 1204.71 L1738.98 1204.71 L1738.39 1204.71 L1737.81 1204.71 L1737.22 1204.71 L1736.63 1204.71 L1736.05 1204.71 L1735.46 1204.71 L1734.87 1204.71 L1734.29 1204.71 L1733.7 1204.71 L1733.11 1204.71 L1732.53 1204.71 L1731.94 1204.71 L1731.36 1204.71 L1730.77 1204.71 L1730.18 1204.71 L1729.6 1204.71 L1729.01 1204.71 L1728.42 1204.71 L1727.84 1204.71 L1727.25 1204.71 L1726.66 1204.71 L1726.08 1204.71 L1725.49 1204.71 L1724.91 1204.71 L1724.32 1204.71 L1723.73 1204.71 L1723.15 1204.71 L1722.56 1204.71 L1721.97 1204.71 L1721.39 1204.71 L1720.8 1204.71 L1720.21 1204.71 L1719.63 1204.71 L1719.04 1204.71 L1718.45 1204.71 L1717.87 1204.71 L1717.28 1204.71 L1716.7 1204.71 L1716.11 1204.71 L1715.52 1204.71 L1714.94 1204.71 L1714.35 1204.71 L1713.76 1204.71 L1713.18 1204.71 L1712.59 1204.71 L1712 1204.71 L1711.42 1204.71 L1710.83 1204.71 L1710.24 1204.71 L1709.66 1204.71 L1709.07 1204.71 L1708.49 1204.71 L1707.9 1204.71 L1707.31 1204.71 L1706.73 1204.71 L1706.14 1204.71 L1705.55 1204.71 L1704.97 1204.71 L1704.38 1204.71 L1703.79 1204.71 L1703.21 1204.71 L1702.62 1204.71 L1702.04 1204.71 L1701.45 1204.71 L1700.86 1204.71 L1700.28 1204.71 L1699.69 1204.71 L1699.1 1204.71 L1698.52 1204.71 L1697.93 1204.71 L1697.34 1204.71 L1696.76 1204.71 L1696.17 1204.71 L1695.58 1204.71 L1695 1204.71 L1694.41 1204.71 L1693.83 1204.71 L1693.24 1204.71 L1692.65 1204.71 L1692.07 1204.71 L1691.48 1204.71 L1690.89 1204.71 L1690.31 1204.71 L1689.72 1204.71 L1689.13 1204.71 L1688.55 1204.71 L1687.96 1204.71 L1687.37 1204.71 L1686.79 1204.71 L1686.2 1204.71 L1685.62 1204.71 L1685.03 1204.71 L1684.44 1204.71 L1683.86 1204.71 L1683.27 1204.71 L1682.68 1204.71 L1682.1 1204.71 L1681.51 1204.71 L1680.92 1204.71 L1680.34 1204.71 L1679.75 1204.71 L1679.17 1204.71 L1678.58 1204.71 L1677.99 1204.71 L1677.41 1204.71 L1676.82 1204.71 L1676.23 1204.71 L1675.65 1204.71 L1675.06 1204.71 L1674.47 1204.71 L1673.89 1204.71 L1673.3 1204.71 L1672.71 1204.71 L1672.13 1204.71 L1671.54 1204.71 L1670.96 1204.71 L1670.37 1204.71 L1669.78 1204.71 L1669.2 1204.71 L1668.61 1204.71 L1668.02 1204.71 L1667.44 1204.71 L1666.85 1204.71 L1666.26 1204.71 L1665.68 1204.71 L1665.09 1204.71 L1664.5 1204.71 L1663.92 1204.71 L1663.33 1204.71 L1662.75 1204.71 L1662.16 1204.71 L1661.57 1204.71 L1660.99 1204.71 L1660.4 1204.71 L1659.81 1204.71 L1659.23 1204.71 L1658.64 1204.71 L1658.05 1204.71 L1657.47 1204.71 L1656.88 1204.71 L1656.29 1204.71 L1655.71 1204.71 L1655.12 1204.71 L1654.54 1204.71 L1653.95 1204.71 L1653.36 1204.71 L1652.78 1204.71 L1652.19 1204.71 L1651.6 1204.71 L1651.02 1204.71 L1650.43 1204.71 L1649.84 1204.71 L1649.26 1204.71 L1648.67 1204.71 L1648.09 1204.71 L1647.5 1204.71 L1646.91 1204.71 L1646.33 1204.71 L1645.74 1204.71 L1645.15 1204.71 L1644.57 1204.71 L1643.98 1204.71 L1643.39 1204.71 L1642.81 1204.71 L1642.22 1204.71 L1641.63 1204.71 L1641.05 1204.71 L1640.46 1204.71 L1639.88 1204.71 L1639.29 1204.71 L1638.7 1204.71 L1638.12 1204.71 L1637.53 1204.71 L1636.94 1204.71 L1636.36 1204.71 L1635.77 1204.71 L1635.18 1204.71 L1634.6 1204.71 L1634.01 1204.71 L1633.42 1204.71 L1632.84 1204.71 L1632.25 1204.71 L1631.67 1204.71 L1631.08 1204.71 L1630.49 1204.71 L1629.91 1204.71 L1629.32 1204.71 L1628.73 1204.71 L1628.15 1204.71 L1627.56 1204.71 L1626.97 1204.71 L1626.39 1204.71 L1625.8 1204.71 L1625.22 1204.71 L1624.63 1204.71 L1624.04 1204.71 L1623.46 1204.71 L1622.87 1204.71 L1622.28 1204.71 L1621.7 1204.71 L1621.11 1204.71 L1620.52 1204.71 L1619.94 1204.71 L1619.35 1204.71 L1618.76 1204.71 L1618.18 1204.71 L1617.59 1204.71 L1617.01 1204.71 L1616.42 1204.71 L1615.83 1204.71 L1615.25 1204.71 L1614.66 1204.71 L1614.07 1204.71 L1613.49 1204.71 L1612.9 1204.71 L1612.31 1204.71 L1611.73 1204.71 L1611.14 1204.71 L1610.55 1204.71 L1609.97 1204.71 L1609.38 1204.71 L1608.8 1204.71 L1608.21 1204.71 L1607.62 1204.71 L1607.04 1204.71 L1606.45 1204.71 L1605.86 1204.71 L1605.28 1204.71 L1604.69 1204.71 L1604.1 1204.71 L1603.52 1204.71 L1602.93 1204.71 L1602.34 1204.71 L1601.76 1204.71 L1601.17 1204.71 L1600.59 1204.71 L1600 1204.71 L1599.41 1204.71 L1598.83 1204.71 L1598.24 1204.71 L1597.65 1204.71 L1597.07 1204.71 L1596.48 1204.71 L1595.89 1204.71 L1595.31 1204.71 L1594.72 1204.71 L1594.14 1204.71 L1593.55 1204.71 L1592.96 1204.71 L1592.38 1204.71 L1591.79 1204.71 L1591.2 1204.71 L1590.62 1204.71 L1590.03 1204.71 L1589.44 1204.71 L1588.86 1204.71 L1588.27 1204.71 L1587.68 1204.71 L1587.1 1204.71 L1586.51 1204.71 L1585.93 1204.71 L1585.34 1204.71 L1584.75 1204.71 L1584.17 1204.71 L1583.58 1204.71 L1582.99 1204.71 L1582.41 1204.71 L1581.82 1204.71 L1581.23 1204.71 L1580.65 1204.71 L1580.06 1204.71 L1579.47 1204.71 L1578.89 1204.71 L1578.3 1204.71 L1577.72 1204.71 L1577.13 1204.71 L1576.54 1204.71 L1575.96 1204.71 L1575.37 1204.71 L1574.78 1204.71 L1574.2 1204.71 L1573.61 1204.71 L1573.02 1204.71 L1572.44 1204.71 L1571.85 1204.71 L1571.27 1204.71 L1570.68 1204.71 L1570.09 1204.71 L1569.51 1204.71 L1568.92 1204.71 L1568.33 1204.71 L1567.75 1204.71 L1567.16 1204.71 L1566.57 1204.71 L1565.99 1204.71 L1565.4 1204.71 L1564.81 1204.71 L1564.23 1204.71 L1563.64 1204.71 L1563.06 1204.71 L1562.47 1204.71 L1561.88 1204.71 L1561.3 1204.71 L1560.71 1204.71 L1560.12 1204.71 L1559.54 1204.71 L1558.95 1204.71 L1558.36 1204.71 L1557.78 1204.71 L1557.19 1204.71 L1556.6 1204.71 L1556.02 1204.71 L1555.43 1204.71 L1554.85 1204.71 L1554.26 1204.71 L1553.67 1204.71 L1553.09 1204.71 L1552.5 1204.71 L1551.91 1204.71 L1551.33 1204.71 L1550.74 1204.71 L1550.15 1204.71 L1549.57 1204.71 L1548.98 1204.71 L1548.4 1204.71 L1547.81 1204.71 L1547.22 1204.71 L1546.64 1204.71 L1546.05 1204.71 L1545.46 1204.71 L1544.88 1204.71 L1544.29 1204.71 L1543.7 1204.71 L1543.12 1204.71 L1542.53 1204.71 L1541.94 1204.71 L1541.36 1204.71 L1540.77 1204.71 L1540.19 1204.71 L1539.6 1204.71 L1539.01 1204.71 L1538.43 1204.71 L1537.84 1204.71 L1537.25 1204.71 L1536.67 1204.71 L1536.08 1204.71 L1535.49 1204.71 L1534.91 1204.71 L1534.32 1204.71 L1533.73 1204.71 L1533.15 1204.71 L1532.56 1204.71 L1531.98 1204.71 L1531.39 1204.71 L1530.8 1204.71 L1530.22 1204.71 L1529.63 1204.71 L1529.04 1204.71 L1528.46 1204.71 L1527.87 1204.71 L1527.28 1204.71 L1526.7 1204.71 L1526.11 1204.71 L1525.52 1204.71 L1524.94 1204.71 L1524.35 1204.71 L1523.77 1204.71 L1523.18 1204.71 L1522.59 1204.71 L1522.01 1204.71 L1521.42 1204.71 L1520.83 1204.71 L1520.25 1204.71 L1519.66 1204.71 L1519.07 1204.71 L1518.49 1204.71 L1517.9 1204.71 L1517.32 1204.71 L1516.73 1204.71 L1516.14 1204.71 L1515.56 1204.71 L1514.97 1204.71 L1514.38 1204.71 L1513.8 1204.71 L1513.21 1204.71 L1512.62 1204.71 L1512.04 1204.71 L1511.45 1204.71 L1510.86 1204.71 L1510.28 1204.71 L1509.69 1204.71 L1509.11 1204.71 L1508.52 1204.71 L1507.93 1204.71 L1507.35 1204.71 L1506.76 1204.71 L1506.17 1204.71 L1505.59 1204.71 L1505 1204.71 L1504.41 1204.71 L1503.83 1204.71 L1503.24 1204.71 L1502.65 1204.71 L1502.07 1204.71 L1501.48 1204.71 L1500.9 1204.71 L1500.31 1204.71 L1499.72 1204.71 L1499.14 1204.71 L1498.55 1204.71 L1497.96 1204.71 L1497.38 1204.71 L1496.79 1204.71 L1496.2 1204.71 L1495.62 1204.71 L1495.03 1204.71 L1494.45 1204.71 L1493.86 1204.71 L1493.27 1204.71 L1492.69 1204.71 L1492.1 1204.71 L1491.51 1204.71 L1490.93 1204.71 L1490.34 1204.71 L1489.75 1204.71 L1489.17 1204.71 L1488.58 1204.71 L1487.99 1204.71 L1487.41 1204.71 L1486.82 1204.71 L1486.24 1204.71 L1485.65 1204.71 L1485.06 1204.71 L1484.48 1204.71 L1483.89 1204.71 L1483.3 1204.71 L1482.72 1204.71 L1482.13 1204.71 L1481.54 1204.71 L1480.96 1204.71 L1480.37 1204.71 L1479.78 1204.71 L1479.2 1204.71 L1478.61 1204.71 L1478.03 1204.71 L1477.44 1204.71 L1476.85 1204.71 L1476.27 1204.71 L1475.68 1204.71 L1475.09 1204.71 L1474.51 1204.71 L1473.92 1204.71 L1473.33 1204.71 L1472.75 1204.71 L1472.16 1204.71 L1471.57 1204.71 L1470.99 1204.71 L1470.4 1204.71 L1469.82 1204.71 L1469.23 1204.71 L1468.64 1204.71 L1468.06 1204.71 L1467.47 1204.71 L1466.88 1204.71 L1466.3 1204.71 L1465.71 1204.71 L1465.12 1204.71 L1464.54 1204.71 L1463.95 1204.71 L1463.37 1204.71 L1462.78 1204.71 L1462.19 1204.71 L1461.61 1204.71 L1461.02 1204.71 L1460.43 1204.71 L1459.85 1204.71 L1459.26 1204.71 L1458.67 1204.71 L1458.09 1204.71 L1457.5 1204.71 L1456.91 1204.71 L1456.33 1204.71 L1455.74 1204.71 L1455.16 1204.71 L1454.57 1204.71 L1453.98 1204.71 L1453.4 1204.71 L1452.81 1204.71 L1452.22 1204.71 L1451.64 1204.71 L1451.05 1204.71 L1450.46 1204.71 L1449.88 1204.71 L1449.29 1204.71 L1448.7 1204.71 L1448.12 1204.71 L1447.53 1204.71 L1446.95 1204.71 L1446.36 1204.71 L1445.77 1204.71 L1445.19 1204.71 L1444.6 1204.71 L1444.01 1204.71 L1443.43 1204.71 L1442.84 1204.71 L1442.25 1204.71 L1441.67 1204.71 L1441.08 1204.71 L1440.5 1204.71 L1439.91 1204.71 L1439.32 1204.71 L1438.74 1204.71 L1438.15 1204.71 L1437.56 1204.71 L1436.98 1204.71 L1436.39 1204.71 L1435.8 1204.71 L1435.22 1204.71 L1434.63 1204.71 L1434.04 1204.71 L1433.46 1204.71 L1432.87 1204.71 L1432.29 1204.71 L1431.7 1204.71 L1431.11 1204.71 L1430.53 1204.71 L1429.94 1204.71 L1429.35 1204.71 L1428.77 1204.71 L1428.18 1204.71 L1427.59 1204.71 L1427.01 1204.71 L1426.42 1204.71 L1425.83 1204.71 L1425.25 1204.71 L1424.66 1204.71 L1424.08 1204.71 L1423.49 1204.71 L1422.9 1204.71 L1422.32 1204.71 L1421.73 1204.71 L1421.14 1204.71 L1420.56 1204.71 L1419.97 1204.71 L1419.38 1204.71 L1418.8 1204.71 L1418.21 1204.71 L1417.63 1204.71 L1417.04 1204.71 L1416.45 1204.71 L1415.87 1204.71 L1415.28 1204.71 L1414.69 1204.71 L1414.11 1204.71 L1413.52 1204.71 L1412.93 1204.71 L1412.35 1204.71 L1411.76 1204.71 L1411.17 1204.71 L1410.59 1204.71 L1410 1204.71 L1409.42 1204.71 L1408.83 1204.71 L1408.24 1204.71 L1407.66 1204.71 L1407.07 1204.71 L1406.48 1204.71 L1405.9 1204.71 L1405.31 1204.71 L1404.72 1204.71 L1404.14 1204.71 L1403.55 1204.71 L1402.96 1204.71 L1402.38 1204.71 L1401.79 1204.71 L1401.21 1204.71 L1400.62 1204.71 L1400.03 1204.71 L1399.45 1204.71 L1398.86 1204.71 L1398.27 1204.71 L1397.69 1204.71 L1397.1 1204.71 L1396.51 1204.71 L1395.93 1204.71 L1395.34 1204.71 L1394.75 1204.71 L1394.17 1204.71 L1393.58 1204.71 L1393 1204.71 L1392.41 1204.71 L1391.82 1204.71 L1391.24 1204.71 L1390.65 1204.71 L1390.06 1204.71 L1389.48 1204.71 L1388.89 1204.71 L1388.3 1204.71 L1387.72 1204.71 L1387.13 1204.71 L1386.55 1204.71 L1385.96 1204.71 L1385.37 1204.71 L1384.79 1204.71 L1384.2 1204.71 L1383.61 1204.71 L1383.03 1204.71 L1382.44 1204.71 L1381.85 1204.71 L1381.27 1204.71 L1380.68 1204.71 L1380.09 1204.71 L1379.51 1204.71 L1378.92 1204.71 L1378.34 1204.71 L1377.75 1204.71 L1377.16 1204.71 L1376.58 1204.71 L1375.99 1204.71 L1375.4 1204.71 L1374.82 1204.71 L1374.23 1204.71 L1373.64 1204.71 L1373.06 1204.71 L1372.47 1204.71 L1371.88 1204.71 L1371.3 1204.71 L1370.71 1204.71 L1370.13 1204.71 L1369.54 1204.71 L1368.95 1204.71 L1368.37 1204.71 L1367.78 1204.71 L1367.19 1204.71 L1366.61 1204.71 L1366.02 1204.71 L1365.43 1204.71 L1364.85 1204.71 L1364.26 1204.71 L1363.68 1204.71 L1363.09 1204.71 L1362.5 1204.71 L1361.92 1204.71 L1361.33 1204.71 L1360.74 1204.71 L1360.16 1204.71 L1359.57 1204.71 L1358.98 1204.71 L1358.4 1204.71 L1357.81 1204.71 L1357.22 1204.71 L1356.64 1204.71 L1356.05 1204.71 L1355.47 1204.71 L1354.88 1204.71 L1354.29 1204.71 L1353.71 1204.71 L1353.12 1204.71 L1352.53 1204.71 L1351.95 1204.71 L1351.36 1204.71 L1350.77 1204.71 L1350.19 1204.71 L1349.6 1204.71 L1349.01 1204.71 L1348.43 1204.71 L1347.84 1204.71 L1347.26 1204.71 L1346.67 1204.71 L1346.08 1204.71 L1345.5 1204.71 L1344.91 1204.71 L1344.32 1204.71 L1343.74 1204.71 L1343.15 1204.71 L1342.56 1204.71 L1341.98 1204.71 L1341.39 1204.71 L1340.8 1204.71 L1340.22 1204.71 L1339.63 1204.71 L1339.05 1204.71 L1338.46 1204.71 L1337.87 1204.71 L1337.29 1204.71 L1336.7 1204.71 L1336.11 1204.71 L1335.53 1204.71 L1334.94 1204.71 L1334.35 1204.71 L1333.77 1204.71 L1333.18 1204.71 L1332.6 1204.71 L1332.01 1204.71 L1331.42 1204.71 L1330.84 1204.71 L1330.25 1204.71 L1329.66 1204.71 L1329.08 1204.71 L1328.49 1204.71 L1327.9 1204.71 L1327.32 1204.71 L1326.73 1204.71 L1326.14 1204.71 L1325.56 1204.71 L1324.97 1204.71 L1324.39 1204.71 L1323.8 1204.71 L1323.21 1204.71 L1322.63 1204.71 L1322.04 1204.71 L1321.45 1204.71 L1320.87 1204.71 L1320.28 1204.71 L1319.69 1204.71 L1319.11 1204.71 L1318.52 1204.71 L1317.93 1204.71 L1317.35 1204.71 L1316.76 1204.71 L1316.18 1204.71 L1315.59 1204.71 L1315 1204.71 L1314.42 1204.71 L1313.83 1204.71 L1313.24 1204.71 L1312.66 1204.71 L1312.07 1204.71 L1311.48 1204.71 L1310.9 1204.71 L1310.31 1204.71 L1309.73 1204.71 L1309.14 1204.71 L1308.55 1204.71 L1307.97 1204.71 L1307.38 1204.71 L1306.79 1204.71 L1306.21 1204.71 L1305.62 1204.71 L1305.03 1204.71 L1304.45 1204.71 L1303.86 1204.71 L1303.27 1204.71 L1302.69 1204.71 L1302.1 1204.71 L1301.52 1204.71 L1300.93 1204.71 L1300.34 1204.71 L1299.76 1204.71 L1299.17 1204.71 L1298.58 1204.71 L1298 1204.71 L1297.41 1204.71 L1296.82 1204.71 L1296.24 1204.71 L1295.65 1204.71 L1295.06 1204.71 L1294.48 1204.71 L1293.89 1204.71 L1293.31 1204.71 L1292.72 1204.71 L1292.13 1204.71 L1291.55 1204.71 L1290.96 1204.71 L1290.37 1204.71 L1289.79 1204.71 L1289.2 1204.71 L1288.61 1204.71 L1288.03 1204.71 L1287.44 1204.71 L1286.86 1204.71 L1286.27 1204.71 L1285.68 1204.71 L1285.1 1204.71 L1284.51 1204.71 L1283.92 1204.71 L1283.34 1204.71 L1282.75 1204.71 L1282.16 1204.71 L1281.58 1204.71 L1280.99 1204.71 L1280.4 1204.71 L1279.82 1204.71 L1279.23 1204.71 L1278.65 1204.71 L1278.06 1204.71 L1277.47 1204.71 L1276.89 1204.71 L1276.3 1204.71 L1275.71 1204.71 L1275.13 1204.71 L1274.54 1204.71 L1273.95 1204.71 L1273.37 1204.71 L1272.78 1204.71 L1272.19 1204.71 L1271.61 1204.71 L1271.02 1204.71 L1270.44 1204.71 L1269.85 1204.71 L1269.26 1204.71 L1268.68 1204.71 L1268.09 1204.71 L1267.5 1204.71 L1266.92 1204.71 L1266.33 1204.71 L1265.74 1204.71 L1265.16 1204.71 L1264.57 1204.71 L1263.98 1204.71 L1263.4 1204.71 L1262.81 1204.71 L1262.23 1204.71 L1261.64 1204.71 L1261.05 1204.71 L1260.47 1204.71 L1259.88 1204.71 L1259.29 1204.71 L1258.71 1204.71 L1258.12 1204.71 L1257.53 1204.71 L1256.95 1204.71 L1256.36 1204.71 L1255.78 1204.71 L1255.19 1204.71 L1254.6 1204.71 L1254.02 1204.71 L1253.43 1204.71 L1252.84 1204.71 L1252.26 1204.71 L1251.67 1204.71 L1251.08 1204.71 L1250.5 1204.71 L1249.91 1204.71 L1249.32 1204.71 L1248.74 1204.71 L1248.15 1204.71 L1247.57 1204.71 L1246.98 1204.71 L1246.39 1204.71 L1245.81 1204.71 L1245.22 1204.71 L1244.63 1204.71 L1244.05 1204.71 L1243.46 1204.71 L1242.87 1204.71 L1242.29 1204.71 L1241.7 1204.71 L1241.11 1204.71 L1240.53 1204.71 L1239.94 1204.71 L1239.36 1204.71 L1238.77 1204.71 L1238.18 1204.71 L1237.6 1204.71 L1237.01 1204.71 L1236.42 1204.71 L1235.84 1204.71 L1235.25 1204.71 L1234.66 1204.71 L1234.08 1204.71 L1233.49 1204.71 L1232.91 1204.71 L1232.32 1204.71 L1231.73 1204.71 L1231.15 1204.71 L1230.56 1204.71 L1229.97 1204.71 L1229.39 1204.71 L1228.8 1204.71 L1228.21 1204.71 L1227.63 1204.71 L1227.04 1204.71 L1226.45 1204.71 L1225.87 1204.71 L1225.28 1204.71 L1224.7 1204.71 L1224.11 1204.71 L1223.52 1204.71 L1222.94 1204.71 L1222.35 1204.71 L1221.76 1204.71 L1221.18 1204.71 L1220.59 1204.71 L1220 1204.71 L1219.42 1204.71 L1218.83 1204.71 L1218.24 1204.71 L1217.66 1204.71 L1217.07 1204.71 L1216.49 1204.71 L1215.9 1204.71 L1215.31 1204.71 L1214.73 1204.71 L1214.14 1204.71 L1213.55 1204.71 L1212.97 1204.71 L1212.38 1204.71 L1211.79 1204.71 L1211.21 1204.71 L1210.62 1204.71 L1210.03 1204.71 L1209.45 1204.71 L1208.86 1204.71 L1208.28 1204.71 L1207.69 1204.71 L1207.1 1204.71 L1206.52 1204.71 L1205.93 1204.71 L1205.34 1204.71 L1204.76 1204.71 L1204.17 1204.71 L1203.58 1204.71 L1203 1204.71 L1202.41 1204.71 L1201.83 1204.71 L1201.24 1204.71 L1200.65 1204.71 L1200.07 1204.71 L1199.48 1204.71 L1198.89 1204.71 L1198.31 1204.71 L1197.72 1204.71 L1197.13 1204.71 L1196.55 1204.71 L1195.96 1204.71 L1195.37 1204.71 L1194.79 1204.71 L1194.2 1204.71 L1193.62 1204.71 L1193.03 1204.71 L1192.44 1204.71 L1191.86 1204.71 L1191.27 1204.71 L1190.68 1204.71 L1190.1 1204.71 L1189.51 1204.71 L1188.92 1204.71 L1188.34 1204.71 L1187.75 1204.71 L1187.16 1204.71 L1186.58 1204.71 L1185.99 1204.71 L1185.41 1204.71 L1184.82 1204.71 L1184.23 1204.71 L1183.65 1204.71 L1183.06 1204.71 L1182.47 1204.71 L1181.89 1204.71 L1181.3 1204.71 L1180.71 1204.71 L1180.13 1204.71 L1179.54 1204.71 L1178.96 1204.71 L1178.37 1204.71 L1177.78 1204.71 L1177.2 1204.71 L1176.61 1204.71 L1176.02 1204.71 L1175.44 1204.71 L1174.85 1204.71 L1174.26 1204.71 L1173.68 1204.71 L1173.09 1204.71 L1172.5 1204.71 L1171.92 1204.71 L1171.33 1204.71 L1170.75 1204.71 L1170.16 1204.71 L1169.57 1204.71 L1168.99 1204.71 L1168.4 1204.71 L1167.81 1204.71 L1167.23 1204.71 L1166.64 1204.71 L1166.05 1204.71 L1165.47 1204.71 L1164.88 1204.71 L1164.29 1204.71 L1163.71 1204.71 L1163.12 1204.71 L1162.54 1204.71 L1161.95 1204.71 L1161.36 1204.71 L1160.78 1204.71 L1160.19 1204.71 L1159.6 1204.71 L1159.02 1204.71 L1158.43 1204.71 L1157.84 1204.71 L1157.26 1204.71 L1156.67 1204.71 L1156.09 1204.71 L1155.5 1204.71 L1154.91 1204.71 L1154.33 1204.71 L1153.74 1204.71 L1153.15 1204.71 L1152.57 1204.71 L1151.98 1204.71 L1151.39 1204.71 L1150.81 1204.71 L1150.22 1204.71 L1149.63 1204.71 L1149.05 1204.71 L1148.46 1204.71 L1147.88 1204.71 L1147.29 1204.71 L1146.7 1204.71 L1146.12 1204.71 L1145.53 1204.71 L1144.94 1204.71 L1144.36 1204.71 L1143.77 1204.71 L1143.18 1204.71 L1142.6 1204.71 L1142.01 1204.71 L1141.42 1204.71 L1140.84 1204.71 L1140.25 1204.71 L1139.67 1204.71 L1139.08 1204.71 L1138.49 1204.71 L1137.91 1204.71 L1137.32 1204.71 L1136.73 1204.71 L1136.15 1204.71 L1135.56 1204.71 L1134.97 1204.71 L1134.39 1204.71 L1133.8 1204.71 L1133.21 1204.71 L1132.63 1204.71 L1132.04 1204.71 L1131.46 1204.71 L1130.87 1204.71 L1130.28 1204.71 L1129.7 1204.71 L1129.11 1204.71 L1128.52 1204.71 L1127.94 1204.71 L1127.35 1204.71 L1126.76 1204.71 L1126.18 1204.71 L1125.59 1204.71 L1125.01 1204.71 L1124.42 1204.71 L1123.83 1204.71 L1123.25 1204.71 L1122.66 1204.71 L1122.07 1204.71 L1121.49 1204.71 L1120.9 1204.71 L1120.31 1204.71 L1119.73 1204.71 L1119.14 1204.71 L1118.55 1204.71 L1117.97 1204.71 L1117.38 1204.71 L1116.8 1204.71 L1116.21 1204.71 L1115.62 1204.71 L1115.04 1204.71 L1114.45 1204.71 L1113.86 1204.71 L1113.28 1204.71 L1112.69 1204.71 L1112.1 1204.71 L1111.52 1204.71 L1110.93 1204.71 L1110.34 1204.71 L1109.76 1204.71 L1109.17 1204.71 L1108.59 1204.71 L1108 1204.71 L1107.41 1204.71 L1106.83 1204.71 L1106.24 1204.71 L1105.65 1204.71 L1105.07 1204.71 L1104.48 1204.71 L1103.89 1204.71 L1103.31 1204.71 L1102.72 1204.71 L1102.14 1204.71 L1101.55 1204.71 L1100.96 1204.71 L1100.38 1204.71 L1099.79 1204.71 L1099.2 1204.71 L1098.62 1204.71 L1098.03 1204.71 L1097.44 1204.71 L1096.86 1204.71 L1096.27 1204.71 L1095.68 1204.71 L1095.1 1204.71 L1094.51 1204.71 L1093.93 1204.71 L1093.34 1204.71 L1092.75 1204.71 L1092.17 1204.71 L1091.58 1204.71 L1090.99 1204.71 L1090.41 1204.71 L1089.82 1204.71 L1089.23 1204.71 L1088.65 1204.71 L1088.06 1204.71 L1087.47 1204.71 L1086.89 1204.71 L1086.3 1204.71 L1085.72 1204.71 L1085.13 1204.71 L1084.54 1204.71 L1083.96 1204.71 L1083.37 1204.71 L1082.78 1204.71 L1082.2 1204.71 L1081.61 1204.71 L1081.02 1204.71 L1080.44 1204.71 L1079.85 1204.71 L1079.26 1204.71 L1078.68 1204.71 L1078.09 1204.71 L1077.51 1204.71 L1076.92 1204.71 L1076.33 1204.71 L1075.75 1204.71 L1075.16 1204.71 L1074.57 1204.71 L1073.99 1204.71 L1073.4 1204.71 L1072.81 1204.71 L1072.23 1204.71 L1071.64 1204.71 L1071.06 1204.71 L1070.47 1204.71 L1069.88 1204.71 L1069.3 1204.71 L1068.71 1204.71 L1068.12 1204.71 L1067.54 1204.71 L1066.95 1204.71 L1066.36 1204.71 L1065.78 1204.71 L1065.19 1204.71 L1064.6 1204.71 L1064.02 1204.71 L1063.43 1204.71 L1062.85 1204.71 L1062.26 1204.71 L1061.67 1204.71 L1061.09 1204.71 L1060.5 1204.71 L1059.91 1204.71 L1059.33 1204.71 L1058.74 1204.71 L1058.15 1204.71 L1057.57 1204.71 L1056.98 1204.71 L1056.39 1204.71 L1055.81 1204.71 L1055.22 1204.71 L1054.64 1204.71 L1054.05 1204.71 L1053.46 1204.71 L1052.88 1204.71 L1052.29 1204.71 L1051.7 1204.71 L1051.12 1204.71 L1050.53 1204.71 L1049.94 1204.71 L1049.36 1204.71 L1048.77 1204.71 L1048.19 1204.71 L1047.6 1204.71 L1047.01 1204.71 L1046.43 1204.71 L1045.84 1204.71 L1045.25 1204.71 L1044.67 1204.71 L1044.08 1204.71 L1043.49 1204.71 L1042.91 1204.71 L1042.32 1204.71 L1041.73 1204.71 L1041.15 1204.71 L1040.56 1204.71 L1039.98 1204.71 L1039.39 1204.71 L1038.8 1204.71 L1038.22 1204.71 L1037.63 1204.71 L1037.04 1204.71 L1036.46 1204.71 L1035.87 1204.71 L1035.28 1204.71 L1034.7 1204.71 L1034.11 1204.71 L1033.52 1204.71 L1032.94 1204.71 L1032.35 1204.71 L1031.77 1204.71 L1031.18 1204.71 L1030.59 1204.71 L1030.01 1204.71 L1029.42 1204.71 L1028.83 1204.71 L1028.25 1204.71 L1027.66 1204.71 L1027.07 1204.71 L1026.49 1204.71 L1025.9 1204.71 L1025.32 1204.71 L1024.73 1204.71 L1024.14 1204.71 L1023.56 1204.71 L1022.97 1204.71 L1022.38 1204.71 L1021.8 1204.71 L1021.21 1204.71 L1020.62 1204.71 L1020.04 1204.71 L1019.45 1204.71 L1018.86 1204.71 L1018.28 1204.71 L1017.69 1204.71 L1017.11 1204.71 L1016.52 1204.71 L1015.93 1204.71 L1015.35 1204.71 L1014.76 1204.71 L1014.17 1204.71 L1013.59 1204.71 L1013 1204.71 L1012.41 1204.71 L1011.83 1204.71 L1011.24 1204.71 L1010.65 1204.71 L1010.07 1204.71 L1009.48 1204.71 L1008.9 1204.71 L1008.31 1204.71 L1007.72 1204.71 L1007.14 1204.71 L1006.55 1204.71 L1005.96 1204.71 L1005.38 1204.71 L1004.79 1204.71 L1004.2 1204.71 L1003.62 1204.71 L1003.03 1204.71 L1002.44 1204.71 L1001.86 1204.71 L1001.27 1204.71 L1000.69 1204.71 L1000.1 1204.71 L999.513 1204.71 L998.926 1204.71 L998.34 1204.71 L997.754 1204.71 L997.167 1204.71 L996.581 1204.71 L995.994 1204.71 L995.408 1204.71 L994.822 1204.71 L994.235 1204.71 L993.649 1204.71 L993.062 1204.71 L992.476 1204.71 L991.889 1204.71 L991.303 1204.71 L990.717 1204.71 L990.13 1204.71 L989.544 1204.71 L988.957 1204.71 L988.371 1204.71 L987.785 1204.71 L987.198 1204.71 L986.612 1204.71 L986.025 1204.71  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1205.01 986.612,1205.01 987.198,1205.01 987.785,1205.01 988.371,1205.01 988.957,1205.01 989.544,1205.01 990.13,1205.01 990.717,1205.01 991.303,1205.01 991.889,1205.01 992.476,1205.01 993.062,1205.01 993.649,1205.01 994.235,1205.01 994.822,1205.01 995.408,1205.01 995.994,1205.01 996.581,1205.01 997.167,1205.01 997.754,1205.01 998.34,1205.01 998.926,1205.01 999.513,1205.01 1000.1,1205.01 1000.69,1205.01 1001.27,1205.01 1001.86,1205.01 1002.44,1205.01 1003.03,1205.01 1003.62,1205.01 1004.2,1205.01 1004.79,1205.01 1005.38,1205.01 1005.96,1205.01 1006.55,1205.01 1007.14,1205.01 1007.72,1205.01 1008.31,1205.01 1008.9,1205.01 1009.48,1205.01 1010.07,1205.01 1010.65,1205.01 1011.24,1205.01 1011.83,1205.01 1012.41,1205.01 1013,1205.01 1013.59,1205.01 1014.17,1205.01 1014.76,1205.01 1015.35,1205.01 1015.93,1205.01 1016.52,1205.01 1017.11,1205.01 1017.69,1205.01 1018.28,1205.01 1018.86,1205.01 1019.45,1205.01 1020.04,1205.01 1020.62,1205.01 1021.21,1205.01 1021.8,1205.01 1022.38,1205.01 1022.97,1205.01 1023.56,1205.01 1024.14,1205.01 1024.73,1205.01 1025.32,1205.01 1025.9,1205.01 1026.49,1205.01 1027.07,1205.01 1027.66,1205.01 1028.25,1205.01 1028.83,1205.01 1029.42,1205.01 1030.01,1205.01 1030.59,1205.01 1031.18,1205.01 1031.77,1205.01 1032.35,1205.01 1032.94,1205.01 1033.52,1205.01 1034.11,1205.01 1034.7,1205.01 1035.28,1205.01 1035.87,1205.01 1036.46,1205.01 1037.04,1205.01 1037.63,1205.01 1038.22,1205.01 1038.8,1205.01 1039.39,1205.01 1039.98,1205.01 1040.56,1205.01 1041.15,1205.01 1041.73,1205.01 1042.32,1205.01 1042.91,1205.01 1043.49,1205.01 1044.08,1205.01 1044.67,1205.01 1045.25,1205.01 1045.84,1205.01 1046.43,1205.01 1047.01,1205.01 1047.6,1205.01 1048.19,1205.01 1048.77,1205.01 1049.36,1205.01 1049.94,1205.01 1050.53,1205.01 1051.12,1205.01 1051.7,1205.01 1052.29,1205.01 1052.88,1205.01 1053.46,1205.01 1054.05,1205.01 1054.64,1205.01 1055.22,1205.01 1055.81,1205.01 1056.39,1205.01 1056.98,1205.01 1057.57,1205.01 1058.15,1205.01 1058.74,1205.01 1059.33,1205.01 1059.91,1205.01 1060.5,1205.01 1061.09,1205.01 1061.67,1205.01 1062.26,1205.01 1062.85,1205.01 1063.43,1205.01 1064.02,1205.01 1064.6,1205.01 1065.19,1205.01 1065.78,1205.01 1066.36,1205.01 1066.95,1205.01 1067.54,1205.01 1068.12,1205.01 1068.71,1205.01 1069.3,1205.01 1069.88,1205.01 1070.47,1205.01 1071.06,1205.01 1071.64,1205.01 1072.23,1205.01 1072.81,1205.01 1073.4,1205.01 1073.99,1205.01 1074.57,1205.01 1075.16,1205.01 1075.75,1205.01 1076.33,1205.01 1076.92,1205.01 1077.51,1205.01 1078.09,1205.01 1078.68,1205.01 1079.26,1205.01 1079.85,1205.01 1080.44,1205.01 1081.02,1205.01 1081.61,1205.01 1082.2,1205.01 1082.78,1205.01 1083.37,1205.01 1083.96,1205.01 1084.54,1205.01 1085.13,1205.01 1085.72,1205.01 1086.3,1205.01 1086.89,1205.01 1087.47,1205.01 1088.06,1205.01 1088.65,1205.01 1089.23,1205.01 1089.82,1205.01 1090.41,1205.01 1090.99,1205.01 1091.58,1205.01 1092.17,1205.01 1092.75,1205.01 1093.34,1205.01 1093.93,1205.01 1094.51,1205.01 1095.1,1205.01 1095.68,1205.01 1096.27,1205.01 1096.86,1205.01 1097.44,1205.01 1098.03,1205.01 1098.62,1205.01 1099.2,1205.01 1099.79,1205.01 1100.38,1205.01 1100.96,1205.01 1101.55,1205.01 1102.14,1205.01 1102.72,1205.01 1103.31,1205.01 1103.89,1205.01 1104.48,1205.01 1105.07,1205.01 1105.65,1205.01 1106.24,1205.01 1106.83,1205.01 1107.41,1205.01 1108,1205.01 1108.59,1205.01 1109.17,1205.01 1109.76,1205.01 1110.34,1205.01 1110.93,1205.01 1111.52,1205.01 1112.1,1205.01 1112.69,1205.01 1113.28,1205.01 1113.86,1205.01 1114.45,1205.01 1115.04,1205.01 1115.62,1205.01 1116.21,1205.01 1116.8,1205.01 1117.38,1205.01 1117.97,1205.01 1118.55,1205.01 1119.14,1205.01 1119.73,1205.01 1120.31,1205.01 1120.9,1205.01 1121.49,1205.01 1122.07,1205.01 1122.66,1205.01 1123.25,1205.01 1123.83,1205.01 1124.42,1205.01 1125.01,1205.01 1125.59,1205.01 1126.18,1205.01 1126.76,1205.01 1127.35,1205.01 1127.94,1205.01 1128.52,1205.01 1129.11,1205.01 1129.7,1205.01 1130.28,1205.01 1130.87,1205.01 1131.46,1205.01 1132.04,1205.01 1132.63,1205.01 1133.21,1205.01 1133.8,1205.01 1134.39,1205.01 1134.97,1205.01 1135.56,1205.01 1136.15,1205.01 1136.73,1205.01 1137.32,1205.01 1137.91,1205.01 1138.49,1205.01 1139.08,1205.01 1139.67,1205.01 1140.25,1205.01 1140.84,1205.01 1141.42,1205.01 1142.01,1205.01 1142.6,1205.01 1143.18,1205.01 1143.77,1205.01 1144.36,1205.01 1144.94,1205.01 1145.53,1205.01 1146.12,1205.01 1146.7,1205.01 1147.29,1205.01 1147.88,1205.01 1148.46,1205.01 1149.05,1205.01 1149.63,1205.01 1150.22,1205.01 1150.81,1205.01 1151.39,1205.01 1151.98,1205.01 1152.57,1205.01 1153.15,1205.01 1153.74,1205.01 1154.33,1205.01 1154.91,1205.01 1155.5,1205.01 1156.09,1205.01 1156.67,1205.01 1157.26,1205.01 1157.84,1205.01 1158.43,1205.01 1159.02,1205.01 1159.6,1205.01 1160.19,1205.01 1160.78,1205.01 1161.36,1205.01 1161.95,1205.01 1162.54,1205.01 1163.12,1205.01 1163.71,1205.01 1164.29,1205.01 1164.88,1205.01 1165.47,1205.01 1166.05,1205.01 1166.64,1205.01 1167.23,1205.01 1167.81,1205.01 1168.4,1205.01 1168.99,1205.01 1169.57,1205.01 1170.16,1205.01 1170.75,1205.01 1171.33,1205.01 1171.92,1205.01 1172.5,1205.01 1173.09,1205.01 1173.68,1205.01 1174.26,1205.01 1174.85,1205.01 1175.44,1205.01 1176.02,1205.01 1176.61,1205.01 1177.2,1205.01 1177.78,1205.01 1178.37,1205.01 1178.96,1205.01 1179.54,1205.01 1180.13,1205.01 1180.71,1205.01 1181.3,1205.01 1181.89,1205.01 1182.47,1205.01 1183.06,1205.01 1183.65,1205.01 1184.23,1205.01 1184.82,1205.01 1185.41,1205.01 1185.99,1205.01 1186.58,1205.01 1187.16,1205.01 1187.75,1205.01 1188.34,1205.01 1188.92,1205.01 1189.51,1205.01 1190.1,1205.01 1190.68,1205.01 1191.27,1205.01 1191.86,1205.01 1192.44,1205.01 1193.03,1205.01 1193.62,1205.01 1194.2,1205.01 1194.79,1205.01 1195.37,1205.01 1195.96,1205.01 1196.55,1205.01 1197.13,1205.01 1197.72,1205.01 1198.31,1205.01 1198.89,1205.01 1199.48,1205.01 1200.07,1205.01 1200.65,1205.01 1201.24,1205.01 1201.83,1205.01 1202.41,1205.01 1203,1205.01 1203.58,1205.01 1204.17,1205.01 1204.76,1205.01 1205.34,1205.01 1205.93,1205.01 1206.52,1205.01 1207.1,1205.01 1207.69,1205.01 1208.28,1205.01 1208.86,1205.01 1209.45,1205.01 1210.03,1205.01 1210.62,1205.01 1211.21,1205.01 1211.79,1205.01 1212.38,1205.01 1212.97,1205.01 1213.55,1205.01 1214.14,1205.01 1214.73,1205.01 1215.31,1205.01 1215.9,1205.01 1216.49,1205.01 1217.07,1205.01 1217.66,1205.01 1218.24,1205.01 1218.83,1205.01 1219.42,1205.01 1220,1205.01 1220.59,1205.01 1221.18,1205.01 1221.76,1205.01 1222.35,1205.01 1222.94,1205.01 1223.52,1205.01 1224.11,1205.01 1224.7,1205.01 1225.28,1205.01 1225.87,1205.01 1226.45,1205.01 1227.04,1205.01 1227.63,1205.01 1228.21,1205.01 1228.8,1205.01 1229.39,1205.01 1229.97,1205.01 1230.56,1205.01 1231.15,1205.01 1231.73,1205.01 1232.32,1205.01 1232.91,1205.01 1233.49,1205.01 1234.08,1205.01 1234.66,1205.01 1235.25,1205.01 1235.84,1205.01 1236.42,1205.01 1237.01,1205.01 1237.6,1205.01 1238.18,1205.01 1238.77,1205.01 1239.36,1205.01 1239.94,1205.01 1240.53,1205.01 1241.11,1205.01 1241.7,1205.01 1242.29,1205.01 1242.87,1205.01 1243.46,1205.01 1244.05,1205.01 1244.63,1205.01 1245.22,1205.01 1245.81,1205.01 1246.39,1205.01 1246.98,1205.01 1247.57,1205.01 1248.15,1205.01 1248.74,1205.01 1249.32,1205.01 1249.91,1205.01 1250.5,1205.01 1251.08,1205.01 1251.67,1205.01 1252.26,1205.01 1252.84,1205.01 1253.43,1205.01 1254.02,1205.01 1254.6,1205.01 1255.19,1205.01 1255.78,1205.01 1256.36,1205.01 1256.95,1205.01 1257.53,1205.01 1258.12,1205.01 1258.71,1205.01 1259.29,1205.01 1259.88,1205.01 1260.47,1205.01 1261.05,1205.01 1261.64,1205.01 1262.23,1205.01 1262.81,1205.01 1263.4,1205.01 1263.98,1205.01 1264.57,1205.01 1265.16,1205.01 1265.74,1205.01 1266.33,1205.01 1266.92,1205.01 1267.5,1205.01 1268.09,1205.01 1268.68,1205.01 1269.26,1205.01 1269.85,1205.01 1270.44,1205.01 1271.02,1205.01 1271.61,1205.01 1272.19,1205.01 1272.78,1205.01 1273.37,1205.01 1273.95,1205.01 1274.54,1205.01 1275.13,1205.01 1275.71,1205.01 1276.3,1205.01 1276.89,1205.01 1277.47,1205.01 1278.06,1205.01 1278.65,1205.01 1279.23,1205.01 1279.82,1205.01 1280.4,1205.01 1280.99,1205.01 1281.58,1205.01 1282.16,1205.01 1282.75,1205.01 1283.34,1205.01 1283.92,1205.01 1284.51,1205.01 1285.1,1205.01 1285.68,1205.01 1286.27,1205.01 1286.86,1205.01 1287.44,1205.01 1288.03,1205.01 1288.61,1205.01 1289.2,1205.01 1289.79,1205.01 1290.37,1205.01 1290.96,1205.01 1291.55,1205.01 1292.13,1205.01 1292.72,1205.01 1293.31,1205.01 1293.89,1205.01 1294.48,1205.01 1295.06,1205.01 1295.65,1205.01 1296.24,1205.01 1296.82,1205.01 1297.41,1205.01 1298,1205.01 1298.58,1205.01 1299.17,1205.01 1299.76,1205.01 1300.34,1205.01 1300.93,1205.01 1301.52,1205.01 1302.1,1205.01 1302.69,1205.01 1303.27,1205.01 1303.86,1205.01 1304.45,1205.01 1305.03,1205.01 1305.62,1205.01 1306.21,1205.01 1306.79,1205.01 1307.38,1205.01 1307.97,1205.01 1308.55,1205.01 1309.14,1205.01 1309.73,1205.01 1310.31,1205.01 1310.9,1205.01 1311.48,1205.01 1312.07,1205.01 1312.66,1205.01 1313.24,1205.01 1313.83,1205.01 1314.42,1205.01 1315,1205.01 1315.59,1205.01 1316.18,1205.01 1316.76,1205.01 1317.35,1205.01 1317.93,1205.01 1318.52,1205.01 1319.11,1205.01 1319.69,1205.01 1320.28,1205.01 1320.87,1205.01 1321.45,1205.01 1322.04,1205.01 1322.63,1205.01 1323.21,1205.01 1323.8,1205.01 1324.39,1205.01 1324.97,1205.01 1325.56,1205.01 1326.14,1205.01 1326.73,1205.01 1327.32,1205.01 1327.9,1205.01 1328.49,1205.01 1329.08,1205.01 1329.66,1205.01 1330.25,1205.01 1330.84,1205.01 1331.42,1205.01 1332.01,1205.01 1332.6,1205.01 1333.18,1205.01 1333.77,1205.01 1334.35,1205.01 1334.94,1205.01 1335.53,1205.01 1336.11,1205.01 1336.7,1205.01 1337.29,1205.01 1337.87,1205.01 1338.46,1205.01 1339.05,1205.01 1339.63,1205.01 1340.22,1205.01 1340.8,1205.01 1341.39,1205.01 1341.98,1205.01 1342.56,1205.01 1343.15,1205.01 1343.74,1205.01 1344.32,1205.01 1344.91,1205.01 1345.5,1205.01 1346.08,1205.01 1346.67,1205.01 1347.26,1205.01 1347.84,1205.01 1348.43,1205.01 1349.01,1205.01 1349.6,1205.01 1350.19,1205.01 1350.77,1205.01 1351.36,1205.01 1351.95,1205.01 1352.53,1205.01 1353.12,1205.01 1353.71,1205.01 1354.29,1205.01 1354.88,1205.01 1355.47,1205.01 1356.05,1205.01 1356.64,1205.01 1357.22,1205.01 1357.81,1205.01 1358.4,1205.01 1358.98,1205.01 1359.57,1205.01 1360.16,1205.01 1360.74,1205.01 1361.33,1205.01 1361.92,1205.01 1362.5,1205.01 1363.09,1205.01 1363.68,1205.01 1364.26,1205.01 1364.85,1205.01 1365.43,1205.01 1366.02,1205.01 1366.61,1205.01 1367.19,1205.01 1367.78,1205.01 1368.37,1205.01 1368.95,1205.01 1369.54,1205.01 1370.13,1205.01 1370.71,1205.01 1371.3,1205.01 1371.88,1205.01 1372.47,1205.01 1373.06,1205.01 1373.64,1205.01 1374.23,1205.01 1374.82,1205.01 1375.4,1205.01 1375.99,1205.01 1376.58,1205.01 1377.16,1205.01 1377.75,1205.01 1378.34,1205.01 1378.92,1205.01 1379.51,1205.01 1380.09,1205.01 1380.68,1205.01 1381.27,1205.01 1381.85,1205.01 1382.44,1205.01 1383.03,1205.01 1383.61,1205.01 1384.2,1205.01 1384.79,1205.01 1385.37,1205.01 1385.96,1205.01 1386.55,1205.01 1387.13,1205.01 1387.72,1205.01 1388.3,1205.01 1388.89,1205.01 1389.48,1205.01 1390.06,1205.01 1390.65,1205.01 1391.24,1205.01 1391.82,1205.01 1392.41,1205.01 1393,1205.01 1393.58,1205.01 1394.17,1205.01 1394.75,1205.01 1395.34,1205.01 1395.93,1205.01 1396.51,1205.01 1397.1,1205.01 1397.69,1205.01 1398.27,1205.01 1398.86,1205.01 1399.45,1205.01 1400.03,1205.01 1400.62,1205.01 1401.21,1205.01 1401.79,1205.01 1402.38,1205.01 1402.96,1205.01 1403.55,1205.01 1404.14,1205.01 1404.72,1205.01 1405.31,1205.01 1405.9,1205.01 1406.48,1205.01 1407.07,1205.01 1407.66,1205.01 1408.24,1205.01 1408.83,1205.01 1409.42,1205.01 1410,1205.01 1410.59,1205.01 1411.17,1205.01 1411.76,1205.01 1412.35,1205.01 1412.93,1205.01 1413.52,1205.01 1414.11,1205.01 1414.69,1205.01 1415.28,1205.01 1415.87,1205.01 1416.45,1205.01 1417.04,1205.01 1417.63,1205.01 1418.21,1205.01 1418.8,1205.01 1419.38,1205.01 1419.97,1205.01 1420.56,1205.01 1421.14,1205.01 1421.73,1205.01 1422.32,1205.01 1422.9,1205.01 1423.49,1205.01 1424.08,1205.01 1424.66,1205.01 1425.25,1205.01 1425.83,1205.01 1426.42,1205.01 1427.01,1205.01 1427.59,1205.01 1428.18,1205.01 1428.77,1205.01 1429.35,1205.01 1429.94,1205.01 1430.53,1205.01 1431.11,1205.01 1431.7,1205.01 1432.29,1205.01 1432.87,1205.01 1433.46,1205.01 1434.04,1205.01 1434.63,1205.01 1435.22,1205.01 1435.8,1205.01 1436.39,1205.01 1436.98,1205.01 1437.56,1205.01 1438.15,1205.01 1438.74,1205.01 1439.32,1205.01 1439.91,1205.01 1440.5,1205.01 1441.08,1205.01 1441.67,1205.01 1442.25,1205.01 1442.84,1205.01 1443.43,1205.01 1444.01,1205.01 1444.6,1205.01 1445.19,1205.01 1445.77,1205.01 1446.36,1205.01 1446.95,1205.01 1447.53,1205.01 1448.12,1205.01 1448.7,1205.01 1449.29,1205.01 1449.88,1205.01 1450.46,1205.01 1451.05,1205.01 1451.64,1205.01 1452.22,1205.01 1452.81,1205.01 1453.4,1205.01 1453.98,1205.01 1454.57,1205.01 1455.16,1205.01 1455.74,1205.01 1456.33,1205.01 1456.91,1205.01 1457.5,1205.01 1458.09,1205.01 1458.67,1205.01 1459.26,1205.01 1459.85,1205.01 1460.43,1205.01 1461.02,1205.01 1461.61,1205.01 1462.19,1205.01 1462.78,1205.01 1463.37,1205.01 1463.95,1205.01 1464.54,1205.01 1465.12,1205.01 1465.71,1205.01 1466.3,1205.01 1466.88,1205.01 1467.47,1205.01 1468.06,1205.01 1468.64,1205.01 1469.23,1205.01 1469.82,1205.01 1470.4,1205.01 1470.99,1205.01 1471.57,1205.01 1472.16,1205.01 1472.75,1205.01 1473.33,1205.01 1473.92,1205.01 1474.51,1205.01 1475.09,1205.01 1475.68,1205.01 1476.27,1205.01 1476.85,1205.01 1477.44,1205.01 1478.03,1205.01 1478.61,1205.01 1479.2,1205.01 1479.78,1205.01 1480.37,1205.01 1480.96,1205.01 1481.54,1205.01 1482.13,1205.01 1482.72,1205.01 1483.3,1205.01 1483.89,1205.01 1484.48,1205.01 1485.06,1205.01 1485.65,1205.01 1486.24,1205.01 1486.82,1205.01 1487.41,1205.01 1487.99,1205.01 1488.58,1205.01 1489.17,1205.01 1489.75,1205.01 1490.34,1205.01 1490.93,1205.01 1491.51,1205.01 1492.1,1205.01 1492.69,1205.01 1493.27,1205.01 1493.86,1205.01 1494.45,1205.01 1495.03,1205.01 1495.62,1205.01 1496.2,1205.01 1496.79,1205.01 1497.38,1205.01 1497.96,1205.01 1498.55,1205.01 1499.14,1205.01 1499.72,1205.01 1500.31,1205.01 1500.9,1205.01 1501.48,1205.01 1502.07,1205.01 1502.65,1205.01 1503.24,1205.01 1503.83,1205.01 1504.41,1205.01 1505,1205.01 1505.59,1205.01 1506.17,1205.01 1506.76,1205.01 1507.35,1205.01 1507.93,1205.01 1508.52,1205.01 1509.11,1205.01 1509.69,1205.01 1510.28,1205.01 1510.86,1205.01 1511.45,1205.01 1512.04,1205.01 1512.62,1205.01 1513.21,1205.01 1513.8,1205.01 1514.38,1205.01 1514.97,1205.01 1515.56,1205.01 1516.14,1205.01 1516.73,1205.01 1517.32,1205.01 1517.9,1205.01 1518.49,1205.01 1519.07,1205.01 1519.66,1205.01 1520.25,1205.01 1520.83,1205.01 1521.42,1205.01 1522.01,1205.01 1522.59,1205.01 1523.18,1205.01 1523.77,1205.01 1524.35,1205.01 1524.94,1205.01 1525.52,1205.01 1526.11,1205.01 1526.7,1205.01 1527.28,1205.01 1527.87,1205.01 1528.46,1205.01 1529.04,1205.01 1529.63,1205.01 1530.22,1205.01 1530.8,1205.01 1531.39,1205.01 1531.98,1205.01 1532.56,1205.01 1533.15,1205.01 1533.73,1205.01 1534.32,1205.01 1534.91,1205.01 1535.49,1205.01 1536.08,1205.01 1536.67,1205.01 1537.25,1205.01 1537.84,1205.01 1538.43,1205.01 1539.01,1205.01 1539.6,1205.01 1540.19,1205.01 1540.77,1205.01 1541.36,1205.01 1541.94,1205.01 1542.53,1205.01 1543.12,1205.01 1543.7,1205.01 1544.29,1205.01 1544.88,1205.01 1545.46,1205.01 1546.05,1205.01 1546.64,1205.01 1547.22,1205.01 1547.81,1205.01 1548.4,1205.01 1548.98,1205.01 1549.57,1205.01 1550.15,1205.01 1550.74,1205.01 1551.33,1205.01 1551.91,1205.01 1552.5,1205.01 1553.09,1205.01 1553.67,1205.01 1554.26,1205.01 1554.85,1205.01 1555.43,1205.01 1556.02,1205.01 1556.6,1205.01 1557.19,1205.01 1557.78,1205.01 1558.36,1205.01 1558.95,1205.01 1559.54,1205.01 1560.12,1205.01 1560.71,1205.01 1561.3,1205.01 1561.88,1205.01 1562.47,1205.01 1563.06,1205.01 1563.64,1205.01 1564.23,1205.01 1564.81,1205.01 1565.4,1205.01 1565.99,1205.01 1566.57,1205.01 1567.16,1205.01 1567.75,1205.01 1568.33,1205.01 1568.92,1205.01 1569.51,1205.01 1570.09,1205.01 1570.68,1205.01 1571.27,1205.01 1571.85,1205.01 1572.44,1205.01 1573.02,1205.01 1573.61,1205.01 1574.2,1205.01 1574.78,1205.01 1575.37,1205.01 1575.96,1205.01 1576.54,1205.01 1577.13,1205.01 1577.72,1205.01 1578.3,1205.01 1578.89,1205.01 1579.47,1205.01 1580.06,1205.01 1580.65,1205.01 1581.23,1205.01 1581.82,1205.01 1582.41,1205.01 1582.99,1205.01 1583.58,1205.01 1584.17,1205.01 1584.75,1205.01 1585.34,1205.01 1585.93,1205.01 1586.51,1205.01 1587.1,1205.01 1587.68,1205.01 1588.27,1205.01 1588.86,1205.01 1589.44,1205.01 1590.03,1205.01 1590.62,1205.01 1591.2,1205.01 1591.79,1205.01 1592.38,1205.01 1592.96,1205.01 1593.55,1205.01 1594.14,1205.01 1594.72,1205.01 1595.31,1205.01 1595.89,1205.01 1596.48,1205.01 1597.07,1205.01 1597.65,1205.01 1598.24,1205.01 1598.83,1205.01 1599.41,1205.01 1600,1205.01 1600.59,1205.01 1601.17,1205.01 1601.76,1205.01 1602.34,1205.01 1602.93,1205.01 1603.52,1205.01 1604.1,1205.01 1604.69,1205.01 1605.28,1205.01 1605.86,1205.01 1606.45,1205.01 1607.04,1205.01 1607.62,1205.01 1608.21,1205.01 1608.8,1205.01 1609.38,1205.01 1609.97,1205.01 1610.55,1205.01 1611.14,1205.01 1611.73,1205.01 1612.31,1205.01 1612.9,1205.01 1613.49,1205.01 1614.07,1205.01 1614.66,1205.01 1615.25,1205.01 1615.83,1205.01 1616.42,1205.01 1617.01,1205.01 1617.59,1205.01 1618.18,1205.01 1618.76,1205.01 1619.35,1205.01 1619.94,1205.01 1620.52,1205.01 1621.11,1205.01 1621.7,1205.01 1622.28,1205.01 1622.87,1205.01 1623.46,1205.01 1624.04,1205.01 1624.63,1205.01 1625.22,1205.01 1625.8,1205.01 1626.39,1205.01 1626.97,1205.01 1627.56,1205.01 1628.15,1205.01 1628.73,1205.01 1629.32,1205.01 1629.91,1205.01 1630.49,1205.01 1631.08,1205.01 1631.67,1205.01 1632.25,1205.01 1632.84,1205.01 1633.42,1205.01 1634.01,1205.01 1634.6,1205.01 1635.18,1205.01 1635.77,1205.01 1636.36,1205.01 1636.94,1205.01 1637.53,1205.01 1638.12,1205.01 1638.7,1205.01 1639.29,1205.01 1639.88,1205.01 1640.46,1205.01 1641.05,1205.01 1641.63,1205.01 1642.22,1205.01 1642.81,1205.01 1643.39,1205.01 1643.98,1205.01 1644.57,1205.01 1645.15,1205.01 1645.74,1205.01 1646.33,1205.01 1646.91,1205.01 1647.5,1205.01 1648.09,1205.01 1648.67,1205.01 1649.26,1205.01 1649.84,1205.01 1650.43,1205.01 1651.02,1205.01 1651.6,1205.01 1652.19,1205.01 1652.78,1205.01 1653.36,1205.01 1653.95,1205.01 1654.54,1205.01 1655.12,1205.01 1655.71,1205.01 1656.29,1205.01 1656.88,1205.01 1657.47,1205.01 1658.05,1205.01 1658.64,1205.01 1659.23,1205.01 1659.81,1205.01 1660.4,1205.01 1660.99,1205.01 1661.57,1205.01 1662.16,1205.01 1662.75,1205.01 1663.33,1205.01 1663.92,1205.01 1664.5,1205.01 1665.09,1205.01 1665.68,1205.01 1666.26,1205.01 1666.85,1205.01 1667.44,1205.01 1668.02,1205.01 1668.61,1205.01 1669.2,1205.01 1669.78,1205.01 1670.37,1205.01 1670.96,1205.01 1671.54,1205.01 1672.13,1205.01 1672.71,1205.01 1673.3,1205.01 1673.89,1205.01 1674.47,1205.01 1675.06,1205.01 1675.65,1205.01 1676.23,1205.01 1676.82,1205.01 1677.41,1205.01 1677.99,1205.01 1678.58,1205.01 1679.17,1205.01 1679.75,1205.01 1680.34,1205.01 1680.92,1205.01 1681.51,1205.01 1682.1,1205.01 1682.68,1205.01 1683.27,1205.01 1683.86,1205.01 1684.44,1205.01 1685.03,1205.01 1685.62,1205.01 1686.2,1205.01 1686.79,1205.01 1687.37,1205.01 1687.96,1205.01 1688.55,1205.01 1689.13,1205.01 1689.72,1205.01 1690.31,1205.01 1690.89,1205.01 1691.48,1205.01 1692.07,1205.01 1692.65,1205.01 1693.24,1205.01 1693.83,1205.01 1694.41,1205.01 1695,1205.01 1695.58,1205.01 1696.17,1205.01 1696.76,1205.01 1697.34,1205.01 1697.93,1205.01 1698.52,1205.01 1699.1,1205.01 1699.69,1205.01 1700.28,1205.01 1700.86,1205.01 1701.45,1205.01 1702.04,1205.01 1702.62,1205.01 1703.21,1205.01 1703.79,1205.01 1704.38,1205.01 1704.97,1205.01 1705.55,1205.01 1706.14,1205.01 1706.73,1205.01 1707.31,1205.01 1707.9,1205.01 1708.49,1205.01 1709.07,1205.01 1709.66,1205.01 1710.24,1205.01 1710.83,1205.01 1711.42,1205.01 1712,1205.01 1712.59,1205.01 1713.18,1205.01 1713.76,1205.01 1714.35,1205.01 1714.94,1205.01 1715.52,1205.01 1716.11,1205.01 1716.7,1205.01 1717.28,1205.01 1717.87,1205.01 1718.45,1205.01 1719.04,1205.01 1719.63,1205.01 1720.21,1205.01 1720.8,1205.01 1721.39,1205.01 1721.97,1205.01 1722.56,1205.01 1723.15,1205.01 1723.73,1205.01 1724.32,1205.01 1724.91,1205.01 1725.49,1205.01 1726.08,1205.01 1726.66,1205.01 1727.25,1205.01 1727.84,1205.01 1728.42,1205.01 1729.01,1205.01 1729.6,1205.01 1730.18,1205.01 1730.77,1205.01 1731.36,1205.01 1731.94,1205.01 1732.53,1205.01 1733.11,1205.01 1733.7,1205.01 1734.29,1205.01 1734.87,1205.01 1735.46,1205.01 1736.05,1205.01 1736.63,1205.01 1737.22,1205.01 1737.81,1205.01 1738.39,1205.01 1738.98,1205.01 1739.57,1205.01 1740.15,1205.01 1740.74,1205.01 1741.32,1205.01 1741.91,1205.01 1742.5,1205.01 1743.08,1205.01 1743.67,1205.01 1744.26,1205.01 1744.84,1205.01 1745.43,1205.01 1746.02,1205.01 1746.6,1205.01 1747.19,1205.01 1747.78,1205.01 1748.36,1205.01 1748.95,1205.01 1749.53,1205.01 1750.12,1205.01 1750.71,1205.01 1751.29,1205.01 1751.88,1205.01 1752.47,1205.01 1753.05,1205.01 1753.64,1205.01 1754.23,1205.01 1754.81,1205.01 1755.4,1205.01 1755.99,1205.01 1756.57,1205.01 1757.16,1205.01 1757.74,1205.01 1758.33,1205.01 1758.92,1205.01 1759.5,1205.01 1760.09,1205.01 1760.68,1205.01 1761.26,1205.01 1761.85,1205.01 1762.44,1205.01 1763.02,1205.01 1763.61,1205.01 1764.19,1205.01 1764.78,1205.01 1765.37,1205.01 1765.95,1205.01 1766.54,1205.01 1767.13,1205.01 1767.71,1205.01 1768.3,1205.01 1768.89,1205.01 1769.47,1205.01 1770.06,1205.01 1770.65,1205.01 1771.23,1205.01 1771.82,1205.01 1772.4,1205.01 1772.99,1205.01 1773.58,1205.01 1774.16,1205.01 1774.75,1205.01 1775.34,1205.01 1775.92,1205.01 1776.51,1205.01 1777.1,1205.01 1777.68,1205.01 1778.27,1205.01 1778.86,1205.01 1779.44,1205.01 1780.03,1205.01 1780.61,1205.01 1781.2,1205.01 1781.79,1205.01 1782.37,1205.01 1782.96,1205.01 1783.55,1205.01 1784.13,1205.01 1784.72,1205.01 1785.31,1205.01 1785.89,1205.01 1786.48,1205.01 1787.06,1205.01 1787.65,1205.01 1788.24,1205.01 1788.82,1205.01 1789.41,1205.01 1790,1205.01 1790.58,1205.01 1791.17,1205.01 1791.76,1205.01 1792.34,1205.01 1792.93,1205.01 1793.52,1205.01 1794.1,1205.01 1794.69,1205.01 1795.27,1205.01 1795.86,1205.01 1796.45,1205.01 1797.03,1205.01 1797.62,1205.01 1798.21,1205.01 1798.79,1205.01 1799.38,1205.01 1799.97,1205.01 1800.55,1205.01 1801.14,1205.01 1801.73,1205.01 1802.31,1205.01 1802.9,1205.01 1803.48,1205.01 1804.07,1205.01 1804.66,1205.01 1805.24,1205.01 1805.83,1205.01 1806.42,1205.01 1807,1205.01 1807.59,1205.01 1808.18,1205.01 1808.76,1205.01 1809.35,1205.01 1809.94,1205.01 1810.52,1205.01 1811.11,1205.01 1811.69,1205.01 1812.28,1205.01 1812.87,1205.01 1813.45,1205.01 1814.04,1205.01 1814.63,1205.01 1815.21,1205.01 1815.8,1205.01 1816.39,1205.01 1816.97,1205.01 1817.56,1205.01 1818.14,1205.01 1818.73,1205.01 1819.32,1205.01 1819.9,1205.01 1820.49,1205.01 1821.08,1205.01 1821.66,1205.01 1822.25,1205.01 1822.84,1205.01 1823.42,1205.01 1824.01,1205.01 1824.6,1205.01 1825.18,1205.01 1825.77,1205.01 1826.35,1205.01 1826.94,1205.01 1827.53,1205.01 1828.11,1205.01 1828.7,1205.01 1829.29,1205.01 1829.87,1205.01 1830.46,1205.01 1831.05,1205.01 1831.63,1205.01 1832.22,1205.01 1832.81,1205.01 1833.39,1205.01 1833.98,1205.01 1834.56,1205.01 1835.15,1205.01 1835.74,1205.01 1836.32,1205.01 1836.91,1205.01 1837.5,1205.01 1838.08,1205.01 1838.67,1205.01 1839.26,1205.01 1839.84,1205.01 1840.43,1205.01 1841.01,1205.01 1841.6,1205.01 1842.19,1205.01 1842.77,1205.01 1843.36,1205.01 1843.95,1205.01 1844.53,1205.01 1845.12,1205.01 1845.71,1205.01 1846.29,1205.01 1846.88,1205.01 1847.47,1205.01 1848.05,1205.01 1848.64,1205.01 1849.22,1205.01 1849.81,1205.01 1850.4,1205.01 1850.98,1205.01 1851.57,1205.01 1852.16,1205.01 1852.74,1205.01 1853.33,1205.01 1853.92,1205.01 1854.5,1205.01 1855.09,1205.01 1855.68,1205.01 1856.26,1205.01 1856.85,1205.01 1857.43,1205.01 1858.02,1205.01 1858.61,1205.01 1859.19,1205.01 1859.78,1205.01 1860.37,1205.01 1860.95,1205.01 1861.54,1205.01 1862.13,1205.01 1862.71,1205.01 1863.3,1205.01 1863.88,1205.01 1864.47,1205.01 1865.06,1205.01 1865.64,1205.01 1866.23,1205.01 1866.82,1205.01 1867.4,1205.01 1867.99,1205.01 1868.58,1205.01 1869.16,1205.01 1869.75,1205.01 1870.34,1205.01 1870.92,1205.01 1871.51,1205.01 1872.09,1205.01 1872.68,1205.01 1873.27,1205.01 1873.85,1205.01 1874.44,1205.01 1875.03,1205.01 1875.61,1205.01 1876.2,1205.01 1876.79,1205.01 1877.37,1205.01 1877.96,1205.01 1878.55,1205.01 1879.13,1205.01 1879.72,1205.01 1880.3,1205.01 1880.89,1205.01 1881.48,1205.01 1882.06,1205.01 1882.65,1205.01 1883.24,1205.01 1883.82,1205.01 1884.41,1205.01 1885,1205.01 1885.58,1205.01 1886.17,1205.01 1886.76,1205.01 1887.34,1205.01 1887.93,1205.01 1888.51,1205.01 1889.1,1205.01 1889.69,1205.01 1890.27,1205.01 1890.86,1205.01 1891.45,1205.01 1892.03,1205.01 1892.62,1205.01 1893.21,1205.01 1893.79,1205.01 1894.38,1205.01 1894.96,1205.01 1895.55,1205.01 1896.14,1205.01 1896.72,1205.01 1897.31,1205.01 1897.9,1205.01 1898.48,1205.01 1899.07,1205.01 1899.66,1205.01 1900.24,1205.01 1900.83,1205.01 1901.42,1205.01 1902,1205.01 1902.59,1205.01 1903.17,1205.01 1903.76,1205.01 1904.35,1205.01 1904.93,1205.01 1905.52,1205.01 1906.11,1205.01 1906.69,1205.01 1907.28,1205.01 1907.87,1205.01 1908.45,1205.01 1909.04,1205.01 1909.63,1205.01 1910.21,1205.01 1910.8,1205.01 1911.38,1205.01 1911.97,1205.01 1912.56,1205.01 1913.14,1205.01 1913.73,1205.01 1914.32,1205.01 1914.9,1205.01 1915.49,1205.01 1916.08,1205.01 1916.66,1205.01 1917.25,1205.01 1917.83,1205.01 1918.42,1205.01 1919.01,1205.01 1919.59,1205.01 1920.18,1205.01 1920.77,1205.01 1921.35,1205.01 1921.94,1205.01 1922.53,1205.01 1923.11,1205.01 1923.7,1205.01 1924.29,1205.01 1924.87,1205.01 1925.46,1205.01 1926.04,1205.01 1926.63,1205.01 1927.22,1205.01 1927.8,1205.01 1928.39,1205.01 1928.98,1205.01 1929.56,1205.01 1930.15,1205.01 1930.74,1205.01 1931.32,1205.01 1931.91,1205.01 1932.5,1205.01 1933.08,1205.01 1933.67,1205.01 1934.25,1205.01 1934.84,1205.01 1935.43,1205.01 1936.01,1205.01 1936.6,1205.01 1937.19,1205.01 1937.77,1205.01 1938.36,1205.01 1938.95,1205.01 1939.53,1205.01 1940.12,1205.01 1940.71,1205.01 1941.29,1205.01 1941.88,1205.01 1942.46,1205.01 1943.05,1205.01 1943.64,1205.01 1944.22,1205.01 1944.81,1205.01 1945.4,1205.01 1945.98,1205.01 1946.57,1205.01 1947.16,1205.01 1947.74,1205.01 1948.33,1205.01 1948.91,1205.01 1949.5,1205.01 1950.09,1205.01 1950.67,1205.01 1951.26,1205.01 1951.85,1205.01 1952.43,1205.01 1953.02,1205.01 1953.61,1205.01 1954.19,1205.01 1954.78,1205.01 1955.37,1205.01 1955.95,1205.01 1956.54,1205.01 1957.12,1205.01 1957.71,1205.01 1958.3,1205.01 1958.88,1205.01 1959.47,1205.01 1960.06,1205.01 1960.64,1205.01 1961.23,1205.01 1961.82,1205.01 1962.4,1205.01 1962.99,1205.01 1963.58,1205.01 1964.16,1205.01 1964.75,1205.01 1965.33,1205.01 1965.92,1205.01 1966.51,1205.01 1967.09,1205.01 1967.68,1205.01 1968.27,1205.01 1968.85,1205.01 1969.44,1205.01 1970.03,1205.01 1970.61,1205.01 1971.2,1205.01 1971.78,1205.01 1972.37,1205.01 1972.96,1205.01 1973.54,1205.01 1974.13,1205.01 1974.72,1205.01 1975.3,1205.01 1975.89,1205.01 1976.48,1205.01 1977.06,1205.01 1977.65,1205.01 1978.24,1205.01 1978.82,1205.01 1979.41,1205.01 1979.99,1205.01 1980.58,1205.01 1981.17,1205.01 1981.75,1205.01 1982.34,1205.01 1982.93,1205.01 1983.51,1205.01 1984.1,1205.01 1984.69,1205.01 1985.27,1205.01 1985.86,1205.01 1986.45,1205.01 1987.03,1205.01 1987.62,1205.01 1988.2,1205.01 1988.79,1205.01 1989.38,1205.01 1989.96,1205.01 1990.55,1205.01 1991.14,1205.01 1991.72,1205.01 1992.31,1205.01 1992.9,1205.01 1993.48,1205.01 1994.07,1205.01 1994.65,1205.01 1995.24,1205.01 1995.83,1205.01 1996.41,1205.01 1997,1205.01 1997.59,1205.01 1998.17,1205.01 1998.76,1205.01 1999.35,1205.01 1999.93,1205.01 2000.52,1205.01 2001.11,1205.01 2001.69,1205.01 2002.28,1205.01 2002.86,1205.01 2003.45,1205.01 2004.04,1205.01 2004.62,1205.01 2005.21,1205.01 2005.8,1205.01 2006.38,1205.01 2006.97,1205.01 2007.56,1205.01 2008.14,1205.01 2008.73,1205.01 2009.32,1205.01 2009.9,1205.01 2010.49,1205.01 2011.07,1205.01 2011.66,1205.01 2012.25,1205.01 2012.83,1205.01 2013.42,1205.01 2014.01,1205.01 2014.59,1205.01 2015.18,1205.01 2015.77,1205.01 2016.35,1205.01 2016.94,1205.01 2017.53,1205.01 2018.11,1205.01 2018.7,1205.01 2019.28,1205.01 2019.87,1205.01 2020.46,1205.01 2021.04,1205.01 2021.63,1205.01 2022.22,1205.01 2022.8,1205.01 2023.39,1205.01 2023.98,1205.01 2024.56,1205.01 2025.15,1205.01 2025.73,1205.01 2026.32,1205.01 2026.91,1205.01 2027.49,1205.01 2028.08,1205.01 2028.67,1205.01 2029.25,1205.01 2029.84,1205.01 2030.43,1205.01 2031.01,1205.01 2031.6,1205.01 2032.19,1205.01 2032.77,1205.01 2033.36,1205.01 2033.94,1205.01 2034.53,1205.01 2035.12,1205.01 2035.7,1205.01 2036.29,1205.01 2036.88,1205.01 2037.46,1205.01 2038.05,1205.01 2038.64,1205.01 2039.22,1205.01 2039.81,1205.01 2040.4,1205.01 2040.98,1205.01 2041.57,1205.01 2042.15,1205.01 2042.74,1205.01 2043.33,1205.01 2043.91,1205.01 2044.5,1205.01 2045.09,1205.01 2045.67,1205.01 2046.26,1205.01 2046.85,1205.01 2047.43,1205.01 2048.02,1205.01 2048.6,1205.01 2049.19,1205.01 2049.78,1205.01 2050.36,1205.01 2050.95,1205.01 2051.54,1205.01 2052.12,1205.01 2052.71,1205.01 2053.3,1205.01 2053.88,1205.01 2054.47,1205.01 2055.06,1205.01 2055.64,1205.01 2056.23,1205.01 2056.81,1205.01 2057.4,1205.01 2057.99,1205.01 2058.57,1205.01 2059.16,1205.01 2059.75,1205.01 2060.33,1205.01 2060.92,1205.01 2061.51,1205.01 2062.09,1205.01 2062.68,1205.01 2063.27,1205.01 2063.85,1205.01 2064.44,1205.01 2065.02,1205.01 2065.61,1205.01 2066.2,1205.01 2066.78,1205.01 2067.37,1205.01 2067.96,1205.01 2068.54,1205.01 2069.13,1205.01 2069.72,1205.01 2070.3,1205.01 2070.89,1205.01 2071.48,1205.01 2072.06,1205.01 2072.65,1205.01 2073.23,1205.01 2073.82,1205.01 2074.41,1205.01 2074.99,1205.01 2075.58,1205.01 2076.17,1205.01 2076.75,1205.01 2077.34,1205.01 2077.93,1205.01 2078.51,1205.01 2079.1,1205.01 2079.68,1205.01 2080.27,1205.01 2080.86,1205.01 2081.44,1205.01 2082.03,1205.01 2082.62,1205.01 2083.2,1205.01 2083.79,1205.01 2084.38,1205.01 2084.96,1205.01 2085.55,1205.01 2086.14,1205.01 2086.72,1205.01 2087.31,1205.01 2087.89,1205.01 2088.48,1205.01 2089.07,1205.01 2089.65,1205.01 2090.24,1205.01 2090.83,1205.01 2091.41,1205.01 2092,1205.01 2092.59,1205.01 2093.17,1205.01 2093.76,1205.01 2094.35,1205.01 2094.93,1205.01 2095.52,1205.01 2096.1,1205.01 2096.69,1205.01 2097.28,1205.01 2097.86,1205.01 2098.45,1205.01 2099.04,1205.01 2099.62,1205.01 2100.21,1205.01 2100.8,1205.01 2101.38,1205.01 2101.97,1205.01 2102.55,1205.01 2103.14,1205.01 2103.73,1205.01 2104.31,1205.01 2104.9,1205.01 2105.49,1205.01 2106.07,1205.01 2106.66,1205.01 2107.25,1205.01 2107.83,1205.01 2108.42,1205.01 2109.01,1205.01 2109.59,1205.01 2110.18,1205.01 2110.76,1205.01 2111.35,1205.01 2111.94,1205.01 2112.52,1205.01 2113.11,1205.01 2113.7,1205.01 2114.28,1205.01 2114.87,1205.01 2115.46,1205.01 2116.04,1205.01 2116.63,1205.01 2117.22,1205.01 2117.8,1205.01 2118.39,1205.01 2118.97,1205.01 2119.56,1205.01 2120.15,1205.01 2120.73,1205.01 2121.32,1205.01 2121.91,1205.01 2122.49,1205.01 2123.08,1205.01 2123.67,1205.01 2124.25,1205.01 2124.84,1205.01 2125.42,1205.01 2126.01,1205.01 2126.6,1205.01 2127.18,1205.01 2127.77,1205.01 2128.36,1205.01 2128.94,1205.01 2129.53,1205.01 2130.12,1205.01 2130.7,1205.01 2131.29,1205.01 2131.88,1205.01 2132.46,1205.01 2133.05,1205.01 2133.63,1205.01 2134.22,1205.01 2134.81,1205.01 2135.39,1205.01 2135.98,1205.01 2136.57,1205.01 2137.15,1205.01 2137.74,1205.01 2138.33,1205.01 2138.91,1205.01 2139.5,1205.01 2140.09,1205.01 2140.67,1205.01 2141.26,1205.01 2141.84,1205.01 2142.43,1205.01 2143.02,1205.01 2143.6,1205.01 2144.19,1205.01 2144.78,1205.01 2145.36,1205.01 2145.95,1205.01 2146.54,1205.01 2147.12,1205.01 2147.71,1205.01 2148.3,1205.01 2148.88,1205.01 2149.47,1205.01 2150.05,1205.01 2150.64,1205.01 2151.23,1205.01 2151.81,1205.01 2152.4,1205.01 2152.99,1205.01 2153.57,1205.01 2154.16,1205.01 2154.75,1205.01 2155.33,1205.01 2155.92,1205.01 2156.5,1205.01 2157.09,1205.01 2157.68,1205.01 2158.26,1205.01 \"/>\n<path clip-path=\"url(#clip172)\" d=\"M986.025 1205.05 L986.612 1205.05 L987.198 1205.05 L987.785 1205.05 L988.371 1205.05 L988.957 1205.05 L989.544 1205.05 L990.13 1205.05 L990.717 1205.05 L991.303 1205.05 L991.889 1205.05 L992.476 1205.05 L993.062 1205.05 L993.649 1205.05 L994.235 1205.05 L994.822 1205.05 L995.408 1205.05 L995.994 1205.05 L996.581 1205.05 L997.167 1205.05 L997.754 1205.05 L998.34 1205.05 L998.926 1205.05 L999.513 1205.05 L1000.1 1205.05 L1000.69 1205.05 L1001.27 1205.05 L1001.86 1205.05 L1002.44 1205.05 L1003.03 1205.05 L1003.62 1205.05 L1004.2 1205.05 L1004.79 1205.05 L1005.38 1205.05 L1005.96 1205.05 L1006.55 1205.05 L1007.14 1205.05 L1007.72 1205.05 L1008.31 1205.05 L1008.9 1205.05 L1009.48 1205.05 L1010.07 1205.05 L1010.65 1205.05 L1011.24 1205.05 L1011.83 1205.05 L1012.41 1205.05 L1013 1205.05 L1013.59 1205.05 L1014.17 1205.05 L1014.76 1205.05 L1015.35 1205.05 L1015.93 1205.05 L1016.52 1205.05 L1017.11 1205.05 L1017.69 1205.05 L1018.28 1205.05 L1018.86 1205.05 L1019.45 1205.05 L1020.04 1205.05 L1020.62 1205.05 L1021.21 1205.05 L1021.8 1205.05 L1022.38 1205.05 L1022.97 1205.05 L1023.56 1205.05 L1024.14 1205.05 L1024.73 1205.05 L1025.32 1205.05 L1025.9 1205.05 L1026.49 1205.05 L1027.07 1205.05 L1027.66 1205.05 L1028.25 1205.05 L1028.83 1205.05 L1029.42 1205.05 L1030.01 1205.05 L1030.59 1205.05 L1031.18 1205.05 L1031.77 1205.05 L1032.35 1205.05 L1032.94 1205.05 L1033.52 1205.05 L1034.11 1205.05 L1034.7 1205.05 L1035.28 1205.05 L1035.87 1205.05 L1036.46 1205.05 L1037.04 1205.05 L1037.63 1205.05 L1038.22 1205.05 L1038.8 1205.05 L1039.39 1205.05 L1039.98 1205.05 L1040.56 1205.05 L1041.15 1205.05 L1041.73 1205.05 L1042.32 1205.05 L1042.91 1205.05 L1043.49 1205.05 L1044.08 1205.05 L1044.67 1205.05 L1045.25 1205.05 L1045.84 1205.05 L1046.43 1205.05 L1047.01 1205.05 L1047.6 1205.05 L1048.19 1205.05 L1048.77 1205.05 L1049.36 1205.05 L1049.94 1205.05 L1050.53 1205.05 L1051.12 1205.05 L1051.7 1205.05 L1052.29 1205.05 L1052.88 1205.05 L1053.46 1205.05 L1054.05 1205.05 L1054.64 1205.05 L1055.22 1205.05 L1055.81 1205.05 L1056.39 1205.05 L1056.98 1205.05 L1057.57 1205.05 L1058.15 1205.05 L1058.74 1205.05 L1059.33 1205.05 L1059.91 1205.05 L1060.5 1205.05 L1061.09 1205.05 L1061.67 1205.05 L1062.26 1205.05 L1062.85 1205.05 L1063.43 1205.05 L1064.02 1205.05 L1064.6 1205.05 L1065.19 1205.05 L1065.78 1205.05 L1066.36 1205.05 L1066.95 1205.05 L1067.54 1205.05 L1068.12 1205.05 L1068.71 1205.05 L1069.3 1205.05 L1069.88 1205.05 L1070.47 1205.05 L1071.06 1205.05 L1071.64 1205.05 L1072.23 1205.05 L1072.81 1205.05 L1073.4 1205.05 L1073.99 1205.05 L1074.57 1205.05 L1075.16 1205.05 L1075.75 1205.05 L1076.33 1205.05 L1076.92 1205.05 L1077.51 1205.05 L1078.09 1205.05 L1078.68 1205.05 L1079.26 1205.05 L1079.85 1205.05 L1080.44 1205.05 L1081.02 1205.05 L1081.61 1205.05 L1082.2 1205.05 L1082.78 1205.05 L1083.37 1205.05 L1083.96 1205.05 L1084.54 1205.05 L1085.13 1205.05 L1085.72 1205.05 L1086.3 1205.05 L1086.89 1205.05 L1087.47 1205.05 L1088.06 1205.05 L1088.65 1205.05 L1089.23 1205.05 L1089.82 1205.05 L1090.41 1205.05 L1090.99 1205.05 L1091.58 1205.05 L1092.17 1205.05 L1092.75 1205.05 L1093.34 1205.05 L1093.93 1205.05 L1094.51 1205.05 L1095.1 1205.05 L1095.68 1205.05 L1096.27 1205.05 L1096.86 1205.05 L1097.44 1205.05 L1098.03 1205.05 L1098.62 1205.05 L1099.2 1205.05 L1099.79 1205.05 L1100.38 1205.05 L1100.96 1205.05 L1101.55 1205.05 L1102.14 1205.05 L1102.72 1205.05 L1103.31 1205.05 L1103.89 1205.05 L1104.48 1205.05 L1105.07 1205.05 L1105.65 1205.05 L1106.24 1205.05 L1106.83 1205.05 L1107.41 1205.05 L1108 1205.05 L1108.59 1205.05 L1109.17 1205.05 L1109.76 1205.05 L1110.34 1205.05 L1110.93 1205.05 L1111.52 1205.05 L1112.1 1205.05 L1112.69 1205.05 L1113.28 1205.05 L1113.86 1205.05 L1114.45 1205.05 L1115.04 1205.05 L1115.62 1205.05 L1116.21 1205.05 L1116.8 1205.05 L1117.38 1205.05 L1117.97 1205.05 L1118.55 1205.05 L1119.14 1205.05 L1119.73 1205.05 L1120.31 1205.05 L1120.9 1205.05 L1121.49 1205.05 L1122.07 1205.05 L1122.66 1205.05 L1123.25 1205.05 L1123.83 1205.05 L1124.42 1205.05 L1125.01 1205.05 L1125.59 1205.05 L1126.18 1205.05 L1126.76 1205.05 L1127.35 1205.05 L1127.94 1205.05 L1128.52 1205.05 L1129.11 1205.05 L1129.7 1205.05 L1130.28 1205.05 L1130.87 1205.05 L1131.46 1205.05 L1132.04 1205.05 L1132.63 1205.05 L1133.21 1205.05 L1133.8 1205.05 L1134.39 1205.05 L1134.97 1205.05 L1135.56 1205.05 L1136.15 1205.05 L1136.73 1205.05 L1137.32 1205.05 L1137.91 1205.05 L1138.49 1205.05 L1139.08 1205.05 L1139.67 1205.05 L1140.25 1205.05 L1140.84 1205.05 L1141.42 1205.05 L1142.01 1205.05 L1142.6 1205.05 L1143.18 1205.05 L1143.77 1205.05 L1144.36 1205.05 L1144.94 1205.05 L1145.53 1205.05 L1146.12 1205.05 L1146.7 1205.05 L1147.29 1205.05 L1147.88 1205.05 L1148.46 1205.05 L1149.05 1205.05 L1149.63 1205.05 L1150.22 1205.05 L1150.81 1205.05 L1151.39 1205.05 L1151.98 1205.05 L1152.57 1205.05 L1153.15 1205.05 L1153.74 1205.05 L1154.33 1205.05 L1154.91 1205.05 L1155.5 1205.05 L1156.09 1205.05 L1156.67 1205.05 L1157.26 1205.05 L1157.84 1205.05 L1158.43 1205.05 L1159.02 1205.05 L1159.6 1205.05 L1160.19 1205.05 L1160.78 1205.05 L1161.36 1205.05 L1161.95 1205.05 L1162.54 1205.05 L1163.12 1205.05 L1163.71 1205.05 L1164.29 1205.05 L1164.88 1205.05 L1165.47 1205.05 L1166.05 1205.05 L1166.64 1205.05 L1167.23 1205.05 L1167.81 1205.05 L1168.4 1205.05 L1168.99 1205.05 L1169.57 1205.05 L1170.16 1205.05 L1170.75 1205.05 L1171.33 1205.05 L1171.92 1205.05 L1172.5 1205.05 L1173.09 1205.05 L1173.68 1205.05 L1174.26 1205.05 L1174.85 1205.05 L1175.44 1205.05 L1176.02 1205.05 L1176.61 1205.05 L1177.2 1205.05 L1177.78 1205.05 L1178.37 1205.05 L1178.96 1205.05 L1179.54 1205.05 L1180.13 1205.05 L1180.71 1205.05 L1181.3 1205.05 L1181.89 1205.05 L1182.47 1205.05 L1183.06 1205.05 L1183.65 1205.05 L1184.23 1205.05 L1184.82 1205.05 L1185.41 1205.05 L1185.99 1205.05 L1186.58 1205.05 L1187.16 1205.05 L1187.75 1205.05 L1188.34 1205.05 L1188.92 1205.05 L1189.51 1205.05 L1190.1 1205.05 L1190.68 1205.05 L1191.27 1205.05 L1191.86 1205.05 L1192.44 1205.05 L1193.03 1205.05 L1193.62 1205.05 L1194.2 1205.05 L1194.79 1205.05 L1195.37 1205.05 L1195.96 1205.05 L1196.55 1205.05 L1197.13 1205.05 L1197.72 1205.05 L1198.31 1205.05 L1198.89 1205.05 L1199.48 1205.05 L1200.07 1205.05 L1200.65 1205.05 L1201.24 1205.05 L1201.83 1205.05 L1202.41 1205.05 L1203 1205.05 L1203.58 1205.05 L1204.17 1205.05 L1204.76 1205.05 L1205.34 1205.05 L1205.93 1205.05 L1206.52 1205.05 L1207.1 1205.05 L1207.69 1205.05 L1208.28 1205.05 L1208.86 1205.05 L1209.45 1205.05 L1210.03 1205.05 L1210.62 1205.05 L1211.21 1205.05 L1211.79 1205.05 L1212.38 1205.05 L1212.97 1205.05 L1213.55 1205.05 L1214.14 1205.05 L1214.73 1205.05 L1215.31 1205.05 L1215.9 1205.05 L1216.49 1205.05 L1217.07 1205.05 L1217.66 1205.05 L1218.24 1205.05 L1218.83 1205.05 L1219.42 1205.05 L1220 1205.05 L1220.59 1205.05 L1221.18 1205.05 L1221.76 1205.05 L1222.35 1205.05 L1222.94 1205.05 L1223.52 1205.05 L1224.11 1205.05 L1224.7 1205.05 L1225.28 1205.05 L1225.87 1205.05 L1226.45 1205.05 L1227.04 1205.05 L1227.63 1205.05 L1228.21 1205.05 L1228.8 1205.05 L1229.39 1205.05 L1229.97 1205.05 L1230.56 1205.05 L1231.15 1205.05 L1231.73 1205.05 L1232.32 1205.05 L1232.91 1205.05 L1233.49 1205.05 L1234.08 1205.05 L1234.66 1205.05 L1235.25 1205.05 L1235.84 1205.05 L1236.42 1205.05 L1237.01 1205.05 L1237.6 1205.05 L1238.18 1205.05 L1238.77 1205.05 L1239.36 1205.05 L1239.94 1205.05 L1240.53 1205.05 L1241.11 1205.05 L1241.7 1205.05 L1242.29 1205.05 L1242.87 1205.05 L1243.46 1205.05 L1244.05 1205.05 L1244.63 1205.05 L1245.22 1205.05 L1245.81 1205.05 L1246.39 1205.05 L1246.98 1205.05 L1247.57 1205.05 L1248.15 1205.05 L1248.74 1205.05 L1249.32 1205.05 L1249.91 1205.05 L1250.5 1205.05 L1251.08 1205.05 L1251.67 1205.05 L1252.26 1205.05 L1252.84 1205.05 L1253.43 1205.05 L1254.02 1205.05 L1254.6 1205.05 L1255.19 1205.05 L1255.78 1205.05 L1256.36 1205.05 L1256.95 1205.05 L1257.53 1205.05 L1258.12 1205.05 L1258.71 1205.05 L1259.29 1205.05 L1259.88 1205.05 L1260.47 1205.05 L1261.05 1205.05 L1261.64 1205.05 L1262.23 1205.05 L1262.81 1205.05 L1263.4 1205.05 L1263.98 1205.05 L1264.57 1205.05 L1265.16 1205.05 L1265.74 1205.05 L1266.33 1205.05 L1266.92 1205.05 L1267.5 1205.05 L1268.09 1205.05 L1268.68 1205.05 L1269.26 1205.05 L1269.85 1205.05 L1270.44 1205.05 L1271.02 1205.05 L1271.61 1205.05 L1272.19 1205.05 L1272.78 1205.05 L1273.37 1205.05 L1273.95 1205.05 L1274.54 1205.05 L1275.13 1205.05 L1275.71 1205.05 L1276.3 1205.05 L1276.89 1205.05 L1277.47 1205.05 L1278.06 1205.05 L1278.65 1205.05 L1279.23 1205.05 L1279.82 1205.05 L1280.4 1205.05 L1280.99 1205.05 L1281.58 1205.05 L1282.16 1205.05 L1282.75 1205.05 L1283.34 1205.05 L1283.92 1205.05 L1284.51 1205.05 L1285.1 1205.05 L1285.68 1205.05 L1286.27 1205.05 L1286.86 1205.05 L1287.44 1205.05 L1288.03 1205.05 L1288.61 1205.05 L1289.2 1205.05 L1289.79 1205.05 L1290.37 1205.05 L1290.96 1205.05 L1291.55 1205.05 L1292.13 1205.05 L1292.72 1205.05 L1293.31 1205.05 L1293.89 1205.05 L1294.48 1205.05 L1295.06 1205.05 L1295.65 1205.05 L1296.24 1205.05 L1296.82 1205.05 L1297.41 1205.05 L1298 1205.05 L1298.58 1205.05 L1299.17 1205.05 L1299.76 1205.05 L1300.34 1205.05 L1300.93 1205.05 L1301.52 1205.05 L1302.1 1205.05 L1302.69 1205.05 L1303.27 1205.05 L1303.86 1205.05 L1304.45 1205.05 L1305.03 1205.05 L1305.62 1205.05 L1306.21 1205.05 L1306.79 1205.05 L1307.38 1205.05 L1307.97 1205.05 L1308.55 1205.05 L1309.14 1205.05 L1309.73 1205.05 L1310.31 1205.05 L1310.9 1205.05 L1311.48 1205.05 L1312.07 1205.05 L1312.66 1205.05 L1313.24 1205.05 L1313.83 1205.05 L1314.42 1205.05 L1315 1205.05 L1315.59 1205.05 L1316.18 1205.05 L1316.76 1205.05 L1317.35 1205.05 L1317.93 1205.05 L1318.52 1205.05 L1319.11 1205.05 L1319.69 1205.05 L1320.28 1205.05 L1320.87 1205.05 L1321.45 1205.05 L1322.04 1205.05 L1322.63 1205.05 L1323.21 1205.05 L1323.8 1205.05 L1324.39 1205.05 L1324.97 1205.05 L1325.56 1205.05 L1326.14 1205.05 L1326.73 1205.05 L1327.32 1205.05 L1327.9 1205.05 L1328.49 1205.05 L1329.08 1205.05 L1329.66 1205.05 L1330.25 1205.05 L1330.84 1205.05 L1331.42 1205.05 L1332.01 1205.05 L1332.6 1205.05 L1333.18 1205.05 L1333.77 1205.05 L1334.35 1205.05 L1334.94 1205.05 L1335.53 1205.05 L1336.11 1205.05 L1336.7 1205.05 L1337.29 1205.05 L1337.87 1205.05 L1338.46 1205.05 L1339.05 1205.05 L1339.63 1205.05 L1340.22 1205.05 L1340.8 1205.05 L1341.39 1205.05 L1341.98 1205.05 L1342.56 1205.05 L1343.15 1205.05 L1343.74 1205.05 L1344.32 1205.05 L1344.91 1205.05 L1345.5 1205.05 L1346.08 1205.05 L1346.67 1205.05 L1347.26 1205.05 L1347.84 1205.05 L1348.43 1205.05 L1349.01 1205.05 L1349.6 1205.05 L1350.19 1205.05 L1350.77 1205.05 L1351.36 1205.05 L1351.95 1205.05 L1352.53 1205.05 L1353.12 1205.05 L1353.71 1205.05 L1354.29 1205.05 L1354.88 1205.05 L1355.47 1205.05 L1356.05 1205.05 L1356.64 1205.05 L1357.22 1205.05 L1357.81 1205.05 L1358.4 1205.05 L1358.98 1205.05 L1359.57 1205.05 L1360.16 1205.05 L1360.74 1205.05 L1361.33 1205.05 L1361.92 1205.05 L1362.5 1205.05 L1363.09 1205.05 L1363.68 1205.05 L1364.26 1205.05 L1364.85 1205.05 L1365.43 1205.05 L1366.02 1205.05 L1366.61 1205.05 L1367.19 1205.05 L1367.78 1205.05 L1368.37 1205.05 L1368.95 1205.05 L1369.54 1205.05 L1370.13 1205.05 L1370.71 1205.05 L1371.3 1205.05 L1371.88 1205.05 L1372.47 1205.05 L1373.06 1205.05 L1373.64 1205.05 L1374.23 1205.05 L1374.82 1205.05 L1375.4 1205.05 L1375.99 1205.05 L1376.58 1205.05 L1377.16 1205.05 L1377.75 1205.05 L1378.34 1205.05 L1378.92 1205.05 L1379.51 1205.05 L1380.09 1205.05 L1380.68 1205.05 L1381.27 1205.05 L1381.85 1205.05 L1382.44 1205.05 L1383.03 1205.05 L1383.61 1205.05 L1384.2 1205.05 L1384.79 1205.05 L1385.37 1205.05 L1385.96 1205.05 L1386.55 1205.05 L1387.13 1205.05 L1387.72 1205.05 L1388.3 1205.05 L1388.89 1205.05 L1389.48 1205.05 L1390.06 1205.05 L1390.65 1205.05 L1391.24 1205.05 L1391.82 1205.05 L1392.41 1205.05 L1393 1205.05 L1393.58 1205.05 L1394.17 1205.05 L1394.75 1205.05 L1395.34 1205.05 L1395.93 1205.05 L1396.51 1205.05 L1397.1 1205.05 L1397.69 1205.05 L1398.27 1205.05 L1398.86 1205.05 L1399.45 1205.05 L1400.03 1205.05 L1400.62 1205.05 L1401.21 1205.05 L1401.79 1205.05 L1402.38 1205.05 L1402.96 1205.05 L1403.55 1205.05 L1404.14 1205.05 L1404.72 1205.05 L1405.31 1205.05 L1405.9 1205.05 L1406.48 1205.05 L1407.07 1205.05 L1407.66 1205.05 L1408.24 1205.05 L1408.83 1205.05 L1409.42 1205.05 L1410 1205.05 L1410.59 1205.05 L1411.17 1205.05 L1411.76 1205.05 L1412.35 1205.05 L1412.93 1205.05 L1413.52 1205.05 L1414.11 1205.05 L1414.69 1205.05 L1415.28 1205.05 L1415.87 1205.05 L1416.45 1205.05 L1417.04 1205.05 L1417.63 1205.05 L1418.21 1205.05 L1418.8 1205.05 L1419.38 1205.05 L1419.97 1205.05 L1420.56 1205.05 L1421.14 1205.05 L1421.73 1205.05 L1422.32 1205.05 L1422.9 1205.05 L1423.49 1205.05 L1424.08 1205.05 L1424.66 1205.05 L1425.25 1205.05 L1425.83 1205.05 L1426.42 1205.05 L1427.01 1205.05 L1427.59 1205.05 L1428.18 1205.05 L1428.77 1205.05 L1429.35 1205.05 L1429.94 1205.05 L1430.53 1205.05 L1431.11 1205.05 L1431.7 1205.05 L1432.29 1205.05 L1432.87 1205.05 L1433.46 1205.05 L1434.04 1205.05 L1434.63 1205.05 L1435.22 1205.05 L1435.8 1205.05 L1436.39 1205.05 L1436.98 1205.05 L1437.56 1205.05 L1438.15 1205.05 L1438.74 1205.05 L1439.32 1205.05 L1439.91 1205.05 L1440.5 1205.05 L1441.08 1205.05 L1441.67 1205.05 L1442.25 1205.05 L1442.84 1205.05 L1443.43 1205.05 L1444.01 1205.05 L1444.6 1205.05 L1445.19 1205.05 L1445.77 1205.05 L1446.36 1205.05 L1446.95 1205.05 L1447.53 1205.05 L1448.12 1205.05 L1448.7 1205.05 L1449.29 1205.05 L1449.88 1205.05 L1450.46 1205.05 L1451.05 1205.05 L1451.64 1205.05 L1452.22 1205.05 L1452.81 1205.05 L1453.4 1205.05 L1453.98 1205.05 L1454.57 1205.05 L1455.16 1205.05 L1455.74 1205.05 L1456.33 1205.05 L1456.91 1205.05 L1457.5 1205.05 L1458.09 1205.05 L1458.67 1205.05 L1459.26 1205.05 L1459.85 1205.05 L1460.43 1205.05 L1461.02 1205.05 L1461.61 1205.05 L1462.19 1205.05 L1462.78 1205.05 L1463.37 1205.05 L1463.95 1205.05 L1464.54 1205.05 L1465.12 1205.05 L1465.71 1205.05 L1466.3 1205.05 L1466.88 1205.05 L1467.47 1205.05 L1468.06 1205.05 L1468.64 1205.05 L1469.23 1205.05 L1469.82 1205.05 L1470.4 1205.05 L1470.99 1205.05 L1471.57 1205.05 L1472.16 1205.05 L1472.75 1205.05 L1473.33 1205.05 L1473.92 1205.05 L1474.51 1205.05 L1475.09 1205.05 L1475.68 1205.05 L1476.27 1205.05 L1476.85 1205.05 L1477.44 1205.05 L1478.03 1205.05 L1478.61 1205.05 L1479.2 1205.05 L1479.78 1205.05 L1480.37 1205.05 L1480.96 1205.05 L1481.54 1205.05 L1482.13 1205.05 L1482.72 1205.05 L1483.3 1205.05 L1483.89 1205.05 L1484.48 1205.05 L1485.06 1205.05 L1485.65 1205.05 L1486.24 1205.05 L1486.82 1205.05 L1487.41 1205.05 L1487.99 1205.05 L1488.58 1205.05 L1489.17 1205.05 L1489.75 1205.05 L1490.34 1205.05 L1490.93 1205.05 L1491.51 1205.05 L1492.1 1205.05 L1492.69 1205.05 L1493.27 1205.05 L1493.86 1205.05 L1494.45 1205.05 L1495.03 1205.05 L1495.62 1205.05 L1496.2 1205.05 L1496.79 1205.05 L1497.38 1205.05 L1497.96 1205.05 L1498.55 1205.05 L1499.14 1205.05 L1499.72 1205.05 L1500.31 1205.05 L1500.9 1205.05 L1501.48 1205.05 L1502.07 1205.05 L1502.65 1205.05 L1503.24 1205.05 L1503.83 1205.05 L1504.41 1205.05 L1505 1205.05 L1505.59 1205.05 L1506.17 1205.05 L1506.76 1205.05 L1507.35 1205.05 L1507.93 1205.05 L1508.52 1205.05 L1509.11 1205.05 L1509.69 1205.05 L1510.28 1205.05 L1510.86 1205.05 L1511.45 1205.05 L1512.04 1205.05 L1512.62 1205.05 L1513.21 1205.05 L1513.8 1205.05 L1514.38 1205.05 L1514.97 1205.05 L1515.56 1205.05 L1516.14 1205.05 L1516.73 1205.05 L1517.32 1205.05 L1517.9 1205.05 L1518.49 1205.05 L1519.07 1205.05 L1519.66 1205.05 L1520.25 1205.05 L1520.83 1205.05 L1521.42 1205.05 L1522.01 1205.05 L1522.59 1205.05 L1523.18 1205.05 L1523.77 1205.05 L1524.35 1205.05 L1524.94 1205.05 L1525.52 1205.05 L1526.11 1205.05 L1526.7 1205.05 L1527.28 1205.05 L1527.87 1205.05 L1528.46 1205.05 L1529.04 1205.05 L1529.63 1205.05 L1530.22 1205.05 L1530.8 1205.05 L1531.39 1205.05 L1531.98 1205.05 L1532.56 1205.05 L1533.15 1205.05 L1533.73 1205.05 L1534.32 1205.05 L1534.91 1205.05 L1535.49 1205.05 L1536.08 1205.05 L1536.67 1205.05 L1537.25 1205.05 L1537.84 1205.05 L1538.43 1205.05 L1539.01 1205.05 L1539.6 1205.05 L1540.19 1205.05 L1540.77 1205.05 L1541.36 1205.05 L1541.94 1205.05 L1542.53 1205.05 L1543.12 1205.05 L1543.7 1205.05 L1544.29 1205.05 L1544.88 1205.05 L1545.46 1205.05 L1546.05 1205.05 L1546.64 1205.05 L1547.22 1205.05 L1547.81 1205.05 L1548.4 1205.05 L1548.98 1205.05 L1549.57 1205.05 L1550.15 1205.05 L1550.74 1205.05 L1551.33 1205.05 L1551.91 1205.05 L1552.5 1205.05 L1553.09 1205.05 L1553.67 1205.05 L1554.26 1205.05 L1554.85 1205.05 L1555.43 1205.05 L1556.02 1205.05 L1556.6 1205.05 L1557.19 1205.05 L1557.78 1205.05 L1558.36 1205.05 L1558.95 1205.05 L1559.54 1205.05 L1560.12 1205.05 L1560.71 1205.05 L1561.3 1205.05 L1561.88 1205.05 L1562.47 1205.05 L1563.06 1205.05 L1563.64 1205.05 L1564.23 1205.05 L1564.81 1205.05 L1565.4 1205.05 L1565.99 1205.05 L1566.57 1205.05 L1567.16 1205.05 L1567.75 1205.05 L1568.33 1205.05 L1568.92 1205.05 L1569.51 1205.05 L1570.09 1205.05 L1570.68 1205.05 L1571.27 1205.05 L1571.85 1205.05 L1572.44 1205.05 L1573.02 1205.05 L1573.61 1205.05 L1574.2 1205.05 L1574.78 1205.05 L1575.37 1205.05 L1575.96 1205.05 L1576.54 1205.05 L1577.13 1205.05 L1577.72 1205.05 L1578.3 1205.05 L1578.89 1205.05 L1579.47 1205.05 L1580.06 1205.05 L1580.65 1205.05 L1581.23 1205.05 L1581.82 1205.05 L1582.41 1205.05 L1582.99 1205.05 L1583.58 1205.05 L1584.17 1205.05 L1584.75 1205.05 L1585.34 1205.05 L1585.93 1205.05 L1586.51 1205.05 L1587.1 1205.05 L1587.68 1205.05 L1588.27 1205.05 L1588.86 1205.05 L1589.44 1205.05 L1590.03 1205.05 L1590.62 1205.05 L1591.2 1205.05 L1591.79 1205.05 L1592.38 1205.05 L1592.96 1205.05 L1593.55 1205.05 L1594.14 1205.05 L1594.72 1205.05 L1595.31 1205.05 L1595.89 1205.05 L1596.48 1205.05 L1597.07 1205.05 L1597.65 1205.05 L1598.24 1205.05 L1598.83 1205.05 L1599.41 1205.05 L1600 1205.05 L1600.59 1205.05 L1601.17 1205.05 L1601.76 1205.05 L1602.34 1205.05 L1602.93 1205.05 L1603.52 1205.05 L1604.1 1205.05 L1604.69 1205.05 L1605.28 1205.05 L1605.86 1205.05 L1606.45 1205.05 L1607.04 1205.05 L1607.62 1205.05 L1608.21 1205.05 L1608.8 1205.05 L1609.38 1205.05 L1609.97 1205.05 L1610.55 1205.05 L1611.14 1205.05 L1611.73 1205.05 L1612.31 1205.05 L1612.9 1205.05 L1613.49 1205.05 L1614.07 1205.05 L1614.66 1205.05 L1615.25 1205.05 L1615.83 1205.05 L1616.42 1205.05 L1617.01 1205.05 L1617.59 1205.05 L1618.18 1205.05 L1618.76 1205.05 L1619.35 1205.05 L1619.94 1205.05 L1620.52 1205.05 L1621.11 1205.05 L1621.7 1205.05 L1622.28 1205.05 L1622.87 1205.05 L1623.46 1205.05 L1624.04 1205.05 L1624.63 1205.05 L1625.22 1205.05 L1625.8 1205.05 L1626.39 1205.05 L1626.97 1205.05 L1627.56 1205.05 L1628.15 1205.05 L1628.73 1205.05 L1629.32 1205.05 L1629.91 1205.05 L1630.49 1205.05 L1631.08 1205.05 L1631.67 1205.05 L1632.25 1205.05 L1632.84 1205.05 L1633.42 1205.05 L1634.01 1205.05 L1634.6 1205.05 L1635.18 1205.05 L1635.77 1205.05 L1636.36 1205.05 L1636.94 1205.05 L1637.53 1205.05 L1638.12 1205.05 L1638.7 1205.05 L1639.29 1205.05 L1639.88 1205.05 L1640.46 1205.05 L1641.05 1205.05 L1641.63 1205.05 L1642.22 1205.05 L1642.81 1205.05 L1643.39 1205.05 L1643.98 1205.05 L1644.57 1205.05 L1645.15 1205.05 L1645.74 1205.05 L1646.33 1205.05 L1646.91 1205.05 L1647.5 1205.05 L1648.09 1205.05 L1648.67 1205.05 L1649.26 1205.05 L1649.84 1205.05 L1650.43 1205.05 L1651.02 1205.05 L1651.6 1205.05 L1652.19 1205.05 L1652.78 1205.05 L1653.36 1205.05 L1653.95 1205.05 L1654.54 1205.05 L1655.12 1205.05 L1655.71 1205.05 L1656.29 1205.05 L1656.88 1205.05 L1657.47 1205.05 L1658.05 1205.05 L1658.64 1205.05 L1659.23 1205.05 L1659.81 1205.05 L1660.4 1205.05 L1660.99 1205.05 L1661.57 1205.05 L1662.16 1205.05 L1662.75 1205.05 L1663.33 1205.05 L1663.92 1205.05 L1664.5 1205.05 L1665.09 1205.05 L1665.68 1205.05 L1666.26 1205.05 L1666.85 1205.05 L1667.44 1205.05 L1668.02 1205.05 L1668.61 1205.05 L1669.2 1205.05 L1669.78 1205.05 L1670.37 1205.05 L1670.96 1205.05 L1671.54 1205.05 L1672.13 1205.05 L1672.71 1205.05 L1673.3 1205.05 L1673.89 1205.05 L1674.47 1205.05 L1675.06 1205.05 L1675.65 1205.05 L1676.23 1205.05 L1676.82 1205.05 L1677.41 1205.05 L1677.99 1205.05 L1678.58 1205.05 L1679.17 1205.05 L1679.75 1205.05 L1680.34 1205.05 L1680.92 1205.05 L1681.51 1205.05 L1682.1 1205.05 L1682.68 1205.05 L1683.27 1205.05 L1683.86 1205.05 L1684.44 1205.05 L1685.03 1205.05 L1685.62 1205.05 L1686.2 1205.05 L1686.79 1205.05 L1687.37 1205.05 L1687.96 1205.05 L1688.55 1205.05 L1689.13 1205.05 L1689.72 1205.05 L1690.31 1205.05 L1690.89 1205.05 L1691.48 1205.05 L1692.07 1205.05 L1692.65 1205.05 L1693.24 1205.05 L1693.83 1205.05 L1694.41 1205.05 L1695 1205.05 L1695.58 1205.05 L1696.17 1205.05 L1696.76 1205.05 L1697.34 1205.05 L1697.93 1205.05 L1698.52 1205.05 L1699.1 1205.05 L1699.69 1205.05 L1700.28 1205.05 L1700.86 1205.05 L1701.45 1205.05 L1702.04 1205.05 L1702.62 1205.05 L1703.21 1205.05 L1703.79 1205.05 L1704.38 1205.05 L1704.97 1205.05 L1705.55 1205.05 L1706.14 1205.05 L1706.73 1205.05 L1707.31 1205.05 L1707.9 1205.05 L1708.49 1205.05 L1709.07 1205.05 L1709.66 1205.05 L1710.24 1205.05 L1710.83 1205.05 L1711.42 1205.05 L1712 1205.05 L1712.59 1205.05 L1713.18 1205.05 L1713.76 1205.05 L1714.35 1205.05 L1714.94 1205.05 L1715.52 1205.05 L1716.11 1205.05 L1716.7 1205.05 L1717.28 1205.05 L1717.87 1205.05 L1718.45 1205.05 L1719.04 1205.05 L1719.63 1205.05 L1720.21 1205.05 L1720.8 1205.05 L1721.39 1205.05 L1721.97 1205.05 L1722.56 1205.05 L1723.15 1205.05 L1723.73 1205.05 L1724.32 1205.05 L1724.91 1205.05 L1725.49 1205.05 L1726.08 1205.05 L1726.66 1205.05 L1727.25 1205.05 L1727.84 1205.05 L1728.42 1205.05 L1729.01 1205.05 L1729.6 1205.05 L1730.18 1205.05 L1730.77 1205.05 L1731.36 1205.05 L1731.94 1205.05 L1732.53 1205.05 L1733.11 1205.05 L1733.7 1205.05 L1734.29 1205.05 L1734.87 1205.05 L1735.46 1205.05 L1736.05 1205.05 L1736.63 1205.05 L1737.22 1205.05 L1737.81 1205.05 L1738.39 1205.05 L1738.98 1205.05 L1739.57 1205.05 L1740.15 1205.05 L1740.74 1205.05 L1741.32 1205.05 L1741.91 1205.05 L1742.5 1205.05 L1743.08 1205.05 L1743.67 1205.05 L1744.26 1205.05 L1744.84 1205.05 L1745.43 1205.05 L1746.02 1205.05 L1746.6 1205.05 L1747.19 1205.05 L1747.78 1205.05 L1748.36 1205.05 L1748.95 1205.05 L1749.53 1205.05 L1750.12 1205.05 L1750.71 1205.05 L1751.29 1205.05 L1751.88 1205.05 L1752.47 1205.05 L1753.05 1205.05 L1753.64 1205.05 L1754.23 1205.05 L1754.81 1205.05 L1755.4 1205.05 L1755.99 1205.05 L1756.57 1205.05 L1757.16 1205.05 L1757.74 1205.05 L1758.33 1205.05 L1758.92 1205.05 L1759.5 1205.05 L1760.09 1205.05 L1760.68 1205.05 L1761.26 1205.05 L1761.85 1205.05 L1762.44 1205.05 L1763.02 1205.05 L1763.61 1205.05 L1764.19 1205.05 L1764.78 1205.05 L1765.37 1205.05 L1765.95 1205.05 L1766.54 1205.05 L1767.13 1205.05 L1767.71 1205.05 L1768.3 1205.05 L1768.89 1205.05 L1769.47 1205.05 L1770.06 1205.05 L1770.65 1205.05 L1771.23 1205.05 L1771.82 1205.05 L1772.4 1205.05 L1772.99 1205.05 L1773.58 1205.05 L1774.16 1205.05 L1774.75 1205.05 L1775.34 1205.05 L1775.92 1205.05 L1776.51 1205.05 L1777.1 1205.05 L1777.68 1205.05 L1778.27 1205.05 L1778.86 1205.05 L1779.44 1205.05 L1780.03 1205.05 L1780.61 1205.05 L1781.2 1205.05 L1781.79 1205.05 L1782.37 1205.05 L1782.96 1205.05 L1783.55 1205.05 L1784.13 1205.05 L1784.72 1205.05 L1785.31 1205.05 L1785.89 1205.05 L1786.48 1205.05 L1787.06 1205.05 L1787.65 1205.05 L1788.24 1205.05 L1788.82 1205.05 L1789.41 1205.05 L1790 1205.05 L1790.58 1205.05 L1791.17 1205.05 L1791.76 1205.05 L1792.34 1205.05 L1792.93 1205.05 L1793.52 1205.05 L1794.1 1205.05 L1794.69 1205.05 L1795.27 1205.05 L1795.86 1205.05 L1796.45 1205.05 L1797.03 1205.05 L1797.62 1205.05 L1798.21 1205.05 L1798.79 1205.05 L1799.38 1205.05 L1799.97 1205.05 L1800.55 1205.05 L1801.14 1205.05 L1801.73 1205.05 L1802.31 1205.05 L1802.9 1205.05 L1803.48 1205.05 L1804.07 1205.05 L1804.66 1205.05 L1805.24 1205.05 L1805.83 1205.05 L1806.42 1205.05 L1807 1205.05 L1807.59 1205.05 L1808.18 1205.05 L1808.76 1205.05 L1809.35 1205.05 L1809.94 1205.05 L1810.52 1205.05 L1811.11 1205.05 L1811.69 1205.05 L1812.28 1205.05 L1812.87 1205.05 L1813.45 1205.05 L1814.04 1205.05 L1814.63 1205.05 L1815.21 1205.05 L1815.8 1205.05 L1816.39 1205.05 L1816.97 1205.05 L1817.56 1205.05 L1818.14 1205.05 L1818.73 1205.05 L1819.32 1205.05 L1819.9 1205.05 L1820.49 1205.05 L1821.08 1205.05 L1821.66 1205.05 L1822.25 1205.05 L1822.84 1205.05 L1823.42 1205.05 L1824.01 1205.05 L1824.6 1205.05 L1825.18 1205.05 L1825.77 1205.05 L1826.35 1205.05 L1826.94 1205.05 L1827.53 1205.05 L1828.11 1205.05 L1828.7 1205.05 L1829.29 1205.05 L1829.87 1205.05 L1830.46 1205.05 L1831.05 1205.05 L1831.63 1205.05 L1832.22 1205.05 L1832.81 1205.05 L1833.39 1205.05 L1833.98 1205.05 L1834.56 1205.05 L1835.15 1205.05 L1835.74 1205.05 L1836.32 1205.05 L1836.91 1205.05 L1837.5 1205.05 L1838.08 1205.05 L1838.67 1205.05 L1839.26 1205.05 L1839.84 1205.05 L1840.43 1205.05 L1841.01 1205.05 L1841.6 1205.05 L1842.19 1205.05 L1842.77 1205.05 L1843.36 1205.05 L1843.95 1205.05 L1844.53 1205.05 L1845.12 1205.05 L1845.71 1205.05 L1846.29 1205.05 L1846.88 1205.05 L1847.47 1205.05 L1848.05 1205.05 L1848.64 1205.05 L1849.22 1205.05 L1849.81 1205.05 L1850.4 1205.05 L1850.98 1205.05 L1851.57 1205.05 L1852.16 1205.05 L1852.74 1205.05 L1853.33 1205.05 L1853.92 1205.05 L1854.5 1205.05 L1855.09 1205.05 L1855.68 1205.05 L1856.26 1205.05 L1856.85 1205.05 L1857.43 1205.05 L1858.02 1205.05 L1858.61 1205.05 L1859.19 1205.05 L1859.78 1205.05 L1860.37 1205.05 L1860.95 1205.05 L1861.54 1205.05 L1862.13 1205.05 L1862.71 1205.05 L1863.3 1205.05 L1863.88 1205.05 L1864.47 1205.05 L1865.06 1205.05 L1865.64 1205.05 L1866.23 1205.05 L1866.82 1205.05 L1867.4 1205.05 L1867.99 1205.05 L1868.58 1205.05 L1869.16 1205.05 L1869.75 1205.05 L1870.34 1205.05 L1870.92 1205.05 L1871.51 1205.05 L1872.09 1205.05 L1872.68 1205.05 L1873.27 1205.05 L1873.85 1205.05 L1874.44 1205.05 L1875.03 1205.05 L1875.61 1205.05 L1876.2 1205.05 L1876.79 1205.05 L1877.37 1205.05 L1877.96 1205.05 L1878.55 1205.05 L1879.13 1205.05 L1879.72 1205.05 L1880.3 1205.05 L1880.89 1205.05 L1881.48 1205.05 L1882.06 1205.05 L1882.65 1205.05 L1883.24 1205.05 L1883.82 1205.05 L1884.41 1205.05 L1885 1205.05 L1885.58 1205.05 L1886.17 1205.05 L1886.76 1205.05 L1887.34 1205.05 L1887.93 1205.05 L1888.51 1205.05 L1889.1 1205.05 L1889.69 1205.05 L1890.27 1205.05 L1890.86 1205.05 L1891.45 1205.05 L1892.03 1205.05 L1892.62 1205.05 L1893.21 1205.05 L1893.79 1205.05 L1894.38 1205.05 L1894.96 1205.05 L1895.55 1205.05 L1896.14 1205.05 L1896.72 1205.05 L1897.31 1205.05 L1897.9 1205.05 L1898.48 1205.05 L1899.07 1205.05 L1899.66 1205.05 L1900.24 1205.05 L1900.83 1205.05 L1901.42 1205.05 L1902 1205.05 L1902.59 1205.05 L1903.17 1205.05 L1903.76 1205.05 L1904.35 1205.05 L1904.93 1205.05 L1905.52 1205.05 L1906.11 1205.05 L1906.69 1205.05 L1907.28 1205.05 L1907.87 1205.05 L1908.45 1205.05 L1909.04 1205.05 L1909.63 1205.05 L1910.21 1205.05 L1910.8 1205.05 L1911.38 1205.05 L1911.97 1205.05 L1912.56 1205.05 L1913.14 1205.05 L1913.73 1205.05 L1914.32 1205.05 L1914.9 1205.05 L1915.49 1205.05 L1916.08 1205.05 L1916.66 1205.05 L1917.25 1205.05 L1917.83 1205.05 L1918.42 1205.05 L1919.01 1205.05 L1919.59 1205.05 L1920.18 1205.05 L1920.77 1205.05 L1921.35 1205.05 L1921.94 1205.05 L1922.53 1205.05 L1923.11 1205.05 L1923.7 1205.05 L1924.29 1205.05 L1924.87 1205.05 L1925.46 1205.05 L1926.04 1205.05 L1926.63 1205.05 L1927.22 1205.05 L1927.8 1205.05 L1928.39 1205.05 L1928.98 1205.05 L1929.56 1205.05 L1930.15 1205.05 L1930.74 1205.05 L1931.32 1205.05 L1931.91 1205.05 L1932.5 1205.05 L1933.08 1205.05 L1933.67 1205.05 L1934.25 1205.05 L1934.84 1205.05 L1935.43 1205.05 L1936.01 1205.05 L1936.6 1205.05 L1937.19 1205.05 L1937.77 1205.05 L1938.36 1205.05 L1938.95 1205.05 L1939.53 1205.05 L1940.12 1205.05 L1940.71 1205.05 L1941.29 1205.05 L1941.88 1205.05 L1942.46 1205.05 L1943.05 1205.05 L1943.64 1205.05 L1944.22 1205.05 L1944.81 1205.05 L1945.4 1205.05 L1945.98 1205.05 L1946.57 1205.05 L1947.16 1205.05 L1947.74 1205.05 L1948.33 1205.05 L1948.91 1205.05 L1949.5 1205.05 L1950.09 1205.05 L1950.67 1205.05 L1951.26 1205.05 L1951.85 1205.05 L1952.43 1205.05 L1953.02 1205.05 L1953.61 1205.05 L1954.19 1205.05 L1954.78 1205.05 L1955.37 1205.05 L1955.95 1205.05 L1956.54 1205.05 L1957.12 1205.05 L1957.71 1205.05 L1958.3 1205.05 L1958.88 1205.05 L1959.47 1205.05 L1960.06 1205.05 L1960.64 1205.05 L1961.23 1205.05 L1961.82 1205.05 L1962.4 1205.05 L1962.99 1205.05 L1963.58 1205.05 L1964.16 1205.05 L1964.75 1205.05 L1965.33 1205.05 L1965.92 1205.05 L1966.51 1205.05 L1967.09 1205.05 L1967.68 1205.05 L1968.27 1205.05 L1968.85 1205.05 L1969.44 1205.05 L1970.03 1205.05 L1970.61 1205.05 L1971.2 1205.05 L1971.78 1205.05 L1972.37 1205.05 L1972.96 1205.05 L1973.54 1205.05 L1974.13 1205.05 L1974.72 1205.05 L1975.3 1205.05 L1975.89 1205.05 L1976.48 1205.05 L1977.06 1205.05 L1977.65 1205.05 L1978.24 1205.05 L1978.82 1205.05 L1979.41 1205.05 L1979.99 1205.05 L1980.58 1205.05 L1981.17 1205.05 L1981.75 1205.05 L1982.34 1205.05 L1982.93 1205.05 L1983.51 1205.05 L1984.1 1205.05 L1984.69 1205.05 L1985.27 1205.05 L1985.86 1205.05 L1986.45 1205.05 L1987.03 1205.05 L1987.62 1205.05 L1988.2 1205.05 L1988.79 1205.05 L1989.38 1205.05 L1989.96 1205.05 L1990.55 1205.05 L1991.14 1205.05 L1991.72 1205.05 L1992.31 1205.05 L1992.9 1205.05 L1993.48 1205.05 L1994.07 1205.05 L1994.65 1205.05 L1995.24 1205.05 L1995.83 1205.05 L1996.41 1205.05 L1997 1205.05 L1997.59 1205.05 L1998.17 1205.05 L1998.76 1205.05 L1999.35 1205.05 L1999.93 1205.05 L2000.52 1205.05 L2001.11 1205.05 L2001.69 1205.05 L2002.28 1205.05 L2002.86 1205.05 L2003.45 1205.05 L2004.04 1205.05 L2004.62 1205.05 L2005.21 1205.05 L2005.8 1205.05 L2006.38 1205.05 L2006.97 1205.05 L2007.56 1205.05 L2008.14 1205.05 L2008.73 1205.05 L2009.32 1205.05 L2009.9 1205.05 L2010.49 1205.05 L2011.07 1205.05 L2011.66 1205.05 L2012.25 1205.05 L2012.83 1205.05 L2013.42 1205.05 L2014.01 1205.05 L2014.59 1205.05 L2015.18 1205.05 L2015.77 1205.05 L2016.35 1205.05 L2016.94 1205.05 L2017.53 1205.05 L2018.11 1205.05 L2018.7 1205.05 L2019.28 1205.05 L2019.87 1205.05 L2020.46 1205.05 L2021.04 1205.05 L2021.63 1205.05 L2022.22 1205.05 L2022.8 1205.05 L2023.39 1205.05 L2023.98 1205.05 L2024.56 1205.05 L2025.15 1205.05 L2025.73 1205.05 L2026.32 1205.05 L2026.91 1205.05 L2027.49 1205.05 L2028.08 1205.05 L2028.67 1205.05 L2029.25 1205.05 L2029.84 1205.05 L2030.43 1205.05 L2031.01 1205.05 L2031.6 1205.05 L2032.19 1205.05 L2032.77 1205.05 L2033.36 1205.05 L2033.94 1205.05 L2034.53 1205.05 L2035.12 1205.05 L2035.7 1205.05 L2036.29 1205.05 L2036.88 1205.05 L2037.46 1205.05 L2038.05 1205.05 L2038.64 1205.05 L2039.22 1205.05 L2039.81 1205.05 L2040.4 1205.05 L2040.98 1205.05 L2041.57 1205.05 L2042.15 1205.05 L2042.74 1205.05 L2043.33 1205.05 L2043.91 1205.05 L2044.5 1205.05 L2045.09 1205.05 L2045.67 1205.05 L2046.26 1205.05 L2046.85 1205.05 L2047.43 1205.05 L2048.02 1205.05 L2048.6 1205.05 L2049.19 1205.05 L2049.78 1205.05 L2050.36 1205.05 L2050.95 1205.05 L2051.54 1205.05 L2052.12 1205.05 L2052.71 1205.05 L2053.3 1205.05 L2053.88 1205.05 L2054.47 1205.05 L2055.06 1205.05 L2055.64 1205.05 L2056.23 1205.05 L2056.81 1205.05 L2057.4 1205.05 L2057.99 1205.05 L2058.57 1205.05 L2059.16 1205.05 L2059.75 1205.05 L2060.33 1205.05 L2060.92 1205.05 L2061.51 1205.05 L2062.09 1205.05 L2062.68 1205.05 L2063.27 1205.05 L2063.85 1205.05 L2064.44 1205.05 L2065.02 1205.05 L2065.61 1205.05 L2066.2 1205.05 L2066.78 1205.05 L2067.37 1205.05 L2067.96 1205.05 L2068.54 1205.05 L2069.13 1205.05 L2069.72 1205.05 L2070.3 1205.05 L2070.89 1205.05 L2071.48 1205.05 L2072.06 1205.05 L2072.65 1205.05 L2073.23 1205.05 L2073.82 1205.05 L2074.41 1205.05 L2074.99 1205.05 L2075.58 1205.05 L2076.17 1205.05 L2076.75 1205.05 L2077.34 1205.05 L2077.93 1205.05 L2078.51 1205.05 L2079.1 1205.05 L2079.68 1205.05 L2080.27 1205.05 L2080.86 1205.05 L2081.44 1205.05 L2082.03 1205.05 L2082.62 1205.05 L2083.2 1205.05 L2083.79 1205.05 L2084.38 1205.05 L2084.96 1205.05 L2085.55 1205.05 L2086.14 1205.05 L2086.72 1205.05 L2087.31 1205.05 L2087.89 1205.05 L2088.48 1205.05 L2089.07 1205.05 L2089.65 1205.05 L2090.24 1205.05 L2090.83 1205.05 L2091.41 1205.05 L2092 1205.05 L2092.59 1205.05 L2093.17 1205.05 L2093.76 1205.05 L2094.35 1205.05 L2094.93 1205.05 L2095.52 1205.05 L2096.1 1205.05 L2096.69 1205.05 L2097.28 1205.05 L2097.86 1205.05 L2098.45 1205.05 L2099.04 1205.05 L2099.62 1205.05 L2100.21 1205.05 L2100.8 1205.05 L2101.38 1205.05 L2101.97 1205.05 L2102.55 1205.05 L2103.14 1205.05 L2103.73 1205.05 L2104.31 1205.05 L2104.9 1205.05 L2105.49 1205.05 L2106.07 1205.05 L2106.66 1205.05 L2107.25 1205.05 L2107.83 1205.05 L2108.42 1205.05 L2109.01 1205.05 L2109.59 1205.05 L2110.18 1205.05 L2110.76 1205.05 L2111.35 1205.05 L2111.94 1205.05 L2112.52 1205.05 L2113.11 1205.05 L2113.7 1205.05 L2114.28 1205.05 L2114.87 1205.05 L2115.46 1205.05 L2116.04 1205.05 L2116.63 1205.05 L2117.22 1205.05 L2117.8 1205.05 L2118.39 1205.05 L2118.97 1205.05 L2119.56 1205.05 L2120.15 1205.05 L2120.73 1205.05 L2121.32 1205.05 L2121.91 1205.05 L2122.49 1205.05 L2123.08 1205.05 L2123.67 1205.05 L2124.25 1205.05 L2124.84 1205.05 L2125.42 1205.05 L2126.01 1205.05 L2126.6 1205.05 L2127.18 1205.05 L2127.77 1205.05 L2128.36 1205.05 L2128.94 1205.05 L2129.53 1205.05 L2130.12 1205.05 L2130.7 1205.05 L2131.29 1205.05 L2131.88 1205.05 L2132.46 1205.05 L2133.05 1205.05 L2133.63 1205.05 L2134.22 1205.05 L2134.81 1205.05 L2135.39 1205.05 L2135.98 1205.05 L2136.57 1205.05 L2137.15 1205.05 L2137.74 1205.05 L2138.33 1205.05 L2138.91 1205.05 L2139.5 1205.05 L2140.09 1205.05 L2140.67 1205.05 L2141.26 1205.05 L2141.84 1205.05 L2142.43 1205.05 L2143.02 1205.05 L2143.6 1205.05 L2144.19 1205.05 L2144.78 1205.05 L2145.36 1205.05 L2145.95 1205.05 L2146.54 1205.05 L2147.12 1205.05 L2147.71 1205.05 L2148.3 1205.05 L2148.88 1205.05 L2149.47 1205.05 L2150.05 1205.05 L2150.64 1205.05 L2151.23 1205.05 L2151.81 1205.05 L2152.4 1205.05 L2152.99 1205.05 L2153.57 1205.05 L2154.16 1205.05 L2154.75 1205.05 L2155.33 1205.05 L2155.92 1205.05 L2156.5 1205.05 L2157.09 1205.05 L2157.68 1205.05 L2158.26 1205.05 L2158.26 1204.83 L2157.68 1204.83 L2157.09 1204.83 L2156.5 1204.83 L2155.92 1204.83 L2155.33 1204.83 L2154.75 1204.83 L2154.16 1204.83 L2153.57 1204.83 L2152.99 1204.83 L2152.4 1204.83 L2151.81 1204.83 L2151.23 1204.83 L2150.64 1204.83 L2150.05 1204.83 L2149.47 1204.83 L2148.88 1204.83 L2148.3 1204.83 L2147.71 1204.83 L2147.12 1204.83 L2146.54 1204.83 L2145.95 1204.83 L2145.36 1204.83 L2144.78 1204.83 L2144.19 1204.83 L2143.6 1204.83 L2143.02 1204.83 L2142.43 1204.83 L2141.84 1204.83 L2141.26 1204.83 L2140.67 1204.83 L2140.09 1204.83 L2139.5 1204.83 L2138.91 1204.83 L2138.33 1204.83 L2137.74 1204.83 L2137.15 1204.83 L2136.57 1204.83 L2135.98 1204.83 L2135.39 1204.83 L2134.81 1204.83 L2134.22 1204.83 L2133.63 1204.83 L2133.05 1204.83 L2132.46 1204.83 L2131.88 1204.83 L2131.29 1204.83 L2130.7 1204.83 L2130.12 1204.83 L2129.53 1204.83 L2128.94 1204.83 L2128.36 1204.83 L2127.77 1204.83 L2127.18 1204.83 L2126.6 1204.83 L2126.01 1204.83 L2125.42 1204.83 L2124.84 1204.83 L2124.25 1204.83 L2123.67 1204.83 L2123.08 1204.83 L2122.49 1204.83 L2121.91 1204.83 L2121.32 1204.83 L2120.73 1204.83 L2120.15 1204.83 L2119.56 1204.83 L2118.97 1204.83 L2118.39 1204.83 L2117.8 1204.83 L2117.22 1204.83 L2116.63 1204.83 L2116.04 1204.83 L2115.46 1204.83 L2114.87 1204.83 L2114.28 1204.83 L2113.7 1204.83 L2113.11 1204.83 L2112.52 1204.83 L2111.94 1204.83 L2111.35 1204.83 L2110.76 1204.83 L2110.18 1204.83 L2109.59 1204.83 L2109.01 1204.83 L2108.42 1204.83 L2107.83 1204.83 L2107.25 1204.83 L2106.66 1204.83 L2106.07 1204.83 L2105.49 1204.83 L2104.9 1204.83 L2104.31 1204.83 L2103.73 1204.83 L2103.14 1204.83 L2102.55 1204.83 L2101.97 1204.83 L2101.38 1204.83 L2100.8 1204.83 L2100.21 1204.83 L2099.62 1204.83 L2099.04 1204.83 L2098.45 1204.83 L2097.86 1204.83 L2097.28 1204.83 L2096.69 1204.83 L2096.1 1204.83 L2095.52 1204.83 L2094.93 1204.83 L2094.35 1204.83 L2093.76 1204.83 L2093.17 1204.83 L2092.59 1204.83 L2092 1204.83 L2091.41 1204.83 L2090.83 1204.83 L2090.24 1204.83 L2089.65 1204.83 L2089.07 1204.83 L2088.48 1204.83 L2087.89 1204.83 L2087.31 1204.83 L2086.72 1204.83 L2086.14 1204.83 L2085.55 1204.83 L2084.96 1204.83 L2084.38 1204.83 L2083.79 1204.83 L2083.2 1204.83 L2082.62 1204.83 L2082.03 1204.83 L2081.44 1204.83 L2080.86 1204.83 L2080.27 1204.83 L2079.68 1204.83 L2079.1 1204.83 L2078.51 1204.83 L2077.93 1204.83 L2077.34 1204.83 L2076.75 1204.83 L2076.17 1204.83 L2075.58 1204.83 L2074.99 1204.83 L2074.41 1204.83 L2073.82 1204.83 L2073.23 1204.83 L2072.65 1204.83 L2072.06 1204.83 L2071.48 1204.83 L2070.89 1204.83 L2070.3 1204.83 L2069.72 1204.83 L2069.13 1204.83 L2068.54 1204.83 L2067.96 1204.83 L2067.37 1204.83 L2066.78 1204.83 L2066.2 1204.83 L2065.61 1204.83 L2065.02 1204.83 L2064.44 1204.83 L2063.85 1204.83 L2063.27 1204.83 L2062.68 1204.83 L2062.09 1204.83 L2061.51 1204.83 L2060.92 1204.83 L2060.33 1204.83 L2059.75 1204.83 L2059.16 1204.83 L2058.57 1204.83 L2057.99 1204.83 L2057.4 1204.83 L2056.81 1204.83 L2056.23 1204.83 L2055.64 1204.83 L2055.06 1204.83 L2054.47 1204.83 L2053.88 1204.83 L2053.3 1204.83 L2052.71 1204.83 L2052.12 1204.83 L2051.54 1204.83 L2050.95 1204.83 L2050.36 1204.83 L2049.78 1204.83 L2049.19 1204.83 L2048.6 1204.83 L2048.02 1204.83 L2047.43 1204.83 L2046.85 1204.83 L2046.26 1204.83 L2045.67 1204.83 L2045.09 1204.83 L2044.5 1204.83 L2043.91 1204.83 L2043.33 1204.83 L2042.74 1204.83 L2042.15 1204.83 L2041.57 1204.83 L2040.98 1204.83 L2040.4 1204.83 L2039.81 1204.83 L2039.22 1204.83 L2038.64 1204.83 L2038.05 1204.83 L2037.46 1204.83 L2036.88 1204.83 L2036.29 1204.83 L2035.7 1204.83 L2035.12 1204.83 L2034.53 1204.83 L2033.94 1204.83 L2033.36 1204.83 L2032.77 1204.83 L2032.19 1204.83 L2031.6 1204.83 L2031.01 1204.83 L2030.43 1204.83 L2029.84 1204.83 L2029.25 1204.83 L2028.67 1204.83 L2028.08 1204.83 L2027.49 1204.83 L2026.91 1204.83 L2026.32 1204.83 L2025.73 1204.83 L2025.15 1204.83 L2024.56 1204.83 L2023.98 1204.83 L2023.39 1204.83 L2022.8 1204.83 L2022.22 1204.83 L2021.63 1204.83 L2021.04 1204.83 L2020.46 1204.83 L2019.87 1204.83 L2019.28 1204.83 L2018.7 1204.83 L2018.11 1204.83 L2017.53 1204.83 L2016.94 1204.83 L2016.35 1204.83 L2015.77 1204.83 L2015.18 1204.83 L2014.59 1204.83 L2014.01 1204.83 L2013.42 1204.83 L2012.83 1204.83 L2012.25 1204.83 L2011.66 1204.83 L2011.07 1204.83 L2010.49 1204.83 L2009.9 1204.83 L2009.32 1204.83 L2008.73 1204.83 L2008.14 1204.83 L2007.56 1204.83 L2006.97 1204.83 L2006.38 1204.83 L2005.8 1204.83 L2005.21 1204.83 L2004.62 1204.83 L2004.04 1204.83 L2003.45 1204.83 L2002.86 1204.83 L2002.28 1204.83 L2001.69 1204.83 L2001.11 1204.83 L2000.52 1204.83 L1999.93 1204.83 L1999.35 1204.83 L1998.76 1204.83 L1998.17 1204.83 L1997.59 1204.83 L1997 1204.83 L1996.41 1204.83 L1995.83 1204.83 L1995.24 1204.83 L1994.65 1204.83 L1994.07 1204.83 L1993.48 1204.83 L1992.9 1204.83 L1992.31 1204.83 L1991.72 1204.83 L1991.14 1204.83 L1990.55 1204.83 L1989.96 1204.83 L1989.38 1204.83 L1988.79 1204.83 L1988.2 1204.83 L1987.62 1204.83 L1987.03 1204.83 L1986.45 1204.83 L1985.86 1204.83 L1985.27 1204.83 L1984.69 1204.83 L1984.1 1204.83 L1983.51 1204.83 L1982.93 1204.83 L1982.34 1204.83 L1981.75 1204.83 L1981.17 1204.83 L1980.58 1204.83 L1979.99 1204.83 L1979.41 1204.83 L1978.82 1204.83 L1978.24 1204.83 L1977.65 1204.83 L1977.06 1204.83 L1976.48 1204.83 L1975.89 1204.83 L1975.3 1204.83 L1974.72 1204.83 L1974.13 1204.83 L1973.54 1204.83 L1972.96 1204.83 L1972.37 1204.83 L1971.78 1204.83 L1971.2 1204.83 L1970.61 1204.83 L1970.03 1204.83 L1969.44 1204.83 L1968.85 1204.83 L1968.27 1204.83 L1967.68 1204.83 L1967.09 1204.83 L1966.51 1204.83 L1965.92 1204.83 L1965.33 1204.83 L1964.75 1204.83 L1964.16 1204.83 L1963.58 1204.83 L1962.99 1204.83 L1962.4 1204.83 L1961.82 1204.83 L1961.23 1204.83 L1960.64 1204.83 L1960.06 1204.83 L1959.47 1204.83 L1958.88 1204.83 L1958.3 1204.83 L1957.71 1204.83 L1957.12 1204.83 L1956.54 1204.83 L1955.95 1204.83 L1955.37 1204.83 L1954.78 1204.83 L1954.19 1204.83 L1953.61 1204.83 L1953.02 1204.83 L1952.43 1204.83 L1951.85 1204.83 L1951.26 1204.83 L1950.67 1204.83 L1950.09 1204.83 L1949.5 1204.83 L1948.91 1204.83 L1948.33 1204.83 L1947.74 1204.83 L1947.16 1204.83 L1946.57 1204.83 L1945.98 1204.83 L1945.4 1204.83 L1944.81 1204.83 L1944.22 1204.83 L1943.64 1204.83 L1943.05 1204.83 L1942.46 1204.83 L1941.88 1204.83 L1941.29 1204.83 L1940.71 1204.83 L1940.12 1204.83 L1939.53 1204.83 L1938.95 1204.83 L1938.36 1204.83 L1937.77 1204.83 L1937.19 1204.83 L1936.6 1204.83 L1936.01 1204.83 L1935.43 1204.83 L1934.84 1204.83 L1934.25 1204.83 L1933.67 1204.83 L1933.08 1204.83 L1932.5 1204.83 L1931.91 1204.83 L1931.32 1204.83 L1930.74 1204.83 L1930.15 1204.83 L1929.56 1204.83 L1928.98 1204.83 L1928.39 1204.83 L1927.8 1204.83 L1927.22 1204.83 L1926.63 1204.83 L1926.04 1204.83 L1925.46 1204.83 L1924.87 1204.83 L1924.29 1204.83 L1923.7 1204.83 L1923.11 1204.83 L1922.53 1204.83 L1921.94 1204.83 L1921.35 1204.83 L1920.77 1204.83 L1920.18 1204.83 L1919.59 1204.83 L1919.01 1204.83 L1918.42 1204.83 L1917.83 1204.83 L1917.25 1204.83 L1916.66 1204.83 L1916.08 1204.83 L1915.49 1204.83 L1914.9 1204.83 L1914.32 1204.83 L1913.73 1204.83 L1913.14 1204.83 L1912.56 1204.83 L1911.97 1204.83 L1911.38 1204.83 L1910.8 1204.83 L1910.21 1204.83 L1909.63 1204.83 L1909.04 1204.83 L1908.45 1204.83 L1907.87 1204.83 L1907.28 1204.83 L1906.69 1204.83 L1906.11 1204.83 L1905.52 1204.83 L1904.93 1204.83 L1904.35 1204.83 L1903.76 1204.83 L1903.17 1204.83 L1902.59 1204.83 L1902 1204.83 L1901.42 1204.83 L1900.83 1204.83 L1900.24 1204.83 L1899.66 1204.83 L1899.07 1204.83 L1898.48 1204.83 L1897.9 1204.83 L1897.31 1204.83 L1896.72 1204.83 L1896.14 1204.83 L1895.55 1204.83 L1894.96 1204.83 L1894.38 1204.83 L1893.79 1204.83 L1893.21 1204.83 L1892.62 1204.83 L1892.03 1204.83 L1891.45 1204.83 L1890.86 1204.83 L1890.27 1204.83 L1889.69 1204.83 L1889.1 1204.83 L1888.51 1204.83 L1887.93 1204.83 L1887.34 1204.83 L1886.76 1204.83 L1886.17 1204.83 L1885.58 1204.83 L1885 1204.83 L1884.41 1204.83 L1883.82 1204.83 L1883.24 1204.83 L1882.65 1204.83 L1882.06 1204.83 L1881.48 1204.83 L1880.89 1204.83 L1880.3 1204.83 L1879.72 1204.83 L1879.13 1204.83 L1878.55 1204.83 L1877.96 1204.83 L1877.37 1204.83 L1876.79 1204.83 L1876.2 1204.83 L1875.61 1204.83 L1875.03 1204.83 L1874.44 1204.83 L1873.85 1204.83 L1873.27 1204.83 L1872.68 1204.83 L1872.09 1204.83 L1871.51 1204.83 L1870.92 1204.83 L1870.34 1204.83 L1869.75 1204.83 L1869.16 1204.83 L1868.58 1204.83 L1867.99 1204.83 L1867.4 1204.83 L1866.82 1204.83 L1866.23 1204.83 L1865.64 1204.83 L1865.06 1204.83 L1864.47 1204.83 L1863.88 1204.83 L1863.3 1204.83 L1862.71 1204.83 L1862.13 1204.83 L1861.54 1204.83 L1860.95 1204.83 L1860.37 1204.83 L1859.78 1204.83 L1859.19 1204.83 L1858.61 1204.83 L1858.02 1204.83 L1857.43 1204.83 L1856.85 1204.83 L1856.26 1204.83 L1855.68 1204.83 L1855.09 1204.83 L1854.5 1204.83 L1853.92 1204.83 L1853.33 1204.83 L1852.74 1204.83 L1852.16 1204.83 L1851.57 1204.83 L1850.98 1204.83 L1850.4 1204.83 L1849.81 1204.83 L1849.22 1204.83 L1848.64 1204.83 L1848.05 1204.83 L1847.47 1204.83 L1846.88 1204.83 L1846.29 1204.83 L1845.71 1204.83 L1845.12 1204.83 L1844.53 1204.83 L1843.95 1204.83 L1843.36 1204.83 L1842.77 1204.83 L1842.19 1204.83 L1841.6 1204.83 L1841.01 1204.83 L1840.43 1204.83 L1839.84 1204.83 L1839.26 1204.83 L1838.67 1204.83 L1838.08 1204.83 L1837.5 1204.83 L1836.91 1204.83 L1836.32 1204.83 L1835.74 1204.83 L1835.15 1204.83 L1834.56 1204.83 L1833.98 1204.83 L1833.39 1204.83 L1832.81 1204.83 L1832.22 1204.83 L1831.63 1204.83 L1831.05 1204.83 L1830.46 1204.83 L1829.87 1204.83 L1829.29 1204.83 L1828.7 1204.83 L1828.11 1204.83 L1827.53 1204.83 L1826.94 1204.83 L1826.35 1204.83 L1825.77 1204.83 L1825.18 1204.83 L1824.6 1204.83 L1824.01 1204.83 L1823.42 1204.83 L1822.84 1204.83 L1822.25 1204.83 L1821.66 1204.83 L1821.08 1204.83 L1820.49 1204.83 L1819.9 1204.83 L1819.32 1204.83 L1818.73 1204.83 L1818.14 1204.83 L1817.56 1204.83 L1816.97 1204.83 L1816.39 1204.83 L1815.8 1204.83 L1815.21 1204.83 L1814.63 1204.83 L1814.04 1204.83 L1813.45 1204.83 L1812.87 1204.83 L1812.28 1204.83 L1811.69 1204.83 L1811.11 1204.83 L1810.52 1204.83 L1809.94 1204.83 L1809.35 1204.83 L1808.76 1204.83 L1808.18 1204.83 L1807.59 1204.83 L1807 1204.83 L1806.42 1204.83 L1805.83 1204.83 L1805.24 1204.83 L1804.66 1204.83 L1804.07 1204.83 L1803.48 1204.83 L1802.9 1204.83 L1802.31 1204.83 L1801.73 1204.83 L1801.14 1204.83 L1800.55 1204.83 L1799.97 1204.83 L1799.38 1204.83 L1798.79 1204.83 L1798.21 1204.83 L1797.62 1204.83 L1797.03 1204.83 L1796.45 1204.83 L1795.86 1204.83 L1795.27 1204.83 L1794.69 1204.83 L1794.1 1204.83 L1793.52 1204.83 L1792.93 1204.83 L1792.34 1204.83 L1791.76 1204.83 L1791.17 1204.83 L1790.58 1204.83 L1790 1204.83 L1789.41 1204.83 L1788.82 1204.83 L1788.24 1204.83 L1787.65 1204.83 L1787.06 1204.83 L1786.48 1204.83 L1785.89 1204.83 L1785.31 1204.83 L1784.72 1204.83 L1784.13 1204.83 L1783.55 1204.83 L1782.96 1204.83 L1782.37 1204.83 L1781.79 1204.83 L1781.2 1204.83 L1780.61 1204.83 L1780.03 1204.83 L1779.44 1204.83 L1778.86 1204.83 L1778.27 1204.83 L1777.68 1204.83 L1777.1 1204.83 L1776.51 1204.83 L1775.92 1204.83 L1775.34 1204.83 L1774.75 1204.83 L1774.16 1204.83 L1773.58 1204.83 L1772.99 1204.83 L1772.4 1204.83 L1771.82 1204.83 L1771.23 1204.83 L1770.65 1204.83 L1770.06 1204.83 L1769.47 1204.83 L1768.89 1204.83 L1768.3 1204.83 L1767.71 1204.83 L1767.13 1204.83 L1766.54 1204.83 L1765.95 1204.83 L1765.37 1204.83 L1764.78 1204.83 L1764.19 1204.83 L1763.61 1204.83 L1763.02 1204.83 L1762.44 1204.83 L1761.85 1204.83 L1761.26 1204.83 L1760.68 1204.83 L1760.09 1204.83 L1759.5 1204.83 L1758.92 1204.83 L1758.33 1204.83 L1757.74 1204.83 L1757.16 1204.83 L1756.57 1204.83 L1755.99 1204.83 L1755.4 1204.83 L1754.81 1204.83 L1754.23 1204.83 L1753.64 1204.83 L1753.05 1204.83 L1752.47 1204.83 L1751.88 1204.83 L1751.29 1204.83 L1750.71 1204.83 L1750.12 1204.83 L1749.53 1204.83 L1748.95 1204.83 L1748.36 1204.83 L1747.78 1204.83 L1747.19 1204.83 L1746.6 1204.83 L1746.02 1204.83 L1745.43 1204.83 L1744.84 1204.83 L1744.26 1204.83 L1743.67 1204.83 L1743.08 1204.83 L1742.5 1204.83 L1741.91 1204.83 L1741.32 1204.83 L1740.74 1204.83 L1740.15 1204.83 L1739.57 1204.83 L1738.98 1204.83 L1738.39 1204.83 L1737.81 1204.83 L1737.22 1204.83 L1736.63 1204.83 L1736.05 1204.83 L1735.46 1204.83 L1734.87 1204.83 L1734.29 1204.83 L1733.7 1204.83 L1733.11 1204.83 L1732.53 1204.83 L1731.94 1204.83 L1731.36 1204.83 L1730.77 1204.83 L1730.18 1204.83 L1729.6 1204.83 L1729.01 1204.83 L1728.42 1204.83 L1727.84 1204.83 L1727.25 1204.83 L1726.66 1204.83 L1726.08 1204.83 L1725.49 1204.83 L1724.91 1204.83 L1724.32 1204.83 L1723.73 1204.83 L1723.15 1204.83 L1722.56 1204.83 L1721.97 1204.83 L1721.39 1204.83 L1720.8 1204.83 L1720.21 1204.83 L1719.63 1204.83 L1719.04 1204.83 L1718.45 1204.83 L1717.87 1204.83 L1717.28 1204.83 L1716.7 1204.83 L1716.11 1204.83 L1715.52 1204.83 L1714.94 1204.83 L1714.35 1204.83 L1713.76 1204.83 L1713.18 1204.83 L1712.59 1204.83 L1712 1204.83 L1711.42 1204.83 L1710.83 1204.83 L1710.24 1204.83 L1709.66 1204.83 L1709.07 1204.83 L1708.49 1204.83 L1707.9 1204.83 L1707.31 1204.83 L1706.73 1204.83 L1706.14 1204.83 L1705.55 1204.83 L1704.97 1204.83 L1704.38 1204.83 L1703.79 1204.83 L1703.21 1204.83 L1702.62 1204.83 L1702.04 1204.83 L1701.45 1204.83 L1700.86 1204.83 L1700.28 1204.83 L1699.69 1204.83 L1699.1 1204.83 L1698.52 1204.83 L1697.93 1204.83 L1697.34 1204.83 L1696.76 1204.83 L1696.17 1204.83 L1695.58 1204.83 L1695 1204.83 L1694.41 1204.83 L1693.83 1204.83 L1693.24 1204.83 L1692.65 1204.83 L1692.07 1204.83 L1691.48 1204.83 L1690.89 1204.83 L1690.31 1204.83 L1689.72 1204.83 L1689.13 1204.83 L1688.55 1204.83 L1687.96 1204.83 L1687.37 1204.83 L1686.79 1204.83 L1686.2 1204.83 L1685.62 1204.83 L1685.03 1204.83 L1684.44 1204.83 L1683.86 1204.83 L1683.27 1204.83 L1682.68 1204.83 L1682.1 1204.83 L1681.51 1204.83 L1680.92 1204.83 L1680.34 1204.83 L1679.75 1204.83 L1679.17 1204.83 L1678.58 1204.83 L1677.99 1204.83 L1677.41 1204.83 L1676.82 1204.83 L1676.23 1204.83 L1675.65 1204.83 L1675.06 1204.83 L1674.47 1204.83 L1673.89 1204.83 L1673.3 1204.83 L1672.71 1204.83 L1672.13 1204.83 L1671.54 1204.83 L1670.96 1204.83 L1670.37 1204.83 L1669.78 1204.83 L1669.2 1204.83 L1668.61 1204.83 L1668.02 1204.83 L1667.44 1204.83 L1666.85 1204.83 L1666.26 1204.83 L1665.68 1204.83 L1665.09 1204.83 L1664.5 1204.83 L1663.92 1204.83 L1663.33 1204.83 L1662.75 1204.83 L1662.16 1204.83 L1661.57 1204.83 L1660.99 1204.83 L1660.4 1204.83 L1659.81 1204.83 L1659.23 1204.83 L1658.64 1204.83 L1658.05 1204.83 L1657.47 1204.83 L1656.88 1204.83 L1656.29 1204.83 L1655.71 1204.83 L1655.12 1204.83 L1654.54 1204.83 L1653.95 1204.83 L1653.36 1204.83 L1652.78 1204.83 L1652.19 1204.83 L1651.6 1204.83 L1651.02 1204.83 L1650.43 1204.83 L1649.84 1204.83 L1649.26 1204.83 L1648.67 1204.83 L1648.09 1204.83 L1647.5 1204.83 L1646.91 1204.83 L1646.33 1204.83 L1645.74 1204.83 L1645.15 1204.83 L1644.57 1204.83 L1643.98 1204.83 L1643.39 1204.83 L1642.81 1204.83 L1642.22 1204.83 L1641.63 1204.83 L1641.05 1204.83 L1640.46 1204.83 L1639.88 1204.83 L1639.29 1204.83 L1638.7 1204.83 L1638.12 1204.83 L1637.53 1204.83 L1636.94 1204.83 L1636.36 1204.83 L1635.77 1204.83 L1635.18 1204.83 L1634.6 1204.83 L1634.01 1204.83 L1633.42 1204.83 L1632.84 1204.83 L1632.25 1204.83 L1631.67 1204.83 L1631.08 1204.83 L1630.49 1204.83 L1629.91 1204.83 L1629.32 1204.83 L1628.73 1204.83 L1628.15 1204.83 L1627.56 1204.83 L1626.97 1204.83 L1626.39 1204.83 L1625.8 1204.83 L1625.22 1204.83 L1624.63 1204.83 L1624.04 1204.83 L1623.46 1204.83 L1622.87 1204.83 L1622.28 1204.83 L1621.7 1204.83 L1621.11 1204.83 L1620.52 1204.83 L1619.94 1204.83 L1619.35 1204.83 L1618.76 1204.83 L1618.18 1204.83 L1617.59 1204.83 L1617.01 1204.83 L1616.42 1204.83 L1615.83 1204.83 L1615.25 1204.83 L1614.66 1204.83 L1614.07 1204.83 L1613.49 1204.83 L1612.9 1204.83 L1612.31 1204.83 L1611.73 1204.83 L1611.14 1204.83 L1610.55 1204.83 L1609.97 1204.83 L1609.38 1204.83 L1608.8 1204.83 L1608.21 1204.83 L1607.62 1204.83 L1607.04 1204.83 L1606.45 1204.83 L1605.86 1204.83 L1605.28 1204.83 L1604.69 1204.83 L1604.1 1204.83 L1603.52 1204.83 L1602.93 1204.83 L1602.34 1204.83 L1601.76 1204.83 L1601.17 1204.83 L1600.59 1204.83 L1600 1204.83 L1599.41 1204.83 L1598.83 1204.83 L1598.24 1204.83 L1597.65 1204.83 L1597.07 1204.83 L1596.48 1204.83 L1595.89 1204.83 L1595.31 1204.83 L1594.72 1204.83 L1594.14 1204.83 L1593.55 1204.83 L1592.96 1204.83 L1592.38 1204.83 L1591.79 1204.83 L1591.2 1204.83 L1590.62 1204.83 L1590.03 1204.83 L1589.44 1204.83 L1588.86 1204.83 L1588.27 1204.83 L1587.68 1204.83 L1587.1 1204.83 L1586.51 1204.83 L1585.93 1204.83 L1585.34 1204.83 L1584.75 1204.83 L1584.17 1204.83 L1583.58 1204.83 L1582.99 1204.83 L1582.41 1204.83 L1581.82 1204.83 L1581.23 1204.83 L1580.65 1204.83 L1580.06 1204.83 L1579.47 1204.83 L1578.89 1204.83 L1578.3 1204.83 L1577.72 1204.83 L1577.13 1204.83 L1576.54 1204.83 L1575.96 1204.83 L1575.37 1204.83 L1574.78 1204.83 L1574.2 1204.83 L1573.61 1204.83 L1573.02 1204.83 L1572.44 1204.83 L1571.85 1204.83 L1571.27 1204.83 L1570.68 1204.83 L1570.09 1204.83 L1569.51 1204.83 L1568.92 1204.83 L1568.33 1204.83 L1567.75 1204.83 L1567.16 1204.83 L1566.57 1204.83 L1565.99 1204.83 L1565.4 1204.83 L1564.81 1204.83 L1564.23 1204.83 L1563.64 1204.83 L1563.06 1204.83 L1562.47 1204.83 L1561.88 1204.83 L1561.3 1204.83 L1560.71 1204.83 L1560.12 1204.83 L1559.54 1204.83 L1558.95 1204.83 L1558.36 1204.83 L1557.78 1204.83 L1557.19 1204.83 L1556.6 1204.83 L1556.02 1204.83 L1555.43 1204.83 L1554.85 1204.83 L1554.26 1204.83 L1553.67 1204.83 L1553.09 1204.83 L1552.5 1204.83 L1551.91 1204.83 L1551.33 1204.83 L1550.74 1204.83 L1550.15 1204.83 L1549.57 1204.83 L1548.98 1204.83 L1548.4 1204.83 L1547.81 1204.83 L1547.22 1204.83 L1546.64 1204.83 L1546.05 1204.83 L1545.46 1204.83 L1544.88 1204.83 L1544.29 1204.83 L1543.7 1204.83 L1543.12 1204.83 L1542.53 1204.83 L1541.94 1204.83 L1541.36 1204.83 L1540.77 1204.83 L1540.19 1204.83 L1539.6 1204.83 L1539.01 1204.83 L1538.43 1204.83 L1537.84 1204.83 L1537.25 1204.83 L1536.67 1204.83 L1536.08 1204.83 L1535.49 1204.83 L1534.91 1204.83 L1534.32 1204.83 L1533.73 1204.83 L1533.15 1204.83 L1532.56 1204.83 L1531.98 1204.83 L1531.39 1204.83 L1530.8 1204.83 L1530.22 1204.83 L1529.63 1204.83 L1529.04 1204.83 L1528.46 1204.83 L1527.87 1204.83 L1527.28 1204.83 L1526.7 1204.83 L1526.11 1204.83 L1525.52 1204.83 L1524.94 1204.83 L1524.35 1204.83 L1523.77 1204.83 L1523.18 1204.83 L1522.59 1204.83 L1522.01 1204.83 L1521.42 1204.83 L1520.83 1204.83 L1520.25 1204.83 L1519.66 1204.83 L1519.07 1204.83 L1518.49 1204.83 L1517.9 1204.83 L1517.32 1204.83 L1516.73 1204.83 L1516.14 1204.83 L1515.56 1204.83 L1514.97 1204.83 L1514.38 1204.83 L1513.8 1204.83 L1513.21 1204.83 L1512.62 1204.83 L1512.04 1204.83 L1511.45 1204.83 L1510.86 1204.83 L1510.28 1204.83 L1509.69 1204.83 L1509.11 1204.83 L1508.52 1204.83 L1507.93 1204.83 L1507.35 1204.83 L1506.76 1204.83 L1506.17 1204.83 L1505.59 1204.83 L1505 1204.83 L1504.41 1204.83 L1503.83 1204.83 L1503.24 1204.83 L1502.65 1204.83 L1502.07 1204.83 L1501.48 1204.83 L1500.9 1204.83 L1500.31 1204.83 L1499.72 1204.83 L1499.14 1204.83 L1498.55 1204.83 L1497.96 1204.83 L1497.38 1204.83 L1496.79 1204.83 L1496.2 1204.83 L1495.62 1204.83 L1495.03 1204.83 L1494.45 1204.83 L1493.86 1204.83 L1493.27 1204.83 L1492.69 1204.83 L1492.1 1204.83 L1491.51 1204.83 L1490.93 1204.83 L1490.34 1204.83 L1489.75 1204.83 L1489.17 1204.83 L1488.58 1204.83 L1487.99 1204.83 L1487.41 1204.83 L1486.82 1204.83 L1486.24 1204.83 L1485.65 1204.83 L1485.06 1204.83 L1484.48 1204.83 L1483.89 1204.83 L1483.3 1204.83 L1482.72 1204.83 L1482.13 1204.83 L1481.54 1204.83 L1480.96 1204.83 L1480.37 1204.83 L1479.78 1204.83 L1479.2 1204.83 L1478.61 1204.83 L1478.03 1204.83 L1477.44 1204.83 L1476.85 1204.83 L1476.27 1204.83 L1475.68 1204.83 L1475.09 1204.83 L1474.51 1204.83 L1473.92 1204.83 L1473.33 1204.83 L1472.75 1204.83 L1472.16 1204.83 L1471.57 1204.83 L1470.99 1204.83 L1470.4 1204.83 L1469.82 1204.83 L1469.23 1204.83 L1468.64 1204.83 L1468.06 1204.83 L1467.47 1204.83 L1466.88 1204.83 L1466.3 1204.83 L1465.71 1204.83 L1465.12 1204.83 L1464.54 1204.83 L1463.95 1204.83 L1463.37 1204.83 L1462.78 1204.83 L1462.19 1204.83 L1461.61 1204.83 L1461.02 1204.83 L1460.43 1204.83 L1459.85 1204.83 L1459.26 1204.83 L1458.67 1204.83 L1458.09 1204.83 L1457.5 1204.83 L1456.91 1204.83 L1456.33 1204.83 L1455.74 1204.83 L1455.16 1204.83 L1454.57 1204.83 L1453.98 1204.83 L1453.4 1204.83 L1452.81 1204.83 L1452.22 1204.83 L1451.64 1204.83 L1451.05 1204.83 L1450.46 1204.83 L1449.88 1204.83 L1449.29 1204.83 L1448.7 1204.83 L1448.12 1204.83 L1447.53 1204.83 L1446.95 1204.83 L1446.36 1204.83 L1445.77 1204.83 L1445.19 1204.83 L1444.6 1204.83 L1444.01 1204.83 L1443.43 1204.83 L1442.84 1204.83 L1442.25 1204.83 L1441.67 1204.83 L1441.08 1204.83 L1440.5 1204.83 L1439.91 1204.83 L1439.32 1204.83 L1438.74 1204.83 L1438.15 1204.83 L1437.56 1204.83 L1436.98 1204.83 L1436.39 1204.83 L1435.8 1204.83 L1435.22 1204.83 L1434.63 1204.83 L1434.04 1204.83 L1433.46 1204.83 L1432.87 1204.83 L1432.29 1204.83 L1431.7 1204.83 L1431.11 1204.83 L1430.53 1204.83 L1429.94 1204.83 L1429.35 1204.83 L1428.77 1204.83 L1428.18 1204.83 L1427.59 1204.83 L1427.01 1204.83 L1426.42 1204.83 L1425.83 1204.83 L1425.25 1204.83 L1424.66 1204.83 L1424.08 1204.83 L1423.49 1204.83 L1422.9 1204.83 L1422.32 1204.83 L1421.73 1204.83 L1421.14 1204.83 L1420.56 1204.83 L1419.97 1204.83 L1419.38 1204.83 L1418.8 1204.83 L1418.21 1204.83 L1417.63 1204.83 L1417.04 1204.83 L1416.45 1204.83 L1415.87 1204.83 L1415.28 1204.83 L1414.69 1204.83 L1414.11 1204.83 L1413.52 1204.83 L1412.93 1204.83 L1412.35 1204.83 L1411.76 1204.83 L1411.17 1204.83 L1410.59 1204.83 L1410 1204.83 L1409.42 1204.83 L1408.83 1204.83 L1408.24 1204.83 L1407.66 1204.83 L1407.07 1204.83 L1406.48 1204.83 L1405.9 1204.83 L1405.31 1204.83 L1404.72 1204.83 L1404.14 1204.83 L1403.55 1204.83 L1402.96 1204.83 L1402.38 1204.83 L1401.79 1204.83 L1401.21 1204.83 L1400.62 1204.83 L1400.03 1204.83 L1399.45 1204.83 L1398.86 1204.83 L1398.27 1204.83 L1397.69 1204.83 L1397.1 1204.83 L1396.51 1204.83 L1395.93 1204.83 L1395.34 1204.83 L1394.75 1204.83 L1394.17 1204.83 L1393.58 1204.83 L1393 1204.83 L1392.41 1204.83 L1391.82 1204.83 L1391.24 1204.83 L1390.65 1204.83 L1390.06 1204.83 L1389.48 1204.83 L1388.89 1204.83 L1388.3 1204.83 L1387.72 1204.83 L1387.13 1204.83 L1386.55 1204.83 L1385.96 1204.83 L1385.37 1204.83 L1384.79 1204.83 L1384.2 1204.83 L1383.61 1204.83 L1383.03 1204.83 L1382.44 1204.83 L1381.85 1204.83 L1381.27 1204.83 L1380.68 1204.83 L1380.09 1204.83 L1379.51 1204.83 L1378.92 1204.83 L1378.34 1204.83 L1377.75 1204.83 L1377.16 1204.83 L1376.58 1204.83 L1375.99 1204.83 L1375.4 1204.83 L1374.82 1204.83 L1374.23 1204.83 L1373.64 1204.83 L1373.06 1204.83 L1372.47 1204.83 L1371.88 1204.83 L1371.3 1204.83 L1370.71 1204.83 L1370.13 1204.83 L1369.54 1204.83 L1368.95 1204.83 L1368.37 1204.83 L1367.78 1204.83 L1367.19 1204.83 L1366.61 1204.83 L1366.02 1204.83 L1365.43 1204.83 L1364.85 1204.83 L1364.26 1204.83 L1363.68 1204.83 L1363.09 1204.83 L1362.5 1204.83 L1361.92 1204.83 L1361.33 1204.83 L1360.74 1204.83 L1360.16 1204.83 L1359.57 1204.83 L1358.98 1204.83 L1358.4 1204.83 L1357.81 1204.83 L1357.22 1204.83 L1356.64 1204.83 L1356.05 1204.83 L1355.47 1204.83 L1354.88 1204.83 L1354.29 1204.83 L1353.71 1204.83 L1353.12 1204.83 L1352.53 1204.83 L1351.95 1204.83 L1351.36 1204.83 L1350.77 1204.83 L1350.19 1204.83 L1349.6 1204.83 L1349.01 1204.83 L1348.43 1204.83 L1347.84 1204.83 L1347.26 1204.83 L1346.67 1204.83 L1346.08 1204.83 L1345.5 1204.83 L1344.91 1204.83 L1344.32 1204.83 L1343.74 1204.83 L1343.15 1204.83 L1342.56 1204.83 L1341.98 1204.83 L1341.39 1204.83 L1340.8 1204.83 L1340.22 1204.83 L1339.63 1204.83 L1339.05 1204.83 L1338.46 1204.83 L1337.87 1204.83 L1337.29 1204.83 L1336.7 1204.83 L1336.11 1204.83 L1335.53 1204.83 L1334.94 1204.83 L1334.35 1204.83 L1333.77 1204.83 L1333.18 1204.83 L1332.6 1204.83 L1332.01 1204.83 L1331.42 1204.83 L1330.84 1204.83 L1330.25 1204.83 L1329.66 1204.83 L1329.08 1204.83 L1328.49 1204.83 L1327.9 1204.83 L1327.32 1204.83 L1326.73 1204.83 L1326.14 1204.83 L1325.56 1204.83 L1324.97 1204.83 L1324.39 1204.83 L1323.8 1204.83 L1323.21 1204.83 L1322.63 1204.83 L1322.04 1204.83 L1321.45 1204.83 L1320.87 1204.83 L1320.28 1204.83 L1319.69 1204.83 L1319.11 1204.83 L1318.52 1204.83 L1317.93 1204.83 L1317.35 1204.83 L1316.76 1204.83 L1316.18 1204.83 L1315.59 1204.83 L1315 1204.83 L1314.42 1204.83 L1313.83 1204.83 L1313.24 1204.83 L1312.66 1204.83 L1312.07 1204.83 L1311.48 1204.83 L1310.9 1204.83 L1310.31 1204.83 L1309.73 1204.83 L1309.14 1204.83 L1308.55 1204.83 L1307.97 1204.83 L1307.38 1204.83 L1306.79 1204.83 L1306.21 1204.83 L1305.62 1204.83 L1305.03 1204.83 L1304.45 1204.83 L1303.86 1204.83 L1303.27 1204.83 L1302.69 1204.83 L1302.1 1204.83 L1301.52 1204.83 L1300.93 1204.83 L1300.34 1204.83 L1299.76 1204.83 L1299.17 1204.83 L1298.58 1204.83 L1298 1204.83 L1297.41 1204.83 L1296.82 1204.83 L1296.24 1204.83 L1295.65 1204.83 L1295.06 1204.83 L1294.48 1204.83 L1293.89 1204.83 L1293.31 1204.83 L1292.72 1204.83 L1292.13 1204.83 L1291.55 1204.83 L1290.96 1204.83 L1290.37 1204.83 L1289.79 1204.83 L1289.2 1204.83 L1288.61 1204.83 L1288.03 1204.83 L1287.44 1204.83 L1286.86 1204.83 L1286.27 1204.83 L1285.68 1204.83 L1285.1 1204.83 L1284.51 1204.83 L1283.92 1204.83 L1283.34 1204.83 L1282.75 1204.83 L1282.16 1204.83 L1281.58 1204.83 L1280.99 1204.83 L1280.4 1204.83 L1279.82 1204.83 L1279.23 1204.83 L1278.65 1204.83 L1278.06 1204.83 L1277.47 1204.83 L1276.89 1204.83 L1276.3 1204.83 L1275.71 1204.83 L1275.13 1204.83 L1274.54 1204.83 L1273.95 1204.83 L1273.37 1204.83 L1272.78 1204.83 L1272.19 1204.83 L1271.61 1204.83 L1271.02 1204.83 L1270.44 1204.83 L1269.85 1204.83 L1269.26 1204.83 L1268.68 1204.83 L1268.09 1204.83 L1267.5 1204.83 L1266.92 1204.83 L1266.33 1204.83 L1265.74 1204.83 L1265.16 1204.83 L1264.57 1204.83 L1263.98 1204.83 L1263.4 1204.83 L1262.81 1204.83 L1262.23 1204.83 L1261.64 1204.83 L1261.05 1204.83 L1260.47 1204.83 L1259.88 1204.83 L1259.29 1204.83 L1258.71 1204.83 L1258.12 1204.83 L1257.53 1204.83 L1256.95 1204.83 L1256.36 1204.83 L1255.78 1204.83 L1255.19 1204.83 L1254.6 1204.83 L1254.02 1204.83 L1253.43 1204.83 L1252.84 1204.83 L1252.26 1204.83 L1251.67 1204.83 L1251.08 1204.83 L1250.5 1204.83 L1249.91 1204.83 L1249.32 1204.83 L1248.74 1204.83 L1248.15 1204.83 L1247.57 1204.83 L1246.98 1204.83 L1246.39 1204.83 L1245.81 1204.83 L1245.22 1204.83 L1244.63 1204.83 L1244.05 1204.83 L1243.46 1204.83 L1242.87 1204.83 L1242.29 1204.83 L1241.7 1204.83 L1241.11 1204.83 L1240.53 1204.83 L1239.94 1204.83 L1239.36 1204.83 L1238.77 1204.83 L1238.18 1204.83 L1237.6 1204.83 L1237.01 1204.83 L1236.42 1204.83 L1235.84 1204.83 L1235.25 1204.83 L1234.66 1204.83 L1234.08 1204.83 L1233.49 1204.83 L1232.91 1204.83 L1232.32 1204.83 L1231.73 1204.83 L1231.15 1204.83 L1230.56 1204.83 L1229.97 1204.83 L1229.39 1204.83 L1228.8 1204.83 L1228.21 1204.83 L1227.63 1204.83 L1227.04 1204.83 L1226.45 1204.83 L1225.87 1204.83 L1225.28 1204.83 L1224.7 1204.83 L1224.11 1204.83 L1223.52 1204.83 L1222.94 1204.83 L1222.35 1204.83 L1221.76 1204.83 L1221.18 1204.83 L1220.59 1204.83 L1220 1204.83 L1219.42 1204.83 L1218.83 1204.83 L1218.24 1204.83 L1217.66 1204.83 L1217.07 1204.83 L1216.49 1204.83 L1215.9 1204.83 L1215.31 1204.83 L1214.73 1204.83 L1214.14 1204.83 L1213.55 1204.83 L1212.97 1204.83 L1212.38 1204.83 L1211.79 1204.83 L1211.21 1204.83 L1210.62 1204.83 L1210.03 1204.83 L1209.45 1204.83 L1208.86 1204.83 L1208.28 1204.83 L1207.69 1204.83 L1207.1 1204.83 L1206.52 1204.83 L1205.93 1204.83 L1205.34 1204.83 L1204.76 1204.83 L1204.17 1204.83 L1203.58 1204.83 L1203 1204.83 L1202.41 1204.83 L1201.83 1204.83 L1201.24 1204.83 L1200.65 1204.83 L1200.07 1204.83 L1199.48 1204.83 L1198.89 1204.83 L1198.31 1204.83 L1197.72 1204.83 L1197.13 1204.83 L1196.55 1204.83 L1195.96 1204.83 L1195.37 1204.83 L1194.79 1204.83 L1194.2 1204.83 L1193.62 1204.83 L1193.03 1204.83 L1192.44 1204.83 L1191.86 1204.83 L1191.27 1204.83 L1190.68 1204.83 L1190.1 1204.83 L1189.51 1204.83 L1188.92 1204.83 L1188.34 1204.83 L1187.75 1204.83 L1187.16 1204.83 L1186.58 1204.83 L1185.99 1204.83 L1185.41 1204.83 L1184.82 1204.83 L1184.23 1204.83 L1183.65 1204.83 L1183.06 1204.83 L1182.47 1204.83 L1181.89 1204.83 L1181.3 1204.83 L1180.71 1204.83 L1180.13 1204.83 L1179.54 1204.83 L1178.96 1204.83 L1178.37 1204.83 L1177.78 1204.83 L1177.2 1204.83 L1176.61 1204.83 L1176.02 1204.83 L1175.44 1204.83 L1174.85 1204.83 L1174.26 1204.83 L1173.68 1204.83 L1173.09 1204.83 L1172.5 1204.83 L1171.92 1204.83 L1171.33 1204.83 L1170.75 1204.83 L1170.16 1204.83 L1169.57 1204.83 L1168.99 1204.83 L1168.4 1204.83 L1167.81 1204.83 L1167.23 1204.83 L1166.64 1204.83 L1166.05 1204.83 L1165.47 1204.83 L1164.88 1204.83 L1164.29 1204.83 L1163.71 1204.83 L1163.12 1204.83 L1162.54 1204.83 L1161.95 1204.83 L1161.36 1204.83 L1160.78 1204.83 L1160.19 1204.83 L1159.6 1204.83 L1159.02 1204.83 L1158.43 1204.83 L1157.84 1204.83 L1157.26 1204.83 L1156.67 1204.83 L1156.09 1204.83 L1155.5 1204.83 L1154.91 1204.83 L1154.33 1204.83 L1153.74 1204.83 L1153.15 1204.83 L1152.57 1204.83 L1151.98 1204.83 L1151.39 1204.83 L1150.81 1204.83 L1150.22 1204.83 L1149.63 1204.83 L1149.05 1204.83 L1148.46 1204.83 L1147.88 1204.83 L1147.29 1204.83 L1146.7 1204.83 L1146.12 1204.83 L1145.53 1204.83 L1144.94 1204.83 L1144.36 1204.83 L1143.77 1204.83 L1143.18 1204.83 L1142.6 1204.83 L1142.01 1204.83 L1141.42 1204.83 L1140.84 1204.83 L1140.25 1204.83 L1139.67 1204.83 L1139.08 1204.83 L1138.49 1204.83 L1137.91 1204.83 L1137.32 1204.83 L1136.73 1204.83 L1136.15 1204.83 L1135.56 1204.83 L1134.97 1204.83 L1134.39 1204.83 L1133.8 1204.83 L1133.21 1204.83 L1132.63 1204.83 L1132.04 1204.83 L1131.46 1204.83 L1130.87 1204.83 L1130.28 1204.83 L1129.7 1204.83 L1129.11 1204.83 L1128.52 1204.83 L1127.94 1204.83 L1127.35 1204.83 L1126.76 1204.83 L1126.18 1204.83 L1125.59 1204.83 L1125.01 1204.83 L1124.42 1204.83 L1123.83 1204.83 L1123.25 1204.83 L1122.66 1204.83 L1122.07 1204.83 L1121.49 1204.83 L1120.9 1204.83 L1120.31 1204.83 L1119.73 1204.83 L1119.14 1204.83 L1118.55 1204.83 L1117.97 1204.83 L1117.38 1204.83 L1116.8 1204.83 L1116.21 1204.83 L1115.62 1204.83 L1115.04 1204.83 L1114.45 1204.83 L1113.86 1204.83 L1113.28 1204.83 L1112.69 1204.83 L1112.1 1204.83 L1111.52 1204.83 L1110.93 1204.83 L1110.34 1204.83 L1109.76 1204.83 L1109.17 1204.83 L1108.59 1204.83 L1108 1204.83 L1107.41 1204.83 L1106.83 1204.83 L1106.24 1204.83 L1105.65 1204.83 L1105.07 1204.83 L1104.48 1204.83 L1103.89 1204.83 L1103.31 1204.83 L1102.72 1204.83 L1102.14 1204.83 L1101.55 1204.83 L1100.96 1204.83 L1100.38 1204.83 L1099.79 1204.83 L1099.2 1204.83 L1098.62 1204.83 L1098.03 1204.83 L1097.44 1204.83 L1096.86 1204.83 L1096.27 1204.83 L1095.68 1204.83 L1095.1 1204.83 L1094.51 1204.83 L1093.93 1204.83 L1093.34 1204.83 L1092.75 1204.83 L1092.17 1204.83 L1091.58 1204.83 L1090.99 1204.83 L1090.41 1204.83 L1089.82 1204.83 L1089.23 1204.83 L1088.65 1204.83 L1088.06 1204.83 L1087.47 1204.83 L1086.89 1204.83 L1086.3 1204.83 L1085.72 1204.83 L1085.13 1204.83 L1084.54 1204.83 L1083.96 1204.83 L1083.37 1204.83 L1082.78 1204.83 L1082.2 1204.83 L1081.61 1204.83 L1081.02 1204.83 L1080.44 1204.83 L1079.85 1204.83 L1079.26 1204.83 L1078.68 1204.83 L1078.09 1204.83 L1077.51 1204.83 L1076.92 1204.83 L1076.33 1204.83 L1075.75 1204.83 L1075.16 1204.83 L1074.57 1204.83 L1073.99 1204.83 L1073.4 1204.83 L1072.81 1204.83 L1072.23 1204.83 L1071.64 1204.83 L1071.06 1204.83 L1070.47 1204.83 L1069.88 1204.83 L1069.3 1204.83 L1068.71 1204.83 L1068.12 1204.83 L1067.54 1204.83 L1066.95 1204.83 L1066.36 1204.83 L1065.78 1204.83 L1065.19 1204.83 L1064.6 1204.83 L1064.02 1204.83 L1063.43 1204.83 L1062.85 1204.83 L1062.26 1204.83 L1061.67 1204.83 L1061.09 1204.83 L1060.5 1204.83 L1059.91 1204.83 L1059.33 1204.83 L1058.74 1204.83 L1058.15 1204.83 L1057.57 1204.83 L1056.98 1204.83 L1056.39 1204.83 L1055.81 1204.83 L1055.22 1204.83 L1054.64 1204.83 L1054.05 1204.83 L1053.46 1204.83 L1052.88 1204.83 L1052.29 1204.83 L1051.7 1204.83 L1051.12 1204.83 L1050.53 1204.83 L1049.94 1204.83 L1049.36 1204.83 L1048.77 1204.83 L1048.19 1204.83 L1047.6 1204.83 L1047.01 1204.83 L1046.43 1204.83 L1045.84 1204.83 L1045.25 1204.83 L1044.67 1204.83 L1044.08 1204.83 L1043.49 1204.83 L1042.91 1204.83 L1042.32 1204.83 L1041.73 1204.83 L1041.15 1204.83 L1040.56 1204.83 L1039.98 1204.83 L1039.39 1204.83 L1038.8 1204.83 L1038.22 1204.83 L1037.63 1204.83 L1037.04 1204.83 L1036.46 1204.83 L1035.87 1204.83 L1035.28 1204.83 L1034.7 1204.83 L1034.11 1204.83 L1033.52 1204.83 L1032.94 1204.83 L1032.35 1204.83 L1031.77 1204.83 L1031.18 1204.83 L1030.59 1204.83 L1030.01 1204.83 L1029.42 1204.83 L1028.83 1204.83 L1028.25 1204.83 L1027.66 1204.83 L1027.07 1204.83 L1026.49 1204.83 L1025.9 1204.83 L1025.32 1204.83 L1024.73 1204.83 L1024.14 1204.83 L1023.56 1204.83 L1022.97 1204.83 L1022.38 1204.83 L1021.8 1204.83 L1021.21 1204.83 L1020.62 1204.83 L1020.04 1204.83 L1019.45 1204.83 L1018.86 1204.83 L1018.28 1204.83 L1017.69 1204.83 L1017.11 1204.83 L1016.52 1204.83 L1015.93 1204.83 L1015.35 1204.83 L1014.76 1204.83 L1014.17 1204.83 L1013.59 1204.83 L1013 1204.83 L1012.41 1204.83 L1011.83 1204.83 L1011.24 1204.83 L1010.65 1204.83 L1010.07 1204.83 L1009.48 1204.83 L1008.9 1204.83 L1008.31 1204.83 L1007.72 1204.83 L1007.14 1204.83 L1006.55 1204.83 L1005.96 1204.83 L1005.38 1204.83 L1004.79 1204.83 L1004.2 1204.83 L1003.62 1204.83 L1003.03 1204.83 L1002.44 1204.83 L1001.86 1204.83 L1001.27 1204.83 L1000.69 1204.83 L1000.1 1204.83 L999.513 1204.83 L998.926 1204.83 L998.34 1204.83 L997.754 1204.83 L997.167 1204.83 L996.581 1204.83 L995.994 1204.83 L995.408 1204.83 L994.822 1204.83 L994.235 1204.83 L993.649 1204.83 L993.062 1204.83 L992.476 1204.83 L991.889 1204.83 L991.303 1204.83 L990.717 1204.83 L990.13 1204.83 L989.544 1204.83 L988.957 1204.83 L988.371 1204.83 L987.785 1204.83 L987.198 1204.83 L986.612 1204.83 L986.025 1204.83  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1204.94 986.612,1204.94 987.198,1204.94 987.785,1204.94 988.371,1204.94 988.957,1204.94 989.544,1204.94 990.13,1204.94 990.717,1204.94 991.303,1204.94 991.889,1204.94 992.476,1204.94 993.062,1204.94 993.649,1204.94 994.235,1204.94 994.822,1204.94 995.408,1204.94 995.994,1204.94 996.581,1204.94 997.167,1204.94 997.754,1204.94 998.34,1204.94 998.926,1204.94 999.513,1204.94 1000.1,1204.94 1000.69,1204.94 1001.27,1204.94 1001.86,1204.94 1002.44,1204.94 1003.03,1204.94 1003.62,1204.94 1004.2,1204.94 1004.79,1204.94 1005.38,1204.94 1005.96,1204.94 1006.55,1204.94 1007.14,1204.94 1007.72,1204.94 1008.31,1204.94 1008.9,1204.94 1009.48,1204.94 1010.07,1204.94 1010.65,1204.94 1011.24,1204.94 1011.83,1204.94 1012.41,1204.94 1013,1204.94 1013.59,1204.94 1014.17,1204.94 1014.76,1204.94 1015.35,1204.94 1015.93,1204.94 1016.52,1204.94 1017.11,1204.94 1017.69,1204.94 1018.28,1204.94 1018.86,1204.94 1019.45,1204.94 1020.04,1204.94 1020.62,1204.94 1021.21,1204.94 1021.8,1204.94 1022.38,1204.94 1022.97,1204.94 1023.56,1204.94 1024.14,1204.94 1024.73,1204.94 1025.32,1204.94 1025.9,1204.94 1026.49,1204.94 1027.07,1204.94 1027.66,1204.94 1028.25,1204.94 1028.83,1204.94 1029.42,1204.94 1030.01,1204.94 1030.59,1204.94 1031.18,1204.94 1031.77,1204.94 1032.35,1204.94 1032.94,1204.94 1033.52,1204.94 1034.11,1204.94 1034.7,1204.94 1035.28,1204.94 1035.87,1204.94 1036.46,1204.94 1037.04,1204.94 1037.63,1204.94 1038.22,1204.94 1038.8,1204.94 1039.39,1204.94 1039.98,1204.94 1040.56,1204.94 1041.15,1204.94 1041.73,1204.94 1042.32,1204.94 1042.91,1204.94 1043.49,1204.94 1044.08,1204.94 1044.67,1204.94 1045.25,1204.94 1045.84,1204.94 1046.43,1204.94 1047.01,1204.94 1047.6,1204.94 1048.19,1204.94 1048.77,1204.94 1049.36,1204.94 1049.94,1204.94 1050.53,1204.94 1051.12,1204.94 1051.7,1204.94 1052.29,1204.94 1052.88,1204.94 1053.46,1204.94 1054.05,1204.94 1054.64,1204.94 1055.22,1204.94 1055.81,1204.94 1056.39,1204.94 1056.98,1204.94 1057.57,1204.94 1058.15,1204.94 1058.74,1204.94 1059.33,1204.94 1059.91,1204.94 1060.5,1204.94 1061.09,1204.94 1061.67,1204.94 1062.26,1204.94 1062.85,1204.94 1063.43,1204.94 1064.02,1204.94 1064.6,1204.94 1065.19,1204.94 1065.78,1204.94 1066.36,1204.94 1066.95,1204.94 1067.54,1204.94 1068.12,1204.94 1068.71,1204.94 1069.3,1204.94 1069.88,1204.94 1070.47,1204.94 1071.06,1204.94 1071.64,1204.94 1072.23,1204.94 1072.81,1204.94 1073.4,1204.94 1073.99,1204.94 1074.57,1204.94 1075.16,1204.94 1075.75,1204.94 1076.33,1204.94 1076.92,1204.94 1077.51,1204.94 1078.09,1204.94 1078.68,1204.94 1079.26,1204.94 1079.85,1204.94 1080.44,1204.94 1081.02,1204.94 1081.61,1204.94 1082.2,1204.94 1082.78,1204.94 1083.37,1204.94 1083.96,1204.94 1084.54,1204.94 1085.13,1204.94 1085.72,1204.94 1086.3,1204.94 1086.89,1204.94 1087.47,1204.94 1088.06,1204.94 1088.65,1204.94 1089.23,1204.94 1089.82,1204.94 1090.41,1204.94 1090.99,1204.94 1091.58,1204.94 1092.17,1204.94 1092.75,1204.94 1093.34,1204.94 1093.93,1204.94 1094.51,1204.94 1095.1,1204.94 1095.68,1204.94 1096.27,1204.94 1096.86,1204.94 1097.44,1204.94 1098.03,1204.94 1098.62,1204.94 1099.2,1204.94 1099.79,1204.94 1100.38,1204.94 1100.96,1204.94 1101.55,1204.94 1102.14,1204.94 1102.72,1204.94 1103.31,1204.94 1103.89,1204.94 1104.48,1204.94 1105.07,1204.94 1105.65,1204.94 1106.24,1204.94 1106.83,1204.94 1107.41,1204.94 1108,1204.94 1108.59,1204.94 1109.17,1204.94 1109.76,1204.94 1110.34,1204.94 1110.93,1204.94 1111.52,1204.94 1112.1,1204.94 1112.69,1204.94 1113.28,1204.94 1113.86,1204.94 1114.45,1204.94 1115.04,1204.94 1115.62,1204.94 1116.21,1204.94 1116.8,1204.94 1117.38,1204.94 1117.97,1204.94 1118.55,1204.94 1119.14,1204.94 1119.73,1204.94 1120.31,1204.94 1120.9,1204.94 1121.49,1204.94 1122.07,1204.94 1122.66,1204.94 1123.25,1204.94 1123.83,1204.94 1124.42,1204.94 1125.01,1204.94 1125.59,1204.94 1126.18,1204.94 1126.76,1204.94 1127.35,1204.94 1127.94,1204.94 1128.52,1204.94 1129.11,1204.94 1129.7,1204.94 1130.28,1204.94 1130.87,1204.94 1131.46,1204.94 1132.04,1204.94 1132.63,1204.94 1133.21,1204.94 1133.8,1204.94 1134.39,1204.94 1134.97,1204.94 1135.56,1204.94 1136.15,1204.94 1136.73,1204.94 1137.32,1204.94 1137.91,1204.94 1138.49,1204.94 1139.08,1204.94 1139.67,1204.94 1140.25,1204.94 1140.84,1204.94 1141.42,1204.94 1142.01,1204.94 1142.6,1204.94 1143.18,1204.94 1143.77,1204.94 1144.36,1204.94 1144.94,1204.94 1145.53,1204.94 1146.12,1204.94 1146.7,1204.94 1147.29,1204.94 1147.88,1204.94 1148.46,1204.94 1149.05,1204.94 1149.63,1204.94 1150.22,1204.94 1150.81,1204.94 1151.39,1204.94 1151.98,1204.94 1152.57,1204.94 1153.15,1204.94 1153.74,1204.94 1154.33,1204.94 1154.91,1204.94 1155.5,1204.94 1156.09,1204.94 1156.67,1204.94 1157.26,1204.94 1157.84,1204.94 1158.43,1204.94 1159.02,1204.94 1159.6,1204.94 1160.19,1204.94 1160.78,1204.94 1161.36,1204.94 1161.95,1204.94 1162.54,1204.94 1163.12,1204.94 1163.71,1204.94 1164.29,1204.94 1164.88,1204.94 1165.47,1204.94 1166.05,1204.94 1166.64,1204.94 1167.23,1204.94 1167.81,1204.94 1168.4,1204.94 1168.99,1204.94 1169.57,1204.94 1170.16,1204.94 1170.75,1204.94 1171.33,1204.94 1171.92,1204.94 1172.5,1204.94 1173.09,1204.94 1173.68,1204.94 1174.26,1204.94 1174.85,1204.94 1175.44,1204.94 1176.02,1204.94 1176.61,1204.94 1177.2,1204.94 1177.78,1204.94 1178.37,1204.94 1178.96,1204.94 1179.54,1204.94 1180.13,1204.94 1180.71,1204.94 1181.3,1204.94 1181.89,1204.94 1182.47,1204.94 1183.06,1204.94 1183.65,1204.94 1184.23,1204.94 1184.82,1204.94 1185.41,1204.94 1185.99,1204.94 1186.58,1204.94 1187.16,1204.94 1187.75,1204.94 1188.34,1204.94 1188.92,1204.94 1189.51,1204.94 1190.1,1204.94 1190.68,1204.94 1191.27,1204.94 1191.86,1204.94 1192.44,1204.94 1193.03,1204.94 1193.62,1204.94 1194.2,1204.94 1194.79,1204.94 1195.37,1204.94 1195.96,1204.94 1196.55,1204.94 1197.13,1204.94 1197.72,1204.94 1198.31,1204.94 1198.89,1204.94 1199.48,1204.94 1200.07,1204.94 1200.65,1204.94 1201.24,1204.94 1201.83,1204.94 1202.41,1204.94 1203,1204.94 1203.58,1204.94 1204.17,1204.94 1204.76,1204.94 1205.34,1204.94 1205.93,1204.94 1206.52,1204.94 1207.1,1204.94 1207.69,1204.94 1208.28,1204.94 1208.86,1204.94 1209.45,1204.94 1210.03,1204.94 1210.62,1204.94 1211.21,1204.94 1211.79,1204.94 1212.38,1204.94 1212.97,1204.94 1213.55,1204.94 1214.14,1204.94 1214.73,1204.94 1215.31,1204.94 1215.9,1204.94 1216.49,1204.94 1217.07,1204.94 1217.66,1204.94 1218.24,1204.94 1218.83,1204.94 1219.42,1204.94 1220,1204.94 1220.59,1204.94 1221.18,1204.94 1221.76,1204.94 1222.35,1204.94 1222.94,1204.94 1223.52,1204.94 1224.11,1204.94 1224.7,1204.94 1225.28,1204.94 1225.87,1204.94 1226.45,1204.94 1227.04,1204.94 1227.63,1204.94 1228.21,1204.94 1228.8,1204.94 1229.39,1204.94 1229.97,1204.94 1230.56,1204.94 1231.15,1204.94 1231.73,1204.94 1232.32,1204.94 1232.91,1204.94 1233.49,1204.94 1234.08,1204.94 1234.66,1204.94 1235.25,1204.94 1235.84,1204.94 1236.42,1204.94 1237.01,1204.94 1237.6,1204.94 1238.18,1204.94 1238.77,1204.94 1239.36,1204.94 1239.94,1204.94 1240.53,1204.94 1241.11,1204.94 1241.7,1204.94 1242.29,1204.94 1242.87,1204.94 1243.46,1204.94 1244.05,1204.94 1244.63,1204.94 1245.22,1204.94 1245.81,1204.94 1246.39,1204.94 1246.98,1204.94 1247.57,1204.94 1248.15,1204.94 1248.74,1204.94 1249.32,1204.94 1249.91,1204.94 1250.5,1204.94 1251.08,1204.94 1251.67,1204.94 1252.26,1204.94 1252.84,1204.94 1253.43,1204.94 1254.02,1204.94 1254.6,1204.94 1255.19,1204.94 1255.78,1204.94 1256.36,1204.94 1256.95,1204.94 1257.53,1204.94 1258.12,1204.94 1258.71,1204.94 1259.29,1204.94 1259.88,1204.94 1260.47,1204.94 1261.05,1204.94 1261.64,1204.94 1262.23,1204.94 1262.81,1204.94 1263.4,1204.94 1263.98,1204.94 1264.57,1204.94 1265.16,1204.94 1265.74,1204.94 1266.33,1204.94 1266.92,1204.94 1267.5,1204.94 1268.09,1204.94 1268.68,1204.94 1269.26,1204.94 1269.85,1204.94 1270.44,1204.94 1271.02,1204.94 1271.61,1204.94 1272.19,1204.94 1272.78,1204.94 1273.37,1204.94 1273.95,1204.94 1274.54,1204.94 1275.13,1204.94 1275.71,1204.94 1276.3,1204.94 1276.89,1204.94 1277.47,1204.94 1278.06,1204.94 1278.65,1204.94 1279.23,1204.94 1279.82,1204.94 1280.4,1204.94 1280.99,1204.94 1281.58,1204.94 1282.16,1204.94 1282.75,1204.94 1283.34,1204.94 1283.92,1204.94 1284.51,1204.94 1285.1,1204.94 1285.68,1204.94 1286.27,1204.94 1286.86,1204.94 1287.44,1204.94 1288.03,1204.94 1288.61,1204.94 1289.2,1204.94 1289.79,1204.94 1290.37,1204.94 1290.96,1204.94 1291.55,1204.94 1292.13,1204.94 1292.72,1204.94 1293.31,1204.94 1293.89,1204.94 1294.48,1204.94 1295.06,1204.94 1295.65,1204.94 1296.24,1204.94 1296.82,1204.94 1297.41,1204.94 1298,1204.94 1298.58,1204.94 1299.17,1204.94 1299.76,1204.94 1300.34,1204.94 1300.93,1204.94 1301.52,1204.94 1302.1,1204.94 1302.69,1204.94 1303.27,1204.94 1303.86,1204.94 1304.45,1204.94 1305.03,1204.94 1305.62,1204.94 1306.21,1204.94 1306.79,1204.94 1307.38,1204.94 1307.97,1204.94 1308.55,1204.94 1309.14,1204.94 1309.73,1204.94 1310.31,1204.94 1310.9,1204.94 1311.48,1204.94 1312.07,1204.94 1312.66,1204.94 1313.24,1204.94 1313.83,1204.94 1314.42,1204.94 1315,1204.94 1315.59,1204.94 1316.18,1204.94 1316.76,1204.94 1317.35,1204.94 1317.93,1204.94 1318.52,1204.94 1319.11,1204.94 1319.69,1204.94 1320.28,1204.94 1320.87,1204.94 1321.45,1204.94 1322.04,1204.94 1322.63,1204.94 1323.21,1204.94 1323.8,1204.94 1324.39,1204.94 1324.97,1204.94 1325.56,1204.94 1326.14,1204.94 1326.73,1204.94 1327.32,1204.94 1327.9,1204.94 1328.49,1204.94 1329.08,1204.94 1329.66,1204.94 1330.25,1204.94 1330.84,1204.94 1331.42,1204.94 1332.01,1204.94 1332.6,1204.94 1333.18,1204.94 1333.77,1204.94 1334.35,1204.94 1334.94,1204.94 1335.53,1204.94 1336.11,1204.94 1336.7,1204.94 1337.29,1204.94 1337.87,1204.94 1338.46,1204.94 1339.05,1204.94 1339.63,1204.94 1340.22,1204.94 1340.8,1204.94 1341.39,1204.94 1341.98,1204.94 1342.56,1204.94 1343.15,1204.94 1343.74,1204.94 1344.32,1204.94 1344.91,1204.94 1345.5,1204.94 1346.08,1204.94 1346.67,1204.94 1347.26,1204.94 1347.84,1204.94 1348.43,1204.94 1349.01,1204.94 1349.6,1204.94 1350.19,1204.94 1350.77,1204.94 1351.36,1204.94 1351.95,1204.94 1352.53,1204.94 1353.12,1204.94 1353.71,1204.94 1354.29,1204.94 1354.88,1204.94 1355.47,1204.94 1356.05,1204.94 1356.64,1204.94 1357.22,1204.94 1357.81,1204.94 1358.4,1204.94 1358.98,1204.94 1359.57,1204.94 1360.16,1204.94 1360.74,1204.94 1361.33,1204.94 1361.92,1204.94 1362.5,1204.94 1363.09,1204.94 1363.68,1204.94 1364.26,1204.94 1364.85,1204.94 1365.43,1204.94 1366.02,1204.94 1366.61,1204.94 1367.19,1204.94 1367.78,1204.94 1368.37,1204.94 1368.95,1204.94 1369.54,1204.94 1370.13,1204.94 1370.71,1204.94 1371.3,1204.94 1371.88,1204.94 1372.47,1204.94 1373.06,1204.94 1373.64,1204.94 1374.23,1204.94 1374.82,1204.94 1375.4,1204.94 1375.99,1204.94 1376.58,1204.94 1377.16,1204.94 1377.75,1204.94 1378.34,1204.94 1378.92,1204.94 1379.51,1204.94 1380.09,1204.94 1380.68,1204.94 1381.27,1204.94 1381.85,1204.94 1382.44,1204.94 1383.03,1204.94 1383.61,1204.94 1384.2,1204.94 1384.79,1204.94 1385.37,1204.94 1385.96,1204.94 1386.55,1204.94 1387.13,1204.94 1387.72,1204.94 1388.3,1204.94 1388.89,1204.94 1389.48,1204.94 1390.06,1204.94 1390.65,1204.94 1391.24,1204.94 1391.82,1204.94 1392.41,1204.94 1393,1204.94 1393.58,1204.94 1394.17,1204.94 1394.75,1204.94 1395.34,1204.94 1395.93,1204.94 1396.51,1204.94 1397.1,1204.94 1397.69,1204.94 1398.27,1204.94 1398.86,1204.94 1399.45,1204.94 1400.03,1204.94 1400.62,1204.94 1401.21,1204.94 1401.79,1204.94 1402.38,1204.94 1402.96,1204.94 1403.55,1204.94 1404.14,1204.94 1404.72,1204.94 1405.31,1204.94 1405.9,1204.94 1406.48,1204.94 1407.07,1204.94 1407.66,1204.94 1408.24,1204.94 1408.83,1204.94 1409.42,1204.94 1410,1204.94 1410.59,1204.94 1411.17,1204.94 1411.76,1204.94 1412.35,1204.94 1412.93,1204.94 1413.52,1204.94 1414.11,1204.94 1414.69,1204.94 1415.28,1204.94 1415.87,1204.94 1416.45,1204.94 1417.04,1204.94 1417.63,1204.94 1418.21,1204.94 1418.8,1204.94 1419.38,1204.94 1419.97,1204.94 1420.56,1204.94 1421.14,1204.94 1421.73,1204.94 1422.32,1204.94 1422.9,1204.94 1423.49,1204.94 1424.08,1204.94 1424.66,1204.94 1425.25,1204.94 1425.83,1204.94 1426.42,1204.94 1427.01,1204.94 1427.59,1204.94 1428.18,1204.94 1428.77,1204.94 1429.35,1204.94 1429.94,1204.94 1430.53,1204.94 1431.11,1204.94 1431.7,1204.94 1432.29,1204.94 1432.87,1204.94 1433.46,1204.94 1434.04,1204.94 1434.63,1204.94 1435.22,1204.94 1435.8,1204.94 1436.39,1204.94 1436.98,1204.94 1437.56,1204.94 1438.15,1204.94 1438.74,1204.94 1439.32,1204.94 1439.91,1204.94 1440.5,1204.94 1441.08,1204.94 1441.67,1204.94 1442.25,1204.94 1442.84,1204.94 1443.43,1204.94 1444.01,1204.94 1444.6,1204.94 1445.19,1204.94 1445.77,1204.94 1446.36,1204.94 1446.95,1204.94 1447.53,1204.94 1448.12,1204.94 1448.7,1204.94 1449.29,1204.94 1449.88,1204.94 1450.46,1204.94 1451.05,1204.94 1451.64,1204.94 1452.22,1204.94 1452.81,1204.94 1453.4,1204.94 1453.98,1204.94 1454.57,1204.94 1455.16,1204.94 1455.74,1204.94 1456.33,1204.94 1456.91,1204.94 1457.5,1204.94 1458.09,1204.94 1458.67,1204.94 1459.26,1204.94 1459.85,1204.94 1460.43,1204.94 1461.02,1204.94 1461.61,1204.94 1462.19,1204.94 1462.78,1204.94 1463.37,1204.94 1463.95,1204.94 1464.54,1204.94 1465.12,1204.94 1465.71,1204.94 1466.3,1204.94 1466.88,1204.94 1467.47,1204.94 1468.06,1204.94 1468.64,1204.94 1469.23,1204.94 1469.82,1204.94 1470.4,1204.94 1470.99,1204.94 1471.57,1204.94 1472.16,1204.94 1472.75,1204.94 1473.33,1204.94 1473.92,1204.94 1474.51,1204.94 1475.09,1204.94 1475.68,1204.94 1476.27,1204.94 1476.85,1204.94 1477.44,1204.94 1478.03,1204.94 1478.61,1204.94 1479.2,1204.94 1479.78,1204.94 1480.37,1204.94 1480.96,1204.94 1481.54,1204.94 1482.13,1204.94 1482.72,1204.94 1483.3,1204.94 1483.89,1204.94 1484.48,1204.94 1485.06,1204.94 1485.65,1204.94 1486.24,1204.94 1486.82,1204.94 1487.41,1204.94 1487.99,1204.94 1488.58,1204.94 1489.17,1204.94 1489.75,1204.94 1490.34,1204.94 1490.93,1204.94 1491.51,1204.94 1492.1,1204.94 1492.69,1204.94 1493.27,1204.94 1493.86,1204.94 1494.45,1204.94 1495.03,1204.94 1495.62,1204.94 1496.2,1204.94 1496.79,1204.94 1497.38,1204.94 1497.96,1204.94 1498.55,1204.94 1499.14,1204.94 1499.72,1204.94 1500.31,1204.94 1500.9,1204.94 1501.48,1204.94 1502.07,1204.94 1502.65,1204.94 1503.24,1204.94 1503.83,1204.94 1504.41,1204.94 1505,1204.94 1505.59,1204.94 1506.17,1204.94 1506.76,1204.94 1507.35,1204.94 1507.93,1204.94 1508.52,1204.94 1509.11,1204.94 1509.69,1204.94 1510.28,1204.94 1510.86,1204.94 1511.45,1204.94 1512.04,1204.94 1512.62,1204.94 1513.21,1204.94 1513.8,1204.94 1514.38,1204.94 1514.97,1204.94 1515.56,1204.94 1516.14,1204.94 1516.73,1204.94 1517.32,1204.94 1517.9,1204.94 1518.49,1204.94 1519.07,1204.94 1519.66,1204.94 1520.25,1204.94 1520.83,1204.94 1521.42,1204.94 1522.01,1204.94 1522.59,1204.94 1523.18,1204.94 1523.77,1204.94 1524.35,1204.94 1524.94,1204.94 1525.52,1204.94 1526.11,1204.94 1526.7,1204.94 1527.28,1204.94 1527.87,1204.94 1528.46,1204.94 1529.04,1204.94 1529.63,1204.94 1530.22,1204.94 1530.8,1204.94 1531.39,1204.94 1531.98,1204.94 1532.56,1204.94 1533.15,1204.94 1533.73,1204.94 1534.32,1204.94 1534.91,1204.94 1535.49,1204.94 1536.08,1204.94 1536.67,1204.94 1537.25,1204.94 1537.84,1204.94 1538.43,1204.94 1539.01,1204.94 1539.6,1204.94 1540.19,1204.94 1540.77,1204.94 1541.36,1204.94 1541.94,1204.94 1542.53,1204.94 1543.12,1204.94 1543.7,1204.94 1544.29,1204.94 1544.88,1204.94 1545.46,1204.94 1546.05,1204.94 1546.64,1204.94 1547.22,1204.94 1547.81,1204.94 1548.4,1204.94 1548.98,1204.94 1549.57,1204.94 1550.15,1204.94 1550.74,1204.94 1551.33,1204.94 1551.91,1204.94 1552.5,1204.94 1553.09,1204.94 1553.67,1204.94 1554.26,1204.94 1554.85,1204.94 1555.43,1204.94 1556.02,1204.94 1556.6,1204.94 1557.19,1204.94 1557.78,1204.94 1558.36,1204.94 1558.95,1204.94 1559.54,1204.94 1560.12,1204.94 1560.71,1204.94 1561.3,1204.94 1561.88,1204.94 1562.47,1204.94 1563.06,1204.94 1563.64,1204.94 1564.23,1204.94 1564.81,1204.94 1565.4,1204.94 1565.99,1204.94 1566.57,1204.94 1567.16,1204.94 1567.75,1204.94 1568.33,1204.94 1568.92,1204.94 1569.51,1204.94 1570.09,1204.94 1570.68,1204.94 1571.27,1204.94 1571.85,1204.94 1572.44,1204.94 1573.02,1204.94 1573.61,1204.94 1574.2,1204.94 1574.78,1204.94 1575.37,1204.94 1575.96,1204.94 1576.54,1204.94 1577.13,1204.94 1577.72,1204.94 1578.3,1204.94 1578.89,1204.94 1579.47,1204.94 1580.06,1204.94 1580.65,1204.94 1581.23,1204.94 1581.82,1204.94 1582.41,1204.94 1582.99,1204.94 1583.58,1204.94 1584.17,1204.94 1584.75,1204.94 1585.34,1204.94 1585.93,1204.94 1586.51,1204.94 1587.1,1204.94 1587.68,1204.94 1588.27,1204.94 1588.86,1204.94 1589.44,1204.94 1590.03,1204.94 1590.62,1204.94 1591.2,1204.94 1591.79,1204.94 1592.38,1204.94 1592.96,1204.94 1593.55,1204.94 1594.14,1204.94 1594.72,1204.94 1595.31,1204.94 1595.89,1204.94 1596.48,1204.94 1597.07,1204.94 1597.65,1204.94 1598.24,1204.94 1598.83,1204.94 1599.41,1204.94 1600,1204.94 1600.59,1204.94 1601.17,1204.94 1601.76,1204.94 1602.34,1204.94 1602.93,1204.94 1603.52,1204.94 1604.1,1204.94 1604.69,1204.94 1605.28,1204.94 1605.86,1204.94 1606.45,1204.94 1607.04,1204.94 1607.62,1204.94 1608.21,1204.94 1608.8,1204.94 1609.38,1204.94 1609.97,1204.94 1610.55,1204.94 1611.14,1204.94 1611.73,1204.94 1612.31,1204.94 1612.9,1204.94 1613.49,1204.94 1614.07,1204.94 1614.66,1204.94 1615.25,1204.94 1615.83,1204.94 1616.42,1204.94 1617.01,1204.94 1617.59,1204.94 1618.18,1204.94 1618.76,1204.94 1619.35,1204.94 1619.94,1204.94 1620.52,1204.94 1621.11,1204.94 1621.7,1204.94 1622.28,1204.94 1622.87,1204.94 1623.46,1204.94 1624.04,1204.94 1624.63,1204.94 1625.22,1204.94 1625.8,1204.94 1626.39,1204.94 1626.97,1204.94 1627.56,1204.94 1628.15,1204.94 1628.73,1204.94 1629.32,1204.94 1629.91,1204.94 1630.49,1204.94 1631.08,1204.94 1631.67,1204.94 1632.25,1204.94 1632.84,1204.94 1633.42,1204.94 1634.01,1204.94 1634.6,1204.94 1635.18,1204.94 1635.77,1204.94 1636.36,1204.94 1636.94,1204.94 1637.53,1204.94 1638.12,1204.94 1638.7,1204.94 1639.29,1204.94 1639.88,1204.94 1640.46,1204.94 1641.05,1204.94 1641.63,1204.94 1642.22,1204.94 1642.81,1204.94 1643.39,1204.94 1643.98,1204.94 1644.57,1204.94 1645.15,1204.94 1645.74,1204.94 1646.33,1204.94 1646.91,1204.94 1647.5,1204.94 1648.09,1204.94 1648.67,1204.94 1649.26,1204.94 1649.84,1204.94 1650.43,1204.94 1651.02,1204.94 1651.6,1204.94 1652.19,1204.94 1652.78,1204.94 1653.36,1204.94 1653.95,1204.94 1654.54,1204.94 1655.12,1204.94 1655.71,1204.94 1656.29,1204.94 1656.88,1204.94 1657.47,1204.94 1658.05,1204.94 1658.64,1204.94 1659.23,1204.94 1659.81,1204.94 1660.4,1204.94 1660.99,1204.94 1661.57,1204.94 1662.16,1204.94 1662.75,1204.94 1663.33,1204.94 1663.92,1204.94 1664.5,1204.94 1665.09,1204.94 1665.68,1204.94 1666.26,1204.94 1666.85,1204.94 1667.44,1204.94 1668.02,1204.94 1668.61,1204.94 1669.2,1204.94 1669.78,1204.94 1670.37,1204.94 1670.96,1204.94 1671.54,1204.94 1672.13,1204.94 1672.71,1204.94 1673.3,1204.94 1673.89,1204.94 1674.47,1204.94 1675.06,1204.94 1675.65,1204.94 1676.23,1204.94 1676.82,1204.94 1677.41,1204.94 1677.99,1204.94 1678.58,1204.94 1679.17,1204.94 1679.75,1204.94 1680.34,1204.94 1680.92,1204.94 1681.51,1204.94 1682.1,1204.94 1682.68,1204.94 1683.27,1204.94 1683.86,1204.94 1684.44,1204.94 1685.03,1204.94 1685.62,1204.94 1686.2,1204.94 1686.79,1204.94 1687.37,1204.94 1687.96,1204.94 1688.55,1204.94 1689.13,1204.94 1689.72,1204.94 1690.31,1204.94 1690.89,1204.94 1691.48,1204.94 1692.07,1204.94 1692.65,1204.94 1693.24,1204.94 1693.83,1204.94 1694.41,1204.94 1695,1204.94 1695.58,1204.94 1696.17,1204.94 1696.76,1204.94 1697.34,1204.94 1697.93,1204.94 1698.52,1204.94 1699.1,1204.94 1699.69,1204.94 1700.28,1204.94 1700.86,1204.94 1701.45,1204.94 1702.04,1204.94 1702.62,1204.94 1703.21,1204.94 1703.79,1204.94 1704.38,1204.94 1704.97,1204.94 1705.55,1204.94 1706.14,1204.94 1706.73,1204.94 1707.31,1204.94 1707.9,1204.94 1708.49,1204.94 1709.07,1204.94 1709.66,1204.94 1710.24,1204.94 1710.83,1204.94 1711.42,1204.94 1712,1204.94 1712.59,1204.94 1713.18,1204.94 1713.76,1204.94 1714.35,1204.94 1714.94,1204.94 1715.52,1204.94 1716.11,1204.94 1716.7,1204.94 1717.28,1204.94 1717.87,1204.94 1718.45,1204.94 1719.04,1204.94 1719.63,1204.94 1720.21,1204.94 1720.8,1204.94 1721.39,1204.94 1721.97,1204.94 1722.56,1204.94 1723.15,1204.94 1723.73,1204.94 1724.32,1204.94 1724.91,1204.94 1725.49,1204.94 1726.08,1204.94 1726.66,1204.94 1727.25,1204.94 1727.84,1204.94 1728.42,1204.94 1729.01,1204.94 1729.6,1204.94 1730.18,1204.94 1730.77,1204.94 1731.36,1204.94 1731.94,1204.94 1732.53,1204.94 1733.11,1204.94 1733.7,1204.94 1734.29,1204.94 1734.87,1204.94 1735.46,1204.94 1736.05,1204.94 1736.63,1204.94 1737.22,1204.94 1737.81,1204.94 1738.39,1204.94 1738.98,1204.94 1739.57,1204.94 1740.15,1204.94 1740.74,1204.94 1741.32,1204.94 1741.91,1204.94 1742.5,1204.94 1743.08,1204.94 1743.67,1204.94 1744.26,1204.94 1744.84,1204.94 1745.43,1204.94 1746.02,1204.94 1746.6,1204.94 1747.19,1204.94 1747.78,1204.94 1748.36,1204.94 1748.95,1204.94 1749.53,1204.94 1750.12,1204.94 1750.71,1204.94 1751.29,1204.94 1751.88,1204.94 1752.47,1204.94 1753.05,1204.94 1753.64,1204.94 1754.23,1204.94 1754.81,1204.94 1755.4,1204.94 1755.99,1204.94 1756.57,1204.94 1757.16,1204.94 1757.74,1204.94 1758.33,1204.94 1758.92,1204.94 1759.5,1204.94 1760.09,1204.94 1760.68,1204.94 1761.26,1204.94 1761.85,1204.94 1762.44,1204.94 1763.02,1204.94 1763.61,1204.94 1764.19,1204.94 1764.78,1204.94 1765.37,1204.94 1765.95,1204.94 1766.54,1204.94 1767.13,1204.94 1767.71,1204.94 1768.3,1204.94 1768.89,1204.94 1769.47,1204.94 1770.06,1204.94 1770.65,1204.94 1771.23,1204.94 1771.82,1204.94 1772.4,1204.94 1772.99,1204.94 1773.58,1204.94 1774.16,1204.94 1774.75,1204.94 1775.34,1204.94 1775.92,1204.94 1776.51,1204.94 1777.1,1204.94 1777.68,1204.94 1778.27,1204.94 1778.86,1204.94 1779.44,1204.94 1780.03,1204.94 1780.61,1204.94 1781.2,1204.94 1781.79,1204.94 1782.37,1204.94 1782.96,1204.94 1783.55,1204.94 1784.13,1204.94 1784.72,1204.94 1785.31,1204.94 1785.89,1204.94 1786.48,1204.94 1787.06,1204.94 1787.65,1204.94 1788.24,1204.94 1788.82,1204.94 1789.41,1204.94 1790,1204.94 1790.58,1204.94 1791.17,1204.94 1791.76,1204.94 1792.34,1204.94 1792.93,1204.94 1793.52,1204.94 1794.1,1204.94 1794.69,1204.94 1795.27,1204.94 1795.86,1204.94 1796.45,1204.94 1797.03,1204.94 1797.62,1204.94 1798.21,1204.94 1798.79,1204.94 1799.38,1204.94 1799.97,1204.94 1800.55,1204.94 1801.14,1204.94 1801.73,1204.94 1802.31,1204.94 1802.9,1204.94 1803.48,1204.94 1804.07,1204.94 1804.66,1204.94 1805.24,1204.94 1805.83,1204.94 1806.42,1204.94 1807,1204.94 1807.59,1204.94 1808.18,1204.94 1808.76,1204.94 1809.35,1204.94 1809.94,1204.94 1810.52,1204.94 1811.11,1204.94 1811.69,1204.94 1812.28,1204.94 1812.87,1204.94 1813.45,1204.94 1814.04,1204.94 1814.63,1204.94 1815.21,1204.94 1815.8,1204.94 1816.39,1204.94 1816.97,1204.94 1817.56,1204.94 1818.14,1204.94 1818.73,1204.94 1819.32,1204.94 1819.9,1204.94 1820.49,1204.94 1821.08,1204.94 1821.66,1204.94 1822.25,1204.94 1822.84,1204.94 1823.42,1204.94 1824.01,1204.94 1824.6,1204.94 1825.18,1204.94 1825.77,1204.94 1826.35,1204.94 1826.94,1204.94 1827.53,1204.94 1828.11,1204.94 1828.7,1204.94 1829.29,1204.94 1829.87,1204.94 1830.46,1204.94 1831.05,1204.94 1831.63,1204.94 1832.22,1204.94 1832.81,1204.94 1833.39,1204.94 1833.98,1204.94 1834.56,1204.94 1835.15,1204.94 1835.74,1204.94 1836.32,1204.94 1836.91,1204.94 1837.5,1204.94 1838.08,1204.94 1838.67,1204.94 1839.26,1204.94 1839.84,1204.94 1840.43,1204.94 1841.01,1204.94 1841.6,1204.94 1842.19,1204.94 1842.77,1204.94 1843.36,1204.94 1843.95,1204.94 1844.53,1204.94 1845.12,1204.94 1845.71,1204.94 1846.29,1204.94 1846.88,1204.94 1847.47,1204.94 1848.05,1204.94 1848.64,1204.94 1849.22,1204.94 1849.81,1204.94 1850.4,1204.94 1850.98,1204.94 1851.57,1204.94 1852.16,1204.94 1852.74,1204.94 1853.33,1204.94 1853.92,1204.94 1854.5,1204.94 1855.09,1204.94 1855.68,1204.94 1856.26,1204.94 1856.85,1204.94 1857.43,1204.94 1858.02,1204.94 1858.61,1204.94 1859.19,1204.94 1859.78,1204.94 1860.37,1204.94 1860.95,1204.94 1861.54,1204.94 1862.13,1204.94 1862.71,1204.94 1863.3,1204.94 1863.88,1204.94 1864.47,1204.94 1865.06,1204.94 1865.64,1204.94 1866.23,1204.94 1866.82,1204.94 1867.4,1204.94 1867.99,1204.94 1868.58,1204.94 1869.16,1204.94 1869.75,1204.94 1870.34,1204.94 1870.92,1204.94 1871.51,1204.94 1872.09,1204.94 1872.68,1204.94 1873.27,1204.94 1873.85,1204.94 1874.44,1204.94 1875.03,1204.94 1875.61,1204.94 1876.2,1204.94 1876.79,1204.94 1877.37,1204.94 1877.96,1204.94 1878.55,1204.94 1879.13,1204.94 1879.72,1204.94 1880.3,1204.94 1880.89,1204.94 1881.48,1204.94 1882.06,1204.94 1882.65,1204.94 1883.24,1204.94 1883.82,1204.94 1884.41,1204.94 1885,1204.94 1885.58,1204.94 1886.17,1204.94 1886.76,1204.94 1887.34,1204.94 1887.93,1204.94 1888.51,1204.94 1889.1,1204.94 1889.69,1204.94 1890.27,1204.94 1890.86,1204.94 1891.45,1204.94 1892.03,1204.94 1892.62,1204.94 1893.21,1204.94 1893.79,1204.94 1894.38,1204.94 1894.96,1204.94 1895.55,1204.94 1896.14,1204.94 1896.72,1204.94 1897.31,1204.94 1897.9,1204.94 1898.48,1204.94 1899.07,1204.94 1899.66,1204.94 1900.24,1204.94 1900.83,1204.94 1901.42,1204.94 1902,1204.94 1902.59,1204.94 1903.17,1204.94 1903.76,1204.94 1904.35,1204.94 1904.93,1204.94 1905.52,1204.94 1906.11,1204.94 1906.69,1204.94 1907.28,1204.94 1907.87,1204.94 1908.45,1204.94 1909.04,1204.94 1909.63,1204.94 1910.21,1204.94 1910.8,1204.94 1911.38,1204.94 1911.97,1204.94 1912.56,1204.94 1913.14,1204.94 1913.73,1204.94 1914.32,1204.94 1914.9,1204.94 1915.49,1204.94 1916.08,1204.94 1916.66,1204.94 1917.25,1204.94 1917.83,1204.94 1918.42,1204.94 1919.01,1204.94 1919.59,1204.94 1920.18,1204.94 1920.77,1204.94 1921.35,1204.94 1921.94,1204.94 1922.53,1204.94 1923.11,1204.94 1923.7,1204.94 1924.29,1204.94 1924.87,1204.94 1925.46,1204.94 1926.04,1204.94 1926.63,1204.94 1927.22,1204.94 1927.8,1204.94 1928.39,1204.94 1928.98,1204.94 1929.56,1204.94 1930.15,1204.94 1930.74,1204.94 1931.32,1204.94 1931.91,1204.94 1932.5,1204.94 1933.08,1204.94 1933.67,1204.94 1934.25,1204.94 1934.84,1204.94 1935.43,1204.94 1936.01,1204.94 1936.6,1204.94 1937.19,1204.94 1937.77,1204.94 1938.36,1204.94 1938.95,1204.94 1939.53,1204.94 1940.12,1204.94 1940.71,1204.94 1941.29,1204.94 1941.88,1204.94 1942.46,1204.94 1943.05,1204.94 1943.64,1204.94 1944.22,1204.94 1944.81,1204.94 1945.4,1204.94 1945.98,1204.94 1946.57,1204.94 1947.16,1204.94 1947.74,1204.94 1948.33,1204.94 1948.91,1204.94 1949.5,1204.94 1950.09,1204.94 1950.67,1204.94 1951.26,1204.94 1951.85,1204.94 1952.43,1204.94 1953.02,1204.94 1953.61,1204.94 1954.19,1204.94 1954.78,1204.94 1955.37,1204.94 1955.95,1204.94 1956.54,1204.94 1957.12,1204.94 1957.71,1204.94 1958.3,1204.94 1958.88,1204.94 1959.47,1204.94 1960.06,1204.94 1960.64,1204.94 1961.23,1204.94 1961.82,1204.94 1962.4,1204.94 1962.99,1204.94 1963.58,1204.94 1964.16,1204.94 1964.75,1204.94 1965.33,1204.94 1965.92,1204.94 1966.51,1204.94 1967.09,1204.94 1967.68,1204.94 1968.27,1204.94 1968.85,1204.94 1969.44,1204.94 1970.03,1204.94 1970.61,1204.94 1971.2,1204.94 1971.78,1204.94 1972.37,1204.94 1972.96,1204.94 1973.54,1204.94 1974.13,1204.94 1974.72,1204.94 1975.3,1204.94 1975.89,1204.94 1976.48,1204.94 1977.06,1204.94 1977.65,1204.94 1978.24,1204.94 1978.82,1204.94 1979.41,1204.94 1979.99,1204.94 1980.58,1204.94 1981.17,1204.94 1981.75,1204.94 1982.34,1204.94 1982.93,1204.94 1983.51,1204.94 1984.1,1204.94 1984.69,1204.94 1985.27,1204.94 1985.86,1204.94 1986.45,1204.94 1987.03,1204.94 1987.62,1204.94 1988.2,1204.94 1988.79,1204.94 1989.38,1204.94 1989.96,1204.94 1990.55,1204.94 1991.14,1204.94 1991.72,1204.94 1992.31,1204.94 1992.9,1204.94 1993.48,1204.94 1994.07,1204.94 1994.65,1204.94 1995.24,1204.94 1995.83,1204.94 1996.41,1204.94 1997,1204.94 1997.59,1204.94 1998.17,1204.94 1998.76,1204.94 1999.35,1204.94 1999.93,1204.94 2000.52,1204.94 2001.11,1204.94 2001.69,1204.94 2002.28,1204.94 2002.86,1204.94 2003.45,1204.94 2004.04,1204.94 2004.62,1204.94 2005.21,1204.94 2005.8,1204.94 2006.38,1204.94 2006.97,1204.94 2007.56,1204.94 2008.14,1204.94 2008.73,1204.94 2009.32,1204.94 2009.9,1204.94 2010.49,1204.94 2011.07,1204.94 2011.66,1204.94 2012.25,1204.94 2012.83,1204.94 2013.42,1204.94 2014.01,1204.94 2014.59,1204.94 2015.18,1204.94 2015.77,1204.94 2016.35,1204.94 2016.94,1204.94 2017.53,1204.94 2018.11,1204.94 2018.7,1204.94 2019.28,1204.94 2019.87,1204.94 2020.46,1204.94 2021.04,1204.94 2021.63,1204.94 2022.22,1204.94 2022.8,1204.94 2023.39,1204.94 2023.98,1204.94 2024.56,1204.94 2025.15,1204.94 2025.73,1204.94 2026.32,1204.94 2026.91,1204.94 2027.49,1204.94 2028.08,1204.94 2028.67,1204.94 2029.25,1204.94 2029.84,1204.94 2030.43,1204.94 2031.01,1204.94 2031.6,1204.94 2032.19,1204.94 2032.77,1204.94 2033.36,1204.94 2033.94,1204.94 2034.53,1204.94 2035.12,1204.94 2035.7,1204.94 2036.29,1204.94 2036.88,1204.94 2037.46,1204.94 2038.05,1204.94 2038.64,1204.94 2039.22,1204.94 2039.81,1204.94 2040.4,1204.94 2040.98,1204.94 2041.57,1204.94 2042.15,1204.94 2042.74,1204.94 2043.33,1204.94 2043.91,1204.94 2044.5,1204.94 2045.09,1204.94 2045.67,1204.94 2046.26,1204.94 2046.85,1204.94 2047.43,1204.94 2048.02,1204.94 2048.6,1204.94 2049.19,1204.94 2049.78,1204.94 2050.36,1204.94 2050.95,1204.94 2051.54,1204.94 2052.12,1204.94 2052.71,1204.94 2053.3,1204.94 2053.88,1204.94 2054.47,1204.94 2055.06,1204.94 2055.64,1204.94 2056.23,1204.94 2056.81,1204.94 2057.4,1204.94 2057.99,1204.94 2058.57,1204.94 2059.16,1204.94 2059.75,1204.94 2060.33,1204.94 2060.92,1204.94 2061.51,1204.94 2062.09,1204.94 2062.68,1204.94 2063.27,1204.94 2063.85,1204.94 2064.44,1204.94 2065.02,1204.94 2065.61,1204.94 2066.2,1204.94 2066.78,1204.94 2067.37,1204.94 2067.96,1204.94 2068.54,1204.94 2069.13,1204.94 2069.72,1204.94 2070.3,1204.94 2070.89,1204.94 2071.48,1204.94 2072.06,1204.94 2072.65,1204.94 2073.23,1204.94 2073.82,1204.94 2074.41,1204.94 2074.99,1204.94 2075.58,1204.94 2076.17,1204.94 2076.75,1204.94 2077.34,1204.94 2077.93,1204.94 2078.51,1204.94 2079.1,1204.94 2079.68,1204.94 2080.27,1204.94 2080.86,1204.94 2081.44,1204.94 2082.03,1204.94 2082.62,1204.94 2083.2,1204.94 2083.79,1204.94 2084.38,1204.94 2084.96,1204.94 2085.55,1204.94 2086.14,1204.94 2086.72,1204.94 2087.31,1204.94 2087.89,1204.94 2088.48,1204.94 2089.07,1204.94 2089.65,1204.94 2090.24,1204.94 2090.83,1204.94 2091.41,1204.94 2092,1204.94 2092.59,1204.94 2093.17,1204.94 2093.76,1204.94 2094.35,1204.94 2094.93,1204.94 2095.52,1204.94 2096.1,1204.94 2096.69,1204.94 2097.28,1204.94 2097.86,1204.94 2098.45,1204.94 2099.04,1204.94 2099.62,1204.94 2100.21,1204.94 2100.8,1204.94 2101.38,1204.94 2101.97,1204.94 2102.55,1204.94 2103.14,1204.94 2103.73,1204.94 2104.31,1204.94 2104.9,1204.94 2105.49,1204.94 2106.07,1204.94 2106.66,1204.94 2107.25,1204.94 2107.83,1204.94 2108.42,1204.94 2109.01,1204.94 2109.59,1204.94 2110.18,1204.94 2110.76,1204.94 2111.35,1204.94 2111.94,1204.94 2112.52,1204.94 2113.11,1204.94 2113.7,1204.94 2114.28,1204.94 2114.87,1204.94 2115.46,1204.94 2116.04,1204.94 2116.63,1204.94 2117.22,1204.94 2117.8,1204.94 2118.39,1204.94 2118.97,1204.94 2119.56,1204.94 2120.15,1204.94 2120.73,1204.94 2121.32,1204.94 2121.91,1204.94 2122.49,1204.94 2123.08,1204.94 2123.67,1204.94 2124.25,1204.94 2124.84,1204.94 2125.42,1204.94 2126.01,1204.94 2126.6,1204.94 2127.18,1204.94 2127.77,1204.94 2128.36,1204.94 2128.94,1204.94 2129.53,1204.94 2130.12,1204.94 2130.7,1204.94 2131.29,1204.94 2131.88,1204.94 2132.46,1204.94 2133.05,1204.94 2133.63,1204.94 2134.22,1204.94 2134.81,1204.94 2135.39,1204.94 2135.98,1204.94 2136.57,1204.94 2137.15,1204.94 2137.74,1204.94 2138.33,1204.94 2138.91,1204.94 2139.5,1204.94 2140.09,1204.94 2140.67,1204.94 2141.26,1204.94 2141.84,1204.94 2142.43,1204.94 2143.02,1204.94 2143.6,1204.94 2144.19,1204.94 2144.78,1204.94 2145.36,1204.94 2145.95,1204.94 2146.54,1204.94 2147.12,1204.94 2147.71,1204.94 2148.3,1204.94 2148.88,1204.94 2149.47,1204.94 2150.05,1204.94 2150.64,1204.94 2151.23,1204.94 2151.81,1204.94 2152.4,1204.94 2152.99,1204.94 2153.57,1204.94 2154.16,1204.94 2154.75,1204.94 2155.33,1204.94 2155.92,1204.94 2156.5,1204.94 2157.09,1204.94 2157.68,1204.94 2158.26,1204.94 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.77,1188.48 1401.04,899.083 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1221 985.439,1188.48 2158.26,1188.48 2158.26,1221 985.439,1221 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip170)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip170)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip173\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip173)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-9047.34 166.588,-9677.06 167.147,-10243.6 167.706,-10750.9 168.266,-10263.7 168.825,-10705.2 169.384,-11096.3 169.943,-11440.3 170.503,-11740.4 171.062,-11999.5 171.621,-12220.2 172.18,-12405.1 172.74,-12556.8 173.299,-12152.6 173.858,-12260 174.417,-11883.4 174.977,-11944.3 175.536,-11981 176.095,-11279.7 176.655,-11285 177.214,-11289.6 177.773,-10979.1 178.332,-10958.1 178.892,-10913.6 179.451,-10380.7 180.01,-10347.9 180.569,-10304.4 181.129,-10233.3 181.688,-9974.6 182.247,-9904.3 182.806,-9647.51 183.366,-9564.57 183.925,-9471.64 184.484,-9219.43 185.043,-9126.42 185.603,-8767.73 186.162,-8642.76 186.721,-8401.47 187.28,-8161.96 187.84,-8030.27 188.399,-7888.03 188.958,-7746.88 189.517,-7510.62 190.077,-7366.51 190.636,-7138.47 191.195,-6985.17 191.754,-6753.43 192.314,-6594.54 192.873,-6359.88 193.432,-5937.25 193.991,-5731.42 194.551,-5593.31 195.11,-5453.84 195.669,-5207.6 196.228,-5061.45 196.788,-4763.23 197.347,-4581.84 197.906,-4404.96 198.465,-4283.04 199.025,-4113.25 199.584,-3952.51 200.143,-3749.78 200.702,-3595.1 201.262,-3408.86 201.821,-3229.52 202.38,-3134.16 202.939,-3035.24 203.499,-2906.06 204.058,-2742.05 204.617,-2621.55 205.176,-2432.85 205.736,-2217.7 206.295,-2113.6 206.854,-2016.06 207.413,-1942.01 207.973,-1876.38 208.532,-1750.42 209.091,-1626.7 209.65,-1539.29 210.21,-1399.4 210.769,-1292.22 211.328,-1217.91 211.887,-1147.5 212.447,-1075.18 213.006,-976.837 213.565,-883.139 214.124,-745.607 214.684,-583.087 215.243,-530.725 215.802,-456.726 216.361,-429.956 216.921,-404.55 217.48,-353.008 218.039,-254.251 218.598,-230.587 219.158,-160.821 219.717,-116.773 220.276,-50.5199 220.835,59.6112 221.395,101.428 221.954,120.537 222.513,133.771 223.072,149.233 223.632,208.525 224.191,248.786 224.75,259.883 225.309,298.362 225.869,331.352 226.428,406.078 226.987,413.264 227.546,402.062 228.106,412.291 228.665,466.642 229.224,501.662 229.783,491.803 230.343,539.281 230.902,545.299 231.461,569.387 232.02,596.036 232.58,603.424 233.139,609.853 233.698,617.314 234.257,662.186 234.817,706.329 235.376,730.57 235.935,711.127 236.494,717.418 237.054,743.698 237.613,727.915 238.172,771.193 238.731,774.875 239.291,764.747 239.85,753.291 240.409,800.223 240.968,843.638 241.528,864.237 242.087,863.549 242.646,881.487 243.205,843.475 243.765,901.954 244.324,954.767 244.883,1003.19 245.442,995.941 246.002,1027.18 246.561,984.936 247.12,978.692 247.679,975.415 248.239,970.912 248.798,984.179 249.357,999.904 249.916,996.443 250.476,978.645 251.035,1011.23 251.594,1009.47 252.153,1022.1 252.713,1019.84 253.272,1031.1 253.831,1064.8 254.39,1062.58 254.95,1090.98 255.509,1116.19 256.068,1109.11 256.627,1119.23 257.187,1147.8 257.746,1123.19 258.305,1113.97 258.864,1091.02 259.424,1067.57 259.983,1044.23 260.542,1041.58 261.101,1055.31 261.661,1099.63 262.22,1094.73 262.779,1156.14 263.338,1163.96 263.898,1153.77 264.457,1144.29 265.016,1152.15 265.575,1113.29 266.135,1119.57 266.694,1111.92 267.253,1155.3 267.812,1181.72 268.372,1201.8 268.931,1224.25 269.49,1227.01 270.049,1212.16 270.609,1231.82 271.168,1217.37 271.727,1223.28 272.286,1226.68 272.846,1246.05 273.405,1281.3 273.964,1296.03 274.523,1279.99 275.083,1263.01 275.642,1262.19 276.201,1229.94 276.76,1216.55 277.32,1184.94 277.879,1176.97 278.438,1151.03 278.997,1124.07 279.557,1132.6 280.116,1172.03 280.675,1144.6 281.234,1118.59 281.794,1108.57 282.353,1102.49 282.912,1111.8 283.471,1108.21 284.031,1153.51 284.59,1175.91 285.149,1149.62 285.708,1090.59 286.268,1116.17 286.827,1091.34 287.386,1083.22 287.945,1091.18 288.505,1085.64 289.064,1111.69 289.623,1114.19 290.182,1106.74 290.742,1130.25 291.301,1120.9 291.86,1063.6 292.419,1073.11 292.979,1063.22 293.538,1056.37 294.097,1068.32 294.656,1046.36 295.216,1056.81 295.775,1034.67 296.334,1015.34 296.893,1010.73 297.453,1005.44 298.012,1002.93 298.571,1029.49 299.13,1017.99 299.69,1014.65 300.249,1062.99 300.808,1053.57 301.368,1046.64 301.927,1039.23 302.486,1046.65 303.045,1035.6 303.605,1010.87 304.164,1040.28 304.723,986.357 305.282,978.243 305.842,978.181 306.401,976.361 306.96,956.653 307.519,956.035 308.079,920.64 308.638,919.558 309.197,918.676 309.756,955.056 310.316,983.635 310.875,960.965 311.434,975.246 311.993,971.088 312.553,970.736 313.112,949.586 313.671,945.138 314.23,959.758 314.79,1005 315.349,1014.31 315.908,1041.68 316.467,1035.47 317.027,1045.2 317.586,1036.59 318.145,1060.91 318.704,1070.2 319.264,1093.61 319.823,1085.26 320.382,1076.55 320.941,1082.05 321.501,1086.65 322.06,1078.51 322.619,1116.42 323.178,1071.12 323.738,1094.53 324.297,1062.58 324.856,1039.7 325.415,1015.9 325.975,1008.59 326.534,1018.46 327.093,981.878 327.652,979.496 328.212,1003.32 328.771,981.881 329.33,975.27 329.889,970.028 330.449,964.869 331.008,957.243 331.567,951.748 332.126,975.493 332.686,951.25 333.245,992.208 333.804,987.564 334.363,998.589 334.923,944.199 335.482,986.43 336.041,996.592 336.6,953.711 337.16,1013.22 337.719,1021.9 338.278,1014.92 338.837,1025.86 339.397,1017.47 339.956,993.06 340.515,981.872 341.074,1025.94 341.634,1018.44 342.193,1029.43 342.752,970.608 343.311,981.389 343.871,944.311 344.43,941.04 344.989,938.561 345.548,919.139 346.108,913.395 346.667,909.58 347.226,908.397 347.785,904.75 348.345,900.846 348.904,883.383 349.463,850.58 350.022,852.646 350.582,838.402 351.141,854.253 351.7,869.675 352.259,851.146 352.819,853.272 353.378,883.927 353.937,912.422 354.496,957.772 355.056,951.013 355.615,977.009 356.174,940.072 356.733,966.625 357.293,958.674 357.852,954.011 358.411,962.198 358.97,955.009 359.53,965.396 360.089,943.73 360.648,934.997 361.207,942.267 361.767,939.314 362.326,934.52 362.885,926.438 363.444,921.09 364.004,933.588 364.563,928.932 365.122,939.221 365.681,945.454 366.241,886.025 366.8,869.541 367.359,850.003 367.918,831.766 368.478,847.377 369.037,846.329 369.596,876.084 370.155,857.411 370.715,854.304 371.274,852.222 371.833,851.64 372.392,836.199 372.952,838.08 373.511,834.977 374.07,868.837 374.629,867.229 375.189,866.482 375.748,844.789 376.307,859.389 376.866,858.408 377.426,854.479 377.985,851.848 378.544,867.902 379.103,846.188 379.663,858.884 380.222,870.008 380.781,866.322 381.34,847.559 381.9,848.658 382.459,829.301 383.018,827.75 383.577,862.353 384.137,860.054 384.696,906.686 385.255,899.042 385.814,894.118 386.374,890.751 386.933,886.951 387.492,883.096 388.051,880.235 388.611,843.351 389.17,856.588 389.729,854.954 390.288,868.118 390.848,833.027 391.407,831.744 391.966,831.599 392.525,831.529 393.085,812.65 393.644,810.307 394.203,743.009 394.762,760.086 395.322,795.513 395.881,792.878 396.44,793.532 396.999,809.978 397.559,791.758 398.118,794.694 398.677,794.555 399.236,830.502 399.796,828.963 400.355,843.301 400.914,872.918 401.473,804.389 402.033,820.692 402.592,802.604 403.151,814.832 403.71,844.887 404.27,826.987 404.829,839.505 405.388,838.113 405.947,805.339 406.507,837.277 407.066,850.932 407.625,861.906 408.184,857.076 408.744,837.431 409.303,866.741 409.862,828.059 410.421,842.96 410.981,836.466 411.54,864.292 412.099,823.527 412.658,852.141 413.218,848.816 413.777,829.968 414.336,796.098 414.895,796.425 415.455,777.22 416.014,790.421 416.573,805.106 417.132,768.727 417.692,733.633 418.251,756.588 418.81,758.281 419.369,774.348 419.929,792.143 420.488,786.854 421.047,789.917 421.606,772.691 422.166,787.618 422.725,789.449 423.284,803.217 423.843,817.926 424.403,831.591 424.962,847.056 425.521,841.664 426.08,822.568 426.64,806.775 427.199,821.732 427.758,867.618 428.318,876.973 428.877,901.381 429.436,877.624 429.995,855.896 430.555,851.152 431.114,862.195 431.673,872.342 432.232,849.225 432.792,829.008 433.351,824.972 433.91,807.924 434.469,807.41 435.029,821.079 435.588,818.955 436.147,816.773 436.706,783.23 437.266,797.496 437.825,807.012 438.384,823.986 438.943,822.248 439.503,801.654 440.062,799.352 440.621,782.394 441.18,811.234 441.74,870.936 442.299,883.94 442.858,877.892 443.417,885.191 443.977,894.299 444.536,903.829 445.095,914.348 445.654,905.625 446.214,931.896 446.773,909.959 447.332,871.038 447.891,882.531 448.451,875.632 449.01,867.224 449.569,856.96 450.128,868.716 450.688,862.612 451.247,856.51 451.806,820.297 452.365,817.949 452.925,798.063 453.484,796.913 454.043,840.909 454.602,855.059 455.162,853.529 455.721,829.662 456.28,826.724 456.839,821.322 457.399,837.219 457.958,801.456 458.517,813.263 459.076,827.303 459.636,838.714 460.195,855.297 460.754,835.463 461.313,813.521 461.873,795.426 462.432,794.435 462.991,828.176 463.55,788.597 464.11,768.239 464.669,765.797 465.228,767.894 465.787,799.162 466.347,793.507 466.906,758.027 467.465,757.861 468.024,789.38 468.584,771.562 469.143,752.079 469.702,750.359 470.261,766.566 470.821,714.172 471.38,715.248 471.939,715.831 472.498,716.889 473.058,752.231 473.617,732.129 474.176,732.783 474.735,714.396 475.295,716.619 475.854,735.776 476.413,673.646 476.972,676.131 477.532,724.638 478.091,708.217 478.65,694.123 479.209,696.88 479.769,715.774 480.328,714.963 480.887,715.885 481.446,702.128 482.006,687.524 482.565,673.588 483.124,662.104 483.683,650.957 484.243,705.018 484.802,706.418 485.361,708.877 485.92,710.366 486.48,731.62 487.039,737.963 487.598,738.806 488.157,736.865 488.717,736.219 489.276,720.808 489.835,744.287 490.394,774.649 490.954,775.954 491.513,790.31 492.072,772.832 492.631,772.364 493.191,771.572 493.75,750.004 494.309,766.744 494.868,765.126 495.428,748.283 495.987,736.327 496.546,736.641 497.105,769.123 497.665,797.327 498.224,779.787 498.783,794.895 499.342,745.567 499.902,744.698 500.461,774.267 501.02,821.953 501.579,818.584 502.139,827.364 502.698,838.265 503.257,801.259 503.816,781.51 504.376,779.828 504.935,808.184 505.494,803.431 506.053,785.567 506.613,780.042 507.172,730.253 507.731,728.681 508.29,711.236 508.85,726.674 509.409,760.185 509.968,776.078 510.527,772.001 511.087,803.014 511.646,783.023 512.205,781.955 512.764,780.56 513.324,813.798 513.883,790.824 514.442,752.617 515.001,753.94 515.561,770.915 516.12,771.312 516.679,737.425 517.238,724.697 517.798,739.857 518.357,736.125 518.916,717.789 519.475,751.671 520.035,738.028 520.594,755.001 521.153,786.649 521.712,800.624 522.272,812.329 522.831,779.487 523.39,777.58 523.949,804.891 524.509,818.529 525.068,795.164 525.627,790.677 526.186,785.05 526.746,780.824 527.305,777.006 527.864,770.877 528.423,741.931 528.983,723.263 529.542,705.493 530.101,703.898 530.66,690.377 531.22,693.368 531.779,681.253 532.338,665.997 532.897,669.298 533.457,671.469 534.016,655.096 534.575,659.742 535.134,664.862 535.694,670.074 536.253,690.599 536.812,708.289 537.371,675.201 537.931,675.739 538.49,708.336 539.049,706.793 539.608,688.832 540.168,674.497 540.727,674.221 541.286,676.329 541.845,711.751 542.405,726.541 542.964,695.656 543.523,714.563 544.082,733.03 544.642,733.505 545.201,714.793 545.76,701.304 546.319,720.888 546.879,686.984 547.438,692.13 547.997,661.916 548.556,713.641 549.116,717.879 549.675,714.911 550.234,732.322 550.793,716.795 551.353,702.041 551.912,700.732 552.471,735.323 553.031,703.702 553.59,701.312 554.149,701.79 554.708,702.727 555.268,689.541 555.827,674.752 556.386,676.95 556.945,696.24 557.505,698.464 558.064,682.433 558.623,699.563 559.182,682.38 559.742,693.898 560.301,711.941 560.86,693.831 561.419,694.131 561.979,645.326 562.538,652.758 563.097,655.102 563.656,673.974 564.216,691.039 564.775,688.945 565.334,693.711 565.893,696.573 566.453,708.492 567.012,710.943 567.571,710.785 568.13,726.19 568.69,708.213 569.249,738.934 569.808,738.275 570.367,738.965 570.927,737.939 571.486,752.32 572.045,780.477 572.604,825.395 573.164,817.373 573.723,795.061 574.282,790.693 574.841,786.129 575.401,752.569 575.96,763.253 576.519,746.713 577.078,745.088 577.638,740.434 578.197,748.791 578.756,747.142 579.315,729.837 579.875,744.85 580.434,743.175 580.993,790.371 581.552,800.35 582.112,841.95 582.671,839.11 583.23,815.369 583.789,776.263 584.349,769.748 584.908,718.638 585.467,737.499 586.026,752.619 586.586,779.892 587.145,777.8 587.704,724.137 588.263,687.219 588.823,690.554 589.382,707.236 589.941,758.147 590.5,755.502 591.06,736.268 591.619,718.695 592.178,714.471 592.737,665.187 593.297,646.549 593.856,681.822 594.415,683.127 594.974,687.131 595.534,722.101 596.093,723.448 596.652,740.982 597.211,741.813 597.771,740.179 598.33,740.048 598.889,773.756 599.448,751.896 600.008,748.46 600.567,761.485 601.126,774.387 601.685,785.942 602.245,795.347 602.804,838.021 603.363,865.134 603.922,838.503 604.482,851.497 605.041,840.897 605.6,803.687 606.159,781.64 606.719,779.317 607.278,777.424 607.837,755.057 608.396,735.747 608.956,700.748 609.515,750.339 610.074,762.735 610.633,775.771 611.193,802.202 611.752,812.767 612.311,806.493 612.87,785.172 613.43,795.378 613.989,789.337 614.548,765.814 615.107,776.486 615.667,740.051 616.226,736.723 616.785,700.766 617.344,701.584 617.904,715.675 618.463,698.952 619.022,728.338 619.581,711.456 620.141,709.823 620.7,724.023 621.259,726.216 621.818,741.203 622.378,736.776 622.937,702.42 623.496,717.981 624.055,717.379 624.615,717.388 625.174,718.442 625.733,713.317 626.292,713.187 626.852,746.173 627.411,762.746 627.97,774.107 628.529,737.668 629.089,706.106 629.648,689.452 630.207,706.409 630.766,740.587 631.326,725.779 631.885,724.12 632.444,690.846 633.003,674.295 633.563,659.844 634.122,679.93 634.681,652.122 635.24,701.804 635.8,701.213 636.359,717.175 636.918,666.117 637.477,636.994 638.037,623.831 638.596,642.163 639.155,664.194 639.714,667.578 640.274,685.868 640.833,688.136 641.392,702.78 641.951,703.45 642.511,717.688 643.07,716.43 643.629,731.611 644.188,699.324 644.748,666.765 645.307,685.334 645.866,667.647 646.425,682.386 646.985,687.014 647.544,719.34 648.103,656.462 648.662,673.69 649.222,662.279 649.781,665.729 650.34,651.163 650.899,638.979 651.459,656.007 652.018,643.657 652.577,648.436 653.136,651.039 653.696,689.745 654.255,672.989 654.814,627.754 655.373,630.157 655.933,635.501 656.492,655.673 657.051,662.012 657.61,631.124 658.17,684.064 658.729,663.159 659.288,716.475 659.847,698.088 660.407,713.555 660.966,709.747 661.525,709.041 662.084,705.996 662.644,673.114 663.203,656.811 663.762,695.685 664.321,727.138 664.881,741.949 665.44,708.714 665.999,690.629 666.558,741.353 667.118,753.876 667.677,750.698 668.236,748.356 668.795,744.955 669.355,756.024 669.914,769.317 670.473,794.536 671.032,775.338 671.592,737.057 672.151,733.322 672.71,763.76 673.269,728.896 673.829,694.999 674.388,727.581 674.947,728.133 675.506,711.456 676.066,728.261 676.625,726.607 677.184,724.877 677.743,707.329 678.303,689.713 678.862,676.64 679.421,694.057 679.981,708.447 680.54,706.986 681.099,722.213 681.658,688.077 682.218,705.81 682.777,707.576 683.336,707.884 683.895,692.106 684.455,707.965 685.014,689.922 685.573,721.386 686.132,732.531 686.692,728.522 687.251,731.066 687.81,712.134 688.369,712.158 688.929,760.533 689.488,774.01 690.047,753.349 690.606,697.289 691.166,678.497 691.725,682.015 692.284,683.401 692.843,712.989 693.403,728.524 693.962,711.744 694.521,663.965 695.08,663.791 695.64,665.512 696.199,630.877 696.758,634.349 697.317,624.669 697.877,626.801 698.436,663.412 698.995,679.509 699.554,682.538 700.114,702.323 700.673,732.203 701.232,726.59 701.791,710.54 702.351,723.305 702.91,707.368 703.469,712.492 704.028,712.694 704.588,709.255 705.147,694.221 705.706,694.416 706.265,695.402 706.825,725.424 707.384,740.858 707.943,768.343 708.502,761.105 709.062,775.041 709.621,787.541 710.18,732.82 710.739,748.854 711.299,731.919 711.858,778.132 712.417,756.516 712.976,768.51 713.536,764.98 714.095,744.819 714.654,755.869 715.213,765.984 715.773,777.796 716.332,788.74 716.891,784.344 717.45,777.42 718.01,784.956 718.569,812.095 719.128,822.256 719.687,815.182 720.247,808.364 720.806,783.122 721.365,758.941 721.924,755.005 722.484,769.407 723.043,780.325 723.602,809.454 724.161,754.876 724.721,735.691 725.28,702.806 725.839,716.238 726.398,695.865 726.958,727.596 727.517,740.122 728.076,769.747 728.635,764.734 729.195,745.691 729.754,758.523 730.313,705.98 730.872,704.697 731.432,670.605 731.991,703.496 732.55,702.579 733.109,672.429 733.669,642.793 734.228,646.664 734.787,717.074 735.346,681.504 735.906,667.405 736.465,672.055 737.024,671.203 737.583,673.157 738.143,657.589 738.702,622.978 739.261,580.387 739.82,603.248 740.38,625.45 740.939,611.472 741.498,614.683 742.057,637.579 742.617,640.025 743.176,642.883 743.735,660.719 744.294,675.85 744.854,675.984 745.413,660.419 745.972,664.854 746.531,600.347 747.091,606.165 747.65,597.009 748.209,603.429 748.768,606.621 749.328,609.815 749.887,628.032 750.446,630.922 751.005,666.898 751.565,636.909 752.124,637.845 752.683,655.038 753.242,655.924 753.802,694.122 754.361,711.432 754.92,713.255 755.479,664.994 756.039,649.394 756.598,700.66 757.157,669.558 757.716,687.507 758.276,717.306 758.835,717.201 759.394,730.985 759.953,712.006 760.513,677.086 761.072,645.616 761.631,646.137 762.19,650.166 762.75,653.585 763.309,659.021 763.868,644.748 764.427,648.757 764.987,634.402 765.546,619.474 766.105,642.24 766.664,614.566 767.224,633.792 767.783,619.857 768.342,593.182 768.901,600.499 769.461,601.798 770.02,623.776 770.579,662.288 771.138,681.444 771.698,697.955 772.257,698.714 772.816,667.381 773.375,685.921 773.935,685.467 774.494,687.385 775.053,689.102 775.612,704.726 776.172,716.088 776.731,720.439 777.29,739.567 777.849,767.125 778.409,799.764 778.968,758.625 779.527,723.223 780.086,719.759 780.646,701.615 781.205,698.715 781.764,715.206 782.323,696.285 782.883,646.425 783.442,684.355 784.001,682.869 784.56,701.659 785.12,682.133 785.679,668.079 786.238,667.326 786.797,652.573 787.357,685.308 787.916,683.07 788.475,672.125 789.034,669.339 789.594,655.968 790.153,657.538 790.712,644.775 791.271,632.774 791.831,638.069 792.39,643.108 792.949,644.002 793.508,642.057 794.068,644.018 794.627,646.922 795.186,650.182 795.745,670.674 796.305,654.603 796.864,658.043 797.423,658.685 797.982,623.65 798.542,644.543 799.101,646.221 799.66,610.428 800.219,599.612 800.779,589.315 801.338,627.156 801.897,647.788 802.456,663.378 803.016,684.908 803.575,682.66 804.134,731.009 804.693,729.21 805.253,745.311 805.812,743.442 806.371,724.717 806.931,720.494 807.49,721.636 808.049,750.493 808.608,761.629 809.168,772.853 809.727,733.701 810.286,765.018 810.845,745.822 811.405,759.899 811.964,740.12 812.523,687.008 813.082,703.59 813.642,732.164 814.201,748.497 814.76,731.893 815.319,696.345 815.879,684.745 816.438,666.494 816.997,667.042 817.556,652.478 818.116,636.668 818.675,601.056 819.234,587.998 819.793,609.261 820.353,645.484 820.912,680.767 821.471,695.949 822.03,681.563 822.59,682.381 823.149,666.375 823.708,668.571 824.267,671.68 824.827,658.912 825.386,690.105 825.945,706.363 826.504,720.855 827.064,718.871 827.623,731.162 828.182,745.409 828.741,775.387 829.301,774.121 829.86,750.927 830.419,749.344 830.978,761.646 831.538,724.621 832.097,674.329 832.656,677.737 833.215,677.763 833.775,713.486 834.334,664.372 834.893,682.945 835.452,682.581 836.012,747.338 836.571,728.603 837.13,725.234 837.689,736.911 838.249,686.115 838.808,703.755 839.367,652.933 839.926,642.558 840.486,643.677 841.045,644.451 841.604,647.907 842.163,668.225 842.723,685.31 843.282,670.347 843.841,670.258 844.4,670.714 844.96,672.281 845.519,659.35 846.078,660.707 846.637,675.421 847.197,676.737 847.756,657.932 848.315,639.481 848.874,659.016 849.434,692.957 849.993,706.327 850.552,687.946 851.111,704.669 851.671,721.907 852.23,689.2 852.789,692.369 853.348,674.368 853.908,692.889 854.467,692.385 855.026,660.691 855.585,645.753 856.145,670.141 856.704,673.465 857.263,692.367 857.822,708.856 858.382,720.393 858.941,704.733 859.5,704.18 860.059,738.284 860.619,750.58 861.178,716.214 861.737,687.293 862.296,654.749 862.856,659.787 863.415,681.52 863.974,682.923 864.533,685.777 865.093,702.086 865.652,703.856 866.211,688.17 866.77,674.283 867.33,708.337 867.889,678.204 868.448,693.166 869.007,675.364 869.567,691.402 870.126,719.795 870.685,723.383 871.244,724.535 871.804,710.847 872.363,730.161 872.922,727.465 873.481,726.906 874.041,708.102 874.6,706.874 875.159,689.787 875.718,693.816 876.278,674.626 876.837,693.101 877.396,673.638 877.955,642.697 878.515,642.03 879.074,647.743 879.633,665.817 880.192,633.123 880.752,636.823 881.311,640.399 881.87,674.142 882.429,676.673 882.989,628.177 883.548,612.951 884.107,618.568 884.666,622.548 885.226,645.688 885.785,681.938 886.344,665.799 886.903,683.281 887.463,685.925 888.022,670.946 888.581,669.559 889.14,686.755 889.7,670.691 890.259,675.889 890.818,674.833 891.377,708.821 891.937,707.676 892.496,723.48 893.055,752.554 893.614,768.907 894.174,746.091 894.733,724.916 895.292,707.614 895.851,707.314 896.411,734.855 896.97,696.928 897.529,692.384 898.088,689.622 898.648,688.304 899.207,702.876 899.766,702.56 900.325,700.803 900.885,681.935 901.444,665.752 902.003,667.225 902.562,684.287 903.122,649.624 903.681,683.168 904.24,652.672 904.799,639.613 905.359,626.043 905.918,646.854 906.477,662.37 907.036,630.544 907.596,620.924 908.155,639.49 908.714,627.46 909.273,647.659 909.833,634.427 910.392,669.938 910.951,656.086 911.51,644.118 912.07,679.544 912.629,698.495 913.188,697.696 913.747,711.767 914.307,709.05 914.866,707.25 915.425,707.094 915.984,707.634 916.544,706.444 917.103,703.722 917.662,722.875 918.221,705.196 918.781,702.624 919.34,684.78 919.899,682.533 920.458,684.151 921.018,684.07 921.577,669.586 922.136,688.48 922.695,673.464 923.255,661.354 923.814,661.712 924.373,681.043 924.932,681.486 925.492,716.674 926.051,728.663 926.61,727.508 927.169,707.57 927.729,705.666 928.288,701.448 928.847,685.741 929.406,671.231 929.966,656.871 930.525,663.285 931.084,664.074 931.644,680.103 932.203,679.03 932.762,713.399 933.321,723.149 933.881,687.998 934.44,655.462 934.999,626.489 935.558,632.142 936.118,637.485 936.677,641.001 937.236,644.345 937.795,663.581 938.355,668.233 938.914,655.433 939.473,594.691 940.032,582.963 940.592,586.203 941.151,623.277 941.71,638.172 942.269,656.363 942.829,675.225 943.388,674.43 943.947,676.314 944.506,707.708 945.066,721.378 945.625,733.69 946.184,746.906 946.743,746.834 947.303,746.916 947.862,761.034 948.421,772.226 948.98,816.478 949.54,813.379 950.099,838.067 950.658,863.369 951.217,820.479 951.777,768.218 952.336,732.397 952.895,699.052 953.454,696.789 954.014,726.813 954.573,708.85 955.132,656.478 955.691,702.233 956.251,683.823 956.81,716.06 957.369,698.552 957.928,714.884 958.488,711.886 959.047,714.062 959.606,727.23 960.165,687.723 960.725,718.748 961.284,747.092 961.843,757.648 962.402,751.89 962.962,732.006 963.521,747.633 964.08,748.2 964.639,715.544 965.199,686.007 965.758,685.423 966.317,688.024 966.876,686.273 967.436,733.943 967.995,734.028 968.554,727.115 969.113,710.706 969.673,679.265 970.232,631.331 970.791,635.672 971.35,672.962 971.91,674.655 972.469,690.254 973.028,707.029 973.587,706.29 974.147,668.245 974.706,671.79 975.265,688.841 975.824,718.588 976.384,683.377 976.943,682.338 977.502,669.546 978.061,671.226 978.621,686.766 979.18,700.694 979.739,700.161 980.298,748.628 980.858,758.164 981.417,722.769 981.976,737.317 982.535,750.626 983.095,728.665 983.654,727.638 984.213,758.155 984.772,740.955 985.332,752.203 985.891,717.105 986.45,680.601 987.009,680.447 987.569,696.289 988.128,678.072 988.687,662.264 989.246,646.071 989.806,663.553 990.365,664.79 990.924,649.64 991.483,649.986 992.043,651.895 992.602,652.72 993.161,653.84 993.72,652.97 994.28,700.567 994.839,717.85 995.398,735.661 995.957,681.39 996.517,661.471 997.076,665.273 997.635,696.341 998.194,696.776 998.754,730.526 999.313,729.866 999.872,745.156 1000.43,740.67 1000.99,722.158 1001.55,689.768 1002.11,673.922 1002.67,660.161 1003.23,676.905 1003.79,662.379 1004.35,645.435 1004.91,697.096 1005.46,699.885 1006.02,699.51 1006.58,676.858 1007.14,679.592 1007.7,726.426 1008.26,739.181 1008.82,752.422 1009.38,782.142 1009.94,741.704 1010.5,754.603 1011.06,766.361 1011.62,744.434 1012.18,705.823 1012.73,720.937 1013.29,695.402 1013.85,642.628 1014.41,627.819 1014.97,611.995 1015.53,596.569 1016.09,584.832 1016.65,607.956 1017.21,578.101 1017.77,584.924 1018.33,573.686 1018.89,580.816 1019.45,588.623 1020.01,608.134 1020.56,578.533 1021.12,535.304 1021.68,542.834 1022.24,537.789 1022.8,529.043 1023.36,539.17 1023.92,526.503 1024.48,534.466 1025.04,541.961 1025.6,531.766 1026.16,554.993 1026.72,563.537 1027.28,558.708 1027.83,599.179 1028.39,620.487 1028.95,594.203 1029.51,600.591 1030.07,625.161 1030.63,644.78 1031.19,738.638 1031.75,720.038 1032.31,766.026 1032.87,759.403 1033.43,788.914 1033.99,754.294 1034.55,736.222 1035.1,719.73 1035.66,669.238 1036.22,671.241 1036.78,705.121 1037.34,691.01 1037.9,675.369 1038.46,641.882 1039.02,627.667 1039.58,630.388 1040.14,633.872 1040.7,668.564 1041.26,672.175 1041.82,703.829 1042.38,704.636 1042.93,702.699 1043.49,734.392 1044.05,716.134 1044.61,717.452 1045.17,713.067 1045.73,728.944 1046.29,727.018 1046.85,724.841 1047.41,705.951 1047.97,689.639 1048.53,739.438 1049.09,754.786 1049.65,770.343 1050.2,705.958 1050.76,757.92 1051.32,770.392 1051.88,738.175 1052.44,702.479 1053,688.363 1053.56,673.239 1054.12,677.426 1054.68,679.818 1055.24,663.06 1055.8,677.879 1056.36,695.414 1056.92,691.31 1057.48,671.729 1058.03,688.487 1058.59,687.346 1059.15,701.473 1059.71,720.227 1060.27,715.243 1060.83,726.472 1061.39,753.834 1061.95,715.961 1062.51,665.194 1063.07,646.053 1063.63,665.277 1064.19,715.748 1064.75,686.64 1065.3,691.302 1065.86,708.132 1066.42,690.424 1066.98,694.252 1067.54,678.191 1068.1,662.74 1068.66,633.343 1069.22,634.421 1069.78,634.662 1070.34,669.313 1070.9,638.918 1071.46,622.902 1072.02,658.361 1072.57,674.667 1073.13,690.132 1073.69,670.852 1074.25,671.042 1074.81,672.817 1075.37,689.346 1075.93,689.389 1076.49,687.5 1077.05,685.337 1077.61,666.253 1078.17,652.4 1078.73,620.828 1079.29,608.374 1079.85,610.179 1080.4,629.56 1080.96,608.614 1081.52,611.068 1082.08,597.895 1082.64,587.942 1083.2,595.737 1083.76,600.31 1084.32,622.084 1084.88,627.104 1085.44,631.537 1086,616.492 1086.56,638.936 1087.12,641.018 1087.67,675.117 1088.23,677.565 1088.79,677.436 1089.35,662.936 1089.91,679.579 1090.47,669.04 1091.03,671.128 1091.59,687.431 1092.15,688.679 1092.71,656.872 1093.27,662.523 1093.83,694.755 1094.39,696.086 1094.94,709.323 1095.5,693.593 1096.06,681.1 1096.62,696.35 1097.18,665.035 1097.74,636.503 1098.3,642.448 1098.86,658.215 1099.42,662.682 1099.98,694.375 1100.54,679.416 1101.1,643.953 1101.66,677.341 1102.22,691.539 1102.77,674.65 1103.33,689.351 1103.89,654.055 1104.45,668.463 1105.01,634.77 1105.57,653.562 1106.13,668.837 1106.69,636.503 1107.25,656.896 1107.81,625.126 1108.37,658.128 1108.93,659.492 1109.49,693.004 1110.04,663.835 1110.6,661.18 1111.16,625.963 1111.72,610.348 1112.28,628.642 1112.84,630.612 1113.4,632.937 1113.96,651.283 1114.52,686.901 1115.08,685.882 1115.64,685.083 1116.2,683.606 1116.76,731.633 1117.31,747.29 1117.87,728.473 1118.43,677.153 1118.99,658.101 1119.55,691.446 1120.11,671.073 1120.67,668.15 1121.23,702.683 1121.79,721.542 1122.35,734.696 1122.91,731.214 1123.47,747.041 1124.03,741.284 1124.59,740.652 1125.14,723.015 1125.7,701.964 1126.26,688.999 1126.82,653.293 1127.38,672.349 1127.94,673.835 1128.5,705.842 1129.06,688.395 1129.62,688.866 1130.18,738.557 1130.74,750.113 1131.3,764.134 1131.86,761.461 1132.41,757.914 1132.97,738.323 1133.53,768.184 1134.09,713.655 1134.65,712.748 1135.21,707.61 1135.77,724.119 1136.33,707.44 1136.89,689.412 1137.45,720.387 1138.01,736.139 1138.57,731.868 1139.13,731.165 1139.68,727.244 1140.24,723.426 1140.8,772.356 1141.36,751.559 1141.92,746.164 1142.48,759.18 1143.04,756.006 1143.6,754.036 1144.16,768.546 1144.72,765.443 1145.28,747.56 1145.84,741.664 1146.4,754.282 1146.96,781.388 1147.51,761.936 1148.07,807.276 1148.63,821.585 1149.19,811.827 1149.75,823.363 1150.31,798.56 1150.87,774.426 1151.43,784.167 1151.99,762.534 1152.55,725.936 1153.11,706.748 1153.67,670.089 1154.23,673.666 1154.78,674.601 1155.34,689.214 1155.9,720.248 1156.46,733.348 1157.02,727.344 1157.58,758.061 1158.14,768.915 1158.7,761.2 1159.26,741.864 1159.82,788.355 1160.38,765.318 1160.94,729.431 1161.5,741.372 1162.05,754.961 1162.61,755.128 1163.17,749.385 1163.73,744.733 1164.29,740.547 1164.85,706.679 1165.41,704.734 1165.97,750.474 1166.53,732.688 1167.09,728.199 1167.65,697.229 1168.21,712.378 1168.77,692.863 1169.33,675.305 1169.88,675.234 1170.44,678.608 1171,646.672 1171.56,646.54 1172.12,651.057 1172.68,606.028 1173.24,623.697 1173.8,643.92 1174.36,663.266 1174.92,646.947 1175.48,631.692 1176.04,632.872 1176.6,634.842 1177.15,656.874 1177.71,626.303 1178.27,630.692 1178.83,634.01 1179.39,655.431 1179.95,655.655 1180.51,657.51 1181.07,644.12 1181.63,644.533 1182.19,660.881 1182.75,662.551 1183.31,661.29 1183.87,648.895 1184.43,654.268 1184.98,689.162 1185.54,674.867 1186.1,693.413 1186.66,691.192 1187.22,678.378 1187.78,678.943 1188.34,679.091 1188.9,695.233 1189.46,727.657 1190.02,691.443 1190.58,705.423 1191.14,668.821 1191.7,652.451 1192.25,670.702 1192.81,656.055 1193.37,672.336 1193.93,689.197 1194.49,657.941 1195.05,660.895 1195.61,628.301 1196.17,630.315 1196.73,632.441 1197.29,636.482 1197.85,654.26 1198.41,672.764 1198.97,659.001 1199.52,659.869 1200.08,661.36 1200.64,680.6 1201.2,697.572 1201.76,697.057 1202.32,663.402 1202.88,645.925 1203.44,649.175 1204,666.513 1204.56,666.898 1205.12,703.87 1205.68,700.485 1206.24,701.151 1206.8,670.015 1207.35,656.963 1207.91,676.983 1208.47,690.926 1209.03,690.614 1209.59,706.087 1210.15,704.536 1210.71,691.687 1211.27,671.382 1211.83,673.142 1212.39,673.285 1212.95,657.824 1213.51,657.936 1214.07,676.158 1214.62,690.78 1215.18,703.317 1215.74,735.898 1216.3,715.376 1216.86,730.459 1217.42,713.664 1217.98,728.956 1218.54,713.033 1219.1,714.237 1219.66,712.139 1220.22,708.059 1220.78,707.579 1221.34,723.392 1221.89,671.578 1222.45,672.878 1223.01,691.48 1223.57,718.297 1224.13,683.016 1224.69,684.255 1225.25,621.389 1225.81,626.654 1226.37,614.517 1226.93,598.215 1227.49,538.809 1228.05,560.122 1228.61,567.548 1229.17,588.093 1229.72,590.518 1230.28,610.352 1230.84,615.885 1231.4,606.569 1231.96,578.718 1232.52,635.918 1233.08,626.731 1233.64,664.202 1234.2,681.508 1234.76,668.607 1235.32,704.146 1235.88,718.72 1236.44,669.781 1236.99,653.84 1237.55,687.067 1238.11,734.809 1238.67,696.352 1239.23,677.714 1239.79,646.411 1240.35,629.103 1240.91,618.943 1241.47,619.104 1242.03,668.994 1242.59,650.669 1243.15,660.667 1243.71,681.632 1244.26,700 1244.82,698.992 1245.38,712.714 1245.94,710.335 1246.5,690.898 1247.06,692.143 1247.62,692.653 1248.18,726.962 1248.74,712.588 1249.3,728.062 1249.86,694.142 1250.42,742.369 1250.98,736.834 1251.54,733.665 1252.09,751.778 1252.65,744.833 1253.21,771.523 1253.77,764.915 1254.33,790.709 1254.89,804.529 1255.45,797.852 1256.01,757.859 1256.57,753.248 1257.13,762.824 1257.69,757.4 1258.25,750.578 1258.81,729.417 1259.36,725.597 1259.92,757.925 1260.48,753.751 1261.04,733.011 1261.6,731.486 1262.16,724.147 1262.72,757.4 1263.28,723.421 1263.84,740.75 1264.4,738.484 1264.96,685.184 1265.52,669.015 1266.08,668.05 1266.63,682.198 1267.19,648.341 1267.75,667.473 1268.31,655.321 1268.87,656.213 1269.43,639.382 1269.99,642.168 1270.55,626.361 1271.11,645.78 1271.67,662.624 1272.23,629.786 1272.79,647.751 1273.35,652.289 1273.91,621.834 1274.46,608.905 1275.02,663.187 1275.58,665.086 1276.14,665.126 1276.7,666.66 1277.26,667.32 1277.82,698.771 1278.38,698.621 1278.94,728.623 1279.5,693.999 1280.06,741.731 1280.62,708.657 1281.18,694.819 1281.73,675.706 1282.29,693.422 1282.85,676.881 1283.41,660.6 1283.97,680.251 1284.53,632.657 1285.09,650.84 1285.65,635.188 1286.21,621.653 1286.77,640.288 1287.33,624.512 1287.89,610.808 1288.45,643.639 1289,676.098 1289.56,694.748 1290.12,676.68 1290.68,694.461 1291.24,711.02 1291.8,709.833 1292.36,709.302 1292.92,724.03 1293.48,720.402 1294.04,737.563 1294.6,717.214 1295.16,729.454 1295.72,709.687 1296.28,642.582 1296.83,630.645 1297.39,601.247 1297.95,603.262 1298.51,608.203 1299.07,611.675 1299.63,618.114 1300.19,608.829 1300.75,611.45 1301.31,617.208 1301.87,590.131 1302.43,577.889 1302.99,568.374 1303.55,561.394 1304.1,552.215 1304.66,562.461 1305.22,585.278 1305.78,577.45 1306.34,583.124 1306.9,592.955 1307.46,601.336 1308.02,669.526 1308.58,687.818 1309.14,669.813 1309.7,670.144 1310.26,640.381 1310.82,641.665 1311.38,665.435 1311.93,667.563 1312.49,668.087 1313.05,670.792 1313.61,669.83 1314.17,687.621 1314.73,721.041 1315.29,703.738 1315.85,703.817 1316.41,738.119 1316.97,736.651 1317.53,719.251 1318.09,748.77 1318.65,729.316 1319.2,727.06 1319.76,740.163 1320.32,754.595 1320.88,734.998 1321.44,700.244 1322,685.24 1322.56,667.996 1323.12,666.894 1323.68,667.182 1324.24,666.81 1324.8,686.373 1325.36,703.366 1325.92,704.204 1326.47,674.92 1327.03,691.353 1327.59,674.809 1328.15,675.407 1328.71,690.6 1329.27,691.485 1329.83,691.217 1330.39,643.495 1330.95,661.175 1331.51,647.188 1332.07,668.746 1332.63,698.499 1333.19,681.095 1333.75,697.269 1334.3,714.48 1334.86,693.035 1335.42,723.305 1335.98,722.879 1336.54,688.277 1337.1,707.005 1337.66,754.731 1338.22,766.036 1338.78,747.338 1339.34,730.955 1339.9,727.719 1340.46,738.864 1341.02,718.621 1341.57,715.468 1342.13,715.54 1342.69,697.281 1343.25,711.212 1343.81,728.955 1344.37,710.353 1344.93,710.52 1345.49,723.758 1346.05,691.19 1346.61,704.336 1347.17,637.71 1347.73,653.61 1348.29,640.434 1348.84,660.952 1349.4,676.257 1349.96,631.273 1350.52,634.962 1351.08,667.916 1351.64,652.389 1352.2,641.067 1352.76,645.273 1353.32,597.312 1353.88,620.817 1354.44,655.405 1355,686.427 1355.56,654.366 1356.12,637.905 1356.67,639.506 1357.23,624.303 1357.79,657.067 1358.35,692.245 1358.91,691.496 1359.47,691.429 1360.03,673.407 1360.59,688.696 1361.15,716.036 1361.71,713.114 1362.27,710.992 1362.83,709.14 1363.39,660.963 1363.94,711.787 1364.5,711.178 1365.06,709.957 1365.62,709.028 1366.18,694.713 1366.74,690.786 1367.3,718.073 1367.86,715.675 1368.42,712.749 1368.98,726.489 1369.54,776.128 1370.1,771.804 1370.66,737.226 1371.21,735.752 1371.77,698.344 1372.33,743.697 1372.89,674.424 1373.45,657.407 1374.01,645.868 1374.57,666.209 1375.13,666.566 1375.69,698.857 1376.25,712.218 1376.81,725.839 1377.37,689.661 1377.93,676.798 1378.49,678.571 1379.04,677.824 1379.6,711.729 1380.16,710.869 1380.72,709.879 1381.28,707.727 1381.84,690.297 1382.4,704.594 1382.96,705.315 1383.52,687.127 1384.08,687.103 1384.64,670.268 1385.2,670.933 1385.76,671.31 1386.31,707.286 1386.87,720.718 1387.43,751.088 1387.99,743.9 1388.55,772.657 1389.11,752.082 1389.67,781.685 1390.23,757.641 1390.79,721.213 1391.35,754.097 1391.91,754.047 1392.47,734.634 1393.03,715.788 1393.58,715.253 1394.14,714.046 1394.7,696.349 1395.26,645.349 1395.82,643.207 1396.38,634.086 1396.94,700.138 1397.5,729.496 1398.06,712.584 1398.62,729.442 1399.18,729.977 1399.74,709.944 1400.3,693.327 1400.86,677.023 1401.41,693.124 1401.97,677.975 1402.53,693.823 1403.09,721.958 1403.65,673.333 1404.21,658.071 1404.77,641.961 1405.33,647.744 1405.89,667.243 1406.45,668.26 1407.01,702.617 1407.57,670.778 1408.13,690.536 1408.68,670.558 1409.24,672.647 1409.8,691.764 1410.36,692.132 1410.92,705.596 1411.48,704.729 1412.04,686.431 1412.6,687.007 1413.16,674.723 1413.72,659.874 1414.28,677.466 1414.84,655.759 1415.4,721.352 1415.95,736.407 1416.51,732.512 1417.07,717.115 1417.63,697.554 1418.19,701.259 1418.75,682.14 1419.31,711.912 1419.87,710.888 1420.43,692.089 1420.99,690.137 1421.55,706.514 1422.11,720.569 1422.67,673.155 1423.23,674.425 1423.78,643.526 1424.34,649.51 1424.9,635.525 1425.46,668.494 1426.02,701.819 1426.58,701.512 1427.14,682.024 1427.7,645.943 1428.26,667.09 1428.82,701.436 1429.38,734.409 1429.94,733.32 1430.5,728.309 1431.05,676.779 1431.61,681.269 1432.17,680.956 1432.73,699.232 1433.29,684.106 1433.85,699.846 1434.41,697.91 1434.97,678.416 1435.53,697.972 1436.09,713.164 1436.65,739.425 1437.21,734.228 1437.77,648.785 1438.33,668.254 1438.88,651.199 1439.44,685.39 1440,699.284 1440.56,730.726 1441.12,697.736 1441.68,711.447 1442.24,741.439 1442.8,755.381 1443.36,734.203 1443.92,731.016 1444.48,727.367 1445.04,727.959 1445.6,742.975 1446.15,740.468 1446.71,738.823 1447.27,769.348 1447.83,762.718 1448.39,774.27 1448.95,770.327 1449.51,765.054 1450.07,793.44 1450.63,819.065 1451.19,779.433 1451.75,787.044 1452.31,796.015 1452.87,778.39 1453.42,789.551 1453.98,817.166 1454.54,824.711 1455.1,817.876 1455.66,811.363 1456.22,817.111 1456.78,794.916 1457.34,786.844 1457.9,783.9 1458.46,810.966 1459.02,821.327 1459.58,816.724 1460.14,791.383 1460.7,818.489 1461.25,808.624 1461.81,783.976 1462.37,760.391 1462.93,770.149 1463.49,745.963 1464.05,743.936 1464.61,705.666 1465.17,704.693 1465.73,685.488 1466.29,684.182 1466.85,680.568 1467.41,677.869 1467.97,661.695 1468.52,696.084 1469.08,682.162 1469.64,651.469 1470.2,639.214 1470.76,642.398 1471.32,660.37 1471.88,643.565 1472.44,658.54 1473,628.854 1473.56,660.927 1474.12,644.355 1474.68,594.463 1475.24,583.18 1475.79,573.072 1476.35,561.644 1476.91,536.355 1477.47,588.827 1478.03,605.815 1478.59,595.372 1479.15,601.947 1479.71,640.161 1480.27,689.496 1480.83,690.217 1481.39,704.972 1481.95,704.075 1482.51,716.79 1483.07,681.023 1483.62,698.252 1484.18,681.345 1484.74,667.129 1485.3,667.937 1485.86,652.847 1486.42,654.94 1486.98,607.691 1487.54,614.102 1488.1,632.408 1488.66,650.399 1489.22,649.265 1489.78,667.185 1490.34,669.414 1490.89,653.069 1491.45,637.368 1492.01,656.502 1492.57,659.848 1493.13,660.987 1493.69,630.188 1494.25,618.797 1494.81,621.888 1495.37,596.172 1495.93,616.62 1496.49,621.655 1497.05,625.394 1497.61,663.66 1498.16,680.84 1498.72,631.705 1499.28,648.974 1499.84,669.148 1500.4,639.474 1500.96,676.347 1501.52,648.289 1502.08,617.832 1502.64,623.827 1503.2,627.833 1503.76,612.876 1504.32,636.06 1504.88,639.657 1505.44,628.376 1505.99,630.614 1506.55,634.087 1507.11,653.168 1507.67,634.524 1508.23,639.759 1508.79,625.738 1509.35,614.418 1509.91,635.21 1510.47,658.017 1511.03,641.823 1511.59,645.411 1512.15,630.223 1512.71,634.82 1513.26,651.693 1513.82,639.794 1514.38,627.831 1514.94,600.684 1515.5,604.734 1516.06,608.017 1516.62,612.34 1517.18,599.641 1517.74,618.758 1518.3,635.074 1518.86,634.215 1519.42,671.325 1519.98,687.648 1520.53,687.567 1521.09,723.705 1521.65,707.008 1522.21,724.981 1522.77,707.78 1523.33,707.959 1523.89,705.618 1524.45,671.945 1525.01,677.785 1525.57,711.35 1526.13,723.48 1526.69,670.624 1527.25,673.356 1527.81,688.796 1528.36,720.956 1528.92,719.098 1529.48,713.533 1530.04,773.374 1530.6,767.6 1531.16,780.106 1531.72,775.065 1532.28,724.147 1532.84,675.737 1533.4,673.375 1533.96,688.927 1534.52,688.684 1535.08,688.281 1535.63,721.938 1536.19,690.745 1536.75,688.112 1537.31,687.513 1537.87,718.229 1538.43,715.647 1538.99,698.487 1539.55,664.972 1540.11,683.406 1540.67,653.522 1541.23,684.593 1541.79,680.135 1542.35,695.135 1542.9,676.63 1543.46,674.292 1544.02,656.088 1544.58,642.034 1545.14,644.077 1545.7,643.418 1546.26,681.446 1546.82,666.766 1547.38,653.006 1547.94,623.597 1548.5,628.247 1549.06,663.383 1549.62,666.549 1550.18,697.222 1550.73,698.756 1551.29,662.99 1551.85,712.181 1552.41,730.049 1552.97,758.532 1553.53,769.007 1554.09,763.551 1554.65,758.292 1555.21,755.387 1555.77,783.192 1556.33,728.594 1556.89,729.429 1557.45,710.317 1558,739.603 1558.56,737.954 1559.12,750.21 1559.68,711.795 1560.24,712.165 1560.8,692.946 1561.36,708.633 1561.92,708.6 1562.48,705.717 1563.04,718.06 1563.6,730.064 1564.16,744.396 1564.72,693.325 1565.28,677.128 1565.83,691.68 1566.39,689.813 1566.95,689.249 1567.51,656.366 1568.07,627.766 1568.63,616.137 1569.19,587.905 1569.75,558.169 1570.31,565.767 1570.87,619.914 1571.43,620.697 1571.99,657.201 1572.55,594.181 1573.1,617.031 1573.66,591.172 1574.22,598.519 1574.78,617.646 1575.34,638.074 1575.9,624.487 1576.46,625.865 1577.02,626.177 1577.58,611.899 1578.14,615.762 1578.7,650.126 1579.26,654.012 1579.82,654.854 1580.37,670.018 1580.93,686.398 1581.49,688.492 1582.05,687.963 1582.61,703.067 1583.17,683.707 1583.73,667.567 1584.29,667.174 1584.85,664.757 1585.41,650.843 1585.97,620.399 1586.53,624.173 1587.09,645.253 1587.65,666.067 1588.2,619.679 1588.76,621.637 1589.32,607.848 1589.88,626.863 1590.44,664.644 1591,652.895 1591.56,625.285 1592.12,630.17 1592.68,667.162 1593.24,669.097 1593.8,650.956 1594.36,652.378 1594.92,638.975 1595.47,644.936 1596.03,647.661 1596.59,651.197 1597.15,668.172 1597.71,671.324 1598.27,701.284 1598.83,716.48 1599.39,729.855 1599.95,728.346 1600.51,742.357 1601.07,728.733 1601.63,743.287 1602.19,742.76 1602.74,738.383 1603.3,766.88 1603.86,779.225 1604.42,755.597 1604.98,717.843 1605.54,729.717 1606.1,725.359 1606.66,722.383 1607.22,752.609 1607.78,702.604 1608.34,713.883 1608.9,696.288 1609.46,677.798 1610.02,709.044 1610.57,742.903 1611.13,723.446 1611.69,738.395 1612.25,749.414 1612.81,748.909 1613.37,760.998 1613.93,794.746 1614.49,791.191 1615.05,768.766 1615.61,748.764 1616.17,714.776 1616.73,747.088 1617.29,744.499 1617.84,755.849 1618.4,770.03 1618.96,732.917 1619.52,729.453 1620.08,728.751 1620.64,726.443 1621.2,759.221 1621.76,784.072 1622.32,795.377 1622.88,777.159 1623.44,753.954 1624,752.766 1624.56,732.102 1625.11,715.51 1625.67,732.312 1626.23,730.468 1626.79,729.316 1627.35,725.765 1627.91,723.737 1628.47,688.803 1629.03,682.542 1629.59,715.018 1630.15,710.335 1630.71,741.791 1631.27,739.693 1631.83,756.738 1632.39,737.523 1632.94,736.147 1633.5,764.789 1634.06,777.051 1634.62,758.409 1635.18,739.375 1635.74,736.898 1636.3,701.965 1636.86,684.918 1637.42,701.863 1637.98,698.225 1638.54,712.434 1639.1,726.782 1639.66,751.731 1640.21,797.17 1640.77,757.835 1641.33,720.135 1641.89,716.392 1642.45,667.855 1643.01,635.179 1643.57,639.137 1644.13,591.745 1644.69,615.211 1645.25,569.076 1645.81,554.318 1646.37,563.207 1646.93,618.033 1647.48,607.525 1648.04,547.507 1648.6,571.42 1649.16,577.595 1649.72,596.821 1650.28,617.07 1650.84,622.454 1651.4,645.43 1651.96,632.24 1652.52,601.309 1653.08,605.018 1653.64,643.027 1654.2,643.422 1654.76,662.772 1655.31,692.498 1655.87,677.724 1656.43,694.31 1656.99,708.982 1657.55,723.922 1658.11,722.915 1658.67,707.307 1659.23,691.471 1659.79,707.591 1660.35,660.247 1660.91,648.217 1661.47,649.753 1662.03,648.82 1662.58,636.211 1663.14,639.518 1663.7,643.3 1664.26,662.657 1664.82,643.23 1665.38,647.425 1665.94,685.111 1666.5,682.866 1667.06,685.334 1667.62,685.967 1668.18,701.9 1668.74,716.844 1669.3,730.632 1669.85,743.513 1670.41,741.69 1670.97,737.107 1671.53,733.293 1672.09,713.513 1672.65,728.075 1673.21,711.777 1673.77,711.495 1674.33,710.595 1674.89,758.13 1675.45,739.988 1676.01,735.255 1676.57,734.756 1677.13,763.144 1677.68,743.674 1678.24,741.621 1678.8,768.862 1679.36,731.898 1679.92,725.104 1680.48,706.035 1681.04,706.772 1681.6,689.422 1682.16,687.738 1682.72,738.747 1683.28,752.676 1683.84,749.525 1684.4,732.35 1684.95,725.825 1685.51,722.321 1686.07,701.493 1686.63,702.746 1687.19,715.77 1687.75,685.76 1688.31,670.675 1688.87,671.448 1689.43,656.131 1689.99,641.883 1690.55,642.737 1691.11,631.155 1691.67,635.971 1692.23,653.579 1692.78,636.671 1693.34,608.41 1693.9,612.628 1694.46,596.86 1695.02,586.207 1695.58,573.992 1696.14,596.437 1696.7,568.296 1697.26,605.473 1697.82,593.592 1698.38,583.165 1698.94,604.805 1699.5,606.889 1700.05,578.408 1700.61,600.532 1701.17,609.228 1701.73,612.91 1702.29,612.826 1702.85,616.781 1703.41,605.38 1703.97,674.965 1704.53,657.768 1705.09,642.19 1705.65,660.025 1706.21,630.297 1706.77,584.128 1707.32,593.971 1707.88,534.255 1708.44,529.042 1709,552.74 1709.56,542.733 1710.12,547.667 1710.68,508.18 1711.24,581.534 1711.8,603.172 1712.36,624.187 1712.92,632.547 1713.48,635.99 1714.04,657.273 1714.6,643.819 1715.15,614.157 1715.71,621.044 1716.27,620.683 1716.83,624.454 1717.39,644.085 1717.95,647.015 1718.51,631.881 1719.07,635.769 1719.63,657.436 1720.19,646.287 1720.75,634.082 1721.31,684.56 1721.87,686.046 1722.42,699.903 1722.98,683.983 1723.54,730.709 1724.1,726.567 1724.66,739.659 1725.22,768.197 1725.78,745.534 1726.34,761.231 1726.9,775.501 1727.46,724.156 1728.02,769.802 1728.58,752.675 1729.14,717.819 1729.69,719.889 1730.25,701.367 1730.81,666.198 1731.37,669.169 1731.93,637.42 1732.49,640.255 1733.05,593.607 1733.61,585.503 1734.17,593.246 1734.73,607.446 1735.29,629.53 1735.85,637.009 1736.41,651.873 1736.97,637.297 1737.52,640.587 1738.08,645.541 1738.64,646.545 1739.2,662.792 1739.76,679.288 1740.32,696.343 1740.88,694.689 1741.44,677.151 1742,678.251 1742.56,711.342 1743.12,727.501 1743.68,726.772 1744.24,739.557 1744.79,736.571 1745.35,735.064 1745.91,763.214 1746.47,759.458 1747.03,742.208 1747.59,721.724 1748.15,737.072 1748.71,749.258 1749.27,747.519 1749.83,774.391 1750.39,738.439 1750.95,737.87 1751.51,764.643 1752.06,762.425 1752.62,744.46 1753.18,706.231 1753.74,669.039 1754.3,683.791 1754.86,666.265 1755.42,668.296 1755.98,685.67 1756.54,684.872 1757.1,686.6 1757.66,668.151 1758.22,671.663 1758.78,658.451 1759.34,676.935 1759.89,658.842 1760.45,674.363 1761.01,674.11 1761.57,676.419 1762.13,677.375 1762.69,661.07 1763.25,695.368 1763.81,725.215 1764.37,724.809 1764.93,690.921 1765.49,673.603 1766.05,671.162 1766.61,673.196 1767.16,686.942 1767.72,686.811 1768.28,701.949 1768.84,636.191 1769.4,653.027 1769.96,637.713 1770.52,654.226 1771.08,671.56 1771.64,672.714 1772.2,717.376 1772.76,713.275 1773.32,714.392 1773.88,694.23 1774.43,711.726 1774.99,709.683 1775.55,706.063 1776.11,687.899 1776.67,704.476 1777.23,731.999 1777.79,727.895 1778.35,773.582 1778.91,751.356 1779.47,747.827 1780.03,695.956 1780.59,712.255 1781.15,695.44 1781.71,729.589 1782.26,740.301 1782.82,723.654 1783.38,737.079 1783.94,735.108 1784.5,717.298 1785.06,696.07 1785.62,697.211 1786.18,696.895 1786.74,679.842 1787.3,696.404 1787.86,711.225 1788.42,724.626 1788.98,754.199 1789.53,733.69 1790.09,731.527 1790.65,713.382 1791.21,710.498 1791.77,693.189 1792.33,673.396 1792.89,639.749 1793.45,677.349 1794.01,680.813 1794.57,663.395 1795.13,644.521 1795.69,660.848 1796.25,729.179 1796.8,708.602 1797.36,706.725 1797.92,700.586 1798.48,698.079 1799.04,697.92 1799.6,681.564 1800.16,702.386 1800.72,684.714 1801.28,667.606 1801.84,651.371 1802.4,684.098 1802.96,700.279 1803.52,698.77 1804.08,697.785 1804.63,646.184 1805.19,632.683 1805.75,666.11 1806.31,666.443 1806.87,668.967 1807.43,700.278 1807.99,746.705 1808.55,741.709 1809.11,754.671 1809.67,737.54 1810.23,718.016 1810.79,701.363 1811.35,697.451 1811.9,677.531 1812.46,692.712 1813.02,695.581 1813.58,646.345 1814.14,663.197 1814.7,666.333 1815.26,651.036 1815.82,670.582 1816.38,661.169 1816.94,661.896 1817.5,628.82 1818.06,598.375 1818.62,636.79 1819.18,639.499 1819.73,656.434 1820.29,678.045 1820.85,709.532 1821.41,664.056 1821.97,648.687 1822.53,615.776 1823.09,603.573 1823.65,608.796 1824.21,611.067 1824.77,613.4 1825.33,620.818 1825.89,591.554 1826.45,595.316 1827,598.494 1827.56,602.433 1828.12,591.723 1828.68,599.648 1829.24,603.169 1829.8,622.462 1830.36,608.159 1830.92,612.421 1831.48,618.982 1832.04,621.258 1832.6,607.465 1833.16,611.932 1833.72,647.095 1834.27,647.716 1834.83,651.074 1835.39,669.81 1835.95,673.247 1836.51,689.424 1837.07,719.173 1837.63,718.259 1838.19,747.504 \"/>\n<path clip-path=\"url(#clip173)\" d=\"M720.247 688.358 L720.806 688.358 L721.365 688.358 L721.924 688.358 L722.484 688.358 L723.043 688.358 L723.602 688.358 L724.161 688.358 L724.721 688.358 L725.28 688.358 L725.839 688.358 L726.398 688.358 L726.958 688.358 L727.517 688.358 L728.076 688.358 L728.635 688.358 L729.195 688.358 L729.754 688.358 L730.313 688.358 L730.872 688.358 L731.432 688.358 L731.991 688.358 L732.55 688.358 L733.109 688.358 L733.669 688.358 L734.228 688.358 L734.787 688.358 L735.346 688.358 L735.906 688.358 L736.465 688.358 L737.024 688.358 L737.583 688.358 L738.143 688.358 L738.702 688.358 L739.261 688.358 L739.82 688.358 L740.38 688.358 L740.939 688.358 L741.498 688.358 L742.057 688.358 L742.617 688.358 L743.176 688.358 L743.735 688.358 L744.294 688.358 L744.854 688.358 L745.413 688.358 L745.972 688.358 L746.531 688.358 L747.091 688.358 L747.65 688.358 L748.209 688.358 L748.768 688.358 L749.328 688.358 L749.887 688.358 L750.446 688.358 L751.005 688.358 L751.565 688.358 L752.124 688.358 L752.683 688.358 L753.242 688.358 L753.802 688.358 L754.361 688.358 L754.92 688.358 L755.479 688.358 L756.039 688.358 L756.598 688.358 L757.157 688.358 L757.716 688.358 L758.276 688.358 L758.835 688.358 L759.394 688.358 L759.953 688.358 L760.513 688.358 L761.072 688.358 L761.631 688.358 L762.19 688.358 L762.75 688.358 L763.309 688.358 L763.868 688.358 L764.427 688.358 L764.987 688.358 L765.546 688.358 L766.105 688.358 L766.664 688.358 L767.224 688.358 L767.783 688.358 L768.342 688.358 L768.901 688.358 L769.461 688.358 L770.02 688.358 L770.579 688.358 L771.138 688.358 L771.698 688.358 L772.257 688.358 L772.816 688.358 L773.375 688.358 L773.935 688.358 L774.494 688.358 L775.053 688.358 L775.612 688.358 L776.172 688.358 L776.731 688.358 L777.29 688.358 L777.849 688.358 L778.409 688.358 L778.968 688.358 L779.527 688.358 L780.086 688.358 L780.646 688.358 L781.205 688.358 L781.764 688.358 L782.323 688.358 L782.883 688.358 L783.442 688.358 L784.001 688.358 L784.56 688.358 L785.12 688.358 L785.679 688.358 L786.238 688.358 L786.797 688.358 L787.357 688.358 L787.916 688.358 L788.475 688.358 L789.034 688.358 L789.594 688.358 L790.153 688.358 L790.712 688.358 L791.271 688.358 L791.831 688.358 L792.39 688.358 L792.949 688.358 L793.508 688.358 L794.068 688.358 L794.627 688.358 L795.186 688.358 L795.745 688.358 L796.305 688.358 L796.864 688.358 L797.423 688.358 L797.982 688.358 L798.542 688.358 L799.101 688.358 L799.66 688.358 L800.219 688.358 L800.779 688.358 L801.338 688.358 L801.897 688.358 L802.456 688.358 L803.016 688.358 L803.575 688.358 L804.134 688.358 L804.693 688.358 L805.253 688.358 L805.812 688.358 L806.371 688.358 L806.931 688.358 L807.49 688.358 L808.049 688.358 L808.608 688.358 L809.168 688.358 L809.727 688.358 L810.286 688.358 L810.845 688.358 L811.405 688.358 L811.964 688.358 L812.523 688.358 L813.082 688.358 L813.642 688.358 L814.201 688.358 L814.76 688.358 L815.319 688.358 L815.879 688.358 L816.438 688.358 L816.997 688.358 L817.556 688.358 L818.116 688.358 L818.675 688.358 L819.234 688.358 L819.793 688.358 L820.353 688.358 L820.912 688.358 L821.471 688.358 L822.03 688.358 L822.59 688.358 L823.149 688.358 L823.708 688.358 L824.267 688.358 L824.827 688.358 L825.386 688.358 L825.945 688.358 L826.504 688.358 L827.064 688.358 L827.623 688.358 L828.182 688.358 L828.741 688.358 L829.301 688.358 L829.86 688.358 L830.419 688.358 L830.978 688.358 L831.538 688.358 L832.097 688.358 L832.656 688.358 L833.215 688.358 L833.775 688.358 L834.334 688.358 L834.893 688.358 L835.452 688.358 L836.012 688.358 L836.571 688.358 L837.13 688.358 L837.689 688.358 L838.249 688.358 L838.808 688.358 L839.367 688.358 L839.926 688.358 L840.486 688.358 L841.045 688.358 L841.604 688.358 L842.163 688.358 L842.723 688.358 L843.282 688.358 L843.841 688.358 L844.4 688.358 L844.96 688.358 L845.519 688.358 L846.078 688.358 L846.637 688.358 L847.197 688.358 L847.756 688.358 L848.315 688.358 L848.874 688.358 L849.434 688.358 L849.993 688.358 L850.552 688.358 L851.111 688.358 L851.671 688.358 L852.23 688.358 L852.789 688.358 L853.348 688.358 L853.908 688.358 L854.467 688.358 L855.026 688.358 L855.585 688.358 L856.145 688.358 L856.704 688.358 L857.263 688.358 L857.822 688.358 L858.382 688.358 L858.941 688.358 L859.5 688.358 L860.059 688.358 L860.619 688.358 L861.178 688.358 L861.737 688.358 L862.296 688.358 L862.856 688.358 L863.415 688.358 L863.974 688.358 L864.533 688.358 L865.093 688.358 L865.652 688.358 L866.211 688.358 L866.77 688.358 L867.33 688.358 L867.889 688.358 L868.448 688.358 L869.007 688.358 L869.567 688.358 L870.126 688.358 L870.685 688.358 L871.244 688.358 L871.804 688.358 L872.363 688.358 L872.922 688.358 L873.481 688.358 L874.041 688.358 L874.6 688.358 L875.159 688.358 L875.718 688.358 L876.278 688.358 L876.837 688.358 L877.396 688.358 L877.955 688.358 L878.515 688.358 L879.074 688.358 L879.633 688.358 L880.192 688.358 L880.752 688.358 L881.311 688.358 L881.87 688.358 L882.429 688.358 L882.989 688.358 L883.548 688.358 L884.107 688.358 L884.666 688.358 L885.226 688.358 L885.785 688.358 L886.344 688.358 L886.903 688.358 L887.463 688.358 L888.022 688.358 L888.581 688.358 L889.14 688.358 L889.7 688.358 L890.259 688.358 L890.818 688.358 L891.377 688.358 L891.937 688.358 L892.496 688.358 L893.055 688.358 L893.614 688.358 L894.174 688.358 L894.733 688.358 L895.292 688.358 L895.851 688.358 L896.411 688.358 L896.97 688.358 L897.529 688.358 L898.088 688.358 L898.648 688.358 L899.207 688.358 L899.766 688.358 L900.325 688.358 L900.885 688.358 L901.444 688.358 L902.003 688.358 L902.562 688.358 L903.122 688.358 L903.681 688.358 L904.24 688.358 L904.799 688.358 L905.359 688.358 L905.918 688.358 L906.477 688.358 L907.036 688.358 L907.596 688.358 L908.155 688.358 L908.714 688.358 L909.273 688.358 L909.833 688.358 L910.392 688.358 L910.951 688.358 L911.51 688.358 L912.07 688.358 L912.629 688.358 L913.188 688.358 L913.747 688.358 L914.307 688.358 L914.866 688.358 L915.425 688.358 L915.984 688.358 L916.544 688.358 L917.103 688.358 L917.662 688.358 L918.221 688.358 L918.781 688.358 L919.34 688.358 L919.899 688.358 L920.458 688.358 L921.018 688.358 L921.577 688.358 L922.136 688.358 L922.695 688.358 L923.255 688.358 L923.814 688.358 L924.373 688.358 L924.932 688.358 L925.492 688.358 L926.051 688.358 L926.61 688.358 L927.169 688.358 L927.729 688.358 L928.288 688.358 L928.847 688.358 L929.406 688.358 L929.966 688.358 L930.525 688.358 L931.084 688.358 L931.644 688.358 L932.203 688.358 L932.762 688.358 L933.321 688.358 L933.881 688.358 L934.44 688.358 L934.999 688.358 L935.558 688.358 L936.118 688.358 L936.677 688.358 L937.236 688.358 L937.795 688.358 L938.355 688.358 L938.914 688.358 L939.473 688.358 L940.032 688.358 L940.592 688.358 L941.151 688.358 L941.71 688.358 L942.269 688.358 L942.829 688.358 L943.388 688.358 L943.947 688.358 L944.506 688.358 L945.066 688.358 L945.625 688.358 L946.184 688.358 L946.743 688.358 L947.303 688.358 L947.862 688.358 L948.421 688.358 L948.98 688.358 L949.54 688.358 L950.099 688.358 L950.658 688.358 L951.217 688.358 L951.777 688.358 L952.336 688.358 L952.895 688.358 L953.454 688.358 L954.014 688.358 L954.573 688.358 L955.132 688.358 L955.691 688.358 L956.251 688.358 L956.81 688.358 L957.369 688.358 L957.928 688.358 L958.488 688.358 L959.047 688.358 L959.606 688.358 L960.165 688.358 L960.725 688.358 L961.284 688.358 L961.843 688.358 L962.402 688.358 L962.962 688.358 L963.521 688.358 L964.08 688.358 L964.639 688.358 L965.199 688.358 L965.758 688.358 L966.317 688.358 L966.876 688.358 L967.436 688.358 L967.995 688.358 L968.554 688.358 L969.113 688.358 L969.673 688.358 L970.232 688.358 L970.791 688.358 L971.35 688.358 L971.91 688.358 L972.469 688.358 L973.028 688.358 L973.587 688.358 L974.147 688.358 L974.706 688.358 L975.265 688.358 L975.824 688.358 L976.384 688.358 L976.943 688.358 L977.502 688.358 L978.061 688.358 L978.621 688.358 L979.18 688.358 L979.739 688.358 L980.298 688.358 L980.858 688.358 L981.417 688.358 L981.976 688.358 L982.535 688.358 L983.095 688.358 L983.654 688.358 L984.213 688.358 L984.772 688.358 L985.332 688.358 L985.891 688.358 L986.45 688.358 L987.009 688.358 L987.569 688.358 L988.128 688.358 L988.687 688.358 L989.246 688.358 L989.806 688.358 L990.365 688.358 L990.924 688.358 L991.483 688.358 L992.043 688.358 L992.602 688.358 L993.161 688.358 L993.72 688.358 L994.28 688.358 L994.839 688.358 L995.398 688.358 L995.957 688.358 L996.517 688.358 L997.076 688.358 L997.635 688.358 L998.194 688.358 L998.754 688.358 L999.313 688.358 L999.872 688.358 L1000.43 688.358 L1000.99 688.358 L1001.55 688.358 L1002.11 688.358 L1002.67 688.358 L1003.23 688.358 L1003.79 688.358 L1004.35 688.358 L1004.91 688.358 L1005.46 688.358 L1006.02 688.358 L1006.58 688.358 L1007.14 688.358 L1007.7 688.358 L1008.26 688.358 L1008.82 688.358 L1009.38 688.358 L1009.94 688.358 L1010.5 688.358 L1011.06 688.358 L1011.62 688.358 L1012.18 688.358 L1012.73 688.358 L1013.29 688.358 L1013.85 688.358 L1014.41 688.358 L1014.97 688.358 L1015.53 688.358 L1016.09 688.358 L1016.65 688.358 L1017.21 688.358 L1017.77 688.358 L1018.33 688.358 L1018.89 688.358 L1019.45 688.358 L1020.01 688.358 L1020.56 688.358 L1021.12 688.358 L1021.68 688.358 L1022.24 688.358 L1022.8 688.358 L1023.36 688.358 L1023.92 688.358 L1024.48 688.358 L1025.04 688.358 L1025.6 688.358 L1026.16 688.358 L1026.72 688.358 L1027.28 688.358 L1027.83 688.358 L1028.39 688.358 L1028.95 688.358 L1029.51 688.358 L1030.07 688.358 L1030.63 688.358 L1031.19 688.358 L1031.75 688.358 L1032.31 688.358 L1032.87 688.358 L1033.43 688.358 L1033.99 688.358 L1034.55 688.358 L1035.1 688.358 L1035.66 688.358 L1036.22 688.358 L1036.78 688.358 L1037.34 688.358 L1037.9 688.358 L1038.46 688.358 L1039.02 688.358 L1039.58 688.358 L1040.14 688.358 L1040.7 688.358 L1041.26 688.358 L1041.82 688.358 L1042.38 688.358 L1042.93 688.358 L1043.49 688.358 L1044.05 688.358 L1044.61 688.358 L1045.17 688.358 L1045.73 688.358 L1046.29 688.358 L1046.85 688.358 L1047.41 688.358 L1047.97 688.358 L1048.53 688.358 L1049.09 688.358 L1049.65 688.358 L1050.2 688.358 L1050.76 688.358 L1051.32 688.358 L1051.88 688.358 L1052.44 688.358 L1053 688.358 L1053.56 688.358 L1054.12 688.358 L1054.68 688.358 L1055.24 688.358 L1055.8 688.358 L1056.36 688.358 L1056.92 688.358 L1057.48 688.358 L1058.03 688.358 L1058.59 688.358 L1059.15 688.358 L1059.71 688.358 L1060.27 688.358 L1060.83 688.358 L1061.39 688.358 L1061.95 688.358 L1062.51 688.358 L1063.07 688.358 L1063.63 688.358 L1064.19 688.358 L1064.75 688.358 L1065.3 688.358 L1065.86 688.358 L1066.42 688.358 L1066.98 688.358 L1067.54 688.358 L1068.1 688.358 L1068.66 688.358 L1069.22 688.358 L1069.78 688.358 L1070.34 688.358 L1070.9 688.358 L1071.46 688.358 L1072.02 688.358 L1072.57 688.358 L1073.13 688.358 L1073.69 688.358 L1074.25 688.358 L1074.81 688.358 L1075.37 688.358 L1075.93 688.358 L1076.49 688.358 L1077.05 688.358 L1077.61 688.358 L1078.17 688.358 L1078.73 688.358 L1079.29 688.358 L1079.85 688.358 L1080.4 688.358 L1080.96 688.358 L1081.52 688.358 L1082.08 688.358 L1082.64 688.358 L1083.2 688.358 L1083.76 688.358 L1084.32 688.358 L1084.88 688.358 L1085.44 688.358 L1086 688.358 L1086.56 688.358 L1087.12 688.358 L1087.67 688.358 L1088.23 688.358 L1088.79 688.358 L1089.35 688.358 L1089.91 688.358 L1090.47 688.358 L1091.03 688.358 L1091.59 688.358 L1092.15 688.358 L1092.71 688.358 L1093.27 688.358 L1093.83 688.358 L1094.39 688.358 L1094.94 688.358 L1095.5 688.358 L1096.06 688.358 L1096.62 688.358 L1097.18 688.358 L1097.74 688.358 L1098.3 688.358 L1098.86 688.358 L1099.42 688.358 L1099.98 688.358 L1100.54 688.358 L1101.1 688.358 L1101.66 688.358 L1102.22 688.358 L1102.77 688.358 L1103.33 688.358 L1103.89 688.358 L1104.45 688.358 L1105.01 688.358 L1105.57 688.358 L1106.13 688.358 L1106.69 688.358 L1107.25 688.358 L1107.81 688.358 L1108.37 688.358 L1108.93 688.358 L1109.49 688.358 L1110.04 688.358 L1110.6 688.358 L1111.16 688.358 L1111.72 688.358 L1112.28 688.358 L1112.84 688.358 L1113.4 688.358 L1113.96 688.358 L1114.52 688.358 L1115.08 688.358 L1115.64 688.358 L1116.2 688.358 L1116.76 688.358 L1117.31 688.358 L1117.87 688.358 L1118.43 688.358 L1118.99 688.358 L1119.55 688.358 L1120.11 688.358 L1120.67 688.358 L1121.23 688.358 L1121.79 688.358 L1122.35 688.358 L1122.91 688.358 L1123.47 688.358 L1124.03 688.358 L1124.59 688.358 L1125.14 688.358 L1125.7 688.358 L1126.26 688.358 L1126.82 688.358 L1127.38 688.358 L1127.94 688.358 L1128.5 688.358 L1129.06 688.358 L1129.62 688.358 L1130.18 688.358 L1130.74 688.358 L1131.3 688.358 L1131.86 688.358 L1132.41 688.358 L1132.97 688.358 L1133.53 688.358 L1134.09 688.358 L1134.65 688.358 L1135.21 688.358 L1135.77 688.358 L1136.33 688.358 L1136.89 688.358 L1137.45 688.358 L1138.01 688.358 L1138.57 688.358 L1139.13 688.358 L1139.68 688.358 L1140.24 688.358 L1140.8 688.358 L1141.36 688.358 L1141.92 688.358 L1142.48 688.358 L1143.04 688.358 L1143.6 688.358 L1144.16 688.358 L1144.72 688.358 L1145.28 688.358 L1145.84 688.358 L1146.4 688.358 L1146.96 688.358 L1147.51 688.358 L1148.07 688.358 L1148.63 688.358 L1149.19 688.358 L1149.75 688.358 L1150.31 688.358 L1150.87 688.358 L1151.43 688.358 L1151.99 688.358 L1152.55 688.358 L1153.11 688.358 L1153.67 688.358 L1154.23 688.358 L1154.78 688.358 L1155.34 688.358 L1155.9 688.358 L1156.46 688.358 L1157.02 688.358 L1157.58 688.358 L1158.14 688.358 L1158.7 688.358 L1159.26 688.358 L1159.82 688.358 L1160.38 688.358 L1160.94 688.358 L1161.5 688.358 L1162.05 688.358 L1162.61 688.358 L1163.17 688.358 L1163.73 688.358 L1164.29 688.358 L1164.85 688.358 L1165.41 688.358 L1165.97 688.358 L1166.53 688.358 L1167.09 688.358 L1167.65 688.358 L1168.21 688.358 L1168.77 688.358 L1169.33 688.358 L1169.88 688.358 L1170.44 688.358 L1171 688.358 L1171.56 688.358 L1172.12 688.358 L1172.68 688.358 L1173.24 688.358 L1173.8 688.358 L1174.36 688.358 L1174.92 688.358 L1175.48 688.358 L1176.04 688.358 L1176.6 688.358 L1177.15 688.358 L1177.71 688.358 L1178.27 688.358 L1178.83 688.358 L1179.39 688.358 L1179.95 688.358 L1180.51 688.358 L1181.07 688.358 L1181.63 688.358 L1182.19 688.358 L1182.75 688.358 L1183.31 688.358 L1183.87 688.358 L1184.43 688.358 L1184.98 688.358 L1185.54 688.358 L1186.1 688.358 L1186.66 688.358 L1187.22 688.358 L1187.78 688.358 L1188.34 688.358 L1188.9 688.358 L1189.46 688.358 L1190.02 688.358 L1190.58 688.358 L1191.14 688.358 L1191.7 688.358 L1192.25 688.358 L1192.81 688.358 L1193.37 688.358 L1193.93 688.358 L1194.49 688.358 L1195.05 688.358 L1195.61 688.358 L1196.17 688.358 L1196.73 688.358 L1197.29 688.358 L1197.85 688.358 L1198.41 688.358 L1198.97 688.358 L1199.52 688.358 L1200.08 688.358 L1200.64 688.358 L1201.2 688.358 L1201.76 688.358 L1202.32 688.358 L1202.88 688.358 L1203.44 688.358 L1204 688.358 L1204.56 688.358 L1205.12 688.358 L1205.68 688.358 L1206.24 688.358 L1206.8 688.358 L1207.35 688.358 L1207.91 688.358 L1208.47 688.358 L1209.03 688.358 L1209.59 688.358 L1210.15 688.358 L1210.71 688.358 L1211.27 688.358 L1211.83 688.358 L1212.39 688.358 L1212.95 688.358 L1213.51 688.358 L1214.07 688.358 L1214.62 688.358 L1215.18 688.358 L1215.74 688.358 L1216.3 688.358 L1216.86 688.358 L1217.42 688.358 L1217.98 688.358 L1218.54 688.358 L1219.1 688.358 L1219.66 688.358 L1220.22 688.358 L1220.78 688.358 L1221.34 688.358 L1221.89 688.358 L1222.45 688.358 L1223.01 688.358 L1223.57 688.358 L1224.13 688.358 L1224.69 688.358 L1225.25 688.358 L1225.81 688.358 L1226.37 688.358 L1226.93 688.358 L1227.49 688.358 L1228.05 688.358 L1228.61 688.358 L1229.17 688.358 L1229.72 688.358 L1230.28 688.358 L1230.84 688.358 L1231.4 688.358 L1231.96 688.358 L1232.52 688.358 L1233.08 688.358 L1233.64 688.358 L1234.2 688.358 L1234.76 688.358 L1235.32 688.358 L1235.88 688.358 L1236.44 688.358 L1236.99 688.358 L1237.55 688.358 L1238.11 688.358 L1238.67 688.358 L1239.23 688.358 L1239.79 688.358 L1240.35 688.358 L1240.91 688.358 L1241.47 688.358 L1242.03 688.358 L1242.59 688.358 L1243.15 688.358 L1243.71 688.358 L1244.26 688.358 L1244.82 688.358 L1245.38 688.358 L1245.94 688.358 L1246.5 688.358 L1247.06 688.358 L1247.62 688.358 L1248.18 688.358 L1248.74 688.358 L1249.3 688.358 L1249.86 688.358 L1250.42 688.358 L1250.98 688.358 L1251.54 688.358 L1252.09 688.358 L1252.65 688.358 L1253.21 688.358 L1253.77 688.358 L1254.33 688.358 L1254.89 688.358 L1255.45 688.358 L1256.01 688.358 L1256.57 688.358 L1257.13 688.358 L1257.69 688.358 L1258.25 688.358 L1258.81 688.358 L1259.36 688.358 L1259.92 688.358 L1260.48 688.358 L1261.04 688.358 L1261.6 688.358 L1262.16 688.358 L1262.72 688.358 L1263.28 688.358 L1263.84 688.358 L1264.4 688.358 L1264.96 688.358 L1265.52 688.358 L1266.08 688.358 L1266.63 688.358 L1267.19 688.358 L1267.75 688.358 L1268.31 688.358 L1268.87 688.358 L1269.43 688.358 L1269.99 688.358 L1270.55 688.358 L1271.11 688.358 L1271.67 688.358 L1272.23 688.358 L1272.79 688.358 L1273.35 688.358 L1273.91 688.358 L1274.46 688.358 L1275.02 688.358 L1275.58 688.358 L1276.14 688.358 L1276.7 688.358 L1277.26 688.358 L1277.82 688.358 L1278.38 688.358 L1278.94 688.358 L1279.5 688.358 L1280.06 688.358 L1280.62 688.358 L1281.18 688.358 L1281.73 688.358 L1282.29 688.358 L1282.85 688.358 L1283.41 688.358 L1283.97 688.358 L1284.53 688.358 L1285.09 688.358 L1285.65 688.358 L1286.21 688.358 L1286.77 688.358 L1287.33 688.358 L1287.89 688.358 L1288.45 688.358 L1289 688.358 L1289.56 688.358 L1290.12 688.358 L1290.68 688.358 L1291.24 688.358 L1291.8 688.358 L1292.36 688.358 L1292.92 688.358 L1293.48 688.358 L1294.04 688.358 L1294.6 688.358 L1295.16 688.358 L1295.72 688.358 L1296.28 688.358 L1296.83 688.358 L1297.39 688.358 L1297.95 688.358 L1298.51 688.358 L1299.07 688.358 L1299.63 688.358 L1300.19 688.358 L1300.75 688.358 L1301.31 688.358 L1301.87 688.358 L1302.43 688.358 L1302.99 688.358 L1303.55 688.358 L1304.1 688.358 L1304.66 688.358 L1305.22 688.358 L1305.78 688.358 L1306.34 688.358 L1306.9 688.358 L1307.46 688.358 L1308.02 688.358 L1308.58 688.358 L1309.14 688.358 L1309.7 688.358 L1310.26 688.358 L1310.82 688.358 L1311.38 688.358 L1311.93 688.358 L1312.49 688.358 L1313.05 688.358 L1313.61 688.358 L1314.17 688.358 L1314.73 688.358 L1315.29 688.358 L1315.85 688.358 L1316.41 688.358 L1316.97 688.358 L1317.53 688.358 L1318.09 688.358 L1318.65 688.358 L1319.2 688.358 L1319.76 688.358 L1320.32 688.358 L1320.88 688.358 L1321.44 688.358 L1322 688.358 L1322.56 688.358 L1323.12 688.358 L1323.68 688.358 L1324.24 688.358 L1324.8 688.358 L1325.36 688.358 L1325.92 688.358 L1326.47 688.358 L1327.03 688.358 L1327.59 688.358 L1328.15 688.358 L1328.71 688.358 L1329.27 688.358 L1329.83 688.358 L1330.39 688.358 L1330.95 688.358 L1331.51 688.358 L1332.07 688.358 L1332.63 688.358 L1333.19 688.358 L1333.75 688.358 L1334.3 688.358 L1334.86 688.358 L1335.42 688.358 L1335.98 688.358 L1336.54 688.358 L1337.1 688.358 L1337.66 688.358 L1338.22 688.358 L1338.78 688.358 L1339.34 688.358 L1339.9 688.358 L1340.46 688.358 L1341.02 688.358 L1341.57 688.358 L1342.13 688.358 L1342.69 688.358 L1343.25 688.358 L1343.81 688.358 L1344.37 688.358 L1344.93 688.358 L1345.49 688.358 L1346.05 688.358 L1346.61 688.358 L1347.17 688.358 L1347.73 688.358 L1348.29 688.358 L1348.84 688.358 L1349.4 688.358 L1349.96 688.358 L1350.52 688.358 L1351.08 688.358 L1351.64 688.358 L1352.2 688.358 L1352.76 688.358 L1353.32 688.358 L1353.88 688.358 L1354.44 688.358 L1355 688.358 L1355.56 688.358 L1356.12 688.358 L1356.67 688.358 L1357.23 688.358 L1357.79 688.358 L1358.35 688.358 L1358.91 688.358 L1359.47 688.358 L1360.03 688.358 L1360.59 688.358 L1361.15 688.358 L1361.71 688.358 L1362.27 688.358 L1362.83 688.358 L1363.39 688.358 L1363.94 688.358 L1364.5 688.358 L1365.06 688.358 L1365.62 688.358 L1366.18 688.358 L1366.74 688.358 L1367.3 688.358 L1367.86 688.358 L1368.42 688.358 L1368.98 688.358 L1369.54 688.358 L1370.1 688.358 L1370.66 688.358 L1371.21 688.358 L1371.77 688.358 L1372.33 688.358 L1372.89 688.358 L1373.45 688.358 L1374.01 688.358 L1374.57 688.358 L1375.13 688.358 L1375.69 688.358 L1376.25 688.358 L1376.81 688.358 L1377.37 688.358 L1377.93 688.358 L1378.49 688.358 L1379.04 688.358 L1379.6 688.358 L1380.16 688.358 L1380.72 688.358 L1381.28 688.358 L1381.84 688.358 L1382.4 688.358 L1382.96 688.358 L1383.52 688.358 L1384.08 688.358 L1384.64 688.358 L1385.2 688.358 L1385.76 688.358 L1386.31 688.358 L1386.87 688.358 L1387.43 688.358 L1387.99 688.358 L1388.55 688.358 L1389.11 688.358 L1389.67 688.358 L1390.23 688.358 L1390.79 688.358 L1391.35 688.358 L1391.91 688.358 L1392.47 688.358 L1393.03 688.358 L1393.58 688.358 L1394.14 688.358 L1394.7 688.358 L1395.26 688.358 L1395.82 688.358 L1396.38 688.358 L1396.94 688.358 L1397.5 688.358 L1398.06 688.358 L1398.62 688.358 L1399.18 688.358 L1399.74 688.358 L1400.3 688.358 L1400.86 688.358 L1401.41 688.358 L1401.97 688.358 L1402.53 688.358 L1403.09 688.358 L1403.65 688.358 L1404.21 688.358 L1404.77 688.358 L1405.33 688.358 L1405.89 688.358 L1406.45 688.358 L1407.01 688.358 L1407.57 688.358 L1408.13 688.358 L1408.68 688.358 L1409.24 688.358 L1409.8 688.358 L1410.36 688.358 L1410.92 688.358 L1411.48 688.358 L1412.04 688.358 L1412.6 688.358 L1413.16 688.358 L1413.72 688.358 L1414.28 688.358 L1414.84 688.358 L1415.4 688.358 L1415.95 688.358 L1416.51 688.358 L1417.07 688.358 L1417.63 688.358 L1418.19 688.358 L1418.75 688.358 L1419.31 688.358 L1419.87 688.358 L1420.43 688.358 L1420.99 688.358 L1421.55 688.358 L1422.11 688.358 L1422.67 688.358 L1423.23 688.358 L1423.78 688.358 L1424.34 688.358 L1424.9 688.358 L1425.46 688.358 L1426.02 688.358 L1426.58 688.358 L1427.14 688.358 L1427.7 688.358 L1428.26 688.358 L1428.82 688.358 L1429.38 688.358 L1429.94 688.358 L1430.5 688.358 L1431.05 688.358 L1431.61 688.358 L1432.17 688.358 L1432.73 688.358 L1433.29 688.358 L1433.85 688.358 L1434.41 688.358 L1434.97 688.358 L1435.53 688.358 L1436.09 688.358 L1436.65 688.358 L1437.21 688.358 L1437.77 688.358 L1438.33 688.358 L1438.88 688.358 L1439.44 688.358 L1440 688.358 L1440.56 688.358 L1441.12 688.358 L1441.68 688.358 L1442.24 688.358 L1442.8 688.358 L1443.36 688.358 L1443.92 688.358 L1444.48 688.358 L1445.04 688.358 L1445.6 688.358 L1446.15 688.358 L1446.71 688.358 L1447.27 688.358 L1447.83 688.358 L1448.39 688.358 L1448.95 688.358 L1449.51 688.358 L1450.07 688.358 L1450.63 688.358 L1451.19 688.358 L1451.75 688.358 L1452.31 688.358 L1452.87 688.358 L1453.42 688.358 L1453.98 688.358 L1454.54 688.358 L1455.1 688.358 L1455.66 688.358 L1456.22 688.358 L1456.78 688.358 L1457.34 688.358 L1457.9 688.358 L1458.46 688.358 L1459.02 688.358 L1459.58 688.358 L1460.14 688.358 L1460.7 688.358 L1461.25 688.358 L1461.81 688.358 L1462.37 688.358 L1462.93 688.358 L1463.49 688.358 L1464.05 688.358 L1464.61 688.358 L1465.17 688.358 L1465.73 688.358 L1466.29 688.358 L1466.85 688.358 L1467.41 688.358 L1467.97 688.358 L1468.52 688.358 L1469.08 688.358 L1469.64 688.358 L1470.2 688.358 L1470.76 688.358 L1471.32 688.358 L1471.88 688.358 L1472.44 688.358 L1473 688.358 L1473.56 688.358 L1474.12 688.358 L1474.68 688.358 L1475.24 688.358 L1475.79 688.358 L1476.35 688.358 L1476.91 688.358 L1477.47 688.358 L1478.03 688.358 L1478.59 688.358 L1479.15 688.358 L1479.71 688.358 L1480.27 688.358 L1480.83 688.358 L1481.39 688.358 L1481.95 688.358 L1482.51 688.358 L1483.07 688.358 L1483.62 688.358 L1484.18 688.358 L1484.74 688.358 L1485.3 688.358 L1485.86 688.358 L1486.42 688.358 L1486.98 688.358 L1487.54 688.358 L1488.1 688.358 L1488.66 688.358 L1489.22 688.358 L1489.78 688.358 L1490.34 688.358 L1490.89 688.358 L1491.45 688.358 L1492.01 688.358 L1492.57 688.358 L1493.13 688.358 L1493.69 688.358 L1494.25 688.358 L1494.81 688.358 L1495.37 688.358 L1495.93 688.358 L1496.49 688.358 L1497.05 688.358 L1497.61 688.358 L1498.16 688.358 L1498.72 688.358 L1499.28 688.358 L1499.84 688.358 L1500.4 688.358 L1500.96 688.358 L1501.52 688.358 L1502.08 688.358 L1502.64 688.358 L1503.2 688.358 L1503.76 688.358 L1504.32 688.358 L1504.88 688.358 L1505.44 688.358 L1505.99 688.358 L1506.55 688.358 L1507.11 688.358 L1507.67 688.358 L1508.23 688.358 L1508.79 688.358 L1509.35 688.358 L1509.91 688.358 L1510.47 688.358 L1511.03 688.358 L1511.59 688.358 L1512.15 688.358 L1512.71 688.358 L1513.26 688.358 L1513.82 688.358 L1514.38 688.358 L1514.94 688.358 L1515.5 688.358 L1516.06 688.358 L1516.62 688.358 L1517.18 688.358 L1517.74 688.358 L1518.3 688.358 L1518.86 688.358 L1519.42 688.358 L1519.98 688.358 L1520.53 688.358 L1521.09 688.358 L1521.65 688.358 L1522.21 688.358 L1522.77 688.358 L1523.33 688.358 L1523.89 688.358 L1524.45 688.358 L1525.01 688.358 L1525.57 688.358 L1526.13 688.358 L1526.69 688.358 L1527.25 688.358 L1527.81 688.358 L1528.36 688.358 L1528.92 688.358 L1529.48 688.358 L1530.04 688.358 L1530.6 688.358 L1531.16 688.358 L1531.72 688.358 L1532.28 688.358 L1532.84 688.358 L1533.4 688.358 L1533.96 688.358 L1534.52 688.358 L1535.08 688.358 L1535.63 688.358 L1536.19 688.358 L1536.75 688.358 L1537.31 688.358 L1537.87 688.358 L1538.43 688.358 L1538.99 688.358 L1539.55 688.358 L1540.11 688.358 L1540.67 688.358 L1541.23 688.358 L1541.79 688.358 L1542.35 688.358 L1542.9 688.358 L1543.46 688.358 L1544.02 688.358 L1544.58 688.358 L1545.14 688.358 L1545.7 688.358 L1546.26 688.358 L1546.82 688.358 L1547.38 688.358 L1547.94 688.358 L1548.5 688.358 L1549.06 688.358 L1549.62 688.358 L1550.18 688.358 L1550.73 688.358 L1551.29 688.358 L1551.85 688.358 L1552.41 688.358 L1552.97 688.358 L1553.53 688.358 L1554.09 688.358 L1554.65 688.358 L1555.21 688.358 L1555.77 688.358 L1556.33 688.358 L1556.89 688.358 L1557.45 688.358 L1558 688.358 L1558.56 688.358 L1559.12 688.358 L1559.68 688.358 L1560.24 688.358 L1560.8 688.358 L1561.36 688.358 L1561.92 688.358 L1562.48 688.358 L1563.04 688.358 L1563.6 688.358 L1564.16 688.358 L1564.72 688.358 L1565.28 688.358 L1565.83 688.358 L1566.39 688.358 L1566.95 688.358 L1567.51 688.358 L1568.07 688.358 L1568.63 688.358 L1569.19 688.358 L1569.75 688.358 L1570.31 688.358 L1570.87 688.358 L1571.43 688.358 L1571.99 688.358 L1572.55 688.358 L1573.1 688.358 L1573.66 688.358 L1574.22 688.358 L1574.78 688.358 L1575.34 688.358 L1575.9 688.358 L1576.46 688.358 L1577.02 688.358 L1577.58 688.358 L1578.14 688.358 L1578.7 688.358 L1579.26 688.358 L1579.82 688.358 L1580.37 688.358 L1580.93 688.358 L1581.49 688.358 L1582.05 688.358 L1582.61 688.358 L1583.17 688.358 L1583.73 688.358 L1584.29 688.358 L1584.85 688.358 L1585.41 688.358 L1585.97 688.358 L1586.53 688.358 L1587.09 688.358 L1587.65 688.358 L1588.2 688.358 L1588.76 688.358 L1589.32 688.358 L1589.88 688.358 L1590.44 688.358 L1591 688.358 L1591.56 688.358 L1592.12 688.358 L1592.68 688.358 L1593.24 688.358 L1593.8 688.358 L1594.36 688.358 L1594.92 688.358 L1595.47 688.358 L1596.03 688.358 L1596.59 688.358 L1597.15 688.358 L1597.71 688.358 L1598.27 688.358 L1598.83 688.358 L1599.39 688.358 L1599.95 688.358 L1600.51 688.358 L1601.07 688.358 L1601.63 688.358 L1602.19 688.358 L1602.74 688.358 L1603.3 688.358 L1603.86 688.358 L1604.42 688.358 L1604.98 688.358 L1605.54 688.358 L1606.1 688.358 L1606.66 688.358 L1607.22 688.358 L1607.78 688.358 L1608.34 688.358 L1608.9 688.358 L1609.46 688.358 L1610.02 688.358 L1610.57 688.358 L1611.13 688.358 L1611.69 688.358 L1612.25 688.358 L1612.81 688.358 L1613.37 688.358 L1613.93 688.358 L1614.49 688.358 L1615.05 688.358 L1615.61 688.358 L1616.17 688.358 L1616.73 688.358 L1617.29 688.358 L1617.84 688.358 L1618.4 688.358 L1618.96 688.358 L1619.52 688.358 L1620.08 688.358 L1620.64 688.358 L1621.2 688.358 L1621.76 688.358 L1622.32 688.358 L1622.88 688.358 L1623.44 688.358 L1624 688.358 L1624.56 688.358 L1625.11 688.358 L1625.67 688.358 L1626.23 688.358 L1626.79 688.358 L1627.35 688.358 L1627.91 688.358 L1628.47 688.358 L1629.03 688.358 L1629.59 688.358 L1630.15 688.358 L1630.71 688.358 L1631.27 688.358 L1631.83 688.358 L1632.39 688.358 L1632.94 688.358 L1633.5 688.358 L1634.06 688.358 L1634.62 688.358 L1635.18 688.358 L1635.74 688.358 L1636.3 688.358 L1636.86 688.358 L1637.42 688.358 L1637.98 688.358 L1638.54 688.358 L1639.1 688.358 L1639.66 688.358 L1640.21 688.358 L1640.77 688.358 L1641.33 688.358 L1641.89 688.358 L1642.45 688.358 L1643.01 688.358 L1643.57 688.358 L1644.13 688.358 L1644.69 688.358 L1645.25 688.358 L1645.81 688.358 L1646.37 688.358 L1646.93 688.358 L1647.48 688.358 L1648.04 688.358 L1648.6 688.358 L1649.16 688.358 L1649.72 688.358 L1650.28 688.358 L1650.84 688.358 L1651.4 688.358 L1651.96 688.358 L1652.52 688.358 L1653.08 688.358 L1653.64 688.358 L1654.2 688.358 L1654.76 688.358 L1655.31 688.358 L1655.87 688.358 L1656.43 688.358 L1656.99 688.358 L1657.55 688.358 L1658.11 688.358 L1658.67 688.358 L1659.23 688.358 L1659.79 688.358 L1660.35 688.358 L1660.91 688.358 L1661.47 688.358 L1662.03 688.358 L1662.58 688.358 L1663.14 688.358 L1663.7 688.358 L1664.26 688.358 L1664.82 688.358 L1665.38 688.358 L1665.94 688.358 L1666.5 688.358 L1667.06 688.358 L1667.62 688.358 L1668.18 688.358 L1668.74 688.358 L1669.3 688.358 L1669.85 688.358 L1670.41 688.358 L1670.97 688.358 L1671.53 688.358 L1672.09 688.358 L1672.65 688.358 L1673.21 688.358 L1673.77 688.358 L1674.33 688.358 L1674.89 688.358 L1675.45 688.358 L1676.01 688.358 L1676.57 688.358 L1677.13 688.358 L1677.68 688.358 L1678.24 688.358 L1678.8 688.358 L1679.36 688.358 L1679.92 688.358 L1680.48 688.358 L1681.04 688.358 L1681.6 688.358 L1682.16 688.358 L1682.72 688.358 L1683.28 688.358 L1683.84 688.358 L1684.4 688.358 L1684.95 688.358 L1685.51 688.358 L1686.07 688.358 L1686.63 688.358 L1687.19 688.358 L1687.75 688.358 L1688.31 688.358 L1688.87 688.358 L1689.43 688.358 L1689.99 688.358 L1690.55 688.358 L1691.11 688.358 L1691.67 688.358 L1692.23 688.358 L1692.78 688.358 L1693.34 688.358 L1693.9 688.358 L1694.46 688.358 L1695.02 688.358 L1695.58 688.358 L1696.14 688.358 L1696.7 688.358 L1697.26 688.358 L1697.82 688.358 L1698.38 688.358 L1698.94 688.358 L1699.5 688.358 L1700.05 688.358 L1700.61 688.358 L1701.17 688.358 L1701.73 688.358 L1702.29 688.358 L1702.85 688.358 L1703.41 688.358 L1703.97 688.358 L1704.53 688.358 L1705.09 688.358 L1705.65 688.358 L1706.21 688.358 L1706.77 688.358 L1707.32 688.358 L1707.88 688.358 L1708.44 688.358 L1709 688.358 L1709.56 688.358 L1710.12 688.358 L1710.68 688.358 L1711.24 688.358 L1711.8 688.358 L1712.36 688.358 L1712.92 688.358 L1713.48 688.358 L1714.04 688.358 L1714.6 688.358 L1715.15 688.358 L1715.71 688.358 L1716.27 688.358 L1716.83 688.358 L1717.39 688.358 L1717.95 688.358 L1718.51 688.358 L1719.07 688.358 L1719.63 688.358 L1720.19 688.358 L1720.75 688.358 L1721.31 688.358 L1721.87 688.358 L1722.42 688.358 L1722.98 688.358 L1723.54 688.358 L1724.1 688.358 L1724.66 688.358 L1725.22 688.358 L1725.78 688.358 L1726.34 688.358 L1726.9 688.358 L1727.46 688.358 L1728.02 688.358 L1728.58 688.358 L1729.14 688.358 L1729.69 688.358 L1730.25 688.358 L1730.81 688.358 L1731.37 688.358 L1731.93 688.358 L1732.49 688.358 L1733.05 688.358 L1733.61 688.358 L1734.17 688.358 L1734.73 688.358 L1735.29 688.358 L1735.85 688.358 L1736.41 688.358 L1736.97 688.358 L1737.52 688.358 L1738.08 688.358 L1738.64 688.358 L1739.2 688.358 L1739.76 688.358 L1740.32 688.358 L1740.88 688.358 L1741.44 688.358 L1742 688.358 L1742.56 688.358 L1743.12 688.358 L1743.68 688.358 L1744.24 688.358 L1744.79 688.358 L1745.35 688.358 L1745.91 688.358 L1746.47 688.358 L1747.03 688.358 L1747.59 688.358 L1748.15 688.358 L1748.71 688.358 L1749.27 688.358 L1749.83 688.358 L1750.39 688.358 L1750.95 688.358 L1751.51 688.358 L1752.06 688.358 L1752.62 688.358 L1753.18 688.358 L1753.74 688.358 L1754.3 688.358 L1754.86 688.358 L1755.42 688.358 L1755.98 688.358 L1756.54 688.358 L1757.1 688.358 L1757.66 688.358 L1758.22 688.358 L1758.78 688.358 L1759.34 688.358 L1759.89 688.358 L1760.45 688.358 L1761.01 688.358 L1761.57 688.358 L1762.13 688.358 L1762.69 688.358 L1763.25 688.358 L1763.81 688.358 L1764.37 688.358 L1764.93 688.358 L1765.49 688.358 L1766.05 688.358 L1766.61 688.358 L1767.16 688.358 L1767.72 688.358 L1768.28 688.358 L1768.84 688.358 L1769.4 688.358 L1769.96 688.358 L1770.52 688.358 L1771.08 688.358 L1771.64 688.358 L1772.2 688.358 L1772.76 688.358 L1773.32 688.358 L1773.88 688.358 L1774.43 688.358 L1774.99 688.358 L1775.55 688.358 L1776.11 688.358 L1776.67 688.358 L1777.23 688.358 L1777.79 688.358 L1778.35 688.358 L1778.91 688.358 L1779.47 688.358 L1780.03 688.358 L1780.59 688.358 L1781.15 688.358 L1781.71 688.358 L1782.26 688.358 L1782.82 688.358 L1783.38 688.358 L1783.94 688.358 L1784.5 688.358 L1785.06 688.358 L1785.62 688.358 L1786.18 688.358 L1786.74 688.358 L1787.3 688.358 L1787.86 688.358 L1788.42 688.358 L1788.98 688.358 L1789.53 688.358 L1790.09 688.358 L1790.65 688.358 L1791.21 688.358 L1791.77 688.358 L1792.33 688.358 L1792.89 688.358 L1793.45 688.358 L1794.01 688.358 L1794.57 688.358 L1795.13 688.358 L1795.69 688.358 L1796.25 688.358 L1796.8 688.358 L1797.36 688.358 L1797.92 688.358 L1798.48 688.358 L1799.04 688.358 L1799.6 688.358 L1800.16 688.358 L1800.72 688.358 L1801.28 688.358 L1801.84 688.358 L1802.4 688.358 L1802.96 688.358 L1803.52 688.358 L1804.08 688.358 L1804.63 688.358 L1805.19 688.358 L1805.75 688.358 L1806.31 688.358 L1806.87 688.358 L1807.43 688.358 L1807.99 688.358 L1808.55 688.358 L1809.11 688.358 L1809.67 688.358 L1810.23 688.358 L1810.79 688.358 L1811.35 688.358 L1811.9 688.358 L1812.46 688.358 L1813.02 688.358 L1813.58 688.358 L1814.14 688.358 L1814.7 688.358 L1815.26 688.358 L1815.82 688.358 L1816.38 688.358 L1816.94 688.358 L1817.5 688.358 L1818.06 688.358 L1818.62 688.358 L1819.18 688.358 L1819.73 688.358 L1820.29 688.358 L1820.85 688.358 L1821.41 688.358 L1821.97 688.358 L1822.53 688.358 L1823.09 688.358 L1823.65 688.358 L1824.21 688.358 L1824.77 688.358 L1825.33 688.358 L1825.89 688.358 L1826.45 688.358 L1827 688.358 L1827.56 688.358 L1828.12 688.358 L1828.68 688.358 L1829.24 688.358 L1829.8 688.358 L1830.36 688.358 L1830.92 688.358 L1831.48 688.358 L1832.04 688.358 L1832.6 688.358 L1833.16 688.358 L1833.72 688.358 L1834.27 688.358 L1834.83 688.358 L1835.39 688.358 L1835.95 688.358 L1836.51 688.358 L1837.07 688.358 L1837.63 688.358 L1838.19 688.358 L1838.19 680.176 L1837.63 680.176 L1837.07 680.176 L1836.51 680.176 L1835.95 680.176 L1835.39 680.176 L1834.83 680.176 L1834.27 680.176 L1833.72 680.176 L1833.16 680.176 L1832.6 680.176 L1832.04 680.176 L1831.48 680.176 L1830.92 680.176 L1830.36 680.176 L1829.8 680.176 L1829.24 680.176 L1828.68 680.176 L1828.12 680.176 L1827.56 680.176 L1827 680.176 L1826.45 680.176 L1825.89 680.176 L1825.33 680.176 L1824.77 680.176 L1824.21 680.176 L1823.65 680.176 L1823.09 680.176 L1822.53 680.176 L1821.97 680.176 L1821.41 680.176 L1820.85 680.176 L1820.29 680.176 L1819.73 680.176 L1819.18 680.176 L1818.62 680.176 L1818.06 680.176 L1817.5 680.176 L1816.94 680.176 L1816.38 680.176 L1815.82 680.176 L1815.26 680.176 L1814.7 680.176 L1814.14 680.176 L1813.58 680.176 L1813.02 680.176 L1812.46 680.176 L1811.9 680.176 L1811.35 680.176 L1810.79 680.176 L1810.23 680.176 L1809.67 680.176 L1809.11 680.176 L1808.55 680.176 L1807.99 680.176 L1807.43 680.176 L1806.87 680.176 L1806.31 680.176 L1805.75 680.176 L1805.19 680.176 L1804.63 680.176 L1804.08 680.176 L1803.52 680.176 L1802.96 680.176 L1802.4 680.176 L1801.84 680.176 L1801.28 680.176 L1800.72 680.176 L1800.16 680.176 L1799.6 680.176 L1799.04 680.176 L1798.48 680.176 L1797.92 680.176 L1797.36 680.176 L1796.8 680.176 L1796.25 680.176 L1795.69 680.176 L1795.13 680.176 L1794.57 680.176 L1794.01 680.176 L1793.45 680.176 L1792.89 680.176 L1792.33 680.176 L1791.77 680.176 L1791.21 680.176 L1790.65 680.176 L1790.09 680.176 L1789.53 680.176 L1788.98 680.176 L1788.42 680.176 L1787.86 680.176 L1787.3 680.176 L1786.74 680.176 L1786.18 680.176 L1785.62 680.176 L1785.06 680.176 L1784.5 680.176 L1783.94 680.176 L1783.38 680.176 L1782.82 680.176 L1782.26 680.176 L1781.71 680.176 L1781.15 680.176 L1780.59 680.176 L1780.03 680.176 L1779.47 680.176 L1778.91 680.176 L1778.35 680.176 L1777.79 680.176 L1777.23 680.176 L1776.67 680.176 L1776.11 680.176 L1775.55 680.176 L1774.99 680.176 L1774.43 680.176 L1773.88 680.176 L1773.32 680.176 L1772.76 680.176 L1772.2 680.176 L1771.64 680.176 L1771.08 680.176 L1770.52 680.176 L1769.96 680.176 L1769.4 680.176 L1768.84 680.176 L1768.28 680.176 L1767.72 680.176 L1767.16 680.176 L1766.61 680.176 L1766.05 680.176 L1765.49 680.176 L1764.93 680.176 L1764.37 680.176 L1763.81 680.176 L1763.25 680.176 L1762.69 680.176 L1762.13 680.176 L1761.57 680.176 L1761.01 680.176 L1760.45 680.176 L1759.89 680.176 L1759.34 680.176 L1758.78 680.176 L1758.22 680.176 L1757.66 680.176 L1757.1 680.176 L1756.54 680.176 L1755.98 680.176 L1755.42 680.176 L1754.86 680.176 L1754.3 680.176 L1753.74 680.176 L1753.18 680.176 L1752.62 680.176 L1752.06 680.176 L1751.51 680.176 L1750.95 680.176 L1750.39 680.176 L1749.83 680.176 L1749.27 680.176 L1748.71 680.176 L1748.15 680.176 L1747.59 680.176 L1747.03 680.176 L1746.47 680.176 L1745.91 680.176 L1745.35 680.176 L1744.79 680.176 L1744.24 680.176 L1743.68 680.176 L1743.12 680.176 L1742.56 680.176 L1742 680.176 L1741.44 680.176 L1740.88 680.176 L1740.32 680.176 L1739.76 680.176 L1739.2 680.176 L1738.64 680.176 L1738.08 680.176 L1737.52 680.176 L1736.97 680.176 L1736.41 680.176 L1735.85 680.176 L1735.29 680.176 L1734.73 680.176 L1734.17 680.176 L1733.61 680.176 L1733.05 680.176 L1732.49 680.176 L1731.93 680.176 L1731.37 680.176 L1730.81 680.176 L1730.25 680.176 L1729.69 680.176 L1729.14 680.176 L1728.58 680.176 L1728.02 680.176 L1727.46 680.176 L1726.9 680.176 L1726.34 680.176 L1725.78 680.176 L1725.22 680.176 L1724.66 680.176 L1724.1 680.176 L1723.54 680.176 L1722.98 680.176 L1722.42 680.176 L1721.87 680.176 L1721.31 680.176 L1720.75 680.176 L1720.19 680.176 L1719.63 680.176 L1719.07 680.176 L1718.51 680.176 L1717.95 680.176 L1717.39 680.176 L1716.83 680.176 L1716.27 680.176 L1715.71 680.176 L1715.15 680.176 L1714.6 680.176 L1714.04 680.176 L1713.48 680.176 L1712.92 680.176 L1712.36 680.176 L1711.8 680.176 L1711.24 680.176 L1710.68 680.176 L1710.12 680.176 L1709.56 680.176 L1709 680.176 L1708.44 680.176 L1707.88 680.176 L1707.32 680.176 L1706.77 680.176 L1706.21 680.176 L1705.65 680.176 L1705.09 680.176 L1704.53 680.176 L1703.97 680.176 L1703.41 680.176 L1702.85 680.176 L1702.29 680.176 L1701.73 680.176 L1701.17 680.176 L1700.61 680.176 L1700.05 680.176 L1699.5 680.176 L1698.94 680.176 L1698.38 680.176 L1697.82 680.176 L1697.26 680.176 L1696.7 680.176 L1696.14 680.176 L1695.58 680.176 L1695.02 680.176 L1694.46 680.176 L1693.9 680.176 L1693.34 680.176 L1692.78 680.176 L1692.23 680.176 L1691.67 680.176 L1691.11 680.176 L1690.55 680.176 L1689.99 680.176 L1689.43 680.176 L1688.87 680.176 L1688.31 680.176 L1687.75 680.176 L1687.19 680.176 L1686.63 680.176 L1686.07 680.176 L1685.51 680.176 L1684.95 680.176 L1684.4 680.176 L1683.84 680.176 L1683.28 680.176 L1682.72 680.176 L1682.16 680.176 L1681.6 680.176 L1681.04 680.176 L1680.48 680.176 L1679.92 680.176 L1679.36 680.176 L1678.8 680.176 L1678.24 680.176 L1677.68 680.176 L1677.13 680.176 L1676.57 680.176 L1676.01 680.176 L1675.45 680.176 L1674.89 680.176 L1674.33 680.176 L1673.77 680.176 L1673.21 680.176 L1672.65 680.176 L1672.09 680.176 L1671.53 680.176 L1670.97 680.176 L1670.41 680.176 L1669.85 680.176 L1669.3 680.176 L1668.74 680.176 L1668.18 680.176 L1667.62 680.176 L1667.06 680.176 L1666.5 680.176 L1665.94 680.176 L1665.38 680.176 L1664.82 680.176 L1664.26 680.176 L1663.7 680.176 L1663.14 680.176 L1662.58 680.176 L1662.03 680.176 L1661.47 680.176 L1660.91 680.176 L1660.35 680.176 L1659.79 680.176 L1659.23 680.176 L1658.67 680.176 L1658.11 680.176 L1657.55 680.176 L1656.99 680.176 L1656.43 680.176 L1655.87 680.176 L1655.31 680.176 L1654.76 680.176 L1654.2 680.176 L1653.64 680.176 L1653.08 680.176 L1652.52 680.176 L1651.96 680.176 L1651.4 680.176 L1650.84 680.176 L1650.28 680.176 L1649.72 680.176 L1649.16 680.176 L1648.6 680.176 L1648.04 680.176 L1647.48 680.176 L1646.93 680.176 L1646.37 680.176 L1645.81 680.176 L1645.25 680.176 L1644.69 680.176 L1644.13 680.176 L1643.57 680.176 L1643.01 680.176 L1642.45 680.176 L1641.89 680.176 L1641.33 680.176 L1640.77 680.176 L1640.21 680.176 L1639.66 680.176 L1639.1 680.176 L1638.54 680.176 L1637.98 680.176 L1637.42 680.176 L1636.86 680.176 L1636.3 680.176 L1635.74 680.176 L1635.18 680.176 L1634.62 680.176 L1634.06 680.176 L1633.5 680.176 L1632.94 680.176 L1632.39 680.176 L1631.83 680.176 L1631.27 680.176 L1630.71 680.176 L1630.15 680.176 L1629.59 680.176 L1629.03 680.176 L1628.47 680.176 L1627.91 680.176 L1627.35 680.176 L1626.79 680.176 L1626.23 680.176 L1625.67 680.176 L1625.11 680.176 L1624.56 680.176 L1624 680.176 L1623.44 680.176 L1622.88 680.176 L1622.32 680.176 L1621.76 680.176 L1621.2 680.176 L1620.64 680.176 L1620.08 680.176 L1619.52 680.176 L1618.96 680.176 L1618.4 680.176 L1617.84 680.176 L1617.29 680.176 L1616.73 680.176 L1616.17 680.176 L1615.61 680.176 L1615.05 680.176 L1614.49 680.176 L1613.93 680.176 L1613.37 680.176 L1612.81 680.176 L1612.25 680.176 L1611.69 680.176 L1611.13 680.176 L1610.57 680.176 L1610.02 680.176 L1609.46 680.176 L1608.9 680.176 L1608.34 680.176 L1607.78 680.176 L1607.22 680.176 L1606.66 680.176 L1606.1 680.176 L1605.54 680.176 L1604.98 680.176 L1604.42 680.176 L1603.86 680.176 L1603.3 680.176 L1602.74 680.176 L1602.19 680.176 L1601.63 680.176 L1601.07 680.176 L1600.51 680.176 L1599.95 680.176 L1599.39 680.176 L1598.83 680.176 L1598.27 680.176 L1597.71 680.176 L1597.15 680.176 L1596.59 680.176 L1596.03 680.176 L1595.47 680.176 L1594.92 680.176 L1594.36 680.176 L1593.8 680.176 L1593.24 680.176 L1592.68 680.176 L1592.12 680.176 L1591.56 680.176 L1591 680.176 L1590.44 680.176 L1589.88 680.176 L1589.32 680.176 L1588.76 680.176 L1588.2 680.176 L1587.65 680.176 L1587.09 680.176 L1586.53 680.176 L1585.97 680.176 L1585.41 680.176 L1584.85 680.176 L1584.29 680.176 L1583.73 680.176 L1583.17 680.176 L1582.61 680.176 L1582.05 680.176 L1581.49 680.176 L1580.93 680.176 L1580.37 680.176 L1579.82 680.176 L1579.26 680.176 L1578.7 680.176 L1578.14 680.176 L1577.58 680.176 L1577.02 680.176 L1576.46 680.176 L1575.9 680.176 L1575.34 680.176 L1574.78 680.176 L1574.22 680.176 L1573.66 680.176 L1573.1 680.176 L1572.55 680.176 L1571.99 680.176 L1571.43 680.176 L1570.87 680.176 L1570.31 680.176 L1569.75 680.176 L1569.19 680.176 L1568.63 680.176 L1568.07 680.176 L1567.51 680.176 L1566.95 680.176 L1566.39 680.176 L1565.83 680.176 L1565.28 680.176 L1564.72 680.176 L1564.16 680.176 L1563.6 680.176 L1563.04 680.176 L1562.48 680.176 L1561.92 680.176 L1561.36 680.176 L1560.8 680.176 L1560.24 680.176 L1559.68 680.176 L1559.12 680.176 L1558.56 680.176 L1558 680.176 L1557.45 680.176 L1556.89 680.176 L1556.33 680.176 L1555.77 680.176 L1555.21 680.176 L1554.65 680.176 L1554.09 680.176 L1553.53 680.176 L1552.97 680.176 L1552.41 680.176 L1551.85 680.176 L1551.29 680.176 L1550.73 680.176 L1550.18 680.176 L1549.62 680.176 L1549.06 680.176 L1548.5 680.176 L1547.94 680.176 L1547.38 680.176 L1546.82 680.176 L1546.26 680.176 L1545.7 680.176 L1545.14 680.176 L1544.58 680.176 L1544.02 680.176 L1543.46 680.176 L1542.9 680.176 L1542.35 680.176 L1541.79 680.176 L1541.23 680.176 L1540.67 680.176 L1540.11 680.176 L1539.55 680.176 L1538.99 680.176 L1538.43 680.176 L1537.87 680.176 L1537.31 680.176 L1536.75 680.176 L1536.19 680.176 L1535.63 680.176 L1535.08 680.176 L1534.52 680.176 L1533.96 680.176 L1533.4 680.176 L1532.84 680.176 L1532.28 680.176 L1531.72 680.176 L1531.16 680.176 L1530.6 680.176 L1530.04 680.176 L1529.48 680.176 L1528.92 680.176 L1528.36 680.176 L1527.81 680.176 L1527.25 680.176 L1526.69 680.176 L1526.13 680.176 L1525.57 680.176 L1525.01 680.176 L1524.45 680.176 L1523.89 680.176 L1523.33 680.176 L1522.77 680.176 L1522.21 680.176 L1521.65 680.176 L1521.09 680.176 L1520.53 680.176 L1519.98 680.176 L1519.42 680.176 L1518.86 680.176 L1518.3 680.176 L1517.74 680.176 L1517.18 680.176 L1516.62 680.176 L1516.06 680.176 L1515.5 680.176 L1514.94 680.176 L1514.38 680.176 L1513.82 680.176 L1513.26 680.176 L1512.71 680.176 L1512.15 680.176 L1511.59 680.176 L1511.03 680.176 L1510.47 680.176 L1509.91 680.176 L1509.35 680.176 L1508.79 680.176 L1508.23 680.176 L1507.67 680.176 L1507.11 680.176 L1506.55 680.176 L1505.99 680.176 L1505.44 680.176 L1504.88 680.176 L1504.32 680.176 L1503.76 680.176 L1503.2 680.176 L1502.64 680.176 L1502.08 680.176 L1501.52 680.176 L1500.96 680.176 L1500.4 680.176 L1499.84 680.176 L1499.28 680.176 L1498.72 680.176 L1498.16 680.176 L1497.61 680.176 L1497.05 680.176 L1496.49 680.176 L1495.93 680.176 L1495.37 680.176 L1494.81 680.176 L1494.25 680.176 L1493.69 680.176 L1493.13 680.176 L1492.57 680.176 L1492.01 680.176 L1491.45 680.176 L1490.89 680.176 L1490.34 680.176 L1489.78 680.176 L1489.22 680.176 L1488.66 680.176 L1488.1 680.176 L1487.54 680.176 L1486.98 680.176 L1486.42 680.176 L1485.86 680.176 L1485.3 680.176 L1484.74 680.176 L1484.18 680.176 L1483.62 680.176 L1483.07 680.176 L1482.51 680.176 L1481.95 680.176 L1481.39 680.176 L1480.83 680.176 L1480.27 680.176 L1479.71 680.176 L1479.15 680.176 L1478.59 680.176 L1478.03 680.176 L1477.47 680.176 L1476.91 680.176 L1476.35 680.176 L1475.79 680.176 L1475.24 680.176 L1474.68 680.176 L1474.12 680.176 L1473.56 680.176 L1473 680.176 L1472.44 680.176 L1471.88 680.176 L1471.32 680.176 L1470.76 680.176 L1470.2 680.176 L1469.64 680.176 L1469.08 680.176 L1468.52 680.176 L1467.97 680.176 L1467.41 680.176 L1466.85 680.176 L1466.29 680.176 L1465.73 680.176 L1465.17 680.176 L1464.61 680.176 L1464.05 680.176 L1463.49 680.176 L1462.93 680.176 L1462.37 680.176 L1461.81 680.176 L1461.25 680.176 L1460.7 680.176 L1460.14 680.176 L1459.58 680.176 L1459.02 680.176 L1458.46 680.176 L1457.9 680.176 L1457.34 680.176 L1456.78 680.176 L1456.22 680.176 L1455.66 680.176 L1455.1 680.176 L1454.54 680.176 L1453.98 680.176 L1453.42 680.176 L1452.87 680.176 L1452.31 680.176 L1451.75 680.176 L1451.19 680.176 L1450.63 680.176 L1450.07 680.176 L1449.51 680.176 L1448.95 680.176 L1448.39 680.176 L1447.83 680.176 L1447.27 680.176 L1446.71 680.176 L1446.15 680.176 L1445.6 680.176 L1445.04 680.176 L1444.48 680.176 L1443.92 680.176 L1443.36 680.176 L1442.8 680.176 L1442.24 680.176 L1441.68 680.176 L1441.12 680.176 L1440.56 680.176 L1440 680.176 L1439.44 680.176 L1438.88 680.176 L1438.33 680.176 L1437.77 680.176 L1437.21 680.176 L1436.65 680.176 L1436.09 680.176 L1435.53 680.176 L1434.97 680.176 L1434.41 680.176 L1433.85 680.176 L1433.29 680.176 L1432.73 680.176 L1432.17 680.176 L1431.61 680.176 L1431.05 680.176 L1430.5 680.176 L1429.94 680.176 L1429.38 680.176 L1428.82 680.176 L1428.26 680.176 L1427.7 680.176 L1427.14 680.176 L1426.58 680.176 L1426.02 680.176 L1425.46 680.176 L1424.9 680.176 L1424.34 680.176 L1423.78 680.176 L1423.23 680.176 L1422.67 680.176 L1422.11 680.176 L1421.55 680.176 L1420.99 680.176 L1420.43 680.176 L1419.87 680.176 L1419.31 680.176 L1418.75 680.176 L1418.19 680.176 L1417.63 680.176 L1417.07 680.176 L1416.51 680.176 L1415.95 680.176 L1415.4 680.176 L1414.84 680.176 L1414.28 680.176 L1413.72 680.176 L1413.16 680.176 L1412.6 680.176 L1412.04 680.176 L1411.48 680.176 L1410.92 680.176 L1410.36 680.176 L1409.8 680.176 L1409.24 680.176 L1408.68 680.176 L1408.13 680.176 L1407.57 680.176 L1407.01 680.176 L1406.45 680.176 L1405.89 680.176 L1405.33 680.176 L1404.77 680.176 L1404.21 680.176 L1403.65 680.176 L1403.09 680.176 L1402.53 680.176 L1401.97 680.176 L1401.41 680.176 L1400.86 680.176 L1400.3 680.176 L1399.74 680.176 L1399.18 680.176 L1398.62 680.176 L1398.06 680.176 L1397.5 680.176 L1396.94 680.176 L1396.38 680.176 L1395.82 680.176 L1395.26 680.176 L1394.7 680.176 L1394.14 680.176 L1393.58 680.176 L1393.03 680.176 L1392.47 680.176 L1391.91 680.176 L1391.35 680.176 L1390.79 680.176 L1390.23 680.176 L1389.67 680.176 L1389.11 680.176 L1388.55 680.176 L1387.99 680.176 L1387.43 680.176 L1386.87 680.176 L1386.31 680.176 L1385.76 680.176 L1385.2 680.176 L1384.64 680.176 L1384.08 680.176 L1383.52 680.176 L1382.96 680.176 L1382.4 680.176 L1381.84 680.176 L1381.28 680.176 L1380.72 680.176 L1380.16 680.176 L1379.6 680.176 L1379.04 680.176 L1378.49 680.176 L1377.93 680.176 L1377.37 680.176 L1376.81 680.176 L1376.25 680.176 L1375.69 680.176 L1375.13 680.176 L1374.57 680.176 L1374.01 680.176 L1373.45 680.176 L1372.89 680.176 L1372.33 680.176 L1371.77 680.176 L1371.21 680.176 L1370.66 680.176 L1370.1 680.176 L1369.54 680.176 L1368.98 680.176 L1368.42 680.176 L1367.86 680.176 L1367.3 680.176 L1366.74 680.176 L1366.18 680.176 L1365.62 680.176 L1365.06 680.176 L1364.5 680.176 L1363.94 680.176 L1363.39 680.176 L1362.83 680.176 L1362.27 680.176 L1361.71 680.176 L1361.15 680.176 L1360.59 680.176 L1360.03 680.176 L1359.47 680.176 L1358.91 680.176 L1358.35 680.176 L1357.79 680.176 L1357.23 680.176 L1356.67 680.176 L1356.12 680.176 L1355.56 680.176 L1355 680.176 L1354.44 680.176 L1353.88 680.176 L1353.32 680.176 L1352.76 680.176 L1352.2 680.176 L1351.64 680.176 L1351.08 680.176 L1350.52 680.176 L1349.96 680.176 L1349.4 680.176 L1348.84 680.176 L1348.29 680.176 L1347.73 680.176 L1347.17 680.176 L1346.61 680.176 L1346.05 680.176 L1345.49 680.176 L1344.93 680.176 L1344.37 680.176 L1343.81 680.176 L1343.25 680.176 L1342.69 680.176 L1342.13 680.176 L1341.57 680.176 L1341.02 680.176 L1340.46 680.176 L1339.9 680.176 L1339.34 680.176 L1338.78 680.176 L1338.22 680.176 L1337.66 680.176 L1337.1 680.176 L1336.54 680.176 L1335.98 680.176 L1335.42 680.176 L1334.86 680.176 L1334.3 680.176 L1333.75 680.176 L1333.19 680.176 L1332.63 680.176 L1332.07 680.176 L1331.51 680.176 L1330.95 680.176 L1330.39 680.176 L1329.83 680.176 L1329.27 680.176 L1328.71 680.176 L1328.15 680.176 L1327.59 680.176 L1327.03 680.176 L1326.47 680.176 L1325.92 680.176 L1325.36 680.176 L1324.8 680.176 L1324.24 680.176 L1323.68 680.176 L1323.12 680.176 L1322.56 680.176 L1322 680.176 L1321.44 680.176 L1320.88 680.176 L1320.32 680.176 L1319.76 680.176 L1319.2 680.176 L1318.65 680.176 L1318.09 680.176 L1317.53 680.176 L1316.97 680.176 L1316.41 680.176 L1315.85 680.176 L1315.29 680.176 L1314.73 680.176 L1314.17 680.176 L1313.61 680.176 L1313.05 680.176 L1312.49 680.176 L1311.93 680.176 L1311.38 680.176 L1310.82 680.176 L1310.26 680.176 L1309.7 680.176 L1309.14 680.176 L1308.58 680.176 L1308.02 680.176 L1307.46 680.176 L1306.9 680.176 L1306.34 680.176 L1305.78 680.176 L1305.22 680.176 L1304.66 680.176 L1304.1 680.176 L1303.55 680.176 L1302.99 680.176 L1302.43 680.176 L1301.87 680.176 L1301.31 680.176 L1300.75 680.176 L1300.19 680.176 L1299.63 680.176 L1299.07 680.176 L1298.51 680.176 L1297.95 680.176 L1297.39 680.176 L1296.83 680.176 L1296.28 680.176 L1295.72 680.176 L1295.16 680.176 L1294.6 680.176 L1294.04 680.176 L1293.48 680.176 L1292.92 680.176 L1292.36 680.176 L1291.8 680.176 L1291.24 680.176 L1290.68 680.176 L1290.12 680.176 L1289.56 680.176 L1289 680.176 L1288.45 680.176 L1287.89 680.176 L1287.33 680.176 L1286.77 680.176 L1286.21 680.176 L1285.65 680.176 L1285.09 680.176 L1284.53 680.176 L1283.97 680.176 L1283.41 680.176 L1282.85 680.176 L1282.29 680.176 L1281.73 680.176 L1281.18 680.176 L1280.62 680.176 L1280.06 680.176 L1279.5 680.176 L1278.94 680.176 L1278.38 680.176 L1277.82 680.176 L1277.26 680.176 L1276.7 680.176 L1276.14 680.176 L1275.58 680.176 L1275.02 680.176 L1274.46 680.176 L1273.91 680.176 L1273.35 680.176 L1272.79 680.176 L1272.23 680.176 L1271.67 680.176 L1271.11 680.176 L1270.55 680.176 L1269.99 680.176 L1269.43 680.176 L1268.87 680.176 L1268.31 680.176 L1267.75 680.176 L1267.19 680.176 L1266.63 680.176 L1266.08 680.176 L1265.52 680.176 L1264.96 680.176 L1264.4 680.176 L1263.84 680.176 L1263.28 680.176 L1262.72 680.176 L1262.16 680.176 L1261.6 680.176 L1261.04 680.176 L1260.48 680.176 L1259.92 680.176 L1259.36 680.176 L1258.81 680.176 L1258.25 680.176 L1257.69 680.176 L1257.13 680.176 L1256.57 680.176 L1256.01 680.176 L1255.45 680.176 L1254.89 680.176 L1254.33 680.176 L1253.77 680.176 L1253.21 680.176 L1252.65 680.176 L1252.09 680.176 L1251.54 680.176 L1250.98 680.176 L1250.42 680.176 L1249.86 680.176 L1249.3 680.176 L1248.74 680.176 L1248.18 680.176 L1247.62 680.176 L1247.06 680.176 L1246.5 680.176 L1245.94 680.176 L1245.38 680.176 L1244.82 680.176 L1244.26 680.176 L1243.71 680.176 L1243.15 680.176 L1242.59 680.176 L1242.03 680.176 L1241.47 680.176 L1240.91 680.176 L1240.35 680.176 L1239.79 680.176 L1239.23 680.176 L1238.67 680.176 L1238.11 680.176 L1237.55 680.176 L1236.99 680.176 L1236.44 680.176 L1235.88 680.176 L1235.32 680.176 L1234.76 680.176 L1234.2 680.176 L1233.64 680.176 L1233.08 680.176 L1232.52 680.176 L1231.96 680.176 L1231.4 680.176 L1230.84 680.176 L1230.28 680.176 L1229.72 680.176 L1229.17 680.176 L1228.61 680.176 L1228.05 680.176 L1227.49 680.176 L1226.93 680.176 L1226.37 680.176 L1225.81 680.176 L1225.25 680.176 L1224.69 680.176 L1224.13 680.176 L1223.57 680.176 L1223.01 680.176 L1222.45 680.176 L1221.89 680.176 L1221.34 680.176 L1220.78 680.176 L1220.22 680.176 L1219.66 680.176 L1219.1 680.176 L1218.54 680.176 L1217.98 680.176 L1217.42 680.176 L1216.86 680.176 L1216.3 680.176 L1215.74 680.176 L1215.18 680.176 L1214.62 680.176 L1214.07 680.176 L1213.51 680.176 L1212.95 680.176 L1212.39 680.176 L1211.83 680.176 L1211.27 680.176 L1210.71 680.176 L1210.15 680.176 L1209.59 680.176 L1209.03 680.176 L1208.47 680.176 L1207.91 680.176 L1207.35 680.176 L1206.8 680.176 L1206.24 680.176 L1205.68 680.176 L1205.12 680.176 L1204.56 680.176 L1204 680.176 L1203.44 680.176 L1202.88 680.176 L1202.32 680.176 L1201.76 680.176 L1201.2 680.176 L1200.64 680.176 L1200.08 680.176 L1199.52 680.176 L1198.97 680.176 L1198.41 680.176 L1197.85 680.176 L1197.29 680.176 L1196.73 680.176 L1196.17 680.176 L1195.61 680.176 L1195.05 680.176 L1194.49 680.176 L1193.93 680.176 L1193.37 680.176 L1192.81 680.176 L1192.25 680.176 L1191.7 680.176 L1191.14 680.176 L1190.58 680.176 L1190.02 680.176 L1189.46 680.176 L1188.9 680.176 L1188.34 680.176 L1187.78 680.176 L1187.22 680.176 L1186.66 680.176 L1186.1 680.176 L1185.54 680.176 L1184.98 680.176 L1184.43 680.176 L1183.87 680.176 L1183.31 680.176 L1182.75 680.176 L1182.19 680.176 L1181.63 680.176 L1181.07 680.176 L1180.51 680.176 L1179.95 680.176 L1179.39 680.176 L1178.83 680.176 L1178.27 680.176 L1177.71 680.176 L1177.15 680.176 L1176.6 680.176 L1176.04 680.176 L1175.48 680.176 L1174.92 680.176 L1174.36 680.176 L1173.8 680.176 L1173.24 680.176 L1172.68 680.176 L1172.12 680.176 L1171.56 680.176 L1171 680.176 L1170.44 680.176 L1169.88 680.176 L1169.33 680.176 L1168.77 680.176 L1168.21 680.176 L1167.65 680.176 L1167.09 680.176 L1166.53 680.176 L1165.97 680.176 L1165.41 680.176 L1164.85 680.176 L1164.29 680.176 L1163.73 680.176 L1163.17 680.176 L1162.61 680.176 L1162.05 680.176 L1161.5 680.176 L1160.94 680.176 L1160.38 680.176 L1159.82 680.176 L1159.26 680.176 L1158.7 680.176 L1158.14 680.176 L1157.58 680.176 L1157.02 680.176 L1156.46 680.176 L1155.9 680.176 L1155.34 680.176 L1154.78 680.176 L1154.23 680.176 L1153.67 680.176 L1153.11 680.176 L1152.55 680.176 L1151.99 680.176 L1151.43 680.176 L1150.87 680.176 L1150.31 680.176 L1149.75 680.176 L1149.19 680.176 L1148.63 680.176 L1148.07 680.176 L1147.51 680.176 L1146.96 680.176 L1146.4 680.176 L1145.84 680.176 L1145.28 680.176 L1144.72 680.176 L1144.16 680.176 L1143.6 680.176 L1143.04 680.176 L1142.48 680.176 L1141.92 680.176 L1141.36 680.176 L1140.8 680.176 L1140.24 680.176 L1139.68 680.176 L1139.13 680.176 L1138.57 680.176 L1138.01 680.176 L1137.45 680.176 L1136.89 680.176 L1136.33 680.176 L1135.77 680.176 L1135.21 680.176 L1134.65 680.176 L1134.09 680.176 L1133.53 680.176 L1132.97 680.176 L1132.41 680.176 L1131.86 680.176 L1131.3 680.176 L1130.74 680.176 L1130.18 680.176 L1129.62 680.176 L1129.06 680.176 L1128.5 680.176 L1127.94 680.176 L1127.38 680.176 L1126.82 680.176 L1126.26 680.176 L1125.7 680.176 L1125.14 680.176 L1124.59 680.176 L1124.03 680.176 L1123.47 680.176 L1122.91 680.176 L1122.35 680.176 L1121.79 680.176 L1121.23 680.176 L1120.67 680.176 L1120.11 680.176 L1119.55 680.176 L1118.99 680.176 L1118.43 680.176 L1117.87 680.176 L1117.31 680.176 L1116.76 680.176 L1116.2 680.176 L1115.64 680.176 L1115.08 680.176 L1114.52 680.176 L1113.96 680.176 L1113.4 680.176 L1112.84 680.176 L1112.28 680.176 L1111.72 680.176 L1111.16 680.176 L1110.6 680.176 L1110.04 680.176 L1109.49 680.176 L1108.93 680.176 L1108.37 680.176 L1107.81 680.176 L1107.25 680.176 L1106.69 680.176 L1106.13 680.176 L1105.57 680.176 L1105.01 680.176 L1104.45 680.176 L1103.89 680.176 L1103.33 680.176 L1102.77 680.176 L1102.22 680.176 L1101.66 680.176 L1101.1 680.176 L1100.54 680.176 L1099.98 680.176 L1099.42 680.176 L1098.86 680.176 L1098.3 680.176 L1097.74 680.176 L1097.18 680.176 L1096.62 680.176 L1096.06 680.176 L1095.5 680.176 L1094.94 680.176 L1094.39 680.176 L1093.83 680.176 L1093.27 680.176 L1092.71 680.176 L1092.15 680.176 L1091.59 680.176 L1091.03 680.176 L1090.47 680.176 L1089.91 680.176 L1089.35 680.176 L1088.79 680.176 L1088.23 680.176 L1087.67 680.176 L1087.12 680.176 L1086.56 680.176 L1086 680.176 L1085.44 680.176 L1084.88 680.176 L1084.32 680.176 L1083.76 680.176 L1083.2 680.176 L1082.64 680.176 L1082.08 680.176 L1081.52 680.176 L1080.96 680.176 L1080.4 680.176 L1079.85 680.176 L1079.29 680.176 L1078.73 680.176 L1078.17 680.176 L1077.61 680.176 L1077.05 680.176 L1076.49 680.176 L1075.93 680.176 L1075.37 680.176 L1074.81 680.176 L1074.25 680.176 L1073.69 680.176 L1073.13 680.176 L1072.57 680.176 L1072.02 680.176 L1071.46 680.176 L1070.9 680.176 L1070.34 680.176 L1069.78 680.176 L1069.22 680.176 L1068.66 680.176 L1068.1 680.176 L1067.54 680.176 L1066.98 680.176 L1066.42 680.176 L1065.86 680.176 L1065.3 680.176 L1064.75 680.176 L1064.19 680.176 L1063.63 680.176 L1063.07 680.176 L1062.51 680.176 L1061.95 680.176 L1061.39 680.176 L1060.83 680.176 L1060.27 680.176 L1059.71 680.176 L1059.15 680.176 L1058.59 680.176 L1058.03 680.176 L1057.48 680.176 L1056.92 680.176 L1056.36 680.176 L1055.8 680.176 L1055.24 680.176 L1054.68 680.176 L1054.12 680.176 L1053.56 680.176 L1053 680.176 L1052.44 680.176 L1051.88 680.176 L1051.32 680.176 L1050.76 680.176 L1050.2 680.176 L1049.65 680.176 L1049.09 680.176 L1048.53 680.176 L1047.97 680.176 L1047.41 680.176 L1046.85 680.176 L1046.29 680.176 L1045.73 680.176 L1045.17 680.176 L1044.61 680.176 L1044.05 680.176 L1043.49 680.176 L1042.93 680.176 L1042.38 680.176 L1041.82 680.176 L1041.26 680.176 L1040.7 680.176 L1040.14 680.176 L1039.58 680.176 L1039.02 680.176 L1038.46 680.176 L1037.9 680.176 L1037.34 680.176 L1036.78 680.176 L1036.22 680.176 L1035.66 680.176 L1035.1 680.176 L1034.55 680.176 L1033.99 680.176 L1033.43 680.176 L1032.87 680.176 L1032.31 680.176 L1031.75 680.176 L1031.19 680.176 L1030.63 680.176 L1030.07 680.176 L1029.51 680.176 L1028.95 680.176 L1028.39 680.176 L1027.83 680.176 L1027.28 680.176 L1026.72 680.176 L1026.16 680.176 L1025.6 680.176 L1025.04 680.176 L1024.48 680.176 L1023.92 680.176 L1023.36 680.176 L1022.8 680.176 L1022.24 680.176 L1021.68 680.176 L1021.12 680.176 L1020.56 680.176 L1020.01 680.176 L1019.45 680.176 L1018.89 680.176 L1018.33 680.176 L1017.77 680.176 L1017.21 680.176 L1016.65 680.176 L1016.09 680.176 L1015.53 680.176 L1014.97 680.176 L1014.41 680.176 L1013.85 680.176 L1013.29 680.176 L1012.73 680.176 L1012.18 680.176 L1011.62 680.176 L1011.06 680.176 L1010.5 680.176 L1009.94 680.176 L1009.38 680.176 L1008.82 680.176 L1008.26 680.176 L1007.7 680.176 L1007.14 680.176 L1006.58 680.176 L1006.02 680.176 L1005.46 680.176 L1004.91 680.176 L1004.35 680.176 L1003.79 680.176 L1003.23 680.176 L1002.67 680.176 L1002.11 680.176 L1001.55 680.176 L1000.99 680.176 L1000.43 680.176 L999.872 680.176 L999.313 680.176 L998.754 680.176 L998.194 680.176 L997.635 680.176 L997.076 680.176 L996.517 680.176 L995.957 680.176 L995.398 680.176 L994.839 680.176 L994.28 680.176 L993.72 680.176 L993.161 680.176 L992.602 680.176 L992.043 680.176 L991.483 680.176 L990.924 680.176 L990.365 680.176 L989.806 680.176 L989.246 680.176 L988.687 680.176 L988.128 680.176 L987.569 680.176 L987.009 680.176 L986.45 680.176 L985.891 680.176 L985.332 680.176 L984.772 680.176 L984.213 680.176 L983.654 680.176 L983.095 680.176 L982.535 680.176 L981.976 680.176 L981.417 680.176 L980.858 680.176 L980.298 680.176 L979.739 680.176 L979.18 680.176 L978.621 680.176 L978.061 680.176 L977.502 680.176 L976.943 680.176 L976.384 680.176 L975.824 680.176 L975.265 680.176 L974.706 680.176 L974.147 680.176 L973.587 680.176 L973.028 680.176 L972.469 680.176 L971.91 680.176 L971.35 680.176 L970.791 680.176 L970.232 680.176 L969.673 680.176 L969.113 680.176 L968.554 680.176 L967.995 680.176 L967.436 680.176 L966.876 680.176 L966.317 680.176 L965.758 680.176 L965.199 680.176 L964.639 680.176 L964.08 680.176 L963.521 680.176 L962.962 680.176 L962.402 680.176 L961.843 680.176 L961.284 680.176 L960.725 680.176 L960.165 680.176 L959.606 680.176 L959.047 680.176 L958.488 680.176 L957.928 680.176 L957.369 680.176 L956.81 680.176 L956.251 680.176 L955.691 680.176 L955.132 680.176 L954.573 680.176 L954.014 680.176 L953.454 680.176 L952.895 680.176 L952.336 680.176 L951.777 680.176 L951.217 680.176 L950.658 680.176 L950.099 680.176 L949.54 680.176 L948.98 680.176 L948.421 680.176 L947.862 680.176 L947.303 680.176 L946.743 680.176 L946.184 680.176 L945.625 680.176 L945.066 680.176 L944.506 680.176 L943.947 680.176 L943.388 680.176 L942.829 680.176 L942.269 680.176 L941.71 680.176 L941.151 680.176 L940.592 680.176 L940.032 680.176 L939.473 680.176 L938.914 680.176 L938.355 680.176 L937.795 680.176 L937.236 680.176 L936.677 680.176 L936.118 680.176 L935.558 680.176 L934.999 680.176 L934.44 680.176 L933.881 680.176 L933.321 680.176 L932.762 680.176 L932.203 680.176 L931.644 680.176 L931.084 680.176 L930.525 680.176 L929.966 680.176 L929.406 680.176 L928.847 680.176 L928.288 680.176 L927.729 680.176 L927.169 680.176 L926.61 680.176 L926.051 680.176 L925.492 680.176 L924.932 680.176 L924.373 680.176 L923.814 680.176 L923.255 680.176 L922.695 680.176 L922.136 680.176 L921.577 680.176 L921.018 680.176 L920.458 680.176 L919.899 680.176 L919.34 680.176 L918.781 680.176 L918.221 680.176 L917.662 680.176 L917.103 680.176 L916.544 680.176 L915.984 680.176 L915.425 680.176 L914.866 680.176 L914.307 680.176 L913.747 680.176 L913.188 680.176 L912.629 680.176 L912.07 680.176 L911.51 680.176 L910.951 680.176 L910.392 680.176 L909.833 680.176 L909.273 680.176 L908.714 680.176 L908.155 680.176 L907.596 680.176 L907.036 680.176 L906.477 680.176 L905.918 680.176 L905.359 680.176 L904.799 680.176 L904.24 680.176 L903.681 680.176 L903.122 680.176 L902.562 680.176 L902.003 680.176 L901.444 680.176 L900.885 680.176 L900.325 680.176 L899.766 680.176 L899.207 680.176 L898.648 680.176 L898.088 680.176 L897.529 680.176 L896.97 680.176 L896.411 680.176 L895.851 680.176 L895.292 680.176 L894.733 680.176 L894.174 680.176 L893.614 680.176 L893.055 680.176 L892.496 680.176 L891.937 680.176 L891.377 680.176 L890.818 680.176 L890.259 680.176 L889.7 680.176 L889.14 680.176 L888.581 680.176 L888.022 680.176 L887.463 680.176 L886.903 680.176 L886.344 680.176 L885.785 680.176 L885.226 680.176 L884.666 680.176 L884.107 680.176 L883.548 680.176 L882.989 680.176 L882.429 680.176 L881.87 680.176 L881.311 680.176 L880.752 680.176 L880.192 680.176 L879.633 680.176 L879.074 680.176 L878.515 680.176 L877.955 680.176 L877.396 680.176 L876.837 680.176 L876.278 680.176 L875.718 680.176 L875.159 680.176 L874.6 680.176 L874.041 680.176 L873.481 680.176 L872.922 680.176 L872.363 680.176 L871.804 680.176 L871.244 680.176 L870.685 680.176 L870.126 680.176 L869.567 680.176 L869.007 680.176 L868.448 680.176 L867.889 680.176 L867.33 680.176 L866.77 680.176 L866.211 680.176 L865.652 680.176 L865.093 680.176 L864.533 680.176 L863.974 680.176 L863.415 680.176 L862.856 680.176 L862.296 680.176 L861.737 680.176 L861.178 680.176 L860.619 680.176 L860.059 680.176 L859.5 680.176 L858.941 680.176 L858.382 680.176 L857.822 680.176 L857.263 680.176 L856.704 680.176 L856.145 680.176 L855.585 680.176 L855.026 680.176 L854.467 680.176 L853.908 680.176 L853.348 680.176 L852.789 680.176 L852.23 680.176 L851.671 680.176 L851.111 680.176 L850.552 680.176 L849.993 680.176 L849.434 680.176 L848.874 680.176 L848.315 680.176 L847.756 680.176 L847.197 680.176 L846.637 680.176 L846.078 680.176 L845.519 680.176 L844.96 680.176 L844.4 680.176 L843.841 680.176 L843.282 680.176 L842.723 680.176 L842.163 680.176 L841.604 680.176 L841.045 680.176 L840.486 680.176 L839.926 680.176 L839.367 680.176 L838.808 680.176 L838.249 680.176 L837.689 680.176 L837.13 680.176 L836.571 680.176 L836.012 680.176 L835.452 680.176 L834.893 680.176 L834.334 680.176 L833.775 680.176 L833.215 680.176 L832.656 680.176 L832.097 680.176 L831.538 680.176 L830.978 680.176 L830.419 680.176 L829.86 680.176 L829.301 680.176 L828.741 680.176 L828.182 680.176 L827.623 680.176 L827.064 680.176 L826.504 680.176 L825.945 680.176 L825.386 680.176 L824.827 680.176 L824.267 680.176 L823.708 680.176 L823.149 680.176 L822.59 680.176 L822.03 680.176 L821.471 680.176 L820.912 680.176 L820.353 680.176 L819.793 680.176 L819.234 680.176 L818.675 680.176 L818.116 680.176 L817.556 680.176 L816.997 680.176 L816.438 680.176 L815.879 680.176 L815.319 680.176 L814.76 680.176 L814.201 680.176 L813.642 680.176 L813.082 680.176 L812.523 680.176 L811.964 680.176 L811.405 680.176 L810.845 680.176 L810.286 680.176 L809.727 680.176 L809.168 680.176 L808.608 680.176 L808.049 680.176 L807.49 680.176 L806.931 680.176 L806.371 680.176 L805.812 680.176 L805.253 680.176 L804.693 680.176 L804.134 680.176 L803.575 680.176 L803.016 680.176 L802.456 680.176 L801.897 680.176 L801.338 680.176 L800.779 680.176 L800.219 680.176 L799.66 680.176 L799.101 680.176 L798.542 680.176 L797.982 680.176 L797.423 680.176 L796.864 680.176 L796.305 680.176 L795.745 680.176 L795.186 680.176 L794.627 680.176 L794.068 680.176 L793.508 680.176 L792.949 680.176 L792.39 680.176 L791.831 680.176 L791.271 680.176 L790.712 680.176 L790.153 680.176 L789.594 680.176 L789.034 680.176 L788.475 680.176 L787.916 680.176 L787.357 680.176 L786.797 680.176 L786.238 680.176 L785.679 680.176 L785.12 680.176 L784.56 680.176 L784.001 680.176 L783.442 680.176 L782.883 680.176 L782.323 680.176 L781.764 680.176 L781.205 680.176 L780.646 680.176 L780.086 680.176 L779.527 680.176 L778.968 680.176 L778.409 680.176 L777.849 680.176 L777.29 680.176 L776.731 680.176 L776.172 680.176 L775.612 680.176 L775.053 680.176 L774.494 680.176 L773.935 680.176 L773.375 680.176 L772.816 680.176 L772.257 680.176 L771.698 680.176 L771.138 680.176 L770.579 680.176 L770.02 680.176 L769.461 680.176 L768.901 680.176 L768.342 680.176 L767.783 680.176 L767.224 680.176 L766.664 680.176 L766.105 680.176 L765.546 680.176 L764.987 680.176 L764.427 680.176 L763.868 680.176 L763.309 680.176 L762.75 680.176 L762.19 680.176 L761.631 680.176 L761.072 680.176 L760.513 680.176 L759.953 680.176 L759.394 680.176 L758.835 680.176 L758.276 680.176 L757.716 680.176 L757.157 680.176 L756.598 680.176 L756.039 680.176 L755.479 680.176 L754.92 680.176 L754.361 680.176 L753.802 680.176 L753.242 680.176 L752.683 680.176 L752.124 680.176 L751.565 680.176 L751.005 680.176 L750.446 680.176 L749.887 680.176 L749.328 680.176 L748.768 680.176 L748.209 680.176 L747.65 680.176 L747.091 680.176 L746.531 680.176 L745.972 680.176 L745.413 680.176 L744.854 680.176 L744.294 680.176 L743.735 680.176 L743.176 680.176 L742.617 680.176 L742.057 680.176 L741.498 680.176 L740.939 680.176 L740.38 680.176 L739.82 680.176 L739.261 680.176 L738.702 680.176 L738.143 680.176 L737.583 680.176 L737.024 680.176 L736.465 680.176 L735.906 680.176 L735.346 680.176 L734.787 680.176 L734.228 680.176 L733.669 680.176 L733.109 680.176 L732.55 680.176 L731.991 680.176 L731.432 680.176 L730.872 680.176 L730.313 680.176 L729.754 680.176 L729.195 680.176 L728.635 680.176 L728.076 680.176 L727.517 680.176 L726.958 680.176 L726.398 680.176 L725.839 680.176 L725.28 680.176 L724.721 680.176 L724.161 680.176 L723.602 680.176 L723.043 680.176 L722.484 680.176 L721.924 680.176 L721.365 680.176 L720.806 680.176 L720.247 680.176  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.267 720.806,684.267 721.365,684.267 721.924,684.267 722.484,684.267 723.043,684.267 723.602,684.267 724.161,684.267 724.721,684.267 725.28,684.267 725.839,684.267 726.398,684.267 726.958,684.267 727.517,684.267 728.076,684.267 728.635,684.267 729.195,684.267 729.754,684.267 730.313,684.267 730.872,684.267 731.432,684.267 731.991,684.267 732.55,684.267 733.109,684.267 733.669,684.267 734.228,684.267 734.787,684.267 735.346,684.267 735.906,684.267 736.465,684.267 737.024,684.267 737.583,684.267 738.143,684.267 738.702,684.267 739.261,684.267 739.82,684.267 740.38,684.267 740.939,684.267 741.498,684.267 742.057,684.267 742.617,684.267 743.176,684.267 743.735,684.267 744.294,684.267 744.854,684.267 745.413,684.267 745.972,684.267 746.531,684.267 747.091,684.267 747.65,684.267 748.209,684.267 748.768,684.267 749.328,684.267 749.887,684.267 750.446,684.267 751.005,684.267 751.565,684.267 752.124,684.267 752.683,684.267 753.242,684.267 753.802,684.267 754.361,684.267 754.92,684.267 755.479,684.267 756.039,684.267 756.598,684.267 757.157,684.267 757.716,684.267 758.276,684.267 758.835,684.267 759.394,684.267 759.953,684.267 760.513,684.267 761.072,684.267 761.631,684.267 762.19,684.267 762.75,684.267 763.309,684.267 763.868,684.267 764.427,684.267 764.987,684.267 765.546,684.267 766.105,684.267 766.664,684.267 767.224,684.267 767.783,684.267 768.342,684.267 768.901,684.267 769.461,684.267 770.02,684.267 770.579,684.267 771.138,684.267 771.698,684.267 772.257,684.267 772.816,684.267 773.375,684.267 773.935,684.267 774.494,684.267 775.053,684.267 775.612,684.267 776.172,684.267 776.731,684.267 777.29,684.267 777.849,684.267 778.409,684.267 778.968,684.267 779.527,684.267 780.086,684.267 780.646,684.267 781.205,684.267 781.764,684.267 782.323,684.267 782.883,684.267 783.442,684.267 784.001,684.267 784.56,684.267 785.12,684.267 785.679,684.267 786.238,684.267 786.797,684.267 787.357,684.267 787.916,684.267 788.475,684.267 789.034,684.267 789.594,684.267 790.153,684.267 790.712,684.267 791.271,684.267 791.831,684.267 792.39,684.267 792.949,684.267 793.508,684.267 794.068,684.267 794.627,684.267 795.186,684.267 795.745,684.267 796.305,684.267 796.864,684.267 797.423,684.267 797.982,684.267 798.542,684.267 799.101,684.267 799.66,684.267 800.219,684.267 800.779,684.267 801.338,684.267 801.897,684.267 802.456,684.267 803.016,684.267 803.575,684.267 804.134,684.267 804.693,684.267 805.253,684.267 805.812,684.267 806.371,684.267 806.931,684.267 807.49,684.267 808.049,684.267 808.608,684.267 809.168,684.267 809.727,684.267 810.286,684.267 810.845,684.267 811.405,684.267 811.964,684.267 812.523,684.267 813.082,684.267 813.642,684.267 814.201,684.267 814.76,684.267 815.319,684.267 815.879,684.267 816.438,684.267 816.997,684.267 817.556,684.267 818.116,684.267 818.675,684.267 819.234,684.267 819.793,684.267 820.353,684.267 820.912,684.267 821.471,684.267 822.03,684.267 822.59,684.267 823.149,684.267 823.708,684.267 824.267,684.267 824.827,684.267 825.386,684.267 825.945,684.267 826.504,684.267 827.064,684.267 827.623,684.267 828.182,684.267 828.741,684.267 829.301,684.267 829.86,684.267 830.419,684.267 830.978,684.267 831.538,684.267 832.097,684.267 832.656,684.267 833.215,684.267 833.775,684.267 834.334,684.267 834.893,684.267 835.452,684.267 836.012,684.267 836.571,684.267 837.13,684.267 837.689,684.267 838.249,684.267 838.808,684.267 839.367,684.267 839.926,684.267 840.486,684.267 841.045,684.267 841.604,684.267 842.163,684.267 842.723,684.267 843.282,684.267 843.841,684.267 844.4,684.267 844.96,684.267 845.519,684.267 846.078,684.267 846.637,684.267 847.197,684.267 847.756,684.267 848.315,684.267 848.874,684.267 849.434,684.267 849.993,684.267 850.552,684.267 851.111,684.267 851.671,684.267 852.23,684.267 852.789,684.267 853.348,684.267 853.908,684.267 854.467,684.267 855.026,684.267 855.585,684.267 856.145,684.267 856.704,684.267 857.263,684.267 857.822,684.267 858.382,684.267 858.941,684.267 859.5,684.267 860.059,684.267 860.619,684.267 861.178,684.267 861.737,684.267 862.296,684.267 862.856,684.267 863.415,684.267 863.974,684.267 864.533,684.267 865.093,684.267 865.652,684.267 866.211,684.267 866.77,684.267 867.33,684.267 867.889,684.267 868.448,684.267 869.007,684.267 869.567,684.267 870.126,684.267 870.685,684.267 871.244,684.267 871.804,684.267 872.363,684.267 872.922,684.267 873.481,684.267 874.041,684.267 874.6,684.267 875.159,684.267 875.718,684.267 876.278,684.267 876.837,684.267 877.396,684.267 877.955,684.267 878.515,684.267 879.074,684.267 879.633,684.267 880.192,684.267 880.752,684.267 881.311,684.267 881.87,684.267 882.429,684.267 882.989,684.267 883.548,684.267 884.107,684.267 884.666,684.267 885.226,684.267 885.785,684.267 886.344,684.267 886.903,684.267 887.463,684.267 888.022,684.267 888.581,684.267 889.14,684.267 889.7,684.267 890.259,684.267 890.818,684.267 891.377,684.267 891.937,684.267 892.496,684.267 893.055,684.267 893.614,684.267 894.174,684.267 894.733,684.267 895.292,684.267 895.851,684.267 896.411,684.267 896.97,684.267 897.529,684.267 898.088,684.267 898.648,684.267 899.207,684.267 899.766,684.267 900.325,684.267 900.885,684.267 901.444,684.267 902.003,684.267 902.562,684.267 903.122,684.267 903.681,684.267 904.24,684.267 904.799,684.267 905.359,684.267 905.918,684.267 906.477,684.267 907.036,684.267 907.596,684.267 908.155,684.267 908.714,684.267 909.273,684.267 909.833,684.267 910.392,684.267 910.951,684.267 911.51,684.267 912.07,684.267 912.629,684.267 913.188,684.267 913.747,684.267 914.307,684.267 914.866,684.267 915.425,684.267 915.984,684.267 916.544,684.267 917.103,684.267 917.662,684.267 918.221,684.267 918.781,684.267 919.34,684.267 919.899,684.267 920.458,684.267 921.018,684.267 921.577,684.267 922.136,684.267 922.695,684.267 923.255,684.267 923.814,684.267 924.373,684.267 924.932,684.267 925.492,684.267 926.051,684.267 926.61,684.267 927.169,684.267 927.729,684.267 928.288,684.267 928.847,684.267 929.406,684.267 929.966,684.267 930.525,684.267 931.084,684.267 931.644,684.267 932.203,684.267 932.762,684.267 933.321,684.267 933.881,684.267 934.44,684.267 934.999,684.267 935.558,684.267 936.118,684.267 936.677,684.267 937.236,684.267 937.795,684.267 938.355,684.267 938.914,684.267 939.473,684.267 940.032,684.267 940.592,684.267 941.151,684.267 941.71,684.267 942.269,684.267 942.829,684.267 943.388,684.267 943.947,684.267 944.506,684.267 945.066,684.267 945.625,684.267 946.184,684.267 946.743,684.267 947.303,684.267 947.862,684.267 948.421,684.267 948.98,684.267 949.54,684.267 950.099,684.267 950.658,684.267 951.217,684.267 951.777,684.267 952.336,684.267 952.895,684.267 953.454,684.267 954.014,684.267 954.573,684.267 955.132,684.267 955.691,684.267 956.251,684.267 956.81,684.267 957.369,684.267 957.928,684.267 958.488,684.267 959.047,684.267 959.606,684.267 960.165,684.267 960.725,684.267 961.284,684.267 961.843,684.267 962.402,684.267 962.962,684.267 963.521,684.267 964.08,684.267 964.639,684.267 965.199,684.267 965.758,684.267 966.317,684.267 966.876,684.267 967.436,684.267 967.995,684.267 968.554,684.267 969.113,684.267 969.673,684.267 970.232,684.267 970.791,684.267 971.35,684.267 971.91,684.267 972.469,684.267 973.028,684.267 973.587,684.267 974.147,684.267 974.706,684.267 975.265,684.267 975.824,684.267 976.384,684.267 976.943,684.267 977.502,684.267 978.061,684.267 978.621,684.267 979.18,684.267 979.739,684.267 980.298,684.267 980.858,684.267 981.417,684.267 981.976,684.267 982.535,684.267 983.095,684.267 983.654,684.267 984.213,684.267 984.772,684.267 985.332,684.267 985.891,684.267 986.45,684.267 987.009,684.267 987.569,684.267 988.128,684.267 988.687,684.267 989.246,684.267 989.806,684.267 990.365,684.267 990.924,684.267 991.483,684.267 992.043,684.267 992.602,684.267 993.161,684.267 993.72,684.267 994.28,684.267 994.839,684.267 995.398,684.267 995.957,684.267 996.517,684.267 997.076,684.267 997.635,684.267 998.194,684.267 998.754,684.267 999.313,684.267 999.872,684.267 1000.43,684.267 1000.99,684.267 1001.55,684.267 1002.11,684.267 1002.67,684.267 1003.23,684.267 1003.79,684.267 1004.35,684.267 1004.91,684.267 1005.46,684.267 1006.02,684.267 1006.58,684.267 1007.14,684.267 1007.7,684.267 1008.26,684.267 1008.82,684.267 1009.38,684.267 1009.94,684.267 1010.5,684.267 1011.06,684.267 1011.62,684.267 1012.18,684.267 1012.73,684.267 1013.29,684.267 1013.85,684.267 1014.41,684.267 1014.97,684.267 1015.53,684.267 1016.09,684.267 1016.65,684.267 1017.21,684.267 1017.77,684.267 1018.33,684.267 1018.89,684.267 1019.45,684.267 1020.01,684.267 1020.56,684.267 1021.12,684.267 1021.68,684.267 1022.24,684.267 1022.8,684.267 1023.36,684.267 1023.92,684.267 1024.48,684.267 1025.04,684.267 1025.6,684.267 1026.16,684.267 1026.72,684.267 1027.28,684.267 1027.83,684.267 1028.39,684.267 1028.95,684.267 1029.51,684.267 1030.07,684.267 1030.63,684.267 1031.19,684.267 1031.75,684.267 1032.31,684.267 1032.87,684.267 1033.43,684.267 1033.99,684.267 1034.55,684.267 1035.1,684.267 1035.66,684.267 1036.22,684.267 1036.78,684.267 1037.34,684.267 1037.9,684.267 1038.46,684.267 1039.02,684.267 1039.58,684.267 1040.14,684.267 1040.7,684.267 1041.26,684.267 1041.82,684.267 1042.38,684.267 1042.93,684.267 1043.49,684.267 1044.05,684.267 1044.61,684.267 1045.17,684.267 1045.73,684.267 1046.29,684.267 1046.85,684.267 1047.41,684.267 1047.97,684.267 1048.53,684.267 1049.09,684.267 1049.65,684.267 1050.2,684.267 1050.76,684.267 1051.32,684.267 1051.88,684.267 1052.44,684.267 1053,684.267 1053.56,684.267 1054.12,684.267 1054.68,684.267 1055.24,684.267 1055.8,684.267 1056.36,684.267 1056.92,684.267 1057.48,684.267 1058.03,684.267 1058.59,684.267 1059.15,684.267 1059.71,684.267 1060.27,684.267 1060.83,684.267 1061.39,684.267 1061.95,684.267 1062.51,684.267 1063.07,684.267 1063.63,684.267 1064.19,684.267 1064.75,684.267 1065.3,684.267 1065.86,684.267 1066.42,684.267 1066.98,684.267 1067.54,684.267 1068.1,684.267 1068.66,684.267 1069.22,684.267 1069.78,684.267 1070.34,684.267 1070.9,684.267 1071.46,684.267 1072.02,684.267 1072.57,684.267 1073.13,684.267 1073.69,684.267 1074.25,684.267 1074.81,684.267 1075.37,684.267 1075.93,684.267 1076.49,684.267 1077.05,684.267 1077.61,684.267 1078.17,684.267 1078.73,684.267 1079.29,684.267 1079.85,684.267 1080.4,684.267 1080.96,684.267 1081.52,684.267 1082.08,684.267 1082.64,684.267 1083.2,684.267 1083.76,684.267 1084.32,684.267 1084.88,684.267 1085.44,684.267 1086,684.267 1086.56,684.267 1087.12,684.267 1087.67,684.267 1088.23,684.267 1088.79,684.267 1089.35,684.267 1089.91,684.267 1090.47,684.267 1091.03,684.267 1091.59,684.267 1092.15,684.267 1092.71,684.267 1093.27,684.267 1093.83,684.267 1094.39,684.267 1094.94,684.267 1095.5,684.267 1096.06,684.267 1096.62,684.267 1097.18,684.267 1097.74,684.267 1098.3,684.267 1098.86,684.267 1099.42,684.267 1099.98,684.267 1100.54,684.267 1101.1,684.267 1101.66,684.267 1102.22,684.267 1102.77,684.267 1103.33,684.267 1103.89,684.267 1104.45,684.267 1105.01,684.267 1105.57,684.267 1106.13,684.267 1106.69,684.267 1107.25,684.267 1107.81,684.267 1108.37,684.267 1108.93,684.267 1109.49,684.267 1110.04,684.267 1110.6,684.267 1111.16,684.267 1111.72,684.267 1112.28,684.267 1112.84,684.267 1113.4,684.267 1113.96,684.267 1114.52,684.267 1115.08,684.267 1115.64,684.267 1116.2,684.267 1116.76,684.267 1117.31,684.267 1117.87,684.267 1118.43,684.267 1118.99,684.267 1119.55,684.267 1120.11,684.267 1120.67,684.267 1121.23,684.267 1121.79,684.267 1122.35,684.267 1122.91,684.267 1123.47,684.267 1124.03,684.267 1124.59,684.267 1125.14,684.267 1125.7,684.267 1126.26,684.267 1126.82,684.267 1127.38,684.267 1127.94,684.267 1128.5,684.267 1129.06,684.267 1129.62,684.267 1130.18,684.267 1130.74,684.267 1131.3,684.267 1131.86,684.267 1132.41,684.267 1132.97,684.267 1133.53,684.267 1134.09,684.267 1134.65,684.267 1135.21,684.267 1135.77,684.267 1136.33,684.267 1136.89,684.267 1137.45,684.267 1138.01,684.267 1138.57,684.267 1139.13,684.267 1139.68,684.267 1140.24,684.267 1140.8,684.267 1141.36,684.267 1141.92,684.267 1142.48,684.267 1143.04,684.267 1143.6,684.267 1144.16,684.267 1144.72,684.267 1145.28,684.267 1145.84,684.267 1146.4,684.267 1146.96,684.267 1147.51,684.267 1148.07,684.267 1148.63,684.267 1149.19,684.267 1149.75,684.267 1150.31,684.267 1150.87,684.267 1151.43,684.267 1151.99,684.267 1152.55,684.267 1153.11,684.267 1153.67,684.267 1154.23,684.267 1154.78,684.267 1155.34,684.267 1155.9,684.267 1156.46,684.267 1157.02,684.267 1157.58,684.267 1158.14,684.267 1158.7,684.267 1159.26,684.267 1159.82,684.267 1160.38,684.267 1160.94,684.267 1161.5,684.267 1162.05,684.267 1162.61,684.267 1163.17,684.267 1163.73,684.267 1164.29,684.267 1164.85,684.267 1165.41,684.267 1165.97,684.267 1166.53,684.267 1167.09,684.267 1167.65,684.267 1168.21,684.267 1168.77,684.267 1169.33,684.267 1169.88,684.267 1170.44,684.267 1171,684.267 1171.56,684.267 1172.12,684.267 1172.68,684.267 1173.24,684.267 1173.8,684.267 1174.36,684.267 1174.92,684.267 1175.48,684.267 1176.04,684.267 1176.6,684.267 1177.15,684.267 1177.71,684.267 1178.27,684.267 1178.83,684.267 1179.39,684.267 1179.95,684.267 1180.51,684.267 1181.07,684.267 1181.63,684.267 1182.19,684.267 1182.75,684.267 1183.31,684.267 1183.87,684.267 1184.43,684.267 1184.98,684.267 1185.54,684.267 1186.1,684.267 1186.66,684.267 1187.22,684.267 1187.78,684.267 1188.34,684.267 1188.9,684.267 1189.46,684.267 1190.02,684.267 1190.58,684.267 1191.14,684.267 1191.7,684.267 1192.25,684.267 1192.81,684.267 1193.37,684.267 1193.93,684.267 1194.49,684.267 1195.05,684.267 1195.61,684.267 1196.17,684.267 1196.73,684.267 1197.29,684.267 1197.85,684.267 1198.41,684.267 1198.97,684.267 1199.52,684.267 1200.08,684.267 1200.64,684.267 1201.2,684.267 1201.76,684.267 1202.32,684.267 1202.88,684.267 1203.44,684.267 1204,684.267 1204.56,684.267 1205.12,684.267 1205.68,684.267 1206.24,684.267 1206.8,684.267 1207.35,684.267 1207.91,684.267 1208.47,684.267 1209.03,684.267 1209.59,684.267 1210.15,684.267 1210.71,684.267 1211.27,684.267 1211.83,684.267 1212.39,684.267 1212.95,684.267 1213.51,684.267 1214.07,684.267 1214.62,684.267 1215.18,684.267 1215.74,684.267 1216.3,684.267 1216.86,684.267 1217.42,684.267 1217.98,684.267 1218.54,684.267 1219.1,684.267 1219.66,684.267 1220.22,684.267 1220.78,684.267 1221.34,684.267 1221.89,684.267 1222.45,684.267 1223.01,684.267 1223.57,684.267 1224.13,684.267 1224.69,684.267 1225.25,684.267 1225.81,684.267 1226.37,684.267 1226.93,684.267 1227.49,684.267 1228.05,684.267 1228.61,684.267 1229.17,684.267 1229.72,684.267 1230.28,684.267 1230.84,684.267 1231.4,684.267 1231.96,684.267 1232.52,684.267 1233.08,684.267 1233.64,684.267 1234.2,684.267 1234.76,684.267 1235.32,684.267 1235.88,684.267 1236.44,684.267 1236.99,684.267 1237.55,684.267 1238.11,684.267 1238.67,684.267 1239.23,684.267 1239.79,684.267 1240.35,684.267 1240.91,684.267 1241.47,684.267 1242.03,684.267 1242.59,684.267 1243.15,684.267 1243.71,684.267 1244.26,684.267 1244.82,684.267 1245.38,684.267 1245.94,684.267 1246.5,684.267 1247.06,684.267 1247.62,684.267 1248.18,684.267 1248.74,684.267 1249.3,684.267 1249.86,684.267 1250.42,684.267 1250.98,684.267 1251.54,684.267 1252.09,684.267 1252.65,684.267 1253.21,684.267 1253.77,684.267 1254.33,684.267 1254.89,684.267 1255.45,684.267 1256.01,684.267 1256.57,684.267 1257.13,684.267 1257.69,684.267 1258.25,684.267 1258.81,684.267 1259.36,684.267 1259.92,684.267 1260.48,684.267 1261.04,684.267 1261.6,684.267 1262.16,684.267 1262.72,684.267 1263.28,684.267 1263.84,684.267 1264.4,684.267 1264.96,684.267 1265.52,684.267 1266.08,684.267 1266.63,684.267 1267.19,684.267 1267.75,684.267 1268.31,684.267 1268.87,684.267 1269.43,684.267 1269.99,684.267 1270.55,684.267 1271.11,684.267 1271.67,684.267 1272.23,684.267 1272.79,684.267 1273.35,684.267 1273.91,684.267 1274.46,684.267 1275.02,684.267 1275.58,684.267 1276.14,684.267 1276.7,684.267 1277.26,684.267 1277.82,684.267 1278.38,684.267 1278.94,684.267 1279.5,684.267 1280.06,684.267 1280.62,684.267 1281.18,684.267 1281.73,684.267 1282.29,684.267 1282.85,684.267 1283.41,684.267 1283.97,684.267 1284.53,684.267 1285.09,684.267 1285.65,684.267 1286.21,684.267 1286.77,684.267 1287.33,684.267 1287.89,684.267 1288.45,684.267 1289,684.267 1289.56,684.267 1290.12,684.267 1290.68,684.267 1291.24,684.267 1291.8,684.267 1292.36,684.267 1292.92,684.267 1293.48,684.267 1294.04,684.267 1294.6,684.267 1295.16,684.267 1295.72,684.267 1296.28,684.267 1296.83,684.267 1297.39,684.267 1297.95,684.267 1298.51,684.267 1299.07,684.267 1299.63,684.267 1300.19,684.267 1300.75,684.267 1301.31,684.267 1301.87,684.267 1302.43,684.267 1302.99,684.267 1303.55,684.267 1304.1,684.267 1304.66,684.267 1305.22,684.267 1305.78,684.267 1306.34,684.267 1306.9,684.267 1307.46,684.267 1308.02,684.267 1308.58,684.267 1309.14,684.267 1309.7,684.267 1310.26,684.267 1310.82,684.267 1311.38,684.267 1311.93,684.267 1312.49,684.267 1313.05,684.267 1313.61,684.267 1314.17,684.267 1314.73,684.267 1315.29,684.267 1315.85,684.267 1316.41,684.267 1316.97,684.267 1317.53,684.267 1318.09,684.267 1318.65,684.267 1319.2,684.267 1319.76,684.267 1320.32,684.267 1320.88,684.267 1321.44,684.267 1322,684.267 1322.56,684.267 1323.12,684.267 1323.68,684.267 1324.24,684.267 1324.8,684.267 1325.36,684.267 1325.92,684.267 1326.47,684.267 1327.03,684.267 1327.59,684.267 1328.15,684.267 1328.71,684.267 1329.27,684.267 1329.83,684.267 1330.39,684.267 1330.95,684.267 1331.51,684.267 1332.07,684.267 1332.63,684.267 1333.19,684.267 1333.75,684.267 1334.3,684.267 1334.86,684.267 1335.42,684.267 1335.98,684.267 1336.54,684.267 1337.1,684.267 1337.66,684.267 1338.22,684.267 1338.78,684.267 1339.34,684.267 1339.9,684.267 1340.46,684.267 1341.02,684.267 1341.57,684.267 1342.13,684.267 1342.69,684.267 1343.25,684.267 1343.81,684.267 1344.37,684.267 1344.93,684.267 1345.49,684.267 1346.05,684.267 1346.61,684.267 1347.17,684.267 1347.73,684.267 1348.29,684.267 1348.84,684.267 1349.4,684.267 1349.96,684.267 1350.52,684.267 1351.08,684.267 1351.64,684.267 1352.2,684.267 1352.76,684.267 1353.32,684.267 1353.88,684.267 1354.44,684.267 1355,684.267 1355.56,684.267 1356.12,684.267 1356.67,684.267 1357.23,684.267 1357.79,684.267 1358.35,684.267 1358.91,684.267 1359.47,684.267 1360.03,684.267 1360.59,684.267 1361.15,684.267 1361.71,684.267 1362.27,684.267 1362.83,684.267 1363.39,684.267 1363.94,684.267 1364.5,684.267 1365.06,684.267 1365.62,684.267 1366.18,684.267 1366.74,684.267 1367.3,684.267 1367.86,684.267 1368.42,684.267 1368.98,684.267 1369.54,684.267 1370.1,684.267 1370.66,684.267 1371.21,684.267 1371.77,684.267 1372.33,684.267 1372.89,684.267 1373.45,684.267 1374.01,684.267 1374.57,684.267 1375.13,684.267 1375.69,684.267 1376.25,684.267 1376.81,684.267 1377.37,684.267 1377.93,684.267 1378.49,684.267 1379.04,684.267 1379.6,684.267 1380.16,684.267 1380.72,684.267 1381.28,684.267 1381.84,684.267 1382.4,684.267 1382.96,684.267 1383.52,684.267 1384.08,684.267 1384.64,684.267 1385.2,684.267 1385.76,684.267 1386.31,684.267 1386.87,684.267 1387.43,684.267 1387.99,684.267 1388.55,684.267 1389.11,684.267 1389.67,684.267 1390.23,684.267 1390.79,684.267 1391.35,684.267 1391.91,684.267 1392.47,684.267 1393.03,684.267 1393.58,684.267 1394.14,684.267 1394.7,684.267 1395.26,684.267 1395.82,684.267 1396.38,684.267 1396.94,684.267 1397.5,684.267 1398.06,684.267 1398.62,684.267 1399.18,684.267 1399.74,684.267 1400.3,684.267 1400.86,684.267 1401.41,684.267 1401.97,684.267 1402.53,684.267 1403.09,684.267 1403.65,684.267 1404.21,684.267 1404.77,684.267 1405.33,684.267 1405.89,684.267 1406.45,684.267 1407.01,684.267 1407.57,684.267 1408.13,684.267 1408.68,684.267 1409.24,684.267 1409.8,684.267 1410.36,684.267 1410.92,684.267 1411.48,684.267 1412.04,684.267 1412.6,684.267 1413.16,684.267 1413.72,684.267 1414.28,684.267 1414.84,684.267 1415.4,684.267 1415.95,684.267 1416.51,684.267 1417.07,684.267 1417.63,684.267 1418.19,684.267 1418.75,684.267 1419.31,684.267 1419.87,684.267 1420.43,684.267 1420.99,684.267 1421.55,684.267 1422.11,684.267 1422.67,684.267 1423.23,684.267 1423.78,684.267 1424.34,684.267 1424.9,684.267 1425.46,684.267 1426.02,684.267 1426.58,684.267 1427.14,684.267 1427.7,684.267 1428.26,684.267 1428.82,684.267 1429.38,684.267 1429.94,684.267 1430.5,684.267 1431.05,684.267 1431.61,684.267 1432.17,684.267 1432.73,684.267 1433.29,684.267 1433.85,684.267 1434.41,684.267 1434.97,684.267 1435.53,684.267 1436.09,684.267 1436.65,684.267 1437.21,684.267 1437.77,684.267 1438.33,684.267 1438.88,684.267 1439.44,684.267 1440,684.267 1440.56,684.267 1441.12,684.267 1441.68,684.267 1442.24,684.267 1442.8,684.267 1443.36,684.267 1443.92,684.267 1444.48,684.267 1445.04,684.267 1445.6,684.267 1446.15,684.267 1446.71,684.267 1447.27,684.267 1447.83,684.267 1448.39,684.267 1448.95,684.267 1449.51,684.267 1450.07,684.267 1450.63,684.267 1451.19,684.267 1451.75,684.267 1452.31,684.267 1452.87,684.267 1453.42,684.267 1453.98,684.267 1454.54,684.267 1455.1,684.267 1455.66,684.267 1456.22,684.267 1456.78,684.267 1457.34,684.267 1457.9,684.267 1458.46,684.267 1459.02,684.267 1459.58,684.267 1460.14,684.267 1460.7,684.267 1461.25,684.267 1461.81,684.267 1462.37,684.267 1462.93,684.267 1463.49,684.267 1464.05,684.267 1464.61,684.267 1465.17,684.267 1465.73,684.267 1466.29,684.267 1466.85,684.267 1467.41,684.267 1467.97,684.267 1468.52,684.267 1469.08,684.267 1469.64,684.267 1470.2,684.267 1470.76,684.267 1471.32,684.267 1471.88,684.267 1472.44,684.267 1473,684.267 1473.56,684.267 1474.12,684.267 1474.68,684.267 1475.24,684.267 1475.79,684.267 1476.35,684.267 1476.91,684.267 1477.47,684.267 1478.03,684.267 1478.59,684.267 1479.15,684.267 1479.71,684.267 1480.27,684.267 1480.83,684.267 1481.39,684.267 1481.95,684.267 1482.51,684.267 1483.07,684.267 1483.62,684.267 1484.18,684.267 1484.74,684.267 1485.3,684.267 1485.86,684.267 1486.42,684.267 1486.98,684.267 1487.54,684.267 1488.1,684.267 1488.66,684.267 1489.22,684.267 1489.78,684.267 1490.34,684.267 1490.89,684.267 1491.45,684.267 1492.01,684.267 1492.57,684.267 1493.13,684.267 1493.69,684.267 1494.25,684.267 1494.81,684.267 1495.37,684.267 1495.93,684.267 1496.49,684.267 1497.05,684.267 1497.61,684.267 1498.16,684.267 1498.72,684.267 1499.28,684.267 1499.84,684.267 1500.4,684.267 1500.96,684.267 1501.52,684.267 1502.08,684.267 1502.64,684.267 1503.2,684.267 1503.76,684.267 1504.32,684.267 1504.88,684.267 1505.44,684.267 1505.99,684.267 1506.55,684.267 1507.11,684.267 1507.67,684.267 1508.23,684.267 1508.79,684.267 1509.35,684.267 1509.91,684.267 1510.47,684.267 1511.03,684.267 1511.59,684.267 1512.15,684.267 1512.71,684.267 1513.26,684.267 1513.82,684.267 1514.38,684.267 1514.94,684.267 1515.5,684.267 1516.06,684.267 1516.62,684.267 1517.18,684.267 1517.74,684.267 1518.3,684.267 1518.86,684.267 1519.42,684.267 1519.98,684.267 1520.53,684.267 1521.09,684.267 1521.65,684.267 1522.21,684.267 1522.77,684.267 1523.33,684.267 1523.89,684.267 1524.45,684.267 1525.01,684.267 1525.57,684.267 1526.13,684.267 1526.69,684.267 1527.25,684.267 1527.81,684.267 1528.36,684.267 1528.92,684.267 1529.48,684.267 1530.04,684.267 1530.6,684.267 1531.16,684.267 1531.72,684.267 1532.28,684.267 1532.84,684.267 1533.4,684.267 1533.96,684.267 1534.52,684.267 1535.08,684.267 1535.63,684.267 1536.19,684.267 1536.75,684.267 1537.31,684.267 1537.87,684.267 1538.43,684.267 1538.99,684.267 1539.55,684.267 1540.11,684.267 1540.67,684.267 1541.23,684.267 1541.79,684.267 1542.35,684.267 1542.9,684.267 1543.46,684.267 1544.02,684.267 1544.58,684.267 1545.14,684.267 1545.7,684.267 1546.26,684.267 1546.82,684.267 1547.38,684.267 1547.94,684.267 1548.5,684.267 1549.06,684.267 1549.62,684.267 1550.18,684.267 1550.73,684.267 1551.29,684.267 1551.85,684.267 1552.41,684.267 1552.97,684.267 1553.53,684.267 1554.09,684.267 1554.65,684.267 1555.21,684.267 1555.77,684.267 1556.33,684.267 1556.89,684.267 1557.45,684.267 1558,684.267 1558.56,684.267 1559.12,684.267 1559.68,684.267 1560.24,684.267 1560.8,684.267 1561.36,684.267 1561.92,684.267 1562.48,684.267 1563.04,684.267 1563.6,684.267 1564.16,684.267 1564.72,684.267 1565.28,684.267 1565.83,684.267 1566.39,684.267 1566.95,684.267 1567.51,684.267 1568.07,684.267 1568.63,684.267 1569.19,684.267 1569.75,684.267 1570.31,684.267 1570.87,684.267 1571.43,684.267 1571.99,684.267 1572.55,684.267 1573.1,684.267 1573.66,684.267 1574.22,684.267 1574.78,684.267 1575.34,684.267 1575.9,684.267 1576.46,684.267 1577.02,684.267 1577.58,684.267 1578.14,684.267 1578.7,684.267 1579.26,684.267 1579.82,684.267 1580.37,684.267 1580.93,684.267 1581.49,684.267 1582.05,684.267 1582.61,684.267 1583.17,684.267 1583.73,684.267 1584.29,684.267 1584.85,684.267 1585.41,684.267 1585.97,684.267 1586.53,684.267 1587.09,684.267 1587.65,684.267 1588.2,684.267 1588.76,684.267 1589.32,684.267 1589.88,684.267 1590.44,684.267 1591,684.267 1591.56,684.267 1592.12,684.267 1592.68,684.267 1593.24,684.267 1593.8,684.267 1594.36,684.267 1594.92,684.267 1595.47,684.267 1596.03,684.267 1596.59,684.267 1597.15,684.267 1597.71,684.267 1598.27,684.267 1598.83,684.267 1599.39,684.267 1599.95,684.267 1600.51,684.267 1601.07,684.267 1601.63,684.267 1602.19,684.267 1602.74,684.267 1603.3,684.267 1603.86,684.267 1604.42,684.267 1604.98,684.267 1605.54,684.267 1606.1,684.267 1606.66,684.267 1607.22,684.267 1607.78,684.267 1608.34,684.267 1608.9,684.267 1609.46,684.267 1610.02,684.267 1610.57,684.267 1611.13,684.267 1611.69,684.267 1612.25,684.267 1612.81,684.267 1613.37,684.267 1613.93,684.267 1614.49,684.267 1615.05,684.267 1615.61,684.267 1616.17,684.267 1616.73,684.267 1617.29,684.267 1617.84,684.267 1618.4,684.267 1618.96,684.267 1619.52,684.267 1620.08,684.267 1620.64,684.267 1621.2,684.267 1621.76,684.267 1622.32,684.267 1622.88,684.267 1623.44,684.267 1624,684.267 1624.56,684.267 1625.11,684.267 1625.67,684.267 1626.23,684.267 1626.79,684.267 1627.35,684.267 1627.91,684.267 1628.47,684.267 1629.03,684.267 1629.59,684.267 1630.15,684.267 1630.71,684.267 1631.27,684.267 1631.83,684.267 1632.39,684.267 1632.94,684.267 1633.5,684.267 1634.06,684.267 1634.62,684.267 1635.18,684.267 1635.74,684.267 1636.3,684.267 1636.86,684.267 1637.42,684.267 1637.98,684.267 1638.54,684.267 1639.1,684.267 1639.66,684.267 1640.21,684.267 1640.77,684.267 1641.33,684.267 1641.89,684.267 1642.45,684.267 1643.01,684.267 1643.57,684.267 1644.13,684.267 1644.69,684.267 1645.25,684.267 1645.81,684.267 1646.37,684.267 1646.93,684.267 1647.48,684.267 1648.04,684.267 1648.6,684.267 1649.16,684.267 1649.72,684.267 1650.28,684.267 1650.84,684.267 1651.4,684.267 1651.96,684.267 1652.52,684.267 1653.08,684.267 1653.64,684.267 1654.2,684.267 1654.76,684.267 1655.31,684.267 1655.87,684.267 1656.43,684.267 1656.99,684.267 1657.55,684.267 1658.11,684.267 1658.67,684.267 1659.23,684.267 1659.79,684.267 1660.35,684.267 1660.91,684.267 1661.47,684.267 1662.03,684.267 1662.58,684.267 1663.14,684.267 1663.7,684.267 1664.26,684.267 1664.82,684.267 1665.38,684.267 1665.94,684.267 1666.5,684.267 1667.06,684.267 1667.62,684.267 1668.18,684.267 1668.74,684.267 1669.3,684.267 1669.85,684.267 1670.41,684.267 1670.97,684.267 1671.53,684.267 1672.09,684.267 1672.65,684.267 1673.21,684.267 1673.77,684.267 1674.33,684.267 1674.89,684.267 1675.45,684.267 1676.01,684.267 1676.57,684.267 1677.13,684.267 1677.68,684.267 1678.24,684.267 1678.8,684.267 1679.36,684.267 1679.92,684.267 1680.48,684.267 1681.04,684.267 1681.6,684.267 1682.16,684.267 1682.72,684.267 1683.28,684.267 1683.84,684.267 1684.4,684.267 1684.95,684.267 1685.51,684.267 1686.07,684.267 1686.63,684.267 1687.19,684.267 1687.75,684.267 1688.31,684.267 1688.87,684.267 1689.43,684.267 1689.99,684.267 1690.55,684.267 1691.11,684.267 1691.67,684.267 1692.23,684.267 1692.78,684.267 1693.34,684.267 1693.9,684.267 1694.46,684.267 1695.02,684.267 1695.58,684.267 1696.14,684.267 1696.7,684.267 1697.26,684.267 1697.82,684.267 1698.38,684.267 1698.94,684.267 1699.5,684.267 1700.05,684.267 1700.61,684.267 1701.17,684.267 1701.73,684.267 1702.29,684.267 1702.85,684.267 1703.41,684.267 1703.97,684.267 1704.53,684.267 1705.09,684.267 1705.65,684.267 1706.21,684.267 1706.77,684.267 1707.32,684.267 1707.88,684.267 1708.44,684.267 1709,684.267 1709.56,684.267 1710.12,684.267 1710.68,684.267 1711.24,684.267 1711.8,684.267 1712.36,684.267 1712.92,684.267 1713.48,684.267 1714.04,684.267 1714.6,684.267 1715.15,684.267 1715.71,684.267 1716.27,684.267 1716.83,684.267 1717.39,684.267 1717.95,684.267 1718.51,684.267 1719.07,684.267 1719.63,684.267 1720.19,684.267 1720.75,684.267 1721.31,684.267 1721.87,684.267 1722.42,684.267 1722.98,684.267 1723.54,684.267 1724.1,684.267 1724.66,684.267 1725.22,684.267 1725.78,684.267 1726.34,684.267 1726.9,684.267 1727.46,684.267 1728.02,684.267 1728.58,684.267 1729.14,684.267 1729.69,684.267 1730.25,684.267 1730.81,684.267 1731.37,684.267 1731.93,684.267 1732.49,684.267 1733.05,684.267 1733.61,684.267 1734.17,684.267 1734.73,684.267 1735.29,684.267 1735.85,684.267 1736.41,684.267 1736.97,684.267 1737.52,684.267 1738.08,684.267 1738.64,684.267 1739.2,684.267 1739.76,684.267 1740.32,684.267 1740.88,684.267 1741.44,684.267 1742,684.267 1742.56,684.267 1743.12,684.267 1743.68,684.267 1744.24,684.267 1744.79,684.267 1745.35,684.267 1745.91,684.267 1746.47,684.267 1747.03,684.267 1747.59,684.267 1748.15,684.267 1748.71,684.267 1749.27,684.267 1749.83,684.267 1750.39,684.267 1750.95,684.267 1751.51,684.267 1752.06,684.267 1752.62,684.267 1753.18,684.267 1753.74,684.267 1754.3,684.267 1754.86,684.267 1755.42,684.267 1755.98,684.267 1756.54,684.267 1757.1,684.267 1757.66,684.267 1758.22,684.267 1758.78,684.267 1759.34,684.267 1759.89,684.267 1760.45,684.267 1761.01,684.267 1761.57,684.267 1762.13,684.267 1762.69,684.267 1763.25,684.267 1763.81,684.267 1764.37,684.267 1764.93,684.267 1765.49,684.267 1766.05,684.267 1766.61,684.267 1767.16,684.267 1767.72,684.267 1768.28,684.267 1768.84,684.267 1769.4,684.267 1769.96,684.267 1770.52,684.267 1771.08,684.267 1771.64,684.267 1772.2,684.267 1772.76,684.267 1773.32,684.267 1773.88,684.267 1774.43,684.267 1774.99,684.267 1775.55,684.267 1776.11,684.267 1776.67,684.267 1777.23,684.267 1777.79,684.267 1778.35,684.267 1778.91,684.267 1779.47,684.267 1780.03,684.267 1780.59,684.267 1781.15,684.267 1781.71,684.267 1782.26,684.267 1782.82,684.267 1783.38,684.267 1783.94,684.267 1784.5,684.267 1785.06,684.267 1785.62,684.267 1786.18,684.267 1786.74,684.267 1787.3,684.267 1787.86,684.267 1788.42,684.267 1788.98,684.267 1789.53,684.267 1790.09,684.267 1790.65,684.267 1791.21,684.267 1791.77,684.267 1792.33,684.267 1792.89,684.267 1793.45,684.267 1794.01,684.267 1794.57,684.267 1795.13,684.267 1795.69,684.267 1796.25,684.267 1796.8,684.267 1797.36,684.267 1797.92,684.267 1798.48,684.267 1799.04,684.267 1799.6,684.267 1800.16,684.267 1800.72,684.267 1801.28,684.267 1801.84,684.267 1802.4,684.267 1802.96,684.267 1803.52,684.267 1804.08,684.267 1804.63,684.267 1805.19,684.267 1805.75,684.267 1806.31,684.267 1806.87,684.267 1807.43,684.267 1807.99,684.267 1808.55,684.267 1809.11,684.267 1809.67,684.267 1810.23,684.267 1810.79,684.267 1811.35,684.267 1811.9,684.267 1812.46,684.267 1813.02,684.267 1813.58,684.267 1814.14,684.267 1814.7,684.267 1815.26,684.267 1815.82,684.267 1816.38,684.267 1816.94,684.267 1817.5,684.267 1818.06,684.267 1818.62,684.267 1819.18,684.267 1819.73,684.267 1820.29,684.267 1820.85,684.267 1821.41,684.267 1821.97,684.267 1822.53,684.267 1823.09,684.267 1823.65,684.267 1824.21,684.267 1824.77,684.267 1825.33,684.267 1825.89,684.267 1826.45,684.267 1827,684.267 1827.56,684.267 1828.12,684.267 1828.68,684.267 1829.24,684.267 1829.8,684.267 1830.36,684.267 1830.92,684.267 1831.48,684.267 1832.04,684.267 1832.6,684.267 1833.16,684.267 1833.72,684.267 1834.27,684.267 1834.83,684.267 1835.39,684.267 1835.95,684.267 1836.51,684.267 1837.07,684.267 1837.63,684.267 1838.19,684.267 \"/>\n<path clip-path=\"url(#clip173)\" d=\"M720.247 684.765 L720.806 684.765 L721.365 684.765 L721.924 684.765 L722.484 684.765 L723.043 684.765 L723.602 684.765 L724.161 684.765 L724.721 684.765 L725.28 684.765 L725.839 684.765 L726.398 684.765 L726.958 684.765 L727.517 684.765 L728.076 684.765 L728.635 684.765 L729.195 684.765 L729.754 684.765 L730.313 684.765 L730.872 684.765 L731.432 684.765 L731.991 684.765 L732.55 684.765 L733.109 684.765 L733.669 684.765 L734.228 684.765 L734.787 684.765 L735.346 684.765 L735.906 684.765 L736.465 684.765 L737.024 684.765 L737.583 684.765 L738.143 684.765 L738.702 684.765 L739.261 684.765 L739.82 684.765 L740.38 684.765 L740.939 684.765 L741.498 684.765 L742.057 684.765 L742.617 684.765 L743.176 684.765 L743.735 684.765 L744.294 684.765 L744.854 684.765 L745.413 684.765 L745.972 684.765 L746.531 684.765 L747.091 684.765 L747.65 684.765 L748.209 684.765 L748.768 684.765 L749.328 684.765 L749.887 684.765 L750.446 684.765 L751.005 684.765 L751.565 684.765 L752.124 684.765 L752.683 684.765 L753.242 684.765 L753.802 684.765 L754.361 684.765 L754.92 684.765 L755.479 684.765 L756.039 684.765 L756.598 684.765 L757.157 684.765 L757.716 684.765 L758.276 684.765 L758.835 684.765 L759.394 684.765 L759.953 684.765 L760.513 684.765 L761.072 684.765 L761.631 684.765 L762.19 684.765 L762.75 684.765 L763.309 684.765 L763.868 684.765 L764.427 684.765 L764.987 684.765 L765.546 684.765 L766.105 684.765 L766.664 684.765 L767.224 684.765 L767.783 684.765 L768.342 684.765 L768.901 684.765 L769.461 684.765 L770.02 684.765 L770.579 684.765 L771.138 684.765 L771.698 684.765 L772.257 684.765 L772.816 684.765 L773.375 684.765 L773.935 684.765 L774.494 684.765 L775.053 684.765 L775.612 684.765 L776.172 684.765 L776.731 684.765 L777.29 684.765 L777.849 684.765 L778.409 684.765 L778.968 684.765 L779.527 684.765 L780.086 684.765 L780.646 684.765 L781.205 684.765 L781.764 684.765 L782.323 684.765 L782.883 684.765 L783.442 684.765 L784.001 684.765 L784.56 684.765 L785.12 684.765 L785.679 684.765 L786.238 684.765 L786.797 684.765 L787.357 684.765 L787.916 684.765 L788.475 684.765 L789.034 684.765 L789.594 684.765 L790.153 684.765 L790.712 684.765 L791.271 684.765 L791.831 684.765 L792.39 684.765 L792.949 684.765 L793.508 684.765 L794.068 684.765 L794.627 684.765 L795.186 684.765 L795.745 684.765 L796.305 684.765 L796.864 684.765 L797.423 684.765 L797.982 684.765 L798.542 684.765 L799.101 684.765 L799.66 684.765 L800.219 684.765 L800.779 684.765 L801.338 684.765 L801.897 684.765 L802.456 684.765 L803.016 684.765 L803.575 684.765 L804.134 684.765 L804.693 684.765 L805.253 684.765 L805.812 684.765 L806.371 684.765 L806.931 684.765 L807.49 684.765 L808.049 684.765 L808.608 684.765 L809.168 684.765 L809.727 684.765 L810.286 684.765 L810.845 684.765 L811.405 684.765 L811.964 684.765 L812.523 684.765 L813.082 684.765 L813.642 684.765 L814.201 684.765 L814.76 684.765 L815.319 684.765 L815.879 684.765 L816.438 684.765 L816.997 684.765 L817.556 684.765 L818.116 684.765 L818.675 684.765 L819.234 684.765 L819.793 684.765 L820.353 684.765 L820.912 684.765 L821.471 684.765 L822.03 684.765 L822.59 684.765 L823.149 684.765 L823.708 684.765 L824.267 684.765 L824.827 684.765 L825.386 684.765 L825.945 684.765 L826.504 684.765 L827.064 684.765 L827.623 684.765 L828.182 684.765 L828.741 684.765 L829.301 684.765 L829.86 684.765 L830.419 684.765 L830.978 684.765 L831.538 684.765 L832.097 684.765 L832.656 684.765 L833.215 684.765 L833.775 684.765 L834.334 684.765 L834.893 684.765 L835.452 684.765 L836.012 684.765 L836.571 684.765 L837.13 684.765 L837.689 684.765 L838.249 684.765 L838.808 684.765 L839.367 684.765 L839.926 684.765 L840.486 684.765 L841.045 684.765 L841.604 684.765 L842.163 684.765 L842.723 684.765 L843.282 684.765 L843.841 684.765 L844.4 684.765 L844.96 684.765 L845.519 684.765 L846.078 684.765 L846.637 684.765 L847.197 684.765 L847.756 684.765 L848.315 684.765 L848.874 684.765 L849.434 684.765 L849.993 684.765 L850.552 684.765 L851.111 684.765 L851.671 684.765 L852.23 684.765 L852.789 684.765 L853.348 684.765 L853.908 684.765 L854.467 684.765 L855.026 684.765 L855.585 684.765 L856.145 684.765 L856.704 684.765 L857.263 684.765 L857.822 684.765 L858.382 684.765 L858.941 684.765 L859.5 684.765 L860.059 684.765 L860.619 684.765 L861.178 684.765 L861.737 684.765 L862.296 684.765 L862.856 684.765 L863.415 684.765 L863.974 684.765 L864.533 684.765 L865.093 684.765 L865.652 684.765 L866.211 684.765 L866.77 684.765 L867.33 684.765 L867.889 684.765 L868.448 684.765 L869.007 684.765 L869.567 684.765 L870.126 684.765 L870.685 684.765 L871.244 684.765 L871.804 684.765 L872.363 684.765 L872.922 684.765 L873.481 684.765 L874.041 684.765 L874.6 684.765 L875.159 684.765 L875.718 684.765 L876.278 684.765 L876.837 684.765 L877.396 684.765 L877.955 684.765 L878.515 684.765 L879.074 684.765 L879.633 684.765 L880.192 684.765 L880.752 684.765 L881.311 684.765 L881.87 684.765 L882.429 684.765 L882.989 684.765 L883.548 684.765 L884.107 684.765 L884.666 684.765 L885.226 684.765 L885.785 684.765 L886.344 684.765 L886.903 684.765 L887.463 684.765 L888.022 684.765 L888.581 684.765 L889.14 684.765 L889.7 684.765 L890.259 684.765 L890.818 684.765 L891.377 684.765 L891.937 684.765 L892.496 684.765 L893.055 684.765 L893.614 684.765 L894.174 684.765 L894.733 684.765 L895.292 684.765 L895.851 684.765 L896.411 684.765 L896.97 684.765 L897.529 684.765 L898.088 684.765 L898.648 684.765 L899.207 684.765 L899.766 684.765 L900.325 684.765 L900.885 684.765 L901.444 684.765 L902.003 684.765 L902.562 684.765 L903.122 684.765 L903.681 684.765 L904.24 684.765 L904.799 684.765 L905.359 684.765 L905.918 684.765 L906.477 684.765 L907.036 684.765 L907.596 684.765 L908.155 684.765 L908.714 684.765 L909.273 684.765 L909.833 684.765 L910.392 684.765 L910.951 684.765 L911.51 684.765 L912.07 684.765 L912.629 684.765 L913.188 684.765 L913.747 684.765 L914.307 684.765 L914.866 684.765 L915.425 684.765 L915.984 684.765 L916.544 684.765 L917.103 684.765 L917.662 684.765 L918.221 684.765 L918.781 684.765 L919.34 684.765 L919.899 684.765 L920.458 684.765 L921.018 684.765 L921.577 684.765 L922.136 684.765 L922.695 684.765 L923.255 684.765 L923.814 684.765 L924.373 684.765 L924.932 684.765 L925.492 684.765 L926.051 684.765 L926.61 684.765 L927.169 684.765 L927.729 684.765 L928.288 684.765 L928.847 684.765 L929.406 684.765 L929.966 684.765 L930.525 684.765 L931.084 684.765 L931.644 684.765 L932.203 684.765 L932.762 684.765 L933.321 684.765 L933.881 684.765 L934.44 684.765 L934.999 684.765 L935.558 684.765 L936.118 684.765 L936.677 684.765 L937.236 684.765 L937.795 684.765 L938.355 684.765 L938.914 684.765 L939.473 684.765 L940.032 684.765 L940.592 684.765 L941.151 684.765 L941.71 684.765 L942.269 684.765 L942.829 684.765 L943.388 684.765 L943.947 684.765 L944.506 684.765 L945.066 684.765 L945.625 684.765 L946.184 684.765 L946.743 684.765 L947.303 684.765 L947.862 684.765 L948.421 684.765 L948.98 684.765 L949.54 684.765 L950.099 684.765 L950.658 684.765 L951.217 684.765 L951.777 684.765 L952.336 684.765 L952.895 684.765 L953.454 684.765 L954.014 684.765 L954.573 684.765 L955.132 684.765 L955.691 684.765 L956.251 684.765 L956.81 684.765 L957.369 684.765 L957.928 684.765 L958.488 684.765 L959.047 684.765 L959.606 684.765 L960.165 684.765 L960.725 684.765 L961.284 684.765 L961.843 684.765 L962.402 684.765 L962.962 684.765 L963.521 684.765 L964.08 684.765 L964.639 684.765 L965.199 684.765 L965.758 684.765 L966.317 684.765 L966.876 684.765 L967.436 684.765 L967.995 684.765 L968.554 684.765 L969.113 684.765 L969.673 684.765 L970.232 684.765 L970.791 684.765 L971.35 684.765 L971.91 684.765 L972.469 684.765 L973.028 684.765 L973.587 684.765 L974.147 684.765 L974.706 684.765 L975.265 684.765 L975.824 684.765 L976.384 684.765 L976.943 684.765 L977.502 684.765 L978.061 684.765 L978.621 684.765 L979.18 684.765 L979.739 684.765 L980.298 684.765 L980.858 684.765 L981.417 684.765 L981.976 684.765 L982.535 684.765 L983.095 684.765 L983.654 684.765 L984.213 684.765 L984.772 684.765 L985.332 684.765 L985.891 684.765 L986.45 684.765 L987.009 684.765 L987.569 684.765 L988.128 684.765 L988.687 684.765 L989.246 684.765 L989.806 684.765 L990.365 684.765 L990.924 684.765 L991.483 684.765 L992.043 684.765 L992.602 684.765 L993.161 684.765 L993.72 684.765 L994.28 684.765 L994.839 684.765 L995.398 684.765 L995.957 684.765 L996.517 684.765 L997.076 684.765 L997.635 684.765 L998.194 684.765 L998.754 684.765 L999.313 684.765 L999.872 684.765 L1000.43 684.765 L1000.99 684.765 L1001.55 684.765 L1002.11 684.765 L1002.67 684.765 L1003.23 684.765 L1003.79 684.765 L1004.35 684.765 L1004.91 684.765 L1005.46 684.765 L1006.02 684.765 L1006.58 684.765 L1007.14 684.765 L1007.7 684.765 L1008.26 684.765 L1008.82 684.765 L1009.38 684.765 L1009.94 684.765 L1010.5 684.765 L1011.06 684.765 L1011.62 684.765 L1012.18 684.765 L1012.73 684.765 L1013.29 684.765 L1013.85 684.765 L1014.41 684.765 L1014.97 684.765 L1015.53 684.765 L1016.09 684.765 L1016.65 684.765 L1017.21 684.765 L1017.77 684.765 L1018.33 684.765 L1018.89 684.765 L1019.45 684.765 L1020.01 684.765 L1020.56 684.765 L1021.12 684.765 L1021.68 684.765 L1022.24 684.765 L1022.8 684.765 L1023.36 684.765 L1023.92 684.765 L1024.48 684.765 L1025.04 684.765 L1025.6 684.765 L1026.16 684.765 L1026.72 684.765 L1027.28 684.765 L1027.83 684.765 L1028.39 684.765 L1028.95 684.765 L1029.51 684.765 L1030.07 684.765 L1030.63 684.765 L1031.19 684.765 L1031.75 684.765 L1032.31 684.765 L1032.87 684.765 L1033.43 684.765 L1033.99 684.765 L1034.55 684.765 L1035.1 684.765 L1035.66 684.765 L1036.22 684.765 L1036.78 684.765 L1037.34 684.765 L1037.9 684.765 L1038.46 684.765 L1039.02 684.765 L1039.58 684.765 L1040.14 684.765 L1040.7 684.765 L1041.26 684.765 L1041.82 684.765 L1042.38 684.765 L1042.93 684.765 L1043.49 684.765 L1044.05 684.765 L1044.61 684.765 L1045.17 684.765 L1045.73 684.765 L1046.29 684.765 L1046.85 684.765 L1047.41 684.765 L1047.97 684.765 L1048.53 684.765 L1049.09 684.765 L1049.65 684.765 L1050.2 684.765 L1050.76 684.765 L1051.32 684.765 L1051.88 684.765 L1052.44 684.765 L1053 684.765 L1053.56 684.765 L1054.12 684.765 L1054.68 684.765 L1055.24 684.765 L1055.8 684.765 L1056.36 684.765 L1056.92 684.765 L1057.48 684.765 L1058.03 684.765 L1058.59 684.765 L1059.15 684.765 L1059.71 684.765 L1060.27 684.765 L1060.83 684.765 L1061.39 684.765 L1061.95 684.765 L1062.51 684.765 L1063.07 684.765 L1063.63 684.765 L1064.19 684.765 L1064.75 684.765 L1065.3 684.765 L1065.86 684.765 L1066.42 684.765 L1066.98 684.765 L1067.54 684.765 L1068.1 684.765 L1068.66 684.765 L1069.22 684.765 L1069.78 684.765 L1070.34 684.765 L1070.9 684.765 L1071.46 684.765 L1072.02 684.765 L1072.57 684.765 L1073.13 684.765 L1073.69 684.765 L1074.25 684.765 L1074.81 684.765 L1075.37 684.765 L1075.93 684.765 L1076.49 684.765 L1077.05 684.765 L1077.61 684.765 L1078.17 684.765 L1078.73 684.765 L1079.29 684.765 L1079.85 684.765 L1080.4 684.765 L1080.96 684.765 L1081.52 684.765 L1082.08 684.765 L1082.64 684.765 L1083.2 684.765 L1083.76 684.765 L1084.32 684.765 L1084.88 684.765 L1085.44 684.765 L1086 684.765 L1086.56 684.765 L1087.12 684.765 L1087.67 684.765 L1088.23 684.765 L1088.79 684.765 L1089.35 684.765 L1089.91 684.765 L1090.47 684.765 L1091.03 684.765 L1091.59 684.765 L1092.15 684.765 L1092.71 684.765 L1093.27 684.765 L1093.83 684.765 L1094.39 684.765 L1094.94 684.765 L1095.5 684.765 L1096.06 684.765 L1096.62 684.765 L1097.18 684.765 L1097.74 684.765 L1098.3 684.765 L1098.86 684.765 L1099.42 684.765 L1099.98 684.765 L1100.54 684.765 L1101.1 684.765 L1101.66 684.765 L1102.22 684.765 L1102.77 684.765 L1103.33 684.765 L1103.89 684.765 L1104.45 684.765 L1105.01 684.765 L1105.57 684.765 L1106.13 684.765 L1106.69 684.765 L1107.25 684.765 L1107.81 684.765 L1108.37 684.765 L1108.93 684.765 L1109.49 684.765 L1110.04 684.765 L1110.6 684.765 L1111.16 684.765 L1111.72 684.765 L1112.28 684.765 L1112.84 684.765 L1113.4 684.765 L1113.96 684.765 L1114.52 684.765 L1115.08 684.765 L1115.64 684.765 L1116.2 684.765 L1116.76 684.765 L1117.31 684.765 L1117.87 684.765 L1118.43 684.765 L1118.99 684.765 L1119.55 684.765 L1120.11 684.765 L1120.67 684.765 L1121.23 684.765 L1121.79 684.765 L1122.35 684.765 L1122.91 684.765 L1123.47 684.765 L1124.03 684.765 L1124.59 684.765 L1125.14 684.765 L1125.7 684.765 L1126.26 684.765 L1126.82 684.765 L1127.38 684.765 L1127.94 684.765 L1128.5 684.765 L1129.06 684.765 L1129.62 684.765 L1130.18 684.765 L1130.74 684.765 L1131.3 684.765 L1131.86 684.765 L1132.41 684.765 L1132.97 684.765 L1133.53 684.765 L1134.09 684.765 L1134.65 684.765 L1135.21 684.765 L1135.77 684.765 L1136.33 684.765 L1136.89 684.765 L1137.45 684.765 L1138.01 684.765 L1138.57 684.765 L1139.13 684.765 L1139.68 684.765 L1140.24 684.765 L1140.8 684.765 L1141.36 684.765 L1141.92 684.765 L1142.48 684.765 L1143.04 684.765 L1143.6 684.765 L1144.16 684.765 L1144.72 684.765 L1145.28 684.765 L1145.84 684.765 L1146.4 684.765 L1146.96 684.765 L1147.51 684.765 L1148.07 684.765 L1148.63 684.765 L1149.19 684.765 L1149.75 684.765 L1150.31 684.765 L1150.87 684.765 L1151.43 684.765 L1151.99 684.765 L1152.55 684.765 L1153.11 684.765 L1153.67 684.765 L1154.23 684.765 L1154.78 684.765 L1155.34 684.765 L1155.9 684.765 L1156.46 684.765 L1157.02 684.765 L1157.58 684.765 L1158.14 684.765 L1158.7 684.765 L1159.26 684.765 L1159.82 684.765 L1160.38 684.765 L1160.94 684.765 L1161.5 684.765 L1162.05 684.765 L1162.61 684.765 L1163.17 684.765 L1163.73 684.765 L1164.29 684.765 L1164.85 684.765 L1165.41 684.765 L1165.97 684.765 L1166.53 684.765 L1167.09 684.765 L1167.65 684.765 L1168.21 684.765 L1168.77 684.765 L1169.33 684.765 L1169.88 684.765 L1170.44 684.765 L1171 684.765 L1171.56 684.765 L1172.12 684.765 L1172.68 684.765 L1173.24 684.765 L1173.8 684.765 L1174.36 684.765 L1174.92 684.765 L1175.48 684.765 L1176.04 684.765 L1176.6 684.765 L1177.15 684.765 L1177.71 684.765 L1178.27 684.765 L1178.83 684.765 L1179.39 684.765 L1179.95 684.765 L1180.51 684.765 L1181.07 684.765 L1181.63 684.765 L1182.19 684.765 L1182.75 684.765 L1183.31 684.765 L1183.87 684.765 L1184.43 684.765 L1184.98 684.765 L1185.54 684.765 L1186.1 684.765 L1186.66 684.765 L1187.22 684.765 L1187.78 684.765 L1188.34 684.765 L1188.9 684.765 L1189.46 684.765 L1190.02 684.765 L1190.58 684.765 L1191.14 684.765 L1191.7 684.765 L1192.25 684.765 L1192.81 684.765 L1193.37 684.765 L1193.93 684.765 L1194.49 684.765 L1195.05 684.765 L1195.61 684.765 L1196.17 684.765 L1196.73 684.765 L1197.29 684.765 L1197.85 684.765 L1198.41 684.765 L1198.97 684.765 L1199.52 684.765 L1200.08 684.765 L1200.64 684.765 L1201.2 684.765 L1201.76 684.765 L1202.32 684.765 L1202.88 684.765 L1203.44 684.765 L1204 684.765 L1204.56 684.765 L1205.12 684.765 L1205.68 684.765 L1206.24 684.765 L1206.8 684.765 L1207.35 684.765 L1207.91 684.765 L1208.47 684.765 L1209.03 684.765 L1209.59 684.765 L1210.15 684.765 L1210.71 684.765 L1211.27 684.765 L1211.83 684.765 L1212.39 684.765 L1212.95 684.765 L1213.51 684.765 L1214.07 684.765 L1214.62 684.765 L1215.18 684.765 L1215.74 684.765 L1216.3 684.765 L1216.86 684.765 L1217.42 684.765 L1217.98 684.765 L1218.54 684.765 L1219.1 684.765 L1219.66 684.765 L1220.22 684.765 L1220.78 684.765 L1221.34 684.765 L1221.89 684.765 L1222.45 684.765 L1223.01 684.765 L1223.57 684.765 L1224.13 684.765 L1224.69 684.765 L1225.25 684.765 L1225.81 684.765 L1226.37 684.765 L1226.93 684.765 L1227.49 684.765 L1228.05 684.765 L1228.61 684.765 L1229.17 684.765 L1229.72 684.765 L1230.28 684.765 L1230.84 684.765 L1231.4 684.765 L1231.96 684.765 L1232.52 684.765 L1233.08 684.765 L1233.64 684.765 L1234.2 684.765 L1234.76 684.765 L1235.32 684.765 L1235.88 684.765 L1236.44 684.765 L1236.99 684.765 L1237.55 684.765 L1238.11 684.765 L1238.67 684.765 L1239.23 684.765 L1239.79 684.765 L1240.35 684.765 L1240.91 684.765 L1241.47 684.765 L1242.03 684.765 L1242.59 684.765 L1243.15 684.765 L1243.71 684.765 L1244.26 684.765 L1244.82 684.765 L1245.38 684.765 L1245.94 684.765 L1246.5 684.765 L1247.06 684.765 L1247.62 684.765 L1248.18 684.765 L1248.74 684.765 L1249.3 684.765 L1249.86 684.765 L1250.42 684.765 L1250.98 684.765 L1251.54 684.765 L1252.09 684.765 L1252.65 684.765 L1253.21 684.765 L1253.77 684.765 L1254.33 684.765 L1254.89 684.765 L1255.45 684.765 L1256.01 684.765 L1256.57 684.765 L1257.13 684.765 L1257.69 684.765 L1258.25 684.765 L1258.81 684.765 L1259.36 684.765 L1259.92 684.765 L1260.48 684.765 L1261.04 684.765 L1261.6 684.765 L1262.16 684.765 L1262.72 684.765 L1263.28 684.765 L1263.84 684.765 L1264.4 684.765 L1264.96 684.765 L1265.52 684.765 L1266.08 684.765 L1266.63 684.765 L1267.19 684.765 L1267.75 684.765 L1268.31 684.765 L1268.87 684.765 L1269.43 684.765 L1269.99 684.765 L1270.55 684.765 L1271.11 684.765 L1271.67 684.765 L1272.23 684.765 L1272.79 684.765 L1273.35 684.765 L1273.91 684.765 L1274.46 684.765 L1275.02 684.765 L1275.58 684.765 L1276.14 684.765 L1276.7 684.765 L1277.26 684.765 L1277.82 684.765 L1278.38 684.765 L1278.94 684.765 L1279.5 684.765 L1280.06 684.765 L1280.62 684.765 L1281.18 684.765 L1281.73 684.765 L1282.29 684.765 L1282.85 684.765 L1283.41 684.765 L1283.97 684.765 L1284.53 684.765 L1285.09 684.765 L1285.65 684.765 L1286.21 684.765 L1286.77 684.765 L1287.33 684.765 L1287.89 684.765 L1288.45 684.765 L1289 684.765 L1289.56 684.765 L1290.12 684.765 L1290.68 684.765 L1291.24 684.765 L1291.8 684.765 L1292.36 684.765 L1292.92 684.765 L1293.48 684.765 L1294.04 684.765 L1294.6 684.765 L1295.16 684.765 L1295.72 684.765 L1296.28 684.765 L1296.83 684.765 L1297.39 684.765 L1297.95 684.765 L1298.51 684.765 L1299.07 684.765 L1299.63 684.765 L1300.19 684.765 L1300.75 684.765 L1301.31 684.765 L1301.87 684.765 L1302.43 684.765 L1302.99 684.765 L1303.55 684.765 L1304.1 684.765 L1304.66 684.765 L1305.22 684.765 L1305.78 684.765 L1306.34 684.765 L1306.9 684.765 L1307.46 684.765 L1308.02 684.765 L1308.58 684.765 L1309.14 684.765 L1309.7 684.765 L1310.26 684.765 L1310.82 684.765 L1311.38 684.765 L1311.93 684.765 L1312.49 684.765 L1313.05 684.765 L1313.61 684.765 L1314.17 684.765 L1314.73 684.765 L1315.29 684.765 L1315.85 684.765 L1316.41 684.765 L1316.97 684.765 L1317.53 684.765 L1318.09 684.765 L1318.65 684.765 L1319.2 684.765 L1319.76 684.765 L1320.32 684.765 L1320.88 684.765 L1321.44 684.765 L1322 684.765 L1322.56 684.765 L1323.12 684.765 L1323.68 684.765 L1324.24 684.765 L1324.8 684.765 L1325.36 684.765 L1325.92 684.765 L1326.47 684.765 L1327.03 684.765 L1327.59 684.765 L1328.15 684.765 L1328.71 684.765 L1329.27 684.765 L1329.83 684.765 L1330.39 684.765 L1330.95 684.765 L1331.51 684.765 L1332.07 684.765 L1332.63 684.765 L1333.19 684.765 L1333.75 684.765 L1334.3 684.765 L1334.86 684.765 L1335.42 684.765 L1335.98 684.765 L1336.54 684.765 L1337.1 684.765 L1337.66 684.765 L1338.22 684.765 L1338.78 684.765 L1339.34 684.765 L1339.9 684.765 L1340.46 684.765 L1341.02 684.765 L1341.57 684.765 L1342.13 684.765 L1342.69 684.765 L1343.25 684.765 L1343.81 684.765 L1344.37 684.765 L1344.93 684.765 L1345.49 684.765 L1346.05 684.765 L1346.61 684.765 L1347.17 684.765 L1347.73 684.765 L1348.29 684.765 L1348.84 684.765 L1349.4 684.765 L1349.96 684.765 L1350.52 684.765 L1351.08 684.765 L1351.64 684.765 L1352.2 684.765 L1352.76 684.765 L1353.32 684.765 L1353.88 684.765 L1354.44 684.765 L1355 684.765 L1355.56 684.765 L1356.12 684.765 L1356.67 684.765 L1357.23 684.765 L1357.79 684.765 L1358.35 684.765 L1358.91 684.765 L1359.47 684.765 L1360.03 684.765 L1360.59 684.765 L1361.15 684.765 L1361.71 684.765 L1362.27 684.765 L1362.83 684.765 L1363.39 684.765 L1363.94 684.765 L1364.5 684.765 L1365.06 684.765 L1365.62 684.765 L1366.18 684.765 L1366.74 684.765 L1367.3 684.765 L1367.86 684.765 L1368.42 684.765 L1368.98 684.765 L1369.54 684.765 L1370.1 684.765 L1370.66 684.765 L1371.21 684.765 L1371.77 684.765 L1372.33 684.765 L1372.89 684.765 L1373.45 684.765 L1374.01 684.765 L1374.57 684.765 L1375.13 684.765 L1375.69 684.765 L1376.25 684.765 L1376.81 684.765 L1377.37 684.765 L1377.93 684.765 L1378.49 684.765 L1379.04 684.765 L1379.6 684.765 L1380.16 684.765 L1380.72 684.765 L1381.28 684.765 L1381.84 684.765 L1382.4 684.765 L1382.96 684.765 L1383.52 684.765 L1384.08 684.765 L1384.64 684.765 L1385.2 684.765 L1385.76 684.765 L1386.31 684.765 L1386.87 684.765 L1387.43 684.765 L1387.99 684.765 L1388.55 684.765 L1389.11 684.765 L1389.67 684.765 L1390.23 684.765 L1390.79 684.765 L1391.35 684.765 L1391.91 684.765 L1392.47 684.765 L1393.03 684.765 L1393.58 684.765 L1394.14 684.765 L1394.7 684.765 L1395.26 684.765 L1395.82 684.765 L1396.38 684.765 L1396.94 684.765 L1397.5 684.765 L1398.06 684.765 L1398.62 684.765 L1399.18 684.765 L1399.74 684.765 L1400.3 684.765 L1400.86 684.765 L1401.41 684.765 L1401.97 684.765 L1402.53 684.765 L1403.09 684.765 L1403.65 684.765 L1404.21 684.765 L1404.77 684.765 L1405.33 684.765 L1405.89 684.765 L1406.45 684.765 L1407.01 684.765 L1407.57 684.765 L1408.13 684.765 L1408.68 684.765 L1409.24 684.765 L1409.8 684.765 L1410.36 684.765 L1410.92 684.765 L1411.48 684.765 L1412.04 684.765 L1412.6 684.765 L1413.16 684.765 L1413.72 684.765 L1414.28 684.765 L1414.84 684.765 L1415.4 684.765 L1415.95 684.765 L1416.51 684.765 L1417.07 684.765 L1417.63 684.765 L1418.19 684.765 L1418.75 684.765 L1419.31 684.765 L1419.87 684.765 L1420.43 684.765 L1420.99 684.765 L1421.55 684.765 L1422.11 684.765 L1422.67 684.765 L1423.23 684.765 L1423.78 684.765 L1424.34 684.765 L1424.9 684.765 L1425.46 684.765 L1426.02 684.765 L1426.58 684.765 L1427.14 684.765 L1427.7 684.765 L1428.26 684.765 L1428.82 684.765 L1429.38 684.765 L1429.94 684.765 L1430.5 684.765 L1431.05 684.765 L1431.61 684.765 L1432.17 684.765 L1432.73 684.765 L1433.29 684.765 L1433.85 684.765 L1434.41 684.765 L1434.97 684.765 L1435.53 684.765 L1436.09 684.765 L1436.65 684.765 L1437.21 684.765 L1437.77 684.765 L1438.33 684.765 L1438.88 684.765 L1439.44 684.765 L1440 684.765 L1440.56 684.765 L1441.12 684.765 L1441.68 684.765 L1442.24 684.765 L1442.8 684.765 L1443.36 684.765 L1443.92 684.765 L1444.48 684.765 L1445.04 684.765 L1445.6 684.765 L1446.15 684.765 L1446.71 684.765 L1447.27 684.765 L1447.83 684.765 L1448.39 684.765 L1448.95 684.765 L1449.51 684.765 L1450.07 684.765 L1450.63 684.765 L1451.19 684.765 L1451.75 684.765 L1452.31 684.765 L1452.87 684.765 L1453.42 684.765 L1453.98 684.765 L1454.54 684.765 L1455.1 684.765 L1455.66 684.765 L1456.22 684.765 L1456.78 684.765 L1457.34 684.765 L1457.9 684.765 L1458.46 684.765 L1459.02 684.765 L1459.58 684.765 L1460.14 684.765 L1460.7 684.765 L1461.25 684.765 L1461.81 684.765 L1462.37 684.765 L1462.93 684.765 L1463.49 684.765 L1464.05 684.765 L1464.61 684.765 L1465.17 684.765 L1465.73 684.765 L1466.29 684.765 L1466.85 684.765 L1467.41 684.765 L1467.97 684.765 L1468.52 684.765 L1469.08 684.765 L1469.64 684.765 L1470.2 684.765 L1470.76 684.765 L1471.32 684.765 L1471.88 684.765 L1472.44 684.765 L1473 684.765 L1473.56 684.765 L1474.12 684.765 L1474.68 684.765 L1475.24 684.765 L1475.79 684.765 L1476.35 684.765 L1476.91 684.765 L1477.47 684.765 L1478.03 684.765 L1478.59 684.765 L1479.15 684.765 L1479.71 684.765 L1480.27 684.765 L1480.83 684.765 L1481.39 684.765 L1481.95 684.765 L1482.51 684.765 L1483.07 684.765 L1483.62 684.765 L1484.18 684.765 L1484.74 684.765 L1485.3 684.765 L1485.86 684.765 L1486.42 684.765 L1486.98 684.765 L1487.54 684.765 L1488.1 684.765 L1488.66 684.765 L1489.22 684.765 L1489.78 684.765 L1490.34 684.765 L1490.89 684.765 L1491.45 684.765 L1492.01 684.765 L1492.57 684.765 L1493.13 684.765 L1493.69 684.765 L1494.25 684.765 L1494.81 684.765 L1495.37 684.765 L1495.93 684.765 L1496.49 684.765 L1497.05 684.765 L1497.61 684.765 L1498.16 684.765 L1498.72 684.765 L1499.28 684.765 L1499.84 684.765 L1500.4 684.765 L1500.96 684.765 L1501.52 684.765 L1502.08 684.765 L1502.64 684.765 L1503.2 684.765 L1503.76 684.765 L1504.32 684.765 L1504.88 684.765 L1505.44 684.765 L1505.99 684.765 L1506.55 684.765 L1507.11 684.765 L1507.67 684.765 L1508.23 684.765 L1508.79 684.765 L1509.35 684.765 L1509.91 684.765 L1510.47 684.765 L1511.03 684.765 L1511.59 684.765 L1512.15 684.765 L1512.71 684.765 L1513.26 684.765 L1513.82 684.765 L1514.38 684.765 L1514.94 684.765 L1515.5 684.765 L1516.06 684.765 L1516.62 684.765 L1517.18 684.765 L1517.74 684.765 L1518.3 684.765 L1518.86 684.765 L1519.42 684.765 L1519.98 684.765 L1520.53 684.765 L1521.09 684.765 L1521.65 684.765 L1522.21 684.765 L1522.77 684.765 L1523.33 684.765 L1523.89 684.765 L1524.45 684.765 L1525.01 684.765 L1525.57 684.765 L1526.13 684.765 L1526.69 684.765 L1527.25 684.765 L1527.81 684.765 L1528.36 684.765 L1528.92 684.765 L1529.48 684.765 L1530.04 684.765 L1530.6 684.765 L1531.16 684.765 L1531.72 684.765 L1532.28 684.765 L1532.84 684.765 L1533.4 684.765 L1533.96 684.765 L1534.52 684.765 L1535.08 684.765 L1535.63 684.765 L1536.19 684.765 L1536.75 684.765 L1537.31 684.765 L1537.87 684.765 L1538.43 684.765 L1538.99 684.765 L1539.55 684.765 L1540.11 684.765 L1540.67 684.765 L1541.23 684.765 L1541.79 684.765 L1542.35 684.765 L1542.9 684.765 L1543.46 684.765 L1544.02 684.765 L1544.58 684.765 L1545.14 684.765 L1545.7 684.765 L1546.26 684.765 L1546.82 684.765 L1547.38 684.765 L1547.94 684.765 L1548.5 684.765 L1549.06 684.765 L1549.62 684.765 L1550.18 684.765 L1550.73 684.765 L1551.29 684.765 L1551.85 684.765 L1552.41 684.765 L1552.97 684.765 L1553.53 684.765 L1554.09 684.765 L1554.65 684.765 L1555.21 684.765 L1555.77 684.765 L1556.33 684.765 L1556.89 684.765 L1557.45 684.765 L1558 684.765 L1558.56 684.765 L1559.12 684.765 L1559.68 684.765 L1560.24 684.765 L1560.8 684.765 L1561.36 684.765 L1561.92 684.765 L1562.48 684.765 L1563.04 684.765 L1563.6 684.765 L1564.16 684.765 L1564.72 684.765 L1565.28 684.765 L1565.83 684.765 L1566.39 684.765 L1566.95 684.765 L1567.51 684.765 L1568.07 684.765 L1568.63 684.765 L1569.19 684.765 L1569.75 684.765 L1570.31 684.765 L1570.87 684.765 L1571.43 684.765 L1571.99 684.765 L1572.55 684.765 L1573.1 684.765 L1573.66 684.765 L1574.22 684.765 L1574.78 684.765 L1575.34 684.765 L1575.9 684.765 L1576.46 684.765 L1577.02 684.765 L1577.58 684.765 L1578.14 684.765 L1578.7 684.765 L1579.26 684.765 L1579.82 684.765 L1580.37 684.765 L1580.93 684.765 L1581.49 684.765 L1582.05 684.765 L1582.61 684.765 L1583.17 684.765 L1583.73 684.765 L1584.29 684.765 L1584.85 684.765 L1585.41 684.765 L1585.97 684.765 L1586.53 684.765 L1587.09 684.765 L1587.65 684.765 L1588.2 684.765 L1588.76 684.765 L1589.32 684.765 L1589.88 684.765 L1590.44 684.765 L1591 684.765 L1591.56 684.765 L1592.12 684.765 L1592.68 684.765 L1593.24 684.765 L1593.8 684.765 L1594.36 684.765 L1594.92 684.765 L1595.47 684.765 L1596.03 684.765 L1596.59 684.765 L1597.15 684.765 L1597.71 684.765 L1598.27 684.765 L1598.83 684.765 L1599.39 684.765 L1599.95 684.765 L1600.51 684.765 L1601.07 684.765 L1601.63 684.765 L1602.19 684.765 L1602.74 684.765 L1603.3 684.765 L1603.86 684.765 L1604.42 684.765 L1604.98 684.765 L1605.54 684.765 L1606.1 684.765 L1606.66 684.765 L1607.22 684.765 L1607.78 684.765 L1608.34 684.765 L1608.9 684.765 L1609.46 684.765 L1610.02 684.765 L1610.57 684.765 L1611.13 684.765 L1611.69 684.765 L1612.25 684.765 L1612.81 684.765 L1613.37 684.765 L1613.93 684.765 L1614.49 684.765 L1615.05 684.765 L1615.61 684.765 L1616.17 684.765 L1616.73 684.765 L1617.29 684.765 L1617.84 684.765 L1618.4 684.765 L1618.96 684.765 L1619.52 684.765 L1620.08 684.765 L1620.64 684.765 L1621.2 684.765 L1621.76 684.765 L1622.32 684.765 L1622.88 684.765 L1623.44 684.765 L1624 684.765 L1624.56 684.765 L1625.11 684.765 L1625.67 684.765 L1626.23 684.765 L1626.79 684.765 L1627.35 684.765 L1627.91 684.765 L1628.47 684.765 L1629.03 684.765 L1629.59 684.765 L1630.15 684.765 L1630.71 684.765 L1631.27 684.765 L1631.83 684.765 L1632.39 684.765 L1632.94 684.765 L1633.5 684.765 L1634.06 684.765 L1634.62 684.765 L1635.18 684.765 L1635.74 684.765 L1636.3 684.765 L1636.86 684.765 L1637.42 684.765 L1637.98 684.765 L1638.54 684.765 L1639.1 684.765 L1639.66 684.765 L1640.21 684.765 L1640.77 684.765 L1641.33 684.765 L1641.89 684.765 L1642.45 684.765 L1643.01 684.765 L1643.57 684.765 L1644.13 684.765 L1644.69 684.765 L1645.25 684.765 L1645.81 684.765 L1646.37 684.765 L1646.93 684.765 L1647.48 684.765 L1648.04 684.765 L1648.6 684.765 L1649.16 684.765 L1649.72 684.765 L1650.28 684.765 L1650.84 684.765 L1651.4 684.765 L1651.96 684.765 L1652.52 684.765 L1653.08 684.765 L1653.64 684.765 L1654.2 684.765 L1654.76 684.765 L1655.31 684.765 L1655.87 684.765 L1656.43 684.765 L1656.99 684.765 L1657.55 684.765 L1658.11 684.765 L1658.67 684.765 L1659.23 684.765 L1659.79 684.765 L1660.35 684.765 L1660.91 684.765 L1661.47 684.765 L1662.03 684.765 L1662.58 684.765 L1663.14 684.765 L1663.7 684.765 L1664.26 684.765 L1664.82 684.765 L1665.38 684.765 L1665.94 684.765 L1666.5 684.765 L1667.06 684.765 L1667.62 684.765 L1668.18 684.765 L1668.74 684.765 L1669.3 684.765 L1669.85 684.765 L1670.41 684.765 L1670.97 684.765 L1671.53 684.765 L1672.09 684.765 L1672.65 684.765 L1673.21 684.765 L1673.77 684.765 L1674.33 684.765 L1674.89 684.765 L1675.45 684.765 L1676.01 684.765 L1676.57 684.765 L1677.13 684.765 L1677.68 684.765 L1678.24 684.765 L1678.8 684.765 L1679.36 684.765 L1679.92 684.765 L1680.48 684.765 L1681.04 684.765 L1681.6 684.765 L1682.16 684.765 L1682.72 684.765 L1683.28 684.765 L1683.84 684.765 L1684.4 684.765 L1684.95 684.765 L1685.51 684.765 L1686.07 684.765 L1686.63 684.765 L1687.19 684.765 L1687.75 684.765 L1688.31 684.765 L1688.87 684.765 L1689.43 684.765 L1689.99 684.765 L1690.55 684.765 L1691.11 684.765 L1691.67 684.765 L1692.23 684.765 L1692.78 684.765 L1693.34 684.765 L1693.9 684.765 L1694.46 684.765 L1695.02 684.765 L1695.58 684.765 L1696.14 684.765 L1696.7 684.765 L1697.26 684.765 L1697.82 684.765 L1698.38 684.765 L1698.94 684.765 L1699.5 684.765 L1700.05 684.765 L1700.61 684.765 L1701.17 684.765 L1701.73 684.765 L1702.29 684.765 L1702.85 684.765 L1703.41 684.765 L1703.97 684.765 L1704.53 684.765 L1705.09 684.765 L1705.65 684.765 L1706.21 684.765 L1706.77 684.765 L1707.32 684.765 L1707.88 684.765 L1708.44 684.765 L1709 684.765 L1709.56 684.765 L1710.12 684.765 L1710.68 684.765 L1711.24 684.765 L1711.8 684.765 L1712.36 684.765 L1712.92 684.765 L1713.48 684.765 L1714.04 684.765 L1714.6 684.765 L1715.15 684.765 L1715.71 684.765 L1716.27 684.765 L1716.83 684.765 L1717.39 684.765 L1717.95 684.765 L1718.51 684.765 L1719.07 684.765 L1719.63 684.765 L1720.19 684.765 L1720.75 684.765 L1721.31 684.765 L1721.87 684.765 L1722.42 684.765 L1722.98 684.765 L1723.54 684.765 L1724.1 684.765 L1724.66 684.765 L1725.22 684.765 L1725.78 684.765 L1726.34 684.765 L1726.9 684.765 L1727.46 684.765 L1728.02 684.765 L1728.58 684.765 L1729.14 684.765 L1729.69 684.765 L1730.25 684.765 L1730.81 684.765 L1731.37 684.765 L1731.93 684.765 L1732.49 684.765 L1733.05 684.765 L1733.61 684.765 L1734.17 684.765 L1734.73 684.765 L1735.29 684.765 L1735.85 684.765 L1736.41 684.765 L1736.97 684.765 L1737.52 684.765 L1738.08 684.765 L1738.64 684.765 L1739.2 684.765 L1739.76 684.765 L1740.32 684.765 L1740.88 684.765 L1741.44 684.765 L1742 684.765 L1742.56 684.765 L1743.12 684.765 L1743.68 684.765 L1744.24 684.765 L1744.79 684.765 L1745.35 684.765 L1745.91 684.765 L1746.47 684.765 L1747.03 684.765 L1747.59 684.765 L1748.15 684.765 L1748.71 684.765 L1749.27 684.765 L1749.83 684.765 L1750.39 684.765 L1750.95 684.765 L1751.51 684.765 L1752.06 684.765 L1752.62 684.765 L1753.18 684.765 L1753.74 684.765 L1754.3 684.765 L1754.86 684.765 L1755.42 684.765 L1755.98 684.765 L1756.54 684.765 L1757.1 684.765 L1757.66 684.765 L1758.22 684.765 L1758.78 684.765 L1759.34 684.765 L1759.89 684.765 L1760.45 684.765 L1761.01 684.765 L1761.57 684.765 L1762.13 684.765 L1762.69 684.765 L1763.25 684.765 L1763.81 684.765 L1764.37 684.765 L1764.93 684.765 L1765.49 684.765 L1766.05 684.765 L1766.61 684.765 L1767.16 684.765 L1767.72 684.765 L1768.28 684.765 L1768.84 684.765 L1769.4 684.765 L1769.96 684.765 L1770.52 684.765 L1771.08 684.765 L1771.64 684.765 L1772.2 684.765 L1772.76 684.765 L1773.32 684.765 L1773.88 684.765 L1774.43 684.765 L1774.99 684.765 L1775.55 684.765 L1776.11 684.765 L1776.67 684.765 L1777.23 684.765 L1777.79 684.765 L1778.35 684.765 L1778.91 684.765 L1779.47 684.765 L1780.03 684.765 L1780.59 684.765 L1781.15 684.765 L1781.71 684.765 L1782.26 684.765 L1782.82 684.765 L1783.38 684.765 L1783.94 684.765 L1784.5 684.765 L1785.06 684.765 L1785.62 684.765 L1786.18 684.765 L1786.74 684.765 L1787.3 684.765 L1787.86 684.765 L1788.42 684.765 L1788.98 684.765 L1789.53 684.765 L1790.09 684.765 L1790.65 684.765 L1791.21 684.765 L1791.77 684.765 L1792.33 684.765 L1792.89 684.765 L1793.45 684.765 L1794.01 684.765 L1794.57 684.765 L1795.13 684.765 L1795.69 684.765 L1796.25 684.765 L1796.8 684.765 L1797.36 684.765 L1797.92 684.765 L1798.48 684.765 L1799.04 684.765 L1799.6 684.765 L1800.16 684.765 L1800.72 684.765 L1801.28 684.765 L1801.84 684.765 L1802.4 684.765 L1802.96 684.765 L1803.52 684.765 L1804.08 684.765 L1804.63 684.765 L1805.19 684.765 L1805.75 684.765 L1806.31 684.765 L1806.87 684.765 L1807.43 684.765 L1807.99 684.765 L1808.55 684.765 L1809.11 684.765 L1809.67 684.765 L1810.23 684.765 L1810.79 684.765 L1811.35 684.765 L1811.9 684.765 L1812.46 684.765 L1813.02 684.765 L1813.58 684.765 L1814.14 684.765 L1814.7 684.765 L1815.26 684.765 L1815.82 684.765 L1816.38 684.765 L1816.94 684.765 L1817.5 684.765 L1818.06 684.765 L1818.62 684.765 L1819.18 684.765 L1819.73 684.765 L1820.29 684.765 L1820.85 684.765 L1821.41 684.765 L1821.97 684.765 L1822.53 684.765 L1823.09 684.765 L1823.65 684.765 L1824.21 684.765 L1824.77 684.765 L1825.33 684.765 L1825.89 684.765 L1826.45 684.765 L1827 684.765 L1827.56 684.765 L1828.12 684.765 L1828.68 684.765 L1829.24 684.765 L1829.8 684.765 L1830.36 684.765 L1830.92 684.765 L1831.48 684.765 L1832.04 684.765 L1832.6 684.765 L1833.16 684.765 L1833.72 684.765 L1834.27 684.765 L1834.83 684.765 L1835.39 684.765 L1835.95 684.765 L1836.51 684.765 L1837.07 684.765 L1837.63 684.765 L1838.19 684.765 L1838.19 681.78 L1837.63 681.78 L1837.07 681.78 L1836.51 681.78 L1835.95 681.78 L1835.39 681.78 L1834.83 681.78 L1834.27 681.78 L1833.72 681.78 L1833.16 681.78 L1832.6 681.78 L1832.04 681.78 L1831.48 681.78 L1830.92 681.78 L1830.36 681.78 L1829.8 681.78 L1829.24 681.78 L1828.68 681.78 L1828.12 681.78 L1827.56 681.78 L1827 681.78 L1826.45 681.78 L1825.89 681.78 L1825.33 681.78 L1824.77 681.78 L1824.21 681.78 L1823.65 681.78 L1823.09 681.78 L1822.53 681.78 L1821.97 681.78 L1821.41 681.78 L1820.85 681.78 L1820.29 681.78 L1819.73 681.78 L1819.18 681.78 L1818.62 681.78 L1818.06 681.78 L1817.5 681.78 L1816.94 681.78 L1816.38 681.78 L1815.82 681.78 L1815.26 681.78 L1814.7 681.78 L1814.14 681.78 L1813.58 681.78 L1813.02 681.78 L1812.46 681.78 L1811.9 681.78 L1811.35 681.78 L1810.79 681.78 L1810.23 681.78 L1809.67 681.78 L1809.11 681.78 L1808.55 681.78 L1807.99 681.78 L1807.43 681.78 L1806.87 681.78 L1806.31 681.78 L1805.75 681.78 L1805.19 681.78 L1804.63 681.78 L1804.08 681.78 L1803.52 681.78 L1802.96 681.78 L1802.4 681.78 L1801.84 681.78 L1801.28 681.78 L1800.72 681.78 L1800.16 681.78 L1799.6 681.78 L1799.04 681.78 L1798.48 681.78 L1797.92 681.78 L1797.36 681.78 L1796.8 681.78 L1796.25 681.78 L1795.69 681.78 L1795.13 681.78 L1794.57 681.78 L1794.01 681.78 L1793.45 681.78 L1792.89 681.78 L1792.33 681.78 L1791.77 681.78 L1791.21 681.78 L1790.65 681.78 L1790.09 681.78 L1789.53 681.78 L1788.98 681.78 L1788.42 681.78 L1787.86 681.78 L1787.3 681.78 L1786.74 681.78 L1786.18 681.78 L1785.62 681.78 L1785.06 681.78 L1784.5 681.78 L1783.94 681.78 L1783.38 681.78 L1782.82 681.78 L1782.26 681.78 L1781.71 681.78 L1781.15 681.78 L1780.59 681.78 L1780.03 681.78 L1779.47 681.78 L1778.91 681.78 L1778.35 681.78 L1777.79 681.78 L1777.23 681.78 L1776.67 681.78 L1776.11 681.78 L1775.55 681.78 L1774.99 681.78 L1774.43 681.78 L1773.88 681.78 L1773.32 681.78 L1772.76 681.78 L1772.2 681.78 L1771.64 681.78 L1771.08 681.78 L1770.52 681.78 L1769.96 681.78 L1769.4 681.78 L1768.84 681.78 L1768.28 681.78 L1767.72 681.78 L1767.16 681.78 L1766.61 681.78 L1766.05 681.78 L1765.49 681.78 L1764.93 681.78 L1764.37 681.78 L1763.81 681.78 L1763.25 681.78 L1762.69 681.78 L1762.13 681.78 L1761.57 681.78 L1761.01 681.78 L1760.45 681.78 L1759.89 681.78 L1759.34 681.78 L1758.78 681.78 L1758.22 681.78 L1757.66 681.78 L1757.1 681.78 L1756.54 681.78 L1755.98 681.78 L1755.42 681.78 L1754.86 681.78 L1754.3 681.78 L1753.74 681.78 L1753.18 681.78 L1752.62 681.78 L1752.06 681.78 L1751.51 681.78 L1750.95 681.78 L1750.39 681.78 L1749.83 681.78 L1749.27 681.78 L1748.71 681.78 L1748.15 681.78 L1747.59 681.78 L1747.03 681.78 L1746.47 681.78 L1745.91 681.78 L1745.35 681.78 L1744.79 681.78 L1744.24 681.78 L1743.68 681.78 L1743.12 681.78 L1742.56 681.78 L1742 681.78 L1741.44 681.78 L1740.88 681.78 L1740.32 681.78 L1739.76 681.78 L1739.2 681.78 L1738.64 681.78 L1738.08 681.78 L1737.52 681.78 L1736.97 681.78 L1736.41 681.78 L1735.85 681.78 L1735.29 681.78 L1734.73 681.78 L1734.17 681.78 L1733.61 681.78 L1733.05 681.78 L1732.49 681.78 L1731.93 681.78 L1731.37 681.78 L1730.81 681.78 L1730.25 681.78 L1729.69 681.78 L1729.14 681.78 L1728.58 681.78 L1728.02 681.78 L1727.46 681.78 L1726.9 681.78 L1726.34 681.78 L1725.78 681.78 L1725.22 681.78 L1724.66 681.78 L1724.1 681.78 L1723.54 681.78 L1722.98 681.78 L1722.42 681.78 L1721.87 681.78 L1721.31 681.78 L1720.75 681.78 L1720.19 681.78 L1719.63 681.78 L1719.07 681.78 L1718.51 681.78 L1717.95 681.78 L1717.39 681.78 L1716.83 681.78 L1716.27 681.78 L1715.71 681.78 L1715.15 681.78 L1714.6 681.78 L1714.04 681.78 L1713.48 681.78 L1712.92 681.78 L1712.36 681.78 L1711.8 681.78 L1711.24 681.78 L1710.68 681.78 L1710.12 681.78 L1709.56 681.78 L1709 681.78 L1708.44 681.78 L1707.88 681.78 L1707.32 681.78 L1706.77 681.78 L1706.21 681.78 L1705.65 681.78 L1705.09 681.78 L1704.53 681.78 L1703.97 681.78 L1703.41 681.78 L1702.85 681.78 L1702.29 681.78 L1701.73 681.78 L1701.17 681.78 L1700.61 681.78 L1700.05 681.78 L1699.5 681.78 L1698.94 681.78 L1698.38 681.78 L1697.82 681.78 L1697.26 681.78 L1696.7 681.78 L1696.14 681.78 L1695.58 681.78 L1695.02 681.78 L1694.46 681.78 L1693.9 681.78 L1693.34 681.78 L1692.78 681.78 L1692.23 681.78 L1691.67 681.78 L1691.11 681.78 L1690.55 681.78 L1689.99 681.78 L1689.43 681.78 L1688.87 681.78 L1688.31 681.78 L1687.75 681.78 L1687.19 681.78 L1686.63 681.78 L1686.07 681.78 L1685.51 681.78 L1684.95 681.78 L1684.4 681.78 L1683.84 681.78 L1683.28 681.78 L1682.72 681.78 L1682.16 681.78 L1681.6 681.78 L1681.04 681.78 L1680.48 681.78 L1679.92 681.78 L1679.36 681.78 L1678.8 681.78 L1678.24 681.78 L1677.68 681.78 L1677.13 681.78 L1676.57 681.78 L1676.01 681.78 L1675.45 681.78 L1674.89 681.78 L1674.33 681.78 L1673.77 681.78 L1673.21 681.78 L1672.65 681.78 L1672.09 681.78 L1671.53 681.78 L1670.97 681.78 L1670.41 681.78 L1669.85 681.78 L1669.3 681.78 L1668.74 681.78 L1668.18 681.78 L1667.62 681.78 L1667.06 681.78 L1666.5 681.78 L1665.94 681.78 L1665.38 681.78 L1664.82 681.78 L1664.26 681.78 L1663.7 681.78 L1663.14 681.78 L1662.58 681.78 L1662.03 681.78 L1661.47 681.78 L1660.91 681.78 L1660.35 681.78 L1659.79 681.78 L1659.23 681.78 L1658.67 681.78 L1658.11 681.78 L1657.55 681.78 L1656.99 681.78 L1656.43 681.78 L1655.87 681.78 L1655.31 681.78 L1654.76 681.78 L1654.2 681.78 L1653.64 681.78 L1653.08 681.78 L1652.52 681.78 L1651.96 681.78 L1651.4 681.78 L1650.84 681.78 L1650.28 681.78 L1649.72 681.78 L1649.16 681.78 L1648.6 681.78 L1648.04 681.78 L1647.48 681.78 L1646.93 681.78 L1646.37 681.78 L1645.81 681.78 L1645.25 681.78 L1644.69 681.78 L1644.13 681.78 L1643.57 681.78 L1643.01 681.78 L1642.45 681.78 L1641.89 681.78 L1641.33 681.78 L1640.77 681.78 L1640.21 681.78 L1639.66 681.78 L1639.1 681.78 L1638.54 681.78 L1637.98 681.78 L1637.42 681.78 L1636.86 681.78 L1636.3 681.78 L1635.74 681.78 L1635.18 681.78 L1634.62 681.78 L1634.06 681.78 L1633.5 681.78 L1632.94 681.78 L1632.39 681.78 L1631.83 681.78 L1631.27 681.78 L1630.71 681.78 L1630.15 681.78 L1629.59 681.78 L1629.03 681.78 L1628.47 681.78 L1627.91 681.78 L1627.35 681.78 L1626.79 681.78 L1626.23 681.78 L1625.67 681.78 L1625.11 681.78 L1624.56 681.78 L1624 681.78 L1623.44 681.78 L1622.88 681.78 L1622.32 681.78 L1621.76 681.78 L1621.2 681.78 L1620.64 681.78 L1620.08 681.78 L1619.52 681.78 L1618.96 681.78 L1618.4 681.78 L1617.84 681.78 L1617.29 681.78 L1616.73 681.78 L1616.17 681.78 L1615.61 681.78 L1615.05 681.78 L1614.49 681.78 L1613.93 681.78 L1613.37 681.78 L1612.81 681.78 L1612.25 681.78 L1611.69 681.78 L1611.13 681.78 L1610.57 681.78 L1610.02 681.78 L1609.46 681.78 L1608.9 681.78 L1608.34 681.78 L1607.78 681.78 L1607.22 681.78 L1606.66 681.78 L1606.1 681.78 L1605.54 681.78 L1604.98 681.78 L1604.42 681.78 L1603.86 681.78 L1603.3 681.78 L1602.74 681.78 L1602.19 681.78 L1601.63 681.78 L1601.07 681.78 L1600.51 681.78 L1599.95 681.78 L1599.39 681.78 L1598.83 681.78 L1598.27 681.78 L1597.71 681.78 L1597.15 681.78 L1596.59 681.78 L1596.03 681.78 L1595.47 681.78 L1594.92 681.78 L1594.36 681.78 L1593.8 681.78 L1593.24 681.78 L1592.68 681.78 L1592.12 681.78 L1591.56 681.78 L1591 681.78 L1590.44 681.78 L1589.88 681.78 L1589.32 681.78 L1588.76 681.78 L1588.2 681.78 L1587.65 681.78 L1587.09 681.78 L1586.53 681.78 L1585.97 681.78 L1585.41 681.78 L1584.85 681.78 L1584.29 681.78 L1583.73 681.78 L1583.17 681.78 L1582.61 681.78 L1582.05 681.78 L1581.49 681.78 L1580.93 681.78 L1580.37 681.78 L1579.82 681.78 L1579.26 681.78 L1578.7 681.78 L1578.14 681.78 L1577.58 681.78 L1577.02 681.78 L1576.46 681.78 L1575.9 681.78 L1575.34 681.78 L1574.78 681.78 L1574.22 681.78 L1573.66 681.78 L1573.1 681.78 L1572.55 681.78 L1571.99 681.78 L1571.43 681.78 L1570.87 681.78 L1570.31 681.78 L1569.75 681.78 L1569.19 681.78 L1568.63 681.78 L1568.07 681.78 L1567.51 681.78 L1566.95 681.78 L1566.39 681.78 L1565.83 681.78 L1565.28 681.78 L1564.72 681.78 L1564.16 681.78 L1563.6 681.78 L1563.04 681.78 L1562.48 681.78 L1561.92 681.78 L1561.36 681.78 L1560.8 681.78 L1560.24 681.78 L1559.68 681.78 L1559.12 681.78 L1558.56 681.78 L1558 681.78 L1557.45 681.78 L1556.89 681.78 L1556.33 681.78 L1555.77 681.78 L1555.21 681.78 L1554.65 681.78 L1554.09 681.78 L1553.53 681.78 L1552.97 681.78 L1552.41 681.78 L1551.85 681.78 L1551.29 681.78 L1550.73 681.78 L1550.18 681.78 L1549.62 681.78 L1549.06 681.78 L1548.5 681.78 L1547.94 681.78 L1547.38 681.78 L1546.82 681.78 L1546.26 681.78 L1545.7 681.78 L1545.14 681.78 L1544.58 681.78 L1544.02 681.78 L1543.46 681.78 L1542.9 681.78 L1542.35 681.78 L1541.79 681.78 L1541.23 681.78 L1540.67 681.78 L1540.11 681.78 L1539.55 681.78 L1538.99 681.78 L1538.43 681.78 L1537.87 681.78 L1537.31 681.78 L1536.75 681.78 L1536.19 681.78 L1535.63 681.78 L1535.08 681.78 L1534.52 681.78 L1533.96 681.78 L1533.4 681.78 L1532.84 681.78 L1532.28 681.78 L1531.72 681.78 L1531.16 681.78 L1530.6 681.78 L1530.04 681.78 L1529.48 681.78 L1528.92 681.78 L1528.36 681.78 L1527.81 681.78 L1527.25 681.78 L1526.69 681.78 L1526.13 681.78 L1525.57 681.78 L1525.01 681.78 L1524.45 681.78 L1523.89 681.78 L1523.33 681.78 L1522.77 681.78 L1522.21 681.78 L1521.65 681.78 L1521.09 681.78 L1520.53 681.78 L1519.98 681.78 L1519.42 681.78 L1518.86 681.78 L1518.3 681.78 L1517.74 681.78 L1517.18 681.78 L1516.62 681.78 L1516.06 681.78 L1515.5 681.78 L1514.94 681.78 L1514.38 681.78 L1513.82 681.78 L1513.26 681.78 L1512.71 681.78 L1512.15 681.78 L1511.59 681.78 L1511.03 681.78 L1510.47 681.78 L1509.91 681.78 L1509.35 681.78 L1508.79 681.78 L1508.23 681.78 L1507.67 681.78 L1507.11 681.78 L1506.55 681.78 L1505.99 681.78 L1505.44 681.78 L1504.88 681.78 L1504.32 681.78 L1503.76 681.78 L1503.2 681.78 L1502.64 681.78 L1502.08 681.78 L1501.52 681.78 L1500.96 681.78 L1500.4 681.78 L1499.84 681.78 L1499.28 681.78 L1498.72 681.78 L1498.16 681.78 L1497.61 681.78 L1497.05 681.78 L1496.49 681.78 L1495.93 681.78 L1495.37 681.78 L1494.81 681.78 L1494.25 681.78 L1493.69 681.78 L1493.13 681.78 L1492.57 681.78 L1492.01 681.78 L1491.45 681.78 L1490.89 681.78 L1490.34 681.78 L1489.78 681.78 L1489.22 681.78 L1488.66 681.78 L1488.1 681.78 L1487.54 681.78 L1486.98 681.78 L1486.42 681.78 L1485.86 681.78 L1485.3 681.78 L1484.74 681.78 L1484.18 681.78 L1483.62 681.78 L1483.07 681.78 L1482.51 681.78 L1481.95 681.78 L1481.39 681.78 L1480.83 681.78 L1480.27 681.78 L1479.71 681.78 L1479.15 681.78 L1478.59 681.78 L1478.03 681.78 L1477.47 681.78 L1476.91 681.78 L1476.35 681.78 L1475.79 681.78 L1475.24 681.78 L1474.68 681.78 L1474.12 681.78 L1473.56 681.78 L1473 681.78 L1472.44 681.78 L1471.88 681.78 L1471.32 681.78 L1470.76 681.78 L1470.2 681.78 L1469.64 681.78 L1469.08 681.78 L1468.52 681.78 L1467.97 681.78 L1467.41 681.78 L1466.85 681.78 L1466.29 681.78 L1465.73 681.78 L1465.17 681.78 L1464.61 681.78 L1464.05 681.78 L1463.49 681.78 L1462.93 681.78 L1462.37 681.78 L1461.81 681.78 L1461.25 681.78 L1460.7 681.78 L1460.14 681.78 L1459.58 681.78 L1459.02 681.78 L1458.46 681.78 L1457.9 681.78 L1457.34 681.78 L1456.78 681.78 L1456.22 681.78 L1455.66 681.78 L1455.1 681.78 L1454.54 681.78 L1453.98 681.78 L1453.42 681.78 L1452.87 681.78 L1452.31 681.78 L1451.75 681.78 L1451.19 681.78 L1450.63 681.78 L1450.07 681.78 L1449.51 681.78 L1448.95 681.78 L1448.39 681.78 L1447.83 681.78 L1447.27 681.78 L1446.71 681.78 L1446.15 681.78 L1445.6 681.78 L1445.04 681.78 L1444.48 681.78 L1443.92 681.78 L1443.36 681.78 L1442.8 681.78 L1442.24 681.78 L1441.68 681.78 L1441.12 681.78 L1440.56 681.78 L1440 681.78 L1439.44 681.78 L1438.88 681.78 L1438.33 681.78 L1437.77 681.78 L1437.21 681.78 L1436.65 681.78 L1436.09 681.78 L1435.53 681.78 L1434.97 681.78 L1434.41 681.78 L1433.85 681.78 L1433.29 681.78 L1432.73 681.78 L1432.17 681.78 L1431.61 681.78 L1431.05 681.78 L1430.5 681.78 L1429.94 681.78 L1429.38 681.78 L1428.82 681.78 L1428.26 681.78 L1427.7 681.78 L1427.14 681.78 L1426.58 681.78 L1426.02 681.78 L1425.46 681.78 L1424.9 681.78 L1424.34 681.78 L1423.78 681.78 L1423.23 681.78 L1422.67 681.78 L1422.11 681.78 L1421.55 681.78 L1420.99 681.78 L1420.43 681.78 L1419.87 681.78 L1419.31 681.78 L1418.75 681.78 L1418.19 681.78 L1417.63 681.78 L1417.07 681.78 L1416.51 681.78 L1415.95 681.78 L1415.4 681.78 L1414.84 681.78 L1414.28 681.78 L1413.72 681.78 L1413.16 681.78 L1412.6 681.78 L1412.04 681.78 L1411.48 681.78 L1410.92 681.78 L1410.36 681.78 L1409.8 681.78 L1409.24 681.78 L1408.68 681.78 L1408.13 681.78 L1407.57 681.78 L1407.01 681.78 L1406.45 681.78 L1405.89 681.78 L1405.33 681.78 L1404.77 681.78 L1404.21 681.78 L1403.65 681.78 L1403.09 681.78 L1402.53 681.78 L1401.97 681.78 L1401.41 681.78 L1400.86 681.78 L1400.3 681.78 L1399.74 681.78 L1399.18 681.78 L1398.62 681.78 L1398.06 681.78 L1397.5 681.78 L1396.94 681.78 L1396.38 681.78 L1395.82 681.78 L1395.26 681.78 L1394.7 681.78 L1394.14 681.78 L1393.58 681.78 L1393.03 681.78 L1392.47 681.78 L1391.91 681.78 L1391.35 681.78 L1390.79 681.78 L1390.23 681.78 L1389.67 681.78 L1389.11 681.78 L1388.55 681.78 L1387.99 681.78 L1387.43 681.78 L1386.87 681.78 L1386.31 681.78 L1385.76 681.78 L1385.2 681.78 L1384.64 681.78 L1384.08 681.78 L1383.52 681.78 L1382.96 681.78 L1382.4 681.78 L1381.84 681.78 L1381.28 681.78 L1380.72 681.78 L1380.16 681.78 L1379.6 681.78 L1379.04 681.78 L1378.49 681.78 L1377.93 681.78 L1377.37 681.78 L1376.81 681.78 L1376.25 681.78 L1375.69 681.78 L1375.13 681.78 L1374.57 681.78 L1374.01 681.78 L1373.45 681.78 L1372.89 681.78 L1372.33 681.78 L1371.77 681.78 L1371.21 681.78 L1370.66 681.78 L1370.1 681.78 L1369.54 681.78 L1368.98 681.78 L1368.42 681.78 L1367.86 681.78 L1367.3 681.78 L1366.74 681.78 L1366.18 681.78 L1365.62 681.78 L1365.06 681.78 L1364.5 681.78 L1363.94 681.78 L1363.39 681.78 L1362.83 681.78 L1362.27 681.78 L1361.71 681.78 L1361.15 681.78 L1360.59 681.78 L1360.03 681.78 L1359.47 681.78 L1358.91 681.78 L1358.35 681.78 L1357.79 681.78 L1357.23 681.78 L1356.67 681.78 L1356.12 681.78 L1355.56 681.78 L1355 681.78 L1354.44 681.78 L1353.88 681.78 L1353.32 681.78 L1352.76 681.78 L1352.2 681.78 L1351.64 681.78 L1351.08 681.78 L1350.52 681.78 L1349.96 681.78 L1349.4 681.78 L1348.84 681.78 L1348.29 681.78 L1347.73 681.78 L1347.17 681.78 L1346.61 681.78 L1346.05 681.78 L1345.49 681.78 L1344.93 681.78 L1344.37 681.78 L1343.81 681.78 L1343.25 681.78 L1342.69 681.78 L1342.13 681.78 L1341.57 681.78 L1341.02 681.78 L1340.46 681.78 L1339.9 681.78 L1339.34 681.78 L1338.78 681.78 L1338.22 681.78 L1337.66 681.78 L1337.1 681.78 L1336.54 681.78 L1335.98 681.78 L1335.42 681.78 L1334.86 681.78 L1334.3 681.78 L1333.75 681.78 L1333.19 681.78 L1332.63 681.78 L1332.07 681.78 L1331.51 681.78 L1330.95 681.78 L1330.39 681.78 L1329.83 681.78 L1329.27 681.78 L1328.71 681.78 L1328.15 681.78 L1327.59 681.78 L1327.03 681.78 L1326.47 681.78 L1325.92 681.78 L1325.36 681.78 L1324.8 681.78 L1324.24 681.78 L1323.68 681.78 L1323.12 681.78 L1322.56 681.78 L1322 681.78 L1321.44 681.78 L1320.88 681.78 L1320.32 681.78 L1319.76 681.78 L1319.2 681.78 L1318.65 681.78 L1318.09 681.78 L1317.53 681.78 L1316.97 681.78 L1316.41 681.78 L1315.85 681.78 L1315.29 681.78 L1314.73 681.78 L1314.17 681.78 L1313.61 681.78 L1313.05 681.78 L1312.49 681.78 L1311.93 681.78 L1311.38 681.78 L1310.82 681.78 L1310.26 681.78 L1309.7 681.78 L1309.14 681.78 L1308.58 681.78 L1308.02 681.78 L1307.46 681.78 L1306.9 681.78 L1306.34 681.78 L1305.78 681.78 L1305.22 681.78 L1304.66 681.78 L1304.1 681.78 L1303.55 681.78 L1302.99 681.78 L1302.43 681.78 L1301.87 681.78 L1301.31 681.78 L1300.75 681.78 L1300.19 681.78 L1299.63 681.78 L1299.07 681.78 L1298.51 681.78 L1297.95 681.78 L1297.39 681.78 L1296.83 681.78 L1296.28 681.78 L1295.72 681.78 L1295.16 681.78 L1294.6 681.78 L1294.04 681.78 L1293.48 681.78 L1292.92 681.78 L1292.36 681.78 L1291.8 681.78 L1291.24 681.78 L1290.68 681.78 L1290.12 681.78 L1289.56 681.78 L1289 681.78 L1288.45 681.78 L1287.89 681.78 L1287.33 681.78 L1286.77 681.78 L1286.21 681.78 L1285.65 681.78 L1285.09 681.78 L1284.53 681.78 L1283.97 681.78 L1283.41 681.78 L1282.85 681.78 L1282.29 681.78 L1281.73 681.78 L1281.18 681.78 L1280.62 681.78 L1280.06 681.78 L1279.5 681.78 L1278.94 681.78 L1278.38 681.78 L1277.82 681.78 L1277.26 681.78 L1276.7 681.78 L1276.14 681.78 L1275.58 681.78 L1275.02 681.78 L1274.46 681.78 L1273.91 681.78 L1273.35 681.78 L1272.79 681.78 L1272.23 681.78 L1271.67 681.78 L1271.11 681.78 L1270.55 681.78 L1269.99 681.78 L1269.43 681.78 L1268.87 681.78 L1268.31 681.78 L1267.75 681.78 L1267.19 681.78 L1266.63 681.78 L1266.08 681.78 L1265.52 681.78 L1264.96 681.78 L1264.4 681.78 L1263.84 681.78 L1263.28 681.78 L1262.72 681.78 L1262.16 681.78 L1261.6 681.78 L1261.04 681.78 L1260.48 681.78 L1259.92 681.78 L1259.36 681.78 L1258.81 681.78 L1258.25 681.78 L1257.69 681.78 L1257.13 681.78 L1256.57 681.78 L1256.01 681.78 L1255.45 681.78 L1254.89 681.78 L1254.33 681.78 L1253.77 681.78 L1253.21 681.78 L1252.65 681.78 L1252.09 681.78 L1251.54 681.78 L1250.98 681.78 L1250.42 681.78 L1249.86 681.78 L1249.3 681.78 L1248.74 681.78 L1248.18 681.78 L1247.62 681.78 L1247.06 681.78 L1246.5 681.78 L1245.94 681.78 L1245.38 681.78 L1244.82 681.78 L1244.26 681.78 L1243.71 681.78 L1243.15 681.78 L1242.59 681.78 L1242.03 681.78 L1241.47 681.78 L1240.91 681.78 L1240.35 681.78 L1239.79 681.78 L1239.23 681.78 L1238.67 681.78 L1238.11 681.78 L1237.55 681.78 L1236.99 681.78 L1236.44 681.78 L1235.88 681.78 L1235.32 681.78 L1234.76 681.78 L1234.2 681.78 L1233.64 681.78 L1233.08 681.78 L1232.52 681.78 L1231.96 681.78 L1231.4 681.78 L1230.84 681.78 L1230.28 681.78 L1229.72 681.78 L1229.17 681.78 L1228.61 681.78 L1228.05 681.78 L1227.49 681.78 L1226.93 681.78 L1226.37 681.78 L1225.81 681.78 L1225.25 681.78 L1224.69 681.78 L1224.13 681.78 L1223.57 681.78 L1223.01 681.78 L1222.45 681.78 L1221.89 681.78 L1221.34 681.78 L1220.78 681.78 L1220.22 681.78 L1219.66 681.78 L1219.1 681.78 L1218.54 681.78 L1217.98 681.78 L1217.42 681.78 L1216.86 681.78 L1216.3 681.78 L1215.74 681.78 L1215.18 681.78 L1214.62 681.78 L1214.07 681.78 L1213.51 681.78 L1212.95 681.78 L1212.39 681.78 L1211.83 681.78 L1211.27 681.78 L1210.71 681.78 L1210.15 681.78 L1209.59 681.78 L1209.03 681.78 L1208.47 681.78 L1207.91 681.78 L1207.35 681.78 L1206.8 681.78 L1206.24 681.78 L1205.68 681.78 L1205.12 681.78 L1204.56 681.78 L1204 681.78 L1203.44 681.78 L1202.88 681.78 L1202.32 681.78 L1201.76 681.78 L1201.2 681.78 L1200.64 681.78 L1200.08 681.78 L1199.52 681.78 L1198.97 681.78 L1198.41 681.78 L1197.85 681.78 L1197.29 681.78 L1196.73 681.78 L1196.17 681.78 L1195.61 681.78 L1195.05 681.78 L1194.49 681.78 L1193.93 681.78 L1193.37 681.78 L1192.81 681.78 L1192.25 681.78 L1191.7 681.78 L1191.14 681.78 L1190.58 681.78 L1190.02 681.78 L1189.46 681.78 L1188.9 681.78 L1188.34 681.78 L1187.78 681.78 L1187.22 681.78 L1186.66 681.78 L1186.1 681.78 L1185.54 681.78 L1184.98 681.78 L1184.43 681.78 L1183.87 681.78 L1183.31 681.78 L1182.75 681.78 L1182.19 681.78 L1181.63 681.78 L1181.07 681.78 L1180.51 681.78 L1179.95 681.78 L1179.39 681.78 L1178.83 681.78 L1178.27 681.78 L1177.71 681.78 L1177.15 681.78 L1176.6 681.78 L1176.04 681.78 L1175.48 681.78 L1174.92 681.78 L1174.36 681.78 L1173.8 681.78 L1173.24 681.78 L1172.68 681.78 L1172.12 681.78 L1171.56 681.78 L1171 681.78 L1170.44 681.78 L1169.88 681.78 L1169.33 681.78 L1168.77 681.78 L1168.21 681.78 L1167.65 681.78 L1167.09 681.78 L1166.53 681.78 L1165.97 681.78 L1165.41 681.78 L1164.85 681.78 L1164.29 681.78 L1163.73 681.78 L1163.17 681.78 L1162.61 681.78 L1162.05 681.78 L1161.5 681.78 L1160.94 681.78 L1160.38 681.78 L1159.82 681.78 L1159.26 681.78 L1158.7 681.78 L1158.14 681.78 L1157.58 681.78 L1157.02 681.78 L1156.46 681.78 L1155.9 681.78 L1155.34 681.78 L1154.78 681.78 L1154.23 681.78 L1153.67 681.78 L1153.11 681.78 L1152.55 681.78 L1151.99 681.78 L1151.43 681.78 L1150.87 681.78 L1150.31 681.78 L1149.75 681.78 L1149.19 681.78 L1148.63 681.78 L1148.07 681.78 L1147.51 681.78 L1146.96 681.78 L1146.4 681.78 L1145.84 681.78 L1145.28 681.78 L1144.72 681.78 L1144.16 681.78 L1143.6 681.78 L1143.04 681.78 L1142.48 681.78 L1141.92 681.78 L1141.36 681.78 L1140.8 681.78 L1140.24 681.78 L1139.68 681.78 L1139.13 681.78 L1138.57 681.78 L1138.01 681.78 L1137.45 681.78 L1136.89 681.78 L1136.33 681.78 L1135.77 681.78 L1135.21 681.78 L1134.65 681.78 L1134.09 681.78 L1133.53 681.78 L1132.97 681.78 L1132.41 681.78 L1131.86 681.78 L1131.3 681.78 L1130.74 681.78 L1130.18 681.78 L1129.62 681.78 L1129.06 681.78 L1128.5 681.78 L1127.94 681.78 L1127.38 681.78 L1126.82 681.78 L1126.26 681.78 L1125.7 681.78 L1125.14 681.78 L1124.59 681.78 L1124.03 681.78 L1123.47 681.78 L1122.91 681.78 L1122.35 681.78 L1121.79 681.78 L1121.23 681.78 L1120.67 681.78 L1120.11 681.78 L1119.55 681.78 L1118.99 681.78 L1118.43 681.78 L1117.87 681.78 L1117.31 681.78 L1116.76 681.78 L1116.2 681.78 L1115.64 681.78 L1115.08 681.78 L1114.52 681.78 L1113.96 681.78 L1113.4 681.78 L1112.84 681.78 L1112.28 681.78 L1111.72 681.78 L1111.16 681.78 L1110.6 681.78 L1110.04 681.78 L1109.49 681.78 L1108.93 681.78 L1108.37 681.78 L1107.81 681.78 L1107.25 681.78 L1106.69 681.78 L1106.13 681.78 L1105.57 681.78 L1105.01 681.78 L1104.45 681.78 L1103.89 681.78 L1103.33 681.78 L1102.77 681.78 L1102.22 681.78 L1101.66 681.78 L1101.1 681.78 L1100.54 681.78 L1099.98 681.78 L1099.42 681.78 L1098.86 681.78 L1098.3 681.78 L1097.74 681.78 L1097.18 681.78 L1096.62 681.78 L1096.06 681.78 L1095.5 681.78 L1094.94 681.78 L1094.39 681.78 L1093.83 681.78 L1093.27 681.78 L1092.71 681.78 L1092.15 681.78 L1091.59 681.78 L1091.03 681.78 L1090.47 681.78 L1089.91 681.78 L1089.35 681.78 L1088.79 681.78 L1088.23 681.78 L1087.67 681.78 L1087.12 681.78 L1086.56 681.78 L1086 681.78 L1085.44 681.78 L1084.88 681.78 L1084.32 681.78 L1083.76 681.78 L1083.2 681.78 L1082.64 681.78 L1082.08 681.78 L1081.52 681.78 L1080.96 681.78 L1080.4 681.78 L1079.85 681.78 L1079.29 681.78 L1078.73 681.78 L1078.17 681.78 L1077.61 681.78 L1077.05 681.78 L1076.49 681.78 L1075.93 681.78 L1075.37 681.78 L1074.81 681.78 L1074.25 681.78 L1073.69 681.78 L1073.13 681.78 L1072.57 681.78 L1072.02 681.78 L1071.46 681.78 L1070.9 681.78 L1070.34 681.78 L1069.78 681.78 L1069.22 681.78 L1068.66 681.78 L1068.1 681.78 L1067.54 681.78 L1066.98 681.78 L1066.42 681.78 L1065.86 681.78 L1065.3 681.78 L1064.75 681.78 L1064.19 681.78 L1063.63 681.78 L1063.07 681.78 L1062.51 681.78 L1061.95 681.78 L1061.39 681.78 L1060.83 681.78 L1060.27 681.78 L1059.71 681.78 L1059.15 681.78 L1058.59 681.78 L1058.03 681.78 L1057.48 681.78 L1056.92 681.78 L1056.36 681.78 L1055.8 681.78 L1055.24 681.78 L1054.68 681.78 L1054.12 681.78 L1053.56 681.78 L1053 681.78 L1052.44 681.78 L1051.88 681.78 L1051.32 681.78 L1050.76 681.78 L1050.2 681.78 L1049.65 681.78 L1049.09 681.78 L1048.53 681.78 L1047.97 681.78 L1047.41 681.78 L1046.85 681.78 L1046.29 681.78 L1045.73 681.78 L1045.17 681.78 L1044.61 681.78 L1044.05 681.78 L1043.49 681.78 L1042.93 681.78 L1042.38 681.78 L1041.82 681.78 L1041.26 681.78 L1040.7 681.78 L1040.14 681.78 L1039.58 681.78 L1039.02 681.78 L1038.46 681.78 L1037.9 681.78 L1037.34 681.78 L1036.78 681.78 L1036.22 681.78 L1035.66 681.78 L1035.1 681.78 L1034.55 681.78 L1033.99 681.78 L1033.43 681.78 L1032.87 681.78 L1032.31 681.78 L1031.75 681.78 L1031.19 681.78 L1030.63 681.78 L1030.07 681.78 L1029.51 681.78 L1028.95 681.78 L1028.39 681.78 L1027.83 681.78 L1027.28 681.78 L1026.72 681.78 L1026.16 681.78 L1025.6 681.78 L1025.04 681.78 L1024.48 681.78 L1023.92 681.78 L1023.36 681.78 L1022.8 681.78 L1022.24 681.78 L1021.68 681.78 L1021.12 681.78 L1020.56 681.78 L1020.01 681.78 L1019.45 681.78 L1018.89 681.78 L1018.33 681.78 L1017.77 681.78 L1017.21 681.78 L1016.65 681.78 L1016.09 681.78 L1015.53 681.78 L1014.97 681.78 L1014.41 681.78 L1013.85 681.78 L1013.29 681.78 L1012.73 681.78 L1012.18 681.78 L1011.62 681.78 L1011.06 681.78 L1010.5 681.78 L1009.94 681.78 L1009.38 681.78 L1008.82 681.78 L1008.26 681.78 L1007.7 681.78 L1007.14 681.78 L1006.58 681.78 L1006.02 681.78 L1005.46 681.78 L1004.91 681.78 L1004.35 681.78 L1003.79 681.78 L1003.23 681.78 L1002.67 681.78 L1002.11 681.78 L1001.55 681.78 L1000.99 681.78 L1000.43 681.78 L999.872 681.78 L999.313 681.78 L998.754 681.78 L998.194 681.78 L997.635 681.78 L997.076 681.78 L996.517 681.78 L995.957 681.78 L995.398 681.78 L994.839 681.78 L994.28 681.78 L993.72 681.78 L993.161 681.78 L992.602 681.78 L992.043 681.78 L991.483 681.78 L990.924 681.78 L990.365 681.78 L989.806 681.78 L989.246 681.78 L988.687 681.78 L988.128 681.78 L987.569 681.78 L987.009 681.78 L986.45 681.78 L985.891 681.78 L985.332 681.78 L984.772 681.78 L984.213 681.78 L983.654 681.78 L983.095 681.78 L982.535 681.78 L981.976 681.78 L981.417 681.78 L980.858 681.78 L980.298 681.78 L979.739 681.78 L979.18 681.78 L978.621 681.78 L978.061 681.78 L977.502 681.78 L976.943 681.78 L976.384 681.78 L975.824 681.78 L975.265 681.78 L974.706 681.78 L974.147 681.78 L973.587 681.78 L973.028 681.78 L972.469 681.78 L971.91 681.78 L971.35 681.78 L970.791 681.78 L970.232 681.78 L969.673 681.78 L969.113 681.78 L968.554 681.78 L967.995 681.78 L967.436 681.78 L966.876 681.78 L966.317 681.78 L965.758 681.78 L965.199 681.78 L964.639 681.78 L964.08 681.78 L963.521 681.78 L962.962 681.78 L962.402 681.78 L961.843 681.78 L961.284 681.78 L960.725 681.78 L960.165 681.78 L959.606 681.78 L959.047 681.78 L958.488 681.78 L957.928 681.78 L957.369 681.78 L956.81 681.78 L956.251 681.78 L955.691 681.78 L955.132 681.78 L954.573 681.78 L954.014 681.78 L953.454 681.78 L952.895 681.78 L952.336 681.78 L951.777 681.78 L951.217 681.78 L950.658 681.78 L950.099 681.78 L949.54 681.78 L948.98 681.78 L948.421 681.78 L947.862 681.78 L947.303 681.78 L946.743 681.78 L946.184 681.78 L945.625 681.78 L945.066 681.78 L944.506 681.78 L943.947 681.78 L943.388 681.78 L942.829 681.78 L942.269 681.78 L941.71 681.78 L941.151 681.78 L940.592 681.78 L940.032 681.78 L939.473 681.78 L938.914 681.78 L938.355 681.78 L937.795 681.78 L937.236 681.78 L936.677 681.78 L936.118 681.78 L935.558 681.78 L934.999 681.78 L934.44 681.78 L933.881 681.78 L933.321 681.78 L932.762 681.78 L932.203 681.78 L931.644 681.78 L931.084 681.78 L930.525 681.78 L929.966 681.78 L929.406 681.78 L928.847 681.78 L928.288 681.78 L927.729 681.78 L927.169 681.78 L926.61 681.78 L926.051 681.78 L925.492 681.78 L924.932 681.78 L924.373 681.78 L923.814 681.78 L923.255 681.78 L922.695 681.78 L922.136 681.78 L921.577 681.78 L921.018 681.78 L920.458 681.78 L919.899 681.78 L919.34 681.78 L918.781 681.78 L918.221 681.78 L917.662 681.78 L917.103 681.78 L916.544 681.78 L915.984 681.78 L915.425 681.78 L914.866 681.78 L914.307 681.78 L913.747 681.78 L913.188 681.78 L912.629 681.78 L912.07 681.78 L911.51 681.78 L910.951 681.78 L910.392 681.78 L909.833 681.78 L909.273 681.78 L908.714 681.78 L908.155 681.78 L907.596 681.78 L907.036 681.78 L906.477 681.78 L905.918 681.78 L905.359 681.78 L904.799 681.78 L904.24 681.78 L903.681 681.78 L903.122 681.78 L902.562 681.78 L902.003 681.78 L901.444 681.78 L900.885 681.78 L900.325 681.78 L899.766 681.78 L899.207 681.78 L898.648 681.78 L898.088 681.78 L897.529 681.78 L896.97 681.78 L896.411 681.78 L895.851 681.78 L895.292 681.78 L894.733 681.78 L894.174 681.78 L893.614 681.78 L893.055 681.78 L892.496 681.78 L891.937 681.78 L891.377 681.78 L890.818 681.78 L890.259 681.78 L889.7 681.78 L889.14 681.78 L888.581 681.78 L888.022 681.78 L887.463 681.78 L886.903 681.78 L886.344 681.78 L885.785 681.78 L885.226 681.78 L884.666 681.78 L884.107 681.78 L883.548 681.78 L882.989 681.78 L882.429 681.78 L881.87 681.78 L881.311 681.78 L880.752 681.78 L880.192 681.78 L879.633 681.78 L879.074 681.78 L878.515 681.78 L877.955 681.78 L877.396 681.78 L876.837 681.78 L876.278 681.78 L875.718 681.78 L875.159 681.78 L874.6 681.78 L874.041 681.78 L873.481 681.78 L872.922 681.78 L872.363 681.78 L871.804 681.78 L871.244 681.78 L870.685 681.78 L870.126 681.78 L869.567 681.78 L869.007 681.78 L868.448 681.78 L867.889 681.78 L867.33 681.78 L866.77 681.78 L866.211 681.78 L865.652 681.78 L865.093 681.78 L864.533 681.78 L863.974 681.78 L863.415 681.78 L862.856 681.78 L862.296 681.78 L861.737 681.78 L861.178 681.78 L860.619 681.78 L860.059 681.78 L859.5 681.78 L858.941 681.78 L858.382 681.78 L857.822 681.78 L857.263 681.78 L856.704 681.78 L856.145 681.78 L855.585 681.78 L855.026 681.78 L854.467 681.78 L853.908 681.78 L853.348 681.78 L852.789 681.78 L852.23 681.78 L851.671 681.78 L851.111 681.78 L850.552 681.78 L849.993 681.78 L849.434 681.78 L848.874 681.78 L848.315 681.78 L847.756 681.78 L847.197 681.78 L846.637 681.78 L846.078 681.78 L845.519 681.78 L844.96 681.78 L844.4 681.78 L843.841 681.78 L843.282 681.78 L842.723 681.78 L842.163 681.78 L841.604 681.78 L841.045 681.78 L840.486 681.78 L839.926 681.78 L839.367 681.78 L838.808 681.78 L838.249 681.78 L837.689 681.78 L837.13 681.78 L836.571 681.78 L836.012 681.78 L835.452 681.78 L834.893 681.78 L834.334 681.78 L833.775 681.78 L833.215 681.78 L832.656 681.78 L832.097 681.78 L831.538 681.78 L830.978 681.78 L830.419 681.78 L829.86 681.78 L829.301 681.78 L828.741 681.78 L828.182 681.78 L827.623 681.78 L827.064 681.78 L826.504 681.78 L825.945 681.78 L825.386 681.78 L824.827 681.78 L824.267 681.78 L823.708 681.78 L823.149 681.78 L822.59 681.78 L822.03 681.78 L821.471 681.78 L820.912 681.78 L820.353 681.78 L819.793 681.78 L819.234 681.78 L818.675 681.78 L818.116 681.78 L817.556 681.78 L816.997 681.78 L816.438 681.78 L815.879 681.78 L815.319 681.78 L814.76 681.78 L814.201 681.78 L813.642 681.78 L813.082 681.78 L812.523 681.78 L811.964 681.78 L811.405 681.78 L810.845 681.78 L810.286 681.78 L809.727 681.78 L809.168 681.78 L808.608 681.78 L808.049 681.78 L807.49 681.78 L806.931 681.78 L806.371 681.78 L805.812 681.78 L805.253 681.78 L804.693 681.78 L804.134 681.78 L803.575 681.78 L803.016 681.78 L802.456 681.78 L801.897 681.78 L801.338 681.78 L800.779 681.78 L800.219 681.78 L799.66 681.78 L799.101 681.78 L798.542 681.78 L797.982 681.78 L797.423 681.78 L796.864 681.78 L796.305 681.78 L795.745 681.78 L795.186 681.78 L794.627 681.78 L794.068 681.78 L793.508 681.78 L792.949 681.78 L792.39 681.78 L791.831 681.78 L791.271 681.78 L790.712 681.78 L790.153 681.78 L789.594 681.78 L789.034 681.78 L788.475 681.78 L787.916 681.78 L787.357 681.78 L786.797 681.78 L786.238 681.78 L785.679 681.78 L785.12 681.78 L784.56 681.78 L784.001 681.78 L783.442 681.78 L782.883 681.78 L782.323 681.78 L781.764 681.78 L781.205 681.78 L780.646 681.78 L780.086 681.78 L779.527 681.78 L778.968 681.78 L778.409 681.78 L777.849 681.78 L777.29 681.78 L776.731 681.78 L776.172 681.78 L775.612 681.78 L775.053 681.78 L774.494 681.78 L773.935 681.78 L773.375 681.78 L772.816 681.78 L772.257 681.78 L771.698 681.78 L771.138 681.78 L770.579 681.78 L770.02 681.78 L769.461 681.78 L768.901 681.78 L768.342 681.78 L767.783 681.78 L767.224 681.78 L766.664 681.78 L766.105 681.78 L765.546 681.78 L764.987 681.78 L764.427 681.78 L763.868 681.78 L763.309 681.78 L762.75 681.78 L762.19 681.78 L761.631 681.78 L761.072 681.78 L760.513 681.78 L759.953 681.78 L759.394 681.78 L758.835 681.78 L758.276 681.78 L757.716 681.78 L757.157 681.78 L756.598 681.78 L756.039 681.78 L755.479 681.78 L754.92 681.78 L754.361 681.78 L753.802 681.78 L753.242 681.78 L752.683 681.78 L752.124 681.78 L751.565 681.78 L751.005 681.78 L750.446 681.78 L749.887 681.78 L749.328 681.78 L748.768 681.78 L748.209 681.78 L747.65 681.78 L747.091 681.78 L746.531 681.78 L745.972 681.78 L745.413 681.78 L744.854 681.78 L744.294 681.78 L743.735 681.78 L743.176 681.78 L742.617 681.78 L742.057 681.78 L741.498 681.78 L740.939 681.78 L740.38 681.78 L739.82 681.78 L739.261 681.78 L738.702 681.78 L738.143 681.78 L737.583 681.78 L737.024 681.78 L736.465 681.78 L735.906 681.78 L735.346 681.78 L734.787 681.78 L734.228 681.78 L733.669 681.78 L733.109 681.78 L732.55 681.78 L731.991 681.78 L731.432 681.78 L730.872 681.78 L730.313 681.78 L729.754 681.78 L729.195 681.78 L728.635 681.78 L728.076 681.78 L727.517 681.78 L726.958 681.78 L726.398 681.78 L725.839 681.78 L725.28 681.78 L724.721 681.78 L724.161 681.78 L723.602 681.78 L723.043 681.78 L722.484 681.78 L721.924 681.78 L721.365 681.78 L720.806 681.78 L720.247 681.78  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.238 720.806,683.238 721.365,683.238 721.924,683.238 722.484,683.238 723.043,683.238 723.602,683.238 724.161,683.238 724.721,683.238 725.28,683.238 725.839,683.238 726.398,683.238 726.958,683.238 727.517,683.238 728.076,683.238 728.635,683.238 729.195,683.238 729.754,683.238 730.313,683.238 730.872,683.238 731.432,683.238 731.991,683.238 732.55,683.238 733.109,683.238 733.669,683.238 734.228,683.238 734.787,683.238 735.346,683.238 735.906,683.238 736.465,683.238 737.024,683.238 737.583,683.238 738.143,683.238 738.702,683.238 739.261,683.238 739.82,683.238 740.38,683.238 740.939,683.238 741.498,683.238 742.057,683.238 742.617,683.238 743.176,683.238 743.735,683.238 744.294,683.238 744.854,683.238 745.413,683.238 745.972,683.238 746.531,683.238 747.091,683.238 747.65,683.238 748.209,683.238 748.768,683.238 749.328,683.238 749.887,683.238 750.446,683.238 751.005,683.238 751.565,683.238 752.124,683.238 752.683,683.238 753.242,683.238 753.802,683.238 754.361,683.238 754.92,683.238 755.479,683.238 756.039,683.238 756.598,683.238 757.157,683.238 757.716,683.238 758.276,683.238 758.835,683.238 759.394,683.238 759.953,683.238 760.513,683.238 761.072,683.238 761.631,683.238 762.19,683.238 762.75,683.238 763.309,683.238 763.868,683.238 764.427,683.238 764.987,683.238 765.546,683.238 766.105,683.238 766.664,683.238 767.224,683.238 767.783,683.238 768.342,683.238 768.901,683.238 769.461,683.238 770.02,683.238 770.579,683.238 771.138,683.238 771.698,683.238 772.257,683.238 772.816,683.238 773.375,683.238 773.935,683.238 774.494,683.238 775.053,683.238 775.612,683.238 776.172,683.238 776.731,683.238 777.29,683.238 777.849,683.238 778.409,683.238 778.968,683.238 779.527,683.238 780.086,683.238 780.646,683.238 781.205,683.238 781.764,683.238 782.323,683.238 782.883,683.238 783.442,683.238 784.001,683.238 784.56,683.238 785.12,683.238 785.679,683.238 786.238,683.238 786.797,683.238 787.357,683.238 787.916,683.238 788.475,683.238 789.034,683.238 789.594,683.238 790.153,683.238 790.712,683.238 791.271,683.238 791.831,683.238 792.39,683.238 792.949,683.238 793.508,683.238 794.068,683.238 794.627,683.238 795.186,683.238 795.745,683.238 796.305,683.238 796.864,683.238 797.423,683.238 797.982,683.238 798.542,683.238 799.101,683.238 799.66,683.238 800.219,683.238 800.779,683.238 801.338,683.238 801.897,683.238 802.456,683.238 803.016,683.238 803.575,683.238 804.134,683.238 804.693,683.238 805.253,683.238 805.812,683.238 806.371,683.238 806.931,683.238 807.49,683.238 808.049,683.238 808.608,683.238 809.168,683.238 809.727,683.238 810.286,683.238 810.845,683.238 811.405,683.238 811.964,683.238 812.523,683.238 813.082,683.238 813.642,683.238 814.201,683.238 814.76,683.238 815.319,683.238 815.879,683.238 816.438,683.238 816.997,683.238 817.556,683.238 818.116,683.238 818.675,683.238 819.234,683.238 819.793,683.238 820.353,683.238 820.912,683.238 821.471,683.238 822.03,683.238 822.59,683.238 823.149,683.238 823.708,683.238 824.267,683.238 824.827,683.238 825.386,683.238 825.945,683.238 826.504,683.238 827.064,683.238 827.623,683.238 828.182,683.238 828.741,683.238 829.301,683.238 829.86,683.238 830.419,683.238 830.978,683.238 831.538,683.238 832.097,683.238 832.656,683.238 833.215,683.238 833.775,683.238 834.334,683.238 834.893,683.238 835.452,683.238 836.012,683.238 836.571,683.238 837.13,683.238 837.689,683.238 838.249,683.238 838.808,683.238 839.367,683.238 839.926,683.238 840.486,683.238 841.045,683.238 841.604,683.238 842.163,683.238 842.723,683.238 843.282,683.238 843.841,683.238 844.4,683.238 844.96,683.238 845.519,683.238 846.078,683.238 846.637,683.238 847.197,683.238 847.756,683.238 848.315,683.238 848.874,683.238 849.434,683.238 849.993,683.238 850.552,683.238 851.111,683.238 851.671,683.238 852.23,683.238 852.789,683.238 853.348,683.238 853.908,683.238 854.467,683.238 855.026,683.238 855.585,683.238 856.145,683.238 856.704,683.238 857.263,683.238 857.822,683.238 858.382,683.238 858.941,683.238 859.5,683.238 860.059,683.238 860.619,683.238 861.178,683.238 861.737,683.238 862.296,683.238 862.856,683.238 863.415,683.238 863.974,683.238 864.533,683.238 865.093,683.238 865.652,683.238 866.211,683.238 866.77,683.238 867.33,683.238 867.889,683.238 868.448,683.238 869.007,683.238 869.567,683.238 870.126,683.238 870.685,683.238 871.244,683.238 871.804,683.238 872.363,683.238 872.922,683.238 873.481,683.238 874.041,683.238 874.6,683.238 875.159,683.238 875.718,683.238 876.278,683.238 876.837,683.238 877.396,683.238 877.955,683.238 878.515,683.238 879.074,683.238 879.633,683.238 880.192,683.238 880.752,683.238 881.311,683.238 881.87,683.238 882.429,683.238 882.989,683.238 883.548,683.238 884.107,683.238 884.666,683.238 885.226,683.238 885.785,683.238 886.344,683.238 886.903,683.238 887.463,683.238 888.022,683.238 888.581,683.238 889.14,683.238 889.7,683.238 890.259,683.238 890.818,683.238 891.377,683.238 891.937,683.238 892.496,683.238 893.055,683.238 893.614,683.238 894.174,683.238 894.733,683.238 895.292,683.238 895.851,683.238 896.411,683.238 896.97,683.238 897.529,683.238 898.088,683.238 898.648,683.238 899.207,683.238 899.766,683.238 900.325,683.238 900.885,683.238 901.444,683.238 902.003,683.238 902.562,683.238 903.122,683.238 903.681,683.238 904.24,683.238 904.799,683.238 905.359,683.238 905.918,683.238 906.477,683.238 907.036,683.238 907.596,683.238 908.155,683.238 908.714,683.238 909.273,683.238 909.833,683.238 910.392,683.238 910.951,683.238 911.51,683.238 912.07,683.238 912.629,683.238 913.188,683.238 913.747,683.238 914.307,683.238 914.866,683.238 915.425,683.238 915.984,683.238 916.544,683.238 917.103,683.238 917.662,683.238 918.221,683.238 918.781,683.238 919.34,683.238 919.899,683.238 920.458,683.238 921.018,683.238 921.577,683.238 922.136,683.238 922.695,683.238 923.255,683.238 923.814,683.238 924.373,683.238 924.932,683.238 925.492,683.238 926.051,683.238 926.61,683.238 927.169,683.238 927.729,683.238 928.288,683.238 928.847,683.238 929.406,683.238 929.966,683.238 930.525,683.238 931.084,683.238 931.644,683.238 932.203,683.238 932.762,683.238 933.321,683.238 933.881,683.238 934.44,683.238 934.999,683.238 935.558,683.238 936.118,683.238 936.677,683.238 937.236,683.238 937.795,683.238 938.355,683.238 938.914,683.238 939.473,683.238 940.032,683.238 940.592,683.238 941.151,683.238 941.71,683.238 942.269,683.238 942.829,683.238 943.388,683.238 943.947,683.238 944.506,683.238 945.066,683.238 945.625,683.238 946.184,683.238 946.743,683.238 947.303,683.238 947.862,683.238 948.421,683.238 948.98,683.238 949.54,683.238 950.099,683.238 950.658,683.238 951.217,683.238 951.777,683.238 952.336,683.238 952.895,683.238 953.454,683.238 954.014,683.238 954.573,683.238 955.132,683.238 955.691,683.238 956.251,683.238 956.81,683.238 957.369,683.238 957.928,683.238 958.488,683.238 959.047,683.238 959.606,683.238 960.165,683.238 960.725,683.238 961.284,683.238 961.843,683.238 962.402,683.238 962.962,683.238 963.521,683.238 964.08,683.238 964.639,683.238 965.199,683.238 965.758,683.238 966.317,683.238 966.876,683.238 967.436,683.238 967.995,683.238 968.554,683.238 969.113,683.238 969.673,683.238 970.232,683.238 970.791,683.238 971.35,683.238 971.91,683.238 972.469,683.238 973.028,683.238 973.587,683.238 974.147,683.238 974.706,683.238 975.265,683.238 975.824,683.238 976.384,683.238 976.943,683.238 977.502,683.238 978.061,683.238 978.621,683.238 979.18,683.238 979.739,683.238 980.298,683.238 980.858,683.238 981.417,683.238 981.976,683.238 982.535,683.238 983.095,683.238 983.654,683.238 984.213,683.238 984.772,683.238 985.332,683.238 985.891,683.238 986.45,683.238 987.009,683.238 987.569,683.238 988.128,683.238 988.687,683.238 989.246,683.238 989.806,683.238 990.365,683.238 990.924,683.238 991.483,683.238 992.043,683.238 992.602,683.238 993.161,683.238 993.72,683.238 994.28,683.238 994.839,683.238 995.398,683.238 995.957,683.238 996.517,683.238 997.076,683.238 997.635,683.238 998.194,683.238 998.754,683.238 999.313,683.238 999.872,683.238 1000.43,683.238 1000.99,683.238 1001.55,683.238 1002.11,683.238 1002.67,683.238 1003.23,683.238 1003.79,683.238 1004.35,683.238 1004.91,683.238 1005.46,683.238 1006.02,683.238 1006.58,683.238 1007.14,683.238 1007.7,683.238 1008.26,683.238 1008.82,683.238 1009.38,683.238 1009.94,683.238 1010.5,683.238 1011.06,683.238 1011.62,683.238 1012.18,683.238 1012.73,683.238 1013.29,683.238 1013.85,683.238 1014.41,683.238 1014.97,683.238 1015.53,683.238 1016.09,683.238 1016.65,683.238 1017.21,683.238 1017.77,683.238 1018.33,683.238 1018.89,683.238 1019.45,683.238 1020.01,683.238 1020.56,683.238 1021.12,683.238 1021.68,683.238 1022.24,683.238 1022.8,683.238 1023.36,683.238 1023.92,683.238 1024.48,683.238 1025.04,683.238 1025.6,683.238 1026.16,683.238 1026.72,683.238 1027.28,683.238 1027.83,683.238 1028.39,683.238 1028.95,683.238 1029.51,683.238 1030.07,683.238 1030.63,683.238 1031.19,683.238 1031.75,683.238 1032.31,683.238 1032.87,683.238 1033.43,683.238 1033.99,683.238 1034.55,683.238 1035.1,683.238 1035.66,683.238 1036.22,683.238 1036.78,683.238 1037.34,683.238 1037.9,683.238 1038.46,683.238 1039.02,683.238 1039.58,683.238 1040.14,683.238 1040.7,683.238 1041.26,683.238 1041.82,683.238 1042.38,683.238 1042.93,683.238 1043.49,683.238 1044.05,683.238 1044.61,683.238 1045.17,683.238 1045.73,683.238 1046.29,683.238 1046.85,683.238 1047.41,683.238 1047.97,683.238 1048.53,683.238 1049.09,683.238 1049.65,683.238 1050.2,683.238 1050.76,683.238 1051.32,683.238 1051.88,683.238 1052.44,683.238 1053,683.238 1053.56,683.238 1054.12,683.238 1054.68,683.238 1055.24,683.238 1055.8,683.238 1056.36,683.238 1056.92,683.238 1057.48,683.238 1058.03,683.238 1058.59,683.238 1059.15,683.238 1059.71,683.238 1060.27,683.238 1060.83,683.238 1061.39,683.238 1061.95,683.238 1062.51,683.238 1063.07,683.238 1063.63,683.238 1064.19,683.238 1064.75,683.238 1065.3,683.238 1065.86,683.238 1066.42,683.238 1066.98,683.238 1067.54,683.238 1068.1,683.238 1068.66,683.238 1069.22,683.238 1069.78,683.238 1070.34,683.238 1070.9,683.238 1071.46,683.238 1072.02,683.238 1072.57,683.238 1073.13,683.238 1073.69,683.238 1074.25,683.238 1074.81,683.238 1075.37,683.238 1075.93,683.238 1076.49,683.238 1077.05,683.238 1077.61,683.238 1078.17,683.238 1078.73,683.238 1079.29,683.238 1079.85,683.238 1080.4,683.238 1080.96,683.238 1081.52,683.238 1082.08,683.238 1082.64,683.238 1083.2,683.238 1083.76,683.238 1084.32,683.238 1084.88,683.238 1085.44,683.238 1086,683.238 1086.56,683.238 1087.12,683.238 1087.67,683.238 1088.23,683.238 1088.79,683.238 1089.35,683.238 1089.91,683.238 1090.47,683.238 1091.03,683.238 1091.59,683.238 1092.15,683.238 1092.71,683.238 1093.27,683.238 1093.83,683.238 1094.39,683.238 1094.94,683.238 1095.5,683.238 1096.06,683.238 1096.62,683.238 1097.18,683.238 1097.74,683.238 1098.3,683.238 1098.86,683.238 1099.42,683.238 1099.98,683.238 1100.54,683.238 1101.1,683.238 1101.66,683.238 1102.22,683.238 1102.77,683.238 1103.33,683.238 1103.89,683.238 1104.45,683.238 1105.01,683.238 1105.57,683.238 1106.13,683.238 1106.69,683.238 1107.25,683.238 1107.81,683.238 1108.37,683.238 1108.93,683.238 1109.49,683.238 1110.04,683.238 1110.6,683.238 1111.16,683.238 1111.72,683.238 1112.28,683.238 1112.84,683.238 1113.4,683.238 1113.96,683.238 1114.52,683.238 1115.08,683.238 1115.64,683.238 1116.2,683.238 1116.76,683.238 1117.31,683.238 1117.87,683.238 1118.43,683.238 1118.99,683.238 1119.55,683.238 1120.11,683.238 1120.67,683.238 1121.23,683.238 1121.79,683.238 1122.35,683.238 1122.91,683.238 1123.47,683.238 1124.03,683.238 1124.59,683.238 1125.14,683.238 1125.7,683.238 1126.26,683.238 1126.82,683.238 1127.38,683.238 1127.94,683.238 1128.5,683.238 1129.06,683.238 1129.62,683.238 1130.18,683.238 1130.74,683.238 1131.3,683.238 1131.86,683.238 1132.41,683.238 1132.97,683.238 1133.53,683.238 1134.09,683.238 1134.65,683.238 1135.21,683.238 1135.77,683.238 1136.33,683.238 1136.89,683.238 1137.45,683.238 1138.01,683.238 1138.57,683.238 1139.13,683.238 1139.68,683.238 1140.24,683.238 1140.8,683.238 1141.36,683.238 1141.92,683.238 1142.48,683.238 1143.04,683.238 1143.6,683.238 1144.16,683.238 1144.72,683.238 1145.28,683.238 1145.84,683.238 1146.4,683.238 1146.96,683.238 1147.51,683.238 1148.07,683.238 1148.63,683.238 1149.19,683.238 1149.75,683.238 1150.31,683.238 1150.87,683.238 1151.43,683.238 1151.99,683.238 1152.55,683.238 1153.11,683.238 1153.67,683.238 1154.23,683.238 1154.78,683.238 1155.34,683.238 1155.9,683.238 1156.46,683.238 1157.02,683.238 1157.58,683.238 1158.14,683.238 1158.7,683.238 1159.26,683.238 1159.82,683.238 1160.38,683.238 1160.94,683.238 1161.5,683.238 1162.05,683.238 1162.61,683.238 1163.17,683.238 1163.73,683.238 1164.29,683.238 1164.85,683.238 1165.41,683.238 1165.97,683.238 1166.53,683.238 1167.09,683.238 1167.65,683.238 1168.21,683.238 1168.77,683.238 1169.33,683.238 1169.88,683.238 1170.44,683.238 1171,683.238 1171.56,683.238 1172.12,683.238 1172.68,683.238 1173.24,683.238 1173.8,683.238 1174.36,683.238 1174.92,683.238 1175.48,683.238 1176.04,683.238 1176.6,683.238 1177.15,683.238 1177.71,683.238 1178.27,683.238 1178.83,683.238 1179.39,683.238 1179.95,683.238 1180.51,683.238 1181.07,683.238 1181.63,683.238 1182.19,683.238 1182.75,683.238 1183.31,683.238 1183.87,683.238 1184.43,683.238 1184.98,683.238 1185.54,683.238 1186.1,683.238 1186.66,683.238 1187.22,683.238 1187.78,683.238 1188.34,683.238 1188.9,683.238 1189.46,683.238 1190.02,683.238 1190.58,683.238 1191.14,683.238 1191.7,683.238 1192.25,683.238 1192.81,683.238 1193.37,683.238 1193.93,683.238 1194.49,683.238 1195.05,683.238 1195.61,683.238 1196.17,683.238 1196.73,683.238 1197.29,683.238 1197.85,683.238 1198.41,683.238 1198.97,683.238 1199.52,683.238 1200.08,683.238 1200.64,683.238 1201.2,683.238 1201.76,683.238 1202.32,683.238 1202.88,683.238 1203.44,683.238 1204,683.238 1204.56,683.238 1205.12,683.238 1205.68,683.238 1206.24,683.238 1206.8,683.238 1207.35,683.238 1207.91,683.238 1208.47,683.238 1209.03,683.238 1209.59,683.238 1210.15,683.238 1210.71,683.238 1211.27,683.238 1211.83,683.238 1212.39,683.238 1212.95,683.238 1213.51,683.238 1214.07,683.238 1214.62,683.238 1215.18,683.238 1215.74,683.238 1216.3,683.238 1216.86,683.238 1217.42,683.238 1217.98,683.238 1218.54,683.238 1219.1,683.238 1219.66,683.238 1220.22,683.238 1220.78,683.238 1221.34,683.238 1221.89,683.238 1222.45,683.238 1223.01,683.238 1223.57,683.238 1224.13,683.238 1224.69,683.238 1225.25,683.238 1225.81,683.238 1226.37,683.238 1226.93,683.238 1227.49,683.238 1228.05,683.238 1228.61,683.238 1229.17,683.238 1229.72,683.238 1230.28,683.238 1230.84,683.238 1231.4,683.238 1231.96,683.238 1232.52,683.238 1233.08,683.238 1233.64,683.238 1234.2,683.238 1234.76,683.238 1235.32,683.238 1235.88,683.238 1236.44,683.238 1236.99,683.238 1237.55,683.238 1238.11,683.238 1238.67,683.238 1239.23,683.238 1239.79,683.238 1240.35,683.238 1240.91,683.238 1241.47,683.238 1242.03,683.238 1242.59,683.238 1243.15,683.238 1243.71,683.238 1244.26,683.238 1244.82,683.238 1245.38,683.238 1245.94,683.238 1246.5,683.238 1247.06,683.238 1247.62,683.238 1248.18,683.238 1248.74,683.238 1249.3,683.238 1249.86,683.238 1250.42,683.238 1250.98,683.238 1251.54,683.238 1252.09,683.238 1252.65,683.238 1253.21,683.238 1253.77,683.238 1254.33,683.238 1254.89,683.238 1255.45,683.238 1256.01,683.238 1256.57,683.238 1257.13,683.238 1257.69,683.238 1258.25,683.238 1258.81,683.238 1259.36,683.238 1259.92,683.238 1260.48,683.238 1261.04,683.238 1261.6,683.238 1262.16,683.238 1262.72,683.238 1263.28,683.238 1263.84,683.238 1264.4,683.238 1264.96,683.238 1265.52,683.238 1266.08,683.238 1266.63,683.238 1267.19,683.238 1267.75,683.238 1268.31,683.238 1268.87,683.238 1269.43,683.238 1269.99,683.238 1270.55,683.238 1271.11,683.238 1271.67,683.238 1272.23,683.238 1272.79,683.238 1273.35,683.238 1273.91,683.238 1274.46,683.238 1275.02,683.238 1275.58,683.238 1276.14,683.238 1276.7,683.238 1277.26,683.238 1277.82,683.238 1278.38,683.238 1278.94,683.238 1279.5,683.238 1280.06,683.238 1280.62,683.238 1281.18,683.238 1281.73,683.238 1282.29,683.238 1282.85,683.238 1283.41,683.238 1283.97,683.238 1284.53,683.238 1285.09,683.238 1285.65,683.238 1286.21,683.238 1286.77,683.238 1287.33,683.238 1287.89,683.238 1288.45,683.238 1289,683.238 1289.56,683.238 1290.12,683.238 1290.68,683.238 1291.24,683.238 1291.8,683.238 1292.36,683.238 1292.92,683.238 1293.48,683.238 1294.04,683.238 1294.6,683.238 1295.16,683.238 1295.72,683.238 1296.28,683.238 1296.83,683.238 1297.39,683.238 1297.95,683.238 1298.51,683.238 1299.07,683.238 1299.63,683.238 1300.19,683.238 1300.75,683.238 1301.31,683.238 1301.87,683.238 1302.43,683.238 1302.99,683.238 1303.55,683.238 1304.1,683.238 1304.66,683.238 1305.22,683.238 1305.78,683.238 1306.34,683.238 1306.9,683.238 1307.46,683.238 1308.02,683.238 1308.58,683.238 1309.14,683.238 1309.7,683.238 1310.26,683.238 1310.82,683.238 1311.38,683.238 1311.93,683.238 1312.49,683.238 1313.05,683.238 1313.61,683.238 1314.17,683.238 1314.73,683.238 1315.29,683.238 1315.85,683.238 1316.41,683.238 1316.97,683.238 1317.53,683.238 1318.09,683.238 1318.65,683.238 1319.2,683.238 1319.76,683.238 1320.32,683.238 1320.88,683.238 1321.44,683.238 1322,683.238 1322.56,683.238 1323.12,683.238 1323.68,683.238 1324.24,683.238 1324.8,683.238 1325.36,683.238 1325.92,683.238 1326.47,683.238 1327.03,683.238 1327.59,683.238 1328.15,683.238 1328.71,683.238 1329.27,683.238 1329.83,683.238 1330.39,683.238 1330.95,683.238 1331.51,683.238 1332.07,683.238 1332.63,683.238 1333.19,683.238 1333.75,683.238 1334.3,683.238 1334.86,683.238 1335.42,683.238 1335.98,683.238 1336.54,683.238 1337.1,683.238 1337.66,683.238 1338.22,683.238 1338.78,683.238 1339.34,683.238 1339.9,683.238 1340.46,683.238 1341.02,683.238 1341.57,683.238 1342.13,683.238 1342.69,683.238 1343.25,683.238 1343.81,683.238 1344.37,683.238 1344.93,683.238 1345.49,683.238 1346.05,683.238 1346.61,683.238 1347.17,683.238 1347.73,683.238 1348.29,683.238 1348.84,683.238 1349.4,683.238 1349.96,683.238 1350.52,683.238 1351.08,683.238 1351.64,683.238 1352.2,683.238 1352.76,683.238 1353.32,683.238 1353.88,683.238 1354.44,683.238 1355,683.238 1355.56,683.238 1356.12,683.238 1356.67,683.238 1357.23,683.238 1357.79,683.238 1358.35,683.238 1358.91,683.238 1359.47,683.238 1360.03,683.238 1360.59,683.238 1361.15,683.238 1361.71,683.238 1362.27,683.238 1362.83,683.238 1363.39,683.238 1363.94,683.238 1364.5,683.238 1365.06,683.238 1365.62,683.238 1366.18,683.238 1366.74,683.238 1367.3,683.238 1367.86,683.238 1368.42,683.238 1368.98,683.238 1369.54,683.238 1370.1,683.238 1370.66,683.238 1371.21,683.238 1371.77,683.238 1372.33,683.238 1372.89,683.238 1373.45,683.238 1374.01,683.238 1374.57,683.238 1375.13,683.238 1375.69,683.238 1376.25,683.238 1376.81,683.238 1377.37,683.238 1377.93,683.238 1378.49,683.238 1379.04,683.238 1379.6,683.238 1380.16,683.238 1380.72,683.238 1381.28,683.238 1381.84,683.238 1382.4,683.238 1382.96,683.238 1383.52,683.238 1384.08,683.238 1384.64,683.238 1385.2,683.238 1385.76,683.238 1386.31,683.238 1386.87,683.238 1387.43,683.238 1387.99,683.238 1388.55,683.238 1389.11,683.238 1389.67,683.238 1390.23,683.238 1390.79,683.238 1391.35,683.238 1391.91,683.238 1392.47,683.238 1393.03,683.238 1393.58,683.238 1394.14,683.238 1394.7,683.238 1395.26,683.238 1395.82,683.238 1396.38,683.238 1396.94,683.238 1397.5,683.238 1398.06,683.238 1398.62,683.238 1399.18,683.238 1399.74,683.238 1400.3,683.238 1400.86,683.238 1401.41,683.238 1401.97,683.238 1402.53,683.238 1403.09,683.238 1403.65,683.238 1404.21,683.238 1404.77,683.238 1405.33,683.238 1405.89,683.238 1406.45,683.238 1407.01,683.238 1407.57,683.238 1408.13,683.238 1408.68,683.238 1409.24,683.238 1409.8,683.238 1410.36,683.238 1410.92,683.238 1411.48,683.238 1412.04,683.238 1412.6,683.238 1413.16,683.238 1413.72,683.238 1414.28,683.238 1414.84,683.238 1415.4,683.238 1415.95,683.238 1416.51,683.238 1417.07,683.238 1417.63,683.238 1418.19,683.238 1418.75,683.238 1419.31,683.238 1419.87,683.238 1420.43,683.238 1420.99,683.238 1421.55,683.238 1422.11,683.238 1422.67,683.238 1423.23,683.238 1423.78,683.238 1424.34,683.238 1424.9,683.238 1425.46,683.238 1426.02,683.238 1426.58,683.238 1427.14,683.238 1427.7,683.238 1428.26,683.238 1428.82,683.238 1429.38,683.238 1429.94,683.238 1430.5,683.238 1431.05,683.238 1431.61,683.238 1432.17,683.238 1432.73,683.238 1433.29,683.238 1433.85,683.238 1434.41,683.238 1434.97,683.238 1435.53,683.238 1436.09,683.238 1436.65,683.238 1437.21,683.238 1437.77,683.238 1438.33,683.238 1438.88,683.238 1439.44,683.238 1440,683.238 1440.56,683.238 1441.12,683.238 1441.68,683.238 1442.24,683.238 1442.8,683.238 1443.36,683.238 1443.92,683.238 1444.48,683.238 1445.04,683.238 1445.6,683.238 1446.15,683.238 1446.71,683.238 1447.27,683.238 1447.83,683.238 1448.39,683.238 1448.95,683.238 1449.51,683.238 1450.07,683.238 1450.63,683.238 1451.19,683.238 1451.75,683.238 1452.31,683.238 1452.87,683.238 1453.42,683.238 1453.98,683.238 1454.54,683.238 1455.1,683.238 1455.66,683.238 1456.22,683.238 1456.78,683.238 1457.34,683.238 1457.9,683.238 1458.46,683.238 1459.02,683.238 1459.58,683.238 1460.14,683.238 1460.7,683.238 1461.25,683.238 1461.81,683.238 1462.37,683.238 1462.93,683.238 1463.49,683.238 1464.05,683.238 1464.61,683.238 1465.17,683.238 1465.73,683.238 1466.29,683.238 1466.85,683.238 1467.41,683.238 1467.97,683.238 1468.52,683.238 1469.08,683.238 1469.64,683.238 1470.2,683.238 1470.76,683.238 1471.32,683.238 1471.88,683.238 1472.44,683.238 1473,683.238 1473.56,683.238 1474.12,683.238 1474.68,683.238 1475.24,683.238 1475.79,683.238 1476.35,683.238 1476.91,683.238 1477.47,683.238 1478.03,683.238 1478.59,683.238 1479.15,683.238 1479.71,683.238 1480.27,683.238 1480.83,683.238 1481.39,683.238 1481.95,683.238 1482.51,683.238 1483.07,683.238 1483.62,683.238 1484.18,683.238 1484.74,683.238 1485.3,683.238 1485.86,683.238 1486.42,683.238 1486.98,683.238 1487.54,683.238 1488.1,683.238 1488.66,683.238 1489.22,683.238 1489.78,683.238 1490.34,683.238 1490.89,683.238 1491.45,683.238 1492.01,683.238 1492.57,683.238 1493.13,683.238 1493.69,683.238 1494.25,683.238 1494.81,683.238 1495.37,683.238 1495.93,683.238 1496.49,683.238 1497.05,683.238 1497.61,683.238 1498.16,683.238 1498.72,683.238 1499.28,683.238 1499.84,683.238 1500.4,683.238 1500.96,683.238 1501.52,683.238 1502.08,683.238 1502.64,683.238 1503.2,683.238 1503.76,683.238 1504.32,683.238 1504.88,683.238 1505.44,683.238 1505.99,683.238 1506.55,683.238 1507.11,683.238 1507.67,683.238 1508.23,683.238 1508.79,683.238 1509.35,683.238 1509.91,683.238 1510.47,683.238 1511.03,683.238 1511.59,683.238 1512.15,683.238 1512.71,683.238 1513.26,683.238 1513.82,683.238 1514.38,683.238 1514.94,683.238 1515.5,683.238 1516.06,683.238 1516.62,683.238 1517.18,683.238 1517.74,683.238 1518.3,683.238 1518.86,683.238 1519.42,683.238 1519.98,683.238 1520.53,683.238 1521.09,683.238 1521.65,683.238 1522.21,683.238 1522.77,683.238 1523.33,683.238 1523.89,683.238 1524.45,683.238 1525.01,683.238 1525.57,683.238 1526.13,683.238 1526.69,683.238 1527.25,683.238 1527.81,683.238 1528.36,683.238 1528.92,683.238 1529.48,683.238 1530.04,683.238 1530.6,683.238 1531.16,683.238 1531.72,683.238 1532.28,683.238 1532.84,683.238 1533.4,683.238 1533.96,683.238 1534.52,683.238 1535.08,683.238 1535.63,683.238 1536.19,683.238 1536.75,683.238 1537.31,683.238 1537.87,683.238 1538.43,683.238 1538.99,683.238 1539.55,683.238 1540.11,683.238 1540.67,683.238 1541.23,683.238 1541.79,683.238 1542.35,683.238 1542.9,683.238 1543.46,683.238 1544.02,683.238 1544.58,683.238 1545.14,683.238 1545.7,683.238 1546.26,683.238 1546.82,683.238 1547.38,683.238 1547.94,683.238 1548.5,683.238 1549.06,683.238 1549.62,683.238 1550.18,683.238 1550.73,683.238 1551.29,683.238 1551.85,683.238 1552.41,683.238 1552.97,683.238 1553.53,683.238 1554.09,683.238 1554.65,683.238 1555.21,683.238 1555.77,683.238 1556.33,683.238 1556.89,683.238 1557.45,683.238 1558,683.238 1558.56,683.238 1559.12,683.238 1559.68,683.238 1560.24,683.238 1560.8,683.238 1561.36,683.238 1561.92,683.238 1562.48,683.238 1563.04,683.238 1563.6,683.238 1564.16,683.238 1564.72,683.238 1565.28,683.238 1565.83,683.238 1566.39,683.238 1566.95,683.238 1567.51,683.238 1568.07,683.238 1568.63,683.238 1569.19,683.238 1569.75,683.238 1570.31,683.238 1570.87,683.238 1571.43,683.238 1571.99,683.238 1572.55,683.238 1573.1,683.238 1573.66,683.238 1574.22,683.238 1574.78,683.238 1575.34,683.238 1575.9,683.238 1576.46,683.238 1577.02,683.238 1577.58,683.238 1578.14,683.238 1578.7,683.238 1579.26,683.238 1579.82,683.238 1580.37,683.238 1580.93,683.238 1581.49,683.238 1582.05,683.238 1582.61,683.238 1583.17,683.238 1583.73,683.238 1584.29,683.238 1584.85,683.238 1585.41,683.238 1585.97,683.238 1586.53,683.238 1587.09,683.238 1587.65,683.238 1588.2,683.238 1588.76,683.238 1589.32,683.238 1589.88,683.238 1590.44,683.238 1591,683.238 1591.56,683.238 1592.12,683.238 1592.68,683.238 1593.24,683.238 1593.8,683.238 1594.36,683.238 1594.92,683.238 1595.47,683.238 1596.03,683.238 1596.59,683.238 1597.15,683.238 1597.71,683.238 1598.27,683.238 1598.83,683.238 1599.39,683.238 1599.95,683.238 1600.51,683.238 1601.07,683.238 1601.63,683.238 1602.19,683.238 1602.74,683.238 1603.3,683.238 1603.86,683.238 1604.42,683.238 1604.98,683.238 1605.54,683.238 1606.1,683.238 1606.66,683.238 1607.22,683.238 1607.78,683.238 1608.34,683.238 1608.9,683.238 1609.46,683.238 1610.02,683.238 1610.57,683.238 1611.13,683.238 1611.69,683.238 1612.25,683.238 1612.81,683.238 1613.37,683.238 1613.93,683.238 1614.49,683.238 1615.05,683.238 1615.61,683.238 1616.17,683.238 1616.73,683.238 1617.29,683.238 1617.84,683.238 1618.4,683.238 1618.96,683.238 1619.52,683.238 1620.08,683.238 1620.64,683.238 1621.2,683.238 1621.76,683.238 1622.32,683.238 1622.88,683.238 1623.44,683.238 1624,683.238 1624.56,683.238 1625.11,683.238 1625.67,683.238 1626.23,683.238 1626.79,683.238 1627.35,683.238 1627.91,683.238 1628.47,683.238 1629.03,683.238 1629.59,683.238 1630.15,683.238 1630.71,683.238 1631.27,683.238 1631.83,683.238 1632.39,683.238 1632.94,683.238 1633.5,683.238 1634.06,683.238 1634.62,683.238 1635.18,683.238 1635.74,683.238 1636.3,683.238 1636.86,683.238 1637.42,683.238 1637.98,683.238 1638.54,683.238 1639.1,683.238 1639.66,683.238 1640.21,683.238 1640.77,683.238 1641.33,683.238 1641.89,683.238 1642.45,683.238 1643.01,683.238 1643.57,683.238 1644.13,683.238 1644.69,683.238 1645.25,683.238 1645.81,683.238 1646.37,683.238 1646.93,683.238 1647.48,683.238 1648.04,683.238 1648.6,683.238 1649.16,683.238 1649.72,683.238 1650.28,683.238 1650.84,683.238 1651.4,683.238 1651.96,683.238 1652.52,683.238 1653.08,683.238 1653.64,683.238 1654.2,683.238 1654.76,683.238 1655.31,683.238 1655.87,683.238 1656.43,683.238 1656.99,683.238 1657.55,683.238 1658.11,683.238 1658.67,683.238 1659.23,683.238 1659.79,683.238 1660.35,683.238 1660.91,683.238 1661.47,683.238 1662.03,683.238 1662.58,683.238 1663.14,683.238 1663.7,683.238 1664.26,683.238 1664.82,683.238 1665.38,683.238 1665.94,683.238 1666.5,683.238 1667.06,683.238 1667.62,683.238 1668.18,683.238 1668.74,683.238 1669.3,683.238 1669.85,683.238 1670.41,683.238 1670.97,683.238 1671.53,683.238 1672.09,683.238 1672.65,683.238 1673.21,683.238 1673.77,683.238 1674.33,683.238 1674.89,683.238 1675.45,683.238 1676.01,683.238 1676.57,683.238 1677.13,683.238 1677.68,683.238 1678.24,683.238 1678.8,683.238 1679.36,683.238 1679.92,683.238 1680.48,683.238 1681.04,683.238 1681.6,683.238 1682.16,683.238 1682.72,683.238 1683.28,683.238 1683.84,683.238 1684.4,683.238 1684.95,683.238 1685.51,683.238 1686.07,683.238 1686.63,683.238 1687.19,683.238 1687.75,683.238 1688.31,683.238 1688.87,683.238 1689.43,683.238 1689.99,683.238 1690.55,683.238 1691.11,683.238 1691.67,683.238 1692.23,683.238 1692.78,683.238 1693.34,683.238 1693.9,683.238 1694.46,683.238 1695.02,683.238 1695.58,683.238 1696.14,683.238 1696.7,683.238 1697.26,683.238 1697.82,683.238 1698.38,683.238 1698.94,683.238 1699.5,683.238 1700.05,683.238 1700.61,683.238 1701.17,683.238 1701.73,683.238 1702.29,683.238 1702.85,683.238 1703.41,683.238 1703.97,683.238 1704.53,683.238 1705.09,683.238 1705.65,683.238 1706.21,683.238 1706.77,683.238 1707.32,683.238 1707.88,683.238 1708.44,683.238 1709,683.238 1709.56,683.238 1710.12,683.238 1710.68,683.238 1711.24,683.238 1711.8,683.238 1712.36,683.238 1712.92,683.238 1713.48,683.238 1714.04,683.238 1714.6,683.238 1715.15,683.238 1715.71,683.238 1716.27,683.238 1716.83,683.238 1717.39,683.238 1717.95,683.238 1718.51,683.238 1719.07,683.238 1719.63,683.238 1720.19,683.238 1720.75,683.238 1721.31,683.238 1721.87,683.238 1722.42,683.238 1722.98,683.238 1723.54,683.238 1724.1,683.238 1724.66,683.238 1725.22,683.238 1725.78,683.238 1726.34,683.238 1726.9,683.238 1727.46,683.238 1728.02,683.238 1728.58,683.238 1729.14,683.238 1729.69,683.238 1730.25,683.238 1730.81,683.238 1731.37,683.238 1731.93,683.238 1732.49,683.238 1733.05,683.238 1733.61,683.238 1734.17,683.238 1734.73,683.238 1735.29,683.238 1735.85,683.238 1736.41,683.238 1736.97,683.238 1737.52,683.238 1738.08,683.238 1738.64,683.238 1739.2,683.238 1739.76,683.238 1740.32,683.238 1740.88,683.238 1741.44,683.238 1742,683.238 1742.56,683.238 1743.12,683.238 1743.68,683.238 1744.24,683.238 1744.79,683.238 1745.35,683.238 1745.91,683.238 1746.47,683.238 1747.03,683.238 1747.59,683.238 1748.15,683.238 1748.71,683.238 1749.27,683.238 1749.83,683.238 1750.39,683.238 1750.95,683.238 1751.51,683.238 1752.06,683.238 1752.62,683.238 1753.18,683.238 1753.74,683.238 1754.3,683.238 1754.86,683.238 1755.42,683.238 1755.98,683.238 1756.54,683.238 1757.1,683.238 1757.66,683.238 1758.22,683.238 1758.78,683.238 1759.34,683.238 1759.89,683.238 1760.45,683.238 1761.01,683.238 1761.57,683.238 1762.13,683.238 1762.69,683.238 1763.25,683.238 1763.81,683.238 1764.37,683.238 1764.93,683.238 1765.49,683.238 1766.05,683.238 1766.61,683.238 1767.16,683.238 1767.72,683.238 1768.28,683.238 1768.84,683.238 1769.4,683.238 1769.96,683.238 1770.52,683.238 1771.08,683.238 1771.64,683.238 1772.2,683.238 1772.76,683.238 1773.32,683.238 1773.88,683.238 1774.43,683.238 1774.99,683.238 1775.55,683.238 1776.11,683.238 1776.67,683.238 1777.23,683.238 1777.79,683.238 1778.35,683.238 1778.91,683.238 1779.47,683.238 1780.03,683.238 1780.59,683.238 1781.15,683.238 1781.71,683.238 1782.26,683.238 1782.82,683.238 1783.38,683.238 1783.94,683.238 1784.5,683.238 1785.06,683.238 1785.62,683.238 1786.18,683.238 1786.74,683.238 1787.3,683.238 1787.86,683.238 1788.42,683.238 1788.98,683.238 1789.53,683.238 1790.09,683.238 1790.65,683.238 1791.21,683.238 1791.77,683.238 1792.33,683.238 1792.89,683.238 1793.45,683.238 1794.01,683.238 1794.57,683.238 1795.13,683.238 1795.69,683.238 1796.25,683.238 1796.8,683.238 1797.36,683.238 1797.92,683.238 1798.48,683.238 1799.04,683.238 1799.6,683.238 1800.16,683.238 1800.72,683.238 1801.28,683.238 1801.84,683.238 1802.4,683.238 1802.96,683.238 1803.52,683.238 1804.08,683.238 1804.63,683.238 1805.19,683.238 1805.75,683.238 1806.31,683.238 1806.87,683.238 1807.43,683.238 1807.99,683.238 1808.55,683.238 1809.11,683.238 1809.67,683.238 1810.23,683.238 1810.79,683.238 1811.35,683.238 1811.9,683.238 1812.46,683.238 1813.02,683.238 1813.58,683.238 1814.14,683.238 1814.7,683.238 1815.26,683.238 1815.82,683.238 1816.38,683.238 1816.94,683.238 1817.5,683.238 1818.06,683.238 1818.62,683.238 1819.18,683.238 1819.73,683.238 1820.29,683.238 1820.85,683.238 1821.41,683.238 1821.97,683.238 1822.53,683.238 1823.09,683.238 1823.65,683.238 1824.21,683.238 1824.77,683.238 1825.33,683.238 1825.89,683.238 1826.45,683.238 1827,683.238 1827.56,683.238 1828.12,683.238 1828.68,683.238 1829.24,683.238 1829.8,683.238 1830.36,683.238 1830.92,683.238 1831.48,683.238 1832.04,683.238 1832.6,683.238 1833.16,683.238 1833.72,683.238 1834.27,683.238 1834.83,683.238 1835.39,683.238 1835.95,683.238 1836.51,683.238 1837.07,683.238 1837.63,683.238 1838.19,683.238 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.018520564247277 ± 0.02059473535695617\nProjected Energy: -4.013337242760377 ± (0.007689845769954573, 0.0073406202819183974)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.530153</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4016e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.4817e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.067e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.482e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.956e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.799e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613369\n -0.7590191922770906\n  0.1358418221962303\n  0.15789998694607377\n  0.8767114411781307\n  1.530592997097317\n  1.5835732611867455\n  3.072870330325869\n  3.125672653951831\n  4.8621072215621695\n  6.260694850380596\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AdaptiveTimeStep","page":"API","title":"Rimu.AdaptiveTimeStep","text":"AdaptiveTimeStep(; damp_zombies=0.9, grow=1.01) <: TimeStepStrategy\n\nAdapt the time step to avoid zombies.\n\nParameters\n\ndamp_zombies: factor by which to decrease the time step for each zombie.\ngrow: factor by which to increase the time step when there are no zombies.\n\nSee also TimeStepStrategy, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep() <: TimeStepStrategy\n\nKeep the time_step constant.\n\nSee also TimeStepStrategy, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 12)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\nAdaptiveTimeStep\n\nSee also FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    new_time_step,\n    tnorm,\n    single_state,\n    step\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, deaths, clones, zombies, tnorm, len)\n-> new_time_step\n\nUpdate the time step according to the strategy s.\n\nSee also TimeStepStrategy.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v::AbstractDVec)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces, AbstractDVec.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem. The names should be unique and not contain spaces or special characters.\n\nFor a StochasticStyle, the first three stats are the number of clones, deaths, and zombies.\n\nSee also StochasticStyle, CompressionStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
