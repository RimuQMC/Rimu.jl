var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 12)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21267976859087112 ± 0.001701660360051838\n   G2(1) = 0.9168078026287976 ± 0.0006919487787238397\n   G2(2) = 0.9819542163663938 ± 0.0007199153002796497\n   G2(3) = 0.9897961934187456 ± 0.0009178578516821043\n   G2(4) = 0.9819542163663938 ± 0.0007199153002796497\n   G2(5) = 0.9168078026287976 ± 0.0006919487787238397\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9477711058268854 ± 0.13567345617097443\n   Replica 2: -4.028497514809879 ± 0.13382963551290455\n   Replica 3: -4.0319492364621645 ± 0.12469838347650426\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip410\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip410)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip411\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip410)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip412\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.82 2211.02,1260.82 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.44 2211.02,1003.44 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.066 2211.02,746.066 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.687 2211.02,488.687 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.308 2211.02,231.308 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip410)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.82 423.181,1260.82 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.44 423.181,1003.44 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.066 423.181,746.066 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.687 423.181,488.687 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.308 423.181,231.308 \"/>\n<path clip-path=\"url(#clip410)\" d=\"M356.339 1246.62 Q352.728 1246.62 350.899 1250.19 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.96 350.899 1271.53 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.53 Q363.608 1267.96 363.608 1260.86 Q363.608 1253.73 361.779 1250.19 Q359.973 1246.62 356.339 1246.62 M356.339 1242.92 Q362.149 1242.92 365.205 1247.53 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.59 365.205 1274.19 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.19 Q344.395 1269.59 344.395 1260.86 Q344.395 1252.11 347.45 1247.53 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M290.043 1016.79 L306.363 1016.79 L306.363 1020.72 L284.418 1020.72 L284.418 1016.79 Q287.08 1014.04 291.664 1009.41 Q296.27 1004.75 297.451 1003.41 Q299.696 1000.89 300.576 999.151 Q301.478 997.392 301.478 995.702 Q301.478 992.947 299.534 991.211 Q297.613 989.475 294.511 989.475 Q292.312 989.475 289.858 990.239 Q287.427 991.003 284.65 992.554 L284.65 987.832 Q287.474 986.697 289.927 986.119 Q292.381 985.54 294.418 985.54 Q299.789 985.54 302.983 988.225 Q306.177 990.91 306.177 995.401 Q306.177 997.531 305.367 999.452 Q304.58 1001.35 302.474 1003.94 Q301.895 1004.61 298.793 1007.83 Q295.691 1011.03 290.043 1016.79 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M316.224 986.165 L334.58 986.165 L334.58 990.1 L320.506 990.1 L320.506 998.572 Q321.524 998.225 322.543 998.063 Q323.562 997.878 324.58 997.878 Q330.367 997.878 333.747 1001.05 Q337.126 1004.22 337.126 1009.64 Q337.126 1015.22 333.654 1018.32 Q330.182 1021.4 323.862 1021.4 Q321.687 1021.4 319.418 1021.03 Q317.173 1020.66 314.765 1019.91 L314.765 1015.22 Q316.849 1016.35 319.071 1016.91 Q321.293 1017.46 323.77 1017.46 Q327.774 1017.46 330.112 1015.35 Q332.45 1013.25 332.45 1009.64 Q332.45 1006.03 330.112 1003.92 Q327.774 1001.81 323.77 1001.81 Q321.895 1001.81 320.02 1002.23 Q318.168 1002.65 316.224 1003.53 L316.224 986.165 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M356.339 989.244 Q352.728 989.244 350.899 992.808 Q349.094 996.35 349.094 1003.48 Q349.094 1010.59 350.899 1014.15 Q352.728 1017.69 356.339 1017.69 Q359.973 1017.69 361.779 1014.15 Q363.608 1010.59 363.608 1003.48 Q363.608 996.35 361.779 992.808 Q359.973 989.244 356.339 989.244 M356.339 985.54 Q362.149 985.54 365.205 990.146 Q368.284 994.73 368.284 1003.48 Q368.284 1012.21 365.205 1016.81 Q362.149 1021.4 356.339 1021.4 Q350.529 1021.4 347.45 1016.81 Q344.395 1012.21 344.395 1003.48 Q344.395 994.73 347.45 990.146 Q350.529 985.54 356.339 985.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M286.062 728.786 L304.418 728.786 L304.418 732.721 L290.344 732.721 L290.344 741.193 Q291.363 740.846 292.381 740.684 Q293.4 740.499 294.418 740.499 Q300.205 740.499 303.585 743.67 Q306.964 746.841 306.964 752.258 Q306.964 757.837 303.492 760.939 Q300.02 764.017 293.701 764.017 Q291.525 764.017 289.256 763.647 Q287.011 763.277 284.603 762.536 L284.603 757.837 Q286.687 758.971 288.909 759.527 Q291.131 760.082 293.608 760.082 Q297.613 760.082 299.951 757.976 Q302.288 755.869 302.288 752.258 Q302.288 748.647 299.951 746.541 Q297.613 744.434 293.608 744.434 Q291.733 744.434 289.858 744.851 Q288.006 745.267 286.062 746.147 L286.062 728.786 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M326.177 731.865 Q322.566 731.865 320.737 735.43 Q318.932 738.971 318.932 746.101 Q318.932 753.207 320.737 756.772 Q322.566 760.314 326.177 760.314 Q329.811 760.314 331.617 756.772 Q333.446 753.207 333.446 746.101 Q333.446 738.971 331.617 735.43 Q329.811 731.865 326.177 731.865 M326.177 728.161 Q331.987 728.161 335.043 732.767 Q338.122 737.351 338.122 746.101 Q338.122 754.828 335.043 759.434 Q331.987 764.017 326.177 764.017 Q320.367 764.017 317.288 759.434 Q314.233 754.828 314.233 746.101 Q314.233 737.351 317.288 732.767 Q320.367 728.161 326.177 728.161 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M356.339 731.865 Q352.728 731.865 350.899 735.43 Q349.094 738.971 349.094 746.101 Q349.094 753.207 350.899 756.772 Q352.728 760.314 356.339 760.314 Q359.973 760.314 361.779 756.772 Q363.608 753.207 363.608 746.101 Q363.608 738.971 361.779 735.43 Q359.973 731.865 356.339 731.865 M356.339 728.161 Q362.149 728.161 365.205 732.767 Q368.284 737.351 368.284 746.101 Q368.284 754.828 365.205 759.434 Q362.149 764.017 356.339 764.017 Q350.529 764.017 347.45 759.434 Q344.395 754.828 344.395 746.101 Q344.395 737.351 347.45 732.767 Q350.529 728.161 356.339 728.161 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M284.835 471.407 L307.057 471.407 L307.057 473.398 L294.511 505.967 L289.627 505.967 L301.432 475.342 L284.835 475.342 L284.835 471.407 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M316.224 471.407 L334.58 471.407 L334.58 475.342 L320.506 475.342 L320.506 483.815 Q321.524 483.467 322.543 483.305 Q323.562 483.12 324.58 483.12 Q330.367 483.12 333.747 486.291 Q337.126 489.463 337.126 494.879 Q337.126 500.458 333.654 503.56 Q330.182 506.638 323.862 506.638 Q321.687 506.638 319.418 506.268 Q317.173 505.898 314.765 505.157 L314.765 500.458 Q316.849 501.592 319.071 502.148 Q321.293 502.703 323.77 502.703 Q327.774 502.703 330.112 500.597 Q332.45 498.49 332.45 494.879 Q332.45 491.268 330.112 489.162 Q327.774 487.055 323.77 487.055 Q321.895 487.055 320.02 487.472 Q318.168 487.889 316.224 488.768 L316.224 471.407 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M356.339 474.486 Q352.728 474.486 350.899 478.051 Q349.094 481.592 349.094 488.722 Q349.094 495.828 350.899 499.393 Q352.728 502.935 356.339 502.935 Q359.973 502.935 361.779 499.393 Q363.608 495.828 363.608 488.722 Q363.608 481.592 361.779 478.051 Q359.973 474.486 356.339 474.486 M356.339 470.782 Q362.149 470.782 365.205 475.389 Q368.284 479.972 368.284 488.722 Q368.284 497.449 365.205 502.055 Q362.149 506.638 356.339 506.638 Q350.529 506.638 347.45 502.055 Q344.395 497.449 344.395 488.722 Q344.395 479.972 347.45 475.389 Q350.529 470.782 356.339 470.782 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M256.664 244.653 L264.303 244.653 L264.303 218.288 L255.992 219.954 L255.992 215.695 L264.256 214.028 L268.932 214.028 L268.932 244.653 L276.571 244.653 L276.571 248.588 L256.664 248.588 L256.664 244.653 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M296.015 217.107 Q292.404 217.107 290.576 220.672 Q288.77 224.213 288.77 231.343 Q288.77 238.449 290.576 242.014 Q292.404 245.556 296.015 245.556 Q299.65 245.556 301.455 242.014 Q303.284 238.449 303.284 231.343 Q303.284 224.213 301.455 220.672 Q299.65 217.107 296.015 217.107 M296.015 213.403 Q301.826 213.403 304.881 218.01 Q307.96 222.593 307.96 231.343 Q307.96 240.07 304.881 244.676 Q301.826 249.26 296.015 249.26 Q290.205 249.26 287.127 244.676 Q284.071 240.07 284.071 231.343 Q284.071 222.593 287.127 218.01 Q290.205 213.403 296.015 213.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M326.177 217.107 Q322.566 217.107 320.737 220.672 Q318.932 224.213 318.932 231.343 Q318.932 238.449 320.737 242.014 Q322.566 245.556 326.177 245.556 Q329.811 245.556 331.617 242.014 Q333.446 238.449 333.446 231.343 Q333.446 224.213 331.617 220.672 Q329.811 217.107 326.177 217.107 M326.177 213.403 Q331.987 213.403 335.043 218.01 Q338.122 222.593 338.122 231.343 Q338.122 240.07 335.043 244.676 Q331.987 249.26 326.177 249.26 Q320.367 249.26 317.288 244.676 Q314.233 240.07 314.233 231.343 Q314.233 222.593 317.288 218.01 Q320.367 213.403 326.177 213.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M356.339 217.107 Q352.728 217.107 350.899 220.672 Q349.094 224.213 349.094 231.343 Q349.094 238.449 350.899 242.014 Q352.728 245.556 356.339 245.556 Q359.973 245.556 361.779 242.014 Q363.608 238.449 363.608 231.343 Q363.608 224.213 361.779 220.672 Q359.973 217.107 356.339 217.107 M356.339 213.403 Q362.149 213.403 365.205 218.01 Q368.284 222.593 368.284 231.343 Q368.284 240.07 365.205 244.676 Q362.149 249.26 356.339 249.26 Q350.529 249.26 347.45 244.676 Q344.395 240.07 344.395 231.343 Q344.395 222.593 347.45 218.01 Q350.529 213.403 356.339 213.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip412)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.308 4017.76,231.308 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1248.03 459.396,1246.56 459.964,1246.1 460.533,1245.54 461.101,1244.91 461.669,1244.2 462.238,1243.41 462.806,1241.48 463.375,1240.53 463.943,1239.48 464.511,1238.34 465.08,1236.06 465.648,1234.7 466.216,1233.21 466.785,1230.57 467.353,1228.84 467.921,1227 468.49,1225.02 469.058,1222.89 469.626,1218.53 470.195,1216.05 470.763,1211.37 471.331,1208.62 471.9,1204.63 472.468,1200.44 473.036,1197.11 473.605,1193.62 474.173,1189.97 474.741,1186.09 475.31,1182 475.878,1176.7 476.446,1171.2 477.015,1166.55 477.583,1158.56 478.152,1152.61 478.72,1147.43 479.288,1141.97 479.857,1136.3 480.425,1129.33 480.993,1123.22 481.562,1115.73 482.13,1107.09 482.698,1100.35 483.267,1093.41 483.835,1085.21 484.403,1076.93 484.972,1066.23 485.54,1058.74 486.108,1050.94 486.677,1042.02 487.245,1033.81 487.813,1025.57 488.382,1016.13 488.95,1006.39 489.518,996.453 490.087,986.591 490.655,975.528 491.224,966.393 491.792,956.041 492.36,945.821 492.929,935.471 493.497,925.007 494.065,914.529 494.634,905.129 495.202,894.567 495.77,883.006 496.339,871.372 496.907,860.85 497.475,850.266 498.044,839.733 498.612,827.952 499.18,817.475 499.749,807.022 500.317,795.608 500.885,786.264 501.454,774.783 502.022,763.427 502.59,753.202 503.159,742.075 503.727,733.109 504.295,723.148 504.864,712.185 505.432,701.391 506.001,690.649 506.569,681.06 507.137,670.543 507.706,660.078 508.274,650.003 508.842,642.156 509.411,633.356 509.979,624.622 510.547,611.819 511.116,603.562 511.684,597.438 512.252,589.257 512.821,580.131 513.389,570.226 513.957,558.61 514.526,548.213 515.094,541.399 515.662,533.486 516.231,525.607 516.799,518.101 517.367,511.552 517.936,504.052 518.504,498.697 519.072,492.496 519.641,486.299 520.209,480.247 520.778,474.232 521.346,467.444 521.914,461.733 522.483,453.946 523.051,449.455 523.619,445.04 524.188,438.389 524.756,432.229 525.324,429.201 525.893,424.11 526.461,417.168 527.029,413.456 527.598,409.913 528.166,407.24 528.734,402.763 529.303,397.264 529.871,393.973 530.439,388.423 531.008,385.493 531.576,382.321 532.144,377.347 532.713,372.227 533.281,369.493 533.85,364.677 534.418,362.341 534.986,358.933 535.555,355.335 536.123,353.889 536.691,350.435 537.26,348.146 537.828,342.838 538.396,340.795 538.965,337.872 539.533,334.842 540.101,331.08 540.67,329.478 541.238,324.972 541.806,321.598 542.375,320.366 542.943,317.111 543.511,314.974 544.08,314.923 544.648,312.877 545.216,309.898 545.785,307.694 546.353,307.867 546.921,305.842 547.49,302.682 548.058,300.869 548.627,299.881 549.195,298.941 549.763,296.966 550.332,293.191 550.9,292.727 551.468,292.163 552.037,291.529 552.605,292 553.173,291.173 553.742,289.224 554.31,287.732 554.878,286.162 555.447,283.525 556.015,282.13 556.583,282.72 557.152,285.084 557.72,283.256 558.288,282.551 558.857,280.866 559.425,280.244 559.993,278.595 560.562,274.806 561.13,274.259 561.698,272.017 562.267,269.715 562.835,268.689 563.404,265.61 563.972,267.728 564.54,267.528 565.109,263.335 565.677,264.402 566.245,263.175 566.814,263.233 567.382,261.024 567.95,260.125 568.519,259.372 569.087,260.669 569.655,261.764 570.224,262.838 570.792,264.769 571.36,265.335 571.929,264.925 572.497,263.605 573.065,263.372 573.634,264.171 574.202,262.584 574.77,262.386 575.339,262.101 575.907,260.415 576.476,260.326 577.044,256.891 577.612,256.893 578.181,252.691 578.749,252.823 579.317,253.167 579.886,253.42 580.454,254.704 581.022,254.813 581.591,252.798 582.159,251.777 582.727,251.866 583.296,252.061 583.864,252.965 584.432,254.859 585.001,253.618 585.569,254.709 586.137,254.413 586.706,254.293 587.274,253.189 587.842,249.835 588.411,246.78 588.979,246.949 589.547,248.124 590.116,247.336 590.684,247.694 591.253,248.842 591.821,248.844 592.389,247.893 592.958,247.026 593.526,248.147 594.094,247.369 594.663,248.361 595.231,247.323 595.799,248.178 596.368,248.338 596.936,249.392 597.504,248.305 598.073,248.195 598.641,248.266 599.209,245.986 599.778,245.088 600.346,245.259 600.914,247.476 601.483,248.512 602.051,248.198 602.619,248.186 603.188,248.115 603.756,248.048 604.325,245.838 604.893,246.971 605.461,245.924 606.03,245.884 606.598,247.055 607.166,246.941 607.735,245.778 608.303,244.659 608.871,243.373 609.44,240.273 610.008,242.707 610.576,243.818 611.145,241.658 611.713,241.711 612.281,244.954 612.85,245.987 613.418,244.678 613.986,243.456 614.555,243.331 615.123,243.298 615.691,240.139 616.26,240.95 616.828,241.137 617.396,240.015 617.965,238.022 618.533,241.386 619.102,241.587 619.67,241.721 620.238,240.689 620.807,237.717 621.375,238.171 621.943,239.328 622.512,238.361 623.08,239.726 623.648,236.717 624.217,237.018 624.785,236.173 625.353,234.524 625.922,236.205 626.49,237.867 627.058,238.255 627.627,237.474 628.195,237.863 628.763,235.177 629.332,236.615 629.9,236.742 630.468,237.103 631.037,235.221 631.605,235.611 632.173,236.114 632.742,234.081 633.31,235.429 633.879,236.762 634.447,236.919 635.015,237.587 635.584,238.924 636.152,238.105 636.72,239.618 637.289,237.637 637.857,236.793 638.425,237.053 638.994,237.408 639.562,236.395 640.13,238.886 640.699,238.835 641.267,239.946 641.835,239.939 642.404,238.67 642.972,240.959 643.54,239.8 644.109,239.819 644.677,238.882 645.245,238.973 645.814,237.799 646.382,238.856 646.951,238.584 647.519,237.497 648.087,236.819 648.656,238.952 649.224,239.018 649.792,238.905 650.361,237.585 650.929,239.738 651.497,236.549 652.066,235.821 652.634,236.03 653.202,237.002 653.771,237.173 654.339,235.284 654.907,236.625 655.476,234.646 656.044,232.882 656.612,231.163 657.181,232.49 657.749,232.924 658.317,232.081 658.886,231.332 659.454,231.777 660.022,234.278 660.591,233.673 661.159,231.899 661.728,234.478 662.296,234.756 662.864,234.143 663.433,238.452 664.001,241.67 664.569,242.486 665.138,244.34 665.706,242.867 666.274,239.381 666.843,239.999 667.411,239.9 667.979,240.76 668.548,239.485 669.116,237.577 669.684,238.751 670.253,236.739 670.821,237.749 671.389,237.785 671.958,237.707 672.526,238.446 673.094,238.258 673.663,239.28 674.231,236.046 674.799,236.604 675.368,235.646 675.936,234.82 676.505,233.994 677.073,233.221 677.641,231.305 678.21,228.601 678.778,228.248 679.346,231.099 679.915,231.321 680.483,233.998 681.051,234.066 681.62,232.391 682.188,233.631 682.756,234.121 683.325,235.403 683.893,236.399 684.461,236.317 685.03,234.487 685.598,235.762 686.166,233.779 686.735,236.088 687.303,235.968 687.871,235.78 688.44,233.72 689.008,235.03 689.577,236.071 690.145,238.107 690.713,238.158 691.282,239.149 691.85,237.841 692.418,236.638 692.987,235.366 693.555,235.442 694.123,235.613 694.692,235.846 695.26,233.646 695.828,233.631 696.397,233.866 696.965,235.874 697.533,236.831 698.102,237.764 698.67,237.702 699.238,238.469 699.807,238.286 700.375,237.968 700.943,237.674 701.512,237.532 702.08,238.333 702.648,238.165 703.217,237.837 703.785,236.475 704.354,236.382 704.922,232.105 705.49,231.487 706.059,231.661 706.627,229.644 707.195,230.849 707.764,231.085 708.332,231.258 708.9,229.5 709.469,229.887 710.037,229.065 710.605,229.603 711.174,230.033 711.742,232.419 712.31,232.615 712.879,232.935 713.447,234.043 714.015,234.276 714.584,237.549 715.152,237.316 715.72,238.331 716.289,241.115 716.857,239.717 717.425,238.505 717.994,238.376 718.562,238.04 719.131,238.788 719.699,239.499 720.267,238.045 720.836,236.751 721.404,234.732 721.972,234.728 722.541,231.656 723.109,230.855 723.677,230.901 724.246,232.019 724.814,232.959 725.382,231.815 725.951,233.051 726.519,230.1 727.087,229.243 727.656,229.634 728.224,227.958 728.792,228.61 729.361,227.977 729.929,228.328 730.497,229.831 731.066,231.115 731.634,230.359 732.203,234.593 732.771,234.415 733.339,235.671 733.908,235.695 734.476,236.623 735.044,235.691 735.613,234.544 736.181,234.702 736.749,232.38 737.318,232.605 737.886,232.482 738.454,232.65 739.023,231.827 739.591,234.836 740.159,235.514 740.728,236.335 741.296,236.206 741.864,235.108 742.433,233.033 743.001,232.887 743.569,232.957 744.138,231.013 744.706,232.274 745.274,232.14 745.843,232.118 746.411,229.242 746.98,231.653 747.548,230.889 748.116,230.993 748.685,231.242 749.253,231.656 749.821,231.78 750.39,233.002 750.958,233.175 751.526,232.16 752.095,232.299 752.663,232.201 753.231,232.08 753.8,233.099 754.368,232.133 754.936,233.348 755.505,233.556 756.073,233.698 756.641,232.78 757.21,232.602 757.778,232.641 758.346,232.719 758.915,233.775 759.483,234.624 760.052,233.358 760.62,234.303 761.188,234.352 761.757,232.987 762.325,235.066 762.893,235.191 763.462,231.911 764.03,229.903 764.598,231.351 765.167,230.743 765.735,231.859 766.303,232.002 766.872,234.355 767.44,234.438 768.008,232.372 768.577,231.43 769.145,231.556 769.713,232.697 770.282,232.857 770.85,230.104 771.418,229.381 771.987,230.727 772.555,232.964 773.123,229.748 773.692,229.077 774.26,230.419 774.829,228.595 775.397,228.911 775.965,230.276 776.534,231.617 777.102,232.763 777.67,232.806 778.239,231.927 778.807,234.082 779.375,234.125 779.944,233.024 780.512,233.194 781.08,230.155 781.649,232.589 782.217,232.892 782.785,231.865 783.354,230.936 783.922,232.333 784.49,232.431 785.059,232.436 785.627,233.671 786.195,234.69 786.764,234.522 787.332,235.319 787.9,235.23 788.469,236.191 789.037,235.986 789.606,234.852 790.174,234.792 790.742,235.811 791.311,234.577 791.879,233.395 792.447,234.225 793.016,234.241 793.584,234.166 794.152,235.181 794.721,235.039 795.289,232.653 795.857,232.579 796.426,232.577 796.994,234.788 797.562,231.749 798.131,231.725 798.699,230.779 799.267,229.988 799.836,230.2 800.404,229.237 800.972,228.395 801.541,228.925 802.109,231.272 802.678,231.224 803.246,230.391 803.814,230.58 804.383,230.782 804.951,229.959 805.519,232.118 806.088,232.262 806.656,232.274 807.224,232.431 807.793,230.515 808.361,229.723 808.929,229.896 809.498,231.249 810.066,230.275 810.634,230.664 811.203,231.846 811.771,232.113 812.339,233.297 812.908,234.296 813.476,235.135 814.044,232.878 814.613,233.996 815.181,233.006 815.749,230.942 816.318,232.154 816.886,234.145 817.455,236.031 818.023,234.663 818.591,233.656 819.16,234.593 819.728,232.476 820.296,230.271 820.865,230.393 821.433,228.36 822.001,227.564 822.57,229.007 823.138,230.411 823.706,230.681 824.275,231.846 824.843,231.776 825.411,231.824 825.98,234.813 826.548,235.663 827.116,236.362 827.685,236.043 828.253,236.857 828.821,235.382 829.39,234.3 829.958,233.889 830.526,233.869 831.095,232.965 831.663,234.099 832.232,238.106 832.8,238.63 833.368,239.222 833.937,237.747 834.505,236.163 835.073,235.809 835.642,237.763 836.21,236.396 836.778,235.087 837.347,234.938 837.915,237.914 838.483,235.386 839.052,234.2 839.62,234.047 840.188,232.87 840.757,231.783 841.325,231.798 841.893,230.67 842.462,229.439 843.03,229.569 843.598,233.633 844.167,230.542 844.735,230.452 845.304,228.372 845.872,226.623 846.44,225.881 847.009,225.119 847.577,225.528 848.145,227.964 848.714,230.412 849.282,231.468 849.85,230.476 850.419,230.455 850.987,230.398 851.555,230.466 852.124,229.341 852.692,228.586 853.26,227.772 853.829,229.107 854.397,229.276 854.965,227.508 855.534,225.725 856.102,225.08 856.67,225.754 857.239,226.237 857.807,225.779 858.375,227.343 858.944,226.768 859.512,227.204 860.081,226.521 860.649,227.163 861.217,225.595 861.786,226.125 862.354,226.569 862.922,226.124 863.491,226.783 864.059,226.142 864.627,226.876 865.196,227.372 865.764,231.159 866.332,232.342 866.901,233.409 867.469,234.504 868.037,235.383 868.606,231.998 869.174,232.144 869.742,231.228 870.311,231.547 870.879,230.446 871.447,231.575 872.016,234.123 872.584,233.95 873.152,234.994 873.721,234.049 874.289,233.907 874.858,233.848 875.426,233.705 875.994,233.876 876.563,233.883 877.131,232.818 877.699,232.639 878.268,232.69 878.836,231.892 879.404,231.207 879.973,232.32 880.541,233.472 881.109,233.365 881.678,235.221 882.246,236.24 882.814,235.253 883.383,237.241 883.951,235.95 884.519,237.822 885.088,237.547 885.656,237.172 886.224,238.055 886.793,238.771 887.361,238.475 887.93,238.118 888.498,237.844 889.066,237.719 889.635,235.355 890.203,235.206 890.771,236.177 891.34,236.758 891.908,234.388 892.476,232.961 893.045,236.034 893.613,235.544 894.181,233.38 894.75,232.268 895.318,234.293 895.886,233.299 896.455,233.217 897.023,235.081 897.591,231.703 898.16,229.531 898.728,227.702 899.296,226.878 899.865,228.437 900.433,228.602 901.001,230.929 901.57,229.828 902.138,231.031 902.707,231.155 903.275,231.18 903.843,229.152 904.412,233.504 904.98,232.246 905.548,234.155 906.117,234.001 906.685,237.729 907.253,239.29 907.822,237.734 908.39,237.071 908.958,238.451 909.527,239.723 910.095,239.101 910.663,240.437 911.232,239.848 911.8,242.56 912.368,241.62 912.937,239.793 913.505,239.062 914.073,236.119 914.642,236.712 915.21,234.159 915.779,234.783 916.347,235.34 916.915,234.755 917.484,233.622 918.052,234.597 918.62,231.988 919.189,233.72 919.757,231.454 920.325,230.375 920.894,231.293 921.462,229.162 922.03,228.092 922.599,227.863 923.167,227.908 923.735,228.983 924.304,230.166 924.872,229.011 925.44,229.829 926.009,229.697 926.577,228.605 927.145,226.711 927.714,226.899 928.282,226.048 928.85,225.188 929.419,222.515 929.987,220.915 930.556,224.597 931.124,223.931 931.692,225.446 932.261,228.125 932.829,229.125 933.397,229.305 933.966,230.357 934.534,230.413 935.102,229.438 935.671,229.75 936.239,227.708 936.807,229.05 937.376,228.094 937.944,228.411 938.512,228.847 939.081,230.213 939.649,230.236 940.217,230.492 940.786,230.794 941.354,230.878 941.922,228.961 942.491,230.238 943.059,229.198 943.627,229.134 944.196,230.679 944.764,231.878 945.333,233.01 945.901,233.045 946.469,232.941 947.038,232.813 947.606,231.675 948.174,232.919 948.743,233.092 949.311,233.994 949.879,234.763 950.448,233.575 951.016,233.409 951.584,231.204 952.153,231.398 952.721,232.494 953.289,231.486 953.858,230.444 954.426,229.41 954.994,229.659 955.563,229.763 956.131,230.873 956.699,230.979 957.268,231.09 957.836,228.83 958.405,228.16 958.973,231.362 959.541,232.517 960.11,233.523 960.678,232.582 961.246,230.446 961.815,230.624 962.383,230.9 962.951,234.175 963.52,232.847 964.088,233.792 964.656,232.693 965.225,233.683 965.793,234.5 966.361,234.407 966.93,234.201 967.498,235.069 968.066,233.814 968.635,231.741 969.203,230.731 969.771,229.86 970.34,231.047 970.908,231.012 971.476,229.021 972.045,229.059 972.613,227.188 973.182,228.424 973.75,228.59 974.318,228.908 974.887,232.18 975.455,232.141 976.023,230.151 976.592,232.209 977.16,232.202 977.728,228.989 978.297,229.089 978.865,230.282 979.433,227.3 980.002,225.545 980.57,225.065 981.138,223.689 981.707,223.144 982.275,226.492 982.843,226.83 983.412,229.252 983.98,227.63 984.548,228.91 985.117,229.036 985.685,229.297 986.253,229.396 986.822,231.418 987.39,231.544 987.959,232.578 988.527,232.641 989.095,231.655 989.664,233.771 990.232,233.917 990.8,233.995 991.369,233.124 991.937,232.107 992.505,233.079 993.074,233.074 993.642,235.043 994.21,234.7 994.779,233.617 995.347,231.588 995.915,230.866 996.484,232.113 997.052,230.967 997.62,228.997 998.189,228.138 998.757,228.473 999.325,226.797 999.894,228.52 1000.46,230.791 1001.03,230.797 1001.6,230.822 1002.17,231.963 1002.74,231.098 1003.3,231.171 1003.87,230.383 1004.44,232.671 1005.01,233.576 1005.58,233.714 1006.15,232.654 1006.71,231.531 1007.28,233.582 1007.85,233.371 1008.42,235.428 1008.99,234.245 1009.56,234.282 1010.12,234.104 1010.69,233.07 1011.26,234.995 1011.83,234.813 1012.4,234.673 1012.97,235.491 1013.53,233.381 1014.1,234.373 1014.67,236.156 1015.24,235.515 1015.81,233.069 1016.38,233.959 1016.94,236.911 1017.51,236.564 1018.08,236.997 1018.65,235.594 1019.22,235.333 1019.79,235.204 1020.35,232.942 1020.92,232.972 1021.49,230.67 1022.06,230.844 1022.63,230.747 1023.2,231.876 1023.76,231.492 1024.33,231.473 1024.9,233.499 1025.47,234.182 1026.04,233.999 1026.61,232.713 1027.17,231.562 1027.74,231.571 1028.31,231.549 1028.88,232.645 1029.45,232.703 1030.02,231.57 1030.58,231.655 1031.15,229.232 1031.72,229.409 1032.29,231.757 1032.86,232.803 1033.43,232.729 1033.99,233.702 1034.56,229.43 1035.13,232.865 1035.7,231.125 1036.27,231.08 1036.84,231.205 1037.4,233.099 1037.97,231.854 1038.54,232.936 1039.11,233.979 1039.68,234.731 1040.25,234.354 1040.81,235.091 1041.38,236.545 1041.95,238.111 1042.52,238.473 1043.09,236.879 1043.66,235.271 1044.22,234.738 1044.79,231.247 1045.36,229.112 1045.93,230.252 1046.5,231.293 1047.07,233.267 1047.63,234.078 1048.2,231.804 1048.77,231.695 1049.34,231.617 1049.91,231.565 1050.48,231.441 1051.05,232.5 1051.61,232.601 1052.18,231.276 1052.75,231.189 1053.32,228.908 1053.89,228.976 1054.46,226.184 1055.02,225.337 1055.59,226.763 1056.16,225.918 1056.73,226.203 1057.3,226.676 1057.87,226.133 1058.43,228.441 1059,227.674 1059.57,226.997 1060.14,229.203 1060.71,229.364 1061.28,230.629 1061.84,229.714 1062.41,228.886 1062.98,230.153 1063.55,229.085 1064.12,230.324 1064.69,233.398 1065.25,233.235 1065.82,234.136 1066.39,233.839 1066.96,233.666 1067.53,233.555 1068.1,232.106 1068.66,231.914 1069.23,231.925 1069.8,230.883 1070.37,232.077 1070.94,232.17 1071.51,228.813 1072.07,228.893 1072.64,233.219 1073.21,233.222 1073.78,234.106 1074.35,233.785 1074.92,231.377 1075.48,228.361 1076.05,227.627 1076.62,227.027 1077.19,228.298 1077.76,227.632 1078.33,227.959 1078.89,229.305 1079.46,229.636 1080.03,229.772 1080.6,228.768 1081.17,226.482 1081.74,225.91 1082.3,227.419 1082.87,229.698 1083.44,228.906 1084.01,229.101 1084.58,228.415 1085.15,229.9 1085.71,230.226 1086.28,230.221 1086.85,232.502 1087.42,230.434 1087.99,230.755 1088.56,229.88 1089.12,231.032 1089.69,230.218 1090.26,231.388 1090.83,232.223 1091.4,232.539 1091.97,232.378 1092.53,233.241 1093.1,233.116 1093.67,232.892 1094.24,232.867 1094.81,231.845 1095.38,231.641 1095.94,231.451 1096.51,231.33 1097.08,232.229 1097.65,233.262 1098.22,233.261 1098.79,231.109 1099.35,229.208 1099.92,227.51 1100.49,228.692 1101.06,227.87 1101.63,228.177 1102.2,230.275 1102.76,231.321 1103.33,231.63 1103.9,231.484 1104.47,231.419 1105.04,232.309 1105.61,235.104 1106.17,234.888 1106.74,234.856 1107.31,233.616 1107.88,233.467 1108.45,233.315 1109.02,233.632 1109.58,233.697 1110.15,234.471 1110.72,237.277 1111.29,234.681 1111.86,234.446 1112.43,235.341 1112.99,236.145 1113.56,234.712 1114.13,233.451 1114.7,230.256 1115.27,230.265 1115.84,228.581 1116.4,228.585 1116.97,230.637 1117.54,228.68 1118.11,227.91 1118.68,229.348 1119.25,227.345 1119.81,226.753 1120.38,225.333 1120.95,224.758 1121.52,226.092 1122.09,227.498 1122.66,225.864 1123.23,227.299 1123.79,225.491 1124.36,226.088 1124.93,225.522 1125.5,228.075 1126.07,227.31 1126.64,228.585 1127.2,228.744 1127.77,226.948 1128.34,229.387 1128.91,229.62 1129.48,229.861 1130.05,230.969 1130.61,229.853 1131.18,229.863 1131.75,228.985 1132.32,231.127 1132.89,232.502 1133.46,230.462 1134.02,233.753 1134.59,234.708 1135.16,235.621 1135.73,235.283 1136.3,235.171 1136.87,236.057 1137.43,238.115 1138,237.66 1138.57,238.447 1139.14,238.265 1139.71,235.955 1140.28,234.507 1140.84,234.341 1141.41,234.057 1141.98,234.076 1142.55,234.82 1143.12,235.588 1143.69,235.409 1144.25,237.264 1144.82,238.074 1145.39,237.506 1145.96,237.011 1146.53,236.52 1147.1,237.249 1147.66,238.042 1148.23,237.449 1148.8,235.825 1149.37,235.409 1149.94,234.797 1150.51,236.665 1151.07,237.454 1151.64,235.843 1152.21,233.492 1152.78,236.383 1153.35,235.976 1153.92,235.668 1154.48,235.289 1155.05,229.912 1155.62,230.911 1156.19,231.873 1156.76,230.817 1157.33,231.937 1157.89,232.754 1158.46,232.743 1159.03,232.697 1159.6,232.403 1160.17,233.041 1160.74,232.995 1161.3,233.84 1161.87,230.507 1162.44,232.593 1163.01,233.692 1163.58,234.489 1164.15,234.357 1164.71,235.769 1165.28,237.524 1165.85,237.962 1166.42,235.106 1166.99,237.872 1167.56,237.183 1168.12,236.801 1168.69,236.208 1169.26,235.7 1169.83,235.093 1170.4,234.634 1170.97,232.198 1171.53,232.022 1172.1,231.657 1172.67,228.413 1173.24,228.198 1173.81,226.248 1174.38,226.448 1174.94,224.501 1175.51,222.648 1176.08,222.913 1176.65,222.459 1177.22,219.895 1177.79,220.555 1178.35,220.393 1178.92,221.102 1179.49,221.815 1180.06,224.332 1180.63,224.956 1181.2,226.503 1181.76,228.951 1182.33,229.203 1182.9,226.173 1183.47,225.662 1184.04,227.055 1184.61,226.458 1185.17,229.057 1185.74,228.209 1186.31,227.552 1186.88,227.906 1187.45,227.186 1188.02,226.51 1188.58,227.214 1189.15,228.627 1189.72,226.667 1190.29,225.979 1190.86,228.367 1191.43,225.524 1192,225.828 1192.56,227.278 1193.13,228.593 1193.7,231.005 1194.27,229.921 1194.84,230.075 1195.41,230.003 1195.97,228.795 1196.54,230.129 1197.11,230.376 1197.68,231.502 1198.25,230.651 1198.82,232.871 1199.38,232.833 1199.95,230.88 1200.52,229.917 1201.09,232.198 1201.66,231.199 1202.23,231.388 1202.79,233.299 1203.36,232.381 1203.93,233.537 1204.5,233.64 1205.07,235.471 1205.64,236.364 1206.2,235.009 1206.77,235.858 1207.34,233.823 1207.91,231.744 1208.48,229.755 1209.05,226.82 1209.61,228.206 1210.18,229.722 1210.75,230.079 1211.32,229.098 1211.89,227.256 1212.46,226.484 1213.02,227.821 1213.59,230.303 1214.16,230.512 1214.73,229.765 1215.3,229.953 1215.87,230.253 1216.43,231.465 1217,232.535 1217.57,232.477 1218.14,233.62 1218.71,234.671 1219.28,233.586 1219.84,233.58 1220.41,232.437 1220.98,234.456 1221.55,236.198 1222.12,235.815 1222.69,234.427 1223.25,235.257 1223.82,236.031 1224.39,236.705 1224.96,235.226 1225.53,234.068 1226.1,230.766 1226.66,230.922 1227.23,231.013 1227.8,231.939 1228.37,229.981 1228.94,229.92 1229.51,225.868 1230.07,227.213 1230.64,227.5 1231.21,228.818 1231.78,230.951 1232.35,229.894 1232.92,229.999 1233.48,229.104 1234.05,228.123 1234.62,227.265 1235.19,227.348 1235.76,230.779 1236.33,231.825 1236.89,231.911 1237.46,231.853 1238.03,231.821 1238.6,233.049 1239.17,233.125 1239.74,235.014 1240.3,234.565 1240.87,234.569 1241.44,233.615 1242.01,232.564 1242.58,231.514 1243.15,231.508 1243.71,231.295 1244.28,232.191 1244.85,231.359 1245.42,232.219 1245.99,232.205 1246.56,231.321 1247.12,230.426 1247.69,229.663 1248.26,230.959 1248.83,229.957 1249.4,227.014 1249.97,227.392 1250.53,227.564 1251.1,228.017 1251.67,227.353 1252.24,228.907 1252.81,228.931 1253.38,230.393 1253.94,229.613 1254.51,229.603 1255.08,229.67 1255.65,229.795 1256.22,231.786 1256.79,232.813 1257.35,230.777 1257.92,229.908 1258.49,232.04 1259.06,233.226 1259.63,235.347 1260.2,237.189 1260.76,233.934 1261.33,233.67 1261.9,233.487 1262.47,235.428 1263.04,235.336 1263.61,235.178 1264.18,236.789 1264.74,236.598 1265.31,235.057 1265.88,234.917 1266.45,234.709 1267.02,234.417 1267.59,232.142 1268.15,234.98 1268.72,232.486 1269.29,232.369 1269.86,230.111 1270.43,232.209 1271,233.135 1271.56,234.069 1272.13,234.008 1272.7,233.813 1273.27,233.491 1273.84,233.407 1274.41,232.284 1274.97,230.214 1275.54,230.3 1276.11,230.156 1276.68,230.146 1277.25,230.332 1277.82,230.391 1278.38,230.242 1278.95,231.399 1279.52,232.395 1280.09,230.172 1280.66,231.368 1281.23,231.273 1281.79,231.23 1282.36,232.394 1282.93,231.374 1283.5,232.419 1284.07,233.256 1284.64,231.013 1285.2,230.135 1285.77,229.316 1286.34,229.621 1286.91,230.67 1287.48,228.725 1288.05,233.042 1288.61,228.896 1289.18,228.139 1289.75,229.497 1290.32,229.847 1290.89,232.882 1291.46,230.718 1292.02,230.763 1292.59,229.846 1293.16,232.009 1293.73,230.931 1294.3,229.815 1294.87,229.168 1295.43,231.314 1296,232.499 1296.57,232.34 1297.14,230.298 1297.71,231.131 1298.28,230.147 1298.84,228.206 1299.41,230.525 1299.98,232.613 1300.55,232.538 1301.12,234.706 1301.69,231.33 1302.25,232.389 1302.82,233.252 1303.39,234.017 1303.96,230.412 1304.53,231.707 1305.1,232.937 1305.66,234.74 1306.23,233.469 1306.8,233.22 1307.37,233.322 1307.94,234.12 1308.51,234.84 1309.07,233.575 1309.64,233.392 1310.21,233.25 1310.78,233.11 1311.35,235.095 1311.92,234.79 1312.48,235.736 1313.05,236.255 1313.62,236.64 1314.19,236.319 1314.76,235.815 1315.33,236.424 1315.89,235.037 1316.46,235.764 1317.03,236.328 1317.6,237.125 1318.17,236.616 1318.74,235.265 1319.3,234.196 1319.87,235.927 1320.44,235.315 1321.01,233.821 1321.58,232.396 1322.15,232.374 1322.71,234.452 1323.28,232.885 1323.85,232.574 1324.42,232.108 1324.99,233.703 1325.56,234.144 1326.12,233.358 1326.69,233.052 1327.26,230.626 1327.83,230.35 1328.4,229.503 1328.97,227.527 1329.53,223.577 1330.1,225.022 1330.67,228.096 1331.24,225.185 1331.81,225.621 1332.38,226.946 1332.94,228.955 1333.51,227.985 1334.08,229.183 1334.65,229.18 1335.22,229.24 1335.79,229.259 1336.36,228.264 1336.92,228.3 1337.49,228.363 1338.06,232.452 1338.63,231.215 1339.2,230.3 1339.77,230.535 1340.33,229.616 1340.9,229.794 1341.47,229.819 1342.04,227.755 1342.61,230.037 1343.18,226.706 1343.74,228.007 1344.31,229.284 1344.88,228.24 1345.45,226.427 1346.02,225.776 1346.59,228.209 1347.15,230.557 1347.72,228.6 1348.29,229.958 1348.86,230.994 1349.43,230.908 1350,230.936 1350.56,230.986 1351.13,227.817 1351.7,227.935 1352.27,228.237 1352.84,226.438 1353.41,225.692 1353.97,227.019 1354.54,226.286 1355.11,226.634 1355.68,225.882 1356.25,225.017 1356.82,224.242 1357.38,224.559 1357.95,225.105 1358.52,224.578 1359.09,227.324 1359.66,226.928 1360.23,227.353 1360.79,227.504 1361.36,225.955 1361.93,226.375 1362.5,227.035 1363.07,228.413 1363.64,228.656 1364.2,227.867 1364.77,229.073 1365.34,228.413 1365.91,229.488 1366.48,231.585 1367.05,234.713 1367.61,234.559 1368.18,231.651 1368.75,231.683 1369.32,230.46 1369.89,229.567 1370.46,227.934 1371.02,228.062 1371.59,230.455 1372.16,230.629 1372.73,231.082 1373.3,233.656 1373.87,236.628 1374.43,237.317 1375,236.992 1375.57,235.756 1376.14,236.51 1376.71,239.141 1377.28,238.699 1377.84,239.379 1378.41,238.738 1378.98,239.14 1379.55,236.31 1380.12,236.998 1380.69,235.507 1381.25,232.947 1381.82,232.766 1382.39,232.893 1382.96,232.921 1383.53,234.106 1384.1,231.832 1384.66,232.764 1385.23,231.918 1385.8,234.973 1386.37,233.683 1386.94,234.577 1387.51,234.44 1388.07,234.428 1388.64,235.263 1389.21,233.911 1389.78,237.97 1390.35,236.558 1390.92,236.359 1391.48,236.94 1392.05,236.559 1392.62,236.18 1393.19,234.546 1393.76,232.273 1394.33,230.239 1394.89,229.2 1395.46,229.09 1396.03,228.08 1396.6,228.219 1397.17,228.392 1397.74,229.622 1398.3,229.729 1398.87,230.014 1399.44,229.161 1400.01,226.244 1400.58,224.665 1401.15,225.154 1401.71,225.7 1402.28,227.123 1402.85,230.516 1403.42,230.759 1403.99,230.704 1404.56,229.703 1405.13,228.764 1405.69,230.022 1406.26,232.481 1406.83,233.585 1407.4,233.532 1407.97,233.326 1408.54,233.094 1409.1,232.939 1409.67,231.973 1410.24,230.666 1410.81,229.619 1411.38,228.784 1411.95,231.004 1412.51,231.002 1413.08,231.525 1413.65,232.398 1414.22,232.173 1414.79,234.033 1415.36,231.655 1415.92,230.667 1416.49,231.731 1417.06,231.811 1417.63,229.599 1418.2,229 1418.77,229.246 1419.33,230.404 1419.9,227.514 1420.47,227.8 1421.04,227.869 1421.61,229.213 1422.18,226.357 1422.74,226.883 1423.31,226.26 1423.88,225.656 1424.45,224.098 1425.02,223.499 1425.59,222.202 1426.15,223.736 1426.72,223.441 1427.29,226.161 1427.86,229.766 1428.43,229.91 1429,232.3 1429.56,233.163 1430.13,234.361 1430.7,232.303 1431.27,234.512 1431.84,235.292 1432.41,234.169 1432.97,234.105 1433.54,236.1 1434.11,235.861 1434.68,234.511 1435.25,235.374 1435.82,234.112 1436.38,233.946 1436.95,233.834 1437.52,232.549 1438.09,232.488 1438.66,233.446 1439.23,234.386 1439.79,232.159 1440.36,234.192 1440.93,233.012 1441.5,232.763 1442.07,232.544 1442.64,232.636 1443.2,232.566 1443.77,231.348 1444.34,231.394 1444.91,232.485 1445.48,232.377 1446.05,232.475 1446.61,232.429 1447.18,234.359 1447.75,233.089 1448.32,230.997 1448.89,229.129 1449.46,228.346 1450.02,228.752 1450.59,228.817 1451.16,230.857 1451.73,231.062 1452.3,232.331 1452.87,232.106 1453.43,228.88 1454,228.189 1454.57,227.366 1455.14,226.834 1455.71,229.179 1456.28,231.386 1456.84,232.337 1457.41,233.156 1457.98,236.114 1458.55,234.745 1459.12,234.528 1459.69,234.381 1460.25,235.331 1460.82,234.897 1461.39,233.552 1461.96,231.324 1462.53,230.029 1463.1,231.153 1463.66,232.069 1464.23,233.115 1464.8,228.913 1465.37,229.116 1465.94,231.557 1466.51,230.446 1467.07,229.43 1467.64,229.725 1468.21,230.936 1468.78,229.911 1469.35,229.017 1469.92,228.21 1470.48,229.53 1471.05,229.581 1471.62,229.835 1472.19,228.882 1472.76,228.013 1473.33,229.411 1473.89,230.842 1474.46,233.908 1475.03,233.671 1475.6,233.622 1476.17,231.457 1476.74,233.39 1477.31,232.315 1477.87,230.046 1478.44,230.035 1479.01,229.017 1479.58,231.335 1480.15,233.562 1480.72,234.438 1481.28,234.14 1481.85,235.081 1482.42,234.772 1482.99,236.464 1483.56,235.953 1484.13,233.671 1484.69,234.478 1485.26,237.33 1485.83,236.951 1486.4,236.571 1486.97,235.06 1487.54,234.909 1488.1,234.647 1488.67,235.211 1489.24,236.025 1489.81,234.539 1490.38,234.343 1490.95,233.96 1491.51,233.929 1492.08,232.765 1492.65,234.489 1493.22,232.983 1493.79,232.791 1494.36,229.367 1494.92,229.606 1495.49,228.733 1496.06,229.809 1496.63,229.972 1497.2,227.943 1497.77,230.318 1498.33,231.418 1498.9,232.471 1499.47,230.197 1500.04,227.157 1500.61,227.651 1501.18,228.75 1501.74,229.922 1502.31,230.853 1502.88,230.6 1503.45,230.854 1504.02,231.632 1504.59,231.549 1505.15,232.557 1505.72,231.267 1506.29,233.161 1506.86,235.091 1507.43,232.721 1508,231.433 1508.56,234.61 1509.13,235.37 1509.7,234.788 1510.27,234.405 1510.84,235.167 1511.41,231.721 1511.97,230.56 1512.54,230.47 1513.11,228.431 1513.68,229.65 1514.25,228.564 1514.82,228.61 1515.38,230.744 1515.95,232.046 1516.52,231.966 1517.09,232.048 1517.66,233.026 1518.23,232.935 1518.79,235.047 1519.36,234.914 1519.93,232.605 1520.5,232.625 1521.07,232.432 1521.64,232.331 1522.2,232.024 1522.77,231.725 1523.34,230.846 1523.91,230.806 1524.48,229.551 1525.05,229.242 1525.61,229.609 1526.18,228.539 1526.75,228.663 1527.32,226.894 1527.89,226.996 1528.46,227.409 1529.02,226.749 1529.59,227.094 1530.16,228.298 1530.73,228.592 1531.3,228.65 1531.87,229.668 1532.43,227.63 1533,226.802 1533.57,226.905 1534.14,229.387 1534.71,231.474 1535.28,232.461 1535.84,230.596 1536.41,229.848 1536.98,228.905 1537.55,225.925 1538.12,226.271 1538.69,224.539 1539.25,228.047 1539.82,227.426 1540.39,225.727 1540.96,226.292 1541.53,224.475 1542.1,223.137 1542.66,225.59 1543.23,224.999 1543.8,225.724 1544.37,227.381 1544.94,227.652 1545.51,227.881 1546.08,227.212 1546.64,226.728 1547.21,226.251 1547.78,226.602 1548.35,224.695 1548.92,224.114 1549.49,225.678 1550.05,226.292 1550.62,229.067 1551.19,229.501 1551.76,232.05 1552.33,231.903 1552.9,230.692 1553.46,229.034 1554.03,231.542 1554.6,231.656 1555.17,232.798 1555.74,232.595 1556.31,230.572 1556.87,231.883 1557.44,229.806 1558.01,231.146 1558.58,231.249 1559.15,234.465 1559.72,235.339 1560.28,235.166 1560.85,237.052 1561.42,238.79 1561.99,238.448 1562.56,237.936 1563.13,237.774 1563.69,237.402 1564.26,236.112 1564.83,237.923 1565.4,236.245 1565.97,236.082 1566.54,235.817 1567.1,236.844 1567.67,237.616 1568.24,237.253 1568.81,234.866 1569.38,236.801 1569.95,235.225 1570.51,236.152 1571.08,235.84 1571.65,235.473 1572.22,235.27 1572.79,233.985 1573.36,232.791 1573.92,232.66 1574.49,231.479 1575.06,231.443 1575.63,232.477 1576.2,233.39 1576.77,233.112 1577.33,232.17 1577.9,232.058 1578.47,230.93 1579.04,230.931 1579.61,229.948 1580.18,228.976 1580.74,225.823 1581.31,227.304 1581.88,225.499 1582.45,226.842 1583.02,226.932 1583.59,227.147 1584.15,227.512 1584.72,227.924 1585.29,232.203 1585.86,231.241 1586.43,230.27 1587,230.539 1587.56,231.747 1588.13,232.806 1588.7,231.774 1589.27,232.025 1589.84,233.95 1590.41,233.617 1590.97,233.366 1591.54,234.295 1592.11,234.072 1592.68,233.732 1593.25,232.457 1593.82,230.26 1594.38,231.503 1594.95,231.429 1595.52,228.502 1596.09,229.589 1596.66,229.681 1597.23,230.686 1597.79,230.858 1598.36,229.054 1598.93,228.979 1599.5,229.101 1600.07,231.235 1600.64,230.191 1601.2,229.288 1601.77,231.469 1602.34,231.605 1602.91,232.933 1603.48,230.797 1604.05,232.771 1604.61,232.777 1605.18,232.866 1605.75,232.829 1606.32,233.809 1606.89,234.736 1607.46,235.458 1608.02,234.234 1608.59,233.051 1609.16,233.933 1609.73,234.681 1610.3,232.286 1610.87,233.229 1611.43,232.09 1612,232.141 1612.57,232.973 1613.14,232.649 1613.71,232.572 1614.28,232.656 1614.84,233.757 1615.41,234.43 1615.98,235.004 1616.55,232.477 1617.12,233.442 1617.69,233.372 1618.26,236.28 1618.82,234.753 1619.39,233.689 1619.96,232.671 1620.53,233.578 1621.1,230.221 1621.67,230.137 1622.23,231.18 1622.8,228.107 1623.37,226.183 1623.94,227.514 1624.51,229.856 1625.08,229.987 1625.64,229.77 1626.21,228.81 1626.78,229.939 1627.35,230.291 1627.92,229.447 1628.49,230.585 1629.05,229.756 1629.62,230.841 1630.19,230.765 1630.76,229.655 1631.33,229.041 1631.9,231.113 1632.46,231.178 1633.03,230.049 1633.6,230.211 1634.17,231.424 1634.74,231.38 1635.31,232.47 1635.87,231.305 1636.44,233.432 1637.01,233.03 1637.58,233.004 1638.15,232.668 1638.72,230.591 1639.28,232.653 1639.85,233.368 1640.42,234.514 1640.99,234.158 1641.56,235.103 1642.13,234.803 1642.69,233.59 1643.26,233.577 1643.83,233.47 1644.4,233.3 1644.97,234.028 1645.54,232.754 1646.1,231.738 1646.67,230.902 1647.24,229.627 1647.81,230.794 1648.38,230.678 1648.95,230.737 1649.51,231.697 1650.08,230.463 1650.65,230.467 1651.22,230.666 1651.79,231.646 1652.36,231.649 1652.92,230.673 1653.49,231.952 1654.06,229.674 1654.63,229.699 1655.2,231.924 1655.77,230.832 1656.33,230.809 1656.9,229.9 1657.47,228.968 1658.04,229.009 1658.61,228.244 1659.18,229.691 1659.74,228.876 1660.31,229.124 1660.88,228.233 1661.45,230.48 1662.02,230.619 1662.59,230.926 1663.15,230.594 1663.72,231.697 1664.29,231.864 1664.86,232.827 1665.43,234.534 1666,236.188 1666.56,234.789 1667.13,234.524 1667.7,233.181 1668.27,231.98 1668.84,233.933 1669.41,233.731 1669.97,234.519 1670.54,233.33 1671.11,231.089 1671.68,230.814 1672.25,229.767 1672.82,228.775 1673.38,228.909 1673.95,230.07 1674.52,229.146 1675.09,231.221 1675.66,233.118 1676.23,234.901 1676.79,234.624 1677.36,234.497 1677.93,234.174 1678.5,234.979 1679.07,234.641 1679.64,235.356 1680.2,233.16 1680.77,232.098 1681.34,229.917 1681.91,231.097 1682.48,234.161 1683.05,234.772 1683.61,234.445 1684.18,234.295 1684.75,231.075 1685.32,233.074 1685.89,231.951 1686.46,230.952 1687.02,232.196 1687.59,229.967 1688.16,231.845 1688.73,232.632 1689.3,234.591 1689.87,232.152 1690.44,233.071 1691,232.853 1691.57,229.547 1692.14,229.626 1692.71,230.796 1693.28,227.826 1693.85,228.078 1694.41,226.205 1694.98,227.282 1695.55,228.722 1696.12,230.1 1696.69,230.101 1697.26,231.094 1697.82,230.96 1698.39,229.112 1698.96,227.884 1699.53,227.096 1700.1,227.522 1700.67,226.77 1701.23,227.136 1701.8,229.342 1702.37,229.756 1702.94,231.983 1703.51,232.021 1704.08,234.083 1704.64,235.949 1705.21,236.438 1705.78,239.041 1706.35,240.509 1706.92,239.857 1707.49,240.194 1708.05,239.668 1708.62,239.077 1709.19,237.394 1709.76,237.862 1710.33,237.593 1710.9,235.925 1711.46,234.417 1712.03,236.409 1712.6,235.9 1713.17,235.565 1713.74,236.126 1714.31,235.634 1714.87,235.322 1715.44,235.881 1716.01,236.212 1716.58,235.556 1717.15,237.189 1717.72,236.618 1718.28,237 1718.85,237.329 1719.42,236.669 1719.99,234.853 1720.56,233.509 1721.13,233.213 1721.69,232.824 1722.26,231.576 1722.83,231.211 1723.4,230.091 1723.97,227.713 1724.54,224.621 1725.1,223.9 1725.67,224.199 1726.24,223.446 1726.81,222.702 1727.38,223.001 1727.95,225.583 1728.51,226.85 1729.08,227.184 1729.65,225.141 1730.22,225.376 1730.79,224.68 1731.36,226.187 1731.92,228.693 1732.49,227.552 1733.06,227.654 1733.63,228.538 1734.2,230.847 1734.77,230.491 1735.33,231.33 1735.9,229.861 1736.47,227.872 1737.04,229.702 1737.61,230.702 1738.18,230.651 1738.74,229.53 1739.31,230.76 1739.88,230.769 1740.45,230.899 1741.02,228.806 1741.59,228.985 1742.15,228.966 1742.72,229.847 1743.29,230.766 1743.86,229.674 1744.43,229.704 1745,228.9 1745.56,228.956 1746.13,229.078 1746.7,228.133 1747.27,227.301 1747.84,227.454 1748.41,226.595 1748.97,228.154 1749.54,229.178 1750.11,230.32 1750.68,231.259 1751.25,233.487 1751.82,233.218 1752.38,235.069 1752.95,235.72 1753.52,235.323 1754.09,234 1754.66,231.705 1755.23,231.355 1755.79,231.196 1756.36,235.319 1756.93,233.085 1757.5,232.935 1758.07,232.985 1758.64,234.661 1759.21,233.482 1759.77,233.38 1760.34,231.349 1760.91,231.295 1761.48,229.303 1762.05,228.444 1762.62,229.574 1763.18,228.611 1763.75,227.572 1764.32,227.657 1764.89,229.926 1765.46,228.993 1766.03,228.169 1766.59,228.433 1767.16,228.807 1767.73,227.715 1768.3,228.798 1768.87,227.722 1769.44,229.939 1770,229.985 1770.57,226.02 1771.14,225.31 1771.71,224.854 1772.28,225.35 1772.85,225.86 1773.41,225.3 1773.98,226.689 1774.55,227.093 1775.12,225.378 1775.69,227.773 1776.26,230.039 1776.82,231.193 1777.39,230.126 1777.96,232.363 1778.53,230.286 1779.1,228.528 1779.67,228.794 1780.23,229.227 1780.8,229.706 1781.37,228.094 1781.94,225.352 1782.51,226.033 1783.08,224.423 1783.64,224.224 1784.21,224.836 1784.78,225.294 1785.35,225.793 1785.92,226.368 1786.49,225.802 1787.05,226.362 1787.62,226.671 1788.19,227.104 1788.76,228.458 1789.33,228.866 1789.9,229.171 1790.46,229.51 1791.03,230.871 1791.6,230.127 1792.17,228.413 1792.74,228.779 1793.31,229.31 1793.87,231.742 1794.44,230.655 1795.01,230.05 1795.58,229.419 1796.15,228.494 1796.72,228.684 1797.28,228.871 1797.85,229.339 1798.42,228.677 1798.99,230.195 1799.56,231.211 1800.13,232.421 1800.69,232.572 1801.26,232.685 1801.83,231.829 1802.4,230.881 1802.97,231.209 1803.54,230.278 1804.1,231.518 1804.67,229.817 1805.24,231.146 1805.81,231.297 1806.38,231.477 1806.95,232.559 1807.51,231.594 1808.08,231.76 1808.65,233.073 1809.22,233.254 1809.79,234.466 1810.36,235.577 1810.92,235.574 1811.49,234.304 1812.06,235.337 1812.63,233.261 1813.2,231.349 1813.77,233.594 1814.33,234.681 1814.9,237.733 1815.47,235.603 1816.04,234.439 1816.61,234.23 1817.18,234.068 1817.74,232.859 1818.31,231.786 1818.88,229.852 1819.45,229.144 1820.02,230.379 1820.59,233.539 1821.15,234.545 1821.72,236.471 1822.29,238.262 1822.86,235.675 1823.43,234.29 1824,233.162 1824.56,233.815 1825.13,235.734 1825.7,234.463 1826.27,235.348 1826.84,236.125 1827.41,236.84 1827.97,236.592 1828.54,238.184 1829.11,240.751 1829.68,241.091 1830.25,241.558 1830.82,240.923 1831.39,240.064 1831.95,239.304 1832.52,238.576 1833.09,239.034 1833.66,239.311 1834.23,238.608 1834.8,237.077 1835.36,235.657 1835.93,234.206 1836.5,235.849 1837.07,236.675 1837.64,239.129 1838.21,238.476 1838.77,236.651 1839.34,237.214 1839.91,235.455 1840.48,234.872 1841.05,233.383 1841.62,235.142 1842.18,234.689 1842.75,234.411 1843.32,235.008 1843.89,233.543 1844.46,231.206 1845.03,230.114 1845.59,230.749 1846.16,229.59 1846.73,229.571 1847.3,229.569 1847.87,228.667 1848.44,227.611 1849,228.62 1849.57,228.835 1850.14,229.9 1850.71,230.957 1851.28,228.776 1851.85,228.822 1852.41,228.943 1852.98,227.818 1853.55,226.748 1854.12,228.007 1854.69,226.061 1855.26,226.262 1855.82,225.44 1856.39,226.504 1856.96,226.649 1857.53,227.738 1858.1,228.701 1858.67,228.663 1859.23,229.791 1859.8,231.882 1860.37,233.141 1860.94,231.941 1861.51,230.783 1862.08,230.454 1862.64,229.446 1863.21,230.371 1863.78,229.374 1864.35,229.507 1864.92,229.758 1865.49,229.894 1866.05,226.828 1866.62,226.123 1867.19,228.362 1867.76,226.511 1868.33,226.87 1868.9,227.283 1869.46,227.396 1870.03,225.889 1870.6,227.317 1871.17,225.522 1871.74,226.928 1872.31,229.466 1872.87,233.782 1873.44,233.53 1874.01,234.344 1874.58,234.131 1875.15,233.994 1875.72,235.818 1876.28,236.474 1876.85,236.008 1877.42,236.636 1877.99,238.306 1878.56,235.468 1879.13,233.156 1879.69,234.21 1880.26,231.05 1880.83,231.138 1881.4,228.859 1881.97,227.932 1882.54,227.211 1883.1,228.503 1883.67,228.682 1884.24,228.996 1884.81,231.385 1885.38,230.298 1885.95,229.338 1886.51,226.433 1887.08,228.96 1887.65,228.973 1888.22,229.02 1888.79,228.078 1889.36,228.306 1889.92,228.615 1890.49,229.825 1891.06,228.792 1891.63,228.855 1892.2,229.028 1892.77,227.189 1893.33,226.449 1893.9,226.716 1894.47,227.089 1895.04,228.353 1895.61,227.682 1896.18,228.076 1896.74,230.471 1897.31,231.467 1897.88,233.34 1898.45,231.42 1899.02,231.338 1899.59,230.404 1900.16,231.554 1900.72,230.706 1901.29,233.625 1901.86,234.234 1902.43,231.904 1903,233.044 1903.57,230.082 1904.13,231.479 1904.7,231.623 1905.27,230.608 1905.84,230.423 1906.41,230.306 1906.98,229.559 1907.54,227.617 1908.11,229.025 1908.68,229.156 1909.25,229.246 1909.82,227.589 1910.39,227.794 1910.95,229.097 1911.52,230.415 1912.09,230.505 1912.66,230.778 1913.23,229.852 1913.8,229.951 1914.36,230.04 1914.93,232.3 1915.5,232.143 1916.07,232.248 1916.64,233.41 1917.21,231.423 1917.77,230.515 1918.34,231.525 1918.91,234.724 1919.48,232.318 1920.05,231.405 1920.62,231.299 1921.18,233.445 1921.75,234.403 1922.32,233.184 1922.89,233.193 1923.46,233.228 1924.03,232.206 1924.59,233.166 1925.16,236.249 1925.73,236.969 1926.3,236.666 1926.87,238.376 1927.44,235.762 1928,235.799 1928.57,236.593 1929.14,236.242 1929.71,233.951 1930.28,233.927 1930.85,231.599 1931.41,231.564 1931.98,231.603 1932.55,231.692 1933.12,232.682 1933.69,230.598 1934.26,232.793 1934.82,231.665 1935.39,231.304 1935.96,230.228 1936.53,229.205 1937.1,230.629 1937.67,230.655 1938.23,230.691 1938.8,233.561 1939.37,234.565 1939.94,233.272 1940.51,233.202 1941.08,234.034 1941.64,232.739 1942.21,231.535 1942.78,230.161 1943.35,231.551 1943.92,231.553 1944.49,233.679 1945.05,232.393 1945.62,233.194 1946.19,232.745 1946.76,229.715 1947.33,230.751 1947.9,231.978 1948.46,230.711 1949.03,228.699 1949.6,229.886 1950.17,226.839 1950.74,228.193 1951.31,228.33 1951.87,230.548 1952.44,230.401 1953.01,229.462 1953.58,229.678 1954.15,232.838 1954.72,231.825 1955.28,232.526 1955.85,234.396 1956.42,235.156 1956.99,234.665 1957.56,234.358 1958.13,230.091 1958.69,232.139 1959.26,229.975 1959.83,229.92 1960.4,227.008 1960.97,225.422 1961.54,225.74 1962.1,226.135 1962.67,225.476 1963.24,228.132 1963.81,227.313 1964.38,227.371 1964.95,229.689 1965.51,230.844 1966.08,229.762 1966.65,229.823 1967.22,230.123 1967.79,231.355 1968.36,232.572 1968.92,232.643 1969.49,231.483 1970.06,232.556 1970.63,231.848 1971.2,231.885 1971.77,230.692 1972.34,228.787 1972.9,229.107 1973.47,230.472 1974.04,233.491 1974.61,231.228 1975.18,230.945 1975.75,230.952 1976.31,233.912 1976.88,234.605 1977.45,234.375 1978.02,234.107 1978.59,235.849 1979.16,235.59 1979.72,236.183 1980.29,234.72 1980.86,233.598 1981.43,231.205 1982,232.264 1982.57,232.136 1983.13,230.109 1983.7,229.038 1984.27,231.192 1984.84,233.137 1985.41,231.97 1985.98,231.844 1986.54,231.788 1987.11,231.842 1987.68,230.568 1988.25,231.762 1988.82,231.481 1989.39,233.406 1989.95,233.198 1990.52,234.141 1991.09,233.952 1991.66,233.759 1992.23,229.486 1992.8,229.576 1993.36,229.667 1993.93,228.794 1994.5,227.031 1995.07,227.279 1995.64,228.611 1996.21,228.973 1996.77,231.202 1997.34,232.301 1997.91,233.077 1998.48,233.018 1999.05,232.006 1999.62,232.042 2000.18,229.971 2000.75,231.149 2001.32,232.172 2001.89,232.112 2002.46,229.987 2003.03,230.257 2003.59,229.169 2004.16,229.273 2004.73,227.478 2005.3,228.622 2005.87,230.768 2006.44,231.892 2007,229.84 2007.57,228.643 2008.14,227.821 2008.71,229.099 2009.28,227.152 2009.85,225.072 2010.41,225.524 2010.98,223.744 2011.55,224.212 2012.12,223.639 2012.69,225.222 2013.26,226.772 2013.82,228.036 2014.39,228.346 2014.96,229.628 2015.53,230.946 2016.1,231.125 2016.67,231.437 2017.23,229.519 2017.8,229.782 2018.37,230.874 2018.94,231.032 2019.51,233.104 2020.08,234.15 2020.64,235.941 2021.21,235.673 2021.78,236.639 2022.35,236.463 2022.92,237.242 2023.49,239.855 2024.05,241.054 2024.62,241.34 2025.19,239.415 2025.76,237.943 2026.33,238.544 2026.9,237.324 2027.46,235.707 2028.03,233.332 2028.6,231.02 2029.17,230.944 2029.74,230.996 2030.31,231.021 2030.87,230.992 2031.44,229.794 2032.01,231.125 2032.58,232.169 2033.15,231.064 2033.72,232.048 2034.28,231.111 2034.85,229.996 2035.42,227.063 2035.99,230.299 2036.56,232.198 2037.13,231.212 2037.69,231.199 2038.26,230.172 2038.83,231.146 2039.4,228.905 2039.97,229.136 2040.54,227.33 2041.11,226.591 2041.67,229.924 2042.24,230.931 2042.81,228.807 2043.38,229.995 2043.95,231.027 2044.52,228.928 2045.08,231.166 2045.65,230.17 2046.22,231.122 2046.79,232.26 2047.36,232.175 2047.93,232.084 2048.49,230.875 2049.06,230.726 2049.63,229.792 2050.2,229.897 2050.77,231.063 2051.34,231.158 2051.9,233.26 2052.47,235.235 2053.04,235.061 2053.61,234.921 2054.18,233.498 2054.75,234.448 2055.31,232.982 2055.88,232.859 2056.45,232.678 2057.02,232.603 2057.59,230.351 2058.16,230.401 2058.72,231.334 2059.29,229.133 2059.86,229.284 2060.43,229.398 2061,228.628 2061.57,224.603 2062.13,225.144 2062.7,224.676 2063.27,221.061 2063.84,222.87 2064.41,222.379 2064.98,224.964 2065.54,225.57 2066.11,226.045 2066.68,225.444 2067.25,223.943 2067.82,226.714 2068.39,228.224 2068.95,229.645 2069.52,229.664 2070.09,229.659 2070.66,230.699 2071.23,228.699 2071.8,229.009 2072.36,230.154 2072.93,231.226 2073.5,228.015 2074.07,230.2 2074.64,230.649 2075.21,230.687 2075.77,230.72 2076.34,231.77 2076.91,231.761 2077.48,234.986 2078.05,233.866 2078.62,234.834 2079.18,234.781 2079.75,238.77 2080.32,238.232 2080.89,237.885 2081.46,235.601 2082.03,236.36 2082.59,237.004 2083.16,236.666 2083.73,236.306 2084.3,236.151 2084.87,234.651 2085.44,234.525 2086,232.141 2086.57,231.127 2087.14,230.043 2087.71,232.459 2088.28,231.367 2088.85,232.386 2089.41,229.298 2089.98,230.621 2090.55,230.737 2091.12,230.014 2091.69,230.196 2092.26,230.57 2092.82,231.601 2093.39,230.674 2093.96,230.712 2094.53,232.042 2095.1,230.876 2095.67,227.945 2096.23,229.372 2096.8,224.31 2097.37,224.851 2097.94,225.328 2098.51,227.806 2099.08,228.126 2099.64,227.497 2100.21,226.874 2100.78,228.408 2101.35,230.985 2101.92,229.919 2102.49,229.254 2103.05,231.575 2103.62,232.427 2104.19,232.344 2104.76,230.336 2105.33,230.57 2105.9,230.553 2106.46,228.484 2107.03,231.988 2107.6,232.046 2108.17,232.179 2108.74,234.05 2109.31,235.159 2109.87,234.911 2110.44,234.755 2111.01,234.656 2111.58,234.581 2112.15,234.474 2112.72,234.326 2113.29,235.225 2113.85,233.969 2114.42,231.904 2114.99,229.91 2115.56,231.075 2116.13,232.452 2116.7,230.5 2117.26,233.497 2117.83,234.533 2118.4,234.526 2118.97,238.451 2119.54,240.899 2120.11,242.236 2120.67,241.47 2121.24,239.75 2121.81,238.99 2122.38,240.435 2122.95,242.903 2123.52,239.978 2124.08,240.258 2124.65,239.572 2125.22,237.002 2125.79,236.613 2126.36,234.915 2126.93,233.638 2127.49,232.356 2128.06,230.203 2128.63,231.396 2129.2,233.556 2129.77,231.21 2130.34,230.206 2130.9,229.23 2131.47,230.249 2132.04,229.149 2132.61,229.201 2133.18,229.086 2133.75,228.075 2134.31,229.156 2134.88,228.22 2135.45,228.294 2136.02,227.245 2136.59,226.374 2137.16,228.477 2137.72,227.808 2138.29,226.615 2138.86,227.183 2139.43,226.438 2140,225.96 2140.57,226.385 2141.13,226.818 2141.7,227.316 2142.27,227.583 2142.84,227.792 2143.41,227.051 2143.98,225.476 2144.54,226.966 2145.11,225.113 2145.68,225.754 2146.25,229.12 2146.82,229.121 2147.39,230.189 2147.95,228.234 2148.52,229.476 2149.09,228.538 2149.66,226.784 2150.23,230.335 2150.8,230.522 2151.36,230.511 2151.93,229.693 2152.5,229.744 2153.07,229.55 2153.64,229.622 2154.21,228.872 2154.77,229.128 2155.34,229.379 2155.91,230.784 2156.48,227.942 2157.05,228.22 2157.62,228.418 2158.18,227.487 2158.75,223.675 2159.32,225.215 2159.89,227.757 \"/>\n<path clip-path=\"url(#clip410)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip410)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip410)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip410)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.031 ± 0.023\n  with uncertainty of ± 0.0020963535305373385\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01135 ± (0.00323236, 0.00350109) (MC)\n  95% confidence interval: [-4.01818, -4.00515] (MC)\n  linear error propagation: -4.01145 ± 0.00325758\n  |δ_y| = |0.00245692| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.011346312712546, val_l = 0.006835822021553639, val_u = 0.006196023629772007)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip440\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip440)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip441\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip440)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip442\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1144.14 2211.02,1144.14 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,980.88 2211.02,980.88 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,817.619 2211.02,817.619 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,654.357 2211.02,654.357 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,491.096 2211.02,491.096 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,327.834 2211.02,327.834 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1144.14 365.751,1144.14 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,980.88 365.751,980.88 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,817.619 365.751,817.619 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,654.357 365.751,654.357 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,491.096 365.751,491.096 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,327.834 365.751,327.834 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M298.909 1129.94 Q295.298 1129.94 293.469 1133.5 Q291.664 1137.05 291.664 1144.18 Q291.664 1151.28 293.469 1154.85 Q295.298 1158.39 298.909 1158.39 Q302.543 1158.39 304.349 1154.85 Q306.177 1151.28 306.177 1144.18 Q306.177 1137.05 304.349 1133.5 Q302.543 1129.94 298.909 1129.94 M298.909 1126.24 Q304.719 1126.24 307.775 1130.84 Q310.853 1135.43 310.853 1144.18 Q310.853 1152.9 307.775 1157.51 Q304.719 1162.09 298.909 1162.09 Q293.099 1162.09 290.02 1157.51 Q286.964 1152.9 286.964 1144.18 Q286.964 1135.43 290.02 1130.84 Q293.099 1126.24 298.909 1126.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M259.557 994.225 L267.196 994.225 L267.196 967.859 L258.886 969.526 L258.886 965.267 L267.15 963.6 L271.826 963.6 L271.826 994.225 L279.465 994.225 L279.465 998.16 L259.557 998.16 L259.557 994.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M298.909 966.679 Q295.298 966.679 293.469 970.243 Q291.664 973.785 291.664 980.915 Q291.664 988.021 293.469 991.586 Q295.298 995.128 298.909 995.128 Q302.543 995.128 304.349 991.586 Q306.177 988.021 306.177 980.915 Q306.177 973.785 304.349 970.243 Q302.543 966.679 298.909 966.679 M298.909 962.975 Q304.719 962.975 307.775 967.581 Q310.853 972.165 310.853 980.915 Q310.853 989.642 307.775 994.248 Q304.719 998.831 298.909 998.831 Q293.099 998.831 290.02 994.248 Q286.964 989.642 286.964 980.915 Q286.964 972.165 290.02 967.581 Q293.099 962.975 298.909 962.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M262.775 830.963 L279.094 830.963 L279.094 834.899 L257.15 834.899 L257.15 830.963 Q259.812 828.209 264.395 823.579 Q269.002 818.926 270.182 817.584 Q272.428 815.061 273.307 813.325 Q274.21 811.565 274.21 809.875 Q274.21 807.121 272.266 805.385 Q270.344 803.649 267.242 803.649 Q265.043 803.649 262.59 804.413 Q260.159 805.176 257.381 806.727 L257.381 802.005 Q260.205 800.871 262.659 800.292 Q265.113 799.714 267.15 799.714 Q272.52 799.714 275.715 802.399 Q278.909 805.084 278.909 809.575 Q278.909 811.704 278.099 813.625 Q277.312 815.524 275.205 818.116 Q274.627 818.787 271.525 822.005 Q268.423 825.199 262.775 830.963 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M298.909 803.417 Q295.298 803.417 293.469 806.982 Q291.664 810.524 291.664 817.653 Q291.664 824.76 293.469 828.324 Q295.298 831.866 298.909 831.866 Q302.543 831.866 304.349 828.324 Q306.177 824.76 306.177 817.653 Q306.177 810.524 304.349 806.982 Q302.543 803.417 298.909 803.417 M298.909 799.714 Q304.719 799.714 307.775 804.32 Q310.853 808.903 310.853 817.653 Q310.853 826.38 307.775 830.986 Q304.719 835.57 298.909 835.57 Q293.099 835.57 290.02 830.986 Q286.964 826.38 286.964 817.653 Q286.964 808.903 290.02 804.32 Q293.099 799.714 298.909 799.714 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M272.914 653.003 Q276.27 653.72 278.145 655.989 Q280.043 658.257 280.043 661.591 Q280.043 666.707 276.525 669.507 Q273.006 672.308 266.525 672.308 Q264.349 672.308 262.034 671.869 Q259.742 671.452 257.289 670.595 L257.289 666.082 Q259.233 667.216 261.548 667.794 Q263.863 668.373 266.386 668.373 Q270.784 668.373 273.076 666.637 Q275.39 664.901 275.39 661.591 Q275.39 658.535 273.238 656.822 Q271.108 655.086 267.289 655.086 L263.261 655.086 L263.261 651.244 L267.474 651.244 Q270.923 651.244 272.752 649.878 Q274.58 648.489 274.58 645.896 Q274.58 643.234 272.682 641.822 Q270.807 640.387 267.289 640.387 Q265.367 640.387 263.168 640.804 Q260.969 641.221 258.33 642.1 L258.33 637.934 Q260.992 637.193 263.307 636.822 Q265.645 636.452 267.705 636.452 Q273.029 636.452 276.131 638.883 Q279.233 641.29 279.233 645.41 Q279.233 648.281 277.59 650.271 Q275.946 652.239 272.914 653.003 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M298.909 640.156 Q295.298 640.156 293.469 643.721 Q291.664 647.262 291.664 654.392 Q291.664 661.498 293.469 665.063 Q295.298 668.605 298.909 668.605 Q302.543 668.605 304.349 665.063 Q306.177 661.498 306.177 654.392 Q306.177 647.262 304.349 643.721 Q302.543 640.156 298.909 640.156 M298.909 636.452 Q304.719 636.452 307.775 641.058 Q310.853 645.642 310.853 654.392 Q310.853 663.119 307.775 667.725 Q304.719 672.308 298.909 672.308 Q293.099 672.308 290.02 667.725 Q286.964 663.119 286.964 654.392 Q286.964 645.642 290.02 641.058 Q293.099 636.452 298.909 636.452 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M271.594 477.89 L259.789 496.339 L271.594 496.339 L271.594 477.89 M270.367 473.816 L276.247 473.816 L276.247 496.339 L281.177 496.339 L281.177 500.227 L276.247 500.227 L276.247 508.376 L271.594 508.376 L271.594 500.227 L255.992 500.227 L255.992 495.714 L270.367 473.816 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M298.909 476.894 Q295.298 476.894 293.469 480.459 Q291.664 484.001 291.664 491.13 Q291.664 498.237 293.469 501.802 Q295.298 505.343 298.909 505.343 Q302.543 505.343 304.349 501.802 Q306.177 498.237 306.177 491.13 Q306.177 484.001 304.349 480.459 Q302.543 476.894 298.909 476.894 M298.909 473.191 Q304.719 473.191 307.775 477.797 Q310.853 482.38 310.853 491.13 Q310.853 499.857 307.775 504.464 Q304.719 509.047 298.909 509.047 Q293.099 509.047 290.02 504.464 Q286.964 499.857 286.964 491.13 Q286.964 482.38 290.02 477.797 Q293.099 473.191 298.909 473.191 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M258.793 310.554 L277.15 310.554 L277.15 314.489 L263.076 314.489 L263.076 322.961 Q264.094 322.614 265.113 322.452 Q266.131 322.267 267.15 322.267 Q272.937 322.267 276.316 325.438 Q279.696 328.61 279.696 334.026 Q279.696 339.605 276.224 342.707 Q272.752 345.785 266.432 345.785 Q264.256 345.785 261.988 345.415 Q259.742 345.045 257.335 344.304 L257.335 339.605 Q259.418 340.739 261.641 341.295 Q263.863 341.85 266.34 341.85 Q270.344 341.85 272.682 339.744 Q275.02 337.637 275.02 334.026 Q275.02 330.415 272.682 328.309 Q270.344 326.202 266.34 326.202 Q264.465 326.202 262.59 326.619 Q260.738 327.035 258.793 327.915 L258.793 310.554 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M298.909 313.633 Q295.298 313.633 293.469 317.198 Q291.664 320.739 291.664 327.869 Q291.664 334.975 293.469 338.54 Q295.298 342.082 298.909 342.082 Q302.543 342.082 304.349 338.54 Q306.177 334.975 306.177 327.869 Q306.177 320.739 304.349 317.198 Q302.543 313.633 298.909 313.633 M298.909 309.929 Q304.719 309.929 307.775 314.536 Q310.853 319.119 310.853 327.869 Q310.853 336.596 307.775 341.202 Q304.719 345.785 298.909 345.785 Q293.099 345.785 290.02 341.202 Q286.964 336.596 286.964 327.869 Q286.964 319.119 290.02 314.536 Q293.099 309.929 298.909 309.929 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip442)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1023.85 400.199,913.331 400.786,811.929 401.372,719.029 401.958,634.063 402.545,556.509 403.131,597.648 403.718,627.904 404.304,558.151 404.891,497.456 405.477,441.173 406.063,390.334 406.65,344.585 407.236,377.811 407.823,337.904 408.409,302.328 408.995,270.801 409.582,299.62 410.168,273.085 410.755,251.231 411.341,278.316 411.927,260.115 412.514,244.11 413.1,230.764 413.687,219.895 414.273,278.459 414.86,271.129 415.446,321.805 416.032,314.45 416.619,334.757 417.205,354.499 417.792,352.029 418.378,350.252 418.964,349.419 419.551,350.706 420.137,353.044 420.724,372.613 421.31,391.621 421.896,395.194 422.483,441.143 423.069,456.125 423.656,459.635 424.242,464.682 424.829,470.355 425.415,487.71 426.001,494.458 426.588,512.48 427.174,538.392 427.761,545.836 428.347,553.718 428.933,569.989 429.52,585.163 430.106,615.471 430.693,622.314 431.279,630.243 431.865,644.134 432.452,652.761 433.038,660.758 433.625,674.599 434.211,689.055 434.798,703.602 435.384,716.881 435.97,735.018 436.557,743.483 437.143,756.815 437.73,768.959 438.316,781.095 438.902,793.176 439.489,804.841 440.075,812.062 440.662,823.283 441.248,837.687 441.835,851.905 442.421,862.027 443.007,872.125 443.594,881.858 444.18,895.266 444.767,904.495 445.353,913.532 445.939,925.226 446.526,930.971 447.112,942.586 447.699,953.749 448.285,961.854 448.871,972.269 449.458,977.194 450.044,984.65 450.631,994.57 451.217,1004.09 451.804,1013.49 452.39,1020.28 452.976,1029.23 453.563,1038.11 454.149,1046.19 454.736,1049.56 455.322,1055.08 455.908,1060.55 456.495,1074.53 457.081,1079.32 457.668,1079.95 458.254,1084.8 458.84,1091.62 459.427,1100.06 460.013,1111.85 460.6,1121.43 461.186,1124.5 461.773,1129.71 462.359,1134.99 462.945,1139.73 463.532,1142.89 464.118,1147.86 464.705,1149.22 465.291,1152.16 465.877,1155.21 466.464,1158.15 467.05,1161.15 467.637,1165.56 468.223,1168.31 468.809,1174.61 469.396,1175.64 469.982,1176.65 470.569,1181.39 471.155,1185.47 471.742,1184.65 472.328,1187.21 472.914,1192.8 473.501,1193.45 474.087,1193.92 474.674,1193.12 475.26,1195.2 475.846,1198.95 476.433,1199.42 477.019,1203.43 477.606,1203.57 478.192,1204.15 478.778,1207.53 479.365,1211.23 479.951,1211.48 480.538,1214.9 481.124,1214.74 481.711,1216.23 482.297,1218.07 482.883,1216.85 483.47,1218.6 484.056,1218.73 484.643,1223.31 485.229,1223.28 485.815,1224.57 486.402,1226.08 486.988,1228.71 487.575,1228.34 488.161,1232.15 488.748,1234.46 489.334,1233.81 489.92,1236.05 490.507,1236.79 491.093,1234.64 491.68,1235.31 492.266,1237.33 492.852,1238.34 493.439,1236.09 494.025,1236.9 494.612,1239.33 495.198,1239.98 495.784,1239.52 496.371,1239.02 496.957,1239.98 497.544,1243.46 498.13,1242.48 498.717,1241.65 499.303,1240.93 499.889,1238.71 500.476,1238.26 501.062,1239.37 501.649,1239.9 502.235,1240.58 502.821,1242.75 503.408,1243.29 503.994,1241.16 504.581,1236.6 505.167,1237.69 505.753,1237.3 506.34,1238.26 506.926,1237.82 507.513,1238.78 508.099,1242.68 508.686,1242.29 509.272,1244.21 509.858,1246.25 510.445,1246.63 511.031,1249.8 511.618,1246.07 512.204,1245.4 512.79,1250.08 513.377,1247.83 513.963,1248.61 514.55,1247.71 515.136,1249.84 515.722,1250.27 516.309,1250.53 516.895,1248.08 517.482,1245.87 518.068,1243.65 518.655,1240.26 519.241,1238.64 519.827,1238.31 520.414,1239.2 521,1238.68 521.587,1236.79 522.173,1238.06 522.759,1237.52 523.346,1237.1 523.932,1238.55 524.519,1237.92 525.105,1241.74 525.691,1241.08 526.278,1245.99 526.864,1245.26 527.451,1244.26 528.037,1243.36 528.624,1241.1 529.21,1240.35 529.796,1242.41 530.383,1243.21 530.969,1242.57 531.556,1241.79 532.142,1240.06 532.728,1237 533.315,1238.04 533.901,1236.02 534.488,1235.81 535.074,1235.38 535.661,1236.25 536.247,1240.11 536.833,1243.66 537.42,1243.04 538.006,1241.1 538.593,1241.7 539.179,1240.82 539.765,1238.89 540.352,1238.44 540.938,1239.24 541.525,1239.96 542.111,1238.08 542.697,1238.68 543.284,1236.96 543.87,1237.89 544.457,1236.36 545.043,1235.71 545.63,1233.89 546.216,1234.86 546.802,1234.57 547.389,1234.04 547.975,1236.61 548.562,1237.41 549.148,1236.83 549.734,1233.56 550.321,1231.79 550.907,1231.76 551.494,1231.34 552.08,1231.01 552.666,1230.67 553.253,1233.14 553.839,1231.28 554.426,1232.26 555.012,1231.93 555.599,1230.02 556.185,1229.77 556.771,1230.9 557.358,1232 557.944,1233.34 558.531,1237.09 559.117,1233.68 559.703,1231.93 560.29,1234.44 560.876,1234.11 561.463,1229.59 562.049,1227.89 562.635,1229.23 563.222,1230.49 563.808,1230.35 564.395,1230.08 564.981,1233.91 565.568,1232.62 566.154,1232.13 566.74,1233.34 567.327,1235.72 567.913,1231.16 568.5,1230.64 569.086,1230.21 569.672,1231.29 570.259,1234.92 570.845,1234.17 571.432,1232.49 572.018,1233.54 572.605,1231.58 573.191,1235.29 573.777,1234.76 574.364,1235.72 574.95,1237.73 575.537,1235.47 576.123,1233.18 576.709,1232.51 577.296,1233.35 577.882,1232.68 578.469,1236.01 579.055,1234.04 579.641,1233.74 580.228,1233.14 580.814,1235.44 581.401,1234.83 581.987,1234.07 582.574,1236.58 583.16,1234.76 583.746,1232.93 584.333,1232.58 584.919,1231.57 585.506,1229.67 586.092,1230.54 586.678,1228.4 587.265,1230.77 587.851,1231.7 588.438,1231.23 589.024,1230.62 589.61,1231.78 590.197,1228.41 590.783,1228.28 591.37,1226.64 591.956,1226.43 592.543,1227.86 593.129,1224.69 593.715,1225.96 594.302,1225.72 594.888,1226.72 595.475,1226.41 596.061,1227.75 596.647,1226.2 597.234,1226.37 597.82,1227.6 598.407,1228.32 598.993,1225.4 599.579,1225.12 600.166,1225.07 600.752,1226.6 601.339,1223.63 601.925,1227.57 602.512,1228.39 603.098,1228 603.684,1226.62 604.271,1226.25 604.857,1228.55 605.444,1226.71 606.03,1229.15 606.616,1231.35 607.203,1233.54 607.789,1231.82 608.376,1231.23 608.962,1232.28 609.548,1233.23 610.135,1232.65 610.721,1229.4 611.308,1230.11 611.894,1232.35 612.481,1228.99 613.067,1228.55 613.653,1229.26 614.24,1223.58 614.826,1219.2 615.413,1217.87 615.999,1215.16 616.585,1216.75 617.172,1221.01 617.758,1220 618.345,1219.91 618.931,1218.57 619.518,1219.99 620.104,1222.27 620.69,1220.58 621.277,1223.01 621.863,1221.56 622.45,1221.35 623.036,1221.28 623.622,1220.16 624.209,1220.22 624.795,1218.71 625.382,1222.72 625.968,1221.87 626.554,1222.98 627.141,1223.95 627.727,1224.93 628.314,1225.86 628.9,1228.3 629.487,1231.79 630.073,1232.31 630.659,1228.71 631.246,1228.43 631.832,1224.96 632.419,1224.8 633.005,1226.9 633.591,1225.27 634.178,1224.57 634.764,1222.84 635.351,1221.44 635.937,1221.42 636.523,1223.67 637.11,1221.93 637.696,1224.39 638.283,1221.33 638.869,1221.36 639.456,1221.49 640.042,1224.05 640.628,1222.29 641.215,1220.84 641.801,1218.07 642.388,1217.83 642.974,1216.37 643.56,1217.87 644.147,1219.27 644.733,1220.79 645.32,1220.59 645.906,1220.26 646.492,1219.85 647.079,1222.59 647.665,1222.55 648.252,1222.18 648.838,1219.51 649.425,1218.15 650.011,1216.8 650.597,1216.71 651.184,1215.55 651.77,1215.61 652.357,1215.84 652.943,1216.06 653.529,1216.08 654.116,1214.88 654.702,1214.92 655.289,1215.17 655.875,1216.78 656.462,1216.77 657.048,1222.19 657.634,1222.97 658.221,1222.74 658.807,1225.34 659.394,1223.82 659.98,1223.53 660.566,1223.31 661.153,1225.58 661.739,1225.13 662.326,1226.23 662.912,1225.59 663.498,1225.08 664.085,1222.02 664.671,1221.74 665.258,1221.29 665.844,1219.81 666.431,1219.44 667.017,1215.11 667.603,1215.26 668.19,1213.78 668.776,1209.97 669.363,1211.55 669.949,1212.91 670.535,1212.9 671.122,1213.15 671.708,1212.01 672.295,1210.89 672.881,1212.58 673.467,1214.09 674.054,1216.58 674.64,1216.49 675.227,1220.39 675.813,1221.42 676.4,1221.37 676.986,1219.93 677.572,1218.7 678.159,1220.14 678.745,1218.52 679.332,1222.3 679.918,1223.44 680.504,1222.98 681.091,1225.19 681.677,1224.43 682.264,1225.32 682.85,1224.95 683.436,1223.09 684.023,1221.46 684.609,1222.45 685.196,1216.98 685.782,1217.13 686.369,1215.42 686.955,1215.28 687.541,1213.96 688.128,1215.04 688.714,1216.42 689.301,1216.13 689.887,1219.05 690.473,1218.73 691.06,1218.86 691.646,1218.61 692.233,1219.65 692.819,1215.73 693.405,1214.76 693.992,1213.59 694.578,1213.63 695.165,1214.93 695.751,1217.53 696.338,1217.67 696.924,1217.54 697.51,1220.01 698.097,1218.39 698.683,1218.54 699.27,1218.55 699.856,1222.25 700.442,1219.18 701.029,1220.16 701.615,1220.04 702.202,1219.72 702.788,1219.19 703.375,1219.02 703.961,1217.42 704.547,1217.16 705.134,1218.42 705.72,1218.22 706.307,1218.32 706.893,1218.46 707.479,1217.12 708.066,1218.33 708.652,1216.73 709.239,1216.41 709.825,1216.17 710.411,1217.3 710.998,1217.49 711.584,1217.41 712.171,1217.27 712.757,1215.87 713.344,1214.7 713.93,1216.26 714.516,1214.98 715.103,1214.84 715.689,1216.54 716.276,1213.79 716.862,1213.54 717.448,1217.69 718.035,1220.27 718.621,1218.44 719.208,1219.22 719.794,1217.79 720.38,1217.59 720.967,1214.53 721.553,1214.34 722.14,1216.94 722.726,1218.13 723.313,1217.97 723.899,1216.48 724.485,1216.24 725.072,1219.76 725.658,1220.73 726.245,1219.04 726.831,1216.16 727.417,1220.28 728.004,1221.18 728.59,1219.51 729.177,1221.88 729.763,1221.54 730.349,1219.84 730.936,1218.13 731.522,1216.64 732.109,1216.55 732.695,1217.65 733.282,1214.84 733.868,1214.71 734.454,1216.07 735.041,1215.81 735.627,1219.69 736.214,1216.57 736.8,1216.15 737.386,1217.44 737.973,1218.63 738.559,1216.83 739.146,1216.67 739.732,1216.64 740.318,1215.01 740.905,1213.63 741.491,1213.76 742.078,1212.64 742.664,1212.66 743.251,1211.31 743.837,1211.45 744.423,1212.8 745.01,1212.79 745.596,1211.38 746.183,1212.87 746.769,1214.32 747.355,1213.19 747.942,1213.09 748.528,1213.12 749.115,1211.73 749.701,1211.81 750.288,1214.81 750.874,1214.87 751.46,1214.85 752.047,1211.94 752.633,1215.8 753.22,1215.82 753.806,1217.03 754.392,1218.07 754.979,1217.83 755.565,1219.1 756.152,1220.24 756.738,1219.63 757.324,1216.65 757.911,1216.72 758.497,1217.8 759.084,1217.57 759.67,1217.33 760.257,1218.41 760.843,1215.65 761.429,1215.44 762.016,1215.4 762.602,1215.18 763.189,1217.63 763.775,1218.67 764.361,1218.49 764.948,1216.77 765.534,1218.04 766.121,1217.56 766.707,1216.05 767.293,1215.69 767.88,1214.13 768.466,1212.78 769.053,1211.62 769.639,1214.45 770.226,1212.96 770.812,1214.18 771.398,1216.81 771.985,1215.25 772.571,1212.64 773.158,1210.12 773.744,1211.78 774.33,1213 774.917,1211.73 775.503,1214.39 776.09,1217.21 776.676,1217.08 777.262,1219.73 777.849,1220.83 778.435,1219.06 779.022,1217.31 779.608,1216.98 780.195,1215.49 780.781,1215.57 781.367,1215.49 781.954,1211.61 782.54,1210.41 783.127,1209.39 783.713,1209.68 784.299,1208.5 784.886,1210.28 785.472,1211.58 786.059,1212.03 786.645,1211.99 787.232,1213.1 787.818,1211.59 788.404,1206.31 788.991,1205.45 789.577,1204.49 790.164,1206.22 790.75,1208.11 791.336,1208.45 791.923,1205.79 792.509,1207.41 793.096,1208.98 793.682,1209.08 794.268,1205.11 794.855,1208.24 795.441,1209.67 796.028,1209.8 796.614,1211.25 797.201,1212.62 797.787,1212.59 798.373,1214.04 798.96,1215.64 799.546,1215.52 800.133,1210.31 800.719,1214.25 801.305,1214.39 801.892,1217.09 802.478,1219.42 803.065,1220.5 803.651,1221.62 804.237,1221.25 804.824,1218.25 805.41,1215.18 805.997,1213.83 806.583,1215.11 807.17,1215.16 807.756,1215.26 808.342,1215.19 808.929,1216.67 809.515,1217.69 810.102,1218.81 810.688,1217.18 811.274,1217.02 811.861,1219.35 812.447,1221.74 813.034,1222.71 813.62,1222 814.206,1221.52 814.793,1222.24 815.379,1220.36 815.966,1221.21 816.552,1220.76 817.139,1221.74 817.725,1221.04 818.311,1223.16 818.898,1222.63 819.484,1222.18 820.071,1222.88 820.657,1222.16 821.243,1223.1 821.83,1222.28 822.416,1221.76 823.003,1216.97 823.589,1215.44 824.175,1214.03 824.762,1212.56 825.348,1211.33 825.935,1215.62 826.521,1215.41 827.108,1216.58 827.694,1216.17 828.28,1217.59 828.867,1216.15 829.453,1212.84 830.04,1212.99 830.626,1211.57 831.212,1212.7 831.799,1212.82 832.385,1212.83 832.972,1212.95 833.558,1212.67 834.145,1212.59 834.731,1213.91 835.317,1214.1 835.904,1214 836.49,1215 837.077,1215.87 837.663,1214.43 838.249,1212.91 838.836,1213 839.422,1210.54 840.009,1209.11 840.595,1210.27 841.181,1207.58 841.768,1209.11 842.354,1206.56 842.941,1206.75 843.527,1207.08 844.114,1205.78 844.7,1204.68 845.286,1204.87 845.873,1205.16 846.459,1205.34 847.046,1205.34 847.632,1208.25 848.218,1208.34 848.805,1206.98 849.391,1206.1 849.978,1209.04 850.564,1210.81 851.15,1206.78 851.737,1207.3 852.323,1210 852.91,1211.39 853.496,1208.74 854.083,1209.95 854.669,1210.01 855.255,1207.54 855.842,1211.82 856.428,1214.62 857.015,1217.03 857.601,1218.18 858.187,1216.28 858.774,1216.14 859.36,1213.2 859.947,1214.64 860.533,1213.12 861.119,1212.97 861.706,1212.94 862.292,1215.56 862.879,1209.98 863.465,1211.56 864.052,1209.06 864.638,1209.19 865.224,1204.28 865.811,1202.08 866.397,1203.9 866.984,1204.6 867.57,1202.66 868.156,1200.82 868.743,1201.41 869.329,1199.47 869.916,1200.01 870.502,1196.25 871.089,1197.19 871.675,1199.31 872.261,1200.05 872.848,1203.68 873.434,1202.79 874.021,1205.97 874.607,1205.09 875.193,1204.28 875.78,1204.93 876.366,1206.32 876.953,1204.99 877.539,1208.29 878.125,1206.03 878.712,1208.9 879.298,1210.3 879.885,1209.13 880.471,1211.89 881.058,1213.32 881.644,1213.7 882.23,1213.73 882.817,1212.43 883.403,1210.96 883.99,1212.48 884.576,1211.48 885.162,1211.69 885.749,1213.14 886.335,1215.65 886.922,1215.52 887.508,1216.73 888.094,1217.97 888.681,1221.56 889.267,1223.83 889.854,1219.37 890.44,1220.4 891.027,1218.64 891.613,1215.33 892.199,1214.12 892.786,1213.95 893.372,1212.64 893.959,1212.59 894.545,1213.87 895.131,1213.52 895.718,1216.19 896.304,1214.55 896.891,1215.84 897.477,1215.51 898.063,1215.03 898.65,1213.32 899.236,1213.32 899.823,1213.02 900.409,1212.65 900.996,1212.55 901.582,1215.04 902.168,1213.45 902.755,1214.82 903.341,1214.96 903.928,1213.02 904.514,1211.48 905.1,1210 905.687,1209.91 906.273,1210 906.86,1210.13 907.446,1211.56 908.032,1209.94 908.619,1209.68 909.205,1208.46 909.792,1207.39 910.378,1208.85 910.965,1209 911.551,1211.81 912.137,1211.56 912.724,1210.14 913.31,1211.41 913.897,1212.76 914.483,1214.12 915.069,1213.84 915.656,1213.75 916.242,1212.35 916.829,1212.23 917.415,1212.09 918.002,1215.02 918.588,1215.95 919.174,1211.89 919.761,1210.39 920.347,1209.06 920.934,1210.22 921.52,1212.95 922.106,1212.74 922.693,1212.4 923.279,1208.17 923.866,1209.82 924.452,1208.56 925.038,1209.92 925.625,1208.6 926.211,1207.48 926.798,1207.52 927.384,1207.71 927.971,1206.51 928.557,1208.04 929.143,1210.66 929.73,1211.96 930.316,1213.1 930.903,1211.6 931.489,1211.65 932.075,1214.23 932.662,1214.24 933.248,1216.71 933.835,1215.22 934.421,1215.08 935.007,1214.74 935.594,1210.57 936.18,1210.6 936.767,1213.15 937.353,1210.52 937.94,1210.51 938.526,1214.64 939.112,1214.57 939.699,1213.08 940.285,1216.96 940.872,1219.32 941.458,1220.08 942.044,1222.01 942.631,1222.9 943.217,1218.8 943.804,1218.49 944.39,1215.48 944.976,1217.62 945.563,1216.07 946.149,1215.96 946.736,1215.69 947.322,1215.61 947.909,1213.04 948.495,1212.88 949.081,1211.53 949.668,1211.42 950.254,1212.66 950.841,1209.91 951.427,1209.66 952.013,1209.49 952.6,1210.55 953.186,1211.82 953.773,1210.54 954.359,1210.51 954.945,1207.91 955.532,1208.26 956.118,1209.57 956.705,1212.15 957.291,1213.07 957.878,1211.47 958.464,1212.93 959.05,1215.49 959.637,1216.66 960.223,1216.3 960.81,1218.54 961.396,1216.43 961.982,1213.56 962.569,1213.57 963.155,1213.55 963.742,1212.09 964.328,1213.19 964.915,1213.1 965.501,1214.12 966.087,1211.18 966.674,1209.98 967.26,1209.74 967.847,1211.05 968.433,1212.47 969.019,1209.81 969.606,1210.03 970.192,1207.3 970.779,1208.74 971.365,1208.61 971.951,1208.77 972.538,1210.04 973.124,1207.5 973.711,1207.64 974.297,1207.73 974.884,1206.58 975.47,1209.22 976.056,1207.88 976.643,1205.48 977.229,1206.19 977.816,1209.26 978.402,1208.06 978.988,1204.16 979.575,1204.47 980.161,1203.77 980.748,1205.45 981.334,1205.68 981.92,1205.74 982.507,1208.58 983.093,1208.5 983.68,1211.44 984.266,1211.23 984.853,1211.37 985.439,1209.92 986.025,1210.4 986.612,1210.42 987.198,1207.79 987.785,1206.85 988.371,1207.02 988.957,1208.62 989.544,1210.07 990.13,1210.05 990.717,1210.08 991.303,1208.65 991.889,1208.54 992.476,1209.97 993.062,1209.85 993.649,1212.98 994.235,1212.8 994.822,1209.81 995.408,1208.45 995.994,1208.51 996.581,1207.21 997.167,1212.68 997.754,1208.28 998.34,1210.5 998.926,1210.56 999.513,1210.4 1000.1,1207.95 1000.69,1209.52 1001.27,1208.1 1001.86,1206.71 1002.44,1205.67 1003.03,1206.07 1003.62,1205.03 1004.2,1203.05 1004.79,1200.88 1005.38,1200.23 1005.96,1202.13 1006.55,1204.07 1007.14,1204.66 1007.72,1209.1 1008.31,1211.86 1008.9,1210.45 1009.48,1209.13 1010.07,1206.57 1010.65,1205.47 1011.24,1208.35 1011.83,1208.47 1012.41,1208.57 1013,1208.63 1013.59,1208.78 1014.17,1207.41 1014.76,1207.24 1015.35,1208.93 1015.93,1209.04 1016.52,1211.99 1017.11,1211.96 1017.69,1215.62 1018.28,1216.84 1018.86,1215.16 1019.45,1216.36 1020.04,1216.13 1020.62,1215.65 1021.21,1216.47 1021.8,1213.62 1022.38,1214.69 1022.97,1215.65 1023.56,1212.91 1024.14,1212.76 1024.73,1211.17 1025.32,1212.37 1025.9,1213.48 1026.49,1211.91 1027.07,1213.32 1027.66,1211.77 1028.25,1207.82 1028.83,1207.98 1029.42,1206.76 1030.01,1207.07 1030.59,1207.23 1031.18,1207.32 1031.77,1209.14 1032.35,1209.37 1032.94,1209.33 1033.52,1210.67 1034.11,1209.13 1034.7,1208.99 1035.28,1213.31 1035.87,1213.27 1036.46,1207.74 1037.04,1207.68 1037.63,1206.49 1038.22,1206.83 1038.8,1209.89 1039.39,1213.79 1039.98,1214.81 1040.56,1215.68 1041.15,1214.14 1041.73,1215.08 1042.32,1214.75 1042.91,1213.1 1043.49,1212.72 1044.08,1212.59 1044.67,1213.92 1045.25,1216.94 1045.84,1217.8 1046.43,1215.99 1047.01,1213.15 1047.6,1214.21 1048.19,1214.02 1048.77,1214.96 1049.36,1213.12 1049.94,1212.73 1050.53,1212.76 1051.12,1209.84 1051.7,1212.49 1052.29,1212.09 1052.88,1213.24 1053.46,1211.79 1054.05,1212.84 1054.64,1211.36 1055.22,1210.28 1055.81,1209.84 1056.39,1210.02 1056.98,1208.87 1057.57,1208.99 1058.15,1209.23 1058.74,1209.22 1059.33,1210.51 1059.91,1210.76 1060.5,1211 1061.09,1211.15 1061.67,1209.98 1062.26,1208.62 1062.85,1208.58 1063.43,1211.31 1064.02,1213.78 1064.6,1216.02 1065.19,1214.59 1065.78,1215.72 1066.36,1215.41 1066.95,1212.78 1067.54,1211.45 1068.12,1211.05 1068.71,1211.23 1069.3,1211.31 1069.88,1210.16 1070.47,1206.51 1071.06,1206.69 1071.64,1206.64 1072.23,1208.16 1072.81,1208.29 1073.4,1208.44 1073.99,1207.97 1074.57,1207.83 1075.16,1206.77 1075.75,1203.04 1076.33,1206.26 1076.92,1206.48 1077.51,1205.24 1078.09,1204.09 1078.68,1205.83 1079.26,1207.38 1079.85,1211.46 1080.44,1211.48 1081.02,1213.68 1081.61,1213.74 1082.2,1211.16 1082.78,1213.71 1083.37,1214.77 1083.96,1213 1084.54,1215.63 1085.13,1216.49 1085.72,1218.44 1086.3,1219.33 1086.89,1217.78 1087.47,1216.1 1088.06,1218.3 1088.65,1216.59 1089.23,1219.02 1089.82,1218.4 1090.41,1219.26 1090.99,1216.11 1091.58,1217.18 1092.17,1215.64 1092.75,1215.5 1093.34,1217.88 1093.93,1214.85 1094.51,1214.6 1095.1,1214.33 1095.68,1212.93 1096.27,1214.38 1096.86,1214.41 1097.44,1215.58 1098.03,1212.87 1098.62,1211.09 1099.2,1213.7 1099.79,1209.46 1100.38,1208.16 1100.96,1206.89 1101.55,1207.22 1102.14,1207.26 1102.72,1206.01 1103.31,1203.22 1103.89,1203.63 1104.48,1202.45 1105.07,1202.5 1105.65,1205.33 1106.24,1207.09 1106.83,1207.23 1107.41,1207.52 1108,1207.43 1108.59,1206.39 1109.17,1205.3 1109.76,1205.43 1110.34,1202.91 1110.93,1201.7 1111.52,1202.27 1112.1,1202.76 1112.69,1203.25 1113.28,1202.17 1113.86,1200.99 1114.45,1201.59 1115.04,1203.54 1115.62,1203.97 1116.21,1204.66 1116.8,1202.14 1117.38,1200.98 1117.97,1202.92 1118.55,1205.86 1119.14,1202.05 1119.73,1202.45 1120.31,1202.73 1120.9,1203.11 1121.49,1209.98 1122.07,1208.72 1122.66,1207.49 1123.25,1208.84 1123.83,1207.4 1124.42,1206.33 1125.01,1206.3 1125.59,1206.33 1126.18,1206.67 1126.76,1205.82 1127.35,1205.83 1127.94,1204.69 1128.52,1208.95 1129.11,1206.27 1129.7,1204.81 1130.28,1203.72 1130.87,1203.81 1131.46,1201.89 1132.04,1199.5 1132.63,1198.77 1133.21,1202.32 1133.8,1198.62 1134.39,1199.35 1134.97,1199.7 1135.56,1200.33 1136.15,1200.87 1136.73,1201.54 1137.32,1202.04 1137.91,1205.12 1138.49,1205.32 1139.08,1205.78 1139.67,1209.96 1140.25,1210.31 1140.84,1212.9 1141.42,1212.77 1142.01,1215.4 1142.6,1217.95 1143.18,1217.83 1143.77,1218.63 1144.36,1222.14 1144.94,1221.58 1145.53,1222.06 1146.12,1221.43 1146.7,1220.77 1147.29,1217.78 1147.88,1217.15 1148.46,1215.32 1149.05,1212.29 1149.63,1212.02 1150.22,1215.98 1150.81,1216.77 1151.39,1215.12 1151.98,1216 1152.57,1212.77 1153.15,1213.92 1153.74,1214.84 1154.33,1214.48 1154.91,1215.5 1155.5,1216.47 1156.09,1215.69 1156.67,1213.97 1157.26,1216.56 1157.84,1217.57 1158.43,1214.62 1159.02,1218.36 1159.6,1218.12 1160.19,1216.39 1160.78,1214.79 1161.36,1211.75 1161.95,1213.15 1162.54,1212.99 1163.12,1213.12 1163.71,1214.71 1164.29,1213.05 1164.88,1212.76 1165.47,1211.33 1166.05,1212.42 1166.64,1209.57 1167.23,1209.58 1167.81,1212.07 1168.4,1213.32 1168.99,1210.41 1169.57,1211.68 1170.16,1211.43 1170.75,1208.96 1171.33,1210.1 1171.92,1208.57 1172.5,1208.38 1173.09,1205.94 1173.68,1204.68 1174.26,1206.31 1174.85,1205.11 1175.44,1207.64 1176.02,1210.27 1176.61,1212.83 1177.2,1216.66 1177.78,1214.98 1178.37,1213.11 1178.96,1212.69 1179.54,1213.98 1180.13,1216.42 1180.71,1217.51 1181.3,1215.91 1181.89,1212.79 1182.47,1212.55 1183.06,1213.54 1183.65,1213.33 1184.23,1212.98 1184.82,1211.44 1185.41,1210.05 1185.99,1210.09 1186.58,1208.58 1187.16,1207.16 1187.75,1208.48 1188.34,1208.43 1188.92,1209.86 1189.51,1207.21 1190.1,1204.86 1190.68,1205.24 1191.27,1206.93 1191.86,1205.77 1192.44,1204.66 1193.03,1203.67 1193.62,1205.45 1194.2,1206.86 1194.79,1211.06 1195.37,1210.88 1195.96,1210.77 1196.55,1209.58 1197.13,1212.09 1197.72,1212.21 1198.31,1217.47 1198.89,1215.87 1199.48,1215.61 1200.07,1214 1200.65,1211.31 1201.24,1212.69 1201.83,1212.59 1202.41,1213.77 1203,1215.1 1203.58,1216.28 1204.17,1216.28 1204.76,1211.95 1205.34,1210.61 1205.93,1210.48 1206.52,1210.54 1207.1,1210.57 1207.69,1208.97 1208.28,1208.83 1208.86,1206.33 1209.45,1206.82 1210.03,1206.73 1210.62,1207.88 1211.21,1209.19 1211.79,1210.52 1212.38,1210.52 1212.97,1210.79 1213.55,1209.63 1214.14,1210.68 1214.73,1209.57 1215.31,1209.56 1215.9,1210.69 1216.49,1211.84 1217.07,1212.85 1217.66,1211.22 1218.24,1212.52 1218.83,1216.35 1219.42,1215.98 1220,1215.85 1220.59,1215.36 1221.18,1216.3 1221.76,1214.4 1222.35,1214.43 1222.94,1212.6 1223.52,1213.63 1224.11,1213.69 1224.7,1213.64 1225.28,1213.52 1225.87,1210.99 1226.45,1209.65 1227.04,1212.24 1227.63,1213.38 1228.21,1210.66 1228.8,1209.1 1229.39,1206.3 1229.97,1203.8 1230.56,1207.88 1231.15,1208.16 1231.73,1208.34 1232.32,1205.76 1232.91,1205.78 1233.49,1205.88 1234.08,1203.69 1234.66,1203.79 1235.25,1205.66 1235.84,1205.75 1236.42,1205.93 1237.01,1206.22 1237.6,1209.09 1238.18,1205.39 1238.77,1208.53 1239.36,1208.65 1239.94,1211.55 1240.53,1208.86 1241.11,1207.64 1241.7,1206.38 1242.29,1206.39 1242.87,1206.58 1243.46,1206.93 1244.05,1206.98 1244.63,1208.39 1245.22,1211.04 1245.81,1210.96 1246.39,1211.17 1246.98,1211.21 1247.57,1211 1248.15,1210.95 1248.74,1211.16 1249.32,1209.69 1249.91,1208.4 1250.5,1211.25 1251.08,1209.73 1251.67,1209.86 1252.26,1209.91 1252.84,1208.41 1253.43,1209.7 1254.02,1208.34 1254.6,1207.23 1255.19,1210.09 1255.78,1211.23 1256.36,1212.32 1256.95,1211.97 1257.53,1210.66 1258.12,1213.19 1258.71,1207.67 1259.29,1212.99 1259.88,1214.03 1260.47,1212.36 1261.05,1211.95 1261.64,1208.06 1262.23,1210.82 1262.81,1210.78 1263.4,1211.98 1263.98,1209.22 1264.57,1210.59 1265.16,1212.05 1265.74,1212.92 1266.33,1210.2 1266.92,1208.67 1267.5,1208.84 1268.09,1211.46 1268.68,1210.41 1269.26,1211.68 1269.85,1214.22 1270.44,1211.3 1271.02,1208.62 1271.61,1208.68 1272.19,1205.84 1272.78,1210.13 1273.37,1208.76 1273.95,1207.61 1274.54,1206.57 1275.13,1211.17 1275.71,1209.52 1276.3,1207.92 1276.89,1205.54 1277.47,1207.1 1278.06,1207.37 1278.65,1207.18 1279.23,1206.1 1279.82,1205.09 1280.4,1206.64 1280.99,1206.82 1281.58,1206.96 1282.16,1207.09 1282.75,1204.47 1283.34,1204.77 1283.92,1203.45 1284.51,1202.66 1285.1,1202.03 1285.68,1202.32 1286.27,1202.84 1286.86,1201.94 1287.44,1203.61 1288.03,1202.57 1288.61,1201.72 1289.2,1200.56 1289.79,1201.07 1290.37,1202.7 1290.96,1203.98 1291.55,1201.66 1292.13,1202.34 1292.72,1204.18 1293.31,1205.96 1293.89,1205.96 1294.48,1203.24 1295.06,1205.19 1295.65,1205.56 1296.24,1206.13 1296.82,1204.04 1297.41,1203.41 1298,1204.35 1298.58,1204.7 1299.17,1207.79 1299.76,1208.17 1300.34,1209.29 1300.93,1211.88 1301.52,1217.06 1302.1,1215.4 1302.69,1211.6 1303.27,1215.43 1303.86,1215.03 1304.45,1213.46 1305.03,1210.98 1305.62,1212.29 1306.21,1210.83 1306.79,1210.89 1307.38,1210.87 1307.97,1210.89 1308.55,1212.23 1309.14,1212.26 1309.73,1212.26 1310.31,1207.04 1310.9,1208.62 1311.48,1209.8 1312.07,1209.52 1312.66,1210.73 1313.24,1210.54 1313.83,1210.55 1314.42,1213.25 1315,1210.4 1315.59,1214.73 1316.18,1213.17 1316.76,1211.6 1317.35,1213 1317.93,1215.41 1318.52,1216.38 1319.11,1213.38 1319.69,1210.43 1320.28,1212.97 1320.87,1211.29 1321.45,1209.98 1322.04,1210.1 1322.63,1210.08 1323.21,1210.02 1323.8,1214.12 1324.39,1214.06 1324.97,1213.76 1325.56,1216.15 1326.14,1217.24 1326.73,1215.67 1327.32,1216.72 1327.9,1216.4 1328.49,1217.49 1329.08,1218.74 1329.66,1219.89 1330.25,1219.67 1330.84,1219.13 1331.42,1219.97 1332.01,1216.6 1332.6,1217.21 1333.18,1216.78 1333.77,1216.68 1334.35,1218.77 1334.94,1218.37 1335.53,1217.64 1336.11,1215.98 1336.7,1215.74 1337.29,1216.82 1337.87,1215.35 1338.46,1216.26 1339.05,1214.95 1339.63,1212.28 1340.22,1208.22 1340.8,1208.33 1341.39,1212.02 1341.98,1211.97 1342.56,1213.54 1343.15,1214.72 1343.74,1216.87 1344.32,1216.79 1344.91,1213.78 1345.5,1213.58 1346.08,1213.01 1346.67,1209.68 1347.26,1205.76 1347.84,1204.73 1348.43,1205 1349.01,1206.46 1349.6,1205.37 1350.19,1201.81 1350.77,1202.19 1351.36,1201.11 1351.95,1201.74 1352.53,1201.03 1353.12,1204.51 1353.71,1203.49 1354.29,1205.28 1354.88,1208.5 1355.47,1208.69 1356.05,1208.49 1356.64,1208.42 1357.22,1206.84 1357.81,1209.71 1358.4,1208.49 1358.98,1209.55 1359.57,1205.58 1360.16,1207.16 1360.74,1205.94 1361.33,1206.03 1361.92,1205.97 1362.5,1204.8 1363.09,1206.46 1363.68,1201.12 1364.26,1202.78 1364.85,1202.91 1365.43,1202.03 1366.02,1202.38 1366.61,1202.74 1367.19,1204.74 1367.78,1207.6 1368.37,1210.21 1368.95,1211.58 1369.54,1211.77 1370.13,1213.13 1370.71,1213.04 1371.3,1212.89 1371.88,1211.38 1372.47,1211.28 1373.06,1210.95 1373.64,1212.09 1374.23,1215.9 1374.82,1218.06 1375.4,1217.6 1375.99,1217.06 1376.58,1215.36 1377.16,1211.09 1377.75,1210.8 1378.34,1210.88 1378.92,1212.19 1379.51,1213.44 1380.09,1211.88 1380.68,1208.73 1381.27,1207.27 1381.85,1207.28 1382.44,1207.5 1383.03,1207.75 1383.61,1207.9 1384.2,1209.11 1384.79,1210.78 1385.37,1212.15 1385.96,1213.28 1386.55,1210.47 1387.13,1210.48 1387.72,1209.81 1388.3,1208.68 1388.89,1208.94 1389.48,1206.51 1390.06,1209.52 1390.65,1210.79 1391.24,1209.43 1391.82,1209.31 1392.41,1212.16 1393,1212.98 1393.58,1212.72 1394.17,1211.28 1394.75,1215.03 1395.34,1214.76 1395.93,1214.76 1396.51,1213.11 1397.1,1216.85 1397.69,1216.29 1398.27,1217.21 1398.86,1218.11 1399.45,1220.26 1400.03,1221.21 1400.62,1223.07 1401.21,1221.33 1401.79,1221.91 1402.38,1218.61 1402.96,1214.09 1403.55,1213.94 1404.14,1210.88 1404.72,1209.74 1405.31,1208.14 1405.9,1210.73 1406.48,1207.84 1407.07,1206.75 1407.66,1208.1 1408.24,1208.11 1408.83,1205.45 1409.42,1205.64 1410,1207.28 1410.59,1206.07 1411.17,1207.61 1411.76,1207.75 1412.35,1207.83 1412.93,1209.43 1413.52,1209.48 1414.11,1208.21 1414.69,1206.94 1415.28,1209.75 1415.87,1207.09 1416.45,1208.55 1417.04,1208.83 1417.63,1209.07 1418.21,1208.92 1418.8,1208.98 1419.38,1210.52 1419.97,1210.46 1420.56,1209.05 1421.14,1209.16 1421.73,1209 1422.32,1209.03 1422.9,1206.5 1423.49,1208.07 1424.08,1210.74 1424.66,1213.16 1425.25,1214.22 1425.83,1213.78 1426.42,1213.76 1427.01,1211.18 1427.59,1210.93 1428.18,1209.29 1428.77,1209.56 1429.35,1213.71 1429.94,1214.66 1430.53,1215.8 1431.11,1216.59 1431.7,1213.68 1432.29,1210.88 1432.87,1209.65 1433.46,1208.56 1434.04,1204.67 1434.63,1206.33 1435.22,1206.52 1435.8,1206.63 1436.39,1205.32 1436.98,1205.78 1437.56,1207.43 1438.15,1210.26 1438.74,1211.94 1439.32,1210.52 1439.91,1209.34 1440.5,1207.96 1441.08,1213.35 1441.67,1213.15 1442.25,1210.05 1442.84,1211.48 1443.43,1212.82 1444.01,1212.48 1444.6,1210.96 1445.19,1212.29 1445.77,1213.48 1446.36,1214.58 1446.95,1212.96 1447.53,1212.93 1448.12,1212.65 1448.7,1213.92 1449.29,1215.1 1449.88,1213.38 1450.46,1211.58 1451.05,1207.62 1451.64,1207.86 1452.22,1207.86 1452.81,1210.61 1453.4,1208.1 1453.98,1209.44 1454.57,1212.35 1455.16,1212.4 1455.74,1213.75 1456.33,1210.81 1456.91,1207.92 1457.5,1206.73 1458.09,1207.04 1458.67,1205.74 1459.26,1206.05 1459.85,1203.76 1460.43,1204.29 1461.02,1207.14 1461.61,1206.03 1462.19,1202.24 1462.78,1202.58 1463.37,1202.93 1463.95,1204.77 1464.54,1204.87 1465.12,1205.11 1465.71,1204.3 1466.3,1203.14 1466.88,1204.95 1467.47,1205.12 1468.06,1205.54 1468.64,1205.52 1469.23,1206.96 1469.82,1204.69 1470.4,1206.56 1470.99,1206.76 1471.57,1211.16 1472.16,1210.9 1472.75,1212.07 1473.33,1210.74 1473.92,1210.57 1474.51,1213.22 1475.09,1210.24 1475.68,1208.84 1476.27,1207.48 1476.85,1210.39 1477.44,1214.34 1478.03,1213.81 1478.61,1212.49 1479.2,1211.04 1479.78,1209.87 1480.37,1210.21 1480.96,1209.9 1481.54,1208.9 1482.13,1209 1482.72,1207.69 1483.3,1209.33 1483.89,1206.88 1484.48,1204.33 1485.06,1207.3 1485.65,1208.94 1486.24,1204.81 1486.82,1203.74 1487.41,1204.4 1487.99,1204.81 1488.58,1203.74 1489.17,1208.11 1489.75,1209.6 1490.34,1209.73 1490.93,1212.39 1491.51,1210.89 1492.1,1212.33 1492.69,1212.34 1493.27,1209.65 1493.86,1207.98 1494.45,1208.07 1495.03,1207.95 1495.62,1206.66 1496.2,1206.73 1496.79,1203.95 1497.38,1204.03 1497.96,1206.93 1498.55,1206.88 1499.14,1207.09 1499.72,1207.19 1500.31,1207.57 1500.9,1207.93 1501.48,1209.06 1502.07,1209.13 1502.65,1210.76 1503.24,1211.2 1503.83,1210.78 1504.41,1212.21 1505,1212.12 1505.59,1214.47 1506.17,1214.45 1506.76,1214.02 1507.35,1214.97 1507.93,1214.64 1508.52,1213.2 1509.11,1212.89 1509.69,1212.89 1510.28,1211.64 1510.86,1214.31 1511.45,1215.47 1512.04,1215.45 1512.62,1212.36 1513.21,1209.71 1513.8,1208.43 1514.38,1210.82 1514.97,1211.8 1515.56,1213.06 1516.14,1216.96 1516.73,1216.65 1517.32,1219.01 1517.9,1214.66 1518.49,1215.54 1519.07,1217.83 1519.66,1217.24 1520.25,1219.71 1520.83,1221.6 1521.42,1218.65 1522.01,1219.56 1522.59,1218.78 1523.18,1216.79 1523.77,1216.54 1524.35,1216.34 1524.94,1217.29 1525.52,1218.02 1526.11,1218.75 1526.7,1218.42 1527.28,1221 1527.87,1221.91 1528.46,1220.08 1529.04,1219.43 1529.63,1215.98 1530.22,1215.48 1530.8,1212.23 1531.39,1212.4 1531.98,1213.95 1532.56,1216.11 1533.15,1212.92 1533.73,1212.77 1534.32,1211.28 1534.91,1211.51 1535.49,1214.09 1536.08,1212.42 1536.67,1215.09 1537.25,1213.39 1537.84,1213.26 1538.43,1209.1 1539.01,1207.88 1539.6,1208 1540.19,1205.46 1540.77,1203.04 1541.36,1203.3 1541.94,1203.78 1542.53,1203.83 1543.12,1204.15 1543.7,1205.67 1544.29,1203.19 1544.88,1205.21 1545.46,1205.29 1546.05,1205.52 1546.64,1204.07 1547.22,1202.92 1547.81,1203.23 1548.4,1206.18 1548.98,1203.58 1549.57,1205.49 1550.15,1204.18 1550.74,1204.47 1551.33,1204.83 1551.91,1204.99 1552.5,1206.55 1553.09,1208.03 1553.67,1208.17 1554.26,1209.66 1554.85,1209.7 1555.43,1208.36 1556.02,1207.15 1556.6,1207.46 1557.19,1208.63 1557.78,1208.75 1558.36,1210.19 1558.95,1210.2 1559.54,1211.48 1560.12,1212.77 1560.71,1216.9 1561.3,1215.13 1561.88,1217.55 1562.47,1215.97 1563.06,1215.97 1563.64,1215.8 1564.23,1215.44 1564.81,1215 1565.4,1209.56 1565.99,1210.78 1566.57,1212.04 1567.16,1211.72 1567.75,1210.17 1568.33,1208.79 1568.92,1210.09 1569.51,1209.75 1570.09,1207.24 1570.68,1207.6 1571.27,1207.87 1571.85,1206.61 1572.44,1206.83 1573.02,1207.2 1573.61,1208.79 1574.2,1211.6 1574.78,1210.02 1575.37,1210.11 1575.96,1213.89 1576.54,1212.56 1577.13,1212.48 1577.72,1211.23 1578.3,1211.02 1578.89,1213.36 1579.47,1213.52 1580.06,1213.42 1580.65,1210.71 1581.23,1212.07 1581.82,1213.26 1582.41,1210.49 1582.99,1210.31 1583.58,1208.59 1584.17,1211.31 1584.75,1208.77 1585.34,1208.72 1585.93,1208.57 1586.51,1208.58 1587.1,1207.27 1587.68,1206 1588.27,1204.98 1588.86,1206.46 1589.44,1207.92 1590.03,1206.73 1590.62,1205.7 1591.2,1208.72 1591.79,1207.47 1592.38,1208.9 1592.96,1208.81 1593.55,1207.71 1594.14,1208.09 1594.72,1208.15 1595.31,1208.01 1595.89,1206.55 1596.48,1205.62 1597.07,1204.79 1597.65,1207.98 1598.24,1206.7 1598.83,1206.73 1599.41,1202.9 1600,1204.76 1600.59,1206.06 1601.17,1207.31 1601.76,1206.1 1602.34,1210.39 1602.93,1210.53 1603.52,1209.21 1604.1,1213.18 1604.69,1215.74 1605.28,1214.16 1605.86,1211.23 1606.45,1211.1 1607.04,1211.41 1607.62,1212.69 1608.21,1211.3 1608.8,1210.88 1609.38,1211.99 1609.97,1210.57 1610.55,1211.66 1611.14,1210.3 1611.73,1210.41 1612.31,1211.86 1612.9,1212.69 1613.49,1210.07 1614.07,1209.99 1614.66,1211.45 1615.25,1211.28 1615.83,1209.73 1616.42,1209.79 1617.01,1208.38 1617.59,1209.86 1618.18,1207.1 1618.76,1207.57 1619.35,1207.56 1619.94,1207.95 1620.52,1210.6 1621.11,1207.95 1621.7,1206.99 1622.28,1205.45 1622.87,1205.83 1623.46,1204.53 1624.04,1204.83 1624.63,1206.31 1625.22,1206.27 1625.8,1206.35 1626.39,1206.52 1626.97,1205.52 1627.56,1207.11 1628.15,1208.39 1628.73,1209.46 1629.32,1211.12 1629.91,1209.65 1630.49,1209.81 1631.08,1209.75 1631.67,1208.52 1632.25,1210.11 1632.84,1210.13 1633.42,1209.89 1634.01,1208.64 1634.6,1208.63 1635.18,1209.88 1635.77,1208.24 1636.36,1211.17 1636.94,1211.18 1637.53,1208.34 1638.12,1209.74 1638.7,1209.78 1639.29,1210.97 1639.88,1212.21 1640.46,1212.22 1641.05,1213.26 1641.63,1211.47 1642.22,1212.57 1642.81,1212.31 1643.39,1213.51 1643.98,1210.69 1644.57,1210.53 1645.15,1210.15 1645.74,1210.59 1646.33,1209.18 1646.91,1208.95 1647.5,1207.69 1648.09,1205.44 1648.67,1203.21 1649.26,1204.9 1649.84,1205.16 1650.43,1206.82 1651.02,1208.33 1651.6,1205.78 1652.19,1205.97 1652.78,1204.89 1653.36,1206.35 1653.95,1209.2 1654.54,1209.56 1655.12,1210.93 1655.71,1212.25 1656.29,1212.14 1656.88,1210.7 1657.47,1211.93 1658.05,1209.3 1658.64,1206.85 1659.23,1204.49 1659.81,1204.75 1660.4,1204.84 1660.99,1205.17 1661.57,1204.06 1662.16,1204.4 1662.75,1203.39 1663.33,1206.13 1663.92,1207.46 1664.5,1210.27 1665.09,1208.77 1665.68,1204.81 1666.26,1203.94 1666.85,1204.28 1667.44,1204.4 1668.02,1208.49 1668.61,1205.91 1669.2,1207.32 1669.78,1208.6 1670.37,1207 1670.96,1209.86 1671.54,1207.46 1672.13,1206.43 1672.71,1203.85 1673.3,1206.93 1673.89,1205.72 1674.47,1205.96 1675.06,1210.2 1675.65,1210.14 1676.23,1208.67 1676.82,1212.52 1677.41,1212.28 1677.99,1214.78 1678.58,1213.52 1679.17,1211.76 1679.75,1210.05 1680.34,1210.08 1680.92,1208.83 1681.51,1209 1682.1,1211.4 1682.68,1213.04 1683.27,1214.14 1683.86,1213.7 1684.44,1214.77 1685.03,1214.41 1685.62,1211.67 1686.2,1211.19 1686.79,1208.34 1687.37,1208.28 1687.96,1205.59 1688.55,1203.09 1689.13,1202.34 1689.72,1198.82 1690.31,1196.71 1690.89,1197.32 1691.48,1196.67 1692.07,1197.13 1692.65,1197.68 1693.24,1199.68 1693.83,1198.91 1694.41,1199.1 1695,1201.11 1695.58,1202.95 1696.17,1200.28 1696.76,1200.81 1697.34,1201.13 1697.93,1200.3 1698.52,1200.81 1699.1,1201.11 1699.69,1200.28 1700.28,1199.73 1700.86,1200.46 1701.45,1198.23 1702.04,1198.82 1702.62,1198.19 1703.21,1197.62 1703.79,1198.32 1704.38,1200.55 1704.97,1202.2 1705.55,1202.53 1706.14,1202.98 1706.73,1204.56 1707.31,1205.03 1707.9,1206.48 1708.49,1209.58 1709.07,1213.65 1709.66,1214.75 1710.24,1214.55 1710.83,1215.7 1711.42,1216.85 1712,1216.68 1712.59,1213.58 1713.18,1212.09 1713.76,1211.77 1714.35,1214.51 1714.94,1214.36 1715.52,1215.41 1716.11,1213.63 1716.7,1210.53 1717.28,1212.07 1717.87,1212.03 1718.45,1210.99 1719.04,1208.07 1719.63,1208.55 1720.21,1207.48 1720.8,1209.38 1721.39,1211.99 1721.97,1209.71 1722.56,1208.46 1723.15,1208.54 1723.73,1210 1724.32,1208.46 1724.91,1208.46 1725.49,1208.31 1726.08,1211.02 1726.66,1210.85 1727.25,1210.94 1727.84,1209.86 1728.42,1208.71 1729.01,1210.13 1729.6,1210.14 1730.18,1211.22 1730.77,1211.21 1731.36,1211.11 1731.94,1212.38 1732.53,1213.54 1733.11,1213.44 1733.7,1214.65 1734.29,1212.76 1734.87,1211.51 1735.46,1210.09 1736.05,1208.9 1736.63,1206.02 1737.22,1206.31 1737.81,1203.86 1738.39,1202.92 1738.98,1203.32 1739.57,1204.94 1740.15,1207.84 1740.74,1208.29 1741.32,1208.49 1741.91,1203.15 1742.5,1205.95 1743.08,1206.1 1743.67,1205.99 1744.26,1203.77 1744.84,1205.22 1745.43,1205.29 1746.02,1207.87 1746.6,1207.94 1747.19,1210.52 1747.78,1211.68 1748.36,1210.29 1748.95,1211.58 1749.53,1212.99 1750.12,1212.97 1750.71,1210.13 1751.29,1211.38 1751.88,1212.5 1752.47,1212.24 1753.05,1211.83 1753.64,1213.3 1754.23,1211.99 1754.81,1213.44 1755.4,1210.67 1755.99,1210.65 1756.57,1215.8 1757.16,1216.84 1757.74,1217.58 1758.33,1217.11 1758.92,1216.6 1759.5,1217.46 1760.09,1215.82 1760.68,1215.42 1761.26,1217.74 1761.85,1214.8 1762.44,1211.97 1763.02,1210.5 1763.61,1211.89 1764.19,1209.02 1764.78,1211.68 1765.37,1213.98 1765.95,1213.71 1766.54,1213.21 1767.13,1212.65 1767.71,1214.77 1768.3,1218.38 1768.89,1217.66 1769.47,1219.86 1770.06,1220.29 1770.65,1219.68 1771.23,1219.26 1771.82,1218.77 1772.4,1218.17 1772.99,1219.02 1773.58,1218.44 1774.16,1218.17 1774.75,1217.73 1775.34,1216.09 1775.92,1215.63 1776.51,1215.3 1777.1,1214.92 1777.68,1213.2 1778.27,1214.18 1778.86,1216.42 1779.44,1216.02 1780.03,1215.4 1780.61,1212.3 1781.2,1213.7 1781.79,1214.5 1782.37,1215.35 1782.96,1216.59 1783.55,1216.41 1784.13,1216.24 1784.72,1215.7 1785.31,1216.6 1785.89,1214.71 1786.48,1213.42 1787.06,1211.86 1787.65,1211.63 1788.24,1211.46 1788.82,1212.53 1789.41,1213.74 1790,1213.33 1790.58,1214.54 1791.17,1212.96 1791.76,1215.15 1792.34,1213.47 1792.93,1213.28 1793.52,1213.05 1794.1,1211.64 1794.69,1212.86 1795.27,1212.64 1795.86,1210.93 1796.45,1210.65 1797.03,1209.02 1797.62,1207.5 1798.21,1207.4 1798.79,1208.94 1799.38,1207.52 1799.97,1210.11 1800.55,1212.54 1801.14,1209.63 1801.73,1208.16 1802.31,1204.11 1802.9,1206.71 1803.48,1208.12 1804.07,1208.31 1804.66,1208.44 1805.24,1209.94 1805.83,1211.29 1806.42,1213.78 1807,1214.73 1807.59,1213.19 1808.18,1209.12 1808.76,1207.76 1809.35,1205.18 1809.94,1202.72 1810.52,1205.9 1811.11,1207.59 1811.69,1208.98 1812.28,1208.09 1812.87,1205.53 1813.45,1207.07 1814.04,1205.84 1814.63,1204.73 1815.21,1203.67 1815.8,1203.86 1816.39,1201.65 1816.97,1198.13 1817.56,1197.44 1818.14,1196.58 1818.73,1197.15 1819.32,1198.03 1819.9,1198.8 1820.49,1199.54 1821.08,1198.76 1821.66,1198.2 1822.25,1198.91 1822.84,1200.72 1823.42,1202.42 1824.01,1204.19 1824.6,1201.99 1825.18,1200.8 1825.77,1197.46 1826.35,1198.12 1826.94,1200.31 1827.53,1199.44 1828.11,1201.58 1828.7,1202.23 1829.29,1204.07 1829.87,1201.74 1830.46,1202.23 1831.05,1202.5 1831.63,1201.65 1832.22,1203.46 1832.81,1206.43 1833.39,1207.84 1833.98,1207.05 1834.56,1208.56 1835.15,1208.63 1835.74,1208.68 1836.32,1209.89 1836.91,1211.32 1837.5,1210.11 1838.08,1209.9 1838.67,1208.59 1839.26,1207.25 1839.84,1210.08 1840.43,1210.09 1841.01,1209.99 1841.6,1211.5 1842.19,1212.97 1842.77,1211.47 1843.36,1214.06 1843.95,1213.93 1844.53,1215.12 1845.12,1213.89 1845.71,1213.83 1846.29,1212.54 1846.88,1211.39 1847.47,1211.51 1848.05,1210.12 1848.64,1207.45 1849.22,1205.81 1849.81,1207.31 1850.4,1208.8 1850.98,1209.24 1851.57,1210.56 1852.16,1209.41 1852.74,1210.72 1853.33,1210.6 1853.92,1210.32 1854.5,1210.19 1855.09,1214.18 1855.68,1215.2 1856.26,1212.44 1856.85,1214.91 1857.43,1214.56 1858.02,1214.14 1858.61,1214.1 1859.19,1216.14 1859.78,1214.44 1860.37,1216.85 1860.95,1215.19 1861.54,1212.02 1862.13,1206.48 1862.71,1206.75 1863.3,1205.64 1863.88,1205.83 1864.47,1205.94 1865.06,1203.5 1865.64,1202.54 1866.23,1203.01 1866.82,1202.07 1867.4,1199.77 1867.99,1203.28 1868.58,1206.17 1869.16,1204.76 1869.75,1208.78 1870.34,1208.67 1870.92,1211.62 1871.51,1212.88 1872.09,1213.9 1872.68,1212.34 1873.27,1212.17 1873.85,1211.84 1874.44,1208.81 1875.03,1210.21 1875.61,1211.48 1876.2,1215.27 1876.79,1212.14 1877.37,1212.18 1877.96,1212.18 1878.55,1213.45 1879.13,1213.24 1879.72,1212.92 1880.3,1211.42 1880.89,1212.8 1881.48,1212.78 1882.06,1212.62 1882.65,1215.05 1883.24,1216.1 1883.82,1215.88 1884.41,1215.52 1885,1214 1885.58,1214.94 1886.17,1214.52 1886.76,1211.51 1887.34,1210.24 1887.93,1207.81 1888.51,1210.25 1889.1,1210.35 1889.69,1211.56 1890.27,1210.09 1890.86,1211.18 1891.45,1207.42 1892.03,1206.57 1892.62,1209.52 1893.21,1208.02 1893.79,1211.81 1894.38,1210.04 1894.96,1209.85 1895.55,1211.15 1896.14,1211.41 1896.72,1211.58 1897.31,1212.57 1897.9,1215.12 1898.48,1213.4 1899.07,1213.29 1899.66,1213.23 1900.24,1215.42 1900.83,1215.25 1901.42,1213.66 1902,1212.01 1902.59,1211.92 1903.17,1211.58 1903.76,1212.79 1904.35,1212.7 1904.93,1212.62 1905.52,1209.73 1906.11,1209.91 1906.69,1209.75 1907.28,1208.22 1907.87,1210.74 1908.45,1211.91 1909.04,1210.63 1909.63,1206.47 1910.21,1209.51 1910.8,1210.66 1911.38,1210.8 1911.97,1208.02 1912.56,1206.72 1913.14,1208.22 1913.73,1208.17 1914.32,1208.07 1914.9,1209.35 1915.49,1208.08 1916.08,1204.03 1916.66,1202.97 1917.25,1203.22 1917.83,1200.86 1918.42,1204.08 1919.01,1203.92 1919.59,1202.77 1920.18,1203.09 1920.77,1205.94 1921.35,1205.91 1921.94,1208.86 1922.53,1208.9 1923.11,1208.84 1923.7,1208.72 1924.29,1207.42 1924.87,1210.09 1925.46,1207.26 1926.04,1208.69 1926.63,1209.14 1927.22,1210.54 1927.8,1211.88 1928.39,1210.1 1928.98,1210.08 1929.56,1210.05 1930.15,1206.35 1930.74,1204.99 1931.32,1206.59 1931.91,1206.63 1932.5,1205.5 1933.08,1207.11 1933.67,1208.63 1934.25,1210.4 1934.84,1208.63 1935.43,1208.63 1936.01,1205.86 1936.6,1207.47 1937.19,1206.41 1937.77,1206.94 1938.36,1210.82 1938.95,1209.53 1939.53,1207.95 1940.12,1209.57 1940.71,1212.19 1941.29,1210.72 1941.88,1214.69 1942.46,1213.06 1943.05,1212.96 1943.64,1210.17 1944.22,1210.38 1944.81,1211.62 1945.4,1211.38 1945.98,1207.34 1946.57,1208.61 1947.16,1207.69 1947.74,1205.23 1948.33,1204.17 1948.91,1204.71 1949.5,1205.02 1950.09,1210.47 1950.67,1207.85 1951.26,1210.63 1951.85,1210.73 1952.43,1214.53 1953.02,1216.68 1953.61,1216.42 1954.19,1216.05 1954.78,1217.03 1955.37,1213.75 1955.95,1214.89 1956.54,1214.92 1957.12,1212.03 1957.71,1210.57 1958.3,1211.98 1958.88,1211.95 1959.47,1211.59 1960.06,1210.03 1960.64,1208.46 1961.23,1208.33 1961.82,1209.8 1962.4,1208.4 1962.99,1209.29 1963.58,1209.23 1964.16,1210.76 1964.75,1213.23 1965.33,1212.89 1965.92,1211.18 1966.51,1207.29 1967.09,1210.17 1967.68,1210.53 1968.27,1210.53 1968.85,1206.71 1969.44,1205.74 1970.03,1205.96 1970.61,1206.23 1971.2,1203.89 1971.78,1204.11 1972.37,1203.24 1972.96,1205.01 1973.54,1206.38 1974.13,1209.42 1974.72,1208.06 1975.3,1208.2 1975.89,1210.8 1976.48,1212.21 1977.06,1209.49 1977.65,1206.97 1978.24,1208.43 1978.82,1208.58 1979.41,1208.64 1979.99,1208.56 1980.58,1210.19 1981.17,1208.67 1981.75,1209.02 1982.34,1206.52 1982.93,1206.74 1983.51,1205.47 1984.1,1205.64 1984.69,1205.82 1985.27,1211.29 1985.86,1211.22 1986.45,1211.15 1987.03,1212.32 1987.62,1214.65 1988.2,1214.44 1988.79,1212.83 1989.38,1212.43 1989.96,1209.61 1990.55,1208.19 1991.14,1207.16 1991.72,1207.19 1992.31,1208.45 1992.9,1208.39 1993.48,1211.05 1994.07,1209.56 1994.65,1208.24 1995.24,1208.3 1995.83,1211.03 1996.41,1210.71 1997,1212.14 1997.59,1212.06 1998.17,1214.43 1998.76,1213.05 1999.35,1210.35 1999.93,1208.91 2000.52,1211.55 2001.11,1213.13 2001.69,1214.26 2002.28,1212.7 2002.86,1215.26 2003.45,1218.05 2004.04,1217.62 2004.62,1220.06 2005.21,1219.65 2005.8,1220.56 2006.38,1218.72 2006.97,1216.88 2007.56,1215.37 2008.14,1215.05 2008.73,1213.47 2009.32,1211.81 2009.9,1211.59 2010.49,1211.19 2011.07,1213.66 2011.66,1213.37 2012.25,1212 2012.83,1211.8 2013.42,1209.13 2014.01,1207.72 2014.59,1205.33 2015.18,1205.56 2015.77,1204.19 2016.35,1204.28 2016.94,1203.14 2017.53,1199.58 2018.11,1197.8 2018.7,1197.18 2019.28,1199.43 2019.87,1201.15 2020.46,1200.19 2021.04,1201.6 2021.63,1203.55 2022.22,1206.52 2022.8,1209.46 2023.39,1209.57 2023.98,1209.51 2024.56,1209.49 2025.15,1209.53 2025.73,1211.09 2026.32,1209.41 2026.91,1208.06 2027.49,1209.47 2028.08,1208.2 2028.67,1209.39 2029.25,1210.84 2029.84,1214.66 2030.43,1210.59 2031.01,1208.16 2031.6,1209.41 2032.19,1209.43 2032.77,1210.76 2033.36,1209.53 2033.94,1212.43 2034.53,1212.19 2035.12,1214.58 2035.7,1215.63 2036.29,1211.45 2036.88,1210.19 2037.46,1212.94 2038.05,1211.47 2038.64,1210.17 2039.22,1212.89 2039.81,1210.06 2040.4,1211.35 2040.98,1210.14 2041.57,1208.68 2042.15,1208.76 2042.74,1208.86 2043.33,1210.4 2043.91,1210.61 2044.5,1211.83 2045.09,1211.73 2045.67,1210.26 2046.26,1210.14 2046.85,1207.42 2047.43,1204.81 2048.02,1204.94 2048.6,1205.02 2049.19,1206.78 2049.78,1205.49 2050.36,1207.31 2050.95,1207.43 2051.54,1207.62 2052.12,1207.69 2052.71,1210.57 2053.3,1210.53 2053.88,1209.34 2054.47,1212.19 2055.06,1212.05 2055.64,1211.95 2056.23,1213 2056.81,1218.25 2057.4,1217.72 2057.99,1218.48 2058.57,1223.29 2059.16,1221.23 2059.75,1222.07 2060.33,1218.98 2060.92,1218.36 2061.51,1217.89 2062.09,1218.8 2062.68,1220.87 2063.27,1217.5 2063.85,1215.67 2064.44,1213.91 2065.02,1213.93 2065.61,1213.97 2066.2,1212.67 2066.78,1215.27 2067.37,1214.94 2067.96,1213.52 2068.54,1212.16 2069.13,1216.31 2069.72,1213.57 2070.3,1213.02 2070.89,1212.99 2071.48,1212.96 2072.06,1211.62 2072.65,1211.62 2073.23,1207.42 2073.82,1208.78 2074.41,1207.46 2074.99,1207.44 2075.58,1202.16 2076.17,1202.68 2076.75,1202.95 2077.34,1205.75 2077.93,1204.66 2078.51,1203.69 2079.1,1203.99 2079.68,1204.32 2080.27,1204.39 2080.86,1206.22 2081.44,1206.3 2082.03,1209.31 2082.62,1210.6 2083.2,1212.01 2083.79,1208.91 2084.38,1210.3 2084.96,1208.98 2085.55,1212.94 2086.14,1211.28 2086.72,1211.15 2087.31,1212.1 2087.89,1211.9 2088.48,1211.44 2089.07,1210.13 2089.65,1211.32 2090.24,1211.29 2090.83,1209.58 2091.41,1211.07 2092,1214.87 2092.59,1213.11 2093.17,1219.68 2093.76,1219.16 2094.35,1218.71 2094.93,1215.67 2095.52,1215.35 2096.1,1216.24 2096.69,1217.14 2097.28,1215.27 2097.86,1212.02 2098.45,1213.4 2099.04,1214.3 2099.62,1211.35 2100.21,1210.24 2100.8,1210.32 2101.38,1212.89 2101.97,1212.61 2102.55,1212.65 2103.14,1215.35 2103.73,1210.89 2104.31,1210.8 2104.9,1210.6 2105.49,1208.16 2106.07,1206.65 2106.66,1206.87 2107.25,1206.98 2107.83,1207.02 2108.42,1207.04 2109.01,1207.09 2109.59,1207.2 2110.18,1205.96 2110.76,1207.49 2111.35,1210.1 2111.94,1212.66 2112.52,1211.19 2113.11,1209.42 2113.7,1211.91 2114.28,1208.05 2114.87,1206.65 2115.46,1206.58 2116.04,1201.39 2116.63,1198.02 2117.22,1196.03 2117.8,1196.75 2118.39,1198.73 2118.97,1199.51 2119.56,1197.43 2120.15,1193.97 2120.73,1197.5 2121.32,1196.91 2121.91,1197.58 2122.49,1200.72 2123.08,1201.08 2123.67,1203.15 2124.25,1204.72 2124.84,1206.32 2125.42,1209.08 2126.01,1207.56 2126.6,1204.76 2127.18,1207.74 2127.77,1209.05 2128.36,1210.33 2128.94,1209.07 2129.53,1210.52 2130.12,1210.51 2130.7,1210.71 2131.29,1212.07 2131.88,1210.76 2132.46,1212.02 2133.05,1212 2133.63,1213.43 2134.22,1214.66 2134.81,1212.07 2135.39,1213 2135.98,1214.63 2136.57,1214.02 2137.15,1215.08 2137.74,1215.82 2138.33,1215.41 2138.91,1214.97 2139.5,1214.45 2140.09,1214.2 2140.67,1214.03 2141.26,1215.07 2141.84,1217.21 2142.43,1215.44 2143.02,1217.93 2143.6,1217.27 2144.19,1213.07 2144.78,1213.12 2145.36,1211.8 2145.95,1214.35 2146.54,1212.82 2147.12,1214.08 2147.71,1216.41 2148.3,1211.94 2148.88,1211.73 2149.47,1211.76 2150.05,1212.84 2150.64,1212.82 2151.23,1213.1 2151.81,1213.06 2152.4,1214.07 2152.99,1213.8 2153.57,1213.53 2154.16,1211.76 2154.75,1215.45 2155.33,1215.17 2155.92,1215 2156.5,1216.27 2157.09,1221.27 2157.68,1219.49 2158.26,1216.37 \"/>\n<path clip-path=\"url(#clip442)\" d=\"M986.025 1210.33 L986.612 1210.33 L987.198 1210.33 L987.785 1210.33 L988.371 1210.33 L988.957 1210.33 L989.544 1210.33 L990.13 1210.33 L990.717 1210.33 L991.303 1210.33 L991.889 1210.33 L992.476 1210.33 L993.062 1210.33 L993.649 1210.33 L994.235 1210.33 L994.822 1210.33 L995.408 1210.33 L995.994 1210.33 L996.581 1210.33 L997.167 1210.33 L997.754 1210.33 L998.34 1210.33 L998.926 1210.33 L999.513 1210.33 L1000.1 1210.33 L1000.69 1210.33 L1001.27 1210.33 L1001.86 1210.33 L1002.44 1210.33 L1003.03 1210.33 L1003.62 1210.33 L1004.2 1210.33 L1004.79 1210.33 L1005.38 1210.33 L1005.96 1210.33 L1006.55 1210.33 L1007.14 1210.33 L1007.72 1210.33 L1008.31 1210.33 L1008.9 1210.33 L1009.48 1210.33 L1010.07 1210.33 L1010.65 1210.33 L1011.24 1210.33 L1011.83 1210.33 L1012.41 1210.33 L1013 1210.33 L1013.59 1210.33 L1014.17 1210.33 L1014.76 1210.33 L1015.35 1210.33 L1015.93 1210.33 L1016.52 1210.33 L1017.11 1210.33 L1017.69 1210.33 L1018.28 1210.33 L1018.86 1210.33 L1019.45 1210.33 L1020.04 1210.33 L1020.62 1210.33 L1021.21 1210.33 L1021.8 1210.33 L1022.38 1210.33 L1022.97 1210.33 L1023.56 1210.33 L1024.14 1210.33 L1024.73 1210.33 L1025.32 1210.33 L1025.9 1210.33 L1026.49 1210.33 L1027.07 1210.33 L1027.66 1210.33 L1028.25 1210.33 L1028.83 1210.33 L1029.42 1210.33 L1030.01 1210.33 L1030.59 1210.33 L1031.18 1210.33 L1031.77 1210.33 L1032.35 1210.33 L1032.94 1210.33 L1033.52 1210.33 L1034.11 1210.33 L1034.7 1210.33 L1035.28 1210.33 L1035.87 1210.33 L1036.46 1210.33 L1037.04 1210.33 L1037.63 1210.33 L1038.22 1210.33 L1038.8 1210.33 L1039.39 1210.33 L1039.98 1210.33 L1040.56 1210.33 L1041.15 1210.33 L1041.73 1210.33 L1042.32 1210.33 L1042.91 1210.33 L1043.49 1210.33 L1044.08 1210.33 L1044.67 1210.33 L1045.25 1210.33 L1045.84 1210.33 L1046.43 1210.33 L1047.01 1210.33 L1047.6 1210.33 L1048.19 1210.33 L1048.77 1210.33 L1049.36 1210.33 L1049.94 1210.33 L1050.53 1210.33 L1051.12 1210.33 L1051.7 1210.33 L1052.29 1210.33 L1052.88 1210.33 L1053.46 1210.33 L1054.05 1210.33 L1054.64 1210.33 L1055.22 1210.33 L1055.81 1210.33 L1056.39 1210.33 L1056.98 1210.33 L1057.57 1210.33 L1058.15 1210.33 L1058.74 1210.33 L1059.33 1210.33 L1059.91 1210.33 L1060.5 1210.33 L1061.09 1210.33 L1061.67 1210.33 L1062.26 1210.33 L1062.85 1210.33 L1063.43 1210.33 L1064.02 1210.33 L1064.6 1210.33 L1065.19 1210.33 L1065.78 1210.33 L1066.36 1210.33 L1066.95 1210.33 L1067.54 1210.33 L1068.12 1210.33 L1068.71 1210.33 L1069.3 1210.33 L1069.88 1210.33 L1070.47 1210.33 L1071.06 1210.33 L1071.64 1210.33 L1072.23 1210.33 L1072.81 1210.33 L1073.4 1210.33 L1073.99 1210.33 L1074.57 1210.33 L1075.16 1210.33 L1075.75 1210.33 L1076.33 1210.33 L1076.92 1210.33 L1077.51 1210.33 L1078.09 1210.33 L1078.68 1210.33 L1079.26 1210.33 L1079.85 1210.33 L1080.44 1210.33 L1081.02 1210.33 L1081.61 1210.33 L1082.2 1210.33 L1082.78 1210.33 L1083.37 1210.33 L1083.96 1210.33 L1084.54 1210.33 L1085.13 1210.33 L1085.72 1210.33 L1086.3 1210.33 L1086.89 1210.33 L1087.47 1210.33 L1088.06 1210.33 L1088.65 1210.33 L1089.23 1210.33 L1089.82 1210.33 L1090.41 1210.33 L1090.99 1210.33 L1091.58 1210.33 L1092.17 1210.33 L1092.75 1210.33 L1093.34 1210.33 L1093.93 1210.33 L1094.51 1210.33 L1095.1 1210.33 L1095.68 1210.33 L1096.27 1210.33 L1096.86 1210.33 L1097.44 1210.33 L1098.03 1210.33 L1098.62 1210.33 L1099.2 1210.33 L1099.79 1210.33 L1100.38 1210.33 L1100.96 1210.33 L1101.55 1210.33 L1102.14 1210.33 L1102.72 1210.33 L1103.31 1210.33 L1103.89 1210.33 L1104.48 1210.33 L1105.07 1210.33 L1105.65 1210.33 L1106.24 1210.33 L1106.83 1210.33 L1107.41 1210.33 L1108 1210.33 L1108.59 1210.33 L1109.17 1210.33 L1109.76 1210.33 L1110.34 1210.33 L1110.93 1210.33 L1111.52 1210.33 L1112.1 1210.33 L1112.69 1210.33 L1113.28 1210.33 L1113.86 1210.33 L1114.45 1210.33 L1115.04 1210.33 L1115.62 1210.33 L1116.21 1210.33 L1116.8 1210.33 L1117.38 1210.33 L1117.97 1210.33 L1118.55 1210.33 L1119.14 1210.33 L1119.73 1210.33 L1120.31 1210.33 L1120.9 1210.33 L1121.49 1210.33 L1122.07 1210.33 L1122.66 1210.33 L1123.25 1210.33 L1123.83 1210.33 L1124.42 1210.33 L1125.01 1210.33 L1125.59 1210.33 L1126.18 1210.33 L1126.76 1210.33 L1127.35 1210.33 L1127.94 1210.33 L1128.52 1210.33 L1129.11 1210.33 L1129.7 1210.33 L1130.28 1210.33 L1130.87 1210.33 L1131.46 1210.33 L1132.04 1210.33 L1132.63 1210.33 L1133.21 1210.33 L1133.8 1210.33 L1134.39 1210.33 L1134.97 1210.33 L1135.56 1210.33 L1136.15 1210.33 L1136.73 1210.33 L1137.32 1210.33 L1137.91 1210.33 L1138.49 1210.33 L1139.08 1210.33 L1139.67 1210.33 L1140.25 1210.33 L1140.84 1210.33 L1141.42 1210.33 L1142.01 1210.33 L1142.6 1210.33 L1143.18 1210.33 L1143.77 1210.33 L1144.36 1210.33 L1144.94 1210.33 L1145.53 1210.33 L1146.12 1210.33 L1146.7 1210.33 L1147.29 1210.33 L1147.88 1210.33 L1148.46 1210.33 L1149.05 1210.33 L1149.63 1210.33 L1150.22 1210.33 L1150.81 1210.33 L1151.39 1210.33 L1151.98 1210.33 L1152.57 1210.33 L1153.15 1210.33 L1153.74 1210.33 L1154.33 1210.33 L1154.91 1210.33 L1155.5 1210.33 L1156.09 1210.33 L1156.67 1210.33 L1157.26 1210.33 L1157.84 1210.33 L1158.43 1210.33 L1159.02 1210.33 L1159.6 1210.33 L1160.19 1210.33 L1160.78 1210.33 L1161.36 1210.33 L1161.95 1210.33 L1162.54 1210.33 L1163.12 1210.33 L1163.71 1210.33 L1164.29 1210.33 L1164.88 1210.33 L1165.47 1210.33 L1166.05 1210.33 L1166.64 1210.33 L1167.23 1210.33 L1167.81 1210.33 L1168.4 1210.33 L1168.99 1210.33 L1169.57 1210.33 L1170.16 1210.33 L1170.75 1210.33 L1171.33 1210.33 L1171.92 1210.33 L1172.5 1210.33 L1173.09 1210.33 L1173.68 1210.33 L1174.26 1210.33 L1174.85 1210.33 L1175.44 1210.33 L1176.02 1210.33 L1176.61 1210.33 L1177.2 1210.33 L1177.78 1210.33 L1178.37 1210.33 L1178.96 1210.33 L1179.54 1210.33 L1180.13 1210.33 L1180.71 1210.33 L1181.3 1210.33 L1181.89 1210.33 L1182.47 1210.33 L1183.06 1210.33 L1183.65 1210.33 L1184.23 1210.33 L1184.82 1210.33 L1185.41 1210.33 L1185.99 1210.33 L1186.58 1210.33 L1187.16 1210.33 L1187.75 1210.33 L1188.34 1210.33 L1188.92 1210.33 L1189.51 1210.33 L1190.1 1210.33 L1190.68 1210.33 L1191.27 1210.33 L1191.86 1210.33 L1192.44 1210.33 L1193.03 1210.33 L1193.62 1210.33 L1194.2 1210.33 L1194.79 1210.33 L1195.37 1210.33 L1195.96 1210.33 L1196.55 1210.33 L1197.13 1210.33 L1197.72 1210.33 L1198.31 1210.33 L1198.89 1210.33 L1199.48 1210.33 L1200.07 1210.33 L1200.65 1210.33 L1201.24 1210.33 L1201.83 1210.33 L1202.41 1210.33 L1203 1210.33 L1203.58 1210.33 L1204.17 1210.33 L1204.76 1210.33 L1205.34 1210.33 L1205.93 1210.33 L1206.52 1210.33 L1207.1 1210.33 L1207.69 1210.33 L1208.28 1210.33 L1208.86 1210.33 L1209.45 1210.33 L1210.03 1210.33 L1210.62 1210.33 L1211.21 1210.33 L1211.79 1210.33 L1212.38 1210.33 L1212.97 1210.33 L1213.55 1210.33 L1214.14 1210.33 L1214.73 1210.33 L1215.31 1210.33 L1215.9 1210.33 L1216.49 1210.33 L1217.07 1210.33 L1217.66 1210.33 L1218.24 1210.33 L1218.83 1210.33 L1219.42 1210.33 L1220 1210.33 L1220.59 1210.33 L1221.18 1210.33 L1221.76 1210.33 L1222.35 1210.33 L1222.94 1210.33 L1223.52 1210.33 L1224.11 1210.33 L1224.7 1210.33 L1225.28 1210.33 L1225.87 1210.33 L1226.45 1210.33 L1227.04 1210.33 L1227.63 1210.33 L1228.21 1210.33 L1228.8 1210.33 L1229.39 1210.33 L1229.97 1210.33 L1230.56 1210.33 L1231.15 1210.33 L1231.73 1210.33 L1232.32 1210.33 L1232.91 1210.33 L1233.49 1210.33 L1234.08 1210.33 L1234.66 1210.33 L1235.25 1210.33 L1235.84 1210.33 L1236.42 1210.33 L1237.01 1210.33 L1237.6 1210.33 L1238.18 1210.33 L1238.77 1210.33 L1239.36 1210.33 L1239.94 1210.33 L1240.53 1210.33 L1241.11 1210.33 L1241.7 1210.33 L1242.29 1210.33 L1242.87 1210.33 L1243.46 1210.33 L1244.05 1210.33 L1244.63 1210.33 L1245.22 1210.33 L1245.81 1210.33 L1246.39 1210.33 L1246.98 1210.33 L1247.57 1210.33 L1248.15 1210.33 L1248.74 1210.33 L1249.32 1210.33 L1249.91 1210.33 L1250.5 1210.33 L1251.08 1210.33 L1251.67 1210.33 L1252.26 1210.33 L1252.84 1210.33 L1253.43 1210.33 L1254.02 1210.33 L1254.6 1210.33 L1255.19 1210.33 L1255.78 1210.33 L1256.36 1210.33 L1256.95 1210.33 L1257.53 1210.33 L1258.12 1210.33 L1258.71 1210.33 L1259.29 1210.33 L1259.88 1210.33 L1260.47 1210.33 L1261.05 1210.33 L1261.64 1210.33 L1262.23 1210.33 L1262.81 1210.33 L1263.4 1210.33 L1263.98 1210.33 L1264.57 1210.33 L1265.16 1210.33 L1265.74 1210.33 L1266.33 1210.33 L1266.92 1210.33 L1267.5 1210.33 L1268.09 1210.33 L1268.68 1210.33 L1269.26 1210.33 L1269.85 1210.33 L1270.44 1210.33 L1271.02 1210.33 L1271.61 1210.33 L1272.19 1210.33 L1272.78 1210.33 L1273.37 1210.33 L1273.95 1210.33 L1274.54 1210.33 L1275.13 1210.33 L1275.71 1210.33 L1276.3 1210.33 L1276.89 1210.33 L1277.47 1210.33 L1278.06 1210.33 L1278.65 1210.33 L1279.23 1210.33 L1279.82 1210.33 L1280.4 1210.33 L1280.99 1210.33 L1281.58 1210.33 L1282.16 1210.33 L1282.75 1210.33 L1283.34 1210.33 L1283.92 1210.33 L1284.51 1210.33 L1285.1 1210.33 L1285.68 1210.33 L1286.27 1210.33 L1286.86 1210.33 L1287.44 1210.33 L1288.03 1210.33 L1288.61 1210.33 L1289.2 1210.33 L1289.79 1210.33 L1290.37 1210.33 L1290.96 1210.33 L1291.55 1210.33 L1292.13 1210.33 L1292.72 1210.33 L1293.31 1210.33 L1293.89 1210.33 L1294.48 1210.33 L1295.06 1210.33 L1295.65 1210.33 L1296.24 1210.33 L1296.82 1210.33 L1297.41 1210.33 L1298 1210.33 L1298.58 1210.33 L1299.17 1210.33 L1299.76 1210.33 L1300.34 1210.33 L1300.93 1210.33 L1301.52 1210.33 L1302.1 1210.33 L1302.69 1210.33 L1303.27 1210.33 L1303.86 1210.33 L1304.45 1210.33 L1305.03 1210.33 L1305.62 1210.33 L1306.21 1210.33 L1306.79 1210.33 L1307.38 1210.33 L1307.97 1210.33 L1308.55 1210.33 L1309.14 1210.33 L1309.73 1210.33 L1310.31 1210.33 L1310.9 1210.33 L1311.48 1210.33 L1312.07 1210.33 L1312.66 1210.33 L1313.24 1210.33 L1313.83 1210.33 L1314.42 1210.33 L1315 1210.33 L1315.59 1210.33 L1316.18 1210.33 L1316.76 1210.33 L1317.35 1210.33 L1317.93 1210.33 L1318.52 1210.33 L1319.11 1210.33 L1319.69 1210.33 L1320.28 1210.33 L1320.87 1210.33 L1321.45 1210.33 L1322.04 1210.33 L1322.63 1210.33 L1323.21 1210.33 L1323.8 1210.33 L1324.39 1210.33 L1324.97 1210.33 L1325.56 1210.33 L1326.14 1210.33 L1326.73 1210.33 L1327.32 1210.33 L1327.9 1210.33 L1328.49 1210.33 L1329.08 1210.33 L1329.66 1210.33 L1330.25 1210.33 L1330.84 1210.33 L1331.42 1210.33 L1332.01 1210.33 L1332.6 1210.33 L1333.18 1210.33 L1333.77 1210.33 L1334.35 1210.33 L1334.94 1210.33 L1335.53 1210.33 L1336.11 1210.33 L1336.7 1210.33 L1337.29 1210.33 L1337.87 1210.33 L1338.46 1210.33 L1339.05 1210.33 L1339.63 1210.33 L1340.22 1210.33 L1340.8 1210.33 L1341.39 1210.33 L1341.98 1210.33 L1342.56 1210.33 L1343.15 1210.33 L1343.74 1210.33 L1344.32 1210.33 L1344.91 1210.33 L1345.5 1210.33 L1346.08 1210.33 L1346.67 1210.33 L1347.26 1210.33 L1347.84 1210.33 L1348.43 1210.33 L1349.01 1210.33 L1349.6 1210.33 L1350.19 1210.33 L1350.77 1210.33 L1351.36 1210.33 L1351.95 1210.33 L1352.53 1210.33 L1353.12 1210.33 L1353.71 1210.33 L1354.29 1210.33 L1354.88 1210.33 L1355.47 1210.33 L1356.05 1210.33 L1356.64 1210.33 L1357.22 1210.33 L1357.81 1210.33 L1358.4 1210.33 L1358.98 1210.33 L1359.57 1210.33 L1360.16 1210.33 L1360.74 1210.33 L1361.33 1210.33 L1361.92 1210.33 L1362.5 1210.33 L1363.09 1210.33 L1363.68 1210.33 L1364.26 1210.33 L1364.85 1210.33 L1365.43 1210.33 L1366.02 1210.33 L1366.61 1210.33 L1367.19 1210.33 L1367.78 1210.33 L1368.37 1210.33 L1368.95 1210.33 L1369.54 1210.33 L1370.13 1210.33 L1370.71 1210.33 L1371.3 1210.33 L1371.88 1210.33 L1372.47 1210.33 L1373.06 1210.33 L1373.64 1210.33 L1374.23 1210.33 L1374.82 1210.33 L1375.4 1210.33 L1375.99 1210.33 L1376.58 1210.33 L1377.16 1210.33 L1377.75 1210.33 L1378.34 1210.33 L1378.92 1210.33 L1379.51 1210.33 L1380.09 1210.33 L1380.68 1210.33 L1381.27 1210.33 L1381.85 1210.33 L1382.44 1210.33 L1383.03 1210.33 L1383.61 1210.33 L1384.2 1210.33 L1384.79 1210.33 L1385.37 1210.33 L1385.96 1210.33 L1386.55 1210.33 L1387.13 1210.33 L1387.72 1210.33 L1388.3 1210.33 L1388.89 1210.33 L1389.48 1210.33 L1390.06 1210.33 L1390.65 1210.33 L1391.24 1210.33 L1391.82 1210.33 L1392.41 1210.33 L1393 1210.33 L1393.58 1210.33 L1394.17 1210.33 L1394.75 1210.33 L1395.34 1210.33 L1395.93 1210.33 L1396.51 1210.33 L1397.1 1210.33 L1397.69 1210.33 L1398.27 1210.33 L1398.86 1210.33 L1399.45 1210.33 L1400.03 1210.33 L1400.62 1210.33 L1401.21 1210.33 L1401.79 1210.33 L1402.38 1210.33 L1402.96 1210.33 L1403.55 1210.33 L1404.14 1210.33 L1404.72 1210.33 L1405.31 1210.33 L1405.9 1210.33 L1406.48 1210.33 L1407.07 1210.33 L1407.66 1210.33 L1408.24 1210.33 L1408.83 1210.33 L1409.42 1210.33 L1410 1210.33 L1410.59 1210.33 L1411.17 1210.33 L1411.76 1210.33 L1412.35 1210.33 L1412.93 1210.33 L1413.52 1210.33 L1414.11 1210.33 L1414.69 1210.33 L1415.28 1210.33 L1415.87 1210.33 L1416.45 1210.33 L1417.04 1210.33 L1417.63 1210.33 L1418.21 1210.33 L1418.8 1210.33 L1419.38 1210.33 L1419.97 1210.33 L1420.56 1210.33 L1421.14 1210.33 L1421.73 1210.33 L1422.32 1210.33 L1422.9 1210.33 L1423.49 1210.33 L1424.08 1210.33 L1424.66 1210.33 L1425.25 1210.33 L1425.83 1210.33 L1426.42 1210.33 L1427.01 1210.33 L1427.59 1210.33 L1428.18 1210.33 L1428.77 1210.33 L1429.35 1210.33 L1429.94 1210.33 L1430.53 1210.33 L1431.11 1210.33 L1431.7 1210.33 L1432.29 1210.33 L1432.87 1210.33 L1433.46 1210.33 L1434.04 1210.33 L1434.63 1210.33 L1435.22 1210.33 L1435.8 1210.33 L1436.39 1210.33 L1436.98 1210.33 L1437.56 1210.33 L1438.15 1210.33 L1438.74 1210.33 L1439.32 1210.33 L1439.91 1210.33 L1440.5 1210.33 L1441.08 1210.33 L1441.67 1210.33 L1442.25 1210.33 L1442.84 1210.33 L1443.43 1210.33 L1444.01 1210.33 L1444.6 1210.33 L1445.19 1210.33 L1445.77 1210.33 L1446.36 1210.33 L1446.95 1210.33 L1447.53 1210.33 L1448.12 1210.33 L1448.7 1210.33 L1449.29 1210.33 L1449.88 1210.33 L1450.46 1210.33 L1451.05 1210.33 L1451.64 1210.33 L1452.22 1210.33 L1452.81 1210.33 L1453.4 1210.33 L1453.98 1210.33 L1454.57 1210.33 L1455.16 1210.33 L1455.74 1210.33 L1456.33 1210.33 L1456.91 1210.33 L1457.5 1210.33 L1458.09 1210.33 L1458.67 1210.33 L1459.26 1210.33 L1459.85 1210.33 L1460.43 1210.33 L1461.02 1210.33 L1461.61 1210.33 L1462.19 1210.33 L1462.78 1210.33 L1463.37 1210.33 L1463.95 1210.33 L1464.54 1210.33 L1465.12 1210.33 L1465.71 1210.33 L1466.3 1210.33 L1466.88 1210.33 L1467.47 1210.33 L1468.06 1210.33 L1468.64 1210.33 L1469.23 1210.33 L1469.82 1210.33 L1470.4 1210.33 L1470.99 1210.33 L1471.57 1210.33 L1472.16 1210.33 L1472.75 1210.33 L1473.33 1210.33 L1473.92 1210.33 L1474.51 1210.33 L1475.09 1210.33 L1475.68 1210.33 L1476.27 1210.33 L1476.85 1210.33 L1477.44 1210.33 L1478.03 1210.33 L1478.61 1210.33 L1479.2 1210.33 L1479.78 1210.33 L1480.37 1210.33 L1480.96 1210.33 L1481.54 1210.33 L1482.13 1210.33 L1482.72 1210.33 L1483.3 1210.33 L1483.89 1210.33 L1484.48 1210.33 L1485.06 1210.33 L1485.65 1210.33 L1486.24 1210.33 L1486.82 1210.33 L1487.41 1210.33 L1487.99 1210.33 L1488.58 1210.33 L1489.17 1210.33 L1489.75 1210.33 L1490.34 1210.33 L1490.93 1210.33 L1491.51 1210.33 L1492.1 1210.33 L1492.69 1210.33 L1493.27 1210.33 L1493.86 1210.33 L1494.45 1210.33 L1495.03 1210.33 L1495.62 1210.33 L1496.2 1210.33 L1496.79 1210.33 L1497.38 1210.33 L1497.96 1210.33 L1498.55 1210.33 L1499.14 1210.33 L1499.72 1210.33 L1500.31 1210.33 L1500.9 1210.33 L1501.48 1210.33 L1502.07 1210.33 L1502.65 1210.33 L1503.24 1210.33 L1503.83 1210.33 L1504.41 1210.33 L1505 1210.33 L1505.59 1210.33 L1506.17 1210.33 L1506.76 1210.33 L1507.35 1210.33 L1507.93 1210.33 L1508.52 1210.33 L1509.11 1210.33 L1509.69 1210.33 L1510.28 1210.33 L1510.86 1210.33 L1511.45 1210.33 L1512.04 1210.33 L1512.62 1210.33 L1513.21 1210.33 L1513.8 1210.33 L1514.38 1210.33 L1514.97 1210.33 L1515.56 1210.33 L1516.14 1210.33 L1516.73 1210.33 L1517.32 1210.33 L1517.9 1210.33 L1518.49 1210.33 L1519.07 1210.33 L1519.66 1210.33 L1520.25 1210.33 L1520.83 1210.33 L1521.42 1210.33 L1522.01 1210.33 L1522.59 1210.33 L1523.18 1210.33 L1523.77 1210.33 L1524.35 1210.33 L1524.94 1210.33 L1525.52 1210.33 L1526.11 1210.33 L1526.7 1210.33 L1527.28 1210.33 L1527.87 1210.33 L1528.46 1210.33 L1529.04 1210.33 L1529.63 1210.33 L1530.22 1210.33 L1530.8 1210.33 L1531.39 1210.33 L1531.98 1210.33 L1532.56 1210.33 L1533.15 1210.33 L1533.73 1210.33 L1534.32 1210.33 L1534.91 1210.33 L1535.49 1210.33 L1536.08 1210.33 L1536.67 1210.33 L1537.25 1210.33 L1537.84 1210.33 L1538.43 1210.33 L1539.01 1210.33 L1539.6 1210.33 L1540.19 1210.33 L1540.77 1210.33 L1541.36 1210.33 L1541.94 1210.33 L1542.53 1210.33 L1543.12 1210.33 L1543.7 1210.33 L1544.29 1210.33 L1544.88 1210.33 L1545.46 1210.33 L1546.05 1210.33 L1546.64 1210.33 L1547.22 1210.33 L1547.81 1210.33 L1548.4 1210.33 L1548.98 1210.33 L1549.57 1210.33 L1550.15 1210.33 L1550.74 1210.33 L1551.33 1210.33 L1551.91 1210.33 L1552.5 1210.33 L1553.09 1210.33 L1553.67 1210.33 L1554.26 1210.33 L1554.85 1210.33 L1555.43 1210.33 L1556.02 1210.33 L1556.6 1210.33 L1557.19 1210.33 L1557.78 1210.33 L1558.36 1210.33 L1558.95 1210.33 L1559.54 1210.33 L1560.12 1210.33 L1560.71 1210.33 L1561.3 1210.33 L1561.88 1210.33 L1562.47 1210.33 L1563.06 1210.33 L1563.64 1210.33 L1564.23 1210.33 L1564.81 1210.33 L1565.4 1210.33 L1565.99 1210.33 L1566.57 1210.33 L1567.16 1210.33 L1567.75 1210.33 L1568.33 1210.33 L1568.92 1210.33 L1569.51 1210.33 L1570.09 1210.33 L1570.68 1210.33 L1571.27 1210.33 L1571.85 1210.33 L1572.44 1210.33 L1573.02 1210.33 L1573.61 1210.33 L1574.2 1210.33 L1574.78 1210.33 L1575.37 1210.33 L1575.96 1210.33 L1576.54 1210.33 L1577.13 1210.33 L1577.72 1210.33 L1578.3 1210.33 L1578.89 1210.33 L1579.47 1210.33 L1580.06 1210.33 L1580.65 1210.33 L1581.23 1210.33 L1581.82 1210.33 L1582.41 1210.33 L1582.99 1210.33 L1583.58 1210.33 L1584.17 1210.33 L1584.75 1210.33 L1585.34 1210.33 L1585.93 1210.33 L1586.51 1210.33 L1587.1 1210.33 L1587.68 1210.33 L1588.27 1210.33 L1588.86 1210.33 L1589.44 1210.33 L1590.03 1210.33 L1590.62 1210.33 L1591.2 1210.33 L1591.79 1210.33 L1592.38 1210.33 L1592.96 1210.33 L1593.55 1210.33 L1594.14 1210.33 L1594.72 1210.33 L1595.31 1210.33 L1595.89 1210.33 L1596.48 1210.33 L1597.07 1210.33 L1597.65 1210.33 L1598.24 1210.33 L1598.83 1210.33 L1599.41 1210.33 L1600 1210.33 L1600.59 1210.33 L1601.17 1210.33 L1601.76 1210.33 L1602.34 1210.33 L1602.93 1210.33 L1603.52 1210.33 L1604.1 1210.33 L1604.69 1210.33 L1605.28 1210.33 L1605.86 1210.33 L1606.45 1210.33 L1607.04 1210.33 L1607.62 1210.33 L1608.21 1210.33 L1608.8 1210.33 L1609.38 1210.33 L1609.97 1210.33 L1610.55 1210.33 L1611.14 1210.33 L1611.73 1210.33 L1612.31 1210.33 L1612.9 1210.33 L1613.49 1210.33 L1614.07 1210.33 L1614.66 1210.33 L1615.25 1210.33 L1615.83 1210.33 L1616.42 1210.33 L1617.01 1210.33 L1617.59 1210.33 L1618.18 1210.33 L1618.76 1210.33 L1619.35 1210.33 L1619.94 1210.33 L1620.52 1210.33 L1621.11 1210.33 L1621.7 1210.33 L1622.28 1210.33 L1622.87 1210.33 L1623.46 1210.33 L1624.04 1210.33 L1624.63 1210.33 L1625.22 1210.33 L1625.8 1210.33 L1626.39 1210.33 L1626.97 1210.33 L1627.56 1210.33 L1628.15 1210.33 L1628.73 1210.33 L1629.32 1210.33 L1629.91 1210.33 L1630.49 1210.33 L1631.08 1210.33 L1631.67 1210.33 L1632.25 1210.33 L1632.84 1210.33 L1633.42 1210.33 L1634.01 1210.33 L1634.6 1210.33 L1635.18 1210.33 L1635.77 1210.33 L1636.36 1210.33 L1636.94 1210.33 L1637.53 1210.33 L1638.12 1210.33 L1638.7 1210.33 L1639.29 1210.33 L1639.88 1210.33 L1640.46 1210.33 L1641.05 1210.33 L1641.63 1210.33 L1642.22 1210.33 L1642.81 1210.33 L1643.39 1210.33 L1643.98 1210.33 L1644.57 1210.33 L1645.15 1210.33 L1645.74 1210.33 L1646.33 1210.33 L1646.91 1210.33 L1647.5 1210.33 L1648.09 1210.33 L1648.67 1210.33 L1649.26 1210.33 L1649.84 1210.33 L1650.43 1210.33 L1651.02 1210.33 L1651.6 1210.33 L1652.19 1210.33 L1652.78 1210.33 L1653.36 1210.33 L1653.95 1210.33 L1654.54 1210.33 L1655.12 1210.33 L1655.71 1210.33 L1656.29 1210.33 L1656.88 1210.33 L1657.47 1210.33 L1658.05 1210.33 L1658.64 1210.33 L1659.23 1210.33 L1659.81 1210.33 L1660.4 1210.33 L1660.99 1210.33 L1661.57 1210.33 L1662.16 1210.33 L1662.75 1210.33 L1663.33 1210.33 L1663.92 1210.33 L1664.5 1210.33 L1665.09 1210.33 L1665.68 1210.33 L1666.26 1210.33 L1666.85 1210.33 L1667.44 1210.33 L1668.02 1210.33 L1668.61 1210.33 L1669.2 1210.33 L1669.78 1210.33 L1670.37 1210.33 L1670.96 1210.33 L1671.54 1210.33 L1672.13 1210.33 L1672.71 1210.33 L1673.3 1210.33 L1673.89 1210.33 L1674.47 1210.33 L1675.06 1210.33 L1675.65 1210.33 L1676.23 1210.33 L1676.82 1210.33 L1677.41 1210.33 L1677.99 1210.33 L1678.58 1210.33 L1679.17 1210.33 L1679.75 1210.33 L1680.34 1210.33 L1680.92 1210.33 L1681.51 1210.33 L1682.1 1210.33 L1682.68 1210.33 L1683.27 1210.33 L1683.86 1210.33 L1684.44 1210.33 L1685.03 1210.33 L1685.62 1210.33 L1686.2 1210.33 L1686.79 1210.33 L1687.37 1210.33 L1687.96 1210.33 L1688.55 1210.33 L1689.13 1210.33 L1689.72 1210.33 L1690.31 1210.33 L1690.89 1210.33 L1691.48 1210.33 L1692.07 1210.33 L1692.65 1210.33 L1693.24 1210.33 L1693.83 1210.33 L1694.41 1210.33 L1695 1210.33 L1695.58 1210.33 L1696.17 1210.33 L1696.76 1210.33 L1697.34 1210.33 L1697.93 1210.33 L1698.52 1210.33 L1699.1 1210.33 L1699.69 1210.33 L1700.28 1210.33 L1700.86 1210.33 L1701.45 1210.33 L1702.04 1210.33 L1702.62 1210.33 L1703.21 1210.33 L1703.79 1210.33 L1704.38 1210.33 L1704.97 1210.33 L1705.55 1210.33 L1706.14 1210.33 L1706.73 1210.33 L1707.31 1210.33 L1707.9 1210.33 L1708.49 1210.33 L1709.07 1210.33 L1709.66 1210.33 L1710.24 1210.33 L1710.83 1210.33 L1711.42 1210.33 L1712 1210.33 L1712.59 1210.33 L1713.18 1210.33 L1713.76 1210.33 L1714.35 1210.33 L1714.94 1210.33 L1715.52 1210.33 L1716.11 1210.33 L1716.7 1210.33 L1717.28 1210.33 L1717.87 1210.33 L1718.45 1210.33 L1719.04 1210.33 L1719.63 1210.33 L1720.21 1210.33 L1720.8 1210.33 L1721.39 1210.33 L1721.97 1210.33 L1722.56 1210.33 L1723.15 1210.33 L1723.73 1210.33 L1724.32 1210.33 L1724.91 1210.33 L1725.49 1210.33 L1726.08 1210.33 L1726.66 1210.33 L1727.25 1210.33 L1727.84 1210.33 L1728.42 1210.33 L1729.01 1210.33 L1729.6 1210.33 L1730.18 1210.33 L1730.77 1210.33 L1731.36 1210.33 L1731.94 1210.33 L1732.53 1210.33 L1733.11 1210.33 L1733.7 1210.33 L1734.29 1210.33 L1734.87 1210.33 L1735.46 1210.33 L1736.05 1210.33 L1736.63 1210.33 L1737.22 1210.33 L1737.81 1210.33 L1738.39 1210.33 L1738.98 1210.33 L1739.57 1210.33 L1740.15 1210.33 L1740.74 1210.33 L1741.32 1210.33 L1741.91 1210.33 L1742.5 1210.33 L1743.08 1210.33 L1743.67 1210.33 L1744.26 1210.33 L1744.84 1210.33 L1745.43 1210.33 L1746.02 1210.33 L1746.6 1210.33 L1747.19 1210.33 L1747.78 1210.33 L1748.36 1210.33 L1748.95 1210.33 L1749.53 1210.33 L1750.12 1210.33 L1750.71 1210.33 L1751.29 1210.33 L1751.88 1210.33 L1752.47 1210.33 L1753.05 1210.33 L1753.64 1210.33 L1754.23 1210.33 L1754.81 1210.33 L1755.4 1210.33 L1755.99 1210.33 L1756.57 1210.33 L1757.16 1210.33 L1757.74 1210.33 L1758.33 1210.33 L1758.92 1210.33 L1759.5 1210.33 L1760.09 1210.33 L1760.68 1210.33 L1761.26 1210.33 L1761.85 1210.33 L1762.44 1210.33 L1763.02 1210.33 L1763.61 1210.33 L1764.19 1210.33 L1764.78 1210.33 L1765.37 1210.33 L1765.95 1210.33 L1766.54 1210.33 L1767.13 1210.33 L1767.71 1210.33 L1768.3 1210.33 L1768.89 1210.33 L1769.47 1210.33 L1770.06 1210.33 L1770.65 1210.33 L1771.23 1210.33 L1771.82 1210.33 L1772.4 1210.33 L1772.99 1210.33 L1773.58 1210.33 L1774.16 1210.33 L1774.75 1210.33 L1775.34 1210.33 L1775.92 1210.33 L1776.51 1210.33 L1777.1 1210.33 L1777.68 1210.33 L1778.27 1210.33 L1778.86 1210.33 L1779.44 1210.33 L1780.03 1210.33 L1780.61 1210.33 L1781.2 1210.33 L1781.79 1210.33 L1782.37 1210.33 L1782.96 1210.33 L1783.55 1210.33 L1784.13 1210.33 L1784.72 1210.33 L1785.31 1210.33 L1785.89 1210.33 L1786.48 1210.33 L1787.06 1210.33 L1787.65 1210.33 L1788.24 1210.33 L1788.82 1210.33 L1789.41 1210.33 L1790 1210.33 L1790.58 1210.33 L1791.17 1210.33 L1791.76 1210.33 L1792.34 1210.33 L1792.93 1210.33 L1793.52 1210.33 L1794.1 1210.33 L1794.69 1210.33 L1795.27 1210.33 L1795.86 1210.33 L1796.45 1210.33 L1797.03 1210.33 L1797.62 1210.33 L1798.21 1210.33 L1798.79 1210.33 L1799.38 1210.33 L1799.97 1210.33 L1800.55 1210.33 L1801.14 1210.33 L1801.73 1210.33 L1802.31 1210.33 L1802.9 1210.33 L1803.48 1210.33 L1804.07 1210.33 L1804.66 1210.33 L1805.24 1210.33 L1805.83 1210.33 L1806.42 1210.33 L1807 1210.33 L1807.59 1210.33 L1808.18 1210.33 L1808.76 1210.33 L1809.35 1210.33 L1809.94 1210.33 L1810.52 1210.33 L1811.11 1210.33 L1811.69 1210.33 L1812.28 1210.33 L1812.87 1210.33 L1813.45 1210.33 L1814.04 1210.33 L1814.63 1210.33 L1815.21 1210.33 L1815.8 1210.33 L1816.39 1210.33 L1816.97 1210.33 L1817.56 1210.33 L1818.14 1210.33 L1818.73 1210.33 L1819.32 1210.33 L1819.9 1210.33 L1820.49 1210.33 L1821.08 1210.33 L1821.66 1210.33 L1822.25 1210.33 L1822.84 1210.33 L1823.42 1210.33 L1824.01 1210.33 L1824.6 1210.33 L1825.18 1210.33 L1825.77 1210.33 L1826.35 1210.33 L1826.94 1210.33 L1827.53 1210.33 L1828.11 1210.33 L1828.7 1210.33 L1829.29 1210.33 L1829.87 1210.33 L1830.46 1210.33 L1831.05 1210.33 L1831.63 1210.33 L1832.22 1210.33 L1832.81 1210.33 L1833.39 1210.33 L1833.98 1210.33 L1834.56 1210.33 L1835.15 1210.33 L1835.74 1210.33 L1836.32 1210.33 L1836.91 1210.33 L1837.5 1210.33 L1838.08 1210.33 L1838.67 1210.33 L1839.26 1210.33 L1839.84 1210.33 L1840.43 1210.33 L1841.01 1210.33 L1841.6 1210.33 L1842.19 1210.33 L1842.77 1210.33 L1843.36 1210.33 L1843.95 1210.33 L1844.53 1210.33 L1845.12 1210.33 L1845.71 1210.33 L1846.29 1210.33 L1846.88 1210.33 L1847.47 1210.33 L1848.05 1210.33 L1848.64 1210.33 L1849.22 1210.33 L1849.81 1210.33 L1850.4 1210.33 L1850.98 1210.33 L1851.57 1210.33 L1852.16 1210.33 L1852.74 1210.33 L1853.33 1210.33 L1853.92 1210.33 L1854.5 1210.33 L1855.09 1210.33 L1855.68 1210.33 L1856.26 1210.33 L1856.85 1210.33 L1857.43 1210.33 L1858.02 1210.33 L1858.61 1210.33 L1859.19 1210.33 L1859.78 1210.33 L1860.37 1210.33 L1860.95 1210.33 L1861.54 1210.33 L1862.13 1210.33 L1862.71 1210.33 L1863.3 1210.33 L1863.88 1210.33 L1864.47 1210.33 L1865.06 1210.33 L1865.64 1210.33 L1866.23 1210.33 L1866.82 1210.33 L1867.4 1210.33 L1867.99 1210.33 L1868.58 1210.33 L1869.16 1210.33 L1869.75 1210.33 L1870.34 1210.33 L1870.92 1210.33 L1871.51 1210.33 L1872.09 1210.33 L1872.68 1210.33 L1873.27 1210.33 L1873.85 1210.33 L1874.44 1210.33 L1875.03 1210.33 L1875.61 1210.33 L1876.2 1210.33 L1876.79 1210.33 L1877.37 1210.33 L1877.96 1210.33 L1878.55 1210.33 L1879.13 1210.33 L1879.72 1210.33 L1880.3 1210.33 L1880.89 1210.33 L1881.48 1210.33 L1882.06 1210.33 L1882.65 1210.33 L1883.24 1210.33 L1883.82 1210.33 L1884.41 1210.33 L1885 1210.33 L1885.58 1210.33 L1886.17 1210.33 L1886.76 1210.33 L1887.34 1210.33 L1887.93 1210.33 L1888.51 1210.33 L1889.1 1210.33 L1889.69 1210.33 L1890.27 1210.33 L1890.86 1210.33 L1891.45 1210.33 L1892.03 1210.33 L1892.62 1210.33 L1893.21 1210.33 L1893.79 1210.33 L1894.38 1210.33 L1894.96 1210.33 L1895.55 1210.33 L1896.14 1210.33 L1896.72 1210.33 L1897.31 1210.33 L1897.9 1210.33 L1898.48 1210.33 L1899.07 1210.33 L1899.66 1210.33 L1900.24 1210.33 L1900.83 1210.33 L1901.42 1210.33 L1902 1210.33 L1902.59 1210.33 L1903.17 1210.33 L1903.76 1210.33 L1904.35 1210.33 L1904.93 1210.33 L1905.52 1210.33 L1906.11 1210.33 L1906.69 1210.33 L1907.28 1210.33 L1907.87 1210.33 L1908.45 1210.33 L1909.04 1210.33 L1909.63 1210.33 L1910.21 1210.33 L1910.8 1210.33 L1911.38 1210.33 L1911.97 1210.33 L1912.56 1210.33 L1913.14 1210.33 L1913.73 1210.33 L1914.32 1210.33 L1914.9 1210.33 L1915.49 1210.33 L1916.08 1210.33 L1916.66 1210.33 L1917.25 1210.33 L1917.83 1210.33 L1918.42 1210.33 L1919.01 1210.33 L1919.59 1210.33 L1920.18 1210.33 L1920.77 1210.33 L1921.35 1210.33 L1921.94 1210.33 L1922.53 1210.33 L1923.11 1210.33 L1923.7 1210.33 L1924.29 1210.33 L1924.87 1210.33 L1925.46 1210.33 L1926.04 1210.33 L1926.63 1210.33 L1927.22 1210.33 L1927.8 1210.33 L1928.39 1210.33 L1928.98 1210.33 L1929.56 1210.33 L1930.15 1210.33 L1930.74 1210.33 L1931.32 1210.33 L1931.91 1210.33 L1932.5 1210.33 L1933.08 1210.33 L1933.67 1210.33 L1934.25 1210.33 L1934.84 1210.33 L1935.43 1210.33 L1936.01 1210.33 L1936.6 1210.33 L1937.19 1210.33 L1937.77 1210.33 L1938.36 1210.33 L1938.95 1210.33 L1939.53 1210.33 L1940.12 1210.33 L1940.71 1210.33 L1941.29 1210.33 L1941.88 1210.33 L1942.46 1210.33 L1943.05 1210.33 L1943.64 1210.33 L1944.22 1210.33 L1944.81 1210.33 L1945.4 1210.33 L1945.98 1210.33 L1946.57 1210.33 L1947.16 1210.33 L1947.74 1210.33 L1948.33 1210.33 L1948.91 1210.33 L1949.5 1210.33 L1950.09 1210.33 L1950.67 1210.33 L1951.26 1210.33 L1951.85 1210.33 L1952.43 1210.33 L1953.02 1210.33 L1953.61 1210.33 L1954.19 1210.33 L1954.78 1210.33 L1955.37 1210.33 L1955.95 1210.33 L1956.54 1210.33 L1957.12 1210.33 L1957.71 1210.33 L1958.3 1210.33 L1958.88 1210.33 L1959.47 1210.33 L1960.06 1210.33 L1960.64 1210.33 L1961.23 1210.33 L1961.82 1210.33 L1962.4 1210.33 L1962.99 1210.33 L1963.58 1210.33 L1964.16 1210.33 L1964.75 1210.33 L1965.33 1210.33 L1965.92 1210.33 L1966.51 1210.33 L1967.09 1210.33 L1967.68 1210.33 L1968.27 1210.33 L1968.85 1210.33 L1969.44 1210.33 L1970.03 1210.33 L1970.61 1210.33 L1971.2 1210.33 L1971.78 1210.33 L1972.37 1210.33 L1972.96 1210.33 L1973.54 1210.33 L1974.13 1210.33 L1974.72 1210.33 L1975.3 1210.33 L1975.89 1210.33 L1976.48 1210.33 L1977.06 1210.33 L1977.65 1210.33 L1978.24 1210.33 L1978.82 1210.33 L1979.41 1210.33 L1979.99 1210.33 L1980.58 1210.33 L1981.17 1210.33 L1981.75 1210.33 L1982.34 1210.33 L1982.93 1210.33 L1983.51 1210.33 L1984.1 1210.33 L1984.69 1210.33 L1985.27 1210.33 L1985.86 1210.33 L1986.45 1210.33 L1987.03 1210.33 L1987.62 1210.33 L1988.2 1210.33 L1988.79 1210.33 L1989.38 1210.33 L1989.96 1210.33 L1990.55 1210.33 L1991.14 1210.33 L1991.72 1210.33 L1992.31 1210.33 L1992.9 1210.33 L1993.48 1210.33 L1994.07 1210.33 L1994.65 1210.33 L1995.24 1210.33 L1995.83 1210.33 L1996.41 1210.33 L1997 1210.33 L1997.59 1210.33 L1998.17 1210.33 L1998.76 1210.33 L1999.35 1210.33 L1999.93 1210.33 L2000.52 1210.33 L2001.11 1210.33 L2001.69 1210.33 L2002.28 1210.33 L2002.86 1210.33 L2003.45 1210.33 L2004.04 1210.33 L2004.62 1210.33 L2005.21 1210.33 L2005.8 1210.33 L2006.38 1210.33 L2006.97 1210.33 L2007.56 1210.33 L2008.14 1210.33 L2008.73 1210.33 L2009.32 1210.33 L2009.9 1210.33 L2010.49 1210.33 L2011.07 1210.33 L2011.66 1210.33 L2012.25 1210.33 L2012.83 1210.33 L2013.42 1210.33 L2014.01 1210.33 L2014.59 1210.33 L2015.18 1210.33 L2015.77 1210.33 L2016.35 1210.33 L2016.94 1210.33 L2017.53 1210.33 L2018.11 1210.33 L2018.7 1210.33 L2019.28 1210.33 L2019.87 1210.33 L2020.46 1210.33 L2021.04 1210.33 L2021.63 1210.33 L2022.22 1210.33 L2022.8 1210.33 L2023.39 1210.33 L2023.98 1210.33 L2024.56 1210.33 L2025.15 1210.33 L2025.73 1210.33 L2026.32 1210.33 L2026.91 1210.33 L2027.49 1210.33 L2028.08 1210.33 L2028.67 1210.33 L2029.25 1210.33 L2029.84 1210.33 L2030.43 1210.33 L2031.01 1210.33 L2031.6 1210.33 L2032.19 1210.33 L2032.77 1210.33 L2033.36 1210.33 L2033.94 1210.33 L2034.53 1210.33 L2035.12 1210.33 L2035.7 1210.33 L2036.29 1210.33 L2036.88 1210.33 L2037.46 1210.33 L2038.05 1210.33 L2038.64 1210.33 L2039.22 1210.33 L2039.81 1210.33 L2040.4 1210.33 L2040.98 1210.33 L2041.57 1210.33 L2042.15 1210.33 L2042.74 1210.33 L2043.33 1210.33 L2043.91 1210.33 L2044.5 1210.33 L2045.09 1210.33 L2045.67 1210.33 L2046.26 1210.33 L2046.85 1210.33 L2047.43 1210.33 L2048.02 1210.33 L2048.6 1210.33 L2049.19 1210.33 L2049.78 1210.33 L2050.36 1210.33 L2050.95 1210.33 L2051.54 1210.33 L2052.12 1210.33 L2052.71 1210.33 L2053.3 1210.33 L2053.88 1210.33 L2054.47 1210.33 L2055.06 1210.33 L2055.64 1210.33 L2056.23 1210.33 L2056.81 1210.33 L2057.4 1210.33 L2057.99 1210.33 L2058.57 1210.33 L2059.16 1210.33 L2059.75 1210.33 L2060.33 1210.33 L2060.92 1210.33 L2061.51 1210.33 L2062.09 1210.33 L2062.68 1210.33 L2063.27 1210.33 L2063.85 1210.33 L2064.44 1210.33 L2065.02 1210.33 L2065.61 1210.33 L2066.2 1210.33 L2066.78 1210.33 L2067.37 1210.33 L2067.96 1210.33 L2068.54 1210.33 L2069.13 1210.33 L2069.72 1210.33 L2070.3 1210.33 L2070.89 1210.33 L2071.48 1210.33 L2072.06 1210.33 L2072.65 1210.33 L2073.23 1210.33 L2073.82 1210.33 L2074.41 1210.33 L2074.99 1210.33 L2075.58 1210.33 L2076.17 1210.33 L2076.75 1210.33 L2077.34 1210.33 L2077.93 1210.33 L2078.51 1210.33 L2079.1 1210.33 L2079.68 1210.33 L2080.27 1210.33 L2080.86 1210.33 L2081.44 1210.33 L2082.03 1210.33 L2082.62 1210.33 L2083.2 1210.33 L2083.79 1210.33 L2084.38 1210.33 L2084.96 1210.33 L2085.55 1210.33 L2086.14 1210.33 L2086.72 1210.33 L2087.31 1210.33 L2087.89 1210.33 L2088.48 1210.33 L2089.07 1210.33 L2089.65 1210.33 L2090.24 1210.33 L2090.83 1210.33 L2091.41 1210.33 L2092 1210.33 L2092.59 1210.33 L2093.17 1210.33 L2093.76 1210.33 L2094.35 1210.33 L2094.93 1210.33 L2095.52 1210.33 L2096.1 1210.33 L2096.69 1210.33 L2097.28 1210.33 L2097.86 1210.33 L2098.45 1210.33 L2099.04 1210.33 L2099.62 1210.33 L2100.21 1210.33 L2100.8 1210.33 L2101.38 1210.33 L2101.97 1210.33 L2102.55 1210.33 L2103.14 1210.33 L2103.73 1210.33 L2104.31 1210.33 L2104.9 1210.33 L2105.49 1210.33 L2106.07 1210.33 L2106.66 1210.33 L2107.25 1210.33 L2107.83 1210.33 L2108.42 1210.33 L2109.01 1210.33 L2109.59 1210.33 L2110.18 1210.33 L2110.76 1210.33 L2111.35 1210.33 L2111.94 1210.33 L2112.52 1210.33 L2113.11 1210.33 L2113.7 1210.33 L2114.28 1210.33 L2114.87 1210.33 L2115.46 1210.33 L2116.04 1210.33 L2116.63 1210.33 L2117.22 1210.33 L2117.8 1210.33 L2118.39 1210.33 L2118.97 1210.33 L2119.56 1210.33 L2120.15 1210.33 L2120.73 1210.33 L2121.32 1210.33 L2121.91 1210.33 L2122.49 1210.33 L2123.08 1210.33 L2123.67 1210.33 L2124.25 1210.33 L2124.84 1210.33 L2125.42 1210.33 L2126.01 1210.33 L2126.6 1210.33 L2127.18 1210.33 L2127.77 1210.33 L2128.36 1210.33 L2128.94 1210.33 L2129.53 1210.33 L2130.12 1210.33 L2130.7 1210.33 L2131.29 1210.33 L2131.88 1210.33 L2132.46 1210.33 L2133.05 1210.33 L2133.63 1210.33 L2134.22 1210.33 L2134.81 1210.33 L2135.39 1210.33 L2135.98 1210.33 L2136.57 1210.33 L2137.15 1210.33 L2137.74 1210.33 L2138.33 1210.33 L2138.91 1210.33 L2139.5 1210.33 L2140.09 1210.33 L2140.67 1210.33 L2141.26 1210.33 L2141.84 1210.33 L2142.43 1210.33 L2143.02 1210.33 L2143.6 1210.33 L2144.19 1210.33 L2144.78 1210.33 L2145.36 1210.33 L2145.95 1210.33 L2146.54 1210.33 L2147.12 1210.33 L2147.71 1210.33 L2148.3 1210.33 L2148.88 1210.33 L2149.47 1210.33 L2150.05 1210.33 L2150.64 1210.33 L2151.23 1210.33 L2151.81 1210.33 L2152.4 1210.33 L2152.99 1210.33 L2153.57 1210.33 L2154.16 1210.33 L2154.75 1210.33 L2155.33 1210.33 L2155.92 1210.33 L2156.5 1210.33 L2157.09 1210.33 L2157.68 1210.33 L2158.26 1210.33 L2158.26 1209.57 L2157.68 1209.57 L2157.09 1209.57 L2156.5 1209.57 L2155.92 1209.57 L2155.33 1209.57 L2154.75 1209.57 L2154.16 1209.57 L2153.57 1209.57 L2152.99 1209.57 L2152.4 1209.57 L2151.81 1209.57 L2151.23 1209.57 L2150.64 1209.57 L2150.05 1209.57 L2149.47 1209.57 L2148.88 1209.57 L2148.3 1209.57 L2147.71 1209.57 L2147.12 1209.57 L2146.54 1209.57 L2145.95 1209.57 L2145.36 1209.57 L2144.78 1209.57 L2144.19 1209.57 L2143.6 1209.57 L2143.02 1209.57 L2142.43 1209.57 L2141.84 1209.57 L2141.26 1209.57 L2140.67 1209.57 L2140.09 1209.57 L2139.5 1209.57 L2138.91 1209.57 L2138.33 1209.57 L2137.74 1209.57 L2137.15 1209.57 L2136.57 1209.57 L2135.98 1209.57 L2135.39 1209.57 L2134.81 1209.57 L2134.22 1209.57 L2133.63 1209.57 L2133.05 1209.57 L2132.46 1209.57 L2131.88 1209.57 L2131.29 1209.57 L2130.7 1209.57 L2130.12 1209.57 L2129.53 1209.57 L2128.94 1209.57 L2128.36 1209.57 L2127.77 1209.57 L2127.18 1209.57 L2126.6 1209.57 L2126.01 1209.57 L2125.42 1209.57 L2124.84 1209.57 L2124.25 1209.57 L2123.67 1209.57 L2123.08 1209.57 L2122.49 1209.57 L2121.91 1209.57 L2121.32 1209.57 L2120.73 1209.57 L2120.15 1209.57 L2119.56 1209.57 L2118.97 1209.57 L2118.39 1209.57 L2117.8 1209.57 L2117.22 1209.57 L2116.63 1209.57 L2116.04 1209.57 L2115.46 1209.57 L2114.87 1209.57 L2114.28 1209.57 L2113.7 1209.57 L2113.11 1209.57 L2112.52 1209.57 L2111.94 1209.57 L2111.35 1209.57 L2110.76 1209.57 L2110.18 1209.57 L2109.59 1209.57 L2109.01 1209.57 L2108.42 1209.57 L2107.83 1209.57 L2107.25 1209.57 L2106.66 1209.57 L2106.07 1209.57 L2105.49 1209.57 L2104.9 1209.57 L2104.31 1209.57 L2103.73 1209.57 L2103.14 1209.57 L2102.55 1209.57 L2101.97 1209.57 L2101.38 1209.57 L2100.8 1209.57 L2100.21 1209.57 L2099.62 1209.57 L2099.04 1209.57 L2098.45 1209.57 L2097.86 1209.57 L2097.28 1209.57 L2096.69 1209.57 L2096.1 1209.57 L2095.52 1209.57 L2094.93 1209.57 L2094.35 1209.57 L2093.76 1209.57 L2093.17 1209.57 L2092.59 1209.57 L2092 1209.57 L2091.41 1209.57 L2090.83 1209.57 L2090.24 1209.57 L2089.65 1209.57 L2089.07 1209.57 L2088.48 1209.57 L2087.89 1209.57 L2087.31 1209.57 L2086.72 1209.57 L2086.14 1209.57 L2085.55 1209.57 L2084.96 1209.57 L2084.38 1209.57 L2083.79 1209.57 L2083.2 1209.57 L2082.62 1209.57 L2082.03 1209.57 L2081.44 1209.57 L2080.86 1209.57 L2080.27 1209.57 L2079.68 1209.57 L2079.1 1209.57 L2078.51 1209.57 L2077.93 1209.57 L2077.34 1209.57 L2076.75 1209.57 L2076.17 1209.57 L2075.58 1209.57 L2074.99 1209.57 L2074.41 1209.57 L2073.82 1209.57 L2073.23 1209.57 L2072.65 1209.57 L2072.06 1209.57 L2071.48 1209.57 L2070.89 1209.57 L2070.3 1209.57 L2069.72 1209.57 L2069.13 1209.57 L2068.54 1209.57 L2067.96 1209.57 L2067.37 1209.57 L2066.78 1209.57 L2066.2 1209.57 L2065.61 1209.57 L2065.02 1209.57 L2064.44 1209.57 L2063.85 1209.57 L2063.27 1209.57 L2062.68 1209.57 L2062.09 1209.57 L2061.51 1209.57 L2060.92 1209.57 L2060.33 1209.57 L2059.75 1209.57 L2059.16 1209.57 L2058.57 1209.57 L2057.99 1209.57 L2057.4 1209.57 L2056.81 1209.57 L2056.23 1209.57 L2055.64 1209.57 L2055.06 1209.57 L2054.47 1209.57 L2053.88 1209.57 L2053.3 1209.57 L2052.71 1209.57 L2052.12 1209.57 L2051.54 1209.57 L2050.95 1209.57 L2050.36 1209.57 L2049.78 1209.57 L2049.19 1209.57 L2048.6 1209.57 L2048.02 1209.57 L2047.43 1209.57 L2046.85 1209.57 L2046.26 1209.57 L2045.67 1209.57 L2045.09 1209.57 L2044.5 1209.57 L2043.91 1209.57 L2043.33 1209.57 L2042.74 1209.57 L2042.15 1209.57 L2041.57 1209.57 L2040.98 1209.57 L2040.4 1209.57 L2039.81 1209.57 L2039.22 1209.57 L2038.64 1209.57 L2038.05 1209.57 L2037.46 1209.57 L2036.88 1209.57 L2036.29 1209.57 L2035.7 1209.57 L2035.12 1209.57 L2034.53 1209.57 L2033.94 1209.57 L2033.36 1209.57 L2032.77 1209.57 L2032.19 1209.57 L2031.6 1209.57 L2031.01 1209.57 L2030.43 1209.57 L2029.84 1209.57 L2029.25 1209.57 L2028.67 1209.57 L2028.08 1209.57 L2027.49 1209.57 L2026.91 1209.57 L2026.32 1209.57 L2025.73 1209.57 L2025.15 1209.57 L2024.56 1209.57 L2023.98 1209.57 L2023.39 1209.57 L2022.8 1209.57 L2022.22 1209.57 L2021.63 1209.57 L2021.04 1209.57 L2020.46 1209.57 L2019.87 1209.57 L2019.28 1209.57 L2018.7 1209.57 L2018.11 1209.57 L2017.53 1209.57 L2016.94 1209.57 L2016.35 1209.57 L2015.77 1209.57 L2015.18 1209.57 L2014.59 1209.57 L2014.01 1209.57 L2013.42 1209.57 L2012.83 1209.57 L2012.25 1209.57 L2011.66 1209.57 L2011.07 1209.57 L2010.49 1209.57 L2009.9 1209.57 L2009.32 1209.57 L2008.73 1209.57 L2008.14 1209.57 L2007.56 1209.57 L2006.97 1209.57 L2006.38 1209.57 L2005.8 1209.57 L2005.21 1209.57 L2004.62 1209.57 L2004.04 1209.57 L2003.45 1209.57 L2002.86 1209.57 L2002.28 1209.57 L2001.69 1209.57 L2001.11 1209.57 L2000.52 1209.57 L1999.93 1209.57 L1999.35 1209.57 L1998.76 1209.57 L1998.17 1209.57 L1997.59 1209.57 L1997 1209.57 L1996.41 1209.57 L1995.83 1209.57 L1995.24 1209.57 L1994.65 1209.57 L1994.07 1209.57 L1993.48 1209.57 L1992.9 1209.57 L1992.31 1209.57 L1991.72 1209.57 L1991.14 1209.57 L1990.55 1209.57 L1989.96 1209.57 L1989.38 1209.57 L1988.79 1209.57 L1988.2 1209.57 L1987.62 1209.57 L1987.03 1209.57 L1986.45 1209.57 L1985.86 1209.57 L1985.27 1209.57 L1984.69 1209.57 L1984.1 1209.57 L1983.51 1209.57 L1982.93 1209.57 L1982.34 1209.57 L1981.75 1209.57 L1981.17 1209.57 L1980.58 1209.57 L1979.99 1209.57 L1979.41 1209.57 L1978.82 1209.57 L1978.24 1209.57 L1977.65 1209.57 L1977.06 1209.57 L1976.48 1209.57 L1975.89 1209.57 L1975.3 1209.57 L1974.72 1209.57 L1974.13 1209.57 L1973.54 1209.57 L1972.96 1209.57 L1972.37 1209.57 L1971.78 1209.57 L1971.2 1209.57 L1970.61 1209.57 L1970.03 1209.57 L1969.44 1209.57 L1968.85 1209.57 L1968.27 1209.57 L1967.68 1209.57 L1967.09 1209.57 L1966.51 1209.57 L1965.92 1209.57 L1965.33 1209.57 L1964.75 1209.57 L1964.16 1209.57 L1963.58 1209.57 L1962.99 1209.57 L1962.4 1209.57 L1961.82 1209.57 L1961.23 1209.57 L1960.64 1209.57 L1960.06 1209.57 L1959.47 1209.57 L1958.88 1209.57 L1958.3 1209.57 L1957.71 1209.57 L1957.12 1209.57 L1956.54 1209.57 L1955.95 1209.57 L1955.37 1209.57 L1954.78 1209.57 L1954.19 1209.57 L1953.61 1209.57 L1953.02 1209.57 L1952.43 1209.57 L1951.85 1209.57 L1951.26 1209.57 L1950.67 1209.57 L1950.09 1209.57 L1949.5 1209.57 L1948.91 1209.57 L1948.33 1209.57 L1947.74 1209.57 L1947.16 1209.57 L1946.57 1209.57 L1945.98 1209.57 L1945.4 1209.57 L1944.81 1209.57 L1944.22 1209.57 L1943.64 1209.57 L1943.05 1209.57 L1942.46 1209.57 L1941.88 1209.57 L1941.29 1209.57 L1940.71 1209.57 L1940.12 1209.57 L1939.53 1209.57 L1938.95 1209.57 L1938.36 1209.57 L1937.77 1209.57 L1937.19 1209.57 L1936.6 1209.57 L1936.01 1209.57 L1935.43 1209.57 L1934.84 1209.57 L1934.25 1209.57 L1933.67 1209.57 L1933.08 1209.57 L1932.5 1209.57 L1931.91 1209.57 L1931.32 1209.57 L1930.74 1209.57 L1930.15 1209.57 L1929.56 1209.57 L1928.98 1209.57 L1928.39 1209.57 L1927.8 1209.57 L1927.22 1209.57 L1926.63 1209.57 L1926.04 1209.57 L1925.46 1209.57 L1924.87 1209.57 L1924.29 1209.57 L1923.7 1209.57 L1923.11 1209.57 L1922.53 1209.57 L1921.94 1209.57 L1921.35 1209.57 L1920.77 1209.57 L1920.18 1209.57 L1919.59 1209.57 L1919.01 1209.57 L1918.42 1209.57 L1917.83 1209.57 L1917.25 1209.57 L1916.66 1209.57 L1916.08 1209.57 L1915.49 1209.57 L1914.9 1209.57 L1914.32 1209.57 L1913.73 1209.57 L1913.14 1209.57 L1912.56 1209.57 L1911.97 1209.57 L1911.38 1209.57 L1910.8 1209.57 L1910.21 1209.57 L1909.63 1209.57 L1909.04 1209.57 L1908.45 1209.57 L1907.87 1209.57 L1907.28 1209.57 L1906.69 1209.57 L1906.11 1209.57 L1905.52 1209.57 L1904.93 1209.57 L1904.35 1209.57 L1903.76 1209.57 L1903.17 1209.57 L1902.59 1209.57 L1902 1209.57 L1901.42 1209.57 L1900.83 1209.57 L1900.24 1209.57 L1899.66 1209.57 L1899.07 1209.57 L1898.48 1209.57 L1897.9 1209.57 L1897.31 1209.57 L1896.72 1209.57 L1896.14 1209.57 L1895.55 1209.57 L1894.96 1209.57 L1894.38 1209.57 L1893.79 1209.57 L1893.21 1209.57 L1892.62 1209.57 L1892.03 1209.57 L1891.45 1209.57 L1890.86 1209.57 L1890.27 1209.57 L1889.69 1209.57 L1889.1 1209.57 L1888.51 1209.57 L1887.93 1209.57 L1887.34 1209.57 L1886.76 1209.57 L1886.17 1209.57 L1885.58 1209.57 L1885 1209.57 L1884.41 1209.57 L1883.82 1209.57 L1883.24 1209.57 L1882.65 1209.57 L1882.06 1209.57 L1881.48 1209.57 L1880.89 1209.57 L1880.3 1209.57 L1879.72 1209.57 L1879.13 1209.57 L1878.55 1209.57 L1877.96 1209.57 L1877.37 1209.57 L1876.79 1209.57 L1876.2 1209.57 L1875.61 1209.57 L1875.03 1209.57 L1874.44 1209.57 L1873.85 1209.57 L1873.27 1209.57 L1872.68 1209.57 L1872.09 1209.57 L1871.51 1209.57 L1870.92 1209.57 L1870.34 1209.57 L1869.75 1209.57 L1869.16 1209.57 L1868.58 1209.57 L1867.99 1209.57 L1867.4 1209.57 L1866.82 1209.57 L1866.23 1209.57 L1865.64 1209.57 L1865.06 1209.57 L1864.47 1209.57 L1863.88 1209.57 L1863.3 1209.57 L1862.71 1209.57 L1862.13 1209.57 L1861.54 1209.57 L1860.95 1209.57 L1860.37 1209.57 L1859.78 1209.57 L1859.19 1209.57 L1858.61 1209.57 L1858.02 1209.57 L1857.43 1209.57 L1856.85 1209.57 L1856.26 1209.57 L1855.68 1209.57 L1855.09 1209.57 L1854.5 1209.57 L1853.92 1209.57 L1853.33 1209.57 L1852.74 1209.57 L1852.16 1209.57 L1851.57 1209.57 L1850.98 1209.57 L1850.4 1209.57 L1849.81 1209.57 L1849.22 1209.57 L1848.64 1209.57 L1848.05 1209.57 L1847.47 1209.57 L1846.88 1209.57 L1846.29 1209.57 L1845.71 1209.57 L1845.12 1209.57 L1844.53 1209.57 L1843.95 1209.57 L1843.36 1209.57 L1842.77 1209.57 L1842.19 1209.57 L1841.6 1209.57 L1841.01 1209.57 L1840.43 1209.57 L1839.84 1209.57 L1839.26 1209.57 L1838.67 1209.57 L1838.08 1209.57 L1837.5 1209.57 L1836.91 1209.57 L1836.32 1209.57 L1835.74 1209.57 L1835.15 1209.57 L1834.56 1209.57 L1833.98 1209.57 L1833.39 1209.57 L1832.81 1209.57 L1832.22 1209.57 L1831.63 1209.57 L1831.05 1209.57 L1830.46 1209.57 L1829.87 1209.57 L1829.29 1209.57 L1828.7 1209.57 L1828.11 1209.57 L1827.53 1209.57 L1826.94 1209.57 L1826.35 1209.57 L1825.77 1209.57 L1825.18 1209.57 L1824.6 1209.57 L1824.01 1209.57 L1823.42 1209.57 L1822.84 1209.57 L1822.25 1209.57 L1821.66 1209.57 L1821.08 1209.57 L1820.49 1209.57 L1819.9 1209.57 L1819.32 1209.57 L1818.73 1209.57 L1818.14 1209.57 L1817.56 1209.57 L1816.97 1209.57 L1816.39 1209.57 L1815.8 1209.57 L1815.21 1209.57 L1814.63 1209.57 L1814.04 1209.57 L1813.45 1209.57 L1812.87 1209.57 L1812.28 1209.57 L1811.69 1209.57 L1811.11 1209.57 L1810.52 1209.57 L1809.94 1209.57 L1809.35 1209.57 L1808.76 1209.57 L1808.18 1209.57 L1807.59 1209.57 L1807 1209.57 L1806.42 1209.57 L1805.83 1209.57 L1805.24 1209.57 L1804.66 1209.57 L1804.07 1209.57 L1803.48 1209.57 L1802.9 1209.57 L1802.31 1209.57 L1801.73 1209.57 L1801.14 1209.57 L1800.55 1209.57 L1799.97 1209.57 L1799.38 1209.57 L1798.79 1209.57 L1798.21 1209.57 L1797.62 1209.57 L1797.03 1209.57 L1796.45 1209.57 L1795.86 1209.57 L1795.27 1209.57 L1794.69 1209.57 L1794.1 1209.57 L1793.52 1209.57 L1792.93 1209.57 L1792.34 1209.57 L1791.76 1209.57 L1791.17 1209.57 L1790.58 1209.57 L1790 1209.57 L1789.41 1209.57 L1788.82 1209.57 L1788.24 1209.57 L1787.65 1209.57 L1787.06 1209.57 L1786.48 1209.57 L1785.89 1209.57 L1785.31 1209.57 L1784.72 1209.57 L1784.13 1209.57 L1783.55 1209.57 L1782.96 1209.57 L1782.37 1209.57 L1781.79 1209.57 L1781.2 1209.57 L1780.61 1209.57 L1780.03 1209.57 L1779.44 1209.57 L1778.86 1209.57 L1778.27 1209.57 L1777.68 1209.57 L1777.1 1209.57 L1776.51 1209.57 L1775.92 1209.57 L1775.34 1209.57 L1774.75 1209.57 L1774.16 1209.57 L1773.58 1209.57 L1772.99 1209.57 L1772.4 1209.57 L1771.82 1209.57 L1771.23 1209.57 L1770.65 1209.57 L1770.06 1209.57 L1769.47 1209.57 L1768.89 1209.57 L1768.3 1209.57 L1767.71 1209.57 L1767.13 1209.57 L1766.54 1209.57 L1765.95 1209.57 L1765.37 1209.57 L1764.78 1209.57 L1764.19 1209.57 L1763.61 1209.57 L1763.02 1209.57 L1762.44 1209.57 L1761.85 1209.57 L1761.26 1209.57 L1760.68 1209.57 L1760.09 1209.57 L1759.5 1209.57 L1758.92 1209.57 L1758.33 1209.57 L1757.74 1209.57 L1757.16 1209.57 L1756.57 1209.57 L1755.99 1209.57 L1755.4 1209.57 L1754.81 1209.57 L1754.23 1209.57 L1753.64 1209.57 L1753.05 1209.57 L1752.47 1209.57 L1751.88 1209.57 L1751.29 1209.57 L1750.71 1209.57 L1750.12 1209.57 L1749.53 1209.57 L1748.95 1209.57 L1748.36 1209.57 L1747.78 1209.57 L1747.19 1209.57 L1746.6 1209.57 L1746.02 1209.57 L1745.43 1209.57 L1744.84 1209.57 L1744.26 1209.57 L1743.67 1209.57 L1743.08 1209.57 L1742.5 1209.57 L1741.91 1209.57 L1741.32 1209.57 L1740.74 1209.57 L1740.15 1209.57 L1739.57 1209.57 L1738.98 1209.57 L1738.39 1209.57 L1737.81 1209.57 L1737.22 1209.57 L1736.63 1209.57 L1736.05 1209.57 L1735.46 1209.57 L1734.87 1209.57 L1734.29 1209.57 L1733.7 1209.57 L1733.11 1209.57 L1732.53 1209.57 L1731.94 1209.57 L1731.36 1209.57 L1730.77 1209.57 L1730.18 1209.57 L1729.6 1209.57 L1729.01 1209.57 L1728.42 1209.57 L1727.84 1209.57 L1727.25 1209.57 L1726.66 1209.57 L1726.08 1209.57 L1725.49 1209.57 L1724.91 1209.57 L1724.32 1209.57 L1723.73 1209.57 L1723.15 1209.57 L1722.56 1209.57 L1721.97 1209.57 L1721.39 1209.57 L1720.8 1209.57 L1720.21 1209.57 L1719.63 1209.57 L1719.04 1209.57 L1718.45 1209.57 L1717.87 1209.57 L1717.28 1209.57 L1716.7 1209.57 L1716.11 1209.57 L1715.52 1209.57 L1714.94 1209.57 L1714.35 1209.57 L1713.76 1209.57 L1713.18 1209.57 L1712.59 1209.57 L1712 1209.57 L1711.42 1209.57 L1710.83 1209.57 L1710.24 1209.57 L1709.66 1209.57 L1709.07 1209.57 L1708.49 1209.57 L1707.9 1209.57 L1707.31 1209.57 L1706.73 1209.57 L1706.14 1209.57 L1705.55 1209.57 L1704.97 1209.57 L1704.38 1209.57 L1703.79 1209.57 L1703.21 1209.57 L1702.62 1209.57 L1702.04 1209.57 L1701.45 1209.57 L1700.86 1209.57 L1700.28 1209.57 L1699.69 1209.57 L1699.1 1209.57 L1698.52 1209.57 L1697.93 1209.57 L1697.34 1209.57 L1696.76 1209.57 L1696.17 1209.57 L1695.58 1209.57 L1695 1209.57 L1694.41 1209.57 L1693.83 1209.57 L1693.24 1209.57 L1692.65 1209.57 L1692.07 1209.57 L1691.48 1209.57 L1690.89 1209.57 L1690.31 1209.57 L1689.72 1209.57 L1689.13 1209.57 L1688.55 1209.57 L1687.96 1209.57 L1687.37 1209.57 L1686.79 1209.57 L1686.2 1209.57 L1685.62 1209.57 L1685.03 1209.57 L1684.44 1209.57 L1683.86 1209.57 L1683.27 1209.57 L1682.68 1209.57 L1682.1 1209.57 L1681.51 1209.57 L1680.92 1209.57 L1680.34 1209.57 L1679.75 1209.57 L1679.17 1209.57 L1678.58 1209.57 L1677.99 1209.57 L1677.41 1209.57 L1676.82 1209.57 L1676.23 1209.57 L1675.65 1209.57 L1675.06 1209.57 L1674.47 1209.57 L1673.89 1209.57 L1673.3 1209.57 L1672.71 1209.57 L1672.13 1209.57 L1671.54 1209.57 L1670.96 1209.57 L1670.37 1209.57 L1669.78 1209.57 L1669.2 1209.57 L1668.61 1209.57 L1668.02 1209.57 L1667.44 1209.57 L1666.85 1209.57 L1666.26 1209.57 L1665.68 1209.57 L1665.09 1209.57 L1664.5 1209.57 L1663.92 1209.57 L1663.33 1209.57 L1662.75 1209.57 L1662.16 1209.57 L1661.57 1209.57 L1660.99 1209.57 L1660.4 1209.57 L1659.81 1209.57 L1659.23 1209.57 L1658.64 1209.57 L1658.05 1209.57 L1657.47 1209.57 L1656.88 1209.57 L1656.29 1209.57 L1655.71 1209.57 L1655.12 1209.57 L1654.54 1209.57 L1653.95 1209.57 L1653.36 1209.57 L1652.78 1209.57 L1652.19 1209.57 L1651.6 1209.57 L1651.02 1209.57 L1650.43 1209.57 L1649.84 1209.57 L1649.26 1209.57 L1648.67 1209.57 L1648.09 1209.57 L1647.5 1209.57 L1646.91 1209.57 L1646.33 1209.57 L1645.74 1209.57 L1645.15 1209.57 L1644.57 1209.57 L1643.98 1209.57 L1643.39 1209.57 L1642.81 1209.57 L1642.22 1209.57 L1641.63 1209.57 L1641.05 1209.57 L1640.46 1209.57 L1639.88 1209.57 L1639.29 1209.57 L1638.7 1209.57 L1638.12 1209.57 L1637.53 1209.57 L1636.94 1209.57 L1636.36 1209.57 L1635.77 1209.57 L1635.18 1209.57 L1634.6 1209.57 L1634.01 1209.57 L1633.42 1209.57 L1632.84 1209.57 L1632.25 1209.57 L1631.67 1209.57 L1631.08 1209.57 L1630.49 1209.57 L1629.91 1209.57 L1629.32 1209.57 L1628.73 1209.57 L1628.15 1209.57 L1627.56 1209.57 L1626.97 1209.57 L1626.39 1209.57 L1625.8 1209.57 L1625.22 1209.57 L1624.63 1209.57 L1624.04 1209.57 L1623.46 1209.57 L1622.87 1209.57 L1622.28 1209.57 L1621.7 1209.57 L1621.11 1209.57 L1620.52 1209.57 L1619.94 1209.57 L1619.35 1209.57 L1618.76 1209.57 L1618.18 1209.57 L1617.59 1209.57 L1617.01 1209.57 L1616.42 1209.57 L1615.83 1209.57 L1615.25 1209.57 L1614.66 1209.57 L1614.07 1209.57 L1613.49 1209.57 L1612.9 1209.57 L1612.31 1209.57 L1611.73 1209.57 L1611.14 1209.57 L1610.55 1209.57 L1609.97 1209.57 L1609.38 1209.57 L1608.8 1209.57 L1608.21 1209.57 L1607.62 1209.57 L1607.04 1209.57 L1606.45 1209.57 L1605.86 1209.57 L1605.28 1209.57 L1604.69 1209.57 L1604.1 1209.57 L1603.52 1209.57 L1602.93 1209.57 L1602.34 1209.57 L1601.76 1209.57 L1601.17 1209.57 L1600.59 1209.57 L1600 1209.57 L1599.41 1209.57 L1598.83 1209.57 L1598.24 1209.57 L1597.65 1209.57 L1597.07 1209.57 L1596.48 1209.57 L1595.89 1209.57 L1595.31 1209.57 L1594.72 1209.57 L1594.14 1209.57 L1593.55 1209.57 L1592.96 1209.57 L1592.38 1209.57 L1591.79 1209.57 L1591.2 1209.57 L1590.62 1209.57 L1590.03 1209.57 L1589.44 1209.57 L1588.86 1209.57 L1588.27 1209.57 L1587.68 1209.57 L1587.1 1209.57 L1586.51 1209.57 L1585.93 1209.57 L1585.34 1209.57 L1584.75 1209.57 L1584.17 1209.57 L1583.58 1209.57 L1582.99 1209.57 L1582.41 1209.57 L1581.82 1209.57 L1581.23 1209.57 L1580.65 1209.57 L1580.06 1209.57 L1579.47 1209.57 L1578.89 1209.57 L1578.3 1209.57 L1577.72 1209.57 L1577.13 1209.57 L1576.54 1209.57 L1575.96 1209.57 L1575.37 1209.57 L1574.78 1209.57 L1574.2 1209.57 L1573.61 1209.57 L1573.02 1209.57 L1572.44 1209.57 L1571.85 1209.57 L1571.27 1209.57 L1570.68 1209.57 L1570.09 1209.57 L1569.51 1209.57 L1568.92 1209.57 L1568.33 1209.57 L1567.75 1209.57 L1567.16 1209.57 L1566.57 1209.57 L1565.99 1209.57 L1565.4 1209.57 L1564.81 1209.57 L1564.23 1209.57 L1563.64 1209.57 L1563.06 1209.57 L1562.47 1209.57 L1561.88 1209.57 L1561.3 1209.57 L1560.71 1209.57 L1560.12 1209.57 L1559.54 1209.57 L1558.95 1209.57 L1558.36 1209.57 L1557.78 1209.57 L1557.19 1209.57 L1556.6 1209.57 L1556.02 1209.57 L1555.43 1209.57 L1554.85 1209.57 L1554.26 1209.57 L1553.67 1209.57 L1553.09 1209.57 L1552.5 1209.57 L1551.91 1209.57 L1551.33 1209.57 L1550.74 1209.57 L1550.15 1209.57 L1549.57 1209.57 L1548.98 1209.57 L1548.4 1209.57 L1547.81 1209.57 L1547.22 1209.57 L1546.64 1209.57 L1546.05 1209.57 L1545.46 1209.57 L1544.88 1209.57 L1544.29 1209.57 L1543.7 1209.57 L1543.12 1209.57 L1542.53 1209.57 L1541.94 1209.57 L1541.36 1209.57 L1540.77 1209.57 L1540.19 1209.57 L1539.6 1209.57 L1539.01 1209.57 L1538.43 1209.57 L1537.84 1209.57 L1537.25 1209.57 L1536.67 1209.57 L1536.08 1209.57 L1535.49 1209.57 L1534.91 1209.57 L1534.32 1209.57 L1533.73 1209.57 L1533.15 1209.57 L1532.56 1209.57 L1531.98 1209.57 L1531.39 1209.57 L1530.8 1209.57 L1530.22 1209.57 L1529.63 1209.57 L1529.04 1209.57 L1528.46 1209.57 L1527.87 1209.57 L1527.28 1209.57 L1526.7 1209.57 L1526.11 1209.57 L1525.52 1209.57 L1524.94 1209.57 L1524.35 1209.57 L1523.77 1209.57 L1523.18 1209.57 L1522.59 1209.57 L1522.01 1209.57 L1521.42 1209.57 L1520.83 1209.57 L1520.25 1209.57 L1519.66 1209.57 L1519.07 1209.57 L1518.49 1209.57 L1517.9 1209.57 L1517.32 1209.57 L1516.73 1209.57 L1516.14 1209.57 L1515.56 1209.57 L1514.97 1209.57 L1514.38 1209.57 L1513.8 1209.57 L1513.21 1209.57 L1512.62 1209.57 L1512.04 1209.57 L1511.45 1209.57 L1510.86 1209.57 L1510.28 1209.57 L1509.69 1209.57 L1509.11 1209.57 L1508.52 1209.57 L1507.93 1209.57 L1507.35 1209.57 L1506.76 1209.57 L1506.17 1209.57 L1505.59 1209.57 L1505 1209.57 L1504.41 1209.57 L1503.83 1209.57 L1503.24 1209.57 L1502.65 1209.57 L1502.07 1209.57 L1501.48 1209.57 L1500.9 1209.57 L1500.31 1209.57 L1499.72 1209.57 L1499.14 1209.57 L1498.55 1209.57 L1497.96 1209.57 L1497.38 1209.57 L1496.79 1209.57 L1496.2 1209.57 L1495.62 1209.57 L1495.03 1209.57 L1494.45 1209.57 L1493.86 1209.57 L1493.27 1209.57 L1492.69 1209.57 L1492.1 1209.57 L1491.51 1209.57 L1490.93 1209.57 L1490.34 1209.57 L1489.75 1209.57 L1489.17 1209.57 L1488.58 1209.57 L1487.99 1209.57 L1487.41 1209.57 L1486.82 1209.57 L1486.24 1209.57 L1485.65 1209.57 L1485.06 1209.57 L1484.48 1209.57 L1483.89 1209.57 L1483.3 1209.57 L1482.72 1209.57 L1482.13 1209.57 L1481.54 1209.57 L1480.96 1209.57 L1480.37 1209.57 L1479.78 1209.57 L1479.2 1209.57 L1478.61 1209.57 L1478.03 1209.57 L1477.44 1209.57 L1476.85 1209.57 L1476.27 1209.57 L1475.68 1209.57 L1475.09 1209.57 L1474.51 1209.57 L1473.92 1209.57 L1473.33 1209.57 L1472.75 1209.57 L1472.16 1209.57 L1471.57 1209.57 L1470.99 1209.57 L1470.4 1209.57 L1469.82 1209.57 L1469.23 1209.57 L1468.64 1209.57 L1468.06 1209.57 L1467.47 1209.57 L1466.88 1209.57 L1466.3 1209.57 L1465.71 1209.57 L1465.12 1209.57 L1464.54 1209.57 L1463.95 1209.57 L1463.37 1209.57 L1462.78 1209.57 L1462.19 1209.57 L1461.61 1209.57 L1461.02 1209.57 L1460.43 1209.57 L1459.85 1209.57 L1459.26 1209.57 L1458.67 1209.57 L1458.09 1209.57 L1457.5 1209.57 L1456.91 1209.57 L1456.33 1209.57 L1455.74 1209.57 L1455.16 1209.57 L1454.57 1209.57 L1453.98 1209.57 L1453.4 1209.57 L1452.81 1209.57 L1452.22 1209.57 L1451.64 1209.57 L1451.05 1209.57 L1450.46 1209.57 L1449.88 1209.57 L1449.29 1209.57 L1448.7 1209.57 L1448.12 1209.57 L1447.53 1209.57 L1446.95 1209.57 L1446.36 1209.57 L1445.77 1209.57 L1445.19 1209.57 L1444.6 1209.57 L1444.01 1209.57 L1443.43 1209.57 L1442.84 1209.57 L1442.25 1209.57 L1441.67 1209.57 L1441.08 1209.57 L1440.5 1209.57 L1439.91 1209.57 L1439.32 1209.57 L1438.74 1209.57 L1438.15 1209.57 L1437.56 1209.57 L1436.98 1209.57 L1436.39 1209.57 L1435.8 1209.57 L1435.22 1209.57 L1434.63 1209.57 L1434.04 1209.57 L1433.46 1209.57 L1432.87 1209.57 L1432.29 1209.57 L1431.7 1209.57 L1431.11 1209.57 L1430.53 1209.57 L1429.94 1209.57 L1429.35 1209.57 L1428.77 1209.57 L1428.18 1209.57 L1427.59 1209.57 L1427.01 1209.57 L1426.42 1209.57 L1425.83 1209.57 L1425.25 1209.57 L1424.66 1209.57 L1424.08 1209.57 L1423.49 1209.57 L1422.9 1209.57 L1422.32 1209.57 L1421.73 1209.57 L1421.14 1209.57 L1420.56 1209.57 L1419.97 1209.57 L1419.38 1209.57 L1418.8 1209.57 L1418.21 1209.57 L1417.63 1209.57 L1417.04 1209.57 L1416.45 1209.57 L1415.87 1209.57 L1415.28 1209.57 L1414.69 1209.57 L1414.11 1209.57 L1413.52 1209.57 L1412.93 1209.57 L1412.35 1209.57 L1411.76 1209.57 L1411.17 1209.57 L1410.59 1209.57 L1410 1209.57 L1409.42 1209.57 L1408.83 1209.57 L1408.24 1209.57 L1407.66 1209.57 L1407.07 1209.57 L1406.48 1209.57 L1405.9 1209.57 L1405.31 1209.57 L1404.72 1209.57 L1404.14 1209.57 L1403.55 1209.57 L1402.96 1209.57 L1402.38 1209.57 L1401.79 1209.57 L1401.21 1209.57 L1400.62 1209.57 L1400.03 1209.57 L1399.45 1209.57 L1398.86 1209.57 L1398.27 1209.57 L1397.69 1209.57 L1397.1 1209.57 L1396.51 1209.57 L1395.93 1209.57 L1395.34 1209.57 L1394.75 1209.57 L1394.17 1209.57 L1393.58 1209.57 L1393 1209.57 L1392.41 1209.57 L1391.82 1209.57 L1391.24 1209.57 L1390.65 1209.57 L1390.06 1209.57 L1389.48 1209.57 L1388.89 1209.57 L1388.3 1209.57 L1387.72 1209.57 L1387.13 1209.57 L1386.55 1209.57 L1385.96 1209.57 L1385.37 1209.57 L1384.79 1209.57 L1384.2 1209.57 L1383.61 1209.57 L1383.03 1209.57 L1382.44 1209.57 L1381.85 1209.57 L1381.27 1209.57 L1380.68 1209.57 L1380.09 1209.57 L1379.51 1209.57 L1378.92 1209.57 L1378.34 1209.57 L1377.75 1209.57 L1377.16 1209.57 L1376.58 1209.57 L1375.99 1209.57 L1375.4 1209.57 L1374.82 1209.57 L1374.23 1209.57 L1373.64 1209.57 L1373.06 1209.57 L1372.47 1209.57 L1371.88 1209.57 L1371.3 1209.57 L1370.71 1209.57 L1370.13 1209.57 L1369.54 1209.57 L1368.95 1209.57 L1368.37 1209.57 L1367.78 1209.57 L1367.19 1209.57 L1366.61 1209.57 L1366.02 1209.57 L1365.43 1209.57 L1364.85 1209.57 L1364.26 1209.57 L1363.68 1209.57 L1363.09 1209.57 L1362.5 1209.57 L1361.92 1209.57 L1361.33 1209.57 L1360.74 1209.57 L1360.16 1209.57 L1359.57 1209.57 L1358.98 1209.57 L1358.4 1209.57 L1357.81 1209.57 L1357.22 1209.57 L1356.64 1209.57 L1356.05 1209.57 L1355.47 1209.57 L1354.88 1209.57 L1354.29 1209.57 L1353.71 1209.57 L1353.12 1209.57 L1352.53 1209.57 L1351.95 1209.57 L1351.36 1209.57 L1350.77 1209.57 L1350.19 1209.57 L1349.6 1209.57 L1349.01 1209.57 L1348.43 1209.57 L1347.84 1209.57 L1347.26 1209.57 L1346.67 1209.57 L1346.08 1209.57 L1345.5 1209.57 L1344.91 1209.57 L1344.32 1209.57 L1343.74 1209.57 L1343.15 1209.57 L1342.56 1209.57 L1341.98 1209.57 L1341.39 1209.57 L1340.8 1209.57 L1340.22 1209.57 L1339.63 1209.57 L1339.05 1209.57 L1338.46 1209.57 L1337.87 1209.57 L1337.29 1209.57 L1336.7 1209.57 L1336.11 1209.57 L1335.53 1209.57 L1334.94 1209.57 L1334.35 1209.57 L1333.77 1209.57 L1333.18 1209.57 L1332.6 1209.57 L1332.01 1209.57 L1331.42 1209.57 L1330.84 1209.57 L1330.25 1209.57 L1329.66 1209.57 L1329.08 1209.57 L1328.49 1209.57 L1327.9 1209.57 L1327.32 1209.57 L1326.73 1209.57 L1326.14 1209.57 L1325.56 1209.57 L1324.97 1209.57 L1324.39 1209.57 L1323.8 1209.57 L1323.21 1209.57 L1322.63 1209.57 L1322.04 1209.57 L1321.45 1209.57 L1320.87 1209.57 L1320.28 1209.57 L1319.69 1209.57 L1319.11 1209.57 L1318.52 1209.57 L1317.93 1209.57 L1317.35 1209.57 L1316.76 1209.57 L1316.18 1209.57 L1315.59 1209.57 L1315 1209.57 L1314.42 1209.57 L1313.83 1209.57 L1313.24 1209.57 L1312.66 1209.57 L1312.07 1209.57 L1311.48 1209.57 L1310.9 1209.57 L1310.31 1209.57 L1309.73 1209.57 L1309.14 1209.57 L1308.55 1209.57 L1307.97 1209.57 L1307.38 1209.57 L1306.79 1209.57 L1306.21 1209.57 L1305.62 1209.57 L1305.03 1209.57 L1304.45 1209.57 L1303.86 1209.57 L1303.27 1209.57 L1302.69 1209.57 L1302.1 1209.57 L1301.52 1209.57 L1300.93 1209.57 L1300.34 1209.57 L1299.76 1209.57 L1299.17 1209.57 L1298.58 1209.57 L1298 1209.57 L1297.41 1209.57 L1296.82 1209.57 L1296.24 1209.57 L1295.65 1209.57 L1295.06 1209.57 L1294.48 1209.57 L1293.89 1209.57 L1293.31 1209.57 L1292.72 1209.57 L1292.13 1209.57 L1291.55 1209.57 L1290.96 1209.57 L1290.37 1209.57 L1289.79 1209.57 L1289.2 1209.57 L1288.61 1209.57 L1288.03 1209.57 L1287.44 1209.57 L1286.86 1209.57 L1286.27 1209.57 L1285.68 1209.57 L1285.1 1209.57 L1284.51 1209.57 L1283.92 1209.57 L1283.34 1209.57 L1282.75 1209.57 L1282.16 1209.57 L1281.58 1209.57 L1280.99 1209.57 L1280.4 1209.57 L1279.82 1209.57 L1279.23 1209.57 L1278.65 1209.57 L1278.06 1209.57 L1277.47 1209.57 L1276.89 1209.57 L1276.3 1209.57 L1275.71 1209.57 L1275.13 1209.57 L1274.54 1209.57 L1273.95 1209.57 L1273.37 1209.57 L1272.78 1209.57 L1272.19 1209.57 L1271.61 1209.57 L1271.02 1209.57 L1270.44 1209.57 L1269.85 1209.57 L1269.26 1209.57 L1268.68 1209.57 L1268.09 1209.57 L1267.5 1209.57 L1266.92 1209.57 L1266.33 1209.57 L1265.74 1209.57 L1265.16 1209.57 L1264.57 1209.57 L1263.98 1209.57 L1263.4 1209.57 L1262.81 1209.57 L1262.23 1209.57 L1261.64 1209.57 L1261.05 1209.57 L1260.47 1209.57 L1259.88 1209.57 L1259.29 1209.57 L1258.71 1209.57 L1258.12 1209.57 L1257.53 1209.57 L1256.95 1209.57 L1256.36 1209.57 L1255.78 1209.57 L1255.19 1209.57 L1254.6 1209.57 L1254.02 1209.57 L1253.43 1209.57 L1252.84 1209.57 L1252.26 1209.57 L1251.67 1209.57 L1251.08 1209.57 L1250.5 1209.57 L1249.91 1209.57 L1249.32 1209.57 L1248.74 1209.57 L1248.15 1209.57 L1247.57 1209.57 L1246.98 1209.57 L1246.39 1209.57 L1245.81 1209.57 L1245.22 1209.57 L1244.63 1209.57 L1244.05 1209.57 L1243.46 1209.57 L1242.87 1209.57 L1242.29 1209.57 L1241.7 1209.57 L1241.11 1209.57 L1240.53 1209.57 L1239.94 1209.57 L1239.36 1209.57 L1238.77 1209.57 L1238.18 1209.57 L1237.6 1209.57 L1237.01 1209.57 L1236.42 1209.57 L1235.84 1209.57 L1235.25 1209.57 L1234.66 1209.57 L1234.08 1209.57 L1233.49 1209.57 L1232.91 1209.57 L1232.32 1209.57 L1231.73 1209.57 L1231.15 1209.57 L1230.56 1209.57 L1229.97 1209.57 L1229.39 1209.57 L1228.8 1209.57 L1228.21 1209.57 L1227.63 1209.57 L1227.04 1209.57 L1226.45 1209.57 L1225.87 1209.57 L1225.28 1209.57 L1224.7 1209.57 L1224.11 1209.57 L1223.52 1209.57 L1222.94 1209.57 L1222.35 1209.57 L1221.76 1209.57 L1221.18 1209.57 L1220.59 1209.57 L1220 1209.57 L1219.42 1209.57 L1218.83 1209.57 L1218.24 1209.57 L1217.66 1209.57 L1217.07 1209.57 L1216.49 1209.57 L1215.9 1209.57 L1215.31 1209.57 L1214.73 1209.57 L1214.14 1209.57 L1213.55 1209.57 L1212.97 1209.57 L1212.38 1209.57 L1211.79 1209.57 L1211.21 1209.57 L1210.62 1209.57 L1210.03 1209.57 L1209.45 1209.57 L1208.86 1209.57 L1208.28 1209.57 L1207.69 1209.57 L1207.1 1209.57 L1206.52 1209.57 L1205.93 1209.57 L1205.34 1209.57 L1204.76 1209.57 L1204.17 1209.57 L1203.58 1209.57 L1203 1209.57 L1202.41 1209.57 L1201.83 1209.57 L1201.24 1209.57 L1200.65 1209.57 L1200.07 1209.57 L1199.48 1209.57 L1198.89 1209.57 L1198.31 1209.57 L1197.72 1209.57 L1197.13 1209.57 L1196.55 1209.57 L1195.96 1209.57 L1195.37 1209.57 L1194.79 1209.57 L1194.2 1209.57 L1193.62 1209.57 L1193.03 1209.57 L1192.44 1209.57 L1191.86 1209.57 L1191.27 1209.57 L1190.68 1209.57 L1190.1 1209.57 L1189.51 1209.57 L1188.92 1209.57 L1188.34 1209.57 L1187.75 1209.57 L1187.16 1209.57 L1186.58 1209.57 L1185.99 1209.57 L1185.41 1209.57 L1184.82 1209.57 L1184.23 1209.57 L1183.65 1209.57 L1183.06 1209.57 L1182.47 1209.57 L1181.89 1209.57 L1181.3 1209.57 L1180.71 1209.57 L1180.13 1209.57 L1179.54 1209.57 L1178.96 1209.57 L1178.37 1209.57 L1177.78 1209.57 L1177.2 1209.57 L1176.61 1209.57 L1176.02 1209.57 L1175.44 1209.57 L1174.85 1209.57 L1174.26 1209.57 L1173.68 1209.57 L1173.09 1209.57 L1172.5 1209.57 L1171.92 1209.57 L1171.33 1209.57 L1170.75 1209.57 L1170.16 1209.57 L1169.57 1209.57 L1168.99 1209.57 L1168.4 1209.57 L1167.81 1209.57 L1167.23 1209.57 L1166.64 1209.57 L1166.05 1209.57 L1165.47 1209.57 L1164.88 1209.57 L1164.29 1209.57 L1163.71 1209.57 L1163.12 1209.57 L1162.54 1209.57 L1161.95 1209.57 L1161.36 1209.57 L1160.78 1209.57 L1160.19 1209.57 L1159.6 1209.57 L1159.02 1209.57 L1158.43 1209.57 L1157.84 1209.57 L1157.26 1209.57 L1156.67 1209.57 L1156.09 1209.57 L1155.5 1209.57 L1154.91 1209.57 L1154.33 1209.57 L1153.74 1209.57 L1153.15 1209.57 L1152.57 1209.57 L1151.98 1209.57 L1151.39 1209.57 L1150.81 1209.57 L1150.22 1209.57 L1149.63 1209.57 L1149.05 1209.57 L1148.46 1209.57 L1147.88 1209.57 L1147.29 1209.57 L1146.7 1209.57 L1146.12 1209.57 L1145.53 1209.57 L1144.94 1209.57 L1144.36 1209.57 L1143.77 1209.57 L1143.18 1209.57 L1142.6 1209.57 L1142.01 1209.57 L1141.42 1209.57 L1140.84 1209.57 L1140.25 1209.57 L1139.67 1209.57 L1139.08 1209.57 L1138.49 1209.57 L1137.91 1209.57 L1137.32 1209.57 L1136.73 1209.57 L1136.15 1209.57 L1135.56 1209.57 L1134.97 1209.57 L1134.39 1209.57 L1133.8 1209.57 L1133.21 1209.57 L1132.63 1209.57 L1132.04 1209.57 L1131.46 1209.57 L1130.87 1209.57 L1130.28 1209.57 L1129.7 1209.57 L1129.11 1209.57 L1128.52 1209.57 L1127.94 1209.57 L1127.35 1209.57 L1126.76 1209.57 L1126.18 1209.57 L1125.59 1209.57 L1125.01 1209.57 L1124.42 1209.57 L1123.83 1209.57 L1123.25 1209.57 L1122.66 1209.57 L1122.07 1209.57 L1121.49 1209.57 L1120.9 1209.57 L1120.31 1209.57 L1119.73 1209.57 L1119.14 1209.57 L1118.55 1209.57 L1117.97 1209.57 L1117.38 1209.57 L1116.8 1209.57 L1116.21 1209.57 L1115.62 1209.57 L1115.04 1209.57 L1114.45 1209.57 L1113.86 1209.57 L1113.28 1209.57 L1112.69 1209.57 L1112.1 1209.57 L1111.52 1209.57 L1110.93 1209.57 L1110.34 1209.57 L1109.76 1209.57 L1109.17 1209.57 L1108.59 1209.57 L1108 1209.57 L1107.41 1209.57 L1106.83 1209.57 L1106.24 1209.57 L1105.65 1209.57 L1105.07 1209.57 L1104.48 1209.57 L1103.89 1209.57 L1103.31 1209.57 L1102.72 1209.57 L1102.14 1209.57 L1101.55 1209.57 L1100.96 1209.57 L1100.38 1209.57 L1099.79 1209.57 L1099.2 1209.57 L1098.62 1209.57 L1098.03 1209.57 L1097.44 1209.57 L1096.86 1209.57 L1096.27 1209.57 L1095.68 1209.57 L1095.1 1209.57 L1094.51 1209.57 L1093.93 1209.57 L1093.34 1209.57 L1092.75 1209.57 L1092.17 1209.57 L1091.58 1209.57 L1090.99 1209.57 L1090.41 1209.57 L1089.82 1209.57 L1089.23 1209.57 L1088.65 1209.57 L1088.06 1209.57 L1087.47 1209.57 L1086.89 1209.57 L1086.3 1209.57 L1085.72 1209.57 L1085.13 1209.57 L1084.54 1209.57 L1083.96 1209.57 L1083.37 1209.57 L1082.78 1209.57 L1082.2 1209.57 L1081.61 1209.57 L1081.02 1209.57 L1080.44 1209.57 L1079.85 1209.57 L1079.26 1209.57 L1078.68 1209.57 L1078.09 1209.57 L1077.51 1209.57 L1076.92 1209.57 L1076.33 1209.57 L1075.75 1209.57 L1075.16 1209.57 L1074.57 1209.57 L1073.99 1209.57 L1073.4 1209.57 L1072.81 1209.57 L1072.23 1209.57 L1071.64 1209.57 L1071.06 1209.57 L1070.47 1209.57 L1069.88 1209.57 L1069.3 1209.57 L1068.71 1209.57 L1068.12 1209.57 L1067.54 1209.57 L1066.95 1209.57 L1066.36 1209.57 L1065.78 1209.57 L1065.19 1209.57 L1064.6 1209.57 L1064.02 1209.57 L1063.43 1209.57 L1062.85 1209.57 L1062.26 1209.57 L1061.67 1209.57 L1061.09 1209.57 L1060.5 1209.57 L1059.91 1209.57 L1059.33 1209.57 L1058.74 1209.57 L1058.15 1209.57 L1057.57 1209.57 L1056.98 1209.57 L1056.39 1209.57 L1055.81 1209.57 L1055.22 1209.57 L1054.64 1209.57 L1054.05 1209.57 L1053.46 1209.57 L1052.88 1209.57 L1052.29 1209.57 L1051.7 1209.57 L1051.12 1209.57 L1050.53 1209.57 L1049.94 1209.57 L1049.36 1209.57 L1048.77 1209.57 L1048.19 1209.57 L1047.6 1209.57 L1047.01 1209.57 L1046.43 1209.57 L1045.84 1209.57 L1045.25 1209.57 L1044.67 1209.57 L1044.08 1209.57 L1043.49 1209.57 L1042.91 1209.57 L1042.32 1209.57 L1041.73 1209.57 L1041.15 1209.57 L1040.56 1209.57 L1039.98 1209.57 L1039.39 1209.57 L1038.8 1209.57 L1038.22 1209.57 L1037.63 1209.57 L1037.04 1209.57 L1036.46 1209.57 L1035.87 1209.57 L1035.28 1209.57 L1034.7 1209.57 L1034.11 1209.57 L1033.52 1209.57 L1032.94 1209.57 L1032.35 1209.57 L1031.77 1209.57 L1031.18 1209.57 L1030.59 1209.57 L1030.01 1209.57 L1029.42 1209.57 L1028.83 1209.57 L1028.25 1209.57 L1027.66 1209.57 L1027.07 1209.57 L1026.49 1209.57 L1025.9 1209.57 L1025.32 1209.57 L1024.73 1209.57 L1024.14 1209.57 L1023.56 1209.57 L1022.97 1209.57 L1022.38 1209.57 L1021.8 1209.57 L1021.21 1209.57 L1020.62 1209.57 L1020.04 1209.57 L1019.45 1209.57 L1018.86 1209.57 L1018.28 1209.57 L1017.69 1209.57 L1017.11 1209.57 L1016.52 1209.57 L1015.93 1209.57 L1015.35 1209.57 L1014.76 1209.57 L1014.17 1209.57 L1013.59 1209.57 L1013 1209.57 L1012.41 1209.57 L1011.83 1209.57 L1011.24 1209.57 L1010.65 1209.57 L1010.07 1209.57 L1009.48 1209.57 L1008.9 1209.57 L1008.31 1209.57 L1007.72 1209.57 L1007.14 1209.57 L1006.55 1209.57 L1005.96 1209.57 L1005.38 1209.57 L1004.79 1209.57 L1004.2 1209.57 L1003.62 1209.57 L1003.03 1209.57 L1002.44 1209.57 L1001.86 1209.57 L1001.27 1209.57 L1000.69 1209.57 L1000.1 1209.57 L999.513 1209.57 L998.926 1209.57 L998.34 1209.57 L997.754 1209.57 L997.167 1209.57 L996.581 1209.57 L995.994 1209.57 L995.408 1209.57 L994.822 1209.57 L994.235 1209.57 L993.649 1209.57 L993.062 1209.57 L992.476 1209.57 L991.889 1209.57 L991.303 1209.57 L990.717 1209.57 L990.13 1209.57 L989.544 1209.57 L988.957 1209.57 L988.371 1209.57 L987.785 1209.57 L987.198 1209.57 L986.612 1209.57 L986.025 1209.57  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.95 986.612,1209.95 987.198,1209.95 987.785,1209.95 988.371,1209.95 988.957,1209.95 989.544,1209.95 990.13,1209.95 990.717,1209.95 991.303,1209.95 991.889,1209.95 992.476,1209.95 993.062,1209.95 993.649,1209.95 994.235,1209.95 994.822,1209.95 995.408,1209.95 995.994,1209.95 996.581,1209.95 997.167,1209.95 997.754,1209.95 998.34,1209.95 998.926,1209.95 999.513,1209.95 1000.1,1209.95 1000.69,1209.95 1001.27,1209.95 1001.86,1209.95 1002.44,1209.95 1003.03,1209.95 1003.62,1209.95 1004.2,1209.95 1004.79,1209.95 1005.38,1209.95 1005.96,1209.95 1006.55,1209.95 1007.14,1209.95 1007.72,1209.95 1008.31,1209.95 1008.9,1209.95 1009.48,1209.95 1010.07,1209.95 1010.65,1209.95 1011.24,1209.95 1011.83,1209.95 1012.41,1209.95 1013,1209.95 1013.59,1209.95 1014.17,1209.95 1014.76,1209.95 1015.35,1209.95 1015.93,1209.95 1016.52,1209.95 1017.11,1209.95 1017.69,1209.95 1018.28,1209.95 1018.86,1209.95 1019.45,1209.95 1020.04,1209.95 1020.62,1209.95 1021.21,1209.95 1021.8,1209.95 1022.38,1209.95 1022.97,1209.95 1023.56,1209.95 1024.14,1209.95 1024.73,1209.95 1025.32,1209.95 1025.9,1209.95 1026.49,1209.95 1027.07,1209.95 1027.66,1209.95 1028.25,1209.95 1028.83,1209.95 1029.42,1209.95 1030.01,1209.95 1030.59,1209.95 1031.18,1209.95 1031.77,1209.95 1032.35,1209.95 1032.94,1209.95 1033.52,1209.95 1034.11,1209.95 1034.7,1209.95 1035.28,1209.95 1035.87,1209.95 1036.46,1209.95 1037.04,1209.95 1037.63,1209.95 1038.22,1209.95 1038.8,1209.95 1039.39,1209.95 1039.98,1209.95 1040.56,1209.95 1041.15,1209.95 1041.73,1209.95 1042.32,1209.95 1042.91,1209.95 1043.49,1209.95 1044.08,1209.95 1044.67,1209.95 1045.25,1209.95 1045.84,1209.95 1046.43,1209.95 1047.01,1209.95 1047.6,1209.95 1048.19,1209.95 1048.77,1209.95 1049.36,1209.95 1049.94,1209.95 1050.53,1209.95 1051.12,1209.95 1051.7,1209.95 1052.29,1209.95 1052.88,1209.95 1053.46,1209.95 1054.05,1209.95 1054.64,1209.95 1055.22,1209.95 1055.81,1209.95 1056.39,1209.95 1056.98,1209.95 1057.57,1209.95 1058.15,1209.95 1058.74,1209.95 1059.33,1209.95 1059.91,1209.95 1060.5,1209.95 1061.09,1209.95 1061.67,1209.95 1062.26,1209.95 1062.85,1209.95 1063.43,1209.95 1064.02,1209.95 1064.6,1209.95 1065.19,1209.95 1065.78,1209.95 1066.36,1209.95 1066.95,1209.95 1067.54,1209.95 1068.12,1209.95 1068.71,1209.95 1069.3,1209.95 1069.88,1209.95 1070.47,1209.95 1071.06,1209.95 1071.64,1209.95 1072.23,1209.95 1072.81,1209.95 1073.4,1209.95 1073.99,1209.95 1074.57,1209.95 1075.16,1209.95 1075.75,1209.95 1076.33,1209.95 1076.92,1209.95 1077.51,1209.95 1078.09,1209.95 1078.68,1209.95 1079.26,1209.95 1079.85,1209.95 1080.44,1209.95 1081.02,1209.95 1081.61,1209.95 1082.2,1209.95 1082.78,1209.95 1083.37,1209.95 1083.96,1209.95 1084.54,1209.95 1085.13,1209.95 1085.72,1209.95 1086.3,1209.95 1086.89,1209.95 1087.47,1209.95 1088.06,1209.95 1088.65,1209.95 1089.23,1209.95 1089.82,1209.95 1090.41,1209.95 1090.99,1209.95 1091.58,1209.95 1092.17,1209.95 1092.75,1209.95 1093.34,1209.95 1093.93,1209.95 1094.51,1209.95 1095.1,1209.95 1095.68,1209.95 1096.27,1209.95 1096.86,1209.95 1097.44,1209.95 1098.03,1209.95 1098.62,1209.95 1099.2,1209.95 1099.79,1209.95 1100.38,1209.95 1100.96,1209.95 1101.55,1209.95 1102.14,1209.95 1102.72,1209.95 1103.31,1209.95 1103.89,1209.95 1104.48,1209.95 1105.07,1209.95 1105.65,1209.95 1106.24,1209.95 1106.83,1209.95 1107.41,1209.95 1108,1209.95 1108.59,1209.95 1109.17,1209.95 1109.76,1209.95 1110.34,1209.95 1110.93,1209.95 1111.52,1209.95 1112.1,1209.95 1112.69,1209.95 1113.28,1209.95 1113.86,1209.95 1114.45,1209.95 1115.04,1209.95 1115.62,1209.95 1116.21,1209.95 1116.8,1209.95 1117.38,1209.95 1117.97,1209.95 1118.55,1209.95 1119.14,1209.95 1119.73,1209.95 1120.31,1209.95 1120.9,1209.95 1121.49,1209.95 1122.07,1209.95 1122.66,1209.95 1123.25,1209.95 1123.83,1209.95 1124.42,1209.95 1125.01,1209.95 1125.59,1209.95 1126.18,1209.95 1126.76,1209.95 1127.35,1209.95 1127.94,1209.95 1128.52,1209.95 1129.11,1209.95 1129.7,1209.95 1130.28,1209.95 1130.87,1209.95 1131.46,1209.95 1132.04,1209.95 1132.63,1209.95 1133.21,1209.95 1133.8,1209.95 1134.39,1209.95 1134.97,1209.95 1135.56,1209.95 1136.15,1209.95 1136.73,1209.95 1137.32,1209.95 1137.91,1209.95 1138.49,1209.95 1139.08,1209.95 1139.67,1209.95 1140.25,1209.95 1140.84,1209.95 1141.42,1209.95 1142.01,1209.95 1142.6,1209.95 1143.18,1209.95 1143.77,1209.95 1144.36,1209.95 1144.94,1209.95 1145.53,1209.95 1146.12,1209.95 1146.7,1209.95 1147.29,1209.95 1147.88,1209.95 1148.46,1209.95 1149.05,1209.95 1149.63,1209.95 1150.22,1209.95 1150.81,1209.95 1151.39,1209.95 1151.98,1209.95 1152.57,1209.95 1153.15,1209.95 1153.74,1209.95 1154.33,1209.95 1154.91,1209.95 1155.5,1209.95 1156.09,1209.95 1156.67,1209.95 1157.26,1209.95 1157.84,1209.95 1158.43,1209.95 1159.02,1209.95 1159.6,1209.95 1160.19,1209.95 1160.78,1209.95 1161.36,1209.95 1161.95,1209.95 1162.54,1209.95 1163.12,1209.95 1163.71,1209.95 1164.29,1209.95 1164.88,1209.95 1165.47,1209.95 1166.05,1209.95 1166.64,1209.95 1167.23,1209.95 1167.81,1209.95 1168.4,1209.95 1168.99,1209.95 1169.57,1209.95 1170.16,1209.95 1170.75,1209.95 1171.33,1209.95 1171.92,1209.95 1172.5,1209.95 1173.09,1209.95 1173.68,1209.95 1174.26,1209.95 1174.85,1209.95 1175.44,1209.95 1176.02,1209.95 1176.61,1209.95 1177.2,1209.95 1177.78,1209.95 1178.37,1209.95 1178.96,1209.95 1179.54,1209.95 1180.13,1209.95 1180.71,1209.95 1181.3,1209.95 1181.89,1209.95 1182.47,1209.95 1183.06,1209.95 1183.65,1209.95 1184.23,1209.95 1184.82,1209.95 1185.41,1209.95 1185.99,1209.95 1186.58,1209.95 1187.16,1209.95 1187.75,1209.95 1188.34,1209.95 1188.92,1209.95 1189.51,1209.95 1190.1,1209.95 1190.68,1209.95 1191.27,1209.95 1191.86,1209.95 1192.44,1209.95 1193.03,1209.95 1193.62,1209.95 1194.2,1209.95 1194.79,1209.95 1195.37,1209.95 1195.96,1209.95 1196.55,1209.95 1197.13,1209.95 1197.72,1209.95 1198.31,1209.95 1198.89,1209.95 1199.48,1209.95 1200.07,1209.95 1200.65,1209.95 1201.24,1209.95 1201.83,1209.95 1202.41,1209.95 1203,1209.95 1203.58,1209.95 1204.17,1209.95 1204.76,1209.95 1205.34,1209.95 1205.93,1209.95 1206.52,1209.95 1207.1,1209.95 1207.69,1209.95 1208.28,1209.95 1208.86,1209.95 1209.45,1209.95 1210.03,1209.95 1210.62,1209.95 1211.21,1209.95 1211.79,1209.95 1212.38,1209.95 1212.97,1209.95 1213.55,1209.95 1214.14,1209.95 1214.73,1209.95 1215.31,1209.95 1215.9,1209.95 1216.49,1209.95 1217.07,1209.95 1217.66,1209.95 1218.24,1209.95 1218.83,1209.95 1219.42,1209.95 1220,1209.95 1220.59,1209.95 1221.18,1209.95 1221.76,1209.95 1222.35,1209.95 1222.94,1209.95 1223.52,1209.95 1224.11,1209.95 1224.7,1209.95 1225.28,1209.95 1225.87,1209.95 1226.45,1209.95 1227.04,1209.95 1227.63,1209.95 1228.21,1209.95 1228.8,1209.95 1229.39,1209.95 1229.97,1209.95 1230.56,1209.95 1231.15,1209.95 1231.73,1209.95 1232.32,1209.95 1232.91,1209.95 1233.49,1209.95 1234.08,1209.95 1234.66,1209.95 1235.25,1209.95 1235.84,1209.95 1236.42,1209.95 1237.01,1209.95 1237.6,1209.95 1238.18,1209.95 1238.77,1209.95 1239.36,1209.95 1239.94,1209.95 1240.53,1209.95 1241.11,1209.95 1241.7,1209.95 1242.29,1209.95 1242.87,1209.95 1243.46,1209.95 1244.05,1209.95 1244.63,1209.95 1245.22,1209.95 1245.81,1209.95 1246.39,1209.95 1246.98,1209.95 1247.57,1209.95 1248.15,1209.95 1248.74,1209.95 1249.32,1209.95 1249.91,1209.95 1250.5,1209.95 1251.08,1209.95 1251.67,1209.95 1252.26,1209.95 1252.84,1209.95 1253.43,1209.95 1254.02,1209.95 1254.6,1209.95 1255.19,1209.95 1255.78,1209.95 1256.36,1209.95 1256.95,1209.95 1257.53,1209.95 1258.12,1209.95 1258.71,1209.95 1259.29,1209.95 1259.88,1209.95 1260.47,1209.95 1261.05,1209.95 1261.64,1209.95 1262.23,1209.95 1262.81,1209.95 1263.4,1209.95 1263.98,1209.95 1264.57,1209.95 1265.16,1209.95 1265.74,1209.95 1266.33,1209.95 1266.92,1209.95 1267.5,1209.95 1268.09,1209.95 1268.68,1209.95 1269.26,1209.95 1269.85,1209.95 1270.44,1209.95 1271.02,1209.95 1271.61,1209.95 1272.19,1209.95 1272.78,1209.95 1273.37,1209.95 1273.95,1209.95 1274.54,1209.95 1275.13,1209.95 1275.71,1209.95 1276.3,1209.95 1276.89,1209.95 1277.47,1209.95 1278.06,1209.95 1278.65,1209.95 1279.23,1209.95 1279.82,1209.95 1280.4,1209.95 1280.99,1209.95 1281.58,1209.95 1282.16,1209.95 1282.75,1209.95 1283.34,1209.95 1283.92,1209.95 1284.51,1209.95 1285.1,1209.95 1285.68,1209.95 1286.27,1209.95 1286.86,1209.95 1287.44,1209.95 1288.03,1209.95 1288.61,1209.95 1289.2,1209.95 1289.79,1209.95 1290.37,1209.95 1290.96,1209.95 1291.55,1209.95 1292.13,1209.95 1292.72,1209.95 1293.31,1209.95 1293.89,1209.95 1294.48,1209.95 1295.06,1209.95 1295.65,1209.95 1296.24,1209.95 1296.82,1209.95 1297.41,1209.95 1298,1209.95 1298.58,1209.95 1299.17,1209.95 1299.76,1209.95 1300.34,1209.95 1300.93,1209.95 1301.52,1209.95 1302.1,1209.95 1302.69,1209.95 1303.27,1209.95 1303.86,1209.95 1304.45,1209.95 1305.03,1209.95 1305.62,1209.95 1306.21,1209.95 1306.79,1209.95 1307.38,1209.95 1307.97,1209.95 1308.55,1209.95 1309.14,1209.95 1309.73,1209.95 1310.31,1209.95 1310.9,1209.95 1311.48,1209.95 1312.07,1209.95 1312.66,1209.95 1313.24,1209.95 1313.83,1209.95 1314.42,1209.95 1315,1209.95 1315.59,1209.95 1316.18,1209.95 1316.76,1209.95 1317.35,1209.95 1317.93,1209.95 1318.52,1209.95 1319.11,1209.95 1319.69,1209.95 1320.28,1209.95 1320.87,1209.95 1321.45,1209.95 1322.04,1209.95 1322.63,1209.95 1323.21,1209.95 1323.8,1209.95 1324.39,1209.95 1324.97,1209.95 1325.56,1209.95 1326.14,1209.95 1326.73,1209.95 1327.32,1209.95 1327.9,1209.95 1328.49,1209.95 1329.08,1209.95 1329.66,1209.95 1330.25,1209.95 1330.84,1209.95 1331.42,1209.95 1332.01,1209.95 1332.6,1209.95 1333.18,1209.95 1333.77,1209.95 1334.35,1209.95 1334.94,1209.95 1335.53,1209.95 1336.11,1209.95 1336.7,1209.95 1337.29,1209.95 1337.87,1209.95 1338.46,1209.95 1339.05,1209.95 1339.63,1209.95 1340.22,1209.95 1340.8,1209.95 1341.39,1209.95 1341.98,1209.95 1342.56,1209.95 1343.15,1209.95 1343.74,1209.95 1344.32,1209.95 1344.91,1209.95 1345.5,1209.95 1346.08,1209.95 1346.67,1209.95 1347.26,1209.95 1347.84,1209.95 1348.43,1209.95 1349.01,1209.95 1349.6,1209.95 1350.19,1209.95 1350.77,1209.95 1351.36,1209.95 1351.95,1209.95 1352.53,1209.95 1353.12,1209.95 1353.71,1209.95 1354.29,1209.95 1354.88,1209.95 1355.47,1209.95 1356.05,1209.95 1356.64,1209.95 1357.22,1209.95 1357.81,1209.95 1358.4,1209.95 1358.98,1209.95 1359.57,1209.95 1360.16,1209.95 1360.74,1209.95 1361.33,1209.95 1361.92,1209.95 1362.5,1209.95 1363.09,1209.95 1363.68,1209.95 1364.26,1209.95 1364.85,1209.95 1365.43,1209.95 1366.02,1209.95 1366.61,1209.95 1367.19,1209.95 1367.78,1209.95 1368.37,1209.95 1368.95,1209.95 1369.54,1209.95 1370.13,1209.95 1370.71,1209.95 1371.3,1209.95 1371.88,1209.95 1372.47,1209.95 1373.06,1209.95 1373.64,1209.95 1374.23,1209.95 1374.82,1209.95 1375.4,1209.95 1375.99,1209.95 1376.58,1209.95 1377.16,1209.95 1377.75,1209.95 1378.34,1209.95 1378.92,1209.95 1379.51,1209.95 1380.09,1209.95 1380.68,1209.95 1381.27,1209.95 1381.85,1209.95 1382.44,1209.95 1383.03,1209.95 1383.61,1209.95 1384.2,1209.95 1384.79,1209.95 1385.37,1209.95 1385.96,1209.95 1386.55,1209.95 1387.13,1209.95 1387.72,1209.95 1388.3,1209.95 1388.89,1209.95 1389.48,1209.95 1390.06,1209.95 1390.65,1209.95 1391.24,1209.95 1391.82,1209.95 1392.41,1209.95 1393,1209.95 1393.58,1209.95 1394.17,1209.95 1394.75,1209.95 1395.34,1209.95 1395.93,1209.95 1396.51,1209.95 1397.1,1209.95 1397.69,1209.95 1398.27,1209.95 1398.86,1209.95 1399.45,1209.95 1400.03,1209.95 1400.62,1209.95 1401.21,1209.95 1401.79,1209.95 1402.38,1209.95 1402.96,1209.95 1403.55,1209.95 1404.14,1209.95 1404.72,1209.95 1405.31,1209.95 1405.9,1209.95 1406.48,1209.95 1407.07,1209.95 1407.66,1209.95 1408.24,1209.95 1408.83,1209.95 1409.42,1209.95 1410,1209.95 1410.59,1209.95 1411.17,1209.95 1411.76,1209.95 1412.35,1209.95 1412.93,1209.95 1413.52,1209.95 1414.11,1209.95 1414.69,1209.95 1415.28,1209.95 1415.87,1209.95 1416.45,1209.95 1417.04,1209.95 1417.63,1209.95 1418.21,1209.95 1418.8,1209.95 1419.38,1209.95 1419.97,1209.95 1420.56,1209.95 1421.14,1209.95 1421.73,1209.95 1422.32,1209.95 1422.9,1209.95 1423.49,1209.95 1424.08,1209.95 1424.66,1209.95 1425.25,1209.95 1425.83,1209.95 1426.42,1209.95 1427.01,1209.95 1427.59,1209.95 1428.18,1209.95 1428.77,1209.95 1429.35,1209.95 1429.94,1209.95 1430.53,1209.95 1431.11,1209.95 1431.7,1209.95 1432.29,1209.95 1432.87,1209.95 1433.46,1209.95 1434.04,1209.95 1434.63,1209.95 1435.22,1209.95 1435.8,1209.95 1436.39,1209.95 1436.98,1209.95 1437.56,1209.95 1438.15,1209.95 1438.74,1209.95 1439.32,1209.95 1439.91,1209.95 1440.5,1209.95 1441.08,1209.95 1441.67,1209.95 1442.25,1209.95 1442.84,1209.95 1443.43,1209.95 1444.01,1209.95 1444.6,1209.95 1445.19,1209.95 1445.77,1209.95 1446.36,1209.95 1446.95,1209.95 1447.53,1209.95 1448.12,1209.95 1448.7,1209.95 1449.29,1209.95 1449.88,1209.95 1450.46,1209.95 1451.05,1209.95 1451.64,1209.95 1452.22,1209.95 1452.81,1209.95 1453.4,1209.95 1453.98,1209.95 1454.57,1209.95 1455.16,1209.95 1455.74,1209.95 1456.33,1209.95 1456.91,1209.95 1457.5,1209.95 1458.09,1209.95 1458.67,1209.95 1459.26,1209.95 1459.85,1209.95 1460.43,1209.95 1461.02,1209.95 1461.61,1209.95 1462.19,1209.95 1462.78,1209.95 1463.37,1209.95 1463.95,1209.95 1464.54,1209.95 1465.12,1209.95 1465.71,1209.95 1466.3,1209.95 1466.88,1209.95 1467.47,1209.95 1468.06,1209.95 1468.64,1209.95 1469.23,1209.95 1469.82,1209.95 1470.4,1209.95 1470.99,1209.95 1471.57,1209.95 1472.16,1209.95 1472.75,1209.95 1473.33,1209.95 1473.92,1209.95 1474.51,1209.95 1475.09,1209.95 1475.68,1209.95 1476.27,1209.95 1476.85,1209.95 1477.44,1209.95 1478.03,1209.95 1478.61,1209.95 1479.2,1209.95 1479.78,1209.95 1480.37,1209.95 1480.96,1209.95 1481.54,1209.95 1482.13,1209.95 1482.72,1209.95 1483.3,1209.95 1483.89,1209.95 1484.48,1209.95 1485.06,1209.95 1485.65,1209.95 1486.24,1209.95 1486.82,1209.95 1487.41,1209.95 1487.99,1209.95 1488.58,1209.95 1489.17,1209.95 1489.75,1209.95 1490.34,1209.95 1490.93,1209.95 1491.51,1209.95 1492.1,1209.95 1492.69,1209.95 1493.27,1209.95 1493.86,1209.95 1494.45,1209.95 1495.03,1209.95 1495.62,1209.95 1496.2,1209.95 1496.79,1209.95 1497.38,1209.95 1497.96,1209.95 1498.55,1209.95 1499.14,1209.95 1499.72,1209.95 1500.31,1209.95 1500.9,1209.95 1501.48,1209.95 1502.07,1209.95 1502.65,1209.95 1503.24,1209.95 1503.83,1209.95 1504.41,1209.95 1505,1209.95 1505.59,1209.95 1506.17,1209.95 1506.76,1209.95 1507.35,1209.95 1507.93,1209.95 1508.52,1209.95 1509.11,1209.95 1509.69,1209.95 1510.28,1209.95 1510.86,1209.95 1511.45,1209.95 1512.04,1209.95 1512.62,1209.95 1513.21,1209.95 1513.8,1209.95 1514.38,1209.95 1514.97,1209.95 1515.56,1209.95 1516.14,1209.95 1516.73,1209.95 1517.32,1209.95 1517.9,1209.95 1518.49,1209.95 1519.07,1209.95 1519.66,1209.95 1520.25,1209.95 1520.83,1209.95 1521.42,1209.95 1522.01,1209.95 1522.59,1209.95 1523.18,1209.95 1523.77,1209.95 1524.35,1209.95 1524.94,1209.95 1525.52,1209.95 1526.11,1209.95 1526.7,1209.95 1527.28,1209.95 1527.87,1209.95 1528.46,1209.95 1529.04,1209.95 1529.63,1209.95 1530.22,1209.95 1530.8,1209.95 1531.39,1209.95 1531.98,1209.95 1532.56,1209.95 1533.15,1209.95 1533.73,1209.95 1534.32,1209.95 1534.91,1209.95 1535.49,1209.95 1536.08,1209.95 1536.67,1209.95 1537.25,1209.95 1537.84,1209.95 1538.43,1209.95 1539.01,1209.95 1539.6,1209.95 1540.19,1209.95 1540.77,1209.95 1541.36,1209.95 1541.94,1209.95 1542.53,1209.95 1543.12,1209.95 1543.7,1209.95 1544.29,1209.95 1544.88,1209.95 1545.46,1209.95 1546.05,1209.95 1546.64,1209.95 1547.22,1209.95 1547.81,1209.95 1548.4,1209.95 1548.98,1209.95 1549.57,1209.95 1550.15,1209.95 1550.74,1209.95 1551.33,1209.95 1551.91,1209.95 1552.5,1209.95 1553.09,1209.95 1553.67,1209.95 1554.26,1209.95 1554.85,1209.95 1555.43,1209.95 1556.02,1209.95 1556.6,1209.95 1557.19,1209.95 1557.78,1209.95 1558.36,1209.95 1558.95,1209.95 1559.54,1209.95 1560.12,1209.95 1560.71,1209.95 1561.3,1209.95 1561.88,1209.95 1562.47,1209.95 1563.06,1209.95 1563.64,1209.95 1564.23,1209.95 1564.81,1209.95 1565.4,1209.95 1565.99,1209.95 1566.57,1209.95 1567.16,1209.95 1567.75,1209.95 1568.33,1209.95 1568.92,1209.95 1569.51,1209.95 1570.09,1209.95 1570.68,1209.95 1571.27,1209.95 1571.85,1209.95 1572.44,1209.95 1573.02,1209.95 1573.61,1209.95 1574.2,1209.95 1574.78,1209.95 1575.37,1209.95 1575.96,1209.95 1576.54,1209.95 1577.13,1209.95 1577.72,1209.95 1578.3,1209.95 1578.89,1209.95 1579.47,1209.95 1580.06,1209.95 1580.65,1209.95 1581.23,1209.95 1581.82,1209.95 1582.41,1209.95 1582.99,1209.95 1583.58,1209.95 1584.17,1209.95 1584.75,1209.95 1585.34,1209.95 1585.93,1209.95 1586.51,1209.95 1587.1,1209.95 1587.68,1209.95 1588.27,1209.95 1588.86,1209.95 1589.44,1209.95 1590.03,1209.95 1590.62,1209.95 1591.2,1209.95 1591.79,1209.95 1592.38,1209.95 1592.96,1209.95 1593.55,1209.95 1594.14,1209.95 1594.72,1209.95 1595.31,1209.95 1595.89,1209.95 1596.48,1209.95 1597.07,1209.95 1597.65,1209.95 1598.24,1209.95 1598.83,1209.95 1599.41,1209.95 1600,1209.95 1600.59,1209.95 1601.17,1209.95 1601.76,1209.95 1602.34,1209.95 1602.93,1209.95 1603.52,1209.95 1604.1,1209.95 1604.69,1209.95 1605.28,1209.95 1605.86,1209.95 1606.45,1209.95 1607.04,1209.95 1607.62,1209.95 1608.21,1209.95 1608.8,1209.95 1609.38,1209.95 1609.97,1209.95 1610.55,1209.95 1611.14,1209.95 1611.73,1209.95 1612.31,1209.95 1612.9,1209.95 1613.49,1209.95 1614.07,1209.95 1614.66,1209.95 1615.25,1209.95 1615.83,1209.95 1616.42,1209.95 1617.01,1209.95 1617.59,1209.95 1618.18,1209.95 1618.76,1209.95 1619.35,1209.95 1619.94,1209.95 1620.52,1209.95 1621.11,1209.95 1621.7,1209.95 1622.28,1209.95 1622.87,1209.95 1623.46,1209.95 1624.04,1209.95 1624.63,1209.95 1625.22,1209.95 1625.8,1209.95 1626.39,1209.95 1626.97,1209.95 1627.56,1209.95 1628.15,1209.95 1628.73,1209.95 1629.32,1209.95 1629.91,1209.95 1630.49,1209.95 1631.08,1209.95 1631.67,1209.95 1632.25,1209.95 1632.84,1209.95 1633.42,1209.95 1634.01,1209.95 1634.6,1209.95 1635.18,1209.95 1635.77,1209.95 1636.36,1209.95 1636.94,1209.95 1637.53,1209.95 1638.12,1209.95 1638.7,1209.95 1639.29,1209.95 1639.88,1209.95 1640.46,1209.95 1641.05,1209.95 1641.63,1209.95 1642.22,1209.95 1642.81,1209.95 1643.39,1209.95 1643.98,1209.95 1644.57,1209.95 1645.15,1209.95 1645.74,1209.95 1646.33,1209.95 1646.91,1209.95 1647.5,1209.95 1648.09,1209.95 1648.67,1209.95 1649.26,1209.95 1649.84,1209.95 1650.43,1209.95 1651.02,1209.95 1651.6,1209.95 1652.19,1209.95 1652.78,1209.95 1653.36,1209.95 1653.95,1209.95 1654.54,1209.95 1655.12,1209.95 1655.71,1209.95 1656.29,1209.95 1656.88,1209.95 1657.47,1209.95 1658.05,1209.95 1658.64,1209.95 1659.23,1209.95 1659.81,1209.95 1660.4,1209.95 1660.99,1209.95 1661.57,1209.95 1662.16,1209.95 1662.75,1209.95 1663.33,1209.95 1663.92,1209.95 1664.5,1209.95 1665.09,1209.95 1665.68,1209.95 1666.26,1209.95 1666.85,1209.95 1667.44,1209.95 1668.02,1209.95 1668.61,1209.95 1669.2,1209.95 1669.78,1209.95 1670.37,1209.95 1670.96,1209.95 1671.54,1209.95 1672.13,1209.95 1672.71,1209.95 1673.3,1209.95 1673.89,1209.95 1674.47,1209.95 1675.06,1209.95 1675.65,1209.95 1676.23,1209.95 1676.82,1209.95 1677.41,1209.95 1677.99,1209.95 1678.58,1209.95 1679.17,1209.95 1679.75,1209.95 1680.34,1209.95 1680.92,1209.95 1681.51,1209.95 1682.1,1209.95 1682.68,1209.95 1683.27,1209.95 1683.86,1209.95 1684.44,1209.95 1685.03,1209.95 1685.62,1209.95 1686.2,1209.95 1686.79,1209.95 1687.37,1209.95 1687.96,1209.95 1688.55,1209.95 1689.13,1209.95 1689.72,1209.95 1690.31,1209.95 1690.89,1209.95 1691.48,1209.95 1692.07,1209.95 1692.65,1209.95 1693.24,1209.95 1693.83,1209.95 1694.41,1209.95 1695,1209.95 1695.58,1209.95 1696.17,1209.95 1696.76,1209.95 1697.34,1209.95 1697.93,1209.95 1698.52,1209.95 1699.1,1209.95 1699.69,1209.95 1700.28,1209.95 1700.86,1209.95 1701.45,1209.95 1702.04,1209.95 1702.62,1209.95 1703.21,1209.95 1703.79,1209.95 1704.38,1209.95 1704.97,1209.95 1705.55,1209.95 1706.14,1209.95 1706.73,1209.95 1707.31,1209.95 1707.9,1209.95 1708.49,1209.95 1709.07,1209.95 1709.66,1209.95 1710.24,1209.95 1710.83,1209.95 1711.42,1209.95 1712,1209.95 1712.59,1209.95 1713.18,1209.95 1713.76,1209.95 1714.35,1209.95 1714.94,1209.95 1715.52,1209.95 1716.11,1209.95 1716.7,1209.95 1717.28,1209.95 1717.87,1209.95 1718.45,1209.95 1719.04,1209.95 1719.63,1209.95 1720.21,1209.95 1720.8,1209.95 1721.39,1209.95 1721.97,1209.95 1722.56,1209.95 1723.15,1209.95 1723.73,1209.95 1724.32,1209.95 1724.91,1209.95 1725.49,1209.95 1726.08,1209.95 1726.66,1209.95 1727.25,1209.95 1727.84,1209.95 1728.42,1209.95 1729.01,1209.95 1729.6,1209.95 1730.18,1209.95 1730.77,1209.95 1731.36,1209.95 1731.94,1209.95 1732.53,1209.95 1733.11,1209.95 1733.7,1209.95 1734.29,1209.95 1734.87,1209.95 1735.46,1209.95 1736.05,1209.95 1736.63,1209.95 1737.22,1209.95 1737.81,1209.95 1738.39,1209.95 1738.98,1209.95 1739.57,1209.95 1740.15,1209.95 1740.74,1209.95 1741.32,1209.95 1741.91,1209.95 1742.5,1209.95 1743.08,1209.95 1743.67,1209.95 1744.26,1209.95 1744.84,1209.95 1745.43,1209.95 1746.02,1209.95 1746.6,1209.95 1747.19,1209.95 1747.78,1209.95 1748.36,1209.95 1748.95,1209.95 1749.53,1209.95 1750.12,1209.95 1750.71,1209.95 1751.29,1209.95 1751.88,1209.95 1752.47,1209.95 1753.05,1209.95 1753.64,1209.95 1754.23,1209.95 1754.81,1209.95 1755.4,1209.95 1755.99,1209.95 1756.57,1209.95 1757.16,1209.95 1757.74,1209.95 1758.33,1209.95 1758.92,1209.95 1759.5,1209.95 1760.09,1209.95 1760.68,1209.95 1761.26,1209.95 1761.85,1209.95 1762.44,1209.95 1763.02,1209.95 1763.61,1209.95 1764.19,1209.95 1764.78,1209.95 1765.37,1209.95 1765.95,1209.95 1766.54,1209.95 1767.13,1209.95 1767.71,1209.95 1768.3,1209.95 1768.89,1209.95 1769.47,1209.95 1770.06,1209.95 1770.65,1209.95 1771.23,1209.95 1771.82,1209.95 1772.4,1209.95 1772.99,1209.95 1773.58,1209.95 1774.16,1209.95 1774.75,1209.95 1775.34,1209.95 1775.92,1209.95 1776.51,1209.95 1777.1,1209.95 1777.68,1209.95 1778.27,1209.95 1778.86,1209.95 1779.44,1209.95 1780.03,1209.95 1780.61,1209.95 1781.2,1209.95 1781.79,1209.95 1782.37,1209.95 1782.96,1209.95 1783.55,1209.95 1784.13,1209.95 1784.72,1209.95 1785.31,1209.95 1785.89,1209.95 1786.48,1209.95 1787.06,1209.95 1787.65,1209.95 1788.24,1209.95 1788.82,1209.95 1789.41,1209.95 1790,1209.95 1790.58,1209.95 1791.17,1209.95 1791.76,1209.95 1792.34,1209.95 1792.93,1209.95 1793.52,1209.95 1794.1,1209.95 1794.69,1209.95 1795.27,1209.95 1795.86,1209.95 1796.45,1209.95 1797.03,1209.95 1797.62,1209.95 1798.21,1209.95 1798.79,1209.95 1799.38,1209.95 1799.97,1209.95 1800.55,1209.95 1801.14,1209.95 1801.73,1209.95 1802.31,1209.95 1802.9,1209.95 1803.48,1209.95 1804.07,1209.95 1804.66,1209.95 1805.24,1209.95 1805.83,1209.95 1806.42,1209.95 1807,1209.95 1807.59,1209.95 1808.18,1209.95 1808.76,1209.95 1809.35,1209.95 1809.94,1209.95 1810.52,1209.95 1811.11,1209.95 1811.69,1209.95 1812.28,1209.95 1812.87,1209.95 1813.45,1209.95 1814.04,1209.95 1814.63,1209.95 1815.21,1209.95 1815.8,1209.95 1816.39,1209.95 1816.97,1209.95 1817.56,1209.95 1818.14,1209.95 1818.73,1209.95 1819.32,1209.95 1819.9,1209.95 1820.49,1209.95 1821.08,1209.95 1821.66,1209.95 1822.25,1209.95 1822.84,1209.95 1823.42,1209.95 1824.01,1209.95 1824.6,1209.95 1825.18,1209.95 1825.77,1209.95 1826.35,1209.95 1826.94,1209.95 1827.53,1209.95 1828.11,1209.95 1828.7,1209.95 1829.29,1209.95 1829.87,1209.95 1830.46,1209.95 1831.05,1209.95 1831.63,1209.95 1832.22,1209.95 1832.81,1209.95 1833.39,1209.95 1833.98,1209.95 1834.56,1209.95 1835.15,1209.95 1835.74,1209.95 1836.32,1209.95 1836.91,1209.95 1837.5,1209.95 1838.08,1209.95 1838.67,1209.95 1839.26,1209.95 1839.84,1209.95 1840.43,1209.95 1841.01,1209.95 1841.6,1209.95 1842.19,1209.95 1842.77,1209.95 1843.36,1209.95 1843.95,1209.95 1844.53,1209.95 1845.12,1209.95 1845.71,1209.95 1846.29,1209.95 1846.88,1209.95 1847.47,1209.95 1848.05,1209.95 1848.64,1209.95 1849.22,1209.95 1849.81,1209.95 1850.4,1209.95 1850.98,1209.95 1851.57,1209.95 1852.16,1209.95 1852.74,1209.95 1853.33,1209.95 1853.92,1209.95 1854.5,1209.95 1855.09,1209.95 1855.68,1209.95 1856.26,1209.95 1856.85,1209.95 1857.43,1209.95 1858.02,1209.95 1858.61,1209.95 1859.19,1209.95 1859.78,1209.95 1860.37,1209.95 1860.95,1209.95 1861.54,1209.95 1862.13,1209.95 1862.71,1209.95 1863.3,1209.95 1863.88,1209.95 1864.47,1209.95 1865.06,1209.95 1865.64,1209.95 1866.23,1209.95 1866.82,1209.95 1867.4,1209.95 1867.99,1209.95 1868.58,1209.95 1869.16,1209.95 1869.75,1209.95 1870.34,1209.95 1870.92,1209.95 1871.51,1209.95 1872.09,1209.95 1872.68,1209.95 1873.27,1209.95 1873.85,1209.95 1874.44,1209.95 1875.03,1209.95 1875.61,1209.95 1876.2,1209.95 1876.79,1209.95 1877.37,1209.95 1877.96,1209.95 1878.55,1209.95 1879.13,1209.95 1879.72,1209.95 1880.3,1209.95 1880.89,1209.95 1881.48,1209.95 1882.06,1209.95 1882.65,1209.95 1883.24,1209.95 1883.82,1209.95 1884.41,1209.95 1885,1209.95 1885.58,1209.95 1886.17,1209.95 1886.76,1209.95 1887.34,1209.95 1887.93,1209.95 1888.51,1209.95 1889.1,1209.95 1889.69,1209.95 1890.27,1209.95 1890.86,1209.95 1891.45,1209.95 1892.03,1209.95 1892.62,1209.95 1893.21,1209.95 1893.79,1209.95 1894.38,1209.95 1894.96,1209.95 1895.55,1209.95 1896.14,1209.95 1896.72,1209.95 1897.31,1209.95 1897.9,1209.95 1898.48,1209.95 1899.07,1209.95 1899.66,1209.95 1900.24,1209.95 1900.83,1209.95 1901.42,1209.95 1902,1209.95 1902.59,1209.95 1903.17,1209.95 1903.76,1209.95 1904.35,1209.95 1904.93,1209.95 1905.52,1209.95 1906.11,1209.95 1906.69,1209.95 1907.28,1209.95 1907.87,1209.95 1908.45,1209.95 1909.04,1209.95 1909.63,1209.95 1910.21,1209.95 1910.8,1209.95 1911.38,1209.95 1911.97,1209.95 1912.56,1209.95 1913.14,1209.95 1913.73,1209.95 1914.32,1209.95 1914.9,1209.95 1915.49,1209.95 1916.08,1209.95 1916.66,1209.95 1917.25,1209.95 1917.83,1209.95 1918.42,1209.95 1919.01,1209.95 1919.59,1209.95 1920.18,1209.95 1920.77,1209.95 1921.35,1209.95 1921.94,1209.95 1922.53,1209.95 1923.11,1209.95 1923.7,1209.95 1924.29,1209.95 1924.87,1209.95 1925.46,1209.95 1926.04,1209.95 1926.63,1209.95 1927.22,1209.95 1927.8,1209.95 1928.39,1209.95 1928.98,1209.95 1929.56,1209.95 1930.15,1209.95 1930.74,1209.95 1931.32,1209.95 1931.91,1209.95 1932.5,1209.95 1933.08,1209.95 1933.67,1209.95 1934.25,1209.95 1934.84,1209.95 1935.43,1209.95 1936.01,1209.95 1936.6,1209.95 1937.19,1209.95 1937.77,1209.95 1938.36,1209.95 1938.95,1209.95 1939.53,1209.95 1940.12,1209.95 1940.71,1209.95 1941.29,1209.95 1941.88,1209.95 1942.46,1209.95 1943.05,1209.95 1943.64,1209.95 1944.22,1209.95 1944.81,1209.95 1945.4,1209.95 1945.98,1209.95 1946.57,1209.95 1947.16,1209.95 1947.74,1209.95 1948.33,1209.95 1948.91,1209.95 1949.5,1209.95 1950.09,1209.95 1950.67,1209.95 1951.26,1209.95 1951.85,1209.95 1952.43,1209.95 1953.02,1209.95 1953.61,1209.95 1954.19,1209.95 1954.78,1209.95 1955.37,1209.95 1955.95,1209.95 1956.54,1209.95 1957.12,1209.95 1957.71,1209.95 1958.3,1209.95 1958.88,1209.95 1959.47,1209.95 1960.06,1209.95 1960.64,1209.95 1961.23,1209.95 1961.82,1209.95 1962.4,1209.95 1962.99,1209.95 1963.58,1209.95 1964.16,1209.95 1964.75,1209.95 1965.33,1209.95 1965.92,1209.95 1966.51,1209.95 1967.09,1209.95 1967.68,1209.95 1968.27,1209.95 1968.85,1209.95 1969.44,1209.95 1970.03,1209.95 1970.61,1209.95 1971.2,1209.95 1971.78,1209.95 1972.37,1209.95 1972.96,1209.95 1973.54,1209.95 1974.13,1209.95 1974.72,1209.95 1975.3,1209.95 1975.89,1209.95 1976.48,1209.95 1977.06,1209.95 1977.65,1209.95 1978.24,1209.95 1978.82,1209.95 1979.41,1209.95 1979.99,1209.95 1980.58,1209.95 1981.17,1209.95 1981.75,1209.95 1982.34,1209.95 1982.93,1209.95 1983.51,1209.95 1984.1,1209.95 1984.69,1209.95 1985.27,1209.95 1985.86,1209.95 1986.45,1209.95 1987.03,1209.95 1987.62,1209.95 1988.2,1209.95 1988.79,1209.95 1989.38,1209.95 1989.96,1209.95 1990.55,1209.95 1991.14,1209.95 1991.72,1209.95 1992.31,1209.95 1992.9,1209.95 1993.48,1209.95 1994.07,1209.95 1994.65,1209.95 1995.24,1209.95 1995.83,1209.95 1996.41,1209.95 1997,1209.95 1997.59,1209.95 1998.17,1209.95 1998.76,1209.95 1999.35,1209.95 1999.93,1209.95 2000.52,1209.95 2001.11,1209.95 2001.69,1209.95 2002.28,1209.95 2002.86,1209.95 2003.45,1209.95 2004.04,1209.95 2004.62,1209.95 2005.21,1209.95 2005.8,1209.95 2006.38,1209.95 2006.97,1209.95 2007.56,1209.95 2008.14,1209.95 2008.73,1209.95 2009.32,1209.95 2009.9,1209.95 2010.49,1209.95 2011.07,1209.95 2011.66,1209.95 2012.25,1209.95 2012.83,1209.95 2013.42,1209.95 2014.01,1209.95 2014.59,1209.95 2015.18,1209.95 2015.77,1209.95 2016.35,1209.95 2016.94,1209.95 2017.53,1209.95 2018.11,1209.95 2018.7,1209.95 2019.28,1209.95 2019.87,1209.95 2020.46,1209.95 2021.04,1209.95 2021.63,1209.95 2022.22,1209.95 2022.8,1209.95 2023.39,1209.95 2023.98,1209.95 2024.56,1209.95 2025.15,1209.95 2025.73,1209.95 2026.32,1209.95 2026.91,1209.95 2027.49,1209.95 2028.08,1209.95 2028.67,1209.95 2029.25,1209.95 2029.84,1209.95 2030.43,1209.95 2031.01,1209.95 2031.6,1209.95 2032.19,1209.95 2032.77,1209.95 2033.36,1209.95 2033.94,1209.95 2034.53,1209.95 2035.12,1209.95 2035.7,1209.95 2036.29,1209.95 2036.88,1209.95 2037.46,1209.95 2038.05,1209.95 2038.64,1209.95 2039.22,1209.95 2039.81,1209.95 2040.4,1209.95 2040.98,1209.95 2041.57,1209.95 2042.15,1209.95 2042.74,1209.95 2043.33,1209.95 2043.91,1209.95 2044.5,1209.95 2045.09,1209.95 2045.67,1209.95 2046.26,1209.95 2046.85,1209.95 2047.43,1209.95 2048.02,1209.95 2048.6,1209.95 2049.19,1209.95 2049.78,1209.95 2050.36,1209.95 2050.95,1209.95 2051.54,1209.95 2052.12,1209.95 2052.71,1209.95 2053.3,1209.95 2053.88,1209.95 2054.47,1209.95 2055.06,1209.95 2055.64,1209.95 2056.23,1209.95 2056.81,1209.95 2057.4,1209.95 2057.99,1209.95 2058.57,1209.95 2059.16,1209.95 2059.75,1209.95 2060.33,1209.95 2060.92,1209.95 2061.51,1209.95 2062.09,1209.95 2062.68,1209.95 2063.27,1209.95 2063.85,1209.95 2064.44,1209.95 2065.02,1209.95 2065.61,1209.95 2066.2,1209.95 2066.78,1209.95 2067.37,1209.95 2067.96,1209.95 2068.54,1209.95 2069.13,1209.95 2069.72,1209.95 2070.3,1209.95 2070.89,1209.95 2071.48,1209.95 2072.06,1209.95 2072.65,1209.95 2073.23,1209.95 2073.82,1209.95 2074.41,1209.95 2074.99,1209.95 2075.58,1209.95 2076.17,1209.95 2076.75,1209.95 2077.34,1209.95 2077.93,1209.95 2078.51,1209.95 2079.1,1209.95 2079.68,1209.95 2080.27,1209.95 2080.86,1209.95 2081.44,1209.95 2082.03,1209.95 2082.62,1209.95 2083.2,1209.95 2083.79,1209.95 2084.38,1209.95 2084.96,1209.95 2085.55,1209.95 2086.14,1209.95 2086.72,1209.95 2087.31,1209.95 2087.89,1209.95 2088.48,1209.95 2089.07,1209.95 2089.65,1209.95 2090.24,1209.95 2090.83,1209.95 2091.41,1209.95 2092,1209.95 2092.59,1209.95 2093.17,1209.95 2093.76,1209.95 2094.35,1209.95 2094.93,1209.95 2095.52,1209.95 2096.1,1209.95 2096.69,1209.95 2097.28,1209.95 2097.86,1209.95 2098.45,1209.95 2099.04,1209.95 2099.62,1209.95 2100.21,1209.95 2100.8,1209.95 2101.38,1209.95 2101.97,1209.95 2102.55,1209.95 2103.14,1209.95 2103.73,1209.95 2104.31,1209.95 2104.9,1209.95 2105.49,1209.95 2106.07,1209.95 2106.66,1209.95 2107.25,1209.95 2107.83,1209.95 2108.42,1209.95 2109.01,1209.95 2109.59,1209.95 2110.18,1209.95 2110.76,1209.95 2111.35,1209.95 2111.94,1209.95 2112.52,1209.95 2113.11,1209.95 2113.7,1209.95 2114.28,1209.95 2114.87,1209.95 2115.46,1209.95 2116.04,1209.95 2116.63,1209.95 2117.22,1209.95 2117.8,1209.95 2118.39,1209.95 2118.97,1209.95 2119.56,1209.95 2120.15,1209.95 2120.73,1209.95 2121.32,1209.95 2121.91,1209.95 2122.49,1209.95 2123.08,1209.95 2123.67,1209.95 2124.25,1209.95 2124.84,1209.95 2125.42,1209.95 2126.01,1209.95 2126.6,1209.95 2127.18,1209.95 2127.77,1209.95 2128.36,1209.95 2128.94,1209.95 2129.53,1209.95 2130.12,1209.95 2130.7,1209.95 2131.29,1209.95 2131.88,1209.95 2132.46,1209.95 2133.05,1209.95 2133.63,1209.95 2134.22,1209.95 2134.81,1209.95 2135.39,1209.95 2135.98,1209.95 2136.57,1209.95 2137.15,1209.95 2137.74,1209.95 2138.33,1209.95 2138.91,1209.95 2139.5,1209.95 2140.09,1209.95 2140.67,1209.95 2141.26,1209.95 2141.84,1209.95 2142.43,1209.95 2143.02,1209.95 2143.6,1209.95 2144.19,1209.95 2144.78,1209.95 2145.36,1209.95 2145.95,1209.95 2146.54,1209.95 2147.12,1209.95 2147.71,1209.95 2148.3,1209.95 2148.88,1209.95 2149.47,1209.95 2150.05,1209.95 2150.64,1209.95 2151.23,1209.95 2151.81,1209.95 2152.4,1209.95 2152.99,1209.95 2153.57,1209.95 2154.16,1209.95 2154.75,1209.95 2155.33,1209.95 2155.92,1209.95 2156.5,1209.95 2157.09,1209.95 2157.68,1209.95 2158.26,1209.95 \"/>\n<path clip-path=\"url(#clip442)\" d=\"M986.025 1209.74 L986.612 1209.74 L987.198 1209.74 L987.785 1209.74 L988.371 1209.74 L988.957 1209.74 L989.544 1209.74 L990.13 1209.74 L990.717 1209.74 L991.303 1209.74 L991.889 1209.74 L992.476 1209.74 L993.062 1209.74 L993.649 1209.74 L994.235 1209.74 L994.822 1209.74 L995.408 1209.74 L995.994 1209.74 L996.581 1209.74 L997.167 1209.74 L997.754 1209.74 L998.34 1209.74 L998.926 1209.74 L999.513 1209.74 L1000.1 1209.74 L1000.69 1209.74 L1001.27 1209.74 L1001.86 1209.74 L1002.44 1209.74 L1003.03 1209.74 L1003.62 1209.74 L1004.2 1209.74 L1004.79 1209.74 L1005.38 1209.74 L1005.96 1209.74 L1006.55 1209.74 L1007.14 1209.74 L1007.72 1209.74 L1008.31 1209.74 L1008.9 1209.74 L1009.48 1209.74 L1010.07 1209.74 L1010.65 1209.74 L1011.24 1209.74 L1011.83 1209.74 L1012.41 1209.74 L1013 1209.74 L1013.59 1209.74 L1014.17 1209.74 L1014.76 1209.74 L1015.35 1209.74 L1015.93 1209.74 L1016.52 1209.74 L1017.11 1209.74 L1017.69 1209.74 L1018.28 1209.74 L1018.86 1209.74 L1019.45 1209.74 L1020.04 1209.74 L1020.62 1209.74 L1021.21 1209.74 L1021.8 1209.74 L1022.38 1209.74 L1022.97 1209.74 L1023.56 1209.74 L1024.14 1209.74 L1024.73 1209.74 L1025.32 1209.74 L1025.9 1209.74 L1026.49 1209.74 L1027.07 1209.74 L1027.66 1209.74 L1028.25 1209.74 L1028.83 1209.74 L1029.42 1209.74 L1030.01 1209.74 L1030.59 1209.74 L1031.18 1209.74 L1031.77 1209.74 L1032.35 1209.74 L1032.94 1209.74 L1033.52 1209.74 L1034.11 1209.74 L1034.7 1209.74 L1035.28 1209.74 L1035.87 1209.74 L1036.46 1209.74 L1037.04 1209.74 L1037.63 1209.74 L1038.22 1209.74 L1038.8 1209.74 L1039.39 1209.74 L1039.98 1209.74 L1040.56 1209.74 L1041.15 1209.74 L1041.73 1209.74 L1042.32 1209.74 L1042.91 1209.74 L1043.49 1209.74 L1044.08 1209.74 L1044.67 1209.74 L1045.25 1209.74 L1045.84 1209.74 L1046.43 1209.74 L1047.01 1209.74 L1047.6 1209.74 L1048.19 1209.74 L1048.77 1209.74 L1049.36 1209.74 L1049.94 1209.74 L1050.53 1209.74 L1051.12 1209.74 L1051.7 1209.74 L1052.29 1209.74 L1052.88 1209.74 L1053.46 1209.74 L1054.05 1209.74 L1054.64 1209.74 L1055.22 1209.74 L1055.81 1209.74 L1056.39 1209.74 L1056.98 1209.74 L1057.57 1209.74 L1058.15 1209.74 L1058.74 1209.74 L1059.33 1209.74 L1059.91 1209.74 L1060.5 1209.74 L1061.09 1209.74 L1061.67 1209.74 L1062.26 1209.74 L1062.85 1209.74 L1063.43 1209.74 L1064.02 1209.74 L1064.6 1209.74 L1065.19 1209.74 L1065.78 1209.74 L1066.36 1209.74 L1066.95 1209.74 L1067.54 1209.74 L1068.12 1209.74 L1068.71 1209.74 L1069.3 1209.74 L1069.88 1209.74 L1070.47 1209.74 L1071.06 1209.74 L1071.64 1209.74 L1072.23 1209.74 L1072.81 1209.74 L1073.4 1209.74 L1073.99 1209.74 L1074.57 1209.74 L1075.16 1209.74 L1075.75 1209.74 L1076.33 1209.74 L1076.92 1209.74 L1077.51 1209.74 L1078.09 1209.74 L1078.68 1209.74 L1079.26 1209.74 L1079.85 1209.74 L1080.44 1209.74 L1081.02 1209.74 L1081.61 1209.74 L1082.2 1209.74 L1082.78 1209.74 L1083.37 1209.74 L1083.96 1209.74 L1084.54 1209.74 L1085.13 1209.74 L1085.72 1209.74 L1086.3 1209.74 L1086.89 1209.74 L1087.47 1209.74 L1088.06 1209.74 L1088.65 1209.74 L1089.23 1209.74 L1089.82 1209.74 L1090.41 1209.74 L1090.99 1209.74 L1091.58 1209.74 L1092.17 1209.74 L1092.75 1209.74 L1093.34 1209.74 L1093.93 1209.74 L1094.51 1209.74 L1095.1 1209.74 L1095.68 1209.74 L1096.27 1209.74 L1096.86 1209.74 L1097.44 1209.74 L1098.03 1209.74 L1098.62 1209.74 L1099.2 1209.74 L1099.79 1209.74 L1100.38 1209.74 L1100.96 1209.74 L1101.55 1209.74 L1102.14 1209.74 L1102.72 1209.74 L1103.31 1209.74 L1103.89 1209.74 L1104.48 1209.74 L1105.07 1209.74 L1105.65 1209.74 L1106.24 1209.74 L1106.83 1209.74 L1107.41 1209.74 L1108 1209.74 L1108.59 1209.74 L1109.17 1209.74 L1109.76 1209.74 L1110.34 1209.74 L1110.93 1209.74 L1111.52 1209.74 L1112.1 1209.74 L1112.69 1209.74 L1113.28 1209.74 L1113.86 1209.74 L1114.45 1209.74 L1115.04 1209.74 L1115.62 1209.74 L1116.21 1209.74 L1116.8 1209.74 L1117.38 1209.74 L1117.97 1209.74 L1118.55 1209.74 L1119.14 1209.74 L1119.73 1209.74 L1120.31 1209.74 L1120.9 1209.74 L1121.49 1209.74 L1122.07 1209.74 L1122.66 1209.74 L1123.25 1209.74 L1123.83 1209.74 L1124.42 1209.74 L1125.01 1209.74 L1125.59 1209.74 L1126.18 1209.74 L1126.76 1209.74 L1127.35 1209.74 L1127.94 1209.74 L1128.52 1209.74 L1129.11 1209.74 L1129.7 1209.74 L1130.28 1209.74 L1130.87 1209.74 L1131.46 1209.74 L1132.04 1209.74 L1132.63 1209.74 L1133.21 1209.74 L1133.8 1209.74 L1134.39 1209.74 L1134.97 1209.74 L1135.56 1209.74 L1136.15 1209.74 L1136.73 1209.74 L1137.32 1209.74 L1137.91 1209.74 L1138.49 1209.74 L1139.08 1209.74 L1139.67 1209.74 L1140.25 1209.74 L1140.84 1209.74 L1141.42 1209.74 L1142.01 1209.74 L1142.6 1209.74 L1143.18 1209.74 L1143.77 1209.74 L1144.36 1209.74 L1144.94 1209.74 L1145.53 1209.74 L1146.12 1209.74 L1146.7 1209.74 L1147.29 1209.74 L1147.88 1209.74 L1148.46 1209.74 L1149.05 1209.74 L1149.63 1209.74 L1150.22 1209.74 L1150.81 1209.74 L1151.39 1209.74 L1151.98 1209.74 L1152.57 1209.74 L1153.15 1209.74 L1153.74 1209.74 L1154.33 1209.74 L1154.91 1209.74 L1155.5 1209.74 L1156.09 1209.74 L1156.67 1209.74 L1157.26 1209.74 L1157.84 1209.74 L1158.43 1209.74 L1159.02 1209.74 L1159.6 1209.74 L1160.19 1209.74 L1160.78 1209.74 L1161.36 1209.74 L1161.95 1209.74 L1162.54 1209.74 L1163.12 1209.74 L1163.71 1209.74 L1164.29 1209.74 L1164.88 1209.74 L1165.47 1209.74 L1166.05 1209.74 L1166.64 1209.74 L1167.23 1209.74 L1167.81 1209.74 L1168.4 1209.74 L1168.99 1209.74 L1169.57 1209.74 L1170.16 1209.74 L1170.75 1209.74 L1171.33 1209.74 L1171.92 1209.74 L1172.5 1209.74 L1173.09 1209.74 L1173.68 1209.74 L1174.26 1209.74 L1174.85 1209.74 L1175.44 1209.74 L1176.02 1209.74 L1176.61 1209.74 L1177.2 1209.74 L1177.78 1209.74 L1178.37 1209.74 L1178.96 1209.74 L1179.54 1209.74 L1180.13 1209.74 L1180.71 1209.74 L1181.3 1209.74 L1181.89 1209.74 L1182.47 1209.74 L1183.06 1209.74 L1183.65 1209.74 L1184.23 1209.74 L1184.82 1209.74 L1185.41 1209.74 L1185.99 1209.74 L1186.58 1209.74 L1187.16 1209.74 L1187.75 1209.74 L1188.34 1209.74 L1188.92 1209.74 L1189.51 1209.74 L1190.1 1209.74 L1190.68 1209.74 L1191.27 1209.74 L1191.86 1209.74 L1192.44 1209.74 L1193.03 1209.74 L1193.62 1209.74 L1194.2 1209.74 L1194.79 1209.74 L1195.37 1209.74 L1195.96 1209.74 L1196.55 1209.74 L1197.13 1209.74 L1197.72 1209.74 L1198.31 1209.74 L1198.89 1209.74 L1199.48 1209.74 L1200.07 1209.74 L1200.65 1209.74 L1201.24 1209.74 L1201.83 1209.74 L1202.41 1209.74 L1203 1209.74 L1203.58 1209.74 L1204.17 1209.74 L1204.76 1209.74 L1205.34 1209.74 L1205.93 1209.74 L1206.52 1209.74 L1207.1 1209.74 L1207.69 1209.74 L1208.28 1209.74 L1208.86 1209.74 L1209.45 1209.74 L1210.03 1209.74 L1210.62 1209.74 L1211.21 1209.74 L1211.79 1209.74 L1212.38 1209.74 L1212.97 1209.74 L1213.55 1209.74 L1214.14 1209.74 L1214.73 1209.74 L1215.31 1209.74 L1215.9 1209.74 L1216.49 1209.74 L1217.07 1209.74 L1217.66 1209.74 L1218.24 1209.74 L1218.83 1209.74 L1219.42 1209.74 L1220 1209.74 L1220.59 1209.74 L1221.18 1209.74 L1221.76 1209.74 L1222.35 1209.74 L1222.94 1209.74 L1223.52 1209.74 L1224.11 1209.74 L1224.7 1209.74 L1225.28 1209.74 L1225.87 1209.74 L1226.45 1209.74 L1227.04 1209.74 L1227.63 1209.74 L1228.21 1209.74 L1228.8 1209.74 L1229.39 1209.74 L1229.97 1209.74 L1230.56 1209.74 L1231.15 1209.74 L1231.73 1209.74 L1232.32 1209.74 L1232.91 1209.74 L1233.49 1209.74 L1234.08 1209.74 L1234.66 1209.74 L1235.25 1209.74 L1235.84 1209.74 L1236.42 1209.74 L1237.01 1209.74 L1237.6 1209.74 L1238.18 1209.74 L1238.77 1209.74 L1239.36 1209.74 L1239.94 1209.74 L1240.53 1209.74 L1241.11 1209.74 L1241.7 1209.74 L1242.29 1209.74 L1242.87 1209.74 L1243.46 1209.74 L1244.05 1209.74 L1244.63 1209.74 L1245.22 1209.74 L1245.81 1209.74 L1246.39 1209.74 L1246.98 1209.74 L1247.57 1209.74 L1248.15 1209.74 L1248.74 1209.74 L1249.32 1209.74 L1249.91 1209.74 L1250.5 1209.74 L1251.08 1209.74 L1251.67 1209.74 L1252.26 1209.74 L1252.84 1209.74 L1253.43 1209.74 L1254.02 1209.74 L1254.6 1209.74 L1255.19 1209.74 L1255.78 1209.74 L1256.36 1209.74 L1256.95 1209.74 L1257.53 1209.74 L1258.12 1209.74 L1258.71 1209.74 L1259.29 1209.74 L1259.88 1209.74 L1260.47 1209.74 L1261.05 1209.74 L1261.64 1209.74 L1262.23 1209.74 L1262.81 1209.74 L1263.4 1209.74 L1263.98 1209.74 L1264.57 1209.74 L1265.16 1209.74 L1265.74 1209.74 L1266.33 1209.74 L1266.92 1209.74 L1267.5 1209.74 L1268.09 1209.74 L1268.68 1209.74 L1269.26 1209.74 L1269.85 1209.74 L1270.44 1209.74 L1271.02 1209.74 L1271.61 1209.74 L1272.19 1209.74 L1272.78 1209.74 L1273.37 1209.74 L1273.95 1209.74 L1274.54 1209.74 L1275.13 1209.74 L1275.71 1209.74 L1276.3 1209.74 L1276.89 1209.74 L1277.47 1209.74 L1278.06 1209.74 L1278.65 1209.74 L1279.23 1209.74 L1279.82 1209.74 L1280.4 1209.74 L1280.99 1209.74 L1281.58 1209.74 L1282.16 1209.74 L1282.75 1209.74 L1283.34 1209.74 L1283.92 1209.74 L1284.51 1209.74 L1285.1 1209.74 L1285.68 1209.74 L1286.27 1209.74 L1286.86 1209.74 L1287.44 1209.74 L1288.03 1209.74 L1288.61 1209.74 L1289.2 1209.74 L1289.79 1209.74 L1290.37 1209.74 L1290.96 1209.74 L1291.55 1209.74 L1292.13 1209.74 L1292.72 1209.74 L1293.31 1209.74 L1293.89 1209.74 L1294.48 1209.74 L1295.06 1209.74 L1295.65 1209.74 L1296.24 1209.74 L1296.82 1209.74 L1297.41 1209.74 L1298 1209.74 L1298.58 1209.74 L1299.17 1209.74 L1299.76 1209.74 L1300.34 1209.74 L1300.93 1209.74 L1301.52 1209.74 L1302.1 1209.74 L1302.69 1209.74 L1303.27 1209.74 L1303.86 1209.74 L1304.45 1209.74 L1305.03 1209.74 L1305.62 1209.74 L1306.21 1209.74 L1306.79 1209.74 L1307.38 1209.74 L1307.97 1209.74 L1308.55 1209.74 L1309.14 1209.74 L1309.73 1209.74 L1310.31 1209.74 L1310.9 1209.74 L1311.48 1209.74 L1312.07 1209.74 L1312.66 1209.74 L1313.24 1209.74 L1313.83 1209.74 L1314.42 1209.74 L1315 1209.74 L1315.59 1209.74 L1316.18 1209.74 L1316.76 1209.74 L1317.35 1209.74 L1317.93 1209.74 L1318.52 1209.74 L1319.11 1209.74 L1319.69 1209.74 L1320.28 1209.74 L1320.87 1209.74 L1321.45 1209.74 L1322.04 1209.74 L1322.63 1209.74 L1323.21 1209.74 L1323.8 1209.74 L1324.39 1209.74 L1324.97 1209.74 L1325.56 1209.74 L1326.14 1209.74 L1326.73 1209.74 L1327.32 1209.74 L1327.9 1209.74 L1328.49 1209.74 L1329.08 1209.74 L1329.66 1209.74 L1330.25 1209.74 L1330.84 1209.74 L1331.42 1209.74 L1332.01 1209.74 L1332.6 1209.74 L1333.18 1209.74 L1333.77 1209.74 L1334.35 1209.74 L1334.94 1209.74 L1335.53 1209.74 L1336.11 1209.74 L1336.7 1209.74 L1337.29 1209.74 L1337.87 1209.74 L1338.46 1209.74 L1339.05 1209.74 L1339.63 1209.74 L1340.22 1209.74 L1340.8 1209.74 L1341.39 1209.74 L1341.98 1209.74 L1342.56 1209.74 L1343.15 1209.74 L1343.74 1209.74 L1344.32 1209.74 L1344.91 1209.74 L1345.5 1209.74 L1346.08 1209.74 L1346.67 1209.74 L1347.26 1209.74 L1347.84 1209.74 L1348.43 1209.74 L1349.01 1209.74 L1349.6 1209.74 L1350.19 1209.74 L1350.77 1209.74 L1351.36 1209.74 L1351.95 1209.74 L1352.53 1209.74 L1353.12 1209.74 L1353.71 1209.74 L1354.29 1209.74 L1354.88 1209.74 L1355.47 1209.74 L1356.05 1209.74 L1356.64 1209.74 L1357.22 1209.74 L1357.81 1209.74 L1358.4 1209.74 L1358.98 1209.74 L1359.57 1209.74 L1360.16 1209.74 L1360.74 1209.74 L1361.33 1209.74 L1361.92 1209.74 L1362.5 1209.74 L1363.09 1209.74 L1363.68 1209.74 L1364.26 1209.74 L1364.85 1209.74 L1365.43 1209.74 L1366.02 1209.74 L1366.61 1209.74 L1367.19 1209.74 L1367.78 1209.74 L1368.37 1209.74 L1368.95 1209.74 L1369.54 1209.74 L1370.13 1209.74 L1370.71 1209.74 L1371.3 1209.74 L1371.88 1209.74 L1372.47 1209.74 L1373.06 1209.74 L1373.64 1209.74 L1374.23 1209.74 L1374.82 1209.74 L1375.4 1209.74 L1375.99 1209.74 L1376.58 1209.74 L1377.16 1209.74 L1377.75 1209.74 L1378.34 1209.74 L1378.92 1209.74 L1379.51 1209.74 L1380.09 1209.74 L1380.68 1209.74 L1381.27 1209.74 L1381.85 1209.74 L1382.44 1209.74 L1383.03 1209.74 L1383.61 1209.74 L1384.2 1209.74 L1384.79 1209.74 L1385.37 1209.74 L1385.96 1209.74 L1386.55 1209.74 L1387.13 1209.74 L1387.72 1209.74 L1388.3 1209.74 L1388.89 1209.74 L1389.48 1209.74 L1390.06 1209.74 L1390.65 1209.74 L1391.24 1209.74 L1391.82 1209.74 L1392.41 1209.74 L1393 1209.74 L1393.58 1209.74 L1394.17 1209.74 L1394.75 1209.74 L1395.34 1209.74 L1395.93 1209.74 L1396.51 1209.74 L1397.1 1209.74 L1397.69 1209.74 L1398.27 1209.74 L1398.86 1209.74 L1399.45 1209.74 L1400.03 1209.74 L1400.62 1209.74 L1401.21 1209.74 L1401.79 1209.74 L1402.38 1209.74 L1402.96 1209.74 L1403.55 1209.74 L1404.14 1209.74 L1404.72 1209.74 L1405.31 1209.74 L1405.9 1209.74 L1406.48 1209.74 L1407.07 1209.74 L1407.66 1209.74 L1408.24 1209.74 L1408.83 1209.74 L1409.42 1209.74 L1410 1209.74 L1410.59 1209.74 L1411.17 1209.74 L1411.76 1209.74 L1412.35 1209.74 L1412.93 1209.74 L1413.52 1209.74 L1414.11 1209.74 L1414.69 1209.74 L1415.28 1209.74 L1415.87 1209.74 L1416.45 1209.74 L1417.04 1209.74 L1417.63 1209.74 L1418.21 1209.74 L1418.8 1209.74 L1419.38 1209.74 L1419.97 1209.74 L1420.56 1209.74 L1421.14 1209.74 L1421.73 1209.74 L1422.32 1209.74 L1422.9 1209.74 L1423.49 1209.74 L1424.08 1209.74 L1424.66 1209.74 L1425.25 1209.74 L1425.83 1209.74 L1426.42 1209.74 L1427.01 1209.74 L1427.59 1209.74 L1428.18 1209.74 L1428.77 1209.74 L1429.35 1209.74 L1429.94 1209.74 L1430.53 1209.74 L1431.11 1209.74 L1431.7 1209.74 L1432.29 1209.74 L1432.87 1209.74 L1433.46 1209.74 L1434.04 1209.74 L1434.63 1209.74 L1435.22 1209.74 L1435.8 1209.74 L1436.39 1209.74 L1436.98 1209.74 L1437.56 1209.74 L1438.15 1209.74 L1438.74 1209.74 L1439.32 1209.74 L1439.91 1209.74 L1440.5 1209.74 L1441.08 1209.74 L1441.67 1209.74 L1442.25 1209.74 L1442.84 1209.74 L1443.43 1209.74 L1444.01 1209.74 L1444.6 1209.74 L1445.19 1209.74 L1445.77 1209.74 L1446.36 1209.74 L1446.95 1209.74 L1447.53 1209.74 L1448.12 1209.74 L1448.7 1209.74 L1449.29 1209.74 L1449.88 1209.74 L1450.46 1209.74 L1451.05 1209.74 L1451.64 1209.74 L1452.22 1209.74 L1452.81 1209.74 L1453.4 1209.74 L1453.98 1209.74 L1454.57 1209.74 L1455.16 1209.74 L1455.74 1209.74 L1456.33 1209.74 L1456.91 1209.74 L1457.5 1209.74 L1458.09 1209.74 L1458.67 1209.74 L1459.26 1209.74 L1459.85 1209.74 L1460.43 1209.74 L1461.02 1209.74 L1461.61 1209.74 L1462.19 1209.74 L1462.78 1209.74 L1463.37 1209.74 L1463.95 1209.74 L1464.54 1209.74 L1465.12 1209.74 L1465.71 1209.74 L1466.3 1209.74 L1466.88 1209.74 L1467.47 1209.74 L1468.06 1209.74 L1468.64 1209.74 L1469.23 1209.74 L1469.82 1209.74 L1470.4 1209.74 L1470.99 1209.74 L1471.57 1209.74 L1472.16 1209.74 L1472.75 1209.74 L1473.33 1209.74 L1473.92 1209.74 L1474.51 1209.74 L1475.09 1209.74 L1475.68 1209.74 L1476.27 1209.74 L1476.85 1209.74 L1477.44 1209.74 L1478.03 1209.74 L1478.61 1209.74 L1479.2 1209.74 L1479.78 1209.74 L1480.37 1209.74 L1480.96 1209.74 L1481.54 1209.74 L1482.13 1209.74 L1482.72 1209.74 L1483.3 1209.74 L1483.89 1209.74 L1484.48 1209.74 L1485.06 1209.74 L1485.65 1209.74 L1486.24 1209.74 L1486.82 1209.74 L1487.41 1209.74 L1487.99 1209.74 L1488.58 1209.74 L1489.17 1209.74 L1489.75 1209.74 L1490.34 1209.74 L1490.93 1209.74 L1491.51 1209.74 L1492.1 1209.74 L1492.69 1209.74 L1493.27 1209.74 L1493.86 1209.74 L1494.45 1209.74 L1495.03 1209.74 L1495.62 1209.74 L1496.2 1209.74 L1496.79 1209.74 L1497.38 1209.74 L1497.96 1209.74 L1498.55 1209.74 L1499.14 1209.74 L1499.72 1209.74 L1500.31 1209.74 L1500.9 1209.74 L1501.48 1209.74 L1502.07 1209.74 L1502.65 1209.74 L1503.24 1209.74 L1503.83 1209.74 L1504.41 1209.74 L1505 1209.74 L1505.59 1209.74 L1506.17 1209.74 L1506.76 1209.74 L1507.35 1209.74 L1507.93 1209.74 L1508.52 1209.74 L1509.11 1209.74 L1509.69 1209.74 L1510.28 1209.74 L1510.86 1209.74 L1511.45 1209.74 L1512.04 1209.74 L1512.62 1209.74 L1513.21 1209.74 L1513.8 1209.74 L1514.38 1209.74 L1514.97 1209.74 L1515.56 1209.74 L1516.14 1209.74 L1516.73 1209.74 L1517.32 1209.74 L1517.9 1209.74 L1518.49 1209.74 L1519.07 1209.74 L1519.66 1209.74 L1520.25 1209.74 L1520.83 1209.74 L1521.42 1209.74 L1522.01 1209.74 L1522.59 1209.74 L1523.18 1209.74 L1523.77 1209.74 L1524.35 1209.74 L1524.94 1209.74 L1525.52 1209.74 L1526.11 1209.74 L1526.7 1209.74 L1527.28 1209.74 L1527.87 1209.74 L1528.46 1209.74 L1529.04 1209.74 L1529.63 1209.74 L1530.22 1209.74 L1530.8 1209.74 L1531.39 1209.74 L1531.98 1209.74 L1532.56 1209.74 L1533.15 1209.74 L1533.73 1209.74 L1534.32 1209.74 L1534.91 1209.74 L1535.49 1209.74 L1536.08 1209.74 L1536.67 1209.74 L1537.25 1209.74 L1537.84 1209.74 L1538.43 1209.74 L1539.01 1209.74 L1539.6 1209.74 L1540.19 1209.74 L1540.77 1209.74 L1541.36 1209.74 L1541.94 1209.74 L1542.53 1209.74 L1543.12 1209.74 L1543.7 1209.74 L1544.29 1209.74 L1544.88 1209.74 L1545.46 1209.74 L1546.05 1209.74 L1546.64 1209.74 L1547.22 1209.74 L1547.81 1209.74 L1548.4 1209.74 L1548.98 1209.74 L1549.57 1209.74 L1550.15 1209.74 L1550.74 1209.74 L1551.33 1209.74 L1551.91 1209.74 L1552.5 1209.74 L1553.09 1209.74 L1553.67 1209.74 L1554.26 1209.74 L1554.85 1209.74 L1555.43 1209.74 L1556.02 1209.74 L1556.6 1209.74 L1557.19 1209.74 L1557.78 1209.74 L1558.36 1209.74 L1558.95 1209.74 L1559.54 1209.74 L1560.12 1209.74 L1560.71 1209.74 L1561.3 1209.74 L1561.88 1209.74 L1562.47 1209.74 L1563.06 1209.74 L1563.64 1209.74 L1564.23 1209.74 L1564.81 1209.74 L1565.4 1209.74 L1565.99 1209.74 L1566.57 1209.74 L1567.16 1209.74 L1567.75 1209.74 L1568.33 1209.74 L1568.92 1209.74 L1569.51 1209.74 L1570.09 1209.74 L1570.68 1209.74 L1571.27 1209.74 L1571.85 1209.74 L1572.44 1209.74 L1573.02 1209.74 L1573.61 1209.74 L1574.2 1209.74 L1574.78 1209.74 L1575.37 1209.74 L1575.96 1209.74 L1576.54 1209.74 L1577.13 1209.74 L1577.72 1209.74 L1578.3 1209.74 L1578.89 1209.74 L1579.47 1209.74 L1580.06 1209.74 L1580.65 1209.74 L1581.23 1209.74 L1581.82 1209.74 L1582.41 1209.74 L1582.99 1209.74 L1583.58 1209.74 L1584.17 1209.74 L1584.75 1209.74 L1585.34 1209.74 L1585.93 1209.74 L1586.51 1209.74 L1587.1 1209.74 L1587.68 1209.74 L1588.27 1209.74 L1588.86 1209.74 L1589.44 1209.74 L1590.03 1209.74 L1590.62 1209.74 L1591.2 1209.74 L1591.79 1209.74 L1592.38 1209.74 L1592.96 1209.74 L1593.55 1209.74 L1594.14 1209.74 L1594.72 1209.74 L1595.31 1209.74 L1595.89 1209.74 L1596.48 1209.74 L1597.07 1209.74 L1597.65 1209.74 L1598.24 1209.74 L1598.83 1209.74 L1599.41 1209.74 L1600 1209.74 L1600.59 1209.74 L1601.17 1209.74 L1601.76 1209.74 L1602.34 1209.74 L1602.93 1209.74 L1603.52 1209.74 L1604.1 1209.74 L1604.69 1209.74 L1605.28 1209.74 L1605.86 1209.74 L1606.45 1209.74 L1607.04 1209.74 L1607.62 1209.74 L1608.21 1209.74 L1608.8 1209.74 L1609.38 1209.74 L1609.97 1209.74 L1610.55 1209.74 L1611.14 1209.74 L1611.73 1209.74 L1612.31 1209.74 L1612.9 1209.74 L1613.49 1209.74 L1614.07 1209.74 L1614.66 1209.74 L1615.25 1209.74 L1615.83 1209.74 L1616.42 1209.74 L1617.01 1209.74 L1617.59 1209.74 L1618.18 1209.74 L1618.76 1209.74 L1619.35 1209.74 L1619.94 1209.74 L1620.52 1209.74 L1621.11 1209.74 L1621.7 1209.74 L1622.28 1209.74 L1622.87 1209.74 L1623.46 1209.74 L1624.04 1209.74 L1624.63 1209.74 L1625.22 1209.74 L1625.8 1209.74 L1626.39 1209.74 L1626.97 1209.74 L1627.56 1209.74 L1628.15 1209.74 L1628.73 1209.74 L1629.32 1209.74 L1629.91 1209.74 L1630.49 1209.74 L1631.08 1209.74 L1631.67 1209.74 L1632.25 1209.74 L1632.84 1209.74 L1633.42 1209.74 L1634.01 1209.74 L1634.6 1209.74 L1635.18 1209.74 L1635.77 1209.74 L1636.36 1209.74 L1636.94 1209.74 L1637.53 1209.74 L1638.12 1209.74 L1638.7 1209.74 L1639.29 1209.74 L1639.88 1209.74 L1640.46 1209.74 L1641.05 1209.74 L1641.63 1209.74 L1642.22 1209.74 L1642.81 1209.74 L1643.39 1209.74 L1643.98 1209.74 L1644.57 1209.74 L1645.15 1209.74 L1645.74 1209.74 L1646.33 1209.74 L1646.91 1209.74 L1647.5 1209.74 L1648.09 1209.74 L1648.67 1209.74 L1649.26 1209.74 L1649.84 1209.74 L1650.43 1209.74 L1651.02 1209.74 L1651.6 1209.74 L1652.19 1209.74 L1652.78 1209.74 L1653.36 1209.74 L1653.95 1209.74 L1654.54 1209.74 L1655.12 1209.74 L1655.71 1209.74 L1656.29 1209.74 L1656.88 1209.74 L1657.47 1209.74 L1658.05 1209.74 L1658.64 1209.74 L1659.23 1209.74 L1659.81 1209.74 L1660.4 1209.74 L1660.99 1209.74 L1661.57 1209.74 L1662.16 1209.74 L1662.75 1209.74 L1663.33 1209.74 L1663.92 1209.74 L1664.5 1209.74 L1665.09 1209.74 L1665.68 1209.74 L1666.26 1209.74 L1666.85 1209.74 L1667.44 1209.74 L1668.02 1209.74 L1668.61 1209.74 L1669.2 1209.74 L1669.78 1209.74 L1670.37 1209.74 L1670.96 1209.74 L1671.54 1209.74 L1672.13 1209.74 L1672.71 1209.74 L1673.3 1209.74 L1673.89 1209.74 L1674.47 1209.74 L1675.06 1209.74 L1675.65 1209.74 L1676.23 1209.74 L1676.82 1209.74 L1677.41 1209.74 L1677.99 1209.74 L1678.58 1209.74 L1679.17 1209.74 L1679.75 1209.74 L1680.34 1209.74 L1680.92 1209.74 L1681.51 1209.74 L1682.1 1209.74 L1682.68 1209.74 L1683.27 1209.74 L1683.86 1209.74 L1684.44 1209.74 L1685.03 1209.74 L1685.62 1209.74 L1686.2 1209.74 L1686.79 1209.74 L1687.37 1209.74 L1687.96 1209.74 L1688.55 1209.74 L1689.13 1209.74 L1689.72 1209.74 L1690.31 1209.74 L1690.89 1209.74 L1691.48 1209.74 L1692.07 1209.74 L1692.65 1209.74 L1693.24 1209.74 L1693.83 1209.74 L1694.41 1209.74 L1695 1209.74 L1695.58 1209.74 L1696.17 1209.74 L1696.76 1209.74 L1697.34 1209.74 L1697.93 1209.74 L1698.52 1209.74 L1699.1 1209.74 L1699.69 1209.74 L1700.28 1209.74 L1700.86 1209.74 L1701.45 1209.74 L1702.04 1209.74 L1702.62 1209.74 L1703.21 1209.74 L1703.79 1209.74 L1704.38 1209.74 L1704.97 1209.74 L1705.55 1209.74 L1706.14 1209.74 L1706.73 1209.74 L1707.31 1209.74 L1707.9 1209.74 L1708.49 1209.74 L1709.07 1209.74 L1709.66 1209.74 L1710.24 1209.74 L1710.83 1209.74 L1711.42 1209.74 L1712 1209.74 L1712.59 1209.74 L1713.18 1209.74 L1713.76 1209.74 L1714.35 1209.74 L1714.94 1209.74 L1715.52 1209.74 L1716.11 1209.74 L1716.7 1209.74 L1717.28 1209.74 L1717.87 1209.74 L1718.45 1209.74 L1719.04 1209.74 L1719.63 1209.74 L1720.21 1209.74 L1720.8 1209.74 L1721.39 1209.74 L1721.97 1209.74 L1722.56 1209.74 L1723.15 1209.74 L1723.73 1209.74 L1724.32 1209.74 L1724.91 1209.74 L1725.49 1209.74 L1726.08 1209.74 L1726.66 1209.74 L1727.25 1209.74 L1727.84 1209.74 L1728.42 1209.74 L1729.01 1209.74 L1729.6 1209.74 L1730.18 1209.74 L1730.77 1209.74 L1731.36 1209.74 L1731.94 1209.74 L1732.53 1209.74 L1733.11 1209.74 L1733.7 1209.74 L1734.29 1209.74 L1734.87 1209.74 L1735.46 1209.74 L1736.05 1209.74 L1736.63 1209.74 L1737.22 1209.74 L1737.81 1209.74 L1738.39 1209.74 L1738.98 1209.74 L1739.57 1209.74 L1740.15 1209.74 L1740.74 1209.74 L1741.32 1209.74 L1741.91 1209.74 L1742.5 1209.74 L1743.08 1209.74 L1743.67 1209.74 L1744.26 1209.74 L1744.84 1209.74 L1745.43 1209.74 L1746.02 1209.74 L1746.6 1209.74 L1747.19 1209.74 L1747.78 1209.74 L1748.36 1209.74 L1748.95 1209.74 L1749.53 1209.74 L1750.12 1209.74 L1750.71 1209.74 L1751.29 1209.74 L1751.88 1209.74 L1752.47 1209.74 L1753.05 1209.74 L1753.64 1209.74 L1754.23 1209.74 L1754.81 1209.74 L1755.4 1209.74 L1755.99 1209.74 L1756.57 1209.74 L1757.16 1209.74 L1757.74 1209.74 L1758.33 1209.74 L1758.92 1209.74 L1759.5 1209.74 L1760.09 1209.74 L1760.68 1209.74 L1761.26 1209.74 L1761.85 1209.74 L1762.44 1209.74 L1763.02 1209.74 L1763.61 1209.74 L1764.19 1209.74 L1764.78 1209.74 L1765.37 1209.74 L1765.95 1209.74 L1766.54 1209.74 L1767.13 1209.74 L1767.71 1209.74 L1768.3 1209.74 L1768.89 1209.74 L1769.47 1209.74 L1770.06 1209.74 L1770.65 1209.74 L1771.23 1209.74 L1771.82 1209.74 L1772.4 1209.74 L1772.99 1209.74 L1773.58 1209.74 L1774.16 1209.74 L1774.75 1209.74 L1775.34 1209.74 L1775.92 1209.74 L1776.51 1209.74 L1777.1 1209.74 L1777.68 1209.74 L1778.27 1209.74 L1778.86 1209.74 L1779.44 1209.74 L1780.03 1209.74 L1780.61 1209.74 L1781.2 1209.74 L1781.79 1209.74 L1782.37 1209.74 L1782.96 1209.74 L1783.55 1209.74 L1784.13 1209.74 L1784.72 1209.74 L1785.31 1209.74 L1785.89 1209.74 L1786.48 1209.74 L1787.06 1209.74 L1787.65 1209.74 L1788.24 1209.74 L1788.82 1209.74 L1789.41 1209.74 L1790 1209.74 L1790.58 1209.74 L1791.17 1209.74 L1791.76 1209.74 L1792.34 1209.74 L1792.93 1209.74 L1793.52 1209.74 L1794.1 1209.74 L1794.69 1209.74 L1795.27 1209.74 L1795.86 1209.74 L1796.45 1209.74 L1797.03 1209.74 L1797.62 1209.74 L1798.21 1209.74 L1798.79 1209.74 L1799.38 1209.74 L1799.97 1209.74 L1800.55 1209.74 L1801.14 1209.74 L1801.73 1209.74 L1802.31 1209.74 L1802.9 1209.74 L1803.48 1209.74 L1804.07 1209.74 L1804.66 1209.74 L1805.24 1209.74 L1805.83 1209.74 L1806.42 1209.74 L1807 1209.74 L1807.59 1209.74 L1808.18 1209.74 L1808.76 1209.74 L1809.35 1209.74 L1809.94 1209.74 L1810.52 1209.74 L1811.11 1209.74 L1811.69 1209.74 L1812.28 1209.74 L1812.87 1209.74 L1813.45 1209.74 L1814.04 1209.74 L1814.63 1209.74 L1815.21 1209.74 L1815.8 1209.74 L1816.39 1209.74 L1816.97 1209.74 L1817.56 1209.74 L1818.14 1209.74 L1818.73 1209.74 L1819.32 1209.74 L1819.9 1209.74 L1820.49 1209.74 L1821.08 1209.74 L1821.66 1209.74 L1822.25 1209.74 L1822.84 1209.74 L1823.42 1209.74 L1824.01 1209.74 L1824.6 1209.74 L1825.18 1209.74 L1825.77 1209.74 L1826.35 1209.74 L1826.94 1209.74 L1827.53 1209.74 L1828.11 1209.74 L1828.7 1209.74 L1829.29 1209.74 L1829.87 1209.74 L1830.46 1209.74 L1831.05 1209.74 L1831.63 1209.74 L1832.22 1209.74 L1832.81 1209.74 L1833.39 1209.74 L1833.98 1209.74 L1834.56 1209.74 L1835.15 1209.74 L1835.74 1209.74 L1836.32 1209.74 L1836.91 1209.74 L1837.5 1209.74 L1838.08 1209.74 L1838.67 1209.74 L1839.26 1209.74 L1839.84 1209.74 L1840.43 1209.74 L1841.01 1209.74 L1841.6 1209.74 L1842.19 1209.74 L1842.77 1209.74 L1843.36 1209.74 L1843.95 1209.74 L1844.53 1209.74 L1845.12 1209.74 L1845.71 1209.74 L1846.29 1209.74 L1846.88 1209.74 L1847.47 1209.74 L1848.05 1209.74 L1848.64 1209.74 L1849.22 1209.74 L1849.81 1209.74 L1850.4 1209.74 L1850.98 1209.74 L1851.57 1209.74 L1852.16 1209.74 L1852.74 1209.74 L1853.33 1209.74 L1853.92 1209.74 L1854.5 1209.74 L1855.09 1209.74 L1855.68 1209.74 L1856.26 1209.74 L1856.85 1209.74 L1857.43 1209.74 L1858.02 1209.74 L1858.61 1209.74 L1859.19 1209.74 L1859.78 1209.74 L1860.37 1209.74 L1860.95 1209.74 L1861.54 1209.74 L1862.13 1209.74 L1862.71 1209.74 L1863.3 1209.74 L1863.88 1209.74 L1864.47 1209.74 L1865.06 1209.74 L1865.64 1209.74 L1866.23 1209.74 L1866.82 1209.74 L1867.4 1209.74 L1867.99 1209.74 L1868.58 1209.74 L1869.16 1209.74 L1869.75 1209.74 L1870.34 1209.74 L1870.92 1209.74 L1871.51 1209.74 L1872.09 1209.74 L1872.68 1209.74 L1873.27 1209.74 L1873.85 1209.74 L1874.44 1209.74 L1875.03 1209.74 L1875.61 1209.74 L1876.2 1209.74 L1876.79 1209.74 L1877.37 1209.74 L1877.96 1209.74 L1878.55 1209.74 L1879.13 1209.74 L1879.72 1209.74 L1880.3 1209.74 L1880.89 1209.74 L1881.48 1209.74 L1882.06 1209.74 L1882.65 1209.74 L1883.24 1209.74 L1883.82 1209.74 L1884.41 1209.74 L1885 1209.74 L1885.58 1209.74 L1886.17 1209.74 L1886.76 1209.74 L1887.34 1209.74 L1887.93 1209.74 L1888.51 1209.74 L1889.1 1209.74 L1889.69 1209.74 L1890.27 1209.74 L1890.86 1209.74 L1891.45 1209.74 L1892.03 1209.74 L1892.62 1209.74 L1893.21 1209.74 L1893.79 1209.74 L1894.38 1209.74 L1894.96 1209.74 L1895.55 1209.74 L1896.14 1209.74 L1896.72 1209.74 L1897.31 1209.74 L1897.9 1209.74 L1898.48 1209.74 L1899.07 1209.74 L1899.66 1209.74 L1900.24 1209.74 L1900.83 1209.74 L1901.42 1209.74 L1902 1209.74 L1902.59 1209.74 L1903.17 1209.74 L1903.76 1209.74 L1904.35 1209.74 L1904.93 1209.74 L1905.52 1209.74 L1906.11 1209.74 L1906.69 1209.74 L1907.28 1209.74 L1907.87 1209.74 L1908.45 1209.74 L1909.04 1209.74 L1909.63 1209.74 L1910.21 1209.74 L1910.8 1209.74 L1911.38 1209.74 L1911.97 1209.74 L1912.56 1209.74 L1913.14 1209.74 L1913.73 1209.74 L1914.32 1209.74 L1914.9 1209.74 L1915.49 1209.74 L1916.08 1209.74 L1916.66 1209.74 L1917.25 1209.74 L1917.83 1209.74 L1918.42 1209.74 L1919.01 1209.74 L1919.59 1209.74 L1920.18 1209.74 L1920.77 1209.74 L1921.35 1209.74 L1921.94 1209.74 L1922.53 1209.74 L1923.11 1209.74 L1923.7 1209.74 L1924.29 1209.74 L1924.87 1209.74 L1925.46 1209.74 L1926.04 1209.74 L1926.63 1209.74 L1927.22 1209.74 L1927.8 1209.74 L1928.39 1209.74 L1928.98 1209.74 L1929.56 1209.74 L1930.15 1209.74 L1930.74 1209.74 L1931.32 1209.74 L1931.91 1209.74 L1932.5 1209.74 L1933.08 1209.74 L1933.67 1209.74 L1934.25 1209.74 L1934.84 1209.74 L1935.43 1209.74 L1936.01 1209.74 L1936.6 1209.74 L1937.19 1209.74 L1937.77 1209.74 L1938.36 1209.74 L1938.95 1209.74 L1939.53 1209.74 L1940.12 1209.74 L1940.71 1209.74 L1941.29 1209.74 L1941.88 1209.74 L1942.46 1209.74 L1943.05 1209.74 L1943.64 1209.74 L1944.22 1209.74 L1944.81 1209.74 L1945.4 1209.74 L1945.98 1209.74 L1946.57 1209.74 L1947.16 1209.74 L1947.74 1209.74 L1948.33 1209.74 L1948.91 1209.74 L1949.5 1209.74 L1950.09 1209.74 L1950.67 1209.74 L1951.26 1209.74 L1951.85 1209.74 L1952.43 1209.74 L1953.02 1209.74 L1953.61 1209.74 L1954.19 1209.74 L1954.78 1209.74 L1955.37 1209.74 L1955.95 1209.74 L1956.54 1209.74 L1957.12 1209.74 L1957.71 1209.74 L1958.3 1209.74 L1958.88 1209.74 L1959.47 1209.74 L1960.06 1209.74 L1960.64 1209.74 L1961.23 1209.74 L1961.82 1209.74 L1962.4 1209.74 L1962.99 1209.74 L1963.58 1209.74 L1964.16 1209.74 L1964.75 1209.74 L1965.33 1209.74 L1965.92 1209.74 L1966.51 1209.74 L1967.09 1209.74 L1967.68 1209.74 L1968.27 1209.74 L1968.85 1209.74 L1969.44 1209.74 L1970.03 1209.74 L1970.61 1209.74 L1971.2 1209.74 L1971.78 1209.74 L1972.37 1209.74 L1972.96 1209.74 L1973.54 1209.74 L1974.13 1209.74 L1974.72 1209.74 L1975.3 1209.74 L1975.89 1209.74 L1976.48 1209.74 L1977.06 1209.74 L1977.65 1209.74 L1978.24 1209.74 L1978.82 1209.74 L1979.41 1209.74 L1979.99 1209.74 L1980.58 1209.74 L1981.17 1209.74 L1981.75 1209.74 L1982.34 1209.74 L1982.93 1209.74 L1983.51 1209.74 L1984.1 1209.74 L1984.69 1209.74 L1985.27 1209.74 L1985.86 1209.74 L1986.45 1209.74 L1987.03 1209.74 L1987.62 1209.74 L1988.2 1209.74 L1988.79 1209.74 L1989.38 1209.74 L1989.96 1209.74 L1990.55 1209.74 L1991.14 1209.74 L1991.72 1209.74 L1992.31 1209.74 L1992.9 1209.74 L1993.48 1209.74 L1994.07 1209.74 L1994.65 1209.74 L1995.24 1209.74 L1995.83 1209.74 L1996.41 1209.74 L1997 1209.74 L1997.59 1209.74 L1998.17 1209.74 L1998.76 1209.74 L1999.35 1209.74 L1999.93 1209.74 L2000.52 1209.74 L2001.11 1209.74 L2001.69 1209.74 L2002.28 1209.74 L2002.86 1209.74 L2003.45 1209.74 L2004.04 1209.74 L2004.62 1209.74 L2005.21 1209.74 L2005.8 1209.74 L2006.38 1209.74 L2006.97 1209.74 L2007.56 1209.74 L2008.14 1209.74 L2008.73 1209.74 L2009.32 1209.74 L2009.9 1209.74 L2010.49 1209.74 L2011.07 1209.74 L2011.66 1209.74 L2012.25 1209.74 L2012.83 1209.74 L2013.42 1209.74 L2014.01 1209.74 L2014.59 1209.74 L2015.18 1209.74 L2015.77 1209.74 L2016.35 1209.74 L2016.94 1209.74 L2017.53 1209.74 L2018.11 1209.74 L2018.7 1209.74 L2019.28 1209.74 L2019.87 1209.74 L2020.46 1209.74 L2021.04 1209.74 L2021.63 1209.74 L2022.22 1209.74 L2022.8 1209.74 L2023.39 1209.74 L2023.98 1209.74 L2024.56 1209.74 L2025.15 1209.74 L2025.73 1209.74 L2026.32 1209.74 L2026.91 1209.74 L2027.49 1209.74 L2028.08 1209.74 L2028.67 1209.74 L2029.25 1209.74 L2029.84 1209.74 L2030.43 1209.74 L2031.01 1209.74 L2031.6 1209.74 L2032.19 1209.74 L2032.77 1209.74 L2033.36 1209.74 L2033.94 1209.74 L2034.53 1209.74 L2035.12 1209.74 L2035.7 1209.74 L2036.29 1209.74 L2036.88 1209.74 L2037.46 1209.74 L2038.05 1209.74 L2038.64 1209.74 L2039.22 1209.74 L2039.81 1209.74 L2040.4 1209.74 L2040.98 1209.74 L2041.57 1209.74 L2042.15 1209.74 L2042.74 1209.74 L2043.33 1209.74 L2043.91 1209.74 L2044.5 1209.74 L2045.09 1209.74 L2045.67 1209.74 L2046.26 1209.74 L2046.85 1209.74 L2047.43 1209.74 L2048.02 1209.74 L2048.6 1209.74 L2049.19 1209.74 L2049.78 1209.74 L2050.36 1209.74 L2050.95 1209.74 L2051.54 1209.74 L2052.12 1209.74 L2052.71 1209.74 L2053.3 1209.74 L2053.88 1209.74 L2054.47 1209.74 L2055.06 1209.74 L2055.64 1209.74 L2056.23 1209.74 L2056.81 1209.74 L2057.4 1209.74 L2057.99 1209.74 L2058.57 1209.74 L2059.16 1209.74 L2059.75 1209.74 L2060.33 1209.74 L2060.92 1209.74 L2061.51 1209.74 L2062.09 1209.74 L2062.68 1209.74 L2063.27 1209.74 L2063.85 1209.74 L2064.44 1209.74 L2065.02 1209.74 L2065.61 1209.74 L2066.2 1209.74 L2066.78 1209.74 L2067.37 1209.74 L2067.96 1209.74 L2068.54 1209.74 L2069.13 1209.74 L2069.72 1209.74 L2070.3 1209.74 L2070.89 1209.74 L2071.48 1209.74 L2072.06 1209.74 L2072.65 1209.74 L2073.23 1209.74 L2073.82 1209.74 L2074.41 1209.74 L2074.99 1209.74 L2075.58 1209.74 L2076.17 1209.74 L2076.75 1209.74 L2077.34 1209.74 L2077.93 1209.74 L2078.51 1209.74 L2079.1 1209.74 L2079.68 1209.74 L2080.27 1209.74 L2080.86 1209.74 L2081.44 1209.74 L2082.03 1209.74 L2082.62 1209.74 L2083.2 1209.74 L2083.79 1209.74 L2084.38 1209.74 L2084.96 1209.74 L2085.55 1209.74 L2086.14 1209.74 L2086.72 1209.74 L2087.31 1209.74 L2087.89 1209.74 L2088.48 1209.74 L2089.07 1209.74 L2089.65 1209.74 L2090.24 1209.74 L2090.83 1209.74 L2091.41 1209.74 L2092 1209.74 L2092.59 1209.74 L2093.17 1209.74 L2093.76 1209.74 L2094.35 1209.74 L2094.93 1209.74 L2095.52 1209.74 L2096.1 1209.74 L2096.69 1209.74 L2097.28 1209.74 L2097.86 1209.74 L2098.45 1209.74 L2099.04 1209.74 L2099.62 1209.74 L2100.21 1209.74 L2100.8 1209.74 L2101.38 1209.74 L2101.97 1209.74 L2102.55 1209.74 L2103.14 1209.74 L2103.73 1209.74 L2104.31 1209.74 L2104.9 1209.74 L2105.49 1209.74 L2106.07 1209.74 L2106.66 1209.74 L2107.25 1209.74 L2107.83 1209.74 L2108.42 1209.74 L2109.01 1209.74 L2109.59 1209.74 L2110.18 1209.74 L2110.76 1209.74 L2111.35 1209.74 L2111.94 1209.74 L2112.52 1209.74 L2113.11 1209.74 L2113.7 1209.74 L2114.28 1209.74 L2114.87 1209.74 L2115.46 1209.74 L2116.04 1209.74 L2116.63 1209.74 L2117.22 1209.74 L2117.8 1209.74 L2118.39 1209.74 L2118.97 1209.74 L2119.56 1209.74 L2120.15 1209.74 L2120.73 1209.74 L2121.32 1209.74 L2121.91 1209.74 L2122.49 1209.74 L2123.08 1209.74 L2123.67 1209.74 L2124.25 1209.74 L2124.84 1209.74 L2125.42 1209.74 L2126.01 1209.74 L2126.6 1209.74 L2127.18 1209.74 L2127.77 1209.74 L2128.36 1209.74 L2128.94 1209.74 L2129.53 1209.74 L2130.12 1209.74 L2130.7 1209.74 L2131.29 1209.74 L2131.88 1209.74 L2132.46 1209.74 L2133.05 1209.74 L2133.63 1209.74 L2134.22 1209.74 L2134.81 1209.74 L2135.39 1209.74 L2135.98 1209.74 L2136.57 1209.74 L2137.15 1209.74 L2137.74 1209.74 L2138.33 1209.74 L2138.91 1209.74 L2139.5 1209.74 L2140.09 1209.74 L2140.67 1209.74 L2141.26 1209.74 L2141.84 1209.74 L2142.43 1209.74 L2143.02 1209.74 L2143.6 1209.74 L2144.19 1209.74 L2144.78 1209.74 L2145.36 1209.74 L2145.95 1209.74 L2146.54 1209.74 L2147.12 1209.74 L2147.71 1209.74 L2148.3 1209.74 L2148.88 1209.74 L2149.47 1209.74 L2150.05 1209.74 L2150.64 1209.74 L2151.23 1209.74 L2151.81 1209.74 L2152.4 1209.74 L2152.99 1209.74 L2153.57 1209.74 L2154.16 1209.74 L2154.75 1209.74 L2155.33 1209.74 L2155.92 1209.74 L2156.5 1209.74 L2157.09 1209.74 L2157.68 1209.74 L2158.26 1209.74 L2158.26 1209.53 L2157.68 1209.53 L2157.09 1209.53 L2156.5 1209.53 L2155.92 1209.53 L2155.33 1209.53 L2154.75 1209.53 L2154.16 1209.53 L2153.57 1209.53 L2152.99 1209.53 L2152.4 1209.53 L2151.81 1209.53 L2151.23 1209.53 L2150.64 1209.53 L2150.05 1209.53 L2149.47 1209.53 L2148.88 1209.53 L2148.3 1209.53 L2147.71 1209.53 L2147.12 1209.53 L2146.54 1209.53 L2145.95 1209.53 L2145.36 1209.53 L2144.78 1209.53 L2144.19 1209.53 L2143.6 1209.53 L2143.02 1209.53 L2142.43 1209.53 L2141.84 1209.53 L2141.26 1209.53 L2140.67 1209.53 L2140.09 1209.53 L2139.5 1209.53 L2138.91 1209.53 L2138.33 1209.53 L2137.74 1209.53 L2137.15 1209.53 L2136.57 1209.53 L2135.98 1209.53 L2135.39 1209.53 L2134.81 1209.53 L2134.22 1209.53 L2133.63 1209.53 L2133.05 1209.53 L2132.46 1209.53 L2131.88 1209.53 L2131.29 1209.53 L2130.7 1209.53 L2130.12 1209.53 L2129.53 1209.53 L2128.94 1209.53 L2128.36 1209.53 L2127.77 1209.53 L2127.18 1209.53 L2126.6 1209.53 L2126.01 1209.53 L2125.42 1209.53 L2124.84 1209.53 L2124.25 1209.53 L2123.67 1209.53 L2123.08 1209.53 L2122.49 1209.53 L2121.91 1209.53 L2121.32 1209.53 L2120.73 1209.53 L2120.15 1209.53 L2119.56 1209.53 L2118.97 1209.53 L2118.39 1209.53 L2117.8 1209.53 L2117.22 1209.53 L2116.63 1209.53 L2116.04 1209.53 L2115.46 1209.53 L2114.87 1209.53 L2114.28 1209.53 L2113.7 1209.53 L2113.11 1209.53 L2112.52 1209.53 L2111.94 1209.53 L2111.35 1209.53 L2110.76 1209.53 L2110.18 1209.53 L2109.59 1209.53 L2109.01 1209.53 L2108.42 1209.53 L2107.83 1209.53 L2107.25 1209.53 L2106.66 1209.53 L2106.07 1209.53 L2105.49 1209.53 L2104.9 1209.53 L2104.31 1209.53 L2103.73 1209.53 L2103.14 1209.53 L2102.55 1209.53 L2101.97 1209.53 L2101.38 1209.53 L2100.8 1209.53 L2100.21 1209.53 L2099.62 1209.53 L2099.04 1209.53 L2098.45 1209.53 L2097.86 1209.53 L2097.28 1209.53 L2096.69 1209.53 L2096.1 1209.53 L2095.52 1209.53 L2094.93 1209.53 L2094.35 1209.53 L2093.76 1209.53 L2093.17 1209.53 L2092.59 1209.53 L2092 1209.53 L2091.41 1209.53 L2090.83 1209.53 L2090.24 1209.53 L2089.65 1209.53 L2089.07 1209.53 L2088.48 1209.53 L2087.89 1209.53 L2087.31 1209.53 L2086.72 1209.53 L2086.14 1209.53 L2085.55 1209.53 L2084.96 1209.53 L2084.38 1209.53 L2083.79 1209.53 L2083.2 1209.53 L2082.62 1209.53 L2082.03 1209.53 L2081.44 1209.53 L2080.86 1209.53 L2080.27 1209.53 L2079.68 1209.53 L2079.1 1209.53 L2078.51 1209.53 L2077.93 1209.53 L2077.34 1209.53 L2076.75 1209.53 L2076.17 1209.53 L2075.58 1209.53 L2074.99 1209.53 L2074.41 1209.53 L2073.82 1209.53 L2073.23 1209.53 L2072.65 1209.53 L2072.06 1209.53 L2071.48 1209.53 L2070.89 1209.53 L2070.3 1209.53 L2069.72 1209.53 L2069.13 1209.53 L2068.54 1209.53 L2067.96 1209.53 L2067.37 1209.53 L2066.78 1209.53 L2066.2 1209.53 L2065.61 1209.53 L2065.02 1209.53 L2064.44 1209.53 L2063.85 1209.53 L2063.27 1209.53 L2062.68 1209.53 L2062.09 1209.53 L2061.51 1209.53 L2060.92 1209.53 L2060.33 1209.53 L2059.75 1209.53 L2059.16 1209.53 L2058.57 1209.53 L2057.99 1209.53 L2057.4 1209.53 L2056.81 1209.53 L2056.23 1209.53 L2055.64 1209.53 L2055.06 1209.53 L2054.47 1209.53 L2053.88 1209.53 L2053.3 1209.53 L2052.71 1209.53 L2052.12 1209.53 L2051.54 1209.53 L2050.95 1209.53 L2050.36 1209.53 L2049.78 1209.53 L2049.19 1209.53 L2048.6 1209.53 L2048.02 1209.53 L2047.43 1209.53 L2046.85 1209.53 L2046.26 1209.53 L2045.67 1209.53 L2045.09 1209.53 L2044.5 1209.53 L2043.91 1209.53 L2043.33 1209.53 L2042.74 1209.53 L2042.15 1209.53 L2041.57 1209.53 L2040.98 1209.53 L2040.4 1209.53 L2039.81 1209.53 L2039.22 1209.53 L2038.64 1209.53 L2038.05 1209.53 L2037.46 1209.53 L2036.88 1209.53 L2036.29 1209.53 L2035.7 1209.53 L2035.12 1209.53 L2034.53 1209.53 L2033.94 1209.53 L2033.36 1209.53 L2032.77 1209.53 L2032.19 1209.53 L2031.6 1209.53 L2031.01 1209.53 L2030.43 1209.53 L2029.84 1209.53 L2029.25 1209.53 L2028.67 1209.53 L2028.08 1209.53 L2027.49 1209.53 L2026.91 1209.53 L2026.32 1209.53 L2025.73 1209.53 L2025.15 1209.53 L2024.56 1209.53 L2023.98 1209.53 L2023.39 1209.53 L2022.8 1209.53 L2022.22 1209.53 L2021.63 1209.53 L2021.04 1209.53 L2020.46 1209.53 L2019.87 1209.53 L2019.28 1209.53 L2018.7 1209.53 L2018.11 1209.53 L2017.53 1209.53 L2016.94 1209.53 L2016.35 1209.53 L2015.77 1209.53 L2015.18 1209.53 L2014.59 1209.53 L2014.01 1209.53 L2013.42 1209.53 L2012.83 1209.53 L2012.25 1209.53 L2011.66 1209.53 L2011.07 1209.53 L2010.49 1209.53 L2009.9 1209.53 L2009.32 1209.53 L2008.73 1209.53 L2008.14 1209.53 L2007.56 1209.53 L2006.97 1209.53 L2006.38 1209.53 L2005.8 1209.53 L2005.21 1209.53 L2004.62 1209.53 L2004.04 1209.53 L2003.45 1209.53 L2002.86 1209.53 L2002.28 1209.53 L2001.69 1209.53 L2001.11 1209.53 L2000.52 1209.53 L1999.93 1209.53 L1999.35 1209.53 L1998.76 1209.53 L1998.17 1209.53 L1997.59 1209.53 L1997 1209.53 L1996.41 1209.53 L1995.83 1209.53 L1995.24 1209.53 L1994.65 1209.53 L1994.07 1209.53 L1993.48 1209.53 L1992.9 1209.53 L1992.31 1209.53 L1991.72 1209.53 L1991.14 1209.53 L1990.55 1209.53 L1989.96 1209.53 L1989.38 1209.53 L1988.79 1209.53 L1988.2 1209.53 L1987.62 1209.53 L1987.03 1209.53 L1986.45 1209.53 L1985.86 1209.53 L1985.27 1209.53 L1984.69 1209.53 L1984.1 1209.53 L1983.51 1209.53 L1982.93 1209.53 L1982.34 1209.53 L1981.75 1209.53 L1981.17 1209.53 L1980.58 1209.53 L1979.99 1209.53 L1979.41 1209.53 L1978.82 1209.53 L1978.24 1209.53 L1977.65 1209.53 L1977.06 1209.53 L1976.48 1209.53 L1975.89 1209.53 L1975.3 1209.53 L1974.72 1209.53 L1974.13 1209.53 L1973.54 1209.53 L1972.96 1209.53 L1972.37 1209.53 L1971.78 1209.53 L1971.2 1209.53 L1970.61 1209.53 L1970.03 1209.53 L1969.44 1209.53 L1968.85 1209.53 L1968.27 1209.53 L1967.68 1209.53 L1967.09 1209.53 L1966.51 1209.53 L1965.92 1209.53 L1965.33 1209.53 L1964.75 1209.53 L1964.16 1209.53 L1963.58 1209.53 L1962.99 1209.53 L1962.4 1209.53 L1961.82 1209.53 L1961.23 1209.53 L1960.64 1209.53 L1960.06 1209.53 L1959.47 1209.53 L1958.88 1209.53 L1958.3 1209.53 L1957.71 1209.53 L1957.12 1209.53 L1956.54 1209.53 L1955.95 1209.53 L1955.37 1209.53 L1954.78 1209.53 L1954.19 1209.53 L1953.61 1209.53 L1953.02 1209.53 L1952.43 1209.53 L1951.85 1209.53 L1951.26 1209.53 L1950.67 1209.53 L1950.09 1209.53 L1949.5 1209.53 L1948.91 1209.53 L1948.33 1209.53 L1947.74 1209.53 L1947.16 1209.53 L1946.57 1209.53 L1945.98 1209.53 L1945.4 1209.53 L1944.81 1209.53 L1944.22 1209.53 L1943.64 1209.53 L1943.05 1209.53 L1942.46 1209.53 L1941.88 1209.53 L1941.29 1209.53 L1940.71 1209.53 L1940.12 1209.53 L1939.53 1209.53 L1938.95 1209.53 L1938.36 1209.53 L1937.77 1209.53 L1937.19 1209.53 L1936.6 1209.53 L1936.01 1209.53 L1935.43 1209.53 L1934.84 1209.53 L1934.25 1209.53 L1933.67 1209.53 L1933.08 1209.53 L1932.5 1209.53 L1931.91 1209.53 L1931.32 1209.53 L1930.74 1209.53 L1930.15 1209.53 L1929.56 1209.53 L1928.98 1209.53 L1928.39 1209.53 L1927.8 1209.53 L1927.22 1209.53 L1926.63 1209.53 L1926.04 1209.53 L1925.46 1209.53 L1924.87 1209.53 L1924.29 1209.53 L1923.7 1209.53 L1923.11 1209.53 L1922.53 1209.53 L1921.94 1209.53 L1921.35 1209.53 L1920.77 1209.53 L1920.18 1209.53 L1919.59 1209.53 L1919.01 1209.53 L1918.42 1209.53 L1917.83 1209.53 L1917.25 1209.53 L1916.66 1209.53 L1916.08 1209.53 L1915.49 1209.53 L1914.9 1209.53 L1914.32 1209.53 L1913.73 1209.53 L1913.14 1209.53 L1912.56 1209.53 L1911.97 1209.53 L1911.38 1209.53 L1910.8 1209.53 L1910.21 1209.53 L1909.63 1209.53 L1909.04 1209.53 L1908.45 1209.53 L1907.87 1209.53 L1907.28 1209.53 L1906.69 1209.53 L1906.11 1209.53 L1905.52 1209.53 L1904.93 1209.53 L1904.35 1209.53 L1903.76 1209.53 L1903.17 1209.53 L1902.59 1209.53 L1902 1209.53 L1901.42 1209.53 L1900.83 1209.53 L1900.24 1209.53 L1899.66 1209.53 L1899.07 1209.53 L1898.48 1209.53 L1897.9 1209.53 L1897.31 1209.53 L1896.72 1209.53 L1896.14 1209.53 L1895.55 1209.53 L1894.96 1209.53 L1894.38 1209.53 L1893.79 1209.53 L1893.21 1209.53 L1892.62 1209.53 L1892.03 1209.53 L1891.45 1209.53 L1890.86 1209.53 L1890.27 1209.53 L1889.69 1209.53 L1889.1 1209.53 L1888.51 1209.53 L1887.93 1209.53 L1887.34 1209.53 L1886.76 1209.53 L1886.17 1209.53 L1885.58 1209.53 L1885 1209.53 L1884.41 1209.53 L1883.82 1209.53 L1883.24 1209.53 L1882.65 1209.53 L1882.06 1209.53 L1881.48 1209.53 L1880.89 1209.53 L1880.3 1209.53 L1879.72 1209.53 L1879.13 1209.53 L1878.55 1209.53 L1877.96 1209.53 L1877.37 1209.53 L1876.79 1209.53 L1876.2 1209.53 L1875.61 1209.53 L1875.03 1209.53 L1874.44 1209.53 L1873.85 1209.53 L1873.27 1209.53 L1872.68 1209.53 L1872.09 1209.53 L1871.51 1209.53 L1870.92 1209.53 L1870.34 1209.53 L1869.75 1209.53 L1869.16 1209.53 L1868.58 1209.53 L1867.99 1209.53 L1867.4 1209.53 L1866.82 1209.53 L1866.23 1209.53 L1865.64 1209.53 L1865.06 1209.53 L1864.47 1209.53 L1863.88 1209.53 L1863.3 1209.53 L1862.71 1209.53 L1862.13 1209.53 L1861.54 1209.53 L1860.95 1209.53 L1860.37 1209.53 L1859.78 1209.53 L1859.19 1209.53 L1858.61 1209.53 L1858.02 1209.53 L1857.43 1209.53 L1856.85 1209.53 L1856.26 1209.53 L1855.68 1209.53 L1855.09 1209.53 L1854.5 1209.53 L1853.92 1209.53 L1853.33 1209.53 L1852.74 1209.53 L1852.16 1209.53 L1851.57 1209.53 L1850.98 1209.53 L1850.4 1209.53 L1849.81 1209.53 L1849.22 1209.53 L1848.64 1209.53 L1848.05 1209.53 L1847.47 1209.53 L1846.88 1209.53 L1846.29 1209.53 L1845.71 1209.53 L1845.12 1209.53 L1844.53 1209.53 L1843.95 1209.53 L1843.36 1209.53 L1842.77 1209.53 L1842.19 1209.53 L1841.6 1209.53 L1841.01 1209.53 L1840.43 1209.53 L1839.84 1209.53 L1839.26 1209.53 L1838.67 1209.53 L1838.08 1209.53 L1837.5 1209.53 L1836.91 1209.53 L1836.32 1209.53 L1835.74 1209.53 L1835.15 1209.53 L1834.56 1209.53 L1833.98 1209.53 L1833.39 1209.53 L1832.81 1209.53 L1832.22 1209.53 L1831.63 1209.53 L1831.05 1209.53 L1830.46 1209.53 L1829.87 1209.53 L1829.29 1209.53 L1828.7 1209.53 L1828.11 1209.53 L1827.53 1209.53 L1826.94 1209.53 L1826.35 1209.53 L1825.77 1209.53 L1825.18 1209.53 L1824.6 1209.53 L1824.01 1209.53 L1823.42 1209.53 L1822.84 1209.53 L1822.25 1209.53 L1821.66 1209.53 L1821.08 1209.53 L1820.49 1209.53 L1819.9 1209.53 L1819.32 1209.53 L1818.73 1209.53 L1818.14 1209.53 L1817.56 1209.53 L1816.97 1209.53 L1816.39 1209.53 L1815.8 1209.53 L1815.21 1209.53 L1814.63 1209.53 L1814.04 1209.53 L1813.45 1209.53 L1812.87 1209.53 L1812.28 1209.53 L1811.69 1209.53 L1811.11 1209.53 L1810.52 1209.53 L1809.94 1209.53 L1809.35 1209.53 L1808.76 1209.53 L1808.18 1209.53 L1807.59 1209.53 L1807 1209.53 L1806.42 1209.53 L1805.83 1209.53 L1805.24 1209.53 L1804.66 1209.53 L1804.07 1209.53 L1803.48 1209.53 L1802.9 1209.53 L1802.31 1209.53 L1801.73 1209.53 L1801.14 1209.53 L1800.55 1209.53 L1799.97 1209.53 L1799.38 1209.53 L1798.79 1209.53 L1798.21 1209.53 L1797.62 1209.53 L1797.03 1209.53 L1796.45 1209.53 L1795.86 1209.53 L1795.27 1209.53 L1794.69 1209.53 L1794.1 1209.53 L1793.52 1209.53 L1792.93 1209.53 L1792.34 1209.53 L1791.76 1209.53 L1791.17 1209.53 L1790.58 1209.53 L1790 1209.53 L1789.41 1209.53 L1788.82 1209.53 L1788.24 1209.53 L1787.65 1209.53 L1787.06 1209.53 L1786.48 1209.53 L1785.89 1209.53 L1785.31 1209.53 L1784.72 1209.53 L1784.13 1209.53 L1783.55 1209.53 L1782.96 1209.53 L1782.37 1209.53 L1781.79 1209.53 L1781.2 1209.53 L1780.61 1209.53 L1780.03 1209.53 L1779.44 1209.53 L1778.86 1209.53 L1778.27 1209.53 L1777.68 1209.53 L1777.1 1209.53 L1776.51 1209.53 L1775.92 1209.53 L1775.34 1209.53 L1774.75 1209.53 L1774.16 1209.53 L1773.58 1209.53 L1772.99 1209.53 L1772.4 1209.53 L1771.82 1209.53 L1771.23 1209.53 L1770.65 1209.53 L1770.06 1209.53 L1769.47 1209.53 L1768.89 1209.53 L1768.3 1209.53 L1767.71 1209.53 L1767.13 1209.53 L1766.54 1209.53 L1765.95 1209.53 L1765.37 1209.53 L1764.78 1209.53 L1764.19 1209.53 L1763.61 1209.53 L1763.02 1209.53 L1762.44 1209.53 L1761.85 1209.53 L1761.26 1209.53 L1760.68 1209.53 L1760.09 1209.53 L1759.5 1209.53 L1758.92 1209.53 L1758.33 1209.53 L1757.74 1209.53 L1757.16 1209.53 L1756.57 1209.53 L1755.99 1209.53 L1755.4 1209.53 L1754.81 1209.53 L1754.23 1209.53 L1753.64 1209.53 L1753.05 1209.53 L1752.47 1209.53 L1751.88 1209.53 L1751.29 1209.53 L1750.71 1209.53 L1750.12 1209.53 L1749.53 1209.53 L1748.95 1209.53 L1748.36 1209.53 L1747.78 1209.53 L1747.19 1209.53 L1746.6 1209.53 L1746.02 1209.53 L1745.43 1209.53 L1744.84 1209.53 L1744.26 1209.53 L1743.67 1209.53 L1743.08 1209.53 L1742.5 1209.53 L1741.91 1209.53 L1741.32 1209.53 L1740.74 1209.53 L1740.15 1209.53 L1739.57 1209.53 L1738.98 1209.53 L1738.39 1209.53 L1737.81 1209.53 L1737.22 1209.53 L1736.63 1209.53 L1736.05 1209.53 L1735.46 1209.53 L1734.87 1209.53 L1734.29 1209.53 L1733.7 1209.53 L1733.11 1209.53 L1732.53 1209.53 L1731.94 1209.53 L1731.36 1209.53 L1730.77 1209.53 L1730.18 1209.53 L1729.6 1209.53 L1729.01 1209.53 L1728.42 1209.53 L1727.84 1209.53 L1727.25 1209.53 L1726.66 1209.53 L1726.08 1209.53 L1725.49 1209.53 L1724.91 1209.53 L1724.32 1209.53 L1723.73 1209.53 L1723.15 1209.53 L1722.56 1209.53 L1721.97 1209.53 L1721.39 1209.53 L1720.8 1209.53 L1720.21 1209.53 L1719.63 1209.53 L1719.04 1209.53 L1718.45 1209.53 L1717.87 1209.53 L1717.28 1209.53 L1716.7 1209.53 L1716.11 1209.53 L1715.52 1209.53 L1714.94 1209.53 L1714.35 1209.53 L1713.76 1209.53 L1713.18 1209.53 L1712.59 1209.53 L1712 1209.53 L1711.42 1209.53 L1710.83 1209.53 L1710.24 1209.53 L1709.66 1209.53 L1709.07 1209.53 L1708.49 1209.53 L1707.9 1209.53 L1707.31 1209.53 L1706.73 1209.53 L1706.14 1209.53 L1705.55 1209.53 L1704.97 1209.53 L1704.38 1209.53 L1703.79 1209.53 L1703.21 1209.53 L1702.62 1209.53 L1702.04 1209.53 L1701.45 1209.53 L1700.86 1209.53 L1700.28 1209.53 L1699.69 1209.53 L1699.1 1209.53 L1698.52 1209.53 L1697.93 1209.53 L1697.34 1209.53 L1696.76 1209.53 L1696.17 1209.53 L1695.58 1209.53 L1695 1209.53 L1694.41 1209.53 L1693.83 1209.53 L1693.24 1209.53 L1692.65 1209.53 L1692.07 1209.53 L1691.48 1209.53 L1690.89 1209.53 L1690.31 1209.53 L1689.72 1209.53 L1689.13 1209.53 L1688.55 1209.53 L1687.96 1209.53 L1687.37 1209.53 L1686.79 1209.53 L1686.2 1209.53 L1685.62 1209.53 L1685.03 1209.53 L1684.44 1209.53 L1683.86 1209.53 L1683.27 1209.53 L1682.68 1209.53 L1682.1 1209.53 L1681.51 1209.53 L1680.92 1209.53 L1680.34 1209.53 L1679.75 1209.53 L1679.17 1209.53 L1678.58 1209.53 L1677.99 1209.53 L1677.41 1209.53 L1676.82 1209.53 L1676.23 1209.53 L1675.65 1209.53 L1675.06 1209.53 L1674.47 1209.53 L1673.89 1209.53 L1673.3 1209.53 L1672.71 1209.53 L1672.13 1209.53 L1671.54 1209.53 L1670.96 1209.53 L1670.37 1209.53 L1669.78 1209.53 L1669.2 1209.53 L1668.61 1209.53 L1668.02 1209.53 L1667.44 1209.53 L1666.85 1209.53 L1666.26 1209.53 L1665.68 1209.53 L1665.09 1209.53 L1664.5 1209.53 L1663.92 1209.53 L1663.33 1209.53 L1662.75 1209.53 L1662.16 1209.53 L1661.57 1209.53 L1660.99 1209.53 L1660.4 1209.53 L1659.81 1209.53 L1659.23 1209.53 L1658.64 1209.53 L1658.05 1209.53 L1657.47 1209.53 L1656.88 1209.53 L1656.29 1209.53 L1655.71 1209.53 L1655.12 1209.53 L1654.54 1209.53 L1653.95 1209.53 L1653.36 1209.53 L1652.78 1209.53 L1652.19 1209.53 L1651.6 1209.53 L1651.02 1209.53 L1650.43 1209.53 L1649.84 1209.53 L1649.26 1209.53 L1648.67 1209.53 L1648.09 1209.53 L1647.5 1209.53 L1646.91 1209.53 L1646.33 1209.53 L1645.74 1209.53 L1645.15 1209.53 L1644.57 1209.53 L1643.98 1209.53 L1643.39 1209.53 L1642.81 1209.53 L1642.22 1209.53 L1641.63 1209.53 L1641.05 1209.53 L1640.46 1209.53 L1639.88 1209.53 L1639.29 1209.53 L1638.7 1209.53 L1638.12 1209.53 L1637.53 1209.53 L1636.94 1209.53 L1636.36 1209.53 L1635.77 1209.53 L1635.18 1209.53 L1634.6 1209.53 L1634.01 1209.53 L1633.42 1209.53 L1632.84 1209.53 L1632.25 1209.53 L1631.67 1209.53 L1631.08 1209.53 L1630.49 1209.53 L1629.91 1209.53 L1629.32 1209.53 L1628.73 1209.53 L1628.15 1209.53 L1627.56 1209.53 L1626.97 1209.53 L1626.39 1209.53 L1625.8 1209.53 L1625.22 1209.53 L1624.63 1209.53 L1624.04 1209.53 L1623.46 1209.53 L1622.87 1209.53 L1622.28 1209.53 L1621.7 1209.53 L1621.11 1209.53 L1620.52 1209.53 L1619.94 1209.53 L1619.35 1209.53 L1618.76 1209.53 L1618.18 1209.53 L1617.59 1209.53 L1617.01 1209.53 L1616.42 1209.53 L1615.83 1209.53 L1615.25 1209.53 L1614.66 1209.53 L1614.07 1209.53 L1613.49 1209.53 L1612.9 1209.53 L1612.31 1209.53 L1611.73 1209.53 L1611.14 1209.53 L1610.55 1209.53 L1609.97 1209.53 L1609.38 1209.53 L1608.8 1209.53 L1608.21 1209.53 L1607.62 1209.53 L1607.04 1209.53 L1606.45 1209.53 L1605.86 1209.53 L1605.28 1209.53 L1604.69 1209.53 L1604.1 1209.53 L1603.52 1209.53 L1602.93 1209.53 L1602.34 1209.53 L1601.76 1209.53 L1601.17 1209.53 L1600.59 1209.53 L1600 1209.53 L1599.41 1209.53 L1598.83 1209.53 L1598.24 1209.53 L1597.65 1209.53 L1597.07 1209.53 L1596.48 1209.53 L1595.89 1209.53 L1595.31 1209.53 L1594.72 1209.53 L1594.14 1209.53 L1593.55 1209.53 L1592.96 1209.53 L1592.38 1209.53 L1591.79 1209.53 L1591.2 1209.53 L1590.62 1209.53 L1590.03 1209.53 L1589.44 1209.53 L1588.86 1209.53 L1588.27 1209.53 L1587.68 1209.53 L1587.1 1209.53 L1586.51 1209.53 L1585.93 1209.53 L1585.34 1209.53 L1584.75 1209.53 L1584.17 1209.53 L1583.58 1209.53 L1582.99 1209.53 L1582.41 1209.53 L1581.82 1209.53 L1581.23 1209.53 L1580.65 1209.53 L1580.06 1209.53 L1579.47 1209.53 L1578.89 1209.53 L1578.3 1209.53 L1577.72 1209.53 L1577.13 1209.53 L1576.54 1209.53 L1575.96 1209.53 L1575.37 1209.53 L1574.78 1209.53 L1574.2 1209.53 L1573.61 1209.53 L1573.02 1209.53 L1572.44 1209.53 L1571.85 1209.53 L1571.27 1209.53 L1570.68 1209.53 L1570.09 1209.53 L1569.51 1209.53 L1568.92 1209.53 L1568.33 1209.53 L1567.75 1209.53 L1567.16 1209.53 L1566.57 1209.53 L1565.99 1209.53 L1565.4 1209.53 L1564.81 1209.53 L1564.23 1209.53 L1563.64 1209.53 L1563.06 1209.53 L1562.47 1209.53 L1561.88 1209.53 L1561.3 1209.53 L1560.71 1209.53 L1560.12 1209.53 L1559.54 1209.53 L1558.95 1209.53 L1558.36 1209.53 L1557.78 1209.53 L1557.19 1209.53 L1556.6 1209.53 L1556.02 1209.53 L1555.43 1209.53 L1554.85 1209.53 L1554.26 1209.53 L1553.67 1209.53 L1553.09 1209.53 L1552.5 1209.53 L1551.91 1209.53 L1551.33 1209.53 L1550.74 1209.53 L1550.15 1209.53 L1549.57 1209.53 L1548.98 1209.53 L1548.4 1209.53 L1547.81 1209.53 L1547.22 1209.53 L1546.64 1209.53 L1546.05 1209.53 L1545.46 1209.53 L1544.88 1209.53 L1544.29 1209.53 L1543.7 1209.53 L1543.12 1209.53 L1542.53 1209.53 L1541.94 1209.53 L1541.36 1209.53 L1540.77 1209.53 L1540.19 1209.53 L1539.6 1209.53 L1539.01 1209.53 L1538.43 1209.53 L1537.84 1209.53 L1537.25 1209.53 L1536.67 1209.53 L1536.08 1209.53 L1535.49 1209.53 L1534.91 1209.53 L1534.32 1209.53 L1533.73 1209.53 L1533.15 1209.53 L1532.56 1209.53 L1531.98 1209.53 L1531.39 1209.53 L1530.8 1209.53 L1530.22 1209.53 L1529.63 1209.53 L1529.04 1209.53 L1528.46 1209.53 L1527.87 1209.53 L1527.28 1209.53 L1526.7 1209.53 L1526.11 1209.53 L1525.52 1209.53 L1524.94 1209.53 L1524.35 1209.53 L1523.77 1209.53 L1523.18 1209.53 L1522.59 1209.53 L1522.01 1209.53 L1521.42 1209.53 L1520.83 1209.53 L1520.25 1209.53 L1519.66 1209.53 L1519.07 1209.53 L1518.49 1209.53 L1517.9 1209.53 L1517.32 1209.53 L1516.73 1209.53 L1516.14 1209.53 L1515.56 1209.53 L1514.97 1209.53 L1514.38 1209.53 L1513.8 1209.53 L1513.21 1209.53 L1512.62 1209.53 L1512.04 1209.53 L1511.45 1209.53 L1510.86 1209.53 L1510.28 1209.53 L1509.69 1209.53 L1509.11 1209.53 L1508.52 1209.53 L1507.93 1209.53 L1507.35 1209.53 L1506.76 1209.53 L1506.17 1209.53 L1505.59 1209.53 L1505 1209.53 L1504.41 1209.53 L1503.83 1209.53 L1503.24 1209.53 L1502.65 1209.53 L1502.07 1209.53 L1501.48 1209.53 L1500.9 1209.53 L1500.31 1209.53 L1499.72 1209.53 L1499.14 1209.53 L1498.55 1209.53 L1497.96 1209.53 L1497.38 1209.53 L1496.79 1209.53 L1496.2 1209.53 L1495.62 1209.53 L1495.03 1209.53 L1494.45 1209.53 L1493.86 1209.53 L1493.27 1209.53 L1492.69 1209.53 L1492.1 1209.53 L1491.51 1209.53 L1490.93 1209.53 L1490.34 1209.53 L1489.75 1209.53 L1489.17 1209.53 L1488.58 1209.53 L1487.99 1209.53 L1487.41 1209.53 L1486.82 1209.53 L1486.24 1209.53 L1485.65 1209.53 L1485.06 1209.53 L1484.48 1209.53 L1483.89 1209.53 L1483.3 1209.53 L1482.72 1209.53 L1482.13 1209.53 L1481.54 1209.53 L1480.96 1209.53 L1480.37 1209.53 L1479.78 1209.53 L1479.2 1209.53 L1478.61 1209.53 L1478.03 1209.53 L1477.44 1209.53 L1476.85 1209.53 L1476.27 1209.53 L1475.68 1209.53 L1475.09 1209.53 L1474.51 1209.53 L1473.92 1209.53 L1473.33 1209.53 L1472.75 1209.53 L1472.16 1209.53 L1471.57 1209.53 L1470.99 1209.53 L1470.4 1209.53 L1469.82 1209.53 L1469.23 1209.53 L1468.64 1209.53 L1468.06 1209.53 L1467.47 1209.53 L1466.88 1209.53 L1466.3 1209.53 L1465.71 1209.53 L1465.12 1209.53 L1464.54 1209.53 L1463.95 1209.53 L1463.37 1209.53 L1462.78 1209.53 L1462.19 1209.53 L1461.61 1209.53 L1461.02 1209.53 L1460.43 1209.53 L1459.85 1209.53 L1459.26 1209.53 L1458.67 1209.53 L1458.09 1209.53 L1457.5 1209.53 L1456.91 1209.53 L1456.33 1209.53 L1455.74 1209.53 L1455.16 1209.53 L1454.57 1209.53 L1453.98 1209.53 L1453.4 1209.53 L1452.81 1209.53 L1452.22 1209.53 L1451.64 1209.53 L1451.05 1209.53 L1450.46 1209.53 L1449.88 1209.53 L1449.29 1209.53 L1448.7 1209.53 L1448.12 1209.53 L1447.53 1209.53 L1446.95 1209.53 L1446.36 1209.53 L1445.77 1209.53 L1445.19 1209.53 L1444.6 1209.53 L1444.01 1209.53 L1443.43 1209.53 L1442.84 1209.53 L1442.25 1209.53 L1441.67 1209.53 L1441.08 1209.53 L1440.5 1209.53 L1439.91 1209.53 L1439.32 1209.53 L1438.74 1209.53 L1438.15 1209.53 L1437.56 1209.53 L1436.98 1209.53 L1436.39 1209.53 L1435.8 1209.53 L1435.22 1209.53 L1434.63 1209.53 L1434.04 1209.53 L1433.46 1209.53 L1432.87 1209.53 L1432.29 1209.53 L1431.7 1209.53 L1431.11 1209.53 L1430.53 1209.53 L1429.94 1209.53 L1429.35 1209.53 L1428.77 1209.53 L1428.18 1209.53 L1427.59 1209.53 L1427.01 1209.53 L1426.42 1209.53 L1425.83 1209.53 L1425.25 1209.53 L1424.66 1209.53 L1424.08 1209.53 L1423.49 1209.53 L1422.9 1209.53 L1422.32 1209.53 L1421.73 1209.53 L1421.14 1209.53 L1420.56 1209.53 L1419.97 1209.53 L1419.38 1209.53 L1418.8 1209.53 L1418.21 1209.53 L1417.63 1209.53 L1417.04 1209.53 L1416.45 1209.53 L1415.87 1209.53 L1415.28 1209.53 L1414.69 1209.53 L1414.11 1209.53 L1413.52 1209.53 L1412.93 1209.53 L1412.35 1209.53 L1411.76 1209.53 L1411.17 1209.53 L1410.59 1209.53 L1410 1209.53 L1409.42 1209.53 L1408.83 1209.53 L1408.24 1209.53 L1407.66 1209.53 L1407.07 1209.53 L1406.48 1209.53 L1405.9 1209.53 L1405.31 1209.53 L1404.72 1209.53 L1404.14 1209.53 L1403.55 1209.53 L1402.96 1209.53 L1402.38 1209.53 L1401.79 1209.53 L1401.21 1209.53 L1400.62 1209.53 L1400.03 1209.53 L1399.45 1209.53 L1398.86 1209.53 L1398.27 1209.53 L1397.69 1209.53 L1397.1 1209.53 L1396.51 1209.53 L1395.93 1209.53 L1395.34 1209.53 L1394.75 1209.53 L1394.17 1209.53 L1393.58 1209.53 L1393 1209.53 L1392.41 1209.53 L1391.82 1209.53 L1391.24 1209.53 L1390.65 1209.53 L1390.06 1209.53 L1389.48 1209.53 L1388.89 1209.53 L1388.3 1209.53 L1387.72 1209.53 L1387.13 1209.53 L1386.55 1209.53 L1385.96 1209.53 L1385.37 1209.53 L1384.79 1209.53 L1384.2 1209.53 L1383.61 1209.53 L1383.03 1209.53 L1382.44 1209.53 L1381.85 1209.53 L1381.27 1209.53 L1380.68 1209.53 L1380.09 1209.53 L1379.51 1209.53 L1378.92 1209.53 L1378.34 1209.53 L1377.75 1209.53 L1377.16 1209.53 L1376.58 1209.53 L1375.99 1209.53 L1375.4 1209.53 L1374.82 1209.53 L1374.23 1209.53 L1373.64 1209.53 L1373.06 1209.53 L1372.47 1209.53 L1371.88 1209.53 L1371.3 1209.53 L1370.71 1209.53 L1370.13 1209.53 L1369.54 1209.53 L1368.95 1209.53 L1368.37 1209.53 L1367.78 1209.53 L1367.19 1209.53 L1366.61 1209.53 L1366.02 1209.53 L1365.43 1209.53 L1364.85 1209.53 L1364.26 1209.53 L1363.68 1209.53 L1363.09 1209.53 L1362.5 1209.53 L1361.92 1209.53 L1361.33 1209.53 L1360.74 1209.53 L1360.16 1209.53 L1359.57 1209.53 L1358.98 1209.53 L1358.4 1209.53 L1357.81 1209.53 L1357.22 1209.53 L1356.64 1209.53 L1356.05 1209.53 L1355.47 1209.53 L1354.88 1209.53 L1354.29 1209.53 L1353.71 1209.53 L1353.12 1209.53 L1352.53 1209.53 L1351.95 1209.53 L1351.36 1209.53 L1350.77 1209.53 L1350.19 1209.53 L1349.6 1209.53 L1349.01 1209.53 L1348.43 1209.53 L1347.84 1209.53 L1347.26 1209.53 L1346.67 1209.53 L1346.08 1209.53 L1345.5 1209.53 L1344.91 1209.53 L1344.32 1209.53 L1343.74 1209.53 L1343.15 1209.53 L1342.56 1209.53 L1341.98 1209.53 L1341.39 1209.53 L1340.8 1209.53 L1340.22 1209.53 L1339.63 1209.53 L1339.05 1209.53 L1338.46 1209.53 L1337.87 1209.53 L1337.29 1209.53 L1336.7 1209.53 L1336.11 1209.53 L1335.53 1209.53 L1334.94 1209.53 L1334.35 1209.53 L1333.77 1209.53 L1333.18 1209.53 L1332.6 1209.53 L1332.01 1209.53 L1331.42 1209.53 L1330.84 1209.53 L1330.25 1209.53 L1329.66 1209.53 L1329.08 1209.53 L1328.49 1209.53 L1327.9 1209.53 L1327.32 1209.53 L1326.73 1209.53 L1326.14 1209.53 L1325.56 1209.53 L1324.97 1209.53 L1324.39 1209.53 L1323.8 1209.53 L1323.21 1209.53 L1322.63 1209.53 L1322.04 1209.53 L1321.45 1209.53 L1320.87 1209.53 L1320.28 1209.53 L1319.69 1209.53 L1319.11 1209.53 L1318.52 1209.53 L1317.93 1209.53 L1317.35 1209.53 L1316.76 1209.53 L1316.18 1209.53 L1315.59 1209.53 L1315 1209.53 L1314.42 1209.53 L1313.83 1209.53 L1313.24 1209.53 L1312.66 1209.53 L1312.07 1209.53 L1311.48 1209.53 L1310.9 1209.53 L1310.31 1209.53 L1309.73 1209.53 L1309.14 1209.53 L1308.55 1209.53 L1307.97 1209.53 L1307.38 1209.53 L1306.79 1209.53 L1306.21 1209.53 L1305.62 1209.53 L1305.03 1209.53 L1304.45 1209.53 L1303.86 1209.53 L1303.27 1209.53 L1302.69 1209.53 L1302.1 1209.53 L1301.52 1209.53 L1300.93 1209.53 L1300.34 1209.53 L1299.76 1209.53 L1299.17 1209.53 L1298.58 1209.53 L1298 1209.53 L1297.41 1209.53 L1296.82 1209.53 L1296.24 1209.53 L1295.65 1209.53 L1295.06 1209.53 L1294.48 1209.53 L1293.89 1209.53 L1293.31 1209.53 L1292.72 1209.53 L1292.13 1209.53 L1291.55 1209.53 L1290.96 1209.53 L1290.37 1209.53 L1289.79 1209.53 L1289.2 1209.53 L1288.61 1209.53 L1288.03 1209.53 L1287.44 1209.53 L1286.86 1209.53 L1286.27 1209.53 L1285.68 1209.53 L1285.1 1209.53 L1284.51 1209.53 L1283.92 1209.53 L1283.34 1209.53 L1282.75 1209.53 L1282.16 1209.53 L1281.58 1209.53 L1280.99 1209.53 L1280.4 1209.53 L1279.82 1209.53 L1279.23 1209.53 L1278.65 1209.53 L1278.06 1209.53 L1277.47 1209.53 L1276.89 1209.53 L1276.3 1209.53 L1275.71 1209.53 L1275.13 1209.53 L1274.54 1209.53 L1273.95 1209.53 L1273.37 1209.53 L1272.78 1209.53 L1272.19 1209.53 L1271.61 1209.53 L1271.02 1209.53 L1270.44 1209.53 L1269.85 1209.53 L1269.26 1209.53 L1268.68 1209.53 L1268.09 1209.53 L1267.5 1209.53 L1266.92 1209.53 L1266.33 1209.53 L1265.74 1209.53 L1265.16 1209.53 L1264.57 1209.53 L1263.98 1209.53 L1263.4 1209.53 L1262.81 1209.53 L1262.23 1209.53 L1261.64 1209.53 L1261.05 1209.53 L1260.47 1209.53 L1259.88 1209.53 L1259.29 1209.53 L1258.71 1209.53 L1258.12 1209.53 L1257.53 1209.53 L1256.95 1209.53 L1256.36 1209.53 L1255.78 1209.53 L1255.19 1209.53 L1254.6 1209.53 L1254.02 1209.53 L1253.43 1209.53 L1252.84 1209.53 L1252.26 1209.53 L1251.67 1209.53 L1251.08 1209.53 L1250.5 1209.53 L1249.91 1209.53 L1249.32 1209.53 L1248.74 1209.53 L1248.15 1209.53 L1247.57 1209.53 L1246.98 1209.53 L1246.39 1209.53 L1245.81 1209.53 L1245.22 1209.53 L1244.63 1209.53 L1244.05 1209.53 L1243.46 1209.53 L1242.87 1209.53 L1242.29 1209.53 L1241.7 1209.53 L1241.11 1209.53 L1240.53 1209.53 L1239.94 1209.53 L1239.36 1209.53 L1238.77 1209.53 L1238.18 1209.53 L1237.6 1209.53 L1237.01 1209.53 L1236.42 1209.53 L1235.84 1209.53 L1235.25 1209.53 L1234.66 1209.53 L1234.08 1209.53 L1233.49 1209.53 L1232.91 1209.53 L1232.32 1209.53 L1231.73 1209.53 L1231.15 1209.53 L1230.56 1209.53 L1229.97 1209.53 L1229.39 1209.53 L1228.8 1209.53 L1228.21 1209.53 L1227.63 1209.53 L1227.04 1209.53 L1226.45 1209.53 L1225.87 1209.53 L1225.28 1209.53 L1224.7 1209.53 L1224.11 1209.53 L1223.52 1209.53 L1222.94 1209.53 L1222.35 1209.53 L1221.76 1209.53 L1221.18 1209.53 L1220.59 1209.53 L1220 1209.53 L1219.42 1209.53 L1218.83 1209.53 L1218.24 1209.53 L1217.66 1209.53 L1217.07 1209.53 L1216.49 1209.53 L1215.9 1209.53 L1215.31 1209.53 L1214.73 1209.53 L1214.14 1209.53 L1213.55 1209.53 L1212.97 1209.53 L1212.38 1209.53 L1211.79 1209.53 L1211.21 1209.53 L1210.62 1209.53 L1210.03 1209.53 L1209.45 1209.53 L1208.86 1209.53 L1208.28 1209.53 L1207.69 1209.53 L1207.1 1209.53 L1206.52 1209.53 L1205.93 1209.53 L1205.34 1209.53 L1204.76 1209.53 L1204.17 1209.53 L1203.58 1209.53 L1203 1209.53 L1202.41 1209.53 L1201.83 1209.53 L1201.24 1209.53 L1200.65 1209.53 L1200.07 1209.53 L1199.48 1209.53 L1198.89 1209.53 L1198.31 1209.53 L1197.72 1209.53 L1197.13 1209.53 L1196.55 1209.53 L1195.96 1209.53 L1195.37 1209.53 L1194.79 1209.53 L1194.2 1209.53 L1193.62 1209.53 L1193.03 1209.53 L1192.44 1209.53 L1191.86 1209.53 L1191.27 1209.53 L1190.68 1209.53 L1190.1 1209.53 L1189.51 1209.53 L1188.92 1209.53 L1188.34 1209.53 L1187.75 1209.53 L1187.16 1209.53 L1186.58 1209.53 L1185.99 1209.53 L1185.41 1209.53 L1184.82 1209.53 L1184.23 1209.53 L1183.65 1209.53 L1183.06 1209.53 L1182.47 1209.53 L1181.89 1209.53 L1181.3 1209.53 L1180.71 1209.53 L1180.13 1209.53 L1179.54 1209.53 L1178.96 1209.53 L1178.37 1209.53 L1177.78 1209.53 L1177.2 1209.53 L1176.61 1209.53 L1176.02 1209.53 L1175.44 1209.53 L1174.85 1209.53 L1174.26 1209.53 L1173.68 1209.53 L1173.09 1209.53 L1172.5 1209.53 L1171.92 1209.53 L1171.33 1209.53 L1170.75 1209.53 L1170.16 1209.53 L1169.57 1209.53 L1168.99 1209.53 L1168.4 1209.53 L1167.81 1209.53 L1167.23 1209.53 L1166.64 1209.53 L1166.05 1209.53 L1165.47 1209.53 L1164.88 1209.53 L1164.29 1209.53 L1163.71 1209.53 L1163.12 1209.53 L1162.54 1209.53 L1161.95 1209.53 L1161.36 1209.53 L1160.78 1209.53 L1160.19 1209.53 L1159.6 1209.53 L1159.02 1209.53 L1158.43 1209.53 L1157.84 1209.53 L1157.26 1209.53 L1156.67 1209.53 L1156.09 1209.53 L1155.5 1209.53 L1154.91 1209.53 L1154.33 1209.53 L1153.74 1209.53 L1153.15 1209.53 L1152.57 1209.53 L1151.98 1209.53 L1151.39 1209.53 L1150.81 1209.53 L1150.22 1209.53 L1149.63 1209.53 L1149.05 1209.53 L1148.46 1209.53 L1147.88 1209.53 L1147.29 1209.53 L1146.7 1209.53 L1146.12 1209.53 L1145.53 1209.53 L1144.94 1209.53 L1144.36 1209.53 L1143.77 1209.53 L1143.18 1209.53 L1142.6 1209.53 L1142.01 1209.53 L1141.42 1209.53 L1140.84 1209.53 L1140.25 1209.53 L1139.67 1209.53 L1139.08 1209.53 L1138.49 1209.53 L1137.91 1209.53 L1137.32 1209.53 L1136.73 1209.53 L1136.15 1209.53 L1135.56 1209.53 L1134.97 1209.53 L1134.39 1209.53 L1133.8 1209.53 L1133.21 1209.53 L1132.63 1209.53 L1132.04 1209.53 L1131.46 1209.53 L1130.87 1209.53 L1130.28 1209.53 L1129.7 1209.53 L1129.11 1209.53 L1128.52 1209.53 L1127.94 1209.53 L1127.35 1209.53 L1126.76 1209.53 L1126.18 1209.53 L1125.59 1209.53 L1125.01 1209.53 L1124.42 1209.53 L1123.83 1209.53 L1123.25 1209.53 L1122.66 1209.53 L1122.07 1209.53 L1121.49 1209.53 L1120.9 1209.53 L1120.31 1209.53 L1119.73 1209.53 L1119.14 1209.53 L1118.55 1209.53 L1117.97 1209.53 L1117.38 1209.53 L1116.8 1209.53 L1116.21 1209.53 L1115.62 1209.53 L1115.04 1209.53 L1114.45 1209.53 L1113.86 1209.53 L1113.28 1209.53 L1112.69 1209.53 L1112.1 1209.53 L1111.52 1209.53 L1110.93 1209.53 L1110.34 1209.53 L1109.76 1209.53 L1109.17 1209.53 L1108.59 1209.53 L1108 1209.53 L1107.41 1209.53 L1106.83 1209.53 L1106.24 1209.53 L1105.65 1209.53 L1105.07 1209.53 L1104.48 1209.53 L1103.89 1209.53 L1103.31 1209.53 L1102.72 1209.53 L1102.14 1209.53 L1101.55 1209.53 L1100.96 1209.53 L1100.38 1209.53 L1099.79 1209.53 L1099.2 1209.53 L1098.62 1209.53 L1098.03 1209.53 L1097.44 1209.53 L1096.86 1209.53 L1096.27 1209.53 L1095.68 1209.53 L1095.1 1209.53 L1094.51 1209.53 L1093.93 1209.53 L1093.34 1209.53 L1092.75 1209.53 L1092.17 1209.53 L1091.58 1209.53 L1090.99 1209.53 L1090.41 1209.53 L1089.82 1209.53 L1089.23 1209.53 L1088.65 1209.53 L1088.06 1209.53 L1087.47 1209.53 L1086.89 1209.53 L1086.3 1209.53 L1085.72 1209.53 L1085.13 1209.53 L1084.54 1209.53 L1083.96 1209.53 L1083.37 1209.53 L1082.78 1209.53 L1082.2 1209.53 L1081.61 1209.53 L1081.02 1209.53 L1080.44 1209.53 L1079.85 1209.53 L1079.26 1209.53 L1078.68 1209.53 L1078.09 1209.53 L1077.51 1209.53 L1076.92 1209.53 L1076.33 1209.53 L1075.75 1209.53 L1075.16 1209.53 L1074.57 1209.53 L1073.99 1209.53 L1073.4 1209.53 L1072.81 1209.53 L1072.23 1209.53 L1071.64 1209.53 L1071.06 1209.53 L1070.47 1209.53 L1069.88 1209.53 L1069.3 1209.53 L1068.71 1209.53 L1068.12 1209.53 L1067.54 1209.53 L1066.95 1209.53 L1066.36 1209.53 L1065.78 1209.53 L1065.19 1209.53 L1064.6 1209.53 L1064.02 1209.53 L1063.43 1209.53 L1062.85 1209.53 L1062.26 1209.53 L1061.67 1209.53 L1061.09 1209.53 L1060.5 1209.53 L1059.91 1209.53 L1059.33 1209.53 L1058.74 1209.53 L1058.15 1209.53 L1057.57 1209.53 L1056.98 1209.53 L1056.39 1209.53 L1055.81 1209.53 L1055.22 1209.53 L1054.64 1209.53 L1054.05 1209.53 L1053.46 1209.53 L1052.88 1209.53 L1052.29 1209.53 L1051.7 1209.53 L1051.12 1209.53 L1050.53 1209.53 L1049.94 1209.53 L1049.36 1209.53 L1048.77 1209.53 L1048.19 1209.53 L1047.6 1209.53 L1047.01 1209.53 L1046.43 1209.53 L1045.84 1209.53 L1045.25 1209.53 L1044.67 1209.53 L1044.08 1209.53 L1043.49 1209.53 L1042.91 1209.53 L1042.32 1209.53 L1041.73 1209.53 L1041.15 1209.53 L1040.56 1209.53 L1039.98 1209.53 L1039.39 1209.53 L1038.8 1209.53 L1038.22 1209.53 L1037.63 1209.53 L1037.04 1209.53 L1036.46 1209.53 L1035.87 1209.53 L1035.28 1209.53 L1034.7 1209.53 L1034.11 1209.53 L1033.52 1209.53 L1032.94 1209.53 L1032.35 1209.53 L1031.77 1209.53 L1031.18 1209.53 L1030.59 1209.53 L1030.01 1209.53 L1029.42 1209.53 L1028.83 1209.53 L1028.25 1209.53 L1027.66 1209.53 L1027.07 1209.53 L1026.49 1209.53 L1025.9 1209.53 L1025.32 1209.53 L1024.73 1209.53 L1024.14 1209.53 L1023.56 1209.53 L1022.97 1209.53 L1022.38 1209.53 L1021.8 1209.53 L1021.21 1209.53 L1020.62 1209.53 L1020.04 1209.53 L1019.45 1209.53 L1018.86 1209.53 L1018.28 1209.53 L1017.69 1209.53 L1017.11 1209.53 L1016.52 1209.53 L1015.93 1209.53 L1015.35 1209.53 L1014.76 1209.53 L1014.17 1209.53 L1013.59 1209.53 L1013 1209.53 L1012.41 1209.53 L1011.83 1209.53 L1011.24 1209.53 L1010.65 1209.53 L1010.07 1209.53 L1009.48 1209.53 L1008.9 1209.53 L1008.31 1209.53 L1007.72 1209.53 L1007.14 1209.53 L1006.55 1209.53 L1005.96 1209.53 L1005.38 1209.53 L1004.79 1209.53 L1004.2 1209.53 L1003.62 1209.53 L1003.03 1209.53 L1002.44 1209.53 L1001.86 1209.53 L1001.27 1209.53 L1000.69 1209.53 L1000.1 1209.53 L999.513 1209.53 L998.926 1209.53 L998.34 1209.53 L997.754 1209.53 L997.167 1209.53 L996.581 1209.53 L995.994 1209.53 L995.408 1209.53 L994.822 1209.53 L994.235 1209.53 L993.649 1209.53 L993.062 1209.53 L992.476 1209.53 L991.889 1209.53 L991.303 1209.53 L990.717 1209.53 L990.13 1209.53 L989.544 1209.53 L988.957 1209.53 L988.371 1209.53 L987.785 1209.53 L987.198 1209.53 L986.612 1209.53 L986.025 1209.53  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.63 986.612,1209.63 987.198,1209.63 987.785,1209.63 988.371,1209.63 988.957,1209.63 989.544,1209.63 990.13,1209.63 990.717,1209.63 991.303,1209.63 991.889,1209.63 992.476,1209.63 993.062,1209.63 993.649,1209.63 994.235,1209.63 994.822,1209.63 995.408,1209.63 995.994,1209.63 996.581,1209.63 997.167,1209.63 997.754,1209.63 998.34,1209.63 998.926,1209.63 999.513,1209.63 1000.1,1209.63 1000.69,1209.63 1001.27,1209.63 1001.86,1209.63 1002.44,1209.63 1003.03,1209.63 1003.62,1209.63 1004.2,1209.63 1004.79,1209.63 1005.38,1209.63 1005.96,1209.63 1006.55,1209.63 1007.14,1209.63 1007.72,1209.63 1008.31,1209.63 1008.9,1209.63 1009.48,1209.63 1010.07,1209.63 1010.65,1209.63 1011.24,1209.63 1011.83,1209.63 1012.41,1209.63 1013,1209.63 1013.59,1209.63 1014.17,1209.63 1014.76,1209.63 1015.35,1209.63 1015.93,1209.63 1016.52,1209.63 1017.11,1209.63 1017.69,1209.63 1018.28,1209.63 1018.86,1209.63 1019.45,1209.63 1020.04,1209.63 1020.62,1209.63 1021.21,1209.63 1021.8,1209.63 1022.38,1209.63 1022.97,1209.63 1023.56,1209.63 1024.14,1209.63 1024.73,1209.63 1025.32,1209.63 1025.9,1209.63 1026.49,1209.63 1027.07,1209.63 1027.66,1209.63 1028.25,1209.63 1028.83,1209.63 1029.42,1209.63 1030.01,1209.63 1030.59,1209.63 1031.18,1209.63 1031.77,1209.63 1032.35,1209.63 1032.94,1209.63 1033.52,1209.63 1034.11,1209.63 1034.7,1209.63 1035.28,1209.63 1035.87,1209.63 1036.46,1209.63 1037.04,1209.63 1037.63,1209.63 1038.22,1209.63 1038.8,1209.63 1039.39,1209.63 1039.98,1209.63 1040.56,1209.63 1041.15,1209.63 1041.73,1209.63 1042.32,1209.63 1042.91,1209.63 1043.49,1209.63 1044.08,1209.63 1044.67,1209.63 1045.25,1209.63 1045.84,1209.63 1046.43,1209.63 1047.01,1209.63 1047.6,1209.63 1048.19,1209.63 1048.77,1209.63 1049.36,1209.63 1049.94,1209.63 1050.53,1209.63 1051.12,1209.63 1051.7,1209.63 1052.29,1209.63 1052.88,1209.63 1053.46,1209.63 1054.05,1209.63 1054.64,1209.63 1055.22,1209.63 1055.81,1209.63 1056.39,1209.63 1056.98,1209.63 1057.57,1209.63 1058.15,1209.63 1058.74,1209.63 1059.33,1209.63 1059.91,1209.63 1060.5,1209.63 1061.09,1209.63 1061.67,1209.63 1062.26,1209.63 1062.85,1209.63 1063.43,1209.63 1064.02,1209.63 1064.6,1209.63 1065.19,1209.63 1065.78,1209.63 1066.36,1209.63 1066.95,1209.63 1067.54,1209.63 1068.12,1209.63 1068.71,1209.63 1069.3,1209.63 1069.88,1209.63 1070.47,1209.63 1071.06,1209.63 1071.64,1209.63 1072.23,1209.63 1072.81,1209.63 1073.4,1209.63 1073.99,1209.63 1074.57,1209.63 1075.16,1209.63 1075.75,1209.63 1076.33,1209.63 1076.92,1209.63 1077.51,1209.63 1078.09,1209.63 1078.68,1209.63 1079.26,1209.63 1079.85,1209.63 1080.44,1209.63 1081.02,1209.63 1081.61,1209.63 1082.2,1209.63 1082.78,1209.63 1083.37,1209.63 1083.96,1209.63 1084.54,1209.63 1085.13,1209.63 1085.72,1209.63 1086.3,1209.63 1086.89,1209.63 1087.47,1209.63 1088.06,1209.63 1088.65,1209.63 1089.23,1209.63 1089.82,1209.63 1090.41,1209.63 1090.99,1209.63 1091.58,1209.63 1092.17,1209.63 1092.75,1209.63 1093.34,1209.63 1093.93,1209.63 1094.51,1209.63 1095.1,1209.63 1095.68,1209.63 1096.27,1209.63 1096.86,1209.63 1097.44,1209.63 1098.03,1209.63 1098.62,1209.63 1099.2,1209.63 1099.79,1209.63 1100.38,1209.63 1100.96,1209.63 1101.55,1209.63 1102.14,1209.63 1102.72,1209.63 1103.31,1209.63 1103.89,1209.63 1104.48,1209.63 1105.07,1209.63 1105.65,1209.63 1106.24,1209.63 1106.83,1209.63 1107.41,1209.63 1108,1209.63 1108.59,1209.63 1109.17,1209.63 1109.76,1209.63 1110.34,1209.63 1110.93,1209.63 1111.52,1209.63 1112.1,1209.63 1112.69,1209.63 1113.28,1209.63 1113.86,1209.63 1114.45,1209.63 1115.04,1209.63 1115.62,1209.63 1116.21,1209.63 1116.8,1209.63 1117.38,1209.63 1117.97,1209.63 1118.55,1209.63 1119.14,1209.63 1119.73,1209.63 1120.31,1209.63 1120.9,1209.63 1121.49,1209.63 1122.07,1209.63 1122.66,1209.63 1123.25,1209.63 1123.83,1209.63 1124.42,1209.63 1125.01,1209.63 1125.59,1209.63 1126.18,1209.63 1126.76,1209.63 1127.35,1209.63 1127.94,1209.63 1128.52,1209.63 1129.11,1209.63 1129.7,1209.63 1130.28,1209.63 1130.87,1209.63 1131.46,1209.63 1132.04,1209.63 1132.63,1209.63 1133.21,1209.63 1133.8,1209.63 1134.39,1209.63 1134.97,1209.63 1135.56,1209.63 1136.15,1209.63 1136.73,1209.63 1137.32,1209.63 1137.91,1209.63 1138.49,1209.63 1139.08,1209.63 1139.67,1209.63 1140.25,1209.63 1140.84,1209.63 1141.42,1209.63 1142.01,1209.63 1142.6,1209.63 1143.18,1209.63 1143.77,1209.63 1144.36,1209.63 1144.94,1209.63 1145.53,1209.63 1146.12,1209.63 1146.7,1209.63 1147.29,1209.63 1147.88,1209.63 1148.46,1209.63 1149.05,1209.63 1149.63,1209.63 1150.22,1209.63 1150.81,1209.63 1151.39,1209.63 1151.98,1209.63 1152.57,1209.63 1153.15,1209.63 1153.74,1209.63 1154.33,1209.63 1154.91,1209.63 1155.5,1209.63 1156.09,1209.63 1156.67,1209.63 1157.26,1209.63 1157.84,1209.63 1158.43,1209.63 1159.02,1209.63 1159.6,1209.63 1160.19,1209.63 1160.78,1209.63 1161.36,1209.63 1161.95,1209.63 1162.54,1209.63 1163.12,1209.63 1163.71,1209.63 1164.29,1209.63 1164.88,1209.63 1165.47,1209.63 1166.05,1209.63 1166.64,1209.63 1167.23,1209.63 1167.81,1209.63 1168.4,1209.63 1168.99,1209.63 1169.57,1209.63 1170.16,1209.63 1170.75,1209.63 1171.33,1209.63 1171.92,1209.63 1172.5,1209.63 1173.09,1209.63 1173.68,1209.63 1174.26,1209.63 1174.85,1209.63 1175.44,1209.63 1176.02,1209.63 1176.61,1209.63 1177.2,1209.63 1177.78,1209.63 1178.37,1209.63 1178.96,1209.63 1179.54,1209.63 1180.13,1209.63 1180.71,1209.63 1181.3,1209.63 1181.89,1209.63 1182.47,1209.63 1183.06,1209.63 1183.65,1209.63 1184.23,1209.63 1184.82,1209.63 1185.41,1209.63 1185.99,1209.63 1186.58,1209.63 1187.16,1209.63 1187.75,1209.63 1188.34,1209.63 1188.92,1209.63 1189.51,1209.63 1190.1,1209.63 1190.68,1209.63 1191.27,1209.63 1191.86,1209.63 1192.44,1209.63 1193.03,1209.63 1193.62,1209.63 1194.2,1209.63 1194.79,1209.63 1195.37,1209.63 1195.96,1209.63 1196.55,1209.63 1197.13,1209.63 1197.72,1209.63 1198.31,1209.63 1198.89,1209.63 1199.48,1209.63 1200.07,1209.63 1200.65,1209.63 1201.24,1209.63 1201.83,1209.63 1202.41,1209.63 1203,1209.63 1203.58,1209.63 1204.17,1209.63 1204.76,1209.63 1205.34,1209.63 1205.93,1209.63 1206.52,1209.63 1207.1,1209.63 1207.69,1209.63 1208.28,1209.63 1208.86,1209.63 1209.45,1209.63 1210.03,1209.63 1210.62,1209.63 1211.21,1209.63 1211.79,1209.63 1212.38,1209.63 1212.97,1209.63 1213.55,1209.63 1214.14,1209.63 1214.73,1209.63 1215.31,1209.63 1215.9,1209.63 1216.49,1209.63 1217.07,1209.63 1217.66,1209.63 1218.24,1209.63 1218.83,1209.63 1219.42,1209.63 1220,1209.63 1220.59,1209.63 1221.18,1209.63 1221.76,1209.63 1222.35,1209.63 1222.94,1209.63 1223.52,1209.63 1224.11,1209.63 1224.7,1209.63 1225.28,1209.63 1225.87,1209.63 1226.45,1209.63 1227.04,1209.63 1227.63,1209.63 1228.21,1209.63 1228.8,1209.63 1229.39,1209.63 1229.97,1209.63 1230.56,1209.63 1231.15,1209.63 1231.73,1209.63 1232.32,1209.63 1232.91,1209.63 1233.49,1209.63 1234.08,1209.63 1234.66,1209.63 1235.25,1209.63 1235.84,1209.63 1236.42,1209.63 1237.01,1209.63 1237.6,1209.63 1238.18,1209.63 1238.77,1209.63 1239.36,1209.63 1239.94,1209.63 1240.53,1209.63 1241.11,1209.63 1241.7,1209.63 1242.29,1209.63 1242.87,1209.63 1243.46,1209.63 1244.05,1209.63 1244.63,1209.63 1245.22,1209.63 1245.81,1209.63 1246.39,1209.63 1246.98,1209.63 1247.57,1209.63 1248.15,1209.63 1248.74,1209.63 1249.32,1209.63 1249.91,1209.63 1250.5,1209.63 1251.08,1209.63 1251.67,1209.63 1252.26,1209.63 1252.84,1209.63 1253.43,1209.63 1254.02,1209.63 1254.6,1209.63 1255.19,1209.63 1255.78,1209.63 1256.36,1209.63 1256.95,1209.63 1257.53,1209.63 1258.12,1209.63 1258.71,1209.63 1259.29,1209.63 1259.88,1209.63 1260.47,1209.63 1261.05,1209.63 1261.64,1209.63 1262.23,1209.63 1262.81,1209.63 1263.4,1209.63 1263.98,1209.63 1264.57,1209.63 1265.16,1209.63 1265.74,1209.63 1266.33,1209.63 1266.92,1209.63 1267.5,1209.63 1268.09,1209.63 1268.68,1209.63 1269.26,1209.63 1269.85,1209.63 1270.44,1209.63 1271.02,1209.63 1271.61,1209.63 1272.19,1209.63 1272.78,1209.63 1273.37,1209.63 1273.95,1209.63 1274.54,1209.63 1275.13,1209.63 1275.71,1209.63 1276.3,1209.63 1276.89,1209.63 1277.47,1209.63 1278.06,1209.63 1278.65,1209.63 1279.23,1209.63 1279.82,1209.63 1280.4,1209.63 1280.99,1209.63 1281.58,1209.63 1282.16,1209.63 1282.75,1209.63 1283.34,1209.63 1283.92,1209.63 1284.51,1209.63 1285.1,1209.63 1285.68,1209.63 1286.27,1209.63 1286.86,1209.63 1287.44,1209.63 1288.03,1209.63 1288.61,1209.63 1289.2,1209.63 1289.79,1209.63 1290.37,1209.63 1290.96,1209.63 1291.55,1209.63 1292.13,1209.63 1292.72,1209.63 1293.31,1209.63 1293.89,1209.63 1294.48,1209.63 1295.06,1209.63 1295.65,1209.63 1296.24,1209.63 1296.82,1209.63 1297.41,1209.63 1298,1209.63 1298.58,1209.63 1299.17,1209.63 1299.76,1209.63 1300.34,1209.63 1300.93,1209.63 1301.52,1209.63 1302.1,1209.63 1302.69,1209.63 1303.27,1209.63 1303.86,1209.63 1304.45,1209.63 1305.03,1209.63 1305.62,1209.63 1306.21,1209.63 1306.79,1209.63 1307.38,1209.63 1307.97,1209.63 1308.55,1209.63 1309.14,1209.63 1309.73,1209.63 1310.31,1209.63 1310.9,1209.63 1311.48,1209.63 1312.07,1209.63 1312.66,1209.63 1313.24,1209.63 1313.83,1209.63 1314.42,1209.63 1315,1209.63 1315.59,1209.63 1316.18,1209.63 1316.76,1209.63 1317.35,1209.63 1317.93,1209.63 1318.52,1209.63 1319.11,1209.63 1319.69,1209.63 1320.28,1209.63 1320.87,1209.63 1321.45,1209.63 1322.04,1209.63 1322.63,1209.63 1323.21,1209.63 1323.8,1209.63 1324.39,1209.63 1324.97,1209.63 1325.56,1209.63 1326.14,1209.63 1326.73,1209.63 1327.32,1209.63 1327.9,1209.63 1328.49,1209.63 1329.08,1209.63 1329.66,1209.63 1330.25,1209.63 1330.84,1209.63 1331.42,1209.63 1332.01,1209.63 1332.6,1209.63 1333.18,1209.63 1333.77,1209.63 1334.35,1209.63 1334.94,1209.63 1335.53,1209.63 1336.11,1209.63 1336.7,1209.63 1337.29,1209.63 1337.87,1209.63 1338.46,1209.63 1339.05,1209.63 1339.63,1209.63 1340.22,1209.63 1340.8,1209.63 1341.39,1209.63 1341.98,1209.63 1342.56,1209.63 1343.15,1209.63 1343.74,1209.63 1344.32,1209.63 1344.91,1209.63 1345.5,1209.63 1346.08,1209.63 1346.67,1209.63 1347.26,1209.63 1347.84,1209.63 1348.43,1209.63 1349.01,1209.63 1349.6,1209.63 1350.19,1209.63 1350.77,1209.63 1351.36,1209.63 1351.95,1209.63 1352.53,1209.63 1353.12,1209.63 1353.71,1209.63 1354.29,1209.63 1354.88,1209.63 1355.47,1209.63 1356.05,1209.63 1356.64,1209.63 1357.22,1209.63 1357.81,1209.63 1358.4,1209.63 1358.98,1209.63 1359.57,1209.63 1360.16,1209.63 1360.74,1209.63 1361.33,1209.63 1361.92,1209.63 1362.5,1209.63 1363.09,1209.63 1363.68,1209.63 1364.26,1209.63 1364.85,1209.63 1365.43,1209.63 1366.02,1209.63 1366.61,1209.63 1367.19,1209.63 1367.78,1209.63 1368.37,1209.63 1368.95,1209.63 1369.54,1209.63 1370.13,1209.63 1370.71,1209.63 1371.3,1209.63 1371.88,1209.63 1372.47,1209.63 1373.06,1209.63 1373.64,1209.63 1374.23,1209.63 1374.82,1209.63 1375.4,1209.63 1375.99,1209.63 1376.58,1209.63 1377.16,1209.63 1377.75,1209.63 1378.34,1209.63 1378.92,1209.63 1379.51,1209.63 1380.09,1209.63 1380.68,1209.63 1381.27,1209.63 1381.85,1209.63 1382.44,1209.63 1383.03,1209.63 1383.61,1209.63 1384.2,1209.63 1384.79,1209.63 1385.37,1209.63 1385.96,1209.63 1386.55,1209.63 1387.13,1209.63 1387.72,1209.63 1388.3,1209.63 1388.89,1209.63 1389.48,1209.63 1390.06,1209.63 1390.65,1209.63 1391.24,1209.63 1391.82,1209.63 1392.41,1209.63 1393,1209.63 1393.58,1209.63 1394.17,1209.63 1394.75,1209.63 1395.34,1209.63 1395.93,1209.63 1396.51,1209.63 1397.1,1209.63 1397.69,1209.63 1398.27,1209.63 1398.86,1209.63 1399.45,1209.63 1400.03,1209.63 1400.62,1209.63 1401.21,1209.63 1401.79,1209.63 1402.38,1209.63 1402.96,1209.63 1403.55,1209.63 1404.14,1209.63 1404.72,1209.63 1405.31,1209.63 1405.9,1209.63 1406.48,1209.63 1407.07,1209.63 1407.66,1209.63 1408.24,1209.63 1408.83,1209.63 1409.42,1209.63 1410,1209.63 1410.59,1209.63 1411.17,1209.63 1411.76,1209.63 1412.35,1209.63 1412.93,1209.63 1413.52,1209.63 1414.11,1209.63 1414.69,1209.63 1415.28,1209.63 1415.87,1209.63 1416.45,1209.63 1417.04,1209.63 1417.63,1209.63 1418.21,1209.63 1418.8,1209.63 1419.38,1209.63 1419.97,1209.63 1420.56,1209.63 1421.14,1209.63 1421.73,1209.63 1422.32,1209.63 1422.9,1209.63 1423.49,1209.63 1424.08,1209.63 1424.66,1209.63 1425.25,1209.63 1425.83,1209.63 1426.42,1209.63 1427.01,1209.63 1427.59,1209.63 1428.18,1209.63 1428.77,1209.63 1429.35,1209.63 1429.94,1209.63 1430.53,1209.63 1431.11,1209.63 1431.7,1209.63 1432.29,1209.63 1432.87,1209.63 1433.46,1209.63 1434.04,1209.63 1434.63,1209.63 1435.22,1209.63 1435.8,1209.63 1436.39,1209.63 1436.98,1209.63 1437.56,1209.63 1438.15,1209.63 1438.74,1209.63 1439.32,1209.63 1439.91,1209.63 1440.5,1209.63 1441.08,1209.63 1441.67,1209.63 1442.25,1209.63 1442.84,1209.63 1443.43,1209.63 1444.01,1209.63 1444.6,1209.63 1445.19,1209.63 1445.77,1209.63 1446.36,1209.63 1446.95,1209.63 1447.53,1209.63 1448.12,1209.63 1448.7,1209.63 1449.29,1209.63 1449.88,1209.63 1450.46,1209.63 1451.05,1209.63 1451.64,1209.63 1452.22,1209.63 1452.81,1209.63 1453.4,1209.63 1453.98,1209.63 1454.57,1209.63 1455.16,1209.63 1455.74,1209.63 1456.33,1209.63 1456.91,1209.63 1457.5,1209.63 1458.09,1209.63 1458.67,1209.63 1459.26,1209.63 1459.85,1209.63 1460.43,1209.63 1461.02,1209.63 1461.61,1209.63 1462.19,1209.63 1462.78,1209.63 1463.37,1209.63 1463.95,1209.63 1464.54,1209.63 1465.12,1209.63 1465.71,1209.63 1466.3,1209.63 1466.88,1209.63 1467.47,1209.63 1468.06,1209.63 1468.64,1209.63 1469.23,1209.63 1469.82,1209.63 1470.4,1209.63 1470.99,1209.63 1471.57,1209.63 1472.16,1209.63 1472.75,1209.63 1473.33,1209.63 1473.92,1209.63 1474.51,1209.63 1475.09,1209.63 1475.68,1209.63 1476.27,1209.63 1476.85,1209.63 1477.44,1209.63 1478.03,1209.63 1478.61,1209.63 1479.2,1209.63 1479.78,1209.63 1480.37,1209.63 1480.96,1209.63 1481.54,1209.63 1482.13,1209.63 1482.72,1209.63 1483.3,1209.63 1483.89,1209.63 1484.48,1209.63 1485.06,1209.63 1485.65,1209.63 1486.24,1209.63 1486.82,1209.63 1487.41,1209.63 1487.99,1209.63 1488.58,1209.63 1489.17,1209.63 1489.75,1209.63 1490.34,1209.63 1490.93,1209.63 1491.51,1209.63 1492.1,1209.63 1492.69,1209.63 1493.27,1209.63 1493.86,1209.63 1494.45,1209.63 1495.03,1209.63 1495.62,1209.63 1496.2,1209.63 1496.79,1209.63 1497.38,1209.63 1497.96,1209.63 1498.55,1209.63 1499.14,1209.63 1499.72,1209.63 1500.31,1209.63 1500.9,1209.63 1501.48,1209.63 1502.07,1209.63 1502.65,1209.63 1503.24,1209.63 1503.83,1209.63 1504.41,1209.63 1505,1209.63 1505.59,1209.63 1506.17,1209.63 1506.76,1209.63 1507.35,1209.63 1507.93,1209.63 1508.52,1209.63 1509.11,1209.63 1509.69,1209.63 1510.28,1209.63 1510.86,1209.63 1511.45,1209.63 1512.04,1209.63 1512.62,1209.63 1513.21,1209.63 1513.8,1209.63 1514.38,1209.63 1514.97,1209.63 1515.56,1209.63 1516.14,1209.63 1516.73,1209.63 1517.32,1209.63 1517.9,1209.63 1518.49,1209.63 1519.07,1209.63 1519.66,1209.63 1520.25,1209.63 1520.83,1209.63 1521.42,1209.63 1522.01,1209.63 1522.59,1209.63 1523.18,1209.63 1523.77,1209.63 1524.35,1209.63 1524.94,1209.63 1525.52,1209.63 1526.11,1209.63 1526.7,1209.63 1527.28,1209.63 1527.87,1209.63 1528.46,1209.63 1529.04,1209.63 1529.63,1209.63 1530.22,1209.63 1530.8,1209.63 1531.39,1209.63 1531.98,1209.63 1532.56,1209.63 1533.15,1209.63 1533.73,1209.63 1534.32,1209.63 1534.91,1209.63 1535.49,1209.63 1536.08,1209.63 1536.67,1209.63 1537.25,1209.63 1537.84,1209.63 1538.43,1209.63 1539.01,1209.63 1539.6,1209.63 1540.19,1209.63 1540.77,1209.63 1541.36,1209.63 1541.94,1209.63 1542.53,1209.63 1543.12,1209.63 1543.7,1209.63 1544.29,1209.63 1544.88,1209.63 1545.46,1209.63 1546.05,1209.63 1546.64,1209.63 1547.22,1209.63 1547.81,1209.63 1548.4,1209.63 1548.98,1209.63 1549.57,1209.63 1550.15,1209.63 1550.74,1209.63 1551.33,1209.63 1551.91,1209.63 1552.5,1209.63 1553.09,1209.63 1553.67,1209.63 1554.26,1209.63 1554.85,1209.63 1555.43,1209.63 1556.02,1209.63 1556.6,1209.63 1557.19,1209.63 1557.78,1209.63 1558.36,1209.63 1558.95,1209.63 1559.54,1209.63 1560.12,1209.63 1560.71,1209.63 1561.3,1209.63 1561.88,1209.63 1562.47,1209.63 1563.06,1209.63 1563.64,1209.63 1564.23,1209.63 1564.81,1209.63 1565.4,1209.63 1565.99,1209.63 1566.57,1209.63 1567.16,1209.63 1567.75,1209.63 1568.33,1209.63 1568.92,1209.63 1569.51,1209.63 1570.09,1209.63 1570.68,1209.63 1571.27,1209.63 1571.85,1209.63 1572.44,1209.63 1573.02,1209.63 1573.61,1209.63 1574.2,1209.63 1574.78,1209.63 1575.37,1209.63 1575.96,1209.63 1576.54,1209.63 1577.13,1209.63 1577.72,1209.63 1578.3,1209.63 1578.89,1209.63 1579.47,1209.63 1580.06,1209.63 1580.65,1209.63 1581.23,1209.63 1581.82,1209.63 1582.41,1209.63 1582.99,1209.63 1583.58,1209.63 1584.17,1209.63 1584.75,1209.63 1585.34,1209.63 1585.93,1209.63 1586.51,1209.63 1587.1,1209.63 1587.68,1209.63 1588.27,1209.63 1588.86,1209.63 1589.44,1209.63 1590.03,1209.63 1590.62,1209.63 1591.2,1209.63 1591.79,1209.63 1592.38,1209.63 1592.96,1209.63 1593.55,1209.63 1594.14,1209.63 1594.72,1209.63 1595.31,1209.63 1595.89,1209.63 1596.48,1209.63 1597.07,1209.63 1597.65,1209.63 1598.24,1209.63 1598.83,1209.63 1599.41,1209.63 1600,1209.63 1600.59,1209.63 1601.17,1209.63 1601.76,1209.63 1602.34,1209.63 1602.93,1209.63 1603.52,1209.63 1604.1,1209.63 1604.69,1209.63 1605.28,1209.63 1605.86,1209.63 1606.45,1209.63 1607.04,1209.63 1607.62,1209.63 1608.21,1209.63 1608.8,1209.63 1609.38,1209.63 1609.97,1209.63 1610.55,1209.63 1611.14,1209.63 1611.73,1209.63 1612.31,1209.63 1612.9,1209.63 1613.49,1209.63 1614.07,1209.63 1614.66,1209.63 1615.25,1209.63 1615.83,1209.63 1616.42,1209.63 1617.01,1209.63 1617.59,1209.63 1618.18,1209.63 1618.76,1209.63 1619.35,1209.63 1619.94,1209.63 1620.52,1209.63 1621.11,1209.63 1621.7,1209.63 1622.28,1209.63 1622.87,1209.63 1623.46,1209.63 1624.04,1209.63 1624.63,1209.63 1625.22,1209.63 1625.8,1209.63 1626.39,1209.63 1626.97,1209.63 1627.56,1209.63 1628.15,1209.63 1628.73,1209.63 1629.32,1209.63 1629.91,1209.63 1630.49,1209.63 1631.08,1209.63 1631.67,1209.63 1632.25,1209.63 1632.84,1209.63 1633.42,1209.63 1634.01,1209.63 1634.6,1209.63 1635.18,1209.63 1635.77,1209.63 1636.36,1209.63 1636.94,1209.63 1637.53,1209.63 1638.12,1209.63 1638.7,1209.63 1639.29,1209.63 1639.88,1209.63 1640.46,1209.63 1641.05,1209.63 1641.63,1209.63 1642.22,1209.63 1642.81,1209.63 1643.39,1209.63 1643.98,1209.63 1644.57,1209.63 1645.15,1209.63 1645.74,1209.63 1646.33,1209.63 1646.91,1209.63 1647.5,1209.63 1648.09,1209.63 1648.67,1209.63 1649.26,1209.63 1649.84,1209.63 1650.43,1209.63 1651.02,1209.63 1651.6,1209.63 1652.19,1209.63 1652.78,1209.63 1653.36,1209.63 1653.95,1209.63 1654.54,1209.63 1655.12,1209.63 1655.71,1209.63 1656.29,1209.63 1656.88,1209.63 1657.47,1209.63 1658.05,1209.63 1658.64,1209.63 1659.23,1209.63 1659.81,1209.63 1660.4,1209.63 1660.99,1209.63 1661.57,1209.63 1662.16,1209.63 1662.75,1209.63 1663.33,1209.63 1663.92,1209.63 1664.5,1209.63 1665.09,1209.63 1665.68,1209.63 1666.26,1209.63 1666.85,1209.63 1667.44,1209.63 1668.02,1209.63 1668.61,1209.63 1669.2,1209.63 1669.78,1209.63 1670.37,1209.63 1670.96,1209.63 1671.54,1209.63 1672.13,1209.63 1672.71,1209.63 1673.3,1209.63 1673.89,1209.63 1674.47,1209.63 1675.06,1209.63 1675.65,1209.63 1676.23,1209.63 1676.82,1209.63 1677.41,1209.63 1677.99,1209.63 1678.58,1209.63 1679.17,1209.63 1679.75,1209.63 1680.34,1209.63 1680.92,1209.63 1681.51,1209.63 1682.1,1209.63 1682.68,1209.63 1683.27,1209.63 1683.86,1209.63 1684.44,1209.63 1685.03,1209.63 1685.62,1209.63 1686.2,1209.63 1686.79,1209.63 1687.37,1209.63 1687.96,1209.63 1688.55,1209.63 1689.13,1209.63 1689.72,1209.63 1690.31,1209.63 1690.89,1209.63 1691.48,1209.63 1692.07,1209.63 1692.65,1209.63 1693.24,1209.63 1693.83,1209.63 1694.41,1209.63 1695,1209.63 1695.58,1209.63 1696.17,1209.63 1696.76,1209.63 1697.34,1209.63 1697.93,1209.63 1698.52,1209.63 1699.1,1209.63 1699.69,1209.63 1700.28,1209.63 1700.86,1209.63 1701.45,1209.63 1702.04,1209.63 1702.62,1209.63 1703.21,1209.63 1703.79,1209.63 1704.38,1209.63 1704.97,1209.63 1705.55,1209.63 1706.14,1209.63 1706.73,1209.63 1707.31,1209.63 1707.9,1209.63 1708.49,1209.63 1709.07,1209.63 1709.66,1209.63 1710.24,1209.63 1710.83,1209.63 1711.42,1209.63 1712,1209.63 1712.59,1209.63 1713.18,1209.63 1713.76,1209.63 1714.35,1209.63 1714.94,1209.63 1715.52,1209.63 1716.11,1209.63 1716.7,1209.63 1717.28,1209.63 1717.87,1209.63 1718.45,1209.63 1719.04,1209.63 1719.63,1209.63 1720.21,1209.63 1720.8,1209.63 1721.39,1209.63 1721.97,1209.63 1722.56,1209.63 1723.15,1209.63 1723.73,1209.63 1724.32,1209.63 1724.91,1209.63 1725.49,1209.63 1726.08,1209.63 1726.66,1209.63 1727.25,1209.63 1727.84,1209.63 1728.42,1209.63 1729.01,1209.63 1729.6,1209.63 1730.18,1209.63 1730.77,1209.63 1731.36,1209.63 1731.94,1209.63 1732.53,1209.63 1733.11,1209.63 1733.7,1209.63 1734.29,1209.63 1734.87,1209.63 1735.46,1209.63 1736.05,1209.63 1736.63,1209.63 1737.22,1209.63 1737.81,1209.63 1738.39,1209.63 1738.98,1209.63 1739.57,1209.63 1740.15,1209.63 1740.74,1209.63 1741.32,1209.63 1741.91,1209.63 1742.5,1209.63 1743.08,1209.63 1743.67,1209.63 1744.26,1209.63 1744.84,1209.63 1745.43,1209.63 1746.02,1209.63 1746.6,1209.63 1747.19,1209.63 1747.78,1209.63 1748.36,1209.63 1748.95,1209.63 1749.53,1209.63 1750.12,1209.63 1750.71,1209.63 1751.29,1209.63 1751.88,1209.63 1752.47,1209.63 1753.05,1209.63 1753.64,1209.63 1754.23,1209.63 1754.81,1209.63 1755.4,1209.63 1755.99,1209.63 1756.57,1209.63 1757.16,1209.63 1757.74,1209.63 1758.33,1209.63 1758.92,1209.63 1759.5,1209.63 1760.09,1209.63 1760.68,1209.63 1761.26,1209.63 1761.85,1209.63 1762.44,1209.63 1763.02,1209.63 1763.61,1209.63 1764.19,1209.63 1764.78,1209.63 1765.37,1209.63 1765.95,1209.63 1766.54,1209.63 1767.13,1209.63 1767.71,1209.63 1768.3,1209.63 1768.89,1209.63 1769.47,1209.63 1770.06,1209.63 1770.65,1209.63 1771.23,1209.63 1771.82,1209.63 1772.4,1209.63 1772.99,1209.63 1773.58,1209.63 1774.16,1209.63 1774.75,1209.63 1775.34,1209.63 1775.92,1209.63 1776.51,1209.63 1777.1,1209.63 1777.68,1209.63 1778.27,1209.63 1778.86,1209.63 1779.44,1209.63 1780.03,1209.63 1780.61,1209.63 1781.2,1209.63 1781.79,1209.63 1782.37,1209.63 1782.96,1209.63 1783.55,1209.63 1784.13,1209.63 1784.72,1209.63 1785.31,1209.63 1785.89,1209.63 1786.48,1209.63 1787.06,1209.63 1787.65,1209.63 1788.24,1209.63 1788.82,1209.63 1789.41,1209.63 1790,1209.63 1790.58,1209.63 1791.17,1209.63 1791.76,1209.63 1792.34,1209.63 1792.93,1209.63 1793.52,1209.63 1794.1,1209.63 1794.69,1209.63 1795.27,1209.63 1795.86,1209.63 1796.45,1209.63 1797.03,1209.63 1797.62,1209.63 1798.21,1209.63 1798.79,1209.63 1799.38,1209.63 1799.97,1209.63 1800.55,1209.63 1801.14,1209.63 1801.73,1209.63 1802.31,1209.63 1802.9,1209.63 1803.48,1209.63 1804.07,1209.63 1804.66,1209.63 1805.24,1209.63 1805.83,1209.63 1806.42,1209.63 1807,1209.63 1807.59,1209.63 1808.18,1209.63 1808.76,1209.63 1809.35,1209.63 1809.94,1209.63 1810.52,1209.63 1811.11,1209.63 1811.69,1209.63 1812.28,1209.63 1812.87,1209.63 1813.45,1209.63 1814.04,1209.63 1814.63,1209.63 1815.21,1209.63 1815.8,1209.63 1816.39,1209.63 1816.97,1209.63 1817.56,1209.63 1818.14,1209.63 1818.73,1209.63 1819.32,1209.63 1819.9,1209.63 1820.49,1209.63 1821.08,1209.63 1821.66,1209.63 1822.25,1209.63 1822.84,1209.63 1823.42,1209.63 1824.01,1209.63 1824.6,1209.63 1825.18,1209.63 1825.77,1209.63 1826.35,1209.63 1826.94,1209.63 1827.53,1209.63 1828.11,1209.63 1828.7,1209.63 1829.29,1209.63 1829.87,1209.63 1830.46,1209.63 1831.05,1209.63 1831.63,1209.63 1832.22,1209.63 1832.81,1209.63 1833.39,1209.63 1833.98,1209.63 1834.56,1209.63 1835.15,1209.63 1835.74,1209.63 1836.32,1209.63 1836.91,1209.63 1837.5,1209.63 1838.08,1209.63 1838.67,1209.63 1839.26,1209.63 1839.84,1209.63 1840.43,1209.63 1841.01,1209.63 1841.6,1209.63 1842.19,1209.63 1842.77,1209.63 1843.36,1209.63 1843.95,1209.63 1844.53,1209.63 1845.12,1209.63 1845.71,1209.63 1846.29,1209.63 1846.88,1209.63 1847.47,1209.63 1848.05,1209.63 1848.64,1209.63 1849.22,1209.63 1849.81,1209.63 1850.4,1209.63 1850.98,1209.63 1851.57,1209.63 1852.16,1209.63 1852.74,1209.63 1853.33,1209.63 1853.92,1209.63 1854.5,1209.63 1855.09,1209.63 1855.68,1209.63 1856.26,1209.63 1856.85,1209.63 1857.43,1209.63 1858.02,1209.63 1858.61,1209.63 1859.19,1209.63 1859.78,1209.63 1860.37,1209.63 1860.95,1209.63 1861.54,1209.63 1862.13,1209.63 1862.71,1209.63 1863.3,1209.63 1863.88,1209.63 1864.47,1209.63 1865.06,1209.63 1865.64,1209.63 1866.23,1209.63 1866.82,1209.63 1867.4,1209.63 1867.99,1209.63 1868.58,1209.63 1869.16,1209.63 1869.75,1209.63 1870.34,1209.63 1870.92,1209.63 1871.51,1209.63 1872.09,1209.63 1872.68,1209.63 1873.27,1209.63 1873.85,1209.63 1874.44,1209.63 1875.03,1209.63 1875.61,1209.63 1876.2,1209.63 1876.79,1209.63 1877.37,1209.63 1877.96,1209.63 1878.55,1209.63 1879.13,1209.63 1879.72,1209.63 1880.3,1209.63 1880.89,1209.63 1881.48,1209.63 1882.06,1209.63 1882.65,1209.63 1883.24,1209.63 1883.82,1209.63 1884.41,1209.63 1885,1209.63 1885.58,1209.63 1886.17,1209.63 1886.76,1209.63 1887.34,1209.63 1887.93,1209.63 1888.51,1209.63 1889.1,1209.63 1889.69,1209.63 1890.27,1209.63 1890.86,1209.63 1891.45,1209.63 1892.03,1209.63 1892.62,1209.63 1893.21,1209.63 1893.79,1209.63 1894.38,1209.63 1894.96,1209.63 1895.55,1209.63 1896.14,1209.63 1896.72,1209.63 1897.31,1209.63 1897.9,1209.63 1898.48,1209.63 1899.07,1209.63 1899.66,1209.63 1900.24,1209.63 1900.83,1209.63 1901.42,1209.63 1902,1209.63 1902.59,1209.63 1903.17,1209.63 1903.76,1209.63 1904.35,1209.63 1904.93,1209.63 1905.52,1209.63 1906.11,1209.63 1906.69,1209.63 1907.28,1209.63 1907.87,1209.63 1908.45,1209.63 1909.04,1209.63 1909.63,1209.63 1910.21,1209.63 1910.8,1209.63 1911.38,1209.63 1911.97,1209.63 1912.56,1209.63 1913.14,1209.63 1913.73,1209.63 1914.32,1209.63 1914.9,1209.63 1915.49,1209.63 1916.08,1209.63 1916.66,1209.63 1917.25,1209.63 1917.83,1209.63 1918.42,1209.63 1919.01,1209.63 1919.59,1209.63 1920.18,1209.63 1920.77,1209.63 1921.35,1209.63 1921.94,1209.63 1922.53,1209.63 1923.11,1209.63 1923.7,1209.63 1924.29,1209.63 1924.87,1209.63 1925.46,1209.63 1926.04,1209.63 1926.63,1209.63 1927.22,1209.63 1927.8,1209.63 1928.39,1209.63 1928.98,1209.63 1929.56,1209.63 1930.15,1209.63 1930.74,1209.63 1931.32,1209.63 1931.91,1209.63 1932.5,1209.63 1933.08,1209.63 1933.67,1209.63 1934.25,1209.63 1934.84,1209.63 1935.43,1209.63 1936.01,1209.63 1936.6,1209.63 1937.19,1209.63 1937.77,1209.63 1938.36,1209.63 1938.95,1209.63 1939.53,1209.63 1940.12,1209.63 1940.71,1209.63 1941.29,1209.63 1941.88,1209.63 1942.46,1209.63 1943.05,1209.63 1943.64,1209.63 1944.22,1209.63 1944.81,1209.63 1945.4,1209.63 1945.98,1209.63 1946.57,1209.63 1947.16,1209.63 1947.74,1209.63 1948.33,1209.63 1948.91,1209.63 1949.5,1209.63 1950.09,1209.63 1950.67,1209.63 1951.26,1209.63 1951.85,1209.63 1952.43,1209.63 1953.02,1209.63 1953.61,1209.63 1954.19,1209.63 1954.78,1209.63 1955.37,1209.63 1955.95,1209.63 1956.54,1209.63 1957.12,1209.63 1957.71,1209.63 1958.3,1209.63 1958.88,1209.63 1959.47,1209.63 1960.06,1209.63 1960.64,1209.63 1961.23,1209.63 1961.82,1209.63 1962.4,1209.63 1962.99,1209.63 1963.58,1209.63 1964.16,1209.63 1964.75,1209.63 1965.33,1209.63 1965.92,1209.63 1966.51,1209.63 1967.09,1209.63 1967.68,1209.63 1968.27,1209.63 1968.85,1209.63 1969.44,1209.63 1970.03,1209.63 1970.61,1209.63 1971.2,1209.63 1971.78,1209.63 1972.37,1209.63 1972.96,1209.63 1973.54,1209.63 1974.13,1209.63 1974.72,1209.63 1975.3,1209.63 1975.89,1209.63 1976.48,1209.63 1977.06,1209.63 1977.65,1209.63 1978.24,1209.63 1978.82,1209.63 1979.41,1209.63 1979.99,1209.63 1980.58,1209.63 1981.17,1209.63 1981.75,1209.63 1982.34,1209.63 1982.93,1209.63 1983.51,1209.63 1984.1,1209.63 1984.69,1209.63 1985.27,1209.63 1985.86,1209.63 1986.45,1209.63 1987.03,1209.63 1987.62,1209.63 1988.2,1209.63 1988.79,1209.63 1989.38,1209.63 1989.96,1209.63 1990.55,1209.63 1991.14,1209.63 1991.72,1209.63 1992.31,1209.63 1992.9,1209.63 1993.48,1209.63 1994.07,1209.63 1994.65,1209.63 1995.24,1209.63 1995.83,1209.63 1996.41,1209.63 1997,1209.63 1997.59,1209.63 1998.17,1209.63 1998.76,1209.63 1999.35,1209.63 1999.93,1209.63 2000.52,1209.63 2001.11,1209.63 2001.69,1209.63 2002.28,1209.63 2002.86,1209.63 2003.45,1209.63 2004.04,1209.63 2004.62,1209.63 2005.21,1209.63 2005.8,1209.63 2006.38,1209.63 2006.97,1209.63 2007.56,1209.63 2008.14,1209.63 2008.73,1209.63 2009.32,1209.63 2009.9,1209.63 2010.49,1209.63 2011.07,1209.63 2011.66,1209.63 2012.25,1209.63 2012.83,1209.63 2013.42,1209.63 2014.01,1209.63 2014.59,1209.63 2015.18,1209.63 2015.77,1209.63 2016.35,1209.63 2016.94,1209.63 2017.53,1209.63 2018.11,1209.63 2018.7,1209.63 2019.28,1209.63 2019.87,1209.63 2020.46,1209.63 2021.04,1209.63 2021.63,1209.63 2022.22,1209.63 2022.8,1209.63 2023.39,1209.63 2023.98,1209.63 2024.56,1209.63 2025.15,1209.63 2025.73,1209.63 2026.32,1209.63 2026.91,1209.63 2027.49,1209.63 2028.08,1209.63 2028.67,1209.63 2029.25,1209.63 2029.84,1209.63 2030.43,1209.63 2031.01,1209.63 2031.6,1209.63 2032.19,1209.63 2032.77,1209.63 2033.36,1209.63 2033.94,1209.63 2034.53,1209.63 2035.12,1209.63 2035.7,1209.63 2036.29,1209.63 2036.88,1209.63 2037.46,1209.63 2038.05,1209.63 2038.64,1209.63 2039.22,1209.63 2039.81,1209.63 2040.4,1209.63 2040.98,1209.63 2041.57,1209.63 2042.15,1209.63 2042.74,1209.63 2043.33,1209.63 2043.91,1209.63 2044.5,1209.63 2045.09,1209.63 2045.67,1209.63 2046.26,1209.63 2046.85,1209.63 2047.43,1209.63 2048.02,1209.63 2048.6,1209.63 2049.19,1209.63 2049.78,1209.63 2050.36,1209.63 2050.95,1209.63 2051.54,1209.63 2052.12,1209.63 2052.71,1209.63 2053.3,1209.63 2053.88,1209.63 2054.47,1209.63 2055.06,1209.63 2055.64,1209.63 2056.23,1209.63 2056.81,1209.63 2057.4,1209.63 2057.99,1209.63 2058.57,1209.63 2059.16,1209.63 2059.75,1209.63 2060.33,1209.63 2060.92,1209.63 2061.51,1209.63 2062.09,1209.63 2062.68,1209.63 2063.27,1209.63 2063.85,1209.63 2064.44,1209.63 2065.02,1209.63 2065.61,1209.63 2066.2,1209.63 2066.78,1209.63 2067.37,1209.63 2067.96,1209.63 2068.54,1209.63 2069.13,1209.63 2069.72,1209.63 2070.3,1209.63 2070.89,1209.63 2071.48,1209.63 2072.06,1209.63 2072.65,1209.63 2073.23,1209.63 2073.82,1209.63 2074.41,1209.63 2074.99,1209.63 2075.58,1209.63 2076.17,1209.63 2076.75,1209.63 2077.34,1209.63 2077.93,1209.63 2078.51,1209.63 2079.1,1209.63 2079.68,1209.63 2080.27,1209.63 2080.86,1209.63 2081.44,1209.63 2082.03,1209.63 2082.62,1209.63 2083.2,1209.63 2083.79,1209.63 2084.38,1209.63 2084.96,1209.63 2085.55,1209.63 2086.14,1209.63 2086.72,1209.63 2087.31,1209.63 2087.89,1209.63 2088.48,1209.63 2089.07,1209.63 2089.65,1209.63 2090.24,1209.63 2090.83,1209.63 2091.41,1209.63 2092,1209.63 2092.59,1209.63 2093.17,1209.63 2093.76,1209.63 2094.35,1209.63 2094.93,1209.63 2095.52,1209.63 2096.1,1209.63 2096.69,1209.63 2097.28,1209.63 2097.86,1209.63 2098.45,1209.63 2099.04,1209.63 2099.62,1209.63 2100.21,1209.63 2100.8,1209.63 2101.38,1209.63 2101.97,1209.63 2102.55,1209.63 2103.14,1209.63 2103.73,1209.63 2104.31,1209.63 2104.9,1209.63 2105.49,1209.63 2106.07,1209.63 2106.66,1209.63 2107.25,1209.63 2107.83,1209.63 2108.42,1209.63 2109.01,1209.63 2109.59,1209.63 2110.18,1209.63 2110.76,1209.63 2111.35,1209.63 2111.94,1209.63 2112.52,1209.63 2113.11,1209.63 2113.7,1209.63 2114.28,1209.63 2114.87,1209.63 2115.46,1209.63 2116.04,1209.63 2116.63,1209.63 2117.22,1209.63 2117.8,1209.63 2118.39,1209.63 2118.97,1209.63 2119.56,1209.63 2120.15,1209.63 2120.73,1209.63 2121.32,1209.63 2121.91,1209.63 2122.49,1209.63 2123.08,1209.63 2123.67,1209.63 2124.25,1209.63 2124.84,1209.63 2125.42,1209.63 2126.01,1209.63 2126.6,1209.63 2127.18,1209.63 2127.77,1209.63 2128.36,1209.63 2128.94,1209.63 2129.53,1209.63 2130.12,1209.63 2130.7,1209.63 2131.29,1209.63 2131.88,1209.63 2132.46,1209.63 2133.05,1209.63 2133.63,1209.63 2134.22,1209.63 2134.81,1209.63 2135.39,1209.63 2135.98,1209.63 2136.57,1209.63 2137.15,1209.63 2137.74,1209.63 2138.33,1209.63 2138.91,1209.63 2139.5,1209.63 2140.09,1209.63 2140.67,1209.63 2141.26,1209.63 2141.84,1209.63 2142.43,1209.63 2143.02,1209.63 2143.6,1209.63 2144.19,1209.63 2144.78,1209.63 2145.36,1209.63 2145.95,1209.63 2146.54,1209.63 2147.12,1209.63 2147.71,1209.63 2148.3,1209.63 2148.88,1209.63 2149.47,1209.63 2150.05,1209.63 2150.64,1209.63 2151.23,1209.63 2151.81,1209.63 2152.4,1209.63 2152.99,1209.63 2153.57,1209.63 2154.16,1209.63 2154.75,1209.63 2155.33,1209.63 2155.92,1209.63 2156.5,1209.63 2157.09,1209.63 2157.68,1209.63 2158.26,1209.63 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.9,1191.49 1399.95,899.083 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1227.4 985.439,1191.49 2158.26,1191.49 2158.26,1227.4 985.439,1227.4 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip440)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip440)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip443\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip443)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-6762.81 164.91,-6394.71 165.469,-7243.35 166.029,-7981.8 166.588,-8666.56 167.147,-9285.1 167.706,-9841.7 168.266,-9437.45 168.825,-9922.98 169.384,-10355.8 169.943,-10739.4 170.503,-10388.8 171.062,-10711.6 171.621,-10977.5 172.18,-10648 172.74,-10869.4 173.299,-11064.1 173.858,-11226.5 174.417,-11358.7 174.977,-10646.2 175.536,-10735.4 176.095,-10118.8 176.655,-10208.3 177.214,-9961.27 177.773,-9721.08 178.332,-9751.13 178.892,-9772.75 179.451,-9782.88 180.01,-9767.22 180.569,-9738.78 181.129,-9500.69 181.688,-9269.43 182.247,-9225.96 182.806,-8666.92 183.366,-8484.65 183.925,-8441.94 184.484,-8380.54 185.043,-8311.51 185.603,-8100.38 186.162,-8018.27 186.721,-7799 187.28,-7483.75 187.84,-7393.19 188.399,-7297.29 188.958,-7099.33 189.517,-6914.72 190.077,-6545.97 190.636,-6462.72 191.195,-6366.25 191.754,-6197.25 192.314,-6092.29 192.873,-5994.99 193.432,-5826.6 193.991,-5650.72 194.551,-5473.73 195.11,-5312.17 195.669,-5091.52 196.228,-4988.53 196.788,-4826.32 197.347,-4678.58 197.906,-4530.92 198.465,-4383.93 199.025,-4242.01 199.584,-4154.16 200.143,-4017.64 200.702,-3842.39 201.262,-3669.41 201.821,-3546.26 202.38,-3423.41 202.939,-3305 203.499,-3141.87 204.058,-3029.59 204.617,-2919.64 205.176,-2777.36 205.736,-2707.46 206.295,-2566.15 206.854,-2430.34 207.413,-2331.73 207.973,-2205.01 208.532,-2145.09 209.091,-2054.39 209.65,-1933.68 210.21,-1817.92 210.769,-1703.48 211.328,-1620.94 211.887,-1512.06 212.447,-1404.02 213.006,-1305.64 213.565,-1264.64 214.124,-1197.56 214.684,-1130.89 215.243,-960.898 215.802,-902.636 216.361,-894.933 216.921,-835.938 217.48,-752.94 218.039,-650.276 218.598,-506.83 219.158,-390.195 219.717,-352.885 220.276,-289.466 220.835,-225.259 221.395,-167.616 221.954,-129.101 222.513,-68.6625 223.072,-52.1847 223.632,-16.4217 224.191,20.7854 224.75,56.5006 225.309,92.954 225.869,146.685 226.428,180.129 226.987,256.804 227.546,269.327 228.106,281.603 228.665,339.259 229.224,388.839 229.783,378.963 230.343,410.037 230.902,478.051 231.461,485.932 232.02,491.688 232.58,481.971 233.139,507.205 233.698,552.85 234.257,558.637 234.817,607.424 235.376,609.146 235.935,616.208 236.494,657.306 237.054,702.339 237.613,705.359 238.172,746.889 238.731,744.99 239.291,763.099 239.85,785.57 240.409,770.626 240.968,791.947 241.528,793.575 242.087,849.28 242.646,848.872 243.205,864.544 243.765,882.939 244.324,914.972 244.883,910.478 245.442,956.861 246.002,984.884 246.561,976.959 247.12,1004.21 247.679,1013.21 248.239,987.146 248.798,995.249 249.357,1019.86 249.916,1032.15 250.476,1004.72 251.035,1014.55 251.594,1044.22 252.153,1052.03 252.713,1046.46 253.272,1040.41 253.831,1052.06 254.39,1094.46 254.95,1082.54 255.509,1072.44 256.068,1063.68 256.627,1036.64 257.187,1031.15 257.746,1044.67 258.305,1051.13 258.864,1059.35 259.424,1085.74 259.983,1092.32 260.542,1066.46 261.101,1010.95 261.661,1024.25 262.22,1019.47 262.779,1031.14 263.338,1025.75 263.898,1037.5 264.457,1084.97 265.016,1080.23 265.575,1103.48 266.135,1128.35 266.694,1133.03 267.253,1171.51 267.812,1126.21 268.372,1118.02 268.931,1174.91 269.49,1147.53 270.049,1157.08 270.609,1146.15 271.168,1171.99 271.727,1177.25 272.286,1180.42 272.846,1150.63 273.405,1123.68 273.964,1096.71 274.523,1055.44 275.083,1035.72 275.642,1031.7 276.201,1042.63 276.76,1036.29 277.32,1013.25 277.879,1028.72 278.438,1022.12 278.997,1017.01 279.557,1034.7 280.116,1027.02 280.675,1073.49 281.234,1065.47 281.794,1125.17 282.353,1116.38 282.912,1104.13 283.471,1093.24 284.031,1065.66 284.59,1056.61 285.149,1081.69 285.708,1091.41 286.268,1083.59 286.827,1074.04 287.386,1053.05 287.945,1015.8 288.505,1028.43 289.064,1003.89 289.623,1001.36 290.182,996.078 290.742,1006.67 291.301,1053.71 291.86,1096.84 292.419,1089.32 292.979,1065.66 293.538,1073.04 294.097,1062.33 294.656,1038.84 295.216,1033.35 295.775,1043.13 296.334,1051.83 296.893,1029.01 297.453,1036.21 298.012,1015.34 298.571,1026.65 299.13,1007.99 299.69,1000.17 300.249,977.992 300.808,989.76 301.368,986.231 301.927,979.847 302.486,1011.02 303.045,1020.79 303.605,1013.77 304.164,974.017 304.723,952.404 305.282,952.08 305.842,947.019 306.401,942.898 306.96,938.749 307.519,968.865 308.079,946.243 308.638,958.101 309.197,954.189 309.756,930.957 310.316,927.878 310.875,941.601 311.434,954.961 311.993,971.309 312.553,1016.86 313.112,975.379 313.671,954.157 314.23,984.654 314.79,980.601 315.349,925.715 315.908,904.981 316.467,921.308 317.027,936.639 317.586,934.862 318.145,931.647 318.704,978.174 319.264,962.538 319.823,956.576 320.382,971.352 320.941,1000.28 321.501,944.801 322.06,938.469 322.619,933.161 323.178,946.323 323.738,990.572 324.297,981.396 324.856,960.923 325.415,973.779 325.975,949.928 326.534,995.022 327.093,988.586 327.652,1000.19 328.212,1024.74 328.771,997.183 329.33,969.345 329.889,961.177 330.449,971.398 331.008,963.318 331.567,1003.79 332.126,979.856 332.686,976.204 333.245,968.811 333.804,996.791 334.363,989.415 334.923,980.123 335.482,1010.77 336.041,988.615 336.6,966.251 337.16,962.086 337.719,949.763 338.278,926.63 338.837,937.259 339.397,911.146 339.956,939.997 340.515,951.4 341.074,945.572 341.634,938.175 342.193,952.329 342.752,911.296 343.311,909.756 343.871,889.787 344.43,887.228 344.989,904.679 345.548,866.063 346.108,881.485 346.667,878.546 347.226,890.784 347.785,886.996 348.345,903.229 348.904,884.453 349.463,886.438 350.022,901.405 350.582,910.224 351.141,874.727 351.7,871.309 352.259,870.709 352.819,889.287 353.378,853.199 353.937,901.121 354.496,911.022 355.056,906.317 355.615,889.479 356.174,885.012 356.733,913.074 357.293,890.635 357.852,920.285 358.411,947.087 358.97,973.681 359.53,952.82 360.089,945.621 360.648,958.4 361.207,969.962 361.767,962.946 362.326,923.364 362.885,931.992 363.444,959.232 364.004,918.367 364.563,913.004 365.122,921.623 365.681,852.57 366.241,799.263 366.8,783.063 367.359,750.056 367.918,769.474 368.478,821.308 369.037,808.985 369.596,807.86 370.155,791.548 370.715,808.867 371.274,836.573 371.833,816.027 372.392,845.597 372.952,827.931 373.511,825.36 374.07,824.59 374.629,810.893 375.189,811.66 375.748,793.309 376.307,842.059 376.866,831.767 377.426,845.285 377.985,856.992 378.544,868.961 379.103,880.325 379.663,909.928 380.222,952.441 380.781,958.815 381.34,914.941 381.9,911.512 382.459,869.314 383.018,867.4 383.577,892.977 384.137,873.092 384.696,864.63 385.255,843.514 385.814,826.499 386.374,826.21 386.933,853.601 387.492,832.46 388.051,862.407 388.611,825.165 389.17,825.583 389.729,827.119 390.288,858.281 390.848,836.846 391.407,819.235 391.966,785.521 392.525,782.606 393.085,764.782 393.644,783.082 394.203,800.115 394.762,818.577 395.322,816.118 395.881,812.134 396.44,807.119 396.999,840.467 397.559,839.979 398.118,835.565 398.677,803.042 399.236,786.486 399.796,770.005 400.355,768.997 400.914,754.855 401.473,755.543 402.033,758.416 402.592,761.021 403.151,761.285 403.71,746.678 404.27,747.157 404.829,750.226 405.388,769.772 405.947,769.653 406.507,835.612 407.066,845.088 407.625,842.294 408.184,873.929 408.744,855.484 409.303,851.918 409.862,849.266 410.421,876.925 410.981,871.41 411.54,884.762 412.099,876.998 412.658,870.769 413.218,833.591 413.777,830.162 414.336,824.71 414.895,806.729 415.455,802.203 416.014,749.523 416.573,751.286 417.132,733.349 417.692,686.984 418.251,706.149 418.81,722.762 419.369,722.579 419.929,725.71 420.488,711.776 421.047,698.172 421.606,718.703 422.166,737.105 422.725,767.335 423.284,766.344 423.843,813.744 424.403,826.245 424.962,825.657 425.521,808.189 426.08,793.14 426.64,810.667 427.199,791.038 427.758,836.956 428.318,850.811 428.877,845.307 429.436,872.142 429.995,862.937 430.555,873.712 431.114,869.229 431.673,846.532 432.232,826.782 432.792,838.748 433.351,772.308 433.91,774.099 434.469,753.292 435.029,751.559 435.588,735.53 436.147,748.628 436.706,765.399 437.266,761.889 437.825,797.484 438.384,793.597 438.943,795.137 439.503,792.136 440.062,804.69 440.621,757.054 441.18,745.257 441.74,730.968 442.299,731.449 442.858,747.303 443.417,778.884 443.977,780.643 444.536,779.064 445.095,809.171 445.654,789.411 446.214,791.226 446.773,791.314 447.332,836.317 447.891,799.024 448.451,810.938 449.01,809.437 449.569,805.608 450.128,799.11 450.688,797.052 451.247,777.653 451.806,774.396 452.365,789.815 452.925,787.368 453.484,788.603 454.043,790.246 454.602,773.945 455.162,788.615 455.721,769.205 456.28,765.285 456.839,762.353 457.399,776.092 457.958,778.444 458.517,777.437 459.076,775.79 459.636,758.695 460.195,744.539 460.754,763.491 461.313,747.948 461.873,746.244 462.432,766.842 462.991,733.5 463.55,730.375 464.11,780.928 464.669,812.329 465.228,789.995 465.787,799.545 466.347,782.15 466.906,779.722 467.465,742.398 468.024,740.149 468.584,771.772 469.143,786.287 469.702,784.268 470.261,766.209 470.821,763.254 471.38,806.131 471.939,817.859 472.498,797.299 473.058,762.231 473.617,812.353 474.176,823.381 474.735,802.978 475.295,831.914 475.854,827.783 476.413,807.075 476.972,786.284 477.532,768.133 478.091,767.006 478.65,780.402 479.209,746.217 479.769,744.687 480.328,761.191 480.887,757.979 481.446,805.262 482.006,767.286 482.565,762.121 483.124,777.819 483.683,792.268 484.243,770.39 484.802,768.527 485.361,768.09 485.92,748.278 486.48,731.449 487.039,733.068 487.598,719.48 488.157,719.645 488.717,703.238 489.276,704.967 489.835,721.451 490.394,721.303 490.954,704.122 491.513,722.22 492.072,739.864 492.631,726.119 493.191,724.979 493.75,725.247 494.309,708.339 494.868,709.38 495.428,745.887 495.987,746.632 496.546,746.276 497.105,710.984 497.665,757.848 498.224,758.096 498.783,772.855 499.342,785.466 499.902,782.532 500.461,798.012 501.02,811.872 501.579,804.462 502.139,768.288 502.698,769.042 503.257,782.178 503.816,779.487 504.376,776.54 504.935,789.643 505.494,756.086 506.053,753.561 506.613,753.078 507.172,750.309 507.731,780.129 508.29,792.825 508.85,790.602 509.409,769.742 509.968,785.1 510.527,779.29 511.087,760.882 511.646,756.515 512.205,737.594 512.764,721.212 513.324,707.035 513.883,741.484 514.442,723.358 515.001,738.152 515.561,770.133 516.12,751.171 516.679,719.502 517.238,688.827 517.798,708.99 518.357,723.852 518.916,708.328 519.475,740.712 520.035,775.079 520.594,773.479 521.153,805.695 521.712,819.102 522.272,797.611 522.831,776.25 523.39,772.276 523.949,754.134 524.509,755.064 525.068,754.164 525.627,706.861 526.186,692.34 526.746,679.934 527.305,683.411 527.864,669.079 528.423,690.69 528.983,706.526 529.542,712.084 530.101,711.598 530.66,725.065 531.22,706.659 531.779,642.419 532.338,632.006 532.897,620.348 533.457,641.289 534.016,664.368 534.575,668.462 535.134,636.14 535.694,655.791 536.253,674.904 536.812,676.095 537.371,627.883 537.931,665.855 538.49,683.322 539.049,684.841 539.608,702.568 540.168,719.215 540.727,718.838 541.286,736.437 541.845,755.986 542.405,754.521 542.964,691.068 543.523,739.042 544.082,740.696 544.642,773.641 545.201,801.992 545.76,815.057 546.319,828.654 546.879,824.151 547.438,787.754 547.997,750.316 548.556,733.984 549.116,749.539 549.675,750.137 550.234,751.291 550.793,750.501 551.353,768.455 551.912,780.922 552.471,794.535 553.031,774.662 553.59,772.688 554.149,801.075 554.708,830.191 555.268,842.003 555.827,833.369 556.386,827.511 556.945,836.238 557.505,813.431 558.064,823.678 558.623,818.243 559.182,830.21 559.742,821.612 560.301,847.467 560.86,840.931 561.419,835.557 561.979,843.994 562.538,835.267 563.097,846.705 563.656,836.787 564.216,830.382 564.775,772.089 565.334,753.505 565.893,736.367 566.453,718.426 567.012,703.551 567.571,755.704 568.13,753.199 568.69,767.364 569.249,762.363 569.808,779.626 570.367,762.11 570.927,721.864 571.486,723.721 572.045,706.417 572.604,720.193 573.164,721.596 573.723,721.723 574.282,723.193 574.841,719.762 575.401,718.844 575.96,734.858 576.519,737.21 577.078,736.002 577.638,748.14 578.197,758.755 578.756,741.249 579.315,722.768 579.875,723.79 580.434,693.857 580.993,676.537 581.552,690.613 582.112,657.938 582.671,676.529 583.23,645.461 583.789,647.803 584.349,651.818 584.908,636.011 585.467,622.567 586.026,624.944 586.586,628.392 587.145,630.627 587.704,630.574 588.263,666.007 588.823,667.104 589.382,650.547 589.941,639.851 590.5,675.63 591.06,697.197 591.619,648.159 592.178,654.434 592.737,687.301 593.297,704.196 593.856,671.96 594.415,686.722 594.974,687.393 595.534,657.377 596.093,709.511 596.652,743.553 597.211,772.817 597.771,786.852 598.33,763.764 598.889,762.059 599.448,726.305 600.008,743.743 600.567,725.281 601.126,723.42 601.685,723.071 602.245,755.002 602.804,687.145 603.363,706.3 603.922,675.901 604.482,677.457 605.041,617.676 605.6,590.941 606.159,613.128 606.719,621.644 607.278,597.992 607.837,575.609 608.396,582.862 608.956,559.25 609.515,565.771 610.074,520.005 610.633,531.464 611.193,557.302 611.752,566.267 612.311,610.49 612.87,599.606 613.43,638.3 613.989,627.568 614.548,617.683 615.107,625.688 615.667,642.505 616.226,626.393 616.785,666.538 617.344,639.023 617.904,673.99 618.463,690.92 619.022,676.769 619.581,710.291 620.141,727.743 620.7,732.336 621.259,732.69 621.818,716.865 622.378,698.983 622.937,717.495 623.496,705.351 624.055,707.882 624.615,725.523 625.174,756.072 625.733,754.544 626.292,769.24 626.852,784.33 627.411,827.991 627.97,855.645 628.529,801.354 629.089,813.826 629.648,792.401 630.207,752.203 630.766,737.483 631.326,735.339 631.885,719.415 632.444,718.826 633.003,734.424 633.563,730.108 634.122,762.653 634.681,742.701 635.24,758.41 635.8,754.417 636.359,748.467 636.918,727.752 637.477,727.732 638.037,724.032 638.596,719.539 639.155,718.378 639.714,748.637 640.274,729.294 640.833,745.968 641.392,747.627 641.951,724.017 642.511,705.337 643.07,687.315 643.629,686.241 644.188,687.334 644.748,688.859 645.307,706.318 645.866,686.607 646.425,683.379 646.985,668.599 647.544,655.629 648.103,673.311 648.662,675.221 649.222,709.327 649.781,706.308 650.34,689.006 650.899,704.526 651.459,720.872 652.018,737.395 652.577,734.063 653.136,732.939 653.696,715.956 654.255,714.418 654.814,712.776 655.373,748.384 655.933,759.664 656.492,710.304 657.051,692.086 657.61,675.856 658.17,689.996 658.729,723.252 659.288,720.706 659.847,716.578 660.407,665.079 660.966,685.147 661.525,669.774 662.084,686.336 662.644,670.299 663.203,656.656 663.762,657.143 664.321,659.431 664.881,644.832 665.44,663.491 665.999,695.394 666.558,711.163 667.118,725.039 667.677,706.808 668.236,707.44 668.795,738.84 669.355,738.956 669.914,769.015 670.473,750.889 671.032,749.179 671.592,745.009 672.151,694.287 672.71,694.623 673.269,725.686 673.829,693.659 674.388,693.481 674.947,743.757 675.506,742.9 676.066,724.841 676.625,771.993 677.184,800.72 677.743,810.009 678.303,833.447 678.862,844.308 679.421,794.429 679.981,790.615 680.54,753.991 681.099,780.097 681.658,761.135 682.218,759.894 682.777,756.497 683.336,755.55 683.895,724.34 684.455,722.317 685.014,705.956 685.573,704.581 686.132,719.695 686.692,686.227 687.251,683.164 687.81,681.124 688.369,694.039 688.929,709.516 689.488,693.943 690.047,693.481 690.606,661.843 691.166,666.106 691.725,682.157 692.284,713.432 692.843,724.709 693.403,705.21 693.962,723.016 694.521,754.085 695.08,768.296 695.64,764.001 696.199,791.17 696.758,765.531 697.317,730.698 697.877,730.766 698.436,730.534 698.995,712.717 699.554,726.124 700.114,725.05 700.673,737.483 701.232,701.743 701.791,687.055 702.351,684.175 702.91,700.155 703.469,717.424 704.028,685.023 704.588,687.651 705.147,654.527 705.706,671.946 706.265,670.455 706.825,672.34 707.384,687.793 707.943,656.864 708.502,658.599 709.062,659.726 709.621,645.767 710.18,677.794 710.739,661.485 711.299,632.366 711.858,641.005 712.417,678.326 712.976,663.741 713.536,616.248 714.095,620.014 714.654,611.526 715.213,631.96 715.773,634.771 716.332,635.558 716.891,670.058 717.45,669.078 718.01,704.838 718.569,702.293 719.128,703.965 719.687,686.354 720.247,692.229 720.806,692.474 721.365,660.484 721.924,649.034 722.484,651.027 723.043,670.494 723.602,688.198 724.161,687.967 724.721,688.242 725.28,670.893 725.839,669.563 726.398,686.983 726.958,685.562 727.517,723.582 728.076,721.442 728.635,685.077 729.195,668.465 729.754,669.158 730.313,653.372 730.872,719.912 731.432,666.422 731.991,693.356 732.55,694.119 733.109,692.212 733.669,662.401 734.228,681.477 734.787,664.257 735.346,647.304 735.906,634.594 736.465,639.491 737.024,626.917 737.583,602.754 738.143,576.324 738.702,568.481 739.261,591.523 739.82,615.221 740.38,622.418 740.939,676.416 741.498,710.014 742.057,692.759 742.617,676.713 743.176,645.604 743.735,632.199 744.294,667.199 744.854,668.769 745.413,669.887 745.972,670.609 746.531,672.47 747.091,655.757 747.65,653.791 748.209,674.258 748.768,675.649 749.328,711.554 749.887,711.216 750.446,755.732 751.005,770.578 751.565,750.086 752.124,764.727 752.683,761.917 753.242,756.077 753.802,766.016 754.361,731.411 754.92,744.339 755.479,756.073 756.039,722.782 756.598,720.901 757.157,701.609 757.716,716.21 758.276,729.713 758.835,710.545 759.394,727.677 759.953,708.889 760.513,660.773 761.072,662.707 761.631,647.882 762.19,651.695 762.75,653.651 763.309,654.675 763.868,676.817 764.427,679.607 764.987,679.234 765.546,695.465 766.105,676.79 766.664,675.081 767.224,727.632 767.783,727.137 768.342,659.79 768.901,659.158 769.461,644.613 770.02,648.817 770.579,686.004 771.138,733.409 771.698,745.834 772.257,756.385 772.816,737.754 773.375,749.131 773.935,745.14 774.494,725.04 775.053,720.455 775.612,718.835 776.172,735.072 776.731,771.723 777.29,782.17 777.849,760.174 778.409,725.601 778.968,738.543 779.527,736.222 780.086,747.672 780.646,725.239 781.205,720.545 781.764,720.946 782.323,685.376 782.883,717.574 783.442,712.782 784.001,726.722 784.56,709.046 785.12,721.93 785.679,703.859 786.238,690.681 786.797,685.421 787.357,687.581 787.916,673.639 788.475,675.017 789.034,677.985 789.594,677.884 790.153,693.511 790.712,696.564 791.271,699.458 791.831,701.314 792.39,687.142 792.949,670.574 793.508,669.995 794.068,703.289 794.627,733.258 795.186,760.559 795.745,743.183 796.305,756.893 796.864,753.128 797.423,721.13 797.982,704.992 798.542,700.121 799.101,702.313 799.66,703.292 800.219,689.236 800.779,644.825 801.338,647.054 801.897,646.464 802.456,664.933 803.016,666.571 803.575,668.304 804.134,662.68 804.693,660.94 805.253,647.986 805.812,602.631 806.371,641.838 806.931,644.51 807.49,629.404 808.049,615.438 808.608,636.589 809.168,655.444 809.727,705.119 810.286,705.29 810.845,732.076 811.405,732.858 811.964,701.452 812.523,732.422 813.082,745.321 813.642,723.775 814.201,755.821 814.76,766.327 815.319,789.974 815.879,800.809 816.438,781.948 816.997,761.507 817.556,788.3 818.116,767.493 818.675,797.052 819.234,789.485 819.793,799.962 820.353,761.724 820.912,774.718 821.471,755.943 822.03,754.284 822.59,783.26 823.149,746.328 823.708,743.251 824.267,739.98 824.827,722.999 825.386,740.666 825.945,740.952 826.504,755.201 827.064,722.235 827.623,700.628 828.182,732.387 828.741,680.787 829.301,664.964 829.86,649.488 830.419,653.488 830.978,654.025 831.538,638.822 832.097,604.782 832.656,609.878 833.215,595.435 833.775,596.112 834.334,630.537 834.893,651.973 835.452,653.604 836.012,657.154 836.571,656.005 837.13,643.408 837.689,630.174 838.249,631.689 838.808,601.07 839.367,586.389 839.926,593.3 840.486,599.218 841.045,605.218 841.604,592.063 842.163,577.664 842.723,584.978 843.282,608.776 843.841,613.956 844.4,622.361 844.96,591.742 845.519,577.599 846.078,601.192 846.637,636.914 847.197,590.57 847.756,595.428 848.315,598.866 848.874,603.507 849.434,687.038 849.993,671.747 850.552,656.73 851.111,673.17 851.671,655.698 852.23,642.623 852.789,642.346 853.348,642.628 853.908,646.831 854.467,636.443 855.026,636.625 855.585,622.776 856.145,674.512 856.704,641.911 857.263,624.179 857.822,610.867 858.382,611.962 858.941,588.706 859.5,559.563 860.059,550.702 860.619,593.83 861.178,548.883 861.737,557.761 862.296,562.002 862.856,569.677 863.415,576.199 863.974,584.427 864.533,590.506 865.093,627.912 865.652,630.417 866.211,635.941 866.77,686.838 867.33,691.107 867.889,722.649 868.448,721.072 869.007,753.043 869.567,784.098 870.126,782.628 870.685,792.299 871.244,834.981 871.804,828.218 872.363,834.035 872.922,826.346 873.481,818.356 874.041,781.957 874.6,774.347 875.159,752.075 875.718,715.145 876.278,711.92 876.837,760.101 877.396,769.686 877.955,749.593 878.515,760.276 879.074,720.983 879.633,734.996 880.192,746.252 880.752,741.867 881.311,754.204 881.87,766.065 882.429,756.522 882.989,735.607 883.548,767.176 884.107,779.387 884.666,743.58 885.226,789.061 885.785,786.076 886.344,765.047 886.903,745.655 887.463,708.576 888.022,725.712 888.581,723.722 889.14,725.239 889.7,744.616 890.259,724.425 890.818,720.912 891.377,703.477 891.937,716.808 892.496,682.056 893.055,682.161 893.614,712.453 894.174,727.739 894.733,692.27 895.292,707.717 895.851,704.778 896.411,674.646 896.97,688.505 897.529,669.935 898.088,667.621 898.648,637.992 899.207,622.57 899.766,642.431 900.325,627.871 900.885,658.618 901.444,690.605 902.003,721.769 902.562,768.333 903.122,747.968 903.681,725.118 904.24,719.995 904.799,735.78 905.359,765.376 905.918,778.736 906.477,759.255 907.036,721.331 907.596,718.358 908.155,730.352 908.714,727.875 909.273,723.571 909.833,704.823 910.392,687.927 910.951,688.455 911.51,670.064 912.07,652.768 912.629,668.849 913.188,668.245 913.747,685.57 914.307,653.366 914.866,624.851 915.425,629.405 915.984,649.937 916.544,635.857 917.103,622.408 917.662,610.28 918.221,632.009 918.781,649.085 919.34,700.274 919.899,697.987 920.458,696.667 921.018,682.181 921.577,712.804 922.136,714.172 922.695,778.176 923.255,758.776 923.814,755.537 924.373,736.017 924.932,703.251 925.492,719.996 926.051,718.786 926.61,733.245 927.169,749.327 927.729,763.772 928.288,763.721 928.847,711.047 929.406,694.734 929.966,693.227 930.525,693.951 931.084,694.283 931.644,674.773 932.203,673.035 932.762,642.656 933.321,648.606 933.881,647.529 934.44,661.578 934.999,677.444 935.558,693.604 936.118,693.627 936.677,696.931 937.236,682.823 937.795,695.643 938.355,682.09 938.914,682.027 939.473,695.672 940.032,709.76 940.592,722.021 941.151,702.153 941.71,718.021 942.269,764.638 942.829,760.029 943.388,758.542 943.947,752.59 944.506,764.03 945.066,740.854 945.625,741.213 946.184,718.967 946.743,731.51 947.303,732.189 947.862,731.673 948.421,730.208 948.98,699.343 949.54,683.014 950.099,714.615 950.658,728.451 951.217,695.329 951.777,676.41 952.336,642.323 952.895,611.929 953.454,661.572 954.014,664.923 954.573,667.078 955.132,635.753 955.691,635.933 956.251,637.184 956.81,610.517 957.369,611.834 957.928,634.567 958.488,635.616 959.047,637.797 959.606,641.35 960.165,676.285 960.725,631.238 961.284,669.47 961.843,670.942 962.402,706.156 962.962,673.5 963.521,658.63 964.08,643.325 964.639,643.439 965.199,645.686 965.758,649.99 966.317,650.638 966.876,667.705 967.436,699.989 967.995,698.963 968.554,701.539 969.113,702.059 969.673,699.487 970.232,698.857 970.791,701.487 971.35,683.607 971.91,667.901 972.469,702.56 973.028,684.083 973.587,685.572 974.147,686.25 974.706,667.943 975.265,683.669 975.824,667.191 976.384,653.645 976.943,688.391 977.502,702.291 978.061,715.537 978.621,711.352 979.18,695.378 979.739,726.153 980.298,659 980.858,723.723 981.417,736.352 981.976,716.004 982.535,711.064 983.095,663.732 983.654,697.332 984.213,696.798 984.772,711.388 985.332,677.794 985.891,694.556 986.45,712.233 987.009,722.859 987.569,689.759 988.128,671.092 988.687,673.238 989.246,705.061 989.806,692.267 990.365,707.81 990.924,738.657 991.483,703.175 992.043,670.539 992.602,671.321 993.161,636.727 993.72,688.909 994.28,672.23 994.839,658.291 995.398,645.618 995.957,701.589 996.517,681.482 997.076,661.963 997.635,633.007 998.194,652.013 998.754,655.279 999.313,653.076 999.872,639.858 1000.43,627.619 1000.99,646.505 1001.55,648.681 1002.11,650.285 1002.67,651.886 1003.23,619.991 1003.79,623.647 1004.35,607.622 1004.91,598.045 1005.46,590.42 1006.02,593.851 1006.58,600.263 1007.14,589.238 1007.7,609.592 1008.26,596.945 1008.82,586.644 1009.38,572.473 1009.94,578.732 1010.5,598.455 1011.06,614.122 1011.62,585.868 1012.18,594.117 1012.73,616.471 1013.29,638.175 1013.85,638.181 1014.41,605.08 1014.97,628.834 1015.53,633.251 1016.09,640.204 1016.65,614.803 1017.21,607.098 1017.77,618.627 1018.33,622.821 1018.89,660.497 1019.45,665.047 1020.01,678.664 1020.56,710.238 1021.12,773.245 1021.68,753.03 1022.24,706.79 1022.8,753.4 1023.36,748.469 1023.92,729.458 1024.48,699.278 1025.04,715.229 1025.6,697.444 1026.16,698.146 1026.72,697.86 1027.28,698.192 1027.83,714.459 1028.39,714.836 1028.95,714.772 1029.51,651.363 1030.07,670.481 1030.63,684.918 1031.19,681.522 1031.75,696.217 1032.31,693.949 1032.87,694.014 1033.43,726.889 1033.99,692.146 1034.55,744.827 1035.1,725.846 1035.66,706.8 1036.22,723.82 1036.78,753.207 1037.34,764.903 1037.9,728.467 1038.46,692.531 1039.02,723.511 1039.58,703.017 1040.14,687.129 1040.7,688.578 1041.26,688.258 1041.82,687.589 1042.38,737.485 1042.93,736.711 1043.49,733.019 1044.05,762.179 1044.61,775.359 1045.17,756.303 1045.73,769.108 1046.29,765.209 1046.85,778.427 1047.41,793.632 1047.97,807.696 1048.53,804.917 1049.09,798.443 1049.65,808.594 1050.2,767.657 1050.76,775.101 1051.32,769.789 1051.88,768.64 1052.44,794.088 1053,789.15 1053.56,780.336 1054.12,760.025 1054.68,757.108 1055.24,770.299 1055.8,752.436 1056.36,763.487 1056.92,747.496 1057.48,715.063 1058.03,665.638 1058.59,667.029 1059.15,711.887 1059.71,711.278 1060.27,730.4 1060.83,744.713 1061.39,770.893 1061.95,769.924 1062.51,733.327 1063.07,730.843 1063.63,723.925 1064.19,683.441 1064.75,635.753 1065.3,623.198 1065.86,626.481 1066.42,644.272 1066.98,630.964 1067.54,587.682 1068.1,592.255 1068.66,579.189 1069.22,586.852 1069.78,578.167 1070.34,620.574 1070.9,608.142 1071.46,629.963 1072.02,669.085 1072.57,671.436 1073.13,668.984 1073.69,668.048 1074.25,648.851 1074.81,683.85 1075.37,668.998 1075.93,681.882 1076.49,633.498 1077.05,652.742 1077.61,637.881 1078.17,639.043 1078.73,638.269 1079.29,624.104 1079.85,644.241 1080.4,579.238 1080.96,599.537 1081.52,601.055 1082.08,590.304 1082.64,594.592 1083.2,598.96 1083.76,623.282 1084.32,658.133 1084.88,689.856 1085.44,706.528 1086,708.9 1086.56,725.436 1087.12,724.262 1087.67,722.488 1088.23,704.065 1088.79,702.903 1089.35,698.919 1089.91,712.723 1090.47,759.155 1091.03,785.426 1091.59,779.821 1092.15,773.163 1092.71,752.594 1093.27,700.602 1093.83,697.02 1094.39,698.046 1094.94,713.986 1095.5,729.231 1096.06,710.239 1096.62,671.934 1097.18,654.159 1097.74,654.289 1098.3,656.854 1098.86,659.897 1099.42,661.776 1099.98,676.502 1100.54,696.868 1101.1,713.542 1101.66,727.183 1102.22,693.055 1102.77,693.183 1103.33,685.035 1103.89,671.22 1104.45,674.436 1105.01,644.837 1105.57,681.481 1106.13,696.931 1106.69,680.381 1107.25,678.977 1107.81,713.641 1108.37,723.577 1108.93,720.418 1109.49,702.859 1110.04,748.529 1110.6,745.214 1111.16,745.214 1111.72,725.164 1112.28,770.614 1112.84,763.897 1113.4,775.029 1113.96,786.039 1114.52,812.163 1115.08,823.736 1115.64,846.395 1116.2,825.229 1116.76,832.179 1117.31,792.039 1117.87,737.049 1118.43,735.263 1118.99,698.075 1119.55,684.173 1120.11,664.679 1120.67,696.204 1121.23,661.045 1121.79,647.74 1122.35,664.24 1122.91,664.377 1123.47,631.984 1124.03,634.275 1124.59,654.209 1125.14,639.575 1125.7,658.258 1126.26,660.012 1126.82,660.962 1127.38,680.444 1127.94,681.032 1128.5,665.563 1129.06,650.052 1129.62,684.243 1130.18,651.905 1130.74,669.637 1131.3,673.041 1131.86,676.04 1132.41,674.203 1132.97,674.899 1133.53,693.7 1134.09,692.962 1134.65,675.755 1135.21,677.09 1135.77,675.213 1136.33,675.584 1136.89,644.783 1137.45,663.879 1138.01,696.29 1138.57,725.761 1139.13,738.725 1139.68,733.265 1140.24,733.034 1140.8,701.737 1141.36,698.653 1141.92,678.736 1142.48,681.968 1143.04,732.463 1143.6,744.061 1144.16,757.937 1144.72,767.496 1145.28,732.079 1145.84,698.021 1146.4,683.016 1146.96,669.787 1147.51,622.502 1148.07,642.654 1148.63,645.013 1149.19,646.338 1149.75,630.375 1150.31,635.997 1150.87,656.112 1151.43,690.534 1151.99,710.908 1152.55,693.627 1153.11,679.253 1153.67,662.527 1154.23,728.093 1154.78,725.656 1155.34,687.931 1155.9,705.348 1156.46,721.587 1157.02,717.527 1157.58,698.97 1158.14,715.206 1158.7,729.692 1159.26,743.069 1159.82,723.283 1160.38,723.029 1160.94,719.572 1161.5,734.996 1162.05,749.387 1162.61,728.458 1163.17,706.539 1163.73,658.354 1164.29,661.3 1164.85,661.341 1165.41,694.754 1165.97,664.245 1166.53,680.553 1167.09,715.947 1167.65,716.509 1168.21,732.908 1168.77,697.153 1169.33,662.049 1169.88,647.53 1170.44,651.261 1171,635.524 1171.56,639.246 1172.12,611.427 1172.68,617.912 1173.24,652.522 1173.8,639.061 1174.36,592.966 1174.92,597.108 1175.48,601.368 1176.04,623.642 1176.6,624.873 1177.15,627.887 1177.71,617.94 1178.27,603.87 1178.83,625.892 1179.39,627.995 1179.95,633.108 1180.51,632.772 1181.07,650.321 1181.63,622.671 1182.19,645.459 1182.75,647.963 1183.31,701.398 1183.87,698.24 1184.43,712.476 1184.98,696.377 1185.54,694.275 1186.1,726.551 1186.66,690.283 1187.22,673.275 1187.78,656.656 1188.34,692.086 1188.9,740.173 1189.46,733.714 1190.02,717.585 1190.58,699.951 1191.14,685.739 1191.7,689.857 1192.25,686.077 1192.81,673.97 1193.37,675.186 1193.93,659.222 1194.49,679.158 1195.05,649.323 1195.61,618.289 1196.17,654.528 1196.73,674.382 1197.29,624.237 1197.85,611.207 1198.41,619.16 1198.97,624.125 1199.52,611.134 1200.08,664.3 1200.64,682.451 1201.2,684.101 1201.76,716.393 1202.32,698.146 1202.88,715.705 1203.44,715.838 1204,683.126 1204.56,662.792 1205.12,663.834 1205.68,662.342 1206.24,646.686 1206.8,647.603 1207.35,613.759 1207.91,614.706 1208.47,650.026 1209.03,649.311 1209.59,651.95 1210.15,653.186 1210.71,657.705 1211.27,662.2 1211.83,675.902 1212.39,676.685 1212.95,696.572 1213.51,701.971 1214.07,696.834 1214.62,714.18 1215.18,713.08 1215.74,741.653 1216.3,741.415 1216.86,736.266 1217.42,747.809 1217.98,743.812 1218.54,726.215 1219.1,722.525 1219.66,722.452 1220.22,707.277 1220.78,739.785 1221.34,753.911 1221.89,753.685 1222.45,716.081 1223.01,683.848 1223.57,668.245 1224.13,697.258 1224.69,709.236 1225.25,724.516 1225.81,771.992 1226.37,768.223 1226.93,796.894 1227.49,744.016 1228.05,754.762 1228.61,782.588 1229.17,775.448 1229.72,805.435 1230.28,828.453 1230.84,792.608 1231.4,803.617 1231.96,794.206 1232.52,769.965 1233.08,766.928 1233.64,764.464 1234.2,776.001 1234.76,784.861 1235.32,793.744 1235.88,789.796 1236.44,821.107 1236.99,832.235 1237.55,809.971 1238.11,802.088 1238.67,760.101 1239.23,753.971 1239.79,714.421 1240.35,716.509 1240.91,735.392 1241.47,761.641 1242.03,722.897 1242.59,721.03 1243.15,702.929 1243.71,705.676 1244.26,737.124 1244.82,716.725 1245.38,749.223 1245.94,728.605 1246.5,727.044 1247.06,676.35 1247.62,661.571 1248.18,663.047 1248.74,632.035 1249.3,602.705 1249.86,605.823 1250.42,611.711 1250.98,612.237 1251.54,616.129 1252.09,634.659 1252.65,604.5 1253.21,629.016 1253.77,630.06 1254.33,632.773 1254.89,615.138 1255.45,601.195 1256.01,604.987 1256.57,640.911 1257.13,609.217 1257.69,632.438 1258.25,616.576 1258.81,620.009 1259.36,624.409 1259.92,626.325 1260.48,645.389 1261.04,663.412 1261.6,665.013 1262.16,683.204 1262.72,683.709 1263.28,667.389 1263.84,652.632 1264.4,656.37 1264.96,670.668 1265.52,672.155 1266.08,689.692 1266.63,689.787 1267.19,705.376 1267.75,721.062 1268.31,771.24 1268.87,749.714 1269.43,779.239 1269.99,759.979 1270.55,759.946 1271.11,757.921 1271.67,753.479 1272.23,748.187 1272.79,681.949 1273.35,696.816 1273.91,712.121 1274.46,708.211 1275.02,689.429 1275.58,672.6 1276.14,688.405 1276.7,684.314 1277.26,653.739 1277.82,658.166 1278.38,661.412 1278.94,646.123 1279.5,648.718 1280.06,653.235 1280.62,672.588 1281.18,706.831 1281.73,687.582 1282.29,688.695 1282.85,734.673 1283.41,718.466 1283.97,717.552 1284.53,702.241 1285.09,699.729 1285.65,728.237 1286.21,730.104 1286.77,728.911 1287.33,696.026 1287.89,712.484 1288.45,727.013 1289,693.344 1289.56,691.152 1290.12,670.125 1290.68,703.265 1291.24,672.336 1291.8,671.796 1292.36,669.937 1292.92,670.043 1293.48,654.107 1294.04,638.702 1294.6,626.225 1295.16,644.284 1295.72,662.044 1296.28,647.594 1296.83,634.966 1297.39,671.72 1297.95,656.542 1298.51,673.912 1299.07,672.867 1299.63,659.495 1300.19,664.086 1300.75,664.879 1301.31,663.166 1301.87,645.381 1302.43,634.004 1302.99,623.98 1303.55,662.708 1304.1,647.131 1304.66,647.569 1305.22,600.992 1305.78,623.602 1306.34,639.333 1306.9,654.648 1307.46,639.929 1308.02,692.108 1308.58,693.759 1309.14,677.716 1309.7,726.057 1310.26,757.216 1310.82,737.922 1311.38,702.321 1311.93,700.704 1312.49,704.523 1313.05,720.08 1313.61,703.108 1314.17,698.004 1314.73,711.585 1315.29,694.256 1315.85,707.527 1316.41,690.945 1316.97,692.271 1317.53,709.91 1318.09,720.062 1318.65,688.185 1319.2,687.207 1319.76,705.013 1320.32,702.858 1320.88,684.103 1321.44,684.763 1322,667.565 1322.56,685.571 1323.12,652.046 1323.68,657.726 1324.24,657.605 1324.8,662.376 1325.36,694.666 1325.92,662.423 1326.47,650.736 1327.03,632.012 1327.59,636.629 1328.15,620.823 1328.71,624.39 1329.27,642.471 1329.83,641.962 1330.39,642.956 1330.95,644.963 1331.51,632.869 1332.07,652.118 1332.63,667.688 1333.19,680.712 1333.75,700.894 1334.3,683.056 1334.86,685.045 1335.42,684.31 1335.98,669.376 1336.54,688.668 1337.1,688.876 1337.66,685.999 1338.22,670.774 1338.78,670.618 1339.34,685.885 1339.9,665.94 1340.46,701.588 1341.02,701.7 1341.57,667.184 1342.13,684.184 1342.69,684.699 1343.25,699.147 1343.81,714.231 1344.37,714.298 1344.93,727.023 1345.49,705.238 1346.05,718.541 1346.61,715.394 1347.17,730.059 1347.73,695.708 1348.29,693.779 1348.84,689.157 1349.4,694.502 1349.96,677.361 1350.52,674.606 1351.08,659.251 1351.64,631.846 1352.2,604.704 1352.76,625.32 1353.32,628.419 1353.88,648.628 1354.44,666.974 1355,635.974 1355.56,638.345 1356.12,625.166 1356.67,642.933 1357.23,677.624 1357.79,682.027 1358.35,698.637 1358.91,714.708 1359.47,713.373 1360.03,695.88 1360.59,710.777 1361.15,678.816 1361.71,648.943 1362.27,620.237 1362.83,623.511 1363.39,624.49 1363.94,628.598 1364.5,615.008 1365.06,619.217 1365.62,606.889 1366.18,640.3 1366.74,656.476 1367.3,690.559 1367.86,672.416 1368.42,624.179 1368.98,613.652 1369.54,617.747 1370.1,619.152 1370.66,668.992 1371.21,637.562 1371.77,654.713 1372.33,670.251 1372.89,650.777 1373.45,685.574 1374.01,656.441 1374.57,643.876 1375.13,612.549 1375.69,650.005 1376.25,635.26 1376.81,638.164 1377.37,689.73 1377.93,689.033 1378.49,671.151 1379.04,717.976 1379.6,715.083 1380.16,745.459 1380.72,730.148 1381.28,708.79 1381.84,687.925 1382.4,688.289 1382.96,673.034 1383.52,675.218 1384.08,704.377 1384.64,724.337 1385.2,737.756 1385.76,732.369 1386.31,745.323 1386.87,740.986 1387.43,707.641 1387.99,701.745 1388.55,667.183 1389.11,666.374 1389.67,633.627 1390.23,603.29 1390.79,594.113 1391.35,551.299 1391.91,525.587 1392.47,533.095 1393.03,525.098 1393.58,530.689 1394.14,537.475 1394.7,561.743 1395.26,552.454 1395.82,554.68 1396.38,579.142 1396.94,601.537 1397.5,569.089 1398.06,575.568 1398.62,579.439 1399.18,569.254 1399.74,575.536 1400.3,579.133 1400.86,569.047 1401.41,562.408 1401.97,571.26 1402.53,544.105 1403.09,551.333 1403.65,543.636 1404.21,536.669 1404.77,545.259 1405.33,572.301 1405.89,592.429 1406.45,596.422 1407.01,601.96 1407.57,621.165 1408.13,626.824 1408.68,644.471 1409.24,682.199 1409.8,731.751 1410.36,745.086 1410.92,742.685 1411.48,756.641 1412.04,770.678 1412.6,768.657 1413.16,730.83 1413.72,712.747 1414.28,708.891 1414.84,742.154 1415.4,740.384 1415.95,753.097 1416.51,731.548 1417.07,693.814 1417.63,712.534 1418.19,712.085 1418.75,699.335 1419.31,663.897 1419.87,669.637 1420.43,656.686 1420.99,679.795 1421.55,711.484 1422.11,683.809 1422.67,668.566 1423.23,669.562 1423.78,687.388 1424.34,668.601 1424.9,668.618 1425.46,666.743 1426.02,699.783 1426.58,697.73 1427.14,698.751 1427.7,685.629 1428.26,671.622 1428.82,688.967 1429.38,689.006 1429.94,702.131 1430.5,701.997 1431.05,700.806 1431.61,716.33 1432.17,730.356 1432.73,729.196 1433.29,743.853 1433.85,720.855 1434.41,705.734 1434.97,688.441 1435.53,673.969 1436.09,638.882 1436.65,642.455 1437.21,612.643 1437.77,601.178 1438.33,606.092 1438.88,625.744 1439.44,661.096 1440,666.493 1440.56,668.976 1441.12,603.988 1441.68,638.011 1442.24,639.835 1442.8,638.536 1443.36,611.568 1443.92,629.137 1444.48,630.074 1445.04,661.453 1445.6,662.283 1446.15,693.621 1446.71,707.731 1447.27,690.866 1447.83,706.527 1448.39,723.663 1448.95,723.485 1449.51,688.966 1450.07,704.057 1450.63,717.706 1451.19,714.537 1451.75,709.556 1452.31,727.469 1452.87,711.573 1453.42,729.229 1453.98,695.527 1454.54,695.218 1455.1,757.852 1455.66,770.597 1456.22,779.583 1456.78,773.808 1457.34,767.65 1457.9,778.093 1458.46,758.195 1459.02,753.282 1459.58,781.454 1460.14,745.733 1460.7,711.242 1461.25,693.467 1461.81,710.297 1462.37,675.45 1462.93,707.82 1463.49,735.763 1464.05,732.446 1464.61,726.418 1465.17,719.529 1465.73,745.347 1466.29,789.313 1466.85,780.485 1467.41,807.299 1467.97,812.529 1468.52,805.144 1469.08,799.967 1469.64,794.012 1470.2,786.694 1470.76,797.088 1471.32,790.002 1471.88,786.69 1472.44,781.335 1473,761.385 1473.56,755.858 1474.12,751.819 1474.68,747.146 1475.24,726.293 1475.79,738.143 1476.35,765.432 1476.91,760.569 1477.47,753.019 1478.03,715.372 1478.59,732.354 1479.15,742.064 1479.71,752.38 1480.27,767.484 1480.83,765.373 1481.39,763.244 1481.95,756.644 1482.51,767.649 1483.07,744.597 1483.62,728.958 1484.18,709.927 1484.74,707.212 1485.3,705.035 1485.86,718.094 1486.42,732.863 1486.98,727.831 1487.54,742.519 1488.1,723.317 1488.66,750.017 1489.22,729.566 1489.78,727.243 1490.34,724.42 1490.89,707.318 1491.45,722.127 1492.01,719.433 1492.57,698.596 1493.13,695.195 1493.69,675.462 1494.25,656.932 1494.81,655.665 1495.37,674.414 1495.93,657.169 1496.49,688.693 1497.05,718.216 1497.61,682.827 1498.16,664.959 1498.72,615.64 1499.28,647.355 1499.84,664.427 1500.4,666.747 1500.96,668.404 1501.52,686.622 1502.08,703.063 1502.64,733.343 1503.2,744.927 1503.76,726.176 1504.32,676.681 1504.88,660.104 1505.44,628.666 1505.99,598.708 1506.55,637.506 1507.11,658.037 1507.67,674.908 1508.23,664.037 1508.79,632.951 1509.35,651.661 1509.91,636.706 1510.47,623.177 1511.03,610.369 1511.59,612.584 1512.15,585.733 1512.71,542.863 1513.26,534.527 1513.82,524.075 1514.38,530.995 1514.94,541.659 1515.5,551.009 1516.06,560.077 1516.62,550.558 1517.18,543.772 1517.74,552.437 1518.3,574.439 1518.86,595.115 1519.42,616.691 1519.98,589.833 1520.53,575.364 1521.09,534.817 1521.65,542.756 1522.21,569.442 1522.77,558.872 1523.33,584.87 1523.89,592.808 1524.45,615.218 1525.01,586.792 1525.57,592.775 1526.13,596.118 1526.69,585.732 1527.25,607.714 1527.81,643.858 1528.36,661.069 1528.92,651.437 1529.48,669.837 1530.04,670.666 1530.6,671.24 1531.16,685.943 1531.72,703.33 1532.28,688.635 1532.84,686.086 1533.4,670.113 1533.96,653.93 1534.52,688.326 1535.08,688.386 1535.63,687.249 1536.19,705.63 1536.75,723.501 1537.31,705.152 1537.87,736.681 1538.43,735.141 1538.99,749.581 1539.55,734.712 1540.11,733.922 1540.67,718.281 1541.23,704.272 1541.79,705.66 1542.35,688.762 1542.9,656.323 1543.46,636.303 1544.02,654.643 1544.58,672.681 1545.14,678.025 1545.7,694.136 1546.26,680.173 1546.82,696.125 1547.38,694.638 1547.94,691.254 1548.5,689.594 1549.06,738.161 1549.62,750.586 1550.18,717.073 1550.73,747.01 1551.29,742.86 1551.85,737.754 1552.41,737.222 1552.97,762.042 1553.53,741.337 1554.09,770.687 1554.65,750.448 1555.21,711.95 1555.77,644.556 1556.33,647.765 1556.89,634.224 1557.45,636.649 1558,637.953 1558.56,608.3 1559.12,596.533 1559.68,602.302 1560.24,590.904 1560.8,562.82 1561.36,605.565 1561.92,640.784 1562.48,623.587 1563.04,672.506 1563.6,671.19 1564.16,707.083 1564.72,722.398 1565.28,734.736 1565.83,715.737 1566.39,713.787 1566.95,709.669 1567.51,672.799 1568.07,689.888 1568.63,705.286 1569.19,751.488 1569.75,713.341 1570.31,713.855 1570.87,713.838 1571.43,729.334 1571.99,726.76 1572.55,722.821 1573.1,704.654 1573.66,721.335 1574.22,721.131 1574.78,719.169 1575.34,748.726 1575.9,761.602 1576.46,758.916 1577.02,754.483 1577.58,735.95 1578.14,747.388 1578.7,742.315 1579.26,705.694 1579.82,690.271 1580.37,660.699 1580.93,690.326 1581.49,691.592 1582.05,706.273 1582.61,688.466 1583.17,701.727 1583.73,655.927 1584.29,645.591 1584.85,681.442 1585.41,663.277 1585.97,709.392 1586.53,687.787 1587.09,685.471 1587.65,701.344 1588.2,704.475 1588.76,706.594 1589.32,718.647 1589.88,749.672 1590.44,728.714 1591,727.347 1591.56,726.596 1592.12,753.247 1592.68,751.186 1593.24,731.812 1593.8,711.776 1594.36,710.631 1594.92,706.585 1595.47,721.317 1596.03,720.21 1596.59,719.226 1597.15,684.038 1597.71,686.212 1598.27,684.295 1598.83,665.679 1599.39,696.353 1599.95,710.608 1600.51,694.955 1601.07,644.439 1601.63,681.348 1602.19,695.407 1602.74,697.041 1603.3,663.227 1603.86,647.453 1604.42,665.727 1604.98,665.017 1605.54,663.87 1606.1,679.391 1606.66,663.975 1607.22,614.714 1607.78,601.791 1608.34,604.824 1608.9,576.081 1609.46,615.279 1610.02,613.326 1610.57,599.367 1611.13,603.294 1611.69,637.966 1612.25,637.523 1612.81,673.422 1613.37,673.888 1613.93,673.185 1614.49,671.696 1615.05,655.984 1615.61,688.375 1616.17,654.029 1616.73,671.344 1617.29,676.91 1617.84,693.843 1618.4,710.253 1618.96,688.521 1619.52,688.325 1620.08,687.949 1620.64,642.919 1621.2,626.374 1621.76,645.784 1622.32,646.286 1622.88,632.568 1623.44,652.155 1624,670.677 1624.56,692.232 1625.11,670.716 1625.67,670.607 1626.23,637.016 1626.79,656.558 1627.35,643.601 1627.91,650.092 1628.47,697.353 1629.03,681.554 1629.59,662.405 1630.15,682.141 1630.71,713.96 1631.27,696.109 1631.83,744.38 1632.39,724.525 1632.94,723.326 1633.5,689.401 1634.06,691.946 1634.62,706.983 1635.18,704.162 1635.74,654.918 1636.3,670.414 1636.86,659.209 1637.42,629.318 1637.98,616.364 1638.54,622.932 1639.1,626.74 1639.66,693.04 1640.21,661.169 1640.77,694.976 1641.33,696.261 1641.89,742.401 1642.45,768.569 1643.01,765.4 1643.57,760.941 1644.13,772.842 1644.69,733.012 1645.25,746.846 1645.81,747.162 1646.37,711.979 1646.93,694.316 1647.48,711.475 1648.04,710.997 1648.6,706.734 1649.16,687.707 1649.72,668.533 1650.28,667.017 1650.84,684.88 1651.4,667.92 1651.96,678.695 1652.52,677.951 1653.08,696.55 1653.64,726.682 1654.2,722.432 1654.76,701.655 1655.31,654.349 1655.87,689.346 1656.43,693.825 1656.99,693.826 1657.55,647.288 1658.11,635.531 1658.67,638.149 1659.23,641.431 1659.79,613.034 1660.35,615.726 1660.91,605.036 1661.47,626.648 1662.03,643.31 1662.58,680.319 1663.14,663.67 1663.7,665.388 1664.26,697.035 1664.82,714.243 1665.38,681.065 1665.94,650.457 1666.5,668.287 1667.06,670.07 1667.62,670.789 1668.18,669.786 1668.74,689.671 1669.3,671.113 1669.85,675.396 1670.41,644.996 1670.97,647.633 1671.53,632.176 1672.09,634.284 1672.65,636.514 1673.21,703.05 1673.77,702.19 1674.33,701.294 1674.89,715.525 1675.45,743.955 1676.01,741.389 1676.57,721.724 1677.13,716.874 1677.68,682.545 1678.24,665.262 1678.8,652.727 1679.36,653.106 1679.92,668.529 1680.48,667.746 1681.04,700.126 1681.6,681.992 1682.16,665.938 1682.72,666.612 1683.28,699.819 1683.84,695.973 1684.4,713.396 1684.95,712.428 1685.51,741.241 1686.07,724.461 1686.63,691.551 1687.19,674.021 1687.75,706.142 1688.31,725.403 1688.87,739.13 1689.43,720.131 1689.99,751.375 1690.55,785.235 1691.11,780.083 1691.67,809.708 1692.23,804.71 1692.78,815.858 1693.34,793.455 1693.9,771.047 1694.46,752.629 1695.02,748.771 1695.58,729.545 1696.14,709.333 1696.7,706.625 1697.26,701.774 1697.82,731.907 1698.38,728.323 1698.94,711.62 1699.5,709.269 1700.05,676.701 1700.61,659.644 1701.17,630.466 1701.73,633.27 1702.29,616.637 1702.85,617.783 1703.41,603.85 1703.97,560.585 1704.53,538.887 1705.09,531.314 1705.65,558.78 1706.21,579.608 1706.77,568.029 1707.32,585.123 1707.88,608.851 1708.44,644.991 1709,680.804 1709.56,682.076 1710.12,681.374 1710.68,681.076 1711.24,681.625 1711.8,700.566 1712.36,680.093 1712.92,663.717 1713.48,680.849 1714.04,665.426 1714.6,679.955 1715.15,697.55 1715.71,744.021 1716.27,694.511 1716.83,664.92 1717.39,680.175 1717.95,680.415 1718.51,696.597 1719.07,681.621 1719.63,716.912 1720.19,714.029 1720.75,743.038 1721.31,755.855 1721.87,704.985 1722.42,689.583 1722.98,723.086 1723.54,705.195 1724.1,689.367 1724.66,722.444 1725.22,687.999 1725.78,703.702 1726.34,689.087 1726.9,671.22 1727.46,672.26 1728.02,673.428 1728.58,692.218 1729.14,694.702 1729.69,709.572 1730.25,708.396 1730.81,690.48 1731.37,689.064 1731.93,655.989 1732.49,624.201 1733.05,625.737 1733.61,626.788 1734.17,648.131 1734.73,632.472 1735.29,654.632 1735.85,656.045 1736.41,658.424 1736.97,659.187 1737.52,694.251 1738.08,693.75 1738.64,679.353 1739.2,713.964 1739.76,712.255 1740.32,711.096 1740.88,723.771 1741.44,787.679 1742,781.277 1742.56,790.506 1743.12,848.99 1743.68,823.923 1744.24,834.178 1744.79,796.526 1745.35,788.989 1745.91,783.323 1746.47,794.347 1747.03,819.629 1747.59,778.53 1748.15,756.261 1748.71,734.891 1749.27,735.099 1749.83,735.687 1750.39,719.848 1750.95,751.462 1751.51,747.41 1752.06,730.122 1752.62,713.598 1753.18,764.099 1753.74,730.785 1754.3,724.072 1754.86,723.679 1755.42,723.352 1755.98,707 1756.54,707.005 1757.1,655.978 1757.66,672.535 1758.22,656.463 1758.78,656.208 1759.34,592 1759.89,598.21 1760.45,601.567 1761.01,635.674 1761.57,622.351 1762.13,610.596 1762.69,614.181 1763.25,618.215 1763.81,619.118 1764.37,641.326 1764.93,642.285 1765.49,678.901 1766.05,694.609 1766.61,711.73 1767.16,674.073 1767.72,690.931 1768.28,674.864 1768.84,723.117 1769.4,702.937 1769.96,701.318 1770.52,712.871 1771.08,710.406 1771.64,704.873 1772.2,688.877 1772.76,703.372 1773.32,702.962 1773.88,682.211 1774.43,700.345 1774.99,746.541 1775.55,725.159 1776.11,805.116 1776.67,798.807 1777.23,793.323 1777.79,756.342 1778.35,752.397 1778.91,763.237 1779.47,774.185 1780.03,751.489 1780.59,711.873 1781.15,728.748 1781.71,739.616 1782.26,703.743 1782.82,690.242 1783.38,691.204 1783.94,722.492 1784.5,719.116 1785.06,719.611 1785.62,752.36 1786.18,698.127 1786.74,697.005 1787.3,694.68 1787.86,664.904 1788.42,646.531 1788.98,649.266 1789.53,650.61 1790.09,651.114 1790.65,651.261 1791.21,651.938 1791.77,653.301 1792.33,638.158 1792.89,656.798 1793.45,688.533 1794.01,719.72 1794.57,701.835 1795.13,680.216 1795.69,710.596 1796.25,663.64 1796.8,646.606 1797.36,645.72 1797.92,582.622 1798.48,541.542 1799.04,517.308 1799.6,526.111 1800.16,550.271 1800.72,559.719 1801.28,534.397 1801.84,492.322 1802.4,535.224 1802.96,528.099 1803.52,536.217 1804.08,574.391 1804.63,578.778 1805.19,603.985 1805.75,623.037 1806.31,642.533 1806.87,676.1 1807.43,657.671 1807.99,623.607 1808.55,659.874 1809.11,675.716 1809.67,691.387 1810.23,676.019 1810.79,693.634 1811.35,693.482 1811.9,695.941 1812.46,712.505 1813.02,696.514 1813.58,711.888 1814.14,711.679 1814.7,729.054 1815.26,743.968 1815.82,712.506 1816.38,723.871 1816.94,743.667 1817.5,736.199 1818.06,749.149 1818.62,758.135 1819.18,753.134 1819.73,747.852 1820.29,741.429 1820.85,738.473 1821.41,736.343 1821.97,749.042 1822.53,775.043 1823.09,753.485 1823.65,783.852 1824.21,775.726 1824.77,724.638 1825.33,725.294 1825.89,709.19 1826.45,740.251 1827,721.687 1827.56,736.992 1828.12,765.357 1828.68,710.989 1829.24,708.356 1829.8,708.775 1830.36,721.881 1830.92,721.579 1831.48,725.1 1832.04,724.51 1832.6,736.824 1833.16,733.549 1833.72,730.282 1834.27,708.787 1834.83,753.602 1835.39,750.283 1835.95,748.12 1836.51,763.624 1837.07,824.488 1837.63,802.741 1838.19,764.789 \"/>\n<path clip-path=\"url(#clip443)\" d=\"M720.247 691.283 L720.806 691.283 L721.365 691.283 L721.924 691.283 L722.484 691.283 L723.043 691.283 L723.602 691.283 L724.161 691.283 L724.721 691.283 L725.28 691.283 L725.839 691.283 L726.398 691.283 L726.958 691.283 L727.517 691.283 L728.076 691.283 L728.635 691.283 L729.195 691.283 L729.754 691.283 L730.313 691.283 L730.872 691.283 L731.432 691.283 L731.991 691.283 L732.55 691.283 L733.109 691.283 L733.669 691.283 L734.228 691.283 L734.787 691.283 L735.346 691.283 L735.906 691.283 L736.465 691.283 L737.024 691.283 L737.583 691.283 L738.143 691.283 L738.702 691.283 L739.261 691.283 L739.82 691.283 L740.38 691.283 L740.939 691.283 L741.498 691.283 L742.057 691.283 L742.617 691.283 L743.176 691.283 L743.735 691.283 L744.294 691.283 L744.854 691.283 L745.413 691.283 L745.972 691.283 L746.531 691.283 L747.091 691.283 L747.65 691.283 L748.209 691.283 L748.768 691.283 L749.328 691.283 L749.887 691.283 L750.446 691.283 L751.005 691.283 L751.565 691.283 L752.124 691.283 L752.683 691.283 L753.242 691.283 L753.802 691.283 L754.361 691.283 L754.92 691.283 L755.479 691.283 L756.039 691.283 L756.598 691.283 L757.157 691.283 L757.716 691.283 L758.276 691.283 L758.835 691.283 L759.394 691.283 L759.953 691.283 L760.513 691.283 L761.072 691.283 L761.631 691.283 L762.19 691.283 L762.75 691.283 L763.309 691.283 L763.868 691.283 L764.427 691.283 L764.987 691.283 L765.546 691.283 L766.105 691.283 L766.664 691.283 L767.224 691.283 L767.783 691.283 L768.342 691.283 L768.901 691.283 L769.461 691.283 L770.02 691.283 L770.579 691.283 L771.138 691.283 L771.698 691.283 L772.257 691.283 L772.816 691.283 L773.375 691.283 L773.935 691.283 L774.494 691.283 L775.053 691.283 L775.612 691.283 L776.172 691.283 L776.731 691.283 L777.29 691.283 L777.849 691.283 L778.409 691.283 L778.968 691.283 L779.527 691.283 L780.086 691.283 L780.646 691.283 L781.205 691.283 L781.764 691.283 L782.323 691.283 L782.883 691.283 L783.442 691.283 L784.001 691.283 L784.56 691.283 L785.12 691.283 L785.679 691.283 L786.238 691.283 L786.797 691.283 L787.357 691.283 L787.916 691.283 L788.475 691.283 L789.034 691.283 L789.594 691.283 L790.153 691.283 L790.712 691.283 L791.271 691.283 L791.831 691.283 L792.39 691.283 L792.949 691.283 L793.508 691.283 L794.068 691.283 L794.627 691.283 L795.186 691.283 L795.745 691.283 L796.305 691.283 L796.864 691.283 L797.423 691.283 L797.982 691.283 L798.542 691.283 L799.101 691.283 L799.66 691.283 L800.219 691.283 L800.779 691.283 L801.338 691.283 L801.897 691.283 L802.456 691.283 L803.016 691.283 L803.575 691.283 L804.134 691.283 L804.693 691.283 L805.253 691.283 L805.812 691.283 L806.371 691.283 L806.931 691.283 L807.49 691.283 L808.049 691.283 L808.608 691.283 L809.168 691.283 L809.727 691.283 L810.286 691.283 L810.845 691.283 L811.405 691.283 L811.964 691.283 L812.523 691.283 L813.082 691.283 L813.642 691.283 L814.201 691.283 L814.76 691.283 L815.319 691.283 L815.879 691.283 L816.438 691.283 L816.997 691.283 L817.556 691.283 L818.116 691.283 L818.675 691.283 L819.234 691.283 L819.793 691.283 L820.353 691.283 L820.912 691.283 L821.471 691.283 L822.03 691.283 L822.59 691.283 L823.149 691.283 L823.708 691.283 L824.267 691.283 L824.827 691.283 L825.386 691.283 L825.945 691.283 L826.504 691.283 L827.064 691.283 L827.623 691.283 L828.182 691.283 L828.741 691.283 L829.301 691.283 L829.86 691.283 L830.419 691.283 L830.978 691.283 L831.538 691.283 L832.097 691.283 L832.656 691.283 L833.215 691.283 L833.775 691.283 L834.334 691.283 L834.893 691.283 L835.452 691.283 L836.012 691.283 L836.571 691.283 L837.13 691.283 L837.689 691.283 L838.249 691.283 L838.808 691.283 L839.367 691.283 L839.926 691.283 L840.486 691.283 L841.045 691.283 L841.604 691.283 L842.163 691.283 L842.723 691.283 L843.282 691.283 L843.841 691.283 L844.4 691.283 L844.96 691.283 L845.519 691.283 L846.078 691.283 L846.637 691.283 L847.197 691.283 L847.756 691.283 L848.315 691.283 L848.874 691.283 L849.434 691.283 L849.993 691.283 L850.552 691.283 L851.111 691.283 L851.671 691.283 L852.23 691.283 L852.789 691.283 L853.348 691.283 L853.908 691.283 L854.467 691.283 L855.026 691.283 L855.585 691.283 L856.145 691.283 L856.704 691.283 L857.263 691.283 L857.822 691.283 L858.382 691.283 L858.941 691.283 L859.5 691.283 L860.059 691.283 L860.619 691.283 L861.178 691.283 L861.737 691.283 L862.296 691.283 L862.856 691.283 L863.415 691.283 L863.974 691.283 L864.533 691.283 L865.093 691.283 L865.652 691.283 L866.211 691.283 L866.77 691.283 L867.33 691.283 L867.889 691.283 L868.448 691.283 L869.007 691.283 L869.567 691.283 L870.126 691.283 L870.685 691.283 L871.244 691.283 L871.804 691.283 L872.363 691.283 L872.922 691.283 L873.481 691.283 L874.041 691.283 L874.6 691.283 L875.159 691.283 L875.718 691.283 L876.278 691.283 L876.837 691.283 L877.396 691.283 L877.955 691.283 L878.515 691.283 L879.074 691.283 L879.633 691.283 L880.192 691.283 L880.752 691.283 L881.311 691.283 L881.87 691.283 L882.429 691.283 L882.989 691.283 L883.548 691.283 L884.107 691.283 L884.666 691.283 L885.226 691.283 L885.785 691.283 L886.344 691.283 L886.903 691.283 L887.463 691.283 L888.022 691.283 L888.581 691.283 L889.14 691.283 L889.7 691.283 L890.259 691.283 L890.818 691.283 L891.377 691.283 L891.937 691.283 L892.496 691.283 L893.055 691.283 L893.614 691.283 L894.174 691.283 L894.733 691.283 L895.292 691.283 L895.851 691.283 L896.411 691.283 L896.97 691.283 L897.529 691.283 L898.088 691.283 L898.648 691.283 L899.207 691.283 L899.766 691.283 L900.325 691.283 L900.885 691.283 L901.444 691.283 L902.003 691.283 L902.562 691.283 L903.122 691.283 L903.681 691.283 L904.24 691.283 L904.799 691.283 L905.359 691.283 L905.918 691.283 L906.477 691.283 L907.036 691.283 L907.596 691.283 L908.155 691.283 L908.714 691.283 L909.273 691.283 L909.833 691.283 L910.392 691.283 L910.951 691.283 L911.51 691.283 L912.07 691.283 L912.629 691.283 L913.188 691.283 L913.747 691.283 L914.307 691.283 L914.866 691.283 L915.425 691.283 L915.984 691.283 L916.544 691.283 L917.103 691.283 L917.662 691.283 L918.221 691.283 L918.781 691.283 L919.34 691.283 L919.899 691.283 L920.458 691.283 L921.018 691.283 L921.577 691.283 L922.136 691.283 L922.695 691.283 L923.255 691.283 L923.814 691.283 L924.373 691.283 L924.932 691.283 L925.492 691.283 L926.051 691.283 L926.61 691.283 L927.169 691.283 L927.729 691.283 L928.288 691.283 L928.847 691.283 L929.406 691.283 L929.966 691.283 L930.525 691.283 L931.084 691.283 L931.644 691.283 L932.203 691.283 L932.762 691.283 L933.321 691.283 L933.881 691.283 L934.44 691.283 L934.999 691.283 L935.558 691.283 L936.118 691.283 L936.677 691.283 L937.236 691.283 L937.795 691.283 L938.355 691.283 L938.914 691.283 L939.473 691.283 L940.032 691.283 L940.592 691.283 L941.151 691.283 L941.71 691.283 L942.269 691.283 L942.829 691.283 L943.388 691.283 L943.947 691.283 L944.506 691.283 L945.066 691.283 L945.625 691.283 L946.184 691.283 L946.743 691.283 L947.303 691.283 L947.862 691.283 L948.421 691.283 L948.98 691.283 L949.54 691.283 L950.099 691.283 L950.658 691.283 L951.217 691.283 L951.777 691.283 L952.336 691.283 L952.895 691.283 L953.454 691.283 L954.014 691.283 L954.573 691.283 L955.132 691.283 L955.691 691.283 L956.251 691.283 L956.81 691.283 L957.369 691.283 L957.928 691.283 L958.488 691.283 L959.047 691.283 L959.606 691.283 L960.165 691.283 L960.725 691.283 L961.284 691.283 L961.843 691.283 L962.402 691.283 L962.962 691.283 L963.521 691.283 L964.08 691.283 L964.639 691.283 L965.199 691.283 L965.758 691.283 L966.317 691.283 L966.876 691.283 L967.436 691.283 L967.995 691.283 L968.554 691.283 L969.113 691.283 L969.673 691.283 L970.232 691.283 L970.791 691.283 L971.35 691.283 L971.91 691.283 L972.469 691.283 L973.028 691.283 L973.587 691.283 L974.147 691.283 L974.706 691.283 L975.265 691.283 L975.824 691.283 L976.384 691.283 L976.943 691.283 L977.502 691.283 L978.061 691.283 L978.621 691.283 L979.18 691.283 L979.739 691.283 L980.298 691.283 L980.858 691.283 L981.417 691.283 L981.976 691.283 L982.535 691.283 L983.095 691.283 L983.654 691.283 L984.213 691.283 L984.772 691.283 L985.332 691.283 L985.891 691.283 L986.45 691.283 L987.009 691.283 L987.569 691.283 L988.128 691.283 L988.687 691.283 L989.246 691.283 L989.806 691.283 L990.365 691.283 L990.924 691.283 L991.483 691.283 L992.043 691.283 L992.602 691.283 L993.161 691.283 L993.72 691.283 L994.28 691.283 L994.839 691.283 L995.398 691.283 L995.957 691.283 L996.517 691.283 L997.076 691.283 L997.635 691.283 L998.194 691.283 L998.754 691.283 L999.313 691.283 L999.872 691.283 L1000.43 691.283 L1000.99 691.283 L1001.55 691.283 L1002.11 691.283 L1002.67 691.283 L1003.23 691.283 L1003.79 691.283 L1004.35 691.283 L1004.91 691.283 L1005.46 691.283 L1006.02 691.283 L1006.58 691.283 L1007.14 691.283 L1007.7 691.283 L1008.26 691.283 L1008.82 691.283 L1009.38 691.283 L1009.94 691.283 L1010.5 691.283 L1011.06 691.283 L1011.62 691.283 L1012.18 691.283 L1012.73 691.283 L1013.29 691.283 L1013.85 691.283 L1014.41 691.283 L1014.97 691.283 L1015.53 691.283 L1016.09 691.283 L1016.65 691.283 L1017.21 691.283 L1017.77 691.283 L1018.33 691.283 L1018.89 691.283 L1019.45 691.283 L1020.01 691.283 L1020.56 691.283 L1021.12 691.283 L1021.68 691.283 L1022.24 691.283 L1022.8 691.283 L1023.36 691.283 L1023.92 691.283 L1024.48 691.283 L1025.04 691.283 L1025.6 691.283 L1026.16 691.283 L1026.72 691.283 L1027.28 691.283 L1027.83 691.283 L1028.39 691.283 L1028.95 691.283 L1029.51 691.283 L1030.07 691.283 L1030.63 691.283 L1031.19 691.283 L1031.75 691.283 L1032.31 691.283 L1032.87 691.283 L1033.43 691.283 L1033.99 691.283 L1034.55 691.283 L1035.1 691.283 L1035.66 691.283 L1036.22 691.283 L1036.78 691.283 L1037.34 691.283 L1037.9 691.283 L1038.46 691.283 L1039.02 691.283 L1039.58 691.283 L1040.14 691.283 L1040.7 691.283 L1041.26 691.283 L1041.82 691.283 L1042.38 691.283 L1042.93 691.283 L1043.49 691.283 L1044.05 691.283 L1044.61 691.283 L1045.17 691.283 L1045.73 691.283 L1046.29 691.283 L1046.85 691.283 L1047.41 691.283 L1047.97 691.283 L1048.53 691.283 L1049.09 691.283 L1049.65 691.283 L1050.2 691.283 L1050.76 691.283 L1051.32 691.283 L1051.88 691.283 L1052.44 691.283 L1053 691.283 L1053.56 691.283 L1054.12 691.283 L1054.68 691.283 L1055.24 691.283 L1055.8 691.283 L1056.36 691.283 L1056.92 691.283 L1057.48 691.283 L1058.03 691.283 L1058.59 691.283 L1059.15 691.283 L1059.71 691.283 L1060.27 691.283 L1060.83 691.283 L1061.39 691.283 L1061.95 691.283 L1062.51 691.283 L1063.07 691.283 L1063.63 691.283 L1064.19 691.283 L1064.75 691.283 L1065.3 691.283 L1065.86 691.283 L1066.42 691.283 L1066.98 691.283 L1067.54 691.283 L1068.1 691.283 L1068.66 691.283 L1069.22 691.283 L1069.78 691.283 L1070.34 691.283 L1070.9 691.283 L1071.46 691.283 L1072.02 691.283 L1072.57 691.283 L1073.13 691.283 L1073.69 691.283 L1074.25 691.283 L1074.81 691.283 L1075.37 691.283 L1075.93 691.283 L1076.49 691.283 L1077.05 691.283 L1077.61 691.283 L1078.17 691.283 L1078.73 691.283 L1079.29 691.283 L1079.85 691.283 L1080.4 691.283 L1080.96 691.283 L1081.52 691.283 L1082.08 691.283 L1082.64 691.283 L1083.2 691.283 L1083.76 691.283 L1084.32 691.283 L1084.88 691.283 L1085.44 691.283 L1086 691.283 L1086.56 691.283 L1087.12 691.283 L1087.67 691.283 L1088.23 691.283 L1088.79 691.283 L1089.35 691.283 L1089.91 691.283 L1090.47 691.283 L1091.03 691.283 L1091.59 691.283 L1092.15 691.283 L1092.71 691.283 L1093.27 691.283 L1093.83 691.283 L1094.39 691.283 L1094.94 691.283 L1095.5 691.283 L1096.06 691.283 L1096.62 691.283 L1097.18 691.283 L1097.74 691.283 L1098.3 691.283 L1098.86 691.283 L1099.42 691.283 L1099.98 691.283 L1100.54 691.283 L1101.1 691.283 L1101.66 691.283 L1102.22 691.283 L1102.77 691.283 L1103.33 691.283 L1103.89 691.283 L1104.45 691.283 L1105.01 691.283 L1105.57 691.283 L1106.13 691.283 L1106.69 691.283 L1107.25 691.283 L1107.81 691.283 L1108.37 691.283 L1108.93 691.283 L1109.49 691.283 L1110.04 691.283 L1110.6 691.283 L1111.16 691.283 L1111.72 691.283 L1112.28 691.283 L1112.84 691.283 L1113.4 691.283 L1113.96 691.283 L1114.52 691.283 L1115.08 691.283 L1115.64 691.283 L1116.2 691.283 L1116.76 691.283 L1117.31 691.283 L1117.87 691.283 L1118.43 691.283 L1118.99 691.283 L1119.55 691.283 L1120.11 691.283 L1120.67 691.283 L1121.23 691.283 L1121.79 691.283 L1122.35 691.283 L1122.91 691.283 L1123.47 691.283 L1124.03 691.283 L1124.59 691.283 L1125.14 691.283 L1125.7 691.283 L1126.26 691.283 L1126.82 691.283 L1127.38 691.283 L1127.94 691.283 L1128.5 691.283 L1129.06 691.283 L1129.62 691.283 L1130.18 691.283 L1130.74 691.283 L1131.3 691.283 L1131.86 691.283 L1132.41 691.283 L1132.97 691.283 L1133.53 691.283 L1134.09 691.283 L1134.65 691.283 L1135.21 691.283 L1135.77 691.283 L1136.33 691.283 L1136.89 691.283 L1137.45 691.283 L1138.01 691.283 L1138.57 691.283 L1139.13 691.283 L1139.68 691.283 L1140.24 691.283 L1140.8 691.283 L1141.36 691.283 L1141.92 691.283 L1142.48 691.283 L1143.04 691.283 L1143.6 691.283 L1144.16 691.283 L1144.72 691.283 L1145.28 691.283 L1145.84 691.283 L1146.4 691.283 L1146.96 691.283 L1147.51 691.283 L1148.07 691.283 L1148.63 691.283 L1149.19 691.283 L1149.75 691.283 L1150.31 691.283 L1150.87 691.283 L1151.43 691.283 L1151.99 691.283 L1152.55 691.283 L1153.11 691.283 L1153.67 691.283 L1154.23 691.283 L1154.78 691.283 L1155.34 691.283 L1155.9 691.283 L1156.46 691.283 L1157.02 691.283 L1157.58 691.283 L1158.14 691.283 L1158.7 691.283 L1159.26 691.283 L1159.82 691.283 L1160.38 691.283 L1160.94 691.283 L1161.5 691.283 L1162.05 691.283 L1162.61 691.283 L1163.17 691.283 L1163.73 691.283 L1164.29 691.283 L1164.85 691.283 L1165.41 691.283 L1165.97 691.283 L1166.53 691.283 L1167.09 691.283 L1167.65 691.283 L1168.21 691.283 L1168.77 691.283 L1169.33 691.283 L1169.88 691.283 L1170.44 691.283 L1171 691.283 L1171.56 691.283 L1172.12 691.283 L1172.68 691.283 L1173.24 691.283 L1173.8 691.283 L1174.36 691.283 L1174.92 691.283 L1175.48 691.283 L1176.04 691.283 L1176.6 691.283 L1177.15 691.283 L1177.71 691.283 L1178.27 691.283 L1178.83 691.283 L1179.39 691.283 L1179.95 691.283 L1180.51 691.283 L1181.07 691.283 L1181.63 691.283 L1182.19 691.283 L1182.75 691.283 L1183.31 691.283 L1183.87 691.283 L1184.43 691.283 L1184.98 691.283 L1185.54 691.283 L1186.1 691.283 L1186.66 691.283 L1187.22 691.283 L1187.78 691.283 L1188.34 691.283 L1188.9 691.283 L1189.46 691.283 L1190.02 691.283 L1190.58 691.283 L1191.14 691.283 L1191.7 691.283 L1192.25 691.283 L1192.81 691.283 L1193.37 691.283 L1193.93 691.283 L1194.49 691.283 L1195.05 691.283 L1195.61 691.283 L1196.17 691.283 L1196.73 691.283 L1197.29 691.283 L1197.85 691.283 L1198.41 691.283 L1198.97 691.283 L1199.52 691.283 L1200.08 691.283 L1200.64 691.283 L1201.2 691.283 L1201.76 691.283 L1202.32 691.283 L1202.88 691.283 L1203.44 691.283 L1204 691.283 L1204.56 691.283 L1205.12 691.283 L1205.68 691.283 L1206.24 691.283 L1206.8 691.283 L1207.35 691.283 L1207.91 691.283 L1208.47 691.283 L1209.03 691.283 L1209.59 691.283 L1210.15 691.283 L1210.71 691.283 L1211.27 691.283 L1211.83 691.283 L1212.39 691.283 L1212.95 691.283 L1213.51 691.283 L1214.07 691.283 L1214.62 691.283 L1215.18 691.283 L1215.74 691.283 L1216.3 691.283 L1216.86 691.283 L1217.42 691.283 L1217.98 691.283 L1218.54 691.283 L1219.1 691.283 L1219.66 691.283 L1220.22 691.283 L1220.78 691.283 L1221.34 691.283 L1221.89 691.283 L1222.45 691.283 L1223.01 691.283 L1223.57 691.283 L1224.13 691.283 L1224.69 691.283 L1225.25 691.283 L1225.81 691.283 L1226.37 691.283 L1226.93 691.283 L1227.49 691.283 L1228.05 691.283 L1228.61 691.283 L1229.17 691.283 L1229.72 691.283 L1230.28 691.283 L1230.84 691.283 L1231.4 691.283 L1231.96 691.283 L1232.52 691.283 L1233.08 691.283 L1233.64 691.283 L1234.2 691.283 L1234.76 691.283 L1235.32 691.283 L1235.88 691.283 L1236.44 691.283 L1236.99 691.283 L1237.55 691.283 L1238.11 691.283 L1238.67 691.283 L1239.23 691.283 L1239.79 691.283 L1240.35 691.283 L1240.91 691.283 L1241.47 691.283 L1242.03 691.283 L1242.59 691.283 L1243.15 691.283 L1243.71 691.283 L1244.26 691.283 L1244.82 691.283 L1245.38 691.283 L1245.94 691.283 L1246.5 691.283 L1247.06 691.283 L1247.62 691.283 L1248.18 691.283 L1248.74 691.283 L1249.3 691.283 L1249.86 691.283 L1250.42 691.283 L1250.98 691.283 L1251.54 691.283 L1252.09 691.283 L1252.65 691.283 L1253.21 691.283 L1253.77 691.283 L1254.33 691.283 L1254.89 691.283 L1255.45 691.283 L1256.01 691.283 L1256.57 691.283 L1257.13 691.283 L1257.69 691.283 L1258.25 691.283 L1258.81 691.283 L1259.36 691.283 L1259.92 691.283 L1260.48 691.283 L1261.04 691.283 L1261.6 691.283 L1262.16 691.283 L1262.72 691.283 L1263.28 691.283 L1263.84 691.283 L1264.4 691.283 L1264.96 691.283 L1265.52 691.283 L1266.08 691.283 L1266.63 691.283 L1267.19 691.283 L1267.75 691.283 L1268.31 691.283 L1268.87 691.283 L1269.43 691.283 L1269.99 691.283 L1270.55 691.283 L1271.11 691.283 L1271.67 691.283 L1272.23 691.283 L1272.79 691.283 L1273.35 691.283 L1273.91 691.283 L1274.46 691.283 L1275.02 691.283 L1275.58 691.283 L1276.14 691.283 L1276.7 691.283 L1277.26 691.283 L1277.82 691.283 L1278.38 691.283 L1278.94 691.283 L1279.5 691.283 L1280.06 691.283 L1280.62 691.283 L1281.18 691.283 L1281.73 691.283 L1282.29 691.283 L1282.85 691.283 L1283.41 691.283 L1283.97 691.283 L1284.53 691.283 L1285.09 691.283 L1285.65 691.283 L1286.21 691.283 L1286.77 691.283 L1287.33 691.283 L1287.89 691.283 L1288.45 691.283 L1289 691.283 L1289.56 691.283 L1290.12 691.283 L1290.68 691.283 L1291.24 691.283 L1291.8 691.283 L1292.36 691.283 L1292.92 691.283 L1293.48 691.283 L1294.04 691.283 L1294.6 691.283 L1295.16 691.283 L1295.72 691.283 L1296.28 691.283 L1296.83 691.283 L1297.39 691.283 L1297.95 691.283 L1298.51 691.283 L1299.07 691.283 L1299.63 691.283 L1300.19 691.283 L1300.75 691.283 L1301.31 691.283 L1301.87 691.283 L1302.43 691.283 L1302.99 691.283 L1303.55 691.283 L1304.1 691.283 L1304.66 691.283 L1305.22 691.283 L1305.78 691.283 L1306.34 691.283 L1306.9 691.283 L1307.46 691.283 L1308.02 691.283 L1308.58 691.283 L1309.14 691.283 L1309.7 691.283 L1310.26 691.283 L1310.82 691.283 L1311.38 691.283 L1311.93 691.283 L1312.49 691.283 L1313.05 691.283 L1313.61 691.283 L1314.17 691.283 L1314.73 691.283 L1315.29 691.283 L1315.85 691.283 L1316.41 691.283 L1316.97 691.283 L1317.53 691.283 L1318.09 691.283 L1318.65 691.283 L1319.2 691.283 L1319.76 691.283 L1320.32 691.283 L1320.88 691.283 L1321.44 691.283 L1322 691.283 L1322.56 691.283 L1323.12 691.283 L1323.68 691.283 L1324.24 691.283 L1324.8 691.283 L1325.36 691.283 L1325.92 691.283 L1326.47 691.283 L1327.03 691.283 L1327.59 691.283 L1328.15 691.283 L1328.71 691.283 L1329.27 691.283 L1329.83 691.283 L1330.39 691.283 L1330.95 691.283 L1331.51 691.283 L1332.07 691.283 L1332.63 691.283 L1333.19 691.283 L1333.75 691.283 L1334.3 691.283 L1334.86 691.283 L1335.42 691.283 L1335.98 691.283 L1336.54 691.283 L1337.1 691.283 L1337.66 691.283 L1338.22 691.283 L1338.78 691.283 L1339.34 691.283 L1339.9 691.283 L1340.46 691.283 L1341.02 691.283 L1341.57 691.283 L1342.13 691.283 L1342.69 691.283 L1343.25 691.283 L1343.81 691.283 L1344.37 691.283 L1344.93 691.283 L1345.49 691.283 L1346.05 691.283 L1346.61 691.283 L1347.17 691.283 L1347.73 691.283 L1348.29 691.283 L1348.84 691.283 L1349.4 691.283 L1349.96 691.283 L1350.52 691.283 L1351.08 691.283 L1351.64 691.283 L1352.2 691.283 L1352.76 691.283 L1353.32 691.283 L1353.88 691.283 L1354.44 691.283 L1355 691.283 L1355.56 691.283 L1356.12 691.283 L1356.67 691.283 L1357.23 691.283 L1357.79 691.283 L1358.35 691.283 L1358.91 691.283 L1359.47 691.283 L1360.03 691.283 L1360.59 691.283 L1361.15 691.283 L1361.71 691.283 L1362.27 691.283 L1362.83 691.283 L1363.39 691.283 L1363.94 691.283 L1364.5 691.283 L1365.06 691.283 L1365.62 691.283 L1366.18 691.283 L1366.74 691.283 L1367.3 691.283 L1367.86 691.283 L1368.42 691.283 L1368.98 691.283 L1369.54 691.283 L1370.1 691.283 L1370.66 691.283 L1371.21 691.283 L1371.77 691.283 L1372.33 691.283 L1372.89 691.283 L1373.45 691.283 L1374.01 691.283 L1374.57 691.283 L1375.13 691.283 L1375.69 691.283 L1376.25 691.283 L1376.81 691.283 L1377.37 691.283 L1377.93 691.283 L1378.49 691.283 L1379.04 691.283 L1379.6 691.283 L1380.16 691.283 L1380.72 691.283 L1381.28 691.283 L1381.84 691.283 L1382.4 691.283 L1382.96 691.283 L1383.52 691.283 L1384.08 691.283 L1384.64 691.283 L1385.2 691.283 L1385.76 691.283 L1386.31 691.283 L1386.87 691.283 L1387.43 691.283 L1387.99 691.283 L1388.55 691.283 L1389.11 691.283 L1389.67 691.283 L1390.23 691.283 L1390.79 691.283 L1391.35 691.283 L1391.91 691.283 L1392.47 691.283 L1393.03 691.283 L1393.58 691.283 L1394.14 691.283 L1394.7 691.283 L1395.26 691.283 L1395.82 691.283 L1396.38 691.283 L1396.94 691.283 L1397.5 691.283 L1398.06 691.283 L1398.62 691.283 L1399.18 691.283 L1399.74 691.283 L1400.3 691.283 L1400.86 691.283 L1401.41 691.283 L1401.97 691.283 L1402.53 691.283 L1403.09 691.283 L1403.65 691.283 L1404.21 691.283 L1404.77 691.283 L1405.33 691.283 L1405.89 691.283 L1406.45 691.283 L1407.01 691.283 L1407.57 691.283 L1408.13 691.283 L1408.68 691.283 L1409.24 691.283 L1409.8 691.283 L1410.36 691.283 L1410.92 691.283 L1411.48 691.283 L1412.04 691.283 L1412.6 691.283 L1413.16 691.283 L1413.72 691.283 L1414.28 691.283 L1414.84 691.283 L1415.4 691.283 L1415.95 691.283 L1416.51 691.283 L1417.07 691.283 L1417.63 691.283 L1418.19 691.283 L1418.75 691.283 L1419.31 691.283 L1419.87 691.283 L1420.43 691.283 L1420.99 691.283 L1421.55 691.283 L1422.11 691.283 L1422.67 691.283 L1423.23 691.283 L1423.78 691.283 L1424.34 691.283 L1424.9 691.283 L1425.46 691.283 L1426.02 691.283 L1426.58 691.283 L1427.14 691.283 L1427.7 691.283 L1428.26 691.283 L1428.82 691.283 L1429.38 691.283 L1429.94 691.283 L1430.5 691.283 L1431.05 691.283 L1431.61 691.283 L1432.17 691.283 L1432.73 691.283 L1433.29 691.283 L1433.85 691.283 L1434.41 691.283 L1434.97 691.283 L1435.53 691.283 L1436.09 691.283 L1436.65 691.283 L1437.21 691.283 L1437.77 691.283 L1438.33 691.283 L1438.88 691.283 L1439.44 691.283 L1440 691.283 L1440.56 691.283 L1441.12 691.283 L1441.68 691.283 L1442.24 691.283 L1442.8 691.283 L1443.36 691.283 L1443.92 691.283 L1444.48 691.283 L1445.04 691.283 L1445.6 691.283 L1446.15 691.283 L1446.71 691.283 L1447.27 691.283 L1447.83 691.283 L1448.39 691.283 L1448.95 691.283 L1449.51 691.283 L1450.07 691.283 L1450.63 691.283 L1451.19 691.283 L1451.75 691.283 L1452.31 691.283 L1452.87 691.283 L1453.42 691.283 L1453.98 691.283 L1454.54 691.283 L1455.1 691.283 L1455.66 691.283 L1456.22 691.283 L1456.78 691.283 L1457.34 691.283 L1457.9 691.283 L1458.46 691.283 L1459.02 691.283 L1459.58 691.283 L1460.14 691.283 L1460.7 691.283 L1461.25 691.283 L1461.81 691.283 L1462.37 691.283 L1462.93 691.283 L1463.49 691.283 L1464.05 691.283 L1464.61 691.283 L1465.17 691.283 L1465.73 691.283 L1466.29 691.283 L1466.85 691.283 L1467.41 691.283 L1467.97 691.283 L1468.52 691.283 L1469.08 691.283 L1469.64 691.283 L1470.2 691.283 L1470.76 691.283 L1471.32 691.283 L1471.88 691.283 L1472.44 691.283 L1473 691.283 L1473.56 691.283 L1474.12 691.283 L1474.68 691.283 L1475.24 691.283 L1475.79 691.283 L1476.35 691.283 L1476.91 691.283 L1477.47 691.283 L1478.03 691.283 L1478.59 691.283 L1479.15 691.283 L1479.71 691.283 L1480.27 691.283 L1480.83 691.283 L1481.39 691.283 L1481.95 691.283 L1482.51 691.283 L1483.07 691.283 L1483.62 691.283 L1484.18 691.283 L1484.74 691.283 L1485.3 691.283 L1485.86 691.283 L1486.42 691.283 L1486.98 691.283 L1487.54 691.283 L1488.1 691.283 L1488.66 691.283 L1489.22 691.283 L1489.78 691.283 L1490.34 691.283 L1490.89 691.283 L1491.45 691.283 L1492.01 691.283 L1492.57 691.283 L1493.13 691.283 L1493.69 691.283 L1494.25 691.283 L1494.81 691.283 L1495.37 691.283 L1495.93 691.283 L1496.49 691.283 L1497.05 691.283 L1497.61 691.283 L1498.16 691.283 L1498.72 691.283 L1499.28 691.283 L1499.84 691.283 L1500.4 691.283 L1500.96 691.283 L1501.52 691.283 L1502.08 691.283 L1502.64 691.283 L1503.2 691.283 L1503.76 691.283 L1504.32 691.283 L1504.88 691.283 L1505.44 691.283 L1505.99 691.283 L1506.55 691.283 L1507.11 691.283 L1507.67 691.283 L1508.23 691.283 L1508.79 691.283 L1509.35 691.283 L1509.91 691.283 L1510.47 691.283 L1511.03 691.283 L1511.59 691.283 L1512.15 691.283 L1512.71 691.283 L1513.26 691.283 L1513.82 691.283 L1514.38 691.283 L1514.94 691.283 L1515.5 691.283 L1516.06 691.283 L1516.62 691.283 L1517.18 691.283 L1517.74 691.283 L1518.3 691.283 L1518.86 691.283 L1519.42 691.283 L1519.98 691.283 L1520.53 691.283 L1521.09 691.283 L1521.65 691.283 L1522.21 691.283 L1522.77 691.283 L1523.33 691.283 L1523.89 691.283 L1524.45 691.283 L1525.01 691.283 L1525.57 691.283 L1526.13 691.283 L1526.69 691.283 L1527.25 691.283 L1527.81 691.283 L1528.36 691.283 L1528.92 691.283 L1529.48 691.283 L1530.04 691.283 L1530.6 691.283 L1531.16 691.283 L1531.72 691.283 L1532.28 691.283 L1532.84 691.283 L1533.4 691.283 L1533.96 691.283 L1534.52 691.283 L1535.08 691.283 L1535.63 691.283 L1536.19 691.283 L1536.75 691.283 L1537.31 691.283 L1537.87 691.283 L1538.43 691.283 L1538.99 691.283 L1539.55 691.283 L1540.11 691.283 L1540.67 691.283 L1541.23 691.283 L1541.79 691.283 L1542.35 691.283 L1542.9 691.283 L1543.46 691.283 L1544.02 691.283 L1544.58 691.283 L1545.14 691.283 L1545.7 691.283 L1546.26 691.283 L1546.82 691.283 L1547.38 691.283 L1547.94 691.283 L1548.5 691.283 L1549.06 691.283 L1549.62 691.283 L1550.18 691.283 L1550.73 691.283 L1551.29 691.283 L1551.85 691.283 L1552.41 691.283 L1552.97 691.283 L1553.53 691.283 L1554.09 691.283 L1554.65 691.283 L1555.21 691.283 L1555.77 691.283 L1556.33 691.283 L1556.89 691.283 L1557.45 691.283 L1558 691.283 L1558.56 691.283 L1559.12 691.283 L1559.68 691.283 L1560.24 691.283 L1560.8 691.283 L1561.36 691.283 L1561.92 691.283 L1562.48 691.283 L1563.04 691.283 L1563.6 691.283 L1564.16 691.283 L1564.72 691.283 L1565.28 691.283 L1565.83 691.283 L1566.39 691.283 L1566.95 691.283 L1567.51 691.283 L1568.07 691.283 L1568.63 691.283 L1569.19 691.283 L1569.75 691.283 L1570.31 691.283 L1570.87 691.283 L1571.43 691.283 L1571.99 691.283 L1572.55 691.283 L1573.1 691.283 L1573.66 691.283 L1574.22 691.283 L1574.78 691.283 L1575.34 691.283 L1575.9 691.283 L1576.46 691.283 L1577.02 691.283 L1577.58 691.283 L1578.14 691.283 L1578.7 691.283 L1579.26 691.283 L1579.82 691.283 L1580.37 691.283 L1580.93 691.283 L1581.49 691.283 L1582.05 691.283 L1582.61 691.283 L1583.17 691.283 L1583.73 691.283 L1584.29 691.283 L1584.85 691.283 L1585.41 691.283 L1585.97 691.283 L1586.53 691.283 L1587.09 691.283 L1587.65 691.283 L1588.2 691.283 L1588.76 691.283 L1589.32 691.283 L1589.88 691.283 L1590.44 691.283 L1591 691.283 L1591.56 691.283 L1592.12 691.283 L1592.68 691.283 L1593.24 691.283 L1593.8 691.283 L1594.36 691.283 L1594.92 691.283 L1595.47 691.283 L1596.03 691.283 L1596.59 691.283 L1597.15 691.283 L1597.71 691.283 L1598.27 691.283 L1598.83 691.283 L1599.39 691.283 L1599.95 691.283 L1600.51 691.283 L1601.07 691.283 L1601.63 691.283 L1602.19 691.283 L1602.74 691.283 L1603.3 691.283 L1603.86 691.283 L1604.42 691.283 L1604.98 691.283 L1605.54 691.283 L1606.1 691.283 L1606.66 691.283 L1607.22 691.283 L1607.78 691.283 L1608.34 691.283 L1608.9 691.283 L1609.46 691.283 L1610.02 691.283 L1610.57 691.283 L1611.13 691.283 L1611.69 691.283 L1612.25 691.283 L1612.81 691.283 L1613.37 691.283 L1613.93 691.283 L1614.49 691.283 L1615.05 691.283 L1615.61 691.283 L1616.17 691.283 L1616.73 691.283 L1617.29 691.283 L1617.84 691.283 L1618.4 691.283 L1618.96 691.283 L1619.52 691.283 L1620.08 691.283 L1620.64 691.283 L1621.2 691.283 L1621.76 691.283 L1622.32 691.283 L1622.88 691.283 L1623.44 691.283 L1624 691.283 L1624.56 691.283 L1625.11 691.283 L1625.67 691.283 L1626.23 691.283 L1626.79 691.283 L1627.35 691.283 L1627.91 691.283 L1628.47 691.283 L1629.03 691.283 L1629.59 691.283 L1630.15 691.283 L1630.71 691.283 L1631.27 691.283 L1631.83 691.283 L1632.39 691.283 L1632.94 691.283 L1633.5 691.283 L1634.06 691.283 L1634.62 691.283 L1635.18 691.283 L1635.74 691.283 L1636.3 691.283 L1636.86 691.283 L1637.42 691.283 L1637.98 691.283 L1638.54 691.283 L1639.1 691.283 L1639.66 691.283 L1640.21 691.283 L1640.77 691.283 L1641.33 691.283 L1641.89 691.283 L1642.45 691.283 L1643.01 691.283 L1643.57 691.283 L1644.13 691.283 L1644.69 691.283 L1645.25 691.283 L1645.81 691.283 L1646.37 691.283 L1646.93 691.283 L1647.48 691.283 L1648.04 691.283 L1648.6 691.283 L1649.16 691.283 L1649.72 691.283 L1650.28 691.283 L1650.84 691.283 L1651.4 691.283 L1651.96 691.283 L1652.52 691.283 L1653.08 691.283 L1653.64 691.283 L1654.2 691.283 L1654.76 691.283 L1655.31 691.283 L1655.87 691.283 L1656.43 691.283 L1656.99 691.283 L1657.55 691.283 L1658.11 691.283 L1658.67 691.283 L1659.23 691.283 L1659.79 691.283 L1660.35 691.283 L1660.91 691.283 L1661.47 691.283 L1662.03 691.283 L1662.58 691.283 L1663.14 691.283 L1663.7 691.283 L1664.26 691.283 L1664.82 691.283 L1665.38 691.283 L1665.94 691.283 L1666.5 691.283 L1667.06 691.283 L1667.62 691.283 L1668.18 691.283 L1668.74 691.283 L1669.3 691.283 L1669.85 691.283 L1670.41 691.283 L1670.97 691.283 L1671.53 691.283 L1672.09 691.283 L1672.65 691.283 L1673.21 691.283 L1673.77 691.283 L1674.33 691.283 L1674.89 691.283 L1675.45 691.283 L1676.01 691.283 L1676.57 691.283 L1677.13 691.283 L1677.68 691.283 L1678.24 691.283 L1678.8 691.283 L1679.36 691.283 L1679.92 691.283 L1680.48 691.283 L1681.04 691.283 L1681.6 691.283 L1682.16 691.283 L1682.72 691.283 L1683.28 691.283 L1683.84 691.283 L1684.4 691.283 L1684.95 691.283 L1685.51 691.283 L1686.07 691.283 L1686.63 691.283 L1687.19 691.283 L1687.75 691.283 L1688.31 691.283 L1688.87 691.283 L1689.43 691.283 L1689.99 691.283 L1690.55 691.283 L1691.11 691.283 L1691.67 691.283 L1692.23 691.283 L1692.78 691.283 L1693.34 691.283 L1693.9 691.283 L1694.46 691.283 L1695.02 691.283 L1695.58 691.283 L1696.14 691.283 L1696.7 691.283 L1697.26 691.283 L1697.82 691.283 L1698.38 691.283 L1698.94 691.283 L1699.5 691.283 L1700.05 691.283 L1700.61 691.283 L1701.17 691.283 L1701.73 691.283 L1702.29 691.283 L1702.85 691.283 L1703.41 691.283 L1703.97 691.283 L1704.53 691.283 L1705.09 691.283 L1705.65 691.283 L1706.21 691.283 L1706.77 691.283 L1707.32 691.283 L1707.88 691.283 L1708.44 691.283 L1709 691.283 L1709.56 691.283 L1710.12 691.283 L1710.68 691.283 L1711.24 691.283 L1711.8 691.283 L1712.36 691.283 L1712.92 691.283 L1713.48 691.283 L1714.04 691.283 L1714.6 691.283 L1715.15 691.283 L1715.71 691.283 L1716.27 691.283 L1716.83 691.283 L1717.39 691.283 L1717.95 691.283 L1718.51 691.283 L1719.07 691.283 L1719.63 691.283 L1720.19 691.283 L1720.75 691.283 L1721.31 691.283 L1721.87 691.283 L1722.42 691.283 L1722.98 691.283 L1723.54 691.283 L1724.1 691.283 L1724.66 691.283 L1725.22 691.283 L1725.78 691.283 L1726.34 691.283 L1726.9 691.283 L1727.46 691.283 L1728.02 691.283 L1728.58 691.283 L1729.14 691.283 L1729.69 691.283 L1730.25 691.283 L1730.81 691.283 L1731.37 691.283 L1731.93 691.283 L1732.49 691.283 L1733.05 691.283 L1733.61 691.283 L1734.17 691.283 L1734.73 691.283 L1735.29 691.283 L1735.85 691.283 L1736.41 691.283 L1736.97 691.283 L1737.52 691.283 L1738.08 691.283 L1738.64 691.283 L1739.2 691.283 L1739.76 691.283 L1740.32 691.283 L1740.88 691.283 L1741.44 691.283 L1742 691.283 L1742.56 691.283 L1743.12 691.283 L1743.68 691.283 L1744.24 691.283 L1744.79 691.283 L1745.35 691.283 L1745.91 691.283 L1746.47 691.283 L1747.03 691.283 L1747.59 691.283 L1748.15 691.283 L1748.71 691.283 L1749.27 691.283 L1749.83 691.283 L1750.39 691.283 L1750.95 691.283 L1751.51 691.283 L1752.06 691.283 L1752.62 691.283 L1753.18 691.283 L1753.74 691.283 L1754.3 691.283 L1754.86 691.283 L1755.42 691.283 L1755.98 691.283 L1756.54 691.283 L1757.1 691.283 L1757.66 691.283 L1758.22 691.283 L1758.78 691.283 L1759.34 691.283 L1759.89 691.283 L1760.45 691.283 L1761.01 691.283 L1761.57 691.283 L1762.13 691.283 L1762.69 691.283 L1763.25 691.283 L1763.81 691.283 L1764.37 691.283 L1764.93 691.283 L1765.49 691.283 L1766.05 691.283 L1766.61 691.283 L1767.16 691.283 L1767.72 691.283 L1768.28 691.283 L1768.84 691.283 L1769.4 691.283 L1769.96 691.283 L1770.52 691.283 L1771.08 691.283 L1771.64 691.283 L1772.2 691.283 L1772.76 691.283 L1773.32 691.283 L1773.88 691.283 L1774.43 691.283 L1774.99 691.283 L1775.55 691.283 L1776.11 691.283 L1776.67 691.283 L1777.23 691.283 L1777.79 691.283 L1778.35 691.283 L1778.91 691.283 L1779.47 691.283 L1780.03 691.283 L1780.59 691.283 L1781.15 691.283 L1781.71 691.283 L1782.26 691.283 L1782.82 691.283 L1783.38 691.283 L1783.94 691.283 L1784.5 691.283 L1785.06 691.283 L1785.62 691.283 L1786.18 691.283 L1786.74 691.283 L1787.3 691.283 L1787.86 691.283 L1788.42 691.283 L1788.98 691.283 L1789.53 691.283 L1790.09 691.283 L1790.65 691.283 L1791.21 691.283 L1791.77 691.283 L1792.33 691.283 L1792.89 691.283 L1793.45 691.283 L1794.01 691.283 L1794.57 691.283 L1795.13 691.283 L1795.69 691.283 L1796.25 691.283 L1796.8 691.283 L1797.36 691.283 L1797.92 691.283 L1798.48 691.283 L1799.04 691.283 L1799.6 691.283 L1800.16 691.283 L1800.72 691.283 L1801.28 691.283 L1801.84 691.283 L1802.4 691.283 L1802.96 691.283 L1803.52 691.283 L1804.08 691.283 L1804.63 691.283 L1805.19 691.283 L1805.75 691.283 L1806.31 691.283 L1806.87 691.283 L1807.43 691.283 L1807.99 691.283 L1808.55 691.283 L1809.11 691.283 L1809.67 691.283 L1810.23 691.283 L1810.79 691.283 L1811.35 691.283 L1811.9 691.283 L1812.46 691.283 L1813.02 691.283 L1813.58 691.283 L1814.14 691.283 L1814.7 691.283 L1815.26 691.283 L1815.82 691.283 L1816.38 691.283 L1816.94 691.283 L1817.5 691.283 L1818.06 691.283 L1818.62 691.283 L1819.18 691.283 L1819.73 691.283 L1820.29 691.283 L1820.85 691.283 L1821.41 691.283 L1821.97 691.283 L1822.53 691.283 L1823.09 691.283 L1823.65 691.283 L1824.21 691.283 L1824.77 691.283 L1825.33 691.283 L1825.89 691.283 L1826.45 691.283 L1827 691.283 L1827.56 691.283 L1828.12 691.283 L1828.68 691.283 L1829.24 691.283 L1829.8 691.283 L1830.36 691.283 L1830.92 691.283 L1831.48 691.283 L1832.04 691.283 L1832.6 691.283 L1833.16 691.283 L1833.72 691.283 L1834.27 691.283 L1834.83 691.283 L1835.39 691.283 L1835.95 691.283 L1836.51 691.283 L1837.07 691.283 L1837.63 691.283 L1838.19 691.283 L1838.19 682.085 L1837.63 682.085 L1837.07 682.085 L1836.51 682.085 L1835.95 682.085 L1835.39 682.085 L1834.83 682.085 L1834.27 682.085 L1833.72 682.085 L1833.16 682.085 L1832.6 682.085 L1832.04 682.085 L1831.48 682.085 L1830.92 682.085 L1830.36 682.085 L1829.8 682.085 L1829.24 682.085 L1828.68 682.085 L1828.12 682.085 L1827.56 682.085 L1827 682.085 L1826.45 682.085 L1825.89 682.085 L1825.33 682.085 L1824.77 682.085 L1824.21 682.085 L1823.65 682.085 L1823.09 682.085 L1822.53 682.085 L1821.97 682.085 L1821.41 682.085 L1820.85 682.085 L1820.29 682.085 L1819.73 682.085 L1819.18 682.085 L1818.62 682.085 L1818.06 682.085 L1817.5 682.085 L1816.94 682.085 L1816.38 682.085 L1815.82 682.085 L1815.26 682.085 L1814.7 682.085 L1814.14 682.085 L1813.58 682.085 L1813.02 682.085 L1812.46 682.085 L1811.9 682.085 L1811.35 682.085 L1810.79 682.085 L1810.23 682.085 L1809.67 682.085 L1809.11 682.085 L1808.55 682.085 L1807.99 682.085 L1807.43 682.085 L1806.87 682.085 L1806.31 682.085 L1805.75 682.085 L1805.19 682.085 L1804.63 682.085 L1804.08 682.085 L1803.52 682.085 L1802.96 682.085 L1802.4 682.085 L1801.84 682.085 L1801.28 682.085 L1800.72 682.085 L1800.16 682.085 L1799.6 682.085 L1799.04 682.085 L1798.48 682.085 L1797.92 682.085 L1797.36 682.085 L1796.8 682.085 L1796.25 682.085 L1795.69 682.085 L1795.13 682.085 L1794.57 682.085 L1794.01 682.085 L1793.45 682.085 L1792.89 682.085 L1792.33 682.085 L1791.77 682.085 L1791.21 682.085 L1790.65 682.085 L1790.09 682.085 L1789.53 682.085 L1788.98 682.085 L1788.42 682.085 L1787.86 682.085 L1787.3 682.085 L1786.74 682.085 L1786.18 682.085 L1785.62 682.085 L1785.06 682.085 L1784.5 682.085 L1783.94 682.085 L1783.38 682.085 L1782.82 682.085 L1782.26 682.085 L1781.71 682.085 L1781.15 682.085 L1780.59 682.085 L1780.03 682.085 L1779.47 682.085 L1778.91 682.085 L1778.35 682.085 L1777.79 682.085 L1777.23 682.085 L1776.67 682.085 L1776.11 682.085 L1775.55 682.085 L1774.99 682.085 L1774.43 682.085 L1773.88 682.085 L1773.32 682.085 L1772.76 682.085 L1772.2 682.085 L1771.64 682.085 L1771.08 682.085 L1770.52 682.085 L1769.96 682.085 L1769.4 682.085 L1768.84 682.085 L1768.28 682.085 L1767.72 682.085 L1767.16 682.085 L1766.61 682.085 L1766.05 682.085 L1765.49 682.085 L1764.93 682.085 L1764.37 682.085 L1763.81 682.085 L1763.25 682.085 L1762.69 682.085 L1762.13 682.085 L1761.57 682.085 L1761.01 682.085 L1760.45 682.085 L1759.89 682.085 L1759.34 682.085 L1758.78 682.085 L1758.22 682.085 L1757.66 682.085 L1757.1 682.085 L1756.54 682.085 L1755.98 682.085 L1755.42 682.085 L1754.86 682.085 L1754.3 682.085 L1753.74 682.085 L1753.18 682.085 L1752.62 682.085 L1752.06 682.085 L1751.51 682.085 L1750.95 682.085 L1750.39 682.085 L1749.83 682.085 L1749.27 682.085 L1748.71 682.085 L1748.15 682.085 L1747.59 682.085 L1747.03 682.085 L1746.47 682.085 L1745.91 682.085 L1745.35 682.085 L1744.79 682.085 L1744.24 682.085 L1743.68 682.085 L1743.12 682.085 L1742.56 682.085 L1742 682.085 L1741.44 682.085 L1740.88 682.085 L1740.32 682.085 L1739.76 682.085 L1739.2 682.085 L1738.64 682.085 L1738.08 682.085 L1737.52 682.085 L1736.97 682.085 L1736.41 682.085 L1735.85 682.085 L1735.29 682.085 L1734.73 682.085 L1734.17 682.085 L1733.61 682.085 L1733.05 682.085 L1732.49 682.085 L1731.93 682.085 L1731.37 682.085 L1730.81 682.085 L1730.25 682.085 L1729.69 682.085 L1729.14 682.085 L1728.58 682.085 L1728.02 682.085 L1727.46 682.085 L1726.9 682.085 L1726.34 682.085 L1725.78 682.085 L1725.22 682.085 L1724.66 682.085 L1724.1 682.085 L1723.54 682.085 L1722.98 682.085 L1722.42 682.085 L1721.87 682.085 L1721.31 682.085 L1720.75 682.085 L1720.19 682.085 L1719.63 682.085 L1719.07 682.085 L1718.51 682.085 L1717.95 682.085 L1717.39 682.085 L1716.83 682.085 L1716.27 682.085 L1715.71 682.085 L1715.15 682.085 L1714.6 682.085 L1714.04 682.085 L1713.48 682.085 L1712.92 682.085 L1712.36 682.085 L1711.8 682.085 L1711.24 682.085 L1710.68 682.085 L1710.12 682.085 L1709.56 682.085 L1709 682.085 L1708.44 682.085 L1707.88 682.085 L1707.32 682.085 L1706.77 682.085 L1706.21 682.085 L1705.65 682.085 L1705.09 682.085 L1704.53 682.085 L1703.97 682.085 L1703.41 682.085 L1702.85 682.085 L1702.29 682.085 L1701.73 682.085 L1701.17 682.085 L1700.61 682.085 L1700.05 682.085 L1699.5 682.085 L1698.94 682.085 L1698.38 682.085 L1697.82 682.085 L1697.26 682.085 L1696.7 682.085 L1696.14 682.085 L1695.58 682.085 L1695.02 682.085 L1694.46 682.085 L1693.9 682.085 L1693.34 682.085 L1692.78 682.085 L1692.23 682.085 L1691.67 682.085 L1691.11 682.085 L1690.55 682.085 L1689.99 682.085 L1689.43 682.085 L1688.87 682.085 L1688.31 682.085 L1687.75 682.085 L1687.19 682.085 L1686.63 682.085 L1686.07 682.085 L1685.51 682.085 L1684.95 682.085 L1684.4 682.085 L1683.84 682.085 L1683.28 682.085 L1682.72 682.085 L1682.16 682.085 L1681.6 682.085 L1681.04 682.085 L1680.48 682.085 L1679.92 682.085 L1679.36 682.085 L1678.8 682.085 L1678.24 682.085 L1677.68 682.085 L1677.13 682.085 L1676.57 682.085 L1676.01 682.085 L1675.45 682.085 L1674.89 682.085 L1674.33 682.085 L1673.77 682.085 L1673.21 682.085 L1672.65 682.085 L1672.09 682.085 L1671.53 682.085 L1670.97 682.085 L1670.41 682.085 L1669.85 682.085 L1669.3 682.085 L1668.74 682.085 L1668.18 682.085 L1667.62 682.085 L1667.06 682.085 L1666.5 682.085 L1665.94 682.085 L1665.38 682.085 L1664.82 682.085 L1664.26 682.085 L1663.7 682.085 L1663.14 682.085 L1662.58 682.085 L1662.03 682.085 L1661.47 682.085 L1660.91 682.085 L1660.35 682.085 L1659.79 682.085 L1659.23 682.085 L1658.67 682.085 L1658.11 682.085 L1657.55 682.085 L1656.99 682.085 L1656.43 682.085 L1655.87 682.085 L1655.31 682.085 L1654.76 682.085 L1654.2 682.085 L1653.64 682.085 L1653.08 682.085 L1652.52 682.085 L1651.96 682.085 L1651.4 682.085 L1650.84 682.085 L1650.28 682.085 L1649.72 682.085 L1649.16 682.085 L1648.6 682.085 L1648.04 682.085 L1647.48 682.085 L1646.93 682.085 L1646.37 682.085 L1645.81 682.085 L1645.25 682.085 L1644.69 682.085 L1644.13 682.085 L1643.57 682.085 L1643.01 682.085 L1642.45 682.085 L1641.89 682.085 L1641.33 682.085 L1640.77 682.085 L1640.21 682.085 L1639.66 682.085 L1639.1 682.085 L1638.54 682.085 L1637.98 682.085 L1637.42 682.085 L1636.86 682.085 L1636.3 682.085 L1635.74 682.085 L1635.18 682.085 L1634.62 682.085 L1634.06 682.085 L1633.5 682.085 L1632.94 682.085 L1632.39 682.085 L1631.83 682.085 L1631.27 682.085 L1630.71 682.085 L1630.15 682.085 L1629.59 682.085 L1629.03 682.085 L1628.47 682.085 L1627.91 682.085 L1627.35 682.085 L1626.79 682.085 L1626.23 682.085 L1625.67 682.085 L1625.11 682.085 L1624.56 682.085 L1624 682.085 L1623.44 682.085 L1622.88 682.085 L1622.32 682.085 L1621.76 682.085 L1621.2 682.085 L1620.64 682.085 L1620.08 682.085 L1619.52 682.085 L1618.96 682.085 L1618.4 682.085 L1617.84 682.085 L1617.29 682.085 L1616.73 682.085 L1616.17 682.085 L1615.61 682.085 L1615.05 682.085 L1614.49 682.085 L1613.93 682.085 L1613.37 682.085 L1612.81 682.085 L1612.25 682.085 L1611.69 682.085 L1611.13 682.085 L1610.57 682.085 L1610.02 682.085 L1609.46 682.085 L1608.9 682.085 L1608.34 682.085 L1607.78 682.085 L1607.22 682.085 L1606.66 682.085 L1606.1 682.085 L1605.54 682.085 L1604.98 682.085 L1604.42 682.085 L1603.86 682.085 L1603.3 682.085 L1602.74 682.085 L1602.19 682.085 L1601.63 682.085 L1601.07 682.085 L1600.51 682.085 L1599.95 682.085 L1599.39 682.085 L1598.83 682.085 L1598.27 682.085 L1597.71 682.085 L1597.15 682.085 L1596.59 682.085 L1596.03 682.085 L1595.47 682.085 L1594.92 682.085 L1594.36 682.085 L1593.8 682.085 L1593.24 682.085 L1592.68 682.085 L1592.12 682.085 L1591.56 682.085 L1591 682.085 L1590.44 682.085 L1589.88 682.085 L1589.32 682.085 L1588.76 682.085 L1588.2 682.085 L1587.65 682.085 L1587.09 682.085 L1586.53 682.085 L1585.97 682.085 L1585.41 682.085 L1584.85 682.085 L1584.29 682.085 L1583.73 682.085 L1583.17 682.085 L1582.61 682.085 L1582.05 682.085 L1581.49 682.085 L1580.93 682.085 L1580.37 682.085 L1579.82 682.085 L1579.26 682.085 L1578.7 682.085 L1578.14 682.085 L1577.58 682.085 L1577.02 682.085 L1576.46 682.085 L1575.9 682.085 L1575.34 682.085 L1574.78 682.085 L1574.22 682.085 L1573.66 682.085 L1573.1 682.085 L1572.55 682.085 L1571.99 682.085 L1571.43 682.085 L1570.87 682.085 L1570.31 682.085 L1569.75 682.085 L1569.19 682.085 L1568.63 682.085 L1568.07 682.085 L1567.51 682.085 L1566.95 682.085 L1566.39 682.085 L1565.83 682.085 L1565.28 682.085 L1564.72 682.085 L1564.16 682.085 L1563.6 682.085 L1563.04 682.085 L1562.48 682.085 L1561.92 682.085 L1561.36 682.085 L1560.8 682.085 L1560.24 682.085 L1559.68 682.085 L1559.12 682.085 L1558.56 682.085 L1558 682.085 L1557.45 682.085 L1556.89 682.085 L1556.33 682.085 L1555.77 682.085 L1555.21 682.085 L1554.65 682.085 L1554.09 682.085 L1553.53 682.085 L1552.97 682.085 L1552.41 682.085 L1551.85 682.085 L1551.29 682.085 L1550.73 682.085 L1550.18 682.085 L1549.62 682.085 L1549.06 682.085 L1548.5 682.085 L1547.94 682.085 L1547.38 682.085 L1546.82 682.085 L1546.26 682.085 L1545.7 682.085 L1545.14 682.085 L1544.58 682.085 L1544.02 682.085 L1543.46 682.085 L1542.9 682.085 L1542.35 682.085 L1541.79 682.085 L1541.23 682.085 L1540.67 682.085 L1540.11 682.085 L1539.55 682.085 L1538.99 682.085 L1538.43 682.085 L1537.87 682.085 L1537.31 682.085 L1536.75 682.085 L1536.19 682.085 L1535.63 682.085 L1535.08 682.085 L1534.52 682.085 L1533.96 682.085 L1533.4 682.085 L1532.84 682.085 L1532.28 682.085 L1531.72 682.085 L1531.16 682.085 L1530.6 682.085 L1530.04 682.085 L1529.48 682.085 L1528.92 682.085 L1528.36 682.085 L1527.81 682.085 L1527.25 682.085 L1526.69 682.085 L1526.13 682.085 L1525.57 682.085 L1525.01 682.085 L1524.45 682.085 L1523.89 682.085 L1523.33 682.085 L1522.77 682.085 L1522.21 682.085 L1521.65 682.085 L1521.09 682.085 L1520.53 682.085 L1519.98 682.085 L1519.42 682.085 L1518.86 682.085 L1518.3 682.085 L1517.74 682.085 L1517.18 682.085 L1516.62 682.085 L1516.06 682.085 L1515.5 682.085 L1514.94 682.085 L1514.38 682.085 L1513.82 682.085 L1513.26 682.085 L1512.71 682.085 L1512.15 682.085 L1511.59 682.085 L1511.03 682.085 L1510.47 682.085 L1509.91 682.085 L1509.35 682.085 L1508.79 682.085 L1508.23 682.085 L1507.67 682.085 L1507.11 682.085 L1506.55 682.085 L1505.99 682.085 L1505.44 682.085 L1504.88 682.085 L1504.32 682.085 L1503.76 682.085 L1503.2 682.085 L1502.64 682.085 L1502.08 682.085 L1501.52 682.085 L1500.96 682.085 L1500.4 682.085 L1499.84 682.085 L1499.28 682.085 L1498.72 682.085 L1498.16 682.085 L1497.61 682.085 L1497.05 682.085 L1496.49 682.085 L1495.93 682.085 L1495.37 682.085 L1494.81 682.085 L1494.25 682.085 L1493.69 682.085 L1493.13 682.085 L1492.57 682.085 L1492.01 682.085 L1491.45 682.085 L1490.89 682.085 L1490.34 682.085 L1489.78 682.085 L1489.22 682.085 L1488.66 682.085 L1488.1 682.085 L1487.54 682.085 L1486.98 682.085 L1486.42 682.085 L1485.86 682.085 L1485.3 682.085 L1484.74 682.085 L1484.18 682.085 L1483.62 682.085 L1483.07 682.085 L1482.51 682.085 L1481.95 682.085 L1481.39 682.085 L1480.83 682.085 L1480.27 682.085 L1479.71 682.085 L1479.15 682.085 L1478.59 682.085 L1478.03 682.085 L1477.47 682.085 L1476.91 682.085 L1476.35 682.085 L1475.79 682.085 L1475.24 682.085 L1474.68 682.085 L1474.12 682.085 L1473.56 682.085 L1473 682.085 L1472.44 682.085 L1471.88 682.085 L1471.32 682.085 L1470.76 682.085 L1470.2 682.085 L1469.64 682.085 L1469.08 682.085 L1468.52 682.085 L1467.97 682.085 L1467.41 682.085 L1466.85 682.085 L1466.29 682.085 L1465.73 682.085 L1465.17 682.085 L1464.61 682.085 L1464.05 682.085 L1463.49 682.085 L1462.93 682.085 L1462.37 682.085 L1461.81 682.085 L1461.25 682.085 L1460.7 682.085 L1460.14 682.085 L1459.58 682.085 L1459.02 682.085 L1458.46 682.085 L1457.9 682.085 L1457.34 682.085 L1456.78 682.085 L1456.22 682.085 L1455.66 682.085 L1455.1 682.085 L1454.54 682.085 L1453.98 682.085 L1453.42 682.085 L1452.87 682.085 L1452.31 682.085 L1451.75 682.085 L1451.19 682.085 L1450.63 682.085 L1450.07 682.085 L1449.51 682.085 L1448.95 682.085 L1448.39 682.085 L1447.83 682.085 L1447.27 682.085 L1446.71 682.085 L1446.15 682.085 L1445.6 682.085 L1445.04 682.085 L1444.48 682.085 L1443.92 682.085 L1443.36 682.085 L1442.8 682.085 L1442.24 682.085 L1441.68 682.085 L1441.12 682.085 L1440.56 682.085 L1440 682.085 L1439.44 682.085 L1438.88 682.085 L1438.33 682.085 L1437.77 682.085 L1437.21 682.085 L1436.65 682.085 L1436.09 682.085 L1435.53 682.085 L1434.97 682.085 L1434.41 682.085 L1433.85 682.085 L1433.29 682.085 L1432.73 682.085 L1432.17 682.085 L1431.61 682.085 L1431.05 682.085 L1430.5 682.085 L1429.94 682.085 L1429.38 682.085 L1428.82 682.085 L1428.26 682.085 L1427.7 682.085 L1427.14 682.085 L1426.58 682.085 L1426.02 682.085 L1425.46 682.085 L1424.9 682.085 L1424.34 682.085 L1423.78 682.085 L1423.23 682.085 L1422.67 682.085 L1422.11 682.085 L1421.55 682.085 L1420.99 682.085 L1420.43 682.085 L1419.87 682.085 L1419.31 682.085 L1418.75 682.085 L1418.19 682.085 L1417.63 682.085 L1417.07 682.085 L1416.51 682.085 L1415.95 682.085 L1415.4 682.085 L1414.84 682.085 L1414.28 682.085 L1413.72 682.085 L1413.16 682.085 L1412.6 682.085 L1412.04 682.085 L1411.48 682.085 L1410.92 682.085 L1410.36 682.085 L1409.8 682.085 L1409.24 682.085 L1408.68 682.085 L1408.13 682.085 L1407.57 682.085 L1407.01 682.085 L1406.45 682.085 L1405.89 682.085 L1405.33 682.085 L1404.77 682.085 L1404.21 682.085 L1403.65 682.085 L1403.09 682.085 L1402.53 682.085 L1401.97 682.085 L1401.41 682.085 L1400.86 682.085 L1400.3 682.085 L1399.74 682.085 L1399.18 682.085 L1398.62 682.085 L1398.06 682.085 L1397.5 682.085 L1396.94 682.085 L1396.38 682.085 L1395.82 682.085 L1395.26 682.085 L1394.7 682.085 L1394.14 682.085 L1393.58 682.085 L1393.03 682.085 L1392.47 682.085 L1391.91 682.085 L1391.35 682.085 L1390.79 682.085 L1390.23 682.085 L1389.67 682.085 L1389.11 682.085 L1388.55 682.085 L1387.99 682.085 L1387.43 682.085 L1386.87 682.085 L1386.31 682.085 L1385.76 682.085 L1385.2 682.085 L1384.64 682.085 L1384.08 682.085 L1383.52 682.085 L1382.96 682.085 L1382.4 682.085 L1381.84 682.085 L1381.28 682.085 L1380.72 682.085 L1380.16 682.085 L1379.6 682.085 L1379.04 682.085 L1378.49 682.085 L1377.93 682.085 L1377.37 682.085 L1376.81 682.085 L1376.25 682.085 L1375.69 682.085 L1375.13 682.085 L1374.57 682.085 L1374.01 682.085 L1373.45 682.085 L1372.89 682.085 L1372.33 682.085 L1371.77 682.085 L1371.21 682.085 L1370.66 682.085 L1370.1 682.085 L1369.54 682.085 L1368.98 682.085 L1368.42 682.085 L1367.86 682.085 L1367.3 682.085 L1366.74 682.085 L1366.18 682.085 L1365.62 682.085 L1365.06 682.085 L1364.5 682.085 L1363.94 682.085 L1363.39 682.085 L1362.83 682.085 L1362.27 682.085 L1361.71 682.085 L1361.15 682.085 L1360.59 682.085 L1360.03 682.085 L1359.47 682.085 L1358.91 682.085 L1358.35 682.085 L1357.79 682.085 L1357.23 682.085 L1356.67 682.085 L1356.12 682.085 L1355.56 682.085 L1355 682.085 L1354.44 682.085 L1353.88 682.085 L1353.32 682.085 L1352.76 682.085 L1352.2 682.085 L1351.64 682.085 L1351.08 682.085 L1350.52 682.085 L1349.96 682.085 L1349.4 682.085 L1348.84 682.085 L1348.29 682.085 L1347.73 682.085 L1347.17 682.085 L1346.61 682.085 L1346.05 682.085 L1345.49 682.085 L1344.93 682.085 L1344.37 682.085 L1343.81 682.085 L1343.25 682.085 L1342.69 682.085 L1342.13 682.085 L1341.57 682.085 L1341.02 682.085 L1340.46 682.085 L1339.9 682.085 L1339.34 682.085 L1338.78 682.085 L1338.22 682.085 L1337.66 682.085 L1337.1 682.085 L1336.54 682.085 L1335.98 682.085 L1335.42 682.085 L1334.86 682.085 L1334.3 682.085 L1333.75 682.085 L1333.19 682.085 L1332.63 682.085 L1332.07 682.085 L1331.51 682.085 L1330.95 682.085 L1330.39 682.085 L1329.83 682.085 L1329.27 682.085 L1328.71 682.085 L1328.15 682.085 L1327.59 682.085 L1327.03 682.085 L1326.47 682.085 L1325.92 682.085 L1325.36 682.085 L1324.8 682.085 L1324.24 682.085 L1323.68 682.085 L1323.12 682.085 L1322.56 682.085 L1322 682.085 L1321.44 682.085 L1320.88 682.085 L1320.32 682.085 L1319.76 682.085 L1319.2 682.085 L1318.65 682.085 L1318.09 682.085 L1317.53 682.085 L1316.97 682.085 L1316.41 682.085 L1315.85 682.085 L1315.29 682.085 L1314.73 682.085 L1314.17 682.085 L1313.61 682.085 L1313.05 682.085 L1312.49 682.085 L1311.93 682.085 L1311.38 682.085 L1310.82 682.085 L1310.26 682.085 L1309.7 682.085 L1309.14 682.085 L1308.58 682.085 L1308.02 682.085 L1307.46 682.085 L1306.9 682.085 L1306.34 682.085 L1305.78 682.085 L1305.22 682.085 L1304.66 682.085 L1304.1 682.085 L1303.55 682.085 L1302.99 682.085 L1302.43 682.085 L1301.87 682.085 L1301.31 682.085 L1300.75 682.085 L1300.19 682.085 L1299.63 682.085 L1299.07 682.085 L1298.51 682.085 L1297.95 682.085 L1297.39 682.085 L1296.83 682.085 L1296.28 682.085 L1295.72 682.085 L1295.16 682.085 L1294.6 682.085 L1294.04 682.085 L1293.48 682.085 L1292.92 682.085 L1292.36 682.085 L1291.8 682.085 L1291.24 682.085 L1290.68 682.085 L1290.12 682.085 L1289.56 682.085 L1289 682.085 L1288.45 682.085 L1287.89 682.085 L1287.33 682.085 L1286.77 682.085 L1286.21 682.085 L1285.65 682.085 L1285.09 682.085 L1284.53 682.085 L1283.97 682.085 L1283.41 682.085 L1282.85 682.085 L1282.29 682.085 L1281.73 682.085 L1281.18 682.085 L1280.62 682.085 L1280.06 682.085 L1279.5 682.085 L1278.94 682.085 L1278.38 682.085 L1277.82 682.085 L1277.26 682.085 L1276.7 682.085 L1276.14 682.085 L1275.58 682.085 L1275.02 682.085 L1274.46 682.085 L1273.91 682.085 L1273.35 682.085 L1272.79 682.085 L1272.23 682.085 L1271.67 682.085 L1271.11 682.085 L1270.55 682.085 L1269.99 682.085 L1269.43 682.085 L1268.87 682.085 L1268.31 682.085 L1267.75 682.085 L1267.19 682.085 L1266.63 682.085 L1266.08 682.085 L1265.52 682.085 L1264.96 682.085 L1264.4 682.085 L1263.84 682.085 L1263.28 682.085 L1262.72 682.085 L1262.16 682.085 L1261.6 682.085 L1261.04 682.085 L1260.48 682.085 L1259.92 682.085 L1259.36 682.085 L1258.81 682.085 L1258.25 682.085 L1257.69 682.085 L1257.13 682.085 L1256.57 682.085 L1256.01 682.085 L1255.45 682.085 L1254.89 682.085 L1254.33 682.085 L1253.77 682.085 L1253.21 682.085 L1252.65 682.085 L1252.09 682.085 L1251.54 682.085 L1250.98 682.085 L1250.42 682.085 L1249.86 682.085 L1249.3 682.085 L1248.74 682.085 L1248.18 682.085 L1247.62 682.085 L1247.06 682.085 L1246.5 682.085 L1245.94 682.085 L1245.38 682.085 L1244.82 682.085 L1244.26 682.085 L1243.71 682.085 L1243.15 682.085 L1242.59 682.085 L1242.03 682.085 L1241.47 682.085 L1240.91 682.085 L1240.35 682.085 L1239.79 682.085 L1239.23 682.085 L1238.67 682.085 L1238.11 682.085 L1237.55 682.085 L1236.99 682.085 L1236.44 682.085 L1235.88 682.085 L1235.32 682.085 L1234.76 682.085 L1234.2 682.085 L1233.64 682.085 L1233.08 682.085 L1232.52 682.085 L1231.96 682.085 L1231.4 682.085 L1230.84 682.085 L1230.28 682.085 L1229.72 682.085 L1229.17 682.085 L1228.61 682.085 L1228.05 682.085 L1227.49 682.085 L1226.93 682.085 L1226.37 682.085 L1225.81 682.085 L1225.25 682.085 L1224.69 682.085 L1224.13 682.085 L1223.57 682.085 L1223.01 682.085 L1222.45 682.085 L1221.89 682.085 L1221.34 682.085 L1220.78 682.085 L1220.22 682.085 L1219.66 682.085 L1219.1 682.085 L1218.54 682.085 L1217.98 682.085 L1217.42 682.085 L1216.86 682.085 L1216.3 682.085 L1215.74 682.085 L1215.18 682.085 L1214.62 682.085 L1214.07 682.085 L1213.51 682.085 L1212.95 682.085 L1212.39 682.085 L1211.83 682.085 L1211.27 682.085 L1210.71 682.085 L1210.15 682.085 L1209.59 682.085 L1209.03 682.085 L1208.47 682.085 L1207.91 682.085 L1207.35 682.085 L1206.8 682.085 L1206.24 682.085 L1205.68 682.085 L1205.12 682.085 L1204.56 682.085 L1204 682.085 L1203.44 682.085 L1202.88 682.085 L1202.32 682.085 L1201.76 682.085 L1201.2 682.085 L1200.64 682.085 L1200.08 682.085 L1199.52 682.085 L1198.97 682.085 L1198.41 682.085 L1197.85 682.085 L1197.29 682.085 L1196.73 682.085 L1196.17 682.085 L1195.61 682.085 L1195.05 682.085 L1194.49 682.085 L1193.93 682.085 L1193.37 682.085 L1192.81 682.085 L1192.25 682.085 L1191.7 682.085 L1191.14 682.085 L1190.58 682.085 L1190.02 682.085 L1189.46 682.085 L1188.9 682.085 L1188.34 682.085 L1187.78 682.085 L1187.22 682.085 L1186.66 682.085 L1186.1 682.085 L1185.54 682.085 L1184.98 682.085 L1184.43 682.085 L1183.87 682.085 L1183.31 682.085 L1182.75 682.085 L1182.19 682.085 L1181.63 682.085 L1181.07 682.085 L1180.51 682.085 L1179.95 682.085 L1179.39 682.085 L1178.83 682.085 L1178.27 682.085 L1177.71 682.085 L1177.15 682.085 L1176.6 682.085 L1176.04 682.085 L1175.48 682.085 L1174.92 682.085 L1174.36 682.085 L1173.8 682.085 L1173.24 682.085 L1172.68 682.085 L1172.12 682.085 L1171.56 682.085 L1171 682.085 L1170.44 682.085 L1169.88 682.085 L1169.33 682.085 L1168.77 682.085 L1168.21 682.085 L1167.65 682.085 L1167.09 682.085 L1166.53 682.085 L1165.97 682.085 L1165.41 682.085 L1164.85 682.085 L1164.29 682.085 L1163.73 682.085 L1163.17 682.085 L1162.61 682.085 L1162.05 682.085 L1161.5 682.085 L1160.94 682.085 L1160.38 682.085 L1159.82 682.085 L1159.26 682.085 L1158.7 682.085 L1158.14 682.085 L1157.58 682.085 L1157.02 682.085 L1156.46 682.085 L1155.9 682.085 L1155.34 682.085 L1154.78 682.085 L1154.23 682.085 L1153.67 682.085 L1153.11 682.085 L1152.55 682.085 L1151.99 682.085 L1151.43 682.085 L1150.87 682.085 L1150.31 682.085 L1149.75 682.085 L1149.19 682.085 L1148.63 682.085 L1148.07 682.085 L1147.51 682.085 L1146.96 682.085 L1146.4 682.085 L1145.84 682.085 L1145.28 682.085 L1144.72 682.085 L1144.16 682.085 L1143.6 682.085 L1143.04 682.085 L1142.48 682.085 L1141.92 682.085 L1141.36 682.085 L1140.8 682.085 L1140.24 682.085 L1139.68 682.085 L1139.13 682.085 L1138.57 682.085 L1138.01 682.085 L1137.45 682.085 L1136.89 682.085 L1136.33 682.085 L1135.77 682.085 L1135.21 682.085 L1134.65 682.085 L1134.09 682.085 L1133.53 682.085 L1132.97 682.085 L1132.41 682.085 L1131.86 682.085 L1131.3 682.085 L1130.74 682.085 L1130.18 682.085 L1129.62 682.085 L1129.06 682.085 L1128.5 682.085 L1127.94 682.085 L1127.38 682.085 L1126.82 682.085 L1126.26 682.085 L1125.7 682.085 L1125.14 682.085 L1124.59 682.085 L1124.03 682.085 L1123.47 682.085 L1122.91 682.085 L1122.35 682.085 L1121.79 682.085 L1121.23 682.085 L1120.67 682.085 L1120.11 682.085 L1119.55 682.085 L1118.99 682.085 L1118.43 682.085 L1117.87 682.085 L1117.31 682.085 L1116.76 682.085 L1116.2 682.085 L1115.64 682.085 L1115.08 682.085 L1114.52 682.085 L1113.96 682.085 L1113.4 682.085 L1112.84 682.085 L1112.28 682.085 L1111.72 682.085 L1111.16 682.085 L1110.6 682.085 L1110.04 682.085 L1109.49 682.085 L1108.93 682.085 L1108.37 682.085 L1107.81 682.085 L1107.25 682.085 L1106.69 682.085 L1106.13 682.085 L1105.57 682.085 L1105.01 682.085 L1104.45 682.085 L1103.89 682.085 L1103.33 682.085 L1102.77 682.085 L1102.22 682.085 L1101.66 682.085 L1101.1 682.085 L1100.54 682.085 L1099.98 682.085 L1099.42 682.085 L1098.86 682.085 L1098.3 682.085 L1097.74 682.085 L1097.18 682.085 L1096.62 682.085 L1096.06 682.085 L1095.5 682.085 L1094.94 682.085 L1094.39 682.085 L1093.83 682.085 L1093.27 682.085 L1092.71 682.085 L1092.15 682.085 L1091.59 682.085 L1091.03 682.085 L1090.47 682.085 L1089.91 682.085 L1089.35 682.085 L1088.79 682.085 L1088.23 682.085 L1087.67 682.085 L1087.12 682.085 L1086.56 682.085 L1086 682.085 L1085.44 682.085 L1084.88 682.085 L1084.32 682.085 L1083.76 682.085 L1083.2 682.085 L1082.64 682.085 L1082.08 682.085 L1081.52 682.085 L1080.96 682.085 L1080.4 682.085 L1079.85 682.085 L1079.29 682.085 L1078.73 682.085 L1078.17 682.085 L1077.61 682.085 L1077.05 682.085 L1076.49 682.085 L1075.93 682.085 L1075.37 682.085 L1074.81 682.085 L1074.25 682.085 L1073.69 682.085 L1073.13 682.085 L1072.57 682.085 L1072.02 682.085 L1071.46 682.085 L1070.9 682.085 L1070.34 682.085 L1069.78 682.085 L1069.22 682.085 L1068.66 682.085 L1068.1 682.085 L1067.54 682.085 L1066.98 682.085 L1066.42 682.085 L1065.86 682.085 L1065.3 682.085 L1064.75 682.085 L1064.19 682.085 L1063.63 682.085 L1063.07 682.085 L1062.51 682.085 L1061.95 682.085 L1061.39 682.085 L1060.83 682.085 L1060.27 682.085 L1059.71 682.085 L1059.15 682.085 L1058.59 682.085 L1058.03 682.085 L1057.48 682.085 L1056.92 682.085 L1056.36 682.085 L1055.8 682.085 L1055.24 682.085 L1054.68 682.085 L1054.12 682.085 L1053.56 682.085 L1053 682.085 L1052.44 682.085 L1051.88 682.085 L1051.32 682.085 L1050.76 682.085 L1050.2 682.085 L1049.65 682.085 L1049.09 682.085 L1048.53 682.085 L1047.97 682.085 L1047.41 682.085 L1046.85 682.085 L1046.29 682.085 L1045.73 682.085 L1045.17 682.085 L1044.61 682.085 L1044.05 682.085 L1043.49 682.085 L1042.93 682.085 L1042.38 682.085 L1041.82 682.085 L1041.26 682.085 L1040.7 682.085 L1040.14 682.085 L1039.58 682.085 L1039.02 682.085 L1038.46 682.085 L1037.9 682.085 L1037.34 682.085 L1036.78 682.085 L1036.22 682.085 L1035.66 682.085 L1035.1 682.085 L1034.55 682.085 L1033.99 682.085 L1033.43 682.085 L1032.87 682.085 L1032.31 682.085 L1031.75 682.085 L1031.19 682.085 L1030.63 682.085 L1030.07 682.085 L1029.51 682.085 L1028.95 682.085 L1028.39 682.085 L1027.83 682.085 L1027.28 682.085 L1026.72 682.085 L1026.16 682.085 L1025.6 682.085 L1025.04 682.085 L1024.48 682.085 L1023.92 682.085 L1023.36 682.085 L1022.8 682.085 L1022.24 682.085 L1021.68 682.085 L1021.12 682.085 L1020.56 682.085 L1020.01 682.085 L1019.45 682.085 L1018.89 682.085 L1018.33 682.085 L1017.77 682.085 L1017.21 682.085 L1016.65 682.085 L1016.09 682.085 L1015.53 682.085 L1014.97 682.085 L1014.41 682.085 L1013.85 682.085 L1013.29 682.085 L1012.73 682.085 L1012.18 682.085 L1011.62 682.085 L1011.06 682.085 L1010.5 682.085 L1009.94 682.085 L1009.38 682.085 L1008.82 682.085 L1008.26 682.085 L1007.7 682.085 L1007.14 682.085 L1006.58 682.085 L1006.02 682.085 L1005.46 682.085 L1004.91 682.085 L1004.35 682.085 L1003.79 682.085 L1003.23 682.085 L1002.67 682.085 L1002.11 682.085 L1001.55 682.085 L1000.99 682.085 L1000.43 682.085 L999.872 682.085 L999.313 682.085 L998.754 682.085 L998.194 682.085 L997.635 682.085 L997.076 682.085 L996.517 682.085 L995.957 682.085 L995.398 682.085 L994.839 682.085 L994.28 682.085 L993.72 682.085 L993.161 682.085 L992.602 682.085 L992.043 682.085 L991.483 682.085 L990.924 682.085 L990.365 682.085 L989.806 682.085 L989.246 682.085 L988.687 682.085 L988.128 682.085 L987.569 682.085 L987.009 682.085 L986.45 682.085 L985.891 682.085 L985.332 682.085 L984.772 682.085 L984.213 682.085 L983.654 682.085 L983.095 682.085 L982.535 682.085 L981.976 682.085 L981.417 682.085 L980.858 682.085 L980.298 682.085 L979.739 682.085 L979.18 682.085 L978.621 682.085 L978.061 682.085 L977.502 682.085 L976.943 682.085 L976.384 682.085 L975.824 682.085 L975.265 682.085 L974.706 682.085 L974.147 682.085 L973.587 682.085 L973.028 682.085 L972.469 682.085 L971.91 682.085 L971.35 682.085 L970.791 682.085 L970.232 682.085 L969.673 682.085 L969.113 682.085 L968.554 682.085 L967.995 682.085 L967.436 682.085 L966.876 682.085 L966.317 682.085 L965.758 682.085 L965.199 682.085 L964.639 682.085 L964.08 682.085 L963.521 682.085 L962.962 682.085 L962.402 682.085 L961.843 682.085 L961.284 682.085 L960.725 682.085 L960.165 682.085 L959.606 682.085 L959.047 682.085 L958.488 682.085 L957.928 682.085 L957.369 682.085 L956.81 682.085 L956.251 682.085 L955.691 682.085 L955.132 682.085 L954.573 682.085 L954.014 682.085 L953.454 682.085 L952.895 682.085 L952.336 682.085 L951.777 682.085 L951.217 682.085 L950.658 682.085 L950.099 682.085 L949.54 682.085 L948.98 682.085 L948.421 682.085 L947.862 682.085 L947.303 682.085 L946.743 682.085 L946.184 682.085 L945.625 682.085 L945.066 682.085 L944.506 682.085 L943.947 682.085 L943.388 682.085 L942.829 682.085 L942.269 682.085 L941.71 682.085 L941.151 682.085 L940.592 682.085 L940.032 682.085 L939.473 682.085 L938.914 682.085 L938.355 682.085 L937.795 682.085 L937.236 682.085 L936.677 682.085 L936.118 682.085 L935.558 682.085 L934.999 682.085 L934.44 682.085 L933.881 682.085 L933.321 682.085 L932.762 682.085 L932.203 682.085 L931.644 682.085 L931.084 682.085 L930.525 682.085 L929.966 682.085 L929.406 682.085 L928.847 682.085 L928.288 682.085 L927.729 682.085 L927.169 682.085 L926.61 682.085 L926.051 682.085 L925.492 682.085 L924.932 682.085 L924.373 682.085 L923.814 682.085 L923.255 682.085 L922.695 682.085 L922.136 682.085 L921.577 682.085 L921.018 682.085 L920.458 682.085 L919.899 682.085 L919.34 682.085 L918.781 682.085 L918.221 682.085 L917.662 682.085 L917.103 682.085 L916.544 682.085 L915.984 682.085 L915.425 682.085 L914.866 682.085 L914.307 682.085 L913.747 682.085 L913.188 682.085 L912.629 682.085 L912.07 682.085 L911.51 682.085 L910.951 682.085 L910.392 682.085 L909.833 682.085 L909.273 682.085 L908.714 682.085 L908.155 682.085 L907.596 682.085 L907.036 682.085 L906.477 682.085 L905.918 682.085 L905.359 682.085 L904.799 682.085 L904.24 682.085 L903.681 682.085 L903.122 682.085 L902.562 682.085 L902.003 682.085 L901.444 682.085 L900.885 682.085 L900.325 682.085 L899.766 682.085 L899.207 682.085 L898.648 682.085 L898.088 682.085 L897.529 682.085 L896.97 682.085 L896.411 682.085 L895.851 682.085 L895.292 682.085 L894.733 682.085 L894.174 682.085 L893.614 682.085 L893.055 682.085 L892.496 682.085 L891.937 682.085 L891.377 682.085 L890.818 682.085 L890.259 682.085 L889.7 682.085 L889.14 682.085 L888.581 682.085 L888.022 682.085 L887.463 682.085 L886.903 682.085 L886.344 682.085 L885.785 682.085 L885.226 682.085 L884.666 682.085 L884.107 682.085 L883.548 682.085 L882.989 682.085 L882.429 682.085 L881.87 682.085 L881.311 682.085 L880.752 682.085 L880.192 682.085 L879.633 682.085 L879.074 682.085 L878.515 682.085 L877.955 682.085 L877.396 682.085 L876.837 682.085 L876.278 682.085 L875.718 682.085 L875.159 682.085 L874.6 682.085 L874.041 682.085 L873.481 682.085 L872.922 682.085 L872.363 682.085 L871.804 682.085 L871.244 682.085 L870.685 682.085 L870.126 682.085 L869.567 682.085 L869.007 682.085 L868.448 682.085 L867.889 682.085 L867.33 682.085 L866.77 682.085 L866.211 682.085 L865.652 682.085 L865.093 682.085 L864.533 682.085 L863.974 682.085 L863.415 682.085 L862.856 682.085 L862.296 682.085 L861.737 682.085 L861.178 682.085 L860.619 682.085 L860.059 682.085 L859.5 682.085 L858.941 682.085 L858.382 682.085 L857.822 682.085 L857.263 682.085 L856.704 682.085 L856.145 682.085 L855.585 682.085 L855.026 682.085 L854.467 682.085 L853.908 682.085 L853.348 682.085 L852.789 682.085 L852.23 682.085 L851.671 682.085 L851.111 682.085 L850.552 682.085 L849.993 682.085 L849.434 682.085 L848.874 682.085 L848.315 682.085 L847.756 682.085 L847.197 682.085 L846.637 682.085 L846.078 682.085 L845.519 682.085 L844.96 682.085 L844.4 682.085 L843.841 682.085 L843.282 682.085 L842.723 682.085 L842.163 682.085 L841.604 682.085 L841.045 682.085 L840.486 682.085 L839.926 682.085 L839.367 682.085 L838.808 682.085 L838.249 682.085 L837.689 682.085 L837.13 682.085 L836.571 682.085 L836.012 682.085 L835.452 682.085 L834.893 682.085 L834.334 682.085 L833.775 682.085 L833.215 682.085 L832.656 682.085 L832.097 682.085 L831.538 682.085 L830.978 682.085 L830.419 682.085 L829.86 682.085 L829.301 682.085 L828.741 682.085 L828.182 682.085 L827.623 682.085 L827.064 682.085 L826.504 682.085 L825.945 682.085 L825.386 682.085 L824.827 682.085 L824.267 682.085 L823.708 682.085 L823.149 682.085 L822.59 682.085 L822.03 682.085 L821.471 682.085 L820.912 682.085 L820.353 682.085 L819.793 682.085 L819.234 682.085 L818.675 682.085 L818.116 682.085 L817.556 682.085 L816.997 682.085 L816.438 682.085 L815.879 682.085 L815.319 682.085 L814.76 682.085 L814.201 682.085 L813.642 682.085 L813.082 682.085 L812.523 682.085 L811.964 682.085 L811.405 682.085 L810.845 682.085 L810.286 682.085 L809.727 682.085 L809.168 682.085 L808.608 682.085 L808.049 682.085 L807.49 682.085 L806.931 682.085 L806.371 682.085 L805.812 682.085 L805.253 682.085 L804.693 682.085 L804.134 682.085 L803.575 682.085 L803.016 682.085 L802.456 682.085 L801.897 682.085 L801.338 682.085 L800.779 682.085 L800.219 682.085 L799.66 682.085 L799.101 682.085 L798.542 682.085 L797.982 682.085 L797.423 682.085 L796.864 682.085 L796.305 682.085 L795.745 682.085 L795.186 682.085 L794.627 682.085 L794.068 682.085 L793.508 682.085 L792.949 682.085 L792.39 682.085 L791.831 682.085 L791.271 682.085 L790.712 682.085 L790.153 682.085 L789.594 682.085 L789.034 682.085 L788.475 682.085 L787.916 682.085 L787.357 682.085 L786.797 682.085 L786.238 682.085 L785.679 682.085 L785.12 682.085 L784.56 682.085 L784.001 682.085 L783.442 682.085 L782.883 682.085 L782.323 682.085 L781.764 682.085 L781.205 682.085 L780.646 682.085 L780.086 682.085 L779.527 682.085 L778.968 682.085 L778.409 682.085 L777.849 682.085 L777.29 682.085 L776.731 682.085 L776.172 682.085 L775.612 682.085 L775.053 682.085 L774.494 682.085 L773.935 682.085 L773.375 682.085 L772.816 682.085 L772.257 682.085 L771.698 682.085 L771.138 682.085 L770.579 682.085 L770.02 682.085 L769.461 682.085 L768.901 682.085 L768.342 682.085 L767.783 682.085 L767.224 682.085 L766.664 682.085 L766.105 682.085 L765.546 682.085 L764.987 682.085 L764.427 682.085 L763.868 682.085 L763.309 682.085 L762.75 682.085 L762.19 682.085 L761.631 682.085 L761.072 682.085 L760.513 682.085 L759.953 682.085 L759.394 682.085 L758.835 682.085 L758.276 682.085 L757.716 682.085 L757.157 682.085 L756.598 682.085 L756.039 682.085 L755.479 682.085 L754.92 682.085 L754.361 682.085 L753.802 682.085 L753.242 682.085 L752.683 682.085 L752.124 682.085 L751.565 682.085 L751.005 682.085 L750.446 682.085 L749.887 682.085 L749.328 682.085 L748.768 682.085 L748.209 682.085 L747.65 682.085 L747.091 682.085 L746.531 682.085 L745.972 682.085 L745.413 682.085 L744.854 682.085 L744.294 682.085 L743.735 682.085 L743.176 682.085 L742.617 682.085 L742.057 682.085 L741.498 682.085 L740.939 682.085 L740.38 682.085 L739.82 682.085 L739.261 682.085 L738.702 682.085 L738.143 682.085 L737.583 682.085 L737.024 682.085 L736.465 682.085 L735.906 682.085 L735.346 682.085 L734.787 682.085 L734.228 682.085 L733.669 682.085 L733.109 682.085 L732.55 682.085 L731.991 682.085 L731.432 682.085 L730.872 682.085 L730.313 682.085 L729.754 682.085 L729.195 682.085 L728.635 682.085 L728.076 682.085 L727.517 682.085 L726.958 682.085 L726.398 682.085 L725.839 682.085 L725.28 682.085 L724.721 682.085 L724.161 682.085 L723.602 682.085 L723.043 682.085 L722.484 682.085 L721.924 682.085 L721.365 682.085 L720.806 682.085 L720.247 682.085  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.684 720.806,686.684 721.365,686.684 721.924,686.684 722.484,686.684 723.043,686.684 723.602,686.684 724.161,686.684 724.721,686.684 725.28,686.684 725.839,686.684 726.398,686.684 726.958,686.684 727.517,686.684 728.076,686.684 728.635,686.684 729.195,686.684 729.754,686.684 730.313,686.684 730.872,686.684 731.432,686.684 731.991,686.684 732.55,686.684 733.109,686.684 733.669,686.684 734.228,686.684 734.787,686.684 735.346,686.684 735.906,686.684 736.465,686.684 737.024,686.684 737.583,686.684 738.143,686.684 738.702,686.684 739.261,686.684 739.82,686.684 740.38,686.684 740.939,686.684 741.498,686.684 742.057,686.684 742.617,686.684 743.176,686.684 743.735,686.684 744.294,686.684 744.854,686.684 745.413,686.684 745.972,686.684 746.531,686.684 747.091,686.684 747.65,686.684 748.209,686.684 748.768,686.684 749.328,686.684 749.887,686.684 750.446,686.684 751.005,686.684 751.565,686.684 752.124,686.684 752.683,686.684 753.242,686.684 753.802,686.684 754.361,686.684 754.92,686.684 755.479,686.684 756.039,686.684 756.598,686.684 757.157,686.684 757.716,686.684 758.276,686.684 758.835,686.684 759.394,686.684 759.953,686.684 760.513,686.684 761.072,686.684 761.631,686.684 762.19,686.684 762.75,686.684 763.309,686.684 763.868,686.684 764.427,686.684 764.987,686.684 765.546,686.684 766.105,686.684 766.664,686.684 767.224,686.684 767.783,686.684 768.342,686.684 768.901,686.684 769.461,686.684 770.02,686.684 770.579,686.684 771.138,686.684 771.698,686.684 772.257,686.684 772.816,686.684 773.375,686.684 773.935,686.684 774.494,686.684 775.053,686.684 775.612,686.684 776.172,686.684 776.731,686.684 777.29,686.684 777.849,686.684 778.409,686.684 778.968,686.684 779.527,686.684 780.086,686.684 780.646,686.684 781.205,686.684 781.764,686.684 782.323,686.684 782.883,686.684 783.442,686.684 784.001,686.684 784.56,686.684 785.12,686.684 785.679,686.684 786.238,686.684 786.797,686.684 787.357,686.684 787.916,686.684 788.475,686.684 789.034,686.684 789.594,686.684 790.153,686.684 790.712,686.684 791.271,686.684 791.831,686.684 792.39,686.684 792.949,686.684 793.508,686.684 794.068,686.684 794.627,686.684 795.186,686.684 795.745,686.684 796.305,686.684 796.864,686.684 797.423,686.684 797.982,686.684 798.542,686.684 799.101,686.684 799.66,686.684 800.219,686.684 800.779,686.684 801.338,686.684 801.897,686.684 802.456,686.684 803.016,686.684 803.575,686.684 804.134,686.684 804.693,686.684 805.253,686.684 805.812,686.684 806.371,686.684 806.931,686.684 807.49,686.684 808.049,686.684 808.608,686.684 809.168,686.684 809.727,686.684 810.286,686.684 810.845,686.684 811.405,686.684 811.964,686.684 812.523,686.684 813.082,686.684 813.642,686.684 814.201,686.684 814.76,686.684 815.319,686.684 815.879,686.684 816.438,686.684 816.997,686.684 817.556,686.684 818.116,686.684 818.675,686.684 819.234,686.684 819.793,686.684 820.353,686.684 820.912,686.684 821.471,686.684 822.03,686.684 822.59,686.684 823.149,686.684 823.708,686.684 824.267,686.684 824.827,686.684 825.386,686.684 825.945,686.684 826.504,686.684 827.064,686.684 827.623,686.684 828.182,686.684 828.741,686.684 829.301,686.684 829.86,686.684 830.419,686.684 830.978,686.684 831.538,686.684 832.097,686.684 832.656,686.684 833.215,686.684 833.775,686.684 834.334,686.684 834.893,686.684 835.452,686.684 836.012,686.684 836.571,686.684 837.13,686.684 837.689,686.684 838.249,686.684 838.808,686.684 839.367,686.684 839.926,686.684 840.486,686.684 841.045,686.684 841.604,686.684 842.163,686.684 842.723,686.684 843.282,686.684 843.841,686.684 844.4,686.684 844.96,686.684 845.519,686.684 846.078,686.684 846.637,686.684 847.197,686.684 847.756,686.684 848.315,686.684 848.874,686.684 849.434,686.684 849.993,686.684 850.552,686.684 851.111,686.684 851.671,686.684 852.23,686.684 852.789,686.684 853.348,686.684 853.908,686.684 854.467,686.684 855.026,686.684 855.585,686.684 856.145,686.684 856.704,686.684 857.263,686.684 857.822,686.684 858.382,686.684 858.941,686.684 859.5,686.684 860.059,686.684 860.619,686.684 861.178,686.684 861.737,686.684 862.296,686.684 862.856,686.684 863.415,686.684 863.974,686.684 864.533,686.684 865.093,686.684 865.652,686.684 866.211,686.684 866.77,686.684 867.33,686.684 867.889,686.684 868.448,686.684 869.007,686.684 869.567,686.684 870.126,686.684 870.685,686.684 871.244,686.684 871.804,686.684 872.363,686.684 872.922,686.684 873.481,686.684 874.041,686.684 874.6,686.684 875.159,686.684 875.718,686.684 876.278,686.684 876.837,686.684 877.396,686.684 877.955,686.684 878.515,686.684 879.074,686.684 879.633,686.684 880.192,686.684 880.752,686.684 881.311,686.684 881.87,686.684 882.429,686.684 882.989,686.684 883.548,686.684 884.107,686.684 884.666,686.684 885.226,686.684 885.785,686.684 886.344,686.684 886.903,686.684 887.463,686.684 888.022,686.684 888.581,686.684 889.14,686.684 889.7,686.684 890.259,686.684 890.818,686.684 891.377,686.684 891.937,686.684 892.496,686.684 893.055,686.684 893.614,686.684 894.174,686.684 894.733,686.684 895.292,686.684 895.851,686.684 896.411,686.684 896.97,686.684 897.529,686.684 898.088,686.684 898.648,686.684 899.207,686.684 899.766,686.684 900.325,686.684 900.885,686.684 901.444,686.684 902.003,686.684 902.562,686.684 903.122,686.684 903.681,686.684 904.24,686.684 904.799,686.684 905.359,686.684 905.918,686.684 906.477,686.684 907.036,686.684 907.596,686.684 908.155,686.684 908.714,686.684 909.273,686.684 909.833,686.684 910.392,686.684 910.951,686.684 911.51,686.684 912.07,686.684 912.629,686.684 913.188,686.684 913.747,686.684 914.307,686.684 914.866,686.684 915.425,686.684 915.984,686.684 916.544,686.684 917.103,686.684 917.662,686.684 918.221,686.684 918.781,686.684 919.34,686.684 919.899,686.684 920.458,686.684 921.018,686.684 921.577,686.684 922.136,686.684 922.695,686.684 923.255,686.684 923.814,686.684 924.373,686.684 924.932,686.684 925.492,686.684 926.051,686.684 926.61,686.684 927.169,686.684 927.729,686.684 928.288,686.684 928.847,686.684 929.406,686.684 929.966,686.684 930.525,686.684 931.084,686.684 931.644,686.684 932.203,686.684 932.762,686.684 933.321,686.684 933.881,686.684 934.44,686.684 934.999,686.684 935.558,686.684 936.118,686.684 936.677,686.684 937.236,686.684 937.795,686.684 938.355,686.684 938.914,686.684 939.473,686.684 940.032,686.684 940.592,686.684 941.151,686.684 941.71,686.684 942.269,686.684 942.829,686.684 943.388,686.684 943.947,686.684 944.506,686.684 945.066,686.684 945.625,686.684 946.184,686.684 946.743,686.684 947.303,686.684 947.862,686.684 948.421,686.684 948.98,686.684 949.54,686.684 950.099,686.684 950.658,686.684 951.217,686.684 951.777,686.684 952.336,686.684 952.895,686.684 953.454,686.684 954.014,686.684 954.573,686.684 955.132,686.684 955.691,686.684 956.251,686.684 956.81,686.684 957.369,686.684 957.928,686.684 958.488,686.684 959.047,686.684 959.606,686.684 960.165,686.684 960.725,686.684 961.284,686.684 961.843,686.684 962.402,686.684 962.962,686.684 963.521,686.684 964.08,686.684 964.639,686.684 965.199,686.684 965.758,686.684 966.317,686.684 966.876,686.684 967.436,686.684 967.995,686.684 968.554,686.684 969.113,686.684 969.673,686.684 970.232,686.684 970.791,686.684 971.35,686.684 971.91,686.684 972.469,686.684 973.028,686.684 973.587,686.684 974.147,686.684 974.706,686.684 975.265,686.684 975.824,686.684 976.384,686.684 976.943,686.684 977.502,686.684 978.061,686.684 978.621,686.684 979.18,686.684 979.739,686.684 980.298,686.684 980.858,686.684 981.417,686.684 981.976,686.684 982.535,686.684 983.095,686.684 983.654,686.684 984.213,686.684 984.772,686.684 985.332,686.684 985.891,686.684 986.45,686.684 987.009,686.684 987.569,686.684 988.128,686.684 988.687,686.684 989.246,686.684 989.806,686.684 990.365,686.684 990.924,686.684 991.483,686.684 992.043,686.684 992.602,686.684 993.161,686.684 993.72,686.684 994.28,686.684 994.839,686.684 995.398,686.684 995.957,686.684 996.517,686.684 997.076,686.684 997.635,686.684 998.194,686.684 998.754,686.684 999.313,686.684 999.872,686.684 1000.43,686.684 1000.99,686.684 1001.55,686.684 1002.11,686.684 1002.67,686.684 1003.23,686.684 1003.79,686.684 1004.35,686.684 1004.91,686.684 1005.46,686.684 1006.02,686.684 1006.58,686.684 1007.14,686.684 1007.7,686.684 1008.26,686.684 1008.82,686.684 1009.38,686.684 1009.94,686.684 1010.5,686.684 1011.06,686.684 1011.62,686.684 1012.18,686.684 1012.73,686.684 1013.29,686.684 1013.85,686.684 1014.41,686.684 1014.97,686.684 1015.53,686.684 1016.09,686.684 1016.65,686.684 1017.21,686.684 1017.77,686.684 1018.33,686.684 1018.89,686.684 1019.45,686.684 1020.01,686.684 1020.56,686.684 1021.12,686.684 1021.68,686.684 1022.24,686.684 1022.8,686.684 1023.36,686.684 1023.92,686.684 1024.48,686.684 1025.04,686.684 1025.6,686.684 1026.16,686.684 1026.72,686.684 1027.28,686.684 1027.83,686.684 1028.39,686.684 1028.95,686.684 1029.51,686.684 1030.07,686.684 1030.63,686.684 1031.19,686.684 1031.75,686.684 1032.31,686.684 1032.87,686.684 1033.43,686.684 1033.99,686.684 1034.55,686.684 1035.1,686.684 1035.66,686.684 1036.22,686.684 1036.78,686.684 1037.34,686.684 1037.9,686.684 1038.46,686.684 1039.02,686.684 1039.58,686.684 1040.14,686.684 1040.7,686.684 1041.26,686.684 1041.82,686.684 1042.38,686.684 1042.93,686.684 1043.49,686.684 1044.05,686.684 1044.61,686.684 1045.17,686.684 1045.73,686.684 1046.29,686.684 1046.85,686.684 1047.41,686.684 1047.97,686.684 1048.53,686.684 1049.09,686.684 1049.65,686.684 1050.2,686.684 1050.76,686.684 1051.32,686.684 1051.88,686.684 1052.44,686.684 1053,686.684 1053.56,686.684 1054.12,686.684 1054.68,686.684 1055.24,686.684 1055.8,686.684 1056.36,686.684 1056.92,686.684 1057.48,686.684 1058.03,686.684 1058.59,686.684 1059.15,686.684 1059.71,686.684 1060.27,686.684 1060.83,686.684 1061.39,686.684 1061.95,686.684 1062.51,686.684 1063.07,686.684 1063.63,686.684 1064.19,686.684 1064.75,686.684 1065.3,686.684 1065.86,686.684 1066.42,686.684 1066.98,686.684 1067.54,686.684 1068.1,686.684 1068.66,686.684 1069.22,686.684 1069.78,686.684 1070.34,686.684 1070.9,686.684 1071.46,686.684 1072.02,686.684 1072.57,686.684 1073.13,686.684 1073.69,686.684 1074.25,686.684 1074.81,686.684 1075.37,686.684 1075.93,686.684 1076.49,686.684 1077.05,686.684 1077.61,686.684 1078.17,686.684 1078.73,686.684 1079.29,686.684 1079.85,686.684 1080.4,686.684 1080.96,686.684 1081.52,686.684 1082.08,686.684 1082.64,686.684 1083.2,686.684 1083.76,686.684 1084.32,686.684 1084.88,686.684 1085.44,686.684 1086,686.684 1086.56,686.684 1087.12,686.684 1087.67,686.684 1088.23,686.684 1088.79,686.684 1089.35,686.684 1089.91,686.684 1090.47,686.684 1091.03,686.684 1091.59,686.684 1092.15,686.684 1092.71,686.684 1093.27,686.684 1093.83,686.684 1094.39,686.684 1094.94,686.684 1095.5,686.684 1096.06,686.684 1096.62,686.684 1097.18,686.684 1097.74,686.684 1098.3,686.684 1098.86,686.684 1099.42,686.684 1099.98,686.684 1100.54,686.684 1101.1,686.684 1101.66,686.684 1102.22,686.684 1102.77,686.684 1103.33,686.684 1103.89,686.684 1104.45,686.684 1105.01,686.684 1105.57,686.684 1106.13,686.684 1106.69,686.684 1107.25,686.684 1107.81,686.684 1108.37,686.684 1108.93,686.684 1109.49,686.684 1110.04,686.684 1110.6,686.684 1111.16,686.684 1111.72,686.684 1112.28,686.684 1112.84,686.684 1113.4,686.684 1113.96,686.684 1114.52,686.684 1115.08,686.684 1115.64,686.684 1116.2,686.684 1116.76,686.684 1117.31,686.684 1117.87,686.684 1118.43,686.684 1118.99,686.684 1119.55,686.684 1120.11,686.684 1120.67,686.684 1121.23,686.684 1121.79,686.684 1122.35,686.684 1122.91,686.684 1123.47,686.684 1124.03,686.684 1124.59,686.684 1125.14,686.684 1125.7,686.684 1126.26,686.684 1126.82,686.684 1127.38,686.684 1127.94,686.684 1128.5,686.684 1129.06,686.684 1129.62,686.684 1130.18,686.684 1130.74,686.684 1131.3,686.684 1131.86,686.684 1132.41,686.684 1132.97,686.684 1133.53,686.684 1134.09,686.684 1134.65,686.684 1135.21,686.684 1135.77,686.684 1136.33,686.684 1136.89,686.684 1137.45,686.684 1138.01,686.684 1138.57,686.684 1139.13,686.684 1139.68,686.684 1140.24,686.684 1140.8,686.684 1141.36,686.684 1141.92,686.684 1142.48,686.684 1143.04,686.684 1143.6,686.684 1144.16,686.684 1144.72,686.684 1145.28,686.684 1145.84,686.684 1146.4,686.684 1146.96,686.684 1147.51,686.684 1148.07,686.684 1148.63,686.684 1149.19,686.684 1149.75,686.684 1150.31,686.684 1150.87,686.684 1151.43,686.684 1151.99,686.684 1152.55,686.684 1153.11,686.684 1153.67,686.684 1154.23,686.684 1154.78,686.684 1155.34,686.684 1155.9,686.684 1156.46,686.684 1157.02,686.684 1157.58,686.684 1158.14,686.684 1158.7,686.684 1159.26,686.684 1159.82,686.684 1160.38,686.684 1160.94,686.684 1161.5,686.684 1162.05,686.684 1162.61,686.684 1163.17,686.684 1163.73,686.684 1164.29,686.684 1164.85,686.684 1165.41,686.684 1165.97,686.684 1166.53,686.684 1167.09,686.684 1167.65,686.684 1168.21,686.684 1168.77,686.684 1169.33,686.684 1169.88,686.684 1170.44,686.684 1171,686.684 1171.56,686.684 1172.12,686.684 1172.68,686.684 1173.24,686.684 1173.8,686.684 1174.36,686.684 1174.92,686.684 1175.48,686.684 1176.04,686.684 1176.6,686.684 1177.15,686.684 1177.71,686.684 1178.27,686.684 1178.83,686.684 1179.39,686.684 1179.95,686.684 1180.51,686.684 1181.07,686.684 1181.63,686.684 1182.19,686.684 1182.75,686.684 1183.31,686.684 1183.87,686.684 1184.43,686.684 1184.98,686.684 1185.54,686.684 1186.1,686.684 1186.66,686.684 1187.22,686.684 1187.78,686.684 1188.34,686.684 1188.9,686.684 1189.46,686.684 1190.02,686.684 1190.58,686.684 1191.14,686.684 1191.7,686.684 1192.25,686.684 1192.81,686.684 1193.37,686.684 1193.93,686.684 1194.49,686.684 1195.05,686.684 1195.61,686.684 1196.17,686.684 1196.73,686.684 1197.29,686.684 1197.85,686.684 1198.41,686.684 1198.97,686.684 1199.52,686.684 1200.08,686.684 1200.64,686.684 1201.2,686.684 1201.76,686.684 1202.32,686.684 1202.88,686.684 1203.44,686.684 1204,686.684 1204.56,686.684 1205.12,686.684 1205.68,686.684 1206.24,686.684 1206.8,686.684 1207.35,686.684 1207.91,686.684 1208.47,686.684 1209.03,686.684 1209.59,686.684 1210.15,686.684 1210.71,686.684 1211.27,686.684 1211.83,686.684 1212.39,686.684 1212.95,686.684 1213.51,686.684 1214.07,686.684 1214.62,686.684 1215.18,686.684 1215.74,686.684 1216.3,686.684 1216.86,686.684 1217.42,686.684 1217.98,686.684 1218.54,686.684 1219.1,686.684 1219.66,686.684 1220.22,686.684 1220.78,686.684 1221.34,686.684 1221.89,686.684 1222.45,686.684 1223.01,686.684 1223.57,686.684 1224.13,686.684 1224.69,686.684 1225.25,686.684 1225.81,686.684 1226.37,686.684 1226.93,686.684 1227.49,686.684 1228.05,686.684 1228.61,686.684 1229.17,686.684 1229.72,686.684 1230.28,686.684 1230.84,686.684 1231.4,686.684 1231.96,686.684 1232.52,686.684 1233.08,686.684 1233.64,686.684 1234.2,686.684 1234.76,686.684 1235.32,686.684 1235.88,686.684 1236.44,686.684 1236.99,686.684 1237.55,686.684 1238.11,686.684 1238.67,686.684 1239.23,686.684 1239.79,686.684 1240.35,686.684 1240.91,686.684 1241.47,686.684 1242.03,686.684 1242.59,686.684 1243.15,686.684 1243.71,686.684 1244.26,686.684 1244.82,686.684 1245.38,686.684 1245.94,686.684 1246.5,686.684 1247.06,686.684 1247.62,686.684 1248.18,686.684 1248.74,686.684 1249.3,686.684 1249.86,686.684 1250.42,686.684 1250.98,686.684 1251.54,686.684 1252.09,686.684 1252.65,686.684 1253.21,686.684 1253.77,686.684 1254.33,686.684 1254.89,686.684 1255.45,686.684 1256.01,686.684 1256.57,686.684 1257.13,686.684 1257.69,686.684 1258.25,686.684 1258.81,686.684 1259.36,686.684 1259.92,686.684 1260.48,686.684 1261.04,686.684 1261.6,686.684 1262.16,686.684 1262.72,686.684 1263.28,686.684 1263.84,686.684 1264.4,686.684 1264.96,686.684 1265.52,686.684 1266.08,686.684 1266.63,686.684 1267.19,686.684 1267.75,686.684 1268.31,686.684 1268.87,686.684 1269.43,686.684 1269.99,686.684 1270.55,686.684 1271.11,686.684 1271.67,686.684 1272.23,686.684 1272.79,686.684 1273.35,686.684 1273.91,686.684 1274.46,686.684 1275.02,686.684 1275.58,686.684 1276.14,686.684 1276.7,686.684 1277.26,686.684 1277.82,686.684 1278.38,686.684 1278.94,686.684 1279.5,686.684 1280.06,686.684 1280.62,686.684 1281.18,686.684 1281.73,686.684 1282.29,686.684 1282.85,686.684 1283.41,686.684 1283.97,686.684 1284.53,686.684 1285.09,686.684 1285.65,686.684 1286.21,686.684 1286.77,686.684 1287.33,686.684 1287.89,686.684 1288.45,686.684 1289,686.684 1289.56,686.684 1290.12,686.684 1290.68,686.684 1291.24,686.684 1291.8,686.684 1292.36,686.684 1292.92,686.684 1293.48,686.684 1294.04,686.684 1294.6,686.684 1295.16,686.684 1295.72,686.684 1296.28,686.684 1296.83,686.684 1297.39,686.684 1297.95,686.684 1298.51,686.684 1299.07,686.684 1299.63,686.684 1300.19,686.684 1300.75,686.684 1301.31,686.684 1301.87,686.684 1302.43,686.684 1302.99,686.684 1303.55,686.684 1304.1,686.684 1304.66,686.684 1305.22,686.684 1305.78,686.684 1306.34,686.684 1306.9,686.684 1307.46,686.684 1308.02,686.684 1308.58,686.684 1309.14,686.684 1309.7,686.684 1310.26,686.684 1310.82,686.684 1311.38,686.684 1311.93,686.684 1312.49,686.684 1313.05,686.684 1313.61,686.684 1314.17,686.684 1314.73,686.684 1315.29,686.684 1315.85,686.684 1316.41,686.684 1316.97,686.684 1317.53,686.684 1318.09,686.684 1318.65,686.684 1319.2,686.684 1319.76,686.684 1320.32,686.684 1320.88,686.684 1321.44,686.684 1322,686.684 1322.56,686.684 1323.12,686.684 1323.68,686.684 1324.24,686.684 1324.8,686.684 1325.36,686.684 1325.92,686.684 1326.47,686.684 1327.03,686.684 1327.59,686.684 1328.15,686.684 1328.71,686.684 1329.27,686.684 1329.83,686.684 1330.39,686.684 1330.95,686.684 1331.51,686.684 1332.07,686.684 1332.63,686.684 1333.19,686.684 1333.75,686.684 1334.3,686.684 1334.86,686.684 1335.42,686.684 1335.98,686.684 1336.54,686.684 1337.1,686.684 1337.66,686.684 1338.22,686.684 1338.78,686.684 1339.34,686.684 1339.9,686.684 1340.46,686.684 1341.02,686.684 1341.57,686.684 1342.13,686.684 1342.69,686.684 1343.25,686.684 1343.81,686.684 1344.37,686.684 1344.93,686.684 1345.49,686.684 1346.05,686.684 1346.61,686.684 1347.17,686.684 1347.73,686.684 1348.29,686.684 1348.84,686.684 1349.4,686.684 1349.96,686.684 1350.52,686.684 1351.08,686.684 1351.64,686.684 1352.2,686.684 1352.76,686.684 1353.32,686.684 1353.88,686.684 1354.44,686.684 1355,686.684 1355.56,686.684 1356.12,686.684 1356.67,686.684 1357.23,686.684 1357.79,686.684 1358.35,686.684 1358.91,686.684 1359.47,686.684 1360.03,686.684 1360.59,686.684 1361.15,686.684 1361.71,686.684 1362.27,686.684 1362.83,686.684 1363.39,686.684 1363.94,686.684 1364.5,686.684 1365.06,686.684 1365.62,686.684 1366.18,686.684 1366.74,686.684 1367.3,686.684 1367.86,686.684 1368.42,686.684 1368.98,686.684 1369.54,686.684 1370.1,686.684 1370.66,686.684 1371.21,686.684 1371.77,686.684 1372.33,686.684 1372.89,686.684 1373.45,686.684 1374.01,686.684 1374.57,686.684 1375.13,686.684 1375.69,686.684 1376.25,686.684 1376.81,686.684 1377.37,686.684 1377.93,686.684 1378.49,686.684 1379.04,686.684 1379.6,686.684 1380.16,686.684 1380.72,686.684 1381.28,686.684 1381.84,686.684 1382.4,686.684 1382.96,686.684 1383.52,686.684 1384.08,686.684 1384.64,686.684 1385.2,686.684 1385.76,686.684 1386.31,686.684 1386.87,686.684 1387.43,686.684 1387.99,686.684 1388.55,686.684 1389.11,686.684 1389.67,686.684 1390.23,686.684 1390.79,686.684 1391.35,686.684 1391.91,686.684 1392.47,686.684 1393.03,686.684 1393.58,686.684 1394.14,686.684 1394.7,686.684 1395.26,686.684 1395.82,686.684 1396.38,686.684 1396.94,686.684 1397.5,686.684 1398.06,686.684 1398.62,686.684 1399.18,686.684 1399.74,686.684 1400.3,686.684 1400.86,686.684 1401.41,686.684 1401.97,686.684 1402.53,686.684 1403.09,686.684 1403.65,686.684 1404.21,686.684 1404.77,686.684 1405.33,686.684 1405.89,686.684 1406.45,686.684 1407.01,686.684 1407.57,686.684 1408.13,686.684 1408.68,686.684 1409.24,686.684 1409.8,686.684 1410.36,686.684 1410.92,686.684 1411.48,686.684 1412.04,686.684 1412.6,686.684 1413.16,686.684 1413.72,686.684 1414.28,686.684 1414.84,686.684 1415.4,686.684 1415.95,686.684 1416.51,686.684 1417.07,686.684 1417.63,686.684 1418.19,686.684 1418.75,686.684 1419.31,686.684 1419.87,686.684 1420.43,686.684 1420.99,686.684 1421.55,686.684 1422.11,686.684 1422.67,686.684 1423.23,686.684 1423.78,686.684 1424.34,686.684 1424.9,686.684 1425.46,686.684 1426.02,686.684 1426.58,686.684 1427.14,686.684 1427.7,686.684 1428.26,686.684 1428.82,686.684 1429.38,686.684 1429.94,686.684 1430.5,686.684 1431.05,686.684 1431.61,686.684 1432.17,686.684 1432.73,686.684 1433.29,686.684 1433.85,686.684 1434.41,686.684 1434.97,686.684 1435.53,686.684 1436.09,686.684 1436.65,686.684 1437.21,686.684 1437.77,686.684 1438.33,686.684 1438.88,686.684 1439.44,686.684 1440,686.684 1440.56,686.684 1441.12,686.684 1441.68,686.684 1442.24,686.684 1442.8,686.684 1443.36,686.684 1443.92,686.684 1444.48,686.684 1445.04,686.684 1445.6,686.684 1446.15,686.684 1446.71,686.684 1447.27,686.684 1447.83,686.684 1448.39,686.684 1448.95,686.684 1449.51,686.684 1450.07,686.684 1450.63,686.684 1451.19,686.684 1451.75,686.684 1452.31,686.684 1452.87,686.684 1453.42,686.684 1453.98,686.684 1454.54,686.684 1455.1,686.684 1455.66,686.684 1456.22,686.684 1456.78,686.684 1457.34,686.684 1457.9,686.684 1458.46,686.684 1459.02,686.684 1459.58,686.684 1460.14,686.684 1460.7,686.684 1461.25,686.684 1461.81,686.684 1462.37,686.684 1462.93,686.684 1463.49,686.684 1464.05,686.684 1464.61,686.684 1465.17,686.684 1465.73,686.684 1466.29,686.684 1466.85,686.684 1467.41,686.684 1467.97,686.684 1468.52,686.684 1469.08,686.684 1469.64,686.684 1470.2,686.684 1470.76,686.684 1471.32,686.684 1471.88,686.684 1472.44,686.684 1473,686.684 1473.56,686.684 1474.12,686.684 1474.68,686.684 1475.24,686.684 1475.79,686.684 1476.35,686.684 1476.91,686.684 1477.47,686.684 1478.03,686.684 1478.59,686.684 1479.15,686.684 1479.71,686.684 1480.27,686.684 1480.83,686.684 1481.39,686.684 1481.95,686.684 1482.51,686.684 1483.07,686.684 1483.62,686.684 1484.18,686.684 1484.74,686.684 1485.3,686.684 1485.86,686.684 1486.42,686.684 1486.98,686.684 1487.54,686.684 1488.1,686.684 1488.66,686.684 1489.22,686.684 1489.78,686.684 1490.34,686.684 1490.89,686.684 1491.45,686.684 1492.01,686.684 1492.57,686.684 1493.13,686.684 1493.69,686.684 1494.25,686.684 1494.81,686.684 1495.37,686.684 1495.93,686.684 1496.49,686.684 1497.05,686.684 1497.61,686.684 1498.16,686.684 1498.72,686.684 1499.28,686.684 1499.84,686.684 1500.4,686.684 1500.96,686.684 1501.52,686.684 1502.08,686.684 1502.64,686.684 1503.2,686.684 1503.76,686.684 1504.32,686.684 1504.88,686.684 1505.44,686.684 1505.99,686.684 1506.55,686.684 1507.11,686.684 1507.67,686.684 1508.23,686.684 1508.79,686.684 1509.35,686.684 1509.91,686.684 1510.47,686.684 1511.03,686.684 1511.59,686.684 1512.15,686.684 1512.71,686.684 1513.26,686.684 1513.82,686.684 1514.38,686.684 1514.94,686.684 1515.5,686.684 1516.06,686.684 1516.62,686.684 1517.18,686.684 1517.74,686.684 1518.3,686.684 1518.86,686.684 1519.42,686.684 1519.98,686.684 1520.53,686.684 1521.09,686.684 1521.65,686.684 1522.21,686.684 1522.77,686.684 1523.33,686.684 1523.89,686.684 1524.45,686.684 1525.01,686.684 1525.57,686.684 1526.13,686.684 1526.69,686.684 1527.25,686.684 1527.81,686.684 1528.36,686.684 1528.92,686.684 1529.48,686.684 1530.04,686.684 1530.6,686.684 1531.16,686.684 1531.72,686.684 1532.28,686.684 1532.84,686.684 1533.4,686.684 1533.96,686.684 1534.52,686.684 1535.08,686.684 1535.63,686.684 1536.19,686.684 1536.75,686.684 1537.31,686.684 1537.87,686.684 1538.43,686.684 1538.99,686.684 1539.55,686.684 1540.11,686.684 1540.67,686.684 1541.23,686.684 1541.79,686.684 1542.35,686.684 1542.9,686.684 1543.46,686.684 1544.02,686.684 1544.58,686.684 1545.14,686.684 1545.7,686.684 1546.26,686.684 1546.82,686.684 1547.38,686.684 1547.94,686.684 1548.5,686.684 1549.06,686.684 1549.62,686.684 1550.18,686.684 1550.73,686.684 1551.29,686.684 1551.85,686.684 1552.41,686.684 1552.97,686.684 1553.53,686.684 1554.09,686.684 1554.65,686.684 1555.21,686.684 1555.77,686.684 1556.33,686.684 1556.89,686.684 1557.45,686.684 1558,686.684 1558.56,686.684 1559.12,686.684 1559.68,686.684 1560.24,686.684 1560.8,686.684 1561.36,686.684 1561.92,686.684 1562.48,686.684 1563.04,686.684 1563.6,686.684 1564.16,686.684 1564.72,686.684 1565.28,686.684 1565.83,686.684 1566.39,686.684 1566.95,686.684 1567.51,686.684 1568.07,686.684 1568.63,686.684 1569.19,686.684 1569.75,686.684 1570.31,686.684 1570.87,686.684 1571.43,686.684 1571.99,686.684 1572.55,686.684 1573.1,686.684 1573.66,686.684 1574.22,686.684 1574.78,686.684 1575.34,686.684 1575.9,686.684 1576.46,686.684 1577.02,686.684 1577.58,686.684 1578.14,686.684 1578.7,686.684 1579.26,686.684 1579.82,686.684 1580.37,686.684 1580.93,686.684 1581.49,686.684 1582.05,686.684 1582.61,686.684 1583.17,686.684 1583.73,686.684 1584.29,686.684 1584.85,686.684 1585.41,686.684 1585.97,686.684 1586.53,686.684 1587.09,686.684 1587.65,686.684 1588.2,686.684 1588.76,686.684 1589.32,686.684 1589.88,686.684 1590.44,686.684 1591,686.684 1591.56,686.684 1592.12,686.684 1592.68,686.684 1593.24,686.684 1593.8,686.684 1594.36,686.684 1594.92,686.684 1595.47,686.684 1596.03,686.684 1596.59,686.684 1597.15,686.684 1597.71,686.684 1598.27,686.684 1598.83,686.684 1599.39,686.684 1599.95,686.684 1600.51,686.684 1601.07,686.684 1601.63,686.684 1602.19,686.684 1602.74,686.684 1603.3,686.684 1603.86,686.684 1604.42,686.684 1604.98,686.684 1605.54,686.684 1606.1,686.684 1606.66,686.684 1607.22,686.684 1607.78,686.684 1608.34,686.684 1608.9,686.684 1609.46,686.684 1610.02,686.684 1610.57,686.684 1611.13,686.684 1611.69,686.684 1612.25,686.684 1612.81,686.684 1613.37,686.684 1613.93,686.684 1614.49,686.684 1615.05,686.684 1615.61,686.684 1616.17,686.684 1616.73,686.684 1617.29,686.684 1617.84,686.684 1618.4,686.684 1618.96,686.684 1619.52,686.684 1620.08,686.684 1620.64,686.684 1621.2,686.684 1621.76,686.684 1622.32,686.684 1622.88,686.684 1623.44,686.684 1624,686.684 1624.56,686.684 1625.11,686.684 1625.67,686.684 1626.23,686.684 1626.79,686.684 1627.35,686.684 1627.91,686.684 1628.47,686.684 1629.03,686.684 1629.59,686.684 1630.15,686.684 1630.71,686.684 1631.27,686.684 1631.83,686.684 1632.39,686.684 1632.94,686.684 1633.5,686.684 1634.06,686.684 1634.62,686.684 1635.18,686.684 1635.74,686.684 1636.3,686.684 1636.86,686.684 1637.42,686.684 1637.98,686.684 1638.54,686.684 1639.1,686.684 1639.66,686.684 1640.21,686.684 1640.77,686.684 1641.33,686.684 1641.89,686.684 1642.45,686.684 1643.01,686.684 1643.57,686.684 1644.13,686.684 1644.69,686.684 1645.25,686.684 1645.81,686.684 1646.37,686.684 1646.93,686.684 1647.48,686.684 1648.04,686.684 1648.6,686.684 1649.16,686.684 1649.72,686.684 1650.28,686.684 1650.84,686.684 1651.4,686.684 1651.96,686.684 1652.52,686.684 1653.08,686.684 1653.64,686.684 1654.2,686.684 1654.76,686.684 1655.31,686.684 1655.87,686.684 1656.43,686.684 1656.99,686.684 1657.55,686.684 1658.11,686.684 1658.67,686.684 1659.23,686.684 1659.79,686.684 1660.35,686.684 1660.91,686.684 1661.47,686.684 1662.03,686.684 1662.58,686.684 1663.14,686.684 1663.7,686.684 1664.26,686.684 1664.82,686.684 1665.38,686.684 1665.94,686.684 1666.5,686.684 1667.06,686.684 1667.62,686.684 1668.18,686.684 1668.74,686.684 1669.3,686.684 1669.85,686.684 1670.41,686.684 1670.97,686.684 1671.53,686.684 1672.09,686.684 1672.65,686.684 1673.21,686.684 1673.77,686.684 1674.33,686.684 1674.89,686.684 1675.45,686.684 1676.01,686.684 1676.57,686.684 1677.13,686.684 1677.68,686.684 1678.24,686.684 1678.8,686.684 1679.36,686.684 1679.92,686.684 1680.48,686.684 1681.04,686.684 1681.6,686.684 1682.16,686.684 1682.72,686.684 1683.28,686.684 1683.84,686.684 1684.4,686.684 1684.95,686.684 1685.51,686.684 1686.07,686.684 1686.63,686.684 1687.19,686.684 1687.75,686.684 1688.31,686.684 1688.87,686.684 1689.43,686.684 1689.99,686.684 1690.55,686.684 1691.11,686.684 1691.67,686.684 1692.23,686.684 1692.78,686.684 1693.34,686.684 1693.9,686.684 1694.46,686.684 1695.02,686.684 1695.58,686.684 1696.14,686.684 1696.7,686.684 1697.26,686.684 1697.82,686.684 1698.38,686.684 1698.94,686.684 1699.5,686.684 1700.05,686.684 1700.61,686.684 1701.17,686.684 1701.73,686.684 1702.29,686.684 1702.85,686.684 1703.41,686.684 1703.97,686.684 1704.53,686.684 1705.09,686.684 1705.65,686.684 1706.21,686.684 1706.77,686.684 1707.32,686.684 1707.88,686.684 1708.44,686.684 1709,686.684 1709.56,686.684 1710.12,686.684 1710.68,686.684 1711.24,686.684 1711.8,686.684 1712.36,686.684 1712.92,686.684 1713.48,686.684 1714.04,686.684 1714.6,686.684 1715.15,686.684 1715.71,686.684 1716.27,686.684 1716.83,686.684 1717.39,686.684 1717.95,686.684 1718.51,686.684 1719.07,686.684 1719.63,686.684 1720.19,686.684 1720.75,686.684 1721.31,686.684 1721.87,686.684 1722.42,686.684 1722.98,686.684 1723.54,686.684 1724.1,686.684 1724.66,686.684 1725.22,686.684 1725.78,686.684 1726.34,686.684 1726.9,686.684 1727.46,686.684 1728.02,686.684 1728.58,686.684 1729.14,686.684 1729.69,686.684 1730.25,686.684 1730.81,686.684 1731.37,686.684 1731.93,686.684 1732.49,686.684 1733.05,686.684 1733.61,686.684 1734.17,686.684 1734.73,686.684 1735.29,686.684 1735.85,686.684 1736.41,686.684 1736.97,686.684 1737.52,686.684 1738.08,686.684 1738.64,686.684 1739.2,686.684 1739.76,686.684 1740.32,686.684 1740.88,686.684 1741.44,686.684 1742,686.684 1742.56,686.684 1743.12,686.684 1743.68,686.684 1744.24,686.684 1744.79,686.684 1745.35,686.684 1745.91,686.684 1746.47,686.684 1747.03,686.684 1747.59,686.684 1748.15,686.684 1748.71,686.684 1749.27,686.684 1749.83,686.684 1750.39,686.684 1750.95,686.684 1751.51,686.684 1752.06,686.684 1752.62,686.684 1753.18,686.684 1753.74,686.684 1754.3,686.684 1754.86,686.684 1755.42,686.684 1755.98,686.684 1756.54,686.684 1757.1,686.684 1757.66,686.684 1758.22,686.684 1758.78,686.684 1759.34,686.684 1759.89,686.684 1760.45,686.684 1761.01,686.684 1761.57,686.684 1762.13,686.684 1762.69,686.684 1763.25,686.684 1763.81,686.684 1764.37,686.684 1764.93,686.684 1765.49,686.684 1766.05,686.684 1766.61,686.684 1767.16,686.684 1767.72,686.684 1768.28,686.684 1768.84,686.684 1769.4,686.684 1769.96,686.684 1770.52,686.684 1771.08,686.684 1771.64,686.684 1772.2,686.684 1772.76,686.684 1773.32,686.684 1773.88,686.684 1774.43,686.684 1774.99,686.684 1775.55,686.684 1776.11,686.684 1776.67,686.684 1777.23,686.684 1777.79,686.684 1778.35,686.684 1778.91,686.684 1779.47,686.684 1780.03,686.684 1780.59,686.684 1781.15,686.684 1781.71,686.684 1782.26,686.684 1782.82,686.684 1783.38,686.684 1783.94,686.684 1784.5,686.684 1785.06,686.684 1785.62,686.684 1786.18,686.684 1786.74,686.684 1787.3,686.684 1787.86,686.684 1788.42,686.684 1788.98,686.684 1789.53,686.684 1790.09,686.684 1790.65,686.684 1791.21,686.684 1791.77,686.684 1792.33,686.684 1792.89,686.684 1793.45,686.684 1794.01,686.684 1794.57,686.684 1795.13,686.684 1795.69,686.684 1796.25,686.684 1796.8,686.684 1797.36,686.684 1797.92,686.684 1798.48,686.684 1799.04,686.684 1799.6,686.684 1800.16,686.684 1800.72,686.684 1801.28,686.684 1801.84,686.684 1802.4,686.684 1802.96,686.684 1803.52,686.684 1804.08,686.684 1804.63,686.684 1805.19,686.684 1805.75,686.684 1806.31,686.684 1806.87,686.684 1807.43,686.684 1807.99,686.684 1808.55,686.684 1809.11,686.684 1809.67,686.684 1810.23,686.684 1810.79,686.684 1811.35,686.684 1811.9,686.684 1812.46,686.684 1813.02,686.684 1813.58,686.684 1814.14,686.684 1814.7,686.684 1815.26,686.684 1815.82,686.684 1816.38,686.684 1816.94,686.684 1817.5,686.684 1818.06,686.684 1818.62,686.684 1819.18,686.684 1819.73,686.684 1820.29,686.684 1820.85,686.684 1821.41,686.684 1821.97,686.684 1822.53,686.684 1823.09,686.684 1823.65,686.684 1824.21,686.684 1824.77,686.684 1825.33,686.684 1825.89,686.684 1826.45,686.684 1827,686.684 1827.56,686.684 1828.12,686.684 1828.68,686.684 1829.24,686.684 1829.8,686.684 1830.36,686.684 1830.92,686.684 1831.48,686.684 1832.04,686.684 1832.6,686.684 1833.16,686.684 1833.72,686.684 1834.27,686.684 1834.83,686.684 1835.39,686.684 1835.95,686.684 1836.51,686.684 1837.07,686.684 1837.63,686.684 1838.19,686.684 \"/>\n<path clip-path=\"url(#clip443)\" d=\"M720.247 684.2 L720.806 684.2 L721.365 684.2 L721.924 684.2 L722.484 684.2 L723.043 684.2 L723.602 684.2 L724.161 684.2 L724.721 684.2 L725.28 684.2 L725.839 684.2 L726.398 684.2 L726.958 684.2 L727.517 684.2 L728.076 684.2 L728.635 684.2 L729.195 684.2 L729.754 684.2 L730.313 684.2 L730.872 684.2 L731.432 684.2 L731.991 684.2 L732.55 684.2 L733.109 684.2 L733.669 684.2 L734.228 684.2 L734.787 684.2 L735.346 684.2 L735.906 684.2 L736.465 684.2 L737.024 684.2 L737.583 684.2 L738.143 684.2 L738.702 684.2 L739.261 684.2 L739.82 684.2 L740.38 684.2 L740.939 684.2 L741.498 684.2 L742.057 684.2 L742.617 684.2 L743.176 684.2 L743.735 684.2 L744.294 684.2 L744.854 684.2 L745.413 684.2 L745.972 684.2 L746.531 684.2 L747.091 684.2 L747.65 684.2 L748.209 684.2 L748.768 684.2 L749.328 684.2 L749.887 684.2 L750.446 684.2 L751.005 684.2 L751.565 684.2 L752.124 684.2 L752.683 684.2 L753.242 684.2 L753.802 684.2 L754.361 684.2 L754.92 684.2 L755.479 684.2 L756.039 684.2 L756.598 684.2 L757.157 684.2 L757.716 684.2 L758.276 684.2 L758.835 684.2 L759.394 684.2 L759.953 684.2 L760.513 684.2 L761.072 684.2 L761.631 684.2 L762.19 684.2 L762.75 684.2 L763.309 684.2 L763.868 684.2 L764.427 684.2 L764.987 684.2 L765.546 684.2 L766.105 684.2 L766.664 684.2 L767.224 684.2 L767.783 684.2 L768.342 684.2 L768.901 684.2 L769.461 684.2 L770.02 684.2 L770.579 684.2 L771.138 684.2 L771.698 684.2 L772.257 684.2 L772.816 684.2 L773.375 684.2 L773.935 684.2 L774.494 684.2 L775.053 684.2 L775.612 684.2 L776.172 684.2 L776.731 684.2 L777.29 684.2 L777.849 684.2 L778.409 684.2 L778.968 684.2 L779.527 684.2 L780.086 684.2 L780.646 684.2 L781.205 684.2 L781.764 684.2 L782.323 684.2 L782.883 684.2 L783.442 684.2 L784.001 684.2 L784.56 684.2 L785.12 684.2 L785.679 684.2 L786.238 684.2 L786.797 684.2 L787.357 684.2 L787.916 684.2 L788.475 684.2 L789.034 684.2 L789.594 684.2 L790.153 684.2 L790.712 684.2 L791.271 684.2 L791.831 684.2 L792.39 684.2 L792.949 684.2 L793.508 684.2 L794.068 684.2 L794.627 684.2 L795.186 684.2 L795.745 684.2 L796.305 684.2 L796.864 684.2 L797.423 684.2 L797.982 684.2 L798.542 684.2 L799.101 684.2 L799.66 684.2 L800.219 684.2 L800.779 684.2 L801.338 684.2 L801.897 684.2 L802.456 684.2 L803.016 684.2 L803.575 684.2 L804.134 684.2 L804.693 684.2 L805.253 684.2 L805.812 684.2 L806.371 684.2 L806.931 684.2 L807.49 684.2 L808.049 684.2 L808.608 684.2 L809.168 684.2 L809.727 684.2 L810.286 684.2 L810.845 684.2 L811.405 684.2 L811.964 684.2 L812.523 684.2 L813.082 684.2 L813.642 684.2 L814.201 684.2 L814.76 684.2 L815.319 684.2 L815.879 684.2 L816.438 684.2 L816.997 684.2 L817.556 684.2 L818.116 684.2 L818.675 684.2 L819.234 684.2 L819.793 684.2 L820.353 684.2 L820.912 684.2 L821.471 684.2 L822.03 684.2 L822.59 684.2 L823.149 684.2 L823.708 684.2 L824.267 684.2 L824.827 684.2 L825.386 684.2 L825.945 684.2 L826.504 684.2 L827.064 684.2 L827.623 684.2 L828.182 684.2 L828.741 684.2 L829.301 684.2 L829.86 684.2 L830.419 684.2 L830.978 684.2 L831.538 684.2 L832.097 684.2 L832.656 684.2 L833.215 684.2 L833.775 684.2 L834.334 684.2 L834.893 684.2 L835.452 684.2 L836.012 684.2 L836.571 684.2 L837.13 684.2 L837.689 684.2 L838.249 684.2 L838.808 684.2 L839.367 684.2 L839.926 684.2 L840.486 684.2 L841.045 684.2 L841.604 684.2 L842.163 684.2 L842.723 684.2 L843.282 684.2 L843.841 684.2 L844.4 684.2 L844.96 684.2 L845.519 684.2 L846.078 684.2 L846.637 684.2 L847.197 684.2 L847.756 684.2 L848.315 684.2 L848.874 684.2 L849.434 684.2 L849.993 684.2 L850.552 684.2 L851.111 684.2 L851.671 684.2 L852.23 684.2 L852.789 684.2 L853.348 684.2 L853.908 684.2 L854.467 684.2 L855.026 684.2 L855.585 684.2 L856.145 684.2 L856.704 684.2 L857.263 684.2 L857.822 684.2 L858.382 684.2 L858.941 684.2 L859.5 684.2 L860.059 684.2 L860.619 684.2 L861.178 684.2 L861.737 684.2 L862.296 684.2 L862.856 684.2 L863.415 684.2 L863.974 684.2 L864.533 684.2 L865.093 684.2 L865.652 684.2 L866.211 684.2 L866.77 684.2 L867.33 684.2 L867.889 684.2 L868.448 684.2 L869.007 684.2 L869.567 684.2 L870.126 684.2 L870.685 684.2 L871.244 684.2 L871.804 684.2 L872.363 684.2 L872.922 684.2 L873.481 684.2 L874.041 684.2 L874.6 684.2 L875.159 684.2 L875.718 684.2 L876.278 684.2 L876.837 684.2 L877.396 684.2 L877.955 684.2 L878.515 684.2 L879.074 684.2 L879.633 684.2 L880.192 684.2 L880.752 684.2 L881.311 684.2 L881.87 684.2 L882.429 684.2 L882.989 684.2 L883.548 684.2 L884.107 684.2 L884.666 684.2 L885.226 684.2 L885.785 684.2 L886.344 684.2 L886.903 684.2 L887.463 684.2 L888.022 684.2 L888.581 684.2 L889.14 684.2 L889.7 684.2 L890.259 684.2 L890.818 684.2 L891.377 684.2 L891.937 684.2 L892.496 684.2 L893.055 684.2 L893.614 684.2 L894.174 684.2 L894.733 684.2 L895.292 684.2 L895.851 684.2 L896.411 684.2 L896.97 684.2 L897.529 684.2 L898.088 684.2 L898.648 684.2 L899.207 684.2 L899.766 684.2 L900.325 684.2 L900.885 684.2 L901.444 684.2 L902.003 684.2 L902.562 684.2 L903.122 684.2 L903.681 684.2 L904.24 684.2 L904.799 684.2 L905.359 684.2 L905.918 684.2 L906.477 684.2 L907.036 684.2 L907.596 684.2 L908.155 684.2 L908.714 684.2 L909.273 684.2 L909.833 684.2 L910.392 684.2 L910.951 684.2 L911.51 684.2 L912.07 684.2 L912.629 684.2 L913.188 684.2 L913.747 684.2 L914.307 684.2 L914.866 684.2 L915.425 684.2 L915.984 684.2 L916.544 684.2 L917.103 684.2 L917.662 684.2 L918.221 684.2 L918.781 684.2 L919.34 684.2 L919.899 684.2 L920.458 684.2 L921.018 684.2 L921.577 684.2 L922.136 684.2 L922.695 684.2 L923.255 684.2 L923.814 684.2 L924.373 684.2 L924.932 684.2 L925.492 684.2 L926.051 684.2 L926.61 684.2 L927.169 684.2 L927.729 684.2 L928.288 684.2 L928.847 684.2 L929.406 684.2 L929.966 684.2 L930.525 684.2 L931.084 684.2 L931.644 684.2 L932.203 684.2 L932.762 684.2 L933.321 684.2 L933.881 684.2 L934.44 684.2 L934.999 684.2 L935.558 684.2 L936.118 684.2 L936.677 684.2 L937.236 684.2 L937.795 684.2 L938.355 684.2 L938.914 684.2 L939.473 684.2 L940.032 684.2 L940.592 684.2 L941.151 684.2 L941.71 684.2 L942.269 684.2 L942.829 684.2 L943.388 684.2 L943.947 684.2 L944.506 684.2 L945.066 684.2 L945.625 684.2 L946.184 684.2 L946.743 684.2 L947.303 684.2 L947.862 684.2 L948.421 684.2 L948.98 684.2 L949.54 684.2 L950.099 684.2 L950.658 684.2 L951.217 684.2 L951.777 684.2 L952.336 684.2 L952.895 684.2 L953.454 684.2 L954.014 684.2 L954.573 684.2 L955.132 684.2 L955.691 684.2 L956.251 684.2 L956.81 684.2 L957.369 684.2 L957.928 684.2 L958.488 684.2 L959.047 684.2 L959.606 684.2 L960.165 684.2 L960.725 684.2 L961.284 684.2 L961.843 684.2 L962.402 684.2 L962.962 684.2 L963.521 684.2 L964.08 684.2 L964.639 684.2 L965.199 684.2 L965.758 684.2 L966.317 684.2 L966.876 684.2 L967.436 684.2 L967.995 684.2 L968.554 684.2 L969.113 684.2 L969.673 684.2 L970.232 684.2 L970.791 684.2 L971.35 684.2 L971.91 684.2 L972.469 684.2 L973.028 684.2 L973.587 684.2 L974.147 684.2 L974.706 684.2 L975.265 684.2 L975.824 684.2 L976.384 684.2 L976.943 684.2 L977.502 684.2 L978.061 684.2 L978.621 684.2 L979.18 684.2 L979.739 684.2 L980.298 684.2 L980.858 684.2 L981.417 684.2 L981.976 684.2 L982.535 684.2 L983.095 684.2 L983.654 684.2 L984.213 684.2 L984.772 684.2 L985.332 684.2 L985.891 684.2 L986.45 684.2 L987.009 684.2 L987.569 684.2 L988.128 684.2 L988.687 684.2 L989.246 684.2 L989.806 684.2 L990.365 684.2 L990.924 684.2 L991.483 684.2 L992.043 684.2 L992.602 684.2 L993.161 684.2 L993.72 684.2 L994.28 684.2 L994.839 684.2 L995.398 684.2 L995.957 684.2 L996.517 684.2 L997.076 684.2 L997.635 684.2 L998.194 684.2 L998.754 684.2 L999.313 684.2 L999.872 684.2 L1000.43 684.2 L1000.99 684.2 L1001.55 684.2 L1002.11 684.2 L1002.67 684.2 L1003.23 684.2 L1003.79 684.2 L1004.35 684.2 L1004.91 684.2 L1005.46 684.2 L1006.02 684.2 L1006.58 684.2 L1007.14 684.2 L1007.7 684.2 L1008.26 684.2 L1008.82 684.2 L1009.38 684.2 L1009.94 684.2 L1010.5 684.2 L1011.06 684.2 L1011.62 684.2 L1012.18 684.2 L1012.73 684.2 L1013.29 684.2 L1013.85 684.2 L1014.41 684.2 L1014.97 684.2 L1015.53 684.2 L1016.09 684.2 L1016.65 684.2 L1017.21 684.2 L1017.77 684.2 L1018.33 684.2 L1018.89 684.2 L1019.45 684.2 L1020.01 684.2 L1020.56 684.2 L1021.12 684.2 L1021.68 684.2 L1022.24 684.2 L1022.8 684.2 L1023.36 684.2 L1023.92 684.2 L1024.48 684.2 L1025.04 684.2 L1025.6 684.2 L1026.16 684.2 L1026.72 684.2 L1027.28 684.2 L1027.83 684.2 L1028.39 684.2 L1028.95 684.2 L1029.51 684.2 L1030.07 684.2 L1030.63 684.2 L1031.19 684.2 L1031.75 684.2 L1032.31 684.2 L1032.87 684.2 L1033.43 684.2 L1033.99 684.2 L1034.55 684.2 L1035.1 684.2 L1035.66 684.2 L1036.22 684.2 L1036.78 684.2 L1037.34 684.2 L1037.9 684.2 L1038.46 684.2 L1039.02 684.2 L1039.58 684.2 L1040.14 684.2 L1040.7 684.2 L1041.26 684.2 L1041.82 684.2 L1042.38 684.2 L1042.93 684.2 L1043.49 684.2 L1044.05 684.2 L1044.61 684.2 L1045.17 684.2 L1045.73 684.2 L1046.29 684.2 L1046.85 684.2 L1047.41 684.2 L1047.97 684.2 L1048.53 684.2 L1049.09 684.2 L1049.65 684.2 L1050.2 684.2 L1050.76 684.2 L1051.32 684.2 L1051.88 684.2 L1052.44 684.2 L1053 684.2 L1053.56 684.2 L1054.12 684.2 L1054.68 684.2 L1055.24 684.2 L1055.8 684.2 L1056.36 684.2 L1056.92 684.2 L1057.48 684.2 L1058.03 684.2 L1058.59 684.2 L1059.15 684.2 L1059.71 684.2 L1060.27 684.2 L1060.83 684.2 L1061.39 684.2 L1061.95 684.2 L1062.51 684.2 L1063.07 684.2 L1063.63 684.2 L1064.19 684.2 L1064.75 684.2 L1065.3 684.2 L1065.86 684.2 L1066.42 684.2 L1066.98 684.2 L1067.54 684.2 L1068.1 684.2 L1068.66 684.2 L1069.22 684.2 L1069.78 684.2 L1070.34 684.2 L1070.9 684.2 L1071.46 684.2 L1072.02 684.2 L1072.57 684.2 L1073.13 684.2 L1073.69 684.2 L1074.25 684.2 L1074.81 684.2 L1075.37 684.2 L1075.93 684.2 L1076.49 684.2 L1077.05 684.2 L1077.61 684.2 L1078.17 684.2 L1078.73 684.2 L1079.29 684.2 L1079.85 684.2 L1080.4 684.2 L1080.96 684.2 L1081.52 684.2 L1082.08 684.2 L1082.64 684.2 L1083.2 684.2 L1083.76 684.2 L1084.32 684.2 L1084.88 684.2 L1085.44 684.2 L1086 684.2 L1086.56 684.2 L1087.12 684.2 L1087.67 684.2 L1088.23 684.2 L1088.79 684.2 L1089.35 684.2 L1089.91 684.2 L1090.47 684.2 L1091.03 684.2 L1091.59 684.2 L1092.15 684.2 L1092.71 684.2 L1093.27 684.2 L1093.83 684.2 L1094.39 684.2 L1094.94 684.2 L1095.5 684.2 L1096.06 684.2 L1096.62 684.2 L1097.18 684.2 L1097.74 684.2 L1098.3 684.2 L1098.86 684.2 L1099.42 684.2 L1099.98 684.2 L1100.54 684.2 L1101.1 684.2 L1101.66 684.2 L1102.22 684.2 L1102.77 684.2 L1103.33 684.2 L1103.89 684.2 L1104.45 684.2 L1105.01 684.2 L1105.57 684.2 L1106.13 684.2 L1106.69 684.2 L1107.25 684.2 L1107.81 684.2 L1108.37 684.2 L1108.93 684.2 L1109.49 684.2 L1110.04 684.2 L1110.6 684.2 L1111.16 684.2 L1111.72 684.2 L1112.28 684.2 L1112.84 684.2 L1113.4 684.2 L1113.96 684.2 L1114.52 684.2 L1115.08 684.2 L1115.64 684.2 L1116.2 684.2 L1116.76 684.2 L1117.31 684.2 L1117.87 684.2 L1118.43 684.2 L1118.99 684.2 L1119.55 684.2 L1120.11 684.2 L1120.67 684.2 L1121.23 684.2 L1121.79 684.2 L1122.35 684.2 L1122.91 684.2 L1123.47 684.2 L1124.03 684.2 L1124.59 684.2 L1125.14 684.2 L1125.7 684.2 L1126.26 684.2 L1126.82 684.2 L1127.38 684.2 L1127.94 684.2 L1128.5 684.2 L1129.06 684.2 L1129.62 684.2 L1130.18 684.2 L1130.74 684.2 L1131.3 684.2 L1131.86 684.2 L1132.41 684.2 L1132.97 684.2 L1133.53 684.2 L1134.09 684.2 L1134.65 684.2 L1135.21 684.2 L1135.77 684.2 L1136.33 684.2 L1136.89 684.2 L1137.45 684.2 L1138.01 684.2 L1138.57 684.2 L1139.13 684.2 L1139.68 684.2 L1140.24 684.2 L1140.8 684.2 L1141.36 684.2 L1141.92 684.2 L1142.48 684.2 L1143.04 684.2 L1143.6 684.2 L1144.16 684.2 L1144.72 684.2 L1145.28 684.2 L1145.84 684.2 L1146.4 684.2 L1146.96 684.2 L1147.51 684.2 L1148.07 684.2 L1148.63 684.2 L1149.19 684.2 L1149.75 684.2 L1150.31 684.2 L1150.87 684.2 L1151.43 684.2 L1151.99 684.2 L1152.55 684.2 L1153.11 684.2 L1153.67 684.2 L1154.23 684.2 L1154.78 684.2 L1155.34 684.2 L1155.9 684.2 L1156.46 684.2 L1157.02 684.2 L1157.58 684.2 L1158.14 684.2 L1158.7 684.2 L1159.26 684.2 L1159.82 684.2 L1160.38 684.2 L1160.94 684.2 L1161.5 684.2 L1162.05 684.2 L1162.61 684.2 L1163.17 684.2 L1163.73 684.2 L1164.29 684.2 L1164.85 684.2 L1165.41 684.2 L1165.97 684.2 L1166.53 684.2 L1167.09 684.2 L1167.65 684.2 L1168.21 684.2 L1168.77 684.2 L1169.33 684.2 L1169.88 684.2 L1170.44 684.2 L1171 684.2 L1171.56 684.2 L1172.12 684.2 L1172.68 684.2 L1173.24 684.2 L1173.8 684.2 L1174.36 684.2 L1174.92 684.2 L1175.48 684.2 L1176.04 684.2 L1176.6 684.2 L1177.15 684.2 L1177.71 684.2 L1178.27 684.2 L1178.83 684.2 L1179.39 684.2 L1179.95 684.2 L1180.51 684.2 L1181.07 684.2 L1181.63 684.2 L1182.19 684.2 L1182.75 684.2 L1183.31 684.2 L1183.87 684.2 L1184.43 684.2 L1184.98 684.2 L1185.54 684.2 L1186.1 684.2 L1186.66 684.2 L1187.22 684.2 L1187.78 684.2 L1188.34 684.2 L1188.9 684.2 L1189.46 684.2 L1190.02 684.2 L1190.58 684.2 L1191.14 684.2 L1191.7 684.2 L1192.25 684.2 L1192.81 684.2 L1193.37 684.2 L1193.93 684.2 L1194.49 684.2 L1195.05 684.2 L1195.61 684.2 L1196.17 684.2 L1196.73 684.2 L1197.29 684.2 L1197.85 684.2 L1198.41 684.2 L1198.97 684.2 L1199.52 684.2 L1200.08 684.2 L1200.64 684.2 L1201.2 684.2 L1201.76 684.2 L1202.32 684.2 L1202.88 684.2 L1203.44 684.2 L1204 684.2 L1204.56 684.2 L1205.12 684.2 L1205.68 684.2 L1206.24 684.2 L1206.8 684.2 L1207.35 684.2 L1207.91 684.2 L1208.47 684.2 L1209.03 684.2 L1209.59 684.2 L1210.15 684.2 L1210.71 684.2 L1211.27 684.2 L1211.83 684.2 L1212.39 684.2 L1212.95 684.2 L1213.51 684.2 L1214.07 684.2 L1214.62 684.2 L1215.18 684.2 L1215.74 684.2 L1216.3 684.2 L1216.86 684.2 L1217.42 684.2 L1217.98 684.2 L1218.54 684.2 L1219.1 684.2 L1219.66 684.2 L1220.22 684.2 L1220.78 684.2 L1221.34 684.2 L1221.89 684.2 L1222.45 684.2 L1223.01 684.2 L1223.57 684.2 L1224.13 684.2 L1224.69 684.2 L1225.25 684.2 L1225.81 684.2 L1226.37 684.2 L1226.93 684.2 L1227.49 684.2 L1228.05 684.2 L1228.61 684.2 L1229.17 684.2 L1229.72 684.2 L1230.28 684.2 L1230.84 684.2 L1231.4 684.2 L1231.96 684.2 L1232.52 684.2 L1233.08 684.2 L1233.64 684.2 L1234.2 684.2 L1234.76 684.2 L1235.32 684.2 L1235.88 684.2 L1236.44 684.2 L1236.99 684.2 L1237.55 684.2 L1238.11 684.2 L1238.67 684.2 L1239.23 684.2 L1239.79 684.2 L1240.35 684.2 L1240.91 684.2 L1241.47 684.2 L1242.03 684.2 L1242.59 684.2 L1243.15 684.2 L1243.71 684.2 L1244.26 684.2 L1244.82 684.2 L1245.38 684.2 L1245.94 684.2 L1246.5 684.2 L1247.06 684.2 L1247.62 684.2 L1248.18 684.2 L1248.74 684.2 L1249.3 684.2 L1249.86 684.2 L1250.42 684.2 L1250.98 684.2 L1251.54 684.2 L1252.09 684.2 L1252.65 684.2 L1253.21 684.2 L1253.77 684.2 L1254.33 684.2 L1254.89 684.2 L1255.45 684.2 L1256.01 684.2 L1256.57 684.2 L1257.13 684.2 L1257.69 684.2 L1258.25 684.2 L1258.81 684.2 L1259.36 684.2 L1259.92 684.2 L1260.48 684.2 L1261.04 684.2 L1261.6 684.2 L1262.16 684.2 L1262.72 684.2 L1263.28 684.2 L1263.84 684.2 L1264.4 684.2 L1264.96 684.2 L1265.52 684.2 L1266.08 684.2 L1266.63 684.2 L1267.19 684.2 L1267.75 684.2 L1268.31 684.2 L1268.87 684.2 L1269.43 684.2 L1269.99 684.2 L1270.55 684.2 L1271.11 684.2 L1271.67 684.2 L1272.23 684.2 L1272.79 684.2 L1273.35 684.2 L1273.91 684.2 L1274.46 684.2 L1275.02 684.2 L1275.58 684.2 L1276.14 684.2 L1276.7 684.2 L1277.26 684.2 L1277.82 684.2 L1278.38 684.2 L1278.94 684.2 L1279.5 684.2 L1280.06 684.2 L1280.62 684.2 L1281.18 684.2 L1281.73 684.2 L1282.29 684.2 L1282.85 684.2 L1283.41 684.2 L1283.97 684.2 L1284.53 684.2 L1285.09 684.2 L1285.65 684.2 L1286.21 684.2 L1286.77 684.2 L1287.33 684.2 L1287.89 684.2 L1288.45 684.2 L1289 684.2 L1289.56 684.2 L1290.12 684.2 L1290.68 684.2 L1291.24 684.2 L1291.8 684.2 L1292.36 684.2 L1292.92 684.2 L1293.48 684.2 L1294.04 684.2 L1294.6 684.2 L1295.16 684.2 L1295.72 684.2 L1296.28 684.2 L1296.83 684.2 L1297.39 684.2 L1297.95 684.2 L1298.51 684.2 L1299.07 684.2 L1299.63 684.2 L1300.19 684.2 L1300.75 684.2 L1301.31 684.2 L1301.87 684.2 L1302.43 684.2 L1302.99 684.2 L1303.55 684.2 L1304.1 684.2 L1304.66 684.2 L1305.22 684.2 L1305.78 684.2 L1306.34 684.2 L1306.9 684.2 L1307.46 684.2 L1308.02 684.2 L1308.58 684.2 L1309.14 684.2 L1309.7 684.2 L1310.26 684.2 L1310.82 684.2 L1311.38 684.2 L1311.93 684.2 L1312.49 684.2 L1313.05 684.2 L1313.61 684.2 L1314.17 684.2 L1314.73 684.2 L1315.29 684.2 L1315.85 684.2 L1316.41 684.2 L1316.97 684.2 L1317.53 684.2 L1318.09 684.2 L1318.65 684.2 L1319.2 684.2 L1319.76 684.2 L1320.32 684.2 L1320.88 684.2 L1321.44 684.2 L1322 684.2 L1322.56 684.2 L1323.12 684.2 L1323.68 684.2 L1324.24 684.2 L1324.8 684.2 L1325.36 684.2 L1325.92 684.2 L1326.47 684.2 L1327.03 684.2 L1327.59 684.2 L1328.15 684.2 L1328.71 684.2 L1329.27 684.2 L1329.83 684.2 L1330.39 684.2 L1330.95 684.2 L1331.51 684.2 L1332.07 684.2 L1332.63 684.2 L1333.19 684.2 L1333.75 684.2 L1334.3 684.2 L1334.86 684.2 L1335.42 684.2 L1335.98 684.2 L1336.54 684.2 L1337.1 684.2 L1337.66 684.2 L1338.22 684.2 L1338.78 684.2 L1339.34 684.2 L1339.9 684.2 L1340.46 684.2 L1341.02 684.2 L1341.57 684.2 L1342.13 684.2 L1342.69 684.2 L1343.25 684.2 L1343.81 684.2 L1344.37 684.2 L1344.93 684.2 L1345.49 684.2 L1346.05 684.2 L1346.61 684.2 L1347.17 684.2 L1347.73 684.2 L1348.29 684.2 L1348.84 684.2 L1349.4 684.2 L1349.96 684.2 L1350.52 684.2 L1351.08 684.2 L1351.64 684.2 L1352.2 684.2 L1352.76 684.2 L1353.32 684.2 L1353.88 684.2 L1354.44 684.2 L1355 684.2 L1355.56 684.2 L1356.12 684.2 L1356.67 684.2 L1357.23 684.2 L1357.79 684.2 L1358.35 684.2 L1358.91 684.2 L1359.47 684.2 L1360.03 684.2 L1360.59 684.2 L1361.15 684.2 L1361.71 684.2 L1362.27 684.2 L1362.83 684.2 L1363.39 684.2 L1363.94 684.2 L1364.5 684.2 L1365.06 684.2 L1365.62 684.2 L1366.18 684.2 L1366.74 684.2 L1367.3 684.2 L1367.86 684.2 L1368.42 684.2 L1368.98 684.2 L1369.54 684.2 L1370.1 684.2 L1370.66 684.2 L1371.21 684.2 L1371.77 684.2 L1372.33 684.2 L1372.89 684.2 L1373.45 684.2 L1374.01 684.2 L1374.57 684.2 L1375.13 684.2 L1375.69 684.2 L1376.25 684.2 L1376.81 684.2 L1377.37 684.2 L1377.93 684.2 L1378.49 684.2 L1379.04 684.2 L1379.6 684.2 L1380.16 684.2 L1380.72 684.2 L1381.28 684.2 L1381.84 684.2 L1382.4 684.2 L1382.96 684.2 L1383.52 684.2 L1384.08 684.2 L1384.64 684.2 L1385.2 684.2 L1385.76 684.2 L1386.31 684.2 L1386.87 684.2 L1387.43 684.2 L1387.99 684.2 L1388.55 684.2 L1389.11 684.2 L1389.67 684.2 L1390.23 684.2 L1390.79 684.2 L1391.35 684.2 L1391.91 684.2 L1392.47 684.2 L1393.03 684.2 L1393.58 684.2 L1394.14 684.2 L1394.7 684.2 L1395.26 684.2 L1395.82 684.2 L1396.38 684.2 L1396.94 684.2 L1397.5 684.2 L1398.06 684.2 L1398.62 684.2 L1399.18 684.2 L1399.74 684.2 L1400.3 684.2 L1400.86 684.2 L1401.41 684.2 L1401.97 684.2 L1402.53 684.2 L1403.09 684.2 L1403.65 684.2 L1404.21 684.2 L1404.77 684.2 L1405.33 684.2 L1405.89 684.2 L1406.45 684.2 L1407.01 684.2 L1407.57 684.2 L1408.13 684.2 L1408.68 684.2 L1409.24 684.2 L1409.8 684.2 L1410.36 684.2 L1410.92 684.2 L1411.48 684.2 L1412.04 684.2 L1412.6 684.2 L1413.16 684.2 L1413.72 684.2 L1414.28 684.2 L1414.84 684.2 L1415.4 684.2 L1415.95 684.2 L1416.51 684.2 L1417.07 684.2 L1417.63 684.2 L1418.19 684.2 L1418.75 684.2 L1419.31 684.2 L1419.87 684.2 L1420.43 684.2 L1420.99 684.2 L1421.55 684.2 L1422.11 684.2 L1422.67 684.2 L1423.23 684.2 L1423.78 684.2 L1424.34 684.2 L1424.9 684.2 L1425.46 684.2 L1426.02 684.2 L1426.58 684.2 L1427.14 684.2 L1427.7 684.2 L1428.26 684.2 L1428.82 684.2 L1429.38 684.2 L1429.94 684.2 L1430.5 684.2 L1431.05 684.2 L1431.61 684.2 L1432.17 684.2 L1432.73 684.2 L1433.29 684.2 L1433.85 684.2 L1434.41 684.2 L1434.97 684.2 L1435.53 684.2 L1436.09 684.2 L1436.65 684.2 L1437.21 684.2 L1437.77 684.2 L1438.33 684.2 L1438.88 684.2 L1439.44 684.2 L1440 684.2 L1440.56 684.2 L1441.12 684.2 L1441.68 684.2 L1442.24 684.2 L1442.8 684.2 L1443.36 684.2 L1443.92 684.2 L1444.48 684.2 L1445.04 684.2 L1445.6 684.2 L1446.15 684.2 L1446.71 684.2 L1447.27 684.2 L1447.83 684.2 L1448.39 684.2 L1448.95 684.2 L1449.51 684.2 L1450.07 684.2 L1450.63 684.2 L1451.19 684.2 L1451.75 684.2 L1452.31 684.2 L1452.87 684.2 L1453.42 684.2 L1453.98 684.2 L1454.54 684.2 L1455.1 684.2 L1455.66 684.2 L1456.22 684.2 L1456.78 684.2 L1457.34 684.2 L1457.9 684.2 L1458.46 684.2 L1459.02 684.2 L1459.58 684.2 L1460.14 684.2 L1460.7 684.2 L1461.25 684.2 L1461.81 684.2 L1462.37 684.2 L1462.93 684.2 L1463.49 684.2 L1464.05 684.2 L1464.61 684.2 L1465.17 684.2 L1465.73 684.2 L1466.29 684.2 L1466.85 684.2 L1467.41 684.2 L1467.97 684.2 L1468.52 684.2 L1469.08 684.2 L1469.64 684.2 L1470.2 684.2 L1470.76 684.2 L1471.32 684.2 L1471.88 684.2 L1472.44 684.2 L1473 684.2 L1473.56 684.2 L1474.12 684.2 L1474.68 684.2 L1475.24 684.2 L1475.79 684.2 L1476.35 684.2 L1476.91 684.2 L1477.47 684.2 L1478.03 684.2 L1478.59 684.2 L1479.15 684.2 L1479.71 684.2 L1480.27 684.2 L1480.83 684.2 L1481.39 684.2 L1481.95 684.2 L1482.51 684.2 L1483.07 684.2 L1483.62 684.2 L1484.18 684.2 L1484.74 684.2 L1485.3 684.2 L1485.86 684.2 L1486.42 684.2 L1486.98 684.2 L1487.54 684.2 L1488.1 684.2 L1488.66 684.2 L1489.22 684.2 L1489.78 684.2 L1490.34 684.2 L1490.89 684.2 L1491.45 684.2 L1492.01 684.2 L1492.57 684.2 L1493.13 684.2 L1493.69 684.2 L1494.25 684.2 L1494.81 684.2 L1495.37 684.2 L1495.93 684.2 L1496.49 684.2 L1497.05 684.2 L1497.61 684.2 L1498.16 684.2 L1498.72 684.2 L1499.28 684.2 L1499.84 684.2 L1500.4 684.2 L1500.96 684.2 L1501.52 684.2 L1502.08 684.2 L1502.64 684.2 L1503.2 684.2 L1503.76 684.2 L1504.32 684.2 L1504.88 684.2 L1505.44 684.2 L1505.99 684.2 L1506.55 684.2 L1507.11 684.2 L1507.67 684.2 L1508.23 684.2 L1508.79 684.2 L1509.35 684.2 L1509.91 684.2 L1510.47 684.2 L1511.03 684.2 L1511.59 684.2 L1512.15 684.2 L1512.71 684.2 L1513.26 684.2 L1513.82 684.2 L1514.38 684.2 L1514.94 684.2 L1515.5 684.2 L1516.06 684.2 L1516.62 684.2 L1517.18 684.2 L1517.74 684.2 L1518.3 684.2 L1518.86 684.2 L1519.42 684.2 L1519.98 684.2 L1520.53 684.2 L1521.09 684.2 L1521.65 684.2 L1522.21 684.2 L1522.77 684.2 L1523.33 684.2 L1523.89 684.2 L1524.45 684.2 L1525.01 684.2 L1525.57 684.2 L1526.13 684.2 L1526.69 684.2 L1527.25 684.2 L1527.81 684.2 L1528.36 684.2 L1528.92 684.2 L1529.48 684.2 L1530.04 684.2 L1530.6 684.2 L1531.16 684.2 L1531.72 684.2 L1532.28 684.2 L1532.84 684.2 L1533.4 684.2 L1533.96 684.2 L1534.52 684.2 L1535.08 684.2 L1535.63 684.2 L1536.19 684.2 L1536.75 684.2 L1537.31 684.2 L1537.87 684.2 L1538.43 684.2 L1538.99 684.2 L1539.55 684.2 L1540.11 684.2 L1540.67 684.2 L1541.23 684.2 L1541.79 684.2 L1542.35 684.2 L1542.9 684.2 L1543.46 684.2 L1544.02 684.2 L1544.58 684.2 L1545.14 684.2 L1545.7 684.2 L1546.26 684.2 L1546.82 684.2 L1547.38 684.2 L1547.94 684.2 L1548.5 684.2 L1549.06 684.2 L1549.62 684.2 L1550.18 684.2 L1550.73 684.2 L1551.29 684.2 L1551.85 684.2 L1552.41 684.2 L1552.97 684.2 L1553.53 684.2 L1554.09 684.2 L1554.65 684.2 L1555.21 684.2 L1555.77 684.2 L1556.33 684.2 L1556.89 684.2 L1557.45 684.2 L1558 684.2 L1558.56 684.2 L1559.12 684.2 L1559.68 684.2 L1560.24 684.2 L1560.8 684.2 L1561.36 684.2 L1561.92 684.2 L1562.48 684.2 L1563.04 684.2 L1563.6 684.2 L1564.16 684.2 L1564.72 684.2 L1565.28 684.2 L1565.83 684.2 L1566.39 684.2 L1566.95 684.2 L1567.51 684.2 L1568.07 684.2 L1568.63 684.2 L1569.19 684.2 L1569.75 684.2 L1570.31 684.2 L1570.87 684.2 L1571.43 684.2 L1571.99 684.2 L1572.55 684.2 L1573.1 684.2 L1573.66 684.2 L1574.22 684.2 L1574.78 684.2 L1575.34 684.2 L1575.9 684.2 L1576.46 684.2 L1577.02 684.2 L1577.58 684.2 L1578.14 684.2 L1578.7 684.2 L1579.26 684.2 L1579.82 684.2 L1580.37 684.2 L1580.93 684.2 L1581.49 684.2 L1582.05 684.2 L1582.61 684.2 L1583.17 684.2 L1583.73 684.2 L1584.29 684.2 L1584.85 684.2 L1585.41 684.2 L1585.97 684.2 L1586.53 684.2 L1587.09 684.2 L1587.65 684.2 L1588.2 684.2 L1588.76 684.2 L1589.32 684.2 L1589.88 684.2 L1590.44 684.2 L1591 684.2 L1591.56 684.2 L1592.12 684.2 L1592.68 684.2 L1593.24 684.2 L1593.8 684.2 L1594.36 684.2 L1594.92 684.2 L1595.47 684.2 L1596.03 684.2 L1596.59 684.2 L1597.15 684.2 L1597.71 684.2 L1598.27 684.2 L1598.83 684.2 L1599.39 684.2 L1599.95 684.2 L1600.51 684.2 L1601.07 684.2 L1601.63 684.2 L1602.19 684.2 L1602.74 684.2 L1603.3 684.2 L1603.86 684.2 L1604.42 684.2 L1604.98 684.2 L1605.54 684.2 L1606.1 684.2 L1606.66 684.2 L1607.22 684.2 L1607.78 684.2 L1608.34 684.2 L1608.9 684.2 L1609.46 684.2 L1610.02 684.2 L1610.57 684.2 L1611.13 684.2 L1611.69 684.2 L1612.25 684.2 L1612.81 684.2 L1613.37 684.2 L1613.93 684.2 L1614.49 684.2 L1615.05 684.2 L1615.61 684.2 L1616.17 684.2 L1616.73 684.2 L1617.29 684.2 L1617.84 684.2 L1618.4 684.2 L1618.96 684.2 L1619.52 684.2 L1620.08 684.2 L1620.64 684.2 L1621.2 684.2 L1621.76 684.2 L1622.32 684.2 L1622.88 684.2 L1623.44 684.2 L1624 684.2 L1624.56 684.2 L1625.11 684.2 L1625.67 684.2 L1626.23 684.2 L1626.79 684.2 L1627.35 684.2 L1627.91 684.2 L1628.47 684.2 L1629.03 684.2 L1629.59 684.2 L1630.15 684.2 L1630.71 684.2 L1631.27 684.2 L1631.83 684.2 L1632.39 684.2 L1632.94 684.2 L1633.5 684.2 L1634.06 684.2 L1634.62 684.2 L1635.18 684.2 L1635.74 684.2 L1636.3 684.2 L1636.86 684.2 L1637.42 684.2 L1637.98 684.2 L1638.54 684.2 L1639.1 684.2 L1639.66 684.2 L1640.21 684.2 L1640.77 684.2 L1641.33 684.2 L1641.89 684.2 L1642.45 684.2 L1643.01 684.2 L1643.57 684.2 L1644.13 684.2 L1644.69 684.2 L1645.25 684.2 L1645.81 684.2 L1646.37 684.2 L1646.93 684.2 L1647.48 684.2 L1648.04 684.2 L1648.6 684.2 L1649.16 684.2 L1649.72 684.2 L1650.28 684.2 L1650.84 684.2 L1651.4 684.2 L1651.96 684.2 L1652.52 684.2 L1653.08 684.2 L1653.64 684.2 L1654.2 684.2 L1654.76 684.2 L1655.31 684.2 L1655.87 684.2 L1656.43 684.2 L1656.99 684.2 L1657.55 684.2 L1658.11 684.2 L1658.67 684.2 L1659.23 684.2 L1659.79 684.2 L1660.35 684.2 L1660.91 684.2 L1661.47 684.2 L1662.03 684.2 L1662.58 684.2 L1663.14 684.2 L1663.7 684.2 L1664.26 684.2 L1664.82 684.2 L1665.38 684.2 L1665.94 684.2 L1666.5 684.2 L1667.06 684.2 L1667.62 684.2 L1668.18 684.2 L1668.74 684.2 L1669.3 684.2 L1669.85 684.2 L1670.41 684.2 L1670.97 684.2 L1671.53 684.2 L1672.09 684.2 L1672.65 684.2 L1673.21 684.2 L1673.77 684.2 L1674.33 684.2 L1674.89 684.2 L1675.45 684.2 L1676.01 684.2 L1676.57 684.2 L1677.13 684.2 L1677.68 684.2 L1678.24 684.2 L1678.8 684.2 L1679.36 684.2 L1679.92 684.2 L1680.48 684.2 L1681.04 684.2 L1681.6 684.2 L1682.16 684.2 L1682.72 684.2 L1683.28 684.2 L1683.84 684.2 L1684.4 684.2 L1684.95 684.2 L1685.51 684.2 L1686.07 684.2 L1686.63 684.2 L1687.19 684.2 L1687.75 684.2 L1688.31 684.2 L1688.87 684.2 L1689.43 684.2 L1689.99 684.2 L1690.55 684.2 L1691.11 684.2 L1691.67 684.2 L1692.23 684.2 L1692.78 684.2 L1693.34 684.2 L1693.9 684.2 L1694.46 684.2 L1695.02 684.2 L1695.58 684.2 L1696.14 684.2 L1696.7 684.2 L1697.26 684.2 L1697.82 684.2 L1698.38 684.2 L1698.94 684.2 L1699.5 684.2 L1700.05 684.2 L1700.61 684.2 L1701.17 684.2 L1701.73 684.2 L1702.29 684.2 L1702.85 684.2 L1703.41 684.2 L1703.97 684.2 L1704.53 684.2 L1705.09 684.2 L1705.65 684.2 L1706.21 684.2 L1706.77 684.2 L1707.32 684.2 L1707.88 684.2 L1708.44 684.2 L1709 684.2 L1709.56 684.2 L1710.12 684.2 L1710.68 684.2 L1711.24 684.2 L1711.8 684.2 L1712.36 684.2 L1712.92 684.2 L1713.48 684.2 L1714.04 684.2 L1714.6 684.2 L1715.15 684.2 L1715.71 684.2 L1716.27 684.2 L1716.83 684.2 L1717.39 684.2 L1717.95 684.2 L1718.51 684.2 L1719.07 684.2 L1719.63 684.2 L1720.19 684.2 L1720.75 684.2 L1721.31 684.2 L1721.87 684.2 L1722.42 684.2 L1722.98 684.2 L1723.54 684.2 L1724.1 684.2 L1724.66 684.2 L1725.22 684.2 L1725.78 684.2 L1726.34 684.2 L1726.9 684.2 L1727.46 684.2 L1728.02 684.2 L1728.58 684.2 L1729.14 684.2 L1729.69 684.2 L1730.25 684.2 L1730.81 684.2 L1731.37 684.2 L1731.93 684.2 L1732.49 684.2 L1733.05 684.2 L1733.61 684.2 L1734.17 684.2 L1734.73 684.2 L1735.29 684.2 L1735.85 684.2 L1736.41 684.2 L1736.97 684.2 L1737.52 684.2 L1738.08 684.2 L1738.64 684.2 L1739.2 684.2 L1739.76 684.2 L1740.32 684.2 L1740.88 684.2 L1741.44 684.2 L1742 684.2 L1742.56 684.2 L1743.12 684.2 L1743.68 684.2 L1744.24 684.2 L1744.79 684.2 L1745.35 684.2 L1745.91 684.2 L1746.47 684.2 L1747.03 684.2 L1747.59 684.2 L1748.15 684.2 L1748.71 684.2 L1749.27 684.2 L1749.83 684.2 L1750.39 684.2 L1750.95 684.2 L1751.51 684.2 L1752.06 684.2 L1752.62 684.2 L1753.18 684.2 L1753.74 684.2 L1754.3 684.2 L1754.86 684.2 L1755.42 684.2 L1755.98 684.2 L1756.54 684.2 L1757.1 684.2 L1757.66 684.2 L1758.22 684.2 L1758.78 684.2 L1759.34 684.2 L1759.89 684.2 L1760.45 684.2 L1761.01 684.2 L1761.57 684.2 L1762.13 684.2 L1762.69 684.2 L1763.25 684.2 L1763.81 684.2 L1764.37 684.2 L1764.93 684.2 L1765.49 684.2 L1766.05 684.2 L1766.61 684.2 L1767.16 684.2 L1767.72 684.2 L1768.28 684.2 L1768.84 684.2 L1769.4 684.2 L1769.96 684.2 L1770.52 684.2 L1771.08 684.2 L1771.64 684.2 L1772.2 684.2 L1772.76 684.2 L1773.32 684.2 L1773.88 684.2 L1774.43 684.2 L1774.99 684.2 L1775.55 684.2 L1776.11 684.2 L1776.67 684.2 L1777.23 684.2 L1777.79 684.2 L1778.35 684.2 L1778.91 684.2 L1779.47 684.2 L1780.03 684.2 L1780.59 684.2 L1781.15 684.2 L1781.71 684.2 L1782.26 684.2 L1782.82 684.2 L1783.38 684.2 L1783.94 684.2 L1784.5 684.2 L1785.06 684.2 L1785.62 684.2 L1786.18 684.2 L1786.74 684.2 L1787.3 684.2 L1787.86 684.2 L1788.42 684.2 L1788.98 684.2 L1789.53 684.2 L1790.09 684.2 L1790.65 684.2 L1791.21 684.2 L1791.77 684.2 L1792.33 684.2 L1792.89 684.2 L1793.45 684.2 L1794.01 684.2 L1794.57 684.2 L1795.13 684.2 L1795.69 684.2 L1796.25 684.2 L1796.8 684.2 L1797.36 684.2 L1797.92 684.2 L1798.48 684.2 L1799.04 684.2 L1799.6 684.2 L1800.16 684.2 L1800.72 684.2 L1801.28 684.2 L1801.84 684.2 L1802.4 684.2 L1802.96 684.2 L1803.52 684.2 L1804.08 684.2 L1804.63 684.2 L1805.19 684.2 L1805.75 684.2 L1806.31 684.2 L1806.87 684.2 L1807.43 684.2 L1807.99 684.2 L1808.55 684.2 L1809.11 684.2 L1809.67 684.2 L1810.23 684.2 L1810.79 684.2 L1811.35 684.2 L1811.9 684.2 L1812.46 684.2 L1813.02 684.2 L1813.58 684.2 L1814.14 684.2 L1814.7 684.2 L1815.26 684.2 L1815.82 684.2 L1816.38 684.2 L1816.94 684.2 L1817.5 684.2 L1818.06 684.2 L1818.62 684.2 L1819.18 684.2 L1819.73 684.2 L1820.29 684.2 L1820.85 684.2 L1821.41 684.2 L1821.97 684.2 L1822.53 684.2 L1823.09 684.2 L1823.65 684.2 L1824.21 684.2 L1824.77 684.2 L1825.33 684.2 L1825.89 684.2 L1826.45 684.2 L1827 684.2 L1827.56 684.2 L1828.12 684.2 L1828.68 684.2 L1829.24 684.2 L1829.8 684.2 L1830.36 684.2 L1830.92 684.2 L1831.48 684.2 L1832.04 684.2 L1832.6 684.2 L1833.16 684.2 L1833.72 684.2 L1834.27 684.2 L1834.83 684.2 L1835.39 684.2 L1835.95 684.2 L1836.51 684.2 L1837.07 684.2 L1837.63 684.2 L1838.19 684.2 L1838.19 681.611 L1837.63 681.611 L1837.07 681.611 L1836.51 681.611 L1835.95 681.611 L1835.39 681.611 L1834.83 681.611 L1834.27 681.611 L1833.72 681.611 L1833.16 681.611 L1832.6 681.611 L1832.04 681.611 L1831.48 681.611 L1830.92 681.611 L1830.36 681.611 L1829.8 681.611 L1829.24 681.611 L1828.68 681.611 L1828.12 681.611 L1827.56 681.611 L1827 681.611 L1826.45 681.611 L1825.89 681.611 L1825.33 681.611 L1824.77 681.611 L1824.21 681.611 L1823.65 681.611 L1823.09 681.611 L1822.53 681.611 L1821.97 681.611 L1821.41 681.611 L1820.85 681.611 L1820.29 681.611 L1819.73 681.611 L1819.18 681.611 L1818.62 681.611 L1818.06 681.611 L1817.5 681.611 L1816.94 681.611 L1816.38 681.611 L1815.82 681.611 L1815.26 681.611 L1814.7 681.611 L1814.14 681.611 L1813.58 681.611 L1813.02 681.611 L1812.46 681.611 L1811.9 681.611 L1811.35 681.611 L1810.79 681.611 L1810.23 681.611 L1809.67 681.611 L1809.11 681.611 L1808.55 681.611 L1807.99 681.611 L1807.43 681.611 L1806.87 681.611 L1806.31 681.611 L1805.75 681.611 L1805.19 681.611 L1804.63 681.611 L1804.08 681.611 L1803.52 681.611 L1802.96 681.611 L1802.4 681.611 L1801.84 681.611 L1801.28 681.611 L1800.72 681.611 L1800.16 681.611 L1799.6 681.611 L1799.04 681.611 L1798.48 681.611 L1797.92 681.611 L1797.36 681.611 L1796.8 681.611 L1796.25 681.611 L1795.69 681.611 L1795.13 681.611 L1794.57 681.611 L1794.01 681.611 L1793.45 681.611 L1792.89 681.611 L1792.33 681.611 L1791.77 681.611 L1791.21 681.611 L1790.65 681.611 L1790.09 681.611 L1789.53 681.611 L1788.98 681.611 L1788.42 681.611 L1787.86 681.611 L1787.3 681.611 L1786.74 681.611 L1786.18 681.611 L1785.62 681.611 L1785.06 681.611 L1784.5 681.611 L1783.94 681.611 L1783.38 681.611 L1782.82 681.611 L1782.26 681.611 L1781.71 681.611 L1781.15 681.611 L1780.59 681.611 L1780.03 681.611 L1779.47 681.611 L1778.91 681.611 L1778.35 681.611 L1777.79 681.611 L1777.23 681.611 L1776.67 681.611 L1776.11 681.611 L1775.55 681.611 L1774.99 681.611 L1774.43 681.611 L1773.88 681.611 L1773.32 681.611 L1772.76 681.611 L1772.2 681.611 L1771.64 681.611 L1771.08 681.611 L1770.52 681.611 L1769.96 681.611 L1769.4 681.611 L1768.84 681.611 L1768.28 681.611 L1767.72 681.611 L1767.16 681.611 L1766.61 681.611 L1766.05 681.611 L1765.49 681.611 L1764.93 681.611 L1764.37 681.611 L1763.81 681.611 L1763.25 681.611 L1762.69 681.611 L1762.13 681.611 L1761.57 681.611 L1761.01 681.611 L1760.45 681.611 L1759.89 681.611 L1759.34 681.611 L1758.78 681.611 L1758.22 681.611 L1757.66 681.611 L1757.1 681.611 L1756.54 681.611 L1755.98 681.611 L1755.42 681.611 L1754.86 681.611 L1754.3 681.611 L1753.74 681.611 L1753.18 681.611 L1752.62 681.611 L1752.06 681.611 L1751.51 681.611 L1750.95 681.611 L1750.39 681.611 L1749.83 681.611 L1749.27 681.611 L1748.71 681.611 L1748.15 681.611 L1747.59 681.611 L1747.03 681.611 L1746.47 681.611 L1745.91 681.611 L1745.35 681.611 L1744.79 681.611 L1744.24 681.611 L1743.68 681.611 L1743.12 681.611 L1742.56 681.611 L1742 681.611 L1741.44 681.611 L1740.88 681.611 L1740.32 681.611 L1739.76 681.611 L1739.2 681.611 L1738.64 681.611 L1738.08 681.611 L1737.52 681.611 L1736.97 681.611 L1736.41 681.611 L1735.85 681.611 L1735.29 681.611 L1734.73 681.611 L1734.17 681.611 L1733.61 681.611 L1733.05 681.611 L1732.49 681.611 L1731.93 681.611 L1731.37 681.611 L1730.81 681.611 L1730.25 681.611 L1729.69 681.611 L1729.14 681.611 L1728.58 681.611 L1728.02 681.611 L1727.46 681.611 L1726.9 681.611 L1726.34 681.611 L1725.78 681.611 L1725.22 681.611 L1724.66 681.611 L1724.1 681.611 L1723.54 681.611 L1722.98 681.611 L1722.42 681.611 L1721.87 681.611 L1721.31 681.611 L1720.75 681.611 L1720.19 681.611 L1719.63 681.611 L1719.07 681.611 L1718.51 681.611 L1717.95 681.611 L1717.39 681.611 L1716.83 681.611 L1716.27 681.611 L1715.71 681.611 L1715.15 681.611 L1714.6 681.611 L1714.04 681.611 L1713.48 681.611 L1712.92 681.611 L1712.36 681.611 L1711.8 681.611 L1711.24 681.611 L1710.68 681.611 L1710.12 681.611 L1709.56 681.611 L1709 681.611 L1708.44 681.611 L1707.88 681.611 L1707.32 681.611 L1706.77 681.611 L1706.21 681.611 L1705.65 681.611 L1705.09 681.611 L1704.53 681.611 L1703.97 681.611 L1703.41 681.611 L1702.85 681.611 L1702.29 681.611 L1701.73 681.611 L1701.17 681.611 L1700.61 681.611 L1700.05 681.611 L1699.5 681.611 L1698.94 681.611 L1698.38 681.611 L1697.82 681.611 L1697.26 681.611 L1696.7 681.611 L1696.14 681.611 L1695.58 681.611 L1695.02 681.611 L1694.46 681.611 L1693.9 681.611 L1693.34 681.611 L1692.78 681.611 L1692.23 681.611 L1691.67 681.611 L1691.11 681.611 L1690.55 681.611 L1689.99 681.611 L1689.43 681.611 L1688.87 681.611 L1688.31 681.611 L1687.75 681.611 L1687.19 681.611 L1686.63 681.611 L1686.07 681.611 L1685.51 681.611 L1684.95 681.611 L1684.4 681.611 L1683.84 681.611 L1683.28 681.611 L1682.72 681.611 L1682.16 681.611 L1681.6 681.611 L1681.04 681.611 L1680.48 681.611 L1679.92 681.611 L1679.36 681.611 L1678.8 681.611 L1678.24 681.611 L1677.68 681.611 L1677.13 681.611 L1676.57 681.611 L1676.01 681.611 L1675.45 681.611 L1674.89 681.611 L1674.33 681.611 L1673.77 681.611 L1673.21 681.611 L1672.65 681.611 L1672.09 681.611 L1671.53 681.611 L1670.97 681.611 L1670.41 681.611 L1669.85 681.611 L1669.3 681.611 L1668.74 681.611 L1668.18 681.611 L1667.62 681.611 L1667.06 681.611 L1666.5 681.611 L1665.94 681.611 L1665.38 681.611 L1664.82 681.611 L1664.26 681.611 L1663.7 681.611 L1663.14 681.611 L1662.58 681.611 L1662.03 681.611 L1661.47 681.611 L1660.91 681.611 L1660.35 681.611 L1659.79 681.611 L1659.23 681.611 L1658.67 681.611 L1658.11 681.611 L1657.55 681.611 L1656.99 681.611 L1656.43 681.611 L1655.87 681.611 L1655.31 681.611 L1654.76 681.611 L1654.2 681.611 L1653.64 681.611 L1653.08 681.611 L1652.52 681.611 L1651.96 681.611 L1651.4 681.611 L1650.84 681.611 L1650.28 681.611 L1649.72 681.611 L1649.16 681.611 L1648.6 681.611 L1648.04 681.611 L1647.48 681.611 L1646.93 681.611 L1646.37 681.611 L1645.81 681.611 L1645.25 681.611 L1644.69 681.611 L1644.13 681.611 L1643.57 681.611 L1643.01 681.611 L1642.45 681.611 L1641.89 681.611 L1641.33 681.611 L1640.77 681.611 L1640.21 681.611 L1639.66 681.611 L1639.1 681.611 L1638.54 681.611 L1637.98 681.611 L1637.42 681.611 L1636.86 681.611 L1636.3 681.611 L1635.74 681.611 L1635.18 681.611 L1634.62 681.611 L1634.06 681.611 L1633.5 681.611 L1632.94 681.611 L1632.39 681.611 L1631.83 681.611 L1631.27 681.611 L1630.71 681.611 L1630.15 681.611 L1629.59 681.611 L1629.03 681.611 L1628.47 681.611 L1627.91 681.611 L1627.35 681.611 L1626.79 681.611 L1626.23 681.611 L1625.67 681.611 L1625.11 681.611 L1624.56 681.611 L1624 681.611 L1623.44 681.611 L1622.88 681.611 L1622.32 681.611 L1621.76 681.611 L1621.2 681.611 L1620.64 681.611 L1620.08 681.611 L1619.52 681.611 L1618.96 681.611 L1618.4 681.611 L1617.84 681.611 L1617.29 681.611 L1616.73 681.611 L1616.17 681.611 L1615.61 681.611 L1615.05 681.611 L1614.49 681.611 L1613.93 681.611 L1613.37 681.611 L1612.81 681.611 L1612.25 681.611 L1611.69 681.611 L1611.13 681.611 L1610.57 681.611 L1610.02 681.611 L1609.46 681.611 L1608.9 681.611 L1608.34 681.611 L1607.78 681.611 L1607.22 681.611 L1606.66 681.611 L1606.1 681.611 L1605.54 681.611 L1604.98 681.611 L1604.42 681.611 L1603.86 681.611 L1603.3 681.611 L1602.74 681.611 L1602.19 681.611 L1601.63 681.611 L1601.07 681.611 L1600.51 681.611 L1599.95 681.611 L1599.39 681.611 L1598.83 681.611 L1598.27 681.611 L1597.71 681.611 L1597.15 681.611 L1596.59 681.611 L1596.03 681.611 L1595.47 681.611 L1594.92 681.611 L1594.36 681.611 L1593.8 681.611 L1593.24 681.611 L1592.68 681.611 L1592.12 681.611 L1591.56 681.611 L1591 681.611 L1590.44 681.611 L1589.88 681.611 L1589.32 681.611 L1588.76 681.611 L1588.2 681.611 L1587.65 681.611 L1587.09 681.611 L1586.53 681.611 L1585.97 681.611 L1585.41 681.611 L1584.85 681.611 L1584.29 681.611 L1583.73 681.611 L1583.17 681.611 L1582.61 681.611 L1582.05 681.611 L1581.49 681.611 L1580.93 681.611 L1580.37 681.611 L1579.82 681.611 L1579.26 681.611 L1578.7 681.611 L1578.14 681.611 L1577.58 681.611 L1577.02 681.611 L1576.46 681.611 L1575.9 681.611 L1575.34 681.611 L1574.78 681.611 L1574.22 681.611 L1573.66 681.611 L1573.1 681.611 L1572.55 681.611 L1571.99 681.611 L1571.43 681.611 L1570.87 681.611 L1570.31 681.611 L1569.75 681.611 L1569.19 681.611 L1568.63 681.611 L1568.07 681.611 L1567.51 681.611 L1566.95 681.611 L1566.39 681.611 L1565.83 681.611 L1565.28 681.611 L1564.72 681.611 L1564.16 681.611 L1563.6 681.611 L1563.04 681.611 L1562.48 681.611 L1561.92 681.611 L1561.36 681.611 L1560.8 681.611 L1560.24 681.611 L1559.68 681.611 L1559.12 681.611 L1558.56 681.611 L1558 681.611 L1557.45 681.611 L1556.89 681.611 L1556.33 681.611 L1555.77 681.611 L1555.21 681.611 L1554.65 681.611 L1554.09 681.611 L1553.53 681.611 L1552.97 681.611 L1552.41 681.611 L1551.85 681.611 L1551.29 681.611 L1550.73 681.611 L1550.18 681.611 L1549.62 681.611 L1549.06 681.611 L1548.5 681.611 L1547.94 681.611 L1547.38 681.611 L1546.82 681.611 L1546.26 681.611 L1545.7 681.611 L1545.14 681.611 L1544.58 681.611 L1544.02 681.611 L1543.46 681.611 L1542.9 681.611 L1542.35 681.611 L1541.79 681.611 L1541.23 681.611 L1540.67 681.611 L1540.11 681.611 L1539.55 681.611 L1538.99 681.611 L1538.43 681.611 L1537.87 681.611 L1537.31 681.611 L1536.75 681.611 L1536.19 681.611 L1535.63 681.611 L1535.08 681.611 L1534.52 681.611 L1533.96 681.611 L1533.4 681.611 L1532.84 681.611 L1532.28 681.611 L1531.72 681.611 L1531.16 681.611 L1530.6 681.611 L1530.04 681.611 L1529.48 681.611 L1528.92 681.611 L1528.36 681.611 L1527.81 681.611 L1527.25 681.611 L1526.69 681.611 L1526.13 681.611 L1525.57 681.611 L1525.01 681.611 L1524.45 681.611 L1523.89 681.611 L1523.33 681.611 L1522.77 681.611 L1522.21 681.611 L1521.65 681.611 L1521.09 681.611 L1520.53 681.611 L1519.98 681.611 L1519.42 681.611 L1518.86 681.611 L1518.3 681.611 L1517.74 681.611 L1517.18 681.611 L1516.62 681.611 L1516.06 681.611 L1515.5 681.611 L1514.94 681.611 L1514.38 681.611 L1513.82 681.611 L1513.26 681.611 L1512.71 681.611 L1512.15 681.611 L1511.59 681.611 L1511.03 681.611 L1510.47 681.611 L1509.91 681.611 L1509.35 681.611 L1508.79 681.611 L1508.23 681.611 L1507.67 681.611 L1507.11 681.611 L1506.55 681.611 L1505.99 681.611 L1505.44 681.611 L1504.88 681.611 L1504.32 681.611 L1503.76 681.611 L1503.2 681.611 L1502.64 681.611 L1502.08 681.611 L1501.52 681.611 L1500.96 681.611 L1500.4 681.611 L1499.84 681.611 L1499.28 681.611 L1498.72 681.611 L1498.16 681.611 L1497.61 681.611 L1497.05 681.611 L1496.49 681.611 L1495.93 681.611 L1495.37 681.611 L1494.81 681.611 L1494.25 681.611 L1493.69 681.611 L1493.13 681.611 L1492.57 681.611 L1492.01 681.611 L1491.45 681.611 L1490.89 681.611 L1490.34 681.611 L1489.78 681.611 L1489.22 681.611 L1488.66 681.611 L1488.1 681.611 L1487.54 681.611 L1486.98 681.611 L1486.42 681.611 L1485.86 681.611 L1485.3 681.611 L1484.74 681.611 L1484.18 681.611 L1483.62 681.611 L1483.07 681.611 L1482.51 681.611 L1481.95 681.611 L1481.39 681.611 L1480.83 681.611 L1480.27 681.611 L1479.71 681.611 L1479.15 681.611 L1478.59 681.611 L1478.03 681.611 L1477.47 681.611 L1476.91 681.611 L1476.35 681.611 L1475.79 681.611 L1475.24 681.611 L1474.68 681.611 L1474.12 681.611 L1473.56 681.611 L1473 681.611 L1472.44 681.611 L1471.88 681.611 L1471.32 681.611 L1470.76 681.611 L1470.2 681.611 L1469.64 681.611 L1469.08 681.611 L1468.52 681.611 L1467.97 681.611 L1467.41 681.611 L1466.85 681.611 L1466.29 681.611 L1465.73 681.611 L1465.17 681.611 L1464.61 681.611 L1464.05 681.611 L1463.49 681.611 L1462.93 681.611 L1462.37 681.611 L1461.81 681.611 L1461.25 681.611 L1460.7 681.611 L1460.14 681.611 L1459.58 681.611 L1459.02 681.611 L1458.46 681.611 L1457.9 681.611 L1457.34 681.611 L1456.78 681.611 L1456.22 681.611 L1455.66 681.611 L1455.1 681.611 L1454.54 681.611 L1453.98 681.611 L1453.42 681.611 L1452.87 681.611 L1452.31 681.611 L1451.75 681.611 L1451.19 681.611 L1450.63 681.611 L1450.07 681.611 L1449.51 681.611 L1448.95 681.611 L1448.39 681.611 L1447.83 681.611 L1447.27 681.611 L1446.71 681.611 L1446.15 681.611 L1445.6 681.611 L1445.04 681.611 L1444.48 681.611 L1443.92 681.611 L1443.36 681.611 L1442.8 681.611 L1442.24 681.611 L1441.68 681.611 L1441.12 681.611 L1440.56 681.611 L1440 681.611 L1439.44 681.611 L1438.88 681.611 L1438.33 681.611 L1437.77 681.611 L1437.21 681.611 L1436.65 681.611 L1436.09 681.611 L1435.53 681.611 L1434.97 681.611 L1434.41 681.611 L1433.85 681.611 L1433.29 681.611 L1432.73 681.611 L1432.17 681.611 L1431.61 681.611 L1431.05 681.611 L1430.5 681.611 L1429.94 681.611 L1429.38 681.611 L1428.82 681.611 L1428.26 681.611 L1427.7 681.611 L1427.14 681.611 L1426.58 681.611 L1426.02 681.611 L1425.46 681.611 L1424.9 681.611 L1424.34 681.611 L1423.78 681.611 L1423.23 681.611 L1422.67 681.611 L1422.11 681.611 L1421.55 681.611 L1420.99 681.611 L1420.43 681.611 L1419.87 681.611 L1419.31 681.611 L1418.75 681.611 L1418.19 681.611 L1417.63 681.611 L1417.07 681.611 L1416.51 681.611 L1415.95 681.611 L1415.4 681.611 L1414.84 681.611 L1414.28 681.611 L1413.72 681.611 L1413.16 681.611 L1412.6 681.611 L1412.04 681.611 L1411.48 681.611 L1410.92 681.611 L1410.36 681.611 L1409.8 681.611 L1409.24 681.611 L1408.68 681.611 L1408.13 681.611 L1407.57 681.611 L1407.01 681.611 L1406.45 681.611 L1405.89 681.611 L1405.33 681.611 L1404.77 681.611 L1404.21 681.611 L1403.65 681.611 L1403.09 681.611 L1402.53 681.611 L1401.97 681.611 L1401.41 681.611 L1400.86 681.611 L1400.3 681.611 L1399.74 681.611 L1399.18 681.611 L1398.62 681.611 L1398.06 681.611 L1397.5 681.611 L1396.94 681.611 L1396.38 681.611 L1395.82 681.611 L1395.26 681.611 L1394.7 681.611 L1394.14 681.611 L1393.58 681.611 L1393.03 681.611 L1392.47 681.611 L1391.91 681.611 L1391.35 681.611 L1390.79 681.611 L1390.23 681.611 L1389.67 681.611 L1389.11 681.611 L1388.55 681.611 L1387.99 681.611 L1387.43 681.611 L1386.87 681.611 L1386.31 681.611 L1385.76 681.611 L1385.2 681.611 L1384.64 681.611 L1384.08 681.611 L1383.52 681.611 L1382.96 681.611 L1382.4 681.611 L1381.84 681.611 L1381.28 681.611 L1380.72 681.611 L1380.16 681.611 L1379.6 681.611 L1379.04 681.611 L1378.49 681.611 L1377.93 681.611 L1377.37 681.611 L1376.81 681.611 L1376.25 681.611 L1375.69 681.611 L1375.13 681.611 L1374.57 681.611 L1374.01 681.611 L1373.45 681.611 L1372.89 681.611 L1372.33 681.611 L1371.77 681.611 L1371.21 681.611 L1370.66 681.611 L1370.1 681.611 L1369.54 681.611 L1368.98 681.611 L1368.42 681.611 L1367.86 681.611 L1367.3 681.611 L1366.74 681.611 L1366.18 681.611 L1365.62 681.611 L1365.06 681.611 L1364.5 681.611 L1363.94 681.611 L1363.39 681.611 L1362.83 681.611 L1362.27 681.611 L1361.71 681.611 L1361.15 681.611 L1360.59 681.611 L1360.03 681.611 L1359.47 681.611 L1358.91 681.611 L1358.35 681.611 L1357.79 681.611 L1357.23 681.611 L1356.67 681.611 L1356.12 681.611 L1355.56 681.611 L1355 681.611 L1354.44 681.611 L1353.88 681.611 L1353.32 681.611 L1352.76 681.611 L1352.2 681.611 L1351.64 681.611 L1351.08 681.611 L1350.52 681.611 L1349.96 681.611 L1349.4 681.611 L1348.84 681.611 L1348.29 681.611 L1347.73 681.611 L1347.17 681.611 L1346.61 681.611 L1346.05 681.611 L1345.49 681.611 L1344.93 681.611 L1344.37 681.611 L1343.81 681.611 L1343.25 681.611 L1342.69 681.611 L1342.13 681.611 L1341.57 681.611 L1341.02 681.611 L1340.46 681.611 L1339.9 681.611 L1339.34 681.611 L1338.78 681.611 L1338.22 681.611 L1337.66 681.611 L1337.1 681.611 L1336.54 681.611 L1335.98 681.611 L1335.42 681.611 L1334.86 681.611 L1334.3 681.611 L1333.75 681.611 L1333.19 681.611 L1332.63 681.611 L1332.07 681.611 L1331.51 681.611 L1330.95 681.611 L1330.39 681.611 L1329.83 681.611 L1329.27 681.611 L1328.71 681.611 L1328.15 681.611 L1327.59 681.611 L1327.03 681.611 L1326.47 681.611 L1325.92 681.611 L1325.36 681.611 L1324.8 681.611 L1324.24 681.611 L1323.68 681.611 L1323.12 681.611 L1322.56 681.611 L1322 681.611 L1321.44 681.611 L1320.88 681.611 L1320.32 681.611 L1319.76 681.611 L1319.2 681.611 L1318.65 681.611 L1318.09 681.611 L1317.53 681.611 L1316.97 681.611 L1316.41 681.611 L1315.85 681.611 L1315.29 681.611 L1314.73 681.611 L1314.17 681.611 L1313.61 681.611 L1313.05 681.611 L1312.49 681.611 L1311.93 681.611 L1311.38 681.611 L1310.82 681.611 L1310.26 681.611 L1309.7 681.611 L1309.14 681.611 L1308.58 681.611 L1308.02 681.611 L1307.46 681.611 L1306.9 681.611 L1306.34 681.611 L1305.78 681.611 L1305.22 681.611 L1304.66 681.611 L1304.1 681.611 L1303.55 681.611 L1302.99 681.611 L1302.43 681.611 L1301.87 681.611 L1301.31 681.611 L1300.75 681.611 L1300.19 681.611 L1299.63 681.611 L1299.07 681.611 L1298.51 681.611 L1297.95 681.611 L1297.39 681.611 L1296.83 681.611 L1296.28 681.611 L1295.72 681.611 L1295.16 681.611 L1294.6 681.611 L1294.04 681.611 L1293.48 681.611 L1292.92 681.611 L1292.36 681.611 L1291.8 681.611 L1291.24 681.611 L1290.68 681.611 L1290.12 681.611 L1289.56 681.611 L1289 681.611 L1288.45 681.611 L1287.89 681.611 L1287.33 681.611 L1286.77 681.611 L1286.21 681.611 L1285.65 681.611 L1285.09 681.611 L1284.53 681.611 L1283.97 681.611 L1283.41 681.611 L1282.85 681.611 L1282.29 681.611 L1281.73 681.611 L1281.18 681.611 L1280.62 681.611 L1280.06 681.611 L1279.5 681.611 L1278.94 681.611 L1278.38 681.611 L1277.82 681.611 L1277.26 681.611 L1276.7 681.611 L1276.14 681.611 L1275.58 681.611 L1275.02 681.611 L1274.46 681.611 L1273.91 681.611 L1273.35 681.611 L1272.79 681.611 L1272.23 681.611 L1271.67 681.611 L1271.11 681.611 L1270.55 681.611 L1269.99 681.611 L1269.43 681.611 L1268.87 681.611 L1268.31 681.611 L1267.75 681.611 L1267.19 681.611 L1266.63 681.611 L1266.08 681.611 L1265.52 681.611 L1264.96 681.611 L1264.4 681.611 L1263.84 681.611 L1263.28 681.611 L1262.72 681.611 L1262.16 681.611 L1261.6 681.611 L1261.04 681.611 L1260.48 681.611 L1259.92 681.611 L1259.36 681.611 L1258.81 681.611 L1258.25 681.611 L1257.69 681.611 L1257.13 681.611 L1256.57 681.611 L1256.01 681.611 L1255.45 681.611 L1254.89 681.611 L1254.33 681.611 L1253.77 681.611 L1253.21 681.611 L1252.65 681.611 L1252.09 681.611 L1251.54 681.611 L1250.98 681.611 L1250.42 681.611 L1249.86 681.611 L1249.3 681.611 L1248.74 681.611 L1248.18 681.611 L1247.62 681.611 L1247.06 681.611 L1246.5 681.611 L1245.94 681.611 L1245.38 681.611 L1244.82 681.611 L1244.26 681.611 L1243.71 681.611 L1243.15 681.611 L1242.59 681.611 L1242.03 681.611 L1241.47 681.611 L1240.91 681.611 L1240.35 681.611 L1239.79 681.611 L1239.23 681.611 L1238.67 681.611 L1238.11 681.611 L1237.55 681.611 L1236.99 681.611 L1236.44 681.611 L1235.88 681.611 L1235.32 681.611 L1234.76 681.611 L1234.2 681.611 L1233.64 681.611 L1233.08 681.611 L1232.52 681.611 L1231.96 681.611 L1231.4 681.611 L1230.84 681.611 L1230.28 681.611 L1229.72 681.611 L1229.17 681.611 L1228.61 681.611 L1228.05 681.611 L1227.49 681.611 L1226.93 681.611 L1226.37 681.611 L1225.81 681.611 L1225.25 681.611 L1224.69 681.611 L1224.13 681.611 L1223.57 681.611 L1223.01 681.611 L1222.45 681.611 L1221.89 681.611 L1221.34 681.611 L1220.78 681.611 L1220.22 681.611 L1219.66 681.611 L1219.1 681.611 L1218.54 681.611 L1217.98 681.611 L1217.42 681.611 L1216.86 681.611 L1216.3 681.611 L1215.74 681.611 L1215.18 681.611 L1214.62 681.611 L1214.07 681.611 L1213.51 681.611 L1212.95 681.611 L1212.39 681.611 L1211.83 681.611 L1211.27 681.611 L1210.71 681.611 L1210.15 681.611 L1209.59 681.611 L1209.03 681.611 L1208.47 681.611 L1207.91 681.611 L1207.35 681.611 L1206.8 681.611 L1206.24 681.611 L1205.68 681.611 L1205.12 681.611 L1204.56 681.611 L1204 681.611 L1203.44 681.611 L1202.88 681.611 L1202.32 681.611 L1201.76 681.611 L1201.2 681.611 L1200.64 681.611 L1200.08 681.611 L1199.52 681.611 L1198.97 681.611 L1198.41 681.611 L1197.85 681.611 L1197.29 681.611 L1196.73 681.611 L1196.17 681.611 L1195.61 681.611 L1195.05 681.611 L1194.49 681.611 L1193.93 681.611 L1193.37 681.611 L1192.81 681.611 L1192.25 681.611 L1191.7 681.611 L1191.14 681.611 L1190.58 681.611 L1190.02 681.611 L1189.46 681.611 L1188.9 681.611 L1188.34 681.611 L1187.78 681.611 L1187.22 681.611 L1186.66 681.611 L1186.1 681.611 L1185.54 681.611 L1184.98 681.611 L1184.43 681.611 L1183.87 681.611 L1183.31 681.611 L1182.75 681.611 L1182.19 681.611 L1181.63 681.611 L1181.07 681.611 L1180.51 681.611 L1179.95 681.611 L1179.39 681.611 L1178.83 681.611 L1178.27 681.611 L1177.71 681.611 L1177.15 681.611 L1176.6 681.611 L1176.04 681.611 L1175.48 681.611 L1174.92 681.611 L1174.36 681.611 L1173.8 681.611 L1173.24 681.611 L1172.68 681.611 L1172.12 681.611 L1171.56 681.611 L1171 681.611 L1170.44 681.611 L1169.88 681.611 L1169.33 681.611 L1168.77 681.611 L1168.21 681.611 L1167.65 681.611 L1167.09 681.611 L1166.53 681.611 L1165.97 681.611 L1165.41 681.611 L1164.85 681.611 L1164.29 681.611 L1163.73 681.611 L1163.17 681.611 L1162.61 681.611 L1162.05 681.611 L1161.5 681.611 L1160.94 681.611 L1160.38 681.611 L1159.82 681.611 L1159.26 681.611 L1158.7 681.611 L1158.14 681.611 L1157.58 681.611 L1157.02 681.611 L1156.46 681.611 L1155.9 681.611 L1155.34 681.611 L1154.78 681.611 L1154.23 681.611 L1153.67 681.611 L1153.11 681.611 L1152.55 681.611 L1151.99 681.611 L1151.43 681.611 L1150.87 681.611 L1150.31 681.611 L1149.75 681.611 L1149.19 681.611 L1148.63 681.611 L1148.07 681.611 L1147.51 681.611 L1146.96 681.611 L1146.4 681.611 L1145.84 681.611 L1145.28 681.611 L1144.72 681.611 L1144.16 681.611 L1143.6 681.611 L1143.04 681.611 L1142.48 681.611 L1141.92 681.611 L1141.36 681.611 L1140.8 681.611 L1140.24 681.611 L1139.68 681.611 L1139.13 681.611 L1138.57 681.611 L1138.01 681.611 L1137.45 681.611 L1136.89 681.611 L1136.33 681.611 L1135.77 681.611 L1135.21 681.611 L1134.65 681.611 L1134.09 681.611 L1133.53 681.611 L1132.97 681.611 L1132.41 681.611 L1131.86 681.611 L1131.3 681.611 L1130.74 681.611 L1130.18 681.611 L1129.62 681.611 L1129.06 681.611 L1128.5 681.611 L1127.94 681.611 L1127.38 681.611 L1126.82 681.611 L1126.26 681.611 L1125.7 681.611 L1125.14 681.611 L1124.59 681.611 L1124.03 681.611 L1123.47 681.611 L1122.91 681.611 L1122.35 681.611 L1121.79 681.611 L1121.23 681.611 L1120.67 681.611 L1120.11 681.611 L1119.55 681.611 L1118.99 681.611 L1118.43 681.611 L1117.87 681.611 L1117.31 681.611 L1116.76 681.611 L1116.2 681.611 L1115.64 681.611 L1115.08 681.611 L1114.52 681.611 L1113.96 681.611 L1113.4 681.611 L1112.84 681.611 L1112.28 681.611 L1111.72 681.611 L1111.16 681.611 L1110.6 681.611 L1110.04 681.611 L1109.49 681.611 L1108.93 681.611 L1108.37 681.611 L1107.81 681.611 L1107.25 681.611 L1106.69 681.611 L1106.13 681.611 L1105.57 681.611 L1105.01 681.611 L1104.45 681.611 L1103.89 681.611 L1103.33 681.611 L1102.77 681.611 L1102.22 681.611 L1101.66 681.611 L1101.1 681.611 L1100.54 681.611 L1099.98 681.611 L1099.42 681.611 L1098.86 681.611 L1098.3 681.611 L1097.74 681.611 L1097.18 681.611 L1096.62 681.611 L1096.06 681.611 L1095.5 681.611 L1094.94 681.611 L1094.39 681.611 L1093.83 681.611 L1093.27 681.611 L1092.71 681.611 L1092.15 681.611 L1091.59 681.611 L1091.03 681.611 L1090.47 681.611 L1089.91 681.611 L1089.35 681.611 L1088.79 681.611 L1088.23 681.611 L1087.67 681.611 L1087.12 681.611 L1086.56 681.611 L1086 681.611 L1085.44 681.611 L1084.88 681.611 L1084.32 681.611 L1083.76 681.611 L1083.2 681.611 L1082.64 681.611 L1082.08 681.611 L1081.52 681.611 L1080.96 681.611 L1080.4 681.611 L1079.85 681.611 L1079.29 681.611 L1078.73 681.611 L1078.17 681.611 L1077.61 681.611 L1077.05 681.611 L1076.49 681.611 L1075.93 681.611 L1075.37 681.611 L1074.81 681.611 L1074.25 681.611 L1073.69 681.611 L1073.13 681.611 L1072.57 681.611 L1072.02 681.611 L1071.46 681.611 L1070.9 681.611 L1070.34 681.611 L1069.78 681.611 L1069.22 681.611 L1068.66 681.611 L1068.1 681.611 L1067.54 681.611 L1066.98 681.611 L1066.42 681.611 L1065.86 681.611 L1065.3 681.611 L1064.75 681.611 L1064.19 681.611 L1063.63 681.611 L1063.07 681.611 L1062.51 681.611 L1061.95 681.611 L1061.39 681.611 L1060.83 681.611 L1060.27 681.611 L1059.71 681.611 L1059.15 681.611 L1058.59 681.611 L1058.03 681.611 L1057.48 681.611 L1056.92 681.611 L1056.36 681.611 L1055.8 681.611 L1055.24 681.611 L1054.68 681.611 L1054.12 681.611 L1053.56 681.611 L1053 681.611 L1052.44 681.611 L1051.88 681.611 L1051.32 681.611 L1050.76 681.611 L1050.2 681.611 L1049.65 681.611 L1049.09 681.611 L1048.53 681.611 L1047.97 681.611 L1047.41 681.611 L1046.85 681.611 L1046.29 681.611 L1045.73 681.611 L1045.17 681.611 L1044.61 681.611 L1044.05 681.611 L1043.49 681.611 L1042.93 681.611 L1042.38 681.611 L1041.82 681.611 L1041.26 681.611 L1040.7 681.611 L1040.14 681.611 L1039.58 681.611 L1039.02 681.611 L1038.46 681.611 L1037.9 681.611 L1037.34 681.611 L1036.78 681.611 L1036.22 681.611 L1035.66 681.611 L1035.1 681.611 L1034.55 681.611 L1033.99 681.611 L1033.43 681.611 L1032.87 681.611 L1032.31 681.611 L1031.75 681.611 L1031.19 681.611 L1030.63 681.611 L1030.07 681.611 L1029.51 681.611 L1028.95 681.611 L1028.39 681.611 L1027.83 681.611 L1027.28 681.611 L1026.72 681.611 L1026.16 681.611 L1025.6 681.611 L1025.04 681.611 L1024.48 681.611 L1023.92 681.611 L1023.36 681.611 L1022.8 681.611 L1022.24 681.611 L1021.68 681.611 L1021.12 681.611 L1020.56 681.611 L1020.01 681.611 L1019.45 681.611 L1018.89 681.611 L1018.33 681.611 L1017.77 681.611 L1017.21 681.611 L1016.65 681.611 L1016.09 681.611 L1015.53 681.611 L1014.97 681.611 L1014.41 681.611 L1013.85 681.611 L1013.29 681.611 L1012.73 681.611 L1012.18 681.611 L1011.62 681.611 L1011.06 681.611 L1010.5 681.611 L1009.94 681.611 L1009.38 681.611 L1008.82 681.611 L1008.26 681.611 L1007.7 681.611 L1007.14 681.611 L1006.58 681.611 L1006.02 681.611 L1005.46 681.611 L1004.91 681.611 L1004.35 681.611 L1003.79 681.611 L1003.23 681.611 L1002.67 681.611 L1002.11 681.611 L1001.55 681.611 L1000.99 681.611 L1000.43 681.611 L999.872 681.611 L999.313 681.611 L998.754 681.611 L998.194 681.611 L997.635 681.611 L997.076 681.611 L996.517 681.611 L995.957 681.611 L995.398 681.611 L994.839 681.611 L994.28 681.611 L993.72 681.611 L993.161 681.611 L992.602 681.611 L992.043 681.611 L991.483 681.611 L990.924 681.611 L990.365 681.611 L989.806 681.611 L989.246 681.611 L988.687 681.611 L988.128 681.611 L987.569 681.611 L987.009 681.611 L986.45 681.611 L985.891 681.611 L985.332 681.611 L984.772 681.611 L984.213 681.611 L983.654 681.611 L983.095 681.611 L982.535 681.611 L981.976 681.611 L981.417 681.611 L980.858 681.611 L980.298 681.611 L979.739 681.611 L979.18 681.611 L978.621 681.611 L978.061 681.611 L977.502 681.611 L976.943 681.611 L976.384 681.611 L975.824 681.611 L975.265 681.611 L974.706 681.611 L974.147 681.611 L973.587 681.611 L973.028 681.611 L972.469 681.611 L971.91 681.611 L971.35 681.611 L970.791 681.611 L970.232 681.611 L969.673 681.611 L969.113 681.611 L968.554 681.611 L967.995 681.611 L967.436 681.611 L966.876 681.611 L966.317 681.611 L965.758 681.611 L965.199 681.611 L964.639 681.611 L964.08 681.611 L963.521 681.611 L962.962 681.611 L962.402 681.611 L961.843 681.611 L961.284 681.611 L960.725 681.611 L960.165 681.611 L959.606 681.611 L959.047 681.611 L958.488 681.611 L957.928 681.611 L957.369 681.611 L956.81 681.611 L956.251 681.611 L955.691 681.611 L955.132 681.611 L954.573 681.611 L954.014 681.611 L953.454 681.611 L952.895 681.611 L952.336 681.611 L951.777 681.611 L951.217 681.611 L950.658 681.611 L950.099 681.611 L949.54 681.611 L948.98 681.611 L948.421 681.611 L947.862 681.611 L947.303 681.611 L946.743 681.611 L946.184 681.611 L945.625 681.611 L945.066 681.611 L944.506 681.611 L943.947 681.611 L943.388 681.611 L942.829 681.611 L942.269 681.611 L941.71 681.611 L941.151 681.611 L940.592 681.611 L940.032 681.611 L939.473 681.611 L938.914 681.611 L938.355 681.611 L937.795 681.611 L937.236 681.611 L936.677 681.611 L936.118 681.611 L935.558 681.611 L934.999 681.611 L934.44 681.611 L933.881 681.611 L933.321 681.611 L932.762 681.611 L932.203 681.611 L931.644 681.611 L931.084 681.611 L930.525 681.611 L929.966 681.611 L929.406 681.611 L928.847 681.611 L928.288 681.611 L927.729 681.611 L927.169 681.611 L926.61 681.611 L926.051 681.611 L925.492 681.611 L924.932 681.611 L924.373 681.611 L923.814 681.611 L923.255 681.611 L922.695 681.611 L922.136 681.611 L921.577 681.611 L921.018 681.611 L920.458 681.611 L919.899 681.611 L919.34 681.611 L918.781 681.611 L918.221 681.611 L917.662 681.611 L917.103 681.611 L916.544 681.611 L915.984 681.611 L915.425 681.611 L914.866 681.611 L914.307 681.611 L913.747 681.611 L913.188 681.611 L912.629 681.611 L912.07 681.611 L911.51 681.611 L910.951 681.611 L910.392 681.611 L909.833 681.611 L909.273 681.611 L908.714 681.611 L908.155 681.611 L907.596 681.611 L907.036 681.611 L906.477 681.611 L905.918 681.611 L905.359 681.611 L904.799 681.611 L904.24 681.611 L903.681 681.611 L903.122 681.611 L902.562 681.611 L902.003 681.611 L901.444 681.611 L900.885 681.611 L900.325 681.611 L899.766 681.611 L899.207 681.611 L898.648 681.611 L898.088 681.611 L897.529 681.611 L896.97 681.611 L896.411 681.611 L895.851 681.611 L895.292 681.611 L894.733 681.611 L894.174 681.611 L893.614 681.611 L893.055 681.611 L892.496 681.611 L891.937 681.611 L891.377 681.611 L890.818 681.611 L890.259 681.611 L889.7 681.611 L889.14 681.611 L888.581 681.611 L888.022 681.611 L887.463 681.611 L886.903 681.611 L886.344 681.611 L885.785 681.611 L885.226 681.611 L884.666 681.611 L884.107 681.611 L883.548 681.611 L882.989 681.611 L882.429 681.611 L881.87 681.611 L881.311 681.611 L880.752 681.611 L880.192 681.611 L879.633 681.611 L879.074 681.611 L878.515 681.611 L877.955 681.611 L877.396 681.611 L876.837 681.611 L876.278 681.611 L875.718 681.611 L875.159 681.611 L874.6 681.611 L874.041 681.611 L873.481 681.611 L872.922 681.611 L872.363 681.611 L871.804 681.611 L871.244 681.611 L870.685 681.611 L870.126 681.611 L869.567 681.611 L869.007 681.611 L868.448 681.611 L867.889 681.611 L867.33 681.611 L866.77 681.611 L866.211 681.611 L865.652 681.611 L865.093 681.611 L864.533 681.611 L863.974 681.611 L863.415 681.611 L862.856 681.611 L862.296 681.611 L861.737 681.611 L861.178 681.611 L860.619 681.611 L860.059 681.611 L859.5 681.611 L858.941 681.611 L858.382 681.611 L857.822 681.611 L857.263 681.611 L856.704 681.611 L856.145 681.611 L855.585 681.611 L855.026 681.611 L854.467 681.611 L853.908 681.611 L853.348 681.611 L852.789 681.611 L852.23 681.611 L851.671 681.611 L851.111 681.611 L850.552 681.611 L849.993 681.611 L849.434 681.611 L848.874 681.611 L848.315 681.611 L847.756 681.611 L847.197 681.611 L846.637 681.611 L846.078 681.611 L845.519 681.611 L844.96 681.611 L844.4 681.611 L843.841 681.611 L843.282 681.611 L842.723 681.611 L842.163 681.611 L841.604 681.611 L841.045 681.611 L840.486 681.611 L839.926 681.611 L839.367 681.611 L838.808 681.611 L838.249 681.611 L837.689 681.611 L837.13 681.611 L836.571 681.611 L836.012 681.611 L835.452 681.611 L834.893 681.611 L834.334 681.611 L833.775 681.611 L833.215 681.611 L832.656 681.611 L832.097 681.611 L831.538 681.611 L830.978 681.611 L830.419 681.611 L829.86 681.611 L829.301 681.611 L828.741 681.611 L828.182 681.611 L827.623 681.611 L827.064 681.611 L826.504 681.611 L825.945 681.611 L825.386 681.611 L824.827 681.611 L824.267 681.611 L823.708 681.611 L823.149 681.611 L822.59 681.611 L822.03 681.611 L821.471 681.611 L820.912 681.611 L820.353 681.611 L819.793 681.611 L819.234 681.611 L818.675 681.611 L818.116 681.611 L817.556 681.611 L816.997 681.611 L816.438 681.611 L815.879 681.611 L815.319 681.611 L814.76 681.611 L814.201 681.611 L813.642 681.611 L813.082 681.611 L812.523 681.611 L811.964 681.611 L811.405 681.611 L810.845 681.611 L810.286 681.611 L809.727 681.611 L809.168 681.611 L808.608 681.611 L808.049 681.611 L807.49 681.611 L806.931 681.611 L806.371 681.611 L805.812 681.611 L805.253 681.611 L804.693 681.611 L804.134 681.611 L803.575 681.611 L803.016 681.611 L802.456 681.611 L801.897 681.611 L801.338 681.611 L800.779 681.611 L800.219 681.611 L799.66 681.611 L799.101 681.611 L798.542 681.611 L797.982 681.611 L797.423 681.611 L796.864 681.611 L796.305 681.611 L795.745 681.611 L795.186 681.611 L794.627 681.611 L794.068 681.611 L793.508 681.611 L792.949 681.611 L792.39 681.611 L791.831 681.611 L791.271 681.611 L790.712 681.611 L790.153 681.611 L789.594 681.611 L789.034 681.611 L788.475 681.611 L787.916 681.611 L787.357 681.611 L786.797 681.611 L786.238 681.611 L785.679 681.611 L785.12 681.611 L784.56 681.611 L784.001 681.611 L783.442 681.611 L782.883 681.611 L782.323 681.611 L781.764 681.611 L781.205 681.611 L780.646 681.611 L780.086 681.611 L779.527 681.611 L778.968 681.611 L778.409 681.611 L777.849 681.611 L777.29 681.611 L776.731 681.611 L776.172 681.611 L775.612 681.611 L775.053 681.611 L774.494 681.611 L773.935 681.611 L773.375 681.611 L772.816 681.611 L772.257 681.611 L771.698 681.611 L771.138 681.611 L770.579 681.611 L770.02 681.611 L769.461 681.611 L768.901 681.611 L768.342 681.611 L767.783 681.611 L767.224 681.611 L766.664 681.611 L766.105 681.611 L765.546 681.611 L764.987 681.611 L764.427 681.611 L763.868 681.611 L763.309 681.611 L762.75 681.611 L762.19 681.611 L761.631 681.611 L761.072 681.611 L760.513 681.611 L759.953 681.611 L759.394 681.611 L758.835 681.611 L758.276 681.611 L757.716 681.611 L757.157 681.611 L756.598 681.611 L756.039 681.611 L755.479 681.611 L754.92 681.611 L754.361 681.611 L753.802 681.611 L753.242 681.611 L752.683 681.611 L752.124 681.611 L751.565 681.611 L751.005 681.611 L750.446 681.611 L749.887 681.611 L749.328 681.611 L748.768 681.611 L748.209 681.611 L747.65 681.611 L747.091 681.611 L746.531 681.611 L745.972 681.611 L745.413 681.611 L744.854 681.611 L744.294 681.611 L743.735 681.611 L743.176 681.611 L742.617 681.611 L742.057 681.611 L741.498 681.611 L740.939 681.611 L740.38 681.611 L739.82 681.611 L739.261 681.611 L738.702 681.611 L738.143 681.611 L737.583 681.611 L737.024 681.611 L736.465 681.611 L735.906 681.611 L735.346 681.611 L734.787 681.611 L734.228 681.611 L733.669 681.611 L733.109 681.611 L732.55 681.611 L731.991 681.611 L731.432 681.611 L730.872 681.611 L730.313 681.611 L729.754 681.611 L729.195 681.611 L728.635 681.611 L728.076 681.611 L727.517 681.611 L726.958 681.611 L726.398 681.611 L725.839 681.611 L725.28 681.611 L724.721 681.611 L724.161 681.611 L723.602 681.611 L723.043 681.611 L722.484 681.611 L721.924 681.611 L721.365 681.611 L720.806 681.611 L720.247 681.611  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,682.842 720.806,682.842 721.365,682.842 721.924,682.842 722.484,682.842 723.043,682.842 723.602,682.842 724.161,682.842 724.721,682.842 725.28,682.842 725.839,682.842 726.398,682.842 726.958,682.842 727.517,682.842 728.076,682.842 728.635,682.842 729.195,682.842 729.754,682.842 730.313,682.842 730.872,682.842 731.432,682.842 731.991,682.842 732.55,682.842 733.109,682.842 733.669,682.842 734.228,682.842 734.787,682.842 735.346,682.842 735.906,682.842 736.465,682.842 737.024,682.842 737.583,682.842 738.143,682.842 738.702,682.842 739.261,682.842 739.82,682.842 740.38,682.842 740.939,682.842 741.498,682.842 742.057,682.842 742.617,682.842 743.176,682.842 743.735,682.842 744.294,682.842 744.854,682.842 745.413,682.842 745.972,682.842 746.531,682.842 747.091,682.842 747.65,682.842 748.209,682.842 748.768,682.842 749.328,682.842 749.887,682.842 750.446,682.842 751.005,682.842 751.565,682.842 752.124,682.842 752.683,682.842 753.242,682.842 753.802,682.842 754.361,682.842 754.92,682.842 755.479,682.842 756.039,682.842 756.598,682.842 757.157,682.842 757.716,682.842 758.276,682.842 758.835,682.842 759.394,682.842 759.953,682.842 760.513,682.842 761.072,682.842 761.631,682.842 762.19,682.842 762.75,682.842 763.309,682.842 763.868,682.842 764.427,682.842 764.987,682.842 765.546,682.842 766.105,682.842 766.664,682.842 767.224,682.842 767.783,682.842 768.342,682.842 768.901,682.842 769.461,682.842 770.02,682.842 770.579,682.842 771.138,682.842 771.698,682.842 772.257,682.842 772.816,682.842 773.375,682.842 773.935,682.842 774.494,682.842 775.053,682.842 775.612,682.842 776.172,682.842 776.731,682.842 777.29,682.842 777.849,682.842 778.409,682.842 778.968,682.842 779.527,682.842 780.086,682.842 780.646,682.842 781.205,682.842 781.764,682.842 782.323,682.842 782.883,682.842 783.442,682.842 784.001,682.842 784.56,682.842 785.12,682.842 785.679,682.842 786.238,682.842 786.797,682.842 787.357,682.842 787.916,682.842 788.475,682.842 789.034,682.842 789.594,682.842 790.153,682.842 790.712,682.842 791.271,682.842 791.831,682.842 792.39,682.842 792.949,682.842 793.508,682.842 794.068,682.842 794.627,682.842 795.186,682.842 795.745,682.842 796.305,682.842 796.864,682.842 797.423,682.842 797.982,682.842 798.542,682.842 799.101,682.842 799.66,682.842 800.219,682.842 800.779,682.842 801.338,682.842 801.897,682.842 802.456,682.842 803.016,682.842 803.575,682.842 804.134,682.842 804.693,682.842 805.253,682.842 805.812,682.842 806.371,682.842 806.931,682.842 807.49,682.842 808.049,682.842 808.608,682.842 809.168,682.842 809.727,682.842 810.286,682.842 810.845,682.842 811.405,682.842 811.964,682.842 812.523,682.842 813.082,682.842 813.642,682.842 814.201,682.842 814.76,682.842 815.319,682.842 815.879,682.842 816.438,682.842 816.997,682.842 817.556,682.842 818.116,682.842 818.675,682.842 819.234,682.842 819.793,682.842 820.353,682.842 820.912,682.842 821.471,682.842 822.03,682.842 822.59,682.842 823.149,682.842 823.708,682.842 824.267,682.842 824.827,682.842 825.386,682.842 825.945,682.842 826.504,682.842 827.064,682.842 827.623,682.842 828.182,682.842 828.741,682.842 829.301,682.842 829.86,682.842 830.419,682.842 830.978,682.842 831.538,682.842 832.097,682.842 832.656,682.842 833.215,682.842 833.775,682.842 834.334,682.842 834.893,682.842 835.452,682.842 836.012,682.842 836.571,682.842 837.13,682.842 837.689,682.842 838.249,682.842 838.808,682.842 839.367,682.842 839.926,682.842 840.486,682.842 841.045,682.842 841.604,682.842 842.163,682.842 842.723,682.842 843.282,682.842 843.841,682.842 844.4,682.842 844.96,682.842 845.519,682.842 846.078,682.842 846.637,682.842 847.197,682.842 847.756,682.842 848.315,682.842 848.874,682.842 849.434,682.842 849.993,682.842 850.552,682.842 851.111,682.842 851.671,682.842 852.23,682.842 852.789,682.842 853.348,682.842 853.908,682.842 854.467,682.842 855.026,682.842 855.585,682.842 856.145,682.842 856.704,682.842 857.263,682.842 857.822,682.842 858.382,682.842 858.941,682.842 859.5,682.842 860.059,682.842 860.619,682.842 861.178,682.842 861.737,682.842 862.296,682.842 862.856,682.842 863.415,682.842 863.974,682.842 864.533,682.842 865.093,682.842 865.652,682.842 866.211,682.842 866.77,682.842 867.33,682.842 867.889,682.842 868.448,682.842 869.007,682.842 869.567,682.842 870.126,682.842 870.685,682.842 871.244,682.842 871.804,682.842 872.363,682.842 872.922,682.842 873.481,682.842 874.041,682.842 874.6,682.842 875.159,682.842 875.718,682.842 876.278,682.842 876.837,682.842 877.396,682.842 877.955,682.842 878.515,682.842 879.074,682.842 879.633,682.842 880.192,682.842 880.752,682.842 881.311,682.842 881.87,682.842 882.429,682.842 882.989,682.842 883.548,682.842 884.107,682.842 884.666,682.842 885.226,682.842 885.785,682.842 886.344,682.842 886.903,682.842 887.463,682.842 888.022,682.842 888.581,682.842 889.14,682.842 889.7,682.842 890.259,682.842 890.818,682.842 891.377,682.842 891.937,682.842 892.496,682.842 893.055,682.842 893.614,682.842 894.174,682.842 894.733,682.842 895.292,682.842 895.851,682.842 896.411,682.842 896.97,682.842 897.529,682.842 898.088,682.842 898.648,682.842 899.207,682.842 899.766,682.842 900.325,682.842 900.885,682.842 901.444,682.842 902.003,682.842 902.562,682.842 903.122,682.842 903.681,682.842 904.24,682.842 904.799,682.842 905.359,682.842 905.918,682.842 906.477,682.842 907.036,682.842 907.596,682.842 908.155,682.842 908.714,682.842 909.273,682.842 909.833,682.842 910.392,682.842 910.951,682.842 911.51,682.842 912.07,682.842 912.629,682.842 913.188,682.842 913.747,682.842 914.307,682.842 914.866,682.842 915.425,682.842 915.984,682.842 916.544,682.842 917.103,682.842 917.662,682.842 918.221,682.842 918.781,682.842 919.34,682.842 919.899,682.842 920.458,682.842 921.018,682.842 921.577,682.842 922.136,682.842 922.695,682.842 923.255,682.842 923.814,682.842 924.373,682.842 924.932,682.842 925.492,682.842 926.051,682.842 926.61,682.842 927.169,682.842 927.729,682.842 928.288,682.842 928.847,682.842 929.406,682.842 929.966,682.842 930.525,682.842 931.084,682.842 931.644,682.842 932.203,682.842 932.762,682.842 933.321,682.842 933.881,682.842 934.44,682.842 934.999,682.842 935.558,682.842 936.118,682.842 936.677,682.842 937.236,682.842 937.795,682.842 938.355,682.842 938.914,682.842 939.473,682.842 940.032,682.842 940.592,682.842 941.151,682.842 941.71,682.842 942.269,682.842 942.829,682.842 943.388,682.842 943.947,682.842 944.506,682.842 945.066,682.842 945.625,682.842 946.184,682.842 946.743,682.842 947.303,682.842 947.862,682.842 948.421,682.842 948.98,682.842 949.54,682.842 950.099,682.842 950.658,682.842 951.217,682.842 951.777,682.842 952.336,682.842 952.895,682.842 953.454,682.842 954.014,682.842 954.573,682.842 955.132,682.842 955.691,682.842 956.251,682.842 956.81,682.842 957.369,682.842 957.928,682.842 958.488,682.842 959.047,682.842 959.606,682.842 960.165,682.842 960.725,682.842 961.284,682.842 961.843,682.842 962.402,682.842 962.962,682.842 963.521,682.842 964.08,682.842 964.639,682.842 965.199,682.842 965.758,682.842 966.317,682.842 966.876,682.842 967.436,682.842 967.995,682.842 968.554,682.842 969.113,682.842 969.673,682.842 970.232,682.842 970.791,682.842 971.35,682.842 971.91,682.842 972.469,682.842 973.028,682.842 973.587,682.842 974.147,682.842 974.706,682.842 975.265,682.842 975.824,682.842 976.384,682.842 976.943,682.842 977.502,682.842 978.061,682.842 978.621,682.842 979.18,682.842 979.739,682.842 980.298,682.842 980.858,682.842 981.417,682.842 981.976,682.842 982.535,682.842 983.095,682.842 983.654,682.842 984.213,682.842 984.772,682.842 985.332,682.842 985.891,682.842 986.45,682.842 987.009,682.842 987.569,682.842 988.128,682.842 988.687,682.842 989.246,682.842 989.806,682.842 990.365,682.842 990.924,682.842 991.483,682.842 992.043,682.842 992.602,682.842 993.161,682.842 993.72,682.842 994.28,682.842 994.839,682.842 995.398,682.842 995.957,682.842 996.517,682.842 997.076,682.842 997.635,682.842 998.194,682.842 998.754,682.842 999.313,682.842 999.872,682.842 1000.43,682.842 1000.99,682.842 1001.55,682.842 1002.11,682.842 1002.67,682.842 1003.23,682.842 1003.79,682.842 1004.35,682.842 1004.91,682.842 1005.46,682.842 1006.02,682.842 1006.58,682.842 1007.14,682.842 1007.7,682.842 1008.26,682.842 1008.82,682.842 1009.38,682.842 1009.94,682.842 1010.5,682.842 1011.06,682.842 1011.62,682.842 1012.18,682.842 1012.73,682.842 1013.29,682.842 1013.85,682.842 1014.41,682.842 1014.97,682.842 1015.53,682.842 1016.09,682.842 1016.65,682.842 1017.21,682.842 1017.77,682.842 1018.33,682.842 1018.89,682.842 1019.45,682.842 1020.01,682.842 1020.56,682.842 1021.12,682.842 1021.68,682.842 1022.24,682.842 1022.8,682.842 1023.36,682.842 1023.92,682.842 1024.48,682.842 1025.04,682.842 1025.6,682.842 1026.16,682.842 1026.72,682.842 1027.28,682.842 1027.83,682.842 1028.39,682.842 1028.95,682.842 1029.51,682.842 1030.07,682.842 1030.63,682.842 1031.19,682.842 1031.75,682.842 1032.31,682.842 1032.87,682.842 1033.43,682.842 1033.99,682.842 1034.55,682.842 1035.1,682.842 1035.66,682.842 1036.22,682.842 1036.78,682.842 1037.34,682.842 1037.9,682.842 1038.46,682.842 1039.02,682.842 1039.58,682.842 1040.14,682.842 1040.7,682.842 1041.26,682.842 1041.82,682.842 1042.38,682.842 1042.93,682.842 1043.49,682.842 1044.05,682.842 1044.61,682.842 1045.17,682.842 1045.73,682.842 1046.29,682.842 1046.85,682.842 1047.41,682.842 1047.97,682.842 1048.53,682.842 1049.09,682.842 1049.65,682.842 1050.2,682.842 1050.76,682.842 1051.32,682.842 1051.88,682.842 1052.44,682.842 1053,682.842 1053.56,682.842 1054.12,682.842 1054.68,682.842 1055.24,682.842 1055.8,682.842 1056.36,682.842 1056.92,682.842 1057.48,682.842 1058.03,682.842 1058.59,682.842 1059.15,682.842 1059.71,682.842 1060.27,682.842 1060.83,682.842 1061.39,682.842 1061.95,682.842 1062.51,682.842 1063.07,682.842 1063.63,682.842 1064.19,682.842 1064.75,682.842 1065.3,682.842 1065.86,682.842 1066.42,682.842 1066.98,682.842 1067.54,682.842 1068.1,682.842 1068.66,682.842 1069.22,682.842 1069.78,682.842 1070.34,682.842 1070.9,682.842 1071.46,682.842 1072.02,682.842 1072.57,682.842 1073.13,682.842 1073.69,682.842 1074.25,682.842 1074.81,682.842 1075.37,682.842 1075.93,682.842 1076.49,682.842 1077.05,682.842 1077.61,682.842 1078.17,682.842 1078.73,682.842 1079.29,682.842 1079.85,682.842 1080.4,682.842 1080.96,682.842 1081.52,682.842 1082.08,682.842 1082.64,682.842 1083.2,682.842 1083.76,682.842 1084.32,682.842 1084.88,682.842 1085.44,682.842 1086,682.842 1086.56,682.842 1087.12,682.842 1087.67,682.842 1088.23,682.842 1088.79,682.842 1089.35,682.842 1089.91,682.842 1090.47,682.842 1091.03,682.842 1091.59,682.842 1092.15,682.842 1092.71,682.842 1093.27,682.842 1093.83,682.842 1094.39,682.842 1094.94,682.842 1095.5,682.842 1096.06,682.842 1096.62,682.842 1097.18,682.842 1097.74,682.842 1098.3,682.842 1098.86,682.842 1099.42,682.842 1099.98,682.842 1100.54,682.842 1101.1,682.842 1101.66,682.842 1102.22,682.842 1102.77,682.842 1103.33,682.842 1103.89,682.842 1104.45,682.842 1105.01,682.842 1105.57,682.842 1106.13,682.842 1106.69,682.842 1107.25,682.842 1107.81,682.842 1108.37,682.842 1108.93,682.842 1109.49,682.842 1110.04,682.842 1110.6,682.842 1111.16,682.842 1111.72,682.842 1112.28,682.842 1112.84,682.842 1113.4,682.842 1113.96,682.842 1114.52,682.842 1115.08,682.842 1115.64,682.842 1116.2,682.842 1116.76,682.842 1117.31,682.842 1117.87,682.842 1118.43,682.842 1118.99,682.842 1119.55,682.842 1120.11,682.842 1120.67,682.842 1121.23,682.842 1121.79,682.842 1122.35,682.842 1122.91,682.842 1123.47,682.842 1124.03,682.842 1124.59,682.842 1125.14,682.842 1125.7,682.842 1126.26,682.842 1126.82,682.842 1127.38,682.842 1127.94,682.842 1128.5,682.842 1129.06,682.842 1129.62,682.842 1130.18,682.842 1130.74,682.842 1131.3,682.842 1131.86,682.842 1132.41,682.842 1132.97,682.842 1133.53,682.842 1134.09,682.842 1134.65,682.842 1135.21,682.842 1135.77,682.842 1136.33,682.842 1136.89,682.842 1137.45,682.842 1138.01,682.842 1138.57,682.842 1139.13,682.842 1139.68,682.842 1140.24,682.842 1140.8,682.842 1141.36,682.842 1141.92,682.842 1142.48,682.842 1143.04,682.842 1143.6,682.842 1144.16,682.842 1144.72,682.842 1145.28,682.842 1145.84,682.842 1146.4,682.842 1146.96,682.842 1147.51,682.842 1148.07,682.842 1148.63,682.842 1149.19,682.842 1149.75,682.842 1150.31,682.842 1150.87,682.842 1151.43,682.842 1151.99,682.842 1152.55,682.842 1153.11,682.842 1153.67,682.842 1154.23,682.842 1154.78,682.842 1155.34,682.842 1155.9,682.842 1156.46,682.842 1157.02,682.842 1157.58,682.842 1158.14,682.842 1158.7,682.842 1159.26,682.842 1159.82,682.842 1160.38,682.842 1160.94,682.842 1161.5,682.842 1162.05,682.842 1162.61,682.842 1163.17,682.842 1163.73,682.842 1164.29,682.842 1164.85,682.842 1165.41,682.842 1165.97,682.842 1166.53,682.842 1167.09,682.842 1167.65,682.842 1168.21,682.842 1168.77,682.842 1169.33,682.842 1169.88,682.842 1170.44,682.842 1171,682.842 1171.56,682.842 1172.12,682.842 1172.68,682.842 1173.24,682.842 1173.8,682.842 1174.36,682.842 1174.92,682.842 1175.48,682.842 1176.04,682.842 1176.6,682.842 1177.15,682.842 1177.71,682.842 1178.27,682.842 1178.83,682.842 1179.39,682.842 1179.95,682.842 1180.51,682.842 1181.07,682.842 1181.63,682.842 1182.19,682.842 1182.75,682.842 1183.31,682.842 1183.87,682.842 1184.43,682.842 1184.98,682.842 1185.54,682.842 1186.1,682.842 1186.66,682.842 1187.22,682.842 1187.78,682.842 1188.34,682.842 1188.9,682.842 1189.46,682.842 1190.02,682.842 1190.58,682.842 1191.14,682.842 1191.7,682.842 1192.25,682.842 1192.81,682.842 1193.37,682.842 1193.93,682.842 1194.49,682.842 1195.05,682.842 1195.61,682.842 1196.17,682.842 1196.73,682.842 1197.29,682.842 1197.85,682.842 1198.41,682.842 1198.97,682.842 1199.52,682.842 1200.08,682.842 1200.64,682.842 1201.2,682.842 1201.76,682.842 1202.32,682.842 1202.88,682.842 1203.44,682.842 1204,682.842 1204.56,682.842 1205.12,682.842 1205.68,682.842 1206.24,682.842 1206.8,682.842 1207.35,682.842 1207.91,682.842 1208.47,682.842 1209.03,682.842 1209.59,682.842 1210.15,682.842 1210.71,682.842 1211.27,682.842 1211.83,682.842 1212.39,682.842 1212.95,682.842 1213.51,682.842 1214.07,682.842 1214.62,682.842 1215.18,682.842 1215.74,682.842 1216.3,682.842 1216.86,682.842 1217.42,682.842 1217.98,682.842 1218.54,682.842 1219.1,682.842 1219.66,682.842 1220.22,682.842 1220.78,682.842 1221.34,682.842 1221.89,682.842 1222.45,682.842 1223.01,682.842 1223.57,682.842 1224.13,682.842 1224.69,682.842 1225.25,682.842 1225.81,682.842 1226.37,682.842 1226.93,682.842 1227.49,682.842 1228.05,682.842 1228.61,682.842 1229.17,682.842 1229.72,682.842 1230.28,682.842 1230.84,682.842 1231.4,682.842 1231.96,682.842 1232.52,682.842 1233.08,682.842 1233.64,682.842 1234.2,682.842 1234.76,682.842 1235.32,682.842 1235.88,682.842 1236.44,682.842 1236.99,682.842 1237.55,682.842 1238.11,682.842 1238.67,682.842 1239.23,682.842 1239.79,682.842 1240.35,682.842 1240.91,682.842 1241.47,682.842 1242.03,682.842 1242.59,682.842 1243.15,682.842 1243.71,682.842 1244.26,682.842 1244.82,682.842 1245.38,682.842 1245.94,682.842 1246.5,682.842 1247.06,682.842 1247.62,682.842 1248.18,682.842 1248.74,682.842 1249.3,682.842 1249.86,682.842 1250.42,682.842 1250.98,682.842 1251.54,682.842 1252.09,682.842 1252.65,682.842 1253.21,682.842 1253.77,682.842 1254.33,682.842 1254.89,682.842 1255.45,682.842 1256.01,682.842 1256.57,682.842 1257.13,682.842 1257.69,682.842 1258.25,682.842 1258.81,682.842 1259.36,682.842 1259.92,682.842 1260.48,682.842 1261.04,682.842 1261.6,682.842 1262.16,682.842 1262.72,682.842 1263.28,682.842 1263.84,682.842 1264.4,682.842 1264.96,682.842 1265.52,682.842 1266.08,682.842 1266.63,682.842 1267.19,682.842 1267.75,682.842 1268.31,682.842 1268.87,682.842 1269.43,682.842 1269.99,682.842 1270.55,682.842 1271.11,682.842 1271.67,682.842 1272.23,682.842 1272.79,682.842 1273.35,682.842 1273.91,682.842 1274.46,682.842 1275.02,682.842 1275.58,682.842 1276.14,682.842 1276.7,682.842 1277.26,682.842 1277.82,682.842 1278.38,682.842 1278.94,682.842 1279.5,682.842 1280.06,682.842 1280.62,682.842 1281.18,682.842 1281.73,682.842 1282.29,682.842 1282.85,682.842 1283.41,682.842 1283.97,682.842 1284.53,682.842 1285.09,682.842 1285.65,682.842 1286.21,682.842 1286.77,682.842 1287.33,682.842 1287.89,682.842 1288.45,682.842 1289,682.842 1289.56,682.842 1290.12,682.842 1290.68,682.842 1291.24,682.842 1291.8,682.842 1292.36,682.842 1292.92,682.842 1293.48,682.842 1294.04,682.842 1294.6,682.842 1295.16,682.842 1295.72,682.842 1296.28,682.842 1296.83,682.842 1297.39,682.842 1297.95,682.842 1298.51,682.842 1299.07,682.842 1299.63,682.842 1300.19,682.842 1300.75,682.842 1301.31,682.842 1301.87,682.842 1302.43,682.842 1302.99,682.842 1303.55,682.842 1304.1,682.842 1304.66,682.842 1305.22,682.842 1305.78,682.842 1306.34,682.842 1306.9,682.842 1307.46,682.842 1308.02,682.842 1308.58,682.842 1309.14,682.842 1309.7,682.842 1310.26,682.842 1310.82,682.842 1311.38,682.842 1311.93,682.842 1312.49,682.842 1313.05,682.842 1313.61,682.842 1314.17,682.842 1314.73,682.842 1315.29,682.842 1315.85,682.842 1316.41,682.842 1316.97,682.842 1317.53,682.842 1318.09,682.842 1318.65,682.842 1319.2,682.842 1319.76,682.842 1320.32,682.842 1320.88,682.842 1321.44,682.842 1322,682.842 1322.56,682.842 1323.12,682.842 1323.68,682.842 1324.24,682.842 1324.8,682.842 1325.36,682.842 1325.92,682.842 1326.47,682.842 1327.03,682.842 1327.59,682.842 1328.15,682.842 1328.71,682.842 1329.27,682.842 1329.83,682.842 1330.39,682.842 1330.95,682.842 1331.51,682.842 1332.07,682.842 1332.63,682.842 1333.19,682.842 1333.75,682.842 1334.3,682.842 1334.86,682.842 1335.42,682.842 1335.98,682.842 1336.54,682.842 1337.1,682.842 1337.66,682.842 1338.22,682.842 1338.78,682.842 1339.34,682.842 1339.9,682.842 1340.46,682.842 1341.02,682.842 1341.57,682.842 1342.13,682.842 1342.69,682.842 1343.25,682.842 1343.81,682.842 1344.37,682.842 1344.93,682.842 1345.49,682.842 1346.05,682.842 1346.61,682.842 1347.17,682.842 1347.73,682.842 1348.29,682.842 1348.84,682.842 1349.4,682.842 1349.96,682.842 1350.52,682.842 1351.08,682.842 1351.64,682.842 1352.2,682.842 1352.76,682.842 1353.32,682.842 1353.88,682.842 1354.44,682.842 1355,682.842 1355.56,682.842 1356.12,682.842 1356.67,682.842 1357.23,682.842 1357.79,682.842 1358.35,682.842 1358.91,682.842 1359.47,682.842 1360.03,682.842 1360.59,682.842 1361.15,682.842 1361.71,682.842 1362.27,682.842 1362.83,682.842 1363.39,682.842 1363.94,682.842 1364.5,682.842 1365.06,682.842 1365.62,682.842 1366.18,682.842 1366.74,682.842 1367.3,682.842 1367.86,682.842 1368.42,682.842 1368.98,682.842 1369.54,682.842 1370.1,682.842 1370.66,682.842 1371.21,682.842 1371.77,682.842 1372.33,682.842 1372.89,682.842 1373.45,682.842 1374.01,682.842 1374.57,682.842 1375.13,682.842 1375.69,682.842 1376.25,682.842 1376.81,682.842 1377.37,682.842 1377.93,682.842 1378.49,682.842 1379.04,682.842 1379.6,682.842 1380.16,682.842 1380.72,682.842 1381.28,682.842 1381.84,682.842 1382.4,682.842 1382.96,682.842 1383.52,682.842 1384.08,682.842 1384.64,682.842 1385.2,682.842 1385.76,682.842 1386.31,682.842 1386.87,682.842 1387.43,682.842 1387.99,682.842 1388.55,682.842 1389.11,682.842 1389.67,682.842 1390.23,682.842 1390.79,682.842 1391.35,682.842 1391.91,682.842 1392.47,682.842 1393.03,682.842 1393.58,682.842 1394.14,682.842 1394.7,682.842 1395.26,682.842 1395.82,682.842 1396.38,682.842 1396.94,682.842 1397.5,682.842 1398.06,682.842 1398.62,682.842 1399.18,682.842 1399.74,682.842 1400.3,682.842 1400.86,682.842 1401.41,682.842 1401.97,682.842 1402.53,682.842 1403.09,682.842 1403.65,682.842 1404.21,682.842 1404.77,682.842 1405.33,682.842 1405.89,682.842 1406.45,682.842 1407.01,682.842 1407.57,682.842 1408.13,682.842 1408.68,682.842 1409.24,682.842 1409.8,682.842 1410.36,682.842 1410.92,682.842 1411.48,682.842 1412.04,682.842 1412.6,682.842 1413.16,682.842 1413.72,682.842 1414.28,682.842 1414.84,682.842 1415.4,682.842 1415.95,682.842 1416.51,682.842 1417.07,682.842 1417.63,682.842 1418.19,682.842 1418.75,682.842 1419.31,682.842 1419.87,682.842 1420.43,682.842 1420.99,682.842 1421.55,682.842 1422.11,682.842 1422.67,682.842 1423.23,682.842 1423.78,682.842 1424.34,682.842 1424.9,682.842 1425.46,682.842 1426.02,682.842 1426.58,682.842 1427.14,682.842 1427.7,682.842 1428.26,682.842 1428.82,682.842 1429.38,682.842 1429.94,682.842 1430.5,682.842 1431.05,682.842 1431.61,682.842 1432.17,682.842 1432.73,682.842 1433.29,682.842 1433.85,682.842 1434.41,682.842 1434.97,682.842 1435.53,682.842 1436.09,682.842 1436.65,682.842 1437.21,682.842 1437.77,682.842 1438.33,682.842 1438.88,682.842 1439.44,682.842 1440,682.842 1440.56,682.842 1441.12,682.842 1441.68,682.842 1442.24,682.842 1442.8,682.842 1443.36,682.842 1443.92,682.842 1444.48,682.842 1445.04,682.842 1445.6,682.842 1446.15,682.842 1446.71,682.842 1447.27,682.842 1447.83,682.842 1448.39,682.842 1448.95,682.842 1449.51,682.842 1450.07,682.842 1450.63,682.842 1451.19,682.842 1451.75,682.842 1452.31,682.842 1452.87,682.842 1453.42,682.842 1453.98,682.842 1454.54,682.842 1455.1,682.842 1455.66,682.842 1456.22,682.842 1456.78,682.842 1457.34,682.842 1457.9,682.842 1458.46,682.842 1459.02,682.842 1459.58,682.842 1460.14,682.842 1460.7,682.842 1461.25,682.842 1461.81,682.842 1462.37,682.842 1462.93,682.842 1463.49,682.842 1464.05,682.842 1464.61,682.842 1465.17,682.842 1465.73,682.842 1466.29,682.842 1466.85,682.842 1467.41,682.842 1467.97,682.842 1468.52,682.842 1469.08,682.842 1469.64,682.842 1470.2,682.842 1470.76,682.842 1471.32,682.842 1471.88,682.842 1472.44,682.842 1473,682.842 1473.56,682.842 1474.12,682.842 1474.68,682.842 1475.24,682.842 1475.79,682.842 1476.35,682.842 1476.91,682.842 1477.47,682.842 1478.03,682.842 1478.59,682.842 1479.15,682.842 1479.71,682.842 1480.27,682.842 1480.83,682.842 1481.39,682.842 1481.95,682.842 1482.51,682.842 1483.07,682.842 1483.62,682.842 1484.18,682.842 1484.74,682.842 1485.3,682.842 1485.86,682.842 1486.42,682.842 1486.98,682.842 1487.54,682.842 1488.1,682.842 1488.66,682.842 1489.22,682.842 1489.78,682.842 1490.34,682.842 1490.89,682.842 1491.45,682.842 1492.01,682.842 1492.57,682.842 1493.13,682.842 1493.69,682.842 1494.25,682.842 1494.81,682.842 1495.37,682.842 1495.93,682.842 1496.49,682.842 1497.05,682.842 1497.61,682.842 1498.16,682.842 1498.72,682.842 1499.28,682.842 1499.84,682.842 1500.4,682.842 1500.96,682.842 1501.52,682.842 1502.08,682.842 1502.64,682.842 1503.2,682.842 1503.76,682.842 1504.32,682.842 1504.88,682.842 1505.44,682.842 1505.99,682.842 1506.55,682.842 1507.11,682.842 1507.67,682.842 1508.23,682.842 1508.79,682.842 1509.35,682.842 1509.91,682.842 1510.47,682.842 1511.03,682.842 1511.59,682.842 1512.15,682.842 1512.71,682.842 1513.26,682.842 1513.82,682.842 1514.38,682.842 1514.94,682.842 1515.5,682.842 1516.06,682.842 1516.62,682.842 1517.18,682.842 1517.74,682.842 1518.3,682.842 1518.86,682.842 1519.42,682.842 1519.98,682.842 1520.53,682.842 1521.09,682.842 1521.65,682.842 1522.21,682.842 1522.77,682.842 1523.33,682.842 1523.89,682.842 1524.45,682.842 1525.01,682.842 1525.57,682.842 1526.13,682.842 1526.69,682.842 1527.25,682.842 1527.81,682.842 1528.36,682.842 1528.92,682.842 1529.48,682.842 1530.04,682.842 1530.6,682.842 1531.16,682.842 1531.72,682.842 1532.28,682.842 1532.84,682.842 1533.4,682.842 1533.96,682.842 1534.52,682.842 1535.08,682.842 1535.63,682.842 1536.19,682.842 1536.75,682.842 1537.31,682.842 1537.87,682.842 1538.43,682.842 1538.99,682.842 1539.55,682.842 1540.11,682.842 1540.67,682.842 1541.23,682.842 1541.79,682.842 1542.35,682.842 1542.9,682.842 1543.46,682.842 1544.02,682.842 1544.58,682.842 1545.14,682.842 1545.7,682.842 1546.26,682.842 1546.82,682.842 1547.38,682.842 1547.94,682.842 1548.5,682.842 1549.06,682.842 1549.62,682.842 1550.18,682.842 1550.73,682.842 1551.29,682.842 1551.85,682.842 1552.41,682.842 1552.97,682.842 1553.53,682.842 1554.09,682.842 1554.65,682.842 1555.21,682.842 1555.77,682.842 1556.33,682.842 1556.89,682.842 1557.45,682.842 1558,682.842 1558.56,682.842 1559.12,682.842 1559.68,682.842 1560.24,682.842 1560.8,682.842 1561.36,682.842 1561.92,682.842 1562.48,682.842 1563.04,682.842 1563.6,682.842 1564.16,682.842 1564.72,682.842 1565.28,682.842 1565.83,682.842 1566.39,682.842 1566.95,682.842 1567.51,682.842 1568.07,682.842 1568.63,682.842 1569.19,682.842 1569.75,682.842 1570.31,682.842 1570.87,682.842 1571.43,682.842 1571.99,682.842 1572.55,682.842 1573.1,682.842 1573.66,682.842 1574.22,682.842 1574.78,682.842 1575.34,682.842 1575.9,682.842 1576.46,682.842 1577.02,682.842 1577.58,682.842 1578.14,682.842 1578.7,682.842 1579.26,682.842 1579.82,682.842 1580.37,682.842 1580.93,682.842 1581.49,682.842 1582.05,682.842 1582.61,682.842 1583.17,682.842 1583.73,682.842 1584.29,682.842 1584.85,682.842 1585.41,682.842 1585.97,682.842 1586.53,682.842 1587.09,682.842 1587.65,682.842 1588.2,682.842 1588.76,682.842 1589.32,682.842 1589.88,682.842 1590.44,682.842 1591,682.842 1591.56,682.842 1592.12,682.842 1592.68,682.842 1593.24,682.842 1593.8,682.842 1594.36,682.842 1594.92,682.842 1595.47,682.842 1596.03,682.842 1596.59,682.842 1597.15,682.842 1597.71,682.842 1598.27,682.842 1598.83,682.842 1599.39,682.842 1599.95,682.842 1600.51,682.842 1601.07,682.842 1601.63,682.842 1602.19,682.842 1602.74,682.842 1603.3,682.842 1603.86,682.842 1604.42,682.842 1604.98,682.842 1605.54,682.842 1606.1,682.842 1606.66,682.842 1607.22,682.842 1607.78,682.842 1608.34,682.842 1608.9,682.842 1609.46,682.842 1610.02,682.842 1610.57,682.842 1611.13,682.842 1611.69,682.842 1612.25,682.842 1612.81,682.842 1613.37,682.842 1613.93,682.842 1614.49,682.842 1615.05,682.842 1615.61,682.842 1616.17,682.842 1616.73,682.842 1617.29,682.842 1617.84,682.842 1618.4,682.842 1618.96,682.842 1619.52,682.842 1620.08,682.842 1620.64,682.842 1621.2,682.842 1621.76,682.842 1622.32,682.842 1622.88,682.842 1623.44,682.842 1624,682.842 1624.56,682.842 1625.11,682.842 1625.67,682.842 1626.23,682.842 1626.79,682.842 1627.35,682.842 1627.91,682.842 1628.47,682.842 1629.03,682.842 1629.59,682.842 1630.15,682.842 1630.71,682.842 1631.27,682.842 1631.83,682.842 1632.39,682.842 1632.94,682.842 1633.5,682.842 1634.06,682.842 1634.62,682.842 1635.18,682.842 1635.74,682.842 1636.3,682.842 1636.86,682.842 1637.42,682.842 1637.98,682.842 1638.54,682.842 1639.1,682.842 1639.66,682.842 1640.21,682.842 1640.77,682.842 1641.33,682.842 1641.89,682.842 1642.45,682.842 1643.01,682.842 1643.57,682.842 1644.13,682.842 1644.69,682.842 1645.25,682.842 1645.81,682.842 1646.37,682.842 1646.93,682.842 1647.48,682.842 1648.04,682.842 1648.6,682.842 1649.16,682.842 1649.72,682.842 1650.28,682.842 1650.84,682.842 1651.4,682.842 1651.96,682.842 1652.52,682.842 1653.08,682.842 1653.64,682.842 1654.2,682.842 1654.76,682.842 1655.31,682.842 1655.87,682.842 1656.43,682.842 1656.99,682.842 1657.55,682.842 1658.11,682.842 1658.67,682.842 1659.23,682.842 1659.79,682.842 1660.35,682.842 1660.91,682.842 1661.47,682.842 1662.03,682.842 1662.58,682.842 1663.14,682.842 1663.7,682.842 1664.26,682.842 1664.82,682.842 1665.38,682.842 1665.94,682.842 1666.5,682.842 1667.06,682.842 1667.62,682.842 1668.18,682.842 1668.74,682.842 1669.3,682.842 1669.85,682.842 1670.41,682.842 1670.97,682.842 1671.53,682.842 1672.09,682.842 1672.65,682.842 1673.21,682.842 1673.77,682.842 1674.33,682.842 1674.89,682.842 1675.45,682.842 1676.01,682.842 1676.57,682.842 1677.13,682.842 1677.68,682.842 1678.24,682.842 1678.8,682.842 1679.36,682.842 1679.92,682.842 1680.48,682.842 1681.04,682.842 1681.6,682.842 1682.16,682.842 1682.72,682.842 1683.28,682.842 1683.84,682.842 1684.4,682.842 1684.95,682.842 1685.51,682.842 1686.07,682.842 1686.63,682.842 1687.19,682.842 1687.75,682.842 1688.31,682.842 1688.87,682.842 1689.43,682.842 1689.99,682.842 1690.55,682.842 1691.11,682.842 1691.67,682.842 1692.23,682.842 1692.78,682.842 1693.34,682.842 1693.9,682.842 1694.46,682.842 1695.02,682.842 1695.58,682.842 1696.14,682.842 1696.7,682.842 1697.26,682.842 1697.82,682.842 1698.38,682.842 1698.94,682.842 1699.5,682.842 1700.05,682.842 1700.61,682.842 1701.17,682.842 1701.73,682.842 1702.29,682.842 1702.85,682.842 1703.41,682.842 1703.97,682.842 1704.53,682.842 1705.09,682.842 1705.65,682.842 1706.21,682.842 1706.77,682.842 1707.32,682.842 1707.88,682.842 1708.44,682.842 1709,682.842 1709.56,682.842 1710.12,682.842 1710.68,682.842 1711.24,682.842 1711.8,682.842 1712.36,682.842 1712.92,682.842 1713.48,682.842 1714.04,682.842 1714.6,682.842 1715.15,682.842 1715.71,682.842 1716.27,682.842 1716.83,682.842 1717.39,682.842 1717.95,682.842 1718.51,682.842 1719.07,682.842 1719.63,682.842 1720.19,682.842 1720.75,682.842 1721.31,682.842 1721.87,682.842 1722.42,682.842 1722.98,682.842 1723.54,682.842 1724.1,682.842 1724.66,682.842 1725.22,682.842 1725.78,682.842 1726.34,682.842 1726.9,682.842 1727.46,682.842 1728.02,682.842 1728.58,682.842 1729.14,682.842 1729.69,682.842 1730.25,682.842 1730.81,682.842 1731.37,682.842 1731.93,682.842 1732.49,682.842 1733.05,682.842 1733.61,682.842 1734.17,682.842 1734.73,682.842 1735.29,682.842 1735.85,682.842 1736.41,682.842 1736.97,682.842 1737.52,682.842 1738.08,682.842 1738.64,682.842 1739.2,682.842 1739.76,682.842 1740.32,682.842 1740.88,682.842 1741.44,682.842 1742,682.842 1742.56,682.842 1743.12,682.842 1743.68,682.842 1744.24,682.842 1744.79,682.842 1745.35,682.842 1745.91,682.842 1746.47,682.842 1747.03,682.842 1747.59,682.842 1748.15,682.842 1748.71,682.842 1749.27,682.842 1749.83,682.842 1750.39,682.842 1750.95,682.842 1751.51,682.842 1752.06,682.842 1752.62,682.842 1753.18,682.842 1753.74,682.842 1754.3,682.842 1754.86,682.842 1755.42,682.842 1755.98,682.842 1756.54,682.842 1757.1,682.842 1757.66,682.842 1758.22,682.842 1758.78,682.842 1759.34,682.842 1759.89,682.842 1760.45,682.842 1761.01,682.842 1761.57,682.842 1762.13,682.842 1762.69,682.842 1763.25,682.842 1763.81,682.842 1764.37,682.842 1764.93,682.842 1765.49,682.842 1766.05,682.842 1766.61,682.842 1767.16,682.842 1767.72,682.842 1768.28,682.842 1768.84,682.842 1769.4,682.842 1769.96,682.842 1770.52,682.842 1771.08,682.842 1771.64,682.842 1772.2,682.842 1772.76,682.842 1773.32,682.842 1773.88,682.842 1774.43,682.842 1774.99,682.842 1775.55,682.842 1776.11,682.842 1776.67,682.842 1777.23,682.842 1777.79,682.842 1778.35,682.842 1778.91,682.842 1779.47,682.842 1780.03,682.842 1780.59,682.842 1781.15,682.842 1781.71,682.842 1782.26,682.842 1782.82,682.842 1783.38,682.842 1783.94,682.842 1784.5,682.842 1785.06,682.842 1785.62,682.842 1786.18,682.842 1786.74,682.842 1787.3,682.842 1787.86,682.842 1788.42,682.842 1788.98,682.842 1789.53,682.842 1790.09,682.842 1790.65,682.842 1791.21,682.842 1791.77,682.842 1792.33,682.842 1792.89,682.842 1793.45,682.842 1794.01,682.842 1794.57,682.842 1795.13,682.842 1795.69,682.842 1796.25,682.842 1796.8,682.842 1797.36,682.842 1797.92,682.842 1798.48,682.842 1799.04,682.842 1799.6,682.842 1800.16,682.842 1800.72,682.842 1801.28,682.842 1801.84,682.842 1802.4,682.842 1802.96,682.842 1803.52,682.842 1804.08,682.842 1804.63,682.842 1805.19,682.842 1805.75,682.842 1806.31,682.842 1806.87,682.842 1807.43,682.842 1807.99,682.842 1808.55,682.842 1809.11,682.842 1809.67,682.842 1810.23,682.842 1810.79,682.842 1811.35,682.842 1811.9,682.842 1812.46,682.842 1813.02,682.842 1813.58,682.842 1814.14,682.842 1814.7,682.842 1815.26,682.842 1815.82,682.842 1816.38,682.842 1816.94,682.842 1817.5,682.842 1818.06,682.842 1818.62,682.842 1819.18,682.842 1819.73,682.842 1820.29,682.842 1820.85,682.842 1821.41,682.842 1821.97,682.842 1822.53,682.842 1823.09,682.842 1823.65,682.842 1824.21,682.842 1824.77,682.842 1825.33,682.842 1825.89,682.842 1826.45,682.842 1827,682.842 1827.56,682.842 1828.12,682.842 1828.68,682.842 1829.24,682.842 1829.8,682.842 1830.36,682.842 1830.92,682.842 1831.48,682.842 1832.04,682.842 1832.6,682.842 1833.16,682.842 1833.72,682.842 1834.27,682.842 1834.83,682.842 1835.39,682.842 1835.95,682.842 1836.51,682.842 1837.07,682.842 1837.63,682.842 1838.19,682.842 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.030688458754284 ± 0.023154981564440003\nProjected Energy: -4.011346312712546 ± (0.006835822021553639, 0.006196023629772007)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.557494</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4918e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.8615e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.082e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.523e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">3.446e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.069e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770906\n  0.13584182219622498\n  0.15789998694607732\n  0.8767114411781343\n  1.5305929970973304\n  1.5835732611867375\n  3.0728703303258706\n  3.125672653951833\n  4.862107221562173\n  6.260694850380598\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AdaptiveTimeStep","page":"API","title":"Rimu.AdaptiveTimeStep","text":"AdaptiveTimeStep <: TimeStepStrategy\n\nAdapt the time step to avoid zombies.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 12)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    new_time_step,\n    tnorm,\n    single_state,\n    step\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, deaths, clones, zombies, tnorm, len)\n-> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v::AbstractDVec)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces, AbstractDVec.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem. The names should be unique and not contain spaces or special characters.\n\nFor a StochasticStyle, the first three stats are the number of clones, deaths, and zombies.\n\nSee also StochasticStyle, CompressionStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
