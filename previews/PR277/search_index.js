var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21526824705744002 ± 0.0017255346732644994\n   G2(1) = 0.9159902554990204 ± 0.0007988445111445172\n   G2(2) = 0.9804775198367351 ± 0.0007286029599201382\n   G2(3) = 0.9917962022710506 ± 0.0010759973155299286\n   G2(4) = 0.9804775198367351 ± 0.0007286029599201382\n   G2(5) = 0.9159902554990204 ± 0.0007988445111445172\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.047621670498526 ± 0.15349467098533487\n   Replica 2: -3.969946433579799 ± 0.14742871411572236\n   Replica 3: -4.0209913453822885 ± 0.12287627122888278\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip360\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip360)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip361\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip360)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip362\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.81 2211.02,1260.81 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.81 2211.02,1003.81 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.806 2211.02,746.806 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.804 2211.02,489.804 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,232.803 2211.02,232.803 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.81 423.181,1260.81 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.81 423.181,1003.81 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.806 423.181,746.806 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.804 423.181,489.804 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,232.803 423.181,232.803 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M356.339 1246.61 Q352.728 1246.61 350.899 1250.17 Q349.094 1253.71 349.094 1260.84 Q349.094 1267.95 350.899 1271.51 Q352.728 1275.06 356.339 1275.06 Q359.973 1275.06 361.779 1271.51 Q363.608 1267.95 363.608 1260.84 Q363.608 1253.71 361.779 1250.17 Q359.973 1246.61 356.339 1246.61 M356.339 1242.9 Q362.149 1242.9 365.205 1247.51 Q368.284 1252.09 368.284 1260.84 Q368.284 1269.57 365.205 1274.18 Q362.149 1278.76 356.339 1278.76 Q350.529 1278.76 347.45 1274.18 Q344.395 1269.57 344.395 1260.84 Q344.395 1252.09 347.45 1247.51 Q350.529 1242.9 356.339 1242.9 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M290.043 1017.15 L306.363 1017.15 L306.363 1021.09 L284.418 1021.09 L284.418 1017.15 Q287.08 1014.4 291.664 1009.77 Q296.27 1005.12 297.451 1003.77 Q299.696 1001.25 300.576 999.513 Q301.478 997.754 301.478 996.064 Q301.478 993.31 299.534 991.573 Q297.613 989.837 294.511 989.837 Q292.312 989.837 289.858 990.601 Q287.427 991.365 284.65 992.916 L284.65 988.194 Q287.474 987.06 289.927 986.481 Q292.381 985.902 294.418 985.902 Q299.789 985.902 302.983 988.587 Q306.177 991.273 306.177 995.763 Q306.177 997.893 305.367 999.814 Q304.58 1001.71 302.474 1004.3 Q301.895 1004.98 298.793 1008.19 Q295.691 1011.39 290.043 1017.15 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M316.224 986.527 L334.58 986.527 L334.58 990.462 L320.506 990.462 L320.506 998.935 Q321.524 998.587 322.543 998.425 Q323.562 998.24 324.58 998.24 Q330.367 998.24 333.747 1001.41 Q337.126 1004.58 337.126 1010 Q337.126 1015.58 333.654 1018.68 Q330.182 1021.76 323.862 1021.76 Q321.687 1021.76 319.418 1021.39 Q317.173 1021.02 314.765 1020.28 L314.765 1015.58 Q316.849 1016.71 319.071 1017.27 Q321.293 1017.82 323.77 1017.82 Q327.774 1017.82 330.112 1015.72 Q332.45 1013.61 332.45 1010 Q332.45 1006.39 330.112 1004.28 Q327.774 1002.18 323.77 1002.18 Q321.895 1002.18 320.02 1002.59 Q318.168 1003.01 316.224 1003.89 L316.224 986.527 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M356.339 989.606 Q352.728 989.606 350.899 993.171 Q349.094 996.712 349.094 1003.84 Q349.094 1010.95 350.899 1014.51 Q352.728 1018.05 356.339 1018.05 Q359.973 1018.05 361.779 1014.51 Q363.608 1010.95 363.608 1003.84 Q363.608 996.712 361.779 993.171 Q359.973 989.606 356.339 989.606 M356.339 985.902 Q362.149 985.902 365.205 990.509 Q368.284 995.092 368.284 1003.84 Q368.284 1012.57 365.205 1017.18 Q362.149 1021.76 356.339 1021.76 Q350.529 1021.76 347.45 1017.18 Q344.395 1012.57 344.395 1003.84 Q344.395 995.092 347.45 990.509 Q350.529 985.902 356.339 985.902 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M286.062 729.526 L304.418 729.526 L304.418 733.461 L290.344 733.461 L290.344 741.933 Q291.363 741.586 292.381 741.424 Q293.4 741.239 294.418 741.239 Q300.205 741.239 303.585 744.41 Q306.964 747.581 306.964 752.998 Q306.964 758.577 303.492 761.678 Q300.02 764.757 293.701 764.757 Q291.525 764.757 289.256 764.387 Q287.011 764.016 284.603 763.276 L284.603 758.577 Q286.687 759.711 288.909 760.266 Q291.131 760.822 293.608 760.822 Q297.613 760.822 299.951 758.715 Q302.288 756.609 302.288 752.998 Q302.288 749.387 299.951 747.28 Q297.613 745.174 293.608 745.174 Q291.733 745.174 289.858 745.591 Q288.006 746.007 286.062 746.887 L286.062 729.526 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M326.177 732.605 Q322.566 732.605 320.737 736.169 Q318.932 739.711 318.932 746.841 Q318.932 753.947 320.737 757.512 Q322.566 761.053 326.177 761.053 Q329.811 761.053 331.617 757.512 Q333.446 753.947 333.446 746.841 Q333.446 739.711 331.617 736.169 Q329.811 732.605 326.177 732.605 M326.177 728.901 Q331.987 728.901 335.043 733.507 Q338.122 738.091 338.122 746.841 Q338.122 755.567 335.043 760.174 Q331.987 764.757 326.177 764.757 Q320.367 764.757 317.288 760.174 Q314.233 755.567 314.233 746.841 Q314.233 738.091 317.288 733.507 Q320.367 728.901 326.177 728.901 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M356.339 732.605 Q352.728 732.605 350.899 736.169 Q349.094 739.711 349.094 746.841 Q349.094 753.947 350.899 757.512 Q352.728 761.053 356.339 761.053 Q359.973 761.053 361.779 757.512 Q363.608 753.947 363.608 746.841 Q363.608 739.711 361.779 736.169 Q359.973 732.605 356.339 732.605 M356.339 728.901 Q362.149 728.901 365.205 733.507 Q368.284 738.091 368.284 746.841 Q368.284 755.567 365.205 760.174 Q362.149 764.757 356.339 764.757 Q350.529 764.757 347.45 760.174 Q344.395 755.567 344.395 746.841 Q344.395 738.091 347.45 733.507 Q350.529 728.901 356.339 728.901 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M284.835 472.524 L307.057 472.524 L307.057 474.515 L294.511 507.084 L289.627 507.084 L301.432 476.46 L284.835 476.46 L284.835 472.524 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M316.224 472.524 L334.58 472.524 L334.58 476.46 L320.506 476.46 L320.506 484.932 Q321.524 484.585 322.543 484.423 Q323.562 484.237 324.58 484.237 Q330.367 484.237 333.747 487.409 Q337.126 490.58 337.126 495.997 Q337.126 501.575 333.654 504.677 Q330.182 507.756 323.862 507.756 Q321.687 507.756 319.418 507.385 Q317.173 507.015 314.765 506.274 L314.765 501.575 Q316.849 502.709 319.071 503.265 Q321.293 503.821 323.77 503.821 Q327.774 503.821 330.112 501.714 Q332.45 499.608 332.45 495.997 Q332.45 492.385 330.112 490.279 Q327.774 488.173 323.77 488.173 Q321.895 488.173 320.02 488.589 Q318.168 489.006 316.224 489.885 L316.224 472.524 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M356.339 475.603 Q352.728 475.603 350.899 479.168 Q349.094 482.71 349.094 489.839 Q349.094 496.946 350.899 500.51 Q352.728 504.052 356.339 504.052 Q359.973 504.052 361.779 500.51 Q363.608 496.946 363.608 489.839 Q363.608 482.71 361.779 479.168 Q359.973 475.603 356.339 475.603 M356.339 471.899 Q362.149 471.899 365.205 476.506 Q368.284 481.089 368.284 489.839 Q368.284 498.566 365.205 503.172 Q362.149 507.756 356.339 507.756 Q350.529 507.756 347.45 503.172 Q344.395 498.566 344.395 489.839 Q344.395 481.089 347.45 476.506 Q350.529 471.899 356.339 471.899 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M256.664 246.148 L264.303 246.148 L264.303 219.782 L255.992 221.449 L255.992 217.19 L264.256 215.523 L268.932 215.523 L268.932 246.148 L276.571 246.148 L276.571 250.083 L256.664 250.083 L256.664 246.148 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M296.015 218.602 Q292.404 218.602 290.576 222.167 Q288.77 225.708 288.77 232.838 Q288.77 239.944 290.576 243.509 Q292.404 247.051 296.015 247.051 Q299.65 247.051 301.455 243.509 Q303.284 239.944 303.284 232.838 Q303.284 225.708 301.455 222.167 Q299.65 218.602 296.015 218.602 M296.015 214.898 Q301.826 214.898 304.881 219.505 Q307.96 224.088 307.96 232.838 Q307.96 241.565 304.881 246.171 Q301.826 250.754 296.015 250.754 Q290.205 250.754 287.127 246.171 Q284.071 241.565 284.071 232.838 Q284.071 224.088 287.127 219.505 Q290.205 214.898 296.015 214.898 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M326.177 218.602 Q322.566 218.602 320.737 222.167 Q318.932 225.708 318.932 232.838 Q318.932 239.944 320.737 243.509 Q322.566 247.051 326.177 247.051 Q329.811 247.051 331.617 243.509 Q333.446 239.944 333.446 232.838 Q333.446 225.708 331.617 222.167 Q329.811 218.602 326.177 218.602 M326.177 214.898 Q331.987 214.898 335.043 219.505 Q338.122 224.088 338.122 232.838 Q338.122 241.565 335.043 246.171 Q331.987 250.754 326.177 250.754 Q320.367 250.754 317.288 246.171 Q314.233 241.565 314.233 232.838 Q314.233 224.088 317.288 219.505 Q320.367 214.898 326.177 214.898 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M356.339 218.602 Q352.728 218.602 350.899 222.167 Q349.094 225.708 349.094 232.838 Q349.094 239.944 350.899 243.509 Q352.728 247.051 356.339 247.051 Q359.973 247.051 361.779 243.509 Q363.608 239.944 363.608 232.838 Q363.608 225.708 361.779 222.167 Q359.973 218.602 356.339 218.602 M356.339 214.898 Q362.149 214.898 365.205 219.505 Q368.284 224.088 368.284 232.838 Q368.284 241.565 365.205 246.171 Q362.149 250.754 356.339 250.754 Q350.529 250.754 347.45 246.171 Q344.395 241.565 344.395 232.838 Q344.395 224.088 347.45 219.505 Q350.529 214.898 356.339 214.898 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip362)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,232.803 4017.76,232.803 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1248.44 458.828,1247.06 459.396,1246.63 459.964,1246.15 460.533,1245.59 461.101,1244.97 461.669,1244.26 462.238,1243.47 462.806,1241.57 463.375,1240.61 463.943,1239.57 464.511,1238.43 465.08,1236.16 465.648,1234.82 466.216,1233.36 466.785,1231.82 467.353,1229.12 467.921,1227.34 468.49,1224.42 469.058,1221.36 469.626,1218.21 470.195,1215.96 470.763,1213.56 471.331,1210.98 471.9,1208.26 472.468,1202.24 473.036,1199.2 473.605,1195.98 474.173,1191.54 474.741,1187.91 475.31,1182.97 475.878,1176.91 476.446,1171.58 477.015,1167.07 477.583,1162.36 478.152,1157.5 478.72,1152.41 479.288,1145.92 479.857,1138.2 480.425,1130.3 480.993,1122.98 481.562,1115.54 482.13,1108.91 482.698,1101.06 483.267,1094.13 483.835,1085.94 484.403,1078.6 484.972,1069.97 485.54,1062.09 486.108,1054.23 486.677,1041.95 487.245,1033.76 487.813,1022.37 488.382,1011.88 488.95,1002.36 489.518,993.54 490.087,984.565 490.655,973.436 491.224,964.234 491.792,955.018 492.36,943.592 492.929,934.315 493.497,923.801 494.065,914.32 494.634,903.757 495.202,890.927 495.77,880.245 496.339,868.567 496.907,856.886 497.475,846.29 498.044,832.799 498.612,821.457 499.18,811.332 499.749,801.954 500.317,791.552 500.885,781.211 501.454,769.954 502.022,758.789 502.59,747.546 503.159,735.452 503.727,724.697 504.295,716.135 504.864,705.326 505.432,692.864 506.001,683.555 506.569,675.554 507.137,666.433 507.706,657.506 508.274,647.499 508.842,638.7 509.411,630.133 509.979,622.69 510.547,613.224 511.116,603.824 511.684,595.615 512.252,583.537 512.821,575.854 513.389,568.31 513.957,559.75 514.526,551.424 515.094,544.052 515.662,537.897 516.231,528.823 516.799,520.908 517.367,516.388 517.936,510.758 518.504,502.07 519.072,495.496 519.641,487.36 520.209,483.437 520.778,476.257 521.346,471.33 521.914,467.463 522.483,461.624 523.051,457.144 523.619,451.569 524.188,445.995 524.756,439.546 525.324,434.188 525.893,427.052 526.461,421.906 527.029,417.92 527.598,413.175 528.166,410.388 528.734,404.706 529.303,393.976 529.871,390.055 530.439,387.359 531.008,384.469 531.576,381.645 532.144,377.862 532.713,375.35 533.281,372.675 533.85,369.89 534.418,366.205 534.986,362.561 535.555,359.061 536.123,355.725 536.691,353.432 537.26,351.18 537.828,346.757 538.396,341.489 538.965,338.519 539.533,334.801 540.101,333.095 540.67,332.491 541.238,331.806 541.806,328.01 542.375,326.422 542.943,324.654 543.511,322.006 544.08,319.535 544.648,317.035 545.216,318.66 545.785,314.912 546.353,313.517 546.921,311.946 547.49,307.452 548.058,305.118 548.627,303.914 549.195,302.665 549.763,299.288 550.332,299.4 550.9,298.234 551.468,296.252 552.037,295.382 552.605,293.399 553.173,290.263 553.742,288.395 554.31,286.44 554.878,285.818 555.447,284.061 556.015,281.637 556.583,280.144 557.152,278.713 557.72,277.395 558.288,274.136 558.857,274.757 559.425,273.335 559.993,273.173 560.562,272.881 561.13,270.617 561.698,269.512 562.267,269.529 562.835,269.445 563.404,266.208 563.972,265.23 564.54,263.447 565.109,264.687 565.677,265.899 566.245,265.826 566.814,264.765 567.382,266.835 567.95,266.681 568.519,267.612 569.087,266.28 569.655,266.198 570.224,266.997 570.792,265.724 571.36,263.25 571.929,261.991 572.497,260.875 573.065,263.903 573.634,261.518 574.202,258.988 574.77,257.817 575.339,257.93 575.907,256.863 576.476,255.917 577.044,253.981 577.612,254.175 578.181,253.361 578.749,252.524 579.317,252.977 579.886,252.124 580.454,252.318 581.022,251.563 581.591,251.86 582.159,250.004 582.727,251.402 583.296,251.449 583.864,254.502 584.432,252.489 585.001,251.518 585.569,250.667 586.137,252.095 586.706,251.937 587.274,245.91 587.842,247.313 588.411,248.573 588.979,246.638 589.547,246.958 590.116,246.277 590.684,246.603 591.253,245.818 591.821,245.079 592.389,247.471 592.958,247.796 593.526,247.037 594.094,246.417 594.663,244.77 595.231,246.233 595.799,247.442 596.368,247.49 596.936,245.575 597.504,245.912 598.073,247.23 598.641,245.484 599.209,243.754 599.778,245.197 600.346,242.392 600.914,244.001 601.483,245.345 602.051,244.562 602.619,243.821 603.188,245.177 603.756,244.397 604.325,244.528 604.893,243.782 605.461,244.14 606.03,244.345 606.598,245.573 607.166,241.55 607.735,243.008 608.303,244.315 608.871,240.287 609.44,240.904 610.008,241.247 610.576,242.711 611.145,244.98 611.713,244.957 612.281,245.938 612.85,245.851 613.418,245.863 613.986,247.023 614.555,246.065 615.123,247.214 615.691,247.283 616.26,246.373 616.828,245.348 617.396,244.321 617.965,245.49 618.533,245.515 619.102,246.522 619.67,245.421 620.238,243.405 620.807,240.487 621.375,242.973 621.943,243.464 622.512,241.579 623.08,242.892 623.648,242.986 624.217,242.736 624.785,241.998 625.353,242.442 625.922,238.759 626.49,239.076 627.058,236.39 627.627,243.229 628.195,242.341 628.763,242.378 629.332,241.465 629.9,241.631 630.468,242.796 631.037,242.066 631.605,239.959 632.173,239.057 632.742,236.224 633.31,236.644 633.879,236.086 634.447,235.36 635.015,235.536 635.584,234.773 636.152,237.157 636.72,238.46 637.289,238.687 637.857,239.818 638.425,240.148 638.994,239.279 639.562,240.758 640.13,240.988 640.699,243.001 641.267,242.868 641.835,241.985 642.404,241.284 642.972,241.279 643.54,241.202 644.109,242.345 644.677,242.353 645.245,240.185 645.814,242.235 646.382,244.195 646.951,245.121 647.519,243.05 648.087,241.775 648.656,242.633 649.224,242.576 649.792,240.615 650.361,239.486 650.929,238.637 651.497,236.498 652.066,236.65 652.634,237.108 653.202,239.327 653.771,238.212 654.339,238.211 654.907,239.458 655.476,238.36 656.044,238.384 656.612,237.5 657.181,237.706 657.749,237.797 658.317,238.155 658.886,239.19 659.454,240.285 660.022,241.387 660.591,241.227 661.159,241.058 661.728,241.035 662.296,238.838 662.864,240.011 663.433,239.092 664.001,238.975 664.569,238.996 665.138,242.11 665.706,240.84 666.274,239.632 666.843,238.705 667.411,239.937 667.979,240.071 668.548,239.853 669.116,240.714 669.684,239.711 670.253,239.453 670.821,237.345 671.389,235.258 671.958,236.167 672.526,236.388 673.094,237.444 673.663,234.556 674.231,234.797 674.799,234.092 675.368,234.333 675.936,232.459 676.505,232.752 677.073,234.032 677.641,235.346 678.21,235.476 678.778,234.606 679.346,231.646 679.915,232.043 680.483,230.305 681.051,231.995 681.62,232.353 682.188,233.867 682.756,233.192 683.325,233.504 683.893,236.023 684.461,235.116 685.03,236.263 685.598,237.406 686.166,236.355 686.735,236.523 687.303,241.127 687.871,239.79 688.44,243.669 689.008,242.139 689.577,244.842 690.145,244.435 690.713,244.046 691.282,242.815 691.85,243.666 692.418,243.893 692.987,243.505 693.555,244.062 694.123,243.565 694.692,241.854 695.26,240.293 695.828,239.787 696.397,238.388 696.965,239.178 697.533,237.648 698.102,236.466 698.67,236.217 699.238,238.105 699.807,239.804 700.375,239.362 700.943,239.913 701.512,238.256 702.08,238 702.648,237.908 703.217,237.667 703.785,234.352 704.354,234.112 704.922,233 705.49,233.936 706.059,233.872 706.627,233.09 707.195,230.343 707.764,229.887 708.332,229.205 708.9,229.832 709.469,231.062 710.037,230.26 710.605,230.53 711.174,230.563 711.742,228.9 712.31,230.463 712.879,230.989 713.447,231.414 714.015,230.614 714.584,229.037 715.152,230.626 715.72,230.969 716.289,230.283 716.857,231.657 717.425,230.78 717.994,233.035 718.562,235.184 719.131,234.284 719.699,236.506 720.267,237.647 720.836,237.584 721.404,239.439 721.972,240.066 722.541,240.023 723.109,239.747 723.677,237.468 724.246,236.369 724.814,234.337 725.382,234.532 725.951,233.626 726.519,231.694 727.087,231 727.656,230.281 728.224,230.852 728.792,231.233 729.361,231.81 729.929,232.487 730.497,230.568 731.066,233.328 731.634,231.711 732.203,231.111 732.771,229.52 733.339,229.979 733.908,228.298 734.476,227.63 735.044,228.342 735.613,228.007 736.181,230.804 736.749,231.192 737.318,233.56 737.886,232.489 738.454,231.5 739.023,229.609 739.591,227.919 740.159,227.633 740.728,232.564 741.296,232.856 741.864,233.146 742.433,234.706 743.001,235.885 743.569,235.134 744.138,238.532 744.706,238.394 745.274,239.476 745.843,238.272 746.411,237.925 746.98,238.685 747.548,238.214 748.116,237.92 748.685,236.76 749.253,234.61 749.821,236.818 750.39,236.875 750.958,240.032 751.526,239.857 752.095,237.563 752.663,237.576 753.231,236.477 753.8,236.58 754.368,236.395 754.936,238.365 755.505,239.366 756.073,238.119 756.641,237.016 757.21,238.045 757.778,238.957 758.346,235.607 758.915,235.366 759.483,235.395 760.052,235.686 760.62,235.575 761.188,235.638 761.757,236.541 762.325,234.403 762.893,236.298 763.462,236.298 764.03,236.212 764.598,237.084 765.167,237.961 765.735,238.731 766.303,239.341 766.872,240.892 767.44,239.251 768.008,239.028 768.577,236.763 769.145,237.868 769.713,236.568 770.282,237.484 770.85,239.168 771.418,240.062 771.987,240.627 772.555,240.092 773.123,239.72 773.692,238.444 774.26,236.09 774.829,235.93 775.397,235.729 775.965,235.448 776.534,234.116 777.102,233.043 777.67,234.18 778.239,234.082 778.807,234.113 779.375,235.136 779.944,235.135 780.512,234.025 781.08,234.02 781.649,234.093 782.217,235.029 782.785,233.968 783.354,235.017 783.922,238.291 784.49,238.111 785.059,235.794 785.627,237.565 786.195,237.297 786.764,236.013 787.332,234.684 787.9,233.466 788.469,234.21 789.037,234.069 789.606,233.157 790.174,232.091 790.742,233.221 791.311,235.247 791.879,233.089 792.447,230.132 793.016,230.505 793.584,231.516 794.152,229.69 794.721,226.839 795.289,224.979 795.857,227.835 796.426,230.315 796.994,232.831 797.562,233.017 798.131,232.06 798.699,231.178 799.267,231.333 799.836,229.547 800.404,230.575 800.972,229.729 801.541,231.986 802.109,233.26 802.678,236.367 803.246,236.265 803.814,237.322 804.383,237.024 804.951,237.847 805.519,238.53 806.088,238.073 806.656,238.912 807.224,237.39 807.793,236 808.361,237.768 808.929,238.588 809.498,237.355 810.066,237.108 810.634,235.625 811.203,237.352 811.771,237.081 812.339,237.6 812.908,237.252 813.476,236.651 814.044,240.298 814.613,239.823 815.181,239.237 815.749,241.786 816.318,241.197 816.886,239.333 817.455,238.614 818.023,238.201 818.591,239.928 819.16,239.269 819.728,239.065 820.296,237.515 820.865,240.031 821.433,239.262 822.001,238.724 822.57,238.27 823.138,238.617 823.706,239.376 824.275,239.762 824.843,238.104 825.411,235.56 825.98,234.252 826.548,233.002 827.116,231.04 827.685,231.034 828.253,231.042 828.821,231.149 829.39,228.867 829.958,227.852 830.526,227.997 831.095,225.14 831.663,225.303 832.232,225.999 832.8,227.28 833.368,228.768 833.937,227.994 834.505,229.215 835.073,228.425 835.642,229.601 836.21,230.826 836.778,231.918 837.347,229.931 837.915,231.192 838.483,230.525 839.052,228.675 839.62,228.066 840.188,227.343 840.757,227.758 841.325,229.237 841.893,229.438 842.462,231.662 843.03,228.728 843.598,228.079 844.167,229.58 844.735,229.97 845.304,230.17 845.872,227.345 846.44,225.728 847.009,227.287 847.577,226.785 848.145,225.215 848.714,225.123 849.282,227.679 849.85,226.048 850.419,227.95 850.987,228.489 851.555,227.925 852.124,225.405 852.692,225.813 853.26,223.41 853.829,225.203 854.397,225.989 854.965,227.775 855.534,230.486 856.102,232.696 856.67,232.945 857.239,232.953 857.807,234.29 858.375,233.343 858.944,231.439 859.512,230.716 860.081,234.323 860.649,233.191 861.217,228.359 861.786,229.833 862.354,233.132 862.922,233.27 863.491,234.545 864.059,235.53 864.627,237.448 865.196,240.413 865.764,238.903 866.332,237.586 866.901,238.33 867.469,238.322 868.037,237.904 868.606,236.895 869.174,236.852 869.742,236.868 870.311,237.75 870.879,235.331 871.447,236.389 872.016,234.154 872.584,233.114 873.152,234.158 873.721,235.3 874.289,234.226 874.858,235.064 875.426,236.114 875.994,234.131 876.563,232.931 877.131,231.176 877.699,231.38 878.268,231.439 878.836,231.732 879.404,232.895 879.973,231.91 880.541,230.082 881.109,231.092 881.678,231.144 882.246,232.151 882.814,233.37 883.383,233.462 883.951,234.75 884.519,233.684 885.088,232.409 885.656,230.302 886.224,229.279 886.793,229.48 887.361,229.944 887.93,230.329 888.498,230.651 889.066,230.951 889.635,233.295 890.203,234.651 890.771,233.805 891.34,234.917 891.908,233.837 892.476,234.75 893.045,236.59 893.613,235.493 894.181,236.397 894.75,237.113 895.318,236.839 895.886,235.546 896.455,236.223 897.023,235.822 897.591,232.594 898.16,232.758 898.728,232.871 899.296,233.95 899.865,236.108 900.433,235.82 901.001,235.856 901.57,237.792 902.138,239.723 902.707,237.332 903.275,235.265 903.843,236.316 904.412,235.902 904.98,237.742 905.548,236.185 906.117,236.872 906.685,234.749 907.253,234.61 907.822,235.38 908.39,232.86 908.958,232.835 909.527,232.746 910.095,231.89 910.663,233.847 911.232,233.666 911.8,233.742 912.368,234.572 912.937,236.643 913.505,237.612 914.073,239.418 914.642,240.082 915.21,238.628 915.779,237.079 916.347,235.516 916.915,235.339 917.484,233.994 918.052,231.923 918.62,231.01 919.189,231.148 919.757,231.418 920.325,231.619 920.894,230.855 921.462,230.765 922.03,233.952 922.599,232.835 923.167,232.659 923.735,232.68 924.304,233.756 924.872,236.709 925.44,237.531 926.009,236.109 926.577,236.094 927.145,233.966 927.714,234.746 928.282,235.463 928.85,236.107 929.419,235.769 929.987,233.567 930.556,234.412 931.124,233.258 931.692,233.278 932.261,233.187 932.829,232.104 933.397,232.226 933.966,232.346 934.534,232.47 935.102,233.346 935.671,234.36 936.239,236.287 936.807,236.166 937.376,235.013 937.944,234.814 938.512,233.526 939.081,234.595 939.649,236.439 940.217,236.083 940.786,236.748 941.354,235.601 941.922,234.36 942.491,236.203 943.059,235.903 943.627,233.686 944.196,234.695 944.764,234.355 945.333,235.031 945.901,235.681 946.469,236.158 947.038,232.7 947.606,228.348 948.174,229.532 948.743,229.664 949.311,227.882 949.879,227.337 950.448,229.868 951.016,231.027 951.584,230.398 952.153,231.483 952.721,230.407 953.289,230.662 953.858,229.869 954.426,229.039 954.994,228.273 955.563,230.839 956.131,231.866 956.699,230.746 957.268,230 957.836,231.178 958.405,232.097 958.973,231.116 959.541,231.208 960.11,232.319 960.678,232.195 961.246,233.367 961.815,232.303 962.383,229.56 962.951,229.938 963.52,229.006 964.088,230.241 964.656,228.318 965.225,229.929 965.793,229.029 966.361,229.538 966.93,230.01 967.498,230.249 968.066,229.303 968.635,227.59 969.203,229.227 969.771,229.405 970.34,229.709 970.908,230.95 971.476,230.23 972.045,230.287 972.613,230.633 973.182,227.919 973.75,229.627 974.318,229.816 974.887,231.008 975.455,232.263 976.023,232.502 976.592,232.64 977.16,232.717 977.728,232.818 978.297,231.923 978.865,231.167 979.433,232.503 980.002,232.727 980.57,234.958 981.138,236.074 981.707,235.986 982.275,236.775 982.843,236.507 983.412,237.173 983.98,236.939 984.548,237.804 985.117,237.625 985.685,238.454 986.253,238.161 986.822,235.705 987.39,232.633 987.959,233.782 988.527,232.817 989.095,233.777 989.664,232.833 990.232,232.89 990.8,231.907 991.369,233.025 991.937,232.941 992.505,233.75 993.074,233.436 993.642,233.308 994.21,233.492 994.779,231.333 995.347,230.566 995.915,230.809 996.484,230.054 997.052,230.378 997.62,231.502 998.189,231.603 998.757,232.726 999.325,231.762 999.894,231.906 1000.46,232.039 1001.03,232.905 1001.6,233.08 1002.17,232.056 1002.74,232.194 1003.3,230.172 1003.87,232.493 1004.44,234.643 1005.01,234.654 1005.58,234.402 1006.15,232.483 1006.71,233.656 1007.28,234.743 1007.85,234.768 1008.42,235.847 1008.99,237.727 1009.56,240.535 1010.12,240.017 1010.69,239.423 1011.26,238.871 1011.83,237.562 1012.4,237.143 1012.97,237.896 1013.53,236.405 1014.1,235.127 1014.67,234.817 1015.24,233.754 1015.81,232.846 1016.38,233.047 1016.94,234.127 1017.51,232.088 1018.08,232.045 1018.65,233.869 1019.22,233.832 1019.79,233.675 1020.35,232.535 1020.92,231.492 1021.49,233.521 1022.06,234.497 1022.63,233.282 1023.2,233.569 1023.76,234.426 1024.33,234.021 1024.9,234.76 1025.47,233.247 1026.04,233.237 1026.61,232.231 1027.17,234.119 1027.74,235.092 1028.31,233.964 1028.88,232.778 1029.45,232.93 1030.02,233.119 1030.58,232.122 1031.15,234.419 1031.72,234.163 1032.29,233.005 1032.86,231.082 1033.43,233.26 1033.99,233.231 1034.56,233.192 1035.13,232.229 1035.7,233.165 1036.27,232.915 1036.84,229.88 1037.4,232.032 1037.97,233.588 1038.54,234.689 1039.11,233.649 1039.68,231.499 1040.25,231.592 1040.81,232.777 1041.38,232.882 1041.95,234.733 1042.52,234.502 1043.09,232.279 1043.66,233.109 1044.22,232.01 1044.79,235.03 1045.36,233.756 1045.93,231.512 1046.5,231.449 1047.07,232.678 1047.63,231.579 1048.2,231.731 1048.77,230.637 1049.34,229.518 1049.91,227.505 1050.48,226.733 1051.05,226.342 1051.61,227.934 1052.18,228.485 1052.75,231.705 1053.32,231.841 1053.89,231.888 1054.46,232.916 1055.02,230.898 1055.59,232.134 1056.16,232.105 1056.73,231.478 1057.3,231.536 1057.87,229.619 1058.43,227.929 1059,228.477 1059.57,227.83 1060.14,228.178 1060.71,228.6 1061.28,229.077 1061.84,227.481 1062.41,226.572 1062.98,227.091 1063.55,229.568 1064.12,229.987 1064.69,231.335 1065.25,229.468 1065.82,230.875 1066.39,230.05 1066.96,231.48 1067.53,231.557 1068.1,230.671 1068.66,230.765 1069.23,231.838 1069.8,231.988 1070.37,232.119 1070.94,231.303 1071.51,232.608 1072.07,232.646 1072.64,231.587 1073.21,232.646 1073.78,230.592 1074.35,231.822 1074.92,231.893 1075.48,231.087 1076.05,231.508 1076.62,232.894 1077.19,229.844 1077.76,231.214 1078.33,231.306 1078.89,233.832 1079.46,234.958 1080.03,236.607 1080.6,237.615 1081.17,235.477 1081.74,235.522 1082.3,237.432 1082.87,237.168 1083.44,235.911 1084.01,235.84 1084.58,234.676 1085.15,235.856 1085.71,235.841 1086.28,234.611 1086.85,236.727 1087.42,238.328 1087.99,239.011 1088.56,239.646 1089.12,238.284 1089.69,236.884 1090.26,236.547 1090.83,235.381 1091.4,235.201 1091.97,235.054 1092.53,233.827 1093.1,235.87 1093.67,236.695 1094.24,235.461 1094.81,235.297 1095.38,237.186 1095.94,236.709 1096.51,236.57 1097.08,237.364 1097.65,235.988 1098.22,236.85 1098.79,236.337 1099.35,237.862 1099.92,237.531 1100.49,236.104 1101.06,236.629 1101.63,235.304 1102.2,233.008 1102.76,232.979 1103.33,232.096 1103.9,230.912 1104.47,231.888 1105.04,233.888 1105.61,234.808 1106.17,235.615 1106.74,234.453 1107.31,234.347 1107.88,232.47 1108.45,233.562 1109.02,232.489 1109.58,233.434 1110.15,231.349 1110.72,231.52 1111.29,230.742 1111.86,231.754 1112.43,231.663 1112.99,231.916 1113.56,230.061 1114.13,230.294 1114.7,230.651 1115.27,229.783 1115.84,228.972 1116.4,227.207 1116.97,227.685 1117.54,226.262 1118.11,225.623 1118.68,227.274 1119.25,225.719 1119.81,228.257 1120.38,230.731 1120.95,230.09 1121.52,232.343 1122.09,230.385 1122.66,229.502 1123.23,230.192 1123.79,230.47 1124.36,232.806 1124.93,234.055 1125.5,235.98 1126.07,235.771 1126.64,238.438 1127.2,238.071 1127.77,237.682 1128.34,238.614 1128.91,237.203 1129.48,238.103 1130.05,238.565 1130.61,236.299 1131.18,235.204 1131.75,234.941 1132.32,233.799 1132.89,231.514 1133.46,230.618 1134.02,232.76 1134.59,233.892 1135.16,232.77 1135.73,232.828 1136.3,230.889 1136.87,230.988 1137.43,231.118 1138,228.353 1138.57,229.664 1139.14,228.01 1139.71,230.175 1140.28,232.453 1140.84,232.321 1141.41,233.591 1141.98,233.447 1142.55,233.495 1143.12,234.497 1143.69,234.541 1144.25,234.42 1144.82,235.494 1145.39,233.246 1145.96,233.147 1146.53,233.234 1147.1,235.24 1147.66,235.224 1148.23,234.189 1148.8,234.055 1149.37,232.971 1149.94,234.991 1150.51,234.762 1151.07,234.812 1151.64,233.57 1152.21,232.325 1152.78,232.326 1153.35,231.485 1153.92,232.573 1154.48,231.644 1155.05,230.808 1155.62,230.913 1156.19,234.151 1156.76,233.126 1157.33,233.007 1157.89,233.987 1158.46,233.889 1159.03,233.802 1159.6,234.618 1160.17,232.545 1160.74,230.663 1161.3,234.665 1161.87,236.625 1162.44,236.588 1163.01,235.504 1163.58,235.356 1164.15,235.109 1164.71,235.815 1165.28,234.783 1165.85,235.757 1166.42,234.502 1166.99,233.065 1167.56,230.864 1168.12,232.27 1168.69,233.423 1169.26,233.375 1169.83,233.505 1170.4,232.432 1170.97,230.593 1171.53,229.516 1172.1,227.931 1172.67,228.367 1173.24,228.536 1173.81,227.588 1174.38,231.159 1174.94,234.471 1175.51,232.484 1176.08,233.633 1176.65,233.572 1177.22,233.45 1177.79,232.636 1178.35,230.687 1178.92,229.72 1179.49,230.001 1180.06,233.404 1180.63,233.365 1181.2,232.111 1181.76,233.004 1182.33,232.974 1182.9,231.967 1183.47,233.983 1184.04,235.995 1184.61,237.839 1185.17,238.401 1185.74,238.81 1186.31,239.327 1186.88,239.685 1187.45,240.228 1188.02,236.82 1188.58,236.322 1189.15,237.135 1189.72,236.65 1190.29,236.292 1190.86,234.879 1191.43,234.73 1192,235.804 1192.56,234.546 1193.13,234.195 1193.7,231.989 1194.27,232.85 1194.84,232.94 1195.41,231.887 1195.97,233.969 1196.54,233.993 1197.11,231.615 1197.68,229.584 1198.25,229.892 1198.82,229.08 1199.38,230.276 1199.95,232.216 1200.52,232.077 1201.09,234.157 1201.66,234.171 1202.23,235.875 1202.79,236.549 1203.36,235.349 1203.93,235.248 1204.5,235.1 1205.07,233.841 1205.64,233.629 1206.2,230.612 1206.77,230.5 1207.34,230.785 1207.91,228.966 1208.48,231.307 1209.05,228.496 1209.61,229.946 1210.18,228.905 1210.75,229.281 1211.32,230.47 1211.89,229.529 1212.46,229.816 1213.02,230.982 1213.59,230.069 1214.16,231.067 1214.73,231.143 1215.3,229.384 1215.87,228.369 1216.43,229.565 1217,230.81 1217.57,232.016 1218.14,228.913 1218.71,230.193 1219.28,230.253 1219.84,229.395 1220.41,231.804 1220.98,231.948 1221.55,232.162 1222.12,231.086 1222.69,228.15 1223.25,227.493 1223.82,225.79 1224.39,228.432 1224.96,227.727 1225.53,228.226 1226.1,231.535 1226.66,230.6 1227.23,232.079 1227.8,231.234 1228.37,232.408 1228.94,233.571 1229.51,234.595 1230.07,235.616 1230.64,236.459 1231.21,236.05 1231.78,234.779 1232.35,234.449 1232.92,234.431 1233.48,234.34 1234.05,233.271 1234.62,234.253 1235.19,235.131 1235.76,230.82 1236.33,231.942 1236.89,233.079 1237.46,237.275 1238.03,237.302 1238.6,234.908 1239.17,237.752 1239.74,236.387 1240.3,236.208 1240.87,236.018 1241.44,235.494 1242.01,233.494 1242.58,233.317 1243.15,234.328 1243.71,234.133 1244.28,238.127 1244.85,237.764 1245.42,237.382 1245.99,237.151 1246.56,238.202 1247.12,237.651 1247.69,236.214 1248.26,236.984 1248.83,237.612 1249.4,235.97 1249.97,237.503 1250.53,238.077 1251.1,234.434 1251.67,232.251 1252.24,231.233 1252.81,229.27 1253.38,230.555 1253.94,230.486 1254.51,229.845 1255.08,228.804 1255.65,230.956 1256.22,230.916 1256.79,230.042 1257.35,228.11 1257.92,229.262 1258.49,228.329 1259.06,228.559 1259.63,227.884 1260.2,229.415 1260.76,230.7 1261.33,229.72 1261.9,231.112 1262.47,231.087 1263.04,231.14 1263.61,231.318 1264.18,231.462 1264.74,231.553 1265.31,230.671 1265.88,229.778 1266.45,233.321 1267.02,233.381 1267.59,232.109 1268.15,231.148 1268.72,230.841 1269.29,230.94 1269.86,232.222 1270.43,231.093 1271,229.202 1271.56,229.574 1272.13,232.745 1272.7,232.01 1273.27,232.047 1273.84,229.96 1274.41,231.093 1274.97,231.489 1275.54,231.641 1276.11,230.772 1276.68,232.014 1277.25,235.127 1277.82,234.169 1278.38,232.957 1278.95,233.648 1279.52,231.696 1280.09,230.778 1280.66,234.917 1281.23,234.951 1281.79,235.88 1282.36,233.576 1282.93,233.627 1283.5,232.402 1284.07,234.459 1284.64,232.257 1285.2,231.351 1285.77,230.445 1286.34,233.745 1286.91,232.708 1287.48,230.782 1288.05,230.966 1288.61,231.183 1289.18,231.396 1289.75,229.427 1290.32,230.709 1290.89,230.818 1291.46,232.176 1292.02,231.339 1292.59,229.407 1293.16,230.826 1293.73,230.005 1294.3,232.275 1294.87,232.298 1295.43,232.273 1296,233.4 1296.57,233.303 1297.14,234.424 1297.71,234.483 1298.28,232.354 1298.84,230.447 1299.41,232.64 1299.98,229.648 1300.55,229.665 1301.12,229.066 1301.69,228.325 1302.25,230.679 1302.82,232.131 1303.39,233.318 1303.96,234.247 1304.53,234.433 1305.1,234.284 1305.66,235.044 1306.23,237.036 1306.8,236.721 1307.37,233.541 1307.94,233.545 1308.51,232.537 1309.07,232.533 1309.64,233.773 1310.21,234.67 1310.78,235.574 1311.35,236.288 1311.92,237.272 1312.48,237.992 1313.05,240.666 1313.62,239.171 1314.19,238.836 1314.76,238.396 1315.33,238.955 1315.89,237.28 1316.46,236.727 1317.03,237.435 1317.6,237.115 1318.17,234.658 1318.74,232.443 1319.3,231.448 1319.87,231.827 1320.44,232.031 1321.01,231.923 1321.58,233.026 1322.15,235.929 1322.71,234.527 1323.28,233.657 1323.85,233.775 1324.42,233.477 1324.99,233.296 1325.56,235.517 1326.12,236.371 1326.69,235.244 1327.26,236.079 1327.83,234.641 1328.4,233.461 1328.97,232.453 1329.53,233.43 1330.1,231.22 1330.67,230.346 1331.24,230.623 1331.81,230.834 1332.38,230.967 1332.94,230.819 1333.51,229.722 1334.08,228.746 1334.65,229.884 1335.22,229.866 1335.79,229.808 1336.36,229.909 1336.92,231.324 1337.49,230.58 1338.06,229.702 1338.63,228.796 1339.2,227.869 1339.77,229.513 1340.33,229.661 1340.9,230.049 1341.47,230.088 1342.04,231.32 1342.61,232.595 1343.18,232.446 1343.74,232.469 1344.31,232.622 1344.88,233.67 1345.45,232.409 1346.02,232.391 1346.59,233.524 1347.15,230.574 1347.72,229.727 1348.29,228.925 1348.86,230.429 1349.43,230.697 1350,234.21 1350.56,236.102 1351.13,234.876 1351.7,235.662 1352.27,235.356 1352.84,234.324 1353.41,235.301 1353.97,235.262 1354.54,236.197 1355.11,236.135 1355.68,236.051 1356.25,233.769 1356.82,232.457 1357.38,232.456 1357.95,232.562 1358.52,231.763 1359.09,232.925 1359.66,233.967 1360.23,232.746 1360.79,233.82 1361.36,233.84 1361.93,234.081 1362.5,235.115 1363.07,234.728 1363.64,236.687 1364.2,235.826 1364.77,235.363 1365.34,234.294 1365.91,234.059 1366.48,232.877 1367.05,233.787 1367.61,233.695 1368.18,232.61 1368.75,232.836 1369.32,232.604 1369.89,234.837 1370.46,234.702 1371.02,234.425 1371.59,234.229 1372.16,234.011 1372.73,234.056 1373.3,235.99 1373.87,234.593 1374.43,233.291 1375,233.207 1375.57,233.947 1376.14,234.896 1376.71,232.674 1377.28,228.296 1377.84,229.586 1378.41,228.592 1378.98,227.67 1379.55,227.084 1380.12,233.567 1380.69,233.266 1381.25,234.291 1381.82,232.98 1382.39,231.911 1382.96,229.939 1383.53,226.148 1384.1,226.827 1384.66,228.336 1385.23,229.826 1385.8,231.12 1386.37,231.395 1386.94,230.511 1387.51,231.817 1388.07,231.671 1388.64,232.757 1389.21,233.952 1389.78,237.065 1390.35,238.846 1390.92,235.655 1391.48,235.322 1392.05,236.299 1392.62,235.819 1393.19,232.599 1393.76,232.592 1394.33,231.479 1394.89,229.548 1395.46,229.767 1396.03,231.1 1396.6,233.21 1397.17,231.116 1397.74,231.198 1398.3,229.41 1398.87,227.715 1399.44,227.179 1400.01,227.708 1400.58,229.199 1401.15,229.633 1401.71,230.868 1402.28,230.988 1402.85,231.995 1403.42,232.107 1403.99,232.072 1404.56,232.101 1405.13,231.202 1405.69,231.422 1406.26,229.522 1406.83,229.676 1407.4,228.888 1407.97,230.062 1408.54,230.251 1409.1,230.325 1409.67,230.558 1410.24,229.717 1410.81,230.147 1411.38,229.497 1411.95,231.922 1412.51,233.149 1413.08,233.179 1413.65,232.392 1414.22,232.316 1414.79,232.446 1415.36,232.677 1415.92,233.509 1416.49,236.665 1417.06,233.45 1417.63,233.587 1418.2,232.578 1418.77,231.885 1419.33,237.081 1419.9,233.547 1420.47,233.52 1421.04,233.678 1421.61,231.705 1422.18,234.048 1422.74,236.11 1423.31,239.141 1423.88,241.8 1424.45,242.36 1425.02,243.638 1425.59,240.889 1426.15,242.146 1426.72,241.417 1427.29,240.739 1427.86,240.214 1428.43,237.699 1429,238.407 1429.56,238.106 1430.13,237.717 1430.7,235.265 1431.27,237.019 1431.84,233.641 1432.41,233.498 1432.97,232.404 1433.54,231.269 1434.11,230.328 1434.68,230.419 1435.25,229.563 1435.82,231.842 1436.38,232.935 1436.95,233.201 1437.52,232.217 1438.09,232.066 1438.66,232.211 1439.23,233.227 1439.79,233.196 1440.36,231.115 1440.93,231.994 1441.5,230.999 1442.07,230.033 1442.64,231.26 1443.2,231.273 1443.77,231.329 1444.34,232.506 1444.91,231.318 1445.48,230.468 1446.05,229.502 1446.61,229.699 1447.18,229.866 1447.75,231.141 1448.32,232.357 1448.89,231.429 1449.46,233.568 1450.02,231.445 1450.59,231.395 1451.16,232.407 1451.73,233.355 1452.3,234.307 1452.87,235.207 1453.43,235.037 1454,234.004 1454.57,234.609 1455.14,234.379 1455.71,235.499 1456.28,238.194 1456.84,236.814 1457.41,235.621 1457.98,236.426 1458.55,235.106 1459.12,234.798 1459.69,236.657 1460.25,235.171 1460.82,235.136 1461.39,236.748 1461.96,235.191 1462.53,234.865 1463.1,234.461 1463.66,236.451 1464.23,234.097 1464.8,234.089 1465.37,233.973 1465.94,232.843 1466.51,232.865 1467.07,233.787 1467.64,233.632 1468.21,234.134 1468.78,232.834 1469.35,234.061 1469.92,233.058 1470.48,233.133 1471.05,233.991 1471.62,235.022 1472.19,235.913 1472.76,235.486 1473.33,235.204 1473.89,234.894 1474.46,234.736 1475.03,233.677 1475.6,235.596 1476.17,234.166 1476.74,232.755 1477.31,232.718 1477.87,231.858 1478.44,231.988 1479.01,231.969 1479.58,228.847 1480.15,225.826 1480.72,226.171 1481.28,228.757 1481.85,231.228 1482.42,230.062 1482.99,228.163 1483.56,228.211 1484.13,229.398 1484.69,231.761 1485.26,230.744 1485.83,231.83 1486.4,232.001 1486.97,231.023 1487.54,230.429 1488.1,233.751 1488.67,234.509 1489.24,235.293 1489.81,235.187 1490.38,237.022 1490.95,234.705 1491.51,235.59 1492.08,234.334 1492.65,234.056 1493.22,234.96 1493.79,233.724 1494.36,233.551 1494.92,233.302 1495.49,231.005 1496.06,229.928 1496.63,229.052 1497.2,228.222 1497.77,228.488 1498.33,226.672 1498.9,228.099 1499.47,229.48 1500.04,229.472 1500.61,230.586 1501.18,231.799 1501.74,231.747 1502.31,228.539 1502.88,226.787 1503.45,227.31 1504.02,227.773 1504.59,228.391 1505.15,228.6 1505.72,227.86 1506.29,229.348 1506.86,231.769 1507.43,231.615 1508,232.614 1508.56,232.739 1509.13,232.909 1509.7,233.22 1510.27,233.107 1510.84,234.008 1511.41,231.73 1511.97,231.737 1512.54,232.851 1513.11,231.867 1513.68,235.034 1514.25,235.185 1514.82,235.074 1515.38,233.944 1515.95,233.935 1516.52,231.875 1517.09,230.924 1517.66,230.994 1518.23,231.068 1518.79,230.458 1519.36,229.723 1519.93,230.171 1520.5,229.576 1521.07,230.888 1521.64,231.007 1522.2,231.974 1522.77,231.96 1523.34,231.897 1523.91,229.02 1524.48,228.239 1525.05,229.735 1525.61,230.926 1526.18,231.28 1526.75,231.24 1527.32,233.483 1527.89,233.551 1528.46,231.698 1529.02,233.037 1529.59,232.188 1530.16,232.493 1530.73,232.513 1531.3,233.638 1531.87,234.731 1532.43,234.629 1533,234.522 1533.57,234.47 1534.14,234.349 1534.71,232.31 1535.28,232.37 1535.84,230.628 1536.41,232.818 1536.98,232.748 1537.55,231.672 1538.12,232.889 1538.69,230.245 1539.25,231.531 1539.82,231.719 1540.39,233.093 1540.96,231.296 1541.53,234.843 1542.1,234.906 1542.66,233.738 1543.23,233.742 1543.8,236.639 1544.37,237.599 1544.94,237.223 1545.51,238.129 1546.08,239.033 1546.64,236.659 1547.21,236.28 1547.78,238.125 1548.35,236.757 1548.92,234.565 1549.49,234.379 1550.05,232.078 1550.62,231.998 1551.19,230.146 1551.76,228.252 1552.33,225.49 1552.9,226.01 1553.46,227.44 1554.03,228.876 1554.6,228.14 1555.17,228.554 1555.74,229.884 1556.31,229.179 1556.87,232.237 1557.44,232.19 1558.01,232.258 1558.58,234.611 1559.15,233.514 1559.72,233.556 1560.28,232.606 1560.85,229.666 1561.42,228.908 1561.99,231.452 1562.56,233.529 1563.13,232.557 1563.69,231.661 1564.26,234.152 1564.83,235.922 1565.4,235.958 1565.97,238.815 1566.54,239.588 1567.1,239.199 1567.67,237.718 1568.24,237.493 1568.81,239.227 1569.38,241.652 1569.95,240.603 1570.51,240.11 1571.08,240.629 1571.65,237.929 1572.22,237.607 1572.79,235.139 1573.36,233.779 1573.92,232.617 1574.49,230.676 1575.06,231.635 1575.63,231.674 1576.2,231.721 1576.77,228.713 1577.33,228.973 1577.9,230.089 1578.47,229.294 1579.04,228.521 1579.61,228.833 1580.18,229.041 1580.74,228.237 1581.31,227.483 1581.88,229.927 1582.45,230.188 1583.02,230.422 1583.59,229.677 1584.15,230.981 1584.72,232.139 1585.29,231.401 1585.86,231.291 1586.43,229.318 1587,229.712 1587.56,231.066 1588.13,233.311 1588.7,235.674 1589.27,236.622 1589.84,237.507 1590.41,238.218 1590.97,237.88 1591.54,235.482 1592.11,237.27 1592.68,237.653 1593.25,238.218 1593.82,238.092 1594.38,237.587 1594.95,238.131 1595.52,235.605 1596.09,234.825 1596.66,235.679 1597.23,234.494 1597.79,233.332 1598.36,235.263 1598.93,233.924 1599.5,233.891 1600.07,232.729 1600.64,232.863 1601.2,231.829 1601.77,233.908 1602.34,234.689 1602.91,234.72 1603.48,233.685 1604.05,230.659 1604.61,230.94 1605.18,230.994 1605.75,233.117 1606.32,234.153 1606.89,233.883 1607.46,232.854 1608.02,234.13 1608.59,237.043 1609.16,234.717 1609.73,237.672 1610.3,237.228 1610.87,236.752 1611.43,235.246 1612,233.063 1612.57,230.644 1613.14,230.82 1613.71,231.866 1614.28,231.726 1614.84,231.805 1615.41,231.751 1615.98,230.849 1616.55,230.917 1617.12,230.951 1617.69,231.077 1618.26,228.999 1618.82,229.193 1619.39,229.655 1619.96,230.01 1620.53,231.264 1621.1,229.202 1621.67,228.507 1622.23,227.693 1622.8,225.973 1623.37,225.61 1623.94,225.07 1624.51,223.51 1625.08,224.079 1625.64,224.576 1626.21,224.03 1626.78,224.002 1627.35,223.724 1627.92,225.229 1628.49,226.139 1629.05,225.5 1629.62,226.09 1630.19,229.574 1630.76,233.041 1631.33,234.303 1631.9,233.395 1632.46,236.474 1633.03,234.273 1633.6,233.396 1634.17,234.766 1634.74,233.615 1635.31,232.842 1635.87,232.888 1636.44,233.98 1637.01,235.052 1637.58,234.842 1638.15,235.676 1638.72,237.686 1639.28,239.378 1639.85,239.02 1640.42,240.896 1640.99,239.636 1641.56,238.104 1642.13,239.909 1642.69,239.481 1643.26,240.048 1643.83,238.4 1644.4,232.893 1644.97,238.157 1645.54,236.907 1646.1,234.716 1646.67,232.604 1647.24,234.817 1647.81,235.801 1648.38,234.749 1648.95,234.747 1649.51,232.419 1650.08,233.325 1650.65,232.3 1651.22,234.276 1651.79,233.924 1652.36,234.656 1652.92,234.45 1653.49,235.391 1654.06,235.295 1654.63,234.144 1655.2,235.046 1655.77,237.957 1656.33,240.89 1656.9,241.337 1657.47,241.731 1658.04,241.046 1658.61,241.258 1659.18,240.477 1659.74,241.908 1660.31,242.224 1660.88,242.262 1661.45,240.626 1662.02,238.874 1662.59,239.475 1663.15,239 1663.72,237.491 1664.29,237.08 1664.86,235.623 1665.43,235.292 1666,235.979 1666.56,236.549 1667.13,235.939 1667.7,236.557 1668.27,235.984 1668.84,233.67 1669.41,232.332 1669.97,234.05 1670.54,234.656 1671.11,234.292 1671.68,231.88 1672.25,231.928 1672.82,231.507 1673.38,229.396 1673.95,230.412 1674.52,230.326 1675.09,229.177 1675.66,227.214 1676.23,227.605 1676.79,228.73 1677.36,229.835 1677.93,230.872 1678.5,230.921 1679.07,232.161 1679.64,232.116 1680.2,231.049 1680.77,230.989 1681.34,231.083 1681.91,230.909 1682.48,228.744 1683.05,227.92 1683.61,227.794 1684.18,230.95 1684.75,231.734 1685.32,231.786 1685.89,233.611 1686.46,235.387 1687.02,236.022 1687.59,233.76 1688.16,233.476 1688.73,234.368 1689.3,232.04 1689.87,229.802 1690.44,229.898 1691,229.916 1691.57,229.095 1692.14,230.449 1692.71,230.351 1693.28,229.459 1693.85,230.405 1694.41,230.45 1694.98,231.514 1695.55,231.509 1696.12,230.667 1696.69,230.651 1697.26,229.517 1697.82,229.44 1698.39,231.702 1698.96,230.692 1699.53,227.793 1700.1,226.973 1700.67,227.188 1701.23,226.394 1701.8,227.873 1702.37,228.06 1702.94,230.508 1703.51,227.699 1704.08,225.877 1704.64,225.199 1705.21,227.818 1705.78,227.264 1706.35,227.512 1706.92,226.732 1707.49,227.035 1708.05,228.494 1708.62,226.49 1709.19,224.819 1709.76,224.574 1710.33,225.297 1710.9,223.839 1711.46,223.491 1712.03,225.267 1712.6,225.725 1713.17,225.199 1713.74,225.879 1714.31,225.58 1714.87,227.159 1715.44,227.73 1716.01,229.347 1716.58,230.986 1717.15,229.145 1717.72,231.458 1718.28,233.753 1718.85,233.811 1719.42,234.987 1719.99,234.102 1720.56,232.975 1721.13,235.113 1721.69,236.029 1722.26,237.865 1722.83,239.571 1723.4,239.105 1723.97,238.733 1724.54,237.561 1725.1,236.392 1725.67,236.004 1726.24,236.976 1726.81,235.755 1727.38,234.641 1727.95,237.558 1728.51,235.074 1729.08,234.91 1729.65,233.833 1730.22,232.716 1730.79,234.031 1731.36,234.988 1731.92,236.22 1732.49,234.964 1733.06,236.949 1733.63,237.534 1734.2,238.152 1734.77,235.749 1735.33,234.58 1735.9,235.493 1736.47,236.381 1737.04,236.039 1737.61,235.769 1738.18,236.634 1738.74,236.253 1739.31,235.126 1739.88,232.756 1740.45,235.87 1741.02,234.699 1741.59,233.51 1742.15,234.382 1742.72,234.342 1743.29,235.942 1743.86,236.659 1744.43,236.341 1745,237.017 1745.56,233.782 1746.13,232.53 1746.7,233.342 1747.27,234.38 1747.84,231.206 1748.41,232.277 1748.97,233.98 1749.54,237.05 1750.11,235.606 1750.68,236.44 1751.25,232.857 1751.82,232.005 1752.38,228.881 1752.95,230.058 1753.52,229.021 1754.09,229.283 1754.66,228.394 1755.23,227.679 1755.79,226.117 1756.36,225.464 1756.93,224.148 1757.5,222.674 1758.07,223.274 1758.64,222.695 1759.21,223.274 1759.77,223.706 1760.34,222.122 1760.91,219.95 1761.48,219.895 1762.05,220.935 1762.62,222.819 1763.18,222.761 1763.75,225.51 1764.32,226.271 1764.89,226.935 1765.46,227.505 1766.03,228.197 1766.59,228.657 1767.16,229.421 1767.73,229.8 1768.3,231.104 1768.87,231.518 1769.44,231.791 1770,231.125 1770.57,230.512 1771.14,233.07 1771.71,233.243 1772.28,233.638 1772.85,232.588 1773.41,232.98 1773.98,233.323 1774.55,233.659 1775.12,236.976 1775.69,237.793 1776.26,237.589 1776.82,238.25 1777.39,238.25 1777.96,236.9 1778.53,236.814 1779.1,239.924 1779.67,239.61 1780.23,238.09 1780.8,236.693 1781.37,237.653 1781.94,237.516 1782.51,238.427 1783.08,237.102 1783.64,237.03 1784.21,233.887 1784.78,235.155 1785.35,235.068 1785.92,234.912 1786.49,233.808 1787.05,232.783 1787.62,229.875 1788.19,231.185 1788.76,231.286 1789.33,231.43 1789.9,233.586 1790.46,231.756 1791.03,233.934 1791.6,236.063 1792.17,238.095 1792.74,238.901 1793.31,238.601 1793.87,241.132 1794.44,240.484 1795.01,242.117 1795.58,241.369 1796.15,239.783 1796.72,240.533 1797.28,241.186 1797.85,239.373 1798.42,238.717 1798.99,237.212 1799.56,235.993 1800.13,235.422 1800.69,237.184 1801.26,235.63 1801.83,235.351 1802.4,236.257 1802.97,236.964 1803.54,236.736 1804.1,235.68 1804.67,235.446 1805.24,235.275 1805.81,233.928 1806.38,233.822 1806.95,233.592 1807.51,232.543 1808.08,233.236 1808.65,234.234 1809.22,234.971 1809.79,233.628 1810.36,232.463 1810.92,233.122 1811.49,234.101 1812.06,233.002 1812.63,231.777 1813.2,232.671 1813.77,230.501 1814.33,231.61 1814.9,231.634 1815.47,231.888 1816.04,232.054 1816.61,231.092 1817.18,232.075 1817.74,232.139 1818.31,233.027 1818.88,233.023 1819.45,229.916 1820.02,230.252 1820.59,229.152 1821.15,229.36 1821.72,229.605 1822.29,227.961 1822.86,229.329 1823.43,231.64 1824,232.914 1824.56,232.821 1825.13,233.932 1825.7,234.99 1826.27,235.752 1826.84,234.574 1827.41,235.508 1827.97,235.364 1828.54,235.081 1829.11,232.748 1829.68,231.756 1830.25,230.849 1830.82,230.044 1831.39,227.208 1831.95,227.588 1832.52,228.096 1833.09,228.186 1833.66,229.492 1834.23,229.76 1834.8,231.196 1835.36,230.198 1835.93,231.422 1836.5,230.557 1837.07,232.777 1837.64,232.807 1838.21,233.886 1838.77,234.93 1839.34,232.751 1839.91,232.404 1840.48,233.25 1841.05,232.229 1841.62,232.181 1842.18,232.229 1842.75,231.222 1843.32,233.5 1843.89,233.486 1844.46,234.602 1845.03,232.395 1845.59,230.238 1846.16,231.4 1846.73,229.484 1847.3,229.792 1847.87,228.999 1848.44,230.552 1849,230.874 1849.57,232.016 1850.14,232.12 1850.71,233.103 1851.28,234.121 1851.85,232.999 1852.41,234.988 1852.98,235.979 1853.55,235.673 1854.12,238.614 1854.69,236.277 1855.26,233.962 1855.82,235.781 1856.39,236.747 1856.96,237.459 1857.53,236.146 1858.1,237.874 1858.67,237.411 1859.23,236.185 1859.8,235.873 1860.37,233.563 1860.94,234.418 1861.51,233.194 1862.08,229.886 1862.64,229.977 1863.21,225.989 1863.78,228.53 1864.35,228.697 1864.92,227.763 1865.49,228.052 1866.05,228.343 1866.62,228.721 1867.19,229.971 1867.76,229.206 1868.33,229.369 1868.9,229.74 1869.46,230.856 1870.03,231.916 1870.6,232.108 1871.17,231.117 1871.74,231.171 1872.31,230.349 1872.87,231.423 1873.44,230.507 1874.01,228.702 1874.58,229.21 1875.15,227.464 1875.72,224.708 1876.28,223.416 1876.85,222.952 1877.42,223.62 1877.99,223.354 1878.56,224.228 1879.13,226.086 1879.69,225.748 1880.26,228.266 1880.83,227.855 1881.4,228.415 1881.97,226.846 1882.54,230.45 1883.1,230.888 1883.67,231.437 1884.24,229.546 1884.81,231.046 1885.38,231.271 1885.95,231.481 1886.51,232.745 1887.08,234.047 1887.65,234.133 1888.22,237.376 1888.79,237.343 1889.36,237.293 1889.92,236.237 1890.49,236.179 1891.06,235.901 1891.63,232.77 1892.2,231.595 1892.77,230.805 1893.33,231.066 1893.9,232.407 1894.47,233.495 1895.04,234.582 1895.61,232.574 1896.18,234.895 1896.74,234.841 1897.31,234.759 1897.88,233.669 1898.45,234.847 1899.02,233.889 1899.59,234.854 1900.16,234.932 1900.72,234.933 1901.29,233.808 1901.86,234.032 1902.43,235.026 1903,232.944 1903.57,232.937 1904.13,233.079 1904.7,233.186 1905.27,234.174 1905.84,232.125 1906.41,233.315 1906.98,232.33 1907.54,232.569 1908.11,232.563 1908.68,230.801 1909.25,231.974 1909.82,231.056 1910.39,231.451 1910.95,230.508 1911.52,226.551 1912.09,228.089 1912.66,229.518 1913.23,231.019 1913.8,231.387 1914.36,232.576 1914.93,234.73 1915.5,236.945 1916.07,236.783 1916.64,235.239 1917.21,235.247 1917.77,236.023 1918.34,235.891 1918.91,235.82 1919.48,236.641 1920.05,237.468 1920.62,236.241 1921.18,237.309 1921.75,235.247 1922.32,233.227 1922.89,233.427 1923.46,235.435 1924.03,236.419 1924.59,236.103 1925.16,238.827 1925.73,239.679 1926.3,239.163 1926.87,238.803 1927.44,238.583 1928,241.266 1928.57,239.55 1929.14,239.137 1929.71,237.591 1930.28,236.12 1930.85,235.99 1931.41,236.719 1931.98,237.342 1932.55,237.045 1933.12,237.737 1933.69,237.38 1934.26,237.094 1934.82,236.888 1935.39,236.567 1935.96,236.285 1936.53,237.259 1937.1,238.053 1937.67,236.623 1938.23,235.096 1938.8,235.871 1939.37,235.434 1939.94,235.857 1940.51,236.848 1941.08,236.407 1941.64,233.98 1942.21,235.903 1942.78,236.69 1943.35,237.299 1943.92,236.793 1944.49,235.403 1945.05,236.948 1945.62,235.744 1946.19,233.355 1946.76,234.369 1947.33,231.978 1947.9,233.027 1948.46,234.068 1949.03,232.805 1949.6,232.64 1950.17,232.647 1950.74,234.473 1951.31,235.172 1951.87,235.743 1952.44,235.519 1953.01,239.348 1953.58,238.943 1954.15,239.549 1954.72,239.121 1955.28,239.573 1955.85,238.857 1956.42,238.22 1956.99,237.682 1957.56,237.353 1958.13,237.667 1958.69,235.044 1959.26,235.886 1959.83,235.55 1960.4,234.276 1960.97,235.052 1961.54,233.558 1962.1,231.26 1962.67,230.086 1963.24,229.163 1963.81,228.284 1964.38,228.716 1964.95,227.967 1965.51,226.968 1966.08,226.316 1966.65,227.814 1967.22,226.959 1967.79,227.262 1968.36,226.369 1968.92,227.797 1969.49,225.885 1970.06,228.264 1970.63,228.565 1971.2,228.898 1971.77,229.027 1972.34,230.416 1972.9,229.493 1973.47,229.935 1974.04,229.952 1974.61,234.238 1975.18,233.121 1975.75,234.063 1976.31,232.914 1976.88,233.049 1977.45,231.856 1978.02,231.684 1978.59,231.599 1979.16,233.716 1979.72,234.616 1980.29,234.401 1980.86,233.957 1981.43,231.682 1982,229.682 1982.57,230.725 1983.13,232.73 1983.7,233.862 1984.27,236.75 1984.84,235.188 1985.41,234.893 1985.98,232.604 1986.54,232.333 1987.11,233.05 1987.68,231.952 1988.25,233.826 1988.82,234.739 1989.39,233.611 1989.95,232.221 1990.52,230.234 1991.09,231.316 1991.66,227.28 1992.23,227.51 1992.8,229.617 1993.36,228.816 1993.93,229.089 1994.5,230.304 1995.07,227.535 1995.64,229.938 1996.21,232.098 1996.77,233.39 1997.34,232.214 1997.91,233.311 1998.48,233.27 1999.05,233.273 1999.62,233.043 2000.18,232.196 2000.75,231.261 2001.32,230.302 2001.89,233.428 2002.46,233.238 2003.03,231.8 2003.59,231.724 2004.16,233.067 2004.73,231.124 2005.3,231.097 2005.87,232.189 2006.44,235.322 2007,231.997 2007.57,233.051 2008.14,235.089 2008.71,236.895 2009.28,236.533 2009.85,238.186 2010.41,235.383 2010.98,233.885 2011.55,232.672 2012.12,231.585 2012.69,232.753 2013.26,232.771 2013.82,231.802 2014.39,232.788 2014.96,230.555 2015.53,229.599 2016.1,231.713 2016.67,232.046 2017.23,232.072 2017.8,230.112 2018.37,229.435 2018.94,230.682 2019.51,230.795 2020.08,228.961 2020.64,228.261 2021.21,227.418 2021.78,227.951 2022.35,226.39 2022.92,226.81 2023.49,226.129 2024.05,225.821 2024.62,228.299 2025.19,228.672 2025.76,228.057 2026.33,227.391 2026.9,227.863 2027.46,228.274 2028.03,227.634 2028.6,229.116 2029.17,230.591 2029.74,229.913 2030.31,230.273 2030.87,229.626 2031.44,229.921 2032.01,230.255 2032.58,231.589 2033.15,232.629 2033.72,231.684 2034.28,232.94 2034.85,232.866 2035.42,235.148 2035.99,235.037 2036.56,235.034 2037.13,236.917 2037.69,236.858 2038.26,237.767 2038.83,238.694 2039.4,238.247 2039.97,238.849 2040.54,239.382 2041.11,239.91 2041.67,240.498 2042.24,238.785 2042.81,237.115 2043.38,236.008 2043.95,235.849 2044.52,233.801 2045.08,231.631 2045.65,232.623 2046.22,237.712 2046.79,235.104 2047.36,234.891 2047.93,233.67 2048.49,233.844 2049.06,230.681 2049.63,230.913 2050.2,230.979 2050.77,230.128 2051.34,229.298 2051.9,229.549 2052.47,230.728 2053.04,230.8 2053.61,234.229 2054.18,233.996 2054.75,234.874 2055.31,237.852 2055.88,239.728 2056.45,238.129 2057.02,237.861 2057.59,237.423 2058.16,238.932 2058.72,240.403 2059.29,240.029 2059.86,240.267 2060.43,239.771 2061,239.265 2061.57,238.516 2062.13,236.838 2062.7,234.628 2063.27,232.427 2063.84,230.266 2064.41,230.74 2064.98,230.884 2065.54,231.06 2066.11,229.239 2066.68,226.397 2067.25,228.889 2067.82,227.043 2068.39,226.396 2068.95,223.554 2069.52,225.474 2070.09,223.899 2070.66,224.494 2071.23,222.819 2071.8,222.324 2072.36,223.936 2072.93,225.548 2073.5,226.017 2074.07,225.67 2074.64,226.055 2075.21,227.482 2075.77,226.958 2076.34,227.494 2076.91,226.941 2077.48,227.282 2078.05,227.576 2078.62,228.843 2079.18,227.907 2079.75,228.32 2080.32,231.658 2080.89,230.841 2081.46,231.199 2082.03,233.387 2082.59,233.451 2083.16,231.558 2083.73,229.705 2084.3,228.006 2084.87,228.413 2085.44,229.928 2086,229.969 2086.57,230.263 2087.14,231.782 2087.71,232.782 2088.28,233.854 2088.85,235.919 2089.41,234.963 2089.98,235.942 2090.55,235.834 2091.12,231.685 2091.69,235.022 2092.26,235.942 2092.82,235.896 2093.39,235.706 2093.96,236.817 2094.53,235.275 2095.1,234.351 2095.67,236.212 2096.23,238.132 2096.8,238.811 2097.37,238.491 2097.94,239.192 2098.51,238.79 2099.08,238.455 2099.64,238.141 2100.21,236.861 2100.78,237.52 2101.35,235.984 2101.92,236.635 2102.49,237.553 2103.05,237.226 2103.62,237.951 2104.19,235.711 2104.76,233.317 2105.33,234.326 2105.9,234.284 2106.46,234.192 2107.03,233.289 2107.6,233.277 2108.17,234.067 2108.74,235.934 2109.31,234.811 2109.87,233.767 2110.44,232.683 2111.01,233.627 2111.58,233.474 2112.15,234.282 2112.72,234.261 2113.29,233.104 2113.85,232.077 2114.42,231.232 2114.99,230.435 2115.56,230.736 2116.13,230.776 2116.7,230.833 2117.26,228.953 2117.83,230.215 2118.4,233.593 2118.97,233.426 2119.54,233.398 2120.11,233.152 2120.67,234.06 2121.24,236.023 2121.81,235.718 2122.38,234.525 2122.95,234.572 2123.52,233.366 2124.08,234.27 2124.65,237.281 2125.22,239.142 2125.79,237.63 2126.36,236.186 2126.93,236.858 2127.49,235.444 2128.06,235.303 2128.63,235.239 2129.2,234.865 2129.77,235.642 2130.34,233.324 2130.9,232.316 2131.47,231.355 2132.04,232.412 2132.61,233.502 2133.18,233.467 2133.75,232.472 2134.31,233.363 2134.88,233.159 2135.45,233.239 2136.02,231.186 2136.59,231.148 2137.16,230.049 2137.72,232.15 2138.29,230.006 2138.86,230.146 2139.43,231.557 2140,230.482 2140.57,231.762 2141.13,232.689 2141.7,233.666 2142.27,236.583 2142.84,234.303 2143.41,235.236 2143.98,233.929 2144.54,232.522 2145.11,231.493 2145.68,228.387 2146.25,228.432 2146.82,228.838 2147.39,228.114 2147.95,226.533 2148.52,227.807 2149.09,226.214 2149.66,228.496 2150.23,229.902 2150.8,228.925 2151.36,230.219 2151.93,230.4 2152.5,228.766 2153.07,230.199 2153.64,231.606 2154.21,232.497 2154.77,230.451 2155.34,230.503 2155.91,232.729 2156.48,233.651 2157.05,232.494 2157.62,233.613 2158.18,231.522 2158.75,229.641 2159.32,230.853 2159.89,229.907 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip360)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.036 ± 0.024\n  with uncertainty of ± 0.0021484641887299914\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01429 ± (0.00239696, 0.00246523) (MC)\n  95% confidence interval: [-4.01917, -4.0096]) (MC)\n  linear error propagation: -4.01443 ± 0.00248941\n  |δ_y| = |0.00185893| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014288008129902, val_l = 0.004883541302033834, val_u = 0.004691638438064416)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip390\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip390)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip391\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip390)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip392\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1143.41 2211.02,1143.41 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,979.09 2211.02,979.09 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,814.772 2211.02,814.772 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,650.453 2211.02,650.453 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,486.135 2211.02,486.135 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,321.817 2211.02,321.817 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1143.41 365.751,1143.41 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,979.09 365.751,979.09 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,814.772 365.751,814.772 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,650.453 365.751,650.453 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,486.135 365.751,486.135 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,321.817 365.751,321.817 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M298.909 1129.21 Q295.298 1129.21 293.469 1132.77 Q291.664 1136.31 291.664 1143.44 Q291.664 1150.55 293.469 1154.11 Q295.298 1157.66 298.909 1157.66 Q302.543 1157.66 304.349 1154.11 Q306.177 1150.55 306.177 1143.44 Q306.177 1136.31 304.349 1132.77 Q302.543 1129.21 298.909 1129.21 M298.909 1125.5 Q304.719 1125.5 307.775 1130.11 Q310.853 1134.69 310.853 1143.44 Q310.853 1152.17 307.775 1156.78 Q304.719 1161.36 298.909 1161.36 Q293.099 1161.36 290.02 1156.78 Q286.964 1152.17 286.964 1143.44 Q286.964 1134.69 290.02 1130.11 Q293.099 1125.5 298.909 1125.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M259.557 992.435 L267.196 992.435 L267.196 966.069 L258.886 967.736 L258.886 963.477 L267.15 961.81 L271.826 961.81 L271.826 992.435 L279.465 992.435 L279.465 996.37 L259.557 996.37 L259.557 992.435 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M298.909 964.889 Q295.298 964.889 293.469 968.454 Q291.664 971.995 291.664 979.125 Q291.664 986.231 293.469 989.796 Q295.298 993.338 298.909 993.338 Q302.543 993.338 304.349 989.796 Q306.177 986.231 306.177 979.125 Q306.177 971.995 304.349 968.454 Q302.543 964.889 298.909 964.889 M298.909 961.185 Q304.719 961.185 307.775 965.792 Q310.853 970.375 310.853 979.125 Q310.853 987.852 307.775 992.458 Q304.719 997.041 298.909 997.041 Q293.099 997.041 290.02 992.458 Q286.964 987.852 286.964 979.125 Q286.964 970.375 290.02 965.792 Q293.099 961.185 298.909 961.185 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M262.775 828.117 L279.094 828.117 L279.094 832.052 L257.15 832.052 L257.15 828.117 Q259.812 825.362 264.395 820.732 Q269.002 816.08 270.182 814.737 Q272.428 812.214 273.307 810.478 Q274.21 808.719 274.21 807.029 Q274.21 804.274 272.266 802.538 Q270.344 800.802 267.242 800.802 Q265.043 800.802 262.59 801.566 Q260.159 802.33 257.381 803.881 L257.381 799.158 Q260.205 798.024 262.659 797.445 Q265.113 796.867 267.15 796.867 Q272.52 796.867 275.715 799.552 Q278.909 802.237 278.909 806.728 Q278.909 808.857 278.099 810.779 Q277.312 812.677 275.205 815.269 Q274.627 815.941 271.525 819.158 Q268.423 822.353 262.775 828.117 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M298.909 800.57 Q295.298 800.57 293.469 804.135 Q291.664 807.677 291.664 814.806 Q291.664 821.913 293.469 825.478 Q295.298 829.019 298.909 829.019 Q302.543 829.019 304.349 825.478 Q306.177 821.913 306.177 814.806 Q306.177 807.677 304.349 804.135 Q302.543 800.57 298.909 800.57 M298.909 796.867 Q304.719 796.867 307.775 801.473 Q310.853 806.057 310.853 814.806 Q310.853 823.533 307.775 828.14 Q304.719 832.723 298.909 832.723 Q293.099 832.723 290.02 828.14 Q286.964 823.533 286.964 814.806 Q286.964 806.057 290.02 801.473 Q293.099 796.867 298.909 796.867 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M272.914 649.099 Q276.27 649.817 278.145 652.085 Q280.043 654.354 280.043 657.687 Q280.043 662.803 276.525 665.604 Q273.006 668.405 266.525 668.405 Q264.349 668.405 262.034 667.965 Q259.742 667.548 257.289 666.692 L257.289 662.178 Q259.233 663.312 261.548 663.891 Q263.863 664.47 266.386 664.47 Q270.784 664.47 273.076 662.733 Q275.39 660.997 275.39 657.687 Q275.39 654.632 273.238 652.919 Q271.108 651.183 267.289 651.183 L263.261 651.183 L263.261 647.34 L267.474 647.34 Q270.923 647.34 272.752 645.974 Q274.58 644.585 274.58 641.993 Q274.58 639.331 272.682 637.919 Q270.807 636.484 267.289 636.484 Q265.367 636.484 263.168 636.9 Q260.969 637.317 258.33 638.197 L258.33 634.03 Q260.992 633.289 263.307 632.919 Q265.645 632.548 267.705 632.548 Q273.029 632.548 276.131 634.979 Q279.233 637.386 279.233 641.507 Q279.233 644.377 277.59 646.368 Q275.946 648.335 272.914 649.099 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M298.909 636.252 Q295.298 636.252 293.469 639.817 Q291.664 643.359 291.664 650.488 Q291.664 657.595 293.469 661.159 Q295.298 664.701 298.909 664.701 Q302.543 664.701 304.349 661.159 Q306.177 657.595 306.177 650.488 Q306.177 643.359 304.349 639.817 Q302.543 636.252 298.909 636.252 M298.909 632.548 Q304.719 632.548 307.775 637.155 Q310.853 641.738 310.853 650.488 Q310.853 659.215 307.775 663.821 Q304.719 668.405 298.909 668.405 Q293.099 668.405 290.02 663.821 Q286.964 659.215 286.964 650.488 Q286.964 641.738 290.02 637.155 Q293.099 632.548 298.909 632.548 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M271.594 472.929 L259.789 491.378 L271.594 491.378 L271.594 472.929 M270.367 468.855 L276.247 468.855 L276.247 491.378 L281.177 491.378 L281.177 495.267 L276.247 495.267 L276.247 503.415 L271.594 503.415 L271.594 495.267 L255.992 495.267 L255.992 490.753 L270.367 468.855 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M298.909 471.934 Q295.298 471.934 293.469 475.499 Q291.664 479.04 291.664 486.17 Q291.664 493.276 293.469 496.841 Q295.298 500.383 298.909 500.383 Q302.543 500.383 304.349 496.841 Q306.177 493.276 306.177 486.17 Q306.177 479.04 304.349 475.499 Q302.543 471.934 298.909 471.934 M298.909 468.23 Q304.719 468.23 307.775 472.837 Q310.853 477.42 310.853 486.17 Q310.853 494.897 307.775 499.503 Q304.719 504.086 298.909 504.086 Q293.099 504.086 290.02 499.503 Q286.964 494.897 286.964 486.17 Q286.964 477.42 290.02 472.837 Q293.099 468.23 298.909 468.23 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M258.793 304.537 L277.15 304.537 L277.15 308.472 L263.076 308.472 L263.076 316.944 Q264.094 316.597 265.113 316.435 Q266.131 316.25 267.15 316.25 Q272.937 316.25 276.316 319.421 Q279.696 322.592 279.696 328.009 Q279.696 333.588 276.224 336.689 Q272.752 339.768 266.432 339.768 Q264.256 339.768 261.988 339.398 Q259.742 339.027 257.335 338.287 L257.335 333.588 Q259.418 334.722 261.641 335.277 Q263.863 335.833 266.34 335.833 Q270.344 335.833 272.682 333.726 Q275.02 331.62 275.02 328.009 Q275.02 324.398 272.682 322.291 Q270.344 320.185 266.34 320.185 Q264.465 320.185 262.59 320.602 Q260.738 321.018 258.793 321.898 L258.793 304.537 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M298.909 307.615 Q295.298 307.615 293.469 311.18 Q291.664 314.722 291.664 321.852 Q291.664 328.958 293.469 332.523 Q295.298 336.064 298.909 336.064 Q302.543 336.064 304.349 332.523 Q306.177 328.958 306.177 321.852 Q306.177 314.722 304.349 311.18 Q302.543 307.615 298.909 307.615 M298.909 303.912 Q304.719 303.912 307.775 308.518 Q310.853 313.102 310.853 321.852 Q310.853 330.578 307.775 335.185 Q304.719 339.768 298.909 339.768 Q293.099 339.768 290.02 335.185 Q286.964 330.578 286.964 321.852 Q286.964 313.102 290.02 308.518 Q293.099 303.912 298.909 303.912 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip392)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1022.33 400.199,911.103 400.786,809.046 401.372,715.544 401.958,630.028 402.545,668.341 403.131,693.915 403.718,622.304 404.304,553.73 404.891,492.492 405.477,435.676 406.063,384.351 406.65,338.161 407.236,370.413 407.823,331.137 408.409,295.208 408.995,263.366 409.582,292.454 410.168,265.36 410.755,241.652 411.341,219.895 411.927,245.463 412.514,227.017 413.1,249.216 413.687,269.61 414.273,286.988 414.86,272.24 415.446,259.91 416.032,250.13 416.619,241.899 417.205,309.023 417.792,301.552 418.378,295.914 418.964,312.103 419.551,309.592 420.137,327.985 420.724,360.678 421.31,377.395 421.896,379.226 422.483,381.902 423.069,384.926 423.656,389.019 424.242,407.748 424.829,437.371 425.415,465.239 426.001,484.132 426.588,501.792 427.174,510.21 427.761,527.499 428.347,535.423 428.933,551.9 429.52,560.511 430.106,577.038 430.693,587.06 431.279,595.84 431.865,631.103 432.452,639.645 433.038,665.574 433.625,684.903 434.211,697.962 434.798,706.635 435.384,715.507 435.97,733.918 436.557,742.668 437.143,751.019 437.73,768.328 438.316,776.064 438.902,788.411 439.489,796.29 440.075,807.962 440.662,827.494 441.248,838.796 441.835,853.195 442.421,867.211 443.007,877.373 443.594,896.437 444.18,908.47 444.767,916.67 445.353,922.606 445.939,931.457 446.526,940.065 447.112,951.129 447.699,961.85 448.285,972.703 448.871,985.67 449.458,995.193 450.044,999.322 450.631,1008.97 451.217,1022.54 451.804,1028.74 452.39,1032.02 452.976,1037.94 453.563,1043.53 454.149,1051.58 454.736,1057.1 455.322,1062.23 455.908,1065.12 456.495,1072.32 457.081,1079.5 457.668,1084.38 458.254,1097.06 458.84,1101.21 459.427,1105.22 460.013,1111.31 460.6,1117.08 461.186,1121.19 461.773,1123.17 462.359,1130.64 462.945,1136.13 463.532,1135.65 464.118,1137.27 464.705,1144.42 465.291,1148 465.877,1154.42 466.464,1153.73 467.05,1158.71 467.637,1160 468.223,1159.61 468.809,1162.63 469.396,1163.5 469.982,1166.3 470.569,1169.21 471.155,1173.67 471.742,1176.49 472.328,1182.28 472.914,1185.03 473.501,1186.04 474.087,1188.34 474.674,1187.67 475.26,1191.62 475.846,1203.51 476.433,1205.07 477.019,1204.85 477.606,1205 478.192,1205.12 478.778,1206.76 479.365,1206.57 479.951,1206.69 480.538,1207.05 481.124,1208.82 481.711,1210.62 482.297,1212.28 482.883,1213.79 483.47,1213.83 484.056,1213.87 484.643,1217.16 485.229,1221.78 485.815,1223.17 486.402,1225.71 486.988,1225.43 487.575,1223.6 488.161,1221.91 488.748,1224.71 489.334,1224.44 489.92,1224.46 490.507,1225.79 491.093,1226.93 491.68,1228.17 492.266,1223.61 492.852,1226.64 493.439,1226.43 494.025,1226.5 494.612,1230.73 495.198,1232.03 495.784,1231.8 496.371,1231.66 496.957,1234.53 497.544,1232.61 498.13,1232.48 498.717,1233.51 499.303,1233.04 499.889,1234.14 500.476,1236.88 501.062,1237.95 501.649,1239.18 502.235,1238.63 502.821,1239.65 503.408,1241.63 503.994,1242.39 504.581,1243.11 505.167,1243.7 505.753,1246.97 506.34,1245.05 506.926,1245.89 507.513,1245.05 508.099,1244.39 508.686,1246.42 509.272,1246.93 509.858,1245.95 510.445,1245.11 511.031,1248.52 511.618,1248.97 512.204,1250.53 512.79,1248.06 513.377,1245.6 513.963,1244.84 514.55,1245.41 515.136,1241.79 515.722,1241.11 516.309,1238.98 516.895,1239.87 517.482,1239.11 518.068,1237.16 518.655,1237.99 519.241,1240.46 519.827,1241.36 520.414,1242.11 521,1237.31 521.587,1239.71 522.173,1242.35 522.759,1243.24 523.346,1242.44 523.932,1243.22 524.519,1243.86 525.105,1245.84 525.691,1245.03 526.278,1245.57 526.864,1246.15 527.451,1245.04 528.037,1245.65 528.624,1244.89 529.21,1245.39 529.796,1244.51 530.383,1246.49 530.969,1244.19 531.556,1243.64 532.142,1239.1 532.728,1241.22 533.315,1242 533.901,1242.65 534.488,1240.29 535.074,1240 535.661,1247.5 536.247,1245.3 536.833,1243.26 537.42,1245.42 538.006,1244.64 538.593,1245.17 539.179,1244.39 539.765,1245.08 540.352,1245.72 540.938,1242.24 541.525,1241.43 542.111,1242.05 542.697,1242.5 543.284,1244.33 543.87,1242.09 544.457,1240.14 545.043,1239.7 545.63,1241.86 546.216,1241.08 546.802,1239 547.389,1240.94 547.975,1242.9 548.562,1240.71 549.148,1244.09 549.734,1241.72 550.321,1239.66 550.907,1240.37 551.494,1241.05 552.08,1238.97 552.666,1239.69 553.253,1239.21 553.839,1239.9 554.426,1239.14 555.012,1238.58 555.599,1236.66 556.185,1241.64 556.771,1239.49 557.358,1237.51 557.944,1242.51 558.531,1241.51 559.117,1240.85 559.703,1238.71 560.29,1235.46 560.876,1235.18 561.463,1233.57 562.049,1233.35 562.635,1233 563.222,1231.13 563.808,1232.03 564.395,1230.17 564.981,1229.71 565.568,1230.53 566.154,1231.54 566.74,1232.57 567.327,1230.73 567.913,1230.37 568.5,1228.72 569.086,1229.82 569.672,1232.15 570.259,1235.72 570.845,1232.25 571.432,1231.34 572.018,1233.55 572.605,1231.6 573.191,1231.21 573.777,1231.28 574.364,1232 574.95,1231.18 575.537,1235.77 576.123,1235.2 576.709,1238.56 577.296,1229.49 577.882,1230.39 578.469,1230.1 579.055,1231.05 579.641,1230.61 580.228,1228.85 580.814,1229.55 581.401,1232.09 581.987,1233.09 582.574,1236.64 583.16,1236 583.746,1236.63 584.333,1237.5 584.919,1237.2 585.506,1238.13 586.092,1234.96 586.678,1233.14 587.265,1232.7 587.851,1231.06 588.438,1230.45 589.024,1231.4 589.61,1229.29 590.197,1228.79 590.783,1225.93 591.37,1225.84 591.956,1226.75 592.543,1227.43 593.129,1227.22 593.715,1227.1 594.302,1225.38 594.888,1225.13 595.475,1227.73 596.061,1224.85 596.647,1222.02 597.234,1220.51 597.82,1222.92 598.407,1224.34 598.993,1222.98 599.579,1222.8 600.166,1225.13 600.752,1226.41 601.339,1227.36 601.925,1230.01 602.512,1229.71 603.098,1229.02 603.684,1226 604.271,1227.29 604.857,1227.15 605.444,1225.38 606.03,1226.65 606.616,1226.48 607.203,1227.49 607.789,1227.1 608.376,1226.86 608.962,1226.26 609.548,1224.76 610.135,1223.16 610.721,1221.52 611.308,1221.51 611.894,1221.52 612.481,1221.34 613.067,1224.01 613.653,1222.32 614.24,1223.34 614.826,1223.33 615.413,1223.14 615.999,1218.89 616.585,1220.32 617.172,1221.7 617.758,1222.75 618.345,1220.98 618.931,1220.62 619.518,1220.72 620.104,1219.41 620.69,1220.52 621.277,1220.68 621.863,1223.28 622.45,1225.89 623.036,1224.64 623.622,1224.26 624.209,1222.79 624.795,1226.45 625.382,1226.09 625.968,1226.96 626.554,1226.61 627.141,1229.02 627.727,1228.64 628.314,1226.97 628.9,1225.23 629.487,1224.99 630.073,1226.06 630.659,1229.88 631.246,1229.39 631.832,1231.67 632.419,1229.53 633.005,1229.09 633.591,1227.12 634.178,1227.98 634.764,1227.56 635.351,1224.25 635.937,1225.35 636.523,1223.79 637.11,1222.21 637.696,1223.47 638.283,1223.16 638.869,1217.02 639.456,1218.56 640.042,1213.28 640.628,1215.02 641.215,1211.22 641.801,1211.44 642.388,1211.66 642.974,1212.99 643.56,1211.61 644.147,1211.03 644.733,1211.26 645.32,1210.25 645.906,1210.61 646.492,1212.59 647.079,1214.41 647.665,1214.88 648.252,1216.54 648.838,1215.36 649.425,1217.2 650.011,1218.63 650.597,1218.86 651.184,1216.3 651.77,1213.94 652.357,1214.34 652.943,1213.44 653.529,1215.43 654.116,1215.63 654.702,1215.62 655.289,1215.8 655.875,1220.02 656.462,1220.29 657.048,1221.71 657.634,1220.48 658.221,1220.54 658.807,1221.53 659.394,1225.1 659.98,1225.76 660.566,1226.72 661.153,1226 661.739,1224.47 662.326,1225.56 662.912,1225.27 663.498,1225.29 664.085,1227.51 664.671,1225.57 665.258,1224.95 665.844,1224.44 666.431,1225.52 667.017,1227.63 667.603,1225.66 668.19,1225.26 668.776,1226.21 669.363,1224.48 669.949,1225.65 670.535,1222.76 671.122,1219.95 671.708,1221.07 672.295,1218.12 672.881,1216.53 673.467,1216.49 674.054,1213.94 674.64,1212.94 675.227,1212.81 675.813,1212.99 676.4,1215.8 676.986,1217.12 677.572,1219.69 678.159,1219.39 678.745,1220.53 679.332,1223.03 679.918,1223.96 680.504,1224.94 681.091,1224.27 681.677,1223.82 682.264,1223.11 682.85,1222.25 683.436,1224.76 684.023,1221.22 684.609,1223.32 685.196,1224.12 685.782,1226.24 686.369,1225.72 686.955,1227.98 687.541,1228.96 688.128,1228.17 688.714,1228.72 689.301,1225.21 689.887,1224.75 690.473,1221.71 691.06,1223.08 691.646,1224.38 692.233,1226.87 692.819,1229.15 693.405,1229.65 693.992,1223.37 694.578,1222.99 695.165,1222.61 695.751,1220.56 696.338,1218.97 696.924,1219.88 697.51,1215.37 698.097,1215.4 698.683,1213.84 699.27,1215.25 699.856,1215.56 700.442,1214.43 701.029,1214.9 701.615,1215.15 702.202,1216.54 702.788,1219.25 703.375,1216.31 703.961,1216.14 704.547,1211.89 705.134,1211.94 705.72,1214.76 706.307,1214.62 706.893,1215.94 707.479,1215.71 708.066,1215.86 708.652,1213.19 709.239,1211.73 709.825,1213.2 710.411,1214.51 710.998,1213.05 711.584,1211.72 712.171,1215.95 712.757,1216.19 713.344,1216.09 713.93,1215.64 714.516,1215.71 715.103,1215.56 715.689,1214.31 716.276,1217.01 716.862,1214.49 717.448,1214.4 718.035,1214.42 718.621,1213.19 719.208,1211.93 719.794,1210.79 720.38,1209.84 720.967,1207.63 721.553,1209.58 722.14,1209.71 722.726,1212.52 723.313,1210.97 723.899,1212.54 724.485,1211.25 725.072,1208.92 725.658,1207.58 726.245,1206.65 726.831,1207.15 727.417,1207.46 728.004,1208.95 728.59,1211.89 729.177,1212.02 729.763,1212.2 730.349,1212.49 730.936,1214.17 731.522,1215.53 732.109,1214.04 732.695,1214.14 733.282,1214.06 733.868,1212.69 734.454,1212.63 735.041,1214.02 735.627,1214 736.214,1213.87 736.8,1212.62 737.386,1213.94 737.973,1212.54 738.559,1208.2 739.146,1208.3 739.732,1211.2 740.318,1208.8 740.905,1209.03 741.491,1210.59 742.078,1212.25 742.664,1213.79 743.251,1212.8 743.837,1212.95 744.423,1214.11 745.01,1215.49 745.596,1214.04 746.183,1211.38 746.769,1214.14 747.355,1217.98 747.942,1217.56 748.528,1216.31 749.115,1218.72 749.701,1222.5 750.288,1225.06 750.874,1221.56 751.46,1218.46 752.047,1215.25 752.633,1215 753.22,1216.24 753.806,1217.41 754.392,1217.25 754.979,1219.61 755.565,1218.36 756.152,1219.52 756.738,1216.66 757.324,1215.02 757.911,1210.95 758.497,1210.99 759.084,1209.52 759.67,1209.79 760.257,1208.6 760.843,1207.58 761.429,1208.03 762.016,1206.79 762.602,1208.63 763.189,1210.34 763.775,1207.94 764.361,1206.74 764.948,1208.2 765.534,1208.41 766.121,1210.24 766.707,1207.91 767.293,1208.15 767.88,1207.36 768.466,1207.69 769.053,1208.36 769.639,1203.48 770.226,1203.91 770.812,1204.5 771.398,1200.99 771.985,1201.53 772.571,1203.77 773.158,1204.54 773.744,1204.93 774.33,1202.53 774.917,1203.21 775.503,1203.31 776.09,1205.19 776.676,1201.76 777.262,1202.59 777.849,1203.13 778.435,1203.57 779.022,1202.98 779.608,1201.83 780.195,1201.16 780.781,1203.15 781.367,1206.35 781.954,1207.99 782.54,1209.58 783.127,1212.13 783.713,1212.19 784.299,1212.22 784.886,1212.13 785.472,1215.14 786.059,1216.56 786.645,1216.49 787.232,1220.32 787.818,1220.3 788.404,1219.6 788.991,1218.11 789.577,1216.32 790.164,1217.43 790.75,1215.96 791.336,1217.08 791.923,1215.66 792.509,1214.15 793.096,1212.78 793.682,1215.39 794.268,1213.82 794.855,1214.73 795.441,1217.19 796.028,1218.09 796.614,1219.15 797.201,1218.75 797.787,1216.96 798.373,1216.79 798.96,1213.98 799.546,1217.83 800.133,1218.77 800.719,1216.94 801.305,1216.52 801.892,1216.33 802.478,1220.07 803.065,1222.3 803.651,1220.46 804.237,1221.25 804.824,1223.44 805.41,1223.75 805.997,1220.64 806.583,1222.88 807.17,1220.59 807.756,1220.01 808.342,1220.85 808.929,1224.25 809.515,1223.91 810.102,1227.19 810.688,1225.11 811.274,1224.29 811.861,1222.15 812.447,1218.75 813.034,1215.93 813.62,1215.61 814.206,1215.6 814.793,1213.85 815.379,1215.04 815.966,1217.51 816.552,1218.49 817.139,1213.84 817.725,1215.28 818.311,1221.56 818.898,1219.76 819.484,1215.53 820.071,1215.35 820.657,1213.67 821.243,1212.34 821.83,1209.76 822.416,1205.75 823.003,1207.54 823.589,1209.11 824.175,1208.01 824.762,1207.88 825.348,1208.28 825.935,1209.47 826.521,1209.43 827.108,1209.3 827.694,1208.04 828.28,1211.08 828.867,1209.63 829.453,1212.46 830.04,1213.78 830.626,1212.41 831.212,1210.89 831.799,1212.23 832.385,1211.1 832.972,1209.66 833.558,1212.17 834.145,1213.7 834.731,1215.99 835.317,1215.76 835.904,1215.72 836.49,1215.38 837.077,1213.89 837.663,1215.17 838.249,1217.57 838.836,1216.33 839.422,1216.3 840.009,1215.03 840.595,1213.46 841.181,1213.33 841.768,1211.63 842.354,1212.97 842.941,1214.61 843.527,1217.37 844.114,1218.76 844.7,1218.59 845.286,1218.07 845.873,1217.64 846.459,1217.29 847.046,1216.95 847.632,1213.94 848.218,1212.16 848.805,1213.22 849.391,1211.74 849.978,1213.1 850.564,1211.88 851.15,1209.42 851.737,1210.76 852.323,1209.51 852.91,1208.48 853.496,1208.73 854.083,1210.31 854.669,1209.36 855.255,1209.8 855.842,1213.93 856.428,1213.73 857.015,1213.58 857.601,1212.17 858.187,1209.32 858.774,1209.61 859.36,1209.49 859.947,1206.87 860.533,1204.21 861.119,1207.17 861.706,1209.76 862.292,1208.32 862.879,1208.77 863.465,1206.29 864.052,1208.2 864.638,1207.21 865.224,1209.89 865.811,1210.02 866.397,1208.96 866.984,1212.19 867.57,1212.22 868.156,1212.34 868.743,1213.45 869.329,1210.92 869.916,1211.13 870.502,1211.01 871.089,1209.9 871.675,1207.15 872.261,1205.78 872.848,1203.29 873.434,1202.25 874.021,1203.97 874.607,1205.85 875.193,1207.79 875.78,1207.95 876.366,1209.64 876.953,1212.31 877.539,1213.53 878.125,1213.39 878.712,1213.08 879.298,1212.85 879.885,1213.88 880.471,1214.05 881.058,1209.94 881.644,1211.37 882.23,1211.6 882.817,1211.58 883.403,1210.18 883.99,1206.29 884.576,1205.12 885.162,1206.86 885.749,1206.79 886.335,1209.49 886.922,1208.44 887.508,1207.45 888.094,1206.54 888.681,1206.9 889.267,1209.7 889.854,1208.58 890.44,1210.04 891.027,1210.01 891.613,1210.11 892.199,1211.52 892.786,1211.37 893.372,1211.23 893.959,1211.08 894.545,1209.95 895.131,1208.61 895.718,1206.05 896.304,1206.12 896.891,1207.54 897.477,1207.74 898.063,1209.38 898.65,1207.96 899.236,1205.5 899.823,1205.88 900.409,1204.92 900.996,1206.32 901.582,1207.87 902.168,1205.42 902.755,1205.73 903.341,1208.55 903.928,1207.21 904.514,1207.6 905.1,1206.68 905.687,1205.77 906.273,1205.07 906.86,1209.51 907.446,1215.17 908.032,1213.75 908.619,1213.66 909.205,1216.05 909.792,1216.89 910.378,1213.74 910.965,1212.31 911.551,1213.17 912.137,1211.82 912.724,1213.25 913.31,1212.98 913.897,1214.07 914.483,1215.22 915.069,1216.31 915.656,1213.09 916.242,1211.81 916.829,1213.29 917.415,1214.31 918.002,1212.85 918.588,1211.69 919.174,1212.99 919.761,1212.91 920.347,1211.51 920.934,1211.68 921.52,1210.17 922.106,1211.54 922.693,1215.12 923.279,1214.72 923.866,1216 924.452,1214.49 925.038,1217.06 925.625,1215.08 926.211,1216.32 926.798,1215.76 927.384,1215.23 927.971,1214.99 928.557,1216.28 929.143,1218.6 929.73,1216.6 930.316,1216.46 930.903,1216.15 931.489,1214.62 932.075,1215.6 932.662,1215.6 933.248,1215.21 933.835,1218.79 934.421,1216.7 935.007,1216.53 935.594,1215.06 936.18,1213.47 936.767,1213.17 937.353,1213 937.94,1212.9 938.526,1212.77 939.112,1213.94 939.699,1214.95 940.285,1213.25 940.872,1212.96 941.458,1210.05 942.044,1208.54 942.631,1208.57 943.217,1207.46 943.804,1207.7 944.39,1206.74 944.976,1206.93 945.563,1205.69 946.149,1205.8 946.736,1204.59 947.322,1204.83 947.909,1207.91 948.495,1211.84 949.081,1210.35 949.668,1211.58 950.254,1210.33 950.841,1211.54 951.427,1211.46 952.013,1212.74 952.6,1211.31 953.186,1211.41 953.773,1210.35 954.359,1210.74 954.945,1210.89 955.532,1210.63 956.118,1213.43 956.705,1214.47 957.291,1214.21 957.878,1215.24 958.464,1214.89 959.05,1213.49 959.637,1213.39 960.223,1211.96 960.81,1213.22 961.396,1213.06 961.982,1212.91 962.569,1211.8 963.155,1211.56 963.742,1212.89 964.328,1212.73 964.915,1215.38 965.501,1212.43 966.087,1209.63 966.674,1209.57 967.26,1209.85 967.847,1212.31 968.433,1210.79 969.019,1209.35 969.606,1209.27 970.192,1207.8 970.779,1205.26 971.365,1201.45 971.951,1201.94 972.538,1202.53 973.124,1203.09 973.711,1204.64 974.297,1205.07 974.884,1203.97 975.47,1205.8 976.056,1207.38 976.643,1207.72 977.229,1209.06 977.816,1210.22 978.402,1209.96 978.988,1208.54 979.575,1211.17 980.161,1211.24 980.748,1208.88 981.334,1208.9 981.92,1209.08 982.507,1210.55 983.093,1211.91 983.68,1209.3 984.266,1208.01 984.853,1209.55 985.439,1209.16 986.025,1208.02 986.612,1208.51 987.198,1207.51 987.785,1209.44 988.371,1209.44 988.957,1210.74 989.544,1208.29 990.13,1206.99 990.717,1208.4 991.303,1209.92 991.889,1209.73 992.476,1209.47 993.062,1210.77 993.649,1207.79 994.235,1208.08 994.822,1209.56 995.408,1212.06 995.994,1209.26 996.581,1209.29 997.167,1209.33 997.754,1210.58 998.34,1209.37 998.926,1209.69 999.513,1213.64 1000.1,1210.91 1000.69,1208.9 1001.27,1207.44 1001.86,1208.75 1002.44,1211.53 1003.03,1211.44 1003.62,1209.93 1004.2,1209.8 1004.79,1207.38 1005.38,1207.63 1005.96,1210.49 1006.55,1209.42 1007.14,1210.84 1007.72,1206.92 1008.31,1208.53 1008.9,1211.43 1009.48,1211.55 1010.07,1209.98 1010.65,1211.41 1011.24,1211.25 1011.83,1212.7 1012.41,1214.21 1013,1216.91 1013.59,1218.05 1014.17,1218.71 1014.76,1216.81 1015.35,1216.22 1015.93,1212.14 1016.52,1211.99 1017.11,1211.95 1017.69,1210.63 1018.28,1213.26 1018.86,1211.7 1019.45,1211.75 1020.04,1212.59 1020.62,1212.55 1021.21,1215.08 1021.8,1217.35 1022.38,1216.76 1022.97,1217.72 1023.56,1217.39 1024.14,1216.96 1024.73,1216.45 1025.32,1218.62 1025.9,1219.93 1026.49,1219.42 1027.07,1216.35 1027.66,1215.88 1028.25,1214.2 1028.83,1216.67 1029.42,1214.92 1030.01,1216.04 1030.59,1214.25 1031.18,1214.19 1031.77,1215.37 1032.35,1215.31 1032.94,1213.96 1033.52,1213.79 1034.11,1213.64 1034.7,1214.72 1035.28,1213.06 1035.87,1213.01 1036.46,1214.4 1037.04,1213.05 1037.63,1215.73 1038.22,1214.18 1038.8,1214.11 1039.39,1215.19 1039.98,1214.68 1040.56,1212.91 1041.15,1216.88 1041.73,1215.17 1042.32,1215.09 1042.91,1211.84 1043.49,1210.34 1044.08,1208.13 1044.67,1206.71 1045.25,1209.39 1045.84,1209.26 1046.43,1206.69 1047.01,1206.92 1047.6,1208.45 1048.19,1208.46 1048.77,1209.91 1049.36,1208.32 1049.94,1208.26 1050.53,1209.79 1051.12,1206.97 1051.7,1204.78 1052.29,1203.74 1052.88,1202.75 1053.46,1204.36 1054.05,1206.05 1054.64,1206.39 1055.22,1207.82 1055.81,1207.99 1056.39,1208.12 1056.98,1209.66 1057.57,1206.97 1058.15,1205.81 1058.74,1207.32 1059.33,1207.47 1059.91,1204.93 1060.5,1205.45 1061.09,1205.53 1061.67,1204.39 1062.26,1206.08 1062.85,1204.87 1063.43,1205.43 1064.02,1203.35 1064.6,1203.65 1065.19,1205.4 1065.78,1204.63 1066.36,1206.26 1066.95,1209.2 1067.54,1209.23 1068.12,1210.38 1068.71,1211.94 1069.3,1210.71 1069.88,1208.13 1070.47,1206.9 1071.06,1205.79 1071.64,1207.24 1072.23,1207.33 1072.81,1209.74 1073.4,1208.33 1073.99,1209.71 1074.57,1208.48 1075.16,1211.19 1075.75,1211 1076.33,1212.05 1076.92,1210.78 1077.51,1210.93 1078.09,1210.63 1078.68,1213.06 1079.26,1212.83 1079.85,1212.43 1080.44,1213.62 1081.02,1214.75 1081.61,1217.14 1082.2,1216.66 1082.78,1218.63 1083.37,1219.63 1083.96,1217.67 1084.54,1219.83 1085.13,1216.72 1085.72,1213.62 1086.3,1214.5 1086.89,1211.64 1087.47,1214.2 1088.06,1215.41 1088.65,1214.6 1089.23,1214.3 1089.82,1211.32 1090.41,1209.69 1090.99,1207.14 1091.58,1207.33 1092.17,1203.77 1092.75,1204.1 1093.34,1204.48 1093.93,1203.13 1094.51,1204.83 1095.1,1203.54 1095.68,1202.8 1096.27,1205.62 1096.86,1206.96 1097.44,1207.24 1098.03,1208.68 1098.62,1211.63 1099.2,1212.83 1099.79,1210.1 1100.38,1208.62 1100.96,1210.06 1101.55,1209.98 1102.14,1212.51 1102.72,1212.43 1103.31,1212.31 1103.89,1215.95 1104.48,1214.35 1105.07,1216.58 1105.65,1213.89 1106.24,1210.99 1106.83,1211.17 1107.41,1209.53 1108,1209.7 1108.59,1209.62 1109.17,1208.29 1109.76,1208.19 1110.34,1208.3 1110.93,1206.86 1111.52,1209.73 1112.1,1209.84 1112.69,1209.72 1113.28,1207.09 1113.86,1207.05 1114.45,1208.34 1115.04,1208.48 1115.62,1209.86 1116.21,1207.22 1116.8,1207.46 1117.38,1207.35 1117.97,1208.92 1118.55,1210.52 1119.14,1210.53 1119.73,1211.64 1120.31,1210.26 1120.9,1211.48 1121.49,1212.59 1122.07,1212.51 1122.66,1208.34 1123.25,1209.64 1123.83,1209.78 1124.42,1208.5 1125.01,1208.6 1125.59,1208.68 1126.18,1207.59 1126.76,1210.25 1127.35,1212.71 1127.94,1207.55 1128.52,1204.93 1129.11,1204.89 1129.7,1206.21 1130.28,1206.33 1130.87,1206.59 1131.46,1205.61 1132.04,1206.88 1132.63,1205.55 1133.21,1207.12 1133.8,1208.95 1134.39,1211.81 1134.97,1210.03 1135.56,1208.54 1136.15,1208.59 1136.73,1208.4 1137.32,1209.79 1137.91,1212.19 1138.49,1213.65 1139.08,1215.79 1139.67,1215.35 1140.25,1215.24 1140.84,1216.58 1141.42,1212.07 1142.01,1207.8 1142.6,1210.35 1143.18,1208.86 1143.77,1208.91 1144.36,1209.05 1144.94,1210.1 1145.53,1212.64 1146.12,1213.95 1146.7,1213.67 1147.29,1209.31 1147.88,1209.34 1148.46,1210.96 1149.05,1209.82 1149.63,1209.85 1150.22,1211.16 1150.81,1208.55 1151.39,1205.89 1151.98,1203.39 1152.57,1202.53 1153.15,1201.85 1153.74,1201.02 1154.33,1200.38 1154.91,1199.49 1155.5,1203.77 1156.09,1204.32 1156.67,1203.16 1157.26,1203.69 1157.84,1204.06 1158.43,1205.81 1159.02,1205.96 1159.6,1204.5 1160.19,1206.07 1160.78,1206.48 1161.36,1209.33 1161.95,1208.22 1162.54,1208.11 1163.12,1209.47 1163.71,1206.78 1164.29,1206.72 1164.88,1209.79 1165.47,1212.47 1166.05,1212.15 1166.64,1213.28 1167.23,1211.82 1167.81,1209.36 1168.4,1209.55 1168.99,1206.86 1169.57,1206.8 1170.16,1204.54 1170.75,1203.58 1171.33,1205.05 1171.92,1205.12 1172.5,1205.25 1173.09,1206.84 1173.68,1207.09 1174.26,1211 1174.85,1211.2 1175.44,1210.89 1176.02,1213.31 1176.61,1210.36 1177.2,1214.05 1177.78,1212.28 1178.37,1213.71 1178.96,1213.32 1179.54,1211.86 1180.13,1213.14 1180.71,1212.85 1181.3,1211.41 1181.89,1212.65 1182.47,1211.42 1183.06,1211.36 1183.65,1213.7 1184.23,1215.1 1184.82,1213.66 1185.41,1212.12 1185.99,1210.6 1186.58,1214.66 1187.16,1213.1 1187.75,1213.08 1188.34,1214.27 1188.92,1211.22 1189.51,1211.06 1190.1,1210.8 1190.68,1212.22 1191.27,1216.08 1191.86,1217.05 1192.44,1219.39 1193.03,1216.15 1193.62,1217.17 1194.2,1216.65 1194.79,1212.47 1195.37,1213.72 1195.96,1211.85 1196.55,1212.97 1197.13,1211.48 1197.72,1209.97 1198.31,1208.61 1198.89,1207.23 1199.48,1206.06 1200.07,1206.5 1200.65,1208.08 1201.24,1208.46 1201.83,1208.44 1202.41,1208.52 1203,1209.87 1203.58,1208.58 1204.17,1207.39 1204.76,1212.96 1205.34,1211.55 1205.93,1210.09 1206.52,1204.59 1207.1,1204.44 1207.69,1207.46 1208.28,1203.69 1208.86,1205.35 1209.45,1205.49 1210.03,1205.65 1210.62,1206.25 1211.21,1208.8 1211.79,1209.01 1212.38,1207.68 1212.97,1207.89 1213.55,1202.63 1214.14,1202.97 1214.73,1203.35 1215.31,1203.53 1215.9,1202.04 1216.49,1202.63 1217.07,1204.38 1217.66,1203.29 1218.24,1202.36 1218.83,1204.39 1219.42,1202.3 1220,1201.42 1220.59,1206.06 1221.18,1208.86 1221.76,1210.2 1222.35,1212.8 1222.94,1211.22 1223.52,1211.36 1224.11,1212.26 1224.7,1213.69 1225.28,1210.99 1225.87,1211.09 1226.45,1212.27 1227.04,1214.86 1227.63,1213.48 1228.21,1214.78 1228.8,1214.6 1229.39,1215.58 1229.97,1213.72 1230.56,1212.13 1231.15,1213.46 1231.73,1211.73 1232.32,1211.8 1232.91,1211.78 1233.49,1211.59 1234.08,1211.44 1234.66,1211.36 1235.25,1212.54 1235.84,1213.75 1236.42,1209.21 1237.01,1209.12 1237.6,1210.77 1238.18,1212.04 1238.77,1212.48 1239.36,1212.4 1239.94,1210.78 1240.53,1212.26 1241.11,1214.77 1241.7,1214.38 1242.29,1210.33 1242.87,1211.29 1243.46,1211.26 1244.05,1214 1244.63,1212.6 1245.22,1212.12 1245.81,1211.96 1246.39,1213.12 1246.98,1211.55 1247.57,1207.51 1248.15,1208.7 1248.74,1210.25 1249.32,1209.34 1249.91,1211.87 1250.5,1213.09 1251.08,1207.75 1251.67,1207.65 1252.26,1206.38 1252.84,1209.31 1253.43,1209.22 1254.02,1210.8 1254.6,1208.13 1255.19,1210.96 1255.78,1212.15 1256.36,1213.37 1256.95,1209.13 1257.53,1210.46 1258.12,1212.97 1258.71,1212.78 1259.29,1212.54 1259.88,1212.31 1260.47,1214.91 1261.05,1213.33 1261.64,1213.24 1262.23,1211.52 1262.81,1212.63 1263.4,1215.18 1263.98,1213.42 1264.57,1214.54 1265.16,1211.65 1265.74,1211.64 1266.33,1211.68 1266.92,1210.22 1267.5,1210.34 1268.09,1208.86 1268.68,1208.74 1269.26,1211.48 1269.85,1213.97 1270.44,1211.17 1271.02,1215.08 1271.61,1215.13 1272.19,1215.99 1272.78,1217.05 1273.37,1214.1 1273.95,1212.27 1274.54,1210.74 1275.13,1209.51 1275.71,1209.23 1276.3,1209.38 1276.89,1208.35 1277.47,1205.69 1278.06,1205.99 1278.65,1210.05 1279.23,1210.03 1279.82,1211.32 1280.4,1211.33 1280.99,1209.72 1281.58,1208.53 1282.16,1207.3 1282.75,1206.29 1283.34,1204.91 1283.92,1203.86 1284.51,1200.21 1285.1,1201.97 1285.68,1202.25 1286.27,1202.67 1286.86,1201.8 1287.44,1203.84 1288.03,1204.44 1288.61,1203.42 1289.2,1203.72 1289.79,1206.82 1290.37,1209.66 1290.96,1210.97 1291.55,1210.51 1292.13,1210.27 1292.72,1210.43 1293.31,1209.02 1293.89,1205.22 1294.48,1206.97 1295.06,1208.06 1295.65,1207.89 1296.24,1208.25 1296.82,1208.47 1297.41,1205.55 1298,1204.37 1298.58,1205.75 1299.17,1204.6 1299.76,1206.39 1300.34,1207.89 1300.93,1209.19 1301.52,1207.92 1302.1,1210.78 1302.69,1211.96 1303.27,1211.67 1303.86,1211.45 1304.45,1211.32 1305.03,1211.56 1305.62,1213.04 1306.21,1214.39 1306.79,1213.01 1307.38,1213.11 1307.97,1213.26 1308.55,1213.21 1309.14,1211.44 1309.73,1212.44 1310.31,1213.64 1310.9,1214.9 1311.48,1216.21 1312.07,1214.2 1312.66,1214.09 1313.24,1213.66 1313.83,1213.68 1314.42,1212.15 1315,1210.52 1315.59,1210.73 1316.18,1210.7 1316.76,1210.51 1317.35,1209.15 1317.93,1210.77 1318.52,1210.81 1319.11,1209.34 1319.69,1213.17 1320.28,1214.32 1320.87,1215.44 1321.45,1213.59 1322.04,1213.3 1322.63,1208.77 1323.21,1206.26 1323.8,1207.78 1324.39,1206.7 1324.97,1207.03 1325.56,1208.31 1326.14,1207 1326.73,1206.98 1327.32,1205.7 1327.9,1205.69 1328.49,1205.72 1329.08,1208.62 1329.66,1210.3 1330.25,1210.31 1330.84,1210.18 1331.42,1211.23 1332.01,1209.74 1332.6,1208.38 1333.18,1209.94 1333.77,1208.54 1334.35,1208.49 1334.94,1208.15 1335.53,1206.77 1336.11,1207.21 1336.7,1204.6 1337.29,1205.63 1337.87,1206.16 1338.46,1207.49 1339.05,1207.76 1339.63,1209.27 1340.22,1208.08 1340.8,1208.17 1341.39,1209.57 1341.98,1209.28 1342.56,1209.58 1343.15,1206.67 1343.74,1206.79 1344.32,1207.11 1344.91,1207.32 1345.5,1207.57 1346.08,1207.48 1346.67,1204.92 1347.26,1206.66 1347.84,1208.32 1348.43,1208.42 1349.01,1207.44 1349.6,1206.17 1350.19,1209.02 1350.77,1214.72 1351.36,1213.16 1351.95,1214.53 1352.53,1215.84 1353.12,1216.73 1353.71,1208.44 1354.29,1208.81 1354.88,1207.46 1355.47,1209.13 1356.05,1210.52 1356.64,1213.11 1357.22,1218.11 1357.81,1217.4 1358.4,1215.59 1358.98,1213.77 1359.57,1212.16 1360.16,1211.85 1360.74,1213.03 1361.33,1211.39 1361.92,1211.61 1362.5,1210.22 1363.09,1208.66 1363.68,1204.56 1364.26,1202.12 1364.85,1206.14 1365.43,1206.5 1366.02,1205.16 1366.61,1205.7 1367.19,1209.83 1367.78,1209.84 1368.37,1211.3 1368.95,1213.85 1369.54,1213.64 1370.13,1211.99 1370.71,1209.28 1371.3,1212 1371.88,1211.94 1372.47,1214.3 1373.06,1216.59 1373.64,1217.42 1374.23,1216.87 1374.82,1215.07 1375.4,1214.6 1375.99,1213.07 1376.58,1212.96 1377.16,1211.7 1377.75,1211.57 1378.34,1211.63 1378.92,1211.62 1379.51,1212.81 1380.09,1212.56 1380.68,1215.07 1381.27,1214.95 1381.85,1216.06 1382.44,1214.63 1383.03,1214.45 1383.61,1214.42 1384.2,1214.18 1384.79,1215.33 1385.37,1214.85 1385.96,1215.77 1386.55,1212.69 1387.13,1211.12 1387.72,1211.07 1388.3,1212.09 1388.89,1212.2 1389.48,1212.04 1390.06,1211.75 1390.65,1210.66 1391.24,1206.52 1391.82,1210.62 1392.41,1210.43 1393,1211.72 1393.58,1212.63 1394.17,1205.87 1394.75,1210.38 1395.34,1210.4 1395.93,1210.17 1396.51,1212.72 1397.1,1209.69 1397.69,1206.97 1398.27,1202.91 1398.86,1199.25 1399.45,1198.29 1400.03,1196.36 1400.62,1199.7 1401.21,1197.83 1401.79,1198.55 1402.38,1199.22 1402.96,1199.71 1403.55,1202.82 1404.14,1201.77 1404.72,1202.02 1405.31,1202.39 1405.9,1205.48 1406.48,1203.12 1407.07,1207.43 1407.66,1207.59 1408.24,1209 1408.83,1210.49 1409.42,1211.75 1410,1211.7 1410.59,1212.87 1411.17,1209.99 1411.76,1208.59 1412.35,1208.24 1412.93,1209.51 1413.52,1209.72 1414.11,1209.55 1414.69,1208.24 1415.28,1208.27 1415.87,1210.98 1416.45,1209.87 1417.04,1211.19 1417.63,1212.49 1418.21,1210.97 1418.8,1210.99 1419.38,1210.96 1419.97,1209.46 1420.56,1211.02 1421.14,1212.16 1421.73,1213.48 1422.32,1213.3 1422.9,1213.17 1423.49,1211.58 1424.08,1210.04 1424.66,1211.26 1425.25,1208.51 1425.83,1211.26 1426.42,1211.36 1427.01,1210.07 1427.59,1208.85 1428.18,1207.59 1428.77,1206.38 1429.35,1206.54 1429.94,1207.83 1430.53,1207.01 1431.11,1207.26 1431.7,1205.76 1432.29,1202.16 1432.87,1203.83 1433.46,1205.29 1434.04,1204.16 1434.63,1205.8 1435.22,1206.14 1435.8,1203.66 1436.39,1205.5 1436.98,1205.49 1437.56,1203.32 1438.15,1205.25 1438.74,1205.62 1439.32,1206.1 1439.91,1203.45 1440.5,1206.43 1441.08,1206.41 1441.67,1206.53 1442.25,1207.97 1442.84,1207.95 1443.43,1206.74 1444.01,1206.92 1444.6,1206.24 1445.19,1207.9 1445.77,1206.3 1446.36,1207.58 1446.95,1207.47 1447.53,1206.35 1448.12,1204.97 1448.7,1203.75 1449.29,1204.22 1449.88,1204.53 1450.46,1204.87 1451.05,1205.02 1451.64,1206.36 1452.22,1203.83 1452.81,1205.62 1453.4,1207.43 1453.98,1207.48 1454.57,1208.6 1455.16,1208.46 1455.74,1208.5 1456.33,1212.59 1456.91,1216.61 1457.5,1216.34 1458.09,1213.15 1458.67,1210.04 1459.26,1211.6 1459.85,1214.14 1460.43,1214.19 1461.02,1212.77 1461.61,1209.78 1462.19,1211.13 1462.78,1209.77 1463.37,1209.57 1463.95,1210.87 1464.54,1211.68 1465.12,1207.42 1465.71,1206.4 1466.3,1205.33 1466.88,1205.41 1467.47,1202.95 1468.06,1205.87 1468.64,1204.66 1469.23,1206.23 1469.82,1206.56 1470.4,1205.34 1470.99,1206.9 1471.57,1207.1 1472.16,1207.41 1472.75,1210.39 1473.33,1211.84 1473.92,1213.05 1474.51,1214.23 1475.09,1214 1475.68,1216.46 1476.27,1214.77 1476.85,1213.09 1477.44,1213.19 1478.03,1211.83 1478.61,1210.3 1479.2,1210.4 1479.78,1214.6 1480.37,1216.98 1480.96,1216.45 1481.54,1215.99 1482.13,1215.32 1482.72,1215.16 1483.3,1216.23 1483.89,1214.42 1484.48,1211.36 1485.06,1211.59 1485.65,1210.31 1486.24,1210.16 1486.82,1209.94 1487.41,1209.53 1487.99,1209.66 1488.58,1208.48 1489.17,1211.42 1489.75,1211.44 1490.34,1210.02 1490.93,1211.3 1491.51,1207.19 1492.1,1206.93 1492.69,1207.02 1493.27,1208.43 1493.86,1208.42 1494.45,1211.08 1495.03,1212.34 1495.62,1212.3 1496.2,1212.25 1496.79,1213.08 1497.38,1214.1 1497.96,1213.59 1498.55,1214.44 1499.14,1212.81 1499.72,1212.71 1500.31,1211.49 1500.9,1211.53 1501.48,1211.63 1502.07,1215.4 1502.65,1216.51 1503.24,1214.69 1503.83,1213.21 1504.41,1212.8 1505,1212.89 1505.59,1210.01 1506.17,1209.9 1506.76,1212.3 1507.35,1210.58 1507.93,1211.68 1508.52,1211.3 1509.11,1211.28 1509.69,1209.82 1510.28,1208.37 1510.86,1208.46 1511.45,1208.55 1512.04,1208.57 1512.62,1208.69 1513.21,1211.31 1513.8,1211.25 1514.38,1213.53 1514.97,1210.73 1515.56,1210.82 1516.14,1212.22 1516.73,1210.67 1517.32,1214.11 1517.9,1212.5 1518.49,1212.29 1519.07,1210.52 1519.66,1212.86 1520.25,1208.27 1520.83,1208.13 1521.42,1209.61 1522.01,1209.58 1522.59,1205.76 1523.18,1204.41 1523.77,1204.78 1524.35,1203.48 1524.94,1202.16 1525.52,1205.11 1526.11,1205.51 1526.7,1203 1527.28,1204.66 1527.87,1207.42 1528.46,1207.62 1529.04,1210.58 1529.63,1210.7 1530.22,1213.14 1530.8,1215.67 1531.39,1219.36 1531.98,1218.88 1532.56,1217.2 1533.15,1215.47 1533.73,1216.52 1534.32,1216.1 1534.91,1214.48 1535.49,1215.48 1536.08,1211.59 1536.67,1211.66 1537.25,1211.59 1537.84,1208.53 1538.43,1209.92 1539.01,1209.85 1539.6,1211.07 1540.19,1214.9 1540.77,1215.97 1541.36,1212.76 1541.94,1210.08 1542.53,1211.33 1543.12,1212.51 1543.7,1209.29 1544.29,1206.94 1544.88,1206.81 1545.46,1202.99 1546.05,1201.82 1546.64,1202.16 1547.22,1203.93 1547.81,1204.1 1548.4,1201.71 1548.98,1198.36 1549.57,1199.51 1550.15,1199.96 1550.74,1199.09 1551.33,1202.43 1551.91,1202.72 1552.5,1205.83 1553.09,1207.54 1553.67,1209.03 1554.26,1211.57 1554.85,1210.37 1555.43,1210.35 1556.02,1210.32 1556.6,1214.26 1557.19,1214.03 1557.78,1212.67 1558.36,1213.78 1558.95,1214.87 1559.54,1214.58 1560.12,1214.41 1560.71,1215.55 1561.3,1216.64 1561.88,1213.6 1562.47,1213.34 1563.06,1213.1 1563.64,1214.13 1564.23,1212.51 1564.81,1211.05 1565.4,1212.03 1565.99,1212.21 1566.57,1214.81 1567.16,1214.39 1567.75,1212.71 1568.33,1209.83 1568.92,1206.73 1569.51,1205.41 1570.09,1204.15 1570.68,1203.1 1571.27,1203.41 1571.85,1206.42 1572.44,1204.01 1573.02,1203.39 1573.61,1202.53 1574.2,1202.55 1574.78,1203.08 1575.37,1202.24 1575.96,1205.41 1576.54,1206.36 1577.13,1205.19 1577.72,1206.67 1578.3,1208.14 1578.89,1205.61 1579.47,1207.29 1580.06,1207.31 1580.65,1208.8 1581.23,1208.62 1581.82,1209.97 1582.41,1207.28 1582.99,1206.24 1583.58,1206.15 1584.17,1207.45 1584.75,1211.37 1585.34,1211.06 1585.93,1211.04 1586.51,1208.32 1587.1,1206.96 1587.68,1207.27 1588.27,1208.59 1588.86,1206.92 1589.44,1203.08 1590.03,1206.01 1590.62,1202.1 1591.2,1202.55 1591.79,1203.06 1592.38,1204.93 1592.96,1207.72 1593.55,1210.87 1594.14,1210.69 1594.72,1209.38 1595.31,1209.59 1595.89,1209.51 1596.48,1209.61 1597.07,1210.81 1597.65,1210.77 1598.24,1210.78 1598.83,1210.66 1599.41,1213.41 1600,1213.25 1600.59,1212.74 1601.17,1212.36 1601.76,1210.8 1602.34,1213.52 1602.93,1214.52 1603.52,1215.68 1604.1,1218.04 1604.69,1218.69 1605.28,1219.57 1605.86,1221.79 1606.45,1221.29 1607.04,1220.87 1607.62,1221.78 1608.21,1222.04 1608.8,1222.63 1609.38,1220.91 1609.97,1219.92 1610.55,1220.92 1611.14,1220.34 1611.73,1215.99 1612.31,1211.56 1612.9,1209.91 1613.49,1211.05 1614.07,1207.01 1614.66,1209.8 1615.25,1210.9 1615.83,1209.1 1616.42,1210.55 1617.01,1211.54 1617.59,1211.48 1618.18,1210.05 1618.76,1208.62 1619.35,1208.84 1619.94,1207.7 1620.52,1204.99 1621.11,1202.65 1621.7,1202.95 1622.28,1200.32 1622.87,1201.77 1623.46,1203.61 1624.04,1201.1 1624.63,1201.48 1625.22,1200.57 1625.8,1202.54 1626.39,1209.6 1626.97,1202.72 1627.56,1204.22 1628.15,1206.98 1628.73,1209.69 1629.32,1206.8 1629.91,1205.46 1630.49,1206.76 1631.08,1206.72 1631.67,1209.7 1632.25,1208.53 1632.84,1209.86 1633.42,1207.29 1634.01,1207.71 1634.6,1206.73 1635.18,1206.95 1635.77,1205.68 1636.36,1205.74 1636.94,1207.18 1637.53,1205.96 1638.12,1202.1 1638.7,1198.11 1639.29,1197.32 1639.88,1196.58 1640.46,1197.25 1641.05,1196.76 1641.63,1197.57 1642.22,1195.49 1642.81,1194.84 1643.39,1194.55 1643.98,1196.46 1644.57,1198.56 1645.15,1197.61 1645.74,1198.07 1646.33,1199.89 1646.91,1200.31 1647.5,1202.1 1648.09,1202.46 1648.67,1201.5 1649.26,1200.67 1649.84,1201.38 1650.43,1200.49 1651.02,1201.14 1651.6,1204.08 1652.19,1205.81 1652.78,1203.58 1653.36,1202.75 1653.95,1203.18 1654.54,1206.29 1655.12,1206.25 1655.71,1206.82 1656.29,1209.6 1656.88,1208.37 1657.47,1208.54 1658.05,1210.1 1658.64,1212.74 1659.23,1212.37 1659.81,1211.05 1660.4,1209.71 1660.99,1208.44 1661.57,1208.43 1662.16,1206.86 1662.75,1206.93 1663.33,1208.34 1663.92,1208.47 1664.5,1208.39 1665.09,1208.66 1665.68,1211.52 1666.26,1212.7 1666.85,1212.99 1667.44,1209.01 1668.02,1208.04 1668.61,1208 1669.2,1205.64 1669.78,1203.3 1670.37,1202.4 1670.96,1205.28 1671.54,1205.62 1672.13,1204.44 1672.71,1207.44 1673.3,1210.37 1673.89,1210.33 1674.47,1210.38 1675.06,1211.52 1675.65,1209.85 1676.23,1210.04 1676.82,1211.26 1677.41,1210.12 1677.99,1210.12 1678.58,1208.79 1679.17,1208.83 1679.75,1209.96 1680.34,1210.04 1680.92,1211.57 1681.51,1211.75 1682.1,1208.89 1682.68,1210.24 1683.27,1214.06 1683.86,1215.25 1684.44,1215.12 1685.03,1216.29 1685.62,1214.54 1686.2,1214.42 1686.79,1211.36 1687.37,1215.07 1687.96,1217.56 1688.55,1218.62 1689.13,1215.42 1689.72,1216.26 1690.31,1216.08 1690.89,1217.23 1691.48,1216.99 1692.07,1215.24 1692.65,1217.95 1693.24,1220.28 1693.83,1220.8 1694.41,1220.07 1695,1222.15 1695.58,1222.83 1696.17,1220.77 1696.76,1220.37 1697.34,1221.23 1697.93,1220.54 1698.52,1221.11 1699.1,1219.24 1699.69,1218.65 1700.28,1216.68 1700.86,1214.63 1701.45,1217.07 1702.04,1214.16 1702.62,1211.2 1703.21,1211.1 1703.79,1209.54 1704.38,1210.64 1704.97,1212.07 1705.55,1209.28 1706.14,1208.02 1706.73,1205.53 1707.31,1203.17 1707.9,1203.6 1708.49,1203.93 1709.07,1205.31 1709.66,1206.72 1710.24,1207.14 1710.83,1205.79 1711.42,1207.28 1712,1208.66 1712.59,1204.79 1713.18,1207.92 1713.76,1208.08 1714.35,1209.43 1714.94,1210.86 1715.52,1209.15 1716.11,1207.87 1716.7,1206.2 1717.28,1207.76 1717.87,1205.1 1718.45,1204.23 1719.04,1203.3 1719.63,1206.31 1720.21,1207.76 1720.8,1206.52 1721.39,1205.29 1721.97,1205.65 1722.56,1205.92 1723.15,1204.71 1723.73,1205.11 1724.32,1206.5 1724.91,1209.53 1725.49,1205.47 1726.08,1206.92 1726.66,1208.42 1727.25,1207.27 1727.84,1207.28 1728.42,1205.15 1729.01,1204.13 1729.6,1204.44 1730.18,1203.47 1730.77,1207.59 1731.36,1209.2 1731.94,1208.15 1732.53,1206.78 1733.11,1210.88 1733.7,1209.52 1734.29,1207.32 1734.87,1203.27 1735.46,1205.05 1736.05,1203.89 1736.63,1208.48 1737.22,1209.59 1737.81,1213.67 1738.39,1212.24 1738.98,1213.66 1739.57,1213.42 1740.15,1214.66 1740.74,1215.7 1741.32,1217.86 1741.91,1218.87 1742.5,1220.77 1743.08,1222.89 1743.67,1222.37 1744.26,1223.36 1744.84,1222.87 1745.43,1222.56 1746.02,1224.84 1746.6,1227.91 1747.19,1228.31 1747.78,1227.29 1748.36,1225.16 1748.95,1225.49 1749.53,1222.19 1750.12,1221.39 1750.71,1220.7 1751.29,1220.11 1751.88,1219.35 1752.47,1218.87 1753.05,1217.98 1753.64,1217.57 1754.23,1215.95 1754.81,1215.46 1755.4,1215.13 1755.99,1216.03 1756.57,1216.87 1757.16,1213.59 1757.74,1213.36 1758.33,1212.83 1758.92,1214.18 1759.5,1213.68 1760.09,1213.22 1760.68,1212.77 1761.26,1208.41 1761.85,1207.24 1762.44,1207.38 1763.02,1206.39 1763.61,1206.25 1764.19,1207.88 1764.78,1207.88 1765.37,1203.7 1765.95,1203.93 1766.54,1205.75 1767.13,1207.45 1767.71,1206.09 1768.3,1206.14 1768.89,1204.83 1769.47,1206.42 1770.06,1206.41 1770.65,1210.41 1771.23,1208.72 1771.82,1208.78 1772.4,1208.92 1772.99,1210.31 1773.58,1211.62 1774.16,1215.41 1774.75,1213.78 1775.34,1213.69 1775.92,1213.54 1776.51,1210.77 1777.1,1213.13 1777.68,1210.32 1778.27,1207.51 1778.86,1204.76 1779.44,1203.57 1780.03,1203.81 1780.61,1200.33 1781.2,1200.97 1781.79,1198.63 1782.37,1199.37 1782.96,1201.24 1783.55,1200.07 1784.13,1199.01 1784.72,1201.18 1785.31,1201.87 1785.89,1203.69 1786.48,1205.18 1787.06,1205.84 1787.65,1203.47 1788.24,1205.39 1788.82,1205.68 1789.41,1204.43 1790,1203.42 1790.58,1203.61 1791.17,1204.89 1791.76,1205.12 1792.34,1205.28 1792.93,1206.98 1793.52,1207.09 1794.1,1207.36 1794.69,1208.71 1795.27,1207.81 1795.86,1206.5 1796.45,1205.5 1797.03,1207.2 1797.62,1208.7 1798.21,1207.84 1798.79,1206.56 1799.38,1207.96 1799.97,1209.55 1800.55,1208.41 1801.14,1211.24 1801.73,1209.86 1802.31,1209.86 1802.9,1209.56 1803.48,1209.36 1804.07,1210.64 1804.66,1209.4 1805.24,1209.33 1805.83,1208.19 1806.42,1208.19 1807,1212.23 1807.59,1211.87 1808.18,1213.37 1808.76,1213.19 1809.35,1212.96 1809.94,1215.18 1810.52,1213.52 1811.11,1210.6 1811.69,1208.97 1812.28,1209.09 1812.87,1207.64 1813.45,1206.23 1814.04,1205.18 1814.63,1206.64 1815.21,1205.38 1815.8,1205.49 1816.39,1205.8 1816.97,1208.79 1817.56,1210.08 1818.14,1211.29 1818.73,1212.39 1819.32,1216.14 1819.9,1215.79 1820.49,1215.26 1821.08,1215.27 1821.66,1213.69 1822.25,1213.42 1822.84,1211.63 1823.42,1212.97 1824.01,1211.45 1824.6,1212.61 1825.18,1209.77 1825.77,1209.74 1826.35,1208.33 1826.94,1206.94 1827.53,1209.73 1828.11,1210.18 1828.7,1209.09 1829.29,1210.41 1829.87,1210.48 1830.46,1210.44 1831.05,1211.76 1831.63,1208.83 1832.22,1208.84 1832.81,1207.36 1833.39,1210.19 1833.98,1213.02 1834.56,1211.57 1835.15,1214.1 1835.74,1213.78 1836.32,1214.89 1836.91,1212.97 1837.5,1212.6 1838.08,1211.17 1838.67,1211.05 1839.26,1209.79 1839.84,1208.45 1840.43,1209.88 1841.01,1207.28 1841.6,1205.93 1842.19,1206.24 1842.77,1202.32 1843.36,1205.23 1843.95,1208.17 1844.53,1205.76 1845.12,1204.42 1845.71,1203.39 1846.29,1204.99 1846.88,1202.64 1847.47,1203.12 1848.05,1204.6 1848.64,1204.93 1849.22,1207.87 1849.81,1206.73 1850.4,1208.29 1850.98,1212.59 1851.57,1212.54 1852.16,1217.79 1852.74,1214.67 1853.33,1214.56 1853.92,1215.88 1854.5,1215.63 1855.09,1215.38 1855.68,1215 1856.26,1213.48 1856.85,1214.54 1857.43,1214.42 1858.02,1214.03 1858.61,1212.66 1859.19,1211.33 1859.78,1211.1 1860.37,1212.41 1860.95,1212.38 1861.54,1213.49 1862.13,1212.16 1862.71,1213.38 1863.3,1215.79 1863.88,1215.23 1864.47,1217.59 1865.06,1221.3 1865.64,1223.18 1866.23,1224.02 1866.82,1223.4 1867.4,1223.98 1867.99,1223.09 1868.58,1220.9 1869.16,1221.51 1869.75,1218.43 1870.34,1219.08 1870.92,1218.48 1871.51,1220.62 1872.09,1216.09 1872.68,1215.58 1873.27,1214.92 1873.85,1217.41 1874.44,1215.55 1875.03,1215.3 1875.61,1215.06 1876.2,1213.45 1876.79,1211.75 1877.37,1211.61 1877.96,1207.33 1878.55,1207.26 1879.13,1207.21 1879.72,1208.47 1880.3,1208.46 1880.89,1208.74 1881.48,1212.75 1882.06,1214.28 1882.65,1215.34 1883.24,1215.05 1883.82,1213.35 1884.41,1211.94 1885,1210.5 1885.58,1213.08 1886.17,1210.06 1886.76,1210.07 1887.34,1210.13 1887.93,1211.5 1888.51,1209.94 1889.1,1211.14 1889.69,1209.85 1890.27,1209.7 1890.86,1209.64 1891.45,1211.06 1892.03,1210.74 1892.62,1209.41 1893.21,1212.07 1893.79,1212.07 1894.38,1211.89 1894.96,1211.74 1895.55,1210.44 1896.14,1213.08 1896.72,1211.54 1897.31,1212.82 1897.9,1212.52 1898.48,1212.53 1899.07,1214.83 1899.66,1213.35 1900.24,1214.57 1900.83,1214.1 1901.42,1215.36 1902,1220.56 1902.59,1218.73 1903.17,1216.99 1903.76,1215.12 1904.35,1214.69 1904.93,1213.17 1905.52,1210.37 1906.11,1207.42 1906.69,1207.53 1907.28,1209.45 1907.87,1209.37 1908.45,1208.29 1909.04,1208.39 1909.63,1208.4 1910.21,1207.25 1910.8,1206.07 1911.38,1207.55 1911.97,1206.07 1912.56,1208.65 1913.14,1211.23 1913.73,1210.95 1914.32,1208.31 1914.9,1206.96 1915.49,1207.28 1916.08,1203.63 1916.66,1202.35 1917.25,1202.86 1917.83,1203.16 1918.42,1203.3 1919.01,1199.63 1919.59,1201.66 1920.18,1202.03 1920.77,1203.9 1921.35,1205.7 1921.94,1205.79 1922.53,1204.75 1923.11,1203.83 1923.7,1204.11 1924.29,1203.09 1924.87,1203.43 1925.46,1203.69 1926.04,1203.85 1926.63,1204.17 1927.22,1204.44 1927.8,1203.07 1928.39,1201.92 1928.98,1203.66 1929.56,1205.56 1930.15,1204.49 1930.74,1204.98 1931.32,1204.36 1931.91,1202.98 1932.5,1203.46 1933.08,1206.54 1933.67,1203.99 1934.25,1202.88 1934.84,1201.99 1935.43,1202.53 1936.01,1204.25 1936.6,1202.16 1937.19,1203.63 1937.77,1206.68 1938.36,1205.34 1938.95,1208.42 1939.53,1207.07 1940.12,1205.71 1940.71,1207.32 1941.29,1207.54 1941.88,1207.54 1942.46,1205.16 1943.05,1204.2 1943.64,1203.39 1944.22,1203.61 1944.81,1198.52 1945.4,1198.89 1945.98,1197.93 1946.57,1198.32 1947.16,1197.57 1947.74,1198.33 1948.33,1199.01 1948.91,1199.58 1949.5,1199.89 1950.09,1199.36 1950.67,1202.67 1951.26,1201.51 1951.85,1201.87 1952.43,1203.46 1953.02,1202.41 1953.61,1204.3 1954.19,1207.28 1954.78,1208.85 1955.37,1210.12 1955.95,1211.35 1956.54,1210.91 1957.12,1211.99 1957.71,1213.4 1958.3,1214.4 1958.88,1212.62 1959.47,1213.86 1960.06,1213.61 1960.64,1214.91 1961.23,1213.23 1961.82,1215.83 1962.4,1212.92 1962.99,1212.65 1963.58,1212.32 1964.16,1212.26 1964.75,1210.55 1965.33,1211.81 1965.92,1211.32 1966.51,1211.37 1967.09,1205.86 1967.68,1207.28 1968.27,1206.04 1968.85,1207.51 1969.44,1207.33 1970.03,1208.88 1970.61,1209.12 1971.2,1209.26 1971.78,1206.53 1972.37,1205.33 1972.96,1205.57 1973.54,1206.11 1974.13,1209.05 1974.72,1211.68 1975.3,1210.4 1975.89,1207.84 1976.48,1206.37 1977.06,1202.56 1977.65,1204.51 1978.24,1204.83 1978.82,1207.76 1979.41,1208.12 1979.99,1207.2 1980.58,1208.63 1981.17,1206.2 1981.75,1204.98 1982.34,1206.41 1982.93,1208.2 1983.51,1210.8 1984.1,1209.46 1984.69,1214.74 1985.27,1214.59 1985.86,1211.99 1986.45,1213.11 1987.03,1212.85 1987.62,1211.37 1988.2,1215.03 1988.79,1212.04 1989.38,1209.3 1989.96,1207.64 1990.55,1209.16 1991.14,1207.74 1991.72,1207.78 1992.31,1207.77 1992.9,1208.05 1993.48,1209.15 1994.07,1210.38 1994.65,1211.67 1995.24,1207.66 1995.83,1207.89 1996.41,1209.76 1997,1209.88 1997.59,1208.16 1998.17,1210.69 1998.76,1210.76 1999.35,1209.38 1999.93,1205.31 2000.52,1209.59 2001.11,1208.23 2001.69,1205.57 2002.28,1203.14 2002.86,1203.51 2003.45,1201.25 2004.04,1204.78 2004.62,1206.67 2005.21,1208.23 2005.8,1209.65 2006.38,1208.16 2006.97,1208.14 2007.56,1209.4 2008.14,1208.14 2008.73,1211.05 2009.32,1212.35 2009.9,1209.68 2010.49,1209.28 2011.07,1209.26 2011.66,1211.83 2012.25,1212.78 2012.83,1211.25 2013.42,1211.15 2014.01,1213.59 2014.59,1214.6 2015.18,1215.81 2015.77,1215.25 2016.35,1217.4 2016.94,1217.02 2017.53,1218.06 2018.11,1218.63 2018.7,1215.59 2019.28,1215.22 2019.87,1216.12 2020.46,1217.11 2021.04,1216.63 2021.63,1216.23 2022.22,1217.17 2022.8,1215.38 2023.39,1213.56 2023.98,1214.49 2024.56,1214.1 2025.15,1215.01 2025.73,1214.7 2026.32,1214.34 2026.91,1212.67 2027.49,1211.35 2028.08,1212.58 2028.67,1210.97 2029.25,1211.07 2029.84,1208.09 2030.43,1208.17 2031.01,1208.12 2031.6,1205.6 2032.19,1205.57 2032.77,1204.27 2033.36,1202.93 2033.94,1203.37 2034.53,1202.44 2035.12,1201.58 2035.7,1200.72 2036.29,1199.77 2036.88,1201.82 2037.46,1203.85 2038.05,1205.19 2038.64,1205.32 2039.22,1207.92 2039.81,1210.72 2040.4,1209.46 2040.98,1202.81 2041.57,1206.1 2042.15,1206.32 2042.74,1207.86 2043.33,1207.61 2043.91,1211.71 2044.5,1211.46 2045.09,1211.42 2045.67,1212.57 2046.26,1213.72 2046.85,1213.48 2047.43,1212.03 2048.02,1211.99 2048.6,1207.57 2049.19,1207.84 2049.78,1206.66 2050.36,1202.71 2050.95,1200.12 2051.54,1202.04 2052.12,1202.26 2052.71,1202.7 2053.3,1200.6 2053.88,1198.52 2054.47,1198.81 2055.06,1198.31 2055.64,1198.77 2056.23,1199.26 2056.81,1200.08 2057.4,1202.13 2057.99,1204.92 2058.57,1207.74 2059.16,1210.57 2059.75,1210.02 2060.33,1209.88 2060.92,1209.7 2061.51,1212.11 2062.09,1215.89 2062.68,1212.82 2063.27,1215.32 2063.85,1216.3 2064.44,1220.15 2065.02,1217.9 2065.61,1220.12 2066.2,1219.58 2066.78,1221.96 2067.37,1222.85 2067.96,1221.03 2068.54,1219.17 2069.13,1218.75 2069.72,1219.37 2070.3,1219.06 2070.89,1217.38 2071.48,1218.19 2072.06,1217.65 2072.65,1218.5 2073.23,1218.21 2073.82,1217.97 2074.41,1216.46 2074.99,1217.77 2075.58,1217.36 2076.17,1213.13 2076.75,1214.23 2077.34,1213.81 2077.93,1211 2078.51,1210.9 2079.1,1213.35 2079.68,1215.8 2080.27,1218.08 2080.86,1217.68 2081.44,1215.82 2082.03,1215.84 2082.62,1215.53 2083.2,1213.62 2083.79,1212.34 2084.38,1210.94 2084.96,1208.21 2085.55,1209.39 2086.14,1208.05 2086.72,1208.11 2087.31,1213.45 2087.89,1209.12 2088.48,1207.86 2089.07,1207.84 2089.65,1208.01 2090.24,1206.48 2090.83,1208.4 2091.41,1209.54 2092,1207.07 2092.59,1204.47 2093.17,1203.44 2093.76,1203.71 2094.35,1202.64 2094.93,1203 2095.52,1203.29 2096.1,1203.56 2096.69,1205.1 2097.28,1204.13 2097.86,1206.02 2098.45,1205.09 2099.04,1203.79 2099.62,1204.09 2100.21,1203.03 2100.8,1205.83 2101.38,1208.88 2101.97,1207.55 2102.55,1207.57 2103.14,1207.65 2103.73,1208.8 2104.31,1208.8 2104.9,1207.75 2105.49,1205.28 2106.07,1206.67 2106.66,1207.98 2107.25,1209.37 2107.83,1208.14 2108.42,1208.32 2109.01,1207.25 2109.59,1207.24 2110.18,1208.71 2110.76,1210.04 2111.35,1211.16 2111.94,1212.24 2112.52,1211.91 2113.11,1211.91 2113.7,1211.89 2114.28,1214.38 2114.87,1212.84 2115.46,1208.51 2116.04,1208.7 2116.63,1208.72 2117.22,1209.03 2117.8,1207.84 2118.39,1205.24 2118.97,1205.55 2119.56,1207.04 2120.15,1206.93 2120.73,1208.46 2121.32,1207.27 2121.91,1203.29 2122.49,1200.74 2123.08,1202.56 2123.67,1204.33 2124.25,1203.36 2124.84,1205.11 2125.42,1205.22 2126.01,1205.24 2126.6,1205.67 2127.18,1204.6 2127.77,1207.55 2128.36,1208.86 2128.94,1210.12 2129.53,1208.78 2130.12,1207.37 2130.7,1207.4 2131.29,1208.68 2131.88,1207.52 2132.46,1207.78 2133.05,1207.66 2133.63,1210.33 2134.22,1210.42 2134.81,1211.89 2135.39,1209.23 2135.98,1212.03 2136.57,1211.92 2137.15,1210.15 2137.74,1211.59 2138.33,1209.98 2138.91,1208.8 2139.5,1207.52 2140.09,1203.69 2140.67,1206.57 2141.26,1205.32 2141.84,1206.96 2142.43,1208.77 2143.02,1210.12 2143.6,1214.19 2144.19,1214.24 2144.78,1213.83 2145.36,1214.87 2145.95,1217.04 2146.54,1215.55 2147.12,1217.74 2147.71,1214.95 2148.3,1213.23 2148.88,1214.58 2149.47,1212.99 2150.05,1212.82 2150.64,1215.01 2151.23,1213.25 2151.81,1211.48 2152.4,1210.35 2152.99,1213.03 2153.57,1213.02 2154.16,1210.18 2154.75,1208.98 2155.33,1210.46 2155.92,1209.01 2156.5,1211.72 2157.09,1214.2 2157.68,1212.7 2158.26,1213.98 \"/>\n<path clip-path=\"url(#clip392)\" d=\"M986.025 1210.12 L986.612 1210.12 L987.198 1210.12 L987.785 1210.12 L988.371 1210.12 L988.957 1210.12 L989.544 1210.12 L990.13 1210.12 L990.717 1210.12 L991.303 1210.12 L991.889 1210.12 L992.476 1210.12 L993.062 1210.12 L993.649 1210.12 L994.235 1210.12 L994.822 1210.12 L995.408 1210.12 L995.994 1210.12 L996.581 1210.12 L997.167 1210.12 L997.754 1210.12 L998.34 1210.12 L998.926 1210.12 L999.513 1210.12 L1000.1 1210.12 L1000.69 1210.12 L1001.27 1210.12 L1001.86 1210.12 L1002.44 1210.12 L1003.03 1210.12 L1003.62 1210.12 L1004.2 1210.12 L1004.79 1210.12 L1005.38 1210.12 L1005.96 1210.12 L1006.55 1210.12 L1007.14 1210.12 L1007.72 1210.12 L1008.31 1210.12 L1008.9 1210.12 L1009.48 1210.12 L1010.07 1210.12 L1010.65 1210.12 L1011.24 1210.12 L1011.83 1210.12 L1012.41 1210.12 L1013 1210.12 L1013.59 1210.12 L1014.17 1210.12 L1014.76 1210.12 L1015.35 1210.12 L1015.93 1210.12 L1016.52 1210.12 L1017.11 1210.12 L1017.69 1210.12 L1018.28 1210.12 L1018.86 1210.12 L1019.45 1210.12 L1020.04 1210.12 L1020.62 1210.12 L1021.21 1210.12 L1021.8 1210.12 L1022.38 1210.12 L1022.97 1210.12 L1023.56 1210.12 L1024.14 1210.12 L1024.73 1210.12 L1025.32 1210.12 L1025.9 1210.12 L1026.49 1210.12 L1027.07 1210.12 L1027.66 1210.12 L1028.25 1210.12 L1028.83 1210.12 L1029.42 1210.12 L1030.01 1210.12 L1030.59 1210.12 L1031.18 1210.12 L1031.77 1210.12 L1032.35 1210.12 L1032.94 1210.12 L1033.52 1210.12 L1034.11 1210.12 L1034.7 1210.12 L1035.28 1210.12 L1035.87 1210.12 L1036.46 1210.12 L1037.04 1210.12 L1037.63 1210.12 L1038.22 1210.12 L1038.8 1210.12 L1039.39 1210.12 L1039.98 1210.12 L1040.56 1210.12 L1041.15 1210.12 L1041.73 1210.12 L1042.32 1210.12 L1042.91 1210.12 L1043.49 1210.12 L1044.08 1210.12 L1044.67 1210.12 L1045.25 1210.12 L1045.84 1210.12 L1046.43 1210.12 L1047.01 1210.12 L1047.6 1210.12 L1048.19 1210.12 L1048.77 1210.12 L1049.36 1210.12 L1049.94 1210.12 L1050.53 1210.12 L1051.12 1210.12 L1051.7 1210.12 L1052.29 1210.12 L1052.88 1210.12 L1053.46 1210.12 L1054.05 1210.12 L1054.64 1210.12 L1055.22 1210.12 L1055.81 1210.12 L1056.39 1210.12 L1056.98 1210.12 L1057.57 1210.12 L1058.15 1210.12 L1058.74 1210.12 L1059.33 1210.12 L1059.91 1210.12 L1060.5 1210.12 L1061.09 1210.12 L1061.67 1210.12 L1062.26 1210.12 L1062.85 1210.12 L1063.43 1210.12 L1064.02 1210.12 L1064.6 1210.12 L1065.19 1210.12 L1065.78 1210.12 L1066.36 1210.12 L1066.95 1210.12 L1067.54 1210.12 L1068.12 1210.12 L1068.71 1210.12 L1069.3 1210.12 L1069.88 1210.12 L1070.47 1210.12 L1071.06 1210.12 L1071.64 1210.12 L1072.23 1210.12 L1072.81 1210.12 L1073.4 1210.12 L1073.99 1210.12 L1074.57 1210.12 L1075.16 1210.12 L1075.75 1210.12 L1076.33 1210.12 L1076.92 1210.12 L1077.51 1210.12 L1078.09 1210.12 L1078.68 1210.12 L1079.26 1210.12 L1079.85 1210.12 L1080.44 1210.12 L1081.02 1210.12 L1081.61 1210.12 L1082.2 1210.12 L1082.78 1210.12 L1083.37 1210.12 L1083.96 1210.12 L1084.54 1210.12 L1085.13 1210.12 L1085.72 1210.12 L1086.3 1210.12 L1086.89 1210.12 L1087.47 1210.12 L1088.06 1210.12 L1088.65 1210.12 L1089.23 1210.12 L1089.82 1210.12 L1090.41 1210.12 L1090.99 1210.12 L1091.58 1210.12 L1092.17 1210.12 L1092.75 1210.12 L1093.34 1210.12 L1093.93 1210.12 L1094.51 1210.12 L1095.1 1210.12 L1095.68 1210.12 L1096.27 1210.12 L1096.86 1210.12 L1097.44 1210.12 L1098.03 1210.12 L1098.62 1210.12 L1099.2 1210.12 L1099.79 1210.12 L1100.38 1210.12 L1100.96 1210.12 L1101.55 1210.12 L1102.14 1210.12 L1102.72 1210.12 L1103.31 1210.12 L1103.89 1210.12 L1104.48 1210.12 L1105.07 1210.12 L1105.65 1210.12 L1106.24 1210.12 L1106.83 1210.12 L1107.41 1210.12 L1108 1210.12 L1108.59 1210.12 L1109.17 1210.12 L1109.76 1210.12 L1110.34 1210.12 L1110.93 1210.12 L1111.52 1210.12 L1112.1 1210.12 L1112.69 1210.12 L1113.28 1210.12 L1113.86 1210.12 L1114.45 1210.12 L1115.04 1210.12 L1115.62 1210.12 L1116.21 1210.12 L1116.8 1210.12 L1117.38 1210.12 L1117.97 1210.12 L1118.55 1210.12 L1119.14 1210.12 L1119.73 1210.12 L1120.31 1210.12 L1120.9 1210.12 L1121.49 1210.12 L1122.07 1210.12 L1122.66 1210.12 L1123.25 1210.12 L1123.83 1210.12 L1124.42 1210.12 L1125.01 1210.12 L1125.59 1210.12 L1126.18 1210.12 L1126.76 1210.12 L1127.35 1210.12 L1127.94 1210.12 L1128.52 1210.12 L1129.11 1210.12 L1129.7 1210.12 L1130.28 1210.12 L1130.87 1210.12 L1131.46 1210.12 L1132.04 1210.12 L1132.63 1210.12 L1133.21 1210.12 L1133.8 1210.12 L1134.39 1210.12 L1134.97 1210.12 L1135.56 1210.12 L1136.15 1210.12 L1136.73 1210.12 L1137.32 1210.12 L1137.91 1210.12 L1138.49 1210.12 L1139.08 1210.12 L1139.67 1210.12 L1140.25 1210.12 L1140.84 1210.12 L1141.42 1210.12 L1142.01 1210.12 L1142.6 1210.12 L1143.18 1210.12 L1143.77 1210.12 L1144.36 1210.12 L1144.94 1210.12 L1145.53 1210.12 L1146.12 1210.12 L1146.7 1210.12 L1147.29 1210.12 L1147.88 1210.12 L1148.46 1210.12 L1149.05 1210.12 L1149.63 1210.12 L1150.22 1210.12 L1150.81 1210.12 L1151.39 1210.12 L1151.98 1210.12 L1152.57 1210.12 L1153.15 1210.12 L1153.74 1210.12 L1154.33 1210.12 L1154.91 1210.12 L1155.5 1210.12 L1156.09 1210.12 L1156.67 1210.12 L1157.26 1210.12 L1157.84 1210.12 L1158.43 1210.12 L1159.02 1210.12 L1159.6 1210.12 L1160.19 1210.12 L1160.78 1210.12 L1161.36 1210.12 L1161.95 1210.12 L1162.54 1210.12 L1163.12 1210.12 L1163.71 1210.12 L1164.29 1210.12 L1164.88 1210.12 L1165.47 1210.12 L1166.05 1210.12 L1166.64 1210.12 L1167.23 1210.12 L1167.81 1210.12 L1168.4 1210.12 L1168.99 1210.12 L1169.57 1210.12 L1170.16 1210.12 L1170.75 1210.12 L1171.33 1210.12 L1171.92 1210.12 L1172.5 1210.12 L1173.09 1210.12 L1173.68 1210.12 L1174.26 1210.12 L1174.85 1210.12 L1175.44 1210.12 L1176.02 1210.12 L1176.61 1210.12 L1177.2 1210.12 L1177.78 1210.12 L1178.37 1210.12 L1178.96 1210.12 L1179.54 1210.12 L1180.13 1210.12 L1180.71 1210.12 L1181.3 1210.12 L1181.89 1210.12 L1182.47 1210.12 L1183.06 1210.12 L1183.65 1210.12 L1184.23 1210.12 L1184.82 1210.12 L1185.41 1210.12 L1185.99 1210.12 L1186.58 1210.12 L1187.16 1210.12 L1187.75 1210.12 L1188.34 1210.12 L1188.92 1210.12 L1189.51 1210.12 L1190.1 1210.12 L1190.68 1210.12 L1191.27 1210.12 L1191.86 1210.12 L1192.44 1210.12 L1193.03 1210.12 L1193.62 1210.12 L1194.2 1210.12 L1194.79 1210.12 L1195.37 1210.12 L1195.96 1210.12 L1196.55 1210.12 L1197.13 1210.12 L1197.72 1210.12 L1198.31 1210.12 L1198.89 1210.12 L1199.48 1210.12 L1200.07 1210.12 L1200.65 1210.12 L1201.24 1210.12 L1201.83 1210.12 L1202.41 1210.12 L1203 1210.12 L1203.58 1210.12 L1204.17 1210.12 L1204.76 1210.12 L1205.34 1210.12 L1205.93 1210.12 L1206.52 1210.12 L1207.1 1210.12 L1207.69 1210.12 L1208.28 1210.12 L1208.86 1210.12 L1209.45 1210.12 L1210.03 1210.12 L1210.62 1210.12 L1211.21 1210.12 L1211.79 1210.12 L1212.38 1210.12 L1212.97 1210.12 L1213.55 1210.12 L1214.14 1210.12 L1214.73 1210.12 L1215.31 1210.12 L1215.9 1210.12 L1216.49 1210.12 L1217.07 1210.12 L1217.66 1210.12 L1218.24 1210.12 L1218.83 1210.12 L1219.42 1210.12 L1220 1210.12 L1220.59 1210.12 L1221.18 1210.12 L1221.76 1210.12 L1222.35 1210.12 L1222.94 1210.12 L1223.52 1210.12 L1224.11 1210.12 L1224.7 1210.12 L1225.28 1210.12 L1225.87 1210.12 L1226.45 1210.12 L1227.04 1210.12 L1227.63 1210.12 L1228.21 1210.12 L1228.8 1210.12 L1229.39 1210.12 L1229.97 1210.12 L1230.56 1210.12 L1231.15 1210.12 L1231.73 1210.12 L1232.32 1210.12 L1232.91 1210.12 L1233.49 1210.12 L1234.08 1210.12 L1234.66 1210.12 L1235.25 1210.12 L1235.84 1210.12 L1236.42 1210.12 L1237.01 1210.12 L1237.6 1210.12 L1238.18 1210.12 L1238.77 1210.12 L1239.36 1210.12 L1239.94 1210.12 L1240.53 1210.12 L1241.11 1210.12 L1241.7 1210.12 L1242.29 1210.12 L1242.87 1210.12 L1243.46 1210.12 L1244.05 1210.12 L1244.63 1210.12 L1245.22 1210.12 L1245.81 1210.12 L1246.39 1210.12 L1246.98 1210.12 L1247.57 1210.12 L1248.15 1210.12 L1248.74 1210.12 L1249.32 1210.12 L1249.91 1210.12 L1250.5 1210.12 L1251.08 1210.12 L1251.67 1210.12 L1252.26 1210.12 L1252.84 1210.12 L1253.43 1210.12 L1254.02 1210.12 L1254.6 1210.12 L1255.19 1210.12 L1255.78 1210.12 L1256.36 1210.12 L1256.95 1210.12 L1257.53 1210.12 L1258.12 1210.12 L1258.71 1210.12 L1259.29 1210.12 L1259.88 1210.12 L1260.47 1210.12 L1261.05 1210.12 L1261.64 1210.12 L1262.23 1210.12 L1262.81 1210.12 L1263.4 1210.12 L1263.98 1210.12 L1264.57 1210.12 L1265.16 1210.12 L1265.74 1210.12 L1266.33 1210.12 L1266.92 1210.12 L1267.5 1210.12 L1268.09 1210.12 L1268.68 1210.12 L1269.26 1210.12 L1269.85 1210.12 L1270.44 1210.12 L1271.02 1210.12 L1271.61 1210.12 L1272.19 1210.12 L1272.78 1210.12 L1273.37 1210.12 L1273.95 1210.12 L1274.54 1210.12 L1275.13 1210.12 L1275.71 1210.12 L1276.3 1210.12 L1276.89 1210.12 L1277.47 1210.12 L1278.06 1210.12 L1278.65 1210.12 L1279.23 1210.12 L1279.82 1210.12 L1280.4 1210.12 L1280.99 1210.12 L1281.58 1210.12 L1282.16 1210.12 L1282.75 1210.12 L1283.34 1210.12 L1283.92 1210.12 L1284.51 1210.12 L1285.1 1210.12 L1285.68 1210.12 L1286.27 1210.12 L1286.86 1210.12 L1287.44 1210.12 L1288.03 1210.12 L1288.61 1210.12 L1289.2 1210.12 L1289.79 1210.12 L1290.37 1210.12 L1290.96 1210.12 L1291.55 1210.12 L1292.13 1210.12 L1292.72 1210.12 L1293.31 1210.12 L1293.89 1210.12 L1294.48 1210.12 L1295.06 1210.12 L1295.65 1210.12 L1296.24 1210.12 L1296.82 1210.12 L1297.41 1210.12 L1298 1210.12 L1298.58 1210.12 L1299.17 1210.12 L1299.76 1210.12 L1300.34 1210.12 L1300.93 1210.12 L1301.52 1210.12 L1302.1 1210.12 L1302.69 1210.12 L1303.27 1210.12 L1303.86 1210.12 L1304.45 1210.12 L1305.03 1210.12 L1305.62 1210.12 L1306.21 1210.12 L1306.79 1210.12 L1307.38 1210.12 L1307.97 1210.12 L1308.55 1210.12 L1309.14 1210.12 L1309.73 1210.12 L1310.31 1210.12 L1310.9 1210.12 L1311.48 1210.12 L1312.07 1210.12 L1312.66 1210.12 L1313.24 1210.12 L1313.83 1210.12 L1314.42 1210.12 L1315 1210.12 L1315.59 1210.12 L1316.18 1210.12 L1316.76 1210.12 L1317.35 1210.12 L1317.93 1210.12 L1318.52 1210.12 L1319.11 1210.12 L1319.69 1210.12 L1320.28 1210.12 L1320.87 1210.12 L1321.45 1210.12 L1322.04 1210.12 L1322.63 1210.12 L1323.21 1210.12 L1323.8 1210.12 L1324.39 1210.12 L1324.97 1210.12 L1325.56 1210.12 L1326.14 1210.12 L1326.73 1210.12 L1327.32 1210.12 L1327.9 1210.12 L1328.49 1210.12 L1329.08 1210.12 L1329.66 1210.12 L1330.25 1210.12 L1330.84 1210.12 L1331.42 1210.12 L1332.01 1210.12 L1332.6 1210.12 L1333.18 1210.12 L1333.77 1210.12 L1334.35 1210.12 L1334.94 1210.12 L1335.53 1210.12 L1336.11 1210.12 L1336.7 1210.12 L1337.29 1210.12 L1337.87 1210.12 L1338.46 1210.12 L1339.05 1210.12 L1339.63 1210.12 L1340.22 1210.12 L1340.8 1210.12 L1341.39 1210.12 L1341.98 1210.12 L1342.56 1210.12 L1343.15 1210.12 L1343.74 1210.12 L1344.32 1210.12 L1344.91 1210.12 L1345.5 1210.12 L1346.08 1210.12 L1346.67 1210.12 L1347.26 1210.12 L1347.84 1210.12 L1348.43 1210.12 L1349.01 1210.12 L1349.6 1210.12 L1350.19 1210.12 L1350.77 1210.12 L1351.36 1210.12 L1351.95 1210.12 L1352.53 1210.12 L1353.12 1210.12 L1353.71 1210.12 L1354.29 1210.12 L1354.88 1210.12 L1355.47 1210.12 L1356.05 1210.12 L1356.64 1210.12 L1357.22 1210.12 L1357.81 1210.12 L1358.4 1210.12 L1358.98 1210.12 L1359.57 1210.12 L1360.16 1210.12 L1360.74 1210.12 L1361.33 1210.12 L1361.92 1210.12 L1362.5 1210.12 L1363.09 1210.12 L1363.68 1210.12 L1364.26 1210.12 L1364.85 1210.12 L1365.43 1210.12 L1366.02 1210.12 L1366.61 1210.12 L1367.19 1210.12 L1367.78 1210.12 L1368.37 1210.12 L1368.95 1210.12 L1369.54 1210.12 L1370.13 1210.12 L1370.71 1210.12 L1371.3 1210.12 L1371.88 1210.12 L1372.47 1210.12 L1373.06 1210.12 L1373.64 1210.12 L1374.23 1210.12 L1374.82 1210.12 L1375.4 1210.12 L1375.99 1210.12 L1376.58 1210.12 L1377.16 1210.12 L1377.75 1210.12 L1378.34 1210.12 L1378.92 1210.12 L1379.51 1210.12 L1380.09 1210.12 L1380.68 1210.12 L1381.27 1210.12 L1381.85 1210.12 L1382.44 1210.12 L1383.03 1210.12 L1383.61 1210.12 L1384.2 1210.12 L1384.79 1210.12 L1385.37 1210.12 L1385.96 1210.12 L1386.55 1210.12 L1387.13 1210.12 L1387.72 1210.12 L1388.3 1210.12 L1388.89 1210.12 L1389.48 1210.12 L1390.06 1210.12 L1390.65 1210.12 L1391.24 1210.12 L1391.82 1210.12 L1392.41 1210.12 L1393 1210.12 L1393.58 1210.12 L1394.17 1210.12 L1394.75 1210.12 L1395.34 1210.12 L1395.93 1210.12 L1396.51 1210.12 L1397.1 1210.12 L1397.69 1210.12 L1398.27 1210.12 L1398.86 1210.12 L1399.45 1210.12 L1400.03 1210.12 L1400.62 1210.12 L1401.21 1210.12 L1401.79 1210.12 L1402.38 1210.12 L1402.96 1210.12 L1403.55 1210.12 L1404.14 1210.12 L1404.72 1210.12 L1405.31 1210.12 L1405.9 1210.12 L1406.48 1210.12 L1407.07 1210.12 L1407.66 1210.12 L1408.24 1210.12 L1408.83 1210.12 L1409.42 1210.12 L1410 1210.12 L1410.59 1210.12 L1411.17 1210.12 L1411.76 1210.12 L1412.35 1210.12 L1412.93 1210.12 L1413.52 1210.12 L1414.11 1210.12 L1414.69 1210.12 L1415.28 1210.12 L1415.87 1210.12 L1416.45 1210.12 L1417.04 1210.12 L1417.63 1210.12 L1418.21 1210.12 L1418.8 1210.12 L1419.38 1210.12 L1419.97 1210.12 L1420.56 1210.12 L1421.14 1210.12 L1421.73 1210.12 L1422.32 1210.12 L1422.9 1210.12 L1423.49 1210.12 L1424.08 1210.12 L1424.66 1210.12 L1425.25 1210.12 L1425.83 1210.12 L1426.42 1210.12 L1427.01 1210.12 L1427.59 1210.12 L1428.18 1210.12 L1428.77 1210.12 L1429.35 1210.12 L1429.94 1210.12 L1430.53 1210.12 L1431.11 1210.12 L1431.7 1210.12 L1432.29 1210.12 L1432.87 1210.12 L1433.46 1210.12 L1434.04 1210.12 L1434.63 1210.12 L1435.22 1210.12 L1435.8 1210.12 L1436.39 1210.12 L1436.98 1210.12 L1437.56 1210.12 L1438.15 1210.12 L1438.74 1210.12 L1439.32 1210.12 L1439.91 1210.12 L1440.5 1210.12 L1441.08 1210.12 L1441.67 1210.12 L1442.25 1210.12 L1442.84 1210.12 L1443.43 1210.12 L1444.01 1210.12 L1444.6 1210.12 L1445.19 1210.12 L1445.77 1210.12 L1446.36 1210.12 L1446.95 1210.12 L1447.53 1210.12 L1448.12 1210.12 L1448.7 1210.12 L1449.29 1210.12 L1449.88 1210.12 L1450.46 1210.12 L1451.05 1210.12 L1451.64 1210.12 L1452.22 1210.12 L1452.81 1210.12 L1453.4 1210.12 L1453.98 1210.12 L1454.57 1210.12 L1455.16 1210.12 L1455.74 1210.12 L1456.33 1210.12 L1456.91 1210.12 L1457.5 1210.12 L1458.09 1210.12 L1458.67 1210.12 L1459.26 1210.12 L1459.85 1210.12 L1460.43 1210.12 L1461.02 1210.12 L1461.61 1210.12 L1462.19 1210.12 L1462.78 1210.12 L1463.37 1210.12 L1463.95 1210.12 L1464.54 1210.12 L1465.12 1210.12 L1465.71 1210.12 L1466.3 1210.12 L1466.88 1210.12 L1467.47 1210.12 L1468.06 1210.12 L1468.64 1210.12 L1469.23 1210.12 L1469.82 1210.12 L1470.4 1210.12 L1470.99 1210.12 L1471.57 1210.12 L1472.16 1210.12 L1472.75 1210.12 L1473.33 1210.12 L1473.92 1210.12 L1474.51 1210.12 L1475.09 1210.12 L1475.68 1210.12 L1476.27 1210.12 L1476.85 1210.12 L1477.44 1210.12 L1478.03 1210.12 L1478.61 1210.12 L1479.2 1210.12 L1479.78 1210.12 L1480.37 1210.12 L1480.96 1210.12 L1481.54 1210.12 L1482.13 1210.12 L1482.72 1210.12 L1483.3 1210.12 L1483.89 1210.12 L1484.48 1210.12 L1485.06 1210.12 L1485.65 1210.12 L1486.24 1210.12 L1486.82 1210.12 L1487.41 1210.12 L1487.99 1210.12 L1488.58 1210.12 L1489.17 1210.12 L1489.75 1210.12 L1490.34 1210.12 L1490.93 1210.12 L1491.51 1210.12 L1492.1 1210.12 L1492.69 1210.12 L1493.27 1210.12 L1493.86 1210.12 L1494.45 1210.12 L1495.03 1210.12 L1495.62 1210.12 L1496.2 1210.12 L1496.79 1210.12 L1497.38 1210.12 L1497.96 1210.12 L1498.55 1210.12 L1499.14 1210.12 L1499.72 1210.12 L1500.31 1210.12 L1500.9 1210.12 L1501.48 1210.12 L1502.07 1210.12 L1502.65 1210.12 L1503.24 1210.12 L1503.83 1210.12 L1504.41 1210.12 L1505 1210.12 L1505.59 1210.12 L1506.17 1210.12 L1506.76 1210.12 L1507.35 1210.12 L1507.93 1210.12 L1508.52 1210.12 L1509.11 1210.12 L1509.69 1210.12 L1510.28 1210.12 L1510.86 1210.12 L1511.45 1210.12 L1512.04 1210.12 L1512.62 1210.12 L1513.21 1210.12 L1513.8 1210.12 L1514.38 1210.12 L1514.97 1210.12 L1515.56 1210.12 L1516.14 1210.12 L1516.73 1210.12 L1517.32 1210.12 L1517.9 1210.12 L1518.49 1210.12 L1519.07 1210.12 L1519.66 1210.12 L1520.25 1210.12 L1520.83 1210.12 L1521.42 1210.12 L1522.01 1210.12 L1522.59 1210.12 L1523.18 1210.12 L1523.77 1210.12 L1524.35 1210.12 L1524.94 1210.12 L1525.52 1210.12 L1526.11 1210.12 L1526.7 1210.12 L1527.28 1210.12 L1527.87 1210.12 L1528.46 1210.12 L1529.04 1210.12 L1529.63 1210.12 L1530.22 1210.12 L1530.8 1210.12 L1531.39 1210.12 L1531.98 1210.12 L1532.56 1210.12 L1533.15 1210.12 L1533.73 1210.12 L1534.32 1210.12 L1534.91 1210.12 L1535.49 1210.12 L1536.08 1210.12 L1536.67 1210.12 L1537.25 1210.12 L1537.84 1210.12 L1538.43 1210.12 L1539.01 1210.12 L1539.6 1210.12 L1540.19 1210.12 L1540.77 1210.12 L1541.36 1210.12 L1541.94 1210.12 L1542.53 1210.12 L1543.12 1210.12 L1543.7 1210.12 L1544.29 1210.12 L1544.88 1210.12 L1545.46 1210.12 L1546.05 1210.12 L1546.64 1210.12 L1547.22 1210.12 L1547.81 1210.12 L1548.4 1210.12 L1548.98 1210.12 L1549.57 1210.12 L1550.15 1210.12 L1550.74 1210.12 L1551.33 1210.12 L1551.91 1210.12 L1552.5 1210.12 L1553.09 1210.12 L1553.67 1210.12 L1554.26 1210.12 L1554.85 1210.12 L1555.43 1210.12 L1556.02 1210.12 L1556.6 1210.12 L1557.19 1210.12 L1557.78 1210.12 L1558.36 1210.12 L1558.95 1210.12 L1559.54 1210.12 L1560.12 1210.12 L1560.71 1210.12 L1561.3 1210.12 L1561.88 1210.12 L1562.47 1210.12 L1563.06 1210.12 L1563.64 1210.12 L1564.23 1210.12 L1564.81 1210.12 L1565.4 1210.12 L1565.99 1210.12 L1566.57 1210.12 L1567.16 1210.12 L1567.75 1210.12 L1568.33 1210.12 L1568.92 1210.12 L1569.51 1210.12 L1570.09 1210.12 L1570.68 1210.12 L1571.27 1210.12 L1571.85 1210.12 L1572.44 1210.12 L1573.02 1210.12 L1573.61 1210.12 L1574.2 1210.12 L1574.78 1210.12 L1575.37 1210.12 L1575.96 1210.12 L1576.54 1210.12 L1577.13 1210.12 L1577.72 1210.12 L1578.3 1210.12 L1578.89 1210.12 L1579.47 1210.12 L1580.06 1210.12 L1580.65 1210.12 L1581.23 1210.12 L1581.82 1210.12 L1582.41 1210.12 L1582.99 1210.12 L1583.58 1210.12 L1584.17 1210.12 L1584.75 1210.12 L1585.34 1210.12 L1585.93 1210.12 L1586.51 1210.12 L1587.1 1210.12 L1587.68 1210.12 L1588.27 1210.12 L1588.86 1210.12 L1589.44 1210.12 L1590.03 1210.12 L1590.62 1210.12 L1591.2 1210.12 L1591.79 1210.12 L1592.38 1210.12 L1592.96 1210.12 L1593.55 1210.12 L1594.14 1210.12 L1594.72 1210.12 L1595.31 1210.12 L1595.89 1210.12 L1596.48 1210.12 L1597.07 1210.12 L1597.65 1210.12 L1598.24 1210.12 L1598.83 1210.12 L1599.41 1210.12 L1600 1210.12 L1600.59 1210.12 L1601.17 1210.12 L1601.76 1210.12 L1602.34 1210.12 L1602.93 1210.12 L1603.52 1210.12 L1604.1 1210.12 L1604.69 1210.12 L1605.28 1210.12 L1605.86 1210.12 L1606.45 1210.12 L1607.04 1210.12 L1607.62 1210.12 L1608.21 1210.12 L1608.8 1210.12 L1609.38 1210.12 L1609.97 1210.12 L1610.55 1210.12 L1611.14 1210.12 L1611.73 1210.12 L1612.31 1210.12 L1612.9 1210.12 L1613.49 1210.12 L1614.07 1210.12 L1614.66 1210.12 L1615.25 1210.12 L1615.83 1210.12 L1616.42 1210.12 L1617.01 1210.12 L1617.59 1210.12 L1618.18 1210.12 L1618.76 1210.12 L1619.35 1210.12 L1619.94 1210.12 L1620.52 1210.12 L1621.11 1210.12 L1621.7 1210.12 L1622.28 1210.12 L1622.87 1210.12 L1623.46 1210.12 L1624.04 1210.12 L1624.63 1210.12 L1625.22 1210.12 L1625.8 1210.12 L1626.39 1210.12 L1626.97 1210.12 L1627.56 1210.12 L1628.15 1210.12 L1628.73 1210.12 L1629.32 1210.12 L1629.91 1210.12 L1630.49 1210.12 L1631.08 1210.12 L1631.67 1210.12 L1632.25 1210.12 L1632.84 1210.12 L1633.42 1210.12 L1634.01 1210.12 L1634.6 1210.12 L1635.18 1210.12 L1635.77 1210.12 L1636.36 1210.12 L1636.94 1210.12 L1637.53 1210.12 L1638.12 1210.12 L1638.7 1210.12 L1639.29 1210.12 L1639.88 1210.12 L1640.46 1210.12 L1641.05 1210.12 L1641.63 1210.12 L1642.22 1210.12 L1642.81 1210.12 L1643.39 1210.12 L1643.98 1210.12 L1644.57 1210.12 L1645.15 1210.12 L1645.74 1210.12 L1646.33 1210.12 L1646.91 1210.12 L1647.5 1210.12 L1648.09 1210.12 L1648.67 1210.12 L1649.26 1210.12 L1649.84 1210.12 L1650.43 1210.12 L1651.02 1210.12 L1651.6 1210.12 L1652.19 1210.12 L1652.78 1210.12 L1653.36 1210.12 L1653.95 1210.12 L1654.54 1210.12 L1655.12 1210.12 L1655.71 1210.12 L1656.29 1210.12 L1656.88 1210.12 L1657.47 1210.12 L1658.05 1210.12 L1658.64 1210.12 L1659.23 1210.12 L1659.81 1210.12 L1660.4 1210.12 L1660.99 1210.12 L1661.57 1210.12 L1662.16 1210.12 L1662.75 1210.12 L1663.33 1210.12 L1663.92 1210.12 L1664.5 1210.12 L1665.09 1210.12 L1665.68 1210.12 L1666.26 1210.12 L1666.85 1210.12 L1667.44 1210.12 L1668.02 1210.12 L1668.61 1210.12 L1669.2 1210.12 L1669.78 1210.12 L1670.37 1210.12 L1670.96 1210.12 L1671.54 1210.12 L1672.13 1210.12 L1672.71 1210.12 L1673.3 1210.12 L1673.89 1210.12 L1674.47 1210.12 L1675.06 1210.12 L1675.65 1210.12 L1676.23 1210.12 L1676.82 1210.12 L1677.41 1210.12 L1677.99 1210.12 L1678.58 1210.12 L1679.17 1210.12 L1679.75 1210.12 L1680.34 1210.12 L1680.92 1210.12 L1681.51 1210.12 L1682.1 1210.12 L1682.68 1210.12 L1683.27 1210.12 L1683.86 1210.12 L1684.44 1210.12 L1685.03 1210.12 L1685.62 1210.12 L1686.2 1210.12 L1686.79 1210.12 L1687.37 1210.12 L1687.96 1210.12 L1688.55 1210.12 L1689.13 1210.12 L1689.72 1210.12 L1690.31 1210.12 L1690.89 1210.12 L1691.48 1210.12 L1692.07 1210.12 L1692.65 1210.12 L1693.24 1210.12 L1693.83 1210.12 L1694.41 1210.12 L1695 1210.12 L1695.58 1210.12 L1696.17 1210.12 L1696.76 1210.12 L1697.34 1210.12 L1697.93 1210.12 L1698.52 1210.12 L1699.1 1210.12 L1699.69 1210.12 L1700.28 1210.12 L1700.86 1210.12 L1701.45 1210.12 L1702.04 1210.12 L1702.62 1210.12 L1703.21 1210.12 L1703.79 1210.12 L1704.38 1210.12 L1704.97 1210.12 L1705.55 1210.12 L1706.14 1210.12 L1706.73 1210.12 L1707.31 1210.12 L1707.9 1210.12 L1708.49 1210.12 L1709.07 1210.12 L1709.66 1210.12 L1710.24 1210.12 L1710.83 1210.12 L1711.42 1210.12 L1712 1210.12 L1712.59 1210.12 L1713.18 1210.12 L1713.76 1210.12 L1714.35 1210.12 L1714.94 1210.12 L1715.52 1210.12 L1716.11 1210.12 L1716.7 1210.12 L1717.28 1210.12 L1717.87 1210.12 L1718.45 1210.12 L1719.04 1210.12 L1719.63 1210.12 L1720.21 1210.12 L1720.8 1210.12 L1721.39 1210.12 L1721.97 1210.12 L1722.56 1210.12 L1723.15 1210.12 L1723.73 1210.12 L1724.32 1210.12 L1724.91 1210.12 L1725.49 1210.12 L1726.08 1210.12 L1726.66 1210.12 L1727.25 1210.12 L1727.84 1210.12 L1728.42 1210.12 L1729.01 1210.12 L1729.6 1210.12 L1730.18 1210.12 L1730.77 1210.12 L1731.36 1210.12 L1731.94 1210.12 L1732.53 1210.12 L1733.11 1210.12 L1733.7 1210.12 L1734.29 1210.12 L1734.87 1210.12 L1735.46 1210.12 L1736.05 1210.12 L1736.63 1210.12 L1737.22 1210.12 L1737.81 1210.12 L1738.39 1210.12 L1738.98 1210.12 L1739.57 1210.12 L1740.15 1210.12 L1740.74 1210.12 L1741.32 1210.12 L1741.91 1210.12 L1742.5 1210.12 L1743.08 1210.12 L1743.67 1210.12 L1744.26 1210.12 L1744.84 1210.12 L1745.43 1210.12 L1746.02 1210.12 L1746.6 1210.12 L1747.19 1210.12 L1747.78 1210.12 L1748.36 1210.12 L1748.95 1210.12 L1749.53 1210.12 L1750.12 1210.12 L1750.71 1210.12 L1751.29 1210.12 L1751.88 1210.12 L1752.47 1210.12 L1753.05 1210.12 L1753.64 1210.12 L1754.23 1210.12 L1754.81 1210.12 L1755.4 1210.12 L1755.99 1210.12 L1756.57 1210.12 L1757.16 1210.12 L1757.74 1210.12 L1758.33 1210.12 L1758.92 1210.12 L1759.5 1210.12 L1760.09 1210.12 L1760.68 1210.12 L1761.26 1210.12 L1761.85 1210.12 L1762.44 1210.12 L1763.02 1210.12 L1763.61 1210.12 L1764.19 1210.12 L1764.78 1210.12 L1765.37 1210.12 L1765.95 1210.12 L1766.54 1210.12 L1767.13 1210.12 L1767.71 1210.12 L1768.3 1210.12 L1768.89 1210.12 L1769.47 1210.12 L1770.06 1210.12 L1770.65 1210.12 L1771.23 1210.12 L1771.82 1210.12 L1772.4 1210.12 L1772.99 1210.12 L1773.58 1210.12 L1774.16 1210.12 L1774.75 1210.12 L1775.34 1210.12 L1775.92 1210.12 L1776.51 1210.12 L1777.1 1210.12 L1777.68 1210.12 L1778.27 1210.12 L1778.86 1210.12 L1779.44 1210.12 L1780.03 1210.12 L1780.61 1210.12 L1781.2 1210.12 L1781.79 1210.12 L1782.37 1210.12 L1782.96 1210.12 L1783.55 1210.12 L1784.13 1210.12 L1784.72 1210.12 L1785.31 1210.12 L1785.89 1210.12 L1786.48 1210.12 L1787.06 1210.12 L1787.65 1210.12 L1788.24 1210.12 L1788.82 1210.12 L1789.41 1210.12 L1790 1210.12 L1790.58 1210.12 L1791.17 1210.12 L1791.76 1210.12 L1792.34 1210.12 L1792.93 1210.12 L1793.52 1210.12 L1794.1 1210.12 L1794.69 1210.12 L1795.27 1210.12 L1795.86 1210.12 L1796.45 1210.12 L1797.03 1210.12 L1797.62 1210.12 L1798.21 1210.12 L1798.79 1210.12 L1799.38 1210.12 L1799.97 1210.12 L1800.55 1210.12 L1801.14 1210.12 L1801.73 1210.12 L1802.31 1210.12 L1802.9 1210.12 L1803.48 1210.12 L1804.07 1210.12 L1804.66 1210.12 L1805.24 1210.12 L1805.83 1210.12 L1806.42 1210.12 L1807 1210.12 L1807.59 1210.12 L1808.18 1210.12 L1808.76 1210.12 L1809.35 1210.12 L1809.94 1210.12 L1810.52 1210.12 L1811.11 1210.12 L1811.69 1210.12 L1812.28 1210.12 L1812.87 1210.12 L1813.45 1210.12 L1814.04 1210.12 L1814.63 1210.12 L1815.21 1210.12 L1815.8 1210.12 L1816.39 1210.12 L1816.97 1210.12 L1817.56 1210.12 L1818.14 1210.12 L1818.73 1210.12 L1819.32 1210.12 L1819.9 1210.12 L1820.49 1210.12 L1821.08 1210.12 L1821.66 1210.12 L1822.25 1210.12 L1822.84 1210.12 L1823.42 1210.12 L1824.01 1210.12 L1824.6 1210.12 L1825.18 1210.12 L1825.77 1210.12 L1826.35 1210.12 L1826.94 1210.12 L1827.53 1210.12 L1828.11 1210.12 L1828.7 1210.12 L1829.29 1210.12 L1829.87 1210.12 L1830.46 1210.12 L1831.05 1210.12 L1831.63 1210.12 L1832.22 1210.12 L1832.81 1210.12 L1833.39 1210.12 L1833.98 1210.12 L1834.56 1210.12 L1835.15 1210.12 L1835.74 1210.12 L1836.32 1210.12 L1836.91 1210.12 L1837.5 1210.12 L1838.08 1210.12 L1838.67 1210.12 L1839.26 1210.12 L1839.84 1210.12 L1840.43 1210.12 L1841.01 1210.12 L1841.6 1210.12 L1842.19 1210.12 L1842.77 1210.12 L1843.36 1210.12 L1843.95 1210.12 L1844.53 1210.12 L1845.12 1210.12 L1845.71 1210.12 L1846.29 1210.12 L1846.88 1210.12 L1847.47 1210.12 L1848.05 1210.12 L1848.64 1210.12 L1849.22 1210.12 L1849.81 1210.12 L1850.4 1210.12 L1850.98 1210.12 L1851.57 1210.12 L1852.16 1210.12 L1852.74 1210.12 L1853.33 1210.12 L1853.92 1210.12 L1854.5 1210.12 L1855.09 1210.12 L1855.68 1210.12 L1856.26 1210.12 L1856.85 1210.12 L1857.43 1210.12 L1858.02 1210.12 L1858.61 1210.12 L1859.19 1210.12 L1859.78 1210.12 L1860.37 1210.12 L1860.95 1210.12 L1861.54 1210.12 L1862.13 1210.12 L1862.71 1210.12 L1863.3 1210.12 L1863.88 1210.12 L1864.47 1210.12 L1865.06 1210.12 L1865.64 1210.12 L1866.23 1210.12 L1866.82 1210.12 L1867.4 1210.12 L1867.99 1210.12 L1868.58 1210.12 L1869.16 1210.12 L1869.75 1210.12 L1870.34 1210.12 L1870.92 1210.12 L1871.51 1210.12 L1872.09 1210.12 L1872.68 1210.12 L1873.27 1210.12 L1873.85 1210.12 L1874.44 1210.12 L1875.03 1210.12 L1875.61 1210.12 L1876.2 1210.12 L1876.79 1210.12 L1877.37 1210.12 L1877.96 1210.12 L1878.55 1210.12 L1879.13 1210.12 L1879.72 1210.12 L1880.3 1210.12 L1880.89 1210.12 L1881.48 1210.12 L1882.06 1210.12 L1882.65 1210.12 L1883.24 1210.12 L1883.82 1210.12 L1884.41 1210.12 L1885 1210.12 L1885.58 1210.12 L1886.17 1210.12 L1886.76 1210.12 L1887.34 1210.12 L1887.93 1210.12 L1888.51 1210.12 L1889.1 1210.12 L1889.69 1210.12 L1890.27 1210.12 L1890.86 1210.12 L1891.45 1210.12 L1892.03 1210.12 L1892.62 1210.12 L1893.21 1210.12 L1893.79 1210.12 L1894.38 1210.12 L1894.96 1210.12 L1895.55 1210.12 L1896.14 1210.12 L1896.72 1210.12 L1897.31 1210.12 L1897.9 1210.12 L1898.48 1210.12 L1899.07 1210.12 L1899.66 1210.12 L1900.24 1210.12 L1900.83 1210.12 L1901.42 1210.12 L1902 1210.12 L1902.59 1210.12 L1903.17 1210.12 L1903.76 1210.12 L1904.35 1210.12 L1904.93 1210.12 L1905.52 1210.12 L1906.11 1210.12 L1906.69 1210.12 L1907.28 1210.12 L1907.87 1210.12 L1908.45 1210.12 L1909.04 1210.12 L1909.63 1210.12 L1910.21 1210.12 L1910.8 1210.12 L1911.38 1210.12 L1911.97 1210.12 L1912.56 1210.12 L1913.14 1210.12 L1913.73 1210.12 L1914.32 1210.12 L1914.9 1210.12 L1915.49 1210.12 L1916.08 1210.12 L1916.66 1210.12 L1917.25 1210.12 L1917.83 1210.12 L1918.42 1210.12 L1919.01 1210.12 L1919.59 1210.12 L1920.18 1210.12 L1920.77 1210.12 L1921.35 1210.12 L1921.94 1210.12 L1922.53 1210.12 L1923.11 1210.12 L1923.7 1210.12 L1924.29 1210.12 L1924.87 1210.12 L1925.46 1210.12 L1926.04 1210.12 L1926.63 1210.12 L1927.22 1210.12 L1927.8 1210.12 L1928.39 1210.12 L1928.98 1210.12 L1929.56 1210.12 L1930.15 1210.12 L1930.74 1210.12 L1931.32 1210.12 L1931.91 1210.12 L1932.5 1210.12 L1933.08 1210.12 L1933.67 1210.12 L1934.25 1210.12 L1934.84 1210.12 L1935.43 1210.12 L1936.01 1210.12 L1936.6 1210.12 L1937.19 1210.12 L1937.77 1210.12 L1938.36 1210.12 L1938.95 1210.12 L1939.53 1210.12 L1940.12 1210.12 L1940.71 1210.12 L1941.29 1210.12 L1941.88 1210.12 L1942.46 1210.12 L1943.05 1210.12 L1943.64 1210.12 L1944.22 1210.12 L1944.81 1210.12 L1945.4 1210.12 L1945.98 1210.12 L1946.57 1210.12 L1947.16 1210.12 L1947.74 1210.12 L1948.33 1210.12 L1948.91 1210.12 L1949.5 1210.12 L1950.09 1210.12 L1950.67 1210.12 L1951.26 1210.12 L1951.85 1210.12 L1952.43 1210.12 L1953.02 1210.12 L1953.61 1210.12 L1954.19 1210.12 L1954.78 1210.12 L1955.37 1210.12 L1955.95 1210.12 L1956.54 1210.12 L1957.12 1210.12 L1957.71 1210.12 L1958.3 1210.12 L1958.88 1210.12 L1959.47 1210.12 L1960.06 1210.12 L1960.64 1210.12 L1961.23 1210.12 L1961.82 1210.12 L1962.4 1210.12 L1962.99 1210.12 L1963.58 1210.12 L1964.16 1210.12 L1964.75 1210.12 L1965.33 1210.12 L1965.92 1210.12 L1966.51 1210.12 L1967.09 1210.12 L1967.68 1210.12 L1968.27 1210.12 L1968.85 1210.12 L1969.44 1210.12 L1970.03 1210.12 L1970.61 1210.12 L1971.2 1210.12 L1971.78 1210.12 L1972.37 1210.12 L1972.96 1210.12 L1973.54 1210.12 L1974.13 1210.12 L1974.72 1210.12 L1975.3 1210.12 L1975.89 1210.12 L1976.48 1210.12 L1977.06 1210.12 L1977.65 1210.12 L1978.24 1210.12 L1978.82 1210.12 L1979.41 1210.12 L1979.99 1210.12 L1980.58 1210.12 L1981.17 1210.12 L1981.75 1210.12 L1982.34 1210.12 L1982.93 1210.12 L1983.51 1210.12 L1984.1 1210.12 L1984.69 1210.12 L1985.27 1210.12 L1985.86 1210.12 L1986.45 1210.12 L1987.03 1210.12 L1987.62 1210.12 L1988.2 1210.12 L1988.79 1210.12 L1989.38 1210.12 L1989.96 1210.12 L1990.55 1210.12 L1991.14 1210.12 L1991.72 1210.12 L1992.31 1210.12 L1992.9 1210.12 L1993.48 1210.12 L1994.07 1210.12 L1994.65 1210.12 L1995.24 1210.12 L1995.83 1210.12 L1996.41 1210.12 L1997 1210.12 L1997.59 1210.12 L1998.17 1210.12 L1998.76 1210.12 L1999.35 1210.12 L1999.93 1210.12 L2000.52 1210.12 L2001.11 1210.12 L2001.69 1210.12 L2002.28 1210.12 L2002.86 1210.12 L2003.45 1210.12 L2004.04 1210.12 L2004.62 1210.12 L2005.21 1210.12 L2005.8 1210.12 L2006.38 1210.12 L2006.97 1210.12 L2007.56 1210.12 L2008.14 1210.12 L2008.73 1210.12 L2009.32 1210.12 L2009.9 1210.12 L2010.49 1210.12 L2011.07 1210.12 L2011.66 1210.12 L2012.25 1210.12 L2012.83 1210.12 L2013.42 1210.12 L2014.01 1210.12 L2014.59 1210.12 L2015.18 1210.12 L2015.77 1210.12 L2016.35 1210.12 L2016.94 1210.12 L2017.53 1210.12 L2018.11 1210.12 L2018.7 1210.12 L2019.28 1210.12 L2019.87 1210.12 L2020.46 1210.12 L2021.04 1210.12 L2021.63 1210.12 L2022.22 1210.12 L2022.8 1210.12 L2023.39 1210.12 L2023.98 1210.12 L2024.56 1210.12 L2025.15 1210.12 L2025.73 1210.12 L2026.32 1210.12 L2026.91 1210.12 L2027.49 1210.12 L2028.08 1210.12 L2028.67 1210.12 L2029.25 1210.12 L2029.84 1210.12 L2030.43 1210.12 L2031.01 1210.12 L2031.6 1210.12 L2032.19 1210.12 L2032.77 1210.12 L2033.36 1210.12 L2033.94 1210.12 L2034.53 1210.12 L2035.12 1210.12 L2035.7 1210.12 L2036.29 1210.12 L2036.88 1210.12 L2037.46 1210.12 L2038.05 1210.12 L2038.64 1210.12 L2039.22 1210.12 L2039.81 1210.12 L2040.4 1210.12 L2040.98 1210.12 L2041.57 1210.12 L2042.15 1210.12 L2042.74 1210.12 L2043.33 1210.12 L2043.91 1210.12 L2044.5 1210.12 L2045.09 1210.12 L2045.67 1210.12 L2046.26 1210.12 L2046.85 1210.12 L2047.43 1210.12 L2048.02 1210.12 L2048.6 1210.12 L2049.19 1210.12 L2049.78 1210.12 L2050.36 1210.12 L2050.95 1210.12 L2051.54 1210.12 L2052.12 1210.12 L2052.71 1210.12 L2053.3 1210.12 L2053.88 1210.12 L2054.47 1210.12 L2055.06 1210.12 L2055.64 1210.12 L2056.23 1210.12 L2056.81 1210.12 L2057.4 1210.12 L2057.99 1210.12 L2058.57 1210.12 L2059.16 1210.12 L2059.75 1210.12 L2060.33 1210.12 L2060.92 1210.12 L2061.51 1210.12 L2062.09 1210.12 L2062.68 1210.12 L2063.27 1210.12 L2063.85 1210.12 L2064.44 1210.12 L2065.02 1210.12 L2065.61 1210.12 L2066.2 1210.12 L2066.78 1210.12 L2067.37 1210.12 L2067.96 1210.12 L2068.54 1210.12 L2069.13 1210.12 L2069.72 1210.12 L2070.3 1210.12 L2070.89 1210.12 L2071.48 1210.12 L2072.06 1210.12 L2072.65 1210.12 L2073.23 1210.12 L2073.82 1210.12 L2074.41 1210.12 L2074.99 1210.12 L2075.58 1210.12 L2076.17 1210.12 L2076.75 1210.12 L2077.34 1210.12 L2077.93 1210.12 L2078.51 1210.12 L2079.1 1210.12 L2079.68 1210.12 L2080.27 1210.12 L2080.86 1210.12 L2081.44 1210.12 L2082.03 1210.12 L2082.62 1210.12 L2083.2 1210.12 L2083.79 1210.12 L2084.38 1210.12 L2084.96 1210.12 L2085.55 1210.12 L2086.14 1210.12 L2086.72 1210.12 L2087.31 1210.12 L2087.89 1210.12 L2088.48 1210.12 L2089.07 1210.12 L2089.65 1210.12 L2090.24 1210.12 L2090.83 1210.12 L2091.41 1210.12 L2092 1210.12 L2092.59 1210.12 L2093.17 1210.12 L2093.76 1210.12 L2094.35 1210.12 L2094.93 1210.12 L2095.52 1210.12 L2096.1 1210.12 L2096.69 1210.12 L2097.28 1210.12 L2097.86 1210.12 L2098.45 1210.12 L2099.04 1210.12 L2099.62 1210.12 L2100.21 1210.12 L2100.8 1210.12 L2101.38 1210.12 L2101.97 1210.12 L2102.55 1210.12 L2103.14 1210.12 L2103.73 1210.12 L2104.31 1210.12 L2104.9 1210.12 L2105.49 1210.12 L2106.07 1210.12 L2106.66 1210.12 L2107.25 1210.12 L2107.83 1210.12 L2108.42 1210.12 L2109.01 1210.12 L2109.59 1210.12 L2110.18 1210.12 L2110.76 1210.12 L2111.35 1210.12 L2111.94 1210.12 L2112.52 1210.12 L2113.11 1210.12 L2113.7 1210.12 L2114.28 1210.12 L2114.87 1210.12 L2115.46 1210.12 L2116.04 1210.12 L2116.63 1210.12 L2117.22 1210.12 L2117.8 1210.12 L2118.39 1210.12 L2118.97 1210.12 L2119.56 1210.12 L2120.15 1210.12 L2120.73 1210.12 L2121.32 1210.12 L2121.91 1210.12 L2122.49 1210.12 L2123.08 1210.12 L2123.67 1210.12 L2124.25 1210.12 L2124.84 1210.12 L2125.42 1210.12 L2126.01 1210.12 L2126.6 1210.12 L2127.18 1210.12 L2127.77 1210.12 L2128.36 1210.12 L2128.94 1210.12 L2129.53 1210.12 L2130.12 1210.12 L2130.7 1210.12 L2131.29 1210.12 L2131.88 1210.12 L2132.46 1210.12 L2133.05 1210.12 L2133.63 1210.12 L2134.22 1210.12 L2134.81 1210.12 L2135.39 1210.12 L2135.98 1210.12 L2136.57 1210.12 L2137.15 1210.12 L2137.74 1210.12 L2138.33 1210.12 L2138.91 1210.12 L2139.5 1210.12 L2140.09 1210.12 L2140.67 1210.12 L2141.26 1210.12 L2141.84 1210.12 L2142.43 1210.12 L2143.02 1210.12 L2143.6 1210.12 L2144.19 1210.12 L2144.78 1210.12 L2145.36 1210.12 L2145.95 1210.12 L2146.54 1210.12 L2147.12 1210.12 L2147.71 1210.12 L2148.3 1210.12 L2148.88 1210.12 L2149.47 1210.12 L2150.05 1210.12 L2150.64 1210.12 L2151.23 1210.12 L2151.81 1210.12 L2152.4 1210.12 L2152.99 1210.12 L2153.57 1210.12 L2154.16 1210.12 L2154.75 1210.12 L2155.33 1210.12 L2155.92 1210.12 L2156.5 1210.12 L2157.09 1210.12 L2157.68 1210.12 L2158.26 1210.12 L2158.26 1209.34 L2157.68 1209.34 L2157.09 1209.34 L2156.5 1209.34 L2155.92 1209.34 L2155.33 1209.34 L2154.75 1209.34 L2154.16 1209.34 L2153.57 1209.34 L2152.99 1209.34 L2152.4 1209.34 L2151.81 1209.34 L2151.23 1209.34 L2150.64 1209.34 L2150.05 1209.34 L2149.47 1209.34 L2148.88 1209.34 L2148.3 1209.34 L2147.71 1209.34 L2147.12 1209.34 L2146.54 1209.34 L2145.95 1209.34 L2145.36 1209.34 L2144.78 1209.34 L2144.19 1209.34 L2143.6 1209.34 L2143.02 1209.34 L2142.43 1209.34 L2141.84 1209.34 L2141.26 1209.34 L2140.67 1209.34 L2140.09 1209.34 L2139.5 1209.34 L2138.91 1209.34 L2138.33 1209.34 L2137.74 1209.34 L2137.15 1209.34 L2136.57 1209.34 L2135.98 1209.34 L2135.39 1209.34 L2134.81 1209.34 L2134.22 1209.34 L2133.63 1209.34 L2133.05 1209.34 L2132.46 1209.34 L2131.88 1209.34 L2131.29 1209.34 L2130.7 1209.34 L2130.12 1209.34 L2129.53 1209.34 L2128.94 1209.34 L2128.36 1209.34 L2127.77 1209.34 L2127.18 1209.34 L2126.6 1209.34 L2126.01 1209.34 L2125.42 1209.34 L2124.84 1209.34 L2124.25 1209.34 L2123.67 1209.34 L2123.08 1209.34 L2122.49 1209.34 L2121.91 1209.34 L2121.32 1209.34 L2120.73 1209.34 L2120.15 1209.34 L2119.56 1209.34 L2118.97 1209.34 L2118.39 1209.34 L2117.8 1209.34 L2117.22 1209.34 L2116.63 1209.34 L2116.04 1209.34 L2115.46 1209.34 L2114.87 1209.34 L2114.28 1209.34 L2113.7 1209.34 L2113.11 1209.34 L2112.52 1209.34 L2111.94 1209.34 L2111.35 1209.34 L2110.76 1209.34 L2110.18 1209.34 L2109.59 1209.34 L2109.01 1209.34 L2108.42 1209.34 L2107.83 1209.34 L2107.25 1209.34 L2106.66 1209.34 L2106.07 1209.34 L2105.49 1209.34 L2104.9 1209.34 L2104.31 1209.34 L2103.73 1209.34 L2103.14 1209.34 L2102.55 1209.34 L2101.97 1209.34 L2101.38 1209.34 L2100.8 1209.34 L2100.21 1209.34 L2099.62 1209.34 L2099.04 1209.34 L2098.45 1209.34 L2097.86 1209.34 L2097.28 1209.34 L2096.69 1209.34 L2096.1 1209.34 L2095.52 1209.34 L2094.93 1209.34 L2094.35 1209.34 L2093.76 1209.34 L2093.17 1209.34 L2092.59 1209.34 L2092 1209.34 L2091.41 1209.34 L2090.83 1209.34 L2090.24 1209.34 L2089.65 1209.34 L2089.07 1209.34 L2088.48 1209.34 L2087.89 1209.34 L2087.31 1209.34 L2086.72 1209.34 L2086.14 1209.34 L2085.55 1209.34 L2084.96 1209.34 L2084.38 1209.34 L2083.79 1209.34 L2083.2 1209.34 L2082.62 1209.34 L2082.03 1209.34 L2081.44 1209.34 L2080.86 1209.34 L2080.27 1209.34 L2079.68 1209.34 L2079.1 1209.34 L2078.51 1209.34 L2077.93 1209.34 L2077.34 1209.34 L2076.75 1209.34 L2076.17 1209.34 L2075.58 1209.34 L2074.99 1209.34 L2074.41 1209.34 L2073.82 1209.34 L2073.23 1209.34 L2072.65 1209.34 L2072.06 1209.34 L2071.48 1209.34 L2070.89 1209.34 L2070.3 1209.34 L2069.72 1209.34 L2069.13 1209.34 L2068.54 1209.34 L2067.96 1209.34 L2067.37 1209.34 L2066.78 1209.34 L2066.2 1209.34 L2065.61 1209.34 L2065.02 1209.34 L2064.44 1209.34 L2063.85 1209.34 L2063.27 1209.34 L2062.68 1209.34 L2062.09 1209.34 L2061.51 1209.34 L2060.92 1209.34 L2060.33 1209.34 L2059.75 1209.34 L2059.16 1209.34 L2058.57 1209.34 L2057.99 1209.34 L2057.4 1209.34 L2056.81 1209.34 L2056.23 1209.34 L2055.64 1209.34 L2055.06 1209.34 L2054.47 1209.34 L2053.88 1209.34 L2053.3 1209.34 L2052.71 1209.34 L2052.12 1209.34 L2051.54 1209.34 L2050.95 1209.34 L2050.36 1209.34 L2049.78 1209.34 L2049.19 1209.34 L2048.6 1209.34 L2048.02 1209.34 L2047.43 1209.34 L2046.85 1209.34 L2046.26 1209.34 L2045.67 1209.34 L2045.09 1209.34 L2044.5 1209.34 L2043.91 1209.34 L2043.33 1209.34 L2042.74 1209.34 L2042.15 1209.34 L2041.57 1209.34 L2040.98 1209.34 L2040.4 1209.34 L2039.81 1209.34 L2039.22 1209.34 L2038.64 1209.34 L2038.05 1209.34 L2037.46 1209.34 L2036.88 1209.34 L2036.29 1209.34 L2035.7 1209.34 L2035.12 1209.34 L2034.53 1209.34 L2033.94 1209.34 L2033.36 1209.34 L2032.77 1209.34 L2032.19 1209.34 L2031.6 1209.34 L2031.01 1209.34 L2030.43 1209.34 L2029.84 1209.34 L2029.25 1209.34 L2028.67 1209.34 L2028.08 1209.34 L2027.49 1209.34 L2026.91 1209.34 L2026.32 1209.34 L2025.73 1209.34 L2025.15 1209.34 L2024.56 1209.34 L2023.98 1209.34 L2023.39 1209.34 L2022.8 1209.34 L2022.22 1209.34 L2021.63 1209.34 L2021.04 1209.34 L2020.46 1209.34 L2019.87 1209.34 L2019.28 1209.34 L2018.7 1209.34 L2018.11 1209.34 L2017.53 1209.34 L2016.94 1209.34 L2016.35 1209.34 L2015.77 1209.34 L2015.18 1209.34 L2014.59 1209.34 L2014.01 1209.34 L2013.42 1209.34 L2012.83 1209.34 L2012.25 1209.34 L2011.66 1209.34 L2011.07 1209.34 L2010.49 1209.34 L2009.9 1209.34 L2009.32 1209.34 L2008.73 1209.34 L2008.14 1209.34 L2007.56 1209.34 L2006.97 1209.34 L2006.38 1209.34 L2005.8 1209.34 L2005.21 1209.34 L2004.62 1209.34 L2004.04 1209.34 L2003.45 1209.34 L2002.86 1209.34 L2002.28 1209.34 L2001.69 1209.34 L2001.11 1209.34 L2000.52 1209.34 L1999.93 1209.34 L1999.35 1209.34 L1998.76 1209.34 L1998.17 1209.34 L1997.59 1209.34 L1997 1209.34 L1996.41 1209.34 L1995.83 1209.34 L1995.24 1209.34 L1994.65 1209.34 L1994.07 1209.34 L1993.48 1209.34 L1992.9 1209.34 L1992.31 1209.34 L1991.72 1209.34 L1991.14 1209.34 L1990.55 1209.34 L1989.96 1209.34 L1989.38 1209.34 L1988.79 1209.34 L1988.2 1209.34 L1987.62 1209.34 L1987.03 1209.34 L1986.45 1209.34 L1985.86 1209.34 L1985.27 1209.34 L1984.69 1209.34 L1984.1 1209.34 L1983.51 1209.34 L1982.93 1209.34 L1982.34 1209.34 L1981.75 1209.34 L1981.17 1209.34 L1980.58 1209.34 L1979.99 1209.34 L1979.41 1209.34 L1978.82 1209.34 L1978.24 1209.34 L1977.65 1209.34 L1977.06 1209.34 L1976.48 1209.34 L1975.89 1209.34 L1975.3 1209.34 L1974.72 1209.34 L1974.13 1209.34 L1973.54 1209.34 L1972.96 1209.34 L1972.37 1209.34 L1971.78 1209.34 L1971.2 1209.34 L1970.61 1209.34 L1970.03 1209.34 L1969.44 1209.34 L1968.85 1209.34 L1968.27 1209.34 L1967.68 1209.34 L1967.09 1209.34 L1966.51 1209.34 L1965.92 1209.34 L1965.33 1209.34 L1964.75 1209.34 L1964.16 1209.34 L1963.58 1209.34 L1962.99 1209.34 L1962.4 1209.34 L1961.82 1209.34 L1961.23 1209.34 L1960.64 1209.34 L1960.06 1209.34 L1959.47 1209.34 L1958.88 1209.34 L1958.3 1209.34 L1957.71 1209.34 L1957.12 1209.34 L1956.54 1209.34 L1955.95 1209.34 L1955.37 1209.34 L1954.78 1209.34 L1954.19 1209.34 L1953.61 1209.34 L1953.02 1209.34 L1952.43 1209.34 L1951.85 1209.34 L1951.26 1209.34 L1950.67 1209.34 L1950.09 1209.34 L1949.5 1209.34 L1948.91 1209.34 L1948.33 1209.34 L1947.74 1209.34 L1947.16 1209.34 L1946.57 1209.34 L1945.98 1209.34 L1945.4 1209.34 L1944.81 1209.34 L1944.22 1209.34 L1943.64 1209.34 L1943.05 1209.34 L1942.46 1209.34 L1941.88 1209.34 L1941.29 1209.34 L1940.71 1209.34 L1940.12 1209.34 L1939.53 1209.34 L1938.95 1209.34 L1938.36 1209.34 L1937.77 1209.34 L1937.19 1209.34 L1936.6 1209.34 L1936.01 1209.34 L1935.43 1209.34 L1934.84 1209.34 L1934.25 1209.34 L1933.67 1209.34 L1933.08 1209.34 L1932.5 1209.34 L1931.91 1209.34 L1931.32 1209.34 L1930.74 1209.34 L1930.15 1209.34 L1929.56 1209.34 L1928.98 1209.34 L1928.39 1209.34 L1927.8 1209.34 L1927.22 1209.34 L1926.63 1209.34 L1926.04 1209.34 L1925.46 1209.34 L1924.87 1209.34 L1924.29 1209.34 L1923.7 1209.34 L1923.11 1209.34 L1922.53 1209.34 L1921.94 1209.34 L1921.35 1209.34 L1920.77 1209.34 L1920.18 1209.34 L1919.59 1209.34 L1919.01 1209.34 L1918.42 1209.34 L1917.83 1209.34 L1917.25 1209.34 L1916.66 1209.34 L1916.08 1209.34 L1915.49 1209.34 L1914.9 1209.34 L1914.32 1209.34 L1913.73 1209.34 L1913.14 1209.34 L1912.56 1209.34 L1911.97 1209.34 L1911.38 1209.34 L1910.8 1209.34 L1910.21 1209.34 L1909.63 1209.34 L1909.04 1209.34 L1908.45 1209.34 L1907.87 1209.34 L1907.28 1209.34 L1906.69 1209.34 L1906.11 1209.34 L1905.52 1209.34 L1904.93 1209.34 L1904.35 1209.34 L1903.76 1209.34 L1903.17 1209.34 L1902.59 1209.34 L1902 1209.34 L1901.42 1209.34 L1900.83 1209.34 L1900.24 1209.34 L1899.66 1209.34 L1899.07 1209.34 L1898.48 1209.34 L1897.9 1209.34 L1897.31 1209.34 L1896.72 1209.34 L1896.14 1209.34 L1895.55 1209.34 L1894.96 1209.34 L1894.38 1209.34 L1893.79 1209.34 L1893.21 1209.34 L1892.62 1209.34 L1892.03 1209.34 L1891.45 1209.34 L1890.86 1209.34 L1890.27 1209.34 L1889.69 1209.34 L1889.1 1209.34 L1888.51 1209.34 L1887.93 1209.34 L1887.34 1209.34 L1886.76 1209.34 L1886.17 1209.34 L1885.58 1209.34 L1885 1209.34 L1884.41 1209.34 L1883.82 1209.34 L1883.24 1209.34 L1882.65 1209.34 L1882.06 1209.34 L1881.48 1209.34 L1880.89 1209.34 L1880.3 1209.34 L1879.72 1209.34 L1879.13 1209.34 L1878.55 1209.34 L1877.96 1209.34 L1877.37 1209.34 L1876.79 1209.34 L1876.2 1209.34 L1875.61 1209.34 L1875.03 1209.34 L1874.44 1209.34 L1873.85 1209.34 L1873.27 1209.34 L1872.68 1209.34 L1872.09 1209.34 L1871.51 1209.34 L1870.92 1209.34 L1870.34 1209.34 L1869.75 1209.34 L1869.16 1209.34 L1868.58 1209.34 L1867.99 1209.34 L1867.4 1209.34 L1866.82 1209.34 L1866.23 1209.34 L1865.64 1209.34 L1865.06 1209.34 L1864.47 1209.34 L1863.88 1209.34 L1863.3 1209.34 L1862.71 1209.34 L1862.13 1209.34 L1861.54 1209.34 L1860.95 1209.34 L1860.37 1209.34 L1859.78 1209.34 L1859.19 1209.34 L1858.61 1209.34 L1858.02 1209.34 L1857.43 1209.34 L1856.85 1209.34 L1856.26 1209.34 L1855.68 1209.34 L1855.09 1209.34 L1854.5 1209.34 L1853.92 1209.34 L1853.33 1209.34 L1852.74 1209.34 L1852.16 1209.34 L1851.57 1209.34 L1850.98 1209.34 L1850.4 1209.34 L1849.81 1209.34 L1849.22 1209.34 L1848.64 1209.34 L1848.05 1209.34 L1847.47 1209.34 L1846.88 1209.34 L1846.29 1209.34 L1845.71 1209.34 L1845.12 1209.34 L1844.53 1209.34 L1843.95 1209.34 L1843.36 1209.34 L1842.77 1209.34 L1842.19 1209.34 L1841.6 1209.34 L1841.01 1209.34 L1840.43 1209.34 L1839.84 1209.34 L1839.26 1209.34 L1838.67 1209.34 L1838.08 1209.34 L1837.5 1209.34 L1836.91 1209.34 L1836.32 1209.34 L1835.74 1209.34 L1835.15 1209.34 L1834.56 1209.34 L1833.98 1209.34 L1833.39 1209.34 L1832.81 1209.34 L1832.22 1209.34 L1831.63 1209.34 L1831.05 1209.34 L1830.46 1209.34 L1829.87 1209.34 L1829.29 1209.34 L1828.7 1209.34 L1828.11 1209.34 L1827.53 1209.34 L1826.94 1209.34 L1826.35 1209.34 L1825.77 1209.34 L1825.18 1209.34 L1824.6 1209.34 L1824.01 1209.34 L1823.42 1209.34 L1822.84 1209.34 L1822.25 1209.34 L1821.66 1209.34 L1821.08 1209.34 L1820.49 1209.34 L1819.9 1209.34 L1819.32 1209.34 L1818.73 1209.34 L1818.14 1209.34 L1817.56 1209.34 L1816.97 1209.34 L1816.39 1209.34 L1815.8 1209.34 L1815.21 1209.34 L1814.63 1209.34 L1814.04 1209.34 L1813.45 1209.34 L1812.87 1209.34 L1812.28 1209.34 L1811.69 1209.34 L1811.11 1209.34 L1810.52 1209.34 L1809.94 1209.34 L1809.35 1209.34 L1808.76 1209.34 L1808.18 1209.34 L1807.59 1209.34 L1807 1209.34 L1806.42 1209.34 L1805.83 1209.34 L1805.24 1209.34 L1804.66 1209.34 L1804.07 1209.34 L1803.48 1209.34 L1802.9 1209.34 L1802.31 1209.34 L1801.73 1209.34 L1801.14 1209.34 L1800.55 1209.34 L1799.97 1209.34 L1799.38 1209.34 L1798.79 1209.34 L1798.21 1209.34 L1797.62 1209.34 L1797.03 1209.34 L1796.45 1209.34 L1795.86 1209.34 L1795.27 1209.34 L1794.69 1209.34 L1794.1 1209.34 L1793.52 1209.34 L1792.93 1209.34 L1792.34 1209.34 L1791.76 1209.34 L1791.17 1209.34 L1790.58 1209.34 L1790 1209.34 L1789.41 1209.34 L1788.82 1209.34 L1788.24 1209.34 L1787.65 1209.34 L1787.06 1209.34 L1786.48 1209.34 L1785.89 1209.34 L1785.31 1209.34 L1784.72 1209.34 L1784.13 1209.34 L1783.55 1209.34 L1782.96 1209.34 L1782.37 1209.34 L1781.79 1209.34 L1781.2 1209.34 L1780.61 1209.34 L1780.03 1209.34 L1779.44 1209.34 L1778.86 1209.34 L1778.27 1209.34 L1777.68 1209.34 L1777.1 1209.34 L1776.51 1209.34 L1775.92 1209.34 L1775.34 1209.34 L1774.75 1209.34 L1774.16 1209.34 L1773.58 1209.34 L1772.99 1209.34 L1772.4 1209.34 L1771.82 1209.34 L1771.23 1209.34 L1770.65 1209.34 L1770.06 1209.34 L1769.47 1209.34 L1768.89 1209.34 L1768.3 1209.34 L1767.71 1209.34 L1767.13 1209.34 L1766.54 1209.34 L1765.95 1209.34 L1765.37 1209.34 L1764.78 1209.34 L1764.19 1209.34 L1763.61 1209.34 L1763.02 1209.34 L1762.44 1209.34 L1761.85 1209.34 L1761.26 1209.34 L1760.68 1209.34 L1760.09 1209.34 L1759.5 1209.34 L1758.92 1209.34 L1758.33 1209.34 L1757.74 1209.34 L1757.16 1209.34 L1756.57 1209.34 L1755.99 1209.34 L1755.4 1209.34 L1754.81 1209.34 L1754.23 1209.34 L1753.64 1209.34 L1753.05 1209.34 L1752.47 1209.34 L1751.88 1209.34 L1751.29 1209.34 L1750.71 1209.34 L1750.12 1209.34 L1749.53 1209.34 L1748.95 1209.34 L1748.36 1209.34 L1747.78 1209.34 L1747.19 1209.34 L1746.6 1209.34 L1746.02 1209.34 L1745.43 1209.34 L1744.84 1209.34 L1744.26 1209.34 L1743.67 1209.34 L1743.08 1209.34 L1742.5 1209.34 L1741.91 1209.34 L1741.32 1209.34 L1740.74 1209.34 L1740.15 1209.34 L1739.57 1209.34 L1738.98 1209.34 L1738.39 1209.34 L1737.81 1209.34 L1737.22 1209.34 L1736.63 1209.34 L1736.05 1209.34 L1735.46 1209.34 L1734.87 1209.34 L1734.29 1209.34 L1733.7 1209.34 L1733.11 1209.34 L1732.53 1209.34 L1731.94 1209.34 L1731.36 1209.34 L1730.77 1209.34 L1730.18 1209.34 L1729.6 1209.34 L1729.01 1209.34 L1728.42 1209.34 L1727.84 1209.34 L1727.25 1209.34 L1726.66 1209.34 L1726.08 1209.34 L1725.49 1209.34 L1724.91 1209.34 L1724.32 1209.34 L1723.73 1209.34 L1723.15 1209.34 L1722.56 1209.34 L1721.97 1209.34 L1721.39 1209.34 L1720.8 1209.34 L1720.21 1209.34 L1719.63 1209.34 L1719.04 1209.34 L1718.45 1209.34 L1717.87 1209.34 L1717.28 1209.34 L1716.7 1209.34 L1716.11 1209.34 L1715.52 1209.34 L1714.94 1209.34 L1714.35 1209.34 L1713.76 1209.34 L1713.18 1209.34 L1712.59 1209.34 L1712 1209.34 L1711.42 1209.34 L1710.83 1209.34 L1710.24 1209.34 L1709.66 1209.34 L1709.07 1209.34 L1708.49 1209.34 L1707.9 1209.34 L1707.31 1209.34 L1706.73 1209.34 L1706.14 1209.34 L1705.55 1209.34 L1704.97 1209.34 L1704.38 1209.34 L1703.79 1209.34 L1703.21 1209.34 L1702.62 1209.34 L1702.04 1209.34 L1701.45 1209.34 L1700.86 1209.34 L1700.28 1209.34 L1699.69 1209.34 L1699.1 1209.34 L1698.52 1209.34 L1697.93 1209.34 L1697.34 1209.34 L1696.76 1209.34 L1696.17 1209.34 L1695.58 1209.34 L1695 1209.34 L1694.41 1209.34 L1693.83 1209.34 L1693.24 1209.34 L1692.65 1209.34 L1692.07 1209.34 L1691.48 1209.34 L1690.89 1209.34 L1690.31 1209.34 L1689.72 1209.34 L1689.13 1209.34 L1688.55 1209.34 L1687.96 1209.34 L1687.37 1209.34 L1686.79 1209.34 L1686.2 1209.34 L1685.62 1209.34 L1685.03 1209.34 L1684.44 1209.34 L1683.86 1209.34 L1683.27 1209.34 L1682.68 1209.34 L1682.1 1209.34 L1681.51 1209.34 L1680.92 1209.34 L1680.34 1209.34 L1679.75 1209.34 L1679.17 1209.34 L1678.58 1209.34 L1677.99 1209.34 L1677.41 1209.34 L1676.82 1209.34 L1676.23 1209.34 L1675.65 1209.34 L1675.06 1209.34 L1674.47 1209.34 L1673.89 1209.34 L1673.3 1209.34 L1672.71 1209.34 L1672.13 1209.34 L1671.54 1209.34 L1670.96 1209.34 L1670.37 1209.34 L1669.78 1209.34 L1669.2 1209.34 L1668.61 1209.34 L1668.02 1209.34 L1667.44 1209.34 L1666.85 1209.34 L1666.26 1209.34 L1665.68 1209.34 L1665.09 1209.34 L1664.5 1209.34 L1663.92 1209.34 L1663.33 1209.34 L1662.75 1209.34 L1662.16 1209.34 L1661.57 1209.34 L1660.99 1209.34 L1660.4 1209.34 L1659.81 1209.34 L1659.23 1209.34 L1658.64 1209.34 L1658.05 1209.34 L1657.47 1209.34 L1656.88 1209.34 L1656.29 1209.34 L1655.71 1209.34 L1655.12 1209.34 L1654.54 1209.34 L1653.95 1209.34 L1653.36 1209.34 L1652.78 1209.34 L1652.19 1209.34 L1651.6 1209.34 L1651.02 1209.34 L1650.43 1209.34 L1649.84 1209.34 L1649.26 1209.34 L1648.67 1209.34 L1648.09 1209.34 L1647.5 1209.34 L1646.91 1209.34 L1646.33 1209.34 L1645.74 1209.34 L1645.15 1209.34 L1644.57 1209.34 L1643.98 1209.34 L1643.39 1209.34 L1642.81 1209.34 L1642.22 1209.34 L1641.63 1209.34 L1641.05 1209.34 L1640.46 1209.34 L1639.88 1209.34 L1639.29 1209.34 L1638.7 1209.34 L1638.12 1209.34 L1637.53 1209.34 L1636.94 1209.34 L1636.36 1209.34 L1635.77 1209.34 L1635.18 1209.34 L1634.6 1209.34 L1634.01 1209.34 L1633.42 1209.34 L1632.84 1209.34 L1632.25 1209.34 L1631.67 1209.34 L1631.08 1209.34 L1630.49 1209.34 L1629.91 1209.34 L1629.32 1209.34 L1628.73 1209.34 L1628.15 1209.34 L1627.56 1209.34 L1626.97 1209.34 L1626.39 1209.34 L1625.8 1209.34 L1625.22 1209.34 L1624.63 1209.34 L1624.04 1209.34 L1623.46 1209.34 L1622.87 1209.34 L1622.28 1209.34 L1621.7 1209.34 L1621.11 1209.34 L1620.52 1209.34 L1619.94 1209.34 L1619.35 1209.34 L1618.76 1209.34 L1618.18 1209.34 L1617.59 1209.34 L1617.01 1209.34 L1616.42 1209.34 L1615.83 1209.34 L1615.25 1209.34 L1614.66 1209.34 L1614.07 1209.34 L1613.49 1209.34 L1612.9 1209.34 L1612.31 1209.34 L1611.73 1209.34 L1611.14 1209.34 L1610.55 1209.34 L1609.97 1209.34 L1609.38 1209.34 L1608.8 1209.34 L1608.21 1209.34 L1607.62 1209.34 L1607.04 1209.34 L1606.45 1209.34 L1605.86 1209.34 L1605.28 1209.34 L1604.69 1209.34 L1604.1 1209.34 L1603.52 1209.34 L1602.93 1209.34 L1602.34 1209.34 L1601.76 1209.34 L1601.17 1209.34 L1600.59 1209.34 L1600 1209.34 L1599.41 1209.34 L1598.83 1209.34 L1598.24 1209.34 L1597.65 1209.34 L1597.07 1209.34 L1596.48 1209.34 L1595.89 1209.34 L1595.31 1209.34 L1594.72 1209.34 L1594.14 1209.34 L1593.55 1209.34 L1592.96 1209.34 L1592.38 1209.34 L1591.79 1209.34 L1591.2 1209.34 L1590.62 1209.34 L1590.03 1209.34 L1589.44 1209.34 L1588.86 1209.34 L1588.27 1209.34 L1587.68 1209.34 L1587.1 1209.34 L1586.51 1209.34 L1585.93 1209.34 L1585.34 1209.34 L1584.75 1209.34 L1584.17 1209.34 L1583.58 1209.34 L1582.99 1209.34 L1582.41 1209.34 L1581.82 1209.34 L1581.23 1209.34 L1580.65 1209.34 L1580.06 1209.34 L1579.47 1209.34 L1578.89 1209.34 L1578.3 1209.34 L1577.72 1209.34 L1577.13 1209.34 L1576.54 1209.34 L1575.96 1209.34 L1575.37 1209.34 L1574.78 1209.34 L1574.2 1209.34 L1573.61 1209.34 L1573.02 1209.34 L1572.44 1209.34 L1571.85 1209.34 L1571.27 1209.34 L1570.68 1209.34 L1570.09 1209.34 L1569.51 1209.34 L1568.92 1209.34 L1568.33 1209.34 L1567.75 1209.34 L1567.16 1209.34 L1566.57 1209.34 L1565.99 1209.34 L1565.4 1209.34 L1564.81 1209.34 L1564.23 1209.34 L1563.64 1209.34 L1563.06 1209.34 L1562.47 1209.34 L1561.88 1209.34 L1561.3 1209.34 L1560.71 1209.34 L1560.12 1209.34 L1559.54 1209.34 L1558.95 1209.34 L1558.36 1209.34 L1557.78 1209.34 L1557.19 1209.34 L1556.6 1209.34 L1556.02 1209.34 L1555.43 1209.34 L1554.85 1209.34 L1554.26 1209.34 L1553.67 1209.34 L1553.09 1209.34 L1552.5 1209.34 L1551.91 1209.34 L1551.33 1209.34 L1550.74 1209.34 L1550.15 1209.34 L1549.57 1209.34 L1548.98 1209.34 L1548.4 1209.34 L1547.81 1209.34 L1547.22 1209.34 L1546.64 1209.34 L1546.05 1209.34 L1545.46 1209.34 L1544.88 1209.34 L1544.29 1209.34 L1543.7 1209.34 L1543.12 1209.34 L1542.53 1209.34 L1541.94 1209.34 L1541.36 1209.34 L1540.77 1209.34 L1540.19 1209.34 L1539.6 1209.34 L1539.01 1209.34 L1538.43 1209.34 L1537.84 1209.34 L1537.25 1209.34 L1536.67 1209.34 L1536.08 1209.34 L1535.49 1209.34 L1534.91 1209.34 L1534.32 1209.34 L1533.73 1209.34 L1533.15 1209.34 L1532.56 1209.34 L1531.98 1209.34 L1531.39 1209.34 L1530.8 1209.34 L1530.22 1209.34 L1529.63 1209.34 L1529.04 1209.34 L1528.46 1209.34 L1527.87 1209.34 L1527.28 1209.34 L1526.7 1209.34 L1526.11 1209.34 L1525.52 1209.34 L1524.94 1209.34 L1524.35 1209.34 L1523.77 1209.34 L1523.18 1209.34 L1522.59 1209.34 L1522.01 1209.34 L1521.42 1209.34 L1520.83 1209.34 L1520.25 1209.34 L1519.66 1209.34 L1519.07 1209.34 L1518.49 1209.34 L1517.9 1209.34 L1517.32 1209.34 L1516.73 1209.34 L1516.14 1209.34 L1515.56 1209.34 L1514.97 1209.34 L1514.38 1209.34 L1513.8 1209.34 L1513.21 1209.34 L1512.62 1209.34 L1512.04 1209.34 L1511.45 1209.34 L1510.86 1209.34 L1510.28 1209.34 L1509.69 1209.34 L1509.11 1209.34 L1508.52 1209.34 L1507.93 1209.34 L1507.35 1209.34 L1506.76 1209.34 L1506.17 1209.34 L1505.59 1209.34 L1505 1209.34 L1504.41 1209.34 L1503.83 1209.34 L1503.24 1209.34 L1502.65 1209.34 L1502.07 1209.34 L1501.48 1209.34 L1500.9 1209.34 L1500.31 1209.34 L1499.72 1209.34 L1499.14 1209.34 L1498.55 1209.34 L1497.96 1209.34 L1497.38 1209.34 L1496.79 1209.34 L1496.2 1209.34 L1495.62 1209.34 L1495.03 1209.34 L1494.45 1209.34 L1493.86 1209.34 L1493.27 1209.34 L1492.69 1209.34 L1492.1 1209.34 L1491.51 1209.34 L1490.93 1209.34 L1490.34 1209.34 L1489.75 1209.34 L1489.17 1209.34 L1488.58 1209.34 L1487.99 1209.34 L1487.41 1209.34 L1486.82 1209.34 L1486.24 1209.34 L1485.65 1209.34 L1485.06 1209.34 L1484.48 1209.34 L1483.89 1209.34 L1483.3 1209.34 L1482.72 1209.34 L1482.13 1209.34 L1481.54 1209.34 L1480.96 1209.34 L1480.37 1209.34 L1479.78 1209.34 L1479.2 1209.34 L1478.61 1209.34 L1478.03 1209.34 L1477.44 1209.34 L1476.85 1209.34 L1476.27 1209.34 L1475.68 1209.34 L1475.09 1209.34 L1474.51 1209.34 L1473.92 1209.34 L1473.33 1209.34 L1472.75 1209.34 L1472.16 1209.34 L1471.57 1209.34 L1470.99 1209.34 L1470.4 1209.34 L1469.82 1209.34 L1469.23 1209.34 L1468.64 1209.34 L1468.06 1209.34 L1467.47 1209.34 L1466.88 1209.34 L1466.3 1209.34 L1465.71 1209.34 L1465.12 1209.34 L1464.54 1209.34 L1463.95 1209.34 L1463.37 1209.34 L1462.78 1209.34 L1462.19 1209.34 L1461.61 1209.34 L1461.02 1209.34 L1460.43 1209.34 L1459.85 1209.34 L1459.26 1209.34 L1458.67 1209.34 L1458.09 1209.34 L1457.5 1209.34 L1456.91 1209.34 L1456.33 1209.34 L1455.74 1209.34 L1455.16 1209.34 L1454.57 1209.34 L1453.98 1209.34 L1453.4 1209.34 L1452.81 1209.34 L1452.22 1209.34 L1451.64 1209.34 L1451.05 1209.34 L1450.46 1209.34 L1449.88 1209.34 L1449.29 1209.34 L1448.7 1209.34 L1448.12 1209.34 L1447.53 1209.34 L1446.95 1209.34 L1446.36 1209.34 L1445.77 1209.34 L1445.19 1209.34 L1444.6 1209.34 L1444.01 1209.34 L1443.43 1209.34 L1442.84 1209.34 L1442.25 1209.34 L1441.67 1209.34 L1441.08 1209.34 L1440.5 1209.34 L1439.91 1209.34 L1439.32 1209.34 L1438.74 1209.34 L1438.15 1209.34 L1437.56 1209.34 L1436.98 1209.34 L1436.39 1209.34 L1435.8 1209.34 L1435.22 1209.34 L1434.63 1209.34 L1434.04 1209.34 L1433.46 1209.34 L1432.87 1209.34 L1432.29 1209.34 L1431.7 1209.34 L1431.11 1209.34 L1430.53 1209.34 L1429.94 1209.34 L1429.35 1209.34 L1428.77 1209.34 L1428.18 1209.34 L1427.59 1209.34 L1427.01 1209.34 L1426.42 1209.34 L1425.83 1209.34 L1425.25 1209.34 L1424.66 1209.34 L1424.08 1209.34 L1423.49 1209.34 L1422.9 1209.34 L1422.32 1209.34 L1421.73 1209.34 L1421.14 1209.34 L1420.56 1209.34 L1419.97 1209.34 L1419.38 1209.34 L1418.8 1209.34 L1418.21 1209.34 L1417.63 1209.34 L1417.04 1209.34 L1416.45 1209.34 L1415.87 1209.34 L1415.28 1209.34 L1414.69 1209.34 L1414.11 1209.34 L1413.52 1209.34 L1412.93 1209.34 L1412.35 1209.34 L1411.76 1209.34 L1411.17 1209.34 L1410.59 1209.34 L1410 1209.34 L1409.42 1209.34 L1408.83 1209.34 L1408.24 1209.34 L1407.66 1209.34 L1407.07 1209.34 L1406.48 1209.34 L1405.9 1209.34 L1405.31 1209.34 L1404.72 1209.34 L1404.14 1209.34 L1403.55 1209.34 L1402.96 1209.34 L1402.38 1209.34 L1401.79 1209.34 L1401.21 1209.34 L1400.62 1209.34 L1400.03 1209.34 L1399.45 1209.34 L1398.86 1209.34 L1398.27 1209.34 L1397.69 1209.34 L1397.1 1209.34 L1396.51 1209.34 L1395.93 1209.34 L1395.34 1209.34 L1394.75 1209.34 L1394.17 1209.34 L1393.58 1209.34 L1393 1209.34 L1392.41 1209.34 L1391.82 1209.34 L1391.24 1209.34 L1390.65 1209.34 L1390.06 1209.34 L1389.48 1209.34 L1388.89 1209.34 L1388.3 1209.34 L1387.72 1209.34 L1387.13 1209.34 L1386.55 1209.34 L1385.96 1209.34 L1385.37 1209.34 L1384.79 1209.34 L1384.2 1209.34 L1383.61 1209.34 L1383.03 1209.34 L1382.44 1209.34 L1381.85 1209.34 L1381.27 1209.34 L1380.68 1209.34 L1380.09 1209.34 L1379.51 1209.34 L1378.92 1209.34 L1378.34 1209.34 L1377.75 1209.34 L1377.16 1209.34 L1376.58 1209.34 L1375.99 1209.34 L1375.4 1209.34 L1374.82 1209.34 L1374.23 1209.34 L1373.64 1209.34 L1373.06 1209.34 L1372.47 1209.34 L1371.88 1209.34 L1371.3 1209.34 L1370.71 1209.34 L1370.13 1209.34 L1369.54 1209.34 L1368.95 1209.34 L1368.37 1209.34 L1367.78 1209.34 L1367.19 1209.34 L1366.61 1209.34 L1366.02 1209.34 L1365.43 1209.34 L1364.85 1209.34 L1364.26 1209.34 L1363.68 1209.34 L1363.09 1209.34 L1362.5 1209.34 L1361.92 1209.34 L1361.33 1209.34 L1360.74 1209.34 L1360.16 1209.34 L1359.57 1209.34 L1358.98 1209.34 L1358.4 1209.34 L1357.81 1209.34 L1357.22 1209.34 L1356.64 1209.34 L1356.05 1209.34 L1355.47 1209.34 L1354.88 1209.34 L1354.29 1209.34 L1353.71 1209.34 L1353.12 1209.34 L1352.53 1209.34 L1351.95 1209.34 L1351.36 1209.34 L1350.77 1209.34 L1350.19 1209.34 L1349.6 1209.34 L1349.01 1209.34 L1348.43 1209.34 L1347.84 1209.34 L1347.26 1209.34 L1346.67 1209.34 L1346.08 1209.34 L1345.5 1209.34 L1344.91 1209.34 L1344.32 1209.34 L1343.74 1209.34 L1343.15 1209.34 L1342.56 1209.34 L1341.98 1209.34 L1341.39 1209.34 L1340.8 1209.34 L1340.22 1209.34 L1339.63 1209.34 L1339.05 1209.34 L1338.46 1209.34 L1337.87 1209.34 L1337.29 1209.34 L1336.7 1209.34 L1336.11 1209.34 L1335.53 1209.34 L1334.94 1209.34 L1334.35 1209.34 L1333.77 1209.34 L1333.18 1209.34 L1332.6 1209.34 L1332.01 1209.34 L1331.42 1209.34 L1330.84 1209.34 L1330.25 1209.34 L1329.66 1209.34 L1329.08 1209.34 L1328.49 1209.34 L1327.9 1209.34 L1327.32 1209.34 L1326.73 1209.34 L1326.14 1209.34 L1325.56 1209.34 L1324.97 1209.34 L1324.39 1209.34 L1323.8 1209.34 L1323.21 1209.34 L1322.63 1209.34 L1322.04 1209.34 L1321.45 1209.34 L1320.87 1209.34 L1320.28 1209.34 L1319.69 1209.34 L1319.11 1209.34 L1318.52 1209.34 L1317.93 1209.34 L1317.35 1209.34 L1316.76 1209.34 L1316.18 1209.34 L1315.59 1209.34 L1315 1209.34 L1314.42 1209.34 L1313.83 1209.34 L1313.24 1209.34 L1312.66 1209.34 L1312.07 1209.34 L1311.48 1209.34 L1310.9 1209.34 L1310.31 1209.34 L1309.73 1209.34 L1309.14 1209.34 L1308.55 1209.34 L1307.97 1209.34 L1307.38 1209.34 L1306.79 1209.34 L1306.21 1209.34 L1305.62 1209.34 L1305.03 1209.34 L1304.45 1209.34 L1303.86 1209.34 L1303.27 1209.34 L1302.69 1209.34 L1302.1 1209.34 L1301.52 1209.34 L1300.93 1209.34 L1300.34 1209.34 L1299.76 1209.34 L1299.17 1209.34 L1298.58 1209.34 L1298 1209.34 L1297.41 1209.34 L1296.82 1209.34 L1296.24 1209.34 L1295.65 1209.34 L1295.06 1209.34 L1294.48 1209.34 L1293.89 1209.34 L1293.31 1209.34 L1292.72 1209.34 L1292.13 1209.34 L1291.55 1209.34 L1290.96 1209.34 L1290.37 1209.34 L1289.79 1209.34 L1289.2 1209.34 L1288.61 1209.34 L1288.03 1209.34 L1287.44 1209.34 L1286.86 1209.34 L1286.27 1209.34 L1285.68 1209.34 L1285.1 1209.34 L1284.51 1209.34 L1283.92 1209.34 L1283.34 1209.34 L1282.75 1209.34 L1282.16 1209.34 L1281.58 1209.34 L1280.99 1209.34 L1280.4 1209.34 L1279.82 1209.34 L1279.23 1209.34 L1278.65 1209.34 L1278.06 1209.34 L1277.47 1209.34 L1276.89 1209.34 L1276.3 1209.34 L1275.71 1209.34 L1275.13 1209.34 L1274.54 1209.34 L1273.95 1209.34 L1273.37 1209.34 L1272.78 1209.34 L1272.19 1209.34 L1271.61 1209.34 L1271.02 1209.34 L1270.44 1209.34 L1269.85 1209.34 L1269.26 1209.34 L1268.68 1209.34 L1268.09 1209.34 L1267.5 1209.34 L1266.92 1209.34 L1266.33 1209.34 L1265.74 1209.34 L1265.16 1209.34 L1264.57 1209.34 L1263.98 1209.34 L1263.4 1209.34 L1262.81 1209.34 L1262.23 1209.34 L1261.64 1209.34 L1261.05 1209.34 L1260.47 1209.34 L1259.88 1209.34 L1259.29 1209.34 L1258.71 1209.34 L1258.12 1209.34 L1257.53 1209.34 L1256.95 1209.34 L1256.36 1209.34 L1255.78 1209.34 L1255.19 1209.34 L1254.6 1209.34 L1254.02 1209.34 L1253.43 1209.34 L1252.84 1209.34 L1252.26 1209.34 L1251.67 1209.34 L1251.08 1209.34 L1250.5 1209.34 L1249.91 1209.34 L1249.32 1209.34 L1248.74 1209.34 L1248.15 1209.34 L1247.57 1209.34 L1246.98 1209.34 L1246.39 1209.34 L1245.81 1209.34 L1245.22 1209.34 L1244.63 1209.34 L1244.05 1209.34 L1243.46 1209.34 L1242.87 1209.34 L1242.29 1209.34 L1241.7 1209.34 L1241.11 1209.34 L1240.53 1209.34 L1239.94 1209.34 L1239.36 1209.34 L1238.77 1209.34 L1238.18 1209.34 L1237.6 1209.34 L1237.01 1209.34 L1236.42 1209.34 L1235.84 1209.34 L1235.25 1209.34 L1234.66 1209.34 L1234.08 1209.34 L1233.49 1209.34 L1232.91 1209.34 L1232.32 1209.34 L1231.73 1209.34 L1231.15 1209.34 L1230.56 1209.34 L1229.97 1209.34 L1229.39 1209.34 L1228.8 1209.34 L1228.21 1209.34 L1227.63 1209.34 L1227.04 1209.34 L1226.45 1209.34 L1225.87 1209.34 L1225.28 1209.34 L1224.7 1209.34 L1224.11 1209.34 L1223.52 1209.34 L1222.94 1209.34 L1222.35 1209.34 L1221.76 1209.34 L1221.18 1209.34 L1220.59 1209.34 L1220 1209.34 L1219.42 1209.34 L1218.83 1209.34 L1218.24 1209.34 L1217.66 1209.34 L1217.07 1209.34 L1216.49 1209.34 L1215.9 1209.34 L1215.31 1209.34 L1214.73 1209.34 L1214.14 1209.34 L1213.55 1209.34 L1212.97 1209.34 L1212.38 1209.34 L1211.79 1209.34 L1211.21 1209.34 L1210.62 1209.34 L1210.03 1209.34 L1209.45 1209.34 L1208.86 1209.34 L1208.28 1209.34 L1207.69 1209.34 L1207.1 1209.34 L1206.52 1209.34 L1205.93 1209.34 L1205.34 1209.34 L1204.76 1209.34 L1204.17 1209.34 L1203.58 1209.34 L1203 1209.34 L1202.41 1209.34 L1201.83 1209.34 L1201.24 1209.34 L1200.65 1209.34 L1200.07 1209.34 L1199.48 1209.34 L1198.89 1209.34 L1198.31 1209.34 L1197.72 1209.34 L1197.13 1209.34 L1196.55 1209.34 L1195.96 1209.34 L1195.37 1209.34 L1194.79 1209.34 L1194.2 1209.34 L1193.62 1209.34 L1193.03 1209.34 L1192.44 1209.34 L1191.86 1209.34 L1191.27 1209.34 L1190.68 1209.34 L1190.1 1209.34 L1189.51 1209.34 L1188.92 1209.34 L1188.34 1209.34 L1187.75 1209.34 L1187.16 1209.34 L1186.58 1209.34 L1185.99 1209.34 L1185.41 1209.34 L1184.82 1209.34 L1184.23 1209.34 L1183.65 1209.34 L1183.06 1209.34 L1182.47 1209.34 L1181.89 1209.34 L1181.3 1209.34 L1180.71 1209.34 L1180.13 1209.34 L1179.54 1209.34 L1178.96 1209.34 L1178.37 1209.34 L1177.78 1209.34 L1177.2 1209.34 L1176.61 1209.34 L1176.02 1209.34 L1175.44 1209.34 L1174.85 1209.34 L1174.26 1209.34 L1173.68 1209.34 L1173.09 1209.34 L1172.5 1209.34 L1171.92 1209.34 L1171.33 1209.34 L1170.75 1209.34 L1170.16 1209.34 L1169.57 1209.34 L1168.99 1209.34 L1168.4 1209.34 L1167.81 1209.34 L1167.23 1209.34 L1166.64 1209.34 L1166.05 1209.34 L1165.47 1209.34 L1164.88 1209.34 L1164.29 1209.34 L1163.71 1209.34 L1163.12 1209.34 L1162.54 1209.34 L1161.95 1209.34 L1161.36 1209.34 L1160.78 1209.34 L1160.19 1209.34 L1159.6 1209.34 L1159.02 1209.34 L1158.43 1209.34 L1157.84 1209.34 L1157.26 1209.34 L1156.67 1209.34 L1156.09 1209.34 L1155.5 1209.34 L1154.91 1209.34 L1154.33 1209.34 L1153.74 1209.34 L1153.15 1209.34 L1152.57 1209.34 L1151.98 1209.34 L1151.39 1209.34 L1150.81 1209.34 L1150.22 1209.34 L1149.63 1209.34 L1149.05 1209.34 L1148.46 1209.34 L1147.88 1209.34 L1147.29 1209.34 L1146.7 1209.34 L1146.12 1209.34 L1145.53 1209.34 L1144.94 1209.34 L1144.36 1209.34 L1143.77 1209.34 L1143.18 1209.34 L1142.6 1209.34 L1142.01 1209.34 L1141.42 1209.34 L1140.84 1209.34 L1140.25 1209.34 L1139.67 1209.34 L1139.08 1209.34 L1138.49 1209.34 L1137.91 1209.34 L1137.32 1209.34 L1136.73 1209.34 L1136.15 1209.34 L1135.56 1209.34 L1134.97 1209.34 L1134.39 1209.34 L1133.8 1209.34 L1133.21 1209.34 L1132.63 1209.34 L1132.04 1209.34 L1131.46 1209.34 L1130.87 1209.34 L1130.28 1209.34 L1129.7 1209.34 L1129.11 1209.34 L1128.52 1209.34 L1127.94 1209.34 L1127.35 1209.34 L1126.76 1209.34 L1126.18 1209.34 L1125.59 1209.34 L1125.01 1209.34 L1124.42 1209.34 L1123.83 1209.34 L1123.25 1209.34 L1122.66 1209.34 L1122.07 1209.34 L1121.49 1209.34 L1120.9 1209.34 L1120.31 1209.34 L1119.73 1209.34 L1119.14 1209.34 L1118.55 1209.34 L1117.97 1209.34 L1117.38 1209.34 L1116.8 1209.34 L1116.21 1209.34 L1115.62 1209.34 L1115.04 1209.34 L1114.45 1209.34 L1113.86 1209.34 L1113.28 1209.34 L1112.69 1209.34 L1112.1 1209.34 L1111.52 1209.34 L1110.93 1209.34 L1110.34 1209.34 L1109.76 1209.34 L1109.17 1209.34 L1108.59 1209.34 L1108 1209.34 L1107.41 1209.34 L1106.83 1209.34 L1106.24 1209.34 L1105.65 1209.34 L1105.07 1209.34 L1104.48 1209.34 L1103.89 1209.34 L1103.31 1209.34 L1102.72 1209.34 L1102.14 1209.34 L1101.55 1209.34 L1100.96 1209.34 L1100.38 1209.34 L1099.79 1209.34 L1099.2 1209.34 L1098.62 1209.34 L1098.03 1209.34 L1097.44 1209.34 L1096.86 1209.34 L1096.27 1209.34 L1095.68 1209.34 L1095.1 1209.34 L1094.51 1209.34 L1093.93 1209.34 L1093.34 1209.34 L1092.75 1209.34 L1092.17 1209.34 L1091.58 1209.34 L1090.99 1209.34 L1090.41 1209.34 L1089.82 1209.34 L1089.23 1209.34 L1088.65 1209.34 L1088.06 1209.34 L1087.47 1209.34 L1086.89 1209.34 L1086.3 1209.34 L1085.72 1209.34 L1085.13 1209.34 L1084.54 1209.34 L1083.96 1209.34 L1083.37 1209.34 L1082.78 1209.34 L1082.2 1209.34 L1081.61 1209.34 L1081.02 1209.34 L1080.44 1209.34 L1079.85 1209.34 L1079.26 1209.34 L1078.68 1209.34 L1078.09 1209.34 L1077.51 1209.34 L1076.92 1209.34 L1076.33 1209.34 L1075.75 1209.34 L1075.16 1209.34 L1074.57 1209.34 L1073.99 1209.34 L1073.4 1209.34 L1072.81 1209.34 L1072.23 1209.34 L1071.64 1209.34 L1071.06 1209.34 L1070.47 1209.34 L1069.88 1209.34 L1069.3 1209.34 L1068.71 1209.34 L1068.12 1209.34 L1067.54 1209.34 L1066.95 1209.34 L1066.36 1209.34 L1065.78 1209.34 L1065.19 1209.34 L1064.6 1209.34 L1064.02 1209.34 L1063.43 1209.34 L1062.85 1209.34 L1062.26 1209.34 L1061.67 1209.34 L1061.09 1209.34 L1060.5 1209.34 L1059.91 1209.34 L1059.33 1209.34 L1058.74 1209.34 L1058.15 1209.34 L1057.57 1209.34 L1056.98 1209.34 L1056.39 1209.34 L1055.81 1209.34 L1055.22 1209.34 L1054.64 1209.34 L1054.05 1209.34 L1053.46 1209.34 L1052.88 1209.34 L1052.29 1209.34 L1051.7 1209.34 L1051.12 1209.34 L1050.53 1209.34 L1049.94 1209.34 L1049.36 1209.34 L1048.77 1209.34 L1048.19 1209.34 L1047.6 1209.34 L1047.01 1209.34 L1046.43 1209.34 L1045.84 1209.34 L1045.25 1209.34 L1044.67 1209.34 L1044.08 1209.34 L1043.49 1209.34 L1042.91 1209.34 L1042.32 1209.34 L1041.73 1209.34 L1041.15 1209.34 L1040.56 1209.34 L1039.98 1209.34 L1039.39 1209.34 L1038.8 1209.34 L1038.22 1209.34 L1037.63 1209.34 L1037.04 1209.34 L1036.46 1209.34 L1035.87 1209.34 L1035.28 1209.34 L1034.7 1209.34 L1034.11 1209.34 L1033.52 1209.34 L1032.94 1209.34 L1032.35 1209.34 L1031.77 1209.34 L1031.18 1209.34 L1030.59 1209.34 L1030.01 1209.34 L1029.42 1209.34 L1028.83 1209.34 L1028.25 1209.34 L1027.66 1209.34 L1027.07 1209.34 L1026.49 1209.34 L1025.9 1209.34 L1025.32 1209.34 L1024.73 1209.34 L1024.14 1209.34 L1023.56 1209.34 L1022.97 1209.34 L1022.38 1209.34 L1021.8 1209.34 L1021.21 1209.34 L1020.62 1209.34 L1020.04 1209.34 L1019.45 1209.34 L1018.86 1209.34 L1018.28 1209.34 L1017.69 1209.34 L1017.11 1209.34 L1016.52 1209.34 L1015.93 1209.34 L1015.35 1209.34 L1014.76 1209.34 L1014.17 1209.34 L1013.59 1209.34 L1013 1209.34 L1012.41 1209.34 L1011.83 1209.34 L1011.24 1209.34 L1010.65 1209.34 L1010.07 1209.34 L1009.48 1209.34 L1008.9 1209.34 L1008.31 1209.34 L1007.72 1209.34 L1007.14 1209.34 L1006.55 1209.34 L1005.96 1209.34 L1005.38 1209.34 L1004.79 1209.34 L1004.2 1209.34 L1003.62 1209.34 L1003.03 1209.34 L1002.44 1209.34 L1001.86 1209.34 L1001.27 1209.34 L1000.69 1209.34 L1000.1 1209.34 L999.513 1209.34 L998.926 1209.34 L998.34 1209.34 L997.754 1209.34 L997.167 1209.34 L996.581 1209.34 L995.994 1209.34 L995.408 1209.34 L994.822 1209.34 L994.235 1209.34 L993.649 1209.34 L993.062 1209.34 L992.476 1209.34 L991.889 1209.34 L991.303 1209.34 L990.717 1209.34 L990.13 1209.34 L989.544 1209.34 L988.957 1209.34 L988.371 1209.34 L987.785 1209.34 L987.198 1209.34 L986.612 1209.34 L986.025 1209.34  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.73 986.612,1209.73 987.198,1209.73 987.785,1209.73 988.371,1209.73 988.957,1209.73 989.544,1209.73 990.13,1209.73 990.717,1209.73 991.303,1209.73 991.889,1209.73 992.476,1209.73 993.062,1209.73 993.649,1209.73 994.235,1209.73 994.822,1209.73 995.408,1209.73 995.994,1209.73 996.581,1209.73 997.167,1209.73 997.754,1209.73 998.34,1209.73 998.926,1209.73 999.513,1209.73 1000.1,1209.73 1000.69,1209.73 1001.27,1209.73 1001.86,1209.73 1002.44,1209.73 1003.03,1209.73 1003.62,1209.73 1004.2,1209.73 1004.79,1209.73 1005.38,1209.73 1005.96,1209.73 1006.55,1209.73 1007.14,1209.73 1007.72,1209.73 1008.31,1209.73 1008.9,1209.73 1009.48,1209.73 1010.07,1209.73 1010.65,1209.73 1011.24,1209.73 1011.83,1209.73 1012.41,1209.73 1013,1209.73 1013.59,1209.73 1014.17,1209.73 1014.76,1209.73 1015.35,1209.73 1015.93,1209.73 1016.52,1209.73 1017.11,1209.73 1017.69,1209.73 1018.28,1209.73 1018.86,1209.73 1019.45,1209.73 1020.04,1209.73 1020.62,1209.73 1021.21,1209.73 1021.8,1209.73 1022.38,1209.73 1022.97,1209.73 1023.56,1209.73 1024.14,1209.73 1024.73,1209.73 1025.32,1209.73 1025.9,1209.73 1026.49,1209.73 1027.07,1209.73 1027.66,1209.73 1028.25,1209.73 1028.83,1209.73 1029.42,1209.73 1030.01,1209.73 1030.59,1209.73 1031.18,1209.73 1031.77,1209.73 1032.35,1209.73 1032.94,1209.73 1033.52,1209.73 1034.11,1209.73 1034.7,1209.73 1035.28,1209.73 1035.87,1209.73 1036.46,1209.73 1037.04,1209.73 1037.63,1209.73 1038.22,1209.73 1038.8,1209.73 1039.39,1209.73 1039.98,1209.73 1040.56,1209.73 1041.15,1209.73 1041.73,1209.73 1042.32,1209.73 1042.91,1209.73 1043.49,1209.73 1044.08,1209.73 1044.67,1209.73 1045.25,1209.73 1045.84,1209.73 1046.43,1209.73 1047.01,1209.73 1047.6,1209.73 1048.19,1209.73 1048.77,1209.73 1049.36,1209.73 1049.94,1209.73 1050.53,1209.73 1051.12,1209.73 1051.7,1209.73 1052.29,1209.73 1052.88,1209.73 1053.46,1209.73 1054.05,1209.73 1054.64,1209.73 1055.22,1209.73 1055.81,1209.73 1056.39,1209.73 1056.98,1209.73 1057.57,1209.73 1058.15,1209.73 1058.74,1209.73 1059.33,1209.73 1059.91,1209.73 1060.5,1209.73 1061.09,1209.73 1061.67,1209.73 1062.26,1209.73 1062.85,1209.73 1063.43,1209.73 1064.02,1209.73 1064.6,1209.73 1065.19,1209.73 1065.78,1209.73 1066.36,1209.73 1066.95,1209.73 1067.54,1209.73 1068.12,1209.73 1068.71,1209.73 1069.3,1209.73 1069.88,1209.73 1070.47,1209.73 1071.06,1209.73 1071.64,1209.73 1072.23,1209.73 1072.81,1209.73 1073.4,1209.73 1073.99,1209.73 1074.57,1209.73 1075.16,1209.73 1075.75,1209.73 1076.33,1209.73 1076.92,1209.73 1077.51,1209.73 1078.09,1209.73 1078.68,1209.73 1079.26,1209.73 1079.85,1209.73 1080.44,1209.73 1081.02,1209.73 1081.61,1209.73 1082.2,1209.73 1082.78,1209.73 1083.37,1209.73 1083.96,1209.73 1084.54,1209.73 1085.13,1209.73 1085.72,1209.73 1086.3,1209.73 1086.89,1209.73 1087.47,1209.73 1088.06,1209.73 1088.65,1209.73 1089.23,1209.73 1089.82,1209.73 1090.41,1209.73 1090.99,1209.73 1091.58,1209.73 1092.17,1209.73 1092.75,1209.73 1093.34,1209.73 1093.93,1209.73 1094.51,1209.73 1095.1,1209.73 1095.68,1209.73 1096.27,1209.73 1096.86,1209.73 1097.44,1209.73 1098.03,1209.73 1098.62,1209.73 1099.2,1209.73 1099.79,1209.73 1100.38,1209.73 1100.96,1209.73 1101.55,1209.73 1102.14,1209.73 1102.72,1209.73 1103.31,1209.73 1103.89,1209.73 1104.48,1209.73 1105.07,1209.73 1105.65,1209.73 1106.24,1209.73 1106.83,1209.73 1107.41,1209.73 1108,1209.73 1108.59,1209.73 1109.17,1209.73 1109.76,1209.73 1110.34,1209.73 1110.93,1209.73 1111.52,1209.73 1112.1,1209.73 1112.69,1209.73 1113.28,1209.73 1113.86,1209.73 1114.45,1209.73 1115.04,1209.73 1115.62,1209.73 1116.21,1209.73 1116.8,1209.73 1117.38,1209.73 1117.97,1209.73 1118.55,1209.73 1119.14,1209.73 1119.73,1209.73 1120.31,1209.73 1120.9,1209.73 1121.49,1209.73 1122.07,1209.73 1122.66,1209.73 1123.25,1209.73 1123.83,1209.73 1124.42,1209.73 1125.01,1209.73 1125.59,1209.73 1126.18,1209.73 1126.76,1209.73 1127.35,1209.73 1127.94,1209.73 1128.52,1209.73 1129.11,1209.73 1129.7,1209.73 1130.28,1209.73 1130.87,1209.73 1131.46,1209.73 1132.04,1209.73 1132.63,1209.73 1133.21,1209.73 1133.8,1209.73 1134.39,1209.73 1134.97,1209.73 1135.56,1209.73 1136.15,1209.73 1136.73,1209.73 1137.32,1209.73 1137.91,1209.73 1138.49,1209.73 1139.08,1209.73 1139.67,1209.73 1140.25,1209.73 1140.84,1209.73 1141.42,1209.73 1142.01,1209.73 1142.6,1209.73 1143.18,1209.73 1143.77,1209.73 1144.36,1209.73 1144.94,1209.73 1145.53,1209.73 1146.12,1209.73 1146.7,1209.73 1147.29,1209.73 1147.88,1209.73 1148.46,1209.73 1149.05,1209.73 1149.63,1209.73 1150.22,1209.73 1150.81,1209.73 1151.39,1209.73 1151.98,1209.73 1152.57,1209.73 1153.15,1209.73 1153.74,1209.73 1154.33,1209.73 1154.91,1209.73 1155.5,1209.73 1156.09,1209.73 1156.67,1209.73 1157.26,1209.73 1157.84,1209.73 1158.43,1209.73 1159.02,1209.73 1159.6,1209.73 1160.19,1209.73 1160.78,1209.73 1161.36,1209.73 1161.95,1209.73 1162.54,1209.73 1163.12,1209.73 1163.71,1209.73 1164.29,1209.73 1164.88,1209.73 1165.47,1209.73 1166.05,1209.73 1166.64,1209.73 1167.23,1209.73 1167.81,1209.73 1168.4,1209.73 1168.99,1209.73 1169.57,1209.73 1170.16,1209.73 1170.75,1209.73 1171.33,1209.73 1171.92,1209.73 1172.5,1209.73 1173.09,1209.73 1173.68,1209.73 1174.26,1209.73 1174.85,1209.73 1175.44,1209.73 1176.02,1209.73 1176.61,1209.73 1177.2,1209.73 1177.78,1209.73 1178.37,1209.73 1178.96,1209.73 1179.54,1209.73 1180.13,1209.73 1180.71,1209.73 1181.3,1209.73 1181.89,1209.73 1182.47,1209.73 1183.06,1209.73 1183.65,1209.73 1184.23,1209.73 1184.82,1209.73 1185.41,1209.73 1185.99,1209.73 1186.58,1209.73 1187.16,1209.73 1187.75,1209.73 1188.34,1209.73 1188.92,1209.73 1189.51,1209.73 1190.1,1209.73 1190.68,1209.73 1191.27,1209.73 1191.86,1209.73 1192.44,1209.73 1193.03,1209.73 1193.62,1209.73 1194.2,1209.73 1194.79,1209.73 1195.37,1209.73 1195.96,1209.73 1196.55,1209.73 1197.13,1209.73 1197.72,1209.73 1198.31,1209.73 1198.89,1209.73 1199.48,1209.73 1200.07,1209.73 1200.65,1209.73 1201.24,1209.73 1201.83,1209.73 1202.41,1209.73 1203,1209.73 1203.58,1209.73 1204.17,1209.73 1204.76,1209.73 1205.34,1209.73 1205.93,1209.73 1206.52,1209.73 1207.1,1209.73 1207.69,1209.73 1208.28,1209.73 1208.86,1209.73 1209.45,1209.73 1210.03,1209.73 1210.62,1209.73 1211.21,1209.73 1211.79,1209.73 1212.38,1209.73 1212.97,1209.73 1213.55,1209.73 1214.14,1209.73 1214.73,1209.73 1215.31,1209.73 1215.9,1209.73 1216.49,1209.73 1217.07,1209.73 1217.66,1209.73 1218.24,1209.73 1218.83,1209.73 1219.42,1209.73 1220,1209.73 1220.59,1209.73 1221.18,1209.73 1221.76,1209.73 1222.35,1209.73 1222.94,1209.73 1223.52,1209.73 1224.11,1209.73 1224.7,1209.73 1225.28,1209.73 1225.87,1209.73 1226.45,1209.73 1227.04,1209.73 1227.63,1209.73 1228.21,1209.73 1228.8,1209.73 1229.39,1209.73 1229.97,1209.73 1230.56,1209.73 1231.15,1209.73 1231.73,1209.73 1232.32,1209.73 1232.91,1209.73 1233.49,1209.73 1234.08,1209.73 1234.66,1209.73 1235.25,1209.73 1235.84,1209.73 1236.42,1209.73 1237.01,1209.73 1237.6,1209.73 1238.18,1209.73 1238.77,1209.73 1239.36,1209.73 1239.94,1209.73 1240.53,1209.73 1241.11,1209.73 1241.7,1209.73 1242.29,1209.73 1242.87,1209.73 1243.46,1209.73 1244.05,1209.73 1244.63,1209.73 1245.22,1209.73 1245.81,1209.73 1246.39,1209.73 1246.98,1209.73 1247.57,1209.73 1248.15,1209.73 1248.74,1209.73 1249.32,1209.73 1249.91,1209.73 1250.5,1209.73 1251.08,1209.73 1251.67,1209.73 1252.26,1209.73 1252.84,1209.73 1253.43,1209.73 1254.02,1209.73 1254.6,1209.73 1255.19,1209.73 1255.78,1209.73 1256.36,1209.73 1256.95,1209.73 1257.53,1209.73 1258.12,1209.73 1258.71,1209.73 1259.29,1209.73 1259.88,1209.73 1260.47,1209.73 1261.05,1209.73 1261.64,1209.73 1262.23,1209.73 1262.81,1209.73 1263.4,1209.73 1263.98,1209.73 1264.57,1209.73 1265.16,1209.73 1265.74,1209.73 1266.33,1209.73 1266.92,1209.73 1267.5,1209.73 1268.09,1209.73 1268.68,1209.73 1269.26,1209.73 1269.85,1209.73 1270.44,1209.73 1271.02,1209.73 1271.61,1209.73 1272.19,1209.73 1272.78,1209.73 1273.37,1209.73 1273.95,1209.73 1274.54,1209.73 1275.13,1209.73 1275.71,1209.73 1276.3,1209.73 1276.89,1209.73 1277.47,1209.73 1278.06,1209.73 1278.65,1209.73 1279.23,1209.73 1279.82,1209.73 1280.4,1209.73 1280.99,1209.73 1281.58,1209.73 1282.16,1209.73 1282.75,1209.73 1283.34,1209.73 1283.92,1209.73 1284.51,1209.73 1285.1,1209.73 1285.68,1209.73 1286.27,1209.73 1286.86,1209.73 1287.44,1209.73 1288.03,1209.73 1288.61,1209.73 1289.2,1209.73 1289.79,1209.73 1290.37,1209.73 1290.96,1209.73 1291.55,1209.73 1292.13,1209.73 1292.72,1209.73 1293.31,1209.73 1293.89,1209.73 1294.48,1209.73 1295.06,1209.73 1295.65,1209.73 1296.24,1209.73 1296.82,1209.73 1297.41,1209.73 1298,1209.73 1298.58,1209.73 1299.17,1209.73 1299.76,1209.73 1300.34,1209.73 1300.93,1209.73 1301.52,1209.73 1302.1,1209.73 1302.69,1209.73 1303.27,1209.73 1303.86,1209.73 1304.45,1209.73 1305.03,1209.73 1305.62,1209.73 1306.21,1209.73 1306.79,1209.73 1307.38,1209.73 1307.97,1209.73 1308.55,1209.73 1309.14,1209.73 1309.73,1209.73 1310.31,1209.73 1310.9,1209.73 1311.48,1209.73 1312.07,1209.73 1312.66,1209.73 1313.24,1209.73 1313.83,1209.73 1314.42,1209.73 1315,1209.73 1315.59,1209.73 1316.18,1209.73 1316.76,1209.73 1317.35,1209.73 1317.93,1209.73 1318.52,1209.73 1319.11,1209.73 1319.69,1209.73 1320.28,1209.73 1320.87,1209.73 1321.45,1209.73 1322.04,1209.73 1322.63,1209.73 1323.21,1209.73 1323.8,1209.73 1324.39,1209.73 1324.97,1209.73 1325.56,1209.73 1326.14,1209.73 1326.73,1209.73 1327.32,1209.73 1327.9,1209.73 1328.49,1209.73 1329.08,1209.73 1329.66,1209.73 1330.25,1209.73 1330.84,1209.73 1331.42,1209.73 1332.01,1209.73 1332.6,1209.73 1333.18,1209.73 1333.77,1209.73 1334.35,1209.73 1334.94,1209.73 1335.53,1209.73 1336.11,1209.73 1336.7,1209.73 1337.29,1209.73 1337.87,1209.73 1338.46,1209.73 1339.05,1209.73 1339.63,1209.73 1340.22,1209.73 1340.8,1209.73 1341.39,1209.73 1341.98,1209.73 1342.56,1209.73 1343.15,1209.73 1343.74,1209.73 1344.32,1209.73 1344.91,1209.73 1345.5,1209.73 1346.08,1209.73 1346.67,1209.73 1347.26,1209.73 1347.84,1209.73 1348.43,1209.73 1349.01,1209.73 1349.6,1209.73 1350.19,1209.73 1350.77,1209.73 1351.36,1209.73 1351.95,1209.73 1352.53,1209.73 1353.12,1209.73 1353.71,1209.73 1354.29,1209.73 1354.88,1209.73 1355.47,1209.73 1356.05,1209.73 1356.64,1209.73 1357.22,1209.73 1357.81,1209.73 1358.4,1209.73 1358.98,1209.73 1359.57,1209.73 1360.16,1209.73 1360.74,1209.73 1361.33,1209.73 1361.92,1209.73 1362.5,1209.73 1363.09,1209.73 1363.68,1209.73 1364.26,1209.73 1364.85,1209.73 1365.43,1209.73 1366.02,1209.73 1366.61,1209.73 1367.19,1209.73 1367.78,1209.73 1368.37,1209.73 1368.95,1209.73 1369.54,1209.73 1370.13,1209.73 1370.71,1209.73 1371.3,1209.73 1371.88,1209.73 1372.47,1209.73 1373.06,1209.73 1373.64,1209.73 1374.23,1209.73 1374.82,1209.73 1375.4,1209.73 1375.99,1209.73 1376.58,1209.73 1377.16,1209.73 1377.75,1209.73 1378.34,1209.73 1378.92,1209.73 1379.51,1209.73 1380.09,1209.73 1380.68,1209.73 1381.27,1209.73 1381.85,1209.73 1382.44,1209.73 1383.03,1209.73 1383.61,1209.73 1384.2,1209.73 1384.79,1209.73 1385.37,1209.73 1385.96,1209.73 1386.55,1209.73 1387.13,1209.73 1387.72,1209.73 1388.3,1209.73 1388.89,1209.73 1389.48,1209.73 1390.06,1209.73 1390.65,1209.73 1391.24,1209.73 1391.82,1209.73 1392.41,1209.73 1393,1209.73 1393.58,1209.73 1394.17,1209.73 1394.75,1209.73 1395.34,1209.73 1395.93,1209.73 1396.51,1209.73 1397.1,1209.73 1397.69,1209.73 1398.27,1209.73 1398.86,1209.73 1399.45,1209.73 1400.03,1209.73 1400.62,1209.73 1401.21,1209.73 1401.79,1209.73 1402.38,1209.73 1402.96,1209.73 1403.55,1209.73 1404.14,1209.73 1404.72,1209.73 1405.31,1209.73 1405.9,1209.73 1406.48,1209.73 1407.07,1209.73 1407.66,1209.73 1408.24,1209.73 1408.83,1209.73 1409.42,1209.73 1410,1209.73 1410.59,1209.73 1411.17,1209.73 1411.76,1209.73 1412.35,1209.73 1412.93,1209.73 1413.52,1209.73 1414.11,1209.73 1414.69,1209.73 1415.28,1209.73 1415.87,1209.73 1416.45,1209.73 1417.04,1209.73 1417.63,1209.73 1418.21,1209.73 1418.8,1209.73 1419.38,1209.73 1419.97,1209.73 1420.56,1209.73 1421.14,1209.73 1421.73,1209.73 1422.32,1209.73 1422.9,1209.73 1423.49,1209.73 1424.08,1209.73 1424.66,1209.73 1425.25,1209.73 1425.83,1209.73 1426.42,1209.73 1427.01,1209.73 1427.59,1209.73 1428.18,1209.73 1428.77,1209.73 1429.35,1209.73 1429.94,1209.73 1430.53,1209.73 1431.11,1209.73 1431.7,1209.73 1432.29,1209.73 1432.87,1209.73 1433.46,1209.73 1434.04,1209.73 1434.63,1209.73 1435.22,1209.73 1435.8,1209.73 1436.39,1209.73 1436.98,1209.73 1437.56,1209.73 1438.15,1209.73 1438.74,1209.73 1439.32,1209.73 1439.91,1209.73 1440.5,1209.73 1441.08,1209.73 1441.67,1209.73 1442.25,1209.73 1442.84,1209.73 1443.43,1209.73 1444.01,1209.73 1444.6,1209.73 1445.19,1209.73 1445.77,1209.73 1446.36,1209.73 1446.95,1209.73 1447.53,1209.73 1448.12,1209.73 1448.7,1209.73 1449.29,1209.73 1449.88,1209.73 1450.46,1209.73 1451.05,1209.73 1451.64,1209.73 1452.22,1209.73 1452.81,1209.73 1453.4,1209.73 1453.98,1209.73 1454.57,1209.73 1455.16,1209.73 1455.74,1209.73 1456.33,1209.73 1456.91,1209.73 1457.5,1209.73 1458.09,1209.73 1458.67,1209.73 1459.26,1209.73 1459.85,1209.73 1460.43,1209.73 1461.02,1209.73 1461.61,1209.73 1462.19,1209.73 1462.78,1209.73 1463.37,1209.73 1463.95,1209.73 1464.54,1209.73 1465.12,1209.73 1465.71,1209.73 1466.3,1209.73 1466.88,1209.73 1467.47,1209.73 1468.06,1209.73 1468.64,1209.73 1469.23,1209.73 1469.82,1209.73 1470.4,1209.73 1470.99,1209.73 1471.57,1209.73 1472.16,1209.73 1472.75,1209.73 1473.33,1209.73 1473.92,1209.73 1474.51,1209.73 1475.09,1209.73 1475.68,1209.73 1476.27,1209.73 1476.85,1209.73 1477.44,1209.73 1478.03,1209.73 1478.61,1209.73 1479.2,1209.73 1479.78,1209.73 1480.37,1209.73 1480.96,1209.73 1481.54,1209.73 1482.13,1209.73 1482.72,1209.73 1483.3,1209.73 1483.89,1209.73 1484.48,1209.73 1485.06,1209.73 1485.65,1209.73 1486.24,1209.73 1486.82,1209.73 1487.41,1209.73 1487.99,1209.73 1488.58,1209.73 1489.17,1209.73 1489.75,1209.73 1490.34,1209.73 1490.93,1209.73 1491.51,1209.73 1492.1,1209.73 1492.69,1209.73 1493.27,1209.73 1493.86,1209.73 1494.45,1209.73 1495.03,1209.73 1495.62,1209.73 1496.2,1209.73 1496.79,1209.73 1497.38,1209.73 1497.96,1209.73 1498.55,1209.73 1499.14,1209.73 1499.72,1209.73 1500.31,1209.73 1500.9,1209.73 1501.48,1209.73 1502.07,1209.73 1502.65,1209.73 1503.24,1209.73 1503.83,1209.73 1504.41,1209.73 1505,1209.73 1505.59,1209.73 1506.17,1209.73 1506.76,1209.73 1507.35,1209.73 1507.93,1209.73 1508.52,1209.73 1509.11,1209.73 1509.69,1209.73 1510.28,1209.73 1510.86,1209.73 1511.45,1209.73 1512.04,1209.73 1512.62,1209.73 1513.21,1209.73 1513.8,1209.73 1514.38,1209.73 1514.97,1209.73 1515.56,1209.73 1516.14,1209.73 1516.73,1209.73 1517.32,1209.73 1517.9,1209.73 1518.49,1209.73 1519.07,1209.73 1519.66,1209.73 1520.25,1209.73 1520.83,1209.73 1521.42,1209.73 1522.01,1209.73 1522.59,1209.73 1523.18,1209.73 1523.77,1209.73 1524.35,1209.73 1524.94,1209.73 1525.52,1209.73 1526.11,1209.73 1526.7,1209.73 1527.28,1209.73 1527.87,1209.73 1528.46,1209.73 1529.04,1209.73 1529.63,1209.73 1530.22,1209.73 1530.8,1209.73 1531.39,1209.73 1531.98,1209.73 1532.56,1209.73 1533.15,1209.73 1533.73,1209.73 1534.32,1209.73 1534.91,1209.73 1535.49,1209.73 1536.08,1209.73 1536.67,1209.73 1537.25,1209.73 1537.84,1209.73 1538.43,1209.73 1539.01,1209.73 1539.6,1209.73 1540.19,1209.73 1540.77,1209.73 1541.36,1209.73 1541.94,1209.73 1542.53,1209.73 1543.12,1209.73 1543.7,1209.73 1544.29,1209.73 1544.88,1209.73 1545.46,1209.73 1546.05,1209.73 1546.64,1209.73 1547.22,1209.73 1547.81,1209.73 1548.4,1209.73 1548.98,1209.73 1549.57,1209.73 1550.15,1209.73 1550.74,1209.73 1551.33,1209.73 1551.91,1209.73 1552.5,1209.73 1553.09,1209.73 1553.67,1209.73 1554.26,1209.73 1554.85,1209.73 1555.43,1209.73 1556.02,1209.73 1556.6,1209.73 1557.19,1209.73 1557.78,1209.73 1558.36,1209.73 1558.95,1209.73 1559.54,1209.73 1560.12,1209.73 1560.71,1209.73 1561.3,1209.73 1561.88,1209.73 1562.47,1209.73 1563.06,1209.73 1563.64,1209.73 1564.23,1209.73 1564.81,1209.73 1565.4,1209.73 1565.99,1209.73 1566.57,1209.73 1567.16,1209.73 1567.75,1209.73 1568.33,1209.73 1568.92,1209.73 1569.51,1209.73 1570.09,1209.73 1570.68,1209.73 1571.27,1209.73 1571.85,1209.73 1572.44,1209.73 1573.02,1209.73 1573.61,1209.73 1574.2,1209.73 1574.78,1209.73 1575.37,1209.73 1575.96,1209.73 1576.54,1209.73 1577.13,1209.73 1577.72,1209.73 1578.3,1209.73 1578.89,1209.73 1579.47,1209.73 1580.06,1209.73 1580.65,1209.73 1581.23,1209.73 1581.82,1209.73 1582.41,1209.73 1582.99,1209.73 1583.58,1209.73 1584.17,1209.73 1584.75,1209.73 1585.34,1209.73 1585.93,1209.73 1586.51,1209.73 1587.1,1209.73 1587.68,1209.73 1588.27,1209.73 1588.86,1209.73 1589.44,1209.73 1590.03,1209.73 1590.62,1209.73 1591.2,1209.73 1591.79,1209.73 1592.38,1209.73 1592.96,1209.73 1593.55,1209.73 1594.14,1209.73 1594.72,1209.73 1595.31,1209.73 1595.89,1209.73 1596.48,1209.73 1597.07,1209.73 1597.65,1209.73 1598.24,1209.73 1598.83,1209.73 1599.41,1209.73 1600,1209.73 1600.59,1209.73 1601.17,1209.73 1601.76,1209.73 1602.34,1209.73 1602.93,1209.73 1603.52,1209.73 1604.1,1209.73 1604.69,1209.73 1605.28,1209.73 1605.86,1209.73 1606.45,1209.73 1607.04,1209.73 1607.62,1209.73 1608.21,1209.73 1608.8,1209.73 1609.38,1209.73 1609.97,1209.73 1610.55,1209.73 1611.14,1209.73 1611.73,1209.73 1612.31,1209.73 1612.9,1209.73 1613.49,1209.73 1614.07,1209.73 1614.66,1209.73 1615.25,1209.73 1615.83,1209.73 1616.42,1209.73 1617.01,1209.73 1617.59,1209.73 1618.18,1209.73 1618.76,1209.73 1619.35,1209.73 1619.94,1209.73 1620.52,1209.73 1621.11,1209.73 1621.7,1209.73 1622.28,1209.73 1622.87,1209.73 1623.46,1209.73 1624.04,1209.73 1624.63,1209.73 1625.22,1209.73 1625.8,1209.73 1626.39,1209.73 1626.97,1209.73 1627.56,1209.73 1628.15,1209.73 1628.73,1209.73 1629.32,1209.73 1629.91,1209.73 1630.49,1209.73 1631.08,1209.73 1631.67,1209.73 1632.25,1209.73 1632.84,1209.73 1633.42,1209.73 1634.01,1209.73 1634.6,1209.73 1635.18,1209.73 1635.77,1209.73 1636.36,1209.73 1636.94,1209.73 1637.53,1209.73 1638.12,1209.73 1638.7,1209.73 1639.29,1209.73 1639.88,1209.73 1640.46,1209.73 1641.05,1209.73 1641.63,1209.73 1642.22,1209.73 1642.81,1209.73 1643.39,1209.73 1643.98,1209.73 1644.57,1209.73 1645.15,1209.73 1645.74,1209.73 1646.33,1209.73 1646.91,1209.73 1647.5,1209.73 1648.09,1209.73 1648.67,1209.73 1649.26,1209.73 1649.84,1209.73 1650.43,1209.73 1651.02,1209.73 1651.6,1209.73 1652.19,1209.73 1652.78,1209.73 1653.36,1209.73 1653.95,1209.73 1654.54,1209.73 1655.12,1209.73 1655.71,1209.73 1656.29,1209.73 1656.88,1209.73 1657.47,1209.73 1658.05,1209.73 1658.64,1209.73 1659.23,1209.73 1659.81,1209.73 1660.4,1209.73 1660.99,1209.73 1661.57,1209.73 1662.16,1209.73 1662.75,1209.73 1663.33,1209.73 1663.92,1209.73 1664.5,1209.73 1665.09,1209.73 1665.68,1209.73 1666.26,1209.73 1666.85,1209.73 1667.44,1209.73 1668.02,1209.73 1668.61,1209.73 1669.2,1209.73 1669.78,1209.73 1670.37,1209.73 1670.96,1209.73 1671.54,1209.73 1672.13,1209.73 1672.71,1209.73 1673.3,1209.73 1673.89,1209.73 1674.47,1209.73 1675.06,1209.73 1675.65,1209.73 1676.23,1209.73 1676.82,1209.73 1677.41,1209.73 1677.99,1209.73 1678.58,1209.73 1679.17,1209.73 1679.75,1209.73 1680.34,1209.73 1680.92,1209.73 1681.51,1209.73 1682.1,1209.73 1682.68,1209.73 1683.27,1209.73 1683.86,1209.73 1684.44,1209.73 1685.03,1209.73 1685.62,1209.73 1686.2,1209.73 1686.79,1209.73 1687.37,1209.73 1687.96,1209.73 1688.55,1209.73 1689.13,1209.73 1689.72,1209.73 1690.31,1209.73 1690.89,1209.73 1691.48,1209.73 1692.07,1209.73 1692.65,1209.73 1693.24,1209.73 1693.83,1209.73 1694.41,1209.73 1695,1209.73 1695.58,1209.73 1696.17,1209.73 1696.76,1209.73 1697.34,1209.73 1697.93,1209.73 1698.52,1209.73 1699.1,1209.73 1699.69,1209.73 1700.28,1209.73 1700.86,1209.73 1701.45,1209.73 1702.04,1209.73 1702.62,1209.73 1703.21,1209.73 1703.79,1209.73 1704.38,1209.73 1704.97,1209.73 1705.55,1209.73 1706.14,1209.73 1706.73,1209.73 1707.31,1209.73 1707.9,1209.73 1708.49,1209.73 1709.07,1209.73 1709.66,1209.73 1710.24,1209.73 1710.83,1209.73 1711.42,1209.73 1712,1209.73 1712.59,1209.73 1713.18,1209.73 1713.76,1209.73 1714.35,1209.73 1714.94,1209.73 1715.52,1209.73 1716.11,1209.73 1716.7,1209.73 1717.28,1209.73 1717.87,1209.73 1718.45,1209.73 1719.04,1209.73 1719.63,1209.73 1720.21,1209.73 1720.8,1209.73 1721.39,1209.73 1721.97,1209.73 1722.56,1209.73 1723.15,1209.73 1723.73,1209.73 1724.32,1209.73 1724.91,1209.73 1725.49,1209.73 1726.08,1209.73 1726.66,1209.73 1727.25,1209.73 1727.84,1209.73 1728.42,1209.73 1729.01,1209.73 1729.6,1209.73 1730.18,1209.73 1730.77,1209.73 1731.36,1209.73 1731.94,1209.73 1732.53,1209.73 1733.11,1209.73 1733.7,1209.73 1734.29,1209.73 1734.87,1209.73 1735.46,1209.73 1736.05,1209.73 1736.63,1209.73 1737.22,1209.73 1737.81,1209.73 1738.39,1209.73 1738.98,1209.73 1739.57,1209.73 1740.15,1209.73 1740.74,1209.73 1741.32,1209.73 1741.91,1209.73 1742.5,1209.73 1743.08,1209.73 1743.67,1209.73 1744.26,1209.73 1744.84,1209.73 1745.43,1209.73 1746.02,1209.73 1746.6,1209.73 1747.19,1209.73 1747.78,1209.73 1748.36,1209.73 1748.95,1209.73 1749.53,1209.73 1750.12,1209.73 1750.71,1209.73 1751.29,1209.73 1751.88,1209.73 1752.47,1209.73 1753.05,1209.73 1753.64,1209.73 1754.23,1209.73 1754.81,1209.73 1755.4,1209.73 1755.99,1209.73 1756.57,1209.73 1757.16,1209.73 1757.74,1209.73 1758.33,1209.73 1758.92,1209.73 1759.5,1209.73 1760.09,1209.73 1760.68,1209.73 1761.26,1209.73 1761.85,1209.73 1762.44,1209.73 1763.02,1209.73 1763.61,1209.73 1764.19,1209.73 1764.78,1209.73 1765.37,1209.73 1765.95,1209.73 1766.54,1209.73 1767.13,1209.73 1767.71,1209.73 1768.3,1209.73 1768.89,1209.73 1769.47,1209.73 1770.06,1209.73 1770.65,1209.73 1771.23,1209.73 1771.82,1209.73 1772.4,1209.73 1772.99,1209.73 1773.58,1209.73 1774.16,1209.73 1774.75,1209.73 1775.34,1209.73 1775.92,1209.73 1776.51,1209.73 1777.1,1209.73 1777.68,1209.73 1778.27,1209.73 1778.86,1209.73 1779.44,1209.73 1780.03,1209.73 1780.61,1209.73 1781.2,1209.73 1781.79,1209.73 1782.37,1209.73 1782.96,1209.73 1783.55,1209.73 1784.13,1209.73 1784.72,1209.73 1785.31,1209.73 1785.89,1209.73 1786.48,1209.73 1787.06,1209.73 1787.65,1209.73 1788.24,1209.73 1788.82,1209.73 1789.41,1209.73 1790,1209.73 1790.58,1209.73 1791.17,1209.73 1791.76,1209.73 1792.34,1209.73 1792.93,1209.73 1793.52,1209.73 1794.1,1209.73 1794.69,1209.73 1795.27,1209.73 1795.86,1209.73 1796.45,1209.73 1797.03,1209.73 1797.62,1209.73 1798.21,1209.73 1798.79,1209.73 1799.38,1209.73 1799.97,1209.73 1800.55,1209.73 1801.14,1209.73 1801.73,1209.73 1802.31,1209.73 1802.9,1209.73 1803.48,1209.73 1804.07,1209.73 1804.66,1209.73 1805.24,1209.73 1805.83,1209.73 1806.42,1209.73 1807,1209.73 1807.59,1209.73 1808.18,1209.73 1808.76,1209.73 1809.35,1209.73 1809.94,1209.73 1810.52,1209.73 1811.11,1209.73 1811.69,1209.73 1812.28,1209.73 1812.87,1209.73 1813.45,1209.73 1814.04,1209.73 1814.63,1209.73 1815.21,1209.73 1815.8,1209.73 1816.39,1209.73 1816.97,1209.73 1817.56,1209.73 1818.14,1209.73 1818.73,1209.73 1819.32,1209.73 1819.9,1209.73 1820.49,1209.73 1821.08,1209.73 1821.66,1209.73 1822.25,1209.73 1822.84,1209.73 1823.42,1209.73 1824.01,1209.73 1824.6,1209.73 1825.18,1209.73 1825.77,1209.73 1826.35,1209.73 1826.94,1209.73 1827.53,1209.73 1828.11,1209.73 1828.7,1209.73 1829.29,1209.73 1829.87,1209.73 1830.46,1209.73 1831.05,1209.73 1831.63,1209.73 1832.22,1209.73 1832.81,1209.73 1833.39,1209.73 1833.98,1209.73 1834.56,1209.73 1835.15,1209.73 1835.74,1209.73 1836.32,1209.73 1836.91,1209.73 1837.5,1209.73 1838.08,1209.73 1838.67,1209.73 1839.26,1209.73 1839.84,1209.73 1840.43,1209.73 1841.01,1209.73 1841.6,1209.73 1842.19,1209.73 1842.77,1209.73 1843.36,1209.73 1843.95,1209.73 1844.53,1209.73 1845.12,1209.73 1845.71,1209.73 1846.29,1209.73 1846.88,1209.73 1847.47,1209.73 1848.05,1209.73 1848.64,1209.73 1849.22,1209.73 1849.81,1209.73 1850.4,1209.73 1850.98,1209.73 1851.57,1209.73 1852.16,1209.73 1852.74,1209.73 1853.33,1209.73 1853.92,1209.73 1854.5,1209.73 1855.09,1209.73 1855.68,1209.73 1856.26,1209.73 1856.85,1209.73 1857.43,1209.73 1858.02,1209.73 1858.61,1209.73 1859.19,1209.73 1859.78,1209.73 1860.37,1209.73 1860.95,1209.73 1861.54,1209.73 1862.13,1209.73 1862.71,1209.73 1863.3,1209.73 1863.88,1209.73 1864.47,1209.73 1865.06,1209.73 1865.64,1209.73 1866.23,1209.73 1866.82,1209.73 1867.4,1209.73 1867.99,1209.73 1868.58,1209.73 1869.16,1209.73 1869.75,1209.73 1870.34,1209.73 1870.92,1209.73 1871.51,1209.73 1872.09,1209.73 1872.68,1209.73 1873.27,1209.73 1873.85,1209.73 1874.44,1209.73 1875.03,1209.73 1875.61,1209.73 1876.2,1209.73 1876.79,1209.73 1877.37,1209.73 1877.96,1209.73 1878.55,1209.73 1879.13,1209.73 1879.72,1209.73 1880.3,1209.73 1880.89,1209.73 1881.48,1209.73 1882.06,1209.73 1882.65,1209.73 1883.24,1209.73 1883.82,1209.73 1884.41,1209.73 1885,1209.73 1885.58,1209.73 1886.17,1209.73 1886.76,1209.73 1887.34,1209.73 1887.93,1209.73 1888.51,1209.73 1889.1,1209.73 1889.69,1209.73 1890.27,1209.73 1890.86,1209.73 1891.45,1209.73 1892.03,1209.73 1892.62,1209.73 1893.21,1209.73 1893.79,1209.73 1894.38,1209.73 1894.96,1209.73 1895.55,1209.73 1896.14,1209.73 1896.72,1209.73 1897.31,1209.73 1897.9,1209.73 1898.48,1209.73 1899.07,1209.73 1899.66,1209.73 1900.24,1209.73 1900.83,1209.73 1901.42,1209.73 1902,1209.73 1902.59,1209.73 1903.17,1209.73 1903.76,1209.73 1904.35,1209.73 1904.93,1209.73 1905.52,1209.73 1906.11,1209.73 1906.69,1209.73 1907.28,1209.73 1907.87,1209.73 1908.45,1209.73 1909.04,1209.73 1909.63,1209.73 1910.21,1209.73 1910.8,1209.73 1911.38,1209.73 1911.97,1209.73 1912.56,1209.73 1913.14,1209.73 1913.73,1209.73 1914.32,1209.73 1914.9,1209.73 1915.49,1209.73 1916.08,1209.73 1916.66,1209.73 1917.25,1209.73 1917.83,1209.73 1918.42,1209.73 1919.01,1209.73 1919.59,1209.73 1920.18,1209.73 1920.77,1209.73 1921.35,1209.73 1921.94,1209.73 1922.53,1209.73 1923.11,1209.73 1923.7,1209.73 1924.29,1209.73 1924.87,1209.73 1925.46,1209.73 1926.04,1209.73 1926.63,1209.73 1927.22,1209.73 1927.8,1209.73 1928.39,1209.73 1928.98,1209.73 1929.56,1209.73 1930.15,1209.73 1930.74,1209.73 1931.32,1209.73 1931.91,1209.73 1932.5,1209.73 1933.08,1209.73 1933.67,1209.73 1934.25,1209.73 1934.84,1209.73 1935.43,1209.73 1936.01,1209.73 1936.6,1209.73 1937.19,1209.73 1937.77,1209.73 1938.36,1209.73 1938.95,1209.73 1939.53,1209.73 1940.12,1209.73 1940.71,1209.73 1941.29,1209.73 1941.88,1209.73 1942.46,1209.73 1943.05,1209.73 1943.64,1209.73 1944.22,1209.73 1944.81,1209.73 1945.4,1209.73 1945.98,1209.73 1946.57,1209.73 1947.16,1209.73 1947.74,1209.73 1948.33,1209.73 1948.91,1209.73 1949.5,1209.73 1950.09,1209.73 1950.67,1209.73 1951.26,1209.73 1951.85,1209.73 1952.43,1209.73 1953.02,1209.73 1953.61,1209.73 1954.19,1209.73 1954.78,1209.73 1955.37,1209.73 1955.95,1209.73 1956.54,1209.73 1957.12,1209.73 1957.71,1209.73 1958.3,1209.73 1958.88,1209.73 1959.47,1209.73 1960.06,1209.73 1960.64,1209.73 1961.23,1209.73 1961.82,1209.73 1962.4,1209.73 1962.99,1209.73 1963.58,1209.73 1964.16,1209.73 1964.75,1209.73 1965.33,1209.73 1965.92,1209.73 1966.51,1209.73 1967.09,1209.73 1967.68,1209.73 1968.27,1209.73 1968.85,1209.73 1969.44,1209.73 1970.03,1209.73 1970.61,1209.73 1971.2,1209.73 1971.78,1209.73 1972.37,1209.73 1972.96,1209.73 1973.54,1209.73 1974.13,1209.73 1974.72,1209.73 1975.3,1209.73 1975.89,1209.73 1976.48,1209.73 1977.06,1209.73 1977.65,1209.73 1978.24,1209.73 1978.82,1209.73 1979.41,1209.73 1979.99,1209.73 1980.58,1209.73 1981.17,1209.73 1981.75,1209.73 1982.34,1209.73 1982.93,1209.73 1983.51,1209.73 1984.1,1209.73 1984.69,1209.73 1985.27,1209.73 1985.86,1209.73 1986.45,1209.73 1987.03,1209.73 1987.62,1209.73 1988.2,1209.73 1988.79,1209.73 1989.38,1209.73 1989.96,1209.73 1990.55,1209.73 1991.14,1209.73 1991.72,1209.73 1992.31,1209.73 1992.9,1209.73 1993.48,1209.73 1994.07,1209.73 1994.65,1209.73 1995.24,1209.73 1995.83,1209.73 1996.41,1209.73 1997,1209.73 1997.59,1209.73 1998.17,1209.73 1998.76,1209.73 1999.35,1209.73 1999.93,1209.73 2000.52,1209.73 2001.11,1209.73 2001.69,1209.73 2002.28,1209.73 2002.86,1209.73 2003.45,1209.73 2004.04,1209.73 2004.62,1209.73 2005.21,1209.73 2005.8,1209.73 2006.38,1209.73 2006.97,1209.73 2007.56,1209.73 2008.14,1209.73 2008.73,1209.73 2009.32,1209.73 2009.9,1209.73 2010.49,1209.73 2011.07,1209.73 2011.66,1209.73 2012.25,1209.73 2012.83,1209.73 2013.42,1209.73 2014.01,1209.73 2014.59,1209.73 2015.18,1209.73 2015.77,1209.73 2016.35,1209.73 2016.94,1209.73 2017.53,1209.73 2018.11,1209.73 2018.7,1209.73 2019.28,1209.73 2019.87,1209.73 2020.46,1209.73 2021.04,1209.73 2021.63,1209.73 2022.22,1209.73 2022.8,1209.73 2023.39,1209.73 2023.98,1209.73 2024.56,1209.73 2025.15,1209.73 2025.73,1209.73 2026.32,1209.73 2026.91,1209.73 2027.49,1209.73 2028.08,1209.73 2028.67,1209.73 2029.25,1209.73 2029.84,1209.73 2030.43,1209.73 2031.01,1209.73 2031.6,1209.73 2032.19,1209.73 2032.77,1209.73 2033.36,1209.73 2033.94,1209.73 2034.53,1209.73 2035.12,1209.73 2035.7,1209.73 2036.29,1209.73 2036.88,1209.73 2037.46,1209.73 2038.05,1209.73 2038.64,1209.73 2039.22,1209.73 2039.81,1209.73 2040.4,1209.73 2040.98,1209.73 2041.57,1209.73 2042.15,1209.73 2042.74,1209.73 2043.33,1209.73 2043.91,1209.73 2044.5,1209.73 2045.09,1209.73 2045.67,1209.73 2046.26,1209.73 2046.85,1209.73 2047.43,1209.73 2048.02,1209.73 2048.6,1209.73 2049.19,1209.73 2049.78,1209.73 2050.36,1209.73 2050.95,1209.73 2051.54,1209.73 2052.12,1209.73 2052.71,1209.73 2053.3,1209.73 2053.88,1209.73 2054.47,1209.73 2055.06,1209.73 2055.64,1209.73 2056.23,1209.73 2056.81,1209.73 2057.4,1209.73 2057.99,1209.73 2058.57,1209.73 2059.16,1209.73 2059.75,1209.73 2060.33,1209.73 2060.92,1209.73 2061.51,1209.73 2062.09,1209.73 2062.68,1209.73 2063.27,1209.73 2063.85,1209.73 2064.44,1209.73 2065.02,1209.73 2065.61,1209.73 2066.2,1209.73 2066.78,1209.73 2067.37,1209.73 2067.96,1209.73 2068.54,1209.73 2069.13,1209.73 2069.72,1209.73 2070.3,1209.73 2070.89,1209.73 2071.48,1209.73 2072.06,1209.73 2072.65,1209.73 2073.23,1209.73 2073.82,1209.73 2074.41,1209.73 2074.99,1209.73 2075.58,1209.73 2076.17,1209.73 2076.75,1209.73 2077.34,1209.73 2077.93,1209.73 2078.51,1209.73 2079.1,1209.73 2079.68,1209.73 2080.27,1209.73 2080.86,1209.73 2081.44,1209.73 2082.03,1209.73 2082.62,1209.73 2083.2,1209.73 2083.79,1209.73 2084.38,1209.73 2084.96,1209.73 2085.55,1209.73 2086.14,1209.73 2086.72,1209.73 2087.31,1209.73 2087.89,1209.73 2088.48,1209.73 2089.07,1209.73 2089.65,1209.73 2090.24,1209.73 2090.83,1209.73 2091.41,1209.73 2092,1209.73 2092.59,1209.73 2093.17,1209.73 2093.76,1209.73 2094.35,1209.73 2094.93,1209.73 2095.52,1209.73 2096.1,1209.73 2096.69,1209.73 2097.28,1209.73 2097.86,1209.73 2098.45,1209.73 2099.04,1209.73 2099.62,1209.73 2100.21,1209.73 2100.8,1209.73 2101.38,1209.73 2101.97,1209.73 2102.55,1209.73 2103.14,1209.73 2103.73,1209.73 2104.31,1209.73 2104.9,1209.73 2105.49,1209.73 2106.07,1209.73 2106.66,1209.73 2107.25,1209.73 2107.83,1209.73 2108.42,1209.73 2109.01,1209.73 2109.59,1209.73 2110.18,1209.73 2110.76,1209.73 2111.35,1209.73 2111.94,1209.73 2112.52,1209.73 2113.11,1209.73 2113.7,1209.73 2114.28,1209.73 2114.87,1209.73 2115.46,1209.73 2116.04,1209.73 2116.63,1209.73 2117.22,1209.73 2117.8,1209.73 2118.39,1209.73 2118.97,1209.73 2119.56,1209.73 2120.15,1209.73 2120.73,1209.73 2121.32,1209.73 2121.91,1209.73 2122.49,1209.73 2123.08,1209.73 2123.67,1209.73 2124.25,1209.73 2124.84,1209.73 2125.42,1209.73 2126.01,1209.73 2126.6,1209.73 2127.18,1209.73 2127.77,1209.73 2128.36,1209.73 2128.94,1209.73 2129.53,1209.73 2130.12,1209.73 2130.7,1209.73 2131.29,1209.73 2131.88,1209.73 2132.46,1209.73 2133.05,1209.73 2133.63,1209.73 2134.22,1209.73 2134.81,1209.73 2135.39,1209.73 2135.98,1209.73 2136.57,1209.73 2137.15,1209.73 2137.74,1209.73 2138.33,1209.73 2138.91,1209.73 2139.5,1209.73 2140.09,1209.73 2140.67,1209.73 2141.26,1209.73 2141.84,1209.73 2142.43,1209.73 2143.02,1209.73 2143.6,1209.73 2144.19,1209.73 2144.78,1209.73 2145.36,1209.73 2145.95,1209.73 2146.54,1209.73 2147.12,1209.73 2147.71,1209.73 2148.3,1209.73 2148.88,1209.73 2149.47,1209.73 2150.05,1209.73 2150.64,1209.73 2151.23,1209.73 2151.81,1209.73 2152.4,1209.73 2152.99,1209.73 2153.57,1209.73 2154.16,1209.73 2154.75,1209.73 2155.33,1209.73 2155.92,1209.73 2156.5,1209.73 2157.09,1209.73 2157.68,1209.73 2158.26,1209.73 \"/>\n<path clip-path=\"url(#clip392)\" d=\"M986.025 1209.45 L986.612 1209.45 L987.198 1209.45 L987.785 1209.45 L988.371 1209.45 L988.957 1209.45 L989.544 1209.45 L990.13 1209.45 L990.717 1209.45 L991.303 1209.45 L991.889 1209.45 L992.476 1209.45 L993.062 1209.45 L993.649 1209.45 L994.235 1209.45 L994.822 1209.45 L995.408 1209.45 L995.994 1209.45 L996.581 1209.45 L997.167 1209.45 L997.754 1209.45 L998.34 1209.45 L998.926 1209.45 L999.513 1209.45 L1000.1 1209.45 L1000.69 1209.45 L1001.27 1209.45 L1001.86 1209.45 L1002.44 1209.45 L1003.03 1209.45 L1003.62 1209.45 L1004.2 1209.45 L1004.79 1209.45 L1005.38 1209.45 L1005.96 1209.45 L1006.55 1209.45 L1007.14 1209.45 L1007.72 1209.45 L1008.31 1209.45 L1008.9 1209.45 L1009.48 1209.45 L1010.07 1209.45 L1010.65 1209.45 L1011.24 1209.45 L1011.83 1209.45 L1012.41 1209.45 L1013 1209.45 L1013.59 1209.45 L1014.17 1209.45 L1014.76 1209.45 L1015.35 1209.45 L1015.93 1209.45 L1016.52 1209.45 L1017.11 1209.45 L1017.69 1209.45 L1018.28 1209.45 L1018.86 1209.45 L1019.45 1209.45 L1020.04 1209.45 L1020.62 1209.45 L1021.21 1209.45 L1021.8 1209.45 L1022.38 1209.45 L1022.97 1209.45 L1023.56 1209.45 L1024.14 1209.45 L1024.73 1209.45 L1025.32 1209.45 L1025.9 1209.45 L1026.49 1209.45 L1027.07 1209.45 L1027.66 1209.45 L1028.25 1209.45 L1028.83 1209.45 L1029.42 1209.45 L1030.01 1209.45 L1030.59 1209.45 L1031.18 1209.45 L1031.77 1209.45 L1032.35 1209.45 L1032.94 1209.45 L1033.52 1209.45 L1034.11 1209.45 L1034.7 1209.45 L1035.28 1209.45 L1035.87 1209.45 L1036.46 1209.45 L1037.04 1209.45 L1037.63 1209.45 L1038.22 1209.45 L1038.8 1209.45 L1039.39 1209.45 L1039.98 1209.45 L1040.56 1209.45 L1041.15 1209.45 L1041.73 1209.45 L1042.32 1209.45 L1042.91 1209.45 L1043.49 1209.45 L1044.08 1209.45 L1044.67 1209.45 L1045.25 1209.45 L1045.84 1209.45 L1046.43 1209.45 L1047.01 1209.45 L1047.6 1209.45 L1048.19 1209.45 L1048.77 1209.45 L1049.36 1209.45 L1049.94 1209.45 L1050.53 1209.45 L1051.12 1209.45 L1051.7 1209.45 L1052.29 1209.45 L1052.88 1209.45 L1053.46 1209.45 L1054.05 1209.45 L1054.64 1209.45 L1055.22 1209.45 L1055.81 1209.45 L1056.39 1209.45 L1056.98 1209.45 L1057.57 1209.45 L1058.15 1209.45 L1058.74 1209.45 L1059.33 1209.45 L1059.91 1209.45 L1060.5 1209.45 L1061.09 1209.45 L1061.67 1209.45 L1062.26 1209.45 L1062.85 1209.45 L1063.43 1209.45 L1064.02 1209.45 L1064.6 1209.45 L1065.19 1209.45 L1065.78 1209.45 L1066.36 1209.45 L1066.95 1209.45 L1067.54 1209.45 L1068.12 1209.45 L1068.71 1209.45 L1069.3 1209.45 L1069.88 1209.45 L1070.47 1209.45 L1071.06 1209.45 L1071.64 1209.45 L1072.23 1209.45 L1072.81 1209.45 L1073.4 1209.45 L1073.99 1209.45 L1074.57 1209.45 L1075.16 1209.45 L1075.75 1209.45 L1076.33 1209.45 L1076.92 1209.45 L1077.51 1209.45 L1078.09 1209.45 L1078.68 1209.45 L1079.26 1209.45 L1079.85 1209.45 L1080.44 1209.45 L1081.02 1209.45 L1081.61 1209.45 L1082.2 1209.45 L1082.78 1209.45 L1083.37 1209.45 L1083.96 1209.45 L1084.54 1209.45 L1085.13 1209.45 L1085.72 1209.45 L1086.3 1209.45 L1086.89 1209.45 L1087.47 1209.45 L1088.06 1209.45 L1088.65 1209.45 L1089.23 1209.45 L1089.82 1209.45 L1090.41 1209.45 L1090.99 1209.45 L1091.58 1209.45 L1092.17 1209.45 L1092.75 1209.45 L1093.34 1209.45 L1093.93 1209.45 L1094.51 1209.45 L1095.1 1209.45 L1095.68 1209.45 L1096.27 1209.45 L1096.86 1209.45 L1097.44 1209.45 L1098.03 1209.45 L1098.62 1209.45 L1099.2 1209.45 L1099.79 1209.45 L1100.38 1209.45 L1100.96 1209.45 L1101.55 1209.45 L1102.14 1209.45 L1102.72 1209.45 L1103.31 1209.45 L1103.89 1209.45 L1104.48 1209.45 L1105.07 1209.45 L1105.65 1209.45 L1106.24 1209.45 L1106.83 1209.45 L1107.41 1209.45 L1108 1209.45 L1108.59 1209.45 L1109.17 1209.45 L1109.76 1209.45 L1110.34 1209.45 L1110.93 1209.45 L1111.52 1209.45 L1112.1 1209.45 L1112.69 1209.45 L1113.28 1209.45 L1113.86 1209.45 L1114.45 1209.45 L1115.04 1209.45 L1115.62 1209.45 L1116.21 1209.45 L1116.8 1209.45 L1117.38 1209.45 L1117.97 1209.45 L1118.55 1209.45 L1119.14 1209.45 L1119.73 1209.45 L1120.31 1209.45 L1120.9 1209.45 L1121.49 1209.45 L1122.07 1209.45 L1122.66 1209.45 L1123.25 1209.45 L1123.83 1209.45 L1124.42 1209.45 L1125.01 1209.45 L1125.59 1209.45 L1126.18 1209.45 L1126.76 1209.45 L1127.35 1209.45 L1127.94 1209.45 L1128.52 1209.45 L1129.11 1209.45 L1129.7 1209.45 L1130.28 1209.45 L1130.87 1209.45 L1131.46 1209.45 L1132.04 1209.45 L1132.63 1209.45 L1133.21 1209.45 L1133.8 1209.45 L1134.39 1209.45 L1134.97 1209.45 L1135.56 1209.45 L1136.15 1209.45 L1136.73 1209.45 L1137.32 1209.45 L1137.91 1209.45 L1138.49 1209.45 L1139.08 1209.45 L1139.67 1209.45 L1140.25 1209.45 L1140.84 1209.45 L1141.42 1209.45 L1142.01 1209.45 L1142.6 1209.45 L1143.18 1209.45 L1143.77 1209.45 L1144.36 1209.45 L1144.94 1209.45 L1145.53 1209.45 L1146.12 1209.45 L1146.7 1209.45 L1147.29 1209.45 L1147.88 1209.45 L1148.46 1209.45 L1149.05 1209.45 L1149.63 1209.45 L1150.22 1209.45 L1150.81 1209.45 L1151.39 1209.45 L1151.98 1209.45 L1152.57 1209.45 L1153.15 1209.45 L1153.74 1209.45 L1154.33 1209.45 L1154.91 1209.45 L1155.5 1209.45 L1156.09 1209.45 L1156.67 1209.45 L1157.26 1209.45 L1157.84 1209.45 L1158.43 1209.45 L1159.02 1209.45 L1159.6 1209.45 L1160.19 1209.45 L1160.78 1209.45 L1161.36 1209.45 L1161.95 1209.45 L1162.54 1209.45 L1163.12 1209.45 L1163.71 1209.45 L1164.29 1209.45 L1164.88 1209.45 L1165.47 1209.45 L1166.05 1209.45 L1166.64 1209.45 L1167.23 1209.45 L1167.81 1209.45 L1168.4 1209.45 L1168.99 1209.45 L1169.57 1209.45 L1170.16 1209.45 L1170.75 1209.45 L1171.33 1209.45 L1171.92 1209.45 L1172.5 1209.45 L1173.09 1209.45 L1173.68 1209.45 L1174.26 1209.45 L1174.85 1209.45 L1175.44 1209.45 L1176.02 1209.45 L1176.61 1209.45 L1177.2 1209.45 L1177.78 1209.45 L1178.37 1209.45 L1178.96 1209.45 L1179.54 1209.45 L1180.13 1209.45 L1180.71 1209.45 L1181.3 1209.45 L1181.89 1209.45 L1182.47 1209.45 L1183.06 1209.45 L1183.65 1209.45 L1184.23 1209.45 L1184.82 1209.45 L1185.41 1209.45 L1185.99 1209.45 L1186.58 1209.45 L1187.16 1209.45 L1187.75 1209.45 L1188.34 1209.45 L1188.92 1209.45 L1189.51 1209.45 L1190.1 1209.45 L1190.68 1209.45 L1191.27 1209.45 L1191.86 1209.45 L1192.44 1209.45 L1193.03 1209.45 L1193.62 1209.45 L1194.2 1209.45 L1194.79 1209.45 L1195.37 1209.45 L1195.96 1209.45 L1196.55 1209.45 L1197.13 1209.45 L1197.72 1209.45 L1198.31 1209.45 L1198.89 1209.45 L1199.48 1209.45 L1200.07 1209.45 L1200.65 1209.45 L1201.24 1209.45 L1201.83 1209.45 L1202.41 1209.45 L1203 1209.45 L1203.58 1209.45 L1204.17 1209.45 L1204.76 1209.45 L1205.34 1209.45 L1205.93 1209.45 L1206.52 1209.45 L1207.1 1209.45 L1207.69 1209.45 L1208.28 1209.45 L1208.86 1209.45 L1209.45 1209.45 L1210.03 1209.45 L1210.62 1209.45 L1211.21 1209.45 L1211.79 1209.45 L1212.38 1209.45 L1212.97 1209.45 L1213.55 1209.45 L1214.14 1209.45 L1214.73 1209.45 L1215.31 1209.45 L1215.9 1209.45 L1216.49 1209.45 L1217.07 1209.45 L1217.66 1209.45 L1218.24 1209.45 L1218.83 1209.45 L1219.42 1209.45 L1220 1209.45 L1220.59 1209.45 L1221.18 1209.45 L1221.76 1209.45 L1222.35 1209.45 L1222.94 1209.45 L1223.52 1209.45 L1224.11 1209.45 L1224.7 1209.45 L1225.28 1209.45 L1225.87 1209.45 L1226.45 1209.45 L1227.04 1209.45 L1227.63 1209.45 L1228.21 1209.45 L1228.8 1209.45 L1229.39 1209.45 L1229.97 1209.45 L1230.56 1209.45 L1231.15 1209.45 L1231.73 1209.45 L1232.32 1209.45 L1232.91 1209.45 L1233.49 1209.45 L1234.08 1209.45 L1234.66 1209.45 L1235.25 1209.45 L1235.84 1209.45 L1236.42 1209.45 L1237.01 1209.45 L1237.6 1209.45 L1238.18 1209.45 L1238.77 1209.45 L1239.36 1209.45 L1239.94 1209.45 L1240.53 1209.45 L1241.11 1209.45 L1241.7 1209.45 L1242.29 1209.45 L1242.87 1209.45 L1243.46 1209.45 L1244.05 1209.45 L1244.63 1209.45 L1245.22 1209.45 L1245.81 1209.45 L1246.39 1209.45 L1246.98 1209.45 L1247.57 1209.45 L1248.15 1209.45 L1248.74 1209.45 L1249.32 1209.45 L1249.91 1209.45 L1250.5 1209.45 L1251.08 1209.45 L1251.67 1209.45 L1252.26 1209.45 L1252.84 1209.45 L1253.43 1209.45 L1254.02 1209.45 L1254.6 1209.45 L1255.19 1209.45 L1255.78 1209.45 L1256.36 1209.45 L1256.95 1209.45 L1257.53 1209.45 L1258.12 1209.45 L1258.71 1209.45 L1259.29 1209.45 L1259.88 1209.45 L1260.47 1209.45 L1261.05 1209.45 L1261.64 1209.45 L1262.23 1209.45 L1262.81 1209.45 L1263.4 1209.45 L1263.98 1209.45 L1264.57 1209.45 L1265.16 1209.45 L1265.74 1209.45 L1266.33 1209.45 L1266.92 1209.45 L1267.5 1209.45 L1268.09 1209.45 L1268.68 1209.45 L1269.26 1209.45 L1269.85 1209.45 L1270.44 1209.45 L1271.02 1209.45 L1271.61 1209.45 L1272.19 1209.45 L1272.78 1209.45 L1273.37 1209.45 L1273.95 1209.45 L1274.54 1209.45 L1275.13 1209.45 L1275.71 1209.45 L1276.3 1209.45 L1276.89 1209.45 L1277.47 1209.45 L1278.06 1209.45 L1278.65 1209.45 L1279.23 1209.45 L1279.82 1209.45 L1280.4 1209.45 L1280.99 1209.45 L1281.58 1209.45 L1282.16 1209.45 L1282.75 1209.45 L1283.34 1209.45 L1283.92 1209.45 L1284.51 1209.45 L1285.1 1209.45 L1285.68 1209.45 L1286.27 1209.45 L1286.86 1209.45 L1287.44 1209.45 L1288.03 1209.45 L1288.61 1209.45 L1289.2 1209.45 L1289.79 1209.45 L1290.37 1209.45 L1290.96 1209.45 L1291.55 1209.45 L1292.13 1209.45 L1292.72 1209.45 L1293.31 1209.45 L1293.89 1209.45 L1294.48 1209.45 L1295.06 1209.45 L1295.65 1209.45 L1296.24 1209.45 L1296.82 1209.45 L1297.41 1209.45 L1298 1209.45 L1298.58 1209.45 L1299.17 1209.45 L1299.76 1209.45 L1300.34 1209.45 L1300.93 1209.45 L1301.52 1209.45 L1302.1 1209.45 L1302.69 1209.45 L1303.27 1209.45 L1303.86 1209.45 L1304.45 1209.45 L1305.03 1209.45 L1305.62 1209.45 L1306.21 1209.45 L1306.79 1209.45 L1307.38 1209.45 L1307.97 1209.45 L1308.55 1209.45 L1309.14 1209.45 L1309.73 1209.45 L1310.31 1209.45 L1310.9 1209.45 L1311.48 1209.45 L1312.07 1209.45 L1312.66 1209.45 L1313.24 1209.45 L1313.83 1209.45 L1314.42 1209.45 L1315 1209.45 L1315.59 1209.45 L1316.18 1209.45 L1316.76 1209.45 L1317.35 1209.45 L1317.93 1209.45 L1318.52 1209.45 L1319.11 1209.45 L1319.69 1209.45 L1320.28 1209.45 L1320.87 1209.45 L1321.45 1209.45 L1322.04 1209.45 L1322.63 1209.45 L1323.21 1209.45 L1323.8 1209.45 L1324.39 1209.45 L1324.97 1209.45 L1325.56 1209.45 L1326.14 1209.45 L1326.73 1209.45 L1327.32 1209.45 L1327.9 1209.45 L1328.49 1209.45 L1329.08 1209.45 L1329.66 1209.45 L1330.25 1209.45 L1330.84 1209.45 L1331.42 1209.45 L1332.01 1209.45 L1332.6 1209.45 L1333.18 1209.45 L1333.77 1209.45 L1334.35 1209.45 L1334.94 1209.45 L1335.53 1209.45 L1336.11 1209.45 L1336.7 1209.45 L1337.29 1209.45 L1337.87 1209.45 L1338.46 1209.45 L1339.05 1209.45 L1339.63 1209.45 L1340.22 1209.45 L1340.8 1209.45 L1341.39 1209.45 L1341.98 1209.45 L1342.56 1209.45 L1343.15 1209.45 L1343.74 1209.45 L1344.32 1209.45 L1344.91 1209.45 L1345.5 1209.45 L1346.08 1209.45 L1346.67 1209.45 L1347.26 1209.45 L1347.84 1209.45 L1348.43 1209.45 L1349.01 1209.45 L1349.6 1209.45 L1350.19 1209.45 L1350.77 1209.45 L1351.36 1209.45 L1351.95 1209.45 L1352.53 1209.45 L1353.12 1209.45 L1353.71 1209.45 L1354.29 1209.45 L1354.88 1209.45 L1355.47 1209.45 L1356.05 1209.45 L1356.64 1209.45 L1357.22 1209.45 L1357.81 1209.45 L1358.4 1209.45 L1358.98 1209.45 L1359.57 1209.45 L1360.16 1209.45 L1360.74 1209.45 L1361.33 1209.45 L1361.92 1209.45 L1362.5 1209.45 L1363.09 1209.45 L1363.68 1209.45 L1364.26 1209.45 L1364.85 1209.45 L1365.43 1209.45 L1366.02 1209.45 L1366.61 1209.45 L1367.19 1209.45 L1367.78 1209.45 L1368.37 1209.45 L1368.95 1209.45 L1369.54 1209.45 L1370.13 1209.45 L1370.71 1209.45 L1371.3 1209.45 L1371.88 1209.45 L1372.47 1209.45 L1373.06 1209.45 L1373.64 1209.45 L1374.23 1209.45 L1374.82 1209.45 L1375.4 1209.45 L1375.99 1209.45 L1376.58 1209.45 L1377.16 1209.45 L1377.75 1209.45 L1378.34 1209.45 L1378.92 1209.45 L1379.51 1209.45 L1380.09 1209.45 L1380.68 1209.45 L1381.27 1209.45 L1381.85 1209.45 L1382.44 1209.45 L1383.03 1209.45 L1383.61 1209.45 L1384.2 1209.45 L1384.79 1209.45 L1385.37 1209.45 L1385.96 1209.45 L1386.55 1209.45 L1387.13 1209.45 L1387.72 1209.45 L1388.3 1209.45 L1388.89 1209.45 L1389.48 1209.45 L1390.06 1209.45 L1390.65 1209.45 L1391.24 1209.45 L1391.82 1209.45 L1392.41 1209.45 L1393 1209.45 L1393.58 1209.45 L1394.17 1209.45 L1394.75 1209.45 L1395.34 1209.45 L1395.93 1209.45 L1396.51 1209.45 L1397.1 1209.45 L1397.69 1209.45 L1398.27 1209.45 L1398.86 1209.45 L1399.45 1209.45 L1400.03 1209.45 L1400.62 1209.45 L1401.21 1209.45 L1401.79 1209.45 L1402.38 1209.45 L1402.96 1209.45 L1403.55 1209.45 L1404.14 1209.45 L1404.72 1209.45 L1405.31 1209.45 L1405.9 1209.45 L1406.48 1209.45 L1407.07 1209.45 L1407.66 1209.45 L1408.24 1209.45 L1408.83 1209.45 L1409.42 1209.45 L1410 1209.45 L1410.59 1209.45 L1411.17 1209.45 L1411.76 1209.45 L1412.35 1209.45 L1412.93 1209.45 L1413.52 1209.45 L1414.11 1209.45 L1414.69 1209.45 L1415.28 1209.45 L1415.87 1209.45 L1416.45 1209.45 L1417.04 1209.45 L1417.63 1209.45 L1418.21 1209.45 L1418.8 1209.45 L1419.38 1209.45 L1419.97 1209.45 L1420.56 1209.45 L1421.14 1209.45 L1421.73 1209.45 L1422.32 1209.45 L1422.9 1209.45 L1423.49 1209.45 L1424.08 1209.45 L1424.66 1209.45 L1425.25 1209.45 L1425.83 1209.45 L1426.42 1209.45 L1427.01 1209.45 L1427.59 1209.45 L1428.18 1209.45 L1428.77 1209.45 L1429.35 1209.45 L1429.94 1209.45 L1430.53 1209.45 L1431.11 1209.45 L1431.7 1209.45 L1432.29 1209.45 L1432.87 1209.45 L1433.46 1209.45 L1434.04 1209.45 L1434.63 1209.45 L1435.22 1209.45 L1435.8 1209.45 L1436.39 1209.45 L1436.98 1209.45 L1437.56 1209.45 L1438.15 1209.45 L1438.74 1209.45 L1439.32 1209.45 L1439.91 1209.45 L1440.5 1209.45 L1441.08 1209.45 L1441.67 1209.45 L1442.25 1209.45 L1442.84 1209.45 L1443.43 1209.45 L1444.01 1209.45 L1444.6 1209.45 L1445.19 1209.45 L1445.77 1209.45 L1446.36 1209.45 L1446.95 1209.45 L1447.53 1209.45 L1448.12 1209.45 L1448.7 1209.45 L1449.29 1209.45 L1449.88 1209.45 L1450.46 1209.45 L1451.05 1209.45 L1451.64 1209.45 L1452.22 1209.45 L1452.81 1209.45 L1453.4 1209.45 L1453.98 1209.45 L1454.57 1209.45 L1455.16 1209.45 L1455.74 1209.45 L1456.33 1209.45 L1456.91 1209.45 L1457.5 1209.45 L1458.09 1209.45 L1458.67 1209.45 L1459.26 1209.45 L1459.85 1209.45 L1460.43 1209.45 L1461.02 1209.45 L1461.61 1209.45 L1462.19 1209.45 L1462.78 1209.45 L1463.37 1209.45 L1463.95 1209.45 L1464.54 1209.45 L1465.12 1209.45 L1465.71 1209.45 L1466.3 1209.45 L1466.88 1209.45 L1467.47 1209.45 L1468.06 1209.45 L1468.64 1209.45 L1469.23 1209.45 L1469.82 1209.45 L1470.4 1209.45 L1470.99 1209.45 L1471.57 1209.45 L1472.16 1209.45 L1472.75 1209.45 L1473.33 1209.45 L1473.92 1209.45 L1474.51 1209.45 L1475.09 1209.45 L1475.68 1209.45 L1476.27 1209.45 L1476.85 1209.45 L1477.44 1209.45 L1478.03 1209.45 L1478.61 1209.45 L1479.2 1209.45 L1479.78 1209.45 L1480.37 1209.45 L1480.96 1209.45 L1481.54 1209.45 L1482.13 1209.45 L1482.72 1209.45 L1483.3 1209.45 L1483.89 1209.45 L1484.48 1209.45 L1485.06 1209.45 L1485.65 1209.45 L1486.24 1209.45 L1486.82 1209.45 L1487.41 1209.45 L1487.99 1209.45 L1488.58 1209.45 L1489.17 1209.45 L1489.75 1209.45 L1490.34 1209.45 L1490.93 1209.45 L1491.51 1209.45 L1492.1 1209.45 L1492.69 1209.45 L1493.27 1209.45 L1493.86 1209.45 L1494.45 1209.45 L1495.03 1209.45 L1495.62 1209.45 L1496.2 1209.45 L1496.79 1209.45 L1497.38 1209.45 L1497.96 1209.45 L1498.55 1209.45 L1499.14 1209.45 L1499.72 1209.45 L1500.31 1209.45 L1500.9 1209.45 L1501.48 1209.45 L1502.07 1209.45 L1502.65 1209.45 L1503.24 1209.45 L1503.83 1209.45 L1504.41 1209.45 L1505 1209.45 L1505.59 1209.45 L1506.17 1209.45 L1506.76 1209.45 L1507.35 1209.45 L1507.93 1209.45 L1508.52 1209.45 L1509.11 1209.45 L1509.69 1209.45 L1510.28 1209.45 L1510.86 1209.45 L1511.45 1209.45 L1512.04 1209.45 L1512.62 1209.45 L1513.21 1209.45 L1513.8 1209.45 L1514.38 1209.45 L1514.97 1209.45 L1515.56 1209.45 L1516.14 1209.45 L1516.73 1209.45 L1517.32 1209.45 L1517.9 1209.45 L1518.49 1209.45 L1519.07 1209.45 L1519.66 1209.45 L1520.25 1209.45 L1520.83 1209.45 L1521.42 1209.45 L1522.01 1209.45 L1522.59 1209.45 L1523.18 1209.45 L1523.77 1209.45 L1524.35 1209.45 L1524.94 1209.45 L1525.52 1209.45 L1526.11 1209.45 L1526.7 1209.45 L1527.28 1209.45 L1527.87 1209.45 L1528.46 1209.45 L1529.04 1209.45 L1529.63 1209.45 L1530.22 1209.45 L1530.8 1209.45 L1531.39 1209.45 L1531.98 1209.45 L1532.56 1209.45 L1533.15 1209.45 L1533.73 1209.45 L1534.32 1209.45 L1534.91 1209.45 L1535.49 1209.45 L1536.08 1209.45 L1536.67 1209.45 L1537.25 1209.45 L1537.84 1209.45 L1538.43 1209.45 L1539.01 1209.45 L1539.6 1209.45 L1540.19 1209.45 L1540.77 1209.45 L1541.36 1209.45 L1541.94 1209.45 L1542.53 1209.45 L1543.12 1209.45 L1543.7 1209.45 L1544.29 1209.45 L1544.88 1209.45 L1545.46 1209.45 L1546.05 1209.45 L1546.64 1209.45 L1547.22 1209.45 L1547.81 1209.45 L1548.4 1209.45 L1548.98 1209.45 L1549.57 1209.45 L1550.15 1209.45 L1550.74 1209.45 L1551.33 1209.45 L1551.91 1209.45 L1552.5 1209.45 L1553.09 1209.45 L1553.67 1209.45 L1554.26 1209.45 L1554.85 1209.45 L1555.43 1209.45 L1556.02 1209.45 L1556.6 1209.45 L1557.19 1209.45 L1557.78 1209.45 L1558.36 1209.45 L1558.95 1209.45 L1559.54 1209.45 L1560.12 1209.45 L1560.71 1209.45 L1561.3 1209.45 L1561.88 1209.45 L1562.47 1209.45 L1563.06 1209.45 L1563.64 1209.45 L1564.23 1209.45 L1564.81 1209.45 L1565.4 1209.45 L1565.99 1209.45 L1566.57 1209.45 L1567.16 1209.45 L1567.75 1209.45 L1568.33 1209.45 L1568.92 1209.45 L1569.51 1209.45 L1570.09 1209.45 L1570.68 1209.45 L1571.27 1209.45 L1571.85 1209.45 L1572.44 1209.45 L1573.02 1209.45 L1573.61 1209.45 L1574.2 1209.45 L1574.78 1209.45 L1575.37 1209.45 L1575.96 1209.45 L1576.54 1209.45 L1577.13 1209.45 L1577.72 1209.45 L1578.3 1209.45 L1578.89 1209.45 L1579.47 1209.45 L1580.06 1209.45 L1580.65 1209.45 L1581.23 1209.45 L1581.82 1209.45 L1582.41 1209.45 L1582.99 1209.45 L1583.58 1209.45 L1584.17 1209.45 L1584.75 1209.45 L1585.34 1209.45 L1585.93 1209.45 L1586.51 1209.45 L1587.1 1209.45 L1587.68 1209.45 L1588.27 1209.45 L1588.86 1209.45 L1589.44 1209.45 L1590.03 1209.45 L1590.62 1209.45 L1591.2 1209.45 L1591.79 1209.45 L1592.38 1209.45 L1592.96 1209.45 L1593.55 1209.45 L1594.14 1209.45 L1594.72 1209.45 L1595.31 1209.45 L1595.89 1209.45 L1596.48 1209.45 L1597.07 1209.45 L1597.65 1209.45 L1598.24 1209.45 L1598.83 1209.45 L1599.41 1209.45 L1600 1209.45 L1600.59 1209.45 L1601.17 1209.45 L1601.76 1209.45 L1602.34 1209.45 L1602.93 1209.45 L1603.52 1209.45 L1604.1 1209.45 L1604.69 1209.45 L1605.28 1209.45 L1605.86 1209.45 L1606.45 1209.45 L1607.04 1209.45 L1607.62 1209.45 L1608.21 1209.45 L1608.8 1209.45 L1609.38 1209.45 L1609.97 1209.45 L1610.55 1209.45 L1611.14 1209.45 L1611.73 1209.45 L1612.31 1209.45 L1612.9 1209.45 L1613.49 1209.45 L1614.07 1209.45 L1614.66 1209.45 L1615.25 1209.45 L1615.83 1209.45 L1616.42 1209.45 L1617.01 1209.45 L1617.59 1209.45 L1618.18 1209.45 L1618.76 1209.45 L1619.35 1209.45 L1619.94 1209.45 L1620.52 1209.45 L1621.11 1209.45 L1621.7 1209.45 L1622.28 1209.45 L1622.87 1209.45 L1623.46 1209.45 L1624.04 1209.45 L1624.63 1209.45 L1625.22 1209.45 L1625.8 1209.45 L1626.39 1209.45 L1626.97 1209.45 L1627.56 1209.45 L1628.15 1209.45 L1628.73 1209.45 L1629.32 1209.45 L1629.91 1209.45 L1630.49 1209.45 L1631.08 1209.45 L1631.67 1209.45 L1632.25 1209.45 L1632.84 1209.45 L1633.42 1209.45 L1634.01 1209.45 L1634.6 1209.45 L1635.18 1209.45 L1635.77 1209.45 L1636.36 1209.45 L1636.94 1209.45 L1637.53 1209.45 L1638.12 1209.45 L1638.7 1209.45 L1639.29 1209.45 L1639.88 1209.45 L1640.46 1209.45 L1641.05 1209.45 L1641.63 1209.45 L1642.22 1209.45 L1642.81 1209.45 L1643.39 1209.45 L1643.98 1209.45 L1644.57 1209.45 L1645.15 1209.45 L1645.74 1209.45 L1646.33 1209.45 L1646.91 1209.45 L1647.5 1209.45 L1648.09 1209.45 L1648.67 1209.45 L1649.26 1209.45 L1649.84 1209.45 L1650.43 1209.45 L1651.02 1209.45 L1651.6 1209.45 L1652.19 1209.45 L1652.78 1209.45 L1653.36 1209.45 L1653.95 1209.45 L1654.54 1209.45 L1655.12 1209.45 L1655.71 1209.45 L1656.29 1209.45 L1656.88 1209.45 L1657.47 1209.45 L1658.05 1209.45 L1658.64 1209.45 L1659.23 1209.45 L1659.81 1209.45 L1660.4 1209.45 L1660.99 1209.45 L1661.57 1209.45 L1662.16 1209.45 L1662.75 1209.45 L1663.33 1209.45 L1663.92 1209.45 L1664.5 1209.45 L1665.09 1209.45 L1665.68 1209.45 L1666.26 1209.45 L1666.85 1209.45 L1667.44 1209.45 L1668.02 1209.45 L1668.61 1209.45 L1669.2 1209.45 L1669.78 1209.45 L1670.37 1209.45 L1670.96 1209.45 L1671.54 1209.45 L1672.13 1209.45 L1672.71 1209.45 L1673.3 1209.45 L1673.89 1209.45 L1674.47 1209.45 L1675.06 1209.45 L1675.65 1209.45 L1676.23 1209.45 L1676.82 1209.45 L1677.41 1209.45 L1677.99 1209.45 L1678.58 1209.45 L1679.17 1209.45 L1679.75 1209.45 L1680.34 1209.45 L1680.92 1209.45 L1681.51 1209.45 L1682.1 1209.45 L1682.68 1209.45 L1683.27 1209.45 L1683.86 1209.45 L1684.44 1209.45 L1685.03 1209.45 L1685.62 1209.45 L1686.2 1209.45 L1686.79 1209.45 L1687.37 1209.45 L1687.96 1209.45 L1688.55 1209.45 L1689.13 1209.45 L1689.72 1209.45 L1690.31 1209.45 L1690.89 1209.45 L1691.48 1209.45 L1692.07 1209.45 L1692.65 1209.45 L1693.24 1209.45 L1693.83 1209.45 L1694.41 1209.45 L1695 1209.45 L1695.58 1209.45 L1696.17 1209.45 L1696.76 1209.45 L1697.34 1209.45 L1697.93 1209.45 L1698.52 1209.45 L1699.1 1209.45 L1699.69 1209.45 L1700.28 1209.45 L1700.86 1209.45 L1701.45 1209.45 L1702.04 1209.45 L1702.62 1209.45 L1703.21 1209.45 L1703.79 1209.45 L1704.38 1209.45 L1704.97 1209.45 L1705.55 1209.45 L1706.14 1209.45 L1706.73 1209.45 L1707.31 1209.45 L1707.9 1209.45 L1708.49 1209.45 L1709.07 1209.45 L1709.66 1209.45 L1710.24 1209.45 L1710.83 1209.45 L1711.42 1209.45 L1712 1209.45 L1712.59 1209.45 L1713.18 1209.45 L1713.76 1209.45 L1714.35 1209.45 L1714.94 1209.45 L1715.52 1209.45 L1716.11 1209.45 L1716.7 1209.45 L1717.28 1209.45 L1717.87 1209.45 L1718.45 1209.45 L1719.04 1209.45 L1719.63 1209.45 L1720.21 1209.45 L1720.8 1209.45 L1721.39 1209.45 L1721.97 1209.45 L1722.56 1209.45 L1723.15 1209.45 L1723.73 1209.45 L1724.32 1209.45 L1724.91 1209.45 L1725.49 1209.45 L1726.08 1209.45 L1726.66 1209.45 L1727.25 1209.45 L1727.84 1209.45 L1728.42 1209.45 L1729.01 1209.45 L1729.6 1209.45 L1730.18 1209.45 L1730.77 1209.45 L1731.36 1209.45 L1731.94 1209.45 L1732.53 1209.45 L1733.11 1209.45 L1733.7 1209.45 L1734.29 1209.45 L1734.87 1209.45 L1735.46 1209.45 L1736.05 1209.45 L1736.63 1209.45 L1737.22 1209.45 L1737.81 1209.45 L1738.39 1209.45 L1738.98 1209.45 L1739.57 1209.45 L1740.15 1209.45 L1740.74 1209.45 L1741.32 1209.45 L1741.91 1209.45 L1742.5 1209.45 L1743.08 1209.45 L1743.67 1209.45 L1744.26 1209.45 L1744.84 1209.45 L1745.43 1209.45 L1746.02 1209.45 L1746.6 1209.45 L1747.19 1209.45 L1747.78 1209.45 L1748.36 1209.45 L1748.95 1209.45 L1749.53 1209.45 L1750.12 1209.45 L1750.71 1209.45 L1751.29 1209.45 L1751.88 1209.45 L1752.47 1209.45 L1753.05 1209.45 L1753.64 1209.45 L1754.23 1209.45 L1754.81 1209.45 L1755.4 1209.45 L1755.99 1209.45 L1756.57 1209.45 L1757.16 1209.45 L1757.74 1209.45 L1758.33 1209.45 L1758.92 1209.45 L1759.5 1209.45 L1760.09 1209.45 L1760.68 1209.45 L1761.26 1209.45 L1761.85 1209.45 L1762.44 1209.45 L1763.02 1209.45 L1763.61 1209.45 L1764.19 1209.45 L1764.78 1209.45 L1765.37 1209.45 L1765.95 1209.45 L1766.54 1209.45 L1767.13 1209.45 L1767.71 1209.45 L1768.3 1209.45 L1768.89 1209.45 L1769.47 1209.45 L1770.06 1209.45 L1770.65 1209.45 L1771.23 1209.45 L1771.82 1209.45 L1772.4 1209.45 L1772.99 1209.45 L1773.58 1209.45 L1774.16 1209.45 L1774.75 1209.45 L1775.34 1209.45 L1775.92 1209.45 L1776.51 1209.45 L1777.1 1209.45 L1777.68 1209.45 L1778.27 1209.45 L1778.86 1209.45 L1779.44 1209.45 L1780.03 1209.45 L1780.61 1209.45 L1781.2 1209.45 L1781.79 1209.45 L1782.37 1209.45 L1782.96 1209.45 L1783.55 1209.45 L1784.13 1209.45 L1784.72 1209.45 L1785.31 1209.45 L1785.89 1209.45 L1786.48 1209.45 L1787.06 1209.45 L1787.65 1209.45 L1788.24 1209.45 L1788.82 1209.45 L1789.41 1209.45 L1790 1209.45 L1790.58 1209.45 L1791.17 1209.45 L1791.76 1209.45 L1792.34 1209.45 L1792.93 1209.45 L1793.52 1209.45 L1794.1 1209.45 L1794.69 1209.45 L1795.27 1209.45 L1795.86 1209.45 L1796.45 1209.45 L1797.03 1209.45 L1797.62 1209.45 L1798.21 1209.45 L1798.79 1209.45 L1799.38 1209.45 L1799.97 1209.45 L1800.55 1209.45 L1801.14 1209.45 L1801.73 1209.45 L1802.31 1209.45 L1802.9 1209.45 L1803.48 1209.45 L1804.07 1209.45 L1804.66 1209.45 L1805.24 1209.45 L1805.83 1209.45 L1806.42 1209.45 L1807 1209.45 L1807.59 1209.45 L1808.18 1209.45 L1808.76 1209.45 L1809.35 1209.45 L1809.94 1209.45 L1810.52 1209.45 L1811.11 1209.45 L1811.69 1209.45 L1812.28 1209.45 L1812.87 1209.45 L1813.45 1209.45 L1814.04 1209.45 L1814.63 1209.45 L1815.21 1209.45 L1815.8 1209.45 L1816.39 1209.45 L1816.97 1209.45 L1817.56 1209.45 L1818.14 1209.45 L1818.73 1209.45 L1819.32 1209.45 L1819.9 1209.45 L1820.49 1209.45 L1821.08 1209.45 L1821.66 1209.45 L1822.25 1209.45 L1822.84 1209.45 L1823.42 1209.45 L1824.01 1209.45 L1824.6 1209.45 L1825.18 1209.45 L1825.77 1209.45 L1826.35 1209.45 L1826.94 1209.45 L1827.53 1209.45 L1828.11 1209.45 L1828.7 1209.45 L1829.29 1209.45 L1829.87 1209.45 L1830.46 1209.45 L1831.05 1209.45 L1831.63 1209.45 L1832.22 1209.45 L1832.81 1209.45 L1833.39 1209.45 L1833.98 1209.45 L1834.56 1209.45 L1835.15 1209.45 L1835.74 1209.45 L1836.32 1209.45 L1836.91 1209.45 L1837.5 1209.45 L1838.08 1209.45 L1838.67 1209.45 L1839.26 1209.45 L1839.84 1209.45 L1840.43 1209.45 L1841.01 1209.45 L1841.6 1209.45 L1842.19 1209.45 L1842.77 1209.45 L1843.36 1209.45 L1843.95 1209.45 L1844.53 1209.45 L1845.12 1209.45 L1845.71 1209.45 L1846.29 1209.45 L1846.88 1209.45 L1847.47 1209.45 L1848.05 1209.45 L1848.64 1209.45 L1849.22 1209.45 L1849.81 1209.45 L1850.4 1209.45 L1850.98 1209.45 L1851.57 1209.45 L1852.16 1209.45 L1852.74 1209.45 L1853.33 1209.45 L1853.92 1209.45 L1854.5 1209.45 L1855.09 1209.45 L1855.68 1209.45 L1856.26 1209.45 L1856.85 1209.45 L1857.43 1209.45 L1858.02 1209.45 L1858.61 1209.45 L1859.19 1209.45 L1859.78 1209.45 L1860.37 1209.45 L1860.95 1209.45 L1861.54 1209.45 L1862.13 1209.45 L1862.71 1209.45 L1863.3 1209.45 L1863.88 1209.45 L1864.47 1209.45 L1865.06 1209.45 L1865.64 1209.45 L1866.23 1209.45 L1866.82 1209.45 L1867.4 1209.45 L1867.99 1209.45 L1868.58 1209.45 L1869.16 1209.45 L1869.75 1209.45 L1870.34 1209.45 L1870.92 1209.45 L1871.51 1209.45 L1872.09 1209.45 L1872.68 1209.45 L1873.27 1209.45 L1873.85 1209.45 L1874.44 1209.45 L1875.03 1209.45 L1875.61 1209.45 L1876.2 1209.45 L1876.79 1209.45 L1877.37 1209.45 L1877.96 1209.45 L1878.55 1209.45 L1879.13 1209.45 L1879.72 1209.45 L1880.3 1209.45 L1880.89 1209.45 L1881.48 1209.45 L1882.06 1209.45 L1882.65 1209.45 L1883.24 1209.45 L1883.82 1209.45 L1884.41 1209.45 L1885 1209.45 L1885.58 1209.45 L1886.17 1209.45 L1886.76 1209.45 L1887.34 1209.45 L1887.93 1209.45 L1888.51 1209.45 L1889.1 1209.45 L1889.69 1209.45 L1890.27 1209.45 L1890.86 1209.45 L1891.45 1209.45 L1892.03 1209.45 L1892.62 1209.45 L1893.21 1209.45 L1893.79 1209.45 L1894.38 1209.45 L1894.96 1209.45 L1895.55 1209.45 L1896.14 1209.45 L1896.72 1209.45 L1897.31 1209.45 L1897.9 1209.45 L1898.48 1209.45 L1899.07 1209.45 L1899.66 1209.45 L1900.24 1209.45 L1900.83 1209.45 L1901.42 1209.45 L1902 1209.45 L1902.59 1209.45 L1903.17 1209.45 L1903.76 1209.45 L1904.35 1209.45 L1904.93 1209.45 L1905.52 1209.45 L1906.11 1209.45 L1906.69 1209.45 L1907.28 1209.45 L1907.87 1209.45 L1908.45 1209.45 L1909.04 1209.45 L1909.63 1209.45 L1910.21 1209.45 L1910.8 1209.45 L1911.38 1209.45 L1911.97 1209.45 L1912.56 1209.45 L1913.14 1209.45 L1913.73 1209.45 L1914.32 1209.45 L1914.9 1209.45 L1915.49 1209.45 L1916.08 1209.45 L1916.66 1209.45 L1917.25 1209.45 L1917.83 1209.45 L1918.42 1209.45 L1919.01 1209.45 L1919.59 1209.45 L1920.18 1209.45 L1920.77 1209.45 L1921.35 1209.45 L1921.94 1209.45 L1922.53 1209.45 L1923.11 1209.45 L1923.7 1209.45 L1924.29 1209.45 L1924.87 1209.45 L1925.46 1209.45 L1926.04 1209.45 L1926.63 1209.45 L1927.22 1209.45 L1927.8 1209.45 L1928.39 1209.45 L1928.98 1209.45 L1929.56 1209.45 L1930.15 1209.45 L1930.74 1209.45 L1931.32 1209.45 L1931.91 1209.45 L1932.5 1209.45 L1933.08 1209.45 L1933.67 1209.45 L1934.25 1209.45 L1934.84 1209.45 L1935.43 1209.45 L1936.01 1209.45 L1936.6 1209.45 L1937.19 1209.45 L1937.77 1209.45 L1938.36 1209.45 L1938.95 1209.45 L1939.53 1209.45 L1940.12 1209.45 L1940.71 1209.45 L1941.29 1209.45 L1941.88 1209.45 L1942.46 1209.45 L1943.05 1209.45 L1943.64 1209.45 L1944.22 1209.45 L1944.81 1209.45 L1945.4 1209.45 L1945.98 1209.45 L1946.57 1209.45 L1947.16 1209.45 L1947.74 1209.45 L1948.33 1209.45 L1948.91 1209.45 L1949.5 1209.45 L1950.09 1209.45 L1950.67 1209.45 L1951.26 1209.45 L1951.85 1209.45 L1952.43 1209.45 L1953.02 1209.45 L1953.61 1209.45 L1954.19 1209.45 L1954.78 1209.45 L1955.37 1209.45 L1955.95 1209.45 L1956.54 1209.45 L1957.12 1209.45 L1957.71 1209.45 L1958.3 1209.45 L1958.88 1209.45 L1959.47 1209.45 L1960.06 1209.45 L1960.64 1209.45 L1961.23 1209.45 L1961.82 1209.45 L1962.4 1209.45 L1962.99 1209.45 L1963.58 1209.45 L1964.16 1209.45 L1964.75 1209.45 L1965.33 1209.45 L1965.92 1209.45 L1966.51 1209.45 L1967.09 1209.45 L1967.68 1209.45 L1968.27 1209.45 L1968.85 1209.45 L1969.44 1209.45 L1970.03 1209.45 L1970.61 1209.45 L1971.2 1209.45 L1971.78 1209.45 L1972.37 1209.45 L1972.96 1209.45 L1973.54 1209.45 L1974.13 1209.45 L1974.72 1209.45 L1975.3 1209.45 L1975.89 1209.45 L1976.48 1209.45 L1977.06 1209.45 L1977.65 1209.45 L1978.24 1209.45 L1978.82 1209.45 L1979.41 1209.45 L1979.99 1209.45 L1980.58 1209.45 L1981.17 1209.45 L1981.75 1209.45 L1982.34 1209.45 L1982.93 1209.45 L1983.51 1209.45 L1984.1 1209.45 L1984.69 1209.45 L1985.27 1209.45 L1985.86 1209.45 L1986.45 1209.45 L1987.03 1209.45 L1987.62 1209.45 L1988.2 1209.45 L1988.79 1209.45 L1989.38 1209.45 L1989.96 1209.45 L1990.55 1209.45 L1991.14 1209.45 L1991.72 1209.45 L1992.31 1209.45 L1992.9 1209.45 L1993.48 1209.45 L1994.07 1209.45 L1994.65 1209.45 L1995.24 1209.45 L1995.83 1209.45 L1996.41 1209.45 L1997 1209.45 L1997.59 1209.45 L1998.17 1209.45 L1998.76 1209.45 L1999.35 1209.45 L1999.93 1209.45 L2000.52 1209.45 L2001.11 1209.45 L2001.69 1209.45 L2002.28 1209.45 L2002.86 1209.45 L2003.45 1209.45 L2004.04 1209.45 L2004.62 1209.45 L2005.21 1209.45 L2005.8 1209.45 L2006.38 1209.45 L2006.97 1209.45 L2007.56 1209.45 L2008.14 1209.45 L2008.73 1209.45 L2009.32 1209.45 L2009.9 1209.45 L2010.49 1209.45 L2011.07 1209.45 L2011.66 1209.45 L2012.25 1209.45 L2012.83 1209.45 L2013.42 1209.45 L2014.01 1209.45 L2014.59 1209.45 L2015.18 1209.45 L2015.77 1209.45 L2016.35 1209.45 L2016.94 1209.45 L2017.53 1209.45 L2018.11 1209.45 L2018.7 1209.45 L2019.28 1209.45 L2019.87 1209.45 L2020.46 1209.45 L2021.04 1209.45 L2021.63 1209.45 L2022.22 1209.45 L2022.8 1209.45 L2023.39 1209.45 L2023.98 1209.45 L2024.56 1209.45 L2025.15 1209.45 L2025.73 1209.45 L2026.32 1209.45 L2026.91 1209.45 L2027.49 1209.45 L2028.08 1209.45 L2028.67 1209.45 L2029.25 1209.45 L2029.84 1209.45 L2030.43 1209.45 L2031.01 1209.45 L2031.6 1209.45 L2032.19 1209.45 L2032.77 1209.45 L2033.36 1209.45 L2033.94 1209.45 L2034.53 1209.45 L2035.12 1209.45 L2035.7 1209.45 L2036.29 1209.45 L2036.88 1209.45 L2037.46 1209.45 L2038.05 1209.45 L2038.64 1209.45 L2039.22 1209.45 L2039.81 1209.45 L2040.4 1209.45 L2040.98 1209.45 L2041.57 1209.45 L2042.15 1209.45 L2042.74 1209.45 L2043.33 1209.45 L2043.91 1209.45 L2044.5 1209.45 L2045.09 1209.45 L2045.67 1209.45 L2046.26 1209.45 L2046.85 1209.45 L2047.43 1209.45 L2048.02 1209.45 L2048.6 1209.45 L2049.19 1209.45 L2049.78 1209.45 L2050.36 1209.45 L2050.95 1209.45 L2051.54 1209.45 L2052.12 1209.45 L2052.71 1209.45 L2053.3 1209.45 L2053.88 1209.45 L2054.47 1209.45 L2055.06 1209.45 L2055.64 1209.45 L2056.23 1209.45 L2056.81 1209.45 L2057.4 1209.45 L2057.99 1209.45 L2058.57 1209.45 L2059.16 1209.45 L2059.75 1209.45 L2060.33 1209.45 L2060.92 1209.45 L2061.51 1209.45 L2062.09 1209.45 L2062.68 1209.45 L2063.27 1209.45 L2063.85 1209.45 L2064.44 1209.45 L2065.02 1209.45 L2065.61 1209.45 L2066.2 1209.45 L2066.78 1209.45 L2067.37 1209.45 L2067.96 1209.45 L2068.54 1209.45 L2069.13 1209.45 L2069.72 1209.45 L2070.3 1209.45 L2070.89 1209.45 L2071.48 1209.45 L2072.06 1209.45 L2072.65 1209.45 L2073.23 1209.45 L2073.82 1209.45 L2074.41 1209.45 L2074.99 1209.45 L2075.58 1209.45 L2076.17 1209.45 L2076.75 1209.45 L2077.34 1209.45 L2077.93 1209.45 L2078.51 1209.45 L2079.1 1209.45 L2079.68 1209.45 L2080.27 1209.45 L2080.86 1209.45 L2081.44 1209.45 L2082.03 1209.45 L2082.62 1209.45 L2083.2 1209.45 L2083.79 1209.45 L2084.38 1209.45 L2084.96 1209.45 L2085.55 1209.45 L2086.14 1209.45 L2086.72 1209.45 L2087.31 1209.45 L2087.89 1209.45 L2088.48 1209.45 L2089.07 1209.45 L2089.65 1209.45 L2090.24 1209.45 L2090.83 1209.45 L2091.41 1209.45 L2092 1209.45 L2092.59 1209.45 L2093.17 1209.45 L2093.76 1209.45 L2094.35 1209.45 L2094.93 1209.45 L2095.52 1209.45 L2096.1 1209.45 L2096.69 1209.45 L2097.28 1209.45 L2097.86 1209.45 L2098.45 1209.45 L2099.04 1209.45 L2099.62 1209.45 L2100.21 1209.45 L2100.8 1209.45 L2101.38 1209.45 L2101.97 1209.45 L2102.55 1209.45 L2103.14 1209.45 L2103.73 1209.45 L2104.31 1209.45 L2104.9 1209.45 L2105.49 1209.45 L2106.07 1209.45 L2106.66 1209.45 L2107.25 1209.45 L2107.83 1209.45 L2108.42 1209.45 L2109.01 1209.45 L2109.59 1209.45 L2110.18 1209.45 L2110.76 1209.45 L2111.35 1209.45 L2111.94 1209.45 L2112.52 1209.45 L2113.11 1209.45 L2113.7 1209.45 L2114.28 1209.45 L2114.87 1209.45 L2115.46 1209.45 L2116.04 1209.45 L2116.63 1209.45 L2117.22 1209.45 L2117.8 1209.45 L2118.39 1209.45 L2118.97 1209.45 L2119.56 1209.45 L2120.15 1209.45 L2120.73 1209.45 L2121.32 1209.45 L2121.91 1209.45 L2122.49 1209.45 L2123.08 1209.45 L2123.67 1209.45 L2124.25 1209.45 L2124.84 1209.45 L2125.42 1209.45 L2126.01 1209.45 L2126.6 1209.45 L2127.18 1209.45 L2127.77 1209.45 L2128.36 1209.45 L2128.94 1209.45 L2129.53 1209.45 L2130.12 1209.45 L2130.7 1209.45 L2131.29 1209.45 L2131.88 1209.45 L2132.46 1209.45 L2133.05 1209.45 L2133.63 1209.45 L2134.22 1209.45 L2134.81 1209.45 L2135.39 1209.45 L2135.98 1209.45 L2136.57 1209.45 L2137.15 1209.45 L2137.74 1209.45 L2138.33 1209.45 L2138.91 1209.45 L2139.5 1209.45 L2140.09 1209.45 L2140.67 1209.45 L2141.26 1209.45 L2141.84 1209.45 L2142.43 1209.45 L2143.02 1209.45 L2143.6 1209.45 L2144.19 1209.45 L2144.78 1209.45 L2145.36 1209.45 L2145.95 1209.45 L2146.54 1209.45 L2147.12 1209.45 L2147.71 1209.45 L2148.3 1209.45 L2148.88 1209.45 L2149.47 1209.45 L2150.05 1209.45 L2150.64 1209.45 L2151.23 1209.45 L2151.81 1209.45 L2152.4 1209.45 L2152.99 1209.45 L2153.57 1209.45 L2154.16 1209.45 L2154.75 1209.45 L2155.33 1209.45 L2155.92 1209.45 L2156.5 1209.45 L2157.09 1209.45 L2157.68 1209.45 L2158.26 1209.45 L2158.26 1209.29 L2157.68 1209.29 L2157.09 1209.29 L2156.5 1209.29 L2155.92 1209.29 L2155.33 1209.29 L2154.75 1209.29 L2154.16 1209.29 L2153.57 1209.29 L2152.99 1209.29 L2152.4 1209.29 L2151.81 1209.29 L2151.23 1209.29 L2150.64 1209.29 L2150.05 1209.29 L2149.47 1209.29 L2148.88 1209.29 L2148.3 1209.29 L2147.71 1209.29 L2147.12 1209.29 L2146.54 1209.29 L2145.95 1209.29 L2145.36 1209.29 L2144.78 1209.29 L2144.19 1209.29 L2143.6 1209.29 L2143.02 1209.29 L2142.43 1209.29 L2141.84 1209.29 L2141.26 1209.29 L2140.67 1209.29 L2140.09 1209.29 L2139.5 1209.29 L2138.91 1209.29 L2138.33 1209.29 L2137.74 1209.29 L2137.15 1209.29 L2136.57 1209.29 L2135.98 1209.29 L2135.39 1209.29 L2134.81 1209.29 L2134.22 1209.29 L2133.63 1209.29 L2133.05 1209.29 L2132.46 1209.29 L2131.88 1209.29 L2131.29 1209.29 L2130.7 1209.29 L2130.12 1209.29 L2129.53 1209.29 L2128.94 1209.29 L2128.36 1209.29 L2127.77 1209.29 L2127.18 1209.29 L2126.6 1209.29 L2126.01 1209.29 L2125.42 1209.29 L2124.84 1209.29 L2124.25 1209.29 L2123.67 1209.29 L2123.08 1209.29 L2122.49 1209.29 L2121.91 1209.29 L2121.32 1209.29 L2120.73 1209.29 L2120.15 1209.29 L2119.56 1209.29 L2118.97 1209.29 L2118.39 1209.29 L2117.8 1209.29 L2117.22 1209.29 L2116.63 1209.29 L2116.04 1209.29 L2115.46 1209.29 L2114.87 1209.29 L2114.28 1209.29 L2113.7 1209.29 L2113.11 1209.29 L2112.52 1209.29 L2111.94 1209.29 L2111.35 1209.29 L2110.76 1209.29 L2110.18 1209.29 L2109.59 1209.29 L2109.01 1209.29 L2108.42 1209.29 L2107.83 1209.29 L2107.25 1209.29 L2106.66 1209.29 L2106.07 1209.29 L2105.49 1209.29 L2104.9 1209.29 L2104.31 1209.29 L2103.73 1209.29 L2103.14 1209.29 L2102.55 1209.29 L2101.97 1209.29 L2101.38 1209.29 L2100.8 1209.29 L2100.21 1209.29 L2099.62 1209.29 L2099.04 1209.29 L2098.45 1209.29 L2097.86 1209.29 L2097.28 1209.29 L2096.69 1209.29 L2096.1 1209.29 L2095.52 1209.29 L2094.93 1209.29 L2094.35 1209.29 L2093.76 1209.29 L2093.17 1209.29 L2092.59 1209.29 L2092 1209.29 L2091.41 1209.29 L2090.83 1209.29 L2090.24 1209.29 L2089.65 1209.29 L2089.07 1209.29 L2088.48 1209.29 L2087.89 1209.29 L2087.31 1209.29 L2086.72 1209.29 L2086.14 1209.29 L2085.55 1209.29 L2084.96 1209.29 L2084.38 1209.29 L2083.79 1209.29 L2083.2 1209.29 L2082.62 1209.29 L2082.03 1209.29 L2081.44 1209.29 L2080.86 1209.29 L2080.27 1209.29 L2079.68 1209.29 L2079.1 1209.29 L2078.51 1209.29 L2077.93 1209.29 L2077.34 1209.29 L2076.75 1209.29 L2076.17 1209.29 L2075.58 1209.29 L2074.99 1209.29 L2074.41 1209.29 L2073.82 1209.29 L2073.23 1209.29 L2072.65 1209.29 L2072.06 1209.29 L2071.48 1209.29 L2070.89 1209.29 L2070.3 1209.29 L2069.72 1209.29 L2069.13 1209.29 L2068.54 1209.29 L2067.96 1209.29 L2067.37 1209.29 L2066.78 1209.29 L2066.2 1209.29 L2065.61 1209.29 L2065.02 1209.29 L2064.44 1209.29 L2063.85 1209.29 L2063.27 1209.29 L2062.68 1209.29 L2062.09 1209.29 L2061.51 1209.29 L2060.92 1209.29 L2060.33 1209.29 L2059.75 1209.29 L2059.16 1209.29 L2058.57 1209.29 L2057.99 1209.29 L2057.4 1209.29 L2056.81 1209.29 L2056.23 1209.29 L2055.64 1209.29 L2055.06 1209.29 L2054.47 1209.29 L2053.88 1209.29 L2053.3 1209.29 L2052.71 1209.29 L2052.12 1209.29 L2051.54 1209.29 L2050.95 1209.29 L2050.36 1209.29 L2049.78 1209.29 L2049.19 1209.29 L2048.6 1209.29 L2048.02 1209.29 L2047.43 1209.29 L2046.85 1209.29 L2046.26 1209.29 L2045.67 1209.29 L2045.09 1209.29 L2044.5 1209.29 L2043.91 1209.29 L2043.33 1209.29 L2042.74 1209.29 L2042.15 1209.29 L2041.57 1209.29 L2040.98 1209.29 L2040.4 1209.29 L2039.81 1209.29 L2039.22 1209.29 L2038.64 1209.29 L2038.05 1209.29 L2037.46 1209.29 L2036.88 1209.29 L2036.29 1209.29 L2035.7 1209.29 L2035.12 1209.29 L2034.53 1209.29 L2033.94 1209.29 L2033.36 1209.29 L2032.77 1209.29 L2032.19 1209.29 L2031.6 1209.29 L2031.01 1209.29 L2030.43 1209.29 L2029.84 1209.29 L2029.25 1209.29 L2028.67 1209.29 L2028.08 1209.29 L2027.49 1209.29 L2026.91 1209.29 L2026.32 1209.29 L2025.73 1209.29 L2025.15 1209.29 L2024.56 1209.29 L2023.98 1209.29 L2023.39 1209.29 L2022.8 1209.29 L2022.22 1209.29 L2021.63 1209.29 L2021.04 1209.29 L2020.46 1209.29 L2019.87 1209.29 L2019.28 1209.29 L2018.7 1209.29 L2018.11 1209.29 L2017.53 1209.29 L2016.94 1209.29 L2016.35 1209.29 L2015.77 1209.29 L2015.18 1209.29 L2014.59 1209.29 L2014.01 1209.29 L2013.42 1209.29 L2012.83 1209.29 L2012.25 1209.29 L2011.66 1209.29 L2011.07 1209.29 L2010.49 1209.29 L2009.9 1209.29 L2009.32 1209.29 L2008.73 1209.29 L2008.14 1209.29 L2007.56 1209.29 L2006.97 1209.29 L2006.38 1209.29 L2005.8 1209.29 L2005.21 1209.29 L2004.62 1209.29 L2004.04 1209.29 L2003.45 1209.29 L2002.86 1209.29 L2002.28 1209.29 L2001.69 1209.29 L2001.11 1209.29 L2000.52 1209.29 L1999.93 1209.29 L1999.35 1209.29 L1998.76 1209.29 L1998.17 1209.29 L1997.59 1209.29 L1997 1209.29 L1996.41 1209.29 L1995.83 1209.29 L1995.24 1209.29 L1994.65 1209.29 L1994.07 1209.29 L1993.48 1209.29 L1992.9 1209.29 L1992.31 1209.29 L1991.72 1209.29 L1991.14 1209.29 L1990.55 1209.29 L1989.96 1209.29 L1989.38 1209.29 L1988.79 1209.29 L1988.2 1209.29 L1987.62 1209.29 L1987.03 1209.29 L1986.45 1209.29 L1985.86 1209.29 L1985.27 1209.29 L1984.69 1209.29 L1984.1 1209.29 L1983.51 1209.29 L1982.93 1209.29 L1982.34 1209.29 L1981.75 1209.29 L1981.17 1209.29 L1980.58 1209.29 L1979.99 1209.29 L1979.41 1209.29 L1978.82 1209.29 L1978.24 1209.29 L1977.65 1209.29 L1977.06 1209.29 L1976.48 1209.29 L1975.89 1209.29 L1975.3 1209.29 L1974.72 1209.29 L1974.13 1209.29 L1973.54 1209.29 L1972.96 1209.29 L1972.37 1209.29 L1971.78 1209.29 L1971.2 1209.29 L1970.61 1209.29 L1970.03 1209.29 L1969.44 1209.29 L1968.85 1209.29 L1968.27 1209.29 L1967.68 1209.29 L1967.09 1209.29 L1966.51 1209.29 L1965.92 1209.29 L1965.33 1209.29 L1964.75 1209.29 L1964.16 1209.29 L1963.58 1209.29 L1962.99 1209.29 L1962.4 1209.29 L1961.82 1209.29 L1961.23 1209.29 L1960.64 1209.29 L1960.06 1209.29 L1959.47 1209.29 L1958.88 1209.29 L1958.3 1209.29 L1957.71 1209.29 L1957.12 1209.29 L1956.54 1209.29 L1955.95 1209.29 L1955.37 1209.29 L1954.78 1209.29 L1954.19 1209.29 L1953.61 1209.29 L1953.02 1209.29 L1952.43 1209.29 L1951.85 1209.29 L1951.26 1209.29 L1950.67 1209.29 L1950.09 1209.29 L1949.5 1209.29 L1948.91 1209.29 L1948.33 1209.29 L1947.74 1209.29 L1947.16 1209.29 L1946.57 1209.29 L1945.98 1209.29 L1945.4 1209.29 L1944.81 1209.29 L1944.22 1209.29 L1943.64 1209.29 L1943.05 1209.29 L1942.46 1209.29 L1941.88 1209.29 L1941.29 1209.29 L1940.71 1209.29 L1940.12 1209.29 L1939.53 1209.29 L1938.95 1209.29 L1938.36 1209.29 L1937.77 1209.29 L1937.19 1209.29 L1936.6 1209.29 L1936.01 1209.29 L1935.43 1209.29 L1934.84 1209.29 L1934.25 1209.29 L1933.67 1209.29 L1933.08 1209.29 L1932.5 1209.29 L1931.91 1209.29 L1931.32 1209.29 L1930.74 1209.29 L1930.15 1209.29 L1929.56 1209.29 L1928.98 1209.29 L1928.39 1209.29 L1927.8 1209.29 L1927.22 1209.29 L1926.63 1209.29 L1926.04 1209.29 L1925.46 1209.29 L1924.87 1209.29 L1924.29 1209.29 L1923.7 1209.29 L1923.11 1209.29 L1922.53 1209.29 L1921.94 1209.29 L1921.35 1209.29 L1920.77 1209.29 L1920.18 1209.29 L1919.59 1209.29 L1919.01 1209.29 L1918.42 1209.29 L1917.83 1209.29 L1917.25 1209.29 L1916.66 1209.29 L1916.08 1209.29 L1915.49 1209.29 L1914.9 1209.29 L1914.32 1209.29 L1913.73 1209.29 L1913.14 1209.29 L1912.56 1209.29 L1911.97 1209.29 L1911.38 1209.29 L1910.8 1209.29 L1910.21 1209.29 L1909.63 1209.29 L1909.04 1209.29 L1908.45 1209.29 L1907.87 1209.29 L1907.28 1209.29 L1906.69 1209.29 L1906.11 1209.29 L1905.52 1209.29 L1904.93 1209.29 L1904.35 1209.29 L1903.76 1209.29 L1903.17 1209.29 L1902.59 1209.29 L1902 1209.29 L1901.42 1209.29 L1900.83 1209.29 L1900.24 1209.29 L1899.66 1209.29 L1899.07 1209.29 L1898.48 1209.29 L1897.9 1209.29 L1897.31 1209.29 L1896.72 1209.29 L1896.14 1209.29 L1895.55 1209.29 L1894.96 1209.29 L1894.38 1209.29 L1893.79 1209.29 L1893.21 1209.29 L1892.62 1209.29 L1892.03 1209.29 L1891.45 1209.29 L1890.86 1209.29 L1890.27 1209.29 L1889.69 1209.29 L1889.1 1209.29 L1888.51 1209.29 L1887.93 1209.29 L1887.34 1209.29 L1886.76 1209.29 L1886.17 1209.29 L1885.58 1209.29 L1885 1209.29 L1884.41 1209.29 L1883.82 1209.29 L1883.24 1209.29 L1882.65 1209.29 L1882.06 1209.29 L1881.48 1209.29 L1880.89 1209.29 L1880.3 1209.29 L1879.72 1209.29 L1879.13 1209.29 L1878.55 1209.29 L1877.96 1209.29 L1877.37 1209.29 L1876.79 1209.29 L1876.2 1209.29 L1875.61 1209.29 L1875.03 1209.29 L1874.44 1209.29 L1873.85 1209.29 L1873.27 1209.29 L1872.68 1209.29 L1872.09 1209.29 L1871.51 1209.29 L1870.92 1209.29 L1870.34 1209.29 L1869.75 1209.29 L1869.16 1209.29 L1868.58 1209.29 L1867.99 1209.29 L1867.4 1209.29 L1866.82 1209.29 L1866.23 1209.29 L1865.64 1209.29 L1865.06 1209.29 L1864.47 1209.29 L1863.88 1209.29 L1863.3 1209.29 L1862.71 1209.29 L1862.13 1209.29 L1861.54 1209.29 L1860.95 1209.29 L1860.37 1209.29 L1859.78 1209.29 L1859.19 1209.29 L1858.61 1209.29 L1858.02 1209.29 L1857.43 1209.29 L1856.85 1209.29 L1856.26 1209.29 L1855.68 1209.29 L1855.09 1209.29 L1854.5 1209.29 L1853.92 1209.29 L1853.33 1209.29 L1852.74 1209.29 L1852.16 1209.29 L1851.57 1209.29 L1850.98 1209.29 L1850.4 1209.29 L1849.81 1209.29 L1849.22 1209.29 L1848.64 1209.29 L1848.05 1209.29 L1847.47 1209.29 L1846.88 1209.29 L1846.29 1209.29 L1845.71 1209.29 L1845.12 1209.29 L1844.53 1209.29 L1843.95 1209.29 L1843.36 1209.29 L1842.77 1209.29 L1842.19 1209.29 L1841.6 1209.29 L1841.01 1209.29 L1840.43 1209.29 L1839.84 1209.29 L1839.26 1209.29 L1838.67 1209.29 L1838.08 1209.29 L1837.5 1209.29 L1836.91 1209.29 L1836.32 1209.29 L1835.74 1209.29 L1835.15 1209.29 L1834.56 1209.29 L1833.98 1209.29 L1833.39 1209.29 L1832.81 1209.29 L1832.22 1209.29 L1831.63 1209.29 L1831.05 1209.29 L1830.46 1209.29 L1829.87 1209.29 L1829.29 1209.29 L1828.7 1209.29 L1828.11 1209.29 L1827.53 1209.29 L1826.94 1209.29 L1826.35 1209.29 L1825.77 1209.29 L1825.18 1209.29 L1824.6 1209.29 L1824.01 1209.29 L1823.42 1209.29 L1822.84 1209.29 L1822.25 1209.29 L1821.66 1209.29 L1821.08 1209.29 L1820.49 1209.29 L1819.9 1209.29 L1819.32 1209.29 L1818.73 1209.29 L1818.14 1209.29 L1817.56 1209.29 L1816.97 1209.29 L1816.39 1209.29 L1815.8 1209.29 L1815.21 1209.29 L1814.63 1209.29 L1814.04 1209.29 L1813.45 1209.29 L1812.87 1209.29 L1812.28 1209.29 L1811.69 1209.29 L1811.11 1209.29 L1810.52 1209.29 L1809.94 1209.29 L1809.35 1209.29 L1808.76 1209.29 L1808.18 1209.29 L1807.59 1209.29 L1807 1209.29 L1806.42 1209.29 L1805.83 1209.29 L1805.24 1209.29 L1804.66 1209.29 L1804.07 1209.29 L1803.48 1209.29 L1802.9 1209.29 L1802.31 1209.29 L1801.73 1209.29 L1801.14 1209.29 L1800.55 1209.29 L1799.97 1209.29 L1799.38 1209.29 L1798.79 1209.29 L1798.21 1209.29 L1797.62 1209.29 L1797.03 1209.29 L1796.45 1209.29 L1795.86 1209.29 L1795.27 1209.29 L1794.69 1209.29 L1794.1 1209.29 L1793.52 1209.29 L1792.93 1209.29 L1792.34 1209.29 L1791.76 1209.29 L1791.17 1209.29 L1790.58 1209.29 L1790 1209.29 L1789.41 1209.29 L1788.82 1209.29 L1788.24 1209.29 L1787.65 1209.29 L1787.06 1209.29 L1786.48 1209.29 L1785.89 1209.29 L1785.31 1209.29 L1784.72 1209.29 L1784.13 1209.29 L1783.55 1209.29 L1782.96 1209.29 L1782.37 1209.29 L1781.79 1209.29 L1781.2 1209.29 L1780.61 1209.29 L1780.03 1209.29 L1779.44 1209.29 L1778.86 1209.29 L1778.27 1209.29 L1777.68 1209.29 L1777.1 1209.29 L1776.51 1209.29 L1775.92 1209.29 L1775.34 1209.29 L1774.75 1209.29 L1774.16 1209.29 L1773.58 1209.29 L1772.99 1209.29 L1772.4 1209.29 L1771.82 1209.29 L1771.23 1209.29 L1770.65 1209.29 L1770.06 1209.29 L1769.47 1209.29 L1768.89 1209.29 L1768.3 1209.29 L1767.71 1209.29 L1767.13 1209.29 L1766.54 1209.29 L1765.95 1209.29 L1765.37 1209.29 L1764.78 1209.29 L1764.19 1209.29 L1763.61 1209.29 L1763.02 1209.29 L1762.44 1209.29 L1761.85 1209.29 L1761.26 1209.29 L1760.68 1209.29 L1760.09 1209.29 L1759.5 1209.29 L1758.92 1209.29 L1758.33 1209.29 L1757.74 1209.29 L1757.16 1209.29 L1756.57 1209.29 L1755.99 1209.29 L1755.4 1209.29 L1754.81 1209.29 L1754.23 1209.29 L1753.64 1209.29 L1753.05 1209.29 L1752.47 1209.29 L1751.88 1209.29 L1751.29 1209.29 L1750.71 1209.29 L1750.12 1209.29 L1749.53 1209.29 L1748.95 1209.29 L1748.36 1209.29 L1747.78 1209.29 L1747.19 1209.29 L1746.6 1209.29 L1746.02 1209.29 L1745.43 1209.29 L1744.84 1209.29 L1744.26 1209.29 L1743.67 1209.29 L1743.08 1209.29 L1742.5 1209.29 L1741.91 1209.29 L1741.32 1209.29 L1740.74 1209.29 L1740.15 1209.29 L1739.57 1209.29 L1738.98 1209.29 L1738.39 1209.29 L1737.81 1209.29 L1737.22 1209.29 L1736.63 1209.29 L1736.05 1209.29 L1735.46 1209.29 L1734.87 1209.29 L1734.29 1209.29 L1733.7 1209.29 L1733.11 1209.29 L1732.53 1209.29 L1731.94 1209.29 L1731.36 1209.29 L1730.77 1209.29 L1730.18 1209.29 L1729.6 1209.29 L1729.01 1209.29 L1728.42 1209.29 L1727.84 1209.29 L1727.25 1209.29 L1726.66 1209.29 L1726.08 1209.29 L1725.49 1209.29 L1724.91 1209.29 L1724.32 1209.29 L1723.73 1209.29 L1723.15 1209.29 L1722.56 1209.29 L1721.97 1209.29 L1721.39 1209.29 L1720.8 1209.29 L1720.21 1209.29 L1719.63 1209.29 L1719.04 1209.29 L1718.45 1209.29 L1717.87 1209.29 L1717.28 1209.29 L1716.7 1209.29 L1716.11 1209.29 L1715.52 1209.29 L1714.94 1209.29 L1714.35 1209.29 L1713.76 1209.29 L1713.18 1209.29 L1712.59 1209.29 L1712 1209.29 L1711.42 1209.29 L1710.83 1209.29 L1710.24 1209.29 L1709.66 1209.29 L1709.07 1209.29 L1708.49 1209.29 L1707.9 1209.29 L1707.31 1209.29 L1706.73 1209.29 L1706.14 1209.29 L1705.55 1209.29 L1704.97 1209.29 L1704.38 1209.29 L1703.79 1209.29 L1703.21 1209.29 L1702.62 1209.29 L1702.04 1209.29 L1701.45 1209.29 L1700.86 1209.29 L1700.28 1209.29 L1699.69 1209.29 L1699.1 1209.29 L1698.52 1209.29 L1697.93 1209.29 L1697.34 1209.29 L1696.76 1209.29 L1696.17 1209.29 L1695.58 1209.29 L1695 1209.29 L1694.41 1209.29 L1693.83 1209.29 L1693.24 1209.29 L1692.65 1209.29 L1692.07 1209.29 L1691.48 1209.29 L1690.89 1209.29 L1690.31 1209.29 L1689.72 1209.29 L1689.13 1209.29 L1688.55 1209.29 L1687.96 1209.29 L1687.37 1209.29 L1686.79 1209.29 L1686.2 1209.29 L1685.62 1209.29 L1685.03 1209.29 L1684.44 1209.29 L1683.86 1209.29 L1683.27 1209.29 L1682.68 1209.29 L1682.1 1209.29 L1681.51 1209.29 L1680.92 1209.29 L1680.34 1209.29 L1679.75 1209.29 L1679.17 1209.29 L1678.58 1209.29 L1677.99 1209.29 L1677.41 1209.29 L1676.82 1209.29 L1676.23 1209.29 L1675.65 1209.29 L1675.06 1209.29 L1674.47 1209.29 L1673.89 1209.29 L1673.3 1209.29 L1672.71 1209.29 L1672.13 1209.29 L1671.54 1209.29 L1670.96 1209.29 L1670.37 1209.29 L1669.78 1209.29 L1669.2 1209.29 L1668.61 1209.29 L1668.02 1209.29 L1667.44 1209.29 L1666.85 1209.29 L1666.26 1209.29 L1665.68 1209.29 L1665.09 1209.29 L1664.5 1209.29 L1663.92 1209.29 L1663.33 1209.29 L1662.75 1209.29 L1662.16 1209.29 L1661.57 1209.29 L1660.99 1209.29 L1660.4 1209.29 L1659.81 1209.29 L1659.23 1209.29 L1658.64 1209.29 L1658.05 1209.29 L1657.47 1209.29 L1656.88 1209.29 L1656.29 1209.29 L1655.71 1209.29 L1655.12 1209.29 L1654.54 1209.29 L1653.95 1209.29 L1653.36 1209.29 L1652.78 1209.29 L1652.19 1209.29 L1651.6 1209.29 L1651.02 1209.29 L1650.43 1209.29 L1649.84 1209.29 L1649.26 1209.29 L1648.67 1209.29 L1648.09 1209.29 L1647.5 1209.29 L1646.91 1209.29 L1646.33 1209.29 L1645.74 1209.29 L1645.15 1209.29 L1644.57 1209.29 L1643.98 1209.29 L1643.39 1209.29 L1642.81 1209.29 L1642.22 1209.29 L1641.63 1209.29 L1641.05 1209.29 L1640.46 1209.29 L1639.88 1209.29 L1639.29 1209.29 L1638.7 1209.29 L1638.12 1209.29 L1637.53 1209.29 L1636.94 1209.29 L1636.36 1209.29 L1635.77 1209.29 L1635.18 1209.29 L1634.6 1209.29 L1634.01 1209.29 L1633.42 1209.29 L1632.84 1209.29 L1632.25 1209.29 L1631.67 1209.29 L1631.08 1209.29 L1630.49 1209.29 L1629.91 1209.29 L1629.32 1209.29 L1628.73 1209.29 L1628.15 1209.29 L1627.56 1209.29 L1626.97 1209.29 L1626.39 1209.29 L1625.8 1209.29 L1625.22 1209.29 L1624.63 1209.29 L1624.04 1209.29 L1623.46 1209.29 L1622.87 1209.29 L1622.28 1209.29 L1621.7 1209.29 L1621.11 1209.29 L1620.52 1209.29 L1619.94 1209.29 L1619.35 1209.29 L1618.76 1209.29 L1618.18 1209.29 L1617.59 1209.29 L1617.01 1209.29 L1616.42 1209.29 L1615.83 1209.29 L1615.25 1209.29 L1614.66 1209.29 L1614.07 1209.29 L1613.49 1209.29 L1612.9 1209.29 L1612.31 1209.29 L1611.73 1209.29 L1611.14 1209.29 L1610.55 1209.29 L1609.97 1209.29 L1609.38 1209.29 L1608.8 1209.29 L1608.21 1209.29 L1607.62 1209.29 L1607.04 1209.29 L1606.45 1209.29 L1605.86 1209.29 L1605.28 1209.29 L1604.69 1209.29 L1604.1 1209.29 L1603.52 1209.29 L1602.93 1209.29 L1602.34 1209.29 L1601.76 1209.29 L1601.17 1209.29 L1600.59 1209.29 L1600 1209.29 L1599.41 1209.29 L1598.83 1209.29 L1598.24 1209.29 L1597.65 1209.29 L1597.07 1209.29 L1596.48 1209.29 L1595.89 1209.29 L1595.31 1209.29 L1594.72 1209.29 L1594.14 1209.29 L1593.55 1209.29 L1592.96 1209.29 L1592.38 1209.29 L1591.79 1209.29 L1591.2 1209.29 L1590.62 1209.29 L1590.03 1209.29 L1589.44 1209.29 L1588.86 1209.29 L1588.27 1209.29 L1587.68 1209.29 L1587.1 1209.29 L1586.51 1209.29 L1585.93 1209.29 L1585.34 1209.29 L1584.75 1209.29 L1584.17 1209.29 L1583.58 1209.29 L1582.99 1209.29 L1582.41 1209.29 L1581.82 1209.29 L1581.23 1209.29 L1580.65 1209.29 L1580.06 1209.29 L1579.47 1209.29 L1578.89 1209.29 L1578.3 1209.29 L1577.72 1209.29 L1577.13 1209.29 L1576.54 1209.29 L1575.96 1209.29 L1575.37 1209.29 L1574.78 1209.29 L1574.2 1209.29 L1573.61 1209.29 L1573.02 1209.29 L1572.44 1209.29 L1571.85 1209.29 L1571.27 1209.29 L1570.68 1209.29 L1570.09 1209.29 L1569.51 1209.29 L1568.92 1209.29 L1568.33 1209.29 L1567.75 1209.29 L1567.16 1209.29 L1566.57 1209.29 L1565.99 1209.29 L1565.4 1209.29 L1564.81 1209.29 L1564.23 1209.29 L1563.64 1209.29 L1563.06 1209.29 L1562.47 1209.29 L1561.88 1209.29 L1561.3 1209.29 L1560.71 1209.29 L1560.12 1209.29 L1559.54 1209.29 L1558.95 1209.29 L1558.36 1209.29 L1557.78 1209.29 L1557.19 1209.29 L1556.6 1209.29 L1556.02 1209.29 L1555.43 1209.29 L1554.85 1209.29 L1554.26 1209.29 L1553.67 1209.29 L1553.09 1209.29 L1552.5 1209.29 L1551.91 1209.29 L1551.33 1209.29 L1550.74 1209.29 L1550.15 1209.29 L1549.57 1209.29 L1548.98 1209.29 L1548.4 1209.29 L1547.81 1209.29 L1547.22 1209.29 L1546.64 1209.29 L1546.05 1209.29 L1545.46 1209.29 L1544.88 1209.29 L1544.29 1209.29 L1543.7 1209.29 L1543.12 1209.29 L1542.53 1209.29 L1541.94 1209.29 L1541.36 1209.29 L1540.77 1209.29 L1540.19 1209.29 L1539.6 1209.29 L1539.01 1209.29 L1538.43 1209.29 L1537.84 1209.29 L1537.25 1209.29 L1536.67 1209.29 L1536.08 1209.29 L1535.49 1209.29 L1534.91 1209.29 L1534.32 1209.29 L1533.73 1209.29 L1533.15 1209.29 L1532.56 1209.29 L1531.98 1209.29 L1531.39 1209.29 L1530.8 1209.29 L1530.22 1209.29 L1529.63 1209.29 L1529.04 1209.29 L1528.46 1209.29 L1527.87 1209.29 L1527.28 1209.29 L1526.7 1209.29 L1526.11 1209.29 L1525.52 1209.29 L1524.94 1209.29 L1524.35 1209.29 L1523.77 1209.29 L1523.18 1209.29 L1522.59 1209.29 L1522.01 1209.29 L1521.42 1209.29 L1520.83 1209.29 L1520.25 1209.29 L1519.66 1209.29 L1519.07 1209.29 L1518.49 1209.29 L1517.9 1209.29 L1517.32 1209.29 L1516.73 1209.29 L1516.14 1209.29 L1515.56 1209.29 L1514.97 1209.29 L1514.38 1209.29 L1513.8 1209.29 L1513.21 1209.29 L1512.62 1209.29 L1512.04 1209.29 L1511.45 1209.29 L1510.86 1209.29 L1510.28 1209.29 L1509.69 1209.29 L1509.11 1209.29 L1508.52 1209.29 L1507.93 1209.29 L1507.35 1209.29 L1506.76 1209.29 L1506.17 1209.29 L1505.59 1209.29 L1505 1209.29 L1504.41 1209.29 L1503.83 1209.29 L1503.24 1209.29 L1502.65 1209.29 L1502.07 1209.29 L1501.48 1209.29 L1500.9 1209.29 L1500.31 1209.29 L1499.72 1209.29 L1499.14 1209.29 L1498.55 1209.29 L1497.96 1209.29 L1497.38 1209.29 L1496.79 1209.29 L1496.2 1209.29 L1495.62 1209.29 L1495.03 1209.29 L1494.45 1209.29 L1493.86 1209.29 L1493.27 1209.29 L1492.69 1209.29 L1492.1 1209.29 L1491.51 1209.29 L1490.93 1209.29 L1490.34 1209.29 L1489.75 1209.29 L1489.17 1209.29 L1488.58 1209.29 L1487.99 1209.29 L1487.41 1209.29 L1486.82 1209.29 L1486.24 1209.29 L1485.65 1209.29 L1485.06 1209.29 L1484.48 1209.29 L1483.89 1209.29 L1483.3 1209.29 L1482.72 1209.29 L1482.13 1209.29 L1481.54 1209.29 L1480.96 1209.29 L1480.37 1209.29 L1479.78 1209.29 L1479.2 1209.29 L1478.61 1209.29 L1478.03 1209.29 L1477.44 1209.29 L1476.85 1209.29 L1476.27 1209.29 L1475.68 1209.29 L1475.09 1209.29 L1474.51 1209.29 L1473.92 1209.29 L1473.33 1209.29 L1472.75 1209.29 L1472.16 1209.29 L1471.57 1209.29 L1470.99 1209.29 L1470.4 1209.29 L1469.82 1209.29 L1469.23 1209.29 L1468.64 1209.29 L1468.06 1209.29 L1467.47 1209.29 L1466.88 1209.29 L1466.3 1209.29 L1465.71 1209.29 L1465.12 1209.29 L1464.54 1209.29 L1463.95 1209.29 L1463.37 1209.29 L1462.78 1209.29 L1462.19 1209.29 L1461.61 1209.29 L1461.02 1209.29 L1460.43 1209.29 L1459.85 1209.29 L1459.26 1209.29 L1458.67 1209.29 L1458.09 1209.29 L1457.5 1209.29 L1456.91 1209.29 L1456.33 1209.29 L1455.74 1209.29 L1455.16 1209.29 L1454.57 1209.29 L1453.98 1209.29 L1453.4 1209.29 L1452.81 1209.29 L1452.22 1209.29 L1451.64 1209.29 L1451.05 1209.29 L1450.46 1209.29 L1449.88 1209.29 L1449.29 1209.29 L1448.7 1209.29 L1448.12 1209.29 L1447.53 1209.29 L1446.95 1209.29 L1446.36 1209.29 L1445.77 1209.29 L1445.19 1209.29 L1444.6 1209.29 L1444.01 1209.29 L1443.43 1209.29 L1442.84 1209.29 L1442.25 1209.29 L1441.67 1209.29 L1441.08 1209.29 L1440.5 1209.29 L1439.91 1209.29 L1439.32 1209.29 L1438.74 1209.29 L1438.15 1209.29 L1437.56 1209.29 L1436.98 1209.29 L1436.39 1209.29 L1435.8 1209.29 L1435.22 1209.29 L1434.63 1209.29 L1434.04 1209.29 L1433.46 1209.29 L1432.87 1209.29 L1432.29 1209.29 L1431.7 1209.29 L1431.11 1209.29 L1430.53 1209.29 L1429.94 1209.29 L1429.35 1209.29 L1428.77 1209.29 L1428.18 1209.29 L1427.59 1209.29 L1427.01 1209.29 L1426.42 1209.29 L1425.83 1209.29 L1425.25 1209.29 L1424.66 1209.29 L1424.08 1209.29 L1423.49 1209.29 L1422.9 1209.29 L1422.32 1209.29 L1421.73 1209.29 L1421.14 1209.29 L1420.56 1209.29 L1419.97 1209.29 L1419.38 1209.29 L1418.8 1209.29 L1418.21 1209.29 L1417.63 1209.29 L1417.04 1209.29 L1416.45 1209.29 L1415.87 1209.29 L1415.28 1209.29 L1414.69 1209.29 L1414.11 1209.29 L1413.52 1209.29 L1412.93 1209.29 L1412.35 1209.29 L1411.76 1209.29 L1411.17 1209.29 L1410.59 1209.29 L1410 1209.29 L1409.42 1209.29 L1408.83 1209.29 L1408.24 1209.29 L1407.66 1209.29 L1407.07 1209.29 L1406.48 1209.29 L1405.9 1209.29 L1405.31 1209.29 L1404.72 1209.29 L1404.14 1209.29 L1403.55 1209.29 L1402.96 1209.29 L1402.38 1209.29 L1401.79 1209.29 L1401.21 1209.29 L1400.62 1209.29 L1400.03 1209.29 L1399.45 1209.29 L1398.86 1209.29 L1398.27 1209.29 L1397.69 1209.29 L1397.1 1209.29 L1396.51 1209.29 L1395.93 1209.29 L1395.34 1209.29 L1394.75 1209.29 L1394.17 1209.29 L1393.58 1209.29 L1393 1209.29 L1392.41 1209.29 L1391.82 1209.29 L1391.24 1209.29 L1390.65 1209.29 L1390.06 1209.29 L1389.48 1209.29 L1388.89 1209.29 L1388.3 1209.29 L1387.72 1209.29 L1387.13 1209.29 L1386.55 1209.29 L1385.96 1209.29 L1385.37 1209.29 L1384.79 1209.29 L1384.2 1209.29 L1383.61 1209.29 L1383.03 1209.29 L1382.44 1209.29 L1381.85 1209.29 L1381.27 1209.29 L1380.68 1209.29 L1380.09 1209.29 L1379.51 1209.29 L1378.92 1209.29 L1378.34 1209.29 L1377.75 1209.29 L1377.16 1209.29 L1376.58 1209.29 L1375.99 1209.29 L1375.4 1209.29 L1374.82 1209.29 L1374.23 1209.29 L1373.64 1209.29 L1373.06 1209.29 L1372.47 1209.29 L1371.88 1209.29 L1371.3 1209.29 L1370.71 1209.29 L1370.13 1209.29 L1369.54 1209.29 L1368.95 1209.29 L1368.37 1209.29 L1367.78 1209.29 L1367.19 1209.29 L1366.61 1209.29 L1366.02 1209.29 L1365.43 1209.29 L1364.85 1209.29 L1364.26 1209.29 L1363.68 1209.29 L1363.09 1209.29 L1362.5 1209.29 L1361.92 1209.29 L1361.33 1209.29 L1360.74 1209.29 L1360.16 1209.29 L1359.57 1209.29 L1358.98 1209.29 L1358.4 1209.29 L1357.81 1209.29 L1357.22 1209.29 L1356.64 1209.29 L1356.05 1209.29 L1355.47 1209.29 L1354.88 1209.29 L1354.29 1209.29 L1353.71 1209.29 L1353.12 1209.29 L1352.53 1209.29 L1351.95 1209.29 L1351.36 1209.29 L1350.77 1209.29 L1350.19 1209.29 L1349.6 1209.29 L1349.01 1209.29 L1348.43 1209.29 L1347.84 1209.29 L1347.26 1209.29 L1346.67 1209.29 L1346.08 1209.29 L1345.5 1209.29 L1344.91 1209.29 L1344.32 1209.29 L1343.74 1209.29 L1343.15 1209.29 L1342.56 1209.29 L1341.98 1209.29 L1341.39 1209.29 L1340.8 1209.29 L1340.22 1209.29 L1339.63 1209.29 L1339.05 1209.29 L1338.46 1209.29 L1337.87 1209.29 L1337.29 1209.29 L1336.7 1209.29 L1336.11 1209.29 L1335.53 1209.29 L1334.94 1209.29 L1334.35 1209.29 L1333.77 1209.29 L1333.18 1209.29 L1332.6 1209.29 L1332.01 1209.29 L1331.42 1209.29 L1330.84 1209.29 L1330.25 1209.29 L1329.66 1209.29 L1329.08 1209.29 L1328.49 1209.29 L1327.9 1209.29 L1327.32 1209.29 L1326.73 1209.29 L1326.14 1209.29 L1325.56 1209.29 L1324.97 1209.29 L1324.39 1209.29 L1323.8 1209.29 L1323.21 1209.29 L1322.63 1209.29 L1322.04 1209.29 L1321.45 1209.29 L1320.87 1209.29 L1320.28 1209.29 L1319.69 1209.29 L1319.11 1209.29 L1318.52 1209.29 L1317.93 1209.29 L1317.35 1209.29 L1316.76 1209.29 L1316.18 1209.29 L1315.59 1209.29 L1315 1209.29 L1314.42 1209.29 L1313.83 1209.29 L1313.24 1209.29 L1312.66 1209.29 L1312.07 1209.29 L1311.48 1209.29 L1310.9 1209.29 L1310.31 1209.29 L1309.73 1209.29 L1309.14 1209.29 L1308.55 1209.29 L1307.97 1209.29 L1307.38 1209.29 L1306.79 1209.29 L1306.21 1209.29 L1305.62 1209.29 L1305.03 1209.29 L1304.45 1209.29 L1303.86 1209.29 L1303.27 1209.29 L1302.69 1209.29 L1302.1 1209.29 L1301.52 1209.29 L1300.93 1209.29 L1300.34 1209.29 L1299.76 1209.29 L1299.17 1209.29 L1298.58 1209.29 L1298 1209.29 L1297.41 1209.29 L1296.82 1209.29 L1296.24 1209.29 L1295.65 1209.29 L1295.06 1209.29 L1294.48 1209.29 L1293.89 1209.29 L1293.31 1209.29 L1292.72 1209.29 L1292.13 1209.29 L1291.55 1209.29 L1290.96 1209.29 L1290.37 1209.29 L1289.79 1209.29 L1289.2 1209.29 L1288.61 1209.29 L1288.03 1209.29 L1287.44 1209.29 L1286.86 1209.29 L1286.27 1209.29 L1285.68 1209.29 L1285.1 1209.29 L1284.51 1209.29 L1283.92 1209.29 L1283.34 1209.29 L1282.75 1209.29 L1282.16 1209.29 L1281.58 1209.29 L1280.99 1209.29 L1280.4 1209.29 L1279.82 1209.29 L1279.23 1209.29 L1278.65 1209.29 L1278.06 1209.29 L1277.47 1209.29 L1276.89 1209.29 L1276.3 1209.29 L1275.71 1209.29 L1275.13 1209.29 L1274.54 1209.29 L1273.95 1209.29 L1273.37 1209.29 L1272.78 1209.29 L1272.19 1209.29 L1271.61 1209.29 L1271.02 1209.29 L1270.44 1209.29 L1269.85 1209.29 L1269.26 1209.29 L1268.68 1209.29 L1268.09 1209.29 L1267.5 1209.29 L1266.92 1209.29 L1266.33 1209.29 L1265.74 1209.29 L1265.16 1209.29 L1264.57 1209.29 L1263.98 1209.29 L1263.4 1209.29 L1262.81 1209.29 L1262.23 1209.29 L1261.64 1209.29 L1261.05 1209.29 L1260.47 1209.29 L1259.88 1209.29 L1259.29 1209.29 L1258.71 1209.29 L1258.12 1209.29 L1257.53 1209.29 L1256.95 1209.29 L1256.36 1209.29 L1255.78 1209.29 L1255.19 1209.29 L1254.6 1209.29 L1254.02 1209.29 L1253.43 1209.29 L1252.84 1209.29 L1252.26 1209.29 L1251.67 1209.29 L1251.08 1209.29 L1250.5 1209.29 L1249.91 1209.29 L1249.32 1209.29 L1248.74 1209.29 L1248.15 1209.29 L1247.57 1209.29 L1246.98 1209.29 L1246.39 1209.29 L1245.81 1209.29 L1245.22 1209.29 L1244.63 1209.29 L1244.05 1209.29 L1243.46 1209.29 L1242.87 1209.29 L1242.29 1209.29 L1241.7 1209.29 L1241.11 1209.29 L1240.53 1209.29 L1239.94 1209.29 L1239.36 1209.29 L1238.77 1209.29 L1238.18 1209.29 L1237.6 1209.29 L1237.01 1209.29 L1236.42 1209.29 L1235.84 1209.29 L1235.25 1209.29 L1234.66 1209.29 L1234.08 1209.29 L1233.49 1209.29 L1232.91 1209.29 L1232.32 1209.29 L1231.73 1209.29 L1231.15 1209.29 L1230.56 1209.29 L1229.97 1209.29 L1229.39 1209.29 L1228.8 1209.29 L1228.21 1209.29 L1227.63 1209.29 L1227.04 1209.29 L1226.45 1209.29 L1225.87 1209.29 L1225.28 1209.29 L1224.7 1209.29 L1224.11 1209.29 L1223.52 1209.29 L1222.94 1209.29 L1222.35 1209.29 L1221.76 1209.29 L1221.18 1209.29 L1220.59 1209.29 L1220 1209.29 L1219.42 1209.29 L1218.83 1209.29 L1218.24 1209.29 L1217.66 1209.29 L1217.07 1209.29 L1216.49 1209.29 L1215.9 1209.29 L1215.31 1209.29 L1214.73 1209.29 L1214.14 1209.29 L1213.55 1209.29 L1212.97 1209.29 L1212.38 1209.29 L1211.79 1209.29 L1211.21 1209.29 L1210.62 1209.29 L1210.03 1209.29 L1209.45 1209.29 L1208.86 1209.29 L1208.28 1209.29 L1207.69 1209.29 L1207.1 1209.29 L1206.52 1209.29 L1205.93 1209.29 L1205.34 1209.29 L1204.76 1209.29 L1204.17 1209.29 L1203.58 1209.29 L1203 1209.29 L1202.41 1209.29 L1201.83 1209.29 L1201.24 1209.29 L1200.65 1209.29 L1200.07 1209.29 L1199.48 1209.29 L1198.89 1209.29 L1198.31 1209.29 L1197.72 1209.29 L1197.13 1209.29 L1196.55 1209.29 L1195.96 1209.29 L1195.37 1209.29 L1194.79 1209.29 L1194.2 1209.29 L1193.62 1209.29 L1193.03 1209.29 L1192.44 1209.29 L1191.86 1209.29 L1191.27 1209.29 L1190.68 1209.29 L1190.1 1209.29 L1189.51 1209.29 L1188.92 1209.29 L1188.34 1209.29 L1187.75 1209.29 L1187.16 1209.29 L1186.58 1209.29 L1185.99 1209.29 L1185.41 1209.29 L1184.82 1209.29 L1184.23 1209.29 L1183.65 1209.29 L1183.06 1209.29 L1182.47 1209.29 L1181.89 1209.29 L1181.3 1209.29 L1180.71 1209.29 L1180.13 1209.29 L1179.54 1209.29 L1178.96 1209.29 L1178.37 1209.29 L1177.78 1209.29 L1177.2 1209.29 L1176.61 1209.29 L1176.02 1209.29 L1175.44 1209.29 L1174.85 1209.29 L1174.26 1209.29 L1173.68 1209.29 L1173.09 1209.29 L1172.5 1209.29 L1171.92 1209.29 L1171.33 1209.29 L1170.75 1209.29 L1170.16 1209.29 L1169.57 1209.29 L1168.99 1209.29 L1168.4 1209.29 L1167.81 1209.29 L1167.23 1209.29 L1166.64 1209.29 L1166.05 1209.29 L1165.47 1209.29 L1164.88 1209.29 L1164.29 1209.29 L1163.71 1209.29 L1163.12 1209.29 L1162.54 1209.29 L1161.95 1209.29 L1161.36 1209.29 L1160.78 1209.29 L1160.19 1209.29 L1159.6 1209.29 L1159.02 1209.29 L1158.43 1209.29 L1157.84 1209.29 L1157.26 1209.29 L1156.67 1209.29 L1156.09 1209.29 L1155.5 1209.29 L1154.91 1209.29 L1154.33 1209.29 L1153.74 1209.29 L1153.15 1209.29 L1152.57 1209.29 L1151.98 1209.29 L1151.39 1209.29 L1150.81 1209.29 L1150.22 1209.29 L1149.63 1209.29 L1149.05 1209.29 L1148.46 1209.29 L1147.88 1209.29 L1147.29 1209.29 L1146.7 1209.29 L1146.12 1209.29 L1145.53 1209.29 L1144.94 1209.29 L1144.36 1209.29 L1143.77 1209.29 L1143.18 1209.29 L1142.6 1209.29 L1142.01 1209.29 L1141.42 1209.29 L1140.84 1209.29 L1140.25 1209.29 L1139.67 1209.29 L1139.08 1209.29 L1138.49 1209.29 L1137.91 1209.29 L1137.32 1209.29 L1136.73 1209.29 L1136.15 1209.29 L1135.56 1209.29 L1134.97 1209.29 L1134.39 1209.29 L1133.8 1209.29 L1133.21 1209.29 L1132.63 1209.29 L1132.04 1209.29 L1131.46 1209.29 L1130.87 1209.29 L1130.28 1209.29 L1129.7 1209.29 L1129.11 1209.29 L1128.52 1209.29 L1127.94 1209.29 L1127.35 1209.29 L1126.76 1209.29 L1126.18 1209.29 L1125.59 1209.29 L1125.01 1209.29 L1124.42 1209.29 L1123.83 1209.29 L1123.25 1209.29 L1122.66 1209.29 L1122.07 1209.29 L1121.49 1209.29 L1120.9 1209.29 L1120.31 1209.29 L1119.73 1209.29 L1119.14 1209.29 L1118.55 1209.29 L1117.97 1209.29 L1117.38 1209.29 L1116.8 1209.29 L1116.21 1209.29 L1115.62 1209.29 L1115.04 1209.29 L1114.45 1209.29 L1113.86 1209.29 L1113.28 1209.29 L1112.69 1209.29 L1112.1 1209.29 L1111.52 1209.29 L1110.93 1209.29 L1110.34 1209.29 L1109.76 1209.29 L1109.17 1209.29 L1108.59 1209.29 L1108 1209.29 L1107.41 1209.29 L1106.83 1209.29 L1106.24 1209.29 L1105.65 1209.29 L1105.07 1209.29 L1104.48 1209.29 L1103.89 1209.29 L1103.31 1209.29 L1102.72 1209.29 L1102.14 1209.29 L1101.55 1209.29 L1100.96 1209.29 L1100.38 1209.29 L1099.79 1209.29 L1099.2 1209.29 L1098.62 1209.29 L1098.03 1209.29 L1097.44 1209.29 L1096.86 1209.29 L1096.27 1209.29 L1095.68 1209.29 L1095.1 1209.29 L1094.51 1209.29 L1093.93 1209.29 L1093.34 1209.29 L1092.75 1209.29 L1092.17 1209.29 L1091.58 1209.29 L1090.99 1209.29 L1090.41 1209.29 L1089.82 1209.29 L1089.23 1209.29 L1088.65 1209.29 L1088.06 1209.29 L1087.47 1209.29 L1086.89 1209.29 L1086.3 1209.29 L1085.72 1209.29 L1085.13 1209.29 L1084.54 1209.29 L1083.96 1209.29 L1083.37 1209.29 L1082.78 1209.29 L1082.2 1209.29 L1081.61 1209.29 L1081.02 1209.29 L1080.44 1209.29 L1079.85 1209.29 L1079.26 1209.29 L1078.68 1209.29 L1078.09 1209.29 L1077.51 1209.29 L1076.92 1209.29 L1076.33 1209.29 L1075.75 1209.29 L1075.16 1209.29 L1074.57 1209.29 L1073.99 1209.29 L1073.4 1209.29 L1072.81 1209.29 L1072.23 1209.29 L1071.64 1209.29 L1071.06 1209.29 L1070.47 1209.29 L1069.88 1209.29 L1069.3 1209.29 L1068.71 1209.29 L1068.12 1209.29 L1067.54 1209.29 L1066.95 1209.29 L1066.36 1209.29 L1065.78 1209.29 L1065.19 1209.29 L1064.6 1209.29 L1064.02 1209.29 L1063.43 1209.29 L1062.85 1209.29 L1062.26 1209.29 L1061.67 1209.29 L1061.09 1209.29 L1060.5 1209.29 L1059.91 1209.29 L1059.33 1209.29 L1058.74 1209.29 L1058.15 1209.29 L1057.57 1209.29 L1056.98 1209.29 L1056.39 1209.29 L1055.81 1209.29 L1055.22 1209.29 L1054.64 1209.29 L1054.05 1209.29 L1053.46 1209.29 L1052.88 1209.29 L1052.29 1209.29 L1051.7 1209.29 L1051.12 1209.29 L1050.53 1209.29 L1049.94 1209.29 L1049.36 1209.29 L1048.77 1209.29 L1048.19 1209.29 L1047.6 1209.29 L1047.01 1209.29 L1046.43 1209.29 L1045.84 1209.29 L1045.25 1209.29 L1044.67 1209.29 L1044.08 1209.29 L1043.49 1209.29 L1042.91 1209.29 L1042.32 1209.29 L1041.73 1209.29 L1041.15 1209.29 L1040.56 1209.29 L1039.98 1209.29 L1039.39 1209.29 L1038.8 1209.29 L1038.22 1209.29 L1037.63 1209.29 L1037.04 1209.29 L1036.46 1209.29 L1035.87 1209.29 L1035.28 1209.29 L1034.7 1209.29 L1034.11 1209.29 L1033.52 1209.29 L1032.94 1209.29 L1032.35 1209.29 L1031.77 1209.29 L1031.18 1209.29 L1030.59 1209.29 L1030.01 1209.29 L1029.42 1209.29 L1028.83 1209.29 L1028.25 1209.29 L1027.66 1209.29 L1027.07 1209.29 L1026.49 1209.29 L1025.9 1209.29 L1025.32 1209.29 L1024.73 1209.29 L1024.14 1209.29 L1023.56 1209.29 L1022.97 1209.29 L1022.38 1209.29 L1021.8 1209.29 L1021.21 1209.29 L1020.62 1209.29 L1020.04 1209.29 L1019.45 1209.29 L1018.86 1209.29 L1018.28 1209.29 L1017.69 1209.29 L1017.11 1209.29 L1016.52 1209.29 L1015.93 1209.29 L1015.35 1209.29 L1014.76 1209.29 L1014.17 1209.29 L1013.59 1209.29 L1013 1209.29 L1012.41 1209.29 L1011.83 1209.29 L1011.24 1209.29 L1010.65 1209.29 L1010.07 1209.29 L1009.48 1209.29 L1008.9 1209.29 L1008.31 1209.29 L1007.72 1209.29 L1007.14 1209.29 L1006.55 1209.29 L1005.96 1209.29 L1005.38 1209.29 L1004.79 1209.29 L1004.2 1209.29 L1003.62 1209.29 L1003.03 1209.29 L1002.44 1209.29 L1001.86 1209.29 L1001.27 1209.29 L1000.69 1209.29 L1000.1 1209.29 L999.513 1209.29 L998.926 1209.29 L998.34 1209.29 L997.754 1209.29 L997.167 1209.29 L996.581 1209.29 L995.994 1209.29 L995.408 1209.29 L994.822 1209.29 L994.235 1209.29 L993.649 1209.29 L993.062 1209.29 L992.476 1209.29 L991.889 1209.29 L991.303 1209.29 L990.717 1209.29 L990.13 1209.29 L989.544 1209.29 L988.957 1209.29 L988.371 1209.29 L987.785 1209.29 L987.198 1209.29 L986.612 1209.29 L986.025 1209.29  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.37 986.612,1209.37 987.198,1209.37 987.785,1209.37 988.371,1209.37 988.957,1209.37 989.544,1209.37 990.13,1209.37 990.717,1209.37 991.303,1209.37 991.889,1209.37 992.476,1209.37 993.062,1209.37 993.649,1209.37 994.235,1209.37 994.822,1209.37 995.408,1209.37 995.994,1209.37 996.581,1209.37 997.167,1209.37 997.754,1209.37 998.34,1209.37 998.926,1209.37 999.513,1209.37 1000.1,1209.37 1000.69,1209.37 1001.27,1209.37 1001.86,1209.37 1002.44,1209.37 1003.03,1209.37 1003.62,1209.37 1004.2,1209.37 1004.79,1209.37 1005.38,1209.37 1005.96,1209.37 1006.55,1209.37 1007.14,1209.37 1007.72,1209.37 1008.31,1209.37 1008.9,1209.37 1009.48,1209.37 1010.07,1209.37 1010.65,1209.37 1011.24,1209.37 1011.83,1209.37 1012.41,1209.37 1013,1209.37 1013.59,1209.37 1014.17,1209.37 1014.76,1209.37 1015.35,1209.37 1015.93,1209.37 1016.52,1209.37 1017.11,1209.37 1017.69,1209.37 1018.28,1209.37 1018.86,1209.37 1019.45,1209.37 1020.04,1209.37 1020.62,1209.37 1021.21,1209.37 1021.8,1209.37 1022.38,1209.37 1022.97,1209.37 1023.56,1209.37 1024.14,1209.37 1024.73,1209.37 1025.32,1209.37 1025.9,1209.37 1026.49,1209.37 1027.07,1209.37 1027.66,1209.37 1028.25,1209.37 1028.83,1209.37 1029.42,1209.37 1030.01,1209.37 1030.59,1209.37 1031.18,1209.37 1031.77,1209.37 1032.35,1209.37 1032.94,1209.37 1033.52,1209.37 1034.11,1209.37 1034.7,1209.37 1035.28,1209.37 1035.87,1209.37 1036.46,1209.37 1037.04,1209.37 1037.63,1209.37 1038.22,1209.37 1038.8,1209.37 1039.39,1209.37 1039.98,1209.37 1040.56,1209.37 1041.15,1209.37 1041.73,1209.37 1042.32,1209.37 1042.91,1209.37 1043.49,1209.37 1044.08,1209.37 1044.67,1209.37 1045.25,1209.37 1045.84,1209.37 1046.43,1209.37 1047.01,1209.37 1047.6,1209.37 1048.19,1209.37 1048.77,1209.37 1049.36,1209.37 1049.94,1209.37 1050.53,1209.37 1051.12,1209.37 1051.7,1209.37 1052.29,1209.37 1052.88,1209.37 1053.46,1209.37 1054.05,1209.37 1054.64,1209.37 1055.22,1209.37 1055.81,1209.37 1056.39,1209.37 1056.98,1209.37 1057.57,1209.37 1058.15,1209.37 1058.74,1209.37 1059.33,1209.37 1059.91,1209.37 1060.5,1209.37 1061.09,1209.37 1061.67,1209.37 1062.26,1209.37 1062.85,1209.37 1063.43,1209.37 1064.02,1209.37 1064.6,1209.37 1065.19,1209.37 1065.78,1209.37 1066.36,1209.37 1066.95,1209.37 1067.54,1209.37 1068.12,1209.37 1068.71,1209.37 1069.3,1209.37 1069.88,1209.37 1070.47,1209.37 1071.06,1209.37 1071.64,1209.37 1072.23,1209.37 1072.81,1209.37 1073.4,1209.37 1073.99,1209.37 1074.57,1209.37 1075.16,1209.37 1075.75,1209.37 1076.33,1209.37 1076.92,1209.37 1077.51,1209.37 1078.09,1209.37 1078.68,1209.37 1079.26,1209.37 1079.85,1209.37 1080.44,1209.37 1081.02,1209.37 1081.61,1209.37 1082.2,1209.37 1082.78,1209.37 1083.37,1209.37 1083.96,1209.37 1084.54,1209.37 1085.13,1209.37 1085.72,1209.37 1086.3,1209.37 1086.89,1209.37 1087.47,1209.37 1088.06,1209.37 1088.65,1209.37 1089.23,1209.37 1089.82,1209.37 1090.41,1209.37 1090.99,1209.37 1091.58,1209.37 1092.17,1209.37 1092.75,1209.37 1093.34,1209.37 1093.93,1209.37 1094.51,1209.37 1095.1,1209.37 1095.68,1209.37 1096.27,1209.37 1096.86,1209.37 1097.44,1209.37 1098.03,1209.37 1098.62,1209.37 1099.2,1209.37 1099.79,1209.37 1100.38,1209.37 1100.96,1209.37 1101.55,1209.37 1102.14,1209.37 1102.72,1209.37 1103.31,1209.37 1103.89,1209.37 1104.48,1209.37 1105.07,1209.37 1105.65,1209.37 1106.24,1209.37 1106.83,1209.37 1107.41,1209.37 1108,1209.37 1108.59,1209.37 1109.17,1209.37 1109.76,1209.37 1110.34,1209.37 1110.93,1209.37 1111.52,1209.37 1112.1,1209.37 1112.69,1209.37 1113.28,1209.37 1113.86,1209.37 1114.45,1209.37 1115.04,1209.37 1115.62,1209.37 1116.21,1209.37 1116.8,1209.37 1117.38,1209.37 1117.97,1209.37 1118.55,1209.37 1119.14,1209.37 1119.73,1209.37 1120.31,1209.37 1120.9,1209.37 1121.49,1209.37 1122.07,1209.37 1122.66,1209.37 1123.25,1209.37 1123.83,1209.37 1124.42,1209.37 1125.01,1209.37 1125.59,1209.37 1126.18,1209.37 1126.76,1209.37 1127.35,1209.37 1127.94,1209.37 1128.52,1209.37 1129.11,1209.37 1129.7,1209.37 1130.28,1209.37 1130.87,1209.37 1131.46,1209.37 1132.04,1209.37 1132.63,1209.37 1133.21,1209.37 1133.8,1209.37 1134.39,1209.37 1134.97,1209.37 1135.56,1209.37 1136.15,1209.37 1136.73,1209.37 1137.32,1209.37 1137.91,1209.37 1138.49,1209.37 1139.08,1209.37 1139.67,1209.37 1140.25,1209.37 1140.84,1209.37 1141.42,1209.37 1142.01,1209.37 1142.6,1209.37 1143.18,1209.37 1143.77,1209.37 1144.36,1209.37 1144.94,1209.37 1145.53,1209.37 1146.12,1209.37 1146.7,1209.37 1147.29,1209.37 1147.88,1209.37 1148.46,1209.37 1149.05,1209.37 1149.63,1209.37 1150.22,1209.37 1150.81,1209.37 1151.39,1209.37 1151.98,1209.37 1152.57,1209.37 1153.15,1209.37 1153.74,1209.37 1154.33,1209.37 1154.91,1209.37 1155.5,1209.37 1156.09,1209.37 1156.67,1209.37 1157.26,1209.37 1157.84,1209.37 1158.43,1209.37 1159.02,1209.37 1159.6,1209.37 1160.19,1209.37 1160.78,1209.37 1161.36,1209.37 1161.95,1209.37 1162.54,1209.37 1163.12,1209.37 1163.71,1209.37 1164.29,1209.37 1164.88,1209.37 1165.47,1209.37 1166.05,1209.37 1166.64,1209.37 1167.23,1209.37 1167.81,1209.37 1168.4,1209.37 1168.99,1209.37 1169.57,1209.37 1170.16,1209.37 1170.75,1209.37 1171.33,1209.37 1171.92,1209.37 1172.5,1209.37 1173.09,1209.37 1173.68,1209.37 1174.26,1209.37 1174.85,1209.37 1175.44,1209.37 1176.02,1209.37 1176.61,1209.37 1177.2,1209.37 1177.78,1209.37 1178.37,1209.37 1178.96,1209.37 1179.54,1209.37 1180.13,1209.37 1180.71,1209.37 1181.3,1209.37 1181.89,1209.37 1182.47,1209.37 1183.06,1209.37 1183.65,1209.37 1184.23,1209.37 1184.82,1209.37 1185.41,1209.37 1185.99,1209.37 1186.58,1209.37 1187.16,1209.37 1187.75,1209.37 1188.34,1209.37 1188.92,1209.37 1189.51,1209.37 1190.1,1209.37 1190.68,1209.37 1191.27,1209.37 1191.86,1209.37 1192.44,1209.37 1193.03,1209.37 1193.62,1209.37 1194.2,1209.37 1194.79,1209.37 1195.37,1209.37 1195.96,1209.37 1196.55,1209.37 1197.13,1209.37 1197.72,1209.37 1198.31,1209.37 1198.89,1209.37 1199.48,1209.37 1200.07,1209.37 1200.65,1209.37 1201.24,1209.37 1201.83,1209.37 1202.41,1209.37 1203,1209.37 1203.58,1209.37 1204.17,1209.37 1204.76,1209.37 1205.34,1209.37 1205.93,1209.37 1206.52,1209.37 1207.1,1209.37 1207.69,1209.37 1208.28,1209.37 1208.86,1209.37 1209.45,1209.37 1210.03,1209.37 1210.62,1209.37 1211.21,1209.37 1211.79,1209.37 1212.38,1209.37 1212.97,1209.37 1213.55,1209.37 1214.14,1209.37 1214.73,1209.37 1215.31,1209.37 1215.9,1209.37 1216.49,1209.37 1217.07,1209.37 1217.66,1209.37 1218.24,1209.37 1218.83,1209.37 1219.42,1209.37 1220,1209.37 1220.59,1209.37 1221.18,1209.37 1221.76,1209.37 1222.35,1209.37 1222.94,1209.37 1223.52,1209.37 1224.11,1209.37 1224.7,1209.37 1225.28,1209.37 1225.87,1209.37 1226.45,1209.37 1227.04,1209.37 1227.63,1209.37 1228.21,1209.37 1228.8,1209.37 1229.39,1209.37 1229.97,1209.37 1230.56,1209.37 1231.15,1209.37 1231.73,1209.37 1232.32,1209.37 1232.91,1209.37 1233.49,1209.37 1234.08,1209.37 1234.66,1209.37 1235.25,1209.37 1235.84,1209.37 1236.42,1209.37 1237.01,1209.37 1237.6,1209.37 1238.18,1209.37 1238.77,1209.37 1239.36,1209.37 1239.94,1209.37 1240.53,1209.37 1241.11,1209.37 1241.7,1209.37 1242.29,1209.37 1242.87,1209.37 1243.46,1209.37 1244.05,1209.37 1244.63,1209.37 1245.22,1209.37 1245.81,1209.37 1246.39,1209.37 1246.98,1209.37 1247.57,1209.37 1248.15,1209.37 1248.74,1209.37 1249.32,1209.37 1249.91,1209.37 1250.5,1209.37 1251.08,1209.37 1251.67,1209.37 1252.26,1209.37 1252.84,1209.37 1253.43,1209.37 1254.02,1209.37 1254.6,1209.37 1255.19,1209.37 1255.78,1209.37 1256.36,1209.37 1256.95,1209.37 1257.53,1209.37 1258.12,1209.37 1258.71,1209.37 1259.29,1209.37 1259.88,1209.37 1260.47,1209.37 1261.05,1209.37 1261.64,1209.37 1262.23,1209.37 1262.81,1209.37 1263.4,1209.37 1263.98,1209.37 1264.57,1209.37 1265.16,1209.37 1265.74,1209.37 1266.33,1209.37 1266.92,1209.37 1267.5,1209.37 1268.09,1209.37 1268.68,1209.37 1269.26,1209.37 1269.85,1209.37 1270.44,1209.37 1271.02,1209.37 1271.61,1209.37 1272.19,1209.37 1272.78,1209.37 1273.37,1209.37 1273.95,1209.37 1274.54,1209.37 1275.13,1209.37 1275.71,1209.37 1276.3,1209.37 1276.89,1209.37 1277.47,1209.37 1278.06,1209.37 1278.65,1209.37 1279.23,1209.37 1279.82,1209.37 1280.4,1209.37 1280.99,1209.37 1281.58,1209.37 1282.16,1209.37 1282.75,1209.37 1283.34,1209.37 1283.92,1209.37 1284.51,1209.37 1285.1,1209.37 1285.68,1209.37 1286.27,1209.37 1286.86,1209.37 1287.44,1209.37 1288.03,1209.37 1288.61,1209.37 1289.2,1209.37 1289.79,1209.37 1290.37,1209.37 1290.96,1209.37 1291.55,1209.37 1292.13,1209.37 1292.72,1209.37 1293.31,1209.37 1293.89,1209.37 1294.48,1209.37 1295.06,1209.37 1295.65,1209.37 1296.24,1209.37 1296.82,1209.37 1297.41,1209.37 1298,1209.37 1298.58,1209.37 1299.17,1209.37 1299.76,1209.37 1300.34,1209.37 1300.93,1209.37 1301.52,1209.37 1302.1,1209.37 1302.69,1209.37 1303.27,1209.37 1303.86,1209.37 1304.45,1209.37 1305.03,1209.37 1305.62,1209.37 1306.21,1209.37 1306.79,1209.37 1307.38,1209.37 1307.97,1209.37 1308.55,1209.37 1309.14,1209.37 1309.73,1209.37 1310.31,1209.37 1310.9,1209.37 1311.48,1209.37 1312.07,1209.37 1312.66,1209.37 1313.24,1209.37 1313.83,1209.37 1314.42,1209.37 1315,1209.37 1315.59,1209.37 1316.18,1209.37 1316.76,1209.37 1317.35,1209.37 1317.93,1209.37 1318.52,1209.37 1319.11,1209.37 1319.69,1209.37 1320.28,1209.37 1320.87,1209.37 1321.45,1209.37 1322.04,1209.37 1322.63,1209.37 1323.21,1209.37 1323.8,1209.37 1324.39,1209.37 1324.97,1209.37 1325.56,1209.37 1326.14,1209.37 1326.73,1209.37 1327.32,1209.37 1327.9,1209.37 1328.49,1209.37 1329.08,1209.37 1329.66,1209.37 1330.25,1209.37 1330.84,1209.37 1331.42,1209.37 1332.01,1209.37 1332.6,1209.37 1333.18,1209.37 1333.77,1209.37 1334.35,1209.37 1334.94,1209.37 1335.53,1209.37 1336.11,1209.37 1336.7,1209.37 1337.29,1209.37 1337.87,1209.37 1338.46,1209.37 1339.05,1209.37 1339.63,1209.37 1340.22,1209.37 1340.8,1209.37 1341.39,1209.37 1341.98,1209.37 1342.56,1209.37 1343.15,1209.37 1343.74,1209.37 1344.32,1209.37 1344.91,1209.37 1345.5,1209.37 1346.08,1209.37 1346.67,1209.37 1347.26,1209.37 1347.84,1209.37 1348.43,1209.37 1349.01,1209.37 1349.6,1209.37 1350.19,1209.37 1350.77,1209.37 1351.36,1209.37 1351.95,1209.37 1352.53,1209.37 1353.12,1209.37 1353.71,1209.37 1354.29,1209.37 1354.88,1209.37 1355.47,1209.37 1356.05,1209.37 1356.64,1209.37 1357.22,1209.37 1357.81,1209.37 1358.4,1209.37 1358.98,1209.37 1359.57,1209.37 1360.16,1209.37 1360.74,1209.37 1361.33,1209.37 1361.92,1209.37 1362.5,1209.37 1363.09,1209.37 1363.68,1209.37 1364.26,1209.37 1364.85,1209.37 1365.43,1209.37 1366.02,1209.37 1366.61,1209.37 1367.19,1209.37 1367.78,1209.37 1368.37,1209.37 1368.95,1209.37 1369.54,1209.37 1370.13,1209.37 1370.71,1209.37 1371.3,1209.37 1371.88,1209.37 1372.47,1209.37 1373.06,1209.37 1373.64,1209.37 1374.23,1209.37 1374.82,1209.37 1375.4,1209.37 1375.99,1209.37 1376.58,1209.37 1377.16,1209.37 1377.75,1209.37 1378.34,1209.37 1378.92,1209.37 1379.51,1209.37 1380.09,1209.37 1380.68,1209.37 1381.27,1209.37 1381.85,1209.37 1382.44,1209.37 1383.03,1209.37 1383.61,1209.37 1384.2,1209.37 1384.79,1209.37 1385.37,1209.37 1385.96,1209.37 1386.55,1209.37 1387.13,1209.37 1387.72,1209.37 1388.3,1209.37 1388.89,1209.37 1389.48,1209.37 1390.06,1209.37 1390.65,1209.37 1391.24,1209.37 1391.82,1209.37 1392.41,1209.37 1393,1209.37 1393.58,1209.37 1394.17,1209.37 1394.75,1209.37 1395.34,1209.37 1395.93,1209.37 1396.51,1209.37 1397.1,1209.37 1397.69,1209.37 1398.27,1209.37 1398.86,1209.37 1399.45,1209.37 1400.03,1209.37 1400.62,1209.37 1401.21,1209.37 1401.79,1209.37 1402.38,1209.37 1402.96,1209.37 1403.55,1209.37 1404.14,1209.37 1404.72,1209.37 1405.31,1209.37 1405.9,1209.37 1406.48,1209.37 1407.07,1209.37 1407.66,1209.37 1408.24,1209.37 1408.83,1209.37 1409.42,1209.37 1410,1209.37 1410.59,1209.37 1411.17,1209.37 1411.76,1209.37 1412.35,1209.37 1412.93,1209.37 1413.52,1209.37 1414.11,1209.37 1414.69,1209.37 1415.28,1209.37 1415.87,1209.37 1416.45,1209.37 1417.04,1209.37 1417.63,1209.37 1418.21,1209.37 1418.8,1209.37 1419.38,1209.37 1419.97,1209.37 1420.56,1209.37 1421.14,1209.37 1421.73,1209.37 1422.32,1209.37 1422.9,1209.37 1423.49,1209.37 1424.08,1209.37 1424.66,1209.37 1425.25,1209.37 1425.83,1209.37 1426.42,1209.37 1427.01,1209.37 1427.59,1209.37 1428.18,1209.37 1428.77,1209.37 1429.35,1209.37 1429.94,1209.37 1430.53,1209.37 1431.11,1209.37 1431.7,1209.37 1432.29,1209.37 1432.87,1209.37 1433.46,1209.37 1434.04,1209.37 1434.63,1209.37 1435.22,1209.37 1435.8,1209.37 1436.39,1209.37 1436.98,1209.37 1437.56,1209.37 1438.15,1209.37 1438.74,1209.37 1439.32,1209.37 1439.91,1209.37 1440.5,1209.37 1441.08,1209.37 1441.67,1209.37 1442.25,1209.37 1442.84,1209.37 1443.43,1209.37 1444.01,1209.37 1444.6,1209.37 1445.19,1209.37 1445.77,1209.37 1446.36,1209.37 1446.95,1209.37 1447.53,1209.37 1448.12,1209.37 1448.7,1209.37 1449.29,1209.37 1449.88,1209.37 1450.46,1209.37 1451.05,1209.37 1451.64,1209.37 1452.22,1209.37 1452.81,1209.37 1453.4,1209.37 1453.98,1209.37 1454.57,1209.37 1455.16,1209.37 1455.74,1209.37 1456.33,1209.37 1456.91,1209.37 1457.5,1209.37 1458.09,1209.37 1458.67,1209.37 1459.26,1209.37 1459.85,1209.37 1460.43,1209.37 1461.02,1209.37 1461.61,1209.37 1462.19,1209.37 1462.78,1209.37 1463.37,1209.37 1463.95,1209.37 1464.54,1209.37 1465.12,1209.37 1465.71,1209.37 1466.3,1209.37 1466.88,1209.37 1467.47,1209.37 1468.06,1209.37 1468.64,1209.37 1469.23,1209.37 1469.82,1209.37 1470.4,1209.37 1470.99,1209.37 1471.57,1209.37 1472.16,1209.37 1472.75,1209.37 1473.33,1209.37 1473.92,1209.37 1474.51,1209.37 1475.09,1209.37 1475.68,1209.37 1476.27,1209.37 1476.85,1209.37 1477.44,1209.37 1478.03,1209.37 1478.61,1209.37 1479.2,1209.37 1479.78,1209.37 1480.37,1209.37 1480.96,1209.37 1481.54,1209.37 1482.13,1209.37 1482.72,1209.37 1483.3,1209.37 1483.89,1209.37 1484.48,1209.37 1485.06,1209.37 1485.65,1209.37 1486.24,1209.37 1486.82,1209.37 1487.41,1209.37 1487.99,1209.37 1488.58,1209.37 1489.17,1209.37 1489.75,1209.37 1490.34,1209.37 1490.93,1209.37 1491.51,1209.37 1492.1,1209.37 1492.69,1209.37 1493.27,1209.37 1493.86,1209.37 1494.45,1209.37 1495.03,1209.37 1495.62,1209.37 1496.2,1209.37 1496.79,1209.37 1497.38,1209.37 1497.96,1209.37 1498.55,1209.37 1499.14,1209.37 1499.72,1209.37 1500.31,1209.37 1500.9,1209.37 1501.48,1209.37 1502.07,1209.37 1502.65,1209.37 1503.24,1209.37 1503.83,1209.37 1504.41,1209.37 1505,1209.37 1505.59,1209.37 1506.17,1209.37 1506.76,1209.37 1507.35,1209.37 1507.93,1209.37 1508.52,1209.37 1509.11,1209.37 1509.69,1209.37 1510.28,1209.37 1510.86,1209.37 1511.45,1209.37 1512.04,1209.37 1512.62,1209.37 1513.21,1209.37 1513.8,1209.37 1514.38,1209.37 1514.97,1209.37 1515.56,1209.37 1516.14,1209.37 1516.73,1209.37 1517.32,1209.37 1517.9,1209.37 1518.49,1209.37 1519.07,1209.37 1519.66,1209.37 1520.25,1209.37 1520.83,1209.37 1521.42,1209.37 1522.01,1209.37 1522.59,1209.37 1523.18,1209.37 1523.77,1209.37 1524.35,1209.37 1524.94,1209.37 1525.52,1209.37 1526.11,1209.37 1526.7,1209.37 1527.28,1209.37 1527.87,1209.37 1528.46,1209.37 1529.04,1209.37 1529.63,1209.37 1530.22,1209.37 1530.8,1209.37 1531.39,1209.37 1531.98,1209.37 1532.56,1209.37 1533.15,1209.37 1533.73,1209.37 1534.32,1209.37 1534.91,1209.37 1535.49,1209.37 1536.08,1209.37 1536.67,1209.37 1537.25,1209.37 1537.84,1209.37 1538.43,1209.37 1539.01,1209.37 1539.6,1209.37 1540.19,1209.37 1540.77,1209.37 1541.36,1209.37 1541.94,1209.37 1542.53,1209.37 1543.12,1209.37 1543.7,1209.37 1544.29,1209.37 1544.88,1209.37 1545.46,1209.37 1546.05,1209.37 1546.64,1209.37 1547.22,1209.37 1547.81,1209.37 1548.4,1209.37 1548.98,1209.37 1549.57,1209.37 1550.15,1209.37 1550.74,1209.37 1551.33,1209.37 1551.91,1209.37 1552.5,1209.37 1553.09,1209.37 1553.67,1209.37 1554.26,1209.37 1554.85,1209.37 1555.43,1209.37 1556.02,1209.37 1556.6,1209.37 1557.19,1209.37 1557.78,1209.37 1558.36,1209.37 1558.95,1209.37 1559.54,1209.37 1560.12,1209.37 1560.71,1209.37 1561.3,1209.37 1561.88,1209.37 1562.47,1209.37 1563.06,1209.37 1563.64,1209.37 1564.23,1209.37 1564.81,1209.37 1565.4,1209.37 1565.99,1209.37 1566.57,1209.37 1567.16,1209.37 1567.75,1209.37 1568.33,1209.37 1568.92,1209.37 1569.51,1209.37 1570.09,1209.37 1570.68,1209.37 1571.27,1209.37 1571.85,1209.37 1572.44,1209.37 1573.02,1209.37 1573.61,1209.37 1574.2,1209.37 1574.78,1209.37 1575.37,1209.37 1575.96,1209.37 1576.54,1209.37 1577.13,1209.37 1577.72,1209.37 1578.3,1209.37 1578.89,1209.37 1579.47,1209.37 1580.06,1209.37 1580.65,1209.37 1581.23,1209.37 1581.82,1209.37 1582.41,1209.37 1582.99,1209.37 1583.58,1209.37 1584.17,1209.37 1584.75,1209.37 1585.34,1209.37 1585.93,1209.37 1586.51,1209.37 1587.1,1209.37 1587.68,1209.37 1588.27,1209.37 1588.86,1209.37 1589.44,1209.37 1590.03,1209.37 1590.62,1209.37 1591.2,1209.37 1591.79,1209.37 1592.38,1209.37 1592.96,1209.37 1593.55,1209.37 1594.14,1209.37 1594.72,1209.37 1595.31,1209.37 1595.89,1209.37 1596.48,1209.37 1597.07,1209.37 1597.65,1209.37 1598.24,1209.37 1598.83,1209.37 1599.41,1209.37 1600,1209.37 1600.59,1209.37 1601.17,1209.37 1601.76,1209.37 1602.34,1209.37 1602.93,1209.37 1603.52,1209.37 1604.1,1209.37 1604.69,1209.37 1605.28,1209.37 1605.86,1209.37 1606.45,1209.37 1607.04,1209.37 1607.62,1209.37 1608.21,1209.37 1608.8,1209.37 1609.38,1209.37 1609.97,1209.37 1610.55,1209.37 1611.14,1209.37 1611.73,1209.37 1612.31,1209.37 1612.9,1209.37 1613.49,1209.37 1614.07,1209.37 1614.66,1209.37 1615.25,1209.37 1615.83,1209.37 1616.42,1209.37 1617.01,1209.37 1617.59,1209.37 1618.18,1209.37 1618.76,1209.37 1619.35,1209.37 1619.94,1209.37 1620.52,1209.37 1621.11,1209.37 1621.7,1209.37 1622.28,1209.37 1622.87,1209.37 1623.46,1209.37 1624.04,1209.37 1624.63,1209.37 1625.22,1209.37 1625.8,1209.37 1626.39,1209.37 1626.97,1209.37 1627.56,1209.37 1628.15,1209.37 1628.73,1209.37 1629.32,1209.37 1629.91,1209.37 1630.49,1209.37 1631.08,1209.37 1631.67,1209.37 1632.25,1209.37 1632.84,1209.37 1633.42,1209.37 1634.01,1209.37 1634.6,1209.37 1635.18,1209.37 1635.77,1209.37 1636.36,1209.37 1636.94,1209.37 1637.53,1209.37 1638.12,1209.37 1638.7,1209.37 1639.29,1209.37 1639.88,1209.37 1640.46,1209.37 1641.05,1209.37 1641.63,1209.37 1642.22,1209.37 1642.81,1209.37 1643.39,1209.37 1643.98,1209.37 1644.57,1209.37 1645.15,1209.37 1645.74,1209.37 1646.33,1209.37 1646.91,1209.37 1647.5,1209.37 1648.09,1209.37 1648.67,1209.37 1649.26,1209.37 1649.84,1209.37 1650.43,1209.37 1651.02,1209.37 1651.6,1209.37 1652.19,1209.37 1652.78,1209.37 1653.36,1209.37 1653.95,1209.37 1654.54,1209.37 1655.12,1209.37 1655.71,1209.37 1656.29,1209.37 1656.88,1209.37 1657.47,1209.37 1658.05,1209.37 1658.64,1209.37 1659.23,1209.37 1659.81,1209.37 1660.4,1209.37 1660.99,1209.37 1661.57,1209.37 1662.16,1209.37 1662.75,1209.37 1663.33,1209.37 1663.92,1209.37 1664.5,1209.37 1665.09,1209.37 1665.68,1209.37 1666.26,1209.37 1666.85,1209.37 1667.44,1209.37 1668.02,1209.37 1668.61,1209.37 1669.2,1209.37 1669.78,1209.37 1670.37,1209.37 1670.96,1209.37 1671.54,1209.37 1672.13,1209.37 1672.71,1209.37 1673.3,1209.37 1673.89,1209.37 1674.47,1209.37 1675.06,1209.37 1675.65,1209.37 1676.23,1209.37 1676.82,1209.37 1677.41,1209.37 1677.99,1209.37 1678.58,1209.37 1679.17,1209.37 1679.75,1209.37 1680.34,1209.37 1680.92,1209.37 1681.51,1209.37 1682.1,1209.37 1682.68,1209.37 1683.27,1209.37 1683.86,1209.37 1684.44,1209.37 1685.03,1209.37 1685.62,1209.37 1686.2,1209.37 1686.79,1209.37 1687.37,1209.37 1687.96,1209.37 1688.55,1209.37 1689.13,1209.37 1689.72,1209.37 1690.31,1209.37 1690.89,1209.37 1691.48,1209.37 1692.07,1209.37 1692.65,1209.37 1693.24,1209.37 1693.83,1209.37 1694.41,1209.37 1695,1209.37 1695.58,1209.37 1696.17,1209.37 1696.76,1209.37 1697.34,1209.37 1697.93,1209.37 1698.52,1209.37 1699.1,1209.37 1699.69,1209.37 1700.28,1209.37 1700.86,1209.37 1701.45,1209.37 1702.04,1209.37 1702.62,1209.37 1703.21,1209.37 1703.79,1209.37 1704.38,1209.37 1704.97,1209.37 1705.55,1209.37 1706.14,1209.37 1706.73,1209.37 1707.31,1209.37 1707.9,1209.37 1708.49,1209.37 1709.07,1209.37 1709.66,1209.37 1710.24,1209.37 1710.83,1209.37 1711.42,1209.37 1712,1209.37 1712.59,1209.37 1713.18,1209.37 1713.76,1209.37 1714.35,1209.37 1714.94,1209.37 1715.52,1209.37 1716.11,1209.37 1716.7,1209.37 1717.28,1209.37 1717.87,1209.37 1718.45,1209.37 1719.04,1209.37 1719.63,1209.37 1720.21,1209.37 1720.8,1209.37 1721.39,1209.37 1721.97,1209.37 1722.56,1209.37 1723.15,1209.37 1723.73,1209.37 1724.32,1209.37 1724.91,1209.37 1725.49,1209.37 1726.08,1209.37 1726.66,1209.37 1727.25,1209.37 1727.84,1209.37 1728.42,1209.37 1729.01,1209.37 1729.6,1209.37 1730.18,1209.37 1730.77,1209.37 1731.36,1209.37 1731.94,1209.37 1732.53,1209.37 1733.11,1209.37 1733.7,1209.37 1734.29,1209.37 1734.87,1209.37 1735.46,1209.37 1736.05,1209.37 1736.63,1209.37 1737.22,1209.37 1737.81,1209.37 1738.39,1209.37 1738.98,1209.37 1739.57,1209.37 1740.15,1209.37 1740.74,1209.37 1741.32,1209.37 1741.91,1209.37 1742.5,1209.37 1743.08,1209.37 1743.67,1209.37 1744.26,1209.37 1744.84,1209.37 1745.43,1209.37 1746.02,1209.37 1746.6,1209.37 1747.19,1209.37 1747.78,1209.37 1748.36,1209.37 1748.95,1209.37 1749.53,1209.37 1750.12,1209.37 1750.71,1209.37 1751.29,1209.37 1751.88,1209.37 1752.47,1209.37 1753.05,1209.37 1753.64,1209.37 1754.23,1209.37 1754.81,1209.37 1755.4,1209.37 1755.99,1209.37 1756.57,1209.37 1757.16,1209.37 1757.74,1209.37 1758.33,1209.37 1758.92,1209.37 1759.5,1209.37 1760.09,1209.37 1760.68,1209.37 1761.26,1209.37 1761.85,1209.37 1762.44,1209.37 1763.02,1209.37 1763.61,1209.37 1764.19,1209.37 1764.78,1209.37 1765.37,1209.37 1765.95,1209.37 1766.54,1209.37 1767.13,1209.37 1767.71,1209.37 1768.3,1209.37 1768.89,1209.37 1769.47,1209.37 1770.06,1209.37 1770.65,1209.37 1771.23,1209.37 1771.82,1209.37 1772.4,1209.37 1772.99,1209.37 1773.58,1209.37 1774.16,1209.37 1774.75,1209.37 1775.34,1209.37 1775.92,1209.37 1776.51,1209.37 1777.1,1209.37 1777.68,1209.37 1778.27,1209.37 1778.86,1209.37 1779.44,1209.37 1780.03,1209.37 1780.61,1209.37 1781.2,1209.37 1781.79,1209.37 1782.37,1209.37 1782.96,1209.37 1783.55,1209.37 1784.13,1209.37 1784.72,1209.37 1785.31,1209.37 1785.89,1209.37 1786.48,1209.37 1787.06,1209.37 1787.65,1209.37 1788.24,1209.37 1788.82,1209.37 1789.41,1209.37 1790,1209.37 1790.58,1209.37 1791.17,1209.37 1791.76,1209.37 1792.34,1209.37 1792.93,1209.37 1793.52,1209.37 1794.1,1209.37 1794.69,1209.37 1795.27,1209.37 1795.86,1209.37 1796.45,1209.37 1797.03,1209.37 1797.62,1209.37 1798.21,1209.37 1798.79,1209.37 1799.38,1209.37 1799.97,1209.37 1800.55,1209.37 1801.14,1209.37 1801.73,1209.37 1802.31,1209.37 1802.9,1209.37 1803.48,1209.37 1804.07,1209.37 1804.66,1209.37 1805.24,1209.37 1805.83,1209.37 1806.42,1209.37 1807,1209.37 1807.59,1209.37 1808.18,1209.37 1808.76,1209.37 1809.35,1209.37 1809.94,1209.37 1810.52,1209.37 1811.11,1209.37 1811.69,1209.37 1812.28,1209.37 1812.87,1209.37 1813.45,1209.37 1814.04,1209.37 1814.63,1209.37 1815.21,1209.37 1815.8,1209.37 1816.39,1209.37 1816.97,1209.37 1817.56,1209.37 1818.14,1209.37 1818.73,1209.37 1819.32,1209.37 1819.9,1209.37 1820.49,1209.37 1821.08,1209.37 1821.66,1209.37 1822.25,1209.37 1822.84,1209.37 1823.42,1209.37 1824.01,1209.37 1824.6,1209.37 1825.18,1209.37 1825.77,1209.37 1826.35,1209.37 1826.94,1209.37 1827.53,1209.37 1828.11,1209.37 1828.7,1209.37 1829.29,1209.37 1829.87,1209.37 1830.46,1209.37 1831.05,1209.37 1831.63,1209.37 1832.22,1209.37 1832.81,1209.37 1833.39,1209.37 1833.98,1209.37 1834.56,1209.37 1835.15,1209.37 1835.74,1209.37 1836.32,1209.37 1836.91,1209.37 1837.5,1209.37 1838.08,1209.37 1838.67,1209.37 1839.26,1209.37 1839.84,1209.37 1840.43,1209.37 1841.01,1209.37 1841.6,1209.37 1842.19,1209.37 1842.77,1209.37 1843.36,1209.37 1843.95,1209.37 1844.53,1209.37 1845.12,1209.37 1845.71,1209.37 1846.29,1209.37 1846.88,1209.37 1847.47,1209.37 1848.05,1209.37 1848.64,1209.37 1849.22,1209.37 1849.81,1209.37 1850.4,1209.37 1850.98,1209.37 1851.57,1209.37 1852.16,1209.37 1852.74,1209.37 1853.33,1209.37 1853.92,1209.37 1854.5,1209.37 1855.09,1209.37 1855.68,1209.37 1856.26,1209.37 1856.85,1209.37 1857.43,1209.37 1858.02,1209.37 1858.61,1209.37 1859.19,1209.37 1859.78,1209.37 1860.37,1209.37 1860.95,1209.37 1861.54,1209.37 1862.13,1209.37 1862.71,1209.37 1863.3,1209.37 1863.88,1209.37 1864.47,1209.37 1865.06,1209.37 1865.64,1209.37 1866.23,1209.37 1866.82,1209.37 1867.4,1209.37 1867.99,1209.37 1868.58,1209.37 1869.16,1209.37 1869.75,1209.37 1870.34,1209.37 1870.92,1209.37 1871.51,1209.37 1872.09,1209.37 1872.68,1209.37 1873.27,1209.37 1873.85,1209.37 1874.44,1209.37 1875.03,1209.37 1875.61,1209.37 1876.2,1209.37 1876.79,1209.37 1877.37,1209.37 1877.96,1209.37 1878.55,1209.37 1879.13,1209.37 1879.72,1209.37 1880.3,1209.37 1880.89,1209.37 1881.48,1209.37 1882.06,1209.37 1882.65,1209.37 1883.24,1209.37 1883.82,1209.37 1884.41,1209.37 1885,1209.37 1885.58,1209.37 1886.17,1209.37 1886.76,1209.37 1887.34,1209.37 1887.93,1209.37 1888.51,1209.37 1889.1,1209.37 1889.69,1209.37 1890.27,1209.37 1890.86,1209.37 1891.45,1209.37 1892.03,1209.37 1892.62,1209.37 1893.21,1209.37 1893.79,1209.37 1894.38,1209.37 1894.96,1209.37 1895.55,1209.37 1896.14,1209.37 1896.72,1209.37 1897.31,1209.37 1897.9,1209.37 1898.48,1209.37 1899.07,1209.37 1899.66,1209.37 1900.24,1209.37 1900.83,1209.37 1901.42,1209.37 1902,1209.37 1902.59,1209.37 1903.17,1209.37 1903.76,1209.37 1904.35,1209.37 1904.93,1209.37 1905.52,1209.37 1906.11,1209.37 1906.69,1209.37 1907.28,1209.37 1907.87,1209.37 1908.45,1209.37 1909.04,1209.37 1909.63,1209.37 1910.21,1209.37 1910.8,1209.37 1911.38,1209.37 1911.97,1209.37 1912.56,1209.37 1913.14,1209.37 1913.73,1209.37 1914.32,1209.37 1914.9,1209.37 1915.49,1209.37 1916.08,1209.37 1916.66,1209.37 1917.25,1209.37 1917.83,1209.37 1918.42,1209.37 1919.01,1209.37 1919.59,1209.37 1920.18,1209.37 1920.77,1209.37 1921.35,1209.37 1921.94,1209.37 1922.53,1209.37 1923.11,1209.37 1923.7,1209.37 1924.29,1209.37 1924.87,1209.37 1925.46,1209.37 1926.04,1209.37 1926.63,1209.37 1927.22,1209.37 1927.8,1209.37 1928.39,1209.37 1928.98,1209.37 1929.56,1209.37 1930.15,1209.37 1930.74,1209.37 1931.32,1209.37 1931.91,1209.37 1932.5,1209.37 1933.08,1209.37 1933.67,1209.37 1934.25,1209.37 1934.84,1209.37 1935.43,1209.37 1936.01,1209.37 1936.6,1209.37 1937.19,1209.37 1937.77,1209.37 1938.36,1209.37 1938.95,1209.37 1939.53,1209.37 1940.12,1209.37 1940.71,1209.37 1941.29,1209.37 1941.88,1209.37 1942.46,1209.37 1943.05,1209.37 1943.64,1209.37 1944.22,1209.37 1944.81,1209.37 1945.4,1209.37 1945.98,1209.37 1946.57,1209.37 1947.16,1209.37 1947.74,1209.37 1948.33,1209.37 1948.91,1209.37 1949.5,1209.37 1950.09,1209.37 1950.67,1209.37 1951.26,1209.37 1951.85,1209.37 1952.43,1209.37 1953.02,1209.37 1953.61,1209.37 1954.19,1209.37 1954.78,1209.37 1955.37,1209.37 1955.95,1209.37 1956.54,1209.37 1957.12,1209.37 1957.71,1209.37 1958.3,1209.37 1958.88,1209.37 1959.47,1209.37 1960.06,1209.37 1960.64,1209.37 1961.23,1209.37 1961.82,1209.37 1962.4,1209.37 1962.99,1209.37 1963.58,1209.37 1964.16,1209.37 1964.75,1209.37 1965.33,1209.37 1965.92,1209.37 1966.51,1209.37 1967.09,1209.37 1967.68,1209.37 1968.27,1209.37 1968.85,1209.37 1969.44,1209.37 1970.03,1209.37 1970.61,1209.37 1971.2,1209.37 1971.78,1209.37 1972.37,1209.37 1972.96,1209.37 1973.54,1209.37 1974.13,1209.37 1974.72,1209.37 1975.3,1209.37 1975.89,1209.37 1976.48,1209.37 1977.06,1209.37 1977.65,1209.37 1978.24,1209.37 1978.82,1209.37 1979.41,1209.37 1979.99,1209.37 1980.58,1209.37 1981.17,1209.37 1981.75,1209.37 1982.34,1209.37 1982.93,1209.37 1983.51,1209.37 1984.1,1209.37 1984.69,1209.37 1985.27,1209.37 1985.86,1209.37 1986.45,1209.37 1987.03,1209.37 1987.62,1209.37 1988.2,1209.37 1988.79,1209.37 1989.38,1209.37 1989.96,1209.37 1990.55,1209.37 1991.14,1209.37 1991.72,1209.37 1992.31,1209.37 1992.9,1209.37 1993.48,1209.37 1994.07,1209.37 1994.65,1209.37 1995.24,1209.37 1995.83,1209.37 1996.41,1209.37 1997,1209.37 1997.59,1209.37 1998.17,1209.37 1998.76,1209.37 1999.35,1209.37 1999.93,1209.37 2000.52,1209.37 2001.11,1209.37 2001.69,1209.37 2002.28,1209.37 2002.86,1209.37 2003.45,1209.37 2004.04,1209.37 2004.62,1209.37 2005.21,1209.37 2005.8,1209.37 2006.38,1209.37 2006.97,1209.37 2007.56,1209.37 2008.14,1209.37 2008.73,1209.37 2009.32,1209.37 2009.9,1209.37 2010.49,1209.37 2011.07,1209.37 2011.66,1209.37 2012.25,1209.37 2012.83,1209.37 2013.42,1209.37 2014.01,1209.37 2014.59,1209.37 2015.18,1209.37 2015.77,1209.37 2016.35,1209.37 2016.94,1209.37 2017.53,1209.37 2018.11,1209.37 2018.7,1209.37 2019.28,1209.37 2019.87,1209.37 2020.46,1209.37 2021.04,1209.37 2021.63,1209.37 2022.22,1209.37 2022.8,1209.37 2023.39,1209.37 2023.98,1209.37 2024.56,1209.37 2025.15,1209.37 2025.73,1209.37 2026.32,1209.37 2026.91,1209.37 2027.49,1209.37 2028.08,1209.37 2028.67,1209.37 2029.25,1209.37 2029.84,1209.37 2030.43,1209.37 2031.01,1209.37 2031.6,1209.37 2032.19,1209.37 2032.77,1209.37 2033.36,1209.37 2033.94,1209.37 2034.53,1209.37 2035.12,1209.37 2035.7,1209.37 2036.29,1209.37 2036.88,1209.37 2037.46,1209.37 2038.05,1209.37 2038.64,1209.37 2039.22,1209.37 2039.81,1209.37 2040.4,1209.37 2040.98,1209.37 2041.57,1209.37 2042.15,1209.37 2042.74,1209.37 2043.33,1209.37 2043.91,1209.37 2044.5,1209.37 2045.09,1209.37 2045.67,1209.37 2046.26,1209.37 2046.85,1209.37 2047.43,1209.37 2048.02,1209.37 2048.6,1209.37 2049.19,1209.37 2049.78,1209.37 2050.36,1209.37 2050.95,1209.37 2051.54,1209.37 2052.12,1209.37 2052.71,1209.37 2053.3,1209.37 2053.88,1209.37 2054.47,1209.37 2055.06,1209.37 2055.64,1209.37 2056.23,1209.37 2056.81,1209.37 2057.4,1209.37 2057.99,1209.37 2058.57,1209.37 2059.16,1209.37 2059.75,1209.37 2060.33,1209.37 2060.92,1209.37 2061.51,1209.37 2062.09,1209.37 2062.68,1209.37 2063.27,1209.37 2063.85,1209.37 2064.44,1209.37 2065.02,1209.37 2065.61,1209.37 2066.2,1209.37 2066.78,1209.37 2067.37,1209.37 2067.96,1209.37 2068.54,1209.37 2069.13,1209.37 2069.72,1209.37 2070.3,1209.37 2070.89,1209.37 2071.48,1209.37 2072.06,1209.37 2072.65,1209.37 2073.23,1209.37 2073.82,1209.37 2074.41,1209.37 2074.99,1209.37 2075.58,1209.37 2076.17,1209.37 2076.75,1209.37 2077.34,1209.37 2077.93,1209.37 2078.51,1209.37 2079.1,1209.37 2079.68,1209.37 2080.27,1209.37 2080.86,1209.37 2081.44,1209.37 2082.03,1209.37 2082.62,1209.37 2083.2,1209.37 2083.79,1209.37 2084.38,1209.37 2084.96,1209.37 2085.55,1209.37 2086.14,1209.37 2086.72,1209.37 2087.31,1209.37 2087.89,1209.37 2088.48,1209.37 2089.07,1209.37 2089.65,1209.37 2090.24,1209.37 2090.83,1209.37 2091.41,1209.37 2092,1209.37 2092.59,1209.37 2093.17,1209.37 2093.76,1209.37 2094.35,1209.37 2094.93,1209.37 2095.52,1209.37 2096.1,1209.37 2096.69,1209.37 2097.28,1209.37 2097.86,1209.37 2098.45,1209.37 2099.04,1209.37 2099.62,1209.37 2100.21,1209.37 2100.8,1209.37 2101.38,1209.37 2101.97,1209.37 2102.55,1209.37 2103.14,1209.37 2103.73,1209.37 2104.31,1209.37 2104.9,1209.37 2105.49,1209.37 2106.07,1209.37 2106.66,1209.37 2107.25,1209.37 2107.83,1209.37 2108.42,1209.37 2109.01,1209.37 2109.59,1209.37 2110.18,1209.37 2110.76,1209.37 2111.35,1209.37 2111.94,1209.37 2112.52,1209.37 2113.11,1209.37 2113.7,1209.37 2114.28,1209.37 2114.87,1209.37 2115.46,1209.37 2116.04,1209.37 2116.63,1209.37 2117.22,1209.37 2117.8,1209.37 2118.39,1209.37 2118.97,1209.37 2119.56,1209.37 2120.15,1209.37 2120.73,1209.37 2121.32,1209.37 2121.91,1209.37 2122.49,1209.37 2123.08,1209.37 2123.67,1209.37 2124.25,1209.37 2124.84,1209.37 2125.42,1209.37 2126.01,1209.37 2126.6,1209.37 2127.18,1209.37 2127.77,1209.37 2128.36,1209.37 2128.94,1209.37 2129.53,1209.37 2130.12,1209.37 2130.7,1209.37 2131.29,1209.37 2131.88,1209.37 2132.46,1209.37 2133.05,1209.37 2133.63,1209.37 2134.22,1209.37 2134.81,1209.37 2135.39,1209.37 2135.98,1209.37 2136.57,1209.37 2137.15,1209.37 2137.74,1209.37 2138.33,1209.37 2138.91,1209.37 2139.5,1209.37 2140.09,1209.37 2140.67,1209.37 2141.26,1209.37 2141.84,1209.37 2142.43,1209.37 2143.02,1209.37 2143.6,1209.37 2144.19,1209.37 2144.78,1209.37 2145.36,1209.37 2145.95,1209.37 2146.54,1209.37 2147.12,1209.37 2147.71,1209.37 2148.3,1209.37 2148.88,1209.37 2149.47,1209.37 2150.05,1209.37 2150.64,1209.37 2151.23,1209.37 2151.81,1209.37 2152.4,1209.37 2152.99,1209.37 2153.57,1209.37 2154.16,1209.37 2154.75,1209.37 2155.33,1209.37 2155.92,1209.37 2156.5,1209.37 2157.09,1209.37 2157.68,1209.37 2158.26,1209.37 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.83,1191.06 1400.02,899.083 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1227.21 985.439,1191.06 2158.26,1191.06 2158.26,1227.21 985.439,1227.21 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip390)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip390)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip393\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip393)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-5856.65 164.351,-5547.5 164.91,-6413.15 165.469,-7242.08 166.029,-7982.33 166.588,-8669.13 167.147,-9289.56 167.706,-9847.92 168.266,-9458.06 168.825,-9932.83 169.384,-10367.1 169.943,-10752.1 170.503,-10400.4 171.062,-10728 171.621,-11014.5 172.18,-11277.5 172.74,-10968.5 173.299,-11191.5 173.858,-10923.1 174.417,-10676.6 174.977,-10466.5 175.536,-10644.8 176.095,-10793.8 176.655,-10912.1 177.214,-11011.6 177.773,-10200.1 178.332,-10290.5 178.892,-10358.6 179.451,-10162.9 180.01,-10193.3 180.569,-9970.93 181.129,-9575.73 181.688,-9373.66 182.247,-9351.52 182.806,-9319.17 183.366,-9282.61 183.925,-9233.14 184.484,-9006.74 185.043,-8648.65 185.603,-8311.78 186.162,-8083.39 186.721,-7869.91 187.28,-7768.16 187.84,-7559.17 188.399,-7463.37 188.958,-7264.2 189.517,-7160.11 190.077,-6960.33 190.636,-6839.19 191.195,-6733.04 191.754,-6306.78 192.314,-6203.52 192.873,-5890.09 193.432,-5656.44 193.991,-5498.57 194.551,-5393.73 195.11,-5286.49 195.669,-5063.93 196.228,-4958.16 196.788,-4857.21 197.347,-4647.99 197.906,-4554.46 198.465,-4405.21 199.025,-4309.97 199.584,-4168.87 200.143,-3932.76 200.702,-3796.15 201.262,-3622.09 201.821,-3452.67 202.38,-3329.82 202.939,-3099.37 203.499,-2953.92 204.058,-2854.8 204.617,-2783.04 205.176,-2676.04 205.736,-2571.99 206.295,-2438.25 206.854,-2308.65 207.413,-2177.45 207.973,-2020.7 208.532,-1905.59 209.091,-1855.68 209.65,-1739.05 210.21,-1575.06 210.769,-1500.12 211.328,-1460.41 211.887,-1388.8 212.447,-1321.3 213.006,-1224.03 213.565,-1157.29 214.124,-1095.25 214.684,-1060.34 215.243,-973.24 215.802,-886.514 216.361,-827.535 216.921,-674.213 217.48,-624.023 218.039,-575.516 218.598,-501.936 219.158,-432.246 219.717,-382.575 220.276,-358.6 220.835,-268.311 221.395,-201.921 221.954,-207.712 222.513,-188.178 223.072,-101.693 223.632,-58.3964 224.191,19.2223 224.75,10.7956 225.309,71.0026 225.869,86.5815 226.428,81.8818 226.987,118.387 227.546,128.975 228.106,162.78 228.665,197.996 229.224,251.899 229.783,285.946 230.343,355.973 230.902,389.142 231.461,401.362 232.02,429.261 232.58,421.157 233.139,468.822 233.698,612.547 234.257,631.491 234.817,628.837 235.376,630.609 235.935,632.021 236.494,651.913 237.054,649.612 237.613,651.076 238.172,655.341 238.731,676.752 239.291,698.471 239.85,718.611 240.409,736.818 240.968,737.348 241.528,737.859 242.087,777.599 242.646,833.406 243.205,850.177 243.765,880.903 244.324,877.53 244.883,855.457 245.442,834.98 246.002,868.905 246.561,865.574 247.12,865.88 247.679,881.915 248.239,895.672 248.798,910.654 249.357,855.551 249.916,892.189 250.476,889.617 251.035,890.485 251.594,941.599 252.153,957.278 252.713,954.511 253.272,952.873 253.831,987.529 254.39,964.385 254.95,962.742 255.509,975.195 256.068,969.555 256.627,982.856 257.187,1016 257.746,1028.88 258.305,1043.77 258.864,1037.09 259.424,1049.44 259.983,1073.36 260.542,1082.58 261.101,1091.23 261.661,1098.45 262.22,1137.98 262.779,1114.75 263.338,1124.85 263.898,1114.73 264.457,1106.78 265.016,1131.25 265.575,1137.42 266.135,1125.58 266.694,1115.39 267.253,1156.7 267.812,1162.13 268.372,1180.95 268.931,1151.17 269.49,1121.41 270.049,1112.21 270.609,1119.1 271.168,1075.34 271.727,1067.15 272.286,1041.32 272.846,1052.09 273.405,1042.91 273.964,1019.39 274.523,1029.4 275.083,1059.3 275.642,1070.18 276.201,1079.13 276.76,1021.17 277.32,1050.13 277.879,1082.12 278.438,1092.85 278.997,1083.2 279.557,1092.57 280.116,1100.31 280.675,1124.28 281.234,1114.53 281.794,1120.97 282.353,1128 282.912,1114.57 283.471,1121.98 284.031,1112.83 284.59,1118.87 285.149,1108.24 285.708,1132.09 286.268,1104.29 286.827,1097.73 287.386,1042.81 287.945,1068.42 288.505,1077.88 289.064,1085.7 289.623,1057.2 290.182,1053.72 290.742,1144.3 291.301,1117.79 291.86,1093.11 292.419,1119.16 292.979,1109.74 293.538,1116.21 294.097,1106.8 294.656,1115.05 295.216,1122.79 295.775,1080.77 296.334,1070.99 296.893,1078.48 297.453,1083.95 298.012,1106 298.571,1078.94 299.13,1055.43 299.69,1050.09 300.249,1076.12 300.808,1066.78 301.368,1041.63 301.927,1065.04 302.486,1088.68 303.045,1062.26 303.605,1103.11 304.164,1074.51 304.723,1049.59 305.282,1058.18 305.842,1066.35 306.401,1041.29 306.96,1049.89 307.519,1044.19 308.079,1052.43 308.638,1043.32 309.197,1036.53 309.756,1013.34 310.316,1073.47 310.875,1047.55 311.434,1023.57 311.993,1084.08 312.553,1071.95 313.112,1063.99 313.671,1038.08 314.23,998.84 314.79,995.416 315.349,975.972 315.908,973.286 316.467,969.032 317.027,946.434 317.586,957.304 318.145,934.818 318.704,929.239 319.264,939.266 319.823,951.416 320.382,963.894 320.941,941.661 321.501,937.321 322.06,917.276 322.619,930.601 323.178,958.825 323.738,1001.95 324.297,960.021 324.856,949.044 325.415,975.725 325.975,952.109 326.534,947.485 327.093,948.294 327.652,956.956 328.212,947.04 328.771,1002.55 329.33,995.688 329.889,1036.29 330.449,926.612 331.008,937.512 331.567,933.963 332.126,945.501 332.686,940.181 333.245,918.898 333.804,927.409 334.363,958.02 334.923,970.122 335.482,1013.07 336.041,1005.36 336.6,1013 337.16,1023.45 337.719,1019.88 338.278,1031.1 338.837,992.78 339.397,970.781 339.956,965.439 340.515,945.66 341.074,938.244 341.634,949.761 342.193,924.266 342.752,918.146 343.311,883.584 343.871,882.529 344.43,893.464 344.989,901.75 345.548,899.199 346.108,897.801 346.667,877.007 347.226,873.909 347.785,905.417 348.345,870.544 348.904,836.386 349.463,818.084 350.022,847.26 350.582,864.363 351.141,847.931 351.7,845.783 352.259,873.933 352.819,889.431 353.378,900.839 353.937,932.9 354.496,929.353 355.056,920.908 355.615,884.406 356.174,900.073 356.733,898.406 357.293,876.947 357.852,892.307 358.411,890.205 358.97,902.48 359.53,897.756 360.089,894.808 360.648,887.584 361.207,869.504 361.767,850.14 362.326,830.317 362.885,830.185 363.444,830.264 364.004,828.069 364.563,860.399 365.122,839.914 365.681,852.253 366.241,852.155 366.8,849.922 367.359,798.517 367.918,815.831 368.478,832.518 369.037,845.105 369.596,823.724 370.155,819.395 370.715,820.598 371.274,804.729 371.833,818.21 372.392,820.155 372.952,851.52 373.511,883.121 374.07,867.991 374.629,863.446 375.189,845.634 375.748,889.868 376.307,885.513 376.866,896.041 377.426,891.823 377.985,920.927 378.544,916.404 379.103,896.227 379.663,875.088 380.222,872.248 380.781,885.166 381.34,931.292 381.9,925.394 382.459,952.997 383.018,927.163 383.577,921.78 384.137,898.039 384.696,908.362 385.255,903.306 385.814,863.31 386.374,876.645 386.933,857.791 387.492,838.628 388.051,853.846 388.611,850.085 389.17,775.914 389.729,794.57 390.288,730.7 390.848,751.684 391.407,705.723 391.966,708.472 392.525,711.058 393.085,727.178 393.644,710.515 394.203,703.515 394.762,706.248 395.322,694.056 395.881,698.464 396.44,722.359 396.999,744.373 397.559,750.084 398.118,770.107 398.677,755.843 399.236,778.125 399.796,795.328 400.355,798.144 400.914,767.19 401.473,738.604 402.033,743.444 402.592,732.663 403.151,756.734 403.71,759.102 404.27,758.947 404.829,761.186 405.388,812.106 405.947,815.42 406.507,832.569 407.066,817.734 407.625,818.397 408.184,830.395 408.744,873.573 409.303,881.505 409.862,893.135 410.421,884.388 410.981,865.955 411.54,879.104 412.099,875.644 412.658,875.836 413.218,902.668 413.777,879.303 414.336,871.743 414.895,865.612 415.455,878.639 416.014,904.11 416.573,880.288 417.132,875.561 417.692,886.927 418.251,866.079 418.81,880.228 419.369,845.337 419.929,811.331 420.488,824.825 421.047,789.236 421.606,770.02 422.166,769.527 422.725,738.637 423.284,726.623 423.843,725.052 424.403,727.197 424.962,761.169 425.521,777.126 426.08,808.14 426.64,804.586 427.199,818.349 427.758,848.556 428.318,859.83 428.877,871.688 429.436,863.49 429.995,858.095 430.555,849.499 431.114,839.141 431.673,869.445 432.232,826.659 432.792,851.992 433.351,861.766 433.91,887.321 434.469,881.114 435.029,908.404 435.588,920.273 436.147,910.695 436.706,917.321 437.266,874.852 437.825,869.369 438.384,832.54 438.943,849.198 439.503,864.879 440.062,895.023 440.621,922.549 441.18,928.54 441.74,852.597 442.299,848.067 442.858,843.472 443.417,818.747 443.977,799.522 444.536,810.444 445.095,755.941 445.654,756.356 446.214,737.451 446.773,754.481 447.332,758.28 447.891,744.645 448.451,750.296 449.01,753.274 449.569,770.059 450.128,802.832 450.688,767.361 451.247,765.21 451.806,713.894 452.365,714.429 452.925,748.631 453.484,746.938 454.043,762.858 454.602,760.098 455.162,761.847 455.721,729.541 456.28,711.943 456.839,729.68 457.399,745.507 457.958,727.908 458.517,711.821 459.076,762.964 459.636,765.898 460.195,764.655 460.754,759.245 461.313,760.114 461.873,758.251 462.432,743.101 462.991,775.727 463.55,745.287 464.11,744.201 464.669,744.474 465.228,729.633 465.787,714.409 466.347,700.601 466.906,689.089 467.465,662.434 468.024,685.975 468.584,687.521 469.143,721.475 469.702,702.747 470.261,721.771 470.821,706.105 471.38,677.961 471.939,661.797 472.498,650.556 473.058,656.632 473.617,660.284 474.176,678.372 474.735,713.902 475.295,715.423 475.854,717.625 476.413,721.161 476.972,741.391 477.532,757.917 478.091,739.895 478.65,741.023 479.209,740.138 479.769,723.573 480.328,722.862 480.887,739.672 481.446,739.365 482.006,737.837 482.565,722.654 483.124,738.722 483.683,721.8 484.243,669.303 484.802,670.461 485.361,705.494 485.92,676.526 486.48,679.302 487.039,698.228 487.598,718.238 488.157,736.891 488.717,724.941 489.276,726.736 489.835,740.731 490.394,757.42 490.954,739.838 491.513,707.721 492.072,741.031 492.631,787.513 493.191,782.463 493.75,767.268 494.309,796.385 494.868,842.104 495.428,873.081 495.987,830.725 496.546,793.31 497.105,754.446 497.665,751.502 498.224,766.523 498.783,780.652 499.342,778.711 499.902,807.257 500.461,792.097 501.02,806.092 501.579,771.517 502.139,751.694 502.698,702.461 503.257,702.973 503.816,685.179 504.376,688.498 504.935,674.154 505.494,661.754 506.053,667.225 506.613,652.291 507.172,674.529 507.731,695.096 508.29,666.128 508.85,651.581 509.409,669.326 509.968,671.833 510.527,693.957 511.087,665.755 511.646,668.639 512.205,659.095 512.764,663.124 513.324,671.263 513.883,612.25 514.442,617.458 515.001,624.595 515.561,582.098 516.12,588.67 516.679,615.667 517.238,625.047 517.798,629.8 518.357,600.727 518.916,608.982 519.475,610.207 520.035,632.833 520.594,591.478 521.153,601.438 521.712,607.976 522.272,613.332 522.831,606.145 523.39,592.296 523.949,584.128 524.509,608.275 525.068,646.894 525.627,666.7 526.186,685.986 526.746,716.837 527.305,717.472 527.864,717.897 528.423,716.757 528.983,753.14 529.542,770.288 530.101,769.54 530.66,815.798 531.22,815.604 531.779,807.029 532.338,789.041 532.897,767.387 533.457,780.795 534.016,763.095 534.575,776.613 535.134,759.484 535.694,741.219 536.253,724.635 536.812,756.17 537.371,737.223 537.931,748.216 538.49,778.005 539.049,788.838 539.608,801.631 540.168,796.807 540.727,775.141 541.286,773.092 541.845,739.143 542.405,785.635 542.964,797.075 543.523,774.964 544.082,769.833 544.642,767.553 545.201,812.742 545.76,839.759 546.319,817.508 546.879,827.073 547.438,853.525 547.997,857.305 548.556,819.622 549.116,846.761 549.675,819.025 550.234,812.069 550.793,822.251 551.353,863.256 551.912,859.142 552.471,898.887 553.031,873.732 553.59,863.767 554.149,837.877 554.708,796.832 555.268,762.74 555.827,758.846 556.386,758.684 556.945,737.532 557.505,752.019 558.064,781.867 558.623,793.661 559.182,737.46 559.742,754.841 560.301,830.765 560.86,808.976 561.419,757.939 561.979,755.664 562.538,735.402 563.097,719.295 563.656,688.1 564.216,639.639 564.775,661.245 565.334,680.219 565.893,666.954 566.453,665.363 567.012,670.272 567.571,684.676 568.13,684.086 568.69,682.58 569.249,667.351 569.808,704.105 570.367,686.582 570.927,720.795 571.486,736.788 572.045,720.227 572.604,701.766 573.164,717.955 573.723,704.277 574.282,686.977 574.841,717.287 575.401,735.816 575.96,763.421 576.519,760.719 577.078,760.232 577.638,756.037 578.197,738.042 578.756,753.531 579.315,782.589 579.875,767.529 580.434,767.243 580.993,751.898 581.552,732.885 582.112,731.257 582.671,710.708 583.23,726.938 583.789,746.771 584.349,780.071 584.908,796.925 585.467,794.854 586.026,788.587 586.586,783.413 587.145,779.106 587.704,775.053 588.263,738.697 588.823,717.139 589.382,729.928 589.941,712.055 590.5,728.462 591.06,713.718 591.619,684.029 592.178,700.208 592.737,685.074 593.297,672.624 593.856,675.639 594.415,694.832 594.974,683.275 595.534,688.567 596.093,738.592 596.652,736.069 597.211,734.302 597.771,717.265 598.33,682.811 598.889,686.339 599.448,684.842 600.008,653.245 600.567,621.074 601.126,656.84 601.685,688.138 602.245,670.765 602.804,676.211 603.363,646.129 603.922,669.253 604.482,657.34 605.041,689.648 605.6,691.238 606.159,678.513 606.719,717.505 607.278,717.872 607.837,719.263 608.396,732.778 608.956,702.204 609.515,704.733 610.074,703.272 610.633,689.87 611.193,656.582 611.752,640.05 612.311,609.926 612.87,597.332 613.43,618.141 613.989,640.881 614.548,664.295 615.107,666.251 615.667,686.7 616.226,718.997 616.785,733.65 617.344,732.02 617.904,728.294 618.463,725.545 619.022,737.946 619.581,739.959 620.141,690.356 620.7,707.63 621.259,710.396 621.818,710.114 622.378,693.182 622.937,646.214 623.496,631.988 624.055,653.021 624.615,652.246 625.174,684.844 625.733,672.168 626.292,660.244 626.852,649.239 627.411,653.56 627.97,687.415 628.529,673.852 629.089,691.555 629.648,691.096 630.207,692.399 630.766,709.35 631.326,707.642 631.885,705.93 632.444,704.113 633.003,690.41 633.563,674.23 634.122,643.295 634.681,644.124 635.24,661.316 635.8,663.77 636.359,683.483 636.918,666.387 637.477,636.679 638.037,641.196 638.596,629.65 639.155,646.568 639.714,665.312 640.274,635.704 640.833,639.405 641.392,673.459 641.951,657.261 642.511,662.037 643.07,650.885 643.629,639.926 644.188,631.492 644.748,685.052 645.307,753.555 645.866,736.332 646.425,735.266 646.985,764.224 647.544,774.291 648.103,736.236 648.662,718.91 649.222,729.354 649.781,713.013 650.34,730.365 650.899,727.09 651.459,740.216 652.018,754.166 652.577,767.367 653.136,728.431 653.696,712.861 654.255,730.784 654.814,743.152 655.373,725.494 655.933,711.511 656.492,727.178 657.051,726.263 657.61,709.253 658.17,711.35 658.729,693.062 659.288,709.672 659.847,752.985 660.407,748.045 660.966,763.578 661.525,745.337 662.084,776.352 662.644,752.414 663.203,767.446 663.762,760.617 664.321,754.212 664.881,751.309 665.44,766.966 665.999,794.949 666.558,770.845 667.118,769.153 667.677,765.434 668.236,746.864 668.795,758.77 669.355,758.669 669.914,753.998 670.473,797.315 671.032,771.991 671.592,770.001 672.151,752.181 672.71,732.965 673.269,729.366 673.829,727.285 674.388,726.118 674.947,724.553 675.506,738.649 676.066,750.832 676.625,730.29 677.184,726.861 677.743,691.67 678.303,673.358 678.862,673.744 679.421,660.273 679.981,663.274 680.54,651.583 681.099,653.933 681.658,638.96 682.218,640.253 682.777,625.609 683.336,628.512 683.895,665.719 684.455,713.333 685.014,695.255 685.573,710.175 686.132,695.026 686.692,709.624 687.251,708.711 687.81,724.173 688.369,706.83 688.929,708.084 689.488,695.287 690.047,699.937 690.606,701.771 691.166,698.708 691.725,732.525 692.284,745.048 692.843,741.911 693.403,754.415 693.962,750.165 694.521,733.219 695.08,732.036 695.64,714.707 696.199,729.924 696.758,727.98 697.317,726.157 697.877,712.742 698.436,709.945 698.995,726.014 699.554,724.071 700.114,756.089 700.673,720.351 701.232,686.533 701.791,685.78 702.351,689.198 702.91,718.973 703.469,700.568 704.028,683.144 704.588,682.158 705.147,664.489 705.706,633.788 706.265,587.717 706.825,593.548 707.384,600.733 707.943,607.446 708.502,626.298 709.062,631.463 709.621,618.195 710.18,640.224 710.739,659.316 711.299,663.497 711.858,679.652 712.417,693.686 712.976,690.497 713.536,673.378 714.095,705.128 714.654,706.028 715.213,677.508 715.773,677.763 716.332,679.911 716.891,697.624 717.45,714.144 718.01,682.561 718.569,666.937 719.128,685.582 719.687,680.921 720.247,667.155 720.806,673.039 721.365,660.99 721.924,684.269 722.484,684.287 723.043,700.013 723.602,670.417 724.161,654.638 724.721,671.754 725.28,690.104 725.839,687.715 726.398,684.684 726.958,700.312 727.517,664.291 728.076,667.832 728.635,685.686 729.195,715.913 729.754,682.13 730.313,682.445 730.872,682.929 731.432,697.988 731.991,683.407 732.55,687.235 733.109,734.989 733.669,702.026 734.228,677.724 734.787,660.102 735.346,675.942 735.906,709.567 736.465,708.502 737.024,690.215 737.583,688.566 738.143,659.326 738.702,662.376 739.261,696.921 739.82,684.004 740.38,701.23 740.939,653.82 741.498,673.257 742.057,708.332 742.617,709.725 743.176,690.78 743.735,708.127 744.294,706.116 744.854,723.667 745.413,741.928 745.972,774.562 746.531,788.293 747.091,796.286 747.65,773.313 748.209,766.179 748.768,716.871 749.328,715.064 749.887,714.622 750.446,698.711 751.005,730.465 751.565,711.586 752.124,712.244 752.683,722.341 753.242,721.834 753.802,752.393 754.361,779.911 754.92,772.811 755.479,784.3 756.039,780.375 756.598,775.177 757.157,768.975 757.716,795.183 758.276,811.077 758.835,804.869 759.394,767.746 759.953,762.148 760.513,741.808 761.072,771.626 761.631,750.533 762.19,764.107 762.75,742.461 763.309,741.653 763.868,755.982 764.427,755.169 764.987,738.906 765.546,736.83 766.105,735.02 766.664,748.08 767.224,727.99 767.783,727.451 768.342,744.188 768.901,727.872 769.461,760.271 770.02,741.595 770.579,740.775 771.138,753.754 771.698,747.654 772.257,726.214 772.816,774.2 773.375,753.561 773.935,752.606 774.494,713.258 775.053,695.159 775.612,668.409 776.172,651.269 776.731,683.618 777.29,682.08 777.849,651.017 778.409,653.764 778.968,672.298 779.527,672.466 780.086,689.92 780.646,670.682 781.205,669.979 781.764,688.477 782.323,654.46 782.883,627.889 783.442,615.339 784.001,603.341 784.56,622.828 785.12,643.295 785.679,647.363 786.238,664.647 786.797,666.694 787.357,668.287 787.916,686.962 788.475,654.375 789.034,640.359 789.594,658.681 790.153,660.443 790.712,629.799 791.271,635.984 791.831,636.978 792.39,623.242 792.949,643.599 793.508,628.977 794.068,635.839 794.627,610.6 795.186,614.273 795.745,635.406 796.305,626.068 796.864,645.839 797.423,681.322 797.982,681.715 798.542,695.574 799.101,714.443 799.66,699.653 800.219,668.397 800.779,653.545 801.338,640.165 801.897,657.651 802.456,658.812 803.016,687.948 803.575,670.834 804.134,687.518 804.693,672.713 805.253,705.38 805.812,703.142 806.371,715.782 806.931,700.479 807.49,702.243 808.049,698.612 808.608,728.086 809.168,725.263 809.727,720.428 810.286,734.744 810.845,748.421 811.405,777.299 811.964,771.52 812.523,795.411 813.082,807.434 813.642,783.78 814.201,809.858 814.76,772.249 815.319,734.759 815.879,745.485 816.438,710.849 816.997,741.83 817.556,756.455 818.116,746.621 818.675,743.064 819.234,706.99 819.793,687.285 820.353,656.478 820.912,658.811 821.471,615.666 822.03,619.722 822.59,624.26 823.149,607.978 823.708,628.529 824.267,612.911 824.827,603.952 825.386,638.05 825.945,654.285 826.504,657.69 827.064,675.06 827.623,710.78 828.182,725.279 828.741,692.225 829.301,674.372 829.86,691.742 830.419,690.827 830.978,721.367 831.538,720.407 832.097,718.916 832.656,762.905 833.215,743.678 833.775,770.631 834.334,738.09 834.893,703.048 835.452,705.224 836.012,685.351 836.571,687.381 837.13,686.43 837.689,670.389 838.249,669.175 838.808,670.542 839.367,653.07 839.926,687.738 840.486,689.161 841.045,687.695 841.604,655.883 842.163,655.385 842.723,670.978 843.282,672.67 843.841,689.389 844.4,657.448 844.96,660.386 845.519,658.984 846.078,677.985 846.637,697.371 847.197,697.502 847.756,710.905 848.315,694.166 848.874,708.869 849.434,722.389 849.993,721.356 850.552,670.909 851.111,686.66 851.671,688.429 852.23,672.916 852.789,674.087 853.348,675.13 853.908,661.935 854.467,694.083 855.026,723.799 855.585,661.369 856.145,629.806 856.704,629.207 857.263,645.178 857.822,646.682 858.382,649.794 858.941,637.928 859.5,653.307 860.059,637.298 860.619,656.213 861.178,678.372 861.737,712.965 862.296,691.426 862.856,673.401 863.415,673.972 863.974,671.75 864.533,688.451 865.093,717.52 865.652,735.132 866.211,761.04 866.77,755.704 867.33,754.416 867.889,770.619 868.448,716.098 869.007,664.394 869.567,695.224 870.126,677.196 870.685,677.913 871.244,679.596 871.804,692.237 872.363,722.987 872.922,738.84 873.481,735.37 874.041,682.636 874.6,683.079 875.159,702.665 875.718,688.803 876.278,689.226 876.837,705.04 877.396,673.502 877.955,641.355 878.515,611.175 879.074,600.702 879.633,592.487 880.192,582.425 880.752,574.711 881.311,563.959 881.87,615.684 882.429,622.317 882.989,608.363 883.548,614.699 884.107,619.176 884.666,640.438 885.226,642.15 885.785,624.581 886.344,643.519 886.903,648.533 887.463,682.89 888.022,669.579 888.581,668.138 889.14,684.689 889.7,652.149 890.259,651.397 890.818,688.526 891.377,720.858 891.937,716.997 892.496,730.657 893.055,713.017 893.614,683.251 894.174,685.616 894.733,653.049 895.292,652.4 895.851,625.054 896.411,613.443 896.97,631.256 897.529,632.072 898.088,633.642 898.648,652.819 899.207,655.839 899.766,703.133 900.325,705.563 900.885,701.796 901.444,731.015 902.003,695.386 902.562,740.043 903.122,718.581 903.681,735.832 904.24,731.121 904.799,713.524 905.359,729.043 905.918,725.528 906.477,708.108 907.036,723.039 907.596,708.19 908.155,707.518 908.714,735.705 909.273,752.704 909.833,735.278 910.392,716.704 910.951,698.328 911.51,747.382 912.07,728.465 912.629,728.326 913.188,742.6 913.747,705.759 914.307,703.802 914.866,700.686 915.425,717.838 915.984,764.507 916.544,776.253 917.103,804.579 917.662,765.319 918.221,777.735 918.781,771.472 919.34,720.85 919.899,735.966 920.458,713.352 921.018,726.882 921.577,708.876 922.136,690.663 922.695,674.261 923.255,657.565 923.814,643.365 924.373,648.7 924.932,667.793 925.492,672.395 926.051,672.158 926.61,673.092 927.169,689.5 927.729,673.853 928.288,659.528 928.847,726.794 929.406,709.741 929.966,692.081 930.525,625.692 931.084,623.876 931.644,660.35 932.203,614.709 932.762,634.787 933.321,636.499 933.881,638.455 934.44,645.739 934.999,676.496 935.558,679.074 936.118,662.955 936.677,665.564 937.236,601.982 937.795,606.081 938.355,610.596 938.914,612.834 939.473,594.844 940.032,601.892 940.592,623.142 941.151,609.901 941.71,598.666 942.269,623.165 942.829,597.908 943.388,587.372 943.947,643.363 944.506,677.297 945.066,693.505 945.625,724.854 946.184,705.749 946.743,707.527 947.303,718.323 947.862,735.587 948.421,702.996 948.98,704.187 949.54,718.523 950.099,749.731 950.658,733.084 951.217,748.826 951.777,746.606 952.336,758.511 952.895,735.98 953.454,716.816 954.014,732.885 954.573,711.943 955.132,712.851 955.691,712.555 956.251,710.266 956.81,708.446 957.369,707.436 957.928,721.709 958.488,736.41 959.047,681.545 959.606,680.441 960.165,700.308 960.725,715.661 961.284,721.007 961.843,720.06 962.402,700.442 962.962,718.406 963.521,748.673 964.08,743.938 964.639,695.019 965.199,706.609 965.758,706.282 966.317,739.355 966.876,722.408 967.436,716.71 967.995,714.713 968.554,728.756 969.113,709.829 969.673,660.959 970.232,675.367 970.791,694.065 971.35,683.117 971.91,713.625 972.469,728.426 973.028,663.794 973.587,662.597 974.147,647.248 974.706,682.697 975.265,681.646 975.824,700.713 976.384,668.387 976.943,702.613 977.502,717.044 978.061,731.76 978.621,680.493 979.18,696.558 979.739,726.926 980.298,724.652 980.858,721.792 981.417,718.951 981.976,750.358 982.535,731.23 983.095,730.163 983.654,709.396 984.213,722.771 984.772,753.61 985.332,732.347 985.891,745.879 986.45,711.01 987.009,710.809 987.569,711.353 988.128,693.746 988.687,695.102 989.246,677.252 989.806,675.822 990.365,708.882 990.924,739.053 991.483,705.234 992.043,752.389 992.602,753.089 993.161,763.483 993.72,776.26 994.28,740.651 994.839,718.454 995.398,699.948 995.957,685.113 996.517,681.739 997.076,683.584 997.635,671.13 998.194,638.926 998.754,642.599 999.313,691.636 999.872,691.341 1000.43,707.005 1000.99,707.159 1001.55,687.683 1002.11,673.223 1002.67,658.353 1003.23,646.201 1003.79,629.548 1004.35,616.766 1004.91,572.726 1005.46,594.027 1006.02,597.364 1006.58,602.471 1007.14,591.874 1007.7,616.515 1008.26,623.875 1008.82,611.456 1009.38,615.08 1009.94,652.605 1010.5,686.983 1011.06,702.756 1011.62,697.219 1012.18,694.301 1012.73,696.238 1013.29,679.131 1013.85,633.207 1014.41,654.403 1014.97,667.597 1015.53,665.47 1016.09,669.882 1016.65,672.531 1017.21,637.302 1017.77,622.947 1018.33,639.663 1018.89,625.713 1019.45,647.42 1020.01,665.484 1020.56,681.184 1021.12,665.883 1021.68,700.52 1022.24,714.761 1022.8,711.166 1023.36,708.506 1023.92,707.022 1024.48,709.916 1025.04,727.782 1025.6,744.076 1026.16,727.444 1026.72,728.633 1027.28,730.444 1027.83,729.782 1028.39,708.41 1028.95,720.58 1029.51,735.075 1030.07,750.274 1030.63,766.062 1031.19,741.757 1031.75,740.454 1032.31,735.316 1032.87,735.563 1033.43,717.003 1033.99,697.375 1034.55,699.803 1035.1,699.55 1035.66,697.239 1036.22,680.769 1036.78,700.385 1037.34,700.792 1037.9,683.04 1038.46,729.308 1039.02,743.313 1039.58,756.855 1040.14,734.424 1040.7,730.928 1041.26,676.209 1041.82,645.88 1042.38,664.247 1042.93,651.183 1043.49,655.122 1044.05,670.645 1044.61,654.734 1045.17,654.586 1045.73,639.037 1046.29,638.968 1046.85,639.258 1047.41,674.302 1047.97,694.71 1048.53,694.818 1049.09,693.257 1049.65,705.932 1050.2,687.936 1050.76,671.452 1051.32,690.358 1051.88,673.442 1052.44,672.803 1053,668.68 1053.56,651.95 1054.12,657.36 1054.68,625.787 1055.24,638.198 1055.8,644.59 1056.36,660.677 1056.92,663.935 1057.48,682.196 1058.03,667.813 1058.59,668.952 1059.15,685.802 1059.71,682.292 1060.27,685.94 1060.83,650.759 1061.39,652.258 1061.95,656.054 1062.51,658.652 1063.07,661.64 1063.63,660.565 1064.19,629.622 1064.75,650.704 1065.3,670.712 1065.86,671.882 1066.42,660.072 1066.98,644.746 1067.54,679.164 1068.1,748.069 1068.66,729.201 1069.22,745.802 1069.78,761.572 1070.34,772.346 1070.9,672.137 1071.46,676.66 1072.02,660.342 1072.57,680.557 1073.13,697.36 1073.69,728.671 1074.25,789.048 1074.81,780.464 1075.37,758.633 1075.93,736.598 1076.49,717.155 1077.05,713.355 1077.61,727.704 1078.17,707.842 1078.73,710.456 1079.29,693.689 1079.85,674.85 1080.4,625.294 1080.96,595.741 1081.52,644.406 1082.08,648.785 1082.64,632.553 1083.2,639.06 1083.76,688.969 1084.32,689.142 1084.88,706.748 1085.44,737.535 1086,735.091 1086.56,715.057 1087.12,682.332 1087.67,715.205 1088.23,714.443 1088.79,743.063 1089.35,770.722 1089.91,780.694 1090.47,774.131 1091.03,752.296 1091.59,746.59 1092.15,728.136 1092.71,726.844 1093.27,711.548 1093.83,710.04 1094.39,710.799 1094.94,710.58 1095.5,724.954 1096.06,721.983 1096.62,752.292 1097.18,750.889 1097.74,764.236 1098.3,746.988 1098.86,744.869 1099.42,744.484 1099.98,741.595 1100.54,755.511 1101.1,749.701 1101.66,760.748 1102.22,723.61 1102.77,704.528 1103.33,703.958 1103.89,716.254 1104.45,717.577 1105.01,715.678 1105.57,712.139 1106.13,699.06 1106.69,648.976 1107.25,698.578 1107.81,696.215 1108.37,711.883 1108.93,722.88 1109.49,641.101 1110.04,695.64 1110.6,695.829 1111.16,693.115 1111.72,723.949 1112.28,687.347 1112.84,654.377 1113.4,605.343 1113.96,561.138 1114.52,549.43 1115.08,526.115 1115.64,566.492 1116.2,543.981 1116.76,552.684 1117.31,560.777 1117.87,566.658 1118.43,604.252 1118.99,591.522 1119.55,594.544 1120.11,599.066 1120.67,636.342 1121.23,607.835 1121.79,659.919 1122.35,661.926 1122.91,678.956 1123.47,696.962 1124.03,712.245 1124.59,711.575 1125.14,725.778 1125.7,690.906 1126.26,673.983 1126.82,669.751 1127.38,685.139 1127.94,687.699 1128.5,685.64 1129.06,669.801 1129.62,670.164 1130.18,702.831 1130.74,689.508 1131.3,705.436 1131.86,721.188 1132.41,702.731 1132.97,703.011 1133.53,702.594 1134.09,684.51 1134.65,703.313 1135.21,717.152 1135.77,733.058 1136.33,730.987 1136.89,729.311 1137.45,710.163 1138.01,691.529 1138.57,706.28 1139.13,672.994 1139.68,706.227 1140.24,707.422 1140.8,691.921 1141.36,677.101 1141.92,661.891 1142.48,647.218 1143.04,649.165 1143.6,664.774 1144.16,654.85 1144.72,657.924 1145.28,639.74 1145.84,596.26 1146.4,616.443 1146.96,634.076 1147.51,620.462 1148.07,640.222 1148.63,644.368 1149.19,614.366 1149.75,636.665 1150.31,636.487 1150.87,610.27 1151.43,633.67 1151.99,638.085 1152.55,643.833 1153.11,611.864 1153.67,647.928 1154.23,647.659 1154.78,649.096 1155.34,666.553 1155.9,666.201 1156.46,651.635 1157.02,653.769 1157.58,645.603 1158.14,665.69 1158.7,646.326 1159.26,661.76 1159.82,660.495 1160.38,646.864 1160.94,630.214 1161.5,615.44 1162.05,621.225 1162.61,624.859 1163.17,629.015 1163.73,630.861 1164.29,646.981 1164.85,616.396 1165.41,638.126 1165.97,659.963 1166.53,660.57 1167.09,674.148 1167.65,672.382 1168.21,672.936 1168.77,722.307 1169.33,770.912 1169.88,767.654 1170.44,729.13 1171,691.532 1171.56,710.362 1172.12,741.046 1172.68,741.72 1173.24,724.501 1173.8,688.365 1174.36,704.699 1174.92,688.239 1175.48,685.847 1176.04,701.503 1176.6,711.384 1177.15,659.79 1177.71,647.525 1178.27,634.608 1178.83,635.512 1179.39,605.757 1179.95,641.092 1180.51,626.509 1181.07,645.49 1181.63,649.409 1182.19,634.742 1182.75,653.59 1183.31,656.038 1183.87,659.732 1184.43,695.776 1184.98,713.271 1185.54,727.928 1186.1,742.118 1186.66,739.356 1187.22,769.166 1187.78,748.683 1188.34,728.444 1188.9,729.597 1189.46,713.114 1190.02,694.694 1190.58,695.828 1191.14,746.603 1191.7,775.406 1192.25,769.052 1192.81,763.49 1193.37,755.338 1193.93,753.415 1194.49,766.336 1195.05,744.49 1195.61,707.475 1196.17,710.209 1196.73,694.834 1197.29,692.927 1197.85,690.269 1198.41,685.327 1198.97,686.976 1199.52,672.669 1200.08,708.212 1200.64,708.437 1201.2,691.222 1201.76,706.707 1202.32,657.031 1202.88,653.951 1203.44,654.98 1204,672.11 1204.56,671.907 1205.12,704.04 1205.68,719.292 1206.24,718.784 1206.8,718.177 1207.35,728.304 1207.91,740.589 1208.47,734.488 1209.03,744.653 1209.59,725.028 1210.15,723.735 1210.71,709.066 1211.27,709.541 1211.83,710.791 1212.39,756.341 1212.95,769.776 1213.51,747.669 1214.07,729.883 1214.62,724.895 1215.18,726.004 1215.74,691.135 1216.3,689.85 1216.86,718.823 1217.42,698.071 1217.98,711.377 1218.54,706.761 1219.1,706.542 1219.66,688.882 1220.22,671.373 1220.78,672.395 1221.34,673.509 1221.89,673.801 1222.45,675.205 1223.01,706.886 1223.57,706.099 1224.13,733.658 1224.69,699.828 1225.25,700.94 1225.81,717.902 1226.37,699.082 1226.93,740.683 1227.49,721.244 1228.05,718.677 1228.61,697.347 1229.17,725.58 1229.72,670.102 1230.28,668.483 1230.84,686.265 1231.4,685.921 1231.96,639.839 1232.52,623.453 1233.08,627.932 1233.64,612.204 1234.2,596.215 1234.76,631.906 1235.32,636.706 1235.88,606.408 1236.44,626.426 1236.99,659.86 1237.55,662.257 1238.11,698.065 1238.67,699.539 1239.23,728.944 1239.79,759.524 1240.35,804.221 1240.91,798.335 1241.47,778.011 1242.03,757.126 1242.59,769.904 1243.15,764.832 1243.71,745.247 1244.26,757.235 1244.82,710.233 1245.38,711.144 1245.94,710.265 1246.5,673.319 1247.06,690.076 1247.62,689.181 1248.18,703.937 1248.74,750.28 1249.3,763.161 1249.86,724.346 1250.42,692.035 1250.98,707.135 1251.54,721.327 1252.09,682.397 1252.65,654.024 1253.21,652.48 1253.77,606.258 1254.33,592.133 1254.89,596.205 1255.45,617.694 1256.01,619.732 1256.57,590.799 1257.13,550.283 1257.69,564.202 1258.25,569.62 1258.81,559.112 1259.36,599.515 1259.92,603.026 1260.48,640.59 1261.04,661.342 1261.6,679.368 1262.16,709.996 1262.72,695.564 1263.28,695.305 1263.84,694.91 1264.4,742.551 1264.96,739.739 1265.52,723.37 1266.08,736.709 1266.63,749.928 1267.19,746.353 1267.75,744.316 1268.31,758.101 1268.87,771.336 1269.43,734.595 1269.99,731.39 1270.55,728.508 1271.11,740.957 1271.67,721.42 1272.23,703.749 1272.79,715.571 1273.35,717.73 1273.91,749.239 1274.46,744.122 1275.02,723.779 1275.58,688.942 1276.14,651.461 1276.7,635.575 1277.26,620.377 1277.82,607.662 1278.38,611.339 1278.94,647.709 1279.5,618.595 1280.06,611.139 1280.62,600.686 1281.18,601.013 1281.73,607.366 1282.29,597.269 1282.85,635.598 1283.41,647.064 1283.97,632.932 1284.53,650.767 1285.09,668.585 1285.65,637.945 1286.21,658.319 1286.77,658.498 1287.33,676.497 1287.89,674.398 1288.45,690.678 1289,658.204 1289.56,645.528 1290.12,644.452 1290.68,660.199 1291.24,707.61 1291.8,703.845 1292.36,703.576 1292.92,670.689 1293.48,654.24 1294.04,658.077 1294.6,673.981 1295.16,653.841 1295.72,607.369 1296.28,642.838 1296.83,595.507 1297.39,601.024 1297.95,607.197 1298.51,629.787 1299.07,663.502 1299.63,701.521 1300.19,699.42 1300.75,683.562 1301.31,686.052 1301.87,685.14 1302.43,686.304 1302.99,700.828 1303.55,700.371 1304.1,700.407 1304.66,698.999 1305.22,732.211 1305.78,730.338 1306.34,724.182 1306.9,719.586 1307.46,700.719 1308.02,733.612 1308.58,745.638 1309.14,759.751 1309.7,788.285 1310.26,796.068 1310.82,806.743 1311.38,833.509 1311.93,827.476 1312.49,822.403 1313.05,833.466 1313.61,836.601 1314.17,843.655 1314.73,822.911 1315.29,810.996 1315.85,823.058 1316.41,816.073 1316.97,763.476 1317.53,709.886 1318.09,689.896 1318.65,703.767 1319.2,654.932 1319.76,688.584 1320.32,701.973 1320.88,680.162 1321.44,697.726 1322,709.674 1322.56,708.939 1323.12,691.678 1323.68,674.389 1324.24,677.011 1324.8,663.2 1325.36,630.491 1325.92,602.149 1326.47,605.791 1327.03,574.077 1327.59,591.574 1328.15,613.764 1328.71,583.477 1329.27,588.077 1329.83,576.996 1330.39,600.907 1330.95,686.228 1331.51,602.992 1332.07,621.129 1332.63,654.509 1333.19,687.233 1333.75,652.375 1334.3,636.197 1334.86,651.897 1335.42,651.329 1335.98,687.469 1336.54,673.29 1337.1,689.293 1337.66,658.282 1338.22,663.374 1338.78,651.482 1339.34,654.156 1339.9,638.783 1340.46,639.5 1341.02,656.911 1341.57,642.252 1342.13,595.483 1342.69,547.348 1343.25,537.732 1343.81,528.811 1344.37,536.932 1344.93,531.01 1345.49,540.795 1346.05,515.661 1346.61,507.817 1347.17,504.284 1347.73,527.348 1348.29,552.741 1348.84,541.315 1349.4,546.781 1349.96,568.777 1350.52,573.841 1351.08,595.567 1351.64,599.934 1352.2,588.292 1352.76,578.29 1353.32,586.782 1353.88,576.043 1354.44,583.945 1355,619.512 1355.56,640.335 1356.12,613.395 1356.67,603.431 1357.23,608.616 1357.79,646.184 1358.35,645.712 1358.91,652.626 1359.47,686.231 1360.03,671.308 1360.59,673.39 1361.15,692.221 1361.71,724.153 1362.27,719.738 1362.83,703.697 1363.39,687.58 1363.94,672.182 1364.5,672.012 1365.06,653.066 1365.62,653.978 1366.18,670.997 1366.74,672.484 1367.3,671.562 1367.86,674.821 1368.42,709.454 1368.98,723.635 1369.54,727.123 1370.1,679.066 1370.66,667.296 1371.21,666.805 1371.77,638.354 1372.33,610.059 1372.89,599.22 1373.45,633.963 1374.01,638.141 1374.57,623.858 1375.13,660.09 1375.69,695.553 1376.25,694.97 1376.81,695.573 1377.37,709.37 1377.93,689.233 1378.49,691.507 1379.04,706.284 1379.6,692.442 1380.16,692.468 1380.72,676.455 1381.28,676.937 1381.84,690.581 1382.4,691.502 1382.96,709.994 1383.52,712.22 1384.08,677.662 1384.64,693.913 1385.2,740.105 1385.76,754.519 1386.31,752.934 1386.87,767.111 1387.43,745.896 1387.99,744.495 1388.55,707.484 1389.11,752.325 1389.67,782.464 1390.23,795.21 1390.79,756.509 1391.35,766.74 1391.91,764.556 1392.47,778.419 1393.03,775.531 1393.58,754.421 1394.14,787.188 1394.7,815.304 1395.26,821.589 1395.82,812.807 1396.38,837.934 1396.94,846.125 1397.5,821.216 1398.06,816.366 1398.62,826.779 1399.18,818.478 1399.74,825.297 1400.3,802.776 1400.86,795.566 1401.41,771.74 1401.97,747.03 1402.53,776.532 1403.09,741.284 1403.65,705.534 1404.21,704.319 1404.77,685.434 1405.33,698.731 1405.89,716.111 1406.45,682.311 1407.01,667.116 1407.57,637.049 1408.13,608.425 1408.68,613.723 1409.24,617.671 1409.8,634.402 1410.36,651.443 1410.92,656.467 1411.48,640.088 1412.04,658.128 1412.6,674.812 1413.16,628.097 1413.72,665.923 1414.28,667.822 1414.84,684.175 1415.4,701.469 1415.95,680.747 1416.51,665.259 1417.07,645.105 1417.63,663.908 1418.19,631.847 1418.75,621.294 1419.31,610.043 1419.87,646.42 1420.43,663.989 1420.99,649.01 1421.55,634.127 1422.11,638.433 1422.67,641.7 1423.23,627.106 1423.78,631.938 1424.34,648.684 1424.9,685.387 1425.46,636.221 1426.02,653.78 1426.58,671.969 1427.14,657.992 1427.7,658.129 1428.26,632.371 1428.82,620.054 1429.38,623.882 1429.94,612.102 1430.5,661.927 1431.05,681.375 1431.61,668.647 1432.17,652.096 1432.73,701.649 1433.29,685.273 1433.85,658.582 1434.41,609.687 1434.97,631.219 1435.53,617.162 1436.09,672.632 1436.65,686.045 1437.21,735.428 1437.77,718.135 1438.33,735.292 1438.88,732.334 1439.44,747.385 1440,759.971 1440.56,786.029 1441.12,798.316 1441.68,821.171 1442.24,846.861 1442.8,840.614 1443.36,852.59 1443.92,846.659 1444.48,842.835 1445.04,870.373 1445.6,907.52 1446.15,912.313 1446.71,900.076 1447.27,874.337 1447.83,878.311 1448.39,838.424 1448.95,828.749 1449.51,820.353 1450.07,813.236 1450.63,804.01 1451.19,798.21 1451.75,787.474 1452.31,782.567 1452.87,762.975 1453.42,756.988 1453.98,753.088 1454.54,763.885 1455.1,774.048 1455.66,734.46 1456.22,731.663 1456.78,725.281 1457.34,741.591 1457.9,735.474 1458.46,730.014 1459.02,724.554 1459.58,671.853 1460.14,657.626 1460.7,659.309 1461.25,647.354 1461.81,645.66 1462.37,665.361 1462.93,665.461 1463.49,614.907 1464.05,617.683 1464.61,639.676 1465.17,660.168 1465.73,643.767 1466.29,644.424 1466.85,628.532 1467.41,647.78 1467.97,647.59 1468.52,695.961 1469.08,675.599 1469.64,676.255 1470.2,678.006 1470.76,694.787 1471.32,710.643 1471.88,756.444 1472.44,736.74 1473,735.653 1473.56,733.85 1474.12,700.287 1474.68,728.888 1475.24,694.88 1475.79,660.882 1476.35,627.701 1476.91,613.294 1477.47,616.15 1478.03,574.174 1478.59,581.884 1479.15,553.537 1479.71,562.539 1480.27,585.091 1480.83,571.015 1481.39,558.232 1481.95,584.428 1482.51,592.794 1483.07,614.801 1483.62,632.726 1484.18,640.777 1484.74,612.094 1485.3,635.318 1485.86,638.846 1486.42,623.742 1486.98,611.481 1487.54,613.804 1488.1,629.294 1488.66,632.1 1489.22,633.975 1489.78,654.49 1490.34,655.821 1490.89,659.136 1491.45,675.431 1492.01,664.581 1492.57,648.699 1493.13,636.62 1493.69,657.152 1494.25,675.265 1494.81,664.985 1495.37,649.443 1495.93,666.372 1496.49,685.624 1497.05,671.854 1497.61,706.07 1498.16,689.317 1498.72,689.318 1499.28,685.672 1499.84,683.345 1500.4,698.724 1500.96,683.773 1501.52,682.983 1502.08,669.189 1502.64,669.178 1503.2,718.037 1503.76,713.651 1504.32,731.721 1504.88,729.589 1505.44,726.802 1505.99,753.598 1506.55,733.624 1507.11,698.333 1507.67,678.618 1508.23,680.048 1508.79,662.524 1509.35,645.453 1509.91,632.74 1510.47,650.446 1511.03,635.136 1511.59,636.569 1512.15,640.246 1512.71,676.374 1513.26,692.028 1513.82,706.627 1514.38,719.887 1514.94,765.27 1515.5,761.038 1516.06,754.676 1516.62,754.717 1517.18,735.629 1517.74,732.435 1518.3,710.785 1518.86,726.989 1519.42,708.528 1519.98,722.564 1520.53,688.307 1521.09,687.839 1521.65,670.808 1522.21,653.997 1522.77,687.723 1523.33,693.215 1523.89,680 1524.45,695.952 1525.01,696.889 1525.57,696.326 1526.13,712.362 1526.69,676.951 1527.25,676.956 1527.81,659.129 1528.36,693.39 1528.92,727.484 1529.48,709.986 1530.04,740.56 1530.6,736.746 1531.16,750.128 1531.72,726.894 1532.28,722.515 1532.84,705.139 1533.4,703.732 1533.96,688.454 1534.52,672.298 1535.08,689.591 1535.63,658.138 1536.19,641.802 1536.75,645.643 1537.31,598.195 1537.87,633.403 1538.43,668.911 1538.99,639.825 1539.55,623.609 1540.11,611.124 1540.67,630.457 1541.23,602.075 1541.79,607.828 1542.35,625.809 1542.9,629.692 1543.46,665.232 1544.02,651.509 1544.58,670.32 1545.14,722.286 1545.7,721.76 1546.26,785.218 1546.82,747.471 1547.38,746.171 1547.94,762.1 1548.5,759.114 1549.06,756.012 1549.62,751.455 1550.18,733.076 1550.73,745.97 1551.29,744.523 1551.85,739.739 1552.41,723.139 1552.97,707.055 1553.53,704.3 1554.09,720.116 1554.65,719.795 1555.21,733.224 1555.77,717.093 1556.33,731.936 1556.89,761.005 1557.45,754.294 1558,782.814 1558.56,827.632 1559.12,850.328 1559.68,860.455 1560.24,853.054 1560.8,860.039 1561.36,849.287 1561.92,822.843 1562.48,830.212 1563.04,792.909 1563.6,800.748 1564.16,793.486 1564.72,819.453 1565.28,764.706 1565.83,758.529 1566.39,750.481 1566.95,780.654 1567.51,758.075 1568.07,755.068 1568.63,752.235 1569.19,732.732 1569.75,712.213 1570.31,710.468 1570.87,658.772 1571.43,657.876 1571.99,657.27 1572.55,672.593 1573.1,672.438 1573.66,675.793 1574.22,724.273 1574.78,742.793 1575.34,755.601 1575.9,752.117 1576.46,731.533 1577.02,714.505 1577.58,697.124 1578.14,728.257 1578.7,691.705 1579.26,691.908 1579.82,692.572 1580.37,709.175 1580.93,690.309 1581.49,704.806 1582.05,689.223 1582.61,687.361 1583.17,686.684 1583.73,703.792 1584.29,699.949 1584.85,683.876 1585.41,716.043 1585.97,716.111 1586.53,713.838 1587.09,712.065 1587.65,696.343 1588.2,728.239 1588.76,709.695 1589.32,725.068 1589.88,721.448 1590.44,721.615 1591,749.436 1591.56,731.578 1592.12,746.293 1592.68,740.624 1593.24,755.872 1593.8,818.719 1594.36,796.516 1594.92,775.525 1595.47,752.941 1596.03,747.692 1596.59,729.409 1597.15,695.49 1597.71,659.867 1598.27,661.146 1598.83,684.332 1599.39,683.45 1599.95,670.419 1600.51,671.52 1601.07,671.673 1601.63,657.754 1602.19,643.476 1602.74,661.46 1603.3,643.492 1603.86,674.711 1604.42,705.845 1604.98,702.555 1605.54,670.651 1606.1,654.276 1606.66,658.162 1607.22,613.989 1607.78,598.613 1608.34,604.669 1608.9,608.406 1609.46,610.028 1610.02,565.638 1610.57,590.264 1611.13,594.727 1611.69,617.27 1612.25,639.072 1612.81,640.101 1613.37,627.59 1613.93,616.508 1614.49,619.801 1615.05,607.536 1615.61,611.659 1616.17,614.769 1616.73,616.694 1617.29,620.52 1617.84,623.804 1618.4,607.311 1618.96,593.356 1619.52,614.379 1620.08,637.348 1620.64,624.383 1621.2,630.348 1621.76,622.838 1622.32,606.211 1622.88,611.933 1623.44,649.18 1624,618.429 1624.56,605.016 1625.11,594.179 1625.67,600.791 1626.23,621.537 1626.79,596.306 1627.35,614.07 1627.91,650.89 1628.47,634.711 1629.03,671.938 1629.59,655.665 1630.15,639.16 1630.71,658.695 1631.27,661.294 1631.83,661.245 1632.39,632.479 1632.94,620.924 1633.5,611.164 1634.06,613.785 1634.62,552.303 1635.18,556.699 1635.74,545.186 1636.3,549.882 1636.86,540.743 1637.42,550.015 1637.98,558.233 1638.54,565.081 1639.1,568.772 1639.66,562.392 1640.21,602.387 1640.77,588.376 1641.33,592.734 1641.89,612.017 1642.45,599.305 1643.01,622.193 1643.57,658.183 1644.13,677.124 1644.69,692.481 1645.25,707.402 1645.81,702.013 1646.37,715.036 1646.93,732.193 1647.48,744.217 1648.04,722.725 1648.6,737.671 1649.16,734.73 1649.72,750.428 1650.28,730.03 1650.84,761.54 1651.4,726.376 1651.96,723.048 1652.52,719.119 1653.08,718.302 1653.64,697.634 1654.2,712.888 1654.76,706.958 1655.31,707.568 1655.87,640.932 1656.43,658.101 1656.99,643.152 1657.55,660.879 1658.11,658.728 1658.67,677.454 1659.23,680.446 1659.79,682.138 1660.35,649.126 1660.91,634.639 1661.47,637.48 1662.03,643.997 1662.58,679.499 1663.14,711.318 1663.7,695.884 1664.26,664.94 1664.82,647.105 1665.38,601.14 1665.94,624.622 1666.5,628.545 1667.06,664.008 1667.62,668.351 1668.18,657.196 1668.74,674.416 1669.3,645.142 1669.85,630.399 1670.41,647.614 1670.97,669.285 1671.53,700.741 1672.09,684.51 1672.65,748.389 1673.21,746.475 1673.77,715.036 1674.33,728.596 1674.89,725.542 1675.45,707.585 1676.01,751.855 1676.57,715.74 1677.13,682.634 1677.68,662.477 1678.24,680.831 1678.8,663.714 1679.36,664.21 1679.92,664.021 1680.48,667.494 1681.04,680.776 1681.6,695.687 1682.16,711.268 1682.72,662.794 1683.28,665.589 1683.84,688.122 1684.4,689.637 1684.95,668.806 1685.51,699.333 1686.07,700.275 1686.63,683.599 1687.19,634.353 1687.75,686.04 1688.31,669.681 1688.87,637.425 1689.43,608.152 1689.99,612.612 1690.55,585.281 1691.11,627.982 1691.67,650.842 1692.23,669.648 1692.78,686.806 1693.34,668.776 1693.9,668.52 1694.46,683.803 1695.02,668.572 1695.58,703.744 1696.14,719.469 1696.7,687.198 1697.26,682.281 1697.82,682.115 1698.38,713.195 1698.94,724.664 1699.5,706.088 1700.05,704.967 1700.61,734.431 1701.17,746.593 1701.73,761.236 1702.29,754.533 1702.85,780.505 1703.41,775.889 1703.97,788.417 1704.53,795.298 1705.09,758.593 1705.65,754.123 1706.21,765.059 1706.77,776.968 1707.32,771.23 1707.88,766.306 1708.44,777.747 1709,756.078 1709.56,734.029 1710.12,745.367 1710.68,740.6 1711.24,751.561 1711.8,747.895 1712.36,743.539 1712.92,723.321 1713.48,707.317 1714.04,722.267 1714.6,702.819 1715.15,703.943 1715.71,667.897 1716.27,668.917 1716.83,668.28 1717.39,637.812 1717.95,637.467 1718.51,621.824 1719.07,605.588 1719.63,610.844 1720.19,599.614 1720.75,589.286 1721.31,578.862 1721.87,567.318 1722.42,592.117 1722.98,616.727 1723.54,632.916 1724.1,634.427 1724.66,665.843 1725.22,699.748 1725.78,684.476 1726.34,604.109 1726.9,643.858 1727.46,646.505 1728.02,665.134 1728.58,662.13 1729.14,711.653 1729.69,708.653 1730.25,708.191 1730.81,722.157 1731.37,736.021 1731.93,733.161 1732.49,715.625 1733.05,715.133 1733.61,661.705 1734.17,664.945 1734.73,650.706 1735.29,602.953 1735.85,571.638 1736.41,594.849 1736.97,597.449 1737.52,602.813 1738.08,577.463 1738.64,552.211 1739.2,555.791 1739.76,549.773 1740.32,555.329 1740.88,561.199 1741.44,571.081 1742,595.889 1742.56,629.58 1743.12,663.741 1743.68,697.887 1744.24,691.219 1744.79,689.591 1745.35,687.4 1745.91,716.589 1746.47,762.27 1747.03,725.162 1747.59,755.337 1748.15,767.251 1748.71,813.696 1749.27,786.507 1749.83,813.407 1750.39,806.839 1750.95,835.576 1751.51,846.38 1752.06,824.428 1752.62,801.928 1753.18,796.821 1753.74,804.353 1754.3,800.519 1754.86,780.236 1755.42,790.085 1755.98,783.486 1756.54,793.785 1757.1,790.249 1757.66,787.348 1758.22,769.065 1758.78,784.989 1759.34,780.019 1759.89,728.912 1760.45,742.122 1761.01,737.102 1761.57,703.12 1762.13,701.918 1762.69,731.563 1763.25,761.103 1763.81,788.739 1764.37,783.824 1764.93,761.38 1765.49,761.631 1766.05,757.877 1766.61,734.753 1767.16,719.311 1767.72,702.402 1768.28,669.45 1768.84,683.607 1769.4,667.459 1769.96,668.2 1770.52,732.738 1771.08,680.442 1771.64,665.201 1772.2,664.956 1772.76,667.017 1773.32,648.539 1773.88,671.676 1774.43,685.506 1774.99,655.621 1775.55,624.164 1776.11,611.753 1776.67,614.952 1777.23,602.078 1777.79,606.468 1778.35,609.921 1778.91,613.149 1779.47,631.771 1780.03,620.079 1780.59,642.928 1781.15,631.654 1781.71,615.919 1782.26,619.636 1782.82,606.78 1783.38,640.646 1783.94,677.551 1784.5,661.468 1785.06,661.663 1785.62,662.652 1786.18,676.476 1786.74,676.515 1787.3,663.895 1787.86,634.009 1788.42,650.782 1788.98,666.658 1789.53,683.457 1790.09,668.595 1790.65,670.754 1791.21,657.791 1791.77,657.665 1792.33,675.482 1792.89,691.569 1793.45,705.11 1794.01,718.138 1794.57,714.124 1795.13,714.136 1795.69,713.873 1796.25,744.028 1796.8,725.388 1797.36,672.975 1797.92,675.361 1798.48,675.605 1799.04,679.312 1799.6,664.867 1800.16,633.464 1800.72,637.292 1801.28,655.241 1801.84,653.961 1802.4,672.451 1802.96,658.021 1803.52,609.957 1804.08,579.06 1804.63,601.066 1805.19,622.436 1805.75,610.752 1806.31,631.868 1806.87,633.276 1807.43,633.514 1807.99,638.659 1808.55,625.742 1809.11,661.477 1809.67,677.203 1810.23,692.494 1810.79,676.291 1811.35,659.233 1811.9,659.561 1812.46,675.054 1813.02,661.1 1813.58,664.149 1814.14,662.771 1814.7,694.983 1815.26,696.093 1815.82,713.886 1816.38,681.673 1816.94,715.614 1817.5,714.273 1818.06,692.889 1818.62,710.203 1819.18,690.768 1819.73,676.478 1820.29,661.099 1820.85,614.739 1821.41,649.614 1821.97,634.416 1822.53,654.296 1823.09,676.138 1823.65,692.437 1824.21,741.683 1824.77,742.341 1825.33,737.316 1825.89,749.909 1826.45,776.147 1827,758.105 1827.56,784.623 1828.12,750.865 1828.68,730.091 1829.24,746.348 1829.8,727.21 1830.36,725.151 1830.92,751.579 1831.48,730.307 1832.04,708.958 1832.6,695.297 1833.16,727.604 1833.72,727.522 1834.27,693.172 1834.83,678.646 1835.39,696.636 1835.95,679.08 1836.51,711.789 1837.07,741.776 1837.63,723.69 1838.19,739.185 \"/>\n<path clip-path=\"url(#clip393)\" d=\"M720.247 692.463 L720.806 692.463 L721.365 692.463 L721.924 692.463 L722.484 692.463 L723.043 692.463 L723.602 692.463 L724.161 692.463 L724.721 692.463 L725.28 692.463 L725.839 692.463 L726.398 692.463 L726.958 692.463 L727.517 692.463 L728.076 692.463 L728.635 692.463 L729.195 692.463 L729.754 692.463 L730.313 692.463 L730.872 692.463 L731.432 692.463 L731.991 692.463 L732.55 692.463 L733.109 692.463 L733.669 692.463 L734.228 692.463 L734.787 692.463 L735.346 692.463 L735.906 692.463 L736.465 692.463 L737.024 692.463 L737.583 692.463 L738.143 692.463 L738.702 692.463 L739.261 692.463 L739.82 692.463 L740.38 692.463 L740.939 692.463 L741.498 692.463 L742.057 692.463 L742.617 692.463 L743.176 692.463 L743.735 692.463 L744.294 692.463 L744.854 692.463 L745.413 692.463 L745.972 692.463 L746.531 692.463 L747.091 692.463 L747.65 692.463 L748.209 692.463 L748.768 692.463 L749.328 692.463 L749.887 692.463 L750.446 692.463 L751.005 692.463 L751.565 692.463 L752.124 692.463 L752.683 692.463 L753.242 692.463 L753.802 692.463 L754.361 692.463 L754.92 692.463 L755.479 692.463 L756.039 692.463 L756.598 692.463 L757.157 692.463 L757.716 692.463 L758.276 692.463 L758.835 692.463 L759.394 692.463 L759.953 692.463 L760.513 692.463 L761.072 692.463 L761.631 692.463 L762.19 692.463 L762.75 692.463 L763.309 692.463 L763.868 692.463 L764.427 692.463 L764.987 692.463 L765.546 692.463 L766.105 692.463 L766.664 692.463 L767.224 692.463 L767.783 692.463 L768.342 692.463 L768.901 692.463 L769.461 692.463 L770.02 692.463 L770.579 692.463 L771.138 692.463 L771.698 692.463 L772.257 692.463 L772.816 692.463 L773.375 692.463 L773.935 692.463 L774.494 692.463 L775.053 692.463 L775.612 692.463 L776.172 692.463 L776.731 692.463 L777.29 692.463 L777.849 692.463 L778.409 692.463 L778.968 692.463 L779.527 692.463 L780.086 692.463 L780.646 692.463 L781.205 692.463 L781.764 692.463 L782.323 692.463 L782.883 692.463 L783.442 692.463 L784.001 692.463 L784.56 692.463 L785.12 692.463 L785.679 692.463 L786.238 692.463 L786.797 692.463 L787.357 692.463 L787.916 692.463 L788.475 692.463 L789.034 692.463 L789.594 692.463 L790.153 692.463 L790.712 692.463 L791.271 692.463 L791.831 692.463 L792.39 692.463 L792.949 692.463 L793.508 692.463 L794.068 692.463 L794.627 692.463 L795.186 692.463 L795.745 692.463 L796.305 692.463 L796.864 692.463 L797.423 692.463 L797.982 692.463 L798.542 692.463 L799.101 692.463 L799.66 692.463 L800.219 692.463 L800.779 692.463 L801.338 692.463 L801.897 692.463 L802.456 692.463 L803.016 692.463 L803.575 692.463 L804.134 692.463 L804.693 692.463 L805.253 692.463 L805.812 692.463 L806.371 692.463 L806.931 692.463 L807.49 692.463 L808.049 692.463 L808.608 692.463 L809.168 692.463 L809.727 692.463 L810.286 692.463 L810.845 692.463 L811.405 692.463 L811.964 692.463 L812.523 692.463 L813.082 692.463 L813.642 692.463 L814.201 692.463 L814.76 692.463 L815.319 692.463 L815.879 692.463 L816.438 692.463 L816.997 692.463 L817.556 692.463 L818.116 692.463 L818.675 692.463 L819.234 692.463 L819.793 692.463 L820.353 692.463 L820.912 692.463 L821.471 692.463 L822.03 692.463 L822.59 692.463 L823.149 692.463 L823.708 692.463 L824.267 692.463 L824.827 692.463 L825.386 692.463 L825.945 692.463 L826.504 692.463 L827.064 692.463 L827.623 692.463 L828.182 692.463 L828.741 692.463 L829.301 692.463 L829.86 692.463 L830.419 692.463 L830.978 692.463 L831.538 692.463 L832.097 692.463 L832.656 692.463 L833.215 692.463 L833.775 692.463 L834.334 692.463 L834.893 692.463 L835.452 692.463 L836.012 692.463 L836.571 692.463 L837.13 692.463 L837.689 692.463 L838.249 692.463 L838.808 692.463 L839.367 692.463 L839.926 692.463 L840.486 692.463 L841.045 692.463 L841.604 692.463 L842.163 692.463 L842.723 692.463 L843.282 692.463 L843.841 692.463 L844.4 692.463 L844.96 692.463 L845.519 692.463 L846.078 692.463 L846.637 692.463 L847.197 692.463 L847.756 692.463 L848.315 692.463 L848.874 692.463 L849.434 692.463 L849.993 692.463 L850.552 692.463 L851.111 692.463 L851.671 692.463 L852.23 692.463 L852.789 692.463 L853.348 692.463 L853.908 692.463 L854.467 692.463 L855.026 692.463 L855.585 692.463 L856.145 692.463 L856.704 692.463 L857.263 692.463 L857.822 692.463 L858.382 692.463 L858.941 692.463 L859.5 692.463 L860.059 692.463 L860.619 692.463 L861.178 692.463 L861.737 692.463 L862.296 692.463 L862.856 692.463 L863.415 692.463 L863.974 692.463 L864.533 692.463 L865.093 692.463 L865.652 692.463 L866.211 692.463 L866.77 692.463 L867.33 692.463 L867.889 692.463 L868.448 692.463 L869.007 692.463 L869.567 692.463 L870.126 692.463 L870.685 692.463 L871.244 692.463 L871.804 692.463 L872.363 692.463 L872.922 692.463 L873.481 692.463 L874.041 692.463 L874.6 692.463 L875.159 692.463 L875.718 692.463 L876.278 692.463 L876.837 692.463 L877.396 692.463 L877.955 692.463 L878.515 692.463 L879.074 692.463 L879.633 692.463 L880.192 692.463 L880.752 692.463 L881.311 692.463 L881.87 692.463 L882.429 692.463 L882.989 692.463 L883.548 692.463 L884.107 692.463 L884.666 692.463 L885.226 692.463 L885.785 692.463 L886.344 692.463 L886.903 692.463 L887.463 692.463 L888.022 692.463 L888.581 692.463 L889.14 692.463 L889.7 692.463 L890.259 692.463 L890.818 692.463 L891.377 692.463 L891.937 692.463 L892.496 692.463 L893.055 692.463 L893.614 692.463 L894.174 692.463 L894.733 692.463 L895.292 692.463 L895.851 692.463 L896.411 692.463 L896.97 692.463 L897.529 692.463 L898.088 692.463 L898.648 692.463 L899.207 692.463 L899.766 692.463 L900.325 692.463 L900.885 692.463 L901.444 692.463 L902.003 692.463 L902.562 692.463 L903.122 692.463 L903.681 692.463 L904.24 692.463 L904.799 692.463 L905.359 692.463 L905.918 692.463 L906.477 692.463 L907.036 692.463 L907.596 692.463 L908.155 692.463 L908.714 692.463 L909.273 692.463 L909.833 692.463 L910.392 692.463 L910.951 692.463 L911.51 692.463 L912.07 692.463 L912.629 692.463 L913.188 692.463 L913.747 692.463 L914.307 692.463 L914.866 692.463 L915.425 692.463 L915.984 692.463 L916.544 692.463 L917.103 692.463 L917.662 692.463 L918.221 692.463 L918.781 692.463 L919.34 692.463 L919.899 692.463 L920.458 692.463 L921.018 692.463 L921.577 692.463 L922.136 692.463 L922.695 692.463 L923.255 692.463 L923.814 692.463 L924.373 692.463 L924.932 692.463 L925.492 692.463 L926.051 692.463 L926.61 692.463 L927.169 692.463 L927.729 692.463 L928.288 692.463 L928.847 692.463 L929.406 692.463 L929.966 692.463 L930.525 692.463 L931.084 692.463 L931.644 692.463 L932.203 692.463 L932.762 692.463 L933.321 692.463 L933.881 692.463 L934.44 692.463 L934.999 692.463 L935.558 692.463 L936.118 692.463 L936.677 692.463 L937.236 692.463 L937.795 692.463 L938.355 692.463 L938.914 692.463 L939.473 692.463 L940.032 692.463 L940.592 692.463 L941.151 692.463 L941.71 692.463 L942.269 692.463 L942.829 692.463 L943.388 692.463 L943.947 692.463 L944.506 692.463 L945.066 692.463 L945.625 692.463 L946.184 692.463 L946.743 692.463 L947.303 692.463 L947.862 692.463 L948.421 692.463 L948.98 692.463 L949.54 692.463 L950.099 692.463 L950.658 692.463 L951.217 692.463 L951.777 692.463 L952.336 692.463 L952.895 692.463 L953.454 692.463 L954.014 692.463 L954.573 692.463 L955.132 692.463 L955.691 692.463 L956.251 692.463 L956.81 692.463 L957.369 692.463 L957.928 692.463 L958.488 692.463 L959.047 692.463 L959.606 692.463 L960.165 692.463 L960.725 692.463 L961.284 692.463 L961.843 692.463 L962.402 692.463 L962.962 692.463 L963.521 692.463 L964.08 692.463 L964.639 692.463 L965.199 692.463 L965.758 692.463 L966.317 692.463 L966.876 692.463 L967.436 692.463 L967.995 692.463 L968.554 692.463 L969.113 692.463 L969.673 692.463 L970.232 692.463 L970.791 692.463 L971.35 692.463 L971.91 692.463 L972.469 692.463 L973.028 692.463 L973.587 692.463 L974.147 692.463 L974.706 692.463 L975.265 692.463 L975.824 692.463 L976.384 692.463 L976.943 692.463 L977.502 692.463 L978.061 692.463 L978.621 692.463 L979.18 692.463 L979.739 692.463 L980.298 692.463 L980.858 692.463 L981.417 692.463 L981.976 692.463 L982.535 692.463 L983.095 692.463 L983.654 692.463 L984.213 692.463 L984.772 692.463 L985.332 692.463 L985.891 692.463 L986.45 692.463 L987.009 692.463 L987.569 692.463 L988.128 692.463 L988.687 692.463 L989.246 692.463 L989.806 692.463 L990.365 692.463 L990.924 692.463 L991.483 692.463 L992.043 692.463 L992.602 692.463 L993.161 692.463 L993.72 692.463 L994.28 692.463 L994.839 692.463 L995.398 692.463 L995.957 692.463 L996.517 692.463 L997.076 692.463 L997.635 692.463 L998.194 692.463 L998.754 692.463 L999.313 692.463 L999.872 692.463 L1000.43 692.463 L1000.99 692.463 L1001.55 692.463 L1002.11 692.463 L1002.67 692.463 L1003.23 692.463 L1003.79 692.463 L1004.35 692.463 L1004.91 692.463 L1005.46 692.463 L1006.02 692.463 L1006.58 692.463 L1007.14 692.463 L1007.7 692.463 L1008.26 692.463 L1008.82 692.463 L1009.38 692.463 L1009.94 692.463 L1010.5 692.463 L1011.06 692.463 L1011.62 692.463 L1012.18 692.463 L1012.73 692.463 L1013.29 692.463 L1013.85 692.463 L1014.41 692.463 L1014.97 692.463 L1015.53 692.463 L1016.09 692.463 L1016.65 692.463 L1017.21 692.463 L1017.77 692.463 L1018.33 692.463 L1018.89 692.463 L1019.45 692.463 L1020.01 692.463 L1020.56 692.463 L1021.12 692.463 L1021.68 692.463 L1022.24 692.463 L1022.8 692.463 L1023.36 692.463 L1023.92 692.463 L1024.48 692.463 L1025.04 692.463 L1025.6 692.463 L1026.16 692.463 L1026.72 692.463 L1027.28 692.463 L1027.83 692.463 L1028.39 692.463 L1028.95 692.463 L1029.51 692.463 L1030.07 692.463 L1030.63 692.463 L1031.19 692.463 L1031.75 692.463 L1032.31 692.463 L1032.87 692.463 L1033.43 692.463 L1033.99 692.463 L1034.55 692.463 L1035.1 692.463 L1035.66 692.463 L1036.22 692.463 L1036.78 692.463 L1037.34 692.463 L1037.9 692.463 L1038.46 692.463 L1039.02 692.463 L1039.58 692.463 L1040.14 692.463 L1040.7 692.463 L1041.26 692.463 L1041.82 692.463 L1042.38 692.463 L1042.93 692.463 L1043.49 692.463 L1044.05 692.463 L1044.61 692.463 L1045.17 692.463 L1045.73 692.463 L1046.29 692.463 L1046.85 692.463 L1047.41 692.463 L1047.97 692.463 L1048.53 692.463 L1049.09 692.463 L1049.65 692.463 L1050.2 692.463 L1050.76 692.463 L1051.32 692.463 L1051.88 692.463 L1052.44 692.463 L1053 692.463 L1053.56 692.463 L1054.12 692.463 L1054.68 692.463 L1055.24 692.463 L1055.8 692.463 L1056.36 692.463 L1056.92 692.463 L1057.48 692.463 L1058.03 692.463 L1058.59 692.463 L1059.15 692.463 L1059.71 692.463 L1060.27 692.463 L1060.83 692.463 L1061.39 692.463 L1061.95 692.463 L1062.51 692.463 L1063.07 692.463 L1063.63 692.463 L1064.19 692.463 L1064.75 692.463 L1065.3 692.463 L1065.86 692.463 L1066.42 692.463 L1066.98 692.463 L1067.54 692.463 L1068.1 692.463 L1068.66 692.463 L1069.22 692.463 L1069.78 692.463 L1070.34 692.463 L1070.9 692.463 L1071.46 692.463 L1072.02 692.463 L1072.57 692.463 L1073.13 692.463 L1073.69 692.463 L1074.25 692.463 L1074.81 692.463 L1075.37 692.463 L1075.93 692.463 L1076.49 692.463 L1077.05 692.463 L1077.61 692.463 L1078.17 692.463 L1078.73 692.463 L1079.29 692.463 L1079.85 692.463 L1080.4 692.463 L1080.96 692.463 L1081.52 692.463 L1082.08 692.463 L1082.64 692.463 L1083.2 692.463 L1083.76 692.463 L1084.32 692.463 L1084.88 692.463 L1085.44 692.463 L1086 692.463 L1086.56 692.463 L1087.12 692.463 L1087.67 692.463 L1088.23 692.463 L1088.79 692.463 L1089.35 692.463 L1089.91 692.463 L1090.47 692.463 L1091.03 692.463 L1091.59 692.463 L1092.15 692.463 L1092.71 692.463 L1093.27 692.463 L1093.83 692.463 L1094.39 692.463 L1094.94 692.463 L1095.5 692.463 L1096.06 692.463 L1096.62 692.463 L1097.18 692.463 L1097.74 692.463 L1098.3 692.463 L1098.86 692.463 L1099.42 692.463 L1099.98 692.463 L1100.54 692.463 L1101.1 692.463 L1101.66 692.463 L1102.22 692.463 L1102.77 692.463 L1103.33 692.463 L1103.89 692.463 L1104.45 692.463 L1105.01 692.463 L1105.57 692.463 L1106.13 692.463 L1106.69 692.463 L1107.25 692.463 L1107.81 692.463 L1108.37 692.463 L1108.93 692.463 L1109.49 692.463 L1110.04 692.463 L1110.6 692.463 L1111.16 692.463 L1111.72 692.463 L1112.28 692.463 L1112.84 692.463 L1113.4 692.463 L1113.96 692.463 L1114.52 692.463 L1115.08 692.463 L1115.64 692.463 L1116.2 692.463 L1116.76 692.463 L1117.31 692.463 L1117.87 692.463 L1118.43 692.463 L1118.99 692.463 L1119.55 692.463 L1120.11 692.463 L1120.67 692.463 L1121.23 692.463 L1121.79 692.463 L1122.35 692.463 L1122.91 692.463 L1123.47 692.463 L1124.03 692.463 L1124.59 692.463 L1125.14 692.463 L1125.7 692.463 L1126.26 692.463 L1126.82 692.463 L1127.38 692.463 L1127.94 692.463 L1128.5 692.463 L1129.06 692.463 L1129.62 692.463 L1130.18 692.463 L1130.74 692.463 L1131.3 692.463 L1131.86 692.463 L1132.41 692.463 L1132.97 692.463 L1133.53 692.463 L1134.09 692.463 L1134.65 692.463 L1135.21 692.463 L1135.77 692.463 L1136.33 692.463 L1136.89 692.463 L1137.45 692.463 L1138.01 692.463 L1138.57 692.463 L1139.13 692.463 L1139.68 692.463 L1140.24 692.463 L1140.8 692.463 L1141.36 692.463 L1141.92 692.463 L1142.48 692.463 L1143.04 692.463 L1143.6 692.463 L1144.16 692.463 L1144.72 692.463 L1145.28 692.463 L1145.84 692.463 L1146.4 692.463 L1146.96 692.463 L1147.51 692.463 L1148.07 692.463 L1148.63 692.463 L1149.19 692.463 L1149.75 692.463 L1150.31 692.463 L1150.87 692.463 L1151.43 692.463 L1151.99 692.463 L1152.55 692.463 L1153.11 692.463 L1153.67 692.463 L1154.23 692.463 L1154.78 692.463 L1155.34 692.463 L1155.9 692.463 L1156.46 692.463 L1157.02 692.463 L1157.58 692.463 L1158.14 692.463 L1158.7 692.463 L1159.26 692.463 L1159.82 692.463 L1160.38 692.463 L1160.94 692.463 L1161.5 692.463 L1162.05 692.463 L1162.61 692.463 L1163.17 692.463 L1163.73 692.463 L1164.29 692.463 L1164.85 692.463 L1165.41 692.463 L1165.97 692.463 L1166.53 692.463 L1167.09 692.463 L1167.65 692.463 L1168.21 692.463 L1168.77 692.463 L1169.33 692.463 L1169.88 692.463 L1170.44 692.463 L1171 692.463 L1171.56 692.463 L1172.12 692.463 L1172.68 692.463 L1173.24 692.463 L1173.8 692.463 L1174.36 692.463 L1174.92 692.463 L1175.48 692.463 L1176.04 692.463 L1176.6 692.463 L1177.15 692.463 L1177.71 692.463 L1178.27 692.463 L1178.83 692.463 L1179.39 692.463 L1179.95 692.463 L1180.51 692.463 L1181.07 692.463 L1181.63 692.463 L1182.19 692.463 L1182.75 692.463 L1183.31 692.463 L1183.87 692.463 L1184.43 692.463 L1184.98 692.463 L1185.54 692.463 L1186.1 692.463 L1186.66 692.463 L1187.22 692.463 L1187.78 692.463 L1188.34 692.463 L1188.9 692.463 L1189.46 692.463 L1190.02 692.463 L1190.58 692.463 L1191.14 692.463 L1191.7 692.463 L1192.25 692.463 L1192.81 692.463 L1193.37 692.463 L1193.93 692.463 L1194.49 692.463 L1195.05 692.463 L1195.61 692.463 L1196.17 692.463 L1196.73 692.463 L1197.29 692.463 L1197.85 692.463 L1198.41 692.463 L1198.97 692.463 L1199.52 692.463 L1200.08 692.463 L1200.64 692.463 L1201.2 692.463 L1201.76 692.463 L1202.32 692.463 L1202.88 692.463 L1203.44 692.463 L1204 692.463 L1204.56 692.463 L1205.12 692.463 L1205.68 692.463 L1206.24 692.463 L1206.8 692.463 L1207.35 692.463 L1207.91 692.463 L1208.47 692.463 L1209.03 692.463 L1209.59 692.463 L1210.15 692.463 L1210.71 692.463 L1211.27 692.463 L1211.83 692.463 L1212.39 692.463 L1212.95 692.463 L1213.51 692.463 L1214.07 692.463 L1214.62 692.463 L1215.18 692.463 L1215.74 692.463 L1216.3 692.463 L1216.86 692.463 L1217.42 692.463 L1217.98 692.463 L1218.54 692.463 L1219.1 692.463 L1219.66 692.463 L1220.22 692.463 L1220.78 692.463 L1221.34 692.463 L1221.89 692.463 L1222.45 692.463 L1223.01 692.463 L1223.57 692.463 L1224.13 692.463 L1224.69 692.463 L1225.25 692.463 L1225.81 692.463 L1226.37 692.463 L1226.93 692.463 L1227.49 692.463 L1228.05 692.463 L1228.61 692.463 L1229.17 692.463 L1229.72 692.463 L1230.28 692.463 L1230.84 692.463 L1231.4 692.463 L1231.96 692.463 L1232.52 692.463 L1233.08 692.463 L1233.64 692.463 L1234.2 692.463 L1234.76 692.463 L1235.32 692.463 L1235.88 692.463 L1236.44 692.463 L1236.99 692.463 L1237.55 692.463 L1238.11 692.463 L1238.67 692.463 L1239.23 692.463 L1239.79 692.463 L1240.35 692.463 L1240.91 692.463 L1241.47 692.463 L1242.03 692.463 L1242.59 692.463 L1243.15 692.463 L1243.71 692.463 L1244.26 692.463 L1244.82 692.463 L1245.38 692.463 L1245.94 692.463 L1246.5 692.463 L1247.06 692.463 L1247.62 692.463 L1248.18 692.463 L1248.74 692.463 L1249.3 692.463 L1249.86 692.463 L1250.42 692.463 L1250.98 692.463 L1251.54 692.463 L1252.09 692.463 L1252.65 692.463 L1253.21 692.463 L1253.77 692.463 L1254.33 692.463 L1254.89 692.463 L1255.45 692.463 L1256.01 692.463 L1256.57 692.463 L1257.13 692.463 L1257.69 692.463 L1258.25 692.463 L1258.81 692.463 L1259.36 692.463 L1259.92 692.463 L1260.48 692.463 L1261.04 692.463 L1261.6 692.463 L1262.16 692.463 L1262.72 692.463 L1263.28 692.463 L1263.84 692.463 L1264.4 692.463 L1264.96 692.463 L1265.52 692.463 L1266.08 692.463 L1266.63 692.463 L1267.19 692.463 L1267.75 692.463 L1268.31 692.463 L1268.87 692.463 L1269.43 692.463 L1269.99 692.463 L1270.55 692.463 L1271.11 692.463 L1271.67 692.463 L1272.23 692.463 L1272.79 692.463 L1273.35 692.463 L1273.91 692.463 L1274.46 692.463 L1275.02 692.463 L1275.58 692.463 L1276.14 692.463 L1276.7 692.463 L1277.26 692.463 L1277.82 692.463 L1278.38 692.463 L1278.94 692.463 L1279.5 692.463 L1280.06 692.463 L1280.62 692.463 L1281.18 692.463 L1281.73 692.463 L1282.29 692.463 L1282.85 692.463 L1283.41 692.463 L1283.97 692.463 L1284.53 692.463 L1285.09 692.463 L1285.65 692.463 L1286.21 692.463 L1286.77 692.463 L1287.33 692.463 L1287.89 692.463 L1288.45 692.463 L1289 692.463 L1289.56 692.463 L1290.12 692.463 L1290.68 692.463 L1291.24 692.463 L1291.8 692.463 L1292.36 692.463 L1292.92 692.463 L1293.48 692.463 L1294.04 692.463 L1294.6 692.463 L1295.16 692.463 L1295.72 692.463 L1296.28 692.463 L1296.83 692.463 L1297.39 692.463 L1297.95 692.463 L1298.51 692.463 L1299.07 692.463 L1299.63 692.463 L1300.19 692.463 L1300.75 692.463 L1301.31 692.463 L1301.87 692.463 L1302.43 692.463 L1302.99 692.463 L1303.55 692.463 L1304.1 692.463 L1304.66 692.463 L1305.22 692.463 L1305.78 692.463 L1306.34 692.463 L1306.9 692.463 L1307.46 692.463 L1308.02 692.463 L1308.58 692.463 L1309.14 692.463 L1309.7 692.463 L1310.26 692.463 L1310.82 692.463 L1311.38 692.463 L1311.93 692.463 L1312.49 692.463 L1313.05 692.463 L1313.61 692.463 L1314.17 692.463 L1314.73 692.463 L1315.29 692.463 L1315.85 692.463 L1316.41 692.463 L1316.97 692.463 L1317.53 692.463 L1318.09 692.463 L1318.65 692.463 L1319.2 692.463 L1319.76 692.463 L1320.32 692.463 L1320.88 692.463 L1321.44 692.463 L1322 692.463 L1322.56 692.463 L1323.12 692.463 L1323.68 692.463 L1324.24 692.463 L1324.8 692.463 L1325.36 692.463 L1325.92 692.463 L1326.47 692.463 L1327.03 692.463 L1327.59 692.463 L1328.15 692.463 L1328.71 692.463 L1329.27 692.463 L1329.83 692.463 L1330.39 692.463 L1330.95 692.463 L1331.51 692.463 L1332.07 692.463 L1332.63 692.463 L1333.19 692.463 L1333.75 692.463 L1334.3 692.463 L1334.86 692.463 L1335.42 692.463 L1335.98 692.463 L1336.54 692.463 L1337.1 692.463 L1337.66 692.463 L1338.22 692.463 L1338.78 692.463 L1339.34 692.463 L1339.9 692.463 L1340.46 692.463 L1341.02 692.463 L1341.57 692.463 L1342.13 692.463 L1342.69 692.463 L1343.25 692.463 L1343.81 692.463 L1344.37 692.463 L1344.93 692.463 L1345.49 692.463 L1346.05 692.463 L1346.61 692.463 L1347.17 692.463 L1347.73 692.463 L1348.29 692.463 L1348.84 692.463 L1349.4 692.463 L1349.96 692.463 L1350.52 692.463 L1351.08 692.463 L1351.64 692.463 L1352.2 692.463 L1352.76 692.463 L1353.32 692.463 L1353.88 692.463 L1354.44 692.463 L1355 692.463 L1355.56 692.463 L1356.12 692.463 L1356.67 692.463 L1357.23 692.463 L1357.79 692.463 L1358.35 692.463 L1358.91 692.463 L1359.47 692.463 L1360.03 692.463 L1360.59 692.463 L1361.15 692.463 L1361.71 692.463 L1362.27 692.463 L1362.83 692.463 L1363.39 692.463 L1363.94 692.463 L1364.5 692.463 L1365.06 692.463 L1365.62 692.463 L1366.18 692.463 L1366.74 692.463 L1367.3 692.463 L1367.86 692.463 L1368.42 692.463 L1368.98 692.463 L1369.54 692.463 L1370.1 692.463 L1370.66 692.463 L1371.21 692.463 L1371.77 692.463 L1372.33 692.463 L1372.89 692.463 L1373.45 692.463 L1374.01 692.463 L1374.57 692.463 L1375.13 692.463 L1375.69 692.463 L1376.25 692.463 L1376.81 692.463 L1377.37 692.463 L1377.93 692.463 L1378.49 692.463 L1379.04 692.463 L1379.6 692.463 L1380.16 692.463 L1380.72 692.463 L1381.28 692.463 L1381.84 692.463 L1382.4 692.463 L1382.96 692.463 L1383.52 692.463 L1384.08 692.463 L1384.64 692.463 L1385.2 692.463 L1385.76 692.463 L1386.31 692.463 L1386.87 692.463 L1387.43 692.463 L1387.99 692.463 L1388.55 692.463 L1389.11 692.463 L1389.67 692.463 L1390.23 692.463 L1390.79 692.463 L1391.35 692.463 L1391.91 692.463 L1392.47 692.463 L1393.03 692.463 L1393.58 692.463 L1394.14 692.463 L1394.7 692.463 L1395.26 692.463 L1395.82 692.463 L1396.38 692.463 L1396.94 692.463 L1397.5 692.463 L1398.06 692.463 L1398.62 692.463 L1399.18 692.463 L1399.74 692.463 L1400.3 692.463 L1400.86 692.463 L1401.41 692.463 L1401.97 692.463 L1402.53 692.463 L1403.09 692.463 L1403.65 692.463 L1404.21 692.463 L1404.77 692.463 L1405.33 692.463 L1405.89 692.463 L1406.45 692.463 L1407.01 692.463 L1407.57 692.463 L1408.13 692.463 L1408.68 692.463 L1409.24 692.463 L1409.8 692.463 L1410.36 692.463 L1410.92 692.463 L1411.48 692.463 L1412.04 692.463 L1412.6 692.463 L1413.16 692.463 L1413.72 692.463 L1414.28 692.463 L1414.84 692.463 L1415.4 692.463 L1415.95 692.463 L1416.51 692.463 L1417.07 692.463 L1417.63 692.463 L1418.19 692.463 L1418.75 692.463 L1419.31 692.463 L1419.87 692.463 L1420.43 692.463 L1420.99 692.463 L1421.55 692.463 L1422.11 692.463 L1422.67 692.463 L1423.23 692.463 L1423.78 692.463 L1424.34 692.463 L1424.9 692.463 L1425.46 692.463 L1426.02 692.463 L1426.58 692.463 L1427.14 692.463 L1427.7 692.463 L1428.26 692.463 L1428.82 692.463 L1429.38 692.463 L1429.94 692.463 L1430.5 692.463 L1431.05 692.463 L1431.61 692.463 L1432.17 692.463 L1432.73 692.463 L1433.29 692.463 L1433.85 692.463 L1434.41 692.463 L1434.97 692.463 L1435.53 692.463 L1436.09 692.463 L1436.65 692.463 L1437.21 692.463 L1437.77 692.463 L1438.33 692.463 L1438.88 692.463 L1439.44 692.463 L1440 692.463 L1440.56 692.463 L1441.12 692.463 L1441.68 692.463 L1442.24 692.463 L1442.8 692.463 L1443.36 692.463 L1443.92 692.463 L1444.48 692.463 L1445.04 692.463 L1445.6 692.463 L1446.15 692.463 L1446.71 692.463 L1447.27 692.463 L1447.83 692.463 L1448.39 692.463 L1448.95 692.463 L1449.51 692.463 L1450.07 692.463 L1450.63 692.463 L1451.19 692.463 L1451.75 692.463 L1452.31 692.463 L1452.87 692.463 L1453.42 692.463 L1453.98 692.463 L1454.54 692.463 L1455.1 692.463 L1455.66 692.463 L1456.22 692.463 L1456.78 692.463 L1457.34 692.463 L1457.9 692.463 L1458.46 692.463 L1459.02 692.463 L1459.58 692.463 L1460.14 692.463 L1460.7 692.463 L1461.25 692.463 L1461.81 692.463 L1462.37 692.463 L1462.93 692.463 L1463.49 692.463 L1464.05 692.463 L1464.61 692.463 L1465.17 692.463 L1465.73 692.463 L1466.29 692.463 L1466.85 692.463 L1467.41 692.463 L1467.97 692.463 L1468.52 692.463 L1469.08 692.463 L1469.64 692.463 L1470.2 692.463 L1470.76 692.463 L1471.32 692.463 L1471.88 692.463 L1472.44 692.463 L1473 692.463 L1473.56 692.463 L1474.12 692.463 L1474.68 692.463 L1475.24 692.463 L1475.79 692.463 L1476.35 692.463 L1476.91 692.463 L1477.47 692.463 L1478.03 692.463 L1478.59 692.463 L1479.15 692.463 L1479.71 692.463 L1480.27 692.463 L1480.83 692.463 L1481.39 692.463 L1481.95 692.463 L1482.51 692.463 L1483.07 692.463 L1483.62 692.463 L1484.18 692.463 L1484.74 692.463 L1485.3 692.463 L1485.86 692.463 L1486.42 692.463 L1486.98 692.463 L1487.54 692.463 L1488.1 692.463 L1488.66 692.463 L1489.22 692.463 L1489.78 692.463 L1490.34 692.463 L1490.89 692.463 L1491.45 692.463 L1492.01 692.463 L1492.57 692.463 L1493.13 692.463 L1493.69 692.463 L1494.25 692.463 L1494.81 692.463 L1495.37 692.463 L1495.93 692.463 L1496.49 692.463 L1497.05 692.463 L1497.61 692.463 L1498.16 692.463 L1498.72 692.463 L1499.28 692.463 L1499.84 692.463 L1500.4 692.463 L1500.96 692.463 L1501.52 692.463 L1502.08 692.463 L1502.64 692.463 L1503.2 692.463 L1503.76 692.463 L1504.32 692.463 L1504.88 692.463 L1505.44 692.463 L1505.99 692.463 L1506.55 692.463 L1507.11 692.463 L1507.67 692.463 L1508.23 692.463 L1508.79 692.463 L1509.35 692.463 L1509.91 692.463 L1510.47 692.463 L1511.03 692.463 L1511.59 692.463 L1512.15 692.463 L1512.71 692.463 L1513.26 692.463 L1513.82 692.463 L1514.38 692.463 L1514.94 692.463 L1515.5 692.463 L1516.06 692.463 L1516.62 692.463 L1517.18 692.463 L1517.74 692.463 L1518.3 692.463 L1518.86 692.463 L1519.42 692.463 L1519.98 692.463 L1520.53 692.463 L1521.09 692.463 L1521.65 692.463 L1522.21 692.463 L1522.77 692.463 L1523.33 692.463 L1523.89 692.463 L1524.45 692.463 L1525.01 692.463 L1525.57 692.463 L1526.13 692.463 L1526.69 692.463 L1527.25 692.463 L1527.81 692.463 L1528.36 692.463 L1528.92 692.463 L1529.48 692.463 L1530.04 692.463 L1530.6 692.463 L1531.16 692.463 L1531.72 692.463 L1532.28 692.463 L1532.84 692.463 L1533.4 692.463 L1533.96 692.463 L1534.52 692.463 L1535.08 692.463 L1535.63 692.463 L1536.19 692.463 L1536.75 692.463 L1537.31 692.463 L1537.87 692.463 L1538.43 692.463 L1538.99 692.463 L1539.55 692.463 L1540.11 692.463 L1540.67 692.463 L1541.23 692.463 L1541.79 692.463 L1542.35 692.463 L1542.9 692.463 L1543.46 692.463 L1544.02 692.463 L1544.58 692.463 L1545.14 692.463 L1545.7 692.463 L1546.26 692.463 L1546.82 692.463 L1547.38 692.463 L1547.94 692.463 L1548.5 692.463 L1549.06 692.463 L1549.62 692.463 L1550.18 692.463 L1550.73 692.463 L1551.29 692.463 L1551.85 692.463 L1552.41 692.463 L1552.97 692.463 L1553.53 692.463 L1554.09 692.463 L1554.65 692.463 L1555.21 692.463 L1555.77 692.463 L1556.33 692.463 L1556.89 692.463 L1557.45 692.463 L1558 692.463 L1558.56 692.463 L1559.12 692.463 L1559.68 692.463 L1560.24 692.463 L1560.8 692.463 L1561.36 692.463 L1561.92 692.463 L1562.48 692.463 L1563.04 692.463 L1563.6 692.463 L1564.16 692.463 L1564.72 692.463 L1565.28 692.463 L1565.83 692.463 L1566.39 692.463 L1566.95 692.463 L1567.51 692.463 L1568.07 692.463 L1568.63 692.463 L1569.19 692.463 L1569.75 692.463 L1570.31 692.463 L1570.87 692.463 L1571.43 692.463 L1571.99 692.463 L1572.55 692.463 L1573.1 692.463 L1573.66 692.463 L1574.22 692.463 L1574.78 692.463 L1575.34 692.463 L1575.9 692.463 L1576.46 692.463 L1577.02 692.463 L1577.58 692.463 L1578.14 692.463 L1578.7 692.463 L1579.26 692.463 L1579.82 692.463 L1580.37 692.463 L1580.93 692.463 L1581.49 692.463 L1582.05 692.463 L1582.61 692.463 L1583.17 692.463 L1583.73 692.463 L1584.29 692.463 L1584.85 692.463 L1585.41 692.463 L1585.97 692.463 L1586.53 692.463 L1587.09 692.463 L1587.65 692.463 L1588.2 692.463 L1588.76 692.463 L1589.32 692.463 L1589.88 692.463 L1590.44 692.463 L1591 692.463 L1591.56 692.463 L1592.12 692.463 L1592.68 692.463 L1593.24 692.463 L1593.8 692.463 L1594.36 692.463 L1594.92 692.463 L1595.47 692.463 L1596.03 692.463 L1596.59 692.463 L1597.15 692.463 L1597.71 692.463 L1598.27 692.463 L1598.83 692.463 L1599.39 692.463 L1599.95 692.463 L1600.51 692.463 L1601.07 692.463 L1601.63 692.463 L1602.19 692.463 L1602.74 692.463 L1603.3 692.463 L1603.86 692.463 L1604.42 692.463 L1604.98 692.463 L1605.54 692.463 L1606.1 692.463 L1606.66 692.463 L1607.22 692.463 L1607.78 692.463 L1608.34 692.463 L1608.9 692.463 L1609.46 692.463 L1610.02 692.463 L1610.57 692.463 L1611.13 692.463 L1611.69 692.463 L1612.25 692.463 L1612.81 692.463 L1613.37 692.463 L1613.93 692.463 L1614.49 692.463 L1615.05 692.463 L1615.61 692.463 L1616.17 692.463 L1616.73 692.463 L1617.29 692.463 L1617.84 692.463 L1618.4 692.463 L1618.96 692.463 L1619.52 692.463 L1620.08 692.463 L1620.64 692.463 L1621.2 692.463 L1621.76 692.463 L1622.32 692.463 L1622.88 692.463 L1623.44 692.463 L1624 692.463 L1624.56 692.463 L1625.11 692.463 L1625.67 692.463 L1626.23 692.463 L1626.79 692.463 L1627.35 692.463 L1627.91 692.463 L1628.47 692.463 L1629.03 692.463 L1629.59 692.463 L1630.15 692.463 L1630.71 692.463 L1631.27 692.463 L1631.83 692.463 L1632.39 692.463 L1632.94 692.463 L1633.5 692.463 L1634.06 692.463 L1634.62 692.463 L1635.18 692.463 L1635.74 692.463 L1636.3 692.463 L1636.86 692.463 L1637.42 692.463 L1637.98 692.463 L1638.54 692.463 L1639.1 692.463 L1639.66 692.463 L1640.21 692.463 L1640.77 692.463 L1641.33 692.463 L1641.89 692.463 L1642.45 692.463 L1643.01 692.463 L1643.57 692.463 L1644.13 692.463 L1644.69 692.463 L1645.25 692.463 L1645.81 692.463 L1646.37 692.463 L1646.93 692.463 L1647.48 692.463 L1648.04 692.463 L1648.6 692.463 L1649.16 692.463 L1649.72 692.463 L1650.28 692.463 L1650.84 692.463 L1651.4 692.463 L1651.96 692.463 L1652.52 692.463 L1653.08 692.463 L1653.64 692.463 L1654.2 692.463 L1654.76 692.463 L1655.31 692.463 L1655.87 692.463 L1656.43 692.463 L1656.99 692.463 L1657.55 692.463 L1658.11 692.463 L1658.67 692.463 L1659.23 692.463 L1659.79 692.463 L1660.35 692.463 L1660.91 692.463 L1661.47 692.463 L1662.03 692.463 L1662.58 692.463 L1663.14 692.463 L1663.7 692.463 L1664.26 692.463 L1664.82 692.463 L1665.38 692.463 L1665.94 692.463 L1666.5 692.463 L1667.06 692.463 L1667.62 692.463 L1668.18 692.463 L1668.74 692.463 L1669.3 692.463 L1669.85 692.463 L1670.41 692.463 L1670.97 692.463 L1671.53 692.463 L1672.09 692.463 L1672.65 692.463 L1673.21 692.463 L1673.77 692.463 L1674.33 692.463 L1674.89 692.463 L1675.45 692.463 L1676.01 692.463 L1676.57 692.463 L1677.13 692.463 L1677.68 692.463 L1678.24 692.463 L1678.8 692.463 L1679.36 692.463 L1679.92 692.463 L1680.48 692.463 L1681.04 692.463 L1681.6 692.463 L1682.16 692.463 L1682.72 692.463 L1683.28 692.463 L1683.84 692.463 L1684.4 692.463 L1684.95 692.463 L1685.51 692.463 L1686.07 692.463 L1686.63 692.463 L1687.19 692.463 L1687.75 692.463 L1688.31 692.463 L1688.87 692.463 L1689.43 692.463 L1689.99 692.463 L1690.55 692.463 L1691.11 692.463 L1691.67 692.463 L1692.23 692.463 L1692.78 692.463 L1693.34 692.463 L1693.9 692.463 L1694.46 692.463 L1695.02 692.463 L1695.58 692.463 L1696.14 692.463 L1696.7 692.463 L1697.26 692.463 L1697.82 692.463 L1698.38 692.463 L1698.94 692.463 L1699.5 692.463 L1700.05 692.463 L1700.61 692.463 L1701.17 692.463 L1701.73 692.463 L1702.29 692.463 L1702.85 692.463 L1703.41 692.463 L1703.97 692.463 L1704.53 692.463 L1705.09 692.463 L1705.65 692.463 L1706.21 692.463 L1706.77 692.463 L1707.32 692.463 L1707.88 692.463 L1708.44 692.463 L1709 692.463 L1709.56 692.463 L1710.12 692.463 L1710.68 692.463 L1711.24 692.463 L1711.8 692.463 L1712.36 692.463 L1712.92 692.463 L1713.48 692.463 L1714.04 692.463 L1714.6 692.463 L1715.15 692.463 L1715.71 692.463 L1716.27 692.463 L1716.83 692.463 L1717.39 692.463 L1717.95 692.463 L1718.51 692.463 L1719.07 692.463 L1719.63 692.463 L1720.19 692.463 L1720.75 692.463 L1721.31 692.463 L1721.87 692.463 L1722.42 692.463 L1722.98 692.463 L1723.54 692.463 L1724.1 692.463 L1724.66 692.463 L1725.22 692.463 L1725.78 692.463 L1726.34 692.463 L1726.9 692.463 L1727.46 692.463 L1728.02 692.463 L1728.58 692.463 L1729.14 692.463 L1729.69 692.463 L1730.25 692.463 L1730.81 692.463 L1731.37 692.463 L1731.93 692.463 L1732.49 692.463 L1733.05 692.463 L1733.61 692.463 L1734.17 692.463 L1734.73 692.463 L1735.29 692.463 L1735.85 692.463 L1736.41 692.463 L1736.97 692.463 L1737.52 692.463 L1738.08 692.463 L1738.64 692.463 L1739.2 692.463 L1739.76 692.463 L1740.32 692.463 L1740.88 692.463 L1741.44 692.463 L1742 692.463 L1742.56 692.463 L1743.12 692.463 L1743.68 692.463 L1744.24 692.463 L1744.79 692.463 L1745.35 692.463 L1745.91 692.463 L1746.47 692.463 L1747.03 692.463 L1747.59 692.463 L1748.15 692.463 L1748.71 692.463 L1749.27 692.463 L1749.83 692.463 L1750.39 692.463 L1750.95 692.463 L1751.51 692.463 L1752.06 692.463 L1752.62 692.463 L1753.18 692.463 L1753.74 692.463 L1754.3 692.463 L1754.86 692.463 L1755.42 692.463 L1755.98 692.463 L1756.54 692.463 L1757.1 692.463 L1757.66 692.463 L1758.22 692.463 L1758.78 692.463 L1759.34 692.463 L1759.89 692.463 L1760.45 692.463 L1761.01 692.463 L1761.57 692.463 L1762.13 692.463 L1762.69 692.463 L1763.25 692.463 L1763.81 692.463 L1764.37 692.463 L1764.93 692.463 L1765.49 692.463 L1766.05 692.463 L1766.61 692.463 L1767.16 692.463 L1767.72 692.463 L1768.28 692.463 L1768.84 692.463 L1769.4 692.463 L1769.96 692.463 L1770.52 692.463 L1771.08 692.463 L1771.64 692.463 L1772.2 692.463 L1772.76 692.463 L1773.32 692.463 L1773.88 692.463 L1774.43 692.463 L1774.99 692.463 L1775.55 692.463 L1776.11 692.463 L1776.67 692.463 L1777.23 692.463 L1777.79 692.463 L1778.35 692.463 L1778.91 692.463 L1779.47 692.463 L1780.03 692.463 L1780.59 692.463 L1781.15 692.463 L1781.71 692.463 L1782.26 692.463 L1782.82 692.463 L1783.38 692.463 L1783.94 692.463 L1784.5 692.463 L1785.06 692.463 L1785.62 692.463 L1786.18 692.463 L1786.74 692.463 L1787.3 692.463 L1787.86 692.463 L1788.42 692.463 L1788.98 692.463 L1789.53 692.463 L1790.09 692.463 L1790.65 692.463 L1791.21 692.463 L1791.77 692.463 L1792.33 692.463 L1792.89 692.463 L1793.45 692.463 L1794.01 692.463 L1794.57 692.463 L1795.13 692.463 L1795.69 692.463 L1796.25 692.463 L1796.8 692.463 L1797.36 692.463 L1797.92 692.463 L1798.48 692.463 L1799.04 692.463 L1799.6 692.463 L1800.16 692.463 L1800.72 692.463 L1801.28 692.463 L1801.84 692.463 L1802.4 692.463 L1802.96 692.463 L1803.52 692.463 L1804.08 692.463 L1804.63 692.463 L1805.19 692.463 L1805.75 692.463 L1806.31 692.463 L1806.87 692.463 L1807.43 692.463 L1807.99 692.463 L1808.55 692.463 L1809.11 692.463 L1809.67 692.463 L1810.23 692.463 L1810.79 692.463 L1811.35 692.463 L1811.9 692.463 L1812.46 692.463 L1813.02 692.463 L1813.58 692.463 L1814.14 692.463 L1814.7 692.463 L1815.26 692.463 L1815.82 692.463 L1816.38 692.463 L1816.94 692.463 L1817.5 692.463 L1818.06 692.463 L1818.62 692.463 L1819.18 692.463 L1819.73 692.463 L1820.29 692.463 L1820.85 692.463 L1821.41 692.463 L1821.97 692.463 L1822.53 692.463 L1823.09 692.463 L1823.65 692.463 L1824.21 692.463 L1824.77 692.463 L1825.33 692.463 L1825.89 692.463 L1826.45 692.463 L1827 692.463 L1827.56 692.463 L1828.12 692.463 L1828.68 692.463 L1829.24 692.463 L1829.8 692.463 L1830.36 692.463 L1830.92 692.463 L1831.48 692.463 L1832.04 692.463 L1832.6 692.463 L1833.16 692.463 L1833.72 692.463 L1834.27 692.463 L1834.83 692.463 L1835.39 692.463 L1835.95 692.463 L1836.51 692.463 L1837.07 692.463 L1837.63 692.463 L1838.19 692.463 L1838.19 683.036 L1837.63 683.036 L1837.07 683.036 L1836.51 683.036 L1835.95 683.036 L1835.39 683.036 L1834.83 683.036 L1834.27 683.036 L1833.72 683.036 L1833.16 683.036 L1832.6 683.036 L1832.04 683.036 L1831.48 683.036 L1830.92 683.036 L1830.36 683.036 L1829.8 683.036 L1829.24 683.036 L1828.68 683.036 L1828.12 683.036 L1827.56 683.036 L1827 683.036 L1826.45 683.036 L1825.89 683.036 L1825.33 683.036 L1824.77 683.036 L1824.21 683.036 L1823.65 683.036 L1823.09 683.036 L1822.53 683.036 L1821.97 683.036 L1821.41 683.036 L1820.85 683.036 L1820.29 683.036 L1819.73 683.036 L1819.18 683.036 L1818.62 683.036 L1818.06 683.036 L1817.5 683.036 L1816.94 683.036 L1816.38 683.036 L1815.82 683.036 L1815.26 683.036 L1814.7 683.036 L1814.14 683.036 L1813.58 683.036 L1813.02 683.036 L1812.46 683.036 L1811.9 683.036 L1811.35 683.036 L1810.79 683.036 L1810.23 683.036 L1809.67 683.036 L1809.11 683.036 L1808.55 683.036 L1807.99 683.036 L1807.43 683.036 L1806.87 683.036 L1806.31 683.036 L1805.75 683.036 L1805.19 683.036 L1804.63 683.036 L1804.08 683.036 L1803.52 683.036 L1802.96 683.036 L1802.4 683.036 L1801.84 683.036 L1801.28 683.036 L1800.72 683.036 L1800.16 683.036 L1799.6 683.036 L1799.04 683.036 L1798.48 683.036 L1797.92 683.036 L1797.36 683.036 L1796.8 683.036 L1796.25 683.036 L1795.69 683.036 L1795.13 683.036 L1794.57 683.036 L1794.01 683.036 L1793.45 683.036 L1792.89 683.036 L1792.33 683.036 L1791.77 683.036 L1791.21 683.036 L1790.65 683.036 L1790.09 683.036 L1789.53 683.036 L1788.98 683.036 L1788.42 683.036 L1787.86 683.036 L1787.3 683.036 L1786.74 683.036 L1786.18 683.036 L1785.62 683.036 L1785.06 683.036 L1784.5 683.036 L1783.94 683.036 L1783.38 683.036 L1782.82 683.036 L1782.26 683.036 L1781.71 683.036 L1781.15 683.036 L1780.59 683.036 L1780.03 683.036 L1779.47 683.036 L1778.91 683.036 L1778.35 683.036 L1777.79 683.036 L1777.23 683.036 L1776.67 683.036 L1776.11 683.036 L1775.55 683.036 L1774.99 683.036 L1774.43 683.036 L1773.88 683.036 L1773.32 683.036 L1772.76 683.036 L1772.2 683.036 L1771.64 683.036 L1771.08 683.036 L1770.52 683.036 L1769.96 683.036 L1769.4 683.036 L1768.84 683.036 L1768.28 683.036 L1767.72 683.036 L1767.16 683.036 L1766.61 683.036 L1766.05 683.036 L1765.49 683.036 L1764.93 683.036 L1764.37 683.036 L1763.81 683.036 L1763.25 683.036 L1762.69 683.036 L1762.13 683.036 L1761.57 683.036 L1761.01 683.036 L1760.45 683.036 L1759.89 683.036 L1759.34 683.036 L1758.78 683.036 L1758.22 683.036 L1757.66 683.036 L1757.1 683.036 L1756.54 683.036 L1755.98 683.036 L1755.42 683.036 L1754.86 683.036 L1754.3 683.036 L1753.74 683.036 L1753.18 683.036 L1752.62 683.036 L1752.06 683.036 L1751.51 683.036 L1750.95 683.036 L1750.39 683.036 L1749.83 683.036 L1749.27 683.036 L1748.71 683.036 L1748.15 683.036 L1747.59 683.036 L1747.03 683.036 L1746.47 683.036 L1745.91 683.036 L1745.35 683.036 L1744.79 683.036 L1744.24 683.036 L1743.68 683.036 L1743.12 683.036 L1742.56 683.036 L1742 683.036 L1741.44 683.036 L1740.88 683.036 L1740.32 683.036 L1739.76 683.036 L1739.2 683.036 L1738.64 683.036 L1738.08 683.036 L1737.52 683.036 L1736.97 683.036 L1736.41 683.036 L1735.85 683.036 L1735.29 683.036 L1734.73 683.036 L1734.17 683.036 L1733.61 683.036 L1733.05 683.036 L1732.49 683.036 L1731.93 683.036 L1731.37 683.036 L1730.81 683.036 L1730.25 683.036 L1729.69 683.036 L1729.14 683.036 L1728.58 683.036 L1728.02 683.036 L1727.46 683.036 L1726.9 683.036 L1726.34 683.036 L1725.78 683.036 L1725.22 683.036 L1724.66 683.036 L1724.1 683.036 L1723.54 683.036 L1722.98 683.036 L1722.42 683.036 L1721.87 683.036 L1721.31 683.036 L1720.75 683.036 L1720.19 683.036 L1719.63 683.036 L1719.07 683.036 L1718.51 683.036 L1717.95 683.036 L1717.39 683.036 L1716.83 683.036 L1716.27 683.036 L1715.71 683.036 L1715.15 683.036 L1714.6 683.036 L1714.04 683.036 L1713.48 683.036 L1712.92 683.036 L1712.36 683.036 L1711.8 683.036 L1711.24 683.036 L1710.68 683.036 L1710.12 683.036 L1709.56 683.036 L1709 683.036 L1708.44 683.036 L1707.88 683.036 L1707.32 683.036 L1706.77 683.036 L1706.21 683.036 L1705.65 683.036 L1705.09 683.036 L1704.53 683.036 L1703.97 683.036 L1703.41 683.036 L1702.85 683.036 L1702.29 683.036 L1701.73 683.036 L1701.17 683.036 L1700.61 683.036 L1700.05 683.036 L1699.5 683.036 L1698.94 683.036 L1698.38 683.036 L1697.82 683.036 L1697.26 683.036 L1696.7 683.036 L1696.14 683.036 L1695.58 683.036 L1695.02 683.036 L1694.46 683.036 L1693.9 683.036 L1693.34 683.036 L1692.78 683.036 L1692.23 683.036 L1691.67 683.036 L1691.11 683.036 L1690.55 683.036 L1689.99 683.036 L1689.43 683.036 L1688.87 683.036 L1688.31 683.036 L1687.75 683.036 L1687.19 683.036 L1686.63 683.036 L1686.07 683.036 L1685.51 683.036 L1684.95 683.036 L1684.4 683.036 L1683.84 683.036 L1683.28 683.036 L1682.72 683.036 L1682.16 683.036 L1681.6 683.036 L1681.04 683.036 L1680.48 683.036 L1679.92 683.036 L1679.36 683.036 L1678.8 683.036 L1678.24 683.036 L1677.68 683.036 L1677.13 683.036 L1676.57 683.036 L1676.01 683.036 L1675.45 683.036 L1674.89 683.036 L1674.33 683.036 L1673.77 683.036 L1673.21 683.036 L1672.65 683.036 L1672.09 683.036 L1671.53 683.036 L1670.97 683.036 L1670.41 683.036 L1669.85 683.036 L1669.3 683.036 L1668.74 683.036 L1668.18 683.036 L1667.62 683.036 L1667.06 683.036 L1666.5 683.036 L1665.94 683.036 L1665.38 683.036 L1664.82 683.036 L1664.26 683.036 L1663.7 683.036 L1663.14 683.036 L1662.58 683.036 L1662.03 683.036 L1661.47 683.036 L1660.91 683.036 L1660.35 683.036 L1659.79 683.036 L1659.23 683.036 L1658.67 683.036 L1658.11 683.036 L1657.55 683.036 L1656.99 683.036 L1656.43 683.036 L1655.87 683.036 L1655.31 683.036 L1654.76 683.036 L1654.2 683.036 L1653.64 683.036 L1653.08 683.036 L1652.52 683.036 L1651.96 683.036 L1651.4 683.036 L1650.84 683.036 L1650.28 683.036 L1649.72 683.036 L1649.16 683.036 L1648.6 683.036 L1648.04 683.036 L1647.48 683.036 L1646.93 683.036 L1646.37 683.036 L1645.81 683.036 L1645.25 683.036 L1644.69 683.036 L1644.13 683.036 L1643.57 683.036 L1643.01 683.036 L1642.45 683.036 L1641.89 683.036 L1641.33 683.036 L1640.77 683.036 L1640.21 683.036 L1639.66 683.036 L1639.1 683.036 L1638.54 683.036 L1637.98 683.036 L1637.42 683.036 L1636.86 683.036 L1636.3 683.036 L1635.74 683.036 L1635.18 683.036 L1634.62 683.036 L1634.06 683.036 L1633.5 683.036 L1632.94 683.036 L1632.39 683.036 L1631.83 683.036 L1631.27 683.036 L1630.71 683.036 L1630.15 683.036 L1629.59 683.036 L1629.03 683.036 L1628.47 683.036 L1627.91 683.036 L1627.35 683.036 L1626.79 683.036 L1626.23 683.036 L1625.67 683.036 L1625.11 683.036 L1624.56 683.036 L1624 683.036 L1623.44 683.036 L1622.88 683.036 L1622.32 683.036 L1621.76 683.036 L1621.2 683.036 L1620.64 683.036 L1620.08 683.036 L1619.52 683.036 L1618.96 683.036 L1618.4 683.036 L1617.84 683.036 L1617.29 683.036 L1616.73 683.036 L1616.17 683.036 L1615.61 683.036 L1615.05 683.036 L1614.49 683.036 L1613.93 683.036 L1613.37 683.036 L1612.81 683.036 L1612.25 683.036 L1611.69 683.036 L1611.13 683.036 L1610.57 683.036 L1610.02 683.036 L1609.46 683.036 L1608.9 683.036 L1608.34 683.036 L1607.78 683.036 L1607.22 683.036 L1606.66 683.036 L1606.1 683.036 L1605.54 683.036 L1604.98 683.036 L1604.42 683.036 L1603.86 683.036 L1603.3 683.036 L1602.74 683.036 L1602.19 683.036 L1601.63 683.036 L1601.07 683.036 L1600.51 683.036 L1599.95 683.036 L1599.39 683.036 L1598.83 683.036 L1598.27 683.036 L1597.71 683.036 L1597.15 683.036 L1596.59 683.036 L1596.03 683.036 L1595.47 683.036 L1594.92 683.036 L1594.36 683.036 L1593.8 683.036 L1593.24 683.036 L1592.68 683.036 L1592.12 683.036 L1591.56 683.036 L1591 683.036 L1590.44 683.036 L1589.88 683.036 L1589.32 683.036 L1588.76 683.036 L1588.2 683.036 L1587.65 683.036 L1587.09 683.036 L1586.53 683.036 L1585.97 683.036 L1585.41 683.036 L1584.85 683.036 L1584.29 683.036 L1583.73 683.036 L1583.17 683.036 L1582.61 683.036 L1582.05 683.036 L1581.49 683.036 L1580.93 683.036 L1580.37 683.036 L1579.82 683.036 L1579.26 683.036 L1578.7 683.036 L1578.14 683.036 L1577.58 683.036 L1577.02 683.036 L1576.46 683.036 L1575.9 683.036 L1575.34 683.036 L1574.78 683.036 L1574.22 683.036 L1573.66 683.036 L1573.1 683.036 L1572.55 683.036 L1571.99 683.036 L1571.43 683.036 L1570.87 683.036 L1570.31 683.036 L1569.75 683.036 L1569.19 683.036 L1568.63 683.036 L1568.07 683.036 L1567.51 683.036 L1566.95 683.036 L1566.39 683.036 L1565.83 683.036 L1565.28 683.036 L1564.72 683.036 L1564.16 683.036 L1563.6 683.036 L1563.04 683.036 L1562.48 683.036 L1561.92 683.036 L1561.36 683.036 L1560.8 683.036 L1560.24 683.036 L1559.68 683.036 L1559.12 683.036 L1558.56 683.036 L1558 683.036 L1557.45 683.036 L1556.89 683.036 L1556.33 683.036 L1555.77 683.036 L1555.21 683.036 L1554.65 683.036 L1554.09 683.036 L1553.53 683.036 L1552.97 683.036 L1552.41 683.036 L1551.85 683.036 L1551.29 683.036 L1550.73 683.036 L1550.18 683.036 L1549.62 683.036 L1549.06 683.036 L1548.5 683.036 L1547.94 683.036 L1547.38 683.036 L1546.82 683.036 L1546.26 683.036 L1545.7 683.036 L1545.14 683.036 L1544.58 683.036 L1544.02 683.036 L1543.46 683.036 L1542.9 683.036 L1542.35 683.036 L1541.79 683.036 L1541.23 683.036 L1540.67 683.036 L1540.11 683.036 L1539.55 683.036 L1538.99 683.036 L1538.43 683.036 L1537.87 683.036 L1537.31 683.036 L1536.75 683.036 L1536.19 683.036 L1535.63 683.036 L1535.08 683.036 L1534.52 683.036 L1533.96 683.036 L1533.4 683.036 L1532.84 683.036 L1532.28 683.036 L1531.72 683.036 L1531.16 683.036 L1530.6 683.036 L1530.04 683.036 L1529.48 683.036 L1528.92 683.036 L1528.36 683.036 L1527.81 683.036 L1527.25 683.036 L1526.69 683.036 L1526.13 683.036 L1525.57 683.036 L1525.01 683.036 L1524.45 683.036 L1523.89 683.036 L1523.33 683.036 L1522.77 683.036 L1522.21 683.036 L1521.65 683.036 L1521.09 683.036 L1520.53 683.036 L1519.98 683.036 L1519.42 683.036 L1518.86 683.036 L1518.3 683.036 L1517.74 683.036 L1517.18 683.036 L1516.62 683.036 L1516.06 683.036 L1515.5 683.036 L1514.94 683.036 L1514.38 683.036 L1513.82 683.036 L1513.26 683.036 L1512.71 683.036 L1512.15 683.036 L1511.59 683.036 L1511.03 683.036 L1510.47 683.036 L1509.91 683.036 L1509.35 683.036 L1508.79 683.036 L1508.23 683.036 L1507.67 683.036 L1507.11 683.036 L1506.55 683.036 L1505.99 683.036 L1505.44 683.036 L1504.88 683.036 L1504.32 683.036 L1503.76 683.036 L1503.2 683.036 L1502.64 683.036 L1502.08 683.036 L1501.52 683.036 L1500.96 683.036 L1500.4 683.036 L1499.84 683.036 L1499.28 683.036 L1498.72 683.036 L1498.16 683.036 L1497.61 683.036 L1497.05 683.036 L1496.49 683.036 L1495.93 683.036 L1495.37 683.036 L1494.81 683.036 L1494.25 683.036 L1493.69 683.036 L1493.13 683.036 L1492.57 683.036 L1492.01 683.036 L1491.45 683.036 L1490.89 683.036 L1490.34 683.036 L1489.78 683.036 L1489.22 683.036 L1488.66 683.036 L1488.1 683.036 L1487.54 683.036 L1486.98 683.036 L1486.42 683.036 L1485.86 683.036 L1485.3 683.036 L1484.74 683.036 L1484.18 683.036 L1483.62 683.036 L1483.07 683.036 L1482.51 683.036 L1481.95 683.036 L1481.39 683.036 L1480.83 683.036 L1480.27 683.036 L1479.71 683.036 L1479.15 683.036 L1478.59 683.036 L1478.03 683.036 L1477.47 683.036 L1476.91 683.036 L1476.35 683.036 L1475.79 683.036 L1475.24 683.036 L1474.68 683.036 L1474.12 683.036 L1473.56 683.036 L1473 683.036 L1472.44 683.036 L1471.88 683.036 L1471.32 683.036 L1470.76 683.036 L1470.2 683.036 L1469.64 683.036 L1469.08 683.036 L1468.52 683.036 L1467.97 683.036 L1467.41 683.036 L1466.85 683.036 L1466.29 683.036 L1465.73 683.036 L1465.17 683.036 L1464.61 683.036 L1464.05 683.036 L1463.49 683.036 L1462.93 683.036 L1462.37 683.036 L1461.81 683.036 L1461.25 683.036 L1460.7 683.036 L1460.14 683.036 L1459.58 683.036 L1459.02 683.036 L1458.46 683.036 L1457.9 683.036 L1457.34 683.036 L1456.78 683.036 L1456.22 683.036 L1455.66 683.036 L1455.1 683.036 L1454.54 683.036 L1453.98 683.036 L1453.42 683.036 L1452.87 683.036 L1452.31 683.036 L1451.75 683.036 L1451.19 683.036 L1450.63 683.036 L1450.07 683.036 L1449.51 683.036 L1448.95 683.036 L1448.39 683.036 L1447.83 683.036 L1447.27 683.036 L1446.71 683.036 L1446.15 683.036 L1445.6 683.036 L1445.04 683.036 L1444.48 683.036 L1443.92 683.036 L1443.36 683.036 L1442.8 683.036 L1442.24 683.036 L1441.68 683.036 L1441.12 683.036 L1440.56 683.036 L1440 683.036 L1439.44 683.036 L1438.88 683.036 L1438.33 683.036 L1437.77 683.036 L1437.21 683.036 L1436.65 683.036 L1436.09 683.036 L1435.53 683.036 L1434.97 683.036 L1434.41 683.036 L1433.85 683.036 L1433.29 683.036 L1432.73 683.036 L1432.17 683.036 L1431.61 683.036 L1431.05 683.036 L1430.5 683.036 L1429.94 683.036 L1429.38 683.036 L1428.82 683.036 L1428.26 683.036 L1427.7 683.036 L1427.14 683.036 L1426.58 683.036 L1426.02 683.036 L1425.46 683.036 L1424.9 683.036 L1424.34 683.036 L1423.78 683.036 L1423.23 683.036 L1422.67 683.036 L1422.11 683.036 L1421.55 683.036 L1420.99 683.036 L1420.43 683.036 L1419.87 683.036 L1419.31 683.036 L1418.75 683.036 L1418.19 683.036 L1417.63 683.036 L1417.07 683.036 L1416.51 683.036 L1415.95 683.036 L1415.4 683.036 L1414.84 683.036 L1414.28 683.036 L1413.72 683.036 L1413.16 683.036 L1412.6 683.036 L1412.04 683.036 L1411.48 683.036 L1410.92 683.036 L1410.36 683.036 L1409.8 683.036 L1409.24 683.036 L1408.68 683.036 L1408.13 683.036 L1407.57 683.036 L1407.01 683.036 L1406.45 683.036 L1405.89 683.036 L1405.33 683.036 L1404.77 683.036 L1404.21 683.036 L1403.65 683.036 L1403.09 683.036 L1402.53 683.036 L1401.97 683.036 L1401.41 683.036 L1400.86 683.036 L1400.3 683.036 L1399.74 683.036 L1399.18 683.036 L1398.62 683.036 L1398.06 683.036 L1397.5 683.036 L1396.94 683.036 L1396.38 683.036 L1395.82 683.036 L1395.26 683.036 L1394.7 683.036 L1394.14 683.036 L1393.58 683.036 L1393.03 683.036 L1392.47 683.036 L1391.91 683.036 L1391.35 683.036 L1390.79 683.036 L1390.23 683.036 L1389.67 683.036 L1389.11 683.036 L1388.55 683.036 L1387.99 683.036 L1387.43 683.036 L1386.87 683.036 L1386.31 683.036 L1385.76 683.036 L1385.2 683.036 L1384.64 683.036 L1384.08 683.036 L1383.52 683.036 L1382.96 683.036 L1382.4 683.036 L1381.84 683.036 L1381.28 683.036 L1380.72 683.036 L1380.16 683.036 L1379.6 683.036 L1379.04 683.036 L1378.49 683.036 L1377.93 683.036 L1377.37 683.036 L1376.81 683.036 L1376.25 683.036 L1375.69 683.036 L1375.13 683.036 L1374.57 683.036 L1374.01 683.036 L1373.45 683.036 L1372.89 683.036 L1372.33 683.036 L1371.77 683.036 L1371.21 683.036 L1370.66 683.036 L1370.1 683.036 L1369.54 683.036 L1368.98 683.036 L1368.42 683.036 L1367.86 683.036 L1367.3 683.036 L1366.74 683.036 L1366.18 683.036 L1365.62 683.036 L1365.06 683.036 L1364.5 683.036 L1363.94 683.036 L1363.39 683.036 L1362.83 683.036 L1362.27 683.036 L1361.71 683.036 L1361.15 683.036 L1360.59 683.036 L1360.03 683.036 L1359.47 683.036 L1358.91 683.036 L1358.35 683.036 L1357.79 683.036 L1357.23 683.036 L1356.67 683.036 L1356.12 683.036 L1355.56 683.036 L1355 683.036 L1354.44 683.036 L1353.88 683.036 L1353.32 683.036 L1352.76 683.036 L1352.2 683.036 L1351.64 683.036 L1351.08 683.036 L1350.52 683.036 L1349.96 683.036 L1349.4 683.036 L1348.84 683.036 L1348.29 683.036 L1347.73 683.036 L1347.17 683.036 L1346.61 683.036 L1346.05 683.036 L1345.49 683.036 L1344.93 683.036 L1344.37 683.036 L1343.81 683.036 L1343.25 683.036 L1342.69 683.036 L1342.13 683.036 L1341.57 683.036 L1341.02 683.036 L1340.46 683.036 L1339.9 683.036 L1339.34 683.036 L1338.78 683.036 L1338.22 683.036 L1337.66 683.036 L1337.1 683.036 L1336.54 683.036 L1335.98 683.036 L1335.42 683.036 L1334.86 683.036 L1334.3 683.036 L1333.75 683.036 L1333.19 683.036 L1332.63 683.036 L1332.07 683.036 L1331.51 683.036 L1330.95 683.036 L1330.39 683.036 L1329.83 683.036 L1329.27 683.036 L1328.71 683.036 L1328.15 683.036 L1327.59 683.036 L1327.03 683.036 L1326.47 683.036 L1325.92 683.036 L1325.36 683.036 L1324.8 683.036 L1324.24 683.036 L1323.68 683.036 L1323.12 683.036 L1322.56 683.036 L1322 683.036 L1321.44 683.036 L1320.88 683.036 L1320.32 683.036 L1319.76 683.036 L1319.2 683.036 L1318.65 683.036 L1318.09 683.036 L1317.53 683.036 L1316.97 683.036 L1316.41 683.036 L1315.85 683.036 L1315.29 683.036 L1314.73 683.036 L1314.17 683.036 L1313.61 683.036 L1313.05 683.036 L1312.49 683.036 L1311.93 683.036 L1311.38 683.036 L1310.82 683.036 L1310.26 683.036 L1309.7 683.036 L1309.14 683.036 L1308.58 683.036 L1308.02 683.036 L1307.46 683.036 L1306.9 683.036 L1306.34 683.036 L1305.78 683.036 L1305.22 683.036 L1304.66 683.036 L1304.1 683.036 L1303.55 683.036 L1302.99 683.036 L1302.43 683.036 L1301.87 683.036 L1301.31 683.036 L1300.75 683.036 L1300.19 683.036 L1299.63 683.036 L1299.07 683.036 L1298.51 683.036 L1297.95 683.036 L1297.39 683.036 L1296.83 683.036 L1296.28 683.036 L1295.72 683.036 L1295.16 683.036 L1294.6 683.036 L1294.04 683.036 L1293.48 683.036 L1292.92 683.036 L1292.36 683.036 L1291.8 683.036 L1291.24 683.036 L1290.68 683.036 L1290.12 683.036 L1289.56 683.036 L1289 683.036 L1288.45 683.036 L1287.89 683.036 L1287.33 683.036 L1286.77 683.036 L1286.21 683.036 L1285.65 683.036 L1285.09 683.036 L1284.53 683.036 L1283.97 683.036 L1283.41 683.036 L1282.85 683.036 L1282.29 683.036 L1281.73 683.036 L1281.18 683.036 L1280.62 683.036 L1280.06 683.036 L1279.5 683.036 L1278.94 683.036 L1278.38 683.036 L1277.82 683.036 L1277.26 683.036 L1276.7 683.036 L1276.14 683.036 L1275.58 683.036 L1275.02 683.036 L1274.46 683.036 L1273.91 683.036 L1273.35 683.036 L1272.79 683.036 L1272.23 683.036 L1271.67 683.036 L1271.11 683.036 L1270.55 683.036 L1269.99 683.036 L1269.43 683.036 L1268.87 683.036 L1268.31 683.036 L1267.75 683.036 L1267.19 683.036 L1266.63 683.036 L1266.08 683.036 L1265.52 683.036 L1264.96 683.036 L1264.4 683.036 L1263.84 683.036 L1263.28 683.036 L1262.72 683.036 L1262.16 683.036 L1261.6 683.036 L1261.04 683.036 L1260.48 683.036 L1259.92 683.036 L1259.36 683.036 L1258.81 683.036 L1258.25 683.036 L1257.69 683.036 L1257.13 683.036 L1256.57 683.036 L1256.01 683.036 L1255.45 683.036 L1254.89 683.036 L1254.33 683.036 L1253.77 683.036 L1253.21 683.036 L1252.65 683.036 L1252.09 683.036 L1251.54 683.036 L1250.98 683.036 L1250.42 683.036 L1249.86 683.036 L1249.3 683.036 L1248.74 683.036 L1248.18 683.036 L1247.62 683.036 L1247.06 683.036 L1246.5 683.036 L1245.94 683.036 L1245.38 683.036 L1244.82 683.036 L1244.26 683.036 L1243.71 683.036 L1243.15 683.036 L1242.59 683.036 L1242.03 683.036 L1241.47 683.036 L1240.91 683.036 L1240.35 683.036 L1239.79 683.036 L1239.23 683.036 L1238.67 683.036 L1238.11 683.036 L1237.55 683.036 L1236.99 683.036 L1236.44 683.036 L1235.88 683.036 L1235.32 683.036 L1234.76 683.036 L1234.2 683.036 L1233.64 683.036 L1233.08 683.036 L1232.52 683.036 L1231.96 683.036 L1231.4 683.036 L1230.84 683.036 L1230.28 683.036 L1229.72 683.036 L1229.17 683.036 L1228.61 683.036 L1228.05 683.036 L1227.49 683.036 L1226.93 683.036 L1226.37 683.036 L1225.81 683.036 L1225.25 683.036 L1224.69 683.036 L1224.13 683.036 L1223.57 683.036 L1223.01 683.036 L1222.45 683.036 L1221.89 683.036 L1221.34 683.036 L1220.78 683.036 L1220.22 683.036 L1219.66 683.036 L1219.1 683.036 L1218.54 683.036 L1217.98 683.036 L1217.42 683.036 L1216.86 683.036 L1216.3 683.036 L1215.74 683.036 L1215.18 683.036 L1214.62 683.036 L1214.07 683.036 L1213.51 683.036 L1212.95 683.036 L1212.39 683.036 L1211.83 683.036 L1211.27 683.036 L1210.71 683.036 L1210.15 683.036 L1209.59 683.036 L1209.03 683.036 L1208.47 683.036 L1207.91 683.036 L1207.35 683.036 L1206.8 683.036 L1206.24 683.036 L1205.68 683.036 L1205.12 683.036 L1204.56 683.036 L1204 683.036 L1203.44 683.036 L1202.88 683.036 L1202.32 683.036 L1201.76 683.036 L1201.2 683.036 L1200.64 683.036 L1200.08 683.036 L1199.52 683.036 L1198.97 683.036 L1198.41 683.036 L1197.85 683.036 L1197.29 683.036 L1196.73 683.036 L1196.17 683.036 L1195.61 683.036 L1195.05 683.036 L1194.49 683.036 L1193.93 683.036 L1193.37 683.036 L1192.81 683.036 L1192.25 683.036 L1191.7 683.036 L1191.14 683.036 L1190.58 683.036 L1190.02 683.036 L1189.46 683.036 L1188.9 683.036 L1188.34 683.036 L1187.78 683.036 L1187.22 683.036 L1186.66 683.036 L1186.1 683.036 L1185.54 683.036 L1184.98 683.036 L1184.43 683.036 L1183.87 683.036 L1183.31 683.036 L1182.75 683.036 L1182.19 683.036 L1181.63 683.036 L1181.07 683.036 L1180.51 683.036 L1179.95 683.036 L1179.39 683.036 L1178.83 683.036 L1178.27 683.036 L1177.71 683.036 L1177.15 683.036 L1176.6 683.036 L1176.04 683.036 L1175.48 683.036 L1174.92 683.036 L1174.36 683.036 L1173.8 683.036 L1173.24 683.036 L1172.68 683.036 L1172.12 683.036 L1171.56 683.036 L1171 683.036 L1170.44 683.036 L1169.88 683.036 L1169.33 683.036 L1168.77 683.036 L1168.21 683.036 L1167.65 683.036 L1167.09 683.036 L1166.53 683.036 L1165.97 683.036 L1165.41 683.036 L1164.85 683.036 L1164.29 683.036 L1163.73 683.036 L1163.17 683.036 L1162.61 683.036 L1162.05 683.036 L1161.5 683.036 L1160.94 683.036 L1160.38 683.036 L1159.82 683.036 L1159.26 683.036 L1158.7 683.036 L1158.14 683.036 L1157.58 683.036 L1157.02 683.036 L1156.46 683.036 L1155.9 683.036 L1155.34 683.036 L1154.78 683.036 L1154.23 683.036 L1153.67 683.036 L1153.11 683.036 L1152.55 683.036 L1151.99 683.036 L1151.43 683.036 L1150.87 683.036 L1150.31 683.036 L1149.75 683.036 L1149.19 683.036 L1148.63 683.036 L1148.07 683.036 L1147.51 683.036 L1146.96 683.036 L1146.4 683.036 L1145.84 683.036 L1145.28 683.036 L1144.72 683.036 L1144.16 683.036 L1143.6 683.036 L1143.04 683.036 L1142.48 683.036 L1141.92 683.036 L1141.36 683.036 L1140.8 683.036 L1140.24 683.036 L1139.68 683.036 L1139.13 683.036 L1138.57 683.036 L1138.01 683.036 L1137.45 683.036 L1136.89 683.036 L1136.33 683.036 L1135.77 683.036 L1135.21 683.036 L1134.65 683.036 L1134.09 683.036 L1133.53 683.036 L1132.97 683.036 L1132.41 683.036 L1131.86 683.036 L1131.3 683.036 L1130.74 683.036 L1130.18 683.036 L1129.62 683.036 L1129.06 683.036 L1128.5 683.036 L1127.94 683.036 L1127.38 683.036 L1126.82 683.036 L1126.26 683.036 L1125.7 683.036 L1125.14 683.036 L1124.59 683.036 L1124.03 683.036 L1123.47 683.036 L1122.91 683.036 L1122.35 683.036 L1121.79 683.036 L1121.23 683.036 L1120.67 683.036 L1120.11 683.036 L1119.55 683.036 L1118.99 683.036 L1118.43 683.036 L1117.87 683.036 L1117.31 683.036 L1116.76 683.036 L1116.2 683.036 L1115.64 683.036 L1115.08 683.036 L1114.52 683.036 L1113.96 683.036 L1113.4 683.036 L1112.84 683.036 L1112.28 683.036 L1111.72 683.036 L1111.16 683.036 L1110.6 683.036 L1110.04 683.036 L1109.49 683.036 L1108.93 683.036 L1108.37 683.036 L1107.81 683.036 L1107.25 683.036 L1106.69 683.036 L1106.13 683.036 L1105.57 683.036 L1105.01 683.036 L1104.45 683.036 L1103.89 683.036 L1103.33 683.036 L1102.77 683.036 L1102.22 683.036 L1101.66 683.036 L1101.1 683.036 L1100.54 683.036 L1099.98 683.036 L1099.42 683.036 L1098.86 683.036 L1098.3 683.036 L1097.74 683.036 L1097.18 683.036 L1096.62 683.036 L1096.06 683.036 L1095.5 683.036 L1094.94 683.036 L1094.39 683.036 L1093.83 683.036 L1093.27 683.036 L1092.71 683.036 L1092.15 683.036 L1091.59 683.036 L1091.03 683.036 L1090.47 683.036 L1089.91 683.036 L1089.35 683.036 L1088.79 683.036 L1088.23 683.036 L1087.67 683.036 L1087.12 683.036 L1086.56 683.036 L1086 683.036 L1085.44 683.036 L1084.88 683.036 L1084.32 683.036 L1083.76 683.036 L1083.2 683.036 L1082.64 683.036 L1082.08 683.036 L1081.52 683.036 L1080.96 683.036 L1080.4 683.036 L1079.85 683.036 L1079.29 683.036 L1078.73 683.036 L1078.17 683.036 L1077.61 683.036 L1077.05 683.036 L1076.49 683.036 L1075.93 683.036 L1075.37 683.036 L1074.81 683.036 L1074.25 683.036 L1073.69 683.036 L1073.13 683.036 L1072.57 683.036 L1072.02 683.036 L1071.46 683.036 L1070.9 683.036 L1070.34 683.036 L1069.78 683.036 L1069.22 683.036 L1068.66 683.036 L1068.1 683.036 L1067.54 683.036 L1066.98 683.036 L1066.42 683.036 L1065.86 683.036 L1065.3 683.036 L1064.75 683.036 L1064.19 683.036 L1063.63 683.036 L1063.07 683.036 L1062.51 683.036 L1061.95 683.036 L1061.39 683.036 L1060.83 683.036 L1060.27 683.036 L1059.71 683.036 L1059.15 683.036 L1058.59 683.036 L1058.03 683.036 L1057.48 683.036 L1056.92 683.036 L1056.36 683.036 L1055.8 683.036 L1055.24 683.036 L1054.68 683.036 L1054.12 683.036 L1053.56 683.036 L1053 683.036 L1052.44 683.036 L1051.88 683.036 L1051.32 683.036 L1050.76 683.036 L1050.2 683.036 L1049.65 683.036 L1049.09 683.036 L1048.53 683.036 L1047.97 683.036 L1047.41 683.036 L1046.85 683.036 L1046.29 683.036 L1045.73 683.036 L1045.17 683.036 L1044.61 683.036 L1044.05 683.036 L1043.49 683.036 L1042.93 683.036 L1042.38 683.036 L1041.82 683.036 L1041.26 683.036 L1040.7 683.036 L1040.14 683.036 L1039.58 683.036 L1039.02 683.036 L1038.46 683.036 L1037.9 683.036 L1037.34 683.036 L1036.78 683.036 L1036.22 683.036 L1035.66 683.036 L1035.1 683.036 L1034.55 683.036 L1033.99 683.036 L1033.43 683.036 L1032.87 683.036 L1032.31 683.036 L1031.75 683.036 L1031.19 683.036 L1030.63 683.036 L1030.07 683.036 L1029.51 683.036 L1028.95 683.036 L1028.39 683.036 L1027.83 683.036 L1027.28 683.036 L1026.72 683.036 L1026.16 683.036 L1025.6 683.036 L1025.04 683.036 L1024.48 683.036 L1023.92 683.036 L1023.36 683.036 L1022.8 683.036 L1022.24 683.036 L1021.68 683.036 L1021.12 683.036 L1020.56 683.036 L1020.01 683.036 L1019.45 683.036 L1018.89 683.036 L1018.33 683.036 L1017.77 683.036 L1017.21 683.036 L1016.65 683.036 L1016.09 683.036 L1015.53 683.036 L1014.97 683.036 L1014.41 683.036 L1013.85 683.036 L1013.29 683.036 L1012.73 683.036 L1012.18 683.036 L1011.62 683.036 L1011.06 683.036 L1010.5 683.036 L1009.94 683.036 L1009.38 683.036 L1008.82 683.036 L1008.26 683.036 L1007.7 683.036 L1007.14 683.036 L1006.58 683.036 L1006.02 683.036 L1005.46 683.036 L1004.91 683.036 L1004.35 683.036 L1003.79 683.036 L1003.23 683.036 L1002.67 683.036 L1002.11 683.036 L1001.55 683.036 L1000.99 683.036 L1000.43 683.036 L999.872 683.036 L999.313 683.036 L998.754 683.036 L998.194 683.036 L997.635 683.036 L997.076 683.036 L996.517 683.036 L995.957 683.036 L995.398 683.036 L994.839 683.036 L994.28 683.036 L993.72 683.036 L993.161 683.036 L992.602 683.036 L992.043 683.036 L991.483 683.036 L990.924 683.036 L990.365 683.036 L989.806 683.036 L989.246 683.036 L988.687 683.036 L988.128 683.036 L987.569 683.036 L987.009 683.036 L986.45 683.036 L985.891 683.036 L985.332 683.036 L984.772 683.036 L984.213 683.036 L983.654 683.036 L983.095 683.036 L982.535 683.036 L981.976 683.036 L981.417 683.036 L980.858 683.036 L980.298 683.036 L979.739 683.036 L979.18 683.036 L978.621 683.036 L978.061 683.036 L977.502 683.036 L976.943 683.036 L976.384 683.036 L975.824 683.036 L975.265 683.036 L974.706 683.036 L974.147 683.036 L973.587 683.036 L973.028 683.036 L972.469 683.036 L971.91 683.036 L971.35 683.036 L970.791 683.036 L970.232 683.036 L969.673 683.036 L969.113 683.036 L968.554 683.036 L967.995 683.036 L967.436 683.036 L966.876 683.036 L966.317 683.036 L965.758 683.036 L965.199 683.036 L964.639 683.036 L964.08 683.036 L963.521 683.036 L962.962 683.036 L962.402 683.036 L961.843 683.036 L961.284 683.036 L960.725 683.036 L960.165 683.036 L959.606 683.036 L959.047 683.036 L958.488 683.036 L957.928 683.036 L957.369 683.036 L956.81 683.036 L956.251 683.036 L955.691 683.036 L955.132 683.036 L954.573 683.036 L954.014 683.036 L953.454 683.036 L952.895 683.036 L952.336 683.036 L951.777 683.036 L951.217 683.036 L950.658 683.036 L950.099 683.036 L949.54 683.036 L948.98 683.036 L948.421 683.036 L947.862 683.036 L947.303 683.036 L946.743 683.036 L946.184 683.036 L945.625 683.036 L945.066 683.036 L944.506 683.036 L943.947 683.036 L943.388 683.036 L942.829 683.036 L942.269 683.036 L941.71 683.036 L941.151 683.036 L940.592 683.036 L940.032 683.036 L939.473 683.036 L938.914 683.036 L938.355 683.036 L937.795 683.036 L937.236 683.036 L936.677 683.036 L936.118 683.036 L935.558 683.036 L934.999 683.036 L934.44 683.036 L933.881 683.036 L933.321 683.036 L932.762 683.036 L932.203 683.036 L931.644 683.036 L931.084 683.036 L930.525 683.036 L929.966 683.036 L929.406 683.036 L928.847 683.036 L928.288 683.036 L927.729 683.036 L927.169 683.036 L926.61 683.036 L926.051 683.036 L925.492 683.036 L924.932 683.036 L924.373 683.036 L923.814 683.036 L923.255 683.036 L922.695 683.036 L922.136 683.036 L921.577 683.036 L921.018 683.036 L920.458 683.036 L919.899 683.036 L919.34 683.036 L918.781 683.036 L918.221 683.036 L917.662 683.036 L917.103 683.036 L916.544 683.036 L915.984 683.036 L915.425 683.036 L914.866 683.036 L914.307 683.036 L913.747 683.036 L913.188 683.036 L912.629 683.036 L912.07 683.036 L911.51 683.036 L910.951 683.036 L910.392 683.036 L909.833 683.036 L909.273 683.036 L908.714 683.036 L908.155 683.036 L907.596 683.036 L907.036 683.036 L906.477 683.036 L905.918 683.036 L905.359 683.036 L904.799 683.036 L904.24 683.036 L903.681 683.036 L903.122 683.036 L902.562 683.036 L902.003 683.036 L901.444 683.036 L900.885 683.036 L900.325 683.036 L899.766 683.036 L899.207 683.036 L898.648 683.036 L898.088 683.036 L897.529 683.036 L896.97 683.036 L896.411 683.036 L895.851 683.036 L895.292 683.036 L894.733 683.036 L894.174 683.036 L893.614 683.036 L893.055 683.036 L892.496 683.036 L891.937 683.036 L891.377 683.036 L890.818 683.036 L890.259 683.036 L889.7 683.036 L889.14 683.036 L888.581 683.036 L888.022 683.036 L887.463 683.036 L886.903 683.036 L886.344 683.036 L885.785 683.036 L885.226 683.036 L884.666 683.036 L884.107 683.036 L883.548 683.036 L882.989 683.036 L882.429 683.036 L881.87 683.036 L881.311 683.036 L880.752 683.036 L880.192 683.036 L879.633 683.036 L879.074 683.036 L878.515 683.036 L877.955 683.036 L877.396 683.036 L876.837 683.036 L876.278 683.036 L875.718 683.036 L875.159 683.036 L874.6 683.036 L874.041 683.036 L873.481 683.036 L872.922 683.036 L872.363 683.036 L871.804 683.036 L871.244 683.036 L870.685 683.036 L870.126 683.036 L869.567 683.036 L869.007 683.036 L868.448 683.036 L867.889 683.036 L867.33 683.036 L866.77 683.036 L866.211 683.036 L865.652 683.036 L865.093 683.036 L864.533 683.036 L863.974 683.036 L863.415 683.036 L862.856 683.036 L862.296 683.036 L861.737 683.036 L861.178 683.036 L860.619 683.036 L860.059 683.036 L859.5 683.036 L858.941 683.036 L858.382 683.036 L857.822 683.036 L857.263 683.036 L856.704 683.036 L856.145 683.036 L855.585 683.036 L855.026 683.036 L854.467 683.036 L853.908 683.036 L853.348 683.036 L852.789 683.036 L852.23 683.036 L851.671 683.036 L851.111 683.036 L850.552 683.036 L849.993 683.036 L849.434 683.036 L848.874 683.036 L848.315 683.036 L847.756 683.036 L847.197 683.036 L846.637 683.036 L846.078 683.036 L845.519 683.036 L844.96 683.036 L844.4 683.036 L843.841 683.036 L843.282 683.036 L842.723 683.036 L842.163 683.036 L841.604 683.036 L841.045 683.036 L840.486 683.036 L839.926 683.036 L839.367 683.036 L838.808 683.036 L838.249 683.036 L837.689 683.036 L837.13 683.036 L836.571 683.036 L836.012 683.036 L835.452 683.036 L834.893 683.036 L834.334 683.036 L833.775 683.036 L833.215 683.036 L832.656 683.036 L832.097 683.036 L831.538 683.036 L830.978 683.036 L830.419 683.036 L829.86 683.036 L829.301 683.036 L828.741 683.036 L828.182 683.036 L827.623 683.036 L827.064 683.036 L826.504 683.036 L825.945 683.036 L825.386 683.036 L824.827 683.036 L824.267 683.036 L823.708 683.036 L823.149 683.036 L822.59 683.036 L822.03 683.036 L821.471 683.036 L820.912 683.036 L820.353 683.036 L819.793 683.036 L819.234 683.036 L818.675 683.036 L818.116 683.036 L817.556 683.036 L816.997 683.036 L816.438 683.036 L815.879 683.036 L815.319 683.036 L814.76 683.036 L814.201 683.036 L813.642 683.036 L813.082 683.036 L812.523 683.036 L811.964 683.036 L811.405 683.036 L810.845 683.036 L810.286 683.036 L809.727 683.036 L809.168 683.036 L808.608 683.036 L808.049 683.036 L807.49 683.036 L806.931 683.036 L806.371 683.036 L805.812 683.036 L805.253 683.036 L804.693 683.036 L804.134 683.036 L803.575 683.036 L803.016 683.036 L802.456 683.036 L801.897 683.036 L801.338 683.036 L800.779 683.036 L800.219 683.036 L799.66 683.036 L799.101 683.036 L798.542 683.036 L797.982 683.036 L797.423 683.036 L796.864 683.036 L796.305 683.036 L795.745 683.036 L795.186 683.036 L794.627 683.036 L794.068 683.036 L793.508 683.036 L792.949 683.036 L792.39 683.036 L791.831 683.036 L791.271 683.036 L790.712 683.036 L790.153 683.036 L789.594 683.036 L789.034 683.036 L788.475 683.036 L787.916 683.036 L787.357 683.036 L786.797 683.036 L786.238 683.036 L785.679 683.036 L785.12 683.036 L784.56 683.036 L784.001 683.036 L783.442 683.036 L782.883 683.036 L782.323 683.036 L781.764 683.036 L781.205 683.036 L780.646 683.036 L780.086 683.036 L779.527 683.036 L778.968 683.036 L778.409 683.036 L777.849 683.036 L777.29 683.036 L776.731 683.036 L776.172 683.036 L775.612 683.036 L775.053 683.036 L774.494 683.036 L773.935 683.036 L773.375 683.036 L772.816 683.036 L772.257 683.036 L771.698 683.036 L771.138 683.036 L770.579 683.036 L770.02 683.036 L769.461 683.036 L768.901 683.036 L768.342 683.036 L767.783 683.036 L767.224 683.036 L766.664 683.036 L766.105 683.036 L765.546 683.036 L764.987 683.036 L764.427 683.036 L763.868 683.036 L763.309 683.036 L762.75 683.036 L762.19 683.036 L761.631 683.036 L761.072 683.036 L760.513 683.036 L759.953 683.036 L759.394 683.036 L758.835 683.036 L758.276 683.036 L757.716 683.036 L757.157 683.036 L756.598 683.036 L756.039 683.036 L755.479 683.036 L754.92 683.036 L754.361 683.036 L753.802 683.036 L753.242 683.036 L752.683 683.036 L752.124 683.036 L751.565 683.036 L751.005 683.036 L750.446 683.036 L749.887 683.036 L749.328 683.036 L748.768 683.036 L748.209 683.036 L747.65 683.036 L747.091 683.036 L746.531 683.036 L745.972 683.036 L745.413 683.036 L744.854 683.036 L744.294 683.036 L743.735 683.036 L743.176 683.036 L742.617 683.036 L742.057 683.036 L741.498 683.036 L740.939 683.036 L740.38 683.036 L739.82 683.036 L739.261 683.036 L738.702 683.036 L738.143 683.036 L737.583 683.036 L737.024 683.036 L736.465 683.036 L735.906 683.036 L735.346 683.036 L734.787 683.036 L734.228 683.036 L733.669 683.036 L733.109 683.036 L732.55 683.036 L731.991 683.036 L731.432 683.036 L730.872 683.036 L730.313 683.036 L729.754 683.036 L729.195 683.036 L728.635 683.036 L728.076 683.036 L727.517 683.036 L726.958 683.036 L726.398 683.036 L725.839 683.036 L725.28 683.036 L724.721 683.036 L724.161 683.036 L723.602 683.036 L723.043 683.036 L722.484 683.036 L721.924 683.036 L721.365 683.036 L720.806 683.036 L720.247 683.036  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.749 720.806,687.749 721.365,687.749 721.924,687.749 722.484,687.749 723.043,687.749 723.602,687.749 724.161,687.749 724.721,687.749 725.28,687.749 725.839,687.749 726.398,687.749 726.958,687.749 727.517,687.749 728.076,687.749 728.635,687.749 729.195,687.749 729.754,687.749 730.313,687.749 730.872,687.749 731.432,687.749 731.991,687.749 732.55,687.749 733.109,687.749 733.669,687.749 734.228,687.749 734.787,687.749 735.346,687.749 735.906,687.749 736.465,687.749 737.024,687.749 737.583,687.749 738.143,687.749 738.702,687.749 739.261,687.749 739.82,687.749 740.38,687.749 740.939,687.749 741.498,687.749 742.057,687.749 742.617,687.749 743.176,687.749 743.735,687.749 744.294,687.749 744.854,687.749 745.413,687.749 745.972,687.749 746.531,687.749 747.091,687.749 747.65,687.749 748.209,687.749 748.768,687.749 749.328,687.749 749.887,687.749 750.446,687.749 751.005,687.749 751.565,687.749 752.124,687.749 752.683,687.749 753.242,687.749 753.802,687.749 754.361,687.749 754.92,687.749 755.479,687.749 756.039,687.749 756.598,687.749 757.157,687.749 757.716,687.749 758.276,687.749 758.835,687.749 759.394,687.749 759.953,687.749 760.513,687.749 761.072,687.749 761.631,687.749 762.19,687.749 762.75,687.749 763.309,687.749 763.868,687.749 764.427,687.749 764.987,687.749 765.546,687.749 766.105,687.749 766.664,687.749 767.224,687.749 767.783,687.749 768.342,687.749 768.901,687.749 769.461,687.749 770.02,687.749 770.579,687.749 771.138,687.749 771.698,687.749 772.257,687.749 772.816,687.749 773.375,687.749 773.935,687.749 774.494,687.749 775.053,687.749 775.612,687.749 776.172,687.749 776.731,687.749 777.29,687.749 777.849,687.749 778.409,687.749 778.968,687.749 779.527,687.749 780.086,687.749 780.646,687.749 781.205,687.749 781.764,687.749 782.323,687.749 782.883,687.749 783.442,687.749 784.001,687.749 784.56,687.749 785.12,687.749 785.679,687.749 786.238,687.749 786.797,687.749 787.357,687.749 787.916,687.749 788.475,687.749 789.034,687.749 789.594,687.749 790.153,687.749 790.712,687.749 791.271,687.749 791.831,687.749 792.39,687.749 792.949,687.749 793.508,687.749 794.068,687.749 794.627,687.749 795.186,687.749 795.745,687.749 796.305,687.749 796.864,687.749 797.423,687.749 797.982,687.749 798.542,687.749 799.101,687.749 799.66,687.749 800.219,687.749 800.779,687.749 801.338,687.749 801.897,687.749 802.456,687.749 803.016,687.749 803.575,687.749 804.134,687.749 804.693,687.749 805.253,687.749 805.812,687.749 806.371,687.749 806.931,687.749 807.49,687.749 808.049,687.749 808.608,687.749 809.168,687.749 809.727,687.749 810.286,687.749 810.845,687.749 811.405,687.749 811.964,687.749 812.523,687.749 813.082,687.749 813.642,687.749 814.201,687.749 814.76,687.749 815.319,687.749 815.879,687.749 816.438,687.749 816.997,687.749 817.556,687.749 818.116,687.749 818.675,687.749 819.234,687.749 819.793,687.749 820.353,687.749 820.912,687.749 821.471,687.749 822.03,687.749 822.59,687.749 823.149,687.749 823.708,687.749 824.267,687.749 824.827,687.749 825.386,687.749 825.945,687.749 826.504,687.749 827.064,687.749 827.623,687.749 828.182,687.749 828.741,687.749 829.301,687.749 829.86,687.749 830.419,687.749 830.978,687.749 831.538,687.749 832.097,687.749 832.656,687.749 833.215,687.749 833.775,687.749 834.334,687.749 834.893,687.749 835.452,687.749 836.012,687.749 836.571,687.749 837.13,687.749 837.689,687.749 838.249,687.749 838.808,687.749 839.367,687.749 839.926,687.749 840.486,687.749 841.045,687.749 841.604,687.749 842.163,687.749 842.723,687.749 843.282,687.749 843.841,687.749 844.4,687.749 844.96,687.749 845.519,687.749 846.078,687.749 846.637,687.749 847.197,687.749 847.756,687.749 848.315,687.749 848.874,687.749 849.434,687.749 849.993,687.749 850.552,687.749 851.111,687.749 851.671,687.749 852.23,687.749 852.789,687.749 853.348,687.749 853.908,687.749 854.467,687.749 855.026,687.749 855.585,687.749 856.145,687.749 856.704,687.749 857.263,687.749 857.822,687.749 858.382,687.749 858.941,687.749 859.5,687.749 860.059,687.749 860.619,687.749 861.178,687.749 861.737,687.749 862.296,687.749 862.856,687.749 863.415,687.749 863.974,687.749 864.533,687.749 865.093,687.749 865.652,687.749 866.211,687.749 866.77,687.749 867.33,687.749 867.889,687.749 868.448,687.749 869.007,687.749 869.567,687.749 870.126,687.749 870.685,687.749 871.244,687.749 871.804,687.749 872.363,687.749 872.922,687.749 873.481,687.749 874.041,687.749 874.6,687.749 875.159,687.749 875.718,687.749 876.278,687.749 876.837,687.749 877.396,687.749 877.955,687.749 878.515,687.749 879.074,687.749 879.633,687.749 880.192,687.749 880.752,687.749 881.311,687.749 881.87,687.749 882.429,687.749 882.989,687.749 883.548,687.749 884.107,687.749 884.666,687.749 885.226,687.749 885.785,687.749 886.344,687.749 886.903,687.749 887.463,687.749 888.022,687.749 888.581,687.749 889.14,687.749 889.7,687.749 890.259,687.749 890.818,687.749 891.377,687.749 891.937,687.749 892.496,687.749 893.055,687.749 893.614,687.749 894.174,687.749 894.733,687.749 895.292,687.749 895.851,687.749 896.411,687.749 896.97,687.749 897.529,687.749 898.088,687.749 898.648,687.749 899.207,687.749 899.766,687.749 900.325,687.749 900.885,687.749 901.444,687.749 902.003,687.749 902.562,687.749 903.122,687.749 903.681,687.749 904.24,687.749 904.799,687.749 905.359,687.749 905.918,687.749 906.477,687.749 907.036,687.749 907.596,687.749 908.155,687.749 908.714,687.749 909.273,687.749 909.833,687.749 910.392,687.749 910.951,687.749 911.51,687.749 912.07,687.749 912.629,687.749 913.188,687.749 913.747,687.749 914.307,687.749 914.866,687.749 915.425,687.749 915.984,687.749 916.544,687.749 917.103,687.749 917.662,687.749 918.221,687.749 918.781,687.749 919.34,687.749 919.899,687.749 920.458,687.749 921.018,687.749 921.577,687.749 922.136,687.749 922.695,687.749 923.255,687.749 923.814,687.749 924.373,687.749 924.932,687.749 925.492,687.749 926.051,687.749 926.61,687.749 927.169,687.749 927.729,687.749 928.288,687.749 928.847,687.749 929.406,687.749 929.966,687.749 930.525,687.749 931.084,687.749 931.644,687.749 932.203,687.749 932.762,687.749 933.321,687.749 933.881,687.749 934.44,687.749 934.999,687.749 935.558,687.749 936.118,687.749 936.677,687.749 937.236,687.749 937.795,687.749 938.355,687.749 938.914,687.749 939.473,687.749 940.032,687.749 940.592,687.749 941.151,687.749 941.71,687.749 942.269,687.749 942.829,687.749 943.388,687.749 943.947,687.749 944.506,687.749 945.066,687.749 945.625,687.749 946.184,687.749 946.743,687.749 947.303,687.749 947.862,687.749 948.421,687.749 948.98,687.749 949.54,687.749 950.099,687.749 950.658,687.749 951.217,687.749 951.777,687.749 952.336,687.749 952.895,687.749 953.454,687.749 954.014,687.749 954.573,687.749 955.132,687.749 955.691,687.749 956.251,687.749 956.81,687.749 957.369,687.749 957.928,687.749 958.488,687.749 959.047,687.749 959.606,687.749 960.165,687.749 960.725,687.749 961.284,687.749 961.843,687.749 962.402,687.749 962.962,687.749 963.521,687.749 964.08,687.749 964.639,687.749 965.199,687.749 965.758,687.749 966.317,687.749 966.876,687.749 967.436,687.749 967.995,687.749 968.554,687.749 969.113,687.749 969.673,687.749 970.232,687.749 970.791,687.749 971.35,687.749 971.91,687.749 972.469,687.749 973.028,687.749 973.587,687.749 974.147,687.749 974.706,687.749 975.265,687.749 975.824,687.749 976.384,687.749 976.943,687.749 977.502,687.749 978.061,687.749 978.621,687.749 979.18,687.749 979.739,687.749 980.298,687.749 980.858,687.749 981.417,687.749 981.976,687.749 982.535,687.749 983.095,687.749 983.654,687.749 984.213,687.749 984.772,687.749 985.332,687.749 985.891,687.749 986.45,687.749 987.009,687.749 987.569,687.749 988.128,687.749 988.687,687.749 989.246,687.749 989.806,687.749 990.365,687.749 990.924,687.749 991.483,687.749 992.043,687.749 992.602,687.749 993.161,687.749 993.72,687.749 994.28,687.749 994.839,687.749 995.398,687.749 995.957,687.749 996.517,687.749 997.076,687.749 997.635,687.749 998.194,687.749 998.754,687.749 999.313,687.749 999.872,687.749 1000.43,687.749 1000.99,687.749 1001.55,687.749 1002.11,687.749 1002.67,687.749 1003.23,687.749 1003.79,687.749 1004.35,687.749 1004.91,687.749 1005.46,687.749 1006.02,687.749 1006.58,687.749 1007.14,687.749 1007.7,687.749 1008.26,687.749 1008.82,687.749 1009.38,687.749 1009.94,687.749 1010.5,687.749 1011.06,687.749 1011.62,687.749 1012.18,687.749 1012.73,687.749 1013.29,687.749 1013.85,687.749 1014.41,687.749 1014.97,687.749 1015.53,687.749 1016.09,687.749 1016.65,687.749 1017.21,687.749 1017.77,687.749 1018.33,687.749 1018.89,687.749 1019.45,687.749 1020.01,687.749 1020.56,687.749 1021.12,687.749 1021.68,687.749 1022.24,687.749 1022.8,687.749 1023.36,687.749 1023.92,687.749 1024.48,687.749 1025.04,687.749 1025.6,687.749 1026.16,687.749 1026.72,687.749 1027.28,687.749 1027.83,687.749 1028.39,687.749 1028.95,687.749 1029.51,687.749 1030.07,687.749 1030.63,687.749 1031.19,687.749 1031.75,687.749 1032.31,687.749 1032.87,687.749 1033.43,687.749 1033.99,687.749 1034.55,687.749 1035.1,687.749 1035.66,687.749 1036.22,687.749 1036.78,687.749 1037.34,687.749 1037.9,687.749 1038.46,687.749 1039.02,687.749 1039.58,687.749 1040.14,687.749 1040.7,687.749 1041.26,687.749 1041.82,687.749 1042.38,687.749 1042.93,687.749 1043.49,687.749 1044.05,687.749 1044.61,687.749 1045.17,687.749 1045.73,687.749 1046.29,687.749 1046.85,687.749 1047.41,687.749 1047.97,687.749 1048.53,687.749 1049.09,687.749 1049.65,687.749 1050.2,687.749 1050.76,687.749 1051.32,687.749 1051.88,687.749 1052.44,687.749 1053,687.749 1053.56,687.749 1054.12,687.749 1054.68,687.749 1055.24,687.749 1055.8,687.749 1056.36,687.749 1056.92,687.749 1057.48,687.749 1058.03,687.749 1058.59,687.749 1059.15,687.749 1059.71,687.749 1060.27,687.749 1060.83,687.749 1061.39,687.749 1061.95,687.749 1062.51,687.749 1063.07,687.749 1063.63,687.749 1064.19,687.749 1064.75,687.749 1065.3,687.749 1065.86,687.749 1066.42,687.749 1066.98,687.749 1067.54,687.749 1068.1,687.749 1068.66,687.749 1069.22,687.749 1069.78,687.749 1070.34,687.749 1070.9,687.749 1071.46,687.749 1072.02,687.749 1072.57,687.749 1073.13,687.749 1073.69,687.749 1074.25,687.749 1074.81,687.749 1075.37,687.749 1075.93,687.749 1076.49,687.749 1077.05,687.749 1077.61,687.749 1078.17,687.749 1078.73,687.749 1079.29,687.749 1079.85,687.749 1080.4,687.749 1080.96,687.749 1081.52,687.749 1082.08,687.749 1082.64,687.749 1083.2,687.749 1083.76,687.749 1084.32,687.749 1084.88,687.749 1085.44,687.749 1086,687.749 1086.56,687.749 1087.12,687.749 1087.67,687.749 1088.23,687.749 1088.79,687.749 1089.35,687.749 1089.91,687.749 1090.47,687.749 1091.03,687.749 1091.59,687.749 1092.15,687.749 1092.71,687.749 1093.27,687.749 1093.83,687.749 1094.39,687.749 1094.94,687.749 1095.5,687.749 1096.06,687.749 1096.62,687.749 1097.18,687.749 1097.74,687.749 1098.3,687.749 1098.86,687.749 1099.42,687.749 1099.98,687.749 1100.54,687.749 1101.1,687.749 1101.66,687.749 1102.22,687.749 1102.77,687.749 1103.33,687.749 1103.89,687.749 1104.45,687.749 1105.01,687.749 1105.57,687.749 1106.13,687.749 1106.69,687.749 1107.25,687.749 1107.81,687.749 1108.37,687.749 1108.93,687.749 1109.49,687.749 1110.04,687.749 1110.6,687.749 1111.16,687.749 1111.72,687.749 1112.28,687.749 1112.84,687.749 1113.4,687.749 1113.96,687.749 1114.52,687.749 1115.08,687.749 1115.64,687.749 1116.2,687.749 1116.76,687.749 1117.31,687.749 1117.87,687.749 1118.43,687.749 1118.99,687.749 1119.55,687.749 1120.11,687.749 1120.67,687.749 1121.23,687.749 1121.79,687.749 1122.35,687.749 1122.91,687.749 1123.47,687.749 1124.03,687.749 1124.59,687.749 1125.14,687.749 1125.7,687.749 1126.26,687.749 1126.82,687.749 1127.38,687.749 1127.94,687.749 1128.5,687.749 1129.06,687.749 1129.62,687.749 1130.18,687.749 1130.74,687.749 1131.3,687.749 1131.86,687.749 1132.41,687.749 1132.97,687.749 1133.53,687.749 1134.09,687.749 1134.65,687.749 1135.21,687.749 1135.77,687.749 1136.33,687.749 1136.89,687.749 1137.45,687.749 1138.01,687.749 1138.57,687.749 1139.13,687.749 1139.68,687.749 1140.24,687.749 1140.8,687.749 1141.36,687.749 1141.92,687.749 1142.48,687.749 1143.04,687.749 1143.6,687.749 1144.16,687.749 1144.72,687.749 1145.28,687.749 1145.84,687.749 1146.4,687.749 1146.96,687.749 1147.51,687.749 1148.07,687.749 1148.63,687.749 1149.19,687.749 1149.75,687.749 1150.31,687.749 1150.87,687.749 1151.43,687.749 1151.99,687.749 1152.55,687.749 1153.11,687.749 1153.67,687.749 1154.23,687.749 1154.78,687.749 1155.34,687.749 1155.9,687.749 1156.46,687.749 1157.02,687.749 1157.58,687.749 1158.14,687.749 1158.7,687.749 1159.26,687.749 1159.82,687.749 1160.38,687.749 1160.94,687.749 1161.5,687.749 1162.05,687.749 1162.61,687.749 1163.17,687.749 1163.73,687.749 1164.29,687.749 1164.85,687.749 1165.41,687.749 1165.97,687.749 1166.53,687.749 1167.09,687.749 1167.65,687.749 1168.21,687.749 1168.77,687.749 1169.33,687.749 1169.88,687.749 1170.44,687.749 1171,687.749 1171.56,687.749 1172.12,687.749 1172.68,687.749 1173.24,687.749 1173.8,687.749 1174.36,687.749 1174.92,687.749 1175.48,687.749 1176.04,687.749 1176.6,687.749 1177.15,687.749 1177.71,687.749 1178.27,687.749 1178.83,687.749 1179.39,687.749 1179.95,687.749 1180.51,687.749 1181.07,687.749 1181.63,687.749 1182.19,687.749 1182.75,687.749 1183.31,687.749 1183.87,687.749 1184.43,687.749 1184.98,687.749 1185.54,687.749 1186.1,687.749 1186.66,687.749 1187.22,687.749 1187.78,687.749 1188.34,687.749 1188.9,687.749 1189.46,687.749 1190.02,687.749 1190.58,687.749 1191.14,687.749 1191.7,687.749 1192.25,687.749 1192.81,687.749 1193.37,687.749 1193.93,687.749 1194.49,687.749 1195.05,687.749 1195.61,687.749 1196.17,687.749 1196.73,687.749 1197.29,687.749 1197.85,687.749 1198.41,687.749 1198.97,687.749 1199.52,687.749 1200.08,687.749 1200.64,687.749 1201.2,687.749 1201.76,687.749 1202.32,687.749 1202.88,687.749 1203.44,687.749 1204,687.749 1204.56,687.749 1205.12,687.749 1205.68,687.749 1206.24,687.749 1206.8,687.749 1207.35,687.749 1207.91,687.749 1208.47,687.749 1209.03,687.749 1209.59,687.749 1210.15,687.749 1210.71,687.749 1211.27,687.749 1211.83,687.749 1212.39,687.749 1212.95,687.749 1213.51,687.749 1214.07,687.749 1214.62,687.749 1215.18,687.749 1215.74,687.749 1216.3,687.749 1216.86,687.749 1217.42,687.749 1217.98,687.749 1218.54,687.749 1219.1,687.749 1219.66,687.749 1220.22,687.749 1220.78,687.749 1221.34,687.749 1221.89,687.749 1222.45,687.749 1223.01,687.749 1223.57,687.749 1224.13,687.749 1224.69,687.749 1225.25,687.749 1225.81,687.749 1226.37,687.749 1226.93,687.749 1227.49,687.749 1228.05,687.749 1228.61,687.749 1229.17,687.749 1229.72,687.749 1230.28,687.749 1230.84,687.749 1231.4,687.749 1231.96,687.749 1232.52,687.749 1233.08,687.749 1233.64,687.749 1234.2,687.749 1234.76,687.749 1235.32,687.749 1235.88,687.749 1236.44,687.749 1236.99,687.749 1237.55,687.749 1238.11,687.749 1238.67,687.749 1239.23,687.749 1239.79,687.749 1240.35,687.749 1240.91,687.749 1241.47,687.749 1242.03,687.749 1242.59,687.749 1243.15,687.749 1243.71,687.749 1244.26,687.749 1244.82,687.749 1245.38,687.749 1245.94,687.749 1246.5,687.749 1247.06,687.749 1247.62,687.749 1248.18,687.749 1248.74,687.749 1249.3,687.749 1249.86,687.749 1250.42,687.749 1250.98,687.749 1251.54,687.749 1252.09,687.749 1252.65,687.749 1253.21,687.749 1253.77,687.749 1254.33,687.749 1254.89,687.749 1255.45,687.749 1256.01,687.749 1256.57,687.749 1257.13,687.749 1257.69,687.749 1258.25,687.749 1258.81,687.749 1259.36,687.749 1259.92,687.749 1260.48,687.749 1261.04,687.749 1261.6,687.749 1262.16,687.749 1262.72,687.749 1263.28,687.749 1263.84,687.749 1264.4,687.749 1264.96,687.749 1265.52,687.749 1266.08,687.749 1266.63,687.749 1267.19,687.749 1267.75,687.749 1268.31,687.749 1268.87,687.749 1269.43,687.749 1269.99,687.749 1270.55,687.749 1271.11,687.749 1271.67,687.749 1272.23,687.749 1272.79,687.749 1273.35,687.749 1273.91,687.749 1274.46,687.749 1275.02,687.749 1275.58,687.749 1276.14,687.749 1276.7,687.749 1277.26,687.749 1277.82,687.749 1278.38,687.749 1278.94,687.749 1279.5,687.749 1280.06,687.749 1280.62,687.749 1281.18,687.749 1281.73,687.749 1282.29,687.749 1282.85,687.749 1283.41,687.749 1283.97,687.749 1284.53,687.749 1285.09,687.749 1285.65,687.749 1286.21,687.749 1286.77,687.749 1287.33,687.749 1287.89,687.749 1288.45,687.749 1289,687.749 1289.56,687.749 1290.12,687.749 1290.68,687.749 1291.24,687.749 1291.8,687.749 1292.36,687.749 1292.92,687.749 1293.48,687.749 1294.04,687.749 1294.6,687.749 1295.16,687.749 1295.72,687.749 1296.28,687.749 1296.83,687.749 1297.39,687.749 1297.95,687.749 1298.51,687.749 1299.07,687.749 1299.63,687.749 1300.19,687.749 1300.75,687.749 1301.31,687.749 1301.87,687.749 1302.43,687.749 1302.99,687.749 1303.55,687.749 1304.1,687.749 1304.66,687.749 1305.22,687.749 1305.78,687.749 1306.34,687.749 1306.9,687.749 1307.46,687.749 1308.02,687.749 1308.58,687.749 1309.14,687.749 1309.7,687.749 1310.26,687.749 1310.82,687.749 1311.38,687.749 1311.93,687.749 1312.49,687.749 1313.05,687.749 1313.61,687.749 1314.17,687.749 1314.73,687.749 1315.29,687.749 1315.85,687.749 1316.41,687.749 1316.97,687.749 1317.53,687.749 1318.09,687.749 1318.65,687.749 1319.2,687.749 1319.76,687.749 1320.32,687.749 1320.88,687.749 1321.44,687.749 1322,687.749 1322.56,687.749 1323.12,687.749 1323.68,687.749 1324.24,687.749 1324.8,687.749 1325.36,687.749 1325.92,687.749 1326.47,687.749 1327.03,687.749 1327.59,687.749 1328.15,687.749 1328.71,687.749 1329.27,687.749 1329.83,687.749 1330.39,687.749 1330.95,687.749 1331.51,687.749 1332.07,687.749 1332.63,687.749 1333.19,687.749 1333.75,687.749 1334.3,687.749 1334.86,687.749 1335.42,687.749 1335.98,687.749 1336.54,687.749 1337.1,687.749 1337.66,687.749 1338.22,687.749 1338.78,687.749 1339.34,687.749 1339.9,687.749 1340.46,687.749 1341.02,687.749 1341.57,687.749 1342.13,687.749 1342.69,687.749 1343.25,687.749 1343.81,687.749 1344.37,687.749 1344.93,687.749 1345.49,687.749 1346.05,687.749 1346.61,687.749 1347.17,687.749 1347.73,687.749 1348.29,687.749 1348.84,687.749 1349.4,687.749 1349.96,687.749 1350.52,687.749 1351.08,687.749 1351.64,687.749 1352.2,687.749 1352.76,687.749 1353.32,687.749 1353.88,687.749 1354.44,687.749 1355,687.749 1355.56,687.749 1356.12,687.749 1356.67,687.749 1357.23,687.749 1357.79,687.749 1358.35,687.749 1358.91,687.749 1359.47,687.749 1360.03,687.749 1360.59,687.749 1361.15,687.749 1361.71,687.749 1362.27,687.749 1362.83,687.749 1363.39,687.749 1363.94,687.749 1364.5,687.749 1365.06,687.749 1365.62,687.749 1366.18,687.749 1366.74,687.749 1367.3,687.749 1367.86,687.749 1368.42,687.749 1368.98,687.749 1369.54,687.749 1370.1,687.749 1370.66,687.749 1371.21,687.749 1371.77,687.749 1372.33,687.749 1372.89,687.749 1373.45,687.749 1374.01,687.749 1374.57,687.749 1375.13,687.749 1375.69,687.749 1376.25,687.749 1376.81,687.749 1377.37,687.749 1377.93,687.749 1378.49,687.749 1379.04,687.749 1379.6,687.749 1380.16,687.749 1380.72,687.749 1381.28,687.749 1381.84,687.749 1382.4,687.749 1382.96,687.749 1383.52,687.749 1384.08,687.749 1384.64,687.749 1385.2,687.749 1385.76,687.749 1386.31,687.749 1386.87,687.749 1387.43,687.749 1387.99,687.749 1388.55,687.749 1389.11,687.749 1389.67,687.749 1390.23,687.749 1390.79,687.749 1391.35,687.749 1391.91,687.749 1392.47,687.749 1393.03,687.749 1393.58,687.749 1394.14,687.749 1394.7,687.749 1395.26,687.749 1395.82,687.749 1396.38,687.749 1396.94,687.749 1397.5,687.749 1398.06,687.749 1398.62,687.749 1399.18,687.749 1399.74,687.749 1400.3,687.749 1400.86,687.749 1401.41,687.749 1401.97,687.749 1402.53,687.749 1403.09,687.749 1403.65,687.749 1404.21,687.749 1404.77,687.749 1405.33,687.749 1405.89,687.749 1406.45,687.749 1407.01,687.749 1407.57,687.749 1408.13,687.749 1408.68,687.749 1409.24,687.749 1409.8,687.749 1410.36,687.749 1410.92,687.749 1411.48,687.749 1412.04,687.749 1412.6,687.749 1413.16,687.749 1413.72,687.749 1414.28,687.749 1414.84,687.749 1415.4,687.749 1415.95,687.749 1416.51,687.749 1417.07,687.749 1417.63,687.749 1418.19,687.749 1418.75,687.749 1419.31,687.749 1419.87,687.749 1420.43,687.749 1420.99,687.749 1421.55,687.749 1422.11,687.749 1422.67,687.749 1423.23,687.749 1423.78,687.749 1424.34,687.749 1424.9,687.749 1425.46,687.749 1426.02,687.749 1426.58,687.749 1427.14,687.749 1427.7,687.749 1428.26,687.749 1428.82,687.749 1429.38,687.749 1429.94,687.749 1430.5,687.749 1431.05,687.749 1431.61,687.749 1432.17,687.749 1432.73,687.749 1433.29,687.749 1433.85,687.749 1434.41,687.749 1434.97,687.749 1435.53,687.749 1436.09,687.749 1436.65,687.749 1437.21,687.749 1437.77,687.749 1438.33,687.749 1438.88,687.749 1439.44,687.749 1440,687.749 1440.56,687.749 1441.12,687.749 1441.68,687.749 1442.24,687.749 1442.8,687.749 1443.36,687.749 1443.92,687.749 1444.48,687.749 1445.04,687.749 1445.6,687.749 1446.15,687.749 1446.71,687.749 1447.27,687.749 1447.83,687.749 1448.39,687.749 1448.95,687.749 1449.51,687.749 1450.07,687.749 1450.63,687.749 1451.19,687.749 1451.75,687.749 1452.31,687.749 1452.87,687.749 1453.42,687.749 1453.98,687.749 1454.54,687.749 1455.1,687.749 1455.66,687.749 1456.22,687.749 1456.78,687.749 1457.34,687.749 1457.9,687.749 1458.46,687.749 1459.02,687.749 1459.58,687.749 1460.14,687.749 1460.7,687.749 1461.25,687.749 1461.81,687.749 1462.37,687.749 1462.93,687.749 1463.49,687.749 1464.05,687.749 1464.61,687.749 1465.17,687.749 1465.73,687.749 1466.29,687.749 1466.85,687.749 1467.41,687.749 1467.97,687.749 1468.52,687.749 1469.08,687.749 1469.64,687.749 1470.2,687.749 1470.76,687.749 1471.32,687.749 1471.88,687.749 1472.44,687.749 1473,687.749 1473.56,687.749 1474.12,687.749 1474.68,687.749 1475.24,687.749 1475.79,687.749 1476.35,687.749 1476.91,687.749 1477.47,687.749 1478.03,687.749 1478.59,687.749 1479.15,687.749 1479.71,687.749 1480.27,687.749 1480.83,687.749 1481.39,687.749 1481.95,687.749 1482.51,687.749 1483.07,687.749 1483.62,687.749 1484.18,687.749 1484.74,687.749 1485.3,687.749 1485.86,687.749 1486.42,687.749 1486.98,687.749 1487.54,687.749 1488.1,687.749 1488.66,687.749 1489.22,687.749 1489.78,687.749 1490.34,687.749 1490.89,687.749 1491.45,687.749 1492.01,687.749 1492.57,687.749 1493.13,687.749 1493.69,687.749 1494.25,687.749 1494.81,687.749 1495.37,687.749 1495.93,687.749 1496.49,687.749 1497.05,687.749 1497.61,687.749 1498.16,687.749 1498.72,687.749 1499.28,687.749 1499.84,687.749 1500.4,687.749 1500.96,687.749 1501.52,687.749 1502.08,687.749 1502.64,687.749 1503.2,687.749 1503.76,687.749 1504.32,687.749 1504.88,687.749 1505.44,687.749 1505.99,687.749 1506.55,687.749 1507.11,687.749 1507.67,687.749 1508.23,687.749 1508.79,687.749 1509.35,687.749 1509.91,687.749 1510.47,687.749 1511.03,687.749 1511.59,687.749 1512.15,687.749 1512.71,687.749 1513.26,687.749 1513.82,687.749 1514.38,687.749 1514.94,687.749 1515.5,687.749 1516.06,687.749 1516.62,687.749 1517.18,687.749 1517.74,687.749 1518.3,687.749 1518.86,687.749 1519.42,687.749 1519.98,687.749 1520.53,687.749 1521.09,687.749 1521.65,687.749 1522.21,687.749 1522.77,687.749 1523.33,687.749 1523.89,687.749 1524.45,687.749 1525.01,687.749 1525.57,687.749 1526.13,687.749 1526.69,687.749 1527.25,687.749 1527.81,687.749 1528.36,687.749 1528.92,687.749 1529.48,687.749 1530.04,687.749 1530.6,687.749 1531.16,687.749 1531.72,687.749 1532.28,687.749 1532.84,687.749 1533.4,687.749 1533.96,687.749 1534.52,687.749 1535.08,687.749 1535.63,687.749 1536.19,687.749 1536.75,687.749 1537.31,687.749 1537.87,687.749 1538.43,687.749 1538.99,687.749 1539.55,687.749 1540.11,687.749 1540.67,687.749 1541.23,687.749 1541.79,687.749 1542.35,687.749 1542.9,687.749 1543.46,687.749 1544.02,687.749 1544.58,687.749 1545.14,687.749 1545.7,687.749 1546.26,687.749 1546.82,687.749 1547.38,687.749 1547.94,687.749 1548.5,687.749 1549.06,687.749 1549.62,687.749 1550.18,687.749 1550.73,687.749 1551.29,687.749 1551.85,687.749 1552.41,687.749 1552.97,687.749 1553.53,687.749 1554.09,687.749 1554.65,687.749 1555.21,687.749 1555.77,687.749 1556.33,687.749 1556.89,687.749 1557.45,687.749 1558,687.749 1558.56,687.749 1559.12,687.749 1559.68,687.749 1560.24,687.749 1560.8,687.749 1561.36,687.749 1561.92,687.749 1562.48,687.749 1563.04,687.749 1563.6,687.749 1564.16,687.749 1564.72,687.749 1565.28,687.749 1565.83,687.749 1566.39,687.749 1566.95,687.749 1567.51,687.749 1568.07,687.749 1568.63,687.749 1569.19,687.749 1569.75,687.749 1570.31,687.749 1570.87,687.749 1571.43,687.749 1571.99,687.749 1572.55,687.749 1573.1,687.749 1573.66,687.749 1574.22,687.749 1574.78,687.749 1575.34,687.749 1575.9,687.749 1576.46,687.749 1577.02,687.749 1577.58,687.749 1578.14,687.749 1578.7,687.749 1579.26,687.749 1579.82,687.749 1580.37,687.749 1580.93,687.749 1581.49,687.749 1582.05,687.749 1582.61,687.749 1583.17,687.749 1583.73,687.749 1584.29,687.749 1584.85,687.749 1585.41,687.749 1585.97,687.749 1586.53,687.749 1587.09,687.749 1587.65,687.749 1588.2,687.749 1588.76,687.749 1589.32,687.749 1589.88,687.749 1590.44,687.749 1591,687.749 1591.56,687.749 1592.12,687.749 1592.68,687.749 1593.24,687.749 1593.8,687.749 1594.36,687.749 1594.92,687.749 1595.47,687.749 1596.03,687.749 1596.59,687.749 1597.15,687.749 1597.71,687.749 1598.27,687.749 1598.83,687.749 1599.39,687.749 1599.95,687.749 1600.51,687.749 1601.07,687.749 1601.63,687.749 1602.19,687.749 1602.74,687.749 1603.3,687.749 1603.86,687.749 1604.42,687.749 1604.98,687.749 1605.54,687.749 1606.1,687.749 1606.66,687.749 1607.22,687.749 1607.78,687.749 1608.34,687.749 1608.9,687.749 1609.46,687.749 1610.02,687.749 1610.57,687.749 1611.13,687.749 1611.69,687.749 1612.25,687.749 1612.81,687.749 1613.37,687.749 1613.93,687.749 1614.49,687.749 1615.05,687.749 1615.61,687.749 1616.17,687.749 1616.73,687.749 1617.29,687.749 1617.84,687.749 1618.4,687.749 1618.96,687.749 1619.52,687.749 1620.08,687.749 1620.64,687.749 1621.2,687.749 1621.76,687.749 1622.32,687.749 1622.88,687.749 1623.44,687.749 1624,687.749 1624.56,687.749 1625.11,687.749 1625.67,687.749 1626.23,687.749 1626.79,687.749 1627.35,687.749 1627.91,687.749 1628.47,687.749 1629.03,687.749 1629.59,687.749 1630.15,687.749 1630.71,687.749 1631.27,687.749 1631.83,687.749 1632.39,687.749 1632.94,687.749 1633.5,687.749 1634.06,687.749 1634.62,687.749 1635.18,687.749 1635.74,687.749 1636.3,687.749 1636.86,687.749 1637.42,687.749 1637.98,687.749 1638.54,687.749 1639.1,687.749 1639.66,687.749 1640.21,687.749 1640.77,687.749 1641.33,687.749 1641.89,687.749 1642.45,687.749 1643.01,687.749 1643.57,687.749 1644.13,687.749 1644.69,687.749 1645.25,687.749 1645.81,687.749 1646.37,687.749 1646.93,687.749 1647.48,687.749 1648.04,687.749 1648.6,687.749 1649.16,687.749 1649.72,687.749 1650.28,687.749 1650.84,687.749 1651.4,687.749 1651.96,687.749 1652.52,687.749 1653.08,687.749 1653.64,687.749 1654.2,687.749 1654.76,687.749 1655.31,687.749 1655.87,687.749 1656.43,687.749 1656.99,687.749 1657.55,687.749 1658.11,687.749 1658.67,687.749 1659.23,687.749 1659.79,687.749 1660.35,687.749 1660.91,687.749 1661.47,687.749 1662.03,687.749 1662.58,687.749 1663.14,687.749 1663.7,687.749 1664.26,687.749 1664.82,687.749 1665.38,687.749 1665.94,687.749 1666.5,687.749 1667.06,687.749 1667.62,687.749 1668.18,687.749 1668.74,687.749 1669.3,687.749 1669.85,687.749 1670.41,687.749 1670.97,687.749 1671.53,687.749 1672.09,687.749 1672.65,687.749 1673.21,687.749 1673.77,687.749 1674.33,687.749 1674.89,687.749 1675.45,687.749 1676.01,687.749 1676.57,687.749 1677.13,687.749 1677.68,687.749 1678.24,687.749 1678.8,687.749 1679.36,687.749 1679.92,687.749 1680.48,687.749 1681.04,687.749 1681.6,687.749 1682.16,687.749 1682.72,687.749 1683.28,687.749 1683.84,687.749 1684.4,687.749 1684.95,687.749 1685.51,687.749 1686.07,687.749 1686.63,687.749 1687.19,687.749 1687.75,687.749 1688.31,687.749 1688.87,687.749 1689.43,687.749 1689.99,687.749 1690.55,687.749 1691.11,687.749 1691.67,687.749 1692.23,687.749 1692.78,687.749 1693.34,687.749 1693.9,687.749 1694.46,687.749 1695.02,687.749 1695.58,687.749 1696.14,687.749 1696.7,687.749 1697.26,687.749 1697.82,687.749 1698.38,687.749 1698.94,687.749 1699.5,687.749 1700.05,687.749 1700.61,687.749 1701.17,687.749 1701.73,687.749 1702.29,687.749 1702.85,687.749 1703.41,687.749 1703.97,687.749 1704.53,687.749 1705.09,687.749 1705.65,687.749 1706.21,687.749 1706.77,687.749 1707.32,687.749 1707.88,687.749 1708.44,687.749 1709,687.749 1709.56,687.749 1710.12,687.749 1710.68,687.749 1711.24,687.749 1711.8,687.749 1712.36,687.749 1712.92,687.749 1713.48,687.749 1714.04,687.749 1714.6,687.749 1715.15,687.749 1715.71,687.749 1716.27,687.749 1716.83,687.749 1717.39,687.749 1717.95,687.749 1718.51,687.749 1719.07,687.749 1719.63,687.749 1720.19,687.749 1720.75,687.749 1721.31,687.749 1721.87,687.749 1722.42,687.749 1722.98,687.749 1723.54,687.749 1724.1,687.749 1724.66,687.749 1725.22,687.749 1725.78,687.749 1726.34,687.749 1726.9,687.749 1727.46,687.749 1728.02,687.749 1728.58,687.749 1729.14,687.749 1729.69,687.749 1730.25,687.749 1730.81,687.749 1731.37,687.749 1731.93,687.749 1732.49,687.749 1733.05,687.749 1733.61,687.749 1734.17,687.749 1734.73,687.749 1735.29,687.749 1735.85,687.749 1736.41,687.749 1736.97,687.749 1737.52,687.749 1738.08,687.749 1738.64,687.749 1739.2,687.749 1739.76,687.749 1740.32,687.749 1740.88,687.749 1741.44,687.749 1742,687.749 1742.56,687.749 1743.12,687.749 1743.68,687.749 1744.24,687.749 1744.79,687.749 1745.35,687.749 1745.91,687.749 1746.47,687.749 1747.03,687.749 1747.59,687.749 1748.15,687.749 1748.71,687.749 1749.27,687.749 1749.83,687.749 1750.39,687.749 1750.95,687.749 1751.51,687.749 1752.06,687.749 1752.62,687.749 1753.18,687.749 1753.74,687.749 1754.3,687.749 1754.86,687.749 1755.42,687.749 1755.98,687.749 1756.54,687.749 1757.1,687.749 1757.66,687.749 1758.22,687.749 1758.78,687.749 1759.34,687.749 1759.89,687.749 1760.45,687.749 1761.01,687.749 1761.57,687.749 1762.13,687.749 1762.69,687.749 1763.25,687.749 1763.81,687.749 1764.37,687.749 1764.93,687.749 1765.49,687.749 1766.05,687.749 1766.61,687.749 1767.16,687.749 1767.72,687.749 1768.28,687.749 1768.84,687.749 1769.4,687.749 1769.96,687.749 1770.52,687.749 1771.08,687.749 1771.64,687.749 1772.2,687.749 1772.76,687.749 1773.32,687.749 1773.88,687.749 1774.43,687.749 1774.99,687.749 1775.55,687.749 1776.11,687.749 1776.67,687.749 1777.23,687.749 1777.79,687.749 1778.35,687.749 1778.91,687.749 1779.47,687.749 1780.03,687.749 1780.59,687.749 1781.15,687.749 1781.71,687.749 1782.26,687.749 1782.82,687.749 1783.38,687.749 1783.94,687.749 1784.5,687.749 1785.06,687.749 1785.62,687.749 1786.18,687.749 1786.74,687.749 1787.3,687.749 1787.86,687.749 1788.42,687.749 1788.98,687.749 1789.53,687.749 1790.09,687.749 1790.65,687.749 1791.21,687.749 1791.77,687.749 1792.33,687.749 1792.89,687.749 1793.45,687.749 1794.01,687.749 1794.57,687.749 1795.13,687.749 1795.69,687.749 1796.25,687.749 1796.8,687.749 1797.36,687.749 1797.92,687.749 1798.48,687.749 1799.04,687.749 1799.6,687.749 1800.16,687.749 1800.72,687.749 1801.28,687.749 1801.84,687.749 1802.4,687.749 1802.96,687.749 1803.52,687.749 1804.08,687.749 1804.63,687.749 1805.19,687.749 1805.75,687.749 1806.31,687.749 1806.87,687.749 1807.43,687.749 1807.99,687.749 1808.55,687.749 1809.11,687.749 1809.67,687.749 1810.23,687.749 1810.79,687.749 1811.35,687.749 1811.9,687.749 1812.46,687.749 1813.02,687.749 1813.58,687.749 1814.14,687.749 1814.7,687.749 1815.26,687.749 1815.82,687.749 1816.38,687.749 1816.94,687.749 1817.5,687.749 1818.06,687.749 1818.62,687.749 1819.18,687.749 1819.73,687.749 1820.29,687.749 1820.85,687.749 1821.41,687.749 1821.97,687.749 1822.53,687.749 1823.09,687.749 1823.65,687.749 1824.21,687.749 1824.77,687.749 1825.33,687.749 1825.89,687.749 1826.45,687.749 1827,687.749 1827.56,687.749 1828.12,687.749 1828.68,687.749 1829.24,687.749 1829.8,687.749 1830.36,687.749 1830.92,687.749 1831.48,687.749 1832.04,687.749 1832.6,687.749 1833.16,687.749 1833.72,687.749 1834.27,687.749 1834.83,687.749 1835.39,687.749 1835.95,687.749 1836.51,687.749 1837.07,687.749 1837.63,687.749 1838.19,687.749 \"/>\n<path clip-path=\"url(#clip393)\" d=\"M720.247 684.396 L720.806 684.396 L721.365 684.396 L721.924 684.396 L722.484 684.396 L723.043 684.396 L723.602 684.396 L724.161 684.396 L724.721 684.396 L725.28 684.396 L725.839 684.396 L726.398 684.396 L726.958 684.396 L727.517 684.396 L728.076 684.396 L728.635 684.396 L729.195 684.396 L729.754 684.396 L730.313 684.396 L730.872 684.396 L731.432 684.396 L731.991 684.396 L732.55 684.396 L733.109 684.396 L733.669 684.396 L734.228 684.396 L734.787 684.396 L735.346 684.396 L735.906 684.396 L736.465 684.396 L737.024 684.396 L737.583 684.396 L738.143 684.396 L738.702 684.396 L739.261 684.396 L739.82 684.396 L740.38 684.396 L740.939 684.396 L741.498 684.396 L742.057 684.396 L742.617 684.396 L743.176 684.396 L743.735 684.396 L744.294 684.396 L744.854 684.396 L745.413 684.396 L745.972 684.396 L746.531 684.396 L747.091 684.396 L747.65 684.396 L748.209 684.396 L748.768 684.396 L749.328 684.396 L749.887 684.396 L750.446 684.396 L751.005 684.396 L751.565 684.396 L752.124 684.396 L752.683 684.396 L753.242 684.396 L753.802 684.396 L754.361 684.396 L754.92 684.396 L755.479 684.396 L756.039 684.396 L756.598 684.396 L757.157 684.396 L757.716 684.396 L758.276 684.396 L758.835 684.396 L759.394 684.396 L759.953 684.396 L760.513 684.396 L761.072 684.396 L761.631 684.396 L762.19 684.396 L762.75 684.396 L763.309 684.396 L763.868 684.396 L764.427 684.396 L764.987 684.396 L765.546 684.396 L766.105 684.396 L766.664 684.396 L767.224 684.396 L767.783 684.396 L768.342 684.396 L768.901 684.396 L769.461 684.396 L770.02 684.396 L770.579 684.396 L771.138 684.396 L771.698 684.396 L772.257 684.396 L772.816 684.396 L773.375 684.396 L773.935 684.396 L774.494 684.396 L775.053 684.396 L775.612 684.396 L776.172 684.396 L776.731 684.396 L777.29 684.396 L777.849 684.396 L778.409 684.396 L778.968 684.396 L779.527 684.396 L780.086 684.396 L780.646 684.396 L781.205 684.396 L781.764 684.396 L782.323 684.396 L782.883 684.396 L783.442 684.396 L784.001 684.396 L784.56 684.396 L785.12 684.396 L785.679 684.396 L786.238 684.396 L786.797 684.396 L787.357 684.396 L787.916 684.396 L788.475 684.396 L789.034 684.396 L789.594 684.396 L790.153 684.396 L790.712 684.396 L791.271 684.396 L791.831 684.396 L792.39 684.396 L792.949 684.396 L793.508 684.396 L794.068 684.396 L794.627 684.396 L795.186 684.396 L795.745 684.396 L796.305 684.396 L796.864 684.396 L797.423 684.396 L797.982 684.396 L798.542 684.396 L799.101 684.396 L799.66 684.396 L800.219 684.396 L800.779 684.396 L801.338 684.396 L801.897 684.396 L802.456 684.396 L803.016 684.396 L803.575 684.396 L804.134 684.396 L804.693 684.396 L805.253 684.396 L805.812 684.396 L806.371 684.396 L806.931 684.396 L807.49 684.396 L808.049 684.396 L808.608 684.396 L809.168 684.396 L809.727 684.396 L810.286 684.396 L810.845 684.396 L811.405 684.396 L811.964 684.396 L812.523 684.396 L813.082 684.396 L813.642 684.396 L814.201 684.396 L814.76 684.396 L815.319 684.396 L815.879 684.396 L816.438 684.396 L816.997 684.396 L817.556 684.396 L818.116 684.396 L818.675 684.396 L819.234 684.396 L819.793 684.396 L820.353 684.396 L820.912 684.396 L821.471 684.396 L822.03 684.396 L822.59 684.396 L823.149 684.396 L823.708 684.396 L824.267 684.396 L824.827 684.396 L825.386 684.396 L825.945 684.396 L826.504 684.396 L827.064 684.396 L827.623 684.396 L828.182 684.396 L828.741 684.396 L829.301 684.396 L829.86 684.396 L830.419 684.396 L830.978 684.396 L831.538 684.396 L832.097 684.396 L832.656 684.396 L833.215 684.396 L833.775 684.396 L834.334 684.396 L834.893 684.396 L835.452 684.396 L836.012 684.396 L836.571 684.396 L837.13 684.396 L837.689 684.396 L838.249 684.396 L838.808 684.396 L839.367 684.396 L839.926 684.396 L840.486 684.396 L841.045 684.396 L841.604 684.396 L842.163 684.396 L842.723 684.396 L843.282 684.396 L843.841 684.396 L844.4 684.396 L844.96 684.396 L845.519 684.396 L846.078 684.396 L846.637 684.396 L847.197 684.396 L847.756 684.396 L848.315 684.396 L848.874 684.396 L849.434 684.396 L849.993 684.396 L850.552 684.396 L851.111 684.396 L851.671 684.396 L852.23 684.396 L852.789 684.396 L853.348 684.396 L853.908 684.396 L854.467 684.396 L855.026 684.396 L855.585 684.396 L856.145 684.396 L856.704 684.396 L857.263 684.396 L857.822 684.396 L858.382 684.396 L858.941 684.396 L859.5 684.396 L860.059 684.396 L860.619 684.396 L861.178 684.396 L861.737 684.396 L862.296 684.396 L862.856 684.396 L863.415 684.396 L863.974 684.396 L864.533 684.396 L865.093 684.396 L865.652 684.396 L866.211 684.396 L866.77 684.396 L867.33 684.396 L867.889 684.396 L868.448 684.396 L869.007 684.396 L869.567 684.396 L870.126 684.396 L870.685 684.396 L871.244 684.396 L871.804 684.396 L872.363 684.396 L872.922 684.396 L873.481 684.396 L874.041 684.396 L874.6 684.396 L875.159 684.396 L875.718 684.396 L876.278 684.396 L876.837 684.396 L877.396 684.396 L877.955 684.396 L878.515 684.396 L879.074 684.396 L879.633 684.396 L880.192 684.396 L880.752 684.396 L881.311 684.396 L881.87 684.396 L882.429 684.396 L882.989 684.396 L883.548 684.396 L884.107 684.396 L884.666 684.396 L885.226 684.396 L885.785 684.396 L886.344 684.396 L886.903 684.396 L887.463 684.396 L888.022 684.396 L888.581 684.396 L889.14 684.396 L889.7 684.396 L890.259 684.396 L890.818 684.396 L891.377 684.396 L891.937 684.396 L892.496 684.396 L893.055 684.396 L893.614 684.396 L894.174 684.396 L894.733 684.396 L895.292 684.396 L895.851 684.396 L896.411 684.396 L896.97 684.396 L897.529 684.396 L898.088 684.396 L898.648 684.396 L899.207 684.396 L899.766 684.396 L900.325 684.396 L900.885 684.396 L901.444 684.396 L902.003 684.396 L902.562 684.396 L903.122 684.396 L903.681 684.396 L904.24 684.396 L904.799 684.396 L905.359 684.396 L905.918 684.396 L906.477 684.396 L907.036 684.396 L907.596 684.396 L908.155 684.396 L908.714 684.396 L909.273 684.396 L909.833 684.396 L910.392 684.396 L910.951 684.396 L911.51 684.396 L912.07 684.396 L912.629 684.396 L913.188 684.396 L913.747 684.396 L914.307 684.396 L914.866 684.396 L915.425 684.396 L915.984 684.396 L916.544 684.396 L917.103 684.396 L917.662 684.396 L918.221 684.396 L918.781 684.396 L919.34 684.396 L919.899 684.396 L920.458 684.396 L921.018 684.396 L921.577 684.396 L922.136 684.396 L922.695 684.396 L923.255 684.396 L923.814 684.396 L924.373 684.396 L924.932 684.396 L925.492 684.396 L926.051 684.396 L926.61 684.396 L927.169 684.396 L927.729 684.396 L928.288 684.396 L928.847 684.396 L929.406 684.396 L929.966 684.396 L930.525 684.396 L931.084 684.396 L931.644 684.396 L932.203 684.396 L932.762 684.396 L933.321 684.396 L933.881 684.396 L934.44 684.396 L934.999 684.396 L935.558 684.396 L936.118 684.396 L936.677 684.396 L937.236 684.396 L937.795 684.396 L938.355 684.396 L938.914 684.396 L939.473 684.396 L940.032 684.396 L940.592 684.396 L941.151 684.396 L941.71 684.396 L942.269 684.396 L942.829 684.396 L943.388 684.396 L943.947 684.396 L944.506 684.396 L945.066 684.396 L945.625 684.396 L946.184 684.396 L946.743 684.396 L947.303 684.396 L947.862 684.396 L948.421 684.396 L948.98 684.396 L949.54 684.396 L950.099 684.396 L950.658 684.396 L951.217 684.396 L951.777 684.396 L952.336 684.396 L952.895 684.396 L953.454 684.396 L954.014 684.396 L954.573 684.396 L955.132 684.396 L955.691 684.396 L956.251 684.396 L956.81 684.396 L957.369 684.396 L957.928 684.396 L958.488 684.396 L959.047 684.396 L959.606 684.396 L960.165 684.396 L960.725 684.396 L961.284 684.396 L961.843 684.396 L962.402 684.396 L962.962 684.396 L963.521 684.396 L964.08 684.396 L964.639 684.396 L965.199 684.396 L965.758 684.396 L966.317 684.396 L966.876 684.396 L967.436 684.396 L967.995 684.396 L968.554 684.396 L969.113 684.396 L969.673 684.396 L970.232 684.396 L970.791 684.396 L971.35 684.396 L971.91 684.396 L972.469 684.396 L973.028 684.396 L973.587 684.396 L974.147 684.396 L974.706 684.396 L975.265 684.396 L975.824 684.396 L976.384 684.396 L976.943 684.396 L977.502 684.396 L978.061 684.396 L978.621 684.396 L979.18 684.396 L979.739 684.396 L980.298 684.396 L980.858 684.396 L981.417 684.396 L981.976 684.396 L982.535 684.396 L983.095 684.396 L983.654 684.396 L984.213 684.396 L984.772 684.396 L985.332 684.396 L985.891 684.396 L986.45 684.396 L987.009 684.396 L987.569 684.396 L988.128 684.396 L988.687 684.396 L989.246 684.396 L989.806 684.396 L990.365 684.396 L990.924 684.396 L991.483 684.396 L992.043 684.396 L992.602 684.396 L993.161 684.396 L993.72 684.396 L994.28 684.396 L994.839 684.396 L995.398 684.396 L995.957 684.396 L996.517 684.396 L997.076 684.396 L997.635 684.396 L998.194 684.396 L998.754 684.396 L999.313 684.396 L999.872 684.396 L1000.43 684.396 L1000.99 684.396 L1001.55 684.396 L1002.11 684.396 L1002.67 684.396 L1003.23 684.396 L1003.79 684.396 L1004.35 684.396 L1004.91 684.396 L1005.46 684.396 L1006.02 684.396 L1006.58 684.396 L1007.14 684.396 L1007.7 684.396 L1008.26 684.396 L1008.82 684.396 L1009.38 684.396 L1009.94 684.396 L1010.5 684.396 L1011.06 684.396 L1011.62 684.396 L1012.18 684.396 L1012.73 684.396 L1013.29 684.396 L1013.85 684.396 L1014.41 684.396 L1014.97 684.396 L1015.53 684.396 L1016.09 684.396 L1016.65 684.396 L1017.21 684.396 L1017.77 684.396 L1018.33 684.396 L1018.89 684.396 L1019.45 684.396 L1020.01 684.396 L1020.56 684.396 L1021.12 684.396 L1021.68 684.396 L1022.24 684.396 L1022.8 684.396 L1023.36 684.396 L1023.92 684.396 L1024.48 684.396 L1025.04 684.396 L1025.6 684.396 L1026.16 684.396 L1026.72 684.396 L1027.28 684.396 L1027.83 684.396 L1028.39 684.396 L1028.95 684.396 L1029.51 684.396 L1030.07 684.396 L1030.63 684.396 L1031.19 684.396 L1031.75 684.396 L1032.31 684.396 L1032.87 684.396 L1033.43 684.396 L1033.99 684.396 L1034.55 684.396 L1035.1 684.396 L1035.66 684.396 L1036.22 684.396 L1036.78 684.396 L1037.34 684.396 L1037.9 684.396 L1038.46 684.396 L1039.02 684.396 L1039.58 684.396 L1040.14 684.396 L1040.7 684.396 L1041.26 684.396 L1041.82 684.396 L1042.38 684.396 L1042.93 684.396 L1043.49 684.396 L1044.05 684.396 L1044.61 684.396 L1045.17 684.396 L1045.73 684.396 L1046.29 684.396 L1046.85 684.396 L1047.41 684.396 L1047.97 684.396 L1048.53 684.396 L1049.09 684.396 L1049.65 684.396 L1050.2 684.396 L1050.76 684.396 L1051.32 684.396 L1051.88 684.396 L1052.44 684.396 L1053 684.396 L1053.56 684.396 L1054.12 684.396 L1054.68 684.396 L1055.24 684.396 L1055.8 684.396 L1056.36 684.396 L1056.92 684.396 L1057.48 684.396 L1058.03 684.396 L1058.59 684.396 L1059.15 684.396 L1059.71 684.396 L1060.27 684.396 L1060.83 684.396 L1061.39 684.396 L1061.95 684.396 L1062.51 684.396 L1063.07 684.396 L1063.63 684.396 L1064.19 684.396 L1064.75 684.396 L1065.3 684.396 L1065.86 684.396 L1066.42 684.396 L1066.98 684.396 L1067.54 684.396 L1068.1 684.396 L1068.66 684.396 L1069.22 684.396 L1069.78 684.396 L1070.34 684.396 L1070.9 684.396 L1071.46 684.396 L1072.02 684.396 L1072.57 684.396 L1073.13 684.396 L1073.69 684.396 L1074.25 684.396 L1074.81 684.396 L1075.37 684.396 L1075.93 684.396 L1076.49 684.396 L1077.05 684.396 L1077.61 684.396 L1078.17 684.396 L1078.73 684.396 L1079.29 684.396 L1079.85 684.396 L1080.4 684.396 L1080.96 684.396 L1081.52 684.396 L1082.08 684.396 L1082.64 684.396 L1083.2 684.396 L1083.76 684.396 L1084.32 684.396 L1084.88 684.396 L1085.44 684.396 L1086 684.396 L1086.56 684.396 L1087.12 684.396 L1087.67 684.396 L1088.23 684.396 L1088.79 684.396 L1089.35 684.396 L1089.91 684.396 L1090.47 684.396 L1091.03 684.396 L1091.59 684.396 L1092.15 684.396 L1092.71 684.396 L1093.27 684.396 L1093.83 684.396 L1094.39 684.396 L1094.94 684.396 L1095.5 684.396 L1096.06 684.396 L1096.62 684.396 L1097.18 684.396 L1097.74 684.396 L1098.3 684.396 L1098.86 684.396 L1099.42 684.396 L1099.98 684.396 L1100.54 684.396 L1101.1 684.396 L1101.66 684.396 L1102.22 684.396 L1102.77 684.396 L1103.33 684.396 L1103.89 684.396 L1104.45 684.396 L1105.01 684.396 L1105.57 684.396 L1106.13 684.396 L1106.69 684.396 L1107.25 684.396 L1107.81 684.396 L1108.37 684.396 L1108.93 684.396 L1109.49 684.396 L1110.04 684.396 L1110.6 684.396 L1111.16 684.396 L1111.72 684.396 L1112.28 684.396 L1112.84 684.396 L1113.4 684.396 L1113.96 684.396 L1114.52 684.396 L1115.08 684.396 L1115.64 684.396 L1116.2 684.396 L1116.76 684.396 L1117.31 684.396 L1117.87 684.396 L1118.43 684.396 L1118.99 684.396 L1119.55 684.396 L1120.11 684.396 L1120.67 684.396 L1121.23 684.396 L1121.79 684.396 L1122.35 684.396 L1122.91 684.396 L1123.47 684.396 L1124.03 684.396 L1124.59 684.396 L1125.14 684.396 L1125.7 684.396 L1126.26 684.396 L1126.82 684.396 L1127.38 684.396 L1127.94 684.396 L1128.5 684.396 L1129.06 684.396 L1129.62 684.396 L1130.18 684.396 L1130.74 684.396 L1131.3 684.396 L1131.86 684.396 L1132.41 684.396 L1132.97 684.396 L1133.53 684.396 L1134.09 684.396 L1134.65 684.396 L1135.21 684.396 L1135.77 684.396 L1136.33 684.396 L1136.89 684.396 L1137.45 684.396 L1138.01 684.396 L1138.57 684.396 L1139.13 684.396 L1139.68 684.396 L1140.24 684.396 L1140.8 684.396 L1141.36 684.396 L1141.92 684.396 L1142.48 684.396 L1143.04 684.396 L1143.6 684.396 L1144.16 684.396 L1144.72 684.396 L1145.28 684.396 L1145.84 684.396 L1146.4 684.396 L1146.96 684.396 L1147.51 684.396 L1148.07 684.396 L1148.63 684.396 L1149.19 684.396 L1149.75 684.396 L1150.31 684.396 L1150.87 684.396 L1151.43 684.396 L1151.99 684.396 L1152.55 684.396 L1153.11 684.396 L1153.67 684.396 L1154.23 684.396 L1154.78 684.396 L1155.34 684.396 L1155.9 684.396 L1156.46 684.396 L1157.02 684.396 L1157.58 684.396 L1158.14 684.396 L1158.7 684.396 L1159.26 684.396 L1159.82 684.396 L1160.38 684.396 L1160.94 684.396 L1161.5 684.396 L1162.05 684.396 L1162.61 684.396 L1163.17 684.396 L1163.73 684.396 L1164.29 684.396 L1164.85 684.396 L1165.41 684.396 L1165.97 684.396 L1166.53 684.396 L1167.09 684.396 L1167.65 684.396 L1168.21 684.396 L1168.77 684.396 L1169.33 684.396 L1169.88 684.396 L1170.44 684.396 L1171 684.396 L1171.56 684.396 L1172.12 684.396 L1172.68 684.396 L1173.24 684.396 L1173.8 684.396 L1174.36 684.396 L1174.92 684.396 L1175.48 684.396 L1176.04 684.396 L1176.6 684.396 L1177.15 684.396 L1177.71 684.396 L1178.27 684.396 L1178.83 684.396 L1179.39 684.396 L1179.95 684.396 L1180.51 684.396 L1181.07 684.396 L1181.63 684.396 L1182.19 684.396 L1182.75 684.396 L1183.31 684.396 L1183.87 684.396 L1184.43 684.396 L1184.98 684.396 L1185.54 684.396 L1186.1 684.396 L1186.66 684.396 L1187.22 684.396 L1187.78 684.396 L1188.34 684.396 L1188.9 684.396 L1189.46 684.396 L1190.02 684.396 L1190.58 684.396 L1191.14 684.396 L1191.7 684.396 L1192.25 684.396 L1192.81 684.396 L1193.37 684.396 L1193.93 684.396 L1194.49 684.396 L1195.05 684.396 L1195.61 684.396 L1196.17 684.396 L1196.73 684.396 L1197.29 684.396 L1197.85 684.396 L1198.41 684.396 L1198.97 684.396 L1199.52 684.396 L1200.08 684.396 L1200.64 684.396 L1201.2 684.396 L1201.76 684.396 L1202.32 684.396 L1202.88 684.396 L1203.44 684.396 L1204 684.396 L1204.56 684.396 L1205.12 684.396 L1205.68 684.396 L1206.24 684.396 L1206.8 684.396 L1207.35 684.396 L1207.91 684.396 L1208.47 684.396 L1209.03 684.396 L1209.59 684.396 L1210.15 684.396 L1210.71 684.396 L1211.27 684.396 L1211.83 684.396 L1212.39 684.396 L1212.95 684.396 L1213.51 684.396 L1214.07 684.396 L1214.62 684.396 L1215.18 684.396 L1215.74 684.396 L1216.3 684.396 L1216.86 684.396 L1217.42 684.396 L1217.98 684.396 L1218.54 684.396 L1219.1 684.396 L1219.66 684.396 L1220.22 684.396 L1220.78 684.396 L1221.34 684.396 L1221.89 684.396 L1222.45 684.396 L1223.01 684.396 L1223.57 684.396 L1224.13 684.396 L1224.69 684.396 L1225.25 684.396 L1225.81 684.396 L1226.37 684.396 L1226.93 684.396 L1227.49 684.396 L1228.05 684.396 L1228.61 684.396 L1229.17 684.396 L1229.72 684.396 L1230.28 684.396 L1230.84 684.396 L1231.4 684.396 L1231.96 684.396 L1232.52 684.396 L1233.08 684.396 L1233.64 684.396 L1234.2 684.396 L1234.76 684.396 L1235.32 684.396 L1235.88 684.396 L1236.44 684.396 L1236.99 684.396 L1237.55 684.396 L1238.11 684.396 L1238.67 684.396 L1239.23 684.396 L1239.79 684.396 L1240.35 684.396 L1240.91 684.396 L1241.47 684.396 L1242.03 684.396 L1242.59 684.396 L1243.15 684.396 L1243.71 684.396 L1244.26 684.396 L1244.82 684.396 L1245.38 684.396 L1245.94 684.396 L1246.5 684.396 L1247.06 684.396 L1247.62 684.396 L1248.18 684.396 L1248.74 684.396 L1249.3 684.396 L1249.86 684.396 L1250.42 684.396 L1250.98 684.396 L1251.54 684.396 L1252.09 684.396 L1252.65 684.396 L1253.21 684.396 L1253.77 684.396 L1254.33 684.396 L1254.89 684.396 L1255.45 684.396 L1256.01 684.396 L1256.57 684.396 L1257.13 684.396 L1257.69 684.396 L1258.25 684.396 L1258.81 684.396 L1259.36 684.396 L1259.92 684.396 L1260.48 684.396 L1261.04 684.396 L1261.6 684.396 L1262.16 684.396 L1262.72 684.396 L1263.28 684.396 L1263.84 684.396 L1264.4 684.396 L1264.96 684.396 L1265.52 684.396 L1266.08 684.396 L1266.63 684.396 L1267.19 684.396 L1267.75 684.396 L1268.31 684.396 L1268.87 684.396 L1269.43 684.396 L1269.99 684.396 L1270.55 684.396 L1271.11 684.396 L1271.67 684.396 L1272.23 684.396 L1272.79 684.396 L1273.35 684.396 L1273.91 684.396 L1274.46 684.396 L1275.02 684.396 L1275.58 684.396 L1276.14 684.396 L1276.7 684.396 L1277.26 684.396 L1277.82 684.396 L1278.38 684.396 L1278.94 684.396 L1279.5 684.396 L1280.06 684.396 L1280.62 684.396 L1281.18 684.396 L1281.73 684.396 L1282.29 684.396 L1282.85 684.396 L1283.41 684.396 L1283.97 684.396 L1284.53 684.396 L1285.09 684.396 L1285.65 684.396 L1286.21 684.396 L1286.77 684.396 L1287.33 684.396 L1287.89 684.396 L1288.45 684.396 L1289 684.396 L1289.56 684.396 L1290.12 684.396 L1290.68 684.396 L1291.24 684.396 L1291.8 684.396 L1292.36 684.396 L1292.92 684.396 L1293.48 684.396 L1294.04 684.396 L1294.6 684.396 L1295.16 684.396 L1295.72 684.396 L1296.28 684.396 L1296.83 684.396 L1297.39 684.396 L1297.95 684.396 L1298.51 684.396 L1299.07 684.396 L1299.63 684.396 L1300.19 684.396 L1300.75 684.396 L1301.31 684.396 L1301.87 684.396 L1302.43 684.396 L1302.99 684.396 L1303.55 684.396 L1304.1 684.396 L1304.66 684.396 L1305.22 684.396 L1305.78 684.396 L1306.34 684.396 L1306.9 684.396 L1307.46 684.396 L1308.02 684.396 L1308.58 684.396 L1309.14 684.396 L1309.7 684.396 L1310.26 684.396 L1310.82 684.396 L1311.38 684.396 L1311.93 684.396 L1312.49 684.396 L1313.05 684.396 L1313.61 684.396 L1314.17 684.396 L1314.73 684.396 L1315.29 684.396 L1315.85 684.396 L1316.41 684.396 L1316.97 684.396 L1317.53 684.396 L1318.09 684.396 L1318.65 684.396 L1319.2 684.396 L1319.76 684.396 L1320.32 684.396 L1320.88 684.396 L1321.44 684.396 L1322 684.396 L1322.56 684.396 L1323.12 684.396 L1323.68 684.396 L1324.24 684.396 L1324.8 684.396 L1325.36 684.396 L1325.92 684.396 L1326.47 684.396 L1327.03 684.396 L1327.59 684.396 L1328.15 684.396 L1328.71 684.396 L1329.27 684.396 L1329.83 684.396 L1330.39 684.396 L1330.95 684.396 L1331.51 684.396 L1332.07 684.396 L1332.63 684.396 L1333.19 684.396 L1333.75 684.396 L1334.3 684.396 L1334.86 684.396 L1335.42 684.396 L1335.98 684.396 L1336.54 684.396 L1337.1 684.396 L1337.66 684.396 L1338.22 684.396 L1338.78 684.396 L1339.34 684.396 L1339.9 684.396 L1340.46 684.396 L1341.02 684.396 L1341.57 684.396 L1342.13 684.396 L1342.69 684.396 L1343.25 684.396 L1343.81 684.396 L1344.37 684.396 L1344.93 684.396 L1345.49 684.396 L1346.05 684.396 L1346.61 684.396 L1347.17 684.396 L1347.73 684.396 L1348.29 684.396 L1348.84 684.396 L1349.4 684.396 L1349.96 684.396 L1350.52 684.396 L1351.08 684.396 L1351.64 684.396 L1352.2 684.396 L1352.76 684.396 L1353.32 684.396 L1353.88 684.396 L1354.44 684.396 L1355 684.396 L1355.56 684.396 L1356.12 684.396 L1356.67 684.396 L1357.23 684.396 L1357.79 684.396 L1358.35 684.396 L1358.91 684.396 L1359.47 684.396 L1360.03 684.396 L1360.59 684.396 L1361.15 684.396 L1361.71 684.396 L1362.27 684.396 L1362.83 684.396 L1363.39 684.396 L1363.94 684.396 L1364.5 684.396 L1365.06 684.396 L1365.62 684.396 L1366.18 684.396 L1366.74 684.396 L1367.3 684.396 L1367.86 684.396 L1368.42 684.396 L1368.98 684.396 L1369.54 684.396 L1370.1 684.396 L1370.66 684.396 L1371.21 684.396 L1371.77 684.396 L1372.33 684.396 L1372.89 684.396 L1373.45 684.396 L1374.01 684.396 L1374.57 684.396 L1375.13 684.396 L1375.69 684.396 L1376.25 684.396 L1376.81 684.396 L1377.37 684.396 L1377.93 684.396 L1378.49 684.396 L1379.04 684.396 L1379.6 684.396 L1380.16 684.396 L1380.72 684.396 L1381.28 684.396 L1381.84 684.396 L1382.4 684.396 L1382.96 684.396 L1383.52 684.396 L1384.08 684.396 L1384.64 684.396 L1385.2 684.396 L1385.76 684.396 L1386.31 684.396 L1386.87 684.396 L1387.43 684.396 L1387.99 684.396 L1388.55 684.396 L1389.11 684.396 L1389.67 684.396 L1390.23 684.396 L1390.79 684.396 L1391.35 684.396 L1391.91 684.396 L1392.47 684.396 L1393.03 684.396 L1393.58 684.396 L1394.14 684.396 L1394.7 684.396 L1395.26 684.396 L1395.82 684.396 L1396.38 684.396 L1396.94 684.396 L1397.5 684.396 L1398.06 684.396 L1398.62 684.396 L1399.18 684.396 L1399.74 684.396 L1400.3 684.396 L1400.86 684.396 L1401.41 684.396 L1401.97 684.396 L1402.53 684.396 L1403.09 684.396 L1403.65 684.396 L1404.21 684.396 L1404.77 684.396 L1405.33 684.396 L1405.89 684.396 L1406.45 684.396 L1407.01 684.396 L1407.57 684.396 L1408.13 684.396 L1408.68 684.396 L1409.24 684.396 L1409.8 684.396 L1410.36 684.396 L1410.92 684.396 L1411.48 684.396 L1412.04 684.396 L1412.6 684.396 L1413.16 684.396 L1413.72 684.396 L1414.28 684.396 L1414.84 684.396 L1415.4 684.396 L1415.95 684.396 L1416.51 684.396 L1417.07 684.396 L1417.63 684.396 L1418.19 684.396 L1418.75 684.396 L1419.31 684.396 L1419.87 684.396 L1420.43 684.396 L1420.99 684.396 L1421.55 684.396 L1422.11 684.396 L1422.67 684.396 L1423.23 684.396 L1423.78 684.396 L1424.34 684.396 L1424.9 684.396 L1425.46 684.396 L1426.02 684.396 L1426.58 684.396 L1427.14 684.396 L1427.7 684.396 L1428.26 684.396 L1428.82 684.396 L1429.38 684.396 L1429.94 684.396 L1430.5 684.396 L1431.05 684.396 L1431.61 684.396 L1432.17 684.396 L1432.73 684.396 L1433.29 684.396 L1433.85 684.396 L1434.41 684.396 L1434.97 684.396 L1435.53 684.396 L1436.09 684.396 L1436.65 684.396 L1437.21 684.396 L1437.77 684.396 L1438.33 684.396 L1438.88 684.396 L1439.44 684.396 L1440 684.396 L1440.56 684.396 L1441.12 684.396 L1441.68 684.396 L1442.24 684.396 L1442.8 684.396 L1443.36 684.396 L1443.92 684.396 L1444.48 684.396 L1445.04 684.396 L1445.6 684.396 L1446.15 684.396 L1446.71 684.396 L1447.27 684.396 L1447.83 684.396 L1448.39 684.396 L1448.95 684.396 L1449.51 684.396 L1450.07 684.396 L1450.63 684.396 L1451.19 684.396 L1451.75 684.396 L1452.31 684.396 L1452.87 684.396 L1453.42 684.396 L1453.98 684.396 L1454.54 684.396 L1455.1 684.396 L1455.66 684.396 L1456.22 684.396 L1456.78 684.396 L1457.34 684.396 L1457.9 684.396 L1458.46 684.396 L1459.02 684.396 L1459.58 684.396 L1460.14 684.396 L1460.7 684.396 L1461.25 684.396 L1461.81 684.396 L1462.37 684.396 L1462.93 684.396 L1463.49 684.396 L1464.05 684.396 L1464.61 684.396 L1465.17 684.396 L1465.73 684.396 L1466.29 684.396 L1466.85 684.396 L1467.41 684.396 L1467.97 684.396 L1468.52 684.396 L1469.08 684.396 L1469.64 684.396 L1470.2 684.396 L1470.76 684.396 L1471.32 684.396 L1471.88 684.396 L1472.44 684.396 L1473 684.396 L1473.56 684.396 L1474.12 684.396 L1474.68 684.396 L1475.24 684.396 L1475.79 684.396 L1476.35 684.396 L1476.91 684.396 L1477.47 684.396 L1478.03 684.396 L1478.59 684.396 L1479.15 684.396 L1479.71 684.396 L1480.27 684.396 L1480.83 684.396 L1481.39 684.396 L1481.95 684.396 L1482.51 684.396 L1483.07 684.396 L1483.62 684.396 L1484.18 684.396 L1484.74 684.396 L1485.3 684.396 L1485.86 684.396 L1486.42 684.396 L1486.98 684.396 L1487.54 684.396 L1488.1 684.396 L1488.66 684.396 L1489.22 684.396 L1489.78 684.396 L1490.34 684.396 L1490.89 684.396 L1491.45 684.396 L1492.01 684.396 L1492.57 684.396 L1493.13 684.396 L1493.69 684.396 L1494.25 684.396 L1494.81 684.396 L1495.37 684.396 L1495.93 684.396 L1496.49 684.396 L1497.05 684.396 L1497.61 684.396 L1498.16 684.396 L1498.72 684.396 L1499.28 684.396 L1499.84 684.396 L1500.4 684.396 L1500.96 684.396 L1501.52 684.396 L1502.08 684.396 L1502.64 684.396 L1503.2 684.396 L1503.76 684.396 L1504.32 684.396 L1504.88 684.396 L1505.44 684.396 L1505.99 684.396 L1506.55 684.396 L1507.11 684.396 L1507.67 684.396 L1508.23 684.396 L1508.79 684.396 L1509.35 684.396 L1509.91 684.396 L1510.47 684.396 L1511.03 684.396 L1511.59 684.396 L1512.15 684.396 L1512.71 684.396 L1513.26 684.396 L1513.82 684.396 L1514.38 684.396 L1514.94 684.396 L1515.5 684.396 L1516.06 684.396 L1516.62 684.396 L1517.18 684.396 L1517.74 684.396 L1518.3 684.396 L1518.86 684.396 L1519.42 684.396 L1519.98 684.396 L1520.53 684.396 L1521.09 684.396 L1521.65 684.396 L1522.21 684.396 L1522.77 684.396 L1523.33 684.396 L1523.89 684.396 L1524.45 684.396 L1525.01 684.396 L1525.57 684.396 L1526.13 684.396 L1526.69 684.396 L1527.25 684.396 L1527.81 684.396 L1528.36 684.396 L1528.92 684.396 L1529.48 684.396 L1530.04 684.396 L1530.6 684.396 L1531.16 684.396 L1531.72 684.396 L1532.28 684.396 L1532.84 684.396 L1533.4 684.396 L1533.96 684.396 L1534.52 684.396 L1535.08 684.396 L1535.63 684.396 L1536.19 684.396 L1536.75 684.396 L1537.31 684.396 L1537.87 684.396 L1538.43 684.396 L1538.99 684.396 L1539.55 684.396 L1540.11 684.396 L1540.67 684.396 L1541.23 684.396 L1541.79 684.396 L1542.35 684.396 L1542.9 684.396 L1543.46 684.396 L1544.02 684.396 L1544.58 684.396 L1545.14 684.396 L1545.7 684.396 L1546.26 684.396 L1546.82 684.396 L1547.38 684.396 L1547.94 684.396 L1548.5 684.396 L1549.06 684.396 L1549.62 684.396 L1550.18 684.396 L1550.73 684.396 L1551.29 684.396 L1551.85 684.396 L1552.41 684.396 L1552.97 684.396 L1553.53 684.396 L1554.09 684.396 L1554.65 684.396 L1555.21 684.396 L1555.77 684.396 L1556.33 684.396 L1556.89 684.396 L1557.45 684.396 L1558 684.396 L1558.56 684.396 L1559.12 684.396 L1559.68 684.396 L1560.24 684.396 L1560.8 684.396 L1561.36 684.396 L1561.92 684.396 L1562.48 684.396 L1563.04 684.396 L1563.6 684.396 L1564.16 684.396 L1564.72 684.396 L1565.28 684.396 L1565.83 684.396 L1566.39 684.396 L1566.95 684.396 L1567.51 684.396 L1568.07 684.396 L1568.63 684.396 L1569.19 684.396 L1569.75 684.396 L1570.31 684.396 L1570.87 684.396 L1571.43 684.396 L1571.99 684.396 L1572.55 684.396 L1573.1 684.396 L1573.66 684.396 L1574.22 684.396 L1574.78 684.396 L1575.34 684.396 L1575.9 684.396 L1576.46 684.396 L1577.02 684.396 L1577.58 684.396 L1578.14 684.396 L1578.7 684.396 L1579.26 684.396 L1579.82 684.396 L1580.37 684.396 L1580.93 684.396 L1581.49 684.396 L1582.05 684.396 L1582.61 684.396 L1583.17 684.396 L1583.73 684.396 L1584.29 684.396 L1584.85 684.396 L1585.41 684.396 L1585.97 684.396 L1586.53 684.396 L1587.09 684.396 L1587.65 684.396 L1588.2 684.396 L1588.76 684.396 L1589.32 684.396 L1589.88 684.396 L1590.44 684.396 L1591 684.396 L1591.56 684.396 L1592.12 684.396 L1592.68 684.396 L1593.24 684.396 L1593.8 684.396 L1594.36 684.396 L1594.92 684.396 L1595.47 684.396 L1596.03 684.396 L1596.59 684.396 L1597.15 684.396 L1597.71 684.396 L1598.27 684.396 L1598.83 684.396 L1599.39 684.396 L1599.95 684.396 L1600.51 684.396 L1601.07 684.396 L1601.63 684.396 L1602.19 684.396 L1602.74 684.396 L1603.3 684.396 L1603.86 684.396 L1604.42 684.396 L1604.98 684.396 L1605.54 684.396 L1606.1 684.396 L1606.66 684.396 L1607.22 684.396 L1607.78 684.396 L1608.34 684.396 L1608.9 684.396 L1609.46 684.396 L1610.02 684.396 L1610.57 684.396 L1611.13 684.396 L1611.69 684.396 L1612.25 684.396 L1612.81 684.396 L1613.37 684.396 L1613.93 684.396 L1614.49 684.396 L1615.05 684.396 L1615.61 684.396 L1616.17 684.396 L1616.73 684.396 L1617.29 684.396 L1617.84 684.396 L1618.4 684.396 L1618.96 684.396 L1619.52 684.396 L1620.08 684.396 L1620.64 684.396 L1621.2 684.396 L1621.76 684.396 L1622.32 684.396 L1622.88 684.396 L1623.44 684.396 L1624 684.396 L1624.56 684.396 L1625.11 684.396 L1625.67 684.396 L1626.23 684.396 L1626.79 684.396 L1627.35 684.396 L1627.91 684.396 L1628.47 684.396 L1629.03 684.396 L1629.59 684.396 L1630.15 684.396 L1630.71 684.396 L1631.27 684.396 L1631.83 684.396 L1632.39 684.396 L1632.94 684.396 L1633.5 684.396 L1634.06 684.396 L1634.62 684.396 L1635.18 684.396 L1635.74 684.396 L1636.3 684.396 L1636.86 684.396 L1637.42 684.396 L1637.98 684.396 L1638.54 684.396 L1639.1 684.396 L1639.66 684.396 L1640.21 684.396 L1640.77 684.396 L1641.33 684.396 L1641.89 684.396 L1642.45 684.396 L1643.01 684.396 L1643.57 684.396 L1644.13 684.396 L1644.69 684.396 L1645.25 684.396 L1645.81 684.396 L1646.37 684.396 L1646.93 684.396 L1647.48 684.396 L1648.04 684.396 L1648.6 684.396 L1649.16 684.396 L1649.72 684.396 L1650.28 684.396 L1650.84 684.396 L1651.4 684.396 L1651.96 684.396 L1652.52 684.396 L1653.08 684.396 L1653.64 684.396 L1654.2 684.396 L1654.76 684.396 L1655.31 684.396 L1655.87 684.396 L1656.43 684.396 L1656.99 684.396 L1657.55 684.396 L1658.11 684.396 L1658.67 684.396 L1659.23 684.396 L1659.79 684.396 L1660.35 684.396 L1660.91 684.396 L1661.47 684.396 L1662.03 684.396 L1662.58 684.396 L1663.14 684.396 L1663.7 684.396 L1664.26 684.396 L1664.82 684.396 L1665.38 684.396 L1665.94 684.396 L1666.5 684.396 L1667.06 684.396 L1667.62 684.396 L1668.18 684.396 L1668.74 684.396 L1669.3 684.396 L1669.85 684.396 L1670.41 684.396 L1670.97 684.396 L1671.53 684.396 L1672.09 684.396 L1672.65 684.396 L1673.21 684.396 L1673.77 684.396 L1674.33 684.396 L1674.89 684.396 L1675.45 684.396 L1676.01 684.396 L1676.57 684.396 L1677.13 684.396 L1677.68 684.396 L1678.24 684.396 L1678.8 684.396 L1679.36 684.396 L1679.92 684.396 L1680.48 684.396 L1681.04 684.396 L1681.6 684.396 L1682.16 684.396 L1682.72 684.396 L1683.28 684.396 L1683.84 684.396 L1684.4 684.396 L1684.95 684.396 L1685.51 684.396 L1686.07 684.396 L1686.63 684.396 L1687.19 684.396 L1687.75 684.396 L1688.31 684.396 L1688.87 684.396 L1689.43 684.396 L1689.99 684.396 L1690.55 684.396 L1691.11 684.396 L1691.67 684.396 L1692.23 684.396 L1692.78 684.396 L1693.34 684.396 L1693.9 684.396 L1694.46 684.396 L1695.02 684.396 L1695.58 684.396 L1696.14 684.396 L1696.7 684.396 L1697.26 684.396 L1697.82 684.396 L1698.38 684.396 L1698.94 684.396 L1699.5 684.396 L1700.05 684.396 L1700.61 684.396 L1701.17 684.396 L1701.73 684.396 L1702.29 684.396 L1702.85 684.396 L1703.41 684.396 L1703.97 684.396 L1704.53 684.396 L1705.09 684.396 L1705.65 684.396 L1706.21 684.396 L1706.77 684.396 L1707.32 684.396 L1707.88 684.396 L1708.44 684.396 L1709 684.396 L1709.56 684.396 L1710.12 684.396 L1710.68 684.396 L1711.24 684.396 L1711.8 684.396 L1712.36 684.396 L1712.92 684.396 L1713.48 684.396 L1714.04 684.396 L1714.6 684.396 L1715.15 684.396 L1715.71 684.396 L1716.27 684.396 L1716.83 684.396 L1717.39 684.396 L1717.95 684.396 L1718.51 684.396 L1719.07 684.396 L1719.63 684.396 L1720.19 684.396 L1720.75 684.396 L1721.31 684.396 L1721.87 684.396 L1722.42 684.396 L1722.98 684.396 L1723.54 684.396 L1724.1 684.396 L1724.66 684.396 L1725.22 684.396 L1725.78 684.396 L1726.34 684.396 L1726.9 684.396 L1727.46 684.396 L1728.02 684.396 L1728.58 684.396 L1729.14 684.396 L1729.69 684.396 L1730.25 684.396 L1730.81 684.396 L1731.37 684.396 L1731.93 684.396 L1732.49 684.396 L1733.05 684.396 L1733.61 684.396 L1734.17 684.396 L1734.73 684.396 L1735.29 684.396 L1735.85 684.396 L1736.41 684.396 L1736.97 684.396 L1737.52 684.396 L1738.08 684.396 L1738.64 684.396 L1739.2 684.396 L1739.76 684.396 L1740.32 684.396 L1740.88 684.396 L1741.44 684.396 L1742 684.396 L1742.56 684.396 L1743.12 684.396 L1743.68 684.396 L1744.24 684.396 L1744.79 684.396 L1745.35 684.396 L1745.91 684.396 L1746.47 684.396 L1747.03 684.396 L1747.59 684.396 L1748.15 684.396 L1748.71 684.396 L1749.27 684.396 L1749.83 684.396 L1750.39 684.396 L1750.95 684.396 L1751.51 684.396 L1752.06 684.396 L1752.62 684.396 L1753.18 684.396 L1753.74 684.396 L1754.3 684.396 L1754.86 684.396 L1755.42 684.396 L1755.98 684.396 L1756.54 684.396 L1757.1 684.396 L1757.66 684.396 L1758.22 684.396 L1758.78 684.396 L1759.34 684.396 L1759.89 684.396 L1760.45 684.396 L1761.01 684.396 L1761.57 684.396 L1762.13 684.396 L1762.69 684.396 L1763.25 684.396 L1763.81 684.396 L1764.37 684.396 L1764.93 684.396 L1765.49 684.396 L1766.05 684.396 L1766.61 684.396 L1767.16 684.396 L1767.72 684.396 L1768.28 684.396 L1768.84 684.396 L1769.4 684.396 L1769.96 684.396 L1770.52 684.396 L1771.08 684.396 L1771.64 684.396 L1772.2 684.396 L1772.76 684.396 L1773.32 684.396 L1773.88 684.396 L1774.43 684.396 L1774.99 684.396 L1775.55 684.396 L1776.11 684.396 L1776.67 684.396 L1777.23 684.396 L1777.79 684.396 L1778.35 684.396 L1778.91 684.396 L1779.47 684.396 L1780.03 684.396 L1780.59 684.396 L1781.15 684.396 L1781.71 684.396 L1782.26 684.396 L1782.82 684.396 L1783.38 684.396 L1783.94 684.396 L1784.5 684.396 L1785.06 684.396 L1785.62 684.396 L1786.18 684.396 L1786.74 684.396 L1787.3 684.396 L1787.86 684.396 L1788.42 684.396 L1788.98 684.396 L1789.53 684.396 L1790.09 684.396 L1790.65 684.396 L1791.21 684.396 L1791.77 684.396 L1792.33 684.396 L1792.89 684.396 L1793.45 684.396 L1794.01 684.396 L1794.57 684.396 L1795.13 684.396 L1795.69 684.396 L1796.25 684.396 L1796.8 684.396 L1797.36 684.396 L1797.92 684.396 L1798.48 684.396 L1799.04 684.396 L1799.6 684.396 L1800.16 684.396 L1800.72 684.396 L1801.28 684.396 L1801.84 684.396 L1802.4 684.396 L1802.96 684.396 L1803.52 684.396 L1804.08 684.396 L1804.63 684.396 L1805.19 684.396 L1805.75 684.396 L1806.31 684.396 L1806.87 684.396 L1807.43 684.396 L1807.99 684.396 L1808.55 684.396 L1809.11 684.396 L1809.67 684.396 L1810.23 684.396 L1810.79 684.396 L1811.35 684.396 L1811.9 684.396 L1812.46 684.396 L1813.02 684.396 L1813.58 684.396 L1814.14 684.396 L1814.7 684.396 L1815.26 684.396 L1815.82 684.396 L1816.38 684.396 L1816.94 684.396 L1817.5 684.396 L1818.06 684.396 L1818.62 684.396 L1819.18 684.396 L1819.73 684.396 L1820.29 684.396 L1820.85 684.396 L1821.41 684.396 L1821.97 684.396 L1822.53 684.396 L1823.09 684.396 L1823.65 684.396 L1824.21 684.396 L1824.77 684.396 L1825.33 684.396 L1825.89 684.396 L1826.45 684.396 L1827 684.396 L1827.56 684.396 L1828.12 684.396 L1828.68 684.396 L1829.24 684.396 L1829.8 684.396 L1830.36 684.396 L1830.92 684.396 L1831.48 684.396 L1832.04 684.396 L1832.6 684.396 L1833.16 684.396 L1833.72 684.396 L1834.27 684.396 L1834.83 684.396 L1835.39 684.396 L1835.95 684.396 L1836.51 684.396 L1837.07 684.396 L1837.63 684.396 L1838.19 684.396 L1838.19 682.495 L1837.63 682.495 L1837.07 682.495 L1836.51 682.495 L1835.95 682.495 L1835.39 682.495 L1834.83 682.495 L1834.27 682.495 L1833.72 682.495 L1833.16 682.495 L1832.6 682.495 L1832.04 682.495 L1831.48 682.495 L1830.92 682.495 L1830.36 682.495 L1829.8 682.495 L1829.24 682.495 L1828.68 682.495 L1828.12 682.495 L1827.56 682.495 L1827 682.495 L1826.45 682.495 L1825.89 682.495 L1825.33 682.495 L1824.77 682.495 L1824.21 682.495 L1823.65 682.495 L1823.09 682.495 L1822.53 682.495 L1821.97 682.495 L1821.41 682.495 L1820.85 682.495 L1820.29 682.495 L1819.73 682.495 L1819.18 682.495 L1818.62 682.495 L1818.06 682.495 L1817.5 682.495 L1816.94 682.495 L1816.38 682.495 L1815.82 682.495 L1815.26 682.495 L1814.7 682.495 L1814.14 682.495 L1813.58 682.495 L1813.02 682.495 L1812.46 682.495 L1811.9 682.495 L1811.35 682.495 L1810.79 682.495 L1810.23 682.495 L1809.67 682.495 L1809.11 682.495 L1808.55 682.495 L1807.99 682.495 L1807.43 682.495 L1806.87 682.495 L1806.31 682.495 L1805.75 682.495 L1805.19 682.495 L1804.63 682.495 L1804.08 682.495 L1803.52 682.495 L1802.96 682.495 L1802.4 682.495 L1801.84 682.495 L1801.28 682.495 L1800.72 682.495 L1800.16 682.495 L1799.6 682.495 L1799.04 682.495 L1798.48 682.495 L1797.92 682.495 L1797.36 682.495 L1796.8 682.495 L1796.25 682.495 L1795.69 682.495 L1795.13 682.495 L1794.57 682.495 L1794.01 682.495 L1793.45 682.495 L1792.89 682.495 L1792.33 682.495 L1791.77 682.495 L1791.21 682.495 L1790.65 682.495 L1790.09 682.495 L1789.53 682.495 L1788.98 682.495 L1788.42 682.495 L1787.86 682.495 L1787.3 682.495 L1786.74 682.495 L1786.18 682.495 L1785.62 682.495 L1785.06 682.495 L1784.5 682.495 L1783.94 682.495 L1783.38 682.495 L1782.82 682.495 L1782.26 682.495 L1781.71 682.495 L1781.15 682.495 L1780.59 682.495 L1780.03 682.495 L1779.47 682.495 L1778.91 682.495 L1778.35 682.495 L1777.79 682.495 L1777.23 682.495 L1776.67 682.495 L1776.11 682.495 L1775.55 682.495 L1774.99 682.495 L1774.43 682.495 L1773.88 682.495 L1773.32 682.495 L1772.76 682.495 L1772.2 682.495 L1771.64 682.495 L1771.08 682.495 L1770.52 682.495 L1769.96 682.495 L1769.4 682.495 L1768.84 682.495 L1768.28 682.495 L1767.72 682.495 L1767.16 682.495 L1766.61 682.495 L1766.05 682.495 L1765.49 682.495 L1764.93 682.495 L1764.37 682.495 L1763.81 682.495 L1763.25 682.495 L1762.69 682.495 L1762.13 682.495 L1761.57 682.495 L1761.01 682.495 L1760.45 682.495 L1759.89 682.495 L1759.34 682.495 L1758.78 682.495 L1758.22 682.495 L1757.66 682.495 L1757.1 682.495 L1756.54 682.495 L1755.98 682.495 L1755.42 682.495 L1754.86 682.495 L1754.3 682.495 L1753.74 682.495 L1753.18 682.495 L1752.62 682.495 L1752.06 682.495 L1751.51 682.495 L1750.95 682.495 L1750.39 682.495 L1749.83 682.495 L1749.27 682.495 L1748.71 682.495 L1748.15 682.495 L1747.59 682.495 L1747.03 682.495 L1746.47 682.495 L1745.91 682.495 L1745.35 682.495 L1744.79 682.495 L1744.24 682.495 L1743.68 682.495 L1743.12 682.495 L1742.56 682.495 L1742 682.495 L1741.44 682.495 L1740.88 682.495 L1740.32 682.495 L1739.76 682.495 L1739.2 682.495 L1738.64 682.495 L1738.08 682.495 L1737.52 682.495 L1736.97 682.495 L1736.41 682.495 L1735.85 682.495 L1735.29 682.495 L1734.73 682.495 L1734.17 682.495 L1733.61 682.495 L1733.05 682.495 L1732.49 682.495 L1731.93 682.495 L1731.37 682.495 L1730.81 682.495 L1730.25 682.495 L1729.69 682.495 L1729.14 682.495 L1728.58 682.495 L1728.02 682.495 L1727.46 682.495 L1726.9 682.495 L1726.34 682.495 L1725.78 682.495 L1725.22 682.495 L1724.66 682.495 L1724.1 682.495 L1723.54 682.495 L1722.98 682.495 L1722.42 682.495 L1721.87 682.495 L1721.31 682.495 L1720.75 682.495 L1720.19 682.495 L1719.63 682.495 L1719.07 682.495 L1718.51 682.495 L1717.95 682.495 L1717.39 682.495 L1716.83 682.495 L1716.27 682.495 L1715.71 682.495 L1715.15 682.495 L1714.6 682.495 L1714.04 682.495 L1713.48 682.495 L1712.92 682.495 L1712.36 682.495 L1711.8 682.495 L1711.24 682.495 L1710.68 682.495 L1710.12 682.495 L1709.56 682.495 L1709 682.495 L1708.44 682.495 L1707.88 682.495 L1707.32 682.495 L1706.77 682.495 L1706.21 682.495 L1705.65 682.495 L1705.09 682.495 L1704.53 682.495 L1703.97 682.495 L1703.41 682.495 L1702.85 682.495 L1702.29 682.495 L1701.73 682.495 L1701.17 682.495 L1700.61 682.495 L1700.05 682.495 L1699.5 682.495 L1698.94 682.495 L1698.38 682.495 L1697.82 682.495 L1697.26 682.495 L1696.7 682.495 L1696.14 682.495 L1695.58 682.495 L1695.02 682.495 L1694.46 682.495 L1693.9 682.495 L1693.34 682.495 L1692.78 682.495 L1692.23 682.495 L1691.67 682.495 L1691.11 682.495 L1690.55 682.495 L1689.99 682.495 L1689.43 682.495 L1688.87 682.495 L1688.31 682.495 L1687.75 682.495 L1687.19 682.495 L1686.63 682.495 L1686.07 682.495 L1685.51 682.495 L1684.95 682.495 L1684.4 682.495 L1683.84 682.495 L1683.28 682.495 L1682.72 682.495 L1682.16 682.495 L1681.6 682.495 L1681.04 682.495 L1680.48 682.495 L1679.92 682.495 L1679.36 682.495 L1678.8 682.495 L1678.24 682.495 L1677.68 682.495 L1677.13 682.495 L1676.57 682.495 L1676.01 682.495 L1675.45 682.495 L1674.89 682.495 L1674.33 682.495 L1673.77 682.495 L1673.21 682.495 L1672.65 682.495 L1672.09 682.495 L1671.53 682.495 L1670.97 682.495 L1670.41 682.495 L1669.85 682.495 L1669.3 682.495 L1668.74 682.495 L1668.18 682.495 L1667.62 682.495 L1667.06 682.495 L1666.5 682.495 L1665.94 682.495 L1665.38 682.495 L1664.82 682.495 L1664.26 682.495 L1663.7 682.495 L1663.14 682.495 L1662.58 682.495 L1662.03 682.495 L1661.47 682.495 L1660.91 682.495 L1660.35 682.495 L1659.79 682.495 L1659.23 682.495 L1658.67 682.495 L1658.11 682.495 L1657.55 682.495 L1656.99 682.495 L1656.43 682.495 L1655.87 682.495 L1655.31 682.495 L1654.76 682.495 L1654.2 682.495 L1653.64 682.495 L1653.08 682.495 L1652.52 682.495 L1651.96 682.495 L1651.4 682.495 L1650.84 682.495 L1650.28 682.495 L1649.72 682.495 L1649.16 682.495 L1648.6 682.495 L1648.04 682.495 L1647.48 682.495 L1646.93 682.495 L1646.37 682.495 L1645.81 682.495 L1645.25 682.495 L1644.69 682.495 L1644.13 682.495 L1643.57 682.495 L1643.01 682.495 L1642.45 682.495 L1641.89 682.495 L1641.33 682.495 L1640.77 682.495 L1640.21 682.495 L1639.66 682.495 L1639.1 682.495 L1638.54 682.495 L1637.98 682.495 L1637.42 682.495 L1636.86 682.495 L1636.3 682.495 L1635.74 682.495 L1635.18 682.495 L1634.62 682.495 L1634.06 682.495 L1633.5 682.495 L1632.94 682.495 L1632.39 682.495 L1631.83 682.495 L1631.27 682.495 L1630.71 682.495 L1630.15 682.495 L1629.59 682.495 L1629.03 682.495 L1628.47 682.495 L1627.91 682.495 L1627.35 682.495 L1626.79 682.495 L1626.23 682.495 L1625.67 682.495 L1625.11 682.495 L1624.56 682.495 L1624 682.495 L1623.44 682.495 L1622.88 682.495 L1622.32 682.495 L1621.76 682.495 L1621.2 682.495 L1620.64 682.495 L1620.08 682.495 L1619.52 682.495 L1618.96 682.495 L1618.4 682.495 L1617.84 682.495 L1617.29 682.495 L1616.73 682.495 L1616.17 682.495 L1615.61 682.495 L1615.05 682.495 L1614.49 682.495 L1613.93 682.495 L1613.37 682.495 L1612.81 682.495 L1612.25 682.495 L1611.69 682.495 L1611.13 682.495 L1610.57 682.495 L1610.02 682.495 L1609.46 682.495 L1608.9 682.495 L1608.34 682.495 L1607.78 682.495 L1607.22 682.495 L1606.66 682.495 L1606.1 682.495 L1605.54 682.495 L1604.98 682.495 L1604.42 682.495 L1603.86 682.495 L1603.3 682.495 L1602.74 682.495 L1602.19 682.495 L1601.63 682.495 L1601.07 682.495 L1600.51 682.495 L1599.95 682.495 L1599.39 682.495 L1598.83 682.495 L1598.27 682.495 L1597.71 682.495 L1597.15 682.495 L1596.59 682.495 L1596.03 682.495 L1595.47 682.495 L1594.92 682.495 L1594.36 682.495 L1593.8 682.495 L1593.24 682.495 L1592.68 682.495 L1592.12 682.495 L1591.56 682.495 L1591 682.495 L1590.44 682.495 L1589.88 682.495 L1589.32 682.495 L1588.76 682.495 L1588.2 682.495 L1587.65 682.495 L1587.09 682.495 L1586.53 682.495 L1585.97 682.495 L1585.41 682.495 L1584.85 682.495 L1584.29 682.495 L1583.73 682.495 L1583.17 682.495 L1582.61 682.495 L1582.05 682.495 L1581.49 682.495 L1580.93 682.495 L1580.37 682.495 L1579.82 682.495 L1579.26 682.495 L1578.7 682.495 L1578.14 682.495 L1577.58 682.495 L1577.02 682.495 L1576.46 682.495 L1575.9 682.495 L1575.34 682.495 L1574.78 682.495 L1574.22 682.495 L1573.66 682.495 L1573.1 682.495 L1572.55 682.495 L1571.99 682.495 L1571.43 682.495 L1570.87 682.495 L1570.31 682.495 L1569.75 682.495 L1569.19 682.495 L1568.63 682.495 L1568.07 682.495 L1567.51 682.495 L1566.95 682.495 L1566.39 682.495 L1565.83 682.495 L1565.28 682.495 L1564.72 682.495 L1564.16 682.495 L1563.6 682.495 L1563.04 682.495 L1562.48 682.495 L1561.92 682.495 L1561.36 682.495 L1560.8 682.495 L1560.24 682.495 L1559.68 682.495 L1559.12 682.495 L1558.56 682.495 L1558 682.495 L1557.45 682.495 L1556.89 682.495 L1556.33 682.495 L1555.77 682.495 L1555.21 682.495 L1554.65 682.495 L1554.09 682.495 L1553.53 682.495 L1552.97 682.495 L1552.41 682.495 L1551.85 682.495 L1551.29 682.495 L1550.73 682.495 L1550.18 682.495 L1549.62 682.495 L1549.06 682.495 L1548.5 682.495 L1547.94 682.495 L1547.38 682.495 L1546.82 682.495 L1546.26 682.495 L1545.7 682.495 L1545.14 682.495 L1544.58 682.495 L1544.02 682.495 L1543.46 682.495 L1542.9 682.495 L1542.35 682.495 L1541.79 682.495 L1541.23 682.495 L1540.67 682.495 L1540.11 682.495 L1539.55 682.495 L1538.99 682.495 L1538.43 682.495 L1537.87 682.495 L1537.31 682.495 L1536.75 682.495 L1536.19 682.495 L1535.63 682.495 L1535.08 682.495 L1534.52 682.495 L1533.96 682.495 L1533.4 682.495 L1532.84 682.495 L1532.28 682.495 L1531.72 682.495 L1531.16 682.495 L1530.6 682.495 L1530.04 682.495 L1529.48 682.495 L1528.92 682.495 L1528.36 682.495 L1527.81 682.495 L1527.25 682.495 L1526.69 682.495 L1526.13 682.495 L1525.57 682.495 L1525.01 682.495 L1524.45 682.495 L1523.89 682.495 L1523.33 682.495 L1522.77 682.495 L1522.21 682.495 L1521.65 682.495 L1521.09 682.495 L1520.53 682.495 L1519.98 682.495 L1519.42 682.495 L1518.86 682.495 L1518.3 682.495 L1517.74 682.495 L1517.18 682.495 L1516.62 682.495 L1516.06 682.495 L1515.5 682.495 L1514.94 682.495 L1514.38 682.495 L1513.82 682.495 L1513.26 682.495 L1512.71 682.495 L1512.15 682.495 L1511.59 682.495 L1511.03 682.495 L1510.47 682.495 L1509.91 682.495 L1509.35 682.495 L1508.79 682.495 L1508.23 682.495 L1507.67 682.495 L1507.11 682.495 L1506.55 682.495 L1505.99 682.495 L1505.44 682.495 L1504.88 682.495 L1504.32 682.495 L1503.76 682.495 L1503.2 682.495 L1502.64 682.495 L1502.08 682.495 L1501.52 682.495 L1500.96 682.495 L1500.4 682.495 L1499.84 682.495 L1499.28 682.495 L1498.72 682.495 L1498.16 682.495 L1497.61 682.495 L1497.05 682.495 L1496.49 682.495 L1495.93 682.495 L1495.37 682.495 L1494.81 682.495 L1494.25 682.495 L1493.69 682.495 L1493.13 682.495 L1492.57 682.495 L1492.01 682.495 L1491.45 682.495 L1490.89 682.495 L1490.34 682.495 L1489.78 682.495 L1489.22 682.495 L1488.66 682.495 L1488.1 682.495 L1487.54 682.495 L1486.98 682.495 L1486.42 682.495 L1485.86 682.495 L1485.3 682.495 L1484.74 682.495 L1484.18 682.495 L1483.62 682.495 L1483.07 682.495 L1482.51 682.495 L1481.95 682.495 L1481.39 682.495 L1480.83 682.495 L1480.27 682.495 L1479.71 682.495 L1479.15 682.495 L1478.59 682.495 L1478.03 682.495 L1477.47 682.495 L1476.91 682.495 L1476.35 682.495 L1475.79 682.495 L1475.24 682.495 L1474.68 682.495 L1474.12 682.495 L1473.56 682.495 L1473 682.495 L1472.44 682.495 L1471.88 682.495 L1471.32 682.495 L1470.76 682.495 L1470.2 682.495 L1469.64 682.495 L1469.08 682.495 L1468.52 682.495 L1467.97 682.495 L1467.41 682.495 L1466.85 682.495 L1466.29 682.495 L1465.73 682.495 L1465.17 682.495 L1464.61 682.495 L1464.05 682.495 L1463.49 682.495 L1462.93 682.495 L1462.37 682.495 L1461.81 682.495 L1461.25 682.495 L1460.7 682.495 L1460.14 682.495 L1459.58 682.495 L1459.02 682.495 L1458.46 682.495 L1457.9 682.495 L1457.34 682.495 L1456.78 682.495 L1456.22 682.495 L1455.66 682.495 L1455.1 682.495 L1454.54 682.495 L1453.98 682.495 L1453.42 682.495 L1452.87 682.495 L1452.31 682.495 L1451.75 682.495 L1451.19 682.495 L1450.63 682.495 L1450.07 682.495 L1449.51 682.495 L1448.95 682.495 L1448.39 682.495 L1447.83 682.495 L1447.27 682.495 L1446.71 682.495 L1446.15 682.495 L1445.6 682.495 L1445.04 682.495 L1444.48 682.495 L1443.92 682.495 L1443.36 682.495 L1442.8 682.495 L1442.24 682.495 L1441.68 682.495 L1441.12 682.495 L1440.56 682.495 L1440 682.495 L1439.44 682.495 L1438.88 682.495 L1438.33 682.495 L1437.77 682.495 L1437.21 682.495 L1436.65 682.495 L1436.09 682.495 L1435.53 682.495 L1434.97 682.495 L1434.41 682.495 L1433.85 682.495 L1433.29 682.495 L1432.73 682.495 L1432.17 682.495 L1431.61 682.495 L1431.05 682.495 L1430.5 682.495 L1429.94 682.495 L1429.38 682.495 L1428.82 682.495 L1428.26 682.495 L1427.7 682.495 L1427.14 682.495 L1426.58 682.495 L1426.02 682.495 L1425.46 682.495 L1424.9 682.495 L1424.34 682.495 L1423.78 682.495 L1423.23 682.495 L1422.67 682.495 L1422.11 682.495 L1421.55 682.495 L1420.99 682.495 L1420.43 682.495 L1419.87 682.495 L1419.31 682.495 L1418.75 682.495 L1418.19 682.495 L1417.63 682.495 L1417.07 682.495 L1416.51 682.495 L1415.95 682.495 L1415.4 682.495 L1414.84 682.495 L1414.28 682.495 L1413.72 682.495 L1413.16 682.495 L1412.6 682.495 L1412.04 682.495 L1411.48 682.495 L1410.92 682.495 L1410.36 682.495 L1409.8 682.495 L1409.24 682.495 L1408.68 682.495 L1408.13 682.495 L1407.57 682.495 L1407.01 682.495 L1406.45 682.495 L1405.89 682.495 L1405.33 682.495 L1404.77 682.495 L1404.21 682.495 L1403.65 682.495 L1403.09 682.495 L1402.53 682.495 L1401.97 682.495 L1401.41 682.495 L1400.86 682.495 L1400.3 682.495 L1399.74 682.495 L1399.18 682.495 L1398.62 682.495 L1398.06 682.495 L1397.5 682.495 L1396.94 682.495 L1396.38 682.495 L1395.82 682.495 L1395.26 682.495 L1394.7 682.495 L1394.14 682.495 L1393.58 682.495 L1393.03 682.495 L1392.47 682.495 L1391.91 682.495 L1391.35 682.495 L1390.79 682.495 L1390.23 682.495 L1389.67 682.495 L1389.11 682.495 L1388.55 682.495 L1387.99 682.495 L1387.43 682.495 L1386.87 682.495 L1386.31 682.495 L1385.76 682.495 L1385.2 682.495 L1384.64 682.495 L1384.08 682.495 L1383.52 682.495 L1382.96 682.495 L1382.4 682.495 L1381.84 682.495 L1381.28 682.495 L1380.72 682.495 L1380.16 682.495 L1379.6 682.495 L1379.04 682.495 L1378.49 682.495 L1377.93 682.495 L1377.37 682.495 L1376.81 682.495 L1376.25 682.495 L1375.69 682.495 L1375.13 682.495 L1374.57 682.495 L1374.01 682.495 L1373.45 682.495 L1372.89 682.495 L1372.33 682.495 L1371.77 682.495 L1371.21 682.495 L1370.66 682.495 L1370.1 682.495 L1369.54 682.495 L1368.98 682.495 L1368.42 682.495 L1367.86 682.495 L1367.3 682.495 L1366.74 682.495 L1366.18 682.495 L1365.62 682.495 L1365.06 682.495 L1364.5 682.495 L1363.94 682.495 L1363.39 682.495 L1362.83 682.495 L1362.27 682.495 L1361.71 682.495 L1361.15 682.495 L1360.59 682.495 L1360.03 682.495 L1359.47 682.495 L1358.91 682.495 L1358.35 682.495 L1357.79 682.495 L1357.23 682.495 L1356.67 682.495 L1356.12 682.495 L1355.56 682.495 L1355 682.495 L1354.44 682.495 L1353.88 682.495 L1353.32 682.495 L1352.76 682.495 L1352.2 682.495 L1351.64 682.495 L1351.08 682.495 L1350.52 682.495 L1349.96 682.495 L1349.4 682.495 L1348.84 682.495 L1348.29 682.495 L1347.73 682.495 L1347.17 682.495 L1346.61 682.495 L1346.05 682.495 L1345.49 682.495 L1344.93 682.495 L1344.37 682.495 L1343.81 682.495 L1343.25 682.495 L1342.69 682.495 L1342.13 682.495 L1341.57 682.495 L1341.02 682.495 L1340.46 682.495 L1339.9 682.495 L1339.34 682.495 L1338.78 682.495 L1338.22 682.495 L1337.66 682.495 L1337.1 682.495 L1336.54 682.495 L1335.98 682.495 L1335.42 682.495 L1334.86 682.495 L1334.3 682.495 L1333.75 682.495 L1333.19 682.495 L1332.63 682.495 L1332.07 682.495 L1331.51 682.495 L1330.95 682.495 L1330.39 682.495 L1329.83 682.495 L1329.27 682.495 L1328.71 682.495 L1328.15 682.495 L1327.59 682.495 L1327.03 682.495 L1326.47 682.495 L1325.92 682.495 L1325.36 682.495 L1324.8 682.495 L1324.24 682.495 L1323.68 682.495 L1323.12 682.495 L1322.56 682.495 L1322 682.495 L1321.44 682.495 L1320.88 682.495 L1320.32 682.495 L1319.76 682.495 L1319.2 682.495 L1318.65 682.495 L1318.09 682.495 L1317.53 682.495 L1316.97 682.495 L1316.41 682.495 L1315.85 682.495 L1315.29 682.495 L1314.73 682.495 L1314.17 682.495 L1313.61 682.495 L1313.05 682.495 L1312.49 682.495 L1311.93 682.495 L1311.38 682.495 L1310.82 682.495 L1310.26 682.495 L1309.7 682.495 L1309.14 682.495 L1308.58 682.495 L1308.02 682.495 L1307.46 682.495 L1306.9 682.495 L1306.34 682.495 L1305.78 682.495 L1305.22 682.495 L1304.66 682.495 L1304.1 682.495 L1303.55 682.495 L1302.99 682.495 L1302.43 682.495 L1301.87 682.495 L1301.31 682.495 L1300.75 682.495 L1300.19 682.495 L1299.63 682.495 L1299.07 682.495 L1298.51 682.495 L1297.95 682.495 L1297.39 682.495 L1296.83 682.495 L1296.28 682.495 L1295.72 682.495 L1295.16 682.495 L1294.6 682.495 L1294.04 682.495 L1293.48 682.495 L1292.92 682.495 L1292.36 682.495 L1291.8 682.495 L1291.24 682.495 L1290.68 682.495 L1290.12 682.495 L1289.56 682.495 L1289 682.495 L1288.45 682.495 L1287.89 682.495 L1287.33 682.495 L1286.77 682.495 L1286.21 682.495 L1285.65 682.495 L1285.09 682.495 L1284.53 682.495 L1283.97 682.495 L1283.41 682.495 L1282.85 682.495 L1282.29 682.495 L1281.73 682.495 L1281.18 682.495 L1280.62 682.495 L1280.06 682.495 L1279.5 682.495 L1278.94 682.495 L1278.38 682.495 L1277.82 682.495 L1277.26 682.495 L1276.7 682.495 L1276.14 682.495 L1275.58 682.495 L1275.02 682.495 L1274.46 682.495 L1273.91 682.495 L1273.35 682.495 L1272.79 682.495 L1272.23 682.495 L1271.67 682.495 L1271.11 682.495 L1270.55 682.495 L1269.99 682.495 L1269.43 682.495 L1268.87 682.495 L1268.31 682.495 L1267.75 682.495 L1267.19 682.495 L1266.63 682.495 L1266.08 682.495 L1265.52 682.495 L1264.96 682.495 L1264.4 682.495 L1263.84 682.495 L1263.28 682.495 L1262.72 682.495 L1262.16 682.495 L1261.6 682.495 L1261.04 682.495 L1260.48 682.495 L1259.92 682.495 L1259.36 682.495 L1258.81 682.495 L1258.25 682.495 L1257.69 682.495 L1257.13 682.495 L1256.57 682.495 L1256.01 682.495 L1255.45 682.495 L1254.89 682.495 L1254.33 682.495 L1253.77 682.495 L1253.21 682.495 L1252.65 682.495 L1252.09 682.495 L1251.54 682.495 L1250.98 682.495 L1250.42 682.495 L1249.86 682.495 L1249.3 682.495 L1248.74 682.495 L1248.18 682.495 L1247.62 682.495 L1247.06 682.495 L1246.5 682.495 L1245.94 682.495 L1245.38 682.495 L1244.82 682.495 L1244.26 682.495 L1243.71 682.495 L1243.15 682.495 L1242.59 682.495 L1242.03 682.495 L1241.47 682.495 L1240.91 682.495 L1240.35 682.495 L1239.79 682.495 L1239.23 682.495 L1238.67 682.495 L1238.11 682.495 L1237.55 682.495 L1236.99 682.495 L1236.44 682.495 L1235.88 682.495 L1235.32 682.495 L1234.76 682.495 L1234.2 682.495 L1233.64 682.495 L1233.08 682.495 L1232.52 682.495 L1231.96 682.495 L1231.4 682.495 L1230.84 682.495 L1230.28 682.495 L1229.72 682.495 L1229.17 682.495 L1228.61 682.495 L1228.05 682.495 L1227.49 682.495 L1226.93 682.495 L1226.37 682.495 L1225.81 682.495 L1225.25 682.495 L1224.69 682.495 L1224.13 682.495 L1223.57 682.495 L1223.01 682.495 L1222.45 682.495 L1221.89 682.495 L1221.34 682.495 L1220.78 682.495 L1220.22 682.495 L1219.66 682.495 L1219.1 682.495 L1218.54 682.495 L1217.98 682.495 L1217.42 682.495 L1216.86 682.495 L1216.3 682.495 L1215.74 682.495 L1215.18 682.495 L1214.62 682.495 L1214.07 682.495 L1213.51 682.495 L1212.95 682.495 L1212.39 682.495 L1211.83 682.495 L1211.27 682.495 L1210.71 682.495 L1210.15 682.495 L1209.59 682.495 L1209.03 682.495 L1208.47 682.495 L1207.91 682.495 L1207.35 682.495 L1206.8 682.495 L1206.24 682.495 L1205.68 682.495 L1205.12 682.495 L1204.56 682.495 L1204 682.495 L1203.44 682.495 L1202.88 682.495 L1202.32 682.495 L1201.76 682.495 L1201.2 682.495 L1200.64 682.495 L1200.08 682.495 L1199.52 682.495 L1198.97 682.495 L1198.41 682.495 L1197.85 682.495 L1197.29 682.495 L1196.73 682.495 L1196.17 682.495 L1195.61 682.495 L1195.05 682.495 L1194.49 682.495 L1193.93 682.495 L1193.37 682.495 L1192.81 682.495 L1192.25 682.495 L1191.7 682.495 L1191.14 682.495 L1190.58 682.495 L1190.02 682.495 L1189.46 682.495 L1188.9 682.495 L1188.34 682.495 L1187.78 682.495 L1187.22 682.495 L1186.66 682.495 L1186.1 682.495 L1185.54 682.495 L1184.98 682.495 L1184.43 682.495 L1183.87 682.495 L1183.31 682.495 L1182.75 682.495 L1182.19 682.495 L1181.63 682.495 L1181.07 682.495 L1180.51 682.495 L1179.95 682.495 L1179.39 682.495 L1178.83 682.495 L1178.27 682.495 L1177.71 682.495 L1177.15 682.495 L1176.6 682.495 L1176.04 682.495 L1175.48 682.495 L1174.92 682.495 L1174.36 682.495 L1173.8 682.495 L1173.24 682.495 L1172.68 682.495 L1172.12 682.495 L1171.56 682.495 L1171 682.495 L1170.44 682.495 L1169.88 682.495 L1169.33 682.495 L1168.77 682.495 L1168.21 682.495 L1167.65 682.495 L1167.09 682.495 L1166.53 682.495 L1165.97 682.495 L1165.41 682.495 L1164.85 682.495 L1164.29 682.495 L1163.73 682.495 L1163.17 682.495 L1162.61 682.495 L1162.05 682.495 L1161.5 682.495 L1160.94 682.495 L1160.38 682.495 L1159.82 682.495 L1159.26 682.495 L1158.7 682.495 L1158.14 682.495 L1157.58 682.495 L1157.02 682.495 L1156.46 682.495 L1155.9 682.495 L1155.34 682.495 L1154.78 682.495 L1154.23 682.495 L1153.67 682.495 L1153.11 682.495 L1152.55 682.495 L1151.99 682.495 L1151.43 682.495 L1150.87 682.495 L1150.31 682.495 L1149.75 682.495 L1149.19 682.495 L1148.63 682.495 L1148.07 682.495 L1147.51 682.495 L1146.96 682.495 L1146.4 682.495 L1145.84 682.495 L1145.28 682.495 L1144.72 682.495 L1144.16 682.495 L1143.6 682.495 L1143.04 682.495 L1142.48 682.495 L1141.92 682.495 L1141.36 682.495 L1140.8 682.495 L1140.24 682.495 L1139.68 682.495 L1139.13 682.495 L1138.57 682.495 L1138.01 682.495 L1137.45 682.495 L1136.89 682.495 L1136.33 682.495 L1135.77 682.495 L1135.21 682.495 L1134.65 682.495 L1134.09 682.495 L1133.53 682.495 L1132.97 682.495 L1132.41 682.495 L1131.86 682.495 L1131.3 682.495 L1130.74 682.495 L1130.18 682.495 L1129.62 682.495 L1129.06 682.495 L1128.5 682.495 L1127.94 682.495 L1127.38 682.495 L1126.82 682.495 L1126.26 682.495 L1125.7 682.495 L1125.14 682.495 L1124.59 682.495 L1124.03 682.495 L1123.47 682.495 L1122.91 682.495 L1122.35 682.495 L1121.79 682.495 L1121.23 682.495 L1120.67 682.495 L1120.11 682.495 L1119.55 682.495 L1118.99 682.495 L1118.43 682.495 L1117.87 682.495 L1117.31 682.495 L1116.76 682.495 L1116.2 682.495 L1115.64 682.495 L1115.08 682.495 L1114.52 682.495 L1113.96 682.495 L1113.4 682.495 L1112.84 682.495 L1112.28 682.495 L1111.72 682.495 L1111.16 682.495 L1110.6 682.495 L1110.04 682.495 L1109.49 682.495 L1108.93 682.495 L1108.37 682.495 L1107.81 682.495 L1107.25 682.495 L1106.69 682.495 L1106.13 682.495 L1105.57 682.495 L1105.01 682.495 L1104.45 682.495 L1103.89 682.495 L1103.33 682.495 L1102.77 682.495 L1102.22 682.495 L1101.66 682.495 L1101.1 682.495 L1100.54 682.495 L1099.98 682.495 L1099.42 682.495 L1098.86 682.495 L1098.3 682.495 L1097.74 682.495 L1097.18 682.495 L1096.62 682.495 L1096.06 682.495 L1095.5 682.495 L1094.94 682.495 L1094.39 682.495 L1093.83 682.495 L1093.27 682.495 L1092.71 682.495 L1092.15 682.495 L1091.59 682.495 L1091.03 682.495 L1090.47 682.495 L1089.91 682.495 L1089.35 682.495 L1088.79 682.495 L1088.23 682.495 L1087.67 682.495 L1087.12 682.495 L1086.56 682.495 L1086 682.495 L1085.44 682.495 L1084.88 682.495 L1084.32 682.495 L1083.76 682.495 L1083.2 682.495 L1082.64 682.495 L1082.08 682.495 L1081.52 682.495 L1080.96 682.495 L1080.4 682.495 L1079.85 682.495 L1079.29 682.495 L1078.73 682.495 L1078.17 682.495 L1077.61 682.495 L1077.05 682.495 L1076.49 682.495 L1075.93 682.495 L1075.37 682.495 L1074.81 682.495 L1074.25 682.495 L1073.69 682.495 L1073.13 682.495 L1072.57 682.495 L1072.02 682.495 L1071.46 682.495 L1070.9 682.495 L1070.34 682.495 L1069.78 682.495 L1069.22 682.495 L1068.66 682.495 L1068.1 682.495 L1067.54 682.495 L1066.98 682.495 L1066.42 682.495 L1065.86 682.495 L1065.3 682.495 L1064.75 682.495 L1064.19 682.495 L1063.63 682.495 L1063.07 682.495 L1062.51 682.495 L1061.95 682.495 L1061.39 682.495 L1060.83 682.495 L1060.27 682.495 L1059.71 682.495 L1059.15 682.495 L1058.59 682.495 L1058.03 682.495 L1057.48 682.495 L1056.92 682.495 L1056.36 682.495 L1055.8 682.495 L1055.24 682.495 L1054.68 682.495 L1054.12 682.495 L1053.56 682.495 L1053 682.495 L1052.44 682.495 L1051.88 682.495 L1051.32 682.495 L1050.76 682.495 L1050.2 682.495 L1049.65 682.495 L1049.09 682.495 L1048.53 682.495 L1047.97 682.495 L1047.41 682.495 L1046.85 682.495 L1046.29 682.495 L1045.73 682.495 L1045.17 682.495 L1044.61 682.495 L1044.05 682.495 L1043.49 682.495 L1042.93 682.495 L1042.38 682.495 L1041.82 682.495 L1041.26 682.495 L1040.7 682.495 L1040.14 682.495 L1039.58 682.495 L1039.02 682.495 L1038.46 682.495 L1037.9 682.495 L1037.34 682.495 L1036.78 682.495 L1036.22 682.495 L1035.66 682.495 L1035.1 682.495 L1034.55 682.495 L1033.99 682.495 L1033.43 682.495 L1032.87 682.495 L1032.31 682.495 L1031.75 682.495 L1031.19 682.495 L1030.63 682.495 L1030.07 682.495 L1029.51 682.495 L1028.95 682.495 L1028.39 682.495 L1027.83 682.495 L1027.28 682.495 L1026.72 682.495 L1026.16 682.495 L1025.6 682.495 L1025.04 682.495 L1024.48 682.495 L1023.92 682.495 L1023.36 682.495 L1022.8 682.495 L1022.24 682.495 L1021.68 682.495 L1021.12 682.495 L1020.56 682.495 L1020.01 682.495 L1019.45 682.495 L1018.89 682.495 L1018.33 682.495 L1017.77 682.495 L1017.21 682.495 L1016.65 682.495 L1016.09 682.495 L1015.53 682.495 L1014.97 682.495 L1014.41 682.495 L1013.85 682.495 L1013.29 682.495 L1012.73 682.495 L1012.18 682.495 L1011.62 682.495 L1011.06 682.495 L1010.5 682.495 L1009.94 682.495 L1009.38 682.495 L1008.82 682.495 L1008.26 682.495 L1007.7 682.495 L1007.14 682.495 L1006.58 682.495 L1006.02 682.495 L1005.46 682.495 L1004.91 682.495 L1004.35 682.495 L1003.79 682.495 L1003.23 682.495 L1002.67 682.495 L1002.11 682.495 L1001.55 682.495 L1000.99 682.495 L1000.43 682.495 L999.872 682.495 L999.313 682.495 L998.754 682.495 L998.194 682.495 L997.635 682.495 L997.076 682.495 L996.517 682.495 L995.957 682.495 L995.398 682.495 L994.839 682.495 L994.28 682.495 L993.72 682.495 L993.161 682.495 L992.602 682.495 L992.043 682.495 L991.483 682.495 L990.924 682.495 L990.365 682.495 L989.806 682.495 L989.246 682.495 L988.687 682.495 L988.128 682.495 L987.569 682.495 L987.009 682.495 L986.45 682.495 L985.891 682.495 L985.332 682.495 L984.772 682.495 L984.213 682.495 L983.654 682.495 L983.095 682.495 L982.535 682.495 L981.976 682.495 L981.417 682.495 L980.858 682.495 L980.298 682.495 L979.739 682.495 L979.18 682.495 L978.621 682.495 L978.061 682.495 L977.502 682.495 L976.943 682.495 L976.384 682.495 L975.824 682.495 L975.265 682.495 L974.706 682.495 L974.147 682.495 L973.587 682.495 L973.028 682.495 L972.469 682.495 L971.91 682.495 L971.35 682.495 L970.791 682.495 L970.232 682.495 L969.673 682.495 L969.113 682.495 L968.554 682.495 L967.995 682.495 L967.436 682.495 L966.876 682.495 L966.317 682.495 L965.758 682.495 L965.199 682.495 L964.639 682.495 L964.08 682.495 L963.521 682.495 L962.962 682.495 L962.402 682.495 L961.843 682.495 L961.284 682.495 L960.725 682.495 L960.165 682.495 L959.606 682.495 L959.047 682.495 L958.488 682.495 L957.928 682.495 L957.369 682.495 L956.81 682.495 L956.251 682.495 L955.691 682.495 L955.132 682.495 L954.573 682.495 L954.014 682.495 L953.454 682.495 L952.895 682.495 L952.336 682.495 L951.777 682.495 L951.217 682.495 L950.658 682.495 L950.099 682.495 L949.54 682.495 L948.98 682.495 L948.421 682.495 L947.862 682.495 L947.303 682.495 L946.743 682.495 L946.184 682.495 L945.625 682.495 L945.066 682.495 L944.506 682.495 L943.947 682.495 L943.388 682.495 L942.829 682.495 L942.269 682.495 L941.71 682.495 L941.151 682.495 L940.592 682.495 L940.032 682.495 L939.473 682.495 L938.914 682.495 L938.355 682.495 L937.795 682.495 L937.236 682.495 L936.677 682.495 L936.118 682.495 L935.558 682.495 L934.999 682.495 L934.44 682.495 L933.881 682.495 L933.321 682.495 L932.762 682.495 L932.203 682.495 L931.644 682.495 L931.084 682.495 L930.525 682.495 L929.966 682.495 L929.406 682.495 L928.847 682.495 L928.288 682.495 L927.729 682.495 L927.169 682.495 L926.61 682.495 L926.051 682.495 L925.492 682.495 L924.932 682.495 L924.373 682.495 L923.814 682.495 L923.255 682.495 L922.695 682.495 L922.136 682.495 L921.577 682.495 L921.018 682.495 L920.458 682.495 L919.899 682.495 L919.34 682.495 L918.781 682.495 L918.221 682.495 L917.662 682.495 L917.103 682.495 L916.544 682.495 L915.984 682.495 L915.425 682.495 L914.866 682.495 L914.307 682.495 L913.747 682.495 L913.188 682.495 L912.629 682.495 L912.07 682.495 L911.51 682.495 L910.951 682.495 L910.392 682.495 L909.833 682.495 L909.273 682.495 L908.714 682.495 L908.155 682.495 L907.596 682.495 L907.036 682.495 L906.477 682.495 L905.918 682.495 L905.359 682.495 L904.799 682.495 L904.24 682.495 L903.681 682.495 L903.122 682.495 L902.562 682.495 L902.003 682.495 L901.444 682.495 L900.885 682.495 L900.325 682.495 L899.766 682.495 L899.207 682.495 L898.648 682.495 L898.088 682.495 L897.529 682.495 L896.97 682.495 L896.411 682.495 L895.851 682.495 L895.292 682.495 L894.733 682.495 L894.174 682.495 L893.614 682.495 L893.055 682.495 L892.496 682.495 L891.937 682.495 L891.377 682.495 L890.818 682.495 L890.259 682.495 L889.7 682.495 L889.14 682.495 L888.581 682.495 L888.022 682.495 L887.463 682.495 L886.903 682.495 L886.344 682.495 L885.785 682.495 L885.226 682.495 L884.666 682.495 L884.107 682.495 L883.548 682.495 L882.989 682.495 L882.429 682.495 L881.87 682.495 L881.311 682.495 L880.752 682.495 L880.192 682.495 L879.633 682.495 L879.074 682.495 L878.515 682.495 L877.955 682.495 L877.396 682.495 L876.837 682.495 L876.278 682.495 L875.718 682.495 L875.159 682.495 L874.6 682.495 L874.041 682.495 L873.481 682.495 L872.922 682.495 L872.363 682.495 L871.804 682.495 L871.244 682.495 L870.685 682.495 L870.126 682.495 L869.567 682.495 L869.007 682.495 L868.448 682.495 L867.889 682.495 L867.33 682.495 L866.77 682.495 L866.211 682.495 L865.652 682.495 L865.093 682.495 L864.533 682.495 L863.974 682.495 L863.415 682.495 L862.856 682.495 L862.296 682.495 L861.737 682.495 L861.178 682.495 L860.619 682.495 L860.059 682.495 L859.5 682.495 L858.941 682.495 L858.382 682.495 L857.822 682.495 L857.263 682.495 L856.704 682.495 L856.145 682.495 L855.585 682.495 L855.026 682.495 L854.467 682.495 L853.908 682.495 L853.348 682.495 L852.789 682.495 L852.23 682.495 L851.671 682.495 L851.111 682.495 L850.552 682.495 L849.993 682.495 L849.434 682.495 L848.874 682.495 L848.315 682.495 L847.756 682.495 L847.197 682.495 L846.637 682.495 L846.078 682.495 L845.519 682.495 L844.96 682.495 L844.4 682.495 L843.841 682.495 L843.282 682.495 L842.723 682.495 L842.163 682.495 L841.604 682.495 L841.045 682.495 L840.486 682.495 L839.926 682.495 L839.367 682.495 L838.808 682.495 L838.249 682.495 L837.689 682.495 L837.13 682.495 L836.571 682.495 L836.012 682.495 L835.452 682.495 L834.893 682.495 L834.334 682.495 L833.775 682.495 L833.215 682.495 L832.656 682.495 L832.097 682.495 L831.538 682.495 L830.978 682.495 L830.419 682.495 L829.86 682.495 L829.301 682.495 L828.741 682.495 L828.182 682.495 L827.623 682.495 L827.064 682.495 L826.504 682.495 L825.945 682.495 L825.386 682.495 L824.827 682.495 L824.267 682.495 L823.708 682.495 L823.149 682.495 L822.59 682.495 L822.03 682.495 L821.471 682.495 L820.912 682.495 L820.353 682.495 L819.793 682.495 L819.234 682.495 L818.675 682.495 L818.116 682.495 L817.556 682.495 L816.997 682.495 L816.438 682.495 L815.879 682.495 L815.319 682.495 L814.76 682.495 L814.201 682.495 L813.642 682.495 L813.082 682.495 L812.523 682.495 L811.964 682.495 L811.405 682.495 L810.845 682.495 L810.286 682.495 L809.727 682.495 L809.168 682.495 L808.608 682.495 L808.049 682.495 L807.49 682.495 L806.931 682.495 L806.371 682.495 L805.812 682.495 L805.253 682.495 L804.693 682.495 L804.134 682.495 L803.575 682.495 L803.016 682.495 L802.456 682.495 L801.897 682.495 L801.338 682.495 L800.779 682.495 L800.219 682.495 L799.66 682.495 L799.101 682.495 L798.542 682.495 L797.982 682.495 L797.423 682.495 L796.864 682.495 L796.305 682.495 L795.745 682.495 L795.186 682.495 L794.627 682.495 L794.068 682.495 L793.508 682.495 L792.949 682.495 L792.39 682.495 L791.831 682.495 L791.271 682.495 L790.712 682.495 L790.153 682.495 L789.594 682.495 L789.034 682.495 L788.475 682.495 L787.916 682.495 L787.357 682.495 L786.797 682.495 L786.238 682.495 L785.679 682.495 L785.12 682.495 L784.56 682.495 L784.001 682.495 L783.442 682.495 L782.883 682.495 L782.323 682.495 L781.764 682.495 L781.205 682.495 L780.646 682.495 L780.086 682.495 L779.527 682.495 L778.968 682.495 L778.409 682.495 L777.849 682.495 L777.29 682.495 L776.731 682.495 L776.172 682.495 L775.612 682.495 L775.053 682.495 L774.494 682.495 L773.935 682.495 L773.375 682.495 L772.816 682.495 L772.257 682.495 L771.698 682.495 L771.138 682.495 L770.579 682.495 L770.02 682.495 L769.461 682.495 L768.901 682.495 L768.342 682.495 L767.783 682.495 L767.224 682.495 L766.664 682.495 L766.105 682.495 L765.546 682.495 L764.987 682.495 L764.427 682.495 L763.868 682.495 L763.309 682.495 L762.75 682.495 L762.19 682.495 L761.631 682.495 L761.072 682.495 L760.513 682.495 L759.953 682.495 L759.394 682.495 L758.835 682.495 L758.276 682.495 L757.716 682.495 L757.157 682.495 L756.598 682.495 L756.039 682.495 L755.479 682.495 L754.92 682.495 L754.361 682.495 L753.802 682.495 L753.242 682.495 L752.683 682.495 L752.124 682.495 L751.565 682.495 L751.005 682.495 L750.446 682.495 L749.887 682.495 L749.328 682.495 L748.768 682.495 L748.209 682.495 L747.65 682.495 L747.091 682.495 L746.531 682.495 L745.972 682.495 L745.413 682.495 L744.854 682.495 L744.294 682.495 L743.735 682.495 L743.176 682.495 L742.617 682.495 L742.057 682.495 L741.498 682.495 L740.939 682.495 L740.38 682.495 L739.82 682.495 L739.261 682.495 L738.702 682.495 L738.143 682.495 L737.583 682.495 L737.024 682.495 L736.465 682.495 L735.906 682.495 L735.346 682.495 L734.787 682.495 L734.228 682.495 L733.669 682.495 L733.109 682.495 L732.55 682.495 L731.991 682.495 L731.432 682.495 L730.872 682.495 L730.313 682.495 L729.754 682.495 L729.195 682.495 L728.635 682.495 L728.076 682.495 L727.517 682.495 L726.958 682.495 L726.398 682.495 L725.839 682.495 L725.28 682.495 L724.721 682.495 L724.161 682.495 L723.602 682.495 L723.043 682.495 L722.484 682.495 L721.924 682.495 L721.365 682.495 L720.806 682.495 L720.247 682.495  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.426 720.806,683.426 721.365,683.426 721.924,683.426 722.484,683.426 723.043,683.426 723.602,683.426 724.161,683.426 724.721,683.426 725.28,683.426 725.839,683.426 726.398,683.426 726.958,683.426 727.517,683.426 728.076,683.426 728.635,683.426 729.195,683.426 729.754,683.426 730.313,683.426 730.872,683.426 731.432,683.426 731.991,683.426 732.55,683.426 733.109,683.426 733.669,683.426 734.228,683.426 734.787,683.426 735.346,683.426 735.906,683.426 736.465,683.426 737.024,683.426 737.583,683.426 738.143,683.426 738.702,683.426 739.261,683.426 739.82,683.426 740.38,683.426 740.939,683.426 741.498,683.426 742.057,683.426 742.617,683.426 743.176,683.426 743.735,683.426 744.294,683.426 744.854,683.426 745.413,683.426 745.972,683.426 746.531,683.426 747.091,683.426 747.65,683.426 748.209,683.426 748.768,683.426 749.328,683.426 749.887,683.426 750.446,683.426 751.005,683.426 751.565,683.426 752.124,683.426 752.683,683.426 753.242,683.426 753.802,683.426 754.361,683.426 754.92,683.426 755.479,683.426 756.039,683.426 756.598,683.426 757.157,683.426 757.716,683.426 758.276,683.426 758.835,683.426 759.394,683.426 759.953,683.426 760.513,683.426 761.072,683.426 761.631,683.426 762.19,683.426 762.75,683.426 763.309,683.426 763.868,683.426 764.427,683.426 764.987,683.426 765.546,683.426 766.105,683.426 766.664,683.426 767.224,683.426 767.783,683.426 768.342,683.426 768.901,683.426 769.461,683.426 770.02,683.426 770.579,683.426 771.138,683.426 771.698,683.426 772.257,683.426 772.816,683.426 773.375,683.426 773.935,683.426 774.494,683.426 775.053,683.426 775.612,683.426 776.172,683.426 776.731,683.426 777.29,683.426 777.849,683.426 778.409,683.426 778.968,683.426 779.527,683.426 780.086,683.426 780.646,683.426 781.205,683.426 781.764,683.426 782.323,683.426 782.883,683.426 783.442,683.426 784.001,683.426 784.56,683.426 785.12,683.426 785.679,683.426 786.238,683.426 786.797,683.426 787.357,683.426 787.916,683.426 788.475,683.426 789.034,683.426 789.594,683.426 790.153,683.426 790.712,683.426 791.271,683.426 791.831,683.426 792.39,683.426 792.949,683.426 793.508,683.426 794.068,683.426 794.627,683.426 795.186,683.426 795.745,683.426 796.305,683.426 796.864,683.426 797.423,683.426 797.982,683.426 798.542,683.426 799.101,683.426 799.66,683.426 800.219,683.426 800.779,683.426 801.338,683.426 801.897,683.426 802.456,683.426 803.016,683.426 803.575,683.426 804.134,683.426 804.693,683.426 805.253,683.426 805.812,683.426 806.371,683.426 806.931,683.426 807.49,683.426 808.049,683.426 808.608,683.426 809.168,683.426 809.727,683.426 810.286,683.426 810.845,683.426 811.405,683.426 811.964,683.426 812.523,683.426 813.082,683.426 813.642,683.426 814.201,683.426 814.76,683.426 815.319,683.426 815.879,683.426 816.438,683.426 816.997,683.426 817.556,683.426 818.116,683.426 818.675,683.426 819.234,683.426 819.793,683.426 820.353,683.426 820.912,683.426 821.471,683.426 822.03,683.426 822.59,683.426 823.149,683.426 823.708,683.426 824.267,683.426 824.827,683.426 825.386,683.426 825.945,683.426 826.504,683.426 827.064,683.426 827.623,683.426 828.182,683.426 828.741,683.426 829.301,683.426 829.86,683.426 830.419,683.426 830.978,683.426 831.538,683.426 832.097,683.426 832.656,683.426 833.215,683.426 833.775,683.426 834.334,683.426 834.893,683.426 835.452,683.426 836.012,683.426 836.571,683.426 837.13,683.426 837.689,683.426 838.249,683.426 838.808,683.426 839.367,683.426 839.926,683.426 840.486,683.426 841.045,683.426 841.604,683.426 842.163,683.426 842.723,683.426 843.282,683.426 843.841,683.426 844.4,683.426 844.96,683.426 845.519,683.426 846.078,683.426 846.637,683.426 847.197,683.426 847.756,683.426 848.315,683.426 848.874,683.426 849.434,683.426 849.993,683.426 850.552,683.426 851.111,683.426 851.671,683.426 852.23,683.426 852.789,683.426 853.348,683.426 853.908,683.426 854.467,683.426 855.026,683.426 855.585,683.426 856.145,683.426 856.704,683.426 857.263,683.426 857.822,683.426 858.382,683.426 858.941,683.426 859.5,683.426 860.059,683.426 860.619,683.426 861.178,683.426 861.737,683.426 862.296,683.426 862.856,683.426 863.415,683.426 863.974,683.426 864.533,683.426 865.093,683.426 865.652,683.426 866.211,683.426 866.77,683.426 867.33,683.426 867.889,683.426 868.448,683.426 869.007,683.426 869.567,683.426 870.126,683.426 870.685,683.426 871.244,683.426 871.804,683.426 872.363,683.426 872.922,683.426 873.481,683.426 874.041,683.426 874.6,683.426 875.159,683.426 875.718,683.426 876.278,683.426 876.837,683.426 877.396,683.426 877.955,683.426 878.515,683.426 879.074,683.426 879.633,683.426 880.192,683.426 880.752,683.426 881.311,683.426 881.87,683.426 882.429,683.426 882.989,683.426 883.548,683.426 884.107,683.426 884.666,683.426 885.226,683.426 885.785,683.426 886.344,683.426 886.903,683.426 887.463,683.426 888.022,683.426 888.581,683.426 889.14,683.426 889.7,683.426 890.259,683.426 890.818,683.426 891.377,683.426 891.937,683.426 892.496,683.426 893.055,683.426 893.614,683.426 894.174,683.426 894.733,683.426 895.292,683.426 895.851,683.426 896.411,683.426 896.97,683.426 897.529,683.426 898.088,683.426 898.648,683.426 899.207,683.426 899.766,683.426 900.325,683.426 900.885,683.426 901.444,683.426 902.003,683.426 902.562,683.426 903.122,683.426 903.681,683.426 904.24,683.426 904.799,683.426 905.359,683.426 905.918,683.426 906.477,683.426 907.036,683.426 907.596,683.426 908.155,683.426 908.714,683.426 909.273,683.426 909.833,683.426 910.392,683.426 910.951,683.426 911.51,683.426 912.07,683.426 912.629,683.426 913.188,683.426 913.747,683.426 914.307,683.426 914.866,683.426 915.425,683.426 915.984,683.426 916.544,683.426 917.103,683.426 917.662,683.426 918.221,683.426 918.781,683.426 919.34,683.426 919.899,683.426 920.458,683.426 921.018,683.426 921.577,683.426 922.136,683.426 922.695,683.426 923.255,683.426 923.814,683.426 924.373,683.426 924.932,683.426 925.492,683.426 926.051,683.426 926.61,683.426 927.169,683.426 927.729,683.426 928.288,683.426 928.847,683.426 929.406,683.426 929.966,683.426 930.525,683.426 931.084,683.426 931.644,683.426 932.203,683.426 932.762,683.426 933.321,683.426 933.881,683.426 934.44,683.426 934.999,683.426 935.558,683.426 936.118,683.426 936.677,683.426 937.236,683.426 937.795,683.426 938.355,683.426 938.914,683.426 939.473,683.426 940.032,683.426 940.592,683.426 941.151,683.426 941.71,683.426 942.269,683.426 942.829,683.426 943.388,683.426 943.947,683.426 944.506,683.426 945.066,683.426 945.625,683.426 946.184,683.426 946.743,683.426 947.303,683.426 947.862,683.426 948.421,683.426 948.98,683.426 949.54,683.426 950.099,683.426 950.658,683.426 951.217,683.426 951.777,683.426 952.336,683.426 952.895,683.426 953.454,683.426 954.014,683.426 954.573,683.426 955.132,683.426 955.691,683.426 956.251,683.426 956.81,683.426 957.369,683.426 957.928,683.426 958.488,683.426 959.047,683.426 959.606,683.426 960.165,683.426 960.725,683.426 961.284,683.426 961.843,683.426 962.402,683.426 962.962,683.426 963.521,683.426 964.08,683.426 964.639,683.426 965.199,683.426 965.758,683.426 966.317,683.426 966.876,683.426 967.436,683.426 967.995,683.426 968.554,683.426 969.113,683.426 969.673,683.426 970.232,683.426 970.791,683.426 971.35,683.426 971.91,683.426 972.469,683.426 973.028,683.426 973.587,683.426 974.147,683.426 974.706,683.426 975.265,683.426 975.824,683.426 976.384,683.426 976.943,683.426 977.502,683.426 978.061,683.426 978.621,683.426 979.18,683.426 979.739,683.426 980.298,683.426 980.858,683.426 981.417,683.426 981.976,683.426 982.535,683.426 983.095,683.426 983.654,683.426 984.213,683.426 984.772,683.426 985.332,683.426 985.891,683.426 986.45,683.426 987.009,683.426 987.569,683.426 988.128,683.426 988.687,683.426 989.246,683.426 989.806,683.426 990.365,683.426 990.924,683.426 991.483,683.426 992.043,683.426 992.602,683.426 993.161,683.426 993.72,683.426 994.28,683.426 994.839,683.426 995.398,683.426 995.957,683.426 996.517,683.426 997.076,683.426 997.635,683.426 998.194,683.426 998.754,683.426 999.313,683.426 999.872,683.426 1000.43,683.426 1000.99,683.426 1001.55,683.426 1002.11,683.426 1002.67,683.426 1003.23,683.426 1003.79,683.426 1004.35,683.426 1004.91,683.426 1005.46,683.426 1006.02,683.426 1006.58,683.426 1007.14,683.426 1007.7,683.426 1008.26,683.426 1008.82,683.426 1009.38,683.426 1009.94,683.426 1010.5,683.426 1011.06,683.426 1011.62,683.426 1012.18,683.426 1012.73,683.426 1013.29,683.426 1013.85,683.426 1014.41,683.426 1014.97,683.426 1015.53,683.426 1016.09,683.426 1016.65,683.426 1017.21,683.426 1017.77,683.426 1018.33,683.426 1018.89,683.426 1019.45,683.426 1020.01,683.426 1020.56,683.426 1021.12,683.426 1021.68,683.426 1022.24,683.426 1022.8,683.426 1023.36,683.426 1023.92,683.426 1024.48,683.426 1025.04,683.426 1025.6,683.426 1026.16,683.426 1026.72,683.426 1027.28,683.426 1027.83,683.426 1028.39,683.426 1028.95,683.426 1029.51,683.426 1030.07,683.426 1030.63,683.426 1031.19,683.426 1031.75,683.426 1032.31,683.426 1032.87,683.426 1033.43,683.426 1033.99,683.426 1034.55,683.426 1035.1,683.426 1035.66,683.426 1036.22,683.426 1036.78,683.426 1037.34,683.426 1037.9,683.426 1038.46,683.426 1039.02,683.426 1039.58,683.426 1040.14,683.426 1040.7,683.426 1041.26,683.426 1041.82,683.426 1042.38,683.426 1042.93,683.426 1043.49,683.426 1044.05,683.426 1044.61,683.426 1045.17,683.426 1045.73,683.426 1046.29,683.426 1046.85,683.426 1047.41,683.426 1047.97,683.426 1048.53,683.426 1049.09,683.426 1049.65,683.426 1050.2,683.426 1050.76,683.426 1051.32,683.426 1051.88,683.426 1052.44,683.426 1053,683.426 1053.56,683.426 1054.12,683.426 1054.68,683.426 1055.24,683.426 1055.8,683.426 1056.36,683.426 1056.92,683.426 1057.48,683.426 1058.03,683.426 1058.59,683.426 1059.15,683.426 1059.71,683.426 1060.27,683.426 1060.83,683.426 1061.39,683.426 1061.95,683.426 1062.51,683.426 1063.07,683.426 1063.63,683.426 1064.19,683.426 1064.75,683.426 1065.3,683.426 1065.86,683.426 1066.42,683.426 1066.98,683.426 1067.54,683.426 1068.1,683.426 1068.66,683.426 1069.22,683.426 1069.78,683.426 1070.34,683.426 1070.9,683.426 1071.46,683.426 1072.02,683.426 1072.57,683.426 1073.13,683.426 1073.69,683.426 1074.25,683.426 1074.81,683.426 1075.37,683.426 1075.93,683.426 1076.49,683.426 1077.05,683.426 1077.61,683.426 1078.17,683.426 1078.73,683.426 1079.29,683.426 1079.85,683.426 1080.4,683.426 1080.96,683.426 1081.52,683.426 1082.08,683.426 1082.64,683.426 1083.2,683.426 1083.76,683.426 1084.32,683.426 1084.88,683.426 1085.44,683.426 1086,683.426 1086.56,683.426 1087.12,683.426 1087.67,683.426 1088.23,683.426 1088.79,683.426 1089.35,683.426 1089.91,683.426 1090.47,683.426 1091.03,683.426 1091.59,683.426 1092.15,683.426 1092.71,683.426 1093.27,683.426 1093.83,683.426 1094.39,683.426 1094.94,683.426 1095.5,683.426 1096.06,683.426 1096.62,683.426 1097.18,683.426 1097.74,683.426 1098.3,683.426 1098.86,683.426 1099.42,683.426 1099.98,683.426 1100.54,683.426 1101.1,683.426 1101.66,683.426 1102.22,683.426 1102.77,683.426 1103.33,683.426 1103.89,683.426 1104.45,683.426 1105.01,683.426 1105.57,683.426 1106.13,683.426 1106.69,683.426 1107.25,683.426 1107.81,683.426 1108.37,683.426 1108.93,683.426 1109.49,683.426 1110.04,683.426 1110.6,683.426 1111.16,683.426 1111.72,683.426 1112.28,683.426 1112.84,683.426 1113.4,683.426 1113.96,683.426 1114.52,683.426 1115.08,683.426 1115.64,683.426 1116.2,683.426 1116.76,683.426 1117.31,683.426 1117.87,683.426 1118.43,683.426 1118.99,683.426 1119.55,683.426 1120.11,683.426 1120.67,683.426 1121.23,683.426 1121.79,683.426 1122.35,683.426 1122.91,683.426 1123.47,683.426 1124.03,683.426 1124.59,683.426 1125.14,683.426 1125.7,683.426 1126.26,683.426 1126.82,683.426 1127.38,683.426 1127.94,683.426 1128.5,683.426 1129.06,683.426 1129.62,683.426 1130.18,683.426 1130.74,683.426 1131.3,683.426 1131.86,683.426 1132.41,683.426 1132.97,683.426 1133.53,683.426 1134.09,683.426 1134.65,683.426 1135.21,683.426 1135.77,683.426 1136.33,683.426 1136.89,683.426 1137.45,683.426 1138.01,683.426 1138.57,683.426 1139.13,683.426 1139.68,683.426 1140.24,683.426 1140.8,683.426 1141.36,683.426 1141.92,683.426 1142.48,683.426 1143.04,683.426 1143.6,683.426 1144.16,683.426 1144.72,683.426 1145.28,683.426 1145.84,683.426 1146.4,683.426 1146.96,683.426 1147.51,683.426 1148.07,683.426 1148.63,683.426 1149.19,683.426 1149.75,683.426 1150.31,683.426 1150.87,683.426 1151.43,683.426 1151.99,683.426 1152.55,683.426 1153.11,683.426 1153.67,683.426 1154.23,683.426 1154.78,683.426 1155.34,683.426 1155.9,683.426 1156.46,683.426 1157.02,683.426 1157.58,683.426 1158.14,683.426 1158.7,683.426 1159.26,683.426 1159.82,683.426 1160.38,683.426 1160.94,683.426 1161.5,683.426 1162.05,683.426 1162.61,683.426 1163.17,683.426 1163.73,683.426 1164.29,683.426 1164.85,683.426 1165.41,683.426 1165.97,683.426 1166.53,683.426 1167.09,683.426 1167.65,683.426 1168.21,683.426 1168.77,683.426 1169.33,683.426 1169.88,683.426 1170.44,683.426 1171,683.426 1171.56,683.426 1172.12,683.426 1172.68,683.426 1173.24,683.426 1173.8,683.426 1174.36,683.426 1174.92,683.426 1175.48,683.426 1176.04,683.426 1176.6,683.426 1177.15,683.426 1177.71,683.426 1178.27,683.426 1178.83,683.426 1179.39,683.426 1179.95,683.426 1180.51,683.426 1181.07,683.426 1181.63,683.426 1182.19,683.426 1182.75,683.426 1183.31,683.426 1183.87,683.426 1184.43,683.426 1184.98,683.426 1185.54,683.426 1186.1,683.426 1186.66,683.426 1187.22,683.426 1187.78,683.426 1188.34,683.426 1188.9,683.426 1189.46,683.426 1190.02,683.426 1190.58,683.426 1191.14,683.426 1191.7,683.426 1192.25,683.426 1192.81,683.426 1193.37,683.426 1193.93,683.426 1194.49,683.426 1195.05,683.426 1195.61,683.426 1196.17,683.426 1196.73,683.426 1197.29,683.426 1197.85,683.426 1198.41,683.426 1198.97,683.426 1199.52,683.426 1200.08,683.426 1200.64,683.426 1201.2,683.426 1201.76,683.426 1202.32,683.426 1202.88,683.426 1203.44,683.426 1204,683.426 1204.56,683.426 1205.12,683.426 1205.68,683.426 1206.24,683.426 1206.8,683.426 1207.35,683.426 1207.91,683.426 1208.47,683.426 1209.03,683.426 1209.59,683.426 1210.15,683.426 1210.71,683.426 1211.27,683.426 1211.83,683.426 1212.39,683.426 1212.95,683.426 1213.51,683.426 1214.07,683.426 1214.62,683.426 1215.18,683.426 1215.74,683.426 1216.3,683.426 1216.86,683.426 1217.42,683.426 1217.98,683.426 1218.54,683.426 1219.1,683.426 1219.66,683.426 1220.22,683.426 1220.78,683.426 1221.34,683.426 1221.89,683.426 1222.45,683.426 1223.01,683.426 1223.57,683.426 1224.13,683.426 1224.69,683.426 1225.25,683.426 1225.81,683.426 1226.37,683.426 1226.93,683.426 1227.49,683.426 1228.05,683.426 1228.61,683.426 1229.17,683.426 1229.72,683.426 1230.28,683.426 1230.84,683.426 1231.4,683.426 1231.96,683.426 1232.52,683.426 1233.08,683.426 1233.64,683.426 1234.2,683.426 1234.76,683.426 1235.32,683.426 1235.88,683.426 1236.44,683.426 1236.99,683.426 1237.55,683.426 1238.11,683.426 1238.67,683.426 1239.23,683.426 1239.79,683.426 1240.35,683.426 1240.91,683.426 1241.47,683.426 1242.03,683.426 1242.59,683.426 1243.15,683.426 1243.71,683.426 1244.26,683.426 1244.82,683.426 1245.38,683.426 1245.94,683.426 1246.5,683.426 1247.06,683.426 1247.62,683.426 1248.18,683.426 1248.74,683.426 1249.3,683.426 1249.86,683.426 1250.42,683.426 1250.98,683.426 1251.54,683.426 1252.09,683.426 1252.65,683.426 1253.21,683.426 1253.77,683.426 1254.33,683.426 1254.89,683.426 1255.45,683.426 1256.01,683.426 1256.57,683.426 1257.13,683.426 1257.69,683.426 1258.25,683.426 1258.81,683.426 1259.36,683.426 1259.92,683.426 1260.48,683.426 1261.04,683.426 1261.6,683.426 1262.16,683.426 1262.72,683.426 1263.28,683.426 1263.84,683.426 1264.4,683.426 1264.96,683.426 1265.52,683.426 1266.08,683.426 1266.63,683.426 1267.19,683.426 1267.75,683.426 1268.31,683.426 1268.87,683.426 1269.43,683.426 1269.99,683.426 1270.55,683.426 1271.11,683.426 1271.67,683.426 1272.23,683.426 1272.79,683.426 1273.35,683.426 1273.91,683.426 1274.46,683.426 1275.02,683.426 1275.58,683.426 1276.14,683.426 1276.7,683.426 1277.26,683.426 1277.82,683.426 1278.38,683.426 1278.94,683.426 1279.5,683.426 1280.06,683.426 1280.62,683.426 1281.18,683.426 1281.73,683.426 1282.29,683.426 1282.85,683.426 1283.41,683.426 1283.97,683.426 1284.53,683.426 1285.09,683.426 1285.65,683.426 1286.21,683.426 1286.77,683.426 1287.33,683.426 1287.89,683.426 1288.45,683.426 1289,683.426 1289.56,683.426 1290.12,683.426 1290.68,683.426 1291.24,683.426 1291.8,683.426 1292.36,683.426 1292.92,683.426 1293.48,683.426 1294.04,683.426 1294.6,683.426 1295.16,683.426 1295.72,683.426 1296.28,683.426 1296.83,683.426 1297.39,683.426 1297.95,683.426 1298.51,683.426 1299.07,683.426 1299.63,683.426 1300.19,683.426 1300.75,683.426 1301.31,683.426 1301.87,683.426 1302.43,683.426 1302.99,683.426 1303.55,683.426 1304.1,683.426 1304.66,683.426 1305.22,683.426 1305.78,683.426 1306.34,683.426 1306.9,683.426 1307.46,683.426 1308.02,683.426 1308.58,683.426 1309.14,683.426 1309.7,683.426 1310.26,683.426 1310.82,683.426 1311.38,683.426 1311.93,683.426 1312.49,683.426 1313.05,683.426 1313.61,683.426 1314.17,683.426 1314.73,683.426 1315.29,683.426 1315.85,683.426 1316.41,683.426 1316.97,683.426 1317.53,683.426 1318.09,683.426 1318.65,683.426 1319.2,683.426 1319.76,683.426 1320.32,683.426 1320.88,683.426 1321.44,683.426 1322,683.426 1322.56,683.426 1323.12,683.426 1323.68,683.426 1324.24,683.426 1324.8,683.426 1325.36,683.426 1325.92,683.426 1326.47,683.426 1327.03,683.426 1327.59,683.426 1328.15,683.426 1328.71,683.426 1329.27,683.426 1329.83,683.426 1330.39,683.426 1330.95,683.426 1331.51,683.426 1332.07,683.426 1332.63,683.426 1333.19,683.426 1333.75,683.426 1334.3,683.426 1334.86,683.426 1335.42,683.426 1335.98,683.426 1336.54,683.426 1337.1,683.426 1337.66,683.426 1338.22,683.426 1338.78,683.426 1339.34,683.426 1339.9,683.426 1340.46,683.426 1341.02,683.426 1341.57,683.426 1342.13,683.426 1342.69,683.426 1343.25,683.426 1343.81,683.426 1344.37,683.426 1344.93,683.426 1345.49,683.426 1346.05,683.426 1346.61,683.426 1347.17,683.426 1347.73,683.426 1348.29,683.426 1348.84,683.426 1349.4,683.426 1349.96,683.426 1350.52,683.426 1351.08,683.426 1351.64,683.426 1352.2,683.426 1352.76,683.426 1353.32,683.426 1353.88,683.426 1354.44,683.426 1355,683.426 1355.56,683.426 1356.12,683.426 1356.67,683.426 1357.23,683.426 1357.79,683.426 1358.35,683.426 1358.91,683.426 1359.47,683.426 1360.03,683.426 1360.59,683.426 1361.15,683.426 1361.71,683.426 1362.27,683.426 1362.83,683.426 1363.39,683.426 1363.94,683.426 1364.5,683.426 1365.06,683.426 1365.62,683.426 1366.18,683.426 1366.74,683.426 1367.3,683.426 1367.86,683.426 1368.42,683.426 1368.98,683.426 1369.54,683.426 1370.1,683.426 1370.66,683.426 1371.21,683.426 1371.77,683.426 1372.33,683.426 1372.89,683.426 1373.45,683.426 1374.01,683.426 1374.57,683.426 1375.13,683.426 1375.69,683.426 1376.25,683.426 1376.81,683.426 1377.37,683.426 1377.93,683.426 1378.49,683.426 1379.04,683.426 1379.6,683.426 1380.16,683.426 1380.72,683.426 1381.28,683.426 1381.84,683.426 1382.4,683.426 1382.96,683.426 1383.52,683.426 1384.08,683.426 1384.64,683.426 1385.2,683.426 1385.76,683.426 1386.31,683.426 1386.87,683.426 1387.43,683.426 1387.99,683.426 1388.55,683.426 1389.11,683.426 1389.67,683.426 1390.23,683.426 1390.79,683.426 1391.35,683.426 1391.91,683.426 1392.47,683.426 1393.03,683.426 1393.58,683.426 1394.14,683.426 1394.7,683.426 1395.26,683.426 1395.82,683.426 1396.38,683.426 1396.94,683.426 1397.5,683.426 1398.06,683.426 1398.62,683.426 1399.18,683.426 1399.74,683.426 1400.3,683.426 1400.86,683.426 1401.41,683.426 1401.97,683.426 1402.53,683.426 1403.09,683.426 1403.65,683.426 1404.21,683.426 1404.77,683.426 1405.33,683.426 1405.89,683.426 1406.45,683.426 1407.01,683.426 1407.57,683.426 1408.13,683.426 1408.68,683.426 1409.24,683.426 1409.8,683.426 1410.36,683.426 1410.92,683.426 1411.48,683.426 1412.04,683.426 1412.6,683.426 1413.16,683.426 1413.72,683.426 1414.28,683.426 1414.84,683.426 1415.4,683.426 1415.95,683.426 1416.51,683.426 1417.07,683.426 1417.63,683.426 1418.19,683.426 1418.75,683.426 1419.31,683.426 1419.87,683.426 1420.43,683.426 1420.99,683.426 1421.55,683.426 1422.11,683.426 1422.67,683.426 1423.23,683.426 1423.78,683.426 1424.34,683.426 1424.9,683.426 1425.46,683.426 1426.02,683.426 1426.58,683.426 1427.14,683.426 1427.7,683.426 1428.26,683.426 1428.82,683.426 1429.38,683.426 1429.94,683.426 1430.5,683.426 1431.05,683.426 1431.61,683.426 1432.17,683.426 1432.73,683.426 1433.29,683.426 1433.85,683.426 1434.41,683.426 1434.97,683.426 1435.53,683.426 1436.09,683.426 1436.65,683.426 1437.21,683.426 1437.77,683.426 1438.33,683.426 1438.88,683.426 1439.44,683.426 1440,683.426 1440.56,683.426 1441.12,683.426 1441.68,683.426 1442.24,683.426 1442.8,683.426 1443.36,683.426 1443.92,683.426 1444.48,683.426 1445.04,683.426 1445.6,683.426 1446.15,683.426 1446.71,683.426 1447.27,683.426 1447.83,683.426 1448.39,683.426 1448.95,683.426 1449.51,683.426 1450.07,683.426 1450.63,683.426 1451.19,683.426 1451.75,683.426 1452.31,683.426 1452.87,683.426 1453.42,683.426 1453.98,683.426 1454.54,683.426 1455.1,683.426 1455.66,683.426 1456.22,683.426 1456.78,683.426 1457.34,683.426 1457.9,683.426 1458.46,683.426 1459.02,683.426 1459.58,683.426 1460.14,683.426 1460.7,683.426 1461.25,683.426 1461.81,683.426 1462.37,683.426 1462.93,683.426 1463.49,683.426 1464.05,683.426 1464.61,683.426 1465.17,683.426 1465.73,683.426 1466.29,683.426 1466.85,683.426 1467.41,683.426 1467.97,683.426 1468.52,683.426 1469.08,683.426 1469.64,683.426 1470.2,683.426 1470.76,683.426 1471.32,683.426 1471.88,683.426 1472.44,683.426 1473,683.426 1473.56,683.426 1474.12,683.426 1474.68,683.426 1475.24,683.426 1475.79,683.426 1476.35,683.426 1476.91,683.426 1477.47,683.426 1478.03,683.426 1478.59,683.426 1479.15,683.426 1479.71,683.426 1480.27,683.426 1480.83,683.426 1481.39,683.426 1481.95,683.426 1482.51,683.426 1483.07,683.426 1483.62,683.426 1484.18,683.426 1484.74,683.426 1485.3,683.426 1485.86,683.426 1486.42,683.426 1486.98,683.426 1487.54,683.426 1488.1,683.426 1488.66,683.426 1489.22,683.426 1489.78,683.426 1490.34,683.426 1490.89,683.426 1491.45,683.426 1492.01,683.426 1492.57,683.426 1493.13,683.426 1493.69,683.426 1494.25,683.426 1494.81,683.426 1495.37,683.426 1495.93,683.426 1496.49,683.426 1497.05,683.426 1497.61,683.426 1498.16,683.426 1498.72,683.426 1499.28,683.426 1499.84,683.426 1500.4,683.426 1500.96,683.426 1501.52,683.426 1502.08,683.426 1502.64,683.426 1503.2,683.426 1503.76,683.426 1504.32,683.426 1504.88,683.426 1505.44,683.426 1505.99,683.426 1506.55,683.426 1507.11,683.426 1507.67,683.426 1508.23,683.426 1508.79,683.426 1509.35,683.426 1509.91,683.426 1510.47,683.426 1511.03,683.426 1511.59,683.426 1512.15,683.426 1512.71,683.426 1513.26,683.426 1513.82,683.426 1514.38,683.426 1514.94,683.426 1515.5,683.426 1516.06,683.426 1516.62,683.426 1517.18,683.426 1517.74,683.426 1518.3,683.426 1518.86,683.426 1519.42,683.426 1519.98,683.426 1520.53,683.426 1521.09,683.426 1521.65,683.426 1522.21,683.426 1522.77,683.426 1523.33,683.426 1523.89,683.426 1524.45,683.426 1525.01,683.426 1525.57,683.426 1526.13,683.426 1526.69,683.426 1527.25,683.426 1527.81,683.426 1528.36,683.426 1528.92,683.426 1529.48,683.426 1530.04,683.426 1530.6,683.426 1531.16,683.426 1531.72,683.426 1532.28,683.426 1532.84,683.426 1533.4,683.426 1533.96,683.426 1534.52,683.426 1535.08,683.426 1535.63,683.426 1536.19,683.426 1536.75,683.426 1537.31,683.426 1537.87,683.426 1538.43,683.426 1538.99,683.426 1539.55,683.426 1540.11,683.426 1540.67,683.426 1541.23,683.426 1541.79,683.426 1542.35,683.426 1542.9,683.426 1543.46,683.426 1544.02,683.426 1544.58,683.426 1545.14,683.426 1545.7,683.426 1546.26,683.426 1546.82,683.426 1547.38,683.426 1547.94,683.426 1548.5,683.426 1549.06,683.426 1549.62,683.426 1550.18,683.426 1550.73,683.426 1551.29,683.426 1551.85,683.426 1552.41,683.426 1552.97,683.426 1553.53,683.426 1554.09,683.426 1554.65,683.426 1555.21,683.426 1555.77,683.426 1556.33,683.426 1556.89,683.426 1557.45,683.426 1558,683.426 1558.56,683.426 1559.12,683.426 1559.68,683.426 1560.24,683.426 1560.8,683.426 1561.36,683.426 1561.92,683.426 1562.48,683.426 1563.04,683.426 1563.6,683.426 1564.16,683.426 1564.72,683.426 1565.28,683.426 1565.83,683.426 1566.39,683.426 1566.95,683.426 1567.51,683.426 1568.07,683.426 1568.63,683.426 1569.19,683.426 1569.75,683.426 1570.31,683.426 1570.87,683.426 1571.43,683.426 1571.99,683.426 1572.55,683.426 1573.1,683.426 1573.66,683.426 1574.22,683.426 1574.78,683.426 1575.34,683.426 1575.9,683.426 1576.46,683.426 1577.02,683.426 1577.58,683.426 1578.14,683.426 1578.7,683.426 1579.26,683.426 1579.82,683.426 1580.37,683.426 1580.93,683.426 1581.49,683.426 1582.05,683.426 1582.61,683.426 1583.17,683.426 1583.73,683.426 1584.29,683.426 1584.85,683.426 1585.41,683.426 1585.97,683.426 1586.53,683.426 1587.09,683.426 1587.65,683.426 1588.2,683.426 1588.76,683.426 1589.32,683.426 1589.88,683.426 1590.44,683.426 1591,683.426 1591.56,683.426 1592.12,683.426 1592.68,683.426 1593.24,683.426 1593.8,683.426 1594.36,683.426 1594.92,683.426 1595.47,683.426 1596.03,683.426 1596.59,683.426 1597.15,683.426 1597.71,683.426 1598.27,683.426 1598.83,683.426 1599.39,683.426 1599.95,683.426 1600.51,683.426 1601.07,683.426 1601.63,683.426 1602.19,683.426 1602.74,683.426 1603.3,683.426 1603.86,683.426 1604.42,683.426 1604.98,683.426 1605.54,683.426 1606.1,683.426 1606.66,683.426 1607.22,683.426 1607.78,683.426 1608.34,683.426 1608.9,683.426 1609.46,683.426 1610.02,683.426 1610.57,683.426 1611.13,683.426 1611.69,683.426 1612.25,683.426 1612.81,683.426 1613.37,683.426 1613.93,683.426 1614.49,683.426 1615.05,683.426 1615.61,683.426 1616.17,683.426 1616.73,683.426 1617.29,683.426 1617.84,683.426 1618.4,683.426 1618.96,683.426 1619.52,683.426 1620.08,683.426 1620.64,683.426 1621.2,683.426 1621.76,683.426 1622.32,683.426 1622.88,683.426 1623.44,683.426 1624,683.426 1624.56,683.426 1625.11,683.426 1625.67,683.426 1626.23,683.426 1626.79,683.426 1627.35,683.426 1627.91,683.426 1628.47,683.426 1629.03,683.426 1629.59,683.426 1630.15,683.426 1630.71,683.426 1631.27,683.426 1631.83,683.426 1632.39,683.426 1632.94,683.426 1633.5,683.426 1634.06,683.426 1634.62,683.426 1635.18,683.426 1635.74,683.426 1636.3,683.426 1636.86,683.426 1637.42,683.426 1637.98,683.426 1638.54,683.426 1639.1,683.426 1639.66,683.426 1640.21,683.426 1640.77,683.426 1641.33,683.426 1641.89,683.426 1642.45,683.426 1643.01,683.426 1643.57,683.426 1644.13,683.426 1644.69,683.426 1645.25,683.426 1645.81,683.426 1646.37,683.426 1646.93,683.426 1647.48,683.426 1648.04,683.426 1648.6,683.426 1649.16,683.426 1649.72,683.426 1650.28,683.426 1650.84,683.426 1651.4,683.426 1651.96,683.426 1652.52,683.426 1653.08,683.426 1653.64,683.426 1654.2,683.426 1654.76,683.426 1655.31,683.426 1655.87,683.426 1656.43,683.426 1656.99,683.426 1657.55,683.426 1658.11,683.426 1658.67,683.426 1659.23,683.426 1659.79,683.426 1660.35,683.426 1660.91,683.426 1661.47,683.426 1662.03,683.426 1662.58,683.426 1663.14,683.426 1663.7,683.426 1664.26,683.426 1664.82,683.426 1665.38,683.426 1665.94,683.426 1666.5,683.426 1667.06,683.426 1667.62,683.426 1668.18,683.426 1668.74,683.426 1669.3,683.426 1669.85,683.426 1670.41,683.426 1670.97,683.426 1671.53,683.426 1672.09,683.426 1672.65,683.426 1673.21,683.426 1673.77,683.426 1674.33,683.426 1674.89,683.426 1675.45,683.426 1676.01,683.426 1676.57,683.426 1677.13,683.426 1677.68,683.426 1678.24,683.426 1678.8,683.426 1679.36,683.426 1679.92,683.426 1680.48,683.426 1681.04,683.426 1681.6,683.426 1682.16,683.426 1682.72,683.426 1683.28,683.426 1683.84,683.426 1684.4,683.426 1684.95,683.426 1685.51,683.426 1686.07,683.426 1686.63,683.426 1687.19,683.426 1687.75,683.426 1688.31,683.426 1688.87,683.426 1689.43,683.426 1689.99,683.426 1690.55,683.426 1691.11,683.426 1691.67,683.426 1692.23,683.426 1692.78,683.426 1693.34,683.426 1693.9,683.426 1694.46,683.426 1695.02,683.426 1695.58,683.426 1696.14,683.426 1696.7,683.426 1697.26,683.426 1697.82,683.426 1698.38,683.426 1698.94,683.426 1699.5,683.426 1700.05,683.426 1700.61,683.426 1701.17,683.426 1701.73,683.426 1702.29,683.426 1702.85,683.426 1703.41,683.426 1703.97,683.426 1704.53,683.426 1705.09,683.426 1705.65,683.426 1706.21,683.426 1706.77,683.426 1707.32,683.426 1707.88,683.426 1708.44,683.426 1709,683.426 1709.56,683.426 1710.12,683.426 1710.68,683.426 1711.24,683.426 1711.8,683.426 1712.36,683.426 1712.92,683.426 1713.48,683.426 1714.04,683.426 1714.6,683.426 1715.15,683.426 1715.71,683.426 1716.27,683.426 1716.83,683.426 1717.39,683.426 1717.95,683.426 1718.51,683.426 1719.07,683.426 1719.63,683.426 1720.19,683.426 1720.75,683.426 1721.31,683.426 1721.87,683.426 1722.42,683.426 1722.98,683.426 1723.54,683.426 1724.1,683.426 1724.66,683.426 1725.22,683.426 1725.78,683.426 1726.34,683.426 1726.9,683.426 1727.46,683.426 1728.02,683.426 1728.58,683.426 1729.14,683.426 1729.69,683.426 1730.25,683.426 1730.81,683.426 1731.37,683.426 1731.93,683.426 1732.49,683.426 1733.05,683.426 1733.61,683.426 1734.17,683.426 1734.73,683.426 1735.29,683.426 1735.85,683.426 1736.41,683.426 1736.97,683.426 1737.52,683.426 1738.08,683.426 1738.64,683.426 1739.2,683.426 1739.76,683.426 1740.32,683.426 1740.88,683.426 1741.44,683.426 1742,683.426 1742.56,683.426 1743.12,683.426 1743.68,683.426 1744.24,683.426 1744.79,683.426 1745.35,683.426 1745.91,683.426 1746.47,683.426 1747.03,683.426 1747.59,683.426 1748.15,683.426 1748.71,683.426 1749.27,683.426 1749.83,683.426 1750.39,683.426 1750.95,683.426 1751.51,683.426 1752.06,683.426 1752.62,683.426 1753.18,683.426 1753.74,683.426 1754.3,683.426 1754.86,683.426 1755.42,683.426 1755.98,683.426 1756.54,683.426 1757.1,683.426 1757.66,683.426 1758.22,683.426 1758.78,683.426 1759.34,683.426 1759.89,683.426 1760.45,683.426 1761.01,683.426 1761.57,683.426 1762.13,683.426 1762.69,683.426 1763.25,683.426 1763.81,683.426 1764.37,683.426 1764.93,683.426 1765.49,683.426 1766.05,683.426 1766.61,683.426 1767.16,683.426 1767.72,683.426 1768.28,683.426 1768.84,683.426 1769.4,683.426 1769.96,683.426 1770.52,683.426 1771.08,683.426 1771.64,683.426 1772.2,683.426 1772.76,683.426 1773.32,683.426 1773.88,683.426 1774.43,683.426 1774.99,683.426 1775.55,683.426 1776.11,683.426 1776.67,683.426 1777.23,683.426 1777.79,683.426 1778.35,683.426 1778.91,683.426 1779.47,683.426 1780.03,683.426 1780.59,683.426 1781.15,683.426 1781.71,683.426 1782.26,683.426 1782.82,683.426 1783.38,683.426 1783.94,683.426 1784.5,683.426 1785.06,683.426 1785.62,683.426 1786.18,683.426 1786.74,683.426 1787.3,683.426 1787.86,683.426 1788.42,683.426 1788.98,683.426 1789.53,683.426 1790.09,683.426 1790.65,683.426 1791.21,683.426 1791.77,683.426 1792.33,683.426 1792.89,683.426 1793.45,683.426 1794.01,683.426 1794.57,683.426 1795.13,683.426 1795.69,683.426 1796.25,683.426 1796.8,683.426 1797.36,683.426 1797.92,683.426 1798.48,683.426 1799.04,683.426 1799.6,683.426 1800.16,683.426 1800.72,683.426 1801.28,683.426 1801.84,683.426 1802.4,683.426 1802.96,683.426 1803.52,683.426 1804.08,683.426 1804.63,683.426 1805.19,683.426 1805.75,683.426 1806.31,683.426 1806.87,683.426 1807.43,683.426 1807.99,683.426 1808.55,683.426 1809.11,683.426 1809.67,683.426 1810.23,683.426 1810.79,683.426 1811.35,683.426 1811.9,683.426 1812.46,683.426 1813.02,683.426 1813.58,683.426 1814.14,683.426 1814.7,683.426 1815.26,683.426 1815.82,683.426 1816.38,683.426 1816.94,683.426 1817.5,683.426 1818.06,683.426 1818.62,683.426 1819.18,683.426 1819.73,683.426 1820.29,683.426 1820.85,683.426 1821.41,683.426 1821.97,683.426 1822.53,683.426 1823.09,683.426 1823.65,683.426 1824.21,683.426 1824.77,683.426 1825.33,683.426 1825.89,683.426 1826.45,683.426 1827,683.426 1827.56,683.426 1828.12,683.426 1828.68,683.426 1829.24,683.426 1829.8,683.426 1830.36,683.426 1830.92,683.426 1831.48,683.426 1832.04,683.426 1832.6,683.426 1833.16,683.426 1833.72,683.426 1834.27,683.426 1834.83,683.426 1835.39,683.426 1835.95,683.426 1836.51,683.426 1837.07,683.426 1837.63,683.426 1838.19,683.426 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0360511416508285 ± 0.023730562597021103\nProjected Energy: -4.014288008129902 ± (0.004883541302033834, 0.004691638438064416)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.477179</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.5599e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.3125e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.478e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.412e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.886e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.866e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133637\n -0.7590191922770906\n  0.13584182219621788\n  0.15789998694607377\n  0.876711441178136\n  1.530592997097334\n  1.583573261186742\n  3.0728703303258706\n  3.125672653951842\n  4.8621072215621695\n  6.2606948503805935\n  6.402671211183113\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
