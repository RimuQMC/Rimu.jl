var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2157616538558939 ± 0.0015122892524184607\n   G2(1) = 0.9165572350328943 ± 0.0007006041601670814\n   G2(2) = 0.9827303386737113 ± 0.0004870563871342573\n   G2(3) = 0.9856631987308955 ± 0.0008966261807943868\n   G2(4) = 0.9827303386737113 ± 0.0004870563871342573\n   G2(5) = 0.9165572350328943 ± 0.0007006041601670814\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.036866803869216 ± 0.13057125145340992\n   Replica 2: -4.056489724043647 ± 0.13414961086143745\n   Replica 3: -4.075203606167791 ± 0.13403944792391895\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip130\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip130)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip131\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip130)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip132\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.87 2211.02,1261.87 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1004.01 2211.02,1004.01 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.151 2211.02,746.151 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.289 2211.02,488.289 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.427 2211.02,230.427 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.87 423.181,1261.87 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1004.01 423.181,1004.01 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.151 423.181,746.151 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.289 423.181,488.289 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.427 423.181,230.427 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M356.339 1247.67 Q352.728 1247.67 350.899 1251.24 Q349.094 1254.78 349.094 1261.91 Q349.094 1269.02 350.899 1272.58 Q352.728 1276.12 356.339 1276.12 Q359.973 1276.12 361.779 1272.58 Q363.608 1269.02 363.608 1261.91 Q363.608 1254.78 361.779 1251.24 Q359.973 1247.67 356.339 1247.67 M356.339 1243.97 Q362.149 1243.97 365.205 1248.58 Q368.284 1253.16 368.284 1261.91 Q368.284 1270.64 365.205 1275.24 Q362.149 1279.83 356.339 1279.83 Q350.529 1279.83 347.45 1275.24 Q344.395 1270.64 344.395 1261.91 Q344.395 1253.16 347.45 1248.58 Q350.529 1243.97 356.339 1243.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M290.043 1017.36 L306.363 1017.36 L306.363 1021.29 L284.418 1021.29 L284.418 1017.36 Q287.08 1014.6 291.664 1009.97 Q296.27 1005.32 297.451 1003.98 Q299.696 1001.45 300.576 999.719 Q301.478 997.959 301.478 996.27 Q301.478 993.515 299.534 991.779 Q297.613 990.043 294.511 990.043 Q292.312 990.043 289.858 990.807 Q287.427 991.571 284.65 993.121 L284.65 988.399 Q287.474 987.265 289.927 986.686 Q292.381 986.108 294.418 986.108 Q299.789 986.108 302.983 988.793 Q306.177 991.478 306.177 995.969 Q306.177 998.098 305.367 1000.02 Q304.58 1001.92 302.474 1004.51 Q301.895 1005.18 298.793 1008.4 Q295.691 1011.59 290.043 1017.36 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M316.224 986.733 L334.58 986.733 L334.58 990.668 L320.506 990.668 L320.506 999.14 Q321.524 998.793 322.543 998.631 Q323.562 998.445 324.58 998.445 Q330.367 998.445 333.747 1001.62 Q337.126 1004.79 337.126 1010.2 Q337.126 1015.78 333.654 1018.89 Q330.182 1021.96 323.862 1021.96 Q321.687 1021.96 319.418 1021.59 Q317.173 1021.22 314.765 1020.48 L314.765 1015.78 Q316.849 1016.92 319.071 1017.47 Q321.293 1018.03 323.77 1018.03 Q327.774 1018.03 330.112 1015.92 Q332.45 1013.82 332.45 1010.2 Q332.45 1006.59 330.112 1004.49 Q327.774 1002.38 323.77 1002.38 Q321.895 1002.38 320.02 1002.8 Q318.168 1003.21 316.224 1004.09 L316.224 986.733 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M356.339 989.811 Q352.728 989.811 350.899 993.376 Q349.094 996.918 349.094 1004.05 Q349.094 1011.15 350.899 1014.72 Q352.728 1018.26 356.339 1018.26 Q359.973 1018.26 361.779 1014.72 Q363.608 1011.15 363.608 1004.05 Q363.608 996.918 361.779 993.376 Q359.973 989.811 356.339 989.811 M356.339 986.108 Q362.149 986.108 365.205 990.714 Q368.284 995.297 368.284 1004.05 Q368.284 1012.77 365.205 1017.38 Q362.149 1021.96 356.339 1021.96 Q350.529 1021.96 347.45 1017.38 Q344.395 1012.77 344.395 1004.05 Q344.395 995.297 347.45 990.714 Q350.529 986.108 356.339 986.108 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M286.062 728.871 L304.418 728.871 L304.418 732.806 L290.344 732.806 L290.344 741.278 Q291.363 740.931 292.381 740.769 Q293.4 740.584 294.418 740.584 Q300.205 740.584 303.585 743.755 Q306.964 746.926 306.964 752.343 Q306.964 757.921 303.492 761.023 Q300.02 764.102 293.701 764.102 Q291.525 764.102 289.256 763.732 Q287.011 763.361 284.603 762.62 L284.603 757.921 Q286.687 759.056 288.909 759.611 Q291.131 760.167 293.608 760.167 Q297.613 760.167 299.951 758.06 Q302.288 755.954 302.288 752.343 Q302.288 748.732 299.951 746.625 Q297.613 744.519 293.608 744.519 Q291.733 744.519 289.858 744.935 Q288.006 745.352 286.062 746.232 L286.062 728.871 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M326.177 731.949 Q322.566 731.949 320.737 735.514 Q318.932 739.056 318.932 746.185 Q318.932 753.292 320.737 756.857 Q322.566 760.398 326.177 760.398 Q329.811 760.398 331.617 756.857 Q333.446 753.292 333.446 746.185 Q333.446 739.056 331.617 735.514 Q329.811 731.949 326.177 731.949 M326.177 728.246 Q331.987 728.246 335.043 732.852 Q338.122 737.435 338.122 746.185 Q338.122 754.912 335.043 759.519 Q331.987 764.102 326.177 764.102 Q320.367 764.102 317.288 759.519 Q314.233 754.912 314.233 746.185 Q314.233 737.435 317.288 732.852 Q320.367 728.246 326.177 728.246 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M356.339 731.949 Q352.728 731.949 350.899 735.514 Q349.094 739.056 349.094 746.185 Q349.094 753.292 350.899 756.857 Q352.728 760.398 356.339 760.398 Q359.973 760.398 361.779 756.857 Q363.608 753.292 363.608 746.185 Q363.608 739.056 361.779 735.514 Q359.973 731.949 356.339 731.949 M356.339 728.246 Q362.149 728.246 365.205 732.852 Q368.284 737.435 368.284 746.185 Q368.284 754.912 365.205 759.519 Q362.149 764.102 356.339 764.102 Q350.529 764.102 347.45 759.519 Q344.395 754.912 344.395 746.185 Q344.395 737.435 347.45 732.852 Q350.529 728.246 356.339 728.246 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M284.835 471.009 L307.057 471.009 L307.057 472.999 L294.511 505.569 L289.627 505.569 L301.432 474.944 L284.835 474.944 L284.835 471.009 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M316.224 471.009 L334.58 471.009 L334.58 474.944 L320.506 474.944 L320.506 483.416 Q321.524 483.069 322.543 482.907 Q323.562 482.722 324.58 482.722 Q330.367 482.722 333.747 485.893 Q337.126 489.064 337.126 494.481 Q337.126 500.06 333.654 503.161 Q330.182 506.24 323.862 506.24 Q321.687 506.24 319.418 505.87 Q317.173 505.499 314.765 504.759 L314.765 500.06 Q316.849 501.194 319.071 501.749 Q321.293 502.305 323.77 502.305 Q327.774 502.305 330.112 500.198 Q332.45 498.092 332.45 494.481 Q332.45 490.87 330.112 488.763 Q327.774 486.657 323.77 486.657 Q321.895 486.657 320.02 487.073 Q318.168 487.49 316.224 488.37 L316.224 471.009 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M356.339 474.087 Q352.728 474.087 350.899 477.652 Q349.094 481.194 349.094 488.323 Q349.094 495.43 350.899 498.995 Q352.728 502.536 356.339 502.536 Q359.973 502.536 361.779 498.995 Q363.608 495.43 363.608 488.323 Q363.608 481.194 361.779 477.652 Q359.973 474.087 356.339 474.087 M356.339 470.384 Q362.149 470.384 365.205 474.99 Q368.284 479.574 368.284 488.323 Q368.284 497.05 365.205 501.657 Q362.149 506.24 356.339 506.24 Q350.529 506.24 347.45 501.657 Q344.395 497.05 344.395 488.323 Q344.395 479.574 347.45 474.99 Q350.529 470.384 356.339 470.384 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M256.664 243.772 L264.303 243.772 L264.303 217.406 L255.992 219.073 L255.992 214.814 L264.256 213.147 L268.932 213.147 L268.932 243.772 L276.571 243.772 L276.571 247.707 L256.664 247.707 L256.664 243.772 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M296.015 216.226 Q292.404 216.226 290.576 219.79 Q288.77 223.332 288.77 230.462 Q288.77 237.568 290.576 241.133 Q292.404 244.674 296.015 244.674 Q299.65 244.674 301.455 241.133 Q303.284 237.568 303.284 230.462 Q303.284 223.332 301.455 219.79 Q299.65 216.226 296.015 216.226 M296.015 212.522 Q301.826 212.522 304.881 217.128 Q307.96 221.712 307.96 230.462 Q307.96 239.188 304.881 243.795 Q301.826 248.378 296.015 248.378 Q290.205 248.378 287.127 243.795 Q284.071 239.188 284.071 230.462 Q284.071 221.712 287.127 217.128 Q290.205 212.522 296.015 212.522 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M326.177 216.226 Q322.566 216.226 320.737 219.79 Q318.932 223.332 318.932 230.462 Q318.932 237.568 320.737 241.133 Q322.566 244.674 326.177 244.674 Q329.811 244.674 331.617 241.133 Q333.446 237.568 333.446 230.462 Q333.446 223.332 331.617 219.79 Q329.811 216.226 326.177 216.226 M326.177 212.522 Q331.987 212.522 335.043 217.128 Q338.122 221.712 338.122 230.462 Q338.122 239.188 335.043 243.795 Q331.987 248.378 326.177 248.378 Q320.367 248.378 317.288 243.795 Q314.233 239.188 314.233 230.462 Q314.233 221.712 317.288 217.128 Q320.367 212.522 326.177 212.522 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M356.339 216.226 Q352.728 216.226 350.899 219.79 Q349.094 223.332 349.094 230.462 Q349.094 237.568 350.899 241.133 Q352.728 244.674 356.339 244.674 Q359.973 244.674 361.779 241.133 Q363.608 237.568 363.608 230.462 Q363.608 223.332 361.779 219.79 Q359.973 216.226 356.339 216.226 M356.339 212.522 Q362.149 212.522 365.205 217.128 Q368.284 221.712 368.284 230.462 Q368.284 239.188 365.205 243.795 Q362.149 248.378 356.339 248.378 Q350.529 248.378 347.45 243.795 Q344.395 239.188 344.395 230.462 Q344.395 221.712 347.45 217.128 Q350.529 212.522 356.339 212.522 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip132)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.427 4017.76,230.427 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.5 456.554,1249.38 457.123,1249.27 457.691,1248.07 458.259,1247.87 458.828,1247.59 459.396,1247.24 459.964,1246.83 460.533,1246.33 461.101,1245.75 461.669,1244.03 462.238,1242.27 462.806,1241.47 463.375,1240.59 463.943,1239.59 464.511,1238.5 465.08,1236.28 465.648,1235.02 466.216,1232.59 466.785,1231.09 467.353,1229.49 467.921,1225.67 468.49,1222.81 469.058,1220.89 469.626,1218.75 470.195,1216.47 470.763,1214.04 471.331,1210.41 471.9,1207.72 472.468,1204.85 473.036,1201.79 473.605,1197.52 474.173,1193.07 474.741,1189.39 475.31,1185.55 475.878,1180.51 476.446,1176.28 477.015,1171.85 477.583,1167.23 478.152,1162.35 478.72,1154.14 479.288,1148.84 479.857,1140.15 480.425,1134.56 480.993,1128.63 481.562,1121.58 482.13,1115.26 482.698,1108.57 483.267,1100.72 483.835,1091.74 484.403,1084.67 484.972,1075.22 485.54,1064.54 486.108,1055.93 486.677,1047.08 487.245,1038.12 487.813,1030.25 488.382,1022.17 488.95,1012.75 489.518,1002.12 490.087,991.417 490.655,980.688 491.224,971.801 491.792,961.754 492.36,951.675 492.929,941.675 493.497,932.576 494.065,923.299 494.634,910.684 495.202,900.283 495.77,890.913 496.339,879.462 496.907,866.958 497.475,856.641 498.044,846.272 498.612,833.739 499.18,823.285 499.749,813.767 500.317,803.271 500.885,792.976 501.454,782.587 502.022,771.252 502.59,760.978 503.159,750.867 503.727,737.592 504.295,727.672 504.864,715.815 505.432,705.126 506.001,696.495 506.569,688.024 507.137,678.485 507.706,668.927 508.274,659.558 508.842,650.33 509.411,640.232 509.979,631.391 510.547,623.752 511.116,615.857 511.684,608.079 512.252,598.174 512.821,588.459 513.389,578.016 513.957,570.951 514.526,558.636 515.094,549.764 515.662,543.245 516.231,534.638 516.799,529.381 517.367,522.038 517.936,514.976 518.504,507.099 519.072,498.246 519.641,491.63 520.209,486.333 520.778,480.035 521.346,474.026 521.914,468.186 522.483,462.197 523.051,457.246 523.619,453.668 524.188,445.876 524.756,441.154 525.324,437.524 525.893,432.033 526.461,425.551 527.029,421.354 527.598,416.233 528.166,411.329 528.734,407.374 529.303,401.444 529.871,397.622 530.439,392.858 531.008,389.309 531.576,384.913 532.144,379.612 532.713,376.315 533.281,374.322 533.85,371.272 534.418,364.154 534.986,360.109 535.555,356.511 536.123,350.82 536.691,346.38 537.26,341.216 537.828,338.342 538.396,337.444 538.965,333.615 539.533,329.87 540.101,327.152 540.67,324.615 541.238,322.151 541.806,320.774 542.375,319.336 542.943,316.745 543.511,315.399 544.08,313.817 544.648,312.495 545.216,309.237 545.785,306.881 546.353,304.664 546.921,303.654 547.49,300.217 548.058,298.28 548.627,299.326 549.195,296.22 549.763,294.434 550.332,293.638 550.9,290.753 551.468,290.98 552.037,288.86 552.605,286.045 553.173,285.301 553.742,284.815 554.31,281.208 554.878,280.717 555.447,280.421 556.015,281.071 556.583,279.497 557.152,276.987 557.72,278.606 558.288,278.055 558.857,276.361 559.425,274.656 559.993,274.352 560.562,272.733 561.13,271.497 561.698,270.293 562.267,268.976 562.835,268.685 563.404,267.502 563.972,267.35 564.54,267.034 565.109,264.683 565.677,263.44 566.245,264.418 566.814,263.989 567.382,261.614 567.95,262.701 568.519,263.474 569.087,263.258 569.655,262.022 570.224,261.63 570.792,259.417 571.36,258.668 571.929,259.694 572.497,258.634 573.065,257.416 573.634,257.226 574.202,255.109 574.77,254.136 575.339,252.123 575.907,252.485 576.476,249.47 577.044,244.564 577.612,245.247 578.181,243.641 578.749,244.353 579.317,245.069 579.886,244.687 580.454,243.271 581.022,243.879 581.591,244.481 582.159,245.067 582.727,245.625 583.296,246.232 583.864,245.298 584.432,249.829 585.001,250.853 585.569,249.834 586.137,252.01 586.706,249.559 587.274,251.647 587.842,253.893 588.411,250.44 588.979,249.095 589.547,249.103 590.116,249.168 590.684,247.286 591.253,246.279 591.821,246.128 592.389,246.403 592.958,247.654 593.526,242.269 594.094,243.644 594.663,245.874 595.231,245.986 595.799,245.876 596.368,244.933 596.936,247.12 597.504,246.168 598.073,246.295 598.641,247.338 599.209,246.123 599.778,244.934 600.346,245.078 600.914,244.877 601.483,242.792 602.051,241.791 602.619,243.7 603.188,242.922 603.756,243.912 604.325,241.832 604.893,239.926 605.461,240.197 606.03,239.369 606.598,238.652 607.166,237.002 607.735,235.45 608.303,234.905 608.871,235.583 609.44,238.145 610.008,237.45 610.576,238.885 611.145,235.999 611.713,235.279 612.281,237.07 612.85,235.588 613.418,236.309 613.986,235.661 614.555,235.151 615.123,236.965 615.691,237.545 616.26,237.871 616.828,240.419 617.396,239.652 617.965,238.859 618.533,239.141 619.102,240.438 619.67,239.709 620.238,236.695 620.807,237.22 621.375,239.675 621.943,238.926 622.512,236.863 623.08,238.063 623.648,237.178 624.217,240.697 624.785,240.515 625.353,240.557 625.922,241.599 626.49,240.517 627.058,237.484 627.627,237.889 628.195,235.918 628.763,237.435 629.332,236.706 629.9,237.056 630.468,238.317 631.037,237.681 631.605,236.005 632.173,234.302 632.742,235.56 633.31,234.951 633.879,235.355 634.447,236.606 635.015,239.135 635.584,239.336 636.152,237.194 636.72,237.518 637.289,235.706 637.857,237.177 638.425,238.491 638.994,238.753 639.562,237.83 640.13,239.018 640.699,239.053 641.267,241.329 641.835,242.391 642.404,244.297 642.972,245.037 643.54,244.68 644.109,241.308 644.677,239.093 645.245,239.099 645.814,238.873 646.382,238.739 646.951,236.653 647.519,239.969 648.087,239.843 648.656,241.845 649.224,241.751 649.792,239.463 650.361,240.5 650.929,239.168 651.497,239.084 652.066,239.024 652.634,237.958 653.202,238.736 653.771,237.462 654.339,238.58 654.907,239.431 655.476,238.191 656.044,240.282 656.612,238.682 657.181,237.391 657.749,237.082 658.317,238.029 658.886,236.652 659.454,235.421 660.022,235.513 660.591,236.619 661.159,237.597 661.728,235.442 662.296,235.223 662.864,234.411 663.433,233.308 664.001,232.487 664.569,231.892 665.138,232.224 665.706,234.453 666.274,235.67 666.843,234.667 667.411,233.929 667.979,236.153 668.548,236.144 669.116,234.354 669.684,235.392 670.253,236.497 670.821,236.228 671.389,236.2 671.958,236.021 672.526,236.166 673.094,236.021 673.663,235.968 674.231,234.928 674.799,234.065 675.368,233.945 675.936,233.146 676.505,231.262 677.073,229.369 677.641,230.816 678.21,231.06 678.778,229.232 679.346,229.539 679.915,231.905 680.483,233.259 681.051,231.318 681.62,232.817 682.188,235.034 682.756,234.053 683.325,231.974 683.893,231.218 684.461,229.084 685.03,228.359 685.598,227.822 686.166,228.345 686.735,231.933 687.303,232.287 687.871,231.393 688.44,228.6 689.008,229.936 689.577,229.572 690.145,229.888 690.713,231.483 691.282,229.717 691.85,232.179 692.418,232.666 692.987,234.029 693.555,235.369 694.123,235.227 694.692,234.035 695.26,233.091 695.828,235.472 696.397,237.516 696.965,236.352 697.533,236.352 698.102,237.228 698.67,237.184 699.238,235.01 699.807,233.828 700.375,231.688 700.943,232.974 701.512,231.979 702.08,233.193 702.648,234.305 703.217,234.21 703.785,233.296 704.354,232.319 704.922,232.615 705.49,229.619 706.059,229.941 706.627,228.279 707.195,228.766 707.764,228.063 708.332,228.66 708.9,228.975 709.469,230.141 710.037,231.435 710.605,230.576 711.174,230.853 711.742,235.305 712.31,233.045 712.879,233.206 713.447,233.312 714.015,233.311 714.584,232.517 715.152,232.738 715.72,233.766 716.289,233.803 716.857,234.788 717.425,235.749 717.994,235.79 718.562,237.894 719.131,237.393 719.699,237.446 720.267,237.142 720.836,235.928 721.404,235.649 721.972,235.482 722.541,234.22 723.109,234.086 723.677,233.889 724.246,233.633 724.814,232.6 725.382,233.638 725.951,233.548 726.519,234.38 727.087,237.529 727.656,237.152 728.224,236.907 728.792,235.623 729.361,235.528 729.929,236.676 730.497,236.39 731.066,235.175 731.634,231.164 732.203,230.247 732.771,232.523 733.339,232.643 733.908,232.936 734.476,233.895 735.044,232.737 735.613,232.599 736.181,232.573 736.749,232.601 737.318,232.384 737.886,233.262 738.454,230.132 739.023,230.38 739.591,230.394 740.159,229.406 740.728,228.682 741.296,230.088 741.864,230.472 742.433,230.528 743.001,231.553 743.569,231.711 744.138,230.879 744.706,230.972 745.274,232.019 745.843,232.062 746.411,231.249 746.98,230.275 747.548,231.535 748.116,232.635 748.685,230.666 749.253,232.791 749.821,231.712 750.39,230.73 750.958,228.826 751.526,227 752.095,227.322 752.663,226.97 753.231,225.524 753.8,227.051 754.368,227.327 754.936,225.7 755.505,225.179 756.073,226.093 756.641,228.276 757.21,229.637 757.778,230.06 758.346,231.177 758.915,232.068 759.483,233.1 760.052,228.996 760.62,230.324 761.188,230.502 761.757,231.683 762.325,231.868 762.893,233.93 763.462,237.849 764.03,238.409 764.598,238.085 765.167,236.708 765.735,236.622 766.303,236.135 766.872,235.9 767.44,237.676 768.008,237.31 768.577,238.08 769.145,235.61 769.713,236.331 770.282,235.064 770.85,233.665 771.418,234.486 771.987,234.094 772.555,234.981 773.123,231.619 773.692,233.648 774.26,232.507 774.829,231.583 775.397,231.656 775.965,231.649 776.534,233.718 777.102,232.551 777.67,234.521 778.239,232.292 778.807,232.424 779.375,230.47 779.944,229.573 780.512,227.685 781.08,229.074 781.649,227.013 782.217,226.226 782.785,225.754 783.354,228.296 783.922,229.651 784.49,226.736 785.059,227.321 785.627,227.91 786.195,228.422 786.764,230.764 787.332,230.974 787.9,230.182 788.469,231.343 789.037,229.531 789.606,230.768 790.174,229.738 790.742,231.881 791.311,234.126 791.879,234.888 792.447,235.466 793.016,235.018 793.584,235.913 794.152,234.441 794.721,234.514 795.289,233.372 795.857,232.27 796.426,230.294 796.994,228.452 797.562,228.018 798.131,230.32 798.699,229.6 799.267,227.703 799.836,224.984 800.404,224.661 800.972,226.101 801.541,225.594 802.109,227.077 802.678,227.189 803.246,229.879 803.814,234.357 804.383,234.298 804.951,235.32 805.519,236.417 806.088,234.179 806.656,233.177 807.224,235.299 807.793,233.314 808.361,236.531 808.929,236.16 809.498,236.951 810.066,237.696 810.634,237.387 811.203,233.833 811.771,233.748 812.339,233.571 812.908,235.702 813.476,235.542 814.044,236.63 814.613,234.306 815.181,233.09 815.749,234.116 816.318,234.968 816.886,235.482 817.455,232.197 818.023,230.267 818.591,232.288 819.16,232.25 819.728,231.205 820.296,231.337 820.865,231.413 821.433,231.345 822.001,232.422 822.57,232.339 823.138,233.523 823.706,232.166 824.275,232.109 824.843,229.02 825.411,230.08 825.98,229.175 826.548,231.585 827.116,230.56 827.685,231.604 828.253,233.659 828.821,232.469 829.39,232.574 829.958,230.331 830.526,230.177 831.095,231.265 831.663,232.267 832.232,233.25 832.8,235.213 833.368,235.954 833.937,235.823 834.505,235.422 835.073,236.003 835.642,234.545 836.21,233.071 836.778,231.848 837.347,231.503 837.915,231.34 838.483,230.351 839.052,231.475 839.62,231.418 840.188,229.262 840.757,228.442 841.325,230.804 841.893,230.779 842.462,229.717 843.03,229.689 843.598,229.644 844.167,229.727 844.735,232.865 845.304,232.567 845.872,231.603 846.44,228.514 847.009,226.641 847.577,226.004 848.145,226.304 848.714,226.555 849.282,226.679 849.85,226.918 850.419,227.316 850.987,226.684 851.555,228.107 852.124,228.507 852.692,228.593 853.26,226.927 853.829,225.247 854.397,224.567 854.965,223.789 855.534,224.386 856.102,224.933 856.67,226.688 857.239,224.806 857.807,224.374 858.375,226.921 858.944,229.53 859.512,228.495 860.081,230.938 860.649,229.794 861.217,228.014 861.786,227.323 862.354,228.724 862.922,230.117 863.491,230.135 864.059,230.367 864.627,229.452 865.196,231.685 865.764,232.852 866.332,232.781 866.901,234.956 867.469,233.765 868.037,230.697 868.606,230.996 869.174,229.028 869.742,227.252 870.311,231.823 870.879,229.734 871.447,231.977 872.016,233.044 872.584,232.891 873.152,232.933 873.721,232.937 874.289,230.869 874.858,231.097 875.426,231.104 875.994,229.067 876.563,229.307 877.131,228.829 877.699,230.076 878.268,231.202 878.836,230.566 879.404,229.827 879.973,230.897 880.541,231.897 881.109,232.842 881.678,233.963 882.246,232.782 882.814,234.898 883.383,235.71 883.951,233.332 884.519,235.189 885.088,236.947 885.656,236.927 886.224,236.635 886.793,234.257 887.361,232.898 887.93,235.005 888.498,235.917 889.066,236.548 889.635,235.092 890.203,237.827 890.771,237.472 891.34,237.368 891.908,235.907 892.476,235.417 893.045,236.103 893.613,237.695 894.181,235.202 894.75,235.834 895.318,237.627 895.886,236.139 896.455,235.93 897.023,236.616 897.591,237.048 898.16,237.534 898.728,236.945 899.296,235.137 899.865,234.793 900.433,234.392 901.001,237.998 901.57,237.378 902.138,236.872 902.707,234.316 903.275,234.084 903.843,230.631 904.412,233.53 904.98,232.346 905.548,228.113 906.117,228.176 906.685,228.433 907.253,227.176 907.822,226.484 908.39,227.604 908.958,226.77 909.527,228.107 910.095,229.149 910.663,230.632 911.232,231.444 911.8,231.617 912.368,230.333 912.937,231.408 913.505,232.511 914.073,234.397 914.642,235.076 915.21,232.785 915.779,233.665 916.347,228.19 916.915,229.195 917.484,230.122 918.052,231.11 918.62,232.009 919.189,230.755 919.757,230.581 920.325,230.87 920.894,231.887 921.462,231.668 922.03,231.691 922.599,232.541 923.167,233.507 923.735,234.358 924.304,234.957 924.872,234.351 925.44,232.849 926.009,231.55 926.577,230.547 927.145,229.292 927.714,228.339 928.282,227.433 928.85,228.561 929.419,230.566 929.987,230.51 930.556,230.45 931.124,228.446 931.692,228.582 932.261,227.571 932.829,227.871 933.397,228.116 933.966,230.221 934.534,231.343 935.102,234.353 935.671,233.99 936.239,234.598 936.807,233.112 937.376,231.815 937.944,233.676 938.512,233.266 939.081,229.825 939.649,227.861 940.217,226.001 940.786,225.11 941.354,225.434 941.922,226.806 942.491,227.767 943.059,227.085 943.627,228.272 944.196,226.359 944.764,225.423 945.333,227.775 945.901,226.789 946.469,224.978 947.038,226.502 947.606,224.779 948.174,226.387 948.743,225.546 949.311,226.054 949.879,228.443 950.448,229.463 951.016,228.561 951.584,228.722 952.153,227.686 952.721,228.695 953.289,228.839 953.858,227.684 954.426,228.911 954.994,227.905 955.563,230.201 956.131,229.185 956.699,229.051 957.268,228.957 957.836,226.909 958.405,227.142 958.973,224.348 959.541,223.814 960.11,225.488 960.678,226.842 961.246,227.234 961.815,224.617 962.383,224.996 962.951,225.621 963.52,225.873 964.088,224.223 964.656,224.737 965.225,225.113 965.793,225.304 966.361,225.648 966.93,227.081 967.498,227.41 968.066,224.643 968.635,226.393 969.203,228.041 969.771,232.475 970.34,234.493 970.908,233.429 971.476,232.532 972.045,230.539 972.613,230.695 973.182,229.576 973.75,229.891 974.318,230.908 974.887,231.039 975.455,229.973 976.023,232.353 976.592,231.327 977.16,232.424 977.728,230.47 978.297,228.495 978.865,227.681 979.433,225.013 980.002,224.691 980.57,225.395 981.138,225.966 981.707,228.555 982.275,232 982.843,232.324 983.412,232.417 983.98,231.227 984.548,232.492 985.117,231.407 985.685,230.369 986.253,230.547 986.822,232.728 987.39,235.976 987.959,236.881 988.527,236.763 989.095,234.268 989.664,235.098 990.232,234.615 990.8,233.248 991.369,233.248 991.937,235.132 992.505,235.957 993.074,234.461 993.642,233.3 994.21,231.15 994.779,232.31 995.347,230.121 995.915,230.163 996.484,229.326 997.052,231.29 997.62,232.224 998.189,233.283 998.757,232.088 999.325,233.171 999.894,234.077 1000.46,232.935 1001.03,229.675 1001.6,228.875 1002.17,227.979 1002.74,228.168 1003.3,228.422 1003.87,228.605 1004.44,227.948 1005.01,228.163 1005.58,230.418 1006.15,230.525 1006.71,229.663 1007.28,230.791 1007.85,229.931 1008.42,228.122 1008.99,232.563 1009.56,232.506 1010.12,234.59 1010.69,232.207 1011.26,233.076 1011.83,232.927 1012.4,235.884 1012.97,237.555 1013.53,236.105 1014.1,236.78 1014.67,236.485 1015.24,234.873 1015.81,235.602 1016.38,234.166 1016.94,235.911 1017.51,236.601 1018.08,239.149 1018.65,239.498 1019.22,237.718 1019.79,237.116 1020.35,237.741 1020.92,236.192 1021.49,233.813 1022.06,233.233 1022.63,232.827 1023.2,232.44 1023.76,230.107 1024.33,233.198 1024.9,233.856 1025.47,233.543 1026.04,234.115 1026.61,231.698 1027.17,230.569 1027.74,229.629 1028.31,228.45 1028.88,228.334 1029.45,230.339 1030.02,230.281 1030.58,230.098 1031.15,227.975 1031.72,226.062 1032.29,227.435 1032.86,226.687 1033.43,227.18 1033.99,227.525 1034.56,224.451 1035.13,225.871 1035.7,228.19 1036.27,232.381 1036.84,231.132 1037.4,230.021 1037.97,230.895 1038.54,228.909 1039.11,228.919 1039.68,232.097 1040.25,232.062 1040.81,233.101 1041.38,232.843 1041.95,232.669 1042.52,232.473 1043.09,234.364 1043.66,232.926 1044.22,233.737 1044.79,232.425 1045.36,229.122 1045.93,229.112 1046.5,229.335 1047.07,227.421 1047.63,226.53 1048.2,225.834 1048.77,226.071 1049.34,224.457 1049.91,222.858 1050.48,225.556 1051.05,226.996 1051.61,228.339 1052.18,227.578 1052.75,229.968 1053.32,230.078 1053.89,228.066 1054.46,228.161 1055.02,230.637 1055.59,230.665 1056.16,232.716 1056.73,232.624 1057.3,233.73 1057.87,234.574 1058.43,232.226 1059,232.986 1059.57,231.756 1060.14,229.459 1060.71,229.465 1061.28,228.469 1061.84,230.68 1062.41,229.821 1062.98,229.756 1063.55,229.791 1064.12,229.677 1064.69,229.758 1065.25,229.631 1065.82,229.792 1066.39,229.921 1066.96,227.794 1067.53,228.071 1068.1,227.15 1068.66,227.63 1069.23,227.749 1069.8,226.694 1070.37,226.954 1070.94,226.207 1071.51,226.189 1072.07,226.446 1072.64,225.802 1073.21,226.259 1073.78,224.418 1074.35,224.035 1074.92,225.618 1075.48,225.033 1076.05,227.518 1076.62,227.751 1077.19,228.21 1077.76,230.356 1078.33,229.33 1078.89,228.219 1079.46,228.565 1080.03,228.893 1080.6,229.227 1081.17,229.452 1081.74,229.508 1082.3,229.632 1082.87,230.792 1083.44,233.865 1084.01,231.609 1084.58,231.834 1085.15,231.654 1085.71,231.672 1086.28,231.571 1086.85,230.541 1087.42,230.439 1087.99,231.182 1088.56,228.996 1089.12,229.151 1089.69,229.377 1090.26,229.629 1090.83,229.956 1091.4,230.081 1091.97,229.242 1092.53,229.488 1093.1,230.622 1093.67,229.514 1094.24,228.48 1094.81,231.734 1095.38,229.72 1095.94,229.727 1096.51,229.895 1097.08,229.775 1097.65,232.905 1098.22,234.776 1098.79,232.435 1099.35,231.412 1099.92,229.195 1100.49,228.297 1101.06,228.789 1101.63,229.049 1102.2,227.167 1102.76,229.613 1103.33,233.885 1103.9,235.641 1104.47,234.26 1105.04,233.082 1105.61,233.922 1106.17,231.668 1106.74,231.709 1107.31,231.847 1107.88,231.827 1108.45,229.971 1109.02,230.152 1109.58,230.455 1110.15,229.439 1110.72,229.769 1111.29,226.926 1111.86,230.585 1112.43,232.35 1112.99,232.268 1113.56,232.121 1114.13,233.134 1114.7,233.059 1115.27,233.992 1115.84,232.701 1116.4,235.798 1116.97,234.552 1117.54,233.495 1118.11,231.273 1118.68,230.378 1119.25,229.512 1119.81,231.589 1120.38,229.529 1120.95,230.503 1121.52,230.452 1122.09,229.267 1122.66,232.495 1123.23,231.251 1123.79,233.293 1124.36,233.027 1124.93,232.806 1125.5,231.79 1126.07,232.724 1126.64,230.479 1127.2,232.653 1127.77,233.437 1128.34,232.082 1128.91,230.732 1129.48,231.681 1130.05,230.589 1130.61,235.586 1131.18,235.366 1131.75,237.055 1132.32,235.332 1132.89,232.877 1133.46,233.646 1134.02,232.38 1134.59,232.277 1135.16,231.141 1135.73,232.058 1136.3,233.044 1136.87,233.827 1137.43,233.659 1138,231.315 1138.57,230.252 1139.14,232.321 1139.71,233.489 1140.28,232.513 1140.84,234.426 1141.41,234.008 1141.98,232.74 1142.55,232.497 1143.12,233.513 1143.69,233.169 1144.25,234.076 1144.82,234.57 1145.39,235.216 1145.96,236.885 1146.53,236.228 1147.1,234.833 1147.66,234.415 1148.23,235.19 1148.8,234.023 1149.37,234.643 1149.94,234.033 1150.51,231.446 1151.07,232.228 1151.64,231.155 1152.21,232.976 1152.78,234.564 1153.35,232.135 1153.92,232.782 1154.48,231.477 1155.05,232.292 1155.62,233.901 1156.19,234.71 1156.76,234.152 1157.33,234.955 1157.89,236.465 1158.46,234.765 1159.03,235.109 1159.6,234.645 1160.17,235.194 1160.74,233.487 1161.3,232.898 1161.87,231.793 1162.44,232.417 1163.01,230.964 1163.58,230.675 1164.15,231.466 1164.71,230.105 1165.28,228.811 1165.85,226.781 1166.42,223.662 1166.99,223.032 1167.56,224.51 1168.12,224.6 1168.69,223.744 1169.26,224.929 1169.83,226.374 1170.4,225.529 1170.97,225.719 1171.53,225.92 1172.1,223.067 1172.67,226.448 1173.24,227.576 1173.81,226.786 1174.38,226.671 1174.94,226.768 1175.51,226.901 1176.08,226.913 1176.65,226.051 1177.22,229.43 1177.79,231.639 1178.35,231.482 1178.92,231.457 1179.49,231.304 1180.06,231.059 1180.63,231.145 1181.2,232.084 1181.76,232.206 1182.33,232.079 1182.9,234.119 1183.47,234.583 1184.04,232.827 1184.61,231.554 1185.17,230.15 1185.74,228.328 1186.31,227.357 1186.88,226.415 1187.45,224.658 1188.02,224.937 1188.58,224.201 1189.15,226.647 1189.72,228.851 1190.29,228 1190.86,229.136 1191.43,226.943 1192,228.39 1192.56,229.549 1193.13,228.535 1193.7,227.56 1194.27,226.604 1194.84,226.885 1195.41,226.099 1195.97,227.289 1196.54,227.585 1197.11,225.622 1197.68,228.997 1198.25,230.076 1198.82,231.03 1199.38,232.332 1199.95,232.263 1200.52,233.093 1201.09,232.836 1201.66,233.408 1202.23,234.074 1202.79,237.825 1203.36,235.239 1203.93,235.759 1204.5,236.383 1205.07,233.628 1205.64,233.29 1206.2,234.216 1206.77,233.871 1207.34,231.619 1207.91,231.304 1208.48,230.256 1209.05,230.154 1209.61,228.019 1210.18,228.124 1210.75,230.191 1211.32,231.979 1211.89,230.819 1212.46,230.539 1213.02,228.435 1213.59,228.499 1214.16,227.569 1214.73,228.795 1215.3,227.785 1215.87,225.854 1216.43,227.103 1217,226.221 1217.57,228.542 1218.14,229.601 1218.71,228.622 1219.28,228.834 1219.84,229.021 1220.41,229.061 1220.98,228.138 1221.55,226.29 1222.12,225.534 1222.69,222.843 1223.25,224.39 1223.82,222.86 1224.39,222.631 1224.96,224.12 1225.53,226.616 1226.1,225.865 1226.66,227.398 1227.23,228.572 1227.8,229.591 1228.37,232.706 1228.94,233.823 1229.51,233.506 1230.07,232.349 1230.64,231.058 1231.21,230.012 1231.78,231.212 1232.35,233.491 1232.92,232.335 1233.48,233.282 1234.05,234.203 1234.62,232.022 1235.19,232.798 1235.76,230.514 1236.33,233.838 1236.89,236.52 1237.46,235.193 1238.03,232.532 1238.6,233.375 1239.17,233.325 1239.74,231.844 1240.3,229.81 1240.87,229.831 1241.44,230.022 1242.01,228.067 1242.58,226.356 1243.15,226.608 1243.71,226.948 1244.28,227.143 1244.85,227.39 1245.42,228.587 1245.99,228.509 1246.56,226.687 1247.12,228.082 1247.69,229.352 1248.26,228.449 1248.83,230.796 1249.4,229.855 1249.97,229.81 1250.53,227.727 1251.1,227.805 1251.67,227.951 1252.24,227.981 1252.81,228.2 1253.38,231.479 1253.94,229.362 1254.51,230.415 1255.08,230.343 1255.65,232.581 1256.22,231.438 1256.79,230.501 1257.35,230.65 1257.92,231.801 1258.49,233.729 1259.06,235.432 1259.63,236.268 1260.2,237.921 1260.76,237.493 1261.33,236.978 1261.9,235.398 1262.47,233.805 1263.04,231.543 1263.61,231.539 1264.18,231.327 1264.74,231.277 1265.31,230.108 1265.88,228.987 1266.45,230.331 1267.02,229.145 1267.59,229.303 1268.15,229.2 1268.72,229.279 1269.29,230.448 1269.86,231.527 1270.43,230.494 1271,229.447 1271.56,231.604 1272.13,229.353 1272.7,229.782 1273.27,228.624 1273.84,229.613 1274.41,228.876 1274.97,228.957 1275.54,229 1276.11,229.227 1276.68,231.421 1277.25,230.279 1277.82,230.33 1278.38,232.317 1278.95,229.99 1279.52,229.853 1280.09,230.916 1280.66,228.033 1281.23,228.408 1281.79,229.797 1282.36,230.955 1282.93,230.968 1283.5,231.898 1284.07,231.633 1284.64,229.64 1285.2,229.588 1285.77,227.679 1286.34,227.716 1286.91,226.811 1287.48,226.993 1288.05,226.243 1288.61,226.583 1289.18,228.101 1289.75,227.346 1290.32,227.798 1290.89,227.082 1291.46,227.329 1292.02,228.621 1292.59,229.684 1293.16,229.875 1293.73,231.026 1294.3,231.873 1294.87,232.922 1295.43,231.945 1296,230.647 1296.57,231.791 1297.14,230.624 1297.71,232.456 1298.28,232.038 1298.84,232.986 1299.41,232.907 1299.98,233.849 1300.55,233.604 1301.12,233.497 1301.69,232.432 1302.25,232.454 1302.82,232.3 1303.39,233.195 1303.96,232.967 1304.53,231.645 1305.1,231.429 1305.66,230.148 1306.23,229.229 1306.8,231.421 1307.37,230.24 1307.94,229.292 1308.51,230.384 1309.07,228.052 1309.64,228.108 1310.21,229.178 1310.78,228.161 1311.35,227.181 1311.92,227.57 1312.48,228.689 1313.05,227.774 1313.62,227.116 1314.19,227.586 1314.76,226.776 1315.33,227.857 1315.89,231.046 1316.46,232.087 1317.03,234.145 1317.6,233.937 1318.17,233.708 1318.74,234.684 1319.3,233.552 1319.87,232.591 1320.44,231.449 1321.01,230.218 1321.58,228.275 1322.15,227.494 1322.71,223.59 1323.28,223.248 1323.85,224.872 1324.42,227.322 1324.99,227.574 1325.56,227.818 1326.12,227.02 1326.69,228.326 1327.26,229.486 1327.83,228.585 1328.4,228.689 1328.97,229.861 1329.53,230.799 1330.1,232.893 1330.67,233.872 1331.24,233.539 1331.81,234.361 1332.38,234.048 1332.94,233.883 1333.51,233.322 1334.08,233.06 1334.65,232.035 1335.22,230.912 1335.79,232.076 1336.36,232.231 1336.92,231.235 1337.49,230.173 1338.06,230.155 1338.63,226.014 1339.2,226.575 1339.77,230.093 1340.33,231.412 1340.9,232.316 1341.47,232.114 1342.04,231.257 1342.61,230.332 1343.18,231.387 1343.74,231.304 1344.31,232.251 1344.88,236.317 1345.45,235.951 1346.02,236.855 1346.59,236.314 1347.15,234.619 1347.72,233.207 1348.29,233.085 1348.86,231.801 1349.43,231.609 1350,232.634 1350.56,231.307 1351.13,231.293 1351.7,232.076 1352.27,233.104 1352.84,229.767 1353.41,230.74 1353.97,233.53 1354.54,232.153 1355.11,230.101 1355.68,230.286 1356.25,230.291 1356.82,231.238 1357.38,231.163 1357.95,228.874 1358.52,227.092 1359.09,228.28 1359.66,228.527 1360.23,230.457 1360.79,230.524 1361.36,233.647 1361.93,232.325 1362.5,233.142 1363.07,230.803 1363.64,231.913 1364.2,230.677 1364.77,229.764 1365.34,229.886 1365.91,229.052 1366.48,225.039 1367.05,225.251 1367.61,224.53 1368.18,225.055 1368.75,226.58 1369.32,224.774 1369.89,224.205 1370.46,226.868 1371.02,226.217 1371.59,226.741 1372.16,227.22 1372.73,227.719 1373.3,226.853 1373.87,228.097 1374.43,229.326 1375,231.449 1375.57,232.295 1376.14,229.989 1376.71,230.092 1377.28,229.966 1377.84,228.218 1378.41,228.392 1378.98,227.562 1379.55,225.887 1380.12,228.335 1380.69,229.643 1381.25,231.951 1381.82,230.758 1382.39,230.764 1382.96,230.615 1383.53,231.658 1384.1,230.584 1384.66,229.595 1385.23,230.819 1385.8,231.129 1386.37,234.096 1386.94,233.646 1387.51,230.436 1388.07,231.59 1388.64,231.699 1389.21,231.686 1389.78,231.667 1390.35,231.7 1390.92,231.694 1391.48,230.634 1392.05,232.528 1392.62,231.36 1393.19,230.338 1393.76,230.388 1394.33,229.171 1394.89,230.463 1395.46,229.28 1396.03,228.475 1396.6,228.693 1397.17,228.793 1397.74,228.856 1398.3,227.049 1398.87,229.402 1399.44,229.382 1400.01,229.521 1400.58,230.787 1401.15,229.793 1401.71,228.976 1402.28,230.185 1402.85,231.465 1403.42,232.416 1403.99,232.414 1404.56,232.33 1405.13,231.34 1405.69,232.35 1406.26,232.465 1406.83,230.342 1407.4,231.317 1407.97,231.331 1408.54,231.344 1409.1,230.341 1409.67,230.312 1410.24,229.264 1410.81,226.134 1411.38,225.455 1411.95,226.971 1412.51,228.212 1413.08,230.591 1413.65,227.738 1414.22,229.011 1414.79,229.138 1415.36,229.314 1415.92,226.405 1416.49,228.743 1417.06,229.231 1417.63,227.303 1418.2,227.709 1418.77,230.109 1419.33,231.287 1419.9,231.035 1420.47,232.172 1421.04,233.078 1421.61,231.868 1422.18,235.082 1422.74,234.745 1423.31,235.625 1423.88,234.243 1424.45,234.922 1425.02,233.416 1425.59,232.086 1426.15,232.706 1426.72,234.714 1427.29,236.46 1427.86,235.055 1428.43,234.817 1429,234.511 1429.56,235.103 1430.13,233.563 1430.7,232.414 1431.27,232.185 1431.84,233.866 1432.41,234.624 1432.97,234.291 1433.54,234.004 1434.11,233.741 1434.68,232.282 1435.25,231.294 1435.82,231.233 1436.38,230.131 1436.95,227.226 1437.52,226.313 1438.09,228.507 1438.66,226.462 1439.23,225.806 1439.79,226.038 1440.36,228.266 1440.93,228.317 1441.5,226.403 1442.07,223.716 1442.64,223.223 1443.2,222.633 1443.77,223.314 1444.34,225.087 1444.91,225.373 1445.48,224.571 1446.05,225.176 1446.61,227.517 1447.18,226.789 1447.75,228.238 1448.32,230.415 1448.89,230.263 1449.46,229.295 1450.02,228.531 1450.59,229.878 1451.16,229.117 1451.73,228.302 1452.3,229.775 1452.87,230.628 1453.43,229.825 1454,232.018 1454.57,234.193 1455.14,234.091 1455.71,232.78 1456.28,230.492 1456.84,229.362 1457.41,229.376 1457.98,230.615 1458.55,228.628 1459.12,230.753 1459.69,230.722 1460.25,230.701 1460.82,231.804 1461.39,231.652 1461.96,232.661 1462.53,231.277 1463.1,230.17 1463.66,230.204 1464.23,229.896 1464.8,229.945 1465.37,229.022 1465.94,231.115 1466.51,232.319 1467.07,233.394 1467.64,234.245 1468.21,232.073 1468.78,231.064 1469.35,231.092 1469.92,230.973 1470.48,228.962 1471.05,230.18 1471.62,231.023 1472.19,229.878 1472.76,231.174 1473.33,234.213 1473.89,231.113 1474.46,231.183 1475.03,230.109 1475.6,231.134 1476.17,230.012 1476.74,229.083 1477.31,229.102 1477.87,227.127 1478.44,227.372 1479.01,229.809 1479.58,229.746 1480.15,226.62 1480.72,228.181 1481.28,227.755 1481.85,225.842 1482.42,225.154 1482.99,225.452 1483.56,227.07 1484.13,225.371 1484.69,226.651 1485.26,226.798 1485.83,227.151 1486.4,229.465 1486.97,228.765 1487.54,227.157 1488.1,226.484 1488.67,226.809 1489.24,227.444 1489.81,229.805 1490.38,228.989 1490.95,229.411 1491.51,228.389 1492.08,227.595 1492.65,229.852 1493.22,230.111 1493.79,231.204 1494.36,230.195 1494.92,231.26 1495.49,229.198 1496.06,229.425 1496.63,228.579 1497.2,228.914 1497.77,229.262 1498.33,226.33 1498.9,224.602 1499.47,223.199 1500.04,223.795 1500.61,223.405 1501.18,224.196 1501.74,225.819 1502.31,229.32 1502.88,230.573 1503.45,232.009 1504.02,233.169 1504.59,233.006 1505.15,233.938 1505.72,234.994 1506.29,236.001 1506.86,236.624 1507.43,236.271 1508,237.998 1508.56,237.809 1509.13,236.273 1509.7,236.917 1510.27,238.463 1510.84,238.872 1511.41,238.289 1511.97,239.186 1512.54,237.679 1513.11,238.123 1513.68,238.87 1514.25,238.419 1514.82,241.889 1515.38,243.095 1515.95,242.18 1516.52,242.288 1517.09,240.289 1517.66,238.512 1518.23,239.951 1518.79,240.481 1519.36,238.622 1519.93,240.957 1520.5,241.395 1521.07,239.624 1521.64,241.942 1522.2,241.168 1522.77,243.283 1523.34,241.97 1523.91,243.065 1524.48,241.788 1525.05,240.012 1525.61,238.123 1526.18,238.445 1526.75,236.385 1527.32,235.674 1527.89,233.825 1528.46,233.315 1529.02,232.913 1529.59,231.566 1530.16,232.351 1530.73,230.074 1531.3,229.819 1531.87,231.777 1532.43,229.504 1533,229.292 1533.57,227.132 1534.14,228.104 1534.71,226.868 1535.28,224.797 1535.84,221.634 1536.41,222.009 1536.98,223.513 1537.55,225.759 1538.12,221.781 1538.69,222.254 1539.25,222.707 1539.82,224.12 1540.39,226.413 1540.96,226.415 1541.53,225.661 1542.1,228.002 1542.66,228.123 1543.23,227.353 1543.8,227.508 1544.37,226.668 1544.94,227.777 1545.51,229.014 1546.08,229.946 1546.64,227.76 1547.21,226.844 1547.78,229.038 1548.35,226.751 1548.92,226.876 1549.49,227.026 1550.05,227.233 1550.62,229.392 1551.19,229.223 1551.76,230.38 1552.33,228.289 1552.9,228.561 1553.46,228.804 1554.03,228.879 1554.6,230.967 1555.17,231.79 1555.74,230.483 1556.31,230.482 1556.87,228.254 1557.44,226.466 1558.01,225.636 1558.58,225.034 1559.15,225.489 1559.72,225.779 1560.28,228.138 1560.85,231.289 1561.42,230.319 1561.99,230.361 1562.56,228.262 1563.13,226.441 1563.69,224.566 1564.26,226.21 1564.83,226.587 1565.4,226.999 1565.97,227.38 1566.54,229.966 1567.1,231.016 1567.67,229.998 1568.24,231.058 1568.81,229.074 1569.38,228.001 1569.95,230.112 1570.51,231.191 1571.08,228.174 1571.65,228.341 1572.22,227.355 1572.79,227.42 1573.36,229.587 1573.92,230.532 1574.49,231.756 1575.06,230.681 1575.63,230.469 1576.2,231.561 1576.77,230.321 1577.33,232.347 1577.9,231.262 1578.47,234.272 1579.04,234.799 1579.61,234.333 1580.18,234.12 1580.74,234.985 1581.31,235.775 1581.88,236.611 1582.45,235.135 1583.02,234.707 1583.59,233.266 1584.15,232.035 1584.72,232.914 1585.29,234.609 1585.86,233.496 1586.43,234.211 1587,232.611 1587.56,232.479 1588.13,232.23 1588.7,232.018 1589.27,230.814 1589.84,230.795 1590.41,229.719 1590.97,229.707 1591.54,229.556 1592.11,227.312 1592.68,225.475 1593.25,225.739 1593.82,226.003 1594.38,226.283 1594.95,226.729 1595.52,229.012 1596.09,230.041 1596.66,229.093 1597.23,228.179 1597.79,228.227 1598.36,228.44 1598.93,228.407 1599.5,226.34 1600.07,226.334 1600.64,226.959 1601.2,226.133 1601.77,227.282 1602.34,231.544 1602.91,232.531 1603.48,231.193 1604.05,231.189 1604.61,231.081 1605.18,229.978 1605.75,228.722 1606.32,228.93 1606.89,229.842 1607.46,228.893 1608.02,229.927 1608.59,229.827 1609.16,230.754 1609.73,229.479 1610.3,229.604 1610.87,229.744 1611.43,230.96 1612,230.718 1612.57,230.61 1613.14,229.286 1613.71,229.534 1614.28,230.485 1614.84,229.496 1615.41,232.588 1615.98,232.592 1616.55,233.143 1617.12,231.898 1617.69,229.842 1618.26,230.737 1618.82,229.645 1619.39,229.766 1619.96,229.889 1620.53,225.772 1621.1,222.983 1621.67,224.461 1622.23,224.826 1622.8,225.038 1623.37,225.313 1623.94,225.877 1624.51,226.131 1625.08,224.446 1625.64,224.002 1626.21,222.28 1626.78,219.895 1627.35,220.824 1627.92,223.527 1628.49,226.436 1629.05,227.845 1629.62,230.124 1630.19,232.434 1630.76,232.426 1631.33,231.428 1631.9,230.328 1632.46,230.363 1633.03,229.491 1633.6,231.543 1634.17,232.643 1634.74,230.618 1635.31,230.668 1635.87,231.845 1636.44,230.65 1637.01,230.583 1637.58,231.606 1638.15,229.515 1638.72,231.598 1639.28,230.719 1639.85,232.048 1640.42,232.198 1640.99,234.174 1641.56,234.133 1642.13,233.16 1642.69,232.872 1643.26,232.784 1643.83,231.923 1644.4,233.919 1644.97,234.583 1645.54,234.341 1646.1,237.261 1646.67,238.773 1647.24,236.904 1647.81,238.429 1648.38,237.966 1648.95,235.246 1649.51,236.111 1650.08,235.631 1650.65,237.122 1651.22,234.475 1651.79,233.986 1652.36,234.908 1652.92,233.457 1653.49,231.89 1654.06,231.43 1654.63,230.395 1655.2,227.486 1655.77,231.766 1656.33,229.622 1656.9,230.665 1657.47,231.585 1658.04,229.431 1658.61,230.499 1659.18,230.146 1659.74,230.148 1660.31,230.129 1660.88,230.057 1661.45,230.005 1662.02,231.101 1662.59,230.148 1663.15,234.235 1663.72,233.664 1664.29,233.262 1664.86,231.722 1665.43,232.587 1666,232.576 1666.56,230.31 1667.13,230.108 1667.7,230.247 1668.27,230.043 1668.84,228.026 1669.41,229.004 1669.97,231.223 1670.54,233.145 1671.11,232.904 1671.68,234.854 1672.25,233.539 1672.82,233.122 1673.38,231.694 1673.95,231.43 1674.52,230.506 1675.09,229.45 1675.66,228.394 1676.23,229.281 1676.79,230.367 1677.36,231.189 1677.93,230.894 1678.5,230.821 1679.07,231.664 1679.64,229.383 1680.2,229.507 1680.77,228.499 1681.34,227.657 1681.91,227.85 1682.48,228.03 1683.05,227.073 1683.61,228.33 1684.18,228.56 1684.75,227.562 1685.32,229.75 1685.89,227.74 1686.46,226.936 1687.02,226.885 1687.59,229.158 1688.16,230.013 1688.73,226.906 1689.3,225.927 1689.87,228.438 1690.44,230.669 1691,232.715 1691.57,231.577 1692.14,231.293 1692.71,232.152 1693.28,231.811 1693.85,231.406 1694.41,230.46 1694.98,231.473 1695.55,232.444 1696.12,232.192 1696.69,230.961 1697.26,229.659 1697.82,228.406 1698.39,226.483 1698.96,223.592 1699.53,222.848 1700.1,223.367 1700.67,223.654 1701.23,226.354 1701.8,227.638 1702.37,229.761 1702.94,229.889 1703.51,230.02 1704.08,228.974 1704.64,227.789 1705.21,227.928 1705.78,230.141 1706.35,231.247 1706.92,232.309 1707.49,231.132 1708.05,230.249 1708.62,229.29 1709.19,229.333 1709.76,228.372 1710.33,228.479 1710.9,228.747 1711.46,231.811 1712.03,233.815 1712.6,234.729 1713.17,238.578 1713.74,238.412 1714.31,240.841 1714.87,238.041 1715.44,236.643 1716.01,235.096 1716.58,234.689 1717.15,231.165 1717.72,232.114 1718.28,231.859 1718.85,233.727 1719.42,231.288 1719.99,230.125 1720.56,230.299 1721.13,229.179 1721.69,229.236 1722.26,228.259 1722.83,229.513 1723.4,230.657 1723.97,229.951 1724.54,229.029 1725.1,229.232 1725.67,229.309 1726.24,229.233 1726.81,230.442 1727.38,230.241 1727.95,228.17 1728.51,228.408 1729.08,229.599 1729.65,229.679 1730.22,225.913 1730.79,225.307 1731.36,225.642 1731.92,226.85 1732.49,228.062 1733.06,227.907 1733.63,229.117 1734.2,230.331 1734.77,231.387 1735.33,232.23 1735.9,230.909 1736.47,229.55 1737.04,229.625 1737.61,229.904 1738.18,228.859 1738.74,229.386 1739.31,229.401 1739.88,230.585 1740.45,231.823 1741.02,231.708 1741.59,233.808 1742.15,233.36 1742.72,232.184 1743.29,232.096 1743.86,232.106 1744.43,235.235 1745,235.166 1745.56,234.846 1746.13,233.641 1746.7,230.421 1747.27,229.28 1747.84,230.351 1748.41,229.376 1748.97,229.336 1749.54,227.442 1750.11,225.643 1750.68,227.019 1751.25,228.258 1751.82,229.152 1752.38,228.078 1752.95,229.157 1753.52,229.135 1754.09,228.089 1754.66,227.214 1755.23,229.565 1755.79,230.679 1756.36,231.684 1756.93,233.702 1757.5,233.528 1758.07,233.301 1758.64,235.184 1759.21,233.764 1759.77,234.244 1760.34,232.981 1760.91,234.933 1761.48,237.564 1762.05,235.954 1762.62,235.625 1763.18,233.322 1763.75,235.085 1764.32,233.541 1764.89,234.07 1765.46,233.708 1766.03,231.494 1766.59,231.401 1767.16,231.173 1767.73,229.964 1768.3,230.024 1768.87,230.061 1769.44,229.976 1770,231.048 1770.57,230.95 1771.14,229.627 1771.71,230.613 1772.28,230.357 1772.85,231.531 1773.41,231.501 1773.98,231.415 1774.55,230.272 1775.12,230.156 1775.69,230.829 1776.26,231.857 1776.82,230.631 1777.39,229.488 1777.96,229.446 1778.53,228.43 1779.1,224.461 1779.67,222.718 1780.23,224.107 1780.8,223.409 1781.37,225.814 1781.94,227.367 1782.51,226.55 1783.08,223.611 1783.64,224.896 1784.21,225.4 1784.78,227.901 1785.35,225.724 1785.92,227.105 1786.49,228.265 1787.05,228.653 1787.62,227.854 1788.19,227.092 1788.76,229.491 1789.33,229.62 1789.9,230.588 1790.46,229.502 1791.03,229.542 1791.6,230.486 1792.17,231.348 1792.74,233.631 1793.31,233.357 1793.87,231.105 1794.44,229.221 1795.01,227.296 1795.58,228.893 1796.15,229.224 1796.72,230.541 1797.28,228.67 1797.85,228.753 1798.42,227.827 1798.99,230.135 1799.56,228.991 1800.13,230.158 1800.69,230.242 1801.26,227.153 1801.83,229.568 1802.4,228.667 1802.97,227.707 1803.54,225.962 1804.1,225.483 1804.67,227.173 1805.24,226.531 1805.81,226.729 1806.38,228.297 1806.95,229.653 1807.51,230.584 1808.08,231.873 1808.65,232.962 1809.22,232.01 1809.79,231.891 1810.36,232.051 1810.92,232.77 1811.49,233.674 1812.06,231.514 1812.63,230.503 1813.2,228.679 1813.77,230.104 1814.33,231.335 1814.9,231.438 1815.47,233.495 1816.04,233.215 1816.61,232.933 1817.18,231.769 1817.74,232.828 1818.31,232.91 1818.88,231.653 1819.45,230.567 1820.02,229.512 1820.59,231.637 1821.15,232.394 1821.72,234.492 1822.29,234.213 1822.86,233.02 1823.43,232.094 1824,231.956 1824.56,231.96 1825.13,234.963 1825.7,233.188 1826.27,230.005 1826.84,228.916 1827.41,230.02 1827.97,231.045 1828.54,230.973 1829.11,232.477 1829.68,230.365 1830.25,230.17 1830.82,230.135 1831.39,231.087 1831.95,229.876 1832.52,230.796 1833.09,229.896 1833.66,230.009 1834.23,228.928 1834.8,230.063 1835.36,228.031 1835.93,227.456 1836.5,229.674 1837.07,230.85 1837.64,229.77 1838.21,229.115 1838.77,229.243 1839.34,229.495 1839.91,228.656 1840.48,227.629 1841.05,224.701 1841.62,226.135 1842.18,228.454 1842.75,227.663 1843.32,226.694 1843.89,226.715 1844.46,225.848 1845.03,226.177 1845.59,224.547 1846.16,225.107 1846.73,227.582 1847.3,227.652 1847.87,228.852 1848.44,230.071 1849,228.878 1849.57,230.034 1850.14,231.999 1850.71,232.974 1851.28,230.61 1851.85,229.609 1852.41,231.72 1852.98,232.679 1853.55,233.578 1854.12,234.546 1854.69,235.412 1855.26,236.093 1855.82,235.831 1856.39,234.626 1856.96,233.589 1857.53,234.563 1858.1,234.34 1858.67,232.048 1859.23,231.801 1859.8,233.747 1860.37,232.584 1860.94,230.547 1861.51,231.524 1862.08,231.316 1862.64,231.124 1863.21,229.805 1863.78,229.723 1864.35,228.676 1864.92,228.04 1865.49,226.172 1866.05,228.282 1866.62,227.48 1867.19,227.778 1867.76,228.071 1868.33,229.263 1868.9,229.442 1869.46,228.423 1870.03,230.662 1870.6,231.778 1871.17,232.852 1871.74,232.601 1872.31,232.521 1872.87,230.413 1873.44,230.268 1874.01,230.341 1874.58,230.407 1875.15,229.272 1875.72,227.239 1876.28,226.36 1876.85,226.557 1877.42,226.742 1877.99,228.023 1878.56,227.072 1879.13,229.294 1879.69,228.334 1880.26,229.666 1880.83,229.715 1881.4,230.666 1881.97,227.554 1882.54,226.599 1883.1,226 1883.67,227.426 1884.24,228.689 1884.81,228.916 1885.38,229.271 1885.95,229.469 1886.51,229.66 1887.08,229.721 1887.65,232.968 1888.22,233.918 1888.79,232.533 1889.36,232.45 1889.92,232.278 1890.49,232.332 1891.06,236.326 1891.63,234.121 1892.2,231.763 1892.77,232.794 1893.33,233.766 1893.9,235.721 1894.47,233.362 1895.04,234.091 1895.61,234.119 1896.18,232.928 1896.74,233.01 1897.31,232.608 1897.88,232.327 1898.45,233.219 1899.02,235.05 1899.59,233.78 1900.16,233.692 1900.72,234.541 1901.29,233.049 1901.86,230.975 1902.43,231.958 1903,233.954 1903.57,232.574 1904.13,230.259 1904.7,232.254 1905.27,229.065 1905.84,231.467 1906.41,230.214 1906.98,231.358 1907.54,232.377 1908.11,233.309 1908.68,233.169 1909.25,235.08 1909.82,233.437 1910.39,235.346 1910.95,237.037 1911.52,235.385 1912.09,233.857 1912.66,233.667 1913.23,233.491 1913.8,235.226 1914.36,232.677 1914.93,233.64 1915.5,233.24 1916.07,233.144 1916.64,233.759 1917.21,233.342 1917.77,229.906 1918.34,228.866 1918.91,227.875 1919.48,228.917 1920.05,229.011 1920.62,227.043 1921.18,227.339 1921.75,227.474 1922.32,227.569 1922.89,225.76 1923.46,224.969 1924.03,226.096 1924.59,223.418 1925.16,224.885 1925.73,225.135 1926.3,226.729 1926.87,225.877 1927.44,226.252 1928,224.602 1928.57,224.884 1929.14,226.198 1929.71,227.385 1930.28,227.506 1930.85,225.625 1931.41,224.973 1931.98,224.387 1932.55,221.706 1933.12,222.542 1933.69,223.182 1934.26,223.553 1934.82,225.236 1935.39,222.633 1935.96,224.403 1936.53,224.954 1937.1,225.39 1937.67,223.797 1938.23,224.355 1938.8,225.811 1939.37,225.209 1939.94,227.864 1940.51,228.242 1941.08,225.619 1941.64,226.055 1942.21,224.443 1942.78,224.911 1943.35,225.441 1943.92,225.881 1944.49,227.492 1945.05,231.051 1945.62,232.245 1946.19,234.209 1946.76,235.299 1947.33,234.36 1947.9,236.425 1948.46,235.185 1949.03,235.034 1949.6,234.967 1950.17,234.719 1950.74,234.447 1951.31,236.246 1951.87,235.963 1952.44,235.798 1953.01,234.507 1953.58,233.28 1954.15,234.175 1954.72,233.976 1955.28,233.79 1955.85,233.903 1956.42,232.665 1956.99,232.652 1957.56,234.559 1958.13,233.365 1958.69,232.042 1959.26,231.908 1959.83,233.907 1960.4,233.442 1960.97,233.204 1961.54,235.043 1962.1,234.722 1962.67,233.428 1963.24,234.402 1963.81,234.266 1964.38,234.001 1964.95,234.833 1965.51,233.357 1966.08,234.036 1966.65,233.523 1967.22,231.162 1967.79,233.146 1968.36,233.198 1968.92,233.978 1969.49,232.517 1970.06,234.379 1970.63,235.074 1971.2,235.749 1971.77,235.123 1972.34,236.861 1972.9,235.385 1973.47,234.928 1974.04,233.602 1974.61,232.195 1975.18,232.963 1975.75,232.689 1976.31,231.238 1976.88,231.847 1977.45,231.345 1978.02,234.133 1978.59,232.72 1979.16,231.509 1979.72,230.441 1980.29,229.425 1980.86,227.305 1981.43,227.528 1982,227.589 1982.57,227.675 1983.13,227.752 1983.7,227.645 1984.27,226.819 1984.84,226.931 1985.41,227.041 1985.98,228.398 1986.54,227.434 1987.11,226.384 1987.68,225.349 1988.25,226.636 1988.82,224.786 1989.39,227.444 1989.95,225.692 1990.52,226.069 1991.09,226.386 1991.66,227.645 1992.23,227.884 1992.8,224.983 1993.36,226.233 1993.93,227.305 1994.5,228.444 1995.07,227.72 1995.64,227.717 1996.21,229.155 1996.77,230.216 1997.34,231.329 1997.91,230.527 1998.48,230.761 1999.05,231.967 1999.62,231.847 2000.18,232.781 2000.75,232.887 2001.32,233.004 2001.89,232.773 2002.46,232.775 2003.03,231.474 2003.59,231.383 2004.16,229.272 2004.73,229.444 2005.3,230.653 2005.87,232.636 2006.44,232.491 2007,233.38 2007.57,232.313 2008.14,231.995 2008.71,232.97 2009.28,231.603 2009.85,231.669 2010.41,229.569 2010.98,231.601 2011.55,232.344 2012.12,233.072 2012.69,232.857 2013.26,232.553 2013.82,234.595 2014.39,235.528 2014.96,235.3 2015.53,233.88 2016.1,234.855 2016.67,235.599 2017.23,235.088 2017.8,234.646 2018.37,233.26 2018.94,230.11 2019.51,228.289 2020.08,231.58 2020.64,232.325 2021.21,232.278 2021.78,232.023 2022.35,230.908 2022.92,228.827 2023.49,228.878 2024.05,229.936 2024.62,230.007 2025.19,228.903 2025.76,229.872 2026.33,229.812 2026.9,229.861 2027.46,228.695 2028.03,229.75 2028.6,229.727 2029.17,231.83 2029.74,233.489 2030.31,231.157 2030.87,231.07 2031.44,230.922 2032.01,232.851 2032.58,232.656 2033.15,233.261 2033.72,233.111 2034.28,232.731 2034.85,231.456 2035.42,229.341 2035.99,232.079 2036.56,229.846 2037.13,227.743 2037.69,228.993 2038.26,229.915 2038.83,228.795 2039.4,228.871 2039.97,229.922 2040.54,229.804 2041.11,229.847 2041.67,230.894 2042.24,230.856 2042.81,230.976 2043.38,231.743 2043.95,231.57 2044.52,231.414 2045.08,232.007 2045.65,230.809 2046.22,229.617 2046.79,229.515 2047.36,230.659 2047.93,231.413 2048.49,228.111 2049.06,227.048 2049.63,228.145 2050.2,227.362 2050.77,226.597 2051.34,228.121 2051.9,229.372 2052.47,228.557 2053.04,228.618 2053.61,227.672 2054.18,226.826 2054.75,225.891 2055.31,225.107 2055.88,225.33 2056.45,225.709 2057.02,225.215 2057.59,224.392 2058.16,226.874 2058.72,227.963 2059.29,229.248 2059.86,231.225 2060.43,231.043 2061,231.173 2061.57,231.13 2062.13,232.042 2062.7,231.794 2063.27,232.737 2063.84,230.51 2064.41,233.637 2064.98,234.457 2065.54,234.454 2066.11,234.228 2066.68,232.775 2067.25,232.675 2067.82,230.311 2068.39,231.428 2068.95,231.219 2069.52,230.296 2070.09,229.351 2070.66,229.476 2071.23,231.553 2071.8,231.511 2072.36,230.388 2072.93,230.202 2073.5,228.194 2074.07,228.17 2074.64,228.426 2075.21,229.447 2075.77,230.596 2076.34,230.511 2076.91,229.51 2077.48,229.726 2078.05,229.643 2078.62,229.784 2079.18,230.02 2079.75,230.068 2080.32,226.068 2080.89,227.579 2081.46,227.578 2082.03,227.015 2082.59,227.266 2083.16,227.426 2083.73,226.485 2084.3,228.979 2084.87,230.039 2085.44,232.276 2086,231.118 2086.57,228.097 2087.14,229.291 2087.71,229.382 2088.28,229.422 2088.85,229.525 2089.41,228.494 2089.98,230.683 2090.55,232.09 2091.12,230.854 2091.69,230.943 2092.26,230.831 2092.82,231.906 2093.39,231.778 2093.96,229.79 2094.53,228.951 2095.1,231.165 2095.67,230.966 2096.23,229.932 2096.8,229.924 2097.37,230.779 2097.94,229.74 2098.51,228.898 2099.08,228.859 2099.64,230.051 2100.21,228.857 2100.78,230.168 2101.35,231.051 2101.92,231.146 2102.49,231.166 2103.05,232.215 2103.62,234.113 2104.19,232.754 2104.76,232.612 2105.33,232.494 2105.9,232.268 2106.46,231.03 2107.03,231.055 2107.6,230.983 2108.17,233.938 2108.74,234.664 2109.31,235.226 2109.87,237.963 2110.44,237.295 2111.01,235.821 2111.58,235.555 2112.15,233.095 2112.72,232.686 2113.29,232.623 2113.85,233.259 2114.42,234.25 2114.99,234.993 2115.56,236.489 2116.13,235.141 2116.7,235.552 2117.26,234.03 2117.83,232.657 2118.4,230.191 2118.97,228.033 2119.54,229.156 2120.11,226.929 2120.67,231.175 2121.24,232.068 2121.81,231.855 2122.38,228.611 2122.95,229.71 2123.52,231.617 2124.08,232.584 2124.65,233.186 2125.22,232.888 2125.79,233.523 2126.36,232.118 2126.93,231.763 2127.49,231.46 2128.06,233.341 2128.63,232.906 2129.2,233.536 2129.77,232.067 2130.34,234.803 2130.9,234.347 2131.47,234.726 2132.04,233.385 2132.61,232.049 2133.18,233.015 2133.75,232.766 2134.31,229.478 2134.88,228.446 2135.45,227.485 2136.02,226.444 2136.59,227.4 2137.16,227.749 2137.72,227.929 2138.29,227.976 2138.86,226.928 2139.43,224.98 2140,225.16 2140.57,224.511 2141.13,224.941 2141.7,227.279 2142.27,227.31 2142.84,225.412 2143.41,226.921 2143.98,226.97 2144.54,226.322 2145.11,227.493 2145.68,228.568 2146.25,229.861 2146.82,227.627 2147.39,226.847 2147.95,225.276 2148.52,227.456 2149.09,228.748 2149.66,228.874 2150.23,226.698 2150.8,225.084 2151.36,225.396 2151.93,225.694 2152.5,225.909 2153.07,226.461 2153.64,230.045 2154.21,230.011 2154.77,230.981 2155.34,232.787 2155.91,228.65 2156.48,228.756 2157.05,226.007 2157.62,226.442 2158.18,225.723 2158.75,228.314 2159.32,230.542 2159.89,229.5 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip130)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.022 ± 0.022\n  with uncertainty of ± 0.0019836865460582482\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01559 ± (0.00233274, 0.0025339) (MC)\n  95% confidence interval: [-4.0204, -4.01092] (MC)\n  linear error propagation: -4.01571 ± 0.00239124\n  |δ_y| = |0.0013857| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015593117977897, val_l = 0.004802314187553947, val_u = 0.004674042244925403)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip160\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip160)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip161\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip160)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip162\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1132.2 2211.02,1132.2 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,952.209 2211.02,952.209 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,772.221 2211.02,772.221 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,592.233 2211.02,592.233 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,412.246 2211.02,412.246 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,232.258 2211.02,232.258 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1132.2 365.751,1132.2 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,952.209 365.751,952.209 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,772.221 365.751,772.221 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,592.233 365.751,592.233 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,412.246 365.751,412.246 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,232.258 365.751,232.258 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M298.909 1118 Q295.298 1118 293.469 1121.56 Q291.664 1125.1 291.664 1132.23 Q291.664 1139.34 293.469 1142.9 Q295.298 1146.44 298.909 1146.44 Q302.543 1146.44 304.349 1142.9 Q306.177 1139.34 306.177 1132.23 Q306.177 1125.1 304.349 1121.56 Q302.543 1118 298.909 1118 M298.909 1114.29 Q304.719 1114.29 307.775 1118.9 Q310.853 1123.48 310.853 1132.23 Q310.853 1140.96 307.775 1145.56 Q304.719 1150.15 298.909 1150.15 Q293.099 1150.15 290.02 1145.56 Q286.964 1140.96 286.964 1132.23 Q286.964 1123.48 290.02 1118.9 Q293.099 1114.29 298.909 1114.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M259.557 965.554 L267.196 965.554 L267.196 939.188 L258.886 940.855 L258.886 936.596 L267.15 934.929 L271.826 934.929 L271.826 965.554 L279.465 965.554 L279.465 969.489 L259.557 969.489 L259.557 965.554 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M298.909 938.008 Q295.298 938.008 293.469 941.572 Q291.664 945.114 291.664 952.244 Q291.664 959.35 293.469 962.915 Q295.298 966.457 298.909 966.457 Q302.543 966.457 304.349 962.915 Q306.177 959.35 306.177 952.244 Q306.177 945.114 304.349 941.572 Q302.543 938.008 298.909 938.008 M298.909 934.304 Q304.719 934.304 307.775 938.91 Q310.853 943.494 310.853 952.244 Q310.853 960.97 307.775 965.577 Q304.719 970.16 298.909 970.16 Q293.099 970.16 290.02 965.577 Q286.964 960.97 286.964 952.244 Q286.964 943.494 290.02 938.91 Q293.099 934.304 298.909 934.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M262.775 785.566 L279.094 785.566 L279.094 789.501 L257.15 789.501 L257.15 785.566 Q259.812 782.811 264.395 778.182 Q269.002 773.529 270.182 772.186 Q272.428 769.663 273.307 767.927 Q274.21 766.168 274.21 764.478 Q274.21 761.724 272.266 759.987 Q270.344 758.251 267.242 758.251 Q265.043 758.251 262.59 759.015 Q260.159 759.779 257.381 761.33 L257.381 756.608 Q260.205 755.474 262.659 754.895 Q265.113 754.316 267.15 754.316 Q272.52 754.316 275.715 757.001 Q278.909 759.687 278.909 764.177 Q278.909 766.307 278.099 768.228 Q277.312 770.126 275.205 772.719 Q274.627 773.39 271.525 776.608 Q268.423 779.802 262.775 785.566 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M298.909 758.02 Q295.298 758.02 293.469 761.585 Q291.664 765.126 291.664 772.256 Q291.664 779.362 293.469 782.927 Q295.298 786.469 298.909 786.469 Q302.543 786.469 304.349 782.927 Q306.177 779.362 306.177 772.256 Q306.177 765.126 304.349 761.585 Q302.543 758.02 298.909 758.02 M298.909 754.316 Q304.719 754.316 307.775 758.923 Q310.853 763.506 310.853 772.256 Q310.853 780.983 307.775 785.589 Q304.719 790.172 298.909 790.172 Q293.099 790.172 290.02 785.589 Q286.964 780.983 286.964 772.256 Q286.964 763.506 290.02 758.923 Q293.099 754.316 298.909 754.316 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M272.914 590.879 Q276.27 591.597 278.145 593.865 Q280.043 596.134 280.043 599.467 Q280.043 604.583 276.525 607.384 Q273.006 610.185 266.525 610.185 Q264.349 610.185 262.034 609.745 Q259.742 609.328 257.289 608.472 L257.289 603.958 Q259.233 605.092 261.548 605.671 Q263.863 606.25 266.386 606.25 Q270.784 606.25 273.076 604.513 Q275.39 602.777 275.39 599.467 Q275.39 596.412 273.238 594.699 Q271.108 592.963 267.289 592.963 L263.261 592.963 L263.261 589.12 L267.474 589.12 Q270.923 589.12 272.752 587.754 Q274.58 586.365 274.58 583.773 Q274.58 581.111 272.682 579.699 Q270.807 578.264 267.289 578.264 Q265.367 578.264 263.168 578.68 Q260.969 579.097 258.33 579.977 L258.33 575.81 Q260.992 575.069 263.307 574.699 Q265.645 574.328 267.705 574.328 Q273.029 574.328 276.131 576.759 Q279.233 579.166 279.233 583.287 Q279.233 586.157 277.59 588.148 Q275.946 590.115 272.914 590.879 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M298.909 578.032 Q295.298 578.032 293.469 581.597 Q291.664 585.139 291.664 592.268 Q291.664 599.375 293.469 602.939 Q295.298 606.481 298.909 606.481 Q302.543 606.481 304.349 602.939 Q306.177 599.375 306.177 592.268 Q306.177 585.139 304.349 581.597 Q302.543 578.032 298.909 578.032 M298.909 574.328 Q304.719 574.328 307.775 578.935 Q310.853 583.518 310.853 592.268 Q310.853 600.995 307.775 605.601 Q304.719 610.185 298.909 610.185 Q293.099 610.185 290.02 605.601 Q286.964 600.995 286.964 592.268 Q286.964 583.518 290.02 578.935 Q293.099 574.328 298.909 574.328 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M271.594 399.04 L259.789 417.489 L271.594 417.489 L271.594 399.04 M270.367 394.966 L276.247 394.966 L276.247 417.489 L281.177 417.489 L281.177 421.378 L276.247 421.378 L276.247 429.526 L271.594 429.526 L271.594 421.378 L255.992 421.378 L255.992 416.864 L270.367 394.966 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M298.909 398.044 Q295.298 398.044 293.469 401.609 Q291.664 405.151 291.664 412.28 Q291.664 419.387 293.469 422.952 Q295.298 426.493 298.909 426.493 Q302.543 426.493 304.349 422.952 Q306.177 419.387 306.177 412.28 Q306.177 405.151 304.349 401.609 Q302.543 398.044 298.909 398.044 M298.909 394.341 Q304.719 394.341 307.775 398.947 Q310.853 403.53 310.853 412.28 Q310.853 421.007 307.775 425.614 Q304.719 430.197 298.909 430.197 Q293.099 430.197 290.02 425.614 Q286.964 421.007 286.964 412.28 Q286.964 403.53 290.02 398.947 Q293.099 394.341 298.909 394.341 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M258.793 214.978 L277.15 214.978 L277.15 218.913 L263.076 218.913 L263.076 227.385 Q264.094 227.038 265.113 226.876 Q266.131 226.691 267.15 226.691 Q272.937 226.691 276.316 229.862 Q279.696 233.033 279.696 238.45 Q279.696 244.029 276.224 247.13 Q272.752 250.209 266.432 250.209 Q264.256 250.209 261.988 249.839 Q259.742 249.468 257.335 248.728 L257.335 244.029 Q259.418 245.163 261.641 245.718 Q263.863 246.274 266.34 246.274 Q270.344 246.274 272.682 244.168 Q275.02 242.061 275.02 238.45 Q275.02 234.839 272.682 232.732 Q270.344 230.626 266.34 230.626 Q264.465 230.626 262.59 231.043 Q260.738 231.459 258.793 232.339 L258.793 214.978 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M298.909 218.057 Q295.298 218.057 293.469 221.621 Q291.664 225.163 291.664 232.293 Q291.664 239.399 293.469 242.964 Q295.298 246.505 298.909 246.505 Q302.543 246.505 304.349 242.964 Q306.177 239.399 306.177 232.293 Q306.177 225.163 304.349 221.621 Q302.543 218.057 298.909 218.057 M298.909 214.353 Q304.719 214.353 307.775 218.959 Q310.853 223.543 310.853 232.293 Q310.853 241.019 307.775 245.626 Q304.719 250.209 298.909 250.209 Q293.099 250.209 290.02 245.626 Q286.964 241.019 286.964 232.293 Q286.964 223.543 290.02 218.959 Q293.099 214.353 298.909 214.353 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip162)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1139.56 400.199,1012.81 400.786,1020.97 401.372,907.6 401.958,913.605 402.545,810.72 403.131,716.473 403.718,628.442 404.304,546.24 404.891,472.813 405.477,406.158 406.063,434.889 406.65,456.553 407.236,400.581 407.823,350.098 408.409,305.812 408.995,265.208 409.582,289.507 410.168,253.598 410.755,275.972 411.341,246.435 411.927,219.895 412.514,283.73 413.1,299.178 413.687,275.259 414.273,257.015 414.86,241.498 415.446,227.96 416.032,247.071 416.619,235.459 417.205,226.408 417.792,219.923 418.378,238.786 418.964,257.226 419.551,255.739 420.137,255.126 420.724,274.033 421.31,275.232 421.896,277.771 422.483,281.012 423.069,286.036 423.656,335.088 424.242,340.604 424.829,385.669 425.415,390.181 426.001,396.737 426.588,413.495 427.174,420.804 427.761,430.149 428.347,448.61 428.933,474.771 429.52,482.665 430.106,508.284 430.693,540.728 431.279,555.871 431.865,571.229 432.452,586.068 433.038,592.862 433.625,600.158 434.211,614.757 434.798,635.245 435.384,654.82 435.97,673.405 436.557,681.681 437.143,695.152 437.73,708.117 438.316,720.112 438.902,727.583 439.489,735.504 440.075,757.151 440.662,768.99 441.248,776.377 441.835,791.58 442.421,810.259 443.007,820.49 443.594,830.692 444.18,848.151 444.767,858.261 445.353,865.167 445.939,875.164 446.526,884.427 447.112,893.911 447.699,906.168 448.285,915.209 448.871,923.759 449.458,941.2 450.044,949.242 450.631,962.536 451.217,972.693 451.804,977.53 452.39,982.057 452.976,989.387 453.563,996.842 454.149,1003.92 454.736,1010.76 455.322,1019.76 455.908,1025.92 456.495,1029.44 457.081,1033.67 457.668,1037.77 458.254,1046.72 458.84,1055.37 459.427,1065.69 460.013,1068.95 460.6,1083.36 461.186,1090.74 461.773,1093.46 462.359,1100.54 462.945,1101.05 463.532,1105.85 464.118,1110.23 464.705,1116.34 465.291,1124.48 465.877,1128.49 466.464,1130.14 467.05,1133.81 467.637,1137.08 468.223,1140.17 468.809,1143.66 469.396,1145.39 469.982,1144.76 470.569,1151.83 471.155,1153.55 471.742,1153.45 472.328,1156.75 472.914,1161.92 473.501,1163.23 474.087,1166.26 474.674,1169.03 475.26,1170.29 475.846,1175.02 476.433,1176.31 477.019,1179.3 477.606,1180.35 478.192,1182.91 478.778,1187.09 479.365,1188.07 479.951,1186.98 480.538,1187.69 481.124,1195.15 481.711,1197.76 482.297,1199.73 482.883,1205.18 483.47,1208.75 484.056,1213.58 484.643,1214.88 485.229,1213.13 485.815,1216.04 486.402,1218.92 486.988,1220.28 487.575,1221.42 488.161,1222.52 488.748,1221.99 489.334,1221.59 489.92,1223.03 490.507,1222.6 491.093,1222.58 491.68,1222.2 492.266,1224.84 492.852,1226.18 493.439,1227.37 494.025,1226.77 494.612,1229.9 495.198,1230.84 495.784,1227.29 496.371,1230.03 496.957,1230.84 497.544,1230.21 498.13,1232.76 498.717,1230.68 499.303,1232.14 499.889,1234.7 500.476,1234.22 501.062,1233.38 501.649,1237.23 502.235,1236.51 502.821,1235.52 503.408,1233.11 503.994,1234.02 504.581,1236.36 505.167,1232.62 505.753,1232.06 506.34,1233.23 506.926,1234.45 507.513,1233.64 508.099,1234.8 508.686,1235.42 509.272,1236.04 509.858,1236.85 510.445,1236.19 511.031,1236.85 511.618,1236.02 512.204,1235.43 512.79,1237.86 513.377,1238.72 513.963,1236.34 514.55,1236.01 515.136,1238.55 515.722,1236.06 516.309,1234.01 516.895,1233.39 517.482,1234.28 518.068,1233.96 518.655,1236.32 519.241,1236.59 519.827,1234.29 520.414,1235.01 521,1236 521.587,1235.51 522.173,1237.85 522.759,1238.57 523.346,1240.83 523.932,1239.69 524.519,1243.45 525.105,1250.01 525.691,1248.63 526.278,1250.53 526.864,1249.13 527.451,1247.71 528.037,1247.84 528.624,1249.49 529.21,1248.25 529.796,1247 530.383,1245.76 530.969,1244.54 531.556,1243.24 532.142,1244.14 532.728,1237.16 533.315,1235.13 533.901,1236.03 534.488,1232.33 535.074,1235.28 535.661,1231.7 536.247,1227.84 536.833,1232.2 537.42,1233.58 538.006,1233.05 538.593,1232.43 539.179,1234.63 539.765,1235.61 540.352,1235.38 540.938,1234.54 541.525,1232.28 542.111,1239.57 542.697,1237.26 543.284,1233.67 543.87,1233.07 544.457,1232.79 545.043,1233.72 545.63,1230.15 546.216,1231.06 546.802,1230.43 547.389,1228.48 547.975,1229.76 548.562,1231.03 549.148,1230.42 549.734,1230.3 550.321,1232.9 550.907,1233.99 551.494,1230.92 552.08,1231.67 552.666,1229.89 553.253,1232.51 553.839,1234.93 554.426,1234.28 555.012,1235.19 555.599,1235.97 556.185,1238.11 556.771,1240.15 557.358,1240.79 557.944,1239.69 558.531,1235.87 559.117,1236.66 559.703,1234.4 560.29,1238.3 560.876,1239.17 561.463,1236.47 562.049,1238.41 562.635,1237.23 563.222,1238 563.808,1238.58 564.395,1235.85 564.981,1234.84 565.568,1234.17 566.154,1230.3 566.74,1231.12 567.327,1232 567.913,1231.36 568.5,1229.25 569.086,1230.02 569.672,1234.09 570.259,1233.16 570.845,1229.44 571.432,1230.26 572.018,1232.98 572.605,1231.08 573.191,1232.14 573.777,1226.89 574.364,1226.87 574.95,1226.52 575.537,1224.74 576.123,1225.98 576.709,1230.06 577.296,1229.28 577.882,1231.89 578.469,1229.56 579.055,1230.41 579.641,1229.74 580.228,1227.74 580.814,1228.43 581.401,1230.63 581.987,1232.91 582.574,1231 583.16,1231.73 583.746,1231.03 584.333,1229.1 584.919,1225.3 585.506,1224.77 586.092,1227.59 586.678,1226.93 587.265,1229.33 587.851,1227.08 588.438,1225 589.024,1224.4 589.61,1225.49 590.197,1223.58 590.783,1223.29 591.37,1219.78 591.956,1217.94 592.543,1214.86 593.129,1213.4 593.715,1213.5 594.302,1217.96 594.888,1220.84 595.475,1220.59 596.061,1220.67 596.647,1220.63 597.234,1223.38 597.82,1218.45 598.407,1218.37 598.993,1215.22 599.579,1215.04 600.166,1218.01 600.752,1216.26 601.339,1217.9 601.925,1217.77 602.512,1217.61 603.098,1218.9 603.684,1217.58 604.271,1219.17 604.857,1217.37 605.444,1215.92 606.03,1217.45 606.616,1214.23 607.203,1216.25 607.789,1217.87 608.376,1218.12 608.962,1216.57 609.548,1218.33 610.135,1219.92 610.721,1219.65 611.308,1217.92 611.894,1216.35 612.481,1219.24 613.067,1219.41 613.653,1220.44 614.24,1221.9 614.826,1222.99 615.413,1223.78 615.999,1223.27 616.585,1220.04 617.172,1218.18 617.758,1219.47 618.345,1220.41 618.931,1217.13 619.518,1216.98 620.104,1219.38 620.69,1217.79 621.277,1216.06 621.863,1216.28 622.45,1216.16 623.036,1216.25 623.622,1215.89 624.209,1215.93 624.795,1215.85 625.382,1217.19 625.968,1218.3 626.554,1218.37 627.141,1219.41 627.727,1222.02 628.314,1224.69 628.9,1222.66 629.487,1222.3 630.073,1224.89 630.659,1224.48 631.246,1221.14 631.832,1219.16 632.419,1221.85 633.005,1219.69 633.591,1216.46 634.178,1217.73 634.764,1220.6 635.351,1221.63 635.937,1224.65 636.523,1225.72 637.11,1226.54 637.696,1225.87 638.283,1220.82 638.869,1220.27 639.456,1221.49 640.042,1225.44 640.628,1223.59 641.215,1224.12 641.801,1223.7 642.388,1221.44 642.974,1223.93 643.56,1220.44 644.147,1219.69 644.733,1217.69 645.32,1215.67 645.906,1215.73 646.492,1217.3 647.079,1218.55 647.665,1215.07 648.252,1212 648.838,1213.47 649.425,1213.31 650.011,1211.89 650.597,1211.76 651.184,1214.68 651.77,1216.24 652.357,1219.2 652.943,1217.33 653.529,1218.68 654.116,1216.91 654.702,1215.24 655.289,1215.27 655.875,1216.47 656.462,1217.78 657.048,1217.31 657.634,1221.51 658.221,1221.08 658.807,1223.46 659.394,1222.82 659.98,1223.87 660.566,1223.09 661.153,1222.69 661.739,1221.07 662.326,1219.23 662.912,1220.43 663.498,1220.03 664.085,1213.66 664.671,1216.76 665.258,1216.45 665.844,1216.22 666.431,1216.15 667.017,1217.2 667.603,1216.82 668.19,1215.29 668.776,1215.15 669.363,1213.64 669.949,1212.15 670.535,1211.94 671.122,1208.77 671.708,1209.28 672.295,1209.01 672.881,1209.25 673.467,1210.8 674.054,1211.05 674.64,1211.14 675.227,1212.8 675.813,1212.89 676.4,1213.07 676.986,1213.34 677.572,1214.72 678.159,1213.18 678.745,1213.22 679.332,1211.94 679.918,1207.32 680.504,1207.67 681.091,1207.83 681.677,1209.48 682.264,1209.48 682.85,1207.69 683.436,1207.92 684.023,1209.5 684.609,1215.09 685.196,1216.38 685.782,1213.14 686.369,1212.91 686.955,1212.43 687.541,1210.99 688.128,1212.54 688.714,1212.68 689.301,1212.65 689.887,1212.55 690.473,1212.8 691.06,1211.49 691.646,1215.88 692.233,1215.53 692.819,1215.51 693.405,1216.92 693.992,1217.98 694.578,1216.03 695.165,1215.49 695.751,1215.41 696.338,1213.94 696.924,1213.69 697.51,1214.84 698.097,1214.69 698.683,1213.18 699.27,1213.08 699.856,1214.19 700.442,1215.56 701.029,1213.77 701.615,1212.17 702.202,1214.91 702.788,1211.88 703.375,1213.35 703.961,1214.71 704.547,1217.41 705.134,1220.05 705.72,1219.69 706.307,1220.28 706.893,1222.42 707.479,1220.39 708.066,1220.1 708.652,1222.49 709.239,1223.36 709.825,1222.21 710.411,1219.23 710.998,1217.36 711.584,1216.78 712.171,1215.2 712.757,1213.91 713.344,1212.39 713.93,1218.16 714.516,1216.31 715.103,1216.06 715.689,1214.38 716.276,1214.08 716.862,1211.09 717.448,1205.39 718.035,1204.37 718.621,1204.62 719.208,1206.37 719.794,1206.32 720.38,1206.85 720.967,1207.02 721.553,1204.33 722.14,1204.65 722.726,1203.35 723.313,1206.67 723.899,1205.5 724.485,1207.15 725.072,1209.01 725.658,1207.75 726.245,1208.2 726.831,1206.83 727.417,1211.5 728.004,1208.57 728.59,1210.11 729.177,1211.37 729.763,1211.23 730.349,1211.21 730.936,1208.22 731.522,1209.8 732.109,1206.92 732.695,1209.99 733.282,1209.75 733.868,1212.48 734.454,1213.76 735.041,1216.46 735.627,1214.57 736.214,1217.53 736.8,1218.74 737.386,1219.53 737.973,1216.05 738.559,1214.19 739.146,1218.35 739.732,1217.62 740.318,1216.87 740.905,1216.21 741.491,1212.94 742.078,1212.63 742.664,1213.74 743.251,1212.1 743.837,1214.65 744.423,1212.91 745.01,1214.37 745.596,1211.34 746.183,1208.09 746.769,1206.9 747.355,1205.95 747.942,1206.45 748.528,1205.04 749.115,1206.99 749.701,1206.77 750.288,1208.29 750.874,1209.78 751.46,1212.55 752.047,1215.17 752.633,1215.84 753.22,1212.64 753.806,1213.66 754.392,1216.38 754.979,1220.31 755.565,1220.92 756.152,1219.04 756.738,1219.88 757.324,1217.91 757.911,1217.85 758.497,1214.12 759.084,1207.74 759.67,1207.72 760.257,1206.15 760.843,1204.44 761.429,1207.48 762.016,1208.8 762.602,1205.69 763.189,1208.39 763.775,1203.71 764.361,1204.07 764.948,1202.78 765.534,1201.53 766.121,1201.77 766.707,1206.66 767.293,1206.69 767.88,1206.84 768.466,1203.71 769.053,1203.79 769.639,1202.09 770.226,1205.24 770.812,1206.87 771.398,1205.33 771.985,1204.01 772.571,1203.15 773.158,1207.7 773.744,1210.4 774.33,1207.52 774.917,1207.53 775.503,1208.96 776.09,1208.76 776.676,1208.62 777.262,1208.69 777.849,1207.13 778.435,1207.19 779.022,1205.45 779.608,1207.3 780.195,1207.33 780.781,1211.68 781.367,1210.22 781.954,1211.51 782.54,1208.12 783.127,1209.54 783.713,1208.05 784.299,1205.09 784.886,1206.7 785.472,1206.49 786.059,1209.63 786.645,1209.85 787.232,1208.3 787.818,1206.85 788.404,1205.4 788.991,1202.51 789.577,1201.32 790.164,1201.35 790.75,1201.77 791.336,1200.8 791.923,1202.73 792.509,1204.72 793.096,1206.4 793.682,1206.85 794.268,1207.05 794.855,1208.43 795.441,1206.83 796.028,1206.89 796.614,1209.93 797.201,1211.13 797.787,1207.82 798.373,1207.85 798.96,1209.35 799.546,1209.41 800.133,1209.49 800.719,1209.4 801.305,1204.94 801.892,1205.3 802.478,1206.62 803.065,1210.98 803.651,1213.69 804.237,1214.7 804.824,1214.4 805.41,1214.16 805.997,1214.09 806.583,1213.86 807.17,1213.39 807.756,1214.37 808.342,1212.46 808.929,1211.95 809.515,1211.88 810.102,1214.3 810.688,1216.78 811.274,1217.89 811.861,1219.15 812.447,1218.49 813.034,1217.89 813.62,1215.55 814.206,1218.32 814.793,1219.09 815.379,1215.65 815.966,1212.04 816.552,1213.54 817.139,1210.11 817.725,1211.73 818.311,1214.28 818.898,1215.33 819.484,1213.42 820.071,1211.49 820.657,1211.47 821.243,1211.15 821.83,1212.45 822.416,1209.3 823.003,1207.6 823.589,1207.63 824.175,1204.46 824.762,1206.04 825.348,1210.32 825.935,1209.89 826.521,1212.67 827.108,1215.23 827.694,1208.82 828.28,1211.76 828.867,1208.58 829.453,1207.01 830.04,1207.16 830.626,1207.03 831.212,1206.95 831.799,1209.83 832.385,1209.5 832.972,1209.47 833.558,1212.35 834.145,1212.05 834.731,1212.76 835.317,1211.03 835.904,1209.43 836.49,1210.32 837.077,1211.37 837.663,1209.86 838.249,1208.42 838.836,1207.03 839.422,1205.36 840.009,1206.95 840.595,1203.86 841.181,1202.57 841.768,1205.83 842.354,1203.09 842.941,1200.44 843.527,1200.29 844.114,1200.52 844.7,1203.75 845.286,1205.59 845.873,1202.51 846.459,1201.07 847.046,1200.02 847.632,1201.93 848.218,1197.88 848.805,1198.18 849.391,1198.13 849.978,1200.03 850.564,1200.58 851.15,1199.46 851.737,1197.02 852.323,1200.39 852.91,1199.35 853.496,1196.63 854.083,1198.56 854.669,1198.7 855.255,1197.56 855.842,1196.77 856.428,1195.89 857.015,1196.53 857.601,1198.94 858.187,1199.3 858.774,1199.75 859.36,1194.47 859.947,1195.15 860.533,1195.68 861.119,1199.16 861.706,1199.38 862.292,1204.21 862.879,1200.06 863.465,1201.67 864.052,1207.64 864.638,1207.62 865.224,1207.31 865.811,1209.15 866.397,1210.23 866.984,1208.75 867.57,1210.01 868.156,1208.21 868.743,1206.8 869.329,1204.72 869.916,1203.56 870.502,1203.28 871.089,1205.08 871.675,1203.55 872.261,1201.95 872.848,1199.2 873.434,1198.12 874.021,1201.26 874.607,1199.94 875.193,1207.65 875.78,1206.28 876.366,1205 876.953,1203.6 877.539,1202.3 878.125,1204.04 878.712,1204.28 879.298,1203.86 879.885,1202.4 880.471,1202.67 881.058,1202.61 881.644,1201.36 882.23,1199.92 882.817,1198.62 883.403,1197.65 883.99,1198.39 884.576,1200.43 885.162,1202.21 885.749,1203.61 886.335,1205.39 886.922,1206.78 887.508,1208.12 888.094,1206.61 888.681,1203.81 889.267,1203.88 889.854,1203.96 890.44,1206.81 891.027,1206.68 891.613,1208.16 892.199,1207.82 892.786,1207.54 893.372,1204.61 893.959,1203.02 894.545,1198.7 895.131,1199.11 895.718,1198.14 896.304,1200.14 896.891,1201.92 897.477,1199.22 898.063,1199.72 898.65,1204.54 899.236,1207.35 899.823,1210.07 900.409,1211.45 900.996,1211.14 901.582,1209.33 902.168,1208.07 902.755,1209.11 903.341,1207.52 903.928,1210.3 904.514,1211.74 905.1,1208.54 905.687,1210.01 906.273,1212.68 906.86,1210.67 907.446,1213.23 908.032,1211.1 908.619,1212.41 909.205,1211.82 909.792,1208.55 910.378,1207.16 910.965,1208.47 911.551,1208.29 912.137,1209.81 912.724,1208.45 913.31,1208.3 913.897,1209.98 914.483,1208.32 915.069,1209.79 915.656,1206.59 916.242,1208.05 916.829,1208.27 917.415,1208.44 918.002,1211.39 918.588,1211.16 919.174,1215.21 919.761,1216.14 920.347,1213.95 920.934,1212.17 921.52,1211.71 922.106,1215.51 922.693,1215.14 923.279,1214.4 923.866,1214.18 924.452,1216.64 925.038,1216.09 925.625,1215.71 926.211,1215.59 926.798,1215.25 927.384,1213.35 927.971,1212.97 928.557,1216.98 929.143,1214.66 929.73,1212.43 930.316,1206.19 930.903,1203.25 931.489,1204.66 932.075,1205.85 932.662,1208.63 933.248,1208.41 933.835,1209.99 934.421,1209.57 935.007,1208.14 935.594,1207.94 936.18,1209.44 936.767,1206.06 937.353,1207.47 937.94,1205.88 938.526,1208.61 939.112,1211.42 939.699,1212.63 940.285,1216.49 940.872,1217.09 941.458,1216.26 942.044,1215.59 942.631,1212.04 943.217,1207.18 943.804,1206.68 944.39,1206.49 944.976,1208.13 945.563,1206.31 946.149,1207.8 946.736,1209.25 947.322,1209 947.909,1205.88 948.495,1201.18 949.081,1199.73 949.668,1199.71 950.254,1203.11 950.841,1201.81 951.427,1202.37 952.013,1204.21 952.6,1204.13 953.186,1201.36 953.773,1200.05 954.359,1202.03 954.945,1203.58 955.532,1206.56 956.118,1204.89 956.705,1207.96 957.291,1207.9 957.878,1209.1 958.464,1206.34 959.05,1204.98 959.637,1203.42 960.223,1205.05 960.81,1203.45 961.396,1202.08 961.982,1203.61 962.569,1208.19 963.155,1209.35 963.742,1210.66 964.328,1210.46 964.915,1210.17 965.501,1209.96 966.087,1210.94 966.674,1210.71 967.26,1207.56 967.847,1207.41 968.433,1208.64 969.019,1207.05 969.606,1208.27 970.192,1210.85 970.779,1204.59 971.365,1204.62 971.951,1201.58 972.538,1204.87 973.124,1203.58 973.711,1203.72 974.297,1199.42 974.884,1196.87 975.47,1198.75 976.056,1197.63 976.643,1197.87 977.229,1200.01 977.816,1198.84 978.402,1200.75 978.988,1198.15 979.575,1197.01 980.161,1193.18 980.748,1192.43 981.334,1194.73 981.92,1195.39 982.507,1194.31 983.093,1196.32 983.68,1199.57 984.266,1200.3 984.853,1200.8 985.439,1201.28 986.025,1204.55 986.612,1200.16 987.198,1199.14 987.785,1199.49 988.371,1198.59 988.957,1201.93 989.544,1203.51 990.13,1204.84 990.717,1206.54 991.303,1206.76 991.889,1203.96 992.476,1204.05 993.062,1204.31 993.649,1207.34 994.235,1210.13 994.822,1208.3 995.408,1209.44 995.994,1208.85 996.581,1208.45 997.167,1212.89 997.754,1211.04 998.34,1207.88 998.926,1201.97 999.513,1203.7 1000.1,1205.26 1000.69,1204.03 1001.27,1206.84 1001.86,1206.87 1002.44,1202.39 1003.03,1202.39 1003.62,1200.86 1004.2,1201.16 1004.79,1201.34 1005.38,1201.56 1005.96,1198.8 1006.55,1200.74 1007.14,1199.51 1007.72,1201.29 1008.31,1205.94 1008.9,1205.99 1009.48,1205.71 1010.07,1208.46 1010.65,1209.81 1011.24,1210.91 1011.83,1210.7 1012.41,1213.11 1013,1215.54 1013.59,1211.93 1014.17,1210.02 1014.76,1208.21 1015.35,1209.35 1015.93,1206.03 1016.52,1205.89 1017.11,1208.76 1017.69,1208.69 1018.28,1205.23 1018.86,1205.18 1019.45,1202.25 1020.04,1202.32 1020.62,1200.68 1021.21,1199.38 1021.8,1202.62 1022.38,1201.48 1022.97,1203.17 1023.56,1206.4 1024.14,1206.42 1024.73,1207.86 1025.32,1204.77 1025.9,1205.99 1026.49,1206.1 1027.07,1206.07 1027.66,1206.25 1028.25,1206.15 1028.83,1206.35 1029.42,1206.14 1030.01,1205.98 1030.59,1209.02 1031.18,1208.7 1031.77,1210.07 1032.35,1209.48 1032.94,1209.39 1033.52,1210.96 1034.11,1210.7 1034.7,1211.85 1035.28,1211.99 1035.87,1211.75 1036.46,1212.77 1037.04,1212.25 1037.63,1214.98 1038.22,1215.69 1038.8,1213.62 1039.39,1214.59 1039.98,1211.21 1040.56,1210.96 1041.15,1210.39 1041.73,1207.39 1042.32,1208.86 1042.91,1210.47 1043.49,1210.04 1044.08,1209.62 1044.67,1209.19 1045.25,1208.9 1045.84,1208.85 1046.43,1208.7 1047.01,1207.07 1047.6,1202.68 1048.19,1205.8 1048.77,1205.45 1049.36,1205.66 1049.94,1205.6 1050.53,1205.71 1051.12,1207.15 1051.7,1207.29 1052.29,1206.23 1052.88,1209.32 1053.46,1209.14 1054.05,1208.86 1054.64,1208.53 1055.22,1208.08 1055.81,1207.92 1056.39,1209.12 1056.98,1208.81 1057.57,1207.22 1058.15,1208.79 1058.74,1210.29 1059.33,1205.71 1059.91,1208.54 1060.5,1208.55 1061.09,1208.33 1061.67,1208.52 1062.26,1204.07 1062.85,1201.33 1063.43,1204.55 1064.02,1205.96 1064.6,1209.08 1065.19,1210.4 1065.78,1209.76 1066.36,1209.43 1066.95,1212.14 1067.54,1208.76 1068.12,1202.69 1068.71,1200.08 1069.3,1201.91 1069.88,1203.49 1070.47,1202.21 1071.06,1205.33 1071.64,1205.24 1072.23,1205.01 1072.81,1205 1073.4,1207.6 1073.99,1207.36 1074.57,1206.93 1075.16,1208.38 1075.75,1207.94 1076.33,1211.99 1076.92,1206.89 1077.51,1204.37 1078.09,1204.43 1078.68,1204.59 1079.26,1203.1 1079.85,1203.13 1080.44,1201.72 1081.02,1203.47 1081.61,1198.98 1082.2,1200.61 1082.78,1202 1083.37,1205.09 1083.96,1206.34 1084.54,1207.57 1085.13,1204.64 1085.72,1207.54 1086.3,1206.18 1086.89,1206.25 1087.47,1207.94 1088.06,1203.37 1088.65,1205.09 1089.23,1202.15 1089.82,1202.45 1090.41,1202.69 1090.99,1204.08 1091.58,1202.71 1092.17,1205.84 1092.75,1202.74 1093.34,1201.56 1093.93,1203.41 1094.51,1205.29 1095.1,1203.93 1095.68,1205.45 1096.27,1198.31 1096.86,1198.48 1097.44,1195.92 1098.03,1198.2 1098.62,1201.58 1099.2,1200.41 1099.79,1202.13 1100.38,1202.22 1100.96,1203.79 1101.55,1202.46 1102.14,1201.01 1102.72,1199.82 1103.31,1199.96 1103.89,1203.22 1104.48,1204.7 1105.07,1201.76 1105.65,1200.04 1106.24,1201.35 1106.83,1198.56 1107.41,1199.04 1108,1200.75 1108.59,1201.04 1109.17,1199.53 1109.76,1199.93 1110.34,1198.56 1110.93,1197.75 1111.52,1196.71 1112.1,1194.19 1112.69,1194.95 1113.28,1196.78 1113.86,1197.26 1114.45,1196.04 1115.04,1197.57 1115.62,1196.59 1116.21,1197.34 1116.8,1200.93 1117.38,1199.79 1117.97,1201.27 1118.55,1198.65 1119.14,1196.31 1119.73,1199.66 1120.31,1198.69 1120.9,1200.49 1121.49,1199.3 1122.07,1196.95 1122.66,1195.69 1123.25,1196.37 1123.83,1195.12 1124.42,1192.83 1125.01,1195.09 1125.59,1194.48 1126.18,1195.01 1126.76,1194.11 1127.35,1196.42 1127.94,1197.17 1128.52,1198.68 1129.11,1197.75 1129.7,1199.77 1130.28,1200.16 1130.87,1199.03 1131.46,1200.94 1132.04,1202.79 1132.63,1205.72 1133.21,1210.24 1133.8,1211.32 1134.39,1209.43 1134.97,1209.47 1135.56,1210.84 1136.15,1209.35 1136.73,1207.46 1137.32,1208.77 1137.91,1208.64 1138.49,1208.48 1139.08,1212.65 1139.67,1208.06 1140.25,1206.57 1140.84,1207.77 1141.42,1208.04 1142.01,1208.01 1142.6,1207.92 1143.18,1208 1143.77,1209.32 1144.36,1204.64 1144.94,1201.53 1145.53,1201.72 1146.12,1201.72 1146.7,1201.91 1147.29,1202.24 1147.88,1202.1 1148.46,1200.74 1149.05,1200.52 1149.63,1200.65 1150.22,1197.69 1150.81,1196.92 1151.39,1199.32 1151.98,1201.06 1152.57,1203.03 1153.15,1205.63 1153.74,1207.07 1154.33,1208.49 1154.91,1211.09 1155.5,1210.86 1156.09,1212.05 1156.67,1208.76 1157.26,1205.74 1157.84,1206.99 1158.43,1205.44 1159.02,1208.59 1159.6,1206.64 1160.19,1205.05 1160.78,1206.51 1161.36,1207.95 1161.95,1209.39 1162.54,1209.09 1163.12,1210.31 1163.71,1208.74 1164.29,1208.41 1164.88,1211.27 1165.47,1206.61 1166.05,1205.12 1166.64,1203.77 1167.23,1201.9 1167.81,1201.94 1168.4,1200.71 1168.99,1201 1169.57,1200.11 1170.16,1199.08 1170.75,1193.61 1171.33,1197.1 1171.92,1196.23 1172.5,1195.18 1173.09,1198.96 1173.68,1199.35 1174.26,1197.95 1174.85,1198.33 1175.44,1201.45 1176.02,1201.87 1176.61,1203.34 1177.2,1203.49 1177.78,1206.53 1178.37,1206.45 1178.96,1203.57 1179.54,1201.03 1180.13,1202.64 1180.71,1203.03 1181.3,1206.02 1181.89,1205.98 1182.47,1207.36 1183.06,1205.7 1183.65,1207.18 1184.23,1209.99 1184.82,1208.35 1185.41,1209.69 1185.99,1206.51 1186.58,1205.06 1187.16,1206.47 1187.75,1206.22 1188.34,1206 1188.92,1205.98 1189.51,1207.33 1190.1,1210.02 1190.68,1211.21 1191.27,1215.15 1191.86,1213.18 1192.44,1215.51 1193.03,1216.04 1193.62,1214.15 1194.2,1210.79 1194.79,1211.96 1195.37,1209.92 1195.96,1208.33 1196.55,1206.94 1197.13,1202.52 1197.72,1200.86 1198.31,1201.22 1198.89,1202.78 1199.48,1204.57 1200.07,1206.04 1200.65,1204.35 1201.24,1201.07 1201.83,1202.64 1202.41,1201.23 1203,1199.84 1203.58,1202.84 1204.17,1201.69 1204.76,1204.88 1205.34,1200.14 1205.93,1196.21 1206.52,1197.94 1207.1,1201.6 1207.69,1200.34 1208.28,1200.33 1208.86,1202.36 1209.45,1205.22 1210.03,1205.21 1210.62,1204.95 1211.21,1207.74 1211.79,1210.24 1212.38,1209.99 1212.97,1209.62 1213.55,1209.44 1214.14,1209.18 1214.73,1207.56 1215.31,1207.73 1215.9,1210.37 1216.49,1208.49 1217.07,1206.75 1217.66,1208.06 1218.24,1204.78 1218.83,1206.11 1219.42,1206.19 1220,1209.17 1220.59,1209.13 1221.18,1209 1221.76,1209.03 1222.35,1208.78 1222.94,1204.18 1223.52,1207.16 1224.11,1205.69 1224.7,1205.8 1225.28,1202.61 1225.87,1204.18 1226.45,1205.49 1227.04,1205.27 1227.63,1203.63 1228.21,1200.84 1228.8,1198.31 1229.39,1196.97 1229.97,1194.44 1230.56,1194.84 1231.15,1195.38 1231.73,1197.46 1232.32,1199.6 1232.91,1202.73 1233.49,1202.71 1234.08,1202.98 1234.66,1203.03 1235.25,1204.67 1235.84,1206.27 1236.42,1204.4 1237.01,1206.09 1237.6,1205.9 1238.18,1206.08 1238.77,1206 1239.36,1204.37 1239.94,1202.83 1240.53,1204.27 1241.11,1205.76 1241.7,1202.71 1242.29,1205.89 1242.87,1205.31 1243.46,1206.97 1244.05,1205.62 1244.63,1206.69 1245.22,1206.62 1245.81,1206.59 1246.39,1206.31 1246.98,1203.22 1247.57,1204.82 1248.15,1204.75 1248.74,1201.92 1249.32,1205.19 1249.91,1205.39 1250.5,1203.9 1251.08,1207.98 1251.67,1207.52 1252.26,1205.6 1252.84,1203.97 1253.43,1203.93 1254.02,1202.59 1254.6,1202.93 1255.19,1205.74 1255.78,1205.83 1256.36,1208.57 1256.95,1208.59 1257.53,1209.95 1258.12,1209.79 1258.71,1210.95 1259.29,1210.59 1259.88,1208.54 1260.47,1209.68 1261.05,1209.12 1261.64,1210.21 1262.23,1209.95 1262.81,1208.21 1263.4,1206.74 1263.98,1206.49 1264.57,1204.87 1265.16,1203.64 1265.74,1202.11 1266.33,1203.43 1266.92,1205.24 1267.5,1203.6 1268.09,1205.23 1268.68,1202.61 1269.26,1203.15 1269.85,1201.75 1270.44,1201.79 1271.02,1200.38 1271.61,1200.63 1272.19,1200.7 1272.78,1202.13 1273.37,1202.04 1273.95,1202.21 1274.54,1200.88 1275.13,1201.13 1275.71,1202.94 1276.3,1203.22 1276.89,1205.01 1277.47,1206.33 1278.06,1203.24 1278.65,1204.89 1279.23,1206.25 1279.82,1204.73 1280.4,1208.04 1280.99,1208.03 1281.58,1206.57 1282.16,1208.06 1282.75,1209.51 1283.34,1209.05 1283.92,1207.54 1284.51,1208.89 1285.1,1209.9 1285.68,1209.32 1286.27,1210.55 1286.86,1209.12 1287.44,1204.65 1288.03,1203.15 1288.61,1200.17 1289.2,1200.36 1289.79,1200.59 1290.37,1199.1 1290.96,1200.6 1291.55,1201.88 1292.13,1203.45 1292.72,1205.18 1293.31,1207.95 1293.89,1209.12 1294.48,1214.73 1295.06,1215.41 1295.65,1213.31 1296.24,1209.99 1296.82,1209.71 1297.41,1209.45 1298,1210.65 1298.58,1208.89 1299.17,1207.3 1299.76,1208.61 1300.34,1208.51 1300.93,1206.9 1301.52,1205.58 1302.1,1202.58 1302.69,1201.11 1303.27,1201.49 1303.86,1200.23 1304.45,1200.57 1305.03,1200.7 1305.62,1201.41 1306.21,1201.7 1306.79,1203.09 1307.38,1204.65 1307.97,1202.97 1308.55,1202.7 1309.14,1204.07 1309.73,1205.57 1310.31,1205.6 1310.9,1211.49 1311.48,1210.82 1312.07,1205.92 1312.66,1204.06 1313.24,1202.74 1313.83,1202.97 1314.42,1204.15 1315,1205.44 1315.59,1203.94 1316.18,1204.03 1316.76,1202.66 1317.35,1196.8 1317.93,1197.16 1318.52,1195.71 1319.11,1196.3 1319.69,1198.56 1320.28,1200.46 1320.87,1200.56 1321.45,1202.32 1322.04,1202.55 1322.63,1201.06 1323.21,1202.89 1323.8,1202.88 1324.39,1201.74 1324.97,1200.23 1325.56,1204.91 1326.14,1203.54 1326.73,1199.55 1327.32,1201.43 1327.9,1204.31 1328.49,1204.05 1329.08,1204.05 1329.66,1202.71 1330.25,1202.79 1330.84,1206.03 1331.42,1208.6 1332.01,1207.01 1332.6,1206.72 1333.18,1204.03 1333.77,1203.93 1334.35,1199.47 1334.94,1201.27 1335.53,1200.05 1336.11,1203.31 1336.7,1201.72 1337.29,1203.44 1337.87,1204.73 1338.46,1204.58 1339.05,1205.78 1339.63,1211.51 1340.22,1211.36 1340.8,1212.53 1341.39,1211.95 1341.98,1209.93 1342.56,1212.6 1343.15,1213.56 1343.74,1209.96 1344.32,1210.99 1344.91,1210.36 1345.5,1209.78 1346.08,1209.16 1346.67,1210.47 1347.26,1208.8 1347.84,1207.12 1348.43,1204.13 1349.01,1202.89 1349.6,1206.13 1350.19,1205.99 1350.77,1206.18 1351.36,1208.68 1351.95,1208.49 1352.53,1209.73 1353.12,1212.19 1353.71,1208.84 1354.29,1207.04 1354.88,1203.77 1355.47,1205.43 1356.05,1205.41 1356.64,1205.61 1357.22,1204.12 1357.81,1205.62 1358.4,1207.02 1358.98,1205.3 1359.57,1204.85 1360.16,1200.6 1360.74,1201.14 1361.33,1205.62 1361.92,1203.98 1362.5,1203.79 1363.09,1203.78 1363.68,1203.77 1364.26,1203.68 1364.85,1203.66 1365.43,1205.13 1366.02,1202.43 1366.61,1204.03 1367.19,1205.46 1367.78,1205.4 1368.37,1207.13 1368.95,1205.32 1369.54,1207.01 1370.13,1208.18 1370.71,1207.93 1371.3,1207.84 1371.88,1207.79 1372.47,1210.4 1373.06,1207.15 1373.64,1207.21 1374.23,1207.04 1374.82,1205.26 1375.4,1206.67 1375.99,1207.85 1376.58,1206.17 1377.16,1204.35 1377.75,1202.97 1378.34,1202.92 1378.92,1202.98 1379.51,1204.34 1380.09,1202.87 1380.68,1202.65 1381.27,1205.62 1381.85,1204.24 1382.44,1204.19 1383.03,1204.15 1383.61,1205.55 1384.2,1205.59 1384.79,1207.09 1385.37,1211.57 1385.96,1212.65 1386.55,1210.64 1387.13,1208.97 1387.72,1205.65 1388.3,1209.7 1388.89,1207.97 1389.48,1207.83 1390.06,1207.61 1390.65,1211.78 1391.24,1208.57 1391.82,1207.92 1392.41,1210.69 1393,1210.2 1393.58,1206.87 1394.17,1205.2 1394.75,1205.53 1395.34,1203.9 1395.93,1202.55 1396.51,1204.21 1397.1,1199.58 1397.69,1199.93 1398.27,1198.55 1398.86,1200.38 1399.45,1199.3 1400.03,1201.33 1400.62,1203.14 1401.21,1202.21 1401.79,1199.28 1402.38,1196.66 1402.96,1198.5 1403.55,1198.71 1404.14,1199.03 1404.72,1198.07 1405.31,1200.14 1405.9,1201.69 1406.48,1201.96 1407.07,1199.51 1407.66,1198.33 1408.24,1198.69 1408.83,1198.99 1409.42,1199.27 1410,1201.26 1410.59,1202.62 1411.17,1202.68 1411.76,1204.23 1412.35,1208.36 1412.93,1209.75 1413.52,1206.75 1414.11,1209.71 1414.69,1210.75 1415.28,1210.55 1415.87,1207.51 1416.45,1207.49 1417.04,1210.27 1417.63,1214.19 1418.21,1215.07 1418.8,1216.11 1419.38,1215.36 1419.97,1213.05 1420.56,1212.79 1421.14,1214.07 1421.73,1213.38 1422.32,1210.2 1422.9,1211.32 1423.49,1209.36 1424.08,1206.33 1424.66,1206.54 1425.25,1207.92 1425.83,1209.04 1426.42,1207.18 1427.01,1208.28 1427.59,1209.47 1428.18,1207.44 1428.77,1206.24 1429.35,1207.38 1429.94,1204.27 1430.53,1201.12 1431.11,1201.16 1431.7,1202.93 1432.29,1206.13 1432.87,1207.73 1433.46,1207.74 1434.04,1206.01 1434.63,1208.83 1435.22,1205.86 1435.8,1205.89 1436.39,1205.91 1436.98,1204.33 1437.56,1204.51 1438.15,1203.04 1438.74,1204.95 1439.32,1206.5 1439.91,1206.46 1440.5,1206.91 1441.08,1206.85 1441.67,1208.18 1442.25,1205.24 1442.84,1203.5 1443.43,1201.92 1444.01,1200.62 1444.6,1203.61 1445.19,1205 1445.77,1204.95 1446.36,1205.1 1446.95,1207.94 1447.53,1206.25 1448.12,1205.06 1448.7,1206.67 1449.29,1204.84 1449.88,1200.48 1450.46,1204.8 1451.05,1204.68 1451.64,1206.19 1452.22,1204.74 1452.81,1206.32 1453.4,1207.65 1453.98,1207.66 1454.57,1210.5 1455.16,1210.25 1455.74,1206.87 1456.33,1206.98 1456.91,1211.44 1457.5,1209.33 1458.09,1210 1458.67,1212.78 1459.26,1213.89 1459.85,1213.61 1460.43,1211.46 1461.02,1213.96 1461.61,1212.29 1462.19,1212.18 1462.78,1211.78 1463.37,1208.58 1463.95,1209.61 1464.54,1211.94 1465.12,1212.98 1465.71,1212.63 1466.3,1211.83 1466.88,1208.56 1467.47,1209.74 1468.06,1209.18 1468.64,1210.66 1469.23,1211.84 1469.82,1208.71 1470.4,1208.36 1470.99,1206.81 1471.57,1208.23 1472.16,1206.72 1472.75,1209.63 1473.33,1209.34 1473.92,1210.57 1474.51,1210.15 1475.09,1209.7 1475.68,1213.89 1476.27,1216.46 1476.85,1218.6 1477.44,1217.96 1478.03,1218.7 1478.61,1217.77 1479.2,1215.65 1479.78,1210.81 1480.37,1209.05 1480.96,1207 1481.54,1205.3 1482.13,1205.46 1482.72,1204.06 1483.3,1202.45 1483.89,1200.88 1484.48,1199.83 1485.06,1200.16 1485.65,1197.52 1486.24,1197.58 1486.82,1199.58 1487.41,1198.49 1487.99,1196.09 1488.58,1195.28 1489.17,1195.88 1489.75,1194.37 1490.34,1196.29 1490.93,1195.45 1491.51,1194.16 1492.1,1194.57 1492.69,1189.36 1493.27,1187.3 1493.86,1188.26 1494.45,1187.78 1495.03,1190.32 1495.62,1192.6 1496.2,1190.3 1496.79,1189.27 1497.38,1191.66 1497.96,1188.08 1498.55,1187.15 1499.14,1189.39 1499.72,1185.8 1500.31,1186.59 1500.9,1183.24 1501.48,1184.77 1502.07,1182.87 1502.65,1184.36 1503.24,1186.59 1503.83,1189.04 1504.41,1188.36 1505,1191.09 1505.59,1191.94 1506.17,1194.43 1506.76,1195.07 1507.35,1195.56 1507.93,1197.41 1508.52,1196.26 1509.11,1199.45 1509.69,1199.83 1510.28,1197.05 1510.86,1200.25 1511.45,1200.58 1512.04,1203.68 1512.62,1202.39 1513.21,1204.21 1513.8,1207.25 1514.38,1211.88 1514.97,1211.59 1515.56,1209.7 1516.14,1206.71 1516.73,1212.47 1517.32,1212.04 1517.9,1211.63 1518.49,1209.85 1519.07,1206.77 1519.66,1206.88 1520.25,1208.06 1520.83,1204.87 1521.42,1204.77 1522.01,1205.93 1522.59,1205.79 1523.18,1207.07 1523.77,1205.6 1524.35,1203.91 1524.94,1202.63 1525.52,1205.75 1526.11,1207.12 1526.7,1204.11 1527.28,1207.39 1527.87,1207.32 1528.46,1207.2 1529.04,1207 1529.63,1204.03 1530.22,1204.3 1530.8,1202.68 1531.39,1205.66 1531.98,1205.33 1532.56,1205.04 1533.15,1204.98 1533.73,1202.05 1534.32,1200.86 1534.91,1202.68 1535.49,1202.68 1536.08,1205.85 1536.67,1208.45 1537.25,1209.74 1537.84,1210.72 1538.43,1210.23 1539.01,1209.96 1539.6,1206.74 1540.19,1202.32 1540.77,1203.68 1541.36,1203.62 1541.94,1206.61 1542.53,1209.25 1543.12,1212.02 1543.7,1209.85 1544.29,1209.44 1544.88,1208.96 1545.46,1208.51 1546.05,1204.92 1546.64,1203.44 1547.22,1204.87 1547.81,1203.38 1548.4,1206.18 1548.98,1207.74 1549.57,1204.81 1550.15,1203.28 1550.74,1207.55 1551.33,1207.38 1551.91,1208.84 1552.5,1208.83 1553.09,1205.84 1553.67,1204.51 1554.26,1202.77 1554.85,1204.26 1555.43,1204.56 1556.02,1203 1556.6,1204.74 1557.19,1201.85 1557.78,1203.34 1558.36,1199.02 1558.95,1198.16 1559.54,1198.71 1560.12,1198.9 1560.71,1197.56 1561.3,1196.3 1561.88,1194.96 1562.47,1196.9 1563.06,1197.38 1563.64,1199.32 1564.23,1200.99 1564.81,1199.7 1565.4,1197.2 1565.99,1198.68 1566.57,1197.57 1567.16,1199.75 1567.75,1199.88 1568.33,1200.17 1568.92,1200.43 1569.51,1202.1 1570.09,1202.11 1570.68,1203.64 1571.27,1203.67 1571.85,1203.91 1572.44,1207.12 1573.02,1209.81 1573.61,1209.58 1574.2,1209.33 1574.78,1209.06 1575.37,1208.54 1575.96,1205.4 1576.54,1203.98 1577.13,1205.34 1577.72,1206.67 1578.3,1206.67 1578.89,1206.43 1579.47,1206.53 1580.06,1209.52 1580.65,1209.64 1581.23,1208.87 1581.82,1210.14 1582.41,1208.63 1582.99,1202.65 1583.58,1201.21 1584.17,1203.06 1584.75,1203.05 1585.34,1203.18 1585.93,1204.73 1586.51,1206.53 1587.1,1206.28 1587.68,1205.03 1588.27,1206.39 1588.86,1204.97 1589.44,1205.12 1590.03,1203.82 1590.62,1205.63 1591.2,1205.47 1591.79,1205.3 1592.38,1203.59 1592.96,1203.91 1593.55,1204.06 1594.14,1205.94 1594.72,1205.62 1595.31,1204.29 1595.89,1205.7 1596.48,1201.32 1597.07,1201.25 1597.65,1200.4 1598.24,1202.11 1598.83,1204.99 1599.41,1203.73 1600,1205.28 1600.59,1205.13 1601.17,1204.97 1601.76,1210.84 1602.34,1214.91 1602.93,1213.03 1603.52,1212.68 1604.1,1212.53 1604.69,1212.3 1605.28,1211.64 1605.86,1211.4 1606.45,1213.91 1607.04,1214.71 1607.62,1217.32 1608.21,1220.91 1608.8,1219.9 1609.38,1216.34 1609.97,1212.42 1610.55,1210.53 1611.14,1207.36 1611.73,1204.07 1612.31,1204.03 1612.9,1205.4 1613.49,1206.94 1614.07,1206.89 1614.66,1208.13 1615.25,1205.24 1615.83,1203.64 1616.42,1206.46 1617.01,1206.38 1617.59,1204.7 1618.18,1206.36 1618.76,1206.45 1619.35,1204.99 1619.94,1207.94 1620.52,1205 1621.11,1206.21 1621.7,1204.31 1622.28,1204.05 1622.87,1201.18 1623.46,1201.14 1624.04,1202.42 1624.63,1202.76 1625.22,1202.81 1625.8,1203.98 1626.39,1201.09 1626.97,1200.04 1627.56,1200.27 1628.15,1195.98 1628.73,1193.62 1629.32,1196.07 1629.91,1193.7 1630.49,1194.14 1631.08,1197.82 1631.67,1196.45 1632.25,1196.98 1632.84,1194.7 1633.42,1198.3 1634.01,1198.88 1634.6,1197.47 1635.18,1199.41 1635.77,1201.57 1636.36,1202.18 1636.94,1203.63 1637.53,1207.76 1638.12,1201.76 1638.7,1204.77 1639.29,1203.31 1639.88,1201.99 1640.46,1205.03 1641.05,1203.54 1641.63,1204.04 1642.22,1204.04 1642.81,1204.08 1643.39,1204.19 1643.98,1204.27 1644.57,1202.72 1645.15,1204.06 1645.74,1198.24 1646.33,1198.95 1646.91,1199.43 1647.5,1201.55 1648.09,1200.28 1648.67,1200.24 1649.26,1203.4 1649.84,1203.7 1650.43,1203.51 1651.02,1203.8 1651.6,1206.68 1652.19,1205.36 1652.78,1202.24 1653.36,1199.48 1653.95,1199.74 1654.54,1196.89 1655.12,1198.64 1655.71,1199.15 1656.29,1201.11 1656.88,1201.46 1657.47,1202.74 1658.05,1204.24 1658.64,1205.77 1659.23,1204.57 1659.81,1203.06 1660.4,1201.89 1660.99,1202.28 1661.57,1202.38 1662.16,1201.16 1662.75,1204.38 1663.33,1204.23 1663.92,1205.69 1664.5,1206.94 1665.09,1206.74 1665.68,1206.56 1666.26,1207.98 1666.85,1206.29 1667.44,1206.02 1668.02,1207.49 1668.61,1204.46 1669.2,1207.34 1669.78,1208.56 1670.37,1208.73 1670.96,1205.6 1671.54,1204.41 1672.13,1208.84 1672.71,1210.33 1673.3,1206.89 1673.89,1203.77 1674.47,1200.85 1675.06,1202.41 1675.65,1202.78 1676.23,1201.53 1676.82,1201.97 1677.41,1202.51 1677.99,1203.83 1678.58,1202.38 1679.17,1200.97 1679.75,1201.27 1680.34,1202.98 1680.92,1204.82 1681.51,1206.62 1682.1,1209.41 1682.68,1213.61 1683.27,1214.85 1683.86,1214.33 1684.44,1214.12 1685.03,1210.49 1685.62,1208.78 1686.2,1205.84 1686.79,1205.67 1687.37,1205.5 1687.96,1207 1688.55,1208.73 1689.13,1208.6 1689.72,1205.52 1690.31,1203.96 1690.89,1202.42 1691.48,1204.05 1692.07,1205.28 1692.65,1206.65 1693.24,1206.62 1693.83,1208.02 1694.41,1207.93 1695,1207.6 1695.58,1203.28 1696.17,1200.38 1696.76,1198.98 1697.34,1193.35 1697.93,1193.36 1698.52,1189.65 1699.1,1193.38 1699.69,1195.17 1700.28,1197.21 1700.86,1197.66 1701.45,1202.57 1702.04,1201.2 1702.62,1201.51 1703.21,1198.81 1703.79,1202.19 1704.38,1203.83 1704.97,1203.59 1705.55,1205.18 1706.14,1205.14 1706.73,1206.56 1707.31,1204.84 1707.9,1203.23 1708.49,1204.23 1709.07,1205.56 1709.66,1205.31 1710.24,1205.23 1710.83,1205.37 1711.42,1203.68 1712,1203.97 1712.59,1206.92 1713.18,1206.64 1713.76,1205.01 1714.35,1204.92 1714.94,1210.29 1715.52,1211.27 1716.11,1210.94 1716.7,1209.36 1717.28,1207.74 1717.87,1208.02 1718.45,1206.37 1719.04,1204.68 1719.63,1203.18 1720.21,1201.95 1720.8,1203.79 1721.39,1205.71 1721.97,1205.63 1722.56,1205.25 1723.15,1206.75 1723.73,1206.05 1724.32,1206.05 1724.91,1204.4 1725.49,1202.63 1726.08,1202.75 1726.66,1199.72 1727.25,1200.27 1727.84,1201.86 1728.42,1201.94 1729.01,1201.88 1729.6,1197.36 1730.18,1197.33 1730.77,1197.65 1731.36,1199.25 1731.94,1203.75 1732.53,1205.38 1733.11,1203.88 1733.7,1205.27 1734.29,1205.36 1734.87,1208.08 1735.46,1210.72 1736.05,1208.9 1736.63,1207.23 1737.22,1206.02 1737.81,1207.59 1738.39,1206.12 1738.98,1206.18 1739.57,1207.71 1740.15,1209.01 1740.74,1205.76 1741.32,1204.2 1741.91,1202.76 1742.5,1199.85 1743.08,1200.01 1743.67,1200.24 1744.26,1197.47 1744.84,1199.37 1745.43,1198.59 1746.02,1200.29 1746.6,1197.42 1747.19,1193.53 1747.78,1195.64 1748.36,1195.95 1748.95,1199.1 1749.53,1196.5 1750.12,1198.58 1750.71,1197.73 1751.29,1198.15 1751.88,1201.22 1752.47,1201.32 1753.05,1201.62 1753.64,1203.32 1754.23,1203.25 1754.81,1203.2 1755.4,1203.34 1755.99,1201.82 1756.57,1201.94 1757.16,1203.81 1757.74,1202.43 1758.33,1202.79 1758.92,1201.12 1759.5,1201.13 1760.09,1201.22 1760.68,1202.83 1761.26,1202.99 1761.85,1202.04 1762.44,1200.57 1763.02,1202.27 1763.61,1203.9 1764.19,1203.98 1764.78,1205.45 1765.37,1211.14 1765.95,1213.77 1766.54,1212.02 1767.13,1213.18 1767.71,1209.97 1768.3,1207.9 1768.89,1209.14 1769.47,1213.42 1770.06,1211.79 1770.65,1211.23 1771.23,1207.82 1771.82,1210.98 1772.4,1209.15 1772.99,1207.6 1773.58,1207.1 1774.16,1208.29 1774.75,1209.44 1775.34,1206.13 1775.92,1205.97 1776.51,1204.61 1777.1,1206.16 1777.68,1206.12 1778.27,1204.81 1778.86,1203.58 1779.44,1200.29 1780.03,1200.59 1780.61,1203.73 1781.2,1206.39 1781.79,1209.16 1782.37,1206.98 1782.96,1206.55 1783.55,1204.71 1784.13,1207.37 1784.72,1207.3 1785.31,1208.66 1785.89,1205.45 1786.48,1207.09 1787.06,1205.46 1787.65,1205.35 1788.24,1209.75 1788.82,1206.41 1789.41,1207.71 1790,1209.13 1790.58,1211.68 1791.17,1212.48 1791.76,1210.22 1792.34,1211.22 1792.93,1211.05 1793.52,1208.93 1794.1,1207.06 1794.69,1205.76 1795.27,1203.92 1795.86,1202.32 1796.45,1203.61 1797.03,1203.73 1797.62,1203.46 1798.21,1202.39 1798.79,1201.04 1799.38,1204.03 1799.97,1205.44 1800.55,1208.03 1801.14,1206.05 1801.73,1204.31 1802.31,1204.14 1802.9,1201.17 1803.48,1201.49 1804.07,1201.81 1804.66,1203.4 1805.24,1201.86 1805.83,1201.67 1806.42,1203.39 1807,1204.91 1807.59,1206.41 1808.18,1203.4 1808.76,1202.29 1809.35,1199.24 1809.94,1199.53 1810.52,1201.12 1811.11,1202.37 1811.69,1202.52 1812.28,1202.47 1812.87,1198.14 1813.45,1200.55 1814.04,1205.01 1814.63,1206.57 1815.21,1205.04 1815.8,1203.6 1816.39,1203.68 1816.97,1201.52 1817.56,1204.47 1818.14,1204.75 1818.73,1204.81 1819.32,1203.46 1819.9,1205.17 1820.49,1203.88 1821.08,1205.15 1821.66,1205 1822.25,1206.55 1822.84,1204.98 1823.42,1207.88 1824.01,1208.76 1824.6,1205.69 1825.18,1204.04 1825.77,1205.56 1826.35,1206.51 1826.94,1206.37 1827.53,1206.04 1828.11,1207.26 1828.7,1208.77 1829.29,1213 1829.87,1211.13 1830.46,1207.96 1831.05,1209.13 1831.63,1210.59 1832.22,1210.66 1832.81,1211.99 1833.39,1211.66 1833.98,1214.08 1834.56,1213.45 1835.15,1210.09 1835.74,1210.07 1836.32,1208.44 1836.91,1206.75 1837.5,1208.46 1838.08,1206.86 1838.67,1204.07 1839.26,1202.64 1839.84,1205.93 1840.43,1207.36 1841.01,1204.37 1841.6,1202.97 1842.19,1201.62 1842.77,1200.15 1843.36,1198.79 1843.95,1197.68 1844.53,1197.9 1845.12,1199.47 1845.71,1200.83 1846.29,1199.35 1846.88,1199.56 1847.47,1202.72 1848.05,1203.03 1848.64,1200.21 1849.22,1201.78 1849.81,1204.62 1850.4,1203.23 1850.98,1203.49 1851.57,1203.74 1852.16,1205.6 1852.74,1205.73 1853.33,1207.24 1853.92,1208.2 1854.5,1210.91 1855.09,1208.04 1855.68,1209.24 1856.26,1208.9 1856.85,1208.55 1857.43,1206.92 1858.02,1206.7 1858.61,1208.18 1859.19,1205.05 1859.78,1203.45 1860.37,1201.88 1860.95,1202.17 1861.54,1202.23 1862.13,1205.17 1862.71,1205.38 1863.3,1205.28 1863.88,1205.19 1864.47,1206.8 1865.06,1209.72 1865.64,1211.06 1866.23,1210.89 1866.82,1210.74 1867.4,1209.02 1867.99,1210.44 1868.58,1207.38 1869.16,1208.77 1869.75,1206.94 1870.34,1206.89 1870.92,1205.56 1871.51,1209.98 1872.09,1211.41 1872.68,1212.37 1873.27,1210.47 1873.85,1208.76 1874.44,1208.48 1875.03,1208.02 1875.61,1207.77 1876.2,1207.52 1876.79,1207.46 1877.37,1202.85 1877.96,1201.42 1878.55,1203.3 1879.13,1203.36 1879.72,1203.55 1880.3,1203.42 1880.89,1197.66 1881.48,1200.65 1882.06,1203.91 1882.65,1202.4 1883.24,1200.95 1883.82,1198.06 1884.41,1201.29 1885,1200.16 1885.58,1200.02 1886.17,1201.62 1886.76,1201.43 1887.34,1201.93 1887.93,1202.27 1888.51,1200.95 1889.1,1198.25 1889.69,1199.94 1890.27,1199.97 1890.86,1198.66 1891.45,1200.68 1892.03,1203.57 1892.62,1202.15 1893.21,1199.26 1893.79,1201.13 1894.38,1204.37 1894.96,1201.53 1895.55,1206.02 1896.14,1202.64 1896.72,1204.4 1897.31,1202.77 1897.9,1201.29 1898.48,1199.91 1899.07,1200.03 1899.66,1197.22 1900.24,1199.44 1900.83,1196.63 1901.42,1194.07 1902,1196.25 1902.59,1198.29 1903.17,1198.47 1903.76,1198.63 1904.35,1196.06 1904.93,1199.57 1905.52,1198.13 1906.11,1198.61 1906.69,1198.67 1907.28,1197.72 1907.87,1198.22 1908.45,1203.04 1909.04,1204.53 1909.63,1205.98 1910.21,1204.57 1910.8,1204.48 1911.38,1207.32 1911.97,1206.99 1912.56,1206.89 1913.14,1206.83 1913.73,1209.48 1914.32,1210.73 1914.9,1209.29 1915.49,1213.2 1916.08,1211.32 1916.66,1211.12 1917.25,1209.01 1917.83,1210.32 1918.42,1209.91 1919.01,1212.37 1919.59,1212.13 1920.18,1210.42 1920.77,1208.85 1921.35,1208.77 1921.94,1211.52 1922.53,1212.58 1923.11,1213.56 1923.7,1217.52 1924.29,1216.58 1924.87,1215.89 1925.46,1215.57 1926.04,1213.38 1926.63,1217.2 1927.22,1214.92 1927.8,1214.31 1928.39,1213.84 1928.98,1216.24 1929.56,1215.63 1930.15,1213.74 1930.74,1214.72 1931.32,1211.1 1931.91,1210.63 1932.5,1214.42 1933.08,1213.93 1933.67,1216.34 1934.25,1215.84 1934.84,1215.24 1935.43,1214.76 1936.01,1212.6 1936.6,1207.62 1937.19,1205.9 1937.77,1203.05 1938.36,1201.38 1938.95,1202.59 1939.53,1199.52 1940.12,1201.13 1940.71,1201.21 1941.29,1201.18 1941.88,1201.41 1942.46,1201.68 1943.05,1198.99 1943.64,1199.23 1944.22,1199.31 1944.81,1201.01 1945.4,1202.65 1945.98,1201.29 1946.57,1201.47 1947.16,1201.64 1947.74,1201.38 1948.33,1203.05 1948.91,1203.01 1949.5,1200.22 1950.09,1201.81 1950.67,1203.62 1951.26,1203.76 1951.85,1200.87 1952.43,1201.44 1953.02,1201.69 1953.61,1198.99 1954.19,1199.32 1954.78,1201.04 1955.37,1199.57 1955.95,1199.65 1956.54,1199.92 1957.12,1198.63 1957.71,1200.62 1958.3,1199.57 1958.88,1200.2 1959.47,1203.48 1960.06,1200.63 1960.64,1200.48 1961.23,1199.29 1961.82,1201.28 1962.4,1198.56 1962.99,1197.45 1963.58,1196.36 1964.16,1197.1 1964.75,1194.49 1965.33,1196.42 1965.92,1196.93 1966.51,1198.7 1967.09,1200.62 1967.68,1199.48 1968.27,1199.8 1968.85,1201.8 1969.44,1200.91 1970.03,1201.59 1970.61,1197.58 1971.2,1199.5 1971.78,1201.16 1972.37,1202.65 1972.96,1204.1 1973.54,1207.14 1974.13,1206.91 1974.72,1206.9 1975.3,1206.86 1975.89,1206.83 1976.48,1207.05 1977.06,1208.31 1977.65,1208.25 1978.24,1208.19 1978.82,1206.35 1979.41,1207.78 1979.99,1209.35 1980.58,1210.93 1981.17,1209.25 1981.75,1211.98 1982.34,1208.37 1982.93,1210.94 1983.51,1210.53 1984.1,1210.2 1984.69,1208.53 1985.27,1208.27 1985.86,1212.45 1986.45,1210.83 1987.03,1209.43 1987.62,1207.9 1988.2,1208.98 1988.79,1209.06 1989.38,1207.09 1989.96,1205.62 1990.55,1204.04 1991.14,1205.16 1991.72,1204.82 1992.31,1203.09 1992.9,1203.22 1993.48,1201.85 1994.07,1201.63 1994.65,1201.4 1995.24,1201.66 1995.83,1201.59 1996.41,1203.38 1997,1203.48 1997.59,1206.46 1998.17,1206.24 1998.76,1204.55 1999.35,1201.72 1999.93,1201.86 2000.52,1200.54 2001.11,1201.98 2001.69,1202.38 2002.28,1200.94 2002.86,1202.82 2003.45,1202.69 2004.04,1205.65 2004.62,1202.78 2005.21,1201.69 2005.8,1200.59 2006.38,1200.83 2006.97,1201.19 2007.56,1198.22 2008.14,1196.77 2008.73,1196.95 2009.32,1198.84 2009.9,1197.35 2010.49,1196.17 2011.07,1196.75 2011.66,1197.25 2012.25,1199.12 2012.83,1203.53 2013.42,1206.13 2014.01,1201.5 2014.59,1200.41 2015.18,1200.42 2015.77,1200.73 2016.35,1202.28 2016.94,1205.23 2017.53,1205.2 2018.11,1203.74 2018.7,1203.65 2019.28,1205.23 2019.87,1203.9 2020.46,1204 2021.04,1203.94 2021.63,1205.62 2022.22,1204.17 2022.8,1204.22 2023.39,1201.24 2023.98,1198.83 2024.56,1202.08 2025.15,1202.18 2025.73,1202.37 2026.32,1199.61 2026.91,1199.82 2027.49,1198.89 2028.08,1199.03 2028.67,1199.49 2029.25,1201.25 2029.84,1204.23 2030.43,1200.36 2031.01,1203.5 2031.6,1206.5 2032.19,1204.8 2032.77,1203.53 2033.36,1205.14 2033.94,1205.07 2034.53,1203.62 2035.12,1203.81 2035.7,1203.76 2036.29,1202.29 2036.88,1202.33 2037.46,1202.14 2038.05,1201.04 2038.64,1201.25 2039.22,1201.44 2039.81,1200.56 2040.4,1202.23 2040.98,1203.91 2041.57,1204.08 2042.15,1202.48 2042.74,1201.4 2043.33,1206.07 2043.91,1207.64 2044.5,1206.18 2045.09,1207.35 2045.67,1208.53 2046.26,1206.47 2046.85,1204.75 2047.43,1205.94 2048.02,1205.91 2048.6,1207.3 2049.19,1208.58 2049.78,1210.01 2050.36,1211.24 2050.95,1211.08 2051.54,1210.68 2052.12,1211.51 2052.71,1212.82 2053.3,1209.47 2053.88,1208.03 2054.47,1206.27 2055.06,1203.49 2055.64,1203.72 2056.23,1203.52 2056.81,1203.56 2057.4,1202.24 2057.99,1202.55 2058.57,1201.17 2059.16,1204.28 2059.75,1199.82 2060.33,1198.55 2060.92,1198.45 2061.51,1198.66 2062.09,1200.62 2062.68,1200.7 2063.27,1204.01 2063.85,1202.42 2064.44,1202.69 2065.02,1203.98 2065.61,1205.33 2066.2,1205.19 2066.78,1202.25 2067.37,1202.28 2067.96,1203.85 2068.54,1204.12 2069.13,1206.98 2069.72,1207.08 2070.3,1206.78 2070.89,1205.38 2071.48,1203.77 2072.06,1203.89 2072.65,1205.31 2073.23,1205.03 2073.82,1205.17 2074.41,1204.99 2074.99,1204.67 2075.58,1204.61 2076.17,1210.3 2076.75,1208.28 2077.34,1208.36 2077.93,1209.24 2078.51,1208.98 2079.1,1208.84 2079.68,1210.26 2080.27,1206.83 2080.86,1205.36 2081.44,1202.18 2082.03,1203.78 2082.62,1208.06 2083.2,1206.43 2083.79,1206.33 2084.38,1206.3 2084.96,1206.19 2085.55,1207.68 2086.14,1204.62 2086.72,1202.6 2087.31,1204.32 2087.89,1204.18 2088.48,1204.33 2089.07,1202.78 2089.65,1202.92 2090.24,1205.72 2090.83,1206.93 2091.41,1203.82 2092,1204.08 2092.59,1205.54 2093.17,1205.56 2093.76,1204.36 2094.35,1205.83 2094.93,1207.05 2095.52,1207.15 2096.1,1205.49 2096.69,1207.2 2097.28,1205.38 2097.86,1204.13 2098.45,1203.98 2099.04,1203.93 2099.62,1202.41 2100.21,1199.65 2100.8,1201.49 2101.38,1201.63 2101.97,1201.74 2102.55,1202 2103.14,1203.71 2103.73,1203.66 2104.31,1203.75 2104.9,1199.51 2105.49,1198.38 2106.07,1197.46 2106.66,1193.4 2107.25,1194.15 2107.83,1196.07 2108.42,1196.3 2109.01,1199.67 2109.59,1200.18 2110.18,1200.2 2110.76,1199.24 2111.35,1197.74 2111.94,1196.57 2112.52,1194.3 2113.11,1196.06 2113.7,1195.34 2114.28,1197.38 2114.87,1199.24 2115.46,1202.69 2116.04,1205.76 2116.63,1204.23 2117.22,1207.43 2117.8,1201.49 2118.39,1200.2 2118.97,1200.46 2119.56,1205.04 2120.15,1203.52 2120.73,1200.83 2121.32,1199.42 2121.91,1198.5 2122.49,1198.84 2123.08,1197.87 2123.67,1199.79 2124.25,1200.24 2124.84,1200.64 2125.42,1197.93 2126.01,1198.47 2126.6,1197.5 2127.18,1199.51 2127.77,1195.55 2128.36,1196.08 2128.94,1195.43 2129.53,1197.23 2130.12,1199.05 2130.7,1197.63 2131.29,1197.91 2131.88,1202.53 2132.46,1204.02 2133.05,1205.45 2133.63,1207.01 2134.22,1205.76 2134.81,1205.35 2135.39,1205.17 2135.98,1205.17 2136.57,1206.73 2137.15,1209.59 2137.74,1209.48 2138.33,1210.55 2138.91,1210.11 2139.5,1206.94 2140.09,1206.99 2140.67,1209.76 2141.26,1207.76 2141.84,1207.79 2142.43,1208.81 2143.02,1207.26 2143.6,1205.82 2144.19,1204.03 2144.78,1207.22 2145.36,1208.41 2145.95,1210.73 2146.54,1207.78 2147.12,1206.03 2147.71,1205.9 2148.3,1209.03 2148.88,1211.42 2149.47,1211.13 2150.05,1210.85 2150.64,1210.68 2151.23,1210.02 2151.81,1205.04 2152.4,1205.1 2152.99,1203.73 2153.57,1201.14 2154.16,1206.96 2154.75,1206.86 2155.33,1210.81 2155.92,1210.32 2156.5,1211.45 2157.09,1207.9 2157.68,1204.79 2158.26,1206.27 \"/>\n<path clip-path=\"url(#clip162)\" d=\"M986.025 1204.99 L986.612 1204.99 L987.198 1204.99 L987.785 1204.99 L988.371 1204.99 L988.957 1204.99 L989.544 1204.99 L990.13 1204.99 L990.717 1204.99 L991.303 1204.99 L991.889 1204.99 L992.476 1204.99 L993.062 1204.99 L993.649 1204.99 L994.235 1204.99 L994.822 1204.99 L995.408 1204.99 L995.994 1204.99 L996.581 1204.99 L997.167 1204.99 L997.754 1204.99 L998.34 1204.99 L998.926 1204.99 L999.513 1204.99 L1000.1 1204.99 L1000.69 1204.99 L1001.27 1204.99 L1001.86 1204.99 L1002.44 1204.99 L1003.03 1204.99 L1003.62 1204.99 L1004.2 1204.99 L1004.79 1204.99 L1005.38 1204.99 L1005.96 1204.99 L1006.55 1204.99 L1007.14 1204.99 L1007.72 1204.99 L1008.31 1204.99 L1008.9 1204.99 L1009.48 1204.99 L1010.07 1204.99 L1010.65 1204.99 L1011.24 1204.99 L1011.83 1204.99 L1012.41 1204.99 L1013 1204.99 L1013.59 1204.99 L1014.17 1204.99 L1014.76 1204.99 L1015.35 1204.99 L1015.93 1204.99 L1016.52 1204.99 L1017.11 1204.99 L1017.69 1204.99 L1018.28 1204.99 L1018.86 1204.99 L1019.45 1204.99 L1020.04 1204.99 L1020.62 1204.99 L1021.21 1204.99 L1021.8 1204.99 L1022.38 1204.99 L1022.97 1204.99 L1023.56 1204.99 L1024.14 1204.99 L1024.73 1204.99 L1025.32 1204.99 L1025.9 1204.99 L1026.49 1204.99 L1027.07 1204.99 L1027.66 1204.99 L1028.25 1204.99 L1028.83 1204.99 L1029.42 1204.99 L1030.01 1204.99 L1030.59 1204.99 L1031.18 1204.99 L1031.77 1204.99 L1032.35 1204.99 L1032.94 1204.99 L1033.52 1204.99 L1034.11 1204.99 L1034.7 1204.99 L1035.28 1204.99 L1035.87 1204.99 L1036.46 1204.99 L1037.04 1204.99 L1037.63 1204.99 L1038.22 1204.99 L1038.8 1204.99 L1039.39 1204.99 L1039.98 1204.99 L1040.56 1204.99 L1041.15 1204.99 L1041.73 1204.99 L1042.32 1204.99 L1042.91 1204.99 L1043.49 1204.99 L1044.08 1204.99 L1044.67 1204.99 L1045.25 1204.99 L1045.84 1204.99 L1046.43 1204.99 L1047.01 1204.99 L1047.6 1204.99 L1048.19 1204.99 L1048.77 1204.99 L1049.36 1204.99 L1049.94 1204.99 L1050.53 1204.99 L1051.12 1204.99 L1051.7 1204.99 L1052.29 1204.99 L1052.88 1204.99 L1053.46 1204.99 L1054.05 1204.99 L1054.64 1204.99 L1055.22 1204.99 L1055.81 1204.99 L1056.39 1204.99 L1056.98 1204.99 L1057.57 1204.99 L1058.15 1204.99 L1058.74 1204.99 L1059.33 1204.99 L1059.91 1204.99 L1060.5 1204.99 L1061.09 1204.99 L1061.67 1204.99 L1062.26 1204.99 L1062.85 1204.99 L1063.43 1204.99 L1064.02 1204.99 L1064.6 1204.99 L1065.19 1204.99 L1065.78 1204.99 L1066.36 1204.99 L1066.95 1204.99 L1067.54 1204.99 L1068.12 1204.99 L1068.71 1204.99 L1069.3 1204.99 L1069.88 1204.99 L1070.47 1204.99 L1071.06 1204.99 L1071.64 1204.99 L1072.23 1204.99 L1072.81 1204.99 L1073.4 1204.99 L1073.99 1204.99 L1074.57 1204.99 L1075.16 1204.99 L1075.75 1204.99 L1076.33 1204.99 L1076.92 1204.99 L1077.51 1204.99 L1078.09 1204.99 L1078.68 1204.99 L1079.26 1204.99 L1079.85 1204.99 L1080.44 1204.99 L1081.02 1204.99 L1081.61 1204.99 L1082.2 1204.99 L1082.78 1204.99 L1083.37 1204.99 L1083.96 1204.99 L1084.54 1204.99 L1085.13 1204.99 L1085.72 1204.99 L1086.3 1204.99 L1086.89 1204.99 L1087.47 1204.99 L1088.06 1204.99 L1088.65 1204.99 L1089.23 1204.99 L1089.82 1204.99 L1090.41 1204.99 L1090.99 1204.99 L1091.58 1204.99 L1092.17 1204.99 L1092.75 1204.99 L1093.34 1204.99 L1093.93 1204.99 L1094.51 1204.99 L1095.1 1204.99 L1095.68 1204.99 L1096.27 1204.99 L1096.86 1204.99 L1097.44 1204.99 L1098.03 1204.99 L1098.62 1204.99 L1099.2 1204.99 L1099.79 1204.99 L1100.38 1204.99 L1100.96 1204.99 L1101.55 1204.99 L1102.14 1204.99 L1102.72 1204.99 L1103.31 1204.99 L1103.89 1204.99 L1104.48 1204.99 L1105.07 1204.99 L1105.65 1204.99 L1106.24 1204.99 L1106.83 1204.99 L1107.41 1204.99 L1108 1204.99 L1108.59 1204.99 L1109.17 1204.99 L1109.76 1204.99 L1110.34 1204.99 L1110.93 1204.99 L1111.52 1204.99 L1112.1 1204.99 L1112.69 1204.99 L1113.28 1204.99 L1113.86 1204.99 L1114.45 1204.99 L1115.04 1204.99 L1115.62 1204.99 L1116.21 1204.99 L1116.8 1204.99 L1117.38 1204.99 L1117.97 1204.99 L1118.55 1204.99 L1119.14 1204.99 L1119.73 1204.99 L1120.31 1204.99 L1120.9 1204.99 L1121.49 1204.99 L1122.07 1204.99 L1122.66 1204.99 L1123.25 1204.99 L1123.83 1204.99 L1124.42 1204.99 L1125.01 1204.99 L1125.59 1204.99 L1126.18 1204.99 L1126.76 1204.99 L1127.35 1204.99 L1127.94 1204.99 L1128.52 1204.99 L1129.11 1204.99 L1129.7 1204.99 L1130.28 1204.99 L1130.87 1204.99 L1131.46 1204.99 L1132.04 1204.99 L1132.63 1204.99 L1133.21 1204.99 L1133.8 1204.99 L1134.39 1204.99 L1134.97 1204.99 L1135.56 1204.99 L1136.15 1204.99 L1136.73 1204.99 L1137.32 1204.99 L1137.91 1204.99 L1138.49 1204.99 L1139.08 1204.99 L1139.67 1204.99 L1140.25 1204.99 L1140.84 1204.99 L1141.42 1204.99 L1142.01 1204.99 L1142.6 1204.99 L1143.18 1204.99 L1143.77 1204.99 L1144.36 1204.99 L1144.94 1204.99 L1145.53 1204.99 L1146.12 1204.99 L1146.7 1204.99 L1147.29 1204.99 L1147.88 1204.99 L1148.46 1204.99 L1149.05 1204.99 L1149.63 1204.99 L1150.22 1204.99 L1150.81 1204.99 L1151.39 1204.99 L1151.98 1204.99 L1152.57 1204.99 L1153.15 1204.99 L1153.74 1204.99 L1154.33 1204.99 L1154.91 1204.99 L1155.5 1204.99 L1156.09 1204.99 L1156.67 1204.99 L1157.26 1204.99 L1157.84 1204.99 L1158.43 1204.99 L1159.02 1204.99 L1159.6 1204.99 L1160.19 1204.99 L1160.78 1204.99 L1161.36 1204.99 L1161.95 1204.99 L1162.54 1204.99 L1163.12 1204.99 L1163.71 1204.99 L1164.29 1204.99 L1164.88 1204.99 L1165.47 1204.99 L1166.05 1204.99 L1166.64 1204.99 L1167.23 1204.99 L1167.81 1204.99 L1168.4 1204.99 L1168.99 1204.99 L1169.57 1204.99 L1170.16 1204.99 L1170.75 1204.99 L1171.33 1204.99 L1171.92 1204.99 L1172.5 1204.99 L1173.09 1204.99 L1173.68 1204.99 L1174.26 1204.99 L1174.85 1204.99 L1175.44 1204.99 L1176.02 1204.99 L1176.61 1204.99 L1177.2 1204.99 L1177.78 1204.99 L1178.37 1204.99 L1178.96 1204.99 L1179.54 1204.99 L1180.13 1204.99 L1180.71 1204.99 L1181.3 1204.99 L1181.89 1204.99 L1182.47 1204.99 L1183.06 1204.99 L1183.65 1204.99 L1184.23 1204.99 L1184.82 1204.99 L1185.41 1204.99 L1185.99 1204.99 L1186.58 1204.99 L1187.16 1204.99 L1187.75 1204.99 L1188.34 1204.99 L1188.92 1204.99 L1189.51 1204.99 L1190.1 1204.99 L1190.68 1204.99 L1191.27 1204.99 L1191.86 1204.99 L1192.44 1204.99 L1193.03 1204.99 L1193.62 1204.99 L1194.2 1204.99 L1194.79 1204.99 L1195.37 1204.99 L1195.96 1204.99 L1196.55 1204.99 L1197.13 1204.99 L1197.72 1204.99 L1198.31 1204.99 L1198.89 1204.99 L1199.48 1204.99 L1200.07 1204.99 L1200.65 1204.99 L1201.24 1204.99 L1201.83 1204.99 L1202.41 1204.99 L1203 1204.99 L1203.58 1204.99 L1204.17 1204.99 L1204.76 1204.99 L1205.34 1204.99 L1205.93 1204.99 L1206.52 1204.99 L1207.1 1204.99 L1207.69 1204.99 L1208.28 1204.99 L1208.86 1204.99 L1209.45 1204.99 L1210.03 1204.99 L1210.62 1204.99 L1211.21 1204.99 L1211.79 1204.99 L1212.38 1204.99 L1212.97 1204.99 L1213.55 1204.99 L1214.14 1204.99 L1214.73 1204.99 L1215.31 1204.99 L1215.9 1204.99 L1216.49 1204.99 L1217.07 1204.99 L1217.66 1204.99 L1218.24 1204.99 L1218.83 1204.99 L1219.42 1204.99 L1220 1204.99 L1220.59 1204.99 L1221.18 1204.99 L1221.76 1204.99 L1222.35 1204.99 L1222.94 1204.99 L1223.52 1204.99 L1224.11 1204.99 L1224.7 1204.99 L1225.28 1204.99 L1225.87 1204.99 L1226.45 1204.99 L1227.04 1204.99 L1227.63 1204.99 L1228.21 1204.99 L1228.8 1204.99 L1229.39 1204.99 L1229.97 1204.99 L1230.56 1204.99 L1231.15 1204.99 L1231.73 1204.99 L1232.32 1204.99 L1232.91 1204.99 L1233.49 1204.99 L1234.08 1204.99 L1234.66 1204.99 L1235.25 1204.99 L1235.84 1204.99 L1236.42 1204.99 L1237.01 1204.99 L1237.6 1204.99 L1238.18 1204.99 L1238.77 1204.99 L1239.36 1204.99 L1239.94 1204.99 L1240.53 1204.99 L1241.11 1204.99 L1241.7 1204.99 L1242.29 1204.99 L1242.87 1204.99 L1243.46 1204.99 L1244.05 1204.99 L1244.63 1204.99 L1245.22 1204.99 L1245.81 1204.99 L1246.39 1204.99 L1246.98 1204.99 L1247.57 1204.99 L1248.15 1204.99 L1248.74 1204.99 L1249.32 1204.99 L1249.91 1204.99 L1250.5 1204.99 L1251.08 1204.99 L1251.67 1204.99 L1252.26 1204.99 L1252.84 1204.99 L1253.43 1204.99 L1254.02 1204.99 L1254.6 1204.99 L1255.19 1204.99 L1255.78 1204.99 L1256.36 1204.99 L1256.95 1204.99 L1257.53 1204.99 L1258.12 1204.99 L1258.71 1204.99 L1259.29 1204.99 L1259.88 1204.99 L1260.47 1204.99 L1261.05 1204.99 L1261.64 1204.99 L1262.23 1204.99 L1262.81 1204.99 L1263.4 1204.99 L1263.98 1204.99 L1264.57 1204.99 L1265.16 1204.99 L1265.74 1204.99 L1266.33 1204.99 L1266.92 1204.99 L1267.5 1204.99 L1268.09 1204.99 L1268.68 1204.99 L1269.26 1204.99 L1269.85 1204.99 L1270.44 1204.99 L1271.02 1204.99 L1271.61 1204.99 L1272.19 1204.99 L1272.78 1204.99 L1273.37 1204.99 L1273.95 1204.99 L1274.54 1204.99 L1275.13 1204.99 L1275.71 1204.99 L1276.3 1204.99 L1276.89 1204.99 L1277.47 1204.99 L1278.06 1204.99 L1278.65 1204.99 L1279.23 1204.99 L1279.82 1204.99 L1280.4 1204.99 L1280.99 1204.99 L1281.58 1204.99 L1282.16 1204.99 L1282.75 1204.99 L1283.34 1204.99 L1283.92 1204.99 L1284.51 1204.99 L1285.1 1204.99 L1285.68 1204.99 L1286.27 1204.99 L1286.86 1204.99 L1287.44 1204.99 L1288.03 1204.99 L1288.61 1204.99 L1289.2 1204.99 L1289.79 1204.99 L1290.37 1204.99 L1290.96 1204.99 L1291.55 1204.99 L1292.13 1204.99 L1292.72 1204.99 L1293.31 1204.99 L1293.89 1204.99 L1294.48 1204.99 L1295.06 1204.99 L1295.65 1204.99 L1296.24 1204.99 L1296.82 1204.99 L1297.41 1204.99 L1298 1204.99 L1298.58 1204.99 L1299.17 1204.99 L1299.76 1204.99 L1300.34 1204.99 L1300.93 1204.99 L1301.52 1204.99 L1302.1 1204.99 L1302.69 1204.99 L1303.27 1204.99 L1303.86 1204.99 L1304.45 1204.99 L1305.03 1204.99 L1305.62 1204.99 L1306.21 1204.99 L1306.79 1204.99 L1307.38 1204.99 L1307.97 1204.99 L1308.55 1204.99 L1309.14 1204.99 L1309.73 1204.99 L1310.31 1204.99 L1310.9 1204.99 L1311.48 1204.99 L1312.07 1204.99 L1312.66 1204.99 L1313.24 1204.99 L1313.83 1204.99 L1314.42 1204.99 L1315 1204.99 L1315.59 1204.99 L1316.18 1204.99 L1316.76 1204.99 L1317.35 1204.99 L1317.93 1204.99 L1318.52 1204.99 L1319.11 1204.99 L1319.69 1204.99 L1320.28 1204.99 L1320.87 1204.99 L1321.45 1204.99 L1322.04 1204.99 L1322.63 1204.99 L1323.21 1204.99 L1323.8 1204.99 L1324.39 1204.99 L1324.97 1204.99 L1325.56 1204.99 L1326.14 1204.99 L1326.73 1204.99 L1327.32 1204.99 L1327.9 1204.99 L1328.49 1204.99 L1329.08 1204.99 L1329.66 1204.99 L1330.25 1204.99 L1330.84 1204.99 L1331.42 1204.99 L1332.01 1204.99 L1332.6 1204.99 L1333.18 1204.99 L1333.77 1204.99 L1334.35 1204.99 L1334.94 1204.99 L1335.53 1204.99 L1336.11 1204.99 L1336.7 1204.99 L1337.29 1204.99 L1337.87 1204.99 L1338.46 1204.99 L1339.05 1204.99 L1339.63 1204.99 L1340.22 1204.99 L1340.8 1204.99 L1341.39 1204.99 L1341.98 1204.99 L1342.56 1204.99 L1343.15 1204.99 L1343.74 1204.99 L1344.32 1204.99 L1344.91 1204.99 L1345.5 1204.99 L1346.08 1204.99 L1346.67 1204.99 L1347.26 1204.99 L1347.84 1204.99 L1348.43 1204.99 L1349.01 1204.99 L1349.6 1204.99 L1350.19 1204.99 L1350.77 1204.99 L1351.36 1204.99 L1351.95 1204.99 L1352.53 1204.99 L1353.12 1204.99 L1353.71 1204.99 L1354.29 1204.99 L1354.88 1204.99 L1355.47 1204.99 L1356.05 1204.99 L1356.64 1204.99 L1357.22 1204.99 L1357.81 1204.99 L1358.4 1204.99 L1358.98 1204.99 L1359.57 1204.99 L1360.16 1204.99 L1360.74 1204.99 L1361.33 1204.99 L1361.92 1204.99 L1362.5 1204.99 L1363.09 1204.99 L1363.68 1204.99 L1364.26 1204.99 L1364.85 1204.99 L1365.43 1204.99 L1366.02 1204.99 L1366.61 1204.99 L1367.19 1204.99 L1367.78 1204.99 L1368.37 1204.99 L1368.95 1204.99 L1369.54 1204.99 L1370.13 1204.99 L1370.71 1204.99 L1371.3 1204.99 L1371.88 1204.99 L1372.47 1204.99 L1373.06 1204.99 L1373.64 1204.99 L1374.23 1204.99 L1374.82 1204.99 L1375.4 1204.99 L1375.99 1204.99 L1376.58 1204.99 L1377.16 1204.99 L1377.75 1204.99 L1378.34 1204.99 L1378.92 1204.99 L1379.51 1204.99 L1380.09 1204.99 L1380.68 1204.99 L1381.27 1204.99 L1381.85 1204.99 L1382.44 1204.99 L1383.03 1204.99 L1383.61 1204.99 L1384.2 1204.99 L1384.79 1204.99 L1385.37 1204.99 L1385.96 1204.99 L1386.55 1204.99 L1387.13 1204.99 L1387.72 1204.99 L1388.3 1204.99 L1388.89 1204.99 L1389.48 1204.99 L1390.06 1204.99 L1390.65 1204.99 L1391.24 1204.99 L1391.82 1204.99 L1392.41 1204.99 L1393 1204.99 L1393.58 1204.99 L1394.17 1204.99 L1394.75 1204.99 L1395.34 1204.99 L1395.93 1204.99 L1396.51 1204.99 L1397.1 1204.99 L1397.69 1204.99 L1398.27 1204.99 L1398.86 1204.99 L1399.45 1204.99 L1400.03 1204.99 L1400.62 1204.99 L1401.21 1204.99 L1401.79 1204.99 L1402.38 1204.99 L1402.96 1204.99 L1403.55 1204.99 L1404.14 1204.99 L1404.72 1204.99 L1405.31 1204.99 L1405.9 1204.99 L1406.48 1204.99 L1407.07 1204.99 L1407.66 1204.99 L1408.24 1204.99 L1408.83 1204.99 L1409.42 1204.99 L1410 1204.99 L1410.59 1204.99 L1411.17 1204.99 L1411.76 1204.99 L1412.35 1204.99 L1412.93 1204.99 L1413.52 1204.99 L1414.11 1204.99 L1414.69 1204.99 L1415.28 1204.99 L1415.87 1204.99 L1416.45 1204.99 L1417.04 1204.99 L1417.63 1204.99 L1418.21 1204.99 L1418.8 1204.99 L1419.38 1204.99 L1419.97 1204.99 L1420.56 1204.99 L1421.14 1204.99 L1421.73 1204.99 L1422.32 1204.99 L1422.9 1204.99 L1423.49 1204.99 L1424.08 1204.99 L1424.66 1204.99 L1425.25 1204.99 L1425.83 1204.99 L1426.42 1204.99 L1427.01 1204.99 L1427.59 1204.99 L1428.18 1204.99 L1428.77 1204.99 L1429.35 1204.99 L1429.94 1204.99 L1430.53 1204.99 L1431.11 1204.99 L1431.7 1204.99 L1432.29 1204.99 L1432.87 1204.99 L1433.46 1204.99 L1434.04 1204.99 L1434.63 1204.99 L1435.22 1204.99 L1435.8 1204.99 L1436.39 1204.99 L1436.98 1204.99 L1437.56 1204.99 L1438.15 1204.99 L1438.74 1204.99 L1439.32 1204.99 L1439.91 1204.99 L1440.5 1204.99 L1441.08 1204.99 L1441.67 1204.99 L1442.25 1204.99 L1442.84 1204.99 L1443.43 1204.99 L1444.01 1204.99 L1444.6 1204.99 L1445.19 1204.99 L1445.77 1204.99 L1446.36 1204.99 L1446.95 1204.99 L1447.53 1204.99 L1448.12 1204.99 L1448.7 1204.99 L1449.29 1204.99 L1449.88 1204.99 L1450.46 1204.99 L1451.05 1204.99 L1451.64 1204.99 L1452.22 1204.99 L1452.81 1204.99 L1453.4 1204.99 L1453.98 1204.99 L1454.57 1204.99 L1455.16 1204.99 L1455.74 1204.99 L1456.33 1204.99 L1456.91 1204.99 L1457.5 1204.99 L1458.09 1204.99 L1458.67 1204.99 L1459.26 1204.99 L1459.85 1204.99 L1460.43 1204.99 L1461.02 1204.99 L1461.61 1204.99 L1462.19 1204.99 L1462.78 1204.99 L1463.37 1204.99 L1463.95 1204.99 L1464.54 1204.99 L1465.12 1204.99 L1465.71 1204.99 L1466.3 1204.99 L1466.88 1204.99 L1467.47 1204.99 L1468.06 1204.99 L1468.64 1204.99 L1469.23 1204.99 L1469.82 1204.99 L1470.4 1204.99 L1470.99 1204.99 L1471.57 1204.99 L1472.16 1204.99 L1472.75 1204.99 L1473.33 1204.99 L1473.92 1204.99 L1474.51 1204.99 L1475.09 1204.99 L1475.68 1204.99 L1476.27 1204.99 L1476.85 1204.99 L1477.44 1204.99 L1478.03 1204.99 L1478.61 1204.99 L1479.2 1204.99 L1479.78 1204.99 L1480.37 1204.99 L1480.96 1204.99 L1481.54 1204.99 L1482.13 1204.99 L1482.72 1204.99 L1483.3 1204.99 L1483.89 1204.99 L1484.48 1204.99 L1485.06 1204.99 L1485.65 1204.99 L1486.24 1204.99 L1486.82 1204.99 L1487.41 1204.99 L1487.99 1204.99 L1488.58 1204.99 L1489.17 1204.99 L1489.75 1204.99 L1490.34 1204.99 L1490.93 1204.99 L1491.51 1204.99 L1492.1 1204.99 L1492.69 1204.99 L1493.27 1204.99 L1493.86 1204.99 L1494.45 1204.99 L1495.03 1204.99 L1495.62 1204.99 L1496.2 1204.99 L1496.79 1204.99 L1497.38 1204.99 L1497.96 1204.99 L1498.55 1204.99 L1499.14 1204.99 L1499.72 1204.99 L1500.31 1204.99 L1500.9 1204.99 L1501.48 1204.99 L1502.07 1204.99 L1502.65 1204.99 L1503.24 1204.99 L1503.83 1204.99 L1504.41 1204.99 L1505 1204.99 L1505.59 1204.99 L1506.17 1204.99 L1506.76 1204.99 L1507.35 1204.99 L1507.93 1204.99 L1508.52 1204.99 L1509.11 1204.99 L1509.69 1204.99 L1510.28 1204.99 L1510.86 1204.99 L1511.45 1204.99 L1512.04 1204.99 L1512.62 1204.99 L1513.21 1204.99 L1513.8 1204.99 L1514.38 1204.99 L1514.97 1204.99 L1515.56 1204.99 L1516.14 1204.99 L1516.73 1204.99 L1517.32 1204.99 L1517.9 1204.99 L1518.49 1204.99 L1519.07 1204.99 L1519.66 1204.99 L1520.25 1204.99 L1520.83 1204.99 L1521.42 1204.99 L1522.01 1204.99 L1522.59 1204.99 L1523.18 1204.99 L1523.77 1204.99 L1524.35 1204.99 L1524.94 1204.99 L1525.52 1204.99 L1526.11 1204.99 L1526.7 1204.99 L1527.28 1204.99 L1527.87 1204.99 L1528.46 1204.99 L1529.04 1204.99 L1529.63 1204.99 L1530.22 1204.99 L1530.8 1204.99 L1531.39 1204.99 L1531.98 1204.99 L1532.56 1204.99 L1533.15 1204.99 L1533.73 1204.99 L1534.32 1204.99 L1534.91 1204.99 L1535.49 1204.99 L1536.08 1204.99 L1536.67 1204.99 L1537.25 1204.99 L1537.84 1204.99 L1538.43 1204.99 L1539.01 1204.99 L1539.6 1204.99 L1540.19 1204.99 L1540.77 1204.99 L1541.36 1204.99 L1541.94 1204.99 L1542.53 1204.99 L1543.12 1204.99 L1543.7 1204.99 L1544.29 1204.99 L1544.88 1204.99 L1545.46 1204.99 L1546.05 1204.99 L1546.64 1204.99 L1547.22 1204.99 L1547.81 1204.99 L1548.4 1204.99 L1548.98 1204.99 L1549.57 1204.99 L1550.15 1204.99 L1550.74 1204.99 L1551.33 1204.99 L1551.91 1204.99 L1552.5 1204.99 L1553.09 1204.99 L1553.67 1204.99 L1554.26 1204.99 L1554.85 1204.99 L1555.43 1204.99 L1556.02 1204.99 L1556.6 1204.99 L1557.19 1204.99 L1557.78 1204.99 L1558.36 1204.99 L1558.95 1204.99 L1559.54 1204.99 L1560.12 1204.99 L1560.71 1204.99 L1561.3 1204.99 L1561.88 1204.99 L1562.47 1204.99 L1563.06 1204.99 L1563.64 1204.99 L1564.23 1204.99 L1564.81 1204.99 L1565.4 1204.99 L1565.99 1204.99 L1566.57 1204.99 L1567.16 1204.99 L1567.75 1204.99 L1568.33 1204.99 L1568.92 1204.99 L1569.51 1204.99 L1570.09 1204.99 L1570.68 1204.99 L1571.27 1204.99 L1571.85 1204.99 L1572.44 1204.99 L1573.02 1204.99 L1573.61 1204.99 L1574.2 1204.99 L1574.78 1204.99 L1575.37 1204.99 L1575.96 1204.99 L1576.54 1204.99 L1577.13 1204.99 L1577.72 1204.99 L1578.3 1204.99 L1578.89 1204.99 L1579.47 1204.99 L1580.06 1204.99 L1580.65 1204.99 L1581.23 1204.99 L1581.82 1204.99 L1582.41 1204.99 L1582.99 1204.99 L1583.58 1204.99 L1584.17 1204.99 L1584.75 1204.99 L1585.34 1204.99 L1585.93 1204.99 L1586.51 1204.99 L1587.1 1204.99 L1587.68 1204.99 L1588.27 1204.99 L1588.86 1204.99 L1589.44 1204.99 L1590.03 1204.99 L1590.62 1204.99 L1591.2 1204.99 L1591.79 1204.99 L1592.38 1204.99 L1592.96 1204.99 L1593.55 1204.99 L1594.14 1204.99 L1594.72 1204.99 L1595.31 1204.99 L1595.89 1204.99 L1596.48 1204.99 L1597.07 1204.99 L1597.65 1204.99 L1598.24 1204.99 L1598.83 1204.99 L1599.41 1204.99 L1600 1204.99 L1600.59 1204.99 L1601.17 1204.99 L1601.76 1204.99 L1602.34 1204.99 L1602.93 1204.99 L1603.52 1204.99 L1604.1 1204.99 L1604.69 1204.99 L1605.28 1204.99 L1605.86 1204.99 L1606.45 1204.99 L1607.04 1204.99 L1607.62 1204.99 L1608.21 1204.99 L1608.8 1204.99 L1609.38 1204.99 L1609.97 1204.99 L1610.55 1204.99 L1611.14 1204.99 L1611.73 1204.99 L1612.31 1204.99 L1612.9 1204.99 L1613.49 1204.99 L1614.07 1204.99 L1614.66 1204.99 L1615.25 1204.99 L1615.83 1204.99 L1616.42 1204.99 L1617.01 1204.99 L1617.59 1204.99 L1618.18 1204.99 L1618.76 1204.99 L1619.35 1204.99 L1619.94 1204.99 L1620.52 1204.99 L1621.11 1204.99 L1621.7 1204.99 L1622.28 1204.99 L1622.87 1204.99 L1623.46 1204.99 L1624.04 1204.99 L1624.63 1204.99 L1625.22 1204.99 L1625.8 1204.99 L1626.39 1204.99 L1626.97 1204.99 L1627.56 1204.99 L1628.15 1204.99 L1628.73 1204.99 L1629.32 1204.99 L1629.91 1204.99 L1630.49 1204.99 L1631.08 1204.99 L1631.67 1204.99 L1632.25 1204.99 L1632.84 1204.99 L1633.42 1204.99 L1634.01 1204.99 L1634.6 1204.99 L1635.18 1204.99 L1635.77 1204.99 L1636.36 1204.99 L1636.94 1204.99 L1637.53 1204.99 L1638.12 1204.99 L1638.7 1204.99 L1639.29 1204.99 L1639.88 1204.99 L1640.46 1204.99 L1641.05 1204.99 L1641.63 1204.99 L1642.22 1204.99 L1642.81 1204.99 L1643.39 1204.99 L1643.98 1204.99 L1644.57 1204.99 L1645.15 1204.99 L1645.74 1204.99 L1646.33 1204.99 L1646.91 1204.99 L1647.5 1204.99 L1648.09 1204.99 L1648.67 1204.99 L1649.26 1204.99 L1649.84 1204.99 L1650.43 1204.99 L1651.02 1204.99 L1651.6 1204.99 L1652.19 1204.99 L1652.78 1204.99 L1653.36 1204.99 L1653.95 1204.99 L1654.54 1204.99 L1655.12 1204.99 L1655.71 1204.99 L1656.29 1204.99 L1656.88 1204.99 L1657.47 1204.99 L1658.05 1204.99 L1658.64 1204.99 L1659.23 1204.99 L1659.81 1204.99 L1660.4 1204.99 L1660.99 1204.99 L1661.57 1204.99 L1662.16 1204.99 L1662.75 1204.99 L1663.33 1204.99 L1663.92 1204.99 L1664.5 1204.99 L1665.09 1204.99 L1665.68 1204.99 L1666.26 1204.99 L1666.85 1204.99 L1667.44 1204.99 L1668.02 1204.99 L1668.61 1204.99 L1669.2 1204.99 L1669.78 1204.99 L1670.37 1204.99 L1670.96 1204.99 L1671.54 1204.99 L1672.13 1204.99 L1672.71 1204.99 L1673.3 1204.99 L1673.89 1204.99 L1674.47 1204.99 L1675.06 1204.99 L1675.65 1204.99 L1676.23 1204.99 L1676.82 1204.99 L1677.41 1204.99 L1677.99 1204.99 L1678.58 1204.99 L1679.17 1204.99 L1679.75 1204.99 L1680.34 1204.99 L1680.92 1204.99 L1681.51 1204.99 L1682.1 1204.99 L1682.68 1204.99 L1683.27 1204.99 L1683.86 1204.99 L1684.44 1204.99 L1685.03 1204.99 L1685.62 1204.99 L1686.2 1204.99 L1686.79 1204.99 L1687.37 1204.99 L1687.96 1204.99 L1688.55 1204.99 L1689.13 1204.99 L1689.72 1204.99 L1690.31 1204.99 L1690.89 1204.99 L1691.48 1204.99 L1692.07 1204.99 L1692.65 1204.99 L1693.24 1204.99 L1693.83 1204.99 L1694.41 1204.99 L1695 1204.99 L1695.58 1204.99 L1696.17 1204.99 L1696.76 1204.99 L1697.34 1204.99 L1697.93 1204.99 L1698.52 1204.99 L1699.1 1204.99 L1699.69 1204.99 L1700.28 1204.99 L1700.86 1204.99 L1701.45 1204.99 L1702.04 1204.99 L1702.62 1204.99 L1703.21 1204.99 L1703.79 1204.99 L1704.38 1204.99 L1704.97 1204.99 L1705.55 1204.99 L1706.14 1204.99 L1706.73 1204.99 L1707.31 1204.99 L1707.9 1204.99 L1708.49 1204.99 L1709.07 1204.99 L1709.66 1204.99 L1710.24 1204.99 L1710.83 1204.99 L1711.42 1204.99 L1712 1204.99 L1712.59 1204.99 L1713.18 1204.99 L1713.76 1204.99 L1714.35 1204.99 L1714.94 1204.99 L1715.52 1204.99 L1716.11 1204.99 L1716.7 1204.99 L1717.28 1204.99 L1717.87 1204.99 L1718.45 1204.99 L1719.04 1204.99 L1719.63 1204.99 L1720.21 1204.99 L1720.8 1204.99 L1721.39 1204.99 L1721.97 1204.99 L1722.56 1204.99 L1723.15 1204.99 L1723.73 1204.99 L1724.32 1204.99 L1724.91 1204.99 L1725.49 1204.99 L1726.08 1204.99 L1726.66 1204.99 L1727.25 1204.99 L1727.84 1204.99 L1728.42 1204.99 L1729.01 1204.99 L1729.6 1204.99 L1730.18 1204.99 L1730.77 1204.99 L1731.36 1204.99 L1731.94 1204.99 L1732.53 1204.99 L1733.11 1204.99 L1733.7 1204.99 L1734.29 1204.99 L1734.87 1204.99 L1735.46 1204.99 L1736.05 1204.99 L1736.63 1204.99 L1737.22 1204.99 L1737.81 1204.99 L1738.39 1204.99 L1738.98 1204.99 L1739.57 1204.99 L1740.15 1204.99 L1740.74 1204.99 L1741.32 1204.99 L1741.91 1204.99 L1742.5 1204.99 L1743.08 1204.99 L1743.67 1204.99 L1744.26 1204.99 L1744.84 1204.99 L1745.43 1204.99 L1746.02 1204.99 L1746.6 1204.99 L1747.19 1204.99 L1747.78 1204.99 L1748.36 1204.99 L1748.95 1204.99 L1749.53 1204.99 L1750.12 1204.99 L1750.71 1204.99 L1751.29 1204.99 L1751.88 1204.99 L1752.47 1204.99 L1753.05 1204.99 L1753.64 1204.99 L1754.23 1204.99 L1754.81 1204.99 L1755.4 1204.99 L1755.99 1204.99 L1756.57 1204.99 L1757.16 1204.99 L1757.74 1204.99 L1758.33 1204.99 L1758.92 1204.99 L1759.5 1204.99 L1760.09 1204.99 L1760.68 1204.99 L1761.26 1204.99 L1761.85 1204.99 L1762.44 1204.99 L1763.02 1204.99 L1763.61 1204.99 L1764.19 1204.99 L1764.78 1204.99 L1765.37 1204.99 L1765.95 1204.99 L1766.54 1204.99 L1767.13 1204.99 L1767.71 1204.99 L1768.3 1204.99 L1768.89 1204.99 L1769.47 1204.99 L1770.06 1204.99 L1770.65 1204.99 L1771.23 1204.99 L1771.82 1204.99 L1772.4 1204.99 L1772.99 1204.99 L1773.58 1204.99 L1774.16 1204.99 L1774.75 1204.99 L1775.34 1204.99 L1775.92 1204.99 L1776.51 1204.99 L1777.1 1204.99 L1777.68 1204.99 L1778.27 1204.99 L1778.86 1204.99 L1779.44 1204.99 L1780.03 1204.99 L1780.61 1204.99 L1781.2 1204.99 L1781.79 1204.99 L1782.37 1204.99 L1782.96 1204.99 L1783.55 1204.99 L1784.13 1204.99 L1784.72 1204.99 L1785.31 1204.99 L1785.89 1204.99 L1786.48 1204.99 L1787.06 1204.99 L1787.65 1204.99 L1788.24 1204.99 L1788.82 1204.99 L1789.41 1204.99 L1790 1204.99 L1790.58 1204.99 L1791.17 1204.99 L1791.76 1204.99 L1792.34 1204.99 L1792.93 1204.99 L1793.52 1204.99 L1794.1 1204.99 L1794.69 1204.99 L1795.27 1204.99 L1795.86 1204.99 L1796.45 1204.99 L1797.03 1204.99 L1797.62 1204.99 L1798.21 1204.99 L1798.79 1204.99 L1799.38 1204.99 L1799.97 1204.99 L1800.55 1204.99 L1801.14 1204.99 L1801.73 1204.99 L1802.31 1204.99 L1802.9 1204.99 L1803.48 1204.99 L1804.07 1204.99 L1804.66 1204.99 L1805.24 1204.99 L1805.83 1204.99 L1806.42 1204.99 L1807 1204.99 L1807.59 1204.99 L1808.18 1204.99 L1808.76 1204.99 L1809.35 1204.99 L1809.94 1204.99 L1810.52 1204.99 L1811.11 1204.99 L1811.69 1204.99 L1812.28 1204.99 L1812.87 1204.99 L1813.45 1204.99 L1814.04 1204.99 L1814.63 1204.99 L1815.21 1204.99 L1815.8 1204.99 L1816.39 1204.99 L1816.97 1204.99 L1817.56 1204.99 L1818.14 1204.99 L1818.73 1204.99 L1819.32 1204.99 L1819.9 1204.99 L1820.49 1204.99 L1821.08 1204.99 L1821.66 1204.99 L1822.25 1204.99 L1822.84 1204.99 L1823.42 1204.99 L1824.01 1204.99 L1824.6 1204.99 L1825.18 1204.99 L1825.77 1204.99 L1826.35 1204.99 L1826.94 1204.99 L1827.53 1204.99 L1828.11 1204.99 L1828.7 1204.99 L1829.29 1204.99 L1829.87 1204.99 L1830.46 1204.99 L1831.05 1204.99 L1831.63 1204.99 L1832.22 1204.99 L1832.81 1204.99 L1833.39 1204.99 L1833.98 1204.99 L1834.56 1204.99 L1835.15 1204.99 L1835.74 1204.99 L1836.32 1204.99 L1836.91 1204.99 L1837.5 1204.99 L1838.08 1204.99 L1838.67 1204.99 L1839.26 1204.99 L1839.84 1204.99 L1840.43 1204.99 L1841.01 1204.99 L1841.6 1204.99 L1842.19 1204.99 L1842.77 1204.99 L1843.36 1204.99 L1843.95 1204.99 L1844.53 1204.99 L1845.12 1204.99 L1845.71 1204.99 L1846.29 1204.99 L1846.88 1204.99 L1847.47 1204.99 L1848.05 1204.99 L1848.64 1204.99 L1849.22 1204.99 L1849.81 1204.99 L1850.4 1204.99 L1850.98 1204.99 L1851.57 1204.99 L1852.16 1204.99 L1852.74 1204.99 L1853.33 1204.99 L1853.92 1204.99 L1854.5 1204.99 L1855.09 1204.99 L1855.68 1204.99 L1856.26 1204.99 L1856.85 1204.99 L1857.43 1204.99 L1858.02 1204.99 L1858.61 1204.99 L1859.19 1204.99 L1859.78 1204.99 L1860.37 1204.99 L1860.95 1204.99 L1861.54 1204.99 L1862.13 1204.99 L1862.71 1204.99 L1863.3 1204.99 L1863.88 1204.99 L1864.47 1204.99 L1865.06 1204.99 L1865.64 1204.99 L1866.23 1204.99 L1866.82 1204.99 L1867.4 1204.99 L1867.99 1204.99 L1868.58 1204.99 L1869.16 1204.99 L1869.75 1204.99 L1870.34 1204.99 L1870.92 1204.99 L1871.51 1204.99 L1872.09 1204.99 L1872.68 1204.99 L1873.27 1204.99 L1873.85 1204.99 L1874.44 1204.99 L1875.03 1204.99 L1875.61 1204.99 L1876.2 1204.99 L1876.79 1204.99 L1877.37 1204.99 L1877.96 1204.99 L1878.55 1204.99 L1879.13 1204.99 L1879.72 1204.99 L1880.3 1204.99 L1880.89 1204.99 L1881.48 1204.99 L1882.06 1204.99 L1882.65 1204.99 L1883.24 1204.99 L1883.82 1204.99 L1884.41 1204.99 L1885 1204.99 L1885.58 1204.99 L1886.17 1204.99 L1886.76 1204.99 L1887.34 1204.99 L1887.93 1204.99 L1888.51 1204.99 L1889.1 1204.99 L1889.69 1204.99 L1890.27 1204.99 L1890.86 1204.99 L1891.45 1204.99 L1892.03 1204.99 L1892.62 1204.99 L1893.21 1204.99 L1893.79 1204.99 L1894.38 1204.99 L1894.96 1204.99 L1895.55 1204.99 L1896.14 1204.99 L1896.72 1204.99 L1897.31 1204.99 L1897.9 1204.99 L1898.48 1204.99 L1899.07 1204.99 L1899.66 1204.99 L1900.24 1204.99 L1900.83 1204.99 L1901.42 1204.99 L1902 1204.99 L1902.59 1204.99 L1903.17 1204.99 L1903.76 1204.99 L1904.35 1204.99 L1904.93 1204.99 L1905.52 1204.99 L1906.11 1204.99 L1906.69 1204.99 L1907.28 1204.99 L1907.87 1204.99 L1908.45 1204.99 L1909.04 1204.99 L1909.63 1204.99 L1910.21 1204.99 L1910.8 1204.99 L1911.38 1204.99 L1911.97 1204.99 L1912.56 1204.99 L1913.14 1204.99 L1913.73 1204.99 L1914.32 1204.99 L1914.9 1204.99 L1915.49 1204.99 L1916.08 1204.99 L1916.66 1204.99 L1917.25 1204.99 L1917.83 1204.99 L1918.42 1204.99 L1919.01 1204.99 L1919.59 1204.99 L1920.18 1204.99 L1920.77 1204.99 L1921.35 1204.99 L1921.94 1204.99 L1922.53 1204.99 L1923.11 1204.99 L1923.7 1204.99 L1924.29 1204.99 L1924.87 1204.99 L1925.46 1204.99 L1926.04 1204.99 L1926.63 1204.99 L1927.22 1204.99 L1927.8 1204.99 L1928.39 1204.99 L1928.98 1204.99 L1929.56 1204.99 L1930.15 1204.99 L1930.74 1204.99 L1931.32 1204.99 L1931.91 1204.99 L1932.5 1204.99 L1933.08 1204.99 L1933.67 1204.99 L1934.25 1204.99 L1934.84 1204.99 L1935.43 1204.99 L1936.01 1204.99 L1936.6 1204.99 L1937.19 1204.99 L1937.77 1204.99 L1938.36 1204.99 L1938.95 1204.99 L1939.53 1204.99 L1940.12 1204.99 L1940.71 1204.99 L1941.29 1204.99 L1941.88 1204.99 L1942.46 1204.99 L1943.05 1204.99 L1943.64 1204.99 L1944.22 1204.99 L1944.81 1204.99 L1945.4 1204.99 L1945.98 1204.99 L1946.57 1204.99 L1947.16 1204.99 L1947.74 1204.99 L1948.33 1204.99 L1948.91 1204.99 L1949.5 1204.99 L1950.09 1204.99 L1950.67 1204.99 L1951.26 1204.99 L1951.85 1204.99 L1952.43 1204.99 L1953.02 1204.99 L1953.61 1204.99 L1954.19 1204.99 L1954.78 1204.99 L1955.37 1204.99 L1955.95 1204.99 L1956.54 1204.99 L1957.12 1204.99 L1957.71 1204.99 L1958.3 1204.99 L1958.88 1204.99 L1959.47 1204.99 L1960.06 1204.99 L1960.64 1204.99 L1961.23 1204.99 L1961.82 1204.99 L1962.4 1204.99 L1962.99 1204.99 L1963.58 1204.99 L1964.16 1204.99 L1964.75 1204.99 L1965.33 1204.99 L1965.92 1204.99 L1966.51 1204.99 L1967.09 1204.99 L1967.68 1204.99 L1968.27 1204.99 L1968.85 1204.99 L1969.44 1204.99 L1970.03 1204.99 L1970.61 1204.99 L1971.2 1204.99 L1971.78 1204.99 L1972.37 1204.99 L1972.96 1204.99 L1973.54 1204.99 L1974.13 1204.99 L1974.72 1204.99 L1975.3 1204.99 L1975.89 1204.99 L1976.48 1204.99 L1977.06 1204.99 L1977.65 1204.99 L1978.24 1204.99 L1978.82 1204.99 L1979.41 1204.99 L1979.99 1204.99 L1980.58 1204.99 L1981.17 1204.99 L1981.75 1204.99 L1982.34 1204.99 L1982.93 1204.99 L1983.51 1204.99 L1984.1 1204.99 L1984.69 1204.99 L1985.27 1204.99 L1985.86 1204.99 L1986.45 1204.99 L1987.03 1204.99 L1987.62 1204.99 L1988.2 1204.99 L1988.79 1204.99 L1989.38 1204.99 L1989.96 1204.99 L1990.55 1204.99 L1991.14 1204.99 L1991.72 1204.99 L1992.31 1204.99 L1992.9 1204.99 L1993.48 1204.99 L1994.07 1204.99 L1994.65 1204.99 L1995.24 1204.99 L1995.83 1204.99 L1996.41 1204.99 L1997 1204.99 L1997.59 1204.99 L1998.17 1204.99 L1998.76 1204.99 L1999.35 1204.99 L1999.93 1204.99 L2000.52 1204.99 L2001.11 1204.99 L2001.69 1204.99 L2002.28 1204.99 L2002.86 1204.99 L2003.45 1204.99 L2004.04 1204.99 L2004.62 1204.99 L2005.21 1204.99 L2005.8 1204.99 L2006.38 1204.99 L2006.97 1204.99 L2007.56 1204.99 L2008.14 1204.99 L2008.73 1204.99 L2009.32 1204.99 L2009.9 1204.99 L2010.49 1204.99 L2011.07 1204.99 L2011.66 1204.99 L2012.25 1204.99 L2012.83 1204.99 L2013.42 1204.99 L2014.01 1204.99 L2014.59 1204.99 L2015.18 1204.99 L2015.77 1204.99 L2016.35 1204.99 L2016.94 1204.99 L2017.53 1204.99 L2018.11 1204.99 L2018.7 1204.99 L2019.28 1204.99 L2019.87 1204.99 L2020.46 1204.99 L2021.04 1204.99 L2021.63 1204.99 L2022.22 1204.99 L2022.8 1204.99 L2023.39 1204.99 L2023.98 1204.99 L2024.56 1204.99 L2025.15 1204.99 L2025.73 1204.99 L2026.32 1204.99 L2026.91 1204.99 L2027.49 1204.99 L2028.08 1204.99 L2028.67 1204.99 L2029.25 1204.99 L2029.84 1204.99 L2030.43 1204.99 L2031.01 1204.99 L2031.6 1204.99 L2032.19 1204.99 L2032.77 1204.99 L2033.36 1204.99 L2033.94 1204.99 L2034.53 1204.99 L2035.12 1204.99 L2035.7 1204.99 L2036.29 1204.99 L2036.88 1204.99 L2037.46 1204.99 L2038.05 1204.99 L2038.64 1204.99 L2039.22 1204.99 L2039.81 1204.99 L2040.4 1204.99 L2040.98 1204.99 L2041.57 1204.99 L2042.15 1204.99 L2042.74 1204.99 L2043.33 1204.99 L2043.91 1204.99 L2044.5 1204.99 L2045.09 1204.99 L2045.67 1204.99 L2046.26 1204.99 L2046.85 1204.99 L2047.43 1204.99 L2048.02 1204.99 L2048.6 1204.99 L2049.19 1204.99 L2049.78 1204.99 L2050.36 1204.99 L2050.95 1204.99 L2051.54 1204.99 L2052.12 1204.99 L2052.71 1204.99 L2053.3 1204.99 L2053.88 1204.99 L2054.47 1204.99 L2055.06 1204.99 L2055.64 1204.99 L2056.23 1204.99 L2056.81 1204.99 L2057.4 1204.99 L2057.99 1204.99 L2058.57 1204.99 L2059.16 1204.99 L2059.75 1204.99 L2060.33 1204.99 L2060.92 1204.99 L2061.51 1204.99 L2062.09 1204.99 L2062.68 1204.99 L2063.27 1204.99 L2063.85 1204.99 L2064.44 1204.99 L2065.02 1204.99 L2065.61 1204.99 L2066.2 1204.99 L2066.78 1204.99 L2067.37 1204.99 L2067.96 1204.99 L2068.54 1204.99 L2069.13 1204.99 L2069.72 1204.99 L2070.3 1204.99 L2070.89 1204.99 L2071.48 1204.99 L2072.06 1204.99 L2072.65 1204.99 L2073.23 1204.99 L2073.82 1204.99 L2074.41 1204.99 L2074.99 1204.99 L2075.58 1204.99 L2076.17 1204.99 L2076.75 1204.99 L2077.34 1204.99 L2077.93 1204.99 L2078.51 1204.99 L2079.1 1204.99 L2079.68 1204.99 L2080.27 1204.99 L2080.86 1204.99 L2081.44 1204.99 L2082.03 1204.99 L2082.62 1204.99 L2083.2 1204.99 L2083.79 1204.99 L2084.38 1204.99 L2084.96 1204.99 L2085.55 1204.99 L2086.14 1204.99 L2086.72 1204.99 L2087.31 1204.99 L2087.89 1204.99 L2088.48 1204.99 L2089.07 1204.99 L2089.65 1204.99 L2090.24 1204.99 L2090.83 1204.99 L2091.41 1204.99 L2092 1204.99 L2092.59 1204.99 L2093.17 1204.99 L2093.76 1204.99 L2094.35 1204.99 L2094.93 1204.99 L2095.52 1204.99 L2096.1 1204.99 L2096.69 1204.99 L2097.28 1204.99 L2097.86 1204.99 L2098.45 1204.99 L2099.04 1204.99 L2099.62 1204.99 L2100.21 1204.99 L2100.8 1204.99 L2101.38 1204.99 L2101.97 1204.99 L2102.55 1204.99 L2103.14 1204.99 L2103.73 1204.99 L2104.31 1204.99 L2104.9 1204.99 L2105.49 1204.99 L2106.07 1204.99 L2106.66 1204.99 L2107.25 1204.99 L2107.83 1204.99 L2108.42 1204.99 L2109.01 1204.99 L2109.59 1204.99 L2110.18 1204.99 L2110.76 1204.99 L2111.35 1204.99 L2111.94 1204.99 L2112.52 1204.99 L2113.11 1204.99 L2113.7 1204.99 L2114.28 1204.99 L2114.87 1204.99 L2115.46 1204.99 L2116.04 1204.99 L2116.63 1204.99 L2117.22 1204.99 L2117.8 1204.99 L2118.39 1204.99 L2118.97 1204.99 L2119.56 1204.99 L2120.15 1204.99 L2120.73 1204.99 L2121.32 1204.99 L2121.91 1204.99 L2122.49 1204.99 L2123.08 1204.99 L2123.67 1204.99 L2124.25 1204.99 L2124.84 1204.99 L2125.42 1204.99 L2126.01 1204.99 L2126.6 1204.99 L2127.18 1204.99 L2127.77 1204.99 L2128.36 1204.99 L2128.94 1204.99 L2129.53 1204.99 L2130.12 1204.99 L2130.7 1204.99 L2131.29 1204.99 L2131.88 1204.99 L2132.46 1204.99 L2133.05 1204.99 L2133.63 1204.99 L2134.22 1204.99 L2134.81 1204.99 L2135.39 1204.99 L2135.98 1204.99 L2136.57 1204.99 L2137.15 1204.99 L2137.74 1204.99 L2138.33 1204.99 L2138.91 1204.99 L2139.5 1204.99 L2140.09 1204.99 L2140.67 1204.99 L2141.26 1204.99 L2141.84 1204.99 L2142.43 1204.99 L2143.02 1204.99 L2143.6 1204.99 L2144.19 1204.99 L2144.78 1204.99 L2145.36 1204.99 L2145.95 1204.99 L2146.54 1204.99 L2147.12 1204.99 L2147.71 1204.99 L2148.3 1204.99 L2148.88 1204.99 L2149.47 1204.99 L2150.05 1204.99 L2150.64 1204.99 L2151.23 1204.99 L2151.81 1204.99 L2152.4 1204.99 L2152.99 1204.99 L2153.57 1204.99 L2154.16 1204.99 L2154.75 1204.99 L2155.33 1204.99 L2155.92 1204.99 L2156.5 1204.99 L2157.09 1204.99 L2157.68 1204.99 L2158.26 1204.99 L2158.26 1204.2 L2157.68 1204.2 L2157.09 1204.2 L2156.5 1204.2 L2155.92 1204.2 L2155.33 1204.2 L2154.75 1204.2 L2154.16 1204.2 L2153.57 1204.2 L2152.99 1204.2 L2152.4 1204.2 L2151.81 1204.2 L2151.23 1204.2 L2150.64 1204.2 L2150.05 1204.2 L2149.47 1204.2 L2148.88 1204.2 L2148.3 1204.2 L2147.71 1204.2 L2147.12 1204.2 L2146.54 1204.2 L2145.95 1204.2 L2145.36 1204.2 L2144.78 1204.2 L2144.19 1204.2 L2143.6 1204.2 L2143.02 1204.2 L2142.43 1204.2 L2141.84 1204.2 L2141.26 1204.2 L2140.67 1204.2 L2140.09 1204.2 L2139.5 1204.2 L2138.91 1204.2 L2138.33 1204.2 L2137.74 1204.2 L2137.15 1204.2 L2136.57 1204.2 L2135.98 1204.2 L2135.39 1204.2 L2134.81 1204.2 L2134.22 1204.2 L2133.63 1204.2 L2133.05 1204.2 L2132.46 1204.2 L2131.88 1204.2 L2131.29 1204.2 L2130.7 1204.2 L2130.12 1204.2 L2129.53 1204.2 L2128.94 1204.2 L2128.36 1204.2 L2127.77 1204.2 L2127.18 1204.2 L2126.6 1204.2 L2126.01 1204.2 L2125.42 1204.2 L2124.84 1204.2 L2124.25 1204.2 L2123.67 1204.2 L2123.08 1204.2 L2122.49 1204.2 L2121.91 1204.2 L2121.32 1204.2 L2120.73 1204.2 L2120.15 1204.2 L2119.56 1204.2 L2118.97 1204.2 L2118.39 1204.2 L2117.8 1204.2 L2117.22 1204.2 L2116.63 1204.2 L2116.04 1204.2 L2115.46 1204.2 L2114.87 1204.2 L2114.28 1204.2 L2113.7 1204.2 L2113.11 1204.2 L2112.52 1204.2 L2111.94 1204.2 L2111.35 1204.2 L2110.76 1204.2 L2110.18 1204.2 L2109.59 1204.2 L2109.01 1204.2 L2108.42 1204.2 L2107.83 1204.2 L2107.25 1204.2 L2106.66 1204.2 L2106.07 1204.2 L2105.49 1204.2 L2104.9 1204.2 L2104.31 1204.2 L2103.73 1204.2 L2103.14 1204.2 L2102.55 1204.2 L2101.97 1204.2 L2101.38 1204.2 L2100.8 1204.2 L2100.21 1204.2 L2099.62 1204.2 L2099.04 1204.2 L2098.45 1204.2 L2097.86 1204.2 L2097.28 1204.2 L2096.69 1204.2 L2096.1 1204.2 L2095.52 1204.2 L2094.93 1204.2 L2094.35 1204.2 L2093.76 1204.2 L2093.17 1204.2 L2092.59 1204.2 L2092 1204.2 L2091.41 1204.2 L2090.83 1204.2 L2090.24 1204.2 L2089.65 1204.2 L2089.07 1204.2 L2088.48 1204.2 L2087.89 1204.2 L2087.31 1204.2 L2086.72 1204.2 L2086.14 1204.2 L2085.55 1204.2 L2084.96 1204.2 L2084.38 1204.2 L2083.79 1204.2 L2083.2 1204.2 L2082.62 1204.2 L2082.03 1204.2 L2081.44 1204.2 L2080.86 1204.2 L2080.27 1204.2 L2079.68 1204.2 L2079.1 1204.2 L2078.51 1204.2 L2077.93 1204.2 L2077.34 1204.2 L2076.75 1204.2 L2076.17 1204.2 L2075.58 1204.2 L2074.99 1204.2 L2074.41 1204.2 L2073.82 1204.2 L2073.23 1204.2 L2072.65 1204.2 L2072.06 1204.2 L2071.48 1204.2 L2070.89 1204.2 L2070.3 1204.2 L2069.72 1204.2 L2069.13 1204.2 L2068.54 1204.2 L2067.96 1204.2 L2067.37 1204.2 L2066.78 1204.2 L2066.2 1204.2 L2065.61 1204.2 L2065.02 1204.2 L2064.44 1204.2 L2063.85 1204.2 L2063.27 1204.2 L2062.68 1204.2 L2062.09 1204.2 L2061.51 1204.2 L2060.92 1204.2 L2060.33 1204.2 L2059.75 1204.2 L2059.16 1204.2 L2058.57 1204.2 L2057.99 1204.2 L2057.4 1204.2 L2056.81 1204.2 L2056.23 1204.2 L2055.64 1204.2 L2055.06 1204.2 L2054.47 1204.2 L2053.88 1204.2 L2053.3 1204.2 L2052.71 1204.2 L2052.12 1204.2 L2051.54 1204.2 L2050.95 1204.2 L2050.36 1204.2 L2049.78 1204.2 L2049.19 1204.2 L2048.6 1204.2 L2048.02 1204.2 L2047.43 1204.2 L2046.85 1204.2 L2046.26 1204.2 L2045.67 1204.2 L2045.09 1204.2 L2044.5 1204.2 L2043.91 1204.2 L2043.33 1204.2 L2042.74 1204.2 L2042.15 1204.2 L2041.57 1204.2 L2040.98 1204.2 L2040.4 1204.2 L2039.81 1204.2 L2039.22 1204.2 L2038.64 1204.2 L2038.05 1204.2 L2037.46 1204.2 L2036.88 1204.2 L2036.29 1204.2 L2035.7 1204.2 L2035.12 1204.2 L2034.53 1204.2 L2033.94 1204.2 L2033.36 1204.2 L2032.77 1204.2 L2032.19 1204.2 L2031.6 1204.2 L2031.01 1204.2 L2030.43 1204.2 L2029.84 1204.2 L2029.25 1204.2 L2028.67 1204.2 L2028.08 1204.2 L2027.49 1204.2 L2026.91 1204.2 L2026.32 1204.2 L2025.73 1204.2 L2025.15 1204.2 L2024.56 1204.2 L2023.98 1204.2 L2023.39 1204.2 L2022.8 1204.2 L2022.22 1204.2 L2021.63 1204.2 L2021.04 1204.2 L2020.46 1204.2 L2019.87 1204.2 L2019.28 1204.2 L2018.7 1204.2 L2018.11 1204.2 L2017.53 1204.2 L2016.94 1204.2 L2016.35 1204.2 L2015.77 1204.2 L2015.18 1204.2 L2014.59 1204.2 L2014.01 1204.2 L2013.42 1204.2 L2012.83 1204.2 L2012.25 1204.2 L2011.66 1204.2 L2011.07 1204.2 L2010.49 1204.2 L2009.9 1204.2 L2009.32 1204.2 L2008.73 1204.2 L2008.14 1204.2 L2007.56 1204.2 L2006.97 1204.2 L2006.38 1204.2 L2005.8 1204.2 L2005.21 1204.2 L2004.62 1204.2 L2004.04 1204.2 L2003.45 1204.2 L2002.86 1204.2 L2002.28 1204.2 L2001.69 1204.2 L2001.11 1204.2 L2000.52 1204.2 L1999.93 1204.2 L1999.35 1204.2 L1998.76 1204.2 L1998.17 1204.2 L1997.59 1204.2 L1997 1204.2 L1996.41 1204.2 L1995.83 1204.2 L1995.24 1204.2 L1994.65 1204.2 L1994.07 1204.2 L1993.48 1204.2 L1992.9 1204.2 L1992.31 1204.2 L1991.72 1204.2 L1991.14 1204.2 L1990.55 1204.2 L1989.96 1204.2 L1989.38 1204.2 L1988.79 1204.2 L1988.2 1204.2 L1987.62 1204.2 L1987.03 1204.2 L1986.45 1204.2 L1985.86 1204.2 L1985.27 1204.2 L1984.69 1204.2 L1984.1 1204.2 L1983.51 1204.2 L1982.93 1204.2 L1982.34 1204.2 L1981.75 1204.2 L1981.17 1204.2 L1980.58 1204.2 L1979.99 1204.2 L1979.41 1204.2 L1978.82 1204.2 L1978.24 1204.2 L1977.65 1204.2 L1977.06 1204.2 L1976.48 1204.2 L1975.89 1204.2 L1975.3 1204.2 L1974.72 1204.2 L1974.13 1204.2 L1973.54 1204.2 L1972.96 1204.2 L1972.37 1204.2 L1971.78 1204.2 L1971.2 1204.2 L1970.61 1204.2 L1970.03 1204.2 L1969.44 1204.2 L1968.85 1204.2 L1968.27 1204.2 L1967.68 1204.2 L1967.09 1204.2 L1966.51 1204.2 L1965.92 1204.2 L1965.33 1204.2 L1964.75 1204.2 L1964.16 1204.2 L1963.58 1204.2 L1962.99 1204.2 L1962.4 1204.2 L1961.82 1204.2 L1961.23 1204.2 L1960.64 1204.2 L1960.06 1204.2 L1959.47 1204.2 L1958.88 1204.2 L1958.3 1204.2 L1957.71 1204.2 L1957.12 1204.2 L1956.54 1204.2 L1955.95 1204.2 L1955.37 1204.2 L1954.78 1204.2 L1954.19 1204.2 L1953.61 1204.2 L1953.02 1204.2 L1952.43 1204.2 L1951.85 1204.2 L1951.26 1204.2 L1950.67 1204.2 L1950.09 1204.2 L1949.5 1204.2 L1948.91 1204.2 L1948.33 1204.2 L1947.74 1204.2 L1947.16 1204.2 L1946.57 1204.2 L1945.98 1204.2 L1945.4 1204.2 L1944.81 1204.2 L1944.22 1204.2 L1943.64 1204.2 L1943.05 1204.2 L1942.46 1204.2 L1941.88 1204.2 L1941.29 1204.2 L1940.71 1204.2 L1940.12 1204.2 L1939.53 1204.2 L1938.95 1204.2 L1938.36 1204.2 L1937.77 1204.2 L1937.19 1204.2 L1936.6 1204.2 L1936.01 1204.2 L1935.43 1204.2 L1934.84 1204.2 L1934.25 1204.2 L1933.67 1204.2 L1933.08 1204.2 L1932.5 1204.2 L1931.91 1204.2 L1931.32 1204.2 L1930.74 1204.2 L1930.15 1204.2 L1929.56 1204.2 L1928.98 1204.2 L1928.39 1204.2 L1927.8 1204.2 L1927.22 1204.2 L1926.63 1204.2 L1926.04 1204.2 L1925.46 1204.2 L1924.87 1204.2 L1924.29 1204.2 L1923.7 1204.2 L1923.11 1204.2 L1922.53 1204.2 L1921.94 1204.2 L1921.35 1204.2 L1920.77 1204.2 L1920.18 1204.2 L1919.59 1204.2 L1919.01 1204.2 L1918.42 1204.2 L1917.83 1204.2 L1917.25 1204.2 L1916.66 1204.2 L1916.08 1204.2 L1915.49 1204.2 L1914.9 1204.2 L1914.32 1204.2 L1913.73 1204.2 L1913.14 1204.2 L1912.56 1204.2 L1911.97 1204.2 L1911.38 1204.2 L1910.8 1204.2 L1910.21 1204.2 L1909.63 1204.2 L1909.04 1204.2 L1908.45 1204.2 L1907.87 1204.2 L1907.28 1204.2 L1906.69 1204.2 L1906.11 1204.2 L1905.52 1204.2 L1904.93 1204.2 L1904.35 1204.2 L1903.76 1204.2 L1903.17 1204.2 L1902.59 1204.2 L1902 1204.2 L1901.42 1204.2 L1900.83 1204.2 L1900.24 1204.2 L1899.66 1204.2 L1899.07 1204.2 L1898.48 1204.2 L1897.9 1204.2 L1897.31 1204.2 L1896.72 1204.2 L1896.14 1204.2 L1895.55 1204.2 L1894.96 1204.2 L1894.38 1204.2 L1893.79 1204.2 L1893.21 1204.2 L1892.62 1204.2 L1892.03 1204.2 L1891.45 1204.2 L1890.86 1204.2 L1890.27 1204.2 L1889.69 1204.2 L1889.1 1204.2 L1888.51 1204.2 L1887.93 1204.2 L1887.34 1204.2 L1886.76 1204.2 L1886.17 1204.2 L1885.58 1204.2 L1885 1204.2 L1884.41 1204.2 L1883.82 1204.2 L1883.24 1204.2 L1882.65 1204.2 L1882.06 1204.2 L1881.48 1204.2 L1880.89 1204.2 L1880.3 1204.2 L1879.72 1204.2 L1879.13 1204.2 L1878.55 1204.2 L1877.96 1204.2 L1877.37 1204.2 L1876.79 1204.2 L1876.2 1204.2 L1875.61 1204.2 L1875.03 1204.2 L1874.44 1204.2 L1873.85 1204.2 L1873.27 1204.2 L1872.68 1204.2 L1872.09 1204.2 L1871.51 1204.2 L1870.92 1204.2 L1870.34 1204.2 L1869.75 1204.2 L1869.16 1204.2 L1868.58 1204.2 L1867.99 1204.2 L1867.4 1204.2 L1866.82 1204.2 L1866.23 1204.2 L1865.64 1204.2 L1865.06 1204.2 L1864.47 1204.2 L1863.88 1204.2 L1863.3 1204.2 L1862.71 1204.2 L1862.13 1204.2 L1861.54 1204.2 L1860.95 1204.2 L1860.37 1204.2 L1859.78 1204.2 L1859.19 1204.2 L1858.61 1204.2 L1858.02 1204.2 L1857.43 1204.2 L1856.85 1204.2 L1856.26 1204.2 L1855.68 1204.2 L1855.09 1204.2 L1854.5 1204.2 L1853.92 1204.2 L1853.33 1204.2 L1852.74 1204.2 L1852.16 1204.2 L1851.57 1204.2 L1850.98 1204.2 L1850.4 1204.2 L1849.81 1204.2 L1849.22 1204.2 L1848.64 1204.2 L1848.05 1204.2 L1847.47 1204.2 L1846.88 1204.2 L1846.29 1204.2 L1845.71 1204.2 L1845.12 1204.2 L1844.53 1204.2 L1843.95 1204.2 L1843.36 1204.2 L1842.77 1204.2 L1842.19 1204.2 L1841.6 1204.2 L1841.01 1204.2 L1840.43 1204.2 L1839.84 1204.2 L1839.26 1204.2 L1838.67 1204.2 L1838.08 1204.2 L1837.5 1204.2 L1836.91 1204.2 L1836.32 1204.2 L1835.74 1204.2 L1835.15 1204.2 L1834.56 1204.2 L1833.98 1204.2 L1833.39 1204.2 L1832.81 1204.2 L1832.22 1204.2 L1831.63 1204.2 L1831.05 1204.2 L1830.46 1204.2 L1829.87 1204.2 L1829.29 1204.2 L1828.7 1204.2 L1828.11 1204.2 L1827.53 1204.2 L1826.94 1204.2 L1826.35 1204.2 L1825.77 1204.2 L1825.18 1204.2 L1824.6 1204.2 L1824.01 1204.2 L1823.42 1204.2 L1822.84 1204.2 L1822.25 1204.2 L1821.66 1204.2 L1821.08 1204.2 L1820.49 1204.2 L1819.9 1204.2 L1819.32 1204.2 L1818.73 1204.2 L1818.14 1204.2 L1817.56 1204.2 L1816.97 1204.2 L1816.39 1204.2 L1815.8 1204.2 L1815.21 1204.2 L1814.63 1204.2 L1814.04 1204.2 L1813.45 1204.2 L1812.87 1204.2 L1812.28 1204.2 L1811.69 1204.2 L1811.11 1204.2 L1810.52 1204.2 L1809.94 1204.2 L1809.35 1204.2 L1808.76 1204.2 L1808.18 1204.2 L1807.59 1204.2 L1807 1204.2 L1806.42 1204.2 L1805.83 1204.2 L1805.24 1204.2 L1804.66 1204.2 L1804.07 1204.2 L1803.48 1204.2 L1802.9 1204.2 L1802.31 1204.2 L1801.73 1204.2 L1801.14 1204.2 L1800.55 1204.2 L1799.97 1204.2 L1799.38 1204.2 L1798.79 1204.2 L1798.21 1204.2 L1797.62 1204.2 L1797.03 1204.2 L1796.45 1204.2 L1795.86 1204.2 L1795.27 1204.2 L1794.69 1204.2 L1794.1 1204.2 L1793.52 1204.2 L1792.93 1204.2 L1792.34 1204.2 L1791.76 1204.2 L1791.17 1204.2 L1790.58 1204.2 L1790 1204.2 L1789.41 1204.2 L1788.82 1204.2 L1788.24 1204.2 L1787.65 1204.2 L1787.06 1204.2 L1786.48 1204.2 L1785.89 1204.2 L1785.31 1204.2 L1784.72 1204.2 L1784.13 1204.2 L1783.55 1204.2 L1782.96 1204.2 L1782.37 1204.2 L1781.79 1204.2 L1781.2 1204.2 L1780.61 1204.2 L1780.03 1204.2 L1779.44 1204.2 L1778.86 1204.2 L1778.27 1204.2 L1777.68 1204.2 L1777.1 1204.2 L1776.51 1204.2 L1775.92 1204.2 L1775.34 1204.2 L1774.75 1204.2 L1774.16 1204.2 L1773.58 1204.2 L1772.99 1204.2 L1772.4 1204.2 L1771.82 1204.2 L1771.23 1204.2 L1770.65 1204.2 L1770.06 1204.2 L1769.47 1204.2 L1768.89 1204.2 L1768.3 1204.2 L1767.71 1204.2 L1767.13 1204.2 L1766.54 1204.2 L1765.95 1204.2 L1765.37 1204.2 L1764.78 1204.2 L1764.19 1204.2 L1763.61 1204.2 L1763.02 1204.2 L1762.44 1204.2 L1761.85 1204.2 L1761.26 1204.2 L1760.68 1204.2 L1760.09 1204.2 L1759.5 1204.2 L1758.92 1204.2 L1758.33 1204.2 L1757.74 1204.2 L1757.16 1204.2 L1756.57 1204.2 L1755.99 1204.2 L1755.4 1204.2 L1754.81 1204.2 L1754.23 1204.2 L1753.64 1204.2 L1753.05 1204.2 L1752.47 1204.2 L1751.88 1204.2 L1751.29 1204.2 L1750.71 1204.2 L1750.12 1204.2 L1749.53 1204.2 L1748.95 1204.2 L1748.36 1204.2 L1747.78 1204.2 L1747.19 1204.2 L1746.6 1204.2 L1746.02 1204.2 L1745.43 1204.2 L1744.84 1204.2 L1744.26 1204.2 L1743.67 1204.2 L1743.08 1204.2 L1742.5 1204.2 L1741.91 1204.2 L1741.32 1204.2 L1740.74 1204.2 L1740.15 1204.2 L1739.57 1204.2 L1738.98 1204.2 L1738.39 1204.2 L1737.81 1204.2 L1737.22 1204.2 L1736.63 1204.2 L1736.05 1204.2 L1735.46 1204.2 L1734.87 1204.2 L1734.29 1204.2 L1733.7 1204.2 L1733.11 1204.2 L1732.53 1204.2 L1731.94 1204.2 L1731.36 1204.2 L1730.77 1204.2 L1730.18 1204.2 L1729.6 1204.2 L1729.01 1204.2 L1728.42 1204.2 L1727.84 1204.2 L1727.25 1204.2 L1726.66 1204.2 L1726.08 1204.2 L1725.49 1204.2 L1724.91 1204.2 L1724.32 1204.2 L1723.73 1204.2 L1723.15 1204.2 L1722.56 1204.2 L1721.97 1204.2 L1721.39 1204.2 L1720.8 1204.2 L1720.21 1204.2 L1719.63 1204.2 L1719.04 1204.2 L1718.45 1204.2 L1717.87 1204.2 L1717.28 1204.2 L1716.7 1204.2 L1716.11 1204.2 L1715.52 1204.2 L1714.94 1204.2 L1714.35 1204.2 L1713.76 1204.2 L1713.18 1204.2 L1712.59 1204.2 L1712 1204.2 L1711.42 1204.2 L1710.83 1204.2 L1710.24 1204.2 L1709.66 1204.2 L1709.07 1204.2 L1708.49 1204.2 L1707.9 1204.2 L1707.31 1204.2 L1706.73 1204.2 L1706.14 1204.2 L1705.55 1204.2 L1704.97 1204.2 L1704.38 1204.2 L1703.79 1204.2 L1703.21 1204.2 L1702.62 1204.2 L1702.04 1204.2 L1701.45 1204.2 L1700.86 1204.2 L1700.28 1204.2 L1699.69 1204.2 L1699.1 1204.2 L1698.52 1204.2 L1697.93 1204.2 L1697.34 1204.2 L1696.76 1204.2 L1696.17 1204.2 L1695.58 1204.2 L1695 1204.2 L1694.41 1204.2 L1693.83 1204.2 L1693.24 1204.2 L1692.65 1204.2 L1692.07 1204.2 L1691.48 1204.2 L1690.89 1204.2 L1690.31 1204.2 L1689.72 1204.2 L1689.13 1204.2 L1688.55 1204.2 L1687.96 1204.2 L1687.37 1204.2 L1686.79 1204.2 L1686.2 1204.2 L1685.62 1204.2 L1685.03 1204.2 L1684.44 1204.2 L1683.86 1204.2 L1683.27 1204.2 L1682.68 1204.2 L1682.1 1204.2 L1681.51 1204.2 L1680.92 1204.2 L1680.34 1204.2 L1679.75 1204.2 L1679.17 1204.2 L1678.58 1204.2 L1677.99 1204.2 L1677.41 1204.2 L1676.82 1204.2 L1676.23 1204.2 L1675.65 1204.2 L1675.06 1204.2 L1674.47 1204.2 L1673.89 1204.2 L1673.3 1204.2 L1672.71 1204.2 L1672.13 1204.2 L1671.54 1204.2 L1670.96 1204.2 L1670.37 1204.2 L1669.78 1204.2 L1669.2 1204.2 L1668.61 1204.2 L1668.02 1204.2 L1667.44 1204.2 L1666.85 1204.2 L1666.26 1204.2 L1665.68 1204.2 L1665.09 1204.2 L1664.5 1204.2 L1663.92 1204.2 L1663.33 1204.2 L1662.75 1204.2 L1662.16 1204.2 L1661.57 1204.2 L1660.99 1204.2 L1660.4 1204.2 L1659.81 1204.2 L1659.23 1204.2 L1658.64 1204.2 L1658.05 1204.2 L1657.47 1204.2 L1656.88 1204.2 L1656.29 1204.2 L1655.71 1204.2 L1655.12 1204.2 L1654.54 1204.2 L1653.95 1204.2 L1653.36 1204.2 L1652.78 1204.2 L1652.19 1204.2 L1651.6 1204.2 L1651.02 1204.2 L1650.43 1204.2 L1649.84 1204.2 L1649.26 1204.2 L1648.67 1204.2 L1648.09 1204.2 L1647.5 1204.2 L1646.91 1204.2 L1646.33 1204.2 L1645.74 1204.2 L1645.15 1204.2 L1644.57 1204.2 L1643.98 1204.2 L1643.39 1204.2 L1642.81 1204.2 L1642.22 1204.2 L1641.63 1204.2 L1641.05 1204.2 L1640.46 1204.2 L1639.88 1204.2 L1639.29 1204.2 L1638.7 1204.2 L1638.12 1204.2 L1637.53 1204.2 L1636.94 1204.2 L1636.36 1204.2 L1635.77 1204.2 L1635.18 1204.2 L1634.6 1204.2 L1634.01 1204.2 L1633.42 1204.2 L1632.84 1204.2 L1632.25 1204.2 L1631.67 1204.2 L1631.08 1204.2 L1630.49 1204.2 L1629.91 1204.2 L1629.32 1204.2 L1628.73 1204.2 L1628.15 1204.2 L1627.56 1204.2 L1626.97 1204.2 L1626.39 1204.2 L1625.8 1204.2 L1625.22 1204.2 L1624.63 1204.2 L1624.04 1204.2 L1623.46 1204.2 L1622.87 1204.2 L1622.28 1204.2 L1621.7 1204.2 L1621.11 1204.2 L1620.52 1204.2 L1619.94 1204.2 L1619.35 1204.2 L1618.76 1204.2 L1618.18 1204.2 L1617.59 1204.2 L1617.01 1204.2 L1616.42 1204.2 L1615.83 1204.2 L1615.25 1204.2 L1614.66 1204.2 L1614.07 1204.2 L1613.49 1204.2 L1612.9 1204.2 L1612.31 1204.2 L1611.73 1204.2 L1611.14 1204.2 L1610.55 1204.2 L1609.97 1204.2 L1609.38 1204.2 L1608.8 1204.2 L1608.21 1204.2 L1607.62 1204.2 L1607.04 1204.2 L1606.45 1204.2 L1605.86 1204.2 L1605.28 1204.2 L1604.69 1204.2 L1604.1 1204.2 L1603.52 1204.2 L1602.93 1204.2 L1602.34 1204.2 L1601.76 1204.2 L1601.17 1204.2 L1600.59 1204.2 L1600 1204.2 L1599.41 1204.2 L1598.83 1204.2 L1598.24 1204.2 L1597.65 1204.2 L1597.07 1204.2 L1596.48 1204.2 L1595.89 1204.2 L1595.31 1204.2 L1594.72 1204.2 L1594.14 1204.2 L1593.55 1204.2 L1592.96 1204.2 L1592.38 1204.2 L1591.79 1204.2 L1591.2 1204.2 L1590.62 1204.2 L1590.03 1204.2 L1589.44 1204.2 L1588.86 1204.2 L1588.27 1204.2 L1587.68 1204.2 L1587.1 1204.2 L1586.51 1204.2 L1585.93 1204.2 L1585.34 1204.2 L1584.75 1204.2 L1584.17 1204.2 L1583.58 1204.2 L1582.99 1204.2 L1582.41 1204.2 L1581.82 1204.2 L1581.23 1204.2 L1580.65 1204.2 L1580.06 1204.2 L1579.47 1204.2 L1578.89 1204.2 L1578.3 1204.2 L1577.72 1204.2 L1577.13 1204.2 L1576.54 1204.2 L1575.96 1204.2 L1575.37 1204.2 L1574.78 1204.2 L1574.2 1204.2 L1573.61 1204.2 L1573.02 1204.2 L1572.44 1204.2 L1571.85 1204.2 L1571.27 1204.2 L1570.68 1204.2 L1570.09 1204.2 L1569.51 1204.2 L1568.92 1204.2 L1568.33 1204.2 L1567.75 1204.2 L1567.16 1204.2 L1566.57 1204.2 L1565.99 1204.2 L1565.4 1204.2 L1564.81 1204.2 L1564.23 1204.2 L1563.64 1204.2 L1563.06 1204.2 L1562.47 1204.2 L1561.88 1204.2 L1561.3 1204.2 L1560.71 1204.2 L1560.12 1204.2 L1559.54 1204.2 L1558.95 1204.2 L1558.36 1204.2 L1557.78 1204.2 L1557.19 1204.2 L1556.6 1204.2 L1556.02 1204.2 L1555.43 1204.2 L1554.85 1204.2 L1554.26 1204.2 L1553.67 1204.2 L1553.09 1204.2 L1552.5 1204.2 L1551.91 1204.2 L1551.33 1204.2 L1550.74 1204.2 L1550.15 1204.2 L1549.57 1204.2 L1548.98 1204.2 L1548.4 1204.2 L1547.81 1204.2 L1547.22 1204.2 L1546.64 1204.2 L1546.05 1204.2 L1545.46 1204.2 L1544.88 1204.2 L1544.29 1204.2 L1543.7 1204.2 L1543.12 1204.2 L1542.53 1204.2 L1541.94 1204.2 L1541.36 1204.2 L1540.77 1204.2 L1540.19 1204.2 L1539.6 1204.2 L1539.01 1204.2 L1538.43 1204.2 L1537.84 1204.2 L1537.25 1204.2 L1536.67 1204.2 L1536.08 1204.2 L1535.49 1204.2 L1534.91 1204.2 L1534.32 1204.2 L1533.73 1204.2 L1533.15 1204.2 L1532.56 1204.2 L1531.98 1204.2 L1531.39 1204.2 L1530.8 1204.2 L1530.22 1204.2 L1529.63 1204.2 L1529.04 1204.2 L1528.46 1204.2 L1527.87 1204.2 L1527.28 1204.2 L1526.7 1204.2 L1526.11 1204.2 L1525.52 1204.2 L1524.94 1204.2 L1524.35 1204.2 L1523.77 1204.2 L1523.18 1204.2 L1522.59 1204.2 L1522.01 1204.2 L1521.42 1204.2 L1520.83 1204.2 L1520.25 1204.2 L1519.66 1204.2 L1519.07 1204.2 L1518.49 1204.2 L1517.9 1204.2 L1517.32 1204.2 L1516.73 1204.2 L1516.14 1204.2 L1515.56 1204.2 L1514.97 1204.2 L1514.38 1204.2 L1513.8 1204.2 L1513.21 1204.2 L1512.62 1204.2 L1512.04 1204.2 L1511.45 1204.2 L1510.86 1204.2 L1510.28 1204.2 L1509.69 1204.2 L1509.11 1204.2 L1508.52 1204.2 L1507.93 1204.2 L1507.35 1204.2 L1506.76 1204.2 L1506.17 1204.2 L1505.59 1204.2 L1505 1204.2 L1504.41 1204.2 L1503.83 1204.2 L1503.24 1204.2 L1502.65 1204.2 L1502.07 1204.2 L1501.48 1204.2 L1500.9 1204.2 L1500.31 1204.2 L1499.72 1204.2 L1499.14 1204.2 L1498.55 1204.2 L1497.96 1204.2 L1497.38 1204.2 L1496.79 1204.2 L1496.2 1204.2 L1495.62 1204.2 L1495.03 1204.2 L1494.45 1204.2 L1493.86 1204.2 L1493.27 1204.2 L1492.69 1204.2 L1492.1 1204.2 L1491.51 1204.2 L1490.93 1204.2 L1490.34 1204.2 L1489.75 1204.2 L1489.17 1204.2 L1488.58 1204.2 L1487.99 1204.2 L1487.41 1204.2 L1486.82 1204.2 L1486.24 1204.2 L1485.65 1204.2 L1485.06 1204.2 L1484.48 1204.2 L1483.89 1204.2 L1483.3 1204.2 L1482.72 1204.2 L1482.13 1204.2 L1481.54 1204.2 L1480.96 1204.2 L1480.37 1204.2 L1479.78 1204.2 L1479.2 1204.2 L1478.61 1204.2 L1478.03 1204.2 L1477.44 1204.2 L1476.85 1204.2 L1476.27 1204.2 L1475.68 1204.2 L1475.09 1204.2 L1474.51 1204.2 L1473.92 1204.2 L1473.33 1204.2 L1472.75 1204.2 L1472.16 1204.2 L1471.57 1204.2 L1470.99 1204.2 L1470.4 1204.2 L1469.82 1204.2 L1469.23 1204.2 L1468.64 1204.2 L1468.06 1204.2 L1467.47 1204.2 L1466.88 1204.2 L1466.3 1204.2 L1465.71 1204.2 L1465.12 1204.2 L1464.54 1204.2 L1463.95 1204.2 L1463.37 1204.2 L1462.78 1204.2 L1462.19 1204.2 L1461.61 1204.2 L1461.02 1204.2 L1460.43 1204.2 L1459.85 1204.2 L1459.26 1204.2 L1458.67 1204.2 L1458.09 1204.2 L1457.5 1204.2 L1456.91 1204.2 L1456.33 1204.2 L1455.74 1204.2 L1455.16 1204.2 L1454.57 1204.2 L1453.98 1204.2 L1453.4 1204.2 L1452.81 1204.2 L1452.22 1204.2 L1451.64 1204.2 L1451.05 1204.2 L1450.46 1204.2 L1449.88 1204.2 L1449.29 1204.2 L1448.7 1204.2 L1448.12 1204.2 L1447.53 1204.2 L1446.95 1204.2 L1446.36 1204.2 L1445.77 1204.2 L1445.19 1204.2 L1444.6 1204.2 L1444.01 1204.2 L1443.43 1204.2 L1442.84 1204.2 L1442.25 1204.2 L1441.67 1204.2 L1441.08 1204.2 L1440.5 1204.2 L1439.91 1204.2 L1439.32 1204.2 L1438.74 1204.2 L1438.15 1204.2 L1437.56 1204.2 L1436.98 1204.2 L1436.39 1204.2 L1435.8 1204.2 L1435.22 1204.2 L1434.63 1204.2 L1434.04 1204.2 L1433.46 1204.2 L1432.87 1204.2 L1432.29 1204.2 L1431.7 1204.2 L1431.11 1204.2 L1430.53 1204.2 L1429.94 1204.2 L1429.35 1204.2 L1428.77 1204.2 L1428.18 1204.2 L1427.59 1204.2 L1427.01 1204.2 L1426.42 1204.2 L1425.83 1204.2 L1425.25 1204.2 L1424.66 1204.2 L1424.08 1204.2 L1423.49 1204.2 L1422.9 1204.2 L1422.32 1204.2 L1421.73 1204.2 L1421.14 1204.2 L1420.56 1204.2 L1419.97 1204.2 L1419.38 1204.2 L1418.8 1204.2 L1418.21 1204.2 L1417.63 1204.2 L1417.04 1204.2 L1416.45 1204.2 L1415.87 1204.2 L1415.28 1204.2 L1414.69 1204.2 L1414.11 1204.2 L1413.52 1204.2 L1412.93 1204.2 L1412.35 1204.2 L1411.76 1204.2 L1411.17 1204.2 L1410.59 1204.2 L1410 1204.2 L1409.42 1204.2 L1408.83 1204.2 L1408.24 1204.2 L1407.66 1204.2 L1407.07 1204.2 L1406.48 1204.2 L1405.9 1204.2 L1405.31 1204.2 L1404.72 1204.2 L1404.14 1204.2 L1403.55 1204.2 L1402.96 1204.2 L1402.38 1204.2 L1401.79 1204.2 L1401.21 1204.2 L1400.62 1204.2 L1400.03 1204.2 L1399.45 1204.2 L1398.86 1204.2 L1398.27 1204.2 L1397.69 1204.2 L1397.1 1204.2 L1396.51 1204.2 L1395.93 1204.2 L1395.34 1204.2 L1394.75 1204.2 L1394.17 1204.2 L1393.58 1204.2 L1393 1204.2 L1392.41 1204.2 L1391.82 1204.2 L1391.24 1204.2 L1390.65 1204.2 L1390.06 1204.2 L1389.48 1204.2 L1388.89 1204.2 L1388.3 1204.2 L1387.72 1204.2 L1387.13 1204.2 L1386.55 1204.2 L1385.96 1204.2 L1385.37 1204.2 L1384.79 1204.2 L1384.2 1204.2 L1383.61 1204.2 L1383.03 1204.2 L1382.44 1204.2 L1381.85 1204.2 L1381.27 1204.2 L1380.68 1204.2 L1380.09 1204.2 L1379.51 1204.2 L1378.92 1204.2 L1378.34 1204.2 L1377.75 1204.2 L1377.16 1204.2 L1376.58 1204.2 L1375.99 1204.2 L1375.4 1204.2 L1374.82 1204.2 L1374.23 1204.2 L1373.64 1204.2 L1373.06 1204.2 L1372.47 1204.2 L1371.88 1204.2 L1371.3 1204.2 L1370.71 1204.2 L1370.13 1204.2 L1369.54 1204.2 L1368.95 1204.2 L1368.37 1204.2 L1367.78 1204.2 L1367.19 1204.2 L1366.61 1204.2 L1366.02 1204.2 L1365.43 1204.2 L1364.85 1204.2 L1364.26 1204.2 L1363.68 1204.2 L1363.09 1204.2 L1362.5 1204.2 L1361.92 1204.2 L1361.33 1204.2 L1360.74 1204.2 L1360.16 1204.2 L1359.57 1204.2 L1358.98 1204.2 L1358.4 1204.2 L1357.81 1204.2 L1357.22 1204.2 L1356.64 1204.2 L1356.05 1204.2 L1355.47 1204.2 L1354.88 1204.2 L1354.29 1204.2 L1353.71 1204.2 L1353.12 1204.2 L1352.53 1204.2 L1351.95 1204.2 L1351.36 1204.2 L1350.77 1204.2 L1350.19 1204.2 L1349.6 1204.2 L1349.01 1204.2 L1348.43 1204.2 L1347.84 1204.2 L1347.26 1204.2 L1346.67 1204.2 L1346.08 1204.2 L1345.5 1204.2 L1344.91 1204.2 L1344.32 1204.2 L1343.74 1204.2 L1343.15 1204.2 L1342.56 1204.2 L1341.98 1204.2 L1341.39 1204.2 L1340.8 1204.2 L1340.22 1204.2 L1339.63 1204.2 L1339.05 1204.2 L1338.46 1204.2 L1337.87 1204.2 L1337.29 1204.2 L1336.7 1204.2 L1336.11 1204.2 L1335.53 1204.2 L1334.94 1204.2 L1334.35 1204.2 L1333.77 1204.2 L1333.18 1204.2 L1332.6 1204.2 L1332.01 1204.2 L1331.42 1204.2 L1330.84 1204.2 L1330.25 1204.2 L1329.66 1204.2 L1329.08 1204.2 L1328.49 1204.2 L1327.9 1204.2 L1327.32 1204.2 L1326.73 1204.2 L1326.14 1204.2 L1325.56 1204.2 L1324.97 1204.2 L1324.39 1204.2 L1323.8 1204.2 L1323.21 1204.2 L1322.63 1204.2 L1322.04 1204.2 L1321.45 1204.2 L1320.87 1204.2 L1320.28 1204.2 L1319.69 1204.2 L1319.11 1204.2 L1318.52 1204.2 L1317.93 1204.2 L1317.35 1204.2 L1316.76 1204.2 L1316.18 1204.2 L1315.59 1204.2 L1315 1204.2 L1314.42 1204.2 L1313.83 1204.2 L1313.24 1204.2 L1312.66 1204.2 L1312.07 1204.2 L1311.48 1204.2 L1310.9 1204.2 L1310.31 1204.2 L1309.73 1204.2 L1309.14 1204.2 L1308.55 1204.2 L1307.97 1204.2 L1307.38 1204.2 L1306.79 1204.2 L1306.21 1204.2 L1305.62 1204.2 L1305.03 1204.2 L1304.45 1204.2 L1303.86 1204.2 L1303.27 1204.2 L1302.69 1204.2 L1302.1 1204.2 L1301.52 1204.2 L1300.93 1204.2 L1300.34 1204.2 L1299.76 1204.2 L1299.17 1204.2 L1298.58 1204.2 L1298 1204.2 L1297.41 1204.2 L1296.82 1204.2 L1296.24 1204.2 L1295.65 1204.2 L1295.06 1204.2 L1294.48 1204.2 L1293.89 1204.2 L1293.31 1204.2 L1292.72 1204.2 L1292.13 1204.2 L1291.55 1204.2 L1290.96 1204.2 L1290.37 1204.2 L1289.79 1204.2 L1289.2 1204.2 L1288.61 1204.2 L1288.03 1204.2 L1287.44 1204.2 L1286.86 1204.2 L1286.27 1204.2 L1285.68 1204.2 L1285.1 1204.2 L1284.51 1204.2 L1283.92 1204.2 L1283.34 1204.2 L1282.75 1204.2 L1282.16 1204.2 L1281.58 1204.2 L1280.99 1204.2 L1280.4 1204.2 L1279.82 1204.2 L1279.23 1204.2 L1278.65 1204.2 L1278.06 1204.2 L1277.47 1204.2 L1276.89 1204.2 L1276.3 1204.2 L1275.71 1204.2 L1275.13 1204.2 L1274.54 1204.2 L1273.95 1204.2 L1273.37 1204.2 L1272.78 1204.2 L1272.19 1204.2 L1271.61 1204.2 L1271.02 1204.2 L1270.44 1204.2 L1269.85 1204.2 L1269.26 1204.2 L1268.68 1204.2 L1268.09 1204.2 L1267.5 1204.2 L1266.92 1204.2 L1266.33 1204.2 L1265.74 1204.2 L1265.16 1204.2 L1264.57 1204.2 L1263.98 1204.2 L1263.4 1204.2 L1262.81 1204.2 L1262.23 1204.2 L1261.64 1204.2 L1261.05 1204.2 L1260.47 1204.2 L1259.88 1204.2 L1259.29 1204.2 L1258.71 1204.2 L1258.12 1204.2 L1257.53 1204.2 L1256.95 1204.2 L1256.36 1204.2 L1255.78 1204.2 L1255.19 1204.2 L1254.6 1204.2 L1254.02 1204.2 L1253.43 1204.2 L1252.84 1204.2 L1252.26 1204.2 L1251.67 1204.2 L1251.08 1204.2 L1250.5 1204.2 L1249.91 1204.2 L1249.32 1204.2 L1248.74 1204.2 L1248.15 1204.2 L1247.57 1204.2 L1246.98 1204.2 L1246.39 1204.2 L1245.81 1204.2 L1245.22 1204.2 L1244.63 1204.2 L1244.05 1204.2 L1243.46 1204.2 L1242.87 1204.2 L1242.29 1204.2 L1241.7 1204.2 L1241.11 1204.2 L1240.53 1204.2 L1239.94 1204.2 L1239.36 1204.2 L1238.77 1204.2 L1238.18 1204.2 L1237.6 1204.2 L1237.01 1204.2 L1236.42 1204.2 L1235.84 1204.2 L1235.25 1204.2 L1234.66 1204.2 L1234.08 1204.2 L1233.49 1204.2 L1232.91 1204.2 L1232.32 1204.2 L1231.73 1204.2 L1231.15 1204.2 L1230.56 1204.2 L1229.97 1204.2 L1229.39 1204.2 L1228.8 1204.2 L1228.21 1204.2 L1227.63 1204.2 L1227.04 1204.2 L1226.45 1204.2 L1225.87 1204.2 L1225.28 1204.2 L1224.7 1204.2 L1224.11 1204.2 L1223.52 1204.2 L1222.94 1204.2 L1222.35 1204.2 L1221.76 1204.2 L1221.18 1204.2 L1220.59 1204.2 L1220 1204.2 L1219.42 1204.2 L1218.83 1204.2 L1218.24 1204.2 L1217.66 1204.2 L1217.07 1204.2 L1216.49 1204.2 L1215.9 1204.2 L1215.31 1204.2 L1214.73 1204.2 L1214.14 1204.2 L1213.55 1204.2 L1212.97 1204.2 L1212.38 1204.2 L1211.79 1204.2 L1211.21 1204.2 L1210.62 1204.2 L1210.03 1204.2 L1209.45 1204.2 L1208.86 1204.2 L1208.28 1204.2 L1207.69 1204.2 L1207.1 1204.2 L1206.52 1204.2 L1205.93 1204.2 L1205.34 1204.2 L1204.76 1204.2 L1204.17 1204.2 L1203.58 1204.2 L1203 1204.2 L1202.41 1204.2 L1201.83 1204.2 L1201.24 1204.2 L1200.65 1204.2 L1200.07 1204.2 L1199.48 1204.2 L1198.89 1204.2 L1198.31 1204.2 L1197.72 1204.2 L1197.13 1204.2 L1196.55 1204.2 L1195.96 1204.2 L1195.37 1204.2 L1194.79 1204.2 L1194.2 1204.2 L1193.62 1204.2 L1193.03 1204.2 L1192.44 1204.2 L1191.86 1204.2 L1191.27 1204.2 L1190.68 1204.2 L1190.1 1204.2 L1189.51 1204.2 L1188.92 1204.2 L1188.34 1204.2 L1187.75 1204.2 L1187.16 1204.2 L1186.58 1204.2 L1185.99 1204.2 L1185.41 1204.2 L1184.82 1204.2 L1184.23 1204.2 L1183.65 1204.2 L1183.06 1204.2 L1182.47 1204.2 L1181.89 1204.2 L1181.3 1204.2 L1180.71 1204.2 L1180.13 1204.2 L1179.54 1204.2 L1178.96 1204.2 L1178.37 1204.2 L1177.78 1204.2 L1177.2 1204.2 L1176.61 1204.2 L1176.02 1204.2 L1175.44 1204.2 L1174.85 1204.2 L1174.26 1204.2 L1173.68 1204.2 L1173.09 1204.2 L1172.5 1204.2 L1171.92 1204.2 L1171.33 1204.2 L1170.75 1204.2 L1170.16 1204.2 L1169.57 1204.2 L1168.99 1204.2 L1168.4 1204.2 L1167.81 1204.2 L1167.23 1204.2 L1166.64 1204.2 L1166.05 1204.2 L1165.47 1204.2 L1164.88 1204.2 L1164.29 1204.2 L1163.71 1204.2 L1163.12 1204.2 L1162.54 1204.2 L1161.95 1204.2 L1161.36 1204.2 L1160.78 1204.2 L1160.19 1204.2 L1159.6 1204.2 L1159.02 1204.2 L1158.43 1204.2 L1157.84 1204.2 L1157.26 1204.2 L1156.67 1204.2 L1156.09 1204.2 L1155.5 1204.2 L1154.91 1204.2 L1154.33 1204.2 L1153.74 1204.2 L1153.15 1204.2 L1152.57 1204.2 L1151.98 1204.2 L1151.39 1204.2 L1150.81 1204.2 L1150.22 1204.2 L1149.63 1204.2 L1149.05 1204.2 L1148.46 1204.2 L1147.88 1204.2 L1147.29 1204.2 L1146.7 1204.2 L1146.12 1204.2 L1145.53 1204.2 L1144.94 1204.2 L1144.36 1204.2 L1143.77 1204.2 L1143.18 1204.2 L1142.6 1204.2 L1142.01 1204.2 L1141.42 1204.2 L1140.84 1204.2 L1140.25 1204.2 L1139.67 1204.2 L1139.08 1204.2 L1138.49 1204.2 L1137.91 1204.2 L1137.32 1204.2 L1136.73 1204.2 L1136.15 1204.2 L1135.56 1204.2 L1134.97 1204.2 L1134.39 1204.2 L1133.8 1204.2 L1133.21 1204.2 L1132.63 1204.2 L1132.04 1204.2 L1131.46 1204.2 L1130.87 1204.2 L1130.28 1204.2 L1129.7 1204.2 L1129.11 1204.2 L1128.52 1204.2 L1127.94 1204.2 L1127.35 1204.2 L1126.76 1204.2 L1126.18 1204.2 L1125.59 1204.2 L1125.01 1204.2 L1124.42 1204.2 L1123.83 1204.2 L1123.25 1204.2 L1122.66 1204.2 L1122.07 1204.2 L1121.49 1204.2 L1120.9 1204.2 L1120.31 1204.2 L1119.73 1204.2 L1119.14 1204.2 L1118.55 1204.2 L1117.97 1204.2 L1117.38 1204.2 L1116.8 1204.2 L1116.21 1204.2 L1115.62 1204.2 L1115.04 1204.2 L1114.45 1204.2 L1113.86 1204.2 L1113.28 1204.2 L1112.69 1204.2 L1112.1 1204.2 L1111.52 1204.2 L1110.93 1204.2 L1110.34 1204.2 L1109.76 1204.2 L1109.17 1204.2 L1108.59 1204.2 L1108 1204.2 L1107.41 1204.2 L1106.83 1204.2 L1106.24 1204.2 L1105.65 1204.2 L1105.07 1204.2 L1104.48 1204.2 L1103.89 1204.2 L1103.31 1204.2 L1102.72 1204.2 L1102.14 1204.2 L1101.55 1204.2 L1100.96 1204.2 L1100.38 1204.2 L1099.79 1204.2 L1099.2 1204.2 L1098.62 1204.2 L1098.03 1204.2 L1097.44 1204.2 L1096.86 1204.2 L1096.27 1204.2 L1095.68 1204.2 L1095.1 1204.2 L1094.51 1204.2 L1093.93 1204.2 L1093.34 1204.2 L1092.75 1204.2 L1092.17 1204.2 L1091.58 1204.2 L1090.99 1204.2 L1090.41 1204.2 L1089.82 1204.2 L1089.23 1204.2 L1088.65 1204.2 L1088.06 1204.2 L1087.47 1204.2 L1086.89 1204.2 L1086.3 1204.2 L1085.72 1204.2 L1085.13 1204.2 L1084.54 1204.2 L1083.96 1204.2 L1083.37 1204.2 L1082.78 1204.2 L1082.2 1204.2 L1081.61 1204.2 L1081.02 1204.2 L1080.44 1204.2 L1079.85 1204.2 L1079.26 1204.2 L1078.68 1204.2 L1078.09 1204.2 L1077.51 1204.2 L1076.92 1204.2 L1076.33 1204.2 L1075.75 1204.2 L1075.16 1204.2 L1074.57 1204.2 L1073.99 1204.2 L1073.4 1204.2 L1072.81 1204.2 L1072.23 1204.2 L1071.64 1204.2 L1071.06 1204.2 L1070.47 1204.2 L1069.88 1204.2 L1069.3 1204.2 L1068.71 1204.2 L1068.12 1204.2 L1067.54 1204.2 L1066.95 1204.2 L1066.36 1204.2 L1065.78 1204.2 L1065.19 1204.2 L1064.6 1204.2 L1064.02 1204.2 L1063.43 1204.2 L1062.85 1204.2 L1062.26 1204.2 L1061.67 1204.2 L1061.09 1204.2 L1060.5 1204.2 L1059.91 1204.2 L1059.33 1204.2 L1058.74 1204.2 L1058.15 1204.2 L1057.57 1204.2 L1056.98 1204.2 L1056.39 1204.2 L1055.81 1204.2 L1055.22 1204.2 L1054.64 1204.2 L1054.05 1204.2 L1053.46 1204.2 L1052.88 1204.2 L1052.29 1204.2 L1051.7 1204.2 L1051.12 1204.2 L1050.53 1204.2 L1049.94 1204.2 L1049.36 1204.2 L1048.77 1204.2 L1048.19 1204.2 L1047.6 1204.2 L1047.01 1204.2 L1046.43 1204.2 L1045.84 1204.2 L1045.25 1204.2 L1044.67 1204.2 L1044.08 1204.2 L1043.49 1204.2 L1042.91 1204.2 L1042.32 1204.2 L1041.73 1204.2 L1041.15 1204.2 L1040.56 1204.2 L1039.98 1204.2 L1039.39 1204.2 L1038.8 1204.2 L1038.22 1204.2 L1037.63 1204.2 L1037.04 1204.2 L1036.46 1204.2 L1035.87 1204.2 L1035.28 1204.2 L1034.7 1204.2 L1034.11 1204.2 L1033.52 1204.2 L1032.94 1204.2 L1032.35 1204.2 L1031.77 1204.2 L1031.18 1204.2 L1030.59 1204.2 L1030.01 1204.2 L1029.42 1204.2 L1028.83 1204.2 L1028.25 1204.2 L1027.66 1204.2 L1027.07 1204.2 L1026.49 1204.2 L1025.9 1204.2 L1025.32 1204.2 L1024.73 1204.2 L1024.14 1204.2 L1023.56 1204.2 L1022.97 1204.2 L1022.38 1204.2 L1021.8 1204.2 L1021.21 1204.2 L1020.62 1204.2 L1020.04 1204.2 L1019.45 1204.2 L1018.86 1204.2 L1018.28 1204.2 L1017.69 1204.2 L1017.11 1204.2 L1016.52 1204.2 L1015.93 1204.2 L1015.35 1204.2 L1014.76 1204.2 L1014.17 1204.2 L1013.59 1204.2 L1013 1204.2 L1012.41 1204.2 L1011.83 1204.2 L1011.24 1204.2 L1010.65 1204.2 L1010.07 1204.2 L1009.48 1204.2 L1008.9 1204.2 L1008.31 1204.2 L1007.72 1204.2 L1007.14 1204.2 L1006.55 1204.2 L1005.96 1204.2 L1005.38 1204.2 L1004.79 1204.2 L1004.2 1204.2 L1003.62 1204.2 L1003.03 1204.2 L1002.44 1204.2 L1001.86 1204.2 L1001.27 1204.2 L1000.69 1204.2 L1000.1 1204.2 L999.513 1204.2 L998.926 1204.2 L998.34 1204.2 L997.754 1204.2 L997.167 1204.2 L996.581 1204.2 L995.994 1204.2 L995.408 1204.2 L994.822 1204.2 L994.235 1204.2 L993.649 1204.2 L993.062 1204.2 L992.476 1204.2 L991.889 1204.2 L991.303 1204.2 L990.717 1204.2 L990.13 1204.2 L989.544 1204.2 L988.957 1204.2 L988.371 1204.2 L987.785 1204.2 L987.198 1204.2 L986.612 1204.2 L986.025 1204.2  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1204.59 986.612,1204.59 987.198,1204.59 987.785,1204.59 988.371,1204.59 988.957,1204.59 989.544,1204.59 990.13,1204.59 990.717,1204.59 991.303,1204.59 991.889,1204.59 992.476,1204.59 993.062,1204.59 993.649,1204.59 994.235,1204.59 994.822,1204.59 995.408,1204.59 995.994,1204.59 996.581,1204.59 997.167,1204.59 997.754,1204.59 998.34,1204.59 998.926,1204.59 999.513,1204.59 1000.1,1204.59 1000.69,1204.59 1001.27,1204.59 1001.86,1204.59 1002.44,1204.59 1003.03,1204.59 1003.62,1204.59 1004.2,1204.59 1004.79,1204.59 1005.38,1204.59 1005.96,1204.59 1006.55,1204.59 1007.14,1204.59 1007.72,1204.59 1008.31,1204.59 1008.9,1204.59 1009.48,1204.59 1010.07,1204.59 1010.65,1204.59 1011.24,1204.59 1011.83,1204.59 1012.41,1204.59 1013,1204.59 1013.59,1204.59 1014.17,1204.59 1014.76,1204.59 1015.35,1204.59 1015.93,1204.59 1016.52,1204.59 1017.11,1204.59 1017.69,1204.59 1018.28,1204.59 1018.86,1204.59 1019.45,1204.59 1020.04,1204.59 1020.62,1204.59 1021.21,1204.59 1021.8,1204.59 1022.38,1204.59 1022.97,1204.59 1023.56,1204.59 1024.14,1204.59 1024.73,1204.59 1025.32,1204.59 1025.9,1204.59 1026.49,1204.59 1027.07,1204.59 1027.66,1204.59 1028.25,1204.59 1028.83,1204.59 1029.42,1204.59 1030.01,1204.59 1030.59,1204.59 1031.18,1204.59 1031.77,1204.59 1032.35,1204.59 1032.94,1204.59 1033.52,1204.59 1034.11,1204.59 1034.7,1204.59 1035.28,1204.59 1035.87,1204.59 1036.46,1204.59 1037.04,1204.59 1037.63,1204.59 1038.22,1204.59 1038.8,1204.59 1039.39,1204.59 1039.98,1204.59 1040.56,1204.59 1041.15,1204.59 1041.73,1204.59 1042.32,1204.59 1042.91,1204.59 1043.49,1204.59 1044.08,1204.59 1044.67,1204.59 1045.25,1204.59 1045.84,1204.59 1046.43,1204.59 1047.01,1204.59 1047.6,1204.59 1048.19,1204.59 1048.77,1204.59 1049.36,1204.59 1049.94,1204.59 1050.53,1204.59 1051.12,1204.59 1051.7,1204.59 1052.29,1204.59 1052.88,1204.59 1053.46,1204.59 1054.05,1204.59 1054.64,1204.59 1055.22,1204.59 1055.81,1204.59 1056.39,1204.59 1056.98,1204.59 1057.57,1204.59 1058.15,1204.59 1058.74,1204.59 1059.33,1204.59 1059.91,1204.59 1060.5,1204.59 1061.09,1204.59 1061.67,1204.59 1062.26,1204.59 1062.85,1204.59 1063.43,1204.59 1064.02,1204.59 1064.6,1204.59 1065.19,1204.59 1065.78,1204.59 1066.36,1204.59 1066.95,1204.59 1067.54,1204.59 1068.12,1204.59 1068.71,1204.59 1069.3,1204.59 1069.88,1204.59 1070.47,1204.59 1071.06,1204.59 1071.64,1204.59 1072.23,1204.59 1072.81,1204.59 1073.4,1204.59 1073.99,1204.59 1074.57,1204.59 1075.16,1204.59 1075.75,1204.59 1076.33,1204.59 1076.92,1204.59 1077.51,1204.59 1078.09,1204.59 1078.68,1204.59 1079.26,1204.59 1079.85,1204.59 1080.44,1204.59 1081.02,1204.59 1081.61,1204.59 1082.2,1204.59 1082.78,1204.59 1083.37,1204.59 1083.96,1204.59 1084.54,1204.59 1085.13,1204.59 1085.72,1204.59 1086.3,1204.59 1086.89,1204.59 1087.47,1204.59 1088.06,1204.59 1088.65,1204.59 1089.23,1204.59 1089.82,1204.59 1090.41,1204.59 1090.99,1204.59 1091.58,1204.59 1092.17,1204.59 1092.75,1204.59 1093.34,1204.59 1093.93,1204.59 1094.51,1204.59 1095.1,1204.59 1095.68,1204.59 1096.27,1204.59 1096.86,1204.59 1097.44,1204.59 1098.03,1204.59 1098.62,1204.59 1099.2,1204.59 1099.79,1204.59 1100.38,1204.59 1100.96,1204.59 1101.55,1204.59 1102.14,1204.59 1102.72,1204.59 1103.31,1204.59 1103.89,1204.59 1104.48,1204.59 1105.07,1204.59 1105.65,1204.59 1106.24,1204.59 1106.83,1204.59 1107.41,1204.59 1108,1204.59 1108.59,1204.59 1109.17,1204.59 1109.76,1204.59 1110.34,1204.59 1110.93,1204.59 1111.52,1204.59 1112.1,1204.59 1112.69,1204.59 1113.28,1204.59 1113.86,1204.59 1114.45,1204.59 1115.04,1204.59 1115.62,1204.59 1116.21,1204.59 1116.8,1204.59 1117.38,1204.59 1117.97,1204.59 1118.55,1204.59 1119.14,1204.59 1119.73,1204.59 1120.31,1204.59 1120.9,1204.59 1121.49,1204.59 1122.07,1204.59 1122.66,1204.59 1123.25,1204.59 1123.83,1204.59 1124.42,1204.59 1125.01,1204.59 1125.59,1204.59 1126.18,1204.59 1126.76,1204.59 1127.35,1204.59 1127.94,1204.59 1128.52,1204.59 1129.11,1204.59 1129.7,1204.59 1130.28,1204.59 1130.87,1204.59 1131.46,1204.59 1132.04,1204.59 1132.63,1204.59 1133.21,1204.59 1133.8,1204.59 1134.39,1204.59 1134.97,1204.59 1135.56,1204.59 1136.15,1204.59 1136.73,1204.59 1137.32,1204.59 1137.91,1204.59 1138.49,1204.59 1139.08,1204.59 1139.67,1204.59 1140.25,1204.59 1140.84,1204.59 1141.42,1204.59 1142.01,1204.59 1142.6,1204.59 1143.18,1204.59 1143.77,1204.59 1144.36,1204.59 1144.94,1204.59 1145.53,1204.59 1146.12,1204.59 1146.7,1204.59 1147.29,1204.59 1147.88,1204.59 1148.46,1204.59 1149.05,1204.59 1149.63,1204.59 1150.22,1204.59 1150.81,1204.59 1151.39,1204.59 1151.98,1204.59 1152.57,1204.59 1153.15,1204.59 1153.74,1204.59 1154.33,1204.59 1154.91,1204.59 1155.5,1204.59 1156.09,1204.59 1156.67,1204.59 1157.26,1204.59 1157.84,1204.59 1158.43,1204.59 1159.02,1204.59 1159.6,1204.59 1160.19,1204.59 1160.78,1204.59 1161.36,1204.59 1161.95,1204.59 1162.54,1204.59 1163.12,1204.59 1163.71,1204.59 1164.29,1204.59 1164.88,1204.59 1165.47,1204.59 1166.05,1204.59 1166.64,1204.59 1167.23,1204.59 1167.81,1204.59 1168.4,1204.59 1168.99,1204.59 1169.57,1204.59 1170.16,1204.59 1170.75,1204.59 1171.33,1204.59 1171.92,1204.59 1172.5,1204.59 1173.09,1204.59 1173.68,1204.59 1174.26,1204.59 1174.85,1204.59 1175.44,1204.59 1176.02,1204.59 1176.61,1204.59 1177.2,1204.59 1177.78,1204.59 1178.37,1204.59 1178.96,1204.59 1179.54,1204.59 1180.13,1204.59 1180.71,1204.59 1181.3,1204.59 1181.89,1204.59 1182.47,1204.59 1183.06,1204.59 1183.65,1204.59 1184.23,1204.59 1184.82,1204.59 1185.41,1204.59 1185.99,1204.59 1186.58,1204.59 1187.16,1204.59 1187.75,1204.59 1188.34,1204.59 1188.92,1204.59 1189.51,1204.59 1190.1,1204.59 1190.68,1204.59 1191.27,1204.59 1191.86,1204.59 1192.44,1204.59 1193.03,1204.59 1193.62,1204.59 1194.2,1204.59 1194.79,1204.59 1195.37,1204.59 1195.96,1204.59 1196.55,1204.59 1197.13,1204.59 1197.72,1204.59 1198.31,1204.59 1198.89,1204.59 1199.48,1204.59 1200.07,1204.59 1200.65,1204.59 1201.24,1204.59 1201.83,1204.59 1202.41,1204.59 1203,1204.59 1203.58,1204.59 1204.17,1204.59 1204.76,1204.59 1205.34,1204.59 1205.93,1204.59 1206.52,1204.59 1207.1,1204.59 1207.69,1204.59 1208.28,1204.59 1208.86,1204.59 1209.45,1204.59 1210.03,1204.59 1210.62,1204.59 1211.21,1204.59 1211.79,1204.59 1212.38,1204.59 1212.97,1204.59 1213.55,1204.59 1214.14,1204.59 1214.73,1204.59 1215.31,1204.59 1215.9,1204.59 1216.49,1204.59 1217.07,1204.59 1217.66,1204.59 1218.24,1204.59 1218.83,1204.59 1219.42,1204.59 1220,1204.59 1220.59,1204.59 1221.18,1204.59 1221.76,1204.59 1222.35,1204.59 1222.94,1204.59 1223.52,1204.59 1224.11,1204.59 1224.7,1204.59 1225.28,1204.59 1225.87,1204.59 1226.45,1204.59 1227.04,1204.59 1227.63,1204.59 1228.21,1204.59 1228.8,1204.59 1229.39,1204.59 1229.97,1204.59 1230.56,1204.59 1231.15,1204.59 1231.73,1204.59 1232.32,1204.59 1232.91,1204.59 1233.49,1204.59 1234.08,1204.59 1234.66,1204.59 1235.25,1204.59 1235.84,1204.59 1236.42,1204.59 1237.01,1204.59 1237.6,1204.59 1238.18,1204.59 1238.77,1204.59 1239.36,1204.59 1239.94,1204.59 1240.53,1204.59 1241.11,1204.59 1241.7,1204.59 1242.29,1204.59 1242.87,1204.59 1243.46,1204.59 1244.05,1204.59 1244.63,1204.59 1245.22,1204.59 1245.81,1204.59 1246.39,1204.59 1246.98,1204.59 1247.57,1204.59 1248.15,1204.59 1248.74,1204.59 1249.32,1204.59 1249.91,1204.59 1250.5,1204.59 1251.08,1204.59 1251.67,1204.59 1252.26,1204.59 1252.84,1204.59 1253.43,1204.59 1254.02,1204.59 1254.6,1204.59 1255.19,1204.59 1255.78,1204.59 1256.36,1204.59 1256.95,1204.59 1257.53,1204.59 1258.12,1204.59 1258.71,1204.59 1259.29,1204.59 1259.88,1204.59 1260.47,1204.59 1261.05,1204.59 1261.64,1204.59 1262.23,1204.59 1262.81,1204.59 1263.4,1204.59 1263.98,1204.59 1264.57,1204.59 1265.16,1204.59 1265.74,1204.59 1266.33,1204.59 1266.92,1204.59 1267.5,1204.59 1268.09,1204.59 1268.68,1204.59 1269.26,1204.59 1269.85,1204.59 1270.44,1204.59 1271.02,1204.59 1271.61,1204.59 1272.19,1204.59 1272.78,1204.59 1273.37,1204.59 1273.95,1204.59 1274.54,1204.59 1275.13,1204.59 1275.71,1204.59 1276.3,1204.59 1276.89,1204.59 1277.47,1204.59 1278.06,1204.59 1278.65,1204.59 1279.23,1204.59 1279.82,1204.59 1280.4,1204.59 1280.99,1204.59 1281.58,1204.59 1282.16,1204.59 1282.75,1204.59 1283.34,1204.59 1283.92,1204.59 1284.51,1204.59 1285.1,1204.59 1285.68,1204.59 1286.27,1204.59 1286.86,1204.59 1287.44,1204.59 1288.03,1204.59 1288.61,1204.59 1289.2,1204.59 1289.79,1204.59 1290.37,1204.59 1290.96,1204.59 1291.55,1204.59 1292.13,1204.59 1292.72,1204.59 1293.31,1204.59 1293.89,1204.59 1294.48,1204.59 1295.06,1204.59 1295.65,1204.59 1296.24,1204.59 1296.82,1204.59 1297.41,1204.59 1298,1204.59 1298.58,1204.59 1299.17,1204.59 1299.76,1204.59 1300.34,1204.59 1300.93,1204.59 1301.52,1204.59 1302.1,1204.59 1302.69,1204.59 1303.27,1204.59 1303.86,1204.59 1304.45,1204.59 1305.03,1204.59 1305.62,1204.59 1306.21,1204.59 1306.79,1204.59 1307.38,1204.59 1307.97,1204.59 1308.55,1204.59 1309.14,1204.59 1309.73,1204.59 1310.31,1204.59 1310.9,1204.59 1311.48,1204.59 1312.07,1204.59 1312.66,1204.59 1313.24,1204.59 1313.83,1204.59 1314.42,1204.59 1315,1204.59 1315.59,1204.59 1316.18,1204.59 1316.76,1204.59 1317.35,1204.59 1317.93,1204.59 1318.52,1204.59 1319.11,1204.59 1319.69,1204.59 1320.28,1204.59 1320.87,1204.59 1321.45,1204.59 1322.04,1204.59 1322.63,1204.59 1323.21,1204.59 1323.8,1204.59 1324.39,1204.59 1324.97,1204.59 1325.56,1204.59 1326.14,1204.59 1326.73,1204.59 1327.32,1204.59 1327.9,1204.59 1328.49,1204.59 1329.08,1204.59 1329.66,1204.59 1330.25,1204.59 1330.84,1204.59 1331.42,1204.59 1332.01,1204.59 1332.6,1204.59 1333.18,1204.59 1333.77,1204.59 1334.35,1204.59 1334.94,1204.59 1335.53,1204.59 1336.11,1204.59 1336.7,1204.59 1337.29,1204.59 1337.87,1204.59 1338.46,1204.59 1339.05,1204.59 1339.63,1204.59 1340.22,1204.59 1340.8,1204.59 1341.39,1204.59 1341.98,1204.59 1342.56,1204.59 1343.15,1204.59 1343.74,1204.59 1344.32,1204.59 1344.91,1204.59 1345.5,1204.59 1346.08,1204.59 1346.67,1204.59 1347.26,1204.59 1347.84,1204.59 1348.43,1204.59 1349.01,1204.59 1349.6,1204.59 1350.19,1204.59 1350.77,1204.59 1351.36,1204.59 1351.95,1204.59 1352.53,1204.59 1353.12,1204.59 1353.71,1204.59 1354.29,1204.59 1354.88,1204.59 1355.47,1204.59 1356.05,1204.59 1356.64,1204.59 1357.22,1204.59 1357.81,1204.59 1358.4,1204.59 1358.98,1204.59 1359.57,1204.59 1360.16,1204.59 1360.74,1204.59 1361.33,1204.59 1361.92,1204.59 1362.5,1204.59 1363.09,1204.59 1363.68,1204.59 1364.26,1204.59 1364.85,1204.59 1365.43,1204.59 1366.02,1204.59 1366.61,1204.59 1367.19,1204.59 1367.78,1204.59 1368.37,1204.59 1368.95,1204.59 1369.54,1204.59 1370.13,1204.59 1370.71,1204.59 1371.3,1204.59 1371.88,1204.59 1372.47,1204.59 1373.06,1204.59 1373.64,1204.59 1374.23,1204.59 1374.82,1204.59 1375.4,1204.59 1375.99,1204.59 1376.58,1204.59 1377.16,1204.59 1377.75,1204.59 1378.34,1204.59 1378.92,1204.59 1379.51,1204.59 1380.09,1204.59 1380.68,1204.59 1381.27,1204.59 1381.85,1204.59 1382.44,1204.59 1383.03,1204.59 1383.61,1204.59 1384.2,1204.59 1384.79,1204.59 1385.37,1204.59 1385.96,1204.59 1386.55,1204.59 1387.13,1204.59 1387.72,1204.59 1388.3,1204.59 1388.89,1204.59 1389.48,1204.59 1390.06,1204.59 1390.65,1204.59 1391.24,1204.59 1391.82,1204.59 1392.41,1204.59 1393,1204.59 1393.58,1204.59 1394.17,1204.59 1394.75,1204.59 1395.34,1204.59 1395.93,1204.59 1396.51,1204.59 1397.1,1204.59 1397.69,1204.59 1398.27,1204.59 1398.86,1204.59 1399.45,1204.59 1400.03,1204.59 1400.62,1204.59 1401.21,1204.59 1401.79,1204.59 1402.38,1204.59 1402.96,1204.59 1403.55,1204.59 1404.14,1204.59 1404.72,1204.59 1405.31,1204.59 1405.9,1204.59 1406.48,1204.59 1407.07,1204.59 1407.66,1204.59 1408.24,1204.59 1408.83,1204.59 1409.42,1204.59 1410,1204.59 1410.59,1204.59 1411.17,1204.59 1411.76,1204.59 1412.35,1204.59 1412.93,1204.59 1413.52,1204.59 1414.11,1204.59 1414.69,1204.59 1415.28,1204.59 1415.87,1204.59 1416.45,1204.59 1417.04,1204.59 1417.63,1204.59 1418.21,1204.59 1418.8,1204.59 1419.38,1204.59 1419.97,1204.59 1420.56,1204.59 1421.14,1204.59 1421.73,1204.59 1422.32,1204.59 1422.9,1204.59 1423.49,1204.59 1424.08,1204.59 1424.66,1204.59 1425.25,1204.59 1425.83,1204.59 1426.42,1204.59 1427.01,1204.59 1427.59,1204.59 1428.18,1204.59 1428.77,1204.59 1429.35,1204.59 1429.94,1204.59 1430.53,1204.59 1431.11,1204.59 1431.7,1204.59 1432.29,1204.59 1432.87,1204.59 1433.46,1204.59 1434.04,1204.59 1434.63,1204.59 1435.22,1204.59 1435.8,1204.59 1436.39,1204.59 1436.98,1204.59 1437.56,1204.59 1438.15,1204.59 1438.74,1204.59 1439.32,1204.59 1439.91,1204.59 1440.5,1204.59 1441.08,1204.59 1441.67,1204.59 1442.25,1204.59 1442.84,1204.59 1443.43,1204.59 1444.01,1204.59 1444.6,1204.59 1445.19,1204.59 1445.77,1204.59 1446.36,1204.59 1446.95,1204.59 1447.53,1204.59 1448.12,1204.59 1448.7,1204.59 1449.29,1204.59 1449.88,1204.59 1450.46,1204.59 1451.05,1204.59 1451.64,1204.59 1452.22,1204.59 1452.81,1204.59 1453.4,1204.59 1453.98,1204.59 1454.57,1204.59 1455.16,1204.59 1455.74,1204.59 1456.33,1204.59 1456.91,1204.59 1457.5,1204.59 1458.09,1204.59 1458.67,1204.59 1459.26,1204.59 1459.85,1204.59 1460.43,1204.59 1461.02,1204.59 1461.61,1204.59 1462.19,1204.59 1462.78,1204.59 1463.37,1204.59 1463.95,1204.59 1464.54,1204.59 1465.12,1204.59 1465.71,1204.59 1466.3,1204.59 1466.88,1204.59 1467.47,1204.59 1468.06,1204.59 1468.64,1204.59 1469.23,1204.59 1469.82,1204.59 1470.4,1204.59 1470.99,1204.59 1471.57,1204.59 1472.16,1204.59 1472.75,1204.59 1473.33,1204.59 1473.92,1204.59 1474.51,1204.59 1475.09,1204.59 1475.68,1204.59 1476.27,1204.59 1476.85,1204.59 1477.44,1204.59 1478.03,1204.59 1478.61,1204.59 1479.2,1204.59 1479.78,1204.59 1480.37,1204.59 1480.96,1204.59 1481.54,1204.59 1482.13,1204.59 1482.72,1204.59 1483.3,1204.59 1483.89,1204.59 1484.48,1204.59 1485.06,1204.59 1485.65,1204.59 1486.24,1204.59 1486.82,1204.59 1487.41,1204.59 1487.99,1204.59 1488.58,1204.59 1489.17,1204.59 1489.75,1204.59 1490.34,1204.59 1490.93,1204.59 1491.51,1204.59 1492.1,1204.59 1492.69,1204.59 1493.27,1204.59 1493.86,1204.59 1494.45,1204.59 1495.03,1204.59 1495.62,1204.59 1496.2,1204.59 1496.79,1204.59 1497.38,1204.59 1497.96,1204.59 1498.55,1204.59 1499.14,1204.59 1499.72,1204.59 1500.31,1204.59 1500.9,1204.59 1501.48,1204.59 1502.07,1204.59 1502.65,1204.59 1503.24,1204.59 1503.83,1204.59 1504.41,1204.59 1505,1204.59 1505.59,1204.59 1506.17,1204.59 1506.76,1204.59 1507.35,1204.59 1507.93,1204.59 1508.52,1204.59 1509.11,1204.59 1509.69,1204.59 1510.28,1204.59 1510.86,1204.59 1511.45,1204.59 1512.04,1204.59 1512.62,1204.59 1513.21,1204.59 1513.8,1204.59 1514.38,1204.59 1514.97,1204.59 1515.56,1204.59 1516.14,1204.59 1516.73,1204.59 1517.32,1204.59 1517.9,1204.59 1518.49,1204.59 1519.07,1204.59 1519.66,1204.59 1520.25,1204.59 1520.83,1204.59 1521.42,1204.59 1522.01,1204.59 1522.59,1204.59 1523.18,1204.59 1523.77,1204.59 1524.35,1204.59 1524.94,1204.59 1525.52,1204.59 1526.11,1204.59 1526.7,1204.59 1527.28,1204.59 1527.87,1204.59 1528.46,1204.59 1529.04,1204.59 1529.63,1204.59 1530.22,1204.59 1530.8,1204.59 1531.39,1204.59 1531.98,1204.59 1532.56,1204.59 1533.15,1204.59 1533.73,1204.59 1534.32,1204.59 1534.91,1204.59 1535.49,1204.59 1536.08,1204.59 1536.67,1204.59 1537.25,1204.59 1537.84,1204.59 1538.43,1204.59 1539.01,1204.59 1539.6,1204.59 1540.19,1204.59 1540.77,1204.59 1541.36,1204.59 1541.94,1204.59 1542.53,1204.59 1543.12,1204.59 1543.7,1204.59 1544.29,1204.59 1544.88,1204.59 1545.46,1204.59 1546.05,1204.59 1546.64,1204.59 1547.22,1204.59 1547.81,1204.59 1548.4,1204.59 1548.98,1204.59 1549.57,1204.59 1550.15,1204.59 1550.74,1204.59 1551.33,1204.59 1551.91,1204.59 1552.5,1204.59 1553.09,1204.59 1553.67,1204.59 1554.26,1204.59 1554.85,1204.59 1555.43,1204.59 1556.02,1204.59 1556.6,1204.59 1557.19,1204.59 1557.78,1204.59 1558.36,1204.59 1558.95,1204.59 1559.54,1204.59 1560.12,1204.59 1560.71,1204.59 1561.3,1204.59 1561.88,1204.59 1562.47,1204.59 1563.06,1204.59 1563.64,1204.59 1564.23,1204.59 1564.81,1204.59 1565.4,1204.59 1565.99,1204.59 1566.57,1204.59 1567.16,1204.59 1567.75,1204.59 1568.33,1204.59 1568.92,1204.59 1569.51,1204.59 1570.09,1204.59 1570.68,1204.59 1571.27,1204.59 1571.85,1204.59 1572.44,1204.59 1573.02,1204.59 1573.61,1204.59 1574.2,1204.59 1574.78,1204.59 1575.37,1204.59 1575.96,1204.59 1576.54,1204.59 1577.13,1204.59 1577.72,1204.59 1578.3,1204.59 1578.89,1204.59 1579.47,1204.59 1580.06,1204.59 1580.65,1204.59 1581.23,1204.59 1581.82,1204.59 1582.41,1204.59 1582.99,1204.59 1583.58,1204.59 1584.17,1204.59 1584.75,1204.59 1585.34,1204.59 1585.93,1204.59 1586.51,1204.59 1587.1,1204.59 1587.68,1204.59 1588.27,1204.59 1588.86,1204.59 1589.44,1204.59 1590.03,1204.59 1590.62,1204.59 1591.2,1204.59 1591.79,1204.59 1592.38,1204.59 1592.96,1204.59 1593.55,1204.59 1594.14,1204.59 1594.72,1204.59 1595.31,1204.59 1595.89,1204.59 1596.48,1204.59 1597.07,1204.59 1597.65,1204.59 1598.24,1204.59 1598.83,1204.59 1599.41,1204.59 1600,1204.59 1600.59,1204.59 1601.17,1204.59 1601.76,1204.59 1602.34,1204.59 1602.93,1204.59 1603.52,1204.59 1604.1,1204.59 1604.69,1204.59 1605.28,1204.59 1605.86,1204.59 1606.45,1204.59 1607.04,1204.59 1607.62,1204.59 1608.21,1204.59 1608.8,1204.59 1609.38,1204.59 1609.97,1204.59 1610.55,1204.59 1611.14,1204.59 1611.73,1204.59 1612.31,1204.59 1612.9,1204.59 1613.49,1204.59 1614.07,1204.59 1614.66,1204.59 1615.25,1204.59 1615.83,1204.59 1616.42,1204.59 1617.01,1204.59 1617.59,1204.59 1618.18,1204.59 1618.76,1204.59 1619.35,1204.59 1619.94,1204.59 1620.52,1204.59 1621.11,1204.59 1621.7,1204.59 1622.28,1204.59 1622.87,1204.59 1623.46,1204.59 1624.04,1204.59 1624.63,1204.59 1625.22,1204.59 1625.8,1204.59 1626.39,1204.59 1626.97,1204.59 1627.56,1204.59 1628.15,1204.59 1628.73,1204.59 1629.32,1204.59 1629.91,1204.59 1630.49,1204.59 1631.08,1204.59 1631.67,1204.59 1632.25,1204.59 1632.84,1204.59 1633.42,1204.59 1634.01,1204.59 1634.6,1204.59 1635.18,1204.59 1635.77,1204.59 1636.36,1204.59 1636.94,1204.59 1637.53,1204.59 1638.12,1204.59 1638.7,1204.59 1639.29,1204.59 1639.88,1204.59 1640.46,1204.59 1641.05,1204.59 1641.63,1204.59 1642.22,1204.59 1642.81,1204.59 1643.39,1204.59 1643.98,1204.59 1644.57,1204.59 1645.15,1204.59 1645.74,1204.59 1646.33,1204.59 1646.91,1204.59 1647.5,1204.59 1648.09,1204.59 1648.67,1204.59 1649.26,1204.59 1649.84,1204.59 1650.43,1204.59 1651.02,1204.59 1651.6,1204.59 1652.19,1204.59 1652.78,1204.59 1653.36,1204.59 1653.95,1204.59 1654.54,1204.59 1655.12,1204.59 1655.71,1204.59 1656.29,1204.59 1656.88,1204.59 1657.47,1204.59 1658.05,1204.59 1658.64,1204.59 1659.23,1204.59 1659.81,1204.59 1660.4,1204.59 1660.99,1204.59 1661.57,1204.59 1662.16,1204.59 1662.75,1204.59 1663.33,1204.59 1663.92,1204.59 1664.5,1204.59 1665.09,1204.59 1665.68,1204.59 1666.26,1204.59 1666.85,1204.59 1667.44,1204.59 1668.02,1204.59 1668.61,1204.59 1669.2,1204.59 1669.78,1204.59 1670.37,1204.59 1670.96,1204.59 1671.54,1204.59 1672.13,1204.59 1672.71,1204.59 1673.3,1204.59 1673.89,1204.59 1674.47,1204.59 1675.06,1204.59 1675.65,1204.59 1676.23,1204.59 1676.82,1204.59 1677.41,1204.59 1677.99,1204.59 1678.58,1204.59 1679.17,1204.59 1679.75,1204.59 1680.34,1204.59 1680.92,1204.59 1681.51,1204.59 1682.1,1204.59 1682.68,1204.59 1683.27,1204.59 1683.86,1204.59 1684.44,1204.59 1685.03,1204.59 1685.62,1204.59 1686.2,1204.59 1686.79,1204.59 1687.37,1204.59 1687.96,1204.59 1688.55,1204.59 1689.13,1204.59 1689.72,1204.59 1690.31,1204.59 1690.89,1204.59 1691.48,1204.59 1692.07,1204.59 1692.65,1204.59 1693.24,1204.59 1693.83,1204.59 1694.41,1204.59 1695,1204.59 1695.58,1204.59 1696.17,1204.59 1696.76,1204.59 1697.34,1204.59 1697.93,1204.59 1698.52,1204.59 1699.1,1204.59 1699.69,1204.59 1700.28,1204.59 1700.86,1204.59 1701.45,1204.59 1702.04,1204.59 1702.62,1204.59 1703.21,1204.59 1703.79,1204.59 1704.38,1204.59 1704.97,1204.59 1705.55,1204.59 1706.14,1204.59 1706.73,1204.59 1707.31,1204.59 1707.9,1204.59 1708.49,1204.59 1709.07,1204.59 1709.66,1204.59 1710.24,1204.59 1710.83,1204.59 1711.42,1204.59 1712,1204.59 1712.59,1204.59 1713.18,1204.59 1713.76,1204.59 1714.35,1204.59 1714.94,1204.59 1715.52,1204.59 1716.11,1204.59 1716.7,1204.59 1717.28,1204.59 1717.87,1204.59 1718.45,1204.59 1719.04,1204.59 1719.63,1204.59 1720.21,1204.59 1720.8,1204.59 1721.39,1204.59 1721.97,1204.59 1722.56,1204.59 1723.15,1204.59 1723.73,1204.59 1724.32,1204.59 1724.91,1204.59 1725.49,1204.59 1726.08,1204.59 1726.66,1204.59 1727.25,1204.59 1727.84,1204.59 1728.42,1204.59 1729.01,1204.59 1729.6,1204.59 1730.18,1204.59 1730.77,1204.59 1731.36,1204.59 1731.94,1204.59 1732.53,1204.59 1733.11,1204.59 1733.7,1204.59 1734.29,1204.59 1734.87,1204.59 1735.46,1204.59 1736.05,1204.59 1736.63,1204.59 1737.22,1204.59 1737.81,1204.59 1738.39,1204.59 1738.98,1204.59 1739.57,1204.59 1740.15,1204.59 1740.74,1204.59 1741.32,1204.59 1741.91,1204.59 1742.5,1204.59 1743.08,1204.59 1743.67,1204.59 1744.26,1204.59 1744.84,1204.59 1745.43,1204.59 1746.02,1204.59 1746.6,1204.59 1747.19,1204.59 1747.78,1204.59 1748.36,1204.59 1748.95,1204.59 1749.53,1204.59 1750.12,1204.59 1750.71,1204.59 1751.29,1204.59 1751.88,1204.59 1752.47,1204.59 1753.05,1204.59 1753.64,1204.59 1754.23,1204.59 1754.81,1204.59 1755.4,1204.59 1755.99,1204.59 1756.57,1204.59 1757.16,1204.59 1757.74,1204.59 1758.33,1204.59 1758.92,1204.59 1759.5,1204.59 1760.09,1204.59 1760.68,1204.59 1761.26,1204.59 1761.85,1204.59 1762.44,1204.59 1763.02,1204.59 1763.61,1204.59 1764.19,1204.59 1764.78,1204.59 1765.37,1204.59 1765.95,1204.59 1766.54,1204.59 1767.13,1204.59 1767.71,1204.59 1768.3,1204.59 1768.89,1204.59 1769.47,1204.59 1770.06,1204.59 1770.65,1204.59 1771.23,1204.59 1771.82,1204.59 1772.4,1204.59 1772.99,1204.59 1773.58,1204.59 1774.16,1204.59 1774.75,1204.59 1775.34,1204.59 1775.92,1204.59 1776.51,1204.59 1777.1,1204.59 1777.68,1204.59 1778.27,1204.59 1778.86,1204.59 1779.44,1204.59 1780.03,1204.59 1780.61,1204.59 1781.2,1204.59 1781.79,1204.59 1782.37,1204.59 1782.96,1204.59 1783.55,1204.59 1784.13,1204.59 1784.72,1204.59 1785.31,1204.59 1785.89,1204.59 1786.48,1204.59 1787.06,1204.59 1787.65,1204.59 1788.24,1204.59 1788.82,1204.59 1789.41,1204.59 1790,1204.59 1790.58,1204.59 1791.17,1204.59 1791.76,1204.59 1792.34,1204.59 1792.93,1204.59 1793.52,1204.59 1794.1,1204.59 1794.69,1204.59 1795.27,1204.59 1795.86,1204.59 1796.45,1204.59 1797.03,1204.59 1797.62,1204.59 1798.21,1204.59 1798.79,1204.59 1799.38,1204.59 1799.97,1204.59 1800.55,1204.59 1801.14,1204.59 1801.73,1204.59 1802.31,1204.59 1802.9,1204.59 1803.48,1204.59 1804.07,1204.59 1804.66,1204.59 1805.24,1204.59 1805.83,1204.59 1806.42,1204.59 1807,1204.59 1807.59,1204.59 1808.18,1204.59 1808.76,1204.59 1809.35,1204.59 1809.94,1204.59 1810.52,1204.59 1811.11,1204.59 1811.69,1204.59 1812.28,1204.59 1812.87,1204.59 1813.45,1204.59 1814.04,1204.59 1814.63,1204.59 1815.21,1204.59 1815.8,1204.59 1816.39,1204.59 1816.97,1204.59 1817.56,1204.59 1818.14,1204.59 1818.73,1204.59 1819.32,1204.59 1819.9,1204.59 1820.49,1204.59 1821.08,1204.59 1821.66,1204.59 1822.25,1204.59 1822.84,1204.59 1823.42,1204.59 1824.01,1204.59 1824.6,1204.59 1825.18,1204.59 1825.77,1204.59 1826.35,1204.59 1826.94,1204.59 1827.53,1204.59 1828.11,1204.59 1828.7,1204.59 1829.29,1204.59 1829.87,1204.59 1830.46,1204.59 1831.05,1204.59 1831.63,1204.59 1832.22,1204.59 1832.81,1204.59 1833.39,1204.59 1833.98,1204.59 1834.56,1204.59 1835.15,1204.59 1835.74,1204.59 1836.32,1204.59 1836.91,1204.59 1837.5,1204.59 1838.08,1204.59 1838.67,1204.59 1839.26,1204.59 1839.84,1204.59 1840.43,1204.59 1841.01,1204.59 1841.6,1204.59 1842.19,1204.59 1842.77,1204.59 1843.36,1204.59 1843.95,1204.59 1844.53,1204.59 1845.12,1204.59 1845.71,1204.59 1846.29,1204.59 1846.88,1204.59 1847.47,1204.59 1848.05,1204.59 1848.64,1204.59 1849.22,1204.59 1849.81,1204.59 1850.4,1204.59 1850.98,1204.59 1851.57,1204.59 1852.16,1204.59 1852.74,1204.59 1853.33,1204.59 1853.92,1204.59 1854.5,1204.59 1855.09,1204.59 1855.68,1204.59 1856.26,1204.59 1856.85,1204.59 1857.43,1204.59 1858.02,1204.59 1858.61,1204.59 1859.19,1204.59 1859.78,1204.59 1860.37,1204.59 1860.95,1204.59 1861.54,1204.59 1862.13,1204.59 1862.71,1204.59 1863.3,1204.59 1863.88,1204.59 1864.47,1204.59 1865.06,1204.59 1865.64,1204.59 1866.23,1204.59 1866.82,1204.59 1867.4,1204.59 1867.99,1204.59 1868.58,1204.59 1869.16,1204.59 1869.75,1204.59 1870.34,1204.59 1870.92,1204.59 1871.51,1204.59 1872.09,1204.59 1872.68,1204.59 1873.27,1204.59 1873.85,1204.59 1874.44,1204.59 1875.03,1204.59 1875.61,1204.59 1876.2,1204.59 1876.79,1204.59 1877.37,1204.59 1877.96,1204.59 1878.55,1204.59 1879.13,1204.59 1879.72,1204.59 1880.3,1204.59 1880.89,1204.59 1881.48,1204.59 1882.06,1204.59 1882.65,1204.59 1883.24,1204.59 1883.82,1204.59 1884.41,1204.59 1885,1204.59 1885.58,1204.59 1886.17,1204.59 1886.76,1204.59 1887.34,1204.59 1887.93,1204.59 1888.51,1204.59 1889.1,1204.59 1889.69,1204.59 1890.27,1204.59 1890.86,1204.59 1891.45,1204.59 1892.03,1204.59 1892.62,1204.59 1893.21,1204.59 1893.79,1204.59 1894.38,1204.59 1894.96,1204.59 1895.55,1204.59 1896.14,1204.59 1896.72,1204.59 1897.31,1204.59 1897.9,1204.59 1898.48,1204.59 1899.07,1204.59 1899.66,1204.59 1900.24,1204.59 1900.83,1204.59 1901.42,1204.59 1902,1204.59 1902.59,1204.59 1903.17,1204.59 1903.76,1204.59 1904.35,1204.59 1904.93,1204.59 1905.52,1204.59 1906.11,1204.59 1906.69,1204.59 1907.28,1204.59 1907.87,1204.59 1908.45,1204.59 1909.04,1204.59 1909.63,1204.59 1910.21,1204.59 1910.8,1204.59 1911.38,1204.59 1911.97,1204.59 1912.56,1204.59 1913.14,1204.59 1913.73,1204.59 1914.32,1204.59 1914.9,1204.59 1915.49,1204.59 1916.08,1204.59 1916.66,1204.59 1917.25,1204.59 1917.83,1204.59 1918.42,1204.59 1919.01,1204.59 1919.59,1204.59 1920.18,1204.59 1920.77,1204.59 1921.35,1204.59 1921.94,1204.59 1922.53,1204.59 1923.11,1204.59 1923.7,1204.59 1924.29,1204.59 1924.87,1204.59 1925.46,1204.59 1926.04,1204.59 1926.63,1204.59 1927.22,1204.59 1927.8,1204.59 1928.39,1204.59 1928.98,1204.59 1929.56,1204.59 1930.15,1204.59 1930.74,1204.59 1931.32,1204.59 1931.91,1204.59 1932.5,1204.59 1933.08,1204.59 1933.67,1204.59 1934.25,1204.59 1934.84,1204.59 1935.43,1204.59 1936.01,1204.59 1936.6,1204.59 1937.19,1204.59 1937.77,1204.59 1938.36,1204.59 1938.95,1204.59 1939.53,1204.59 1940.12,1204.59 1940.71,1204.59 1941.29,1204.59 1941.88,1204.59 1942.46,1204.59 1943.05,1204.59 1943.64,1204.59 1944.22,1204.59 1944.81,1204.59 1945.4,1204.59 1945.98,1204.59 1946.57,1204.59 1947.16,1204.59 1947.74,1204.59 1948.33,1204.59 1948.91,1204.59 1949.5,1204.59 1950.09,1204.59 1950.67,1204.59 1951.26,1204.59 1951.85,1204.59 1952.43,1204.59 1953.02,1204.59 1953.61,1204.59 1954.19,1204.59 1954.78,1204.59 1955.37,1204.59 1955.95,1204.59 1956.54,1204.59 1957.12,1204.59 1957.71,1204.59 1958.3,1204.59 1958.88,1204.59 1959.47,1204.59 1960.06,1204.59 1960.64,1204.59 1961.23,1204.59 1961.82,1204.59 1962.4,1204.59 1962.99,1204.59 1963.58,1204.59 1964.16,1204.59 1964.75,1204.59 1965.33,1204.59 1965.92,1204.59 1966.51,1204.59 1967.09,1204.59 1967.68,1204.59 1968.27,1204.59 1968.85,1204.59 1969.44,1204.59 1970.03,1204.59 1970.61,1204.59 1971.2,1204.59 1971.78,1204.59 1972.37,1204.59 1972.96,1204.59 1973.54,1204.59 1974.13,1204.59 1974.72,1204.59 1975.3,1204.59 1975.89,1204.59 1976.48,1204.59 1977.06,1204.59 1977.65,1204.59 1978.24,1204.59 1978.82,1204.59 1979.41,1204.59 1979.99,1204.59 1980.58,1204.59 1981.17,1204.59 1981.75,1204.59 1982.34,1204.59 1982.93,1204.59 1983.51,1204.59 1984.1,1204.59 1984.69,1204.59 1985.27,1204.59 1985.86,1204.59 1986.45,1204.59 1987.03,1204.59 1987.62,1204.59 1988.2,1204.59 1988.79,1204.59 1989.38,1204.59 1989.96,1204.59 1990.55,1204.59 1991.14,1204.59 1991.72,1204.59 1992.31,1204.59 1992.9,1204.59 1993.48,1204.59 1994.07,1204.59 1994.65,1204.59 1995.24,1204.59 1995.83,1204.59 1996.41,1204.59 1997,1204.59 1997.59,1204.59 1998.17,1204.59 1998.76,1204.59 1999.35,1204.59 1999.93,1204.59 2000.52,1204.59 2001.11,1204.59 2001.69,1204.59 2002.28,1204.59 2002.86,1204.59 2003.45,1204.59 2004.04,1204.59 2004.62,1204.59 2005.21,1204.59 2005.8,1204.59 2006.38,1204.59 2006.97,1204.59 2007.56,1204.59 2008.14,1204.59 2008.73,1204.59 2009.32,1204.59 2009.9,1204.59 2010.49,1204.59 2011.07,1204.59 2011.66,1204.59 2012.25,1204.59 2012.83,1204.59 2013.42,1204.59 2014.01,1204.59 2014.59,1204.59 2015.18,1204.59 2015.77,1204.59 2016.35,1204.59 2016.94,1204.59 2017.53,1204.59 2018.11,1204.59 2018.7,1204.59 2019.28,1204.59 2019.87,1204.59 2020.46,1204.59 2021.04,1204.59 2021.63,1204.59 2022.22,1204.59 2022.8,1204.59 2023.39,1204.59 2023.98,1204.59 2024.56,1204.59 2025.15,1204.59 2025.73,1204.59 2026.32,1204.59 2026.91,1204.59 2027.49,1204.59 2028.08,1204.59 2028.67,1204.59 2029.25,1204.59 2029.84,1204.59 2030.43,1204.59 2031.01,1204.59 2031.6,1204.59 2032.19,1204.59 2032.77,1204.59 2033.36,1204.59 2033.94,1204.59 2034.53,1204.59 2035.12,1204.59 2035.7,1204.59 2036.29,1204.59 2036.88,1204.59 2037.46,1204.59 2038.05,1204.59 2038.64,1204.59 2039.22,1204.59 2039.81,1204.59 2040.4,1204.59 2040.98,1204.59 2041.57,1204.59 2042.15,1204.59 2042.74,1204.59 2043.33,1204.59 2043.91,1204.59 2044.5,1204.59 2045.09,1204.59 2045.67,1204.59 2046.26,1204.59 2046.85,1204.59 2047.43,1204.59 2048.02,1204.59 2048.6,1204.59 2049.19,1204.59 2049.78,1204.59 2050.36,1204.59 2050.95,1204.59 2051.54,1204.59 2052.12,1204.59 2052.71,1204.59 2053.3,1204.59 2053.88,1204.59 2054.47,1204.59 2055.06,1204.59 2055.64,1204.59 2056.23,1204.59 2056.81,1204.59 2057.4,1204.59 2057.99,1204.59 2058.57,1204.59 2059.16,1204.59 2059.75,1204.59 2060.33,1204.59 2060.92,1204.59 2061.51,1204.59 2062.09,1204.59 2062.68,1204.59 2063.27,1204.59 2063.85,1204.59 2064.44,1204.59 2065.02,1204.59 2065.61,1204.59 2066.2,1204.59 2066.78,1204.59 2067.37,1204.59 2067.96,1204.59 2068.54,1204.59 2069.13,1204.59 2069.72,1204.59 2070.3,1204.59 2070.89,1204.59 2071.48,1204.59 2072.06,1204.59 2072.65,1204.59 2073.23,1204.59 2073.82,1204.59 2074.41,1204.59 2074.99,1204.59 2075.58,1204.59 2076.17,1204.59 2076.75,1204.59 2077.34,1204.59 2077.93,1204.59 2078.51,1204.59 2079.1,1204.59 2079.68,1204.59 2080.27,1204.59 2080.86,1204.59 2081.44,1204.59 2082.03,1204.59 2082.62,1204.59 2083.2,1204.59 2083.79,1204.59 2084.38,1204.59 2084.96,1204.59 2085.55,1204.59 2086.14,1204.59 2086.72,1204.59 2087.31,1204.59 2087.89,1204.59 2088.48,1204.59 2089.07,1204.59 2089.65,1204.59 2090.24,1204.59 2090.83,1204.59 2091.41,1204.59 2092,1204.59 2092.59,1204.59 2093.17,1204.59 2093.76,1204.59 2094.35,1204.59 2094.93,1204.59 2095.52,1204.59 2096.1,1204.59 2096.69,1204.59 2097.28,1204.59 2097.86,1204.59 2098.45,1204.59 2099.04,1204.59 2099.62,1204.59 2100.21,1204.59 2100.8,1204.59 2101.38,1204.59 2101.97,1204.59 2102.55,1204.59 2103.14,1204.59 2103.73,1204.59 2104.31,1204.59 2104.9,1204.59 2105.49,1204.59 2106.07,1204.59 2106.66,1204.59 2107.25,1204.59 2107.83,1204.59 2108.42,1204.59 2109.01,1204.59 2109.59,1204.59 2110.18,1204.59 2110.76,1204.59 2111.35,1204.59 2111.94,1204.59 2112.52,1204.59 2113.11,1204.59 2113.7,1204.59 2114.28,1204.59 2114.87,1204.59 2115.46,1204.59 2116.04,1204.59 2116.63,1204.59 2117.22,1204.59 2117.8,1204.59 2118.39,1204.59 2118.97,1204.59 2119.56,1204.59 2120.15,1204.59 2120.73,1204.59 2121.32,1204.59 2121.91,1204.59 2122.49,1204.59 2123.08,1204.59 2123.67,1204.59 2124.25,1204.59 2124.84,1204.59 2125.42,1204.59 2126.01,1204.59 2126.6,1204.59 2127.18,1204.59 2127.77,1204.59 2128.36,1204.59 2128.94,1204.59 2129.53,1204.59 2130.12,1204.59 2130.7,1204.59 2131.29,1204.59 2131.88,1204.59 2132.46,1204.59 2133.05,1204.59 2133.63,1204.59 2134.22,1204.59 2134.81,1204.59 2135.39,1204.59 2135.98,1204.59 2136.57,1204.59 2137.15,1204.59 2137.74,1204.59 2138.33,1204.59 2138.91,1204.59 2139.5,1204.59 2140.09,1204.59 2140.67,1204.59 2141.26,1204.59 2141.84,1204.59 2142.43,1204.59 2143.02,1204.59 2143.6,1204.59 2144.19,1204.59 2144.78,1204.59 2145.36,1204.59 2145.95,1204.59 2146.54,1204.59 2147.12,1204.59 2147.71,1204.59 2148.3,1204.59 2148.88,1204.59 2149.47,1204.59 2150.05,1204.59 2150.64,1204.59 2151.23,1204.59 2151.81,1204.59 2152.4,1204.59 2152.99,1204.59 2153.57,1204.59 2154.16,1204.59 2154.75,1204.59 2155.33,1204.59 2155.92,1204.59 2156.5,1204.59 2157.09,1204.59 2157.68,1204.59 2158.26,1204.59 \"/>\n<path clip-path=\"url(#clip162)\" d=\"M986.025 1204.56 L986.612 1204.56 L987.198 1204.56 L987.785 1204.56 L988.371 1204.56 L988.957 1204.56 L989.544 1204.56 L990.13 1204.56 L990.717 1204.56 L991.303 1204.56 L991.889 1204.56 L992.476 1204.56 L993.062 1204.56 L993.649 1204.56 L994.235 1204.56 L994.822 1204.56 L995.408 1204.56 L995.994 1204.56 L996.581 1204.56 L997.167 1204.56 L997.754 1204.56 L998.34 1204.56 L998.926 1204.56 L999.513 1204.56 L1000.1 1204.56 L1000.69 1204.56 L1001.27 1204.56 L1001.86 1204.56 L1002.44 1204.56 L1003.03 1204.56 L1003.62 1204.56 L1004.2 1204.56 L1004.79 1204.56 L1005.38 1204.56 L1005.96 1204.56 L1006.55 1204.56 L1007.14 1204.56 L1007.72 1204.56 L1008.31 1204.56 L1008.9 1204.56 L1009.48 1204.56 L1010.07 1204.56 L1010.65 1204.56 L1011.24 1204.56 L1011.83 1204.56 L1012.41 1204.56 L1013 1204.56 L1013.59 1204.56 L1014.17 1204.56 L1014.76 1204.56 L1015.35 1204.56 L1015.93 1204.56 L1016.52 1204.56 L1017.11 1204.56 L1017.69 1204.56 L1018.28 1204.56 L1018.86 1204.56 L1019.45 1204.56 L1020.04 1204.56 L1020.62 1204.56 L1021.21 1204.56 L1021.8 1204.56 L1022.38 1204.56 L1022.97 1204.56 L1023.56 1204.56 L1024.14 1204.56 L1024.73 1204.56 L1025.32 1204.56 L1025.9 1204.56 L1026.49 1204.56 L1027.07 1204.56 L1027.66 1204.56 L1028.25 1204.56 L1028.83 1204.56 L1029.42 1204.56 L1030.01 1204.56 L1030.59 1204.56 L1031.18 1204.56 L1031.77 1204.56 L1032.35 1204.56 L1032.94 1204.56 L1033.52 1204.56 L1034.11 1204.56 L1034.7 1204.56 L1035.28 1204.56 L1035.87 1204.56 L1036.46 1204.56 L1037.04 1204.56 L1037.63 1204.56 L1038.22 1204.56 L1038.8 1204.56 L1039.39 1204.56 L1039.98 1204.56 L1040.56 1204.56 L1041.15 1204.56 L1041.73 1204.56 L1042.32 1204.56 L1042.91 1204.56 L1043.49 1204.56 L1044.08 1204.56 L1044.67 1204.56 L1045.25 1204.56 L1045.84 1204.56 L1046.43 1204.56 L1047.01 1204.56 L1047.6 1204.56 L1048.19 1204.56 L1048.77 1204.56 L1049.36 1204.56 L1049.94 1204.56 L1050.53 1204.56 L1051.12 1204.56 L1051.7 1204.56 L1052.29 1204.56 L1052.88 1204.56 L1053.46 1204.56 L1054.05 1204.56 L1054.64 1204.56 L1055.22 1204.56 L1055.81 1204.56 L1056.39 1204.56 L1056.98 1204.56 L1057.57 1204.56 L1058.15 1204.56 L1058.74 1204.56 L1059.33 1204.56 L1059.91 1204.56 L1060.5 1204.56 L1061.09 1204.56 L1061.67 1204.56 L1062.26 1204.56 L1062.85 1204.56 L1063.43 1204.56 L1064.02 1204.56 L1064.6 1204.56 L1065.19 1204.56 L1065.78 1204.56 L1066.36 1204.56 L1066.95 1204.56 L1067.54 1204.56 L1068.12 1204.56 L1068.71 1204.56 L1069.3 1204.56 L1069.88 1204.56 L1070.47 1204.56 L1071.06 1204.56 L1071.64 1204.56 L1072.23 1204.56 L1072.81 1204.56 L1073.4 1204.56 L1073.99 1204.56 L1074.57 1204.56 L1075.16 1204.56 L1075.75 1204.56 L1076.33 1204.56 L1076.92 1204.56 L1077.51 1204.56 L1078.09 1204.56 L1078.68 1204.56 L1079.26 1204.56 L1079.85 1204.56 L1080.44 1204.56 L1081.02 1204.56 L1081.61 1204.56 L1082.2 1204.56 L1082.78 1204.56 L1083.37 1204.56 L1083.96 1204.56 L1084.54 1204.56 L1085.13 1204.56 L1085.72 1204.56 L1086.3 1204.56 L1086.89 1204.56 L1087.47 1204.56 L1088.06 1204.56 L1088.65 1204.56 L1089.23 1204.56 L1089.82 1204.56 L1090.41 1204.56 L1090.99 1204.56 L1091.58 1204.56 L1092.17 1204.56 L1092.75 1204.56 L1093.34 1204.56 L1093.93 1204.56 L1094.51 1204.56 L1095.1 1204.56 L1095.68 1204.56 L1096.27 1204.56 L1096.86 1204.56 L1097.44 1204.56 L1098.03 1204.56 L1098.62 1204.56 L1099.2 1204.56 L1099.79 1204.56 L1100.38 1204.56 L1100.96 1204.56 L1101.55 1204.56 L1102.14 1204.56 L1102.72 1204.56 L1103.31 1204.56 L1103.89 1204.56 L1104.48 1204.56 L1105.07 1204.56 L1105.65 1204.56 L1106.24 1204.56 L1106.83 1204.56 L1107.41 1204.56 L1108 1204.56 L1108.59 1204.56 L1109.17 1204.56 L1109.76 1204.56 L1110.34 1204.56 L1110.93 1204.56 L1111.52 1204.56 L1112.1 1204.56 L1112.69 1204.56 L1113.28 1204.56 L1113.86 1204.56 L1114.45 1204.56 L1115.04 1204.56 L1115.62 1204.56 L1116.21 1204.56 L1116.8 1204.56 L1117.38 1204.56 L1117.97 1204.56 L1118.55 1204.56 L1119.14 1204.56 L1119.73 1204.56 L1120.31 1204.56 L1120.9 1204.56 L1121.49 1204.56 L1122.07 1204.56 L1122.66 1204.56 L1123.25 1204.56 L1123.83 1204.56 L1124.42 1204.56 L1125.01 1204.56 L1125.59 1204.56 L1126.18 1204.56 L1126.76 1204.56 L1127.35 1204.56 L1127.94 1204.56 L1128.52 1204.56 L1129.11 1204.56 L1129.7 1204.56 L1130.28 1204.56 L1130.87 1204.56 L1131.46 1204.56 L1132.04 1204.56 L1132.63 1204.56 L1133.21 1204.56 L1133.8 1204.56 L1134.39 1204.56 L1134.97 1204.56 L1135.56 1204.56 L1136.15 1204.56 L1136.73 1204.56 L1137.32 1204.56 L1137.91 1204.56 L1138.49 1204.56 L1139.08 1204.56 L1139.67 1204.56 L1140.25 1204.56 L1140.84 1204.56 L1141.42 1204.56 L1142.01 1204.56 L1142.6 1204.56 L1143.18 1204.56 L1143.77 1204.56 L1144.36 1204.56 L1144.94 1204.56 L1145.53 1204.56 L1146.12 1204.56 L1146.7 1204.56 L1147.29 1204.56 L1147.88 1204.56 L1148.46 1204.56 L1149.05 1204.56 L1149.63 1204.56 L1150.22 1204.56 L1150.81 1204.56 L1151.39 1204.56 L1151.98 1204.56 L1152.57 1204.56 L1153.15 1204.56 L1153.74 1204.56 L1154.33 1204.56 L1154.91 1204.56 L1155.5 1204.56 L1156.09 1204.56 L1156.67 1204.56 L1157.26 1204.56 L1157.84 1204.56 L1158.43 1204.56 L1159.02 1204.56 L1159.6 1204.56 L1160.19 1204.56 L1160.78 1204.56 L1161.36 1204.56 L1161.95 1204.56 L1162.54 1204.56 L1163.12 1204.56 L1163.71 1204.56 L1164.29 1204.56 L1164.88 1204.56 L1165.47 1204.56 L1166.05 1204.56 L1166.64 1204.56 L1167.23 1204.56 L1167.81 1204.56 L1168.4 1204.56 L1168.99 1204.56 L1169.57 1204.56 L1170.16 1204.56 L1170.75 1204.56 L1171.33 1204.56 L1171.92 1204.56 L1172.5 1204.56 L1173.09 1204.56 L1173.68 1204.56 L1174.26 1204.56 L1174.85 1204.56 L1175.44 1204.56 L1176.02 1204.56 L1176.61 1204.56 L1177.2 1204.56 L1177.78 1204.56 L1178.37 1204.56 L1178.96 1204.56 L1179.54 1204.56 L1180.13 1204.56 L1180.71 1204.56 L1181.3 1204.56 L1181.89 1204.56 L1182.47 1204.56 L1183.06 1204.56 L1183.65 1204.56 L1184.23 1204.56 L1184.82 1204.56 L1185.41 1204.56 L1185.99 1204.56 L1186.58 1204.56 L1187.16 1204.56 L1187.75 1204.56 L1188.34 1204.56 L1188.92 1204.56 L1189.51 1204.56 L1190.1 1204.56 L1190.68 1204.56 L1191.27 1204.56 L1191.86 1204.56 L1192.44 1204.56 L1193.03 1204.56 L1193.62 1204.56 L1194.2 1204.56 L1194.79 1204.56 L1195.37 1204.56 L1195.96 1204.56 L1196.55 1204.56 L1197.13 1204.56 L1197.72 1204.56 L1198.31 1204.56 L1198.89 1204.56 L1199.48 1204.56 L1200.07 1204.56 L1200.65 1204.56 L1201.24 1204.56 L1201.83 1204.56 L1202.41 1204.56 L1203 1204.56 L1203.58 1204.56 L1204.17 1204.56 L1204.76 1204.56 L1205.34 1204.56 L1205.93 1204.56 L1206.52 1204.56 L1207.1 1204.56 L1207.69 1204.56 L1208.28 1204.56 L1208.86 1204.56 L1209.45 1204.56 L1210.03 1204.56 L1210.62 1204.56 L1211.21 1204.56 L1211.79 1204.56 L1212.38 1204.56 L1212.97 1204.56 L1213.55 1204.56 L1214.14 1204.56 L1214.73 1204.56 L1215.31 1204.56 L1215.9 1204.56 L1216.49 1204.56 L1217.07 1204.56 L1217.66 1204.56 L1218.24 1204.56 L1218.83 1204.56 L1219.42 1204.56 L1220 1204.56 L1220.59 1204.56 L1221.18 1204.56 L1221.76 1204.56 L1222.35 1204.56 L1222.94 1204.56 L1223.52 1204.56 L1224.11 1204.56 L1224.7 1204.56 L1225.28 1204.56 L1225.87 1204.56 L1226.45 1204.56 L1227.04 1204.56 L1227.63 1204.56 L1228.21 1204.56 L1228.8 1204.56 L1229.39 1204.56 L1229.97 1204.56 L1230.56 1204.56 L1231.15 1204.56 L1231.73 1204.56 L1232.32 1204.56 L1232.91 1204.56 L1233.49 1204.56 L1234.08 1204.56 L1234.66 1204.56 L1235.25 1204.56 L1235.84 1204.56 L1236.42 1204.56 L1237.01 1204.56 L1237.6 1204.56 L1238.18 1204.56 L1238.77 1204.56 L1239.36 1204.56 L1239.94 1204.56 L1240.53 1204.56 L1241.11 1204.56 L1241.7 1204.56 L1242.29 1204.56 L1242.87 1204.56 L1243.46 1204.56 L1244.05 1204.56 L1244.63 1204.56 L1245.22 1204.56 L1245.81 1204.56 L1246.39 1204.56 L1246.98 1204.56 L1247.57 1204.56 L1248.15 1204.56 L1248.74 1204.56 L1249.32 1204.56 L1249.91 1204.56 L1250.5 1204.56 L1251.08 1204.56 L1251.67 1204.56 L1252.26 1204.56 L1252.84 1204.56 L1253.43 1204.56 L1254.02 1204.56 L1254.6 1204.56 L1255.19 1204.56 L1255.78 1204.56 L1256.36 1204.56 L1256.95 1204.56 L1257.53 1204.56 L1258.12 1204.56 L1258.71 1204.56 L1259.29 1204.56 L1259.88 1204.56 L1260.47 1204.56 L1261.05 1204.56 L1261.64 1204.56 L1262.23 1204.56 L1262.81 1204.56 L1263.4 1204.56 L1263.98 1204.56 L1264.57 1204.56 L1265.16 1204.56 L1265.74 1204.56 L1266.33 1204.56 L1266.92 1204.56 L1267.5 1204.56 L1268.09 1204.56 L1268.68 1204.56 L1269.26 1204.56 L1269.85 1204.56 L1270.44 1204.56 L1271.02 1204.56 L1271.61 1204.56 L1272.19 1204.56 L1272.78 1204.56 L1273.37 1204.56 L1273.95 1204.56 L1274.54 1204.56 L1275.13 1204.56 L1275.71 1204.56 L1276.3 1204.56 L1276.89 1204.56 L1277.47 1204.56 L1278.06 1204.56 L1278.65 1204.56 L1279.23 1204.56 L1279.82 1204.56 L1280.4 1204.56 L1280.99 1204.56 L1281.58 1204.56 L1282.16 1204.56 L1282.75 1204.56 L1283.34 1204.56 L1283.92 1204.56 L1284.51 1204.56 L1285.1 1204.56 L1285.68 1204.56 L1286.27 1204.56 L1286.86 1204.56 L1287.44 1204.56 L1288.03 1204.56 L1288.61 1204.56 L1289.2 1204.56 L1289.79 1204.56 L1290.37 1204.56 L1290.96 1204.56 L1291.55 1204.56 L1292.13 1204.56 L1292.72 1204.56 L1293.31 1204.56 L1293.89 1204.56 L1294.48 1204.56 L1295.06 1204.56 L1295.65 1204.56 L1296.24 1204.56 L1296.82 1204.56 L1297.41 1204.56 L1298 1204.56 L1298.58 1204.56 L1299.17 1204.56 L1299.76 1204.56 L1300.34 1204.56 L1300.93 1204.56 L1301.52 1204.56 L1302.1 1204.56 L1302.69 1204.56 L1303.27 1204.56 L1303.86 1204.56 L1304.45 1204.56 L1305.03 1204.56 L1305.62 1204.56 L1306.21 1204.56 L1306.79 1204.56 L1307.38 1204.56 L1307.97 1204.56 L1308.55 1204.56 L1309.14 1204.56 L1309.73 1204.56 L1310.31 1204.56 L1310.9 1204.56 L1311.48 1204.56 L1312.07 1204.56 L1312.66 1204.56 L1313.24 1204.56 L1313.83 1204.56 L1314.42 1204.56 L1315 1204.56 L1315.59 1204.56 L1316.18 1204.56 L1316.76 1204.56 L1317.35 1204.56 L1317.93 1204.56 L1318.52 1204.56 L1319.11 1204.56 L1319.69 1204.56 L1320.28 1204.56 L1320.87 1204.56 L1321.45 1204.56 L1322.04 1204.56 L1322.63 1204.56 L1323.21 1204.56 L1323.8 1204.56 L1324.39 1204.56 L1324.97 1204.56 L1325.56 1204.56 L1326.14 1204.56 L1326.73 1204.56 L1327.32 1204.56 L1327.9 1204.56 L1328.49 1204.56 L1329.08 1204.56 L1329.66 1204.56 L1330.25 1204.56 L1330.84 1204.56 L1331.42 1204.56 L1332.01 1204.56 L1332.6 1204.56 L1333.18 1204.56 L1333.77 1204.56 L1334.35 1204.56 L1334.94 1204.56 L1335.53 1204.56 L1336.11 1204.56 L1336.7 1204.56 L1337.29 1204.56 L1337.87 1204.56 L1338.46 1204.56 L1339.05 1204.56 L1339.63 1204.56 L1340.22 1204.56 L1340.8 1204.56 L1341.39 1204.56 L1341.98 1204.56 L1342.56 1204.56 L1343.15 1204.56 L1343.74 1204.56 L1344.32 1204.56 L1344.91 1204.56 L1345.5 1204.56 L1346.08 1204.56 L1346.67 1204.56 L1347.26 1204.56 L1347.84 1204.56 L1348.43 1204.56 L1349.01 1204.56 L1349.6 1204.56 L1350.19 1204.56 L1350.77 1204.56 L1351.36 1204.56 L1351.95 1204.56 L1352.53 1204.56 L1353.12 1204.56 L1353.71 1204.56 L1354.29 1204.56 L1354.88 1204.56 L1355.47 1204.56 L1356.05 1204.56 L1356.64 1204.56 L1357.22 1204.56 L1357.81 1204.56 L1358.4 1204.56 L1358.98 1204.56 L1359.57 1204.56 L1360.16 1204.56 L1360.74 1204.56 L1361.33 1204.56 L1361.92 1204.56 L1362.5 1204.56 L1363.09 1204.56 L1363.68 1204.56 L1364.26 1204.56 L1364.85 1204.56 L1365.43 1204.56 L1366.02 1204.56 L1366.61 1204.56 L1367.19 1204.56 L1367.78 1204.56 L1368.37 1204.56 L1368.95 1204.56 L1369.54 1204.56 L1370.13 1204.56 L1370.71 1204.56 L1371.3 1204.56 L1371.88 1204.56 L1372.47 1204.56 L1373.06 1204.56 L1373.64 1204.56 L1374.23 1204.56 L1374.82 1204.56 L1375.4 1204.56 L1375.99 1204.56 L1376.58 1204.56 L1377.16 1204.56 L1377.75 1204.56 L1378.34 1204.56 L1378.92 1204.56 L1379.51 1204.56 L1380.09 1204.56 L1380.68 1204.56 L1381.27 1204.56 L1381.85 1204.56 L1382.44 1204.56 L1383.03 1204.56 L1383.61 1204.56 L1384.2 1204.56 L1384.79 1204.56 L1385.37 1204.56 L1385.96 1204.56 L1386.55 1204.56 L1387.13 1204.56 L1387.72 1204.56 L1388.3 1204.56 L1388.89 1204.56 L1389.48 1204.56 L1390.06 1204.56 L1390.65 1204.56 L1391.24 1204.56 L1391.82 1204.56 L1392.41 1204.56 L1393 1204.56 L1393.58 1204.56 L1394.17 1204.56 L1394.75 1204.56 L1395.34 1204.56 L1395.93 1204.56 L1396.51 1204.56 L1397.1 1204.56 L1397.69 1204.56 L1398.27 1204.56 L1398.86 1204.56 L1399.45 1204.56 L1400.03 1204.56 L1400.62 1204.56 L1401.21 1204.56 L1401.79 1204.56 L1402.38 1204.56 L1402.96 1204.56 L1403.55 1204.56 L1404.14 1204.56 L1404.72 1204.56 L1405.31 1204.56 L1405.9 1204.56 L1406.48 1204.56 L1407.07 1204.56 L1407.66 1204.56 L1408.24 1204.56 L1408.83 1204.56 L1409.42 1204.56 L1410 1204.56 L1410.59 1204.56 L1411.17 1204.56 L1411.76 1204.56 L1412.35 1204.56 L1412.93 1204.56 L1413.52 1204.56 L1414.11 1204.56 L1414.69 1204.56 L1415.28 1204.56 L1415.87 1204.56 L1416.45 1204.56 L1417.04 1204.56 L1417.63 1204.56 L1418.21 1204.56 L1418.8 1204.56 L1419.38 1204.56 L1419.97 1204.56 L1420.56 1204.56 L1421.14 1204.56 L1421.73 1204.56 L1422.32 1204.56 L1422.9 1204.56 L1423.49 1204.56 L1424.08 1204.56 L1424.66 1204.56 L1425.25 1204.56 L1425.83 1204.56 L1426.42 1204.56 L1427.01 1204.56 L1427.59 1204.56 L1428.18 1204.56 L1428.77 1204.56 L1429.35 1204.56 L1429.94 1204.56 L1430.53 1204.56 L1431.11 1204.56 L1431.7 1204.56 L1432.29 1204.56 L1432.87 1204.56 L1433.46 1204.56 L1434.04 1204.56 L1434.63 1204.56 L1435.22 1204.56 L1435.8 1204.56 L1436.39 1204.56 L1436.98 1204.56 L1437.56 1204.56 L1438.15 1204.56 L1438.74 1204.56 L1439.32 1204.56 L1439.91 1204.56 L1440.5 1204.56 L1441.08 1204.56 L1441.67 1204.56 L1442.25 1204.56 L1442.84 1204.56 L1443.43 1204.56 L1444.01 1204.56 L1444.6 1204.56 L1445.19 1204.56 L1445.77 1204.56 L1446.36 1204.56 L1446.95 1204.56 L1447.53 1204.56 L1448.12 1204.56 L1448.7 1204.56 L1449.29 1204.56 L1449.88 1204.56 L1450.46 1204.56 L1451.05 1204.56 L1451.64 1204.56 L1452.22 1204.56 L1452.81 1204.56 L1453.4 1204.56 L1453.98 1204.56 L1454.57 1204.56 L1455.16 1204.56 L1455.74 1204.56 L1456.33 1204.56 L1456.91 1204.56 L1457.5 1204.56 L1458.09 1204.56 L1458.67 1204.56 L1459.26 1204.56 L1459.85 1204.56 L1460.43 1204.56 L1461.02 1204.56 L1461.61 1204.56 L1462.19 1204.56 L1462.78 1204.56 L1463.37 1204.56 L1463.95 1204.56 L1464.54 1204.56 L1465.12 1204.56 L1465.71 1204.56 L1466.3 1204.56 L1466.88 1204.56 L1467.47 1204.56 L1468.06 1204.56 L1468.64 1204.56 L1469.23 1204.56 L1469.82 1204.56 L1470.4 1204.56 L1470.99 1204.56 L1471.57 1204.56 L1472.16 1204.56 L1472.75 1204.56 L1473.33 1204.56 L1473.92 1204.56 L1474.51 1204.56 L1475.09 1204.56 L1475.68 1204.56 L1476.27 1204.56 L1476.85 1204.56 L1477.44 1204.56 L1478.03 1204.56 L1478.61 1204.56 L1479.2 1204.56 L1479.78 1204.56 L1480.37 1204.56 L1480.96 1204.56 L1481.54 1204.56 L1482.13 1204.56 L1482.72 1204.56 L1483.3 1204.56 L1483.89 1204.56 L1484.48 1204.56 L1485.06 1204.56 L1485.65 1204.56 L1486.24 1204.56 L1486.82 1204.56 L1487.41 1204.56 L1487.99 1204.56 L1488.58 1204.56 L1489.17 1204.56 L1489.75 1204.56 L1490.34 1204.56 L1490.93 1204.56 L1491.51 1204.56 L1492.1 1204.56 L1492.69 1204.56 L1493.27 1204.56 L1493.86 1204.56 L1494.45 1204.56 L1495.03 1204.56 L1495.62 1204.56 L1496.2 1204.56 L1496.79 1204.56 L1497.38 1204.56 L1497.96 1204.56 L1498.55 1204.56 L1499.14 1204.56 L1499.72 1204.56 L1500.31 1204.56 L1500.9 1204.56 L1501.48 1204.56 L1502.07 1204.56 L1502.65 1204.56 L1503.24 1204.56 L1503.83 1204.56 L1504.41 1204.56 L1505 1204.56 L1505.59 1204.56 L1506.17 1204.56 L1506.76 1204.56 L1507.35 1204.56 L1507.93 1204.56 L1508.52 1204.56 L1509.11 1204.56 L1509.69 1204.56 L1510.28 1204.56 L1510.86 1204.56 L1511.45 1204.56 L1512.04 1204.56 L1512.62 1204.56 L1513.21 1204.56 L1513.8 1204.56 L1514.38 1204.56 L1514.97 1204.56 L1515.56 1204.56 L1516.14 1204.56 L1516.73 1204.56 L1517.32 1204.56 L1517.9 1204.56 L1518.49 1204.56 L1519.07 1204.56 L1519.66 1204.56 L1520.25 1204.56 L1520.83 1204.56 L1521.42 1204.56 L1522.01 1204.56 L1522.59 1204.56 L1523.18 1204.56 L1523.77 1204.56 L1524.35 1204.56 L1524.94 1204.56 L1525.52 1204.56 L1526.11 1204.56 L1526.7 1204.56 L1527.28 1204.56 L1527.87 1204.56 L1528.46 1204.56 L1529.04 1204.56 L1529.63 1204.56 L1530.22 1204.56 L1530.8 1204.56 L1531.39 1204.56 L1531.98 1204.56 L1532.56 1204.56 L1533.15 1204.56 L1533.73 1204.56 L1534.32 1204.56 L1534.91 1204.56 L1535.49 1204.56 L1536.08 1204.56 L1536.67 1204.56 L1537.25 1204.56 L1537.84 1204.56 L1538.43 1204.56 L1539.01 1204.56 L1539.6 1204.56 L1540.19 1204.56 L1540.77 1204.56 L1541.36 1204.56 L1541.94 1204.56 L1542.53 1204.56 L1543.12 1204.56 L1543.7 1204.56 L1544.29 1204.56 L1544.88 1204.56 L1545.46 1204.56 L1546.05 1204.56 L1546.64 1204.56 L1547.22 1204.56 L1547.81 1204.56 L1548.4 1204.56 L1548.98 1204.56 L1549.57 1204.56 L1550.15 1204.56 L1550.74 1204.56 L1551.33 1204.56 L1551.91 1204.56 L1552.5 1204.56 L1553.09 1204.56 L1553.67 1204.56 L1554.26 1204.56 L1554.85 1204.56 L1555.43 1204.56 L1556.02 1204.56 L1556.6 1204.56 L1557.19 1204.56 L1557.78 1204.56 L1558.36 1204.56 L1558.95 1204.56 L1559.54 1204.56 L1560.12 1204.56 L1560.71 1204.56 L1561.3 1204.56 L1561.88 1204.56 L1562.47 1204.56 L1563.06 1204.56 L1563.64 1204.56 L1564.23 1204.56 L1564.81 1204.56 L1565.4 1204.56 L1565.99 1204.56 L1566.57 1204.56 L1567.16 1204.56 L1567.75 1204.56 L1568.33 1204.56 L1568.92 1204.56 L1569.51 1204.56 L1570.09 1204.56 L1570.68 1204.56 L1571.27 1204.56 L1571.85 1204.56 L1572.44 1204.56 L1573.02 1204.56 L1573.61 1204.56 L1574.2 1204.56 L1574.78 1204.56 L1575.37 1204.56 L1575.96 1204.56 L1576.54 1204.56 L1577.13 1204.56 L1577.72 1204.56 L1578.3 1204.56 L1578.89 1204.56 L1579.47 1204.56 L1580.06 1204.56 L1580.65 1204.56 L1581.23 1204.56 L1581.82 1204.56 L1582.41 1204.56 L1582.99 1204.56 L1583.58 1204.56 L1584.17 1204.56 L1584.75 1204.56 L1585.34 1204.56 L1585.93 1204.56 L1586.51 1204.56 L1587.1 1204.56 L1587.68 1204.56 L1588.27 1204.56 L1588.86 1204.56 L1589.44 1204.56 L1590.03 1204.56 L1590.62 1204.56 L1591.2 1204.56 L1591.79 1204.56 L1592.38 1204.56 L1592.96 1204.56 L1593.55 1204.56 L1594.14 1204.56 L1594.72 1204.56 L1595.31 1204.56 L1595.89 1204.56 L1596.48 1204.56 L1597.07 1204.56 L1597.65 1204.56 L1598.24 1204.56 L1598.83 1204.56 L1599.41 1204.56 L1600 1204.56 L1600.59 1204.56 L1601.17 1204.56 L1601.76 1204.56 L1602.34 1204.56 L1602.93 1204.56 L1603.52 1204.56 L1604.1 1204.56 L1604.69 1204.56 L1605.28 1204.56 L1605.86 1204.56 L1606.45 1204.56 L1607.04 1204.56 L1607.62 1204.56 L1608.21 1204.56 L1608.8 1204.56 L1609.38 1204.56 L1609.97 1204.56 L1610.55 1204.56 L1611.14 1204.56 L1611.73 1204.56 L1612.31 1204.56 L1612.9 1204.56 L1613.49 1204.56 L1614.07 1204.56 L1614.66 1204.56 L1615.25 1204.56 L1615.83 1204.56 L1616.42 1204.56 L1617.01 1204.56 L1617.59 1204.56 L1618.18 1204.56 L1618.76 1204.56 L1619.35 1204.56 L1619.94 1204.56 L1620.52 1204.56 L1621.11 1204.56 L1621.7 1204.56 L1622.28 1204.56 L1622.87 1204.56 L1623.46 1204.56 L1624.04 1204.56 L1624.63 1204.56 L1625.22 1204.56 L1625.8 1204.56 L1626.39 1204.56 L1626.97 1204.56 L1627.56 1204.56 L1628.15 1204.56 L1628.73 1204.56 L1629.32 1204.56 L1629.91 1204.56 L1630.49 1204.56 L1631.08 1204.56 L1631.67 1204.56 L1632.25 1204.56 L1632.84 1204.56 L1633.42 1204.56 L1634.01 1204.56 L1634.6 1204.56 L1635.18 1204.56 L1635.77 1204.56 L1636.36 1204.56 L1636.94 1204.56 L1637.53 1204.56 L1638.12 1204.56 L1638.7 1204.56 L1639.29 1204.56 L1639.88 1204.56 L1640.46 1204.56 L1641.05 1204.56 L1641.63 1204.56 L1642.22 1204.56 L1642.81 1204.56 L1643.39 1204.56 L1643.98 1204.56 L1644.57 1204.56 L1645.15 1204.56 L1645.74 1204.56 L1646.33 1204.56 L1646.91 1204.56 L1647.5 1204.56 L1648.09 1204.56 L1648.67 1204.56 L1649.26 1204.56 L1649.84 1204.56 L1650.43 1204.56 L1651.02 1204.56 L1651.6 1204.56 L1652.19 1204.56 L1652.78 1204.56 L1653.36 1204.56 L1653.95 1204.56 L1654.54 1204.56 L1655.12 1204.56 L1655.71 1204.56 L1656.29 1204.56 L1656.88 1204.56 L1657.47 1204.56 L1658.05 1204.56 L1658.64 1204.56 L1659.23 1204.56 L1659.81 1204.56 L1660.4 1204.56 L1660.99 1204.56 L1661.57 1204.56 L1662.16 1204.56 L1662.75 1204.56 L1663.33 1204.56 L1663.92 1204.56 L1664.5 1204.56 L1665.09 1204.56 L1665.68 1204.56 L1666.26 1204.56 L1666.85 1204.56 L1667.44 1204.56 L1668.02 1204.56 L1668.61 1204.56 L1669.2 1204.56 L1669.78 1204.56 L1670.37 1204.56 L1670.96 1204.56 L1671.54 1204.56 L1672.13 1204.56 L1672.71 1204.56 L1673.3 1204.56 L1673.89 1204.56 L1674.47 1204.56 L1675.06 1204.56 L1675.65 1204.56 L1676.23 1204.56 L1676.82 1204.56 L1677.41 1204.56 L1677.99 1204.56 L1678.58 1204.56 L1679.17 1204.56 L1679.75 1204.56 L1680.34 1204.56 L1680.92 1204.56 L1681.51 1204.56 L1682.1 1204.56 L1682.68 1204.56 L1683.27 1204.56 L1683.86 1204.56 L1684.44 1204.56 L1685.03 1204.56 L1685.62 1204.56 L1686.2 1204.56 L1686.79 1204.56 L1687.37 1204.56 L1687.96 1204.56 L1688.55 1204.56 L1689.13 1204.56 L1689.72 1204.56 L1690.31 1204.56 L1690.89 1204.56 L1691.48 1204.56 L1692.07 1204.56 L1692.65 1204.56 L1693.24 1204.56 L1693.83 1204.56 L1694.41 1204.56 L1695 1204.56 L1695.58 1204.56 L1696.17 1204.56 L1696.76 1204.56 L1697.34 1204.56 L1697.93 1204.56 L1698.52 1204.56 L1699.1 1204.56 L1699.69 1204.56 L1700.28 1204.56 L1700.86 1204.56 L1701.45 1204.56 L1702.04 1204.56 L1702.62 1204.56 L1703.21 1204.56 L1703.79 1204.56 L1704.38 1204.56 L1704.97 1204.56 L1705.55 1204.56 L1706.14 1204.56 L1706.73 1204.56 L1707.31 1204.56 L1707.9 1204.56 L1708.49 1204.56 L1709.07 1204.56 L1709.66 1204.56 L1710.24 1204.56 L1710.83 1204.56 L1711.42 1204.56 L1712 1204.56 L1712.59 1204.56 L1713.18 1204.56 L1713.76 1204.56 L1714.35 1204.56 L1714.94 1204.56 L1715.52 1204.56 L1716.11 1204.56 L1716.7 1204.56 L1717.28 1204.56 L1717.87 1204.56 L1718.45 1204.56 L1719.04 1204.56 L1719.63 1204.56 L1720.21 1204.56 L1720.8 1204.56 L1721.39 1204.56 L1721.97 1204.56 L1722.56 1204.56 L1723.15 1204.56 L1723.73 1204.56 L1724.32 1204.56 L1724.91 1204.56 L1725.49 1204.56 L1726.08 1204.56 L1726.66 1204.56 L1727.25 1204.56 L1727.84 1204.56 L1728.42 1204.56 L1729.01 1204.56 L1729.6 1204.56 L1730.18 1204.56 L1730.77 1204.56 L1731.36 1204.56 L1731.94 1204.56 L1732.53 1204.56 L1733.11 1204.56 L1733.7 1204.56 L1734.29 1204.56 L1734.87 1204.56 L1735.46 1204.56 L1736.05 1204.56 L1736.63 1204.56 L1737.22 1204.56 L1737.81 1204.56 L1738.39 1204.56 L1738.98 1204.56 L1739.57 1204.56 L1740.15 1204.56 L1740.74 1204.56 L1741.32 1204.56 L1741.91 1204.56 L1742.5 1204.56 L1743.08 1204.56 L1743.67 1204.56 L1744.26 1204.56 L1744.84 1204.56 L1745.43 1204.56 L1746.02 1204.56 L1746.6 1204.56 L1747.19 1204.56 L1747.78 1204.56 L1748.36 1204.56 L1748.95 1204.56 L1749.53 1204.56 L1750.12 1204.56 L1750.71 1204.56 L1751.29 1204.56 L1751.88 1204.56 L1752.47 1204.56 L1753.05 1204.56 L1753.64 1204.56 L1754.23 1204.56 L1754.81 1204.56 L1755.4 1204.56 L1755.99 1204.56 L1756.57 1204.56 L1757.16 1204.56 L1757.74 1204.56 L1758.33 1204.56 L1758.92 1204.56 L1759.5 1204.56 L1760.09 1204.56 L1760.68 1204.56 L1761.26 1204.56 L1761.85 1204.56 L1762.44 1204.56 L1763.02 1204.56 L1763.61 1204.56 L1764.19 1204.56 L1764.78 1204.56 L1765.37 1204.56 L1765.95 1204.56 L1766.54 1204.56 L1767.13 1204.56 L1767.71 1204.56 L1768.3 1204.56 L1768.89 1204.56 L1769.47 1204.56 L1770.06 1204.56 L1770.65 1204.56 L1771.23 1204.56 L1771.82 1204.56 L1772.4 1204.56 L1772.99 1204.56 L1773.58 1204.56 L1774.16 1204.56 L1774.75 1204.56 L1775.34 1204.56 L1775.92 1204.56 L1776.51 1204.56 L1777.1 1204.56 L1777.68 1204.56 L1778.27 1204.56 L1778.86 1204.56 L1779.44 1204.56 L1780.03 1204.56 L1780.61 1204.56 L1781.2 1204.56 L1781.79 1204.56 L1782.37 1204.56 L1782.96 1204.56 L1783.55 1204.56 L1784.13 1204.56 L1784.72 1204.56 L1785.31 1204.56 L1785.89 1204.56 L1786.48 1204.56 L1787.06 1204.56 L1787.65 1204.56 L1788.24 1204.56 L1788.82 1204.56 L1789.41 1204.56 L1790 1204.56 L1790.58 1204.56 L1791.17 1204.56 L1791.76 1204.56 L1792.34 1204.56 L1792.93 1204.56 L1793.52 1204.56 L1794.1 1204.56 L1794.69 1204.56 L1795.27 1204.56 L1795.86 1204.56 L1796.45 1204.56 L1797.03 1204.56 L1797.62 1204.56 L1798.21 1204.56 L1798.79 1204.56 L1799.38 1204.56 L1799.97 1204.56 L1800.55 1204.56 L1801.14 1204.56 L1801.73 1204.56 L1802.31 1204.56 L1802.9 1204.56 L1803.48 1204.56 L1804.07 1204.56 L1804.66 1204.56 L1805.24 1204.56 L1805.83 1204.56 L1806.42 1204.56 L1807 1204.56 L1807.59 1204.56 L1808.18 1204.56 L1808.76 1204.56 L1809.35 1204.56 L1809.94 1204.56 L1810.52 1204.56 L1811.11 1204.56 L1811.69 1204.56 L1812.28 1204.56 L1812.87 1204.56 L1813.45 1204.56 L1814.04 1204.56 L1814.63 1204.56 L1815.21 1204.56 L1815.8 1204.56 L1816.39 1204.56 L1816.97 1204.56 L1817.56 1204.56 L1818.14 1204.56 L1818.73 1204.56 L1819.32 1204.56 L1819.9 1204.56 L1820.49 1204.56 L1821.08 1204.56 L1821.66 1204.56 L1822.25 1204.56 L1822.84 1204.56 L1823.42 1204.56 L1824.01 1204.56 L1824.6 1204.56 L1825.18 1204.56 L1825.77 1204.56 L1826.35 1204.56 L1826.94 1204.56 L1827.53 1204.56 L1828.11 1204.56 L1828.7 1204.56 L1829.29 1204.56 L1829.87 1204.56 L1830.46 1204.56 L1831.05 1204.56 L1831.63 1204.56 L1832.22 1204.56 L1832.81 1204.56 L1833.39 1204.56 L1833.98 1204.56 L1834.56 1204.56 L1835.15 1204.56 L1835.74 1204.56 L1836.32 1204.56 L1836.91 1204.56 L1837.5 1204.56 L1838.08 1204.56 L1838.67 1204.56 L1839.26 1204.56 L1839.84 1204.56 L1840.43 1204.56 L1841.01 1204.56 L1841.6 1204.56 L1842.19 1204.56 L1842.77 1204.56 L1843.36 1204.56 L1843.95 1204.56 L1844.53 1204.56 L1845.12 1204.56 L1845.71 1204.56 L1846.29 1204.56 L1846.88 1204.56 L1847.47 1204.56 L1848.05 1204.56 L1848.64 1204.56 L1849.22 1204.56 L1849.81 1204.56 L1850.4 1204.56 L1850.98 1204.56 L1851.57 1204.56 L1852.16 1204.56 L1852.74 1204.56 L1853.33 1204.56 L1853.92 1204.56 L1854.5 1204.56 L1855.09 1204.56 L1855.68 1204.56 L1856.26 1204.56 L1856.85 1204.56 L1857.43 1204.56 L1858.02 1204.56 L1858.61 1204.56 L1859.19 1204.56 L1859.78 1204.56 L1860.37 1204.56 L1860.95 1204.56 L1861.54 1204.56 L1862.13 1204.56 L1862.71 1204.56 L1863.3 1204.56 L1863.88 1204.56 L1864.47 1204.56 L1865.06 1204.56 L1865.64 1204.56 L1866.23 1204.56 L1866.82 1204.56 L1867.4 1204.56 L1867.99 1204.56 L1868.58 1204.56 L1869.16 1204.56 L1869.75 1204.56 L1870.34 1204.56 L1870.92 1204.56 L1871.51 1204.56 L1872.09 1204.56 L1872.68 1204.56 L1873.27 1204.56 L1873.85 1204.56 L1874.44 1204.56 L1875.03 1204.56 L1875.61 1204.56 L1876.2 1204.56 L1876.79 1204.56 L1877.37 1204.56 L1877.96 1204.56 L1878.55 1204.56 L1879.13 1204.56 L1879.72 1204.56 L1880.3 1204.56 L1880.89 1204.56 L1881.48 1204.56 L1882.06 1204.56 L1882.65 1204.56 L1883.24 1204.56 L1883.82 1204.56 L1884.41 1204.56 L1885 1204.56 L1885.58 1204.56 L1886.17 1204.56 L1886.76 1204.56 L1887.34 1204.56 L1887.93 1204.56 L1888.51 1204.56 L1889.1 1204.56 L1889.69 1204.56 L1890.27 1204.56 L1890.86 1204.56 L1891.45 1204.56 L1892.03 1204.56 L1892.62 1204.56 L1893.21 1204.56 L1893.79 1204.56 L1894.38 1204.56 L1894.96 1204.56 L1895.55 1204.56 L1896.14 1204.56 L1896.72 1204.56 L1897.31 1204.56 L1897.9 1204.56 L1898.48 1204.56 L1899.07 1204.56 L1899.66 1204.56 L1900.24 1204.56 L1900.83 1204.56 L1901.42 1204.56 L1902 1204.56 L1902.59 1204.56 L1903.17 1204.56 L1903.76 1204.56 L1904.35 1204.56 L1904.93 1204.56 L1905.52 1204.56 L1906.11 1204.56 L1906.69 1204.56 L1907.28 1204.56 L1907.87 1204.56 L1908.45 1204.56 L1909.04 1204.56 L1909.63 1204.56 L1910.21 1204.56 L1910.8 1204.56 L1911.38 1204.56 L1911.97 1204.56 L1912.56 1204.56 L1913.14 1204.56 L1913.73 1204.56 L1914.32 1204.56 L1914.9 1204.56 L1915.49 1204.56 L1916.08 1204.56 L1916.66 1204.56 L1917.25 1204.56 L1917.83 1204.56 L1918.42 1204.56 L1919.01 1204.56 L1919.59 1204.56 L1920.18 1204.56 L1920.77 1204.56 L1921.35 1204.56 L1921.94 1204.56 L1922.53 1204.56 L1923.11 1204.56 L1923.7 1204.56 L1924.29 1204.56 L1924.87 1204.56 L1925.46 1204.56 L1926.04 1204.56 L1926.63 1204.56 L1927.22 1204.56 L1927.8 1204.56 L1928.39 1204.56 L1928.98 1204.56 L1929.56 1204.56 L1930.15 1204.56 L1930.74 1204.56 L1931.32 1204.56 L1931.91 1204.56 L1932.5 1204.56 L1933.08 1204.56 L1933.67 1204.56 L1934.25 1204.56 L1934.84 1204.56 L1935.43 1204.56 L1936.01 1204.56 L1936.6 1204.56 L1937.19 1204.56 L1937.77 1204.56 L1938.36 1204.56 L1938.95 1204.56 L1939.53 1204.56 L1940.12 1204.56 L1940.71 1204.56 L1941.29 1204.56 L1941.88 1204.56 L1942.46 1204.56 L1943.05 1204.56 L1943.64 1204.56 L1944.22 1204.56 L1944.81 1204.56 L1945.4 1204.56 L1945.98 1204.56 L1946.57 1204.56 L1947.16 1204.56 L1947.74 1204.56 L1948.33 1204.56 L1948.91 1204.56 L1949.5 1204.56 L1950.09 1204.56 L1950.67 1204.56 L1951.26 1204.56 L1951.85 1204.56 L1952.43 1204.56 L1953.02 1204.56 L1953.61 1204.56 L1954.19 1204.56 L1954.78 1204.56 L1955.37 1204.56 L1955.95 1204.56 L1956.54 1204.56 L1957.12 1204.56 L1957.71 1204.56 L1958.3 1204.56 L1958.88 1204.56 L1959.47 1204.56 L1960.06 1204.56 L1960.64 1204.56 L1961.23 1204.56 L1961.82 1204.56 L1962.4 1204.56 L1962.99 1204.56 L1963.58 1204.56 L1964.16 1204.56 L1964.75 1204.56 L1965.33 1204.56 L1965.92 1204.56 L1966.51 1204.56 L1967.09 1204.56 L1967.68 1204.56 L1968.27 1204.56 L1968.85 1204.56 L1969.44 1204.56 L1970.03 1204.56 L1970.61 1204.56 L1971.2 1204.56 L1971.78 1204.56 L1972.37 1204.56 L1972.96 1204.56 L1973.54 1204.56 L1974.13 1204.56 L1974.72 1204.56 L1975.3 1204.56 L1975.89 1204.56 L1976.48 1204.56 L1977.06 1204.56 L1977.65 1204.56 L1978.24 1204.56 L1978.82 1204.56 L1979.41 1204.56 L1979.99 1204.56 L1980.58 1204.56 L1981.17 1204.56 L1981.75 1204.56 L1982.34 1204.56 L1982.93 1204.56 L1983.51 1204.56 L1984.1 1204.56 L1984.69 1204.56 L1985.27 1204.56 L1985.86 1204.56 L1986.45 1204.56 L1987.03 1204.56 L1987.62 1204.56 L1988.2 1204.56 L1988.79 1204.56 L1989.38 1204.56 L1989.96 1204.56 L1990.55 1204.56 L1991.14 1204.56 L1991.72 1204.56 L1992.31 1204.56 L1992.9 1204.56 L1993.48 1204.56 L1994.07 1204.56 L1994.65 1204.56 L1995.24 1204.56 L1995.83 1204.56 L1996.41 1204.56 L1997 1204.56 L1997.59 1204.56 L1998.17 1204.56 L1998.76 1204.56 L1999.35 1204.56 L1999.93 1204.56 L2000.52 1204.56 L2001.11 1204.56 L2001.69 1204.56 L2002.28 1204.56 L2002.86 1204.56 L2003.45 1204.56 L2004.04 1204.56 L2004.62 1204.56 L2005.21 1204.56 L2005.8 1204.56 L2006.38 1204.56 L2006.97 1204.56 L2007.56 1204.56 L2008.14 1204.56 L2008.73 1204.56 L2009.32 1204.56 L2009.9 1204.56 L2010.49 1204.56 L2011.07 1204.56 L2011.66 1204.56 L2012.25 1204.56 L2012.83 1204.56 L2013.42 1204.56 L2014.01 1204.56 L2014.59 1204.56 L2015.18 1204.56 L2015.77 1204.56 L2016.35 1204.56 L2016.94 1204.56 L2017.53 1204.56 L2018.11 1204.56 L2018.7 1204.56 L2019.28 1204.56 L2019.87 1204.56 L2020.46 1204.56 L2021.04 1204.56 L2021.63 1204.56 L2022.22 1204.56 L2022.8 1204.56 L2023.39 1204.56 L2023.98 1204.56 L2024.56 1204.56 L2025.15 1204.56 L2025.73 1204.56 L2026.32 1204.56 L2026.91 1204.56 L2027.49 1204.56 L2028.08 1204.56 L2028.67 1204.56 L2029.25 1204.56 L2029.84 1204.56 L2030.43 1204.56 L2031.01 1204.56 L2031.6 1204.56 L2032.19 1204.56 L2032.77 1204.56 L2033.36 1204.56 L2033.94 1204.56 L2034.53 1204.56 L2035.12 1204.56 L2035.7 1204.56 L2036.29 1204.56 L2036.88 1204.56 L2037.46 1204.56 L2038.05 1204.56 L2038.64 1204.56 L2039.22 1204.56 L2039.81 1204.56 L2040.4 1204.56 L2040.98 1204.56 L2041.57 1204.56 L2042.15 1204.56 L2042.74 1204.56 L2043.33 1204.56 L2043.91 1204.56 L2044.5 1204.56 L2045.09 1204.56 L2045.67 1204.56 L2046.26 1204.56 L2046.85 1204.56 L2047.43 1204.56 L2048.02 1204.56 L2048.6 1204.56 L2049.19 1204.56 L2049.78 1204.56 L2050.36 1204.56 L2050.95 1204.56 L2051.54 1204.56 L2052.12 1204.56 L2052.71 1204.56 L2053.3 1204.56 L2053.88 1204.56 L2054.47 1204.56 L2055.06 1204.56 L2055.64 1204.56 L2056.23 1204.56 L2056.81 1204.56 L2057.4 1204.56 L2057.99 1204.56 L2058.57 1204.56 L2059.16 1204.56 L2059.75 1204.56 L2060.33 1204.56 L2060.92 1204.56 L2061.51 1204.56 L2062.09 1204.56 L2062.68 1204.56 L2063.27 1204.56 L2063.85 1204.56 L2064.44 1204.56 L2065.02 1204.56 L2065.61 1204.56 L2066.2 1204.56 L2066.78 1204.56 L2067.37 1204.56 L2067.96 1204.56 L2068.54 1204.56 L2069.13 1204.56 L2069.72 1204.56 L2070.3 1204.56 L2070.89 1204.56 L2071.48 1204.56 L2072.06 1204.56 L2072.65 1204.56 L2073.23 1204.56 L2073.82 1204.56 L2074.41 1204.56 L2074.99 1204.56 L2075.58 1204.56 L2076.17 1204.56 L2076.75 1204.56 L2077.34 1204.56 L2077.93 1204.56 L2078.51 1204.56 L2079.1 1204.56 L2079.68 1204.56 L2080.27 1204.56 L2080.86 1204.56 L2081.44 1204.56 L2082.03 1204.56 L2082.62 1204.56 L2083.2 1204.56 L2083.79 1204.56 L2084.38 1204.56 L2084.96 1204.56 L2085.55 1204.56 L2086.14 1204.56 L2086.72 1204.56 L2087.31 1204.56 L2087.89 1204.56 L2088.48 1204.56 L2089.07 1204.56 L2089.65 1204.56 L2090.24 1204.56 L2090.83 1204.56 L2091.41 1204.56 L2092 1204.56 L2092.59 1204.56 L2093.17 1204.56 L2093.76 1204.56 L2094.35 1204.56 L2094.93 1204.56 L2095.52 1204.56 L2096.1 1204.56 L2096.69 1204.56 L2097.28 1204.56 L2097.86 1204.56 L2098.45 1204.56 L2099.04 1204.56 L2099.62 1204.56 L2100.21 1204.56 L2100.8 1204.56 L2101.38 1204.56 L2101.97 1204.56 L2102.55 1204.56 L2103.14 1204.56 L2103.73 1204.56 L2104.31 1204.56 L2104.9 1204.56 L2105.49 1204.56 L2106.07 1204.56 L2106.66 1204.56 L2107.25 1204.56 L2107.83 1204.56 L2108.42 1204.56 L2109.01 1204.56 L2109.59 1204.56 L2110.18 1204.56 L2110.76 1204.56 L2111.35 1204.56 L2111.94 1204.56 L2112.52 1204.56 L2113.11 1204.56 L2113.7 1204.56 L2114.28 1204.56 L2114.87 1204.56 L2115.46 1204.56 L2116.04 1204.56 L2116.63 1204.56 L2117.22 1204.56 L2117.8 1204.56 L2118.39 1204.56 L2118.97 1204.56 L2119.56 1204.56 L2120.15 1204.56 L2120.73 1204.56 L2121.32 1204.56 L2121.91 1204.56 L2122.49 1204.56 L2123.08 1204.56 L2123.67 1204.56 L2124.25 1204.56 L2124.84 1204.56 L2125.42 1204.56 L2126.01 1204.56 L2126.6 1204.56 L2127.18 1204.56 L2127.77 1204.56 L2128.36 1204.56 L2128.94 1204.56 L2129.53 1204.56 L2130.12 1204.56 L2130.7 1204.56 L2131.29 1204.56 L2131.88 1204.56 L2132.46 1204.56 L2133.05 1204.56 L2133.63 1204.56 L2134.22 1204.56 L2134.81 1204.56 L2135.39 1204.56 L2135.98 1204.56 L2136.57 1204.56 L2137.15 1204.56 L2137.74 1204.56 L2138.33 1204.56 L2138.91 1204.56 L2139.5 1204.56 L2140.09 1204.56 L2140.67 1204.56 L2141.26 1204.56 L2141.84 1204.56 L2142.43 1204.56 L2143.02 1204.56 L2143.6 1204.56 L2144.19 1204.56 L2144.78 1204.56 L2145.36 1204.56 L2145.95 1204.56 L2146.54 1204.56 L2147.12 1204.56 L2147.71 1204.56 L2148.3 1204.56 L2148.88 1204.56 L2149.47 1204.56 L2150.05 1204.56 L2150.64 1204.56 L2151.23 1204.56 L2151.81 1204.56 L2152.4 1204.56 L2152.99 1204.56 L2153.57 1204.56 L2154.16 1204.56 L2154.75 1204.56 L2155.33 1204.56 L2155.92 1204.56 L2156.5 1204.56 L2157.09 1204.56 L2157.68 1204.56 L2158.26 1204.56 L2158.26 1204.39 L2157.68 1204.39 L2157.09 1204.39 L2156.5 1204.39 L2155.92 1204.39 L2155.33 1204.39 L2154.75 1204.39 L2154.16 1204.39 L2153.57 1204.39 L2152.99 1204.39 L2152.4 1204.39 L2151.81 1204.39 L2151.23 1204.39 L2150.64 1204.39 L2150.05 1204.39 L2149.47 1204.39 L2148.88 1204.39 L2148.3 1204.39 L2147.71 1204.39 L2147.12 1204.39 L2146.54 1204.39 L2145.95 1204.39 L2145.36 1204.39 L2144.78 1204.39 L2144.19 1204.39 L2143.6 1204.39 L2143.02 1204.39 L2142.43 1204.39 L2141.84 1204.39 L2141.26 1204.39 L2140.67 1204.39 L2140.09 1204.39 L2139.5 1204.39 L2138.91 1204.39 L2138.33 1204.39 L2137.74 1204.39 L2137.15 1204.39 L2136.57 1204.39 L2135.98 1204.39 L2135.39 1204.39 L2134.81 1204.39 L2134.22 1204.39 L2133.63 1204.39 L2133.05 1204.39 L2132.46 1204.39 L2131.88 1204.39 L2131.29 1204.39 L2130.7 1204.39 L2130.12 1204.39 L2129.53 1204.39 L2128.94 1204.39 L2128.36 1204.39 L2127.77 1204.39 L2127.18 1204.39 L2126.6 1204.39 L2126.01 1204.39 L2125.42 1204.39 L2124.84 1204.39 L2124.25 1204.39 L2123.67 1204.39 L2123.08 1204.39 L2122.49 1204.39 L2121.91 1204.39 L2121.32 1204.39 L2120.73 1204.39 L2120.15 1204.39 L2119.56 1204.39 L2118.97 1204.39 L2118.39 1204.39 L2117.8 1204.39 L2117.22 1204.39 L2116.63 1204.39 L2116.04 1204.39 L2115.46 1204.39 L2114.87 1204.39 L2114.28 1204.39 L2113.7 1204.39 L2113.11 1204.39 L2112.52 1204.39 L2111.94 1204.39 L2111.35 1204.39 L2110.76 1204.39 L2110.18 1204.39 L2109.59 1204.39 L2109.01 1204.39 L2108.42 1204.39 L2107.83 1204.39 L2107.25 1204.39 L2106.66 1204.39 L2106.07 1204.39 L2105.49 1204.39 L2104.9 1204.39 L2104.31 1204.39 L2103.73 1204.39 L2103.14 1204.39 L2102.55 1204.39 L2101.97 1204.39 L2101.38 1204.39 L2100.8 1204.39 L2100.21 1204.39 L2099.62 1204.39 L2099.04 1204.39 L2098.45 1204.39 L2097.86 1204.39 L2097.28 1204.39 L2096.69 1204.39 L2096.1 1204.39 L2095.52 1204.39 L2094.93 1204.39 L2094.35 1204.39 L2093.76 1204.39 L2093.17 1204.39 L2092.59 1204.39 L2092 1204.39 L2091.41 1204.39 L2090.83 1204.39 L2090.24 1204.39 L2089.65 1204.39 L2089.07 1204.39 L2088.48 1204.39 L2087.89 1204.39 L2087.31 1204.39 L2086.72 1204.39 L2086.14 1204.39 L2085.55 1204.39 L2084.96 1204.39 L2084.38 1204.39 L2083.79 1204.39 L2083.2 1204.39 L2082.62 1204.39 L2082.03 1204.39 L2081.44 1204.39 L2080.86 1204.39 L2080.27 1204.39 L2079.68 1204.39 L2079.1 1204.39 L2078.51 1204.39 L2077.93 1204.39 L2077.34 1204.39 L2076.75 1204.39 L2076.17 1204.39 L2075.58 1204.39 L2074.99 1204.39 L2074.41 1204.39 L2073.82 1204.39 L2073.23 1204.39 L2072.65 1204.39 L2072.06 1204.39 L2071.48 1204.39 L2070.89 1204.39 L2070.3 1204.39 L2069.72 1204.39 L2069.13 1204.39 L2068.54 1204.39 L2067.96 1204.39 L2067.37 1204.39 L2066.78 1204.39 L2066.2 1204.39 L2065.61 1204.39 L2065.02 1204.39 L2064.44 1204.39 L2063.85 1204.39 L2063.27 1204.39 L2062.68 1204.39 L2062.09 1204.39 L2061.51 1204.39 L2060.92 1204.39 L2060.33 1204.39 L2059.75 1204.39 L2059.16 1204.39 L2058.57 1204.39 L2057.99 1204.39 L2057.4 1204.39 L2056.81 1204.39 L2056.23 1204.39 L2055.64 1204.39 L2055.06 1204.39 L2054.47 1204.39 L2053.88 1204.39 L2053.3 1204.39 L2052.71 1204.39 L2052.12 1204.39 L2051.54 1204.39 L2050.95 1204.39 L2050.36 1204.39 L2049.78 1204.39 L2049.19 1204.39 L2048.6 1204.39 L2048.02 1204.39 L2047.43 1204.39 L2046.85 1204.39 L2046.26 1204.39 L2045.67 1204.39 L2045.09 1204.39 L2044.5 1204.39 L2043.91 1204.39 L2043.33 1204.39 L2042.74 1204.39 L2042.15 1204.39 L2041.57 1204.39 L2040.98 1204.39 L2040.4 1204.39 L2039.81 1204.39 L2039.22 1204.39 L2038.64 1204.39 L2038.05 1204.39 L2037.46 1204.39 L2036.88 1204.39 L2036.29 1204.39 L2035.7 1204.39 L2035.12 1204.39 L2034.53 1204.39 L2033.94 1204.39 L2033.36 1204.39 L2032.77 1204.39 L2032.19 1204.39 L2031.6 1204.39 L2031.01 1204.39 L2030.43 1204.39 L2029.84 1204.39 L2029.25 1204.39 L2028.67 1204.39 L2028.08 1204.39 L2027.49 1204.39 L2026.91 1204.39 L2026.32 1204.39 L2025.73 1204.39 L2025.15 1204.39 L2024.56 1204.39 L2023.98 1204.39 L2023.39 1204.39 L2022.8 1204.39 L2022.22 1204.39 L2021.63 1204.39 L2021.04 1204.39 L2020.46 1204.39 L2019.87 1204.39 L2019.28 1204.39 L2018.7 1204.39 L2018.11 1204.39 L2017.53 1204.39 L2016.94 1204.39 L2016.35 1204.39 L2015.77 1204.39 L2015.18 1204.39 L2014.59 1204.39 L2014.01 1204.39 L2013.42 1204.39 L2012.83 1204.39 L2012.25 1204.39 L2011.66 1204.39 L2011.07 1204.39 L2010.49 1204.39 L2009.9 1204.39 L2009.32 1204.39 L2008.73 1204.39 L2008.14 1204.39 L2007.56 1204.39 L2006.97 1204.39 L2006.38 1204.39 L2005.8 1204.39 L2005.21 1204.39 L2004.62 1204.39 L2004.04 1204.39 L2003.45 1204.39 L2002.86 1204.39 L2002.28 1204.39 L2001.69 1204.39 L2001.11 1204.39 L2000.52 1204.39 L1999.93 1204.39 L1999.35 1204.39 L1998.76 1204.39 L1998.17 1204.39 L1997.59 1204.39 L1997 1204.39 L1996.41 1204.39 L1995.83 1204.39 L1995.24 1204.39 L1994.65 1204.39 L1994.07 1204.39 L1993.48 1204.39 L1992.9 1204.39 L1992.31 1204.39 L1991.72 1204.39 L1991.14 1204.39 L1990.55 1204.39 L1989.96 1204.39 L1989.38 1204.39 L1988.79 1204.39 L1988.2 1204.39 L1987.62 1204.39 L1987.03 1204.39 L1986.45 1204.39 L1985.86 1204.39 L1985.27 1204.39 L1984.69 1204.39 L1984.1 1204.39 L1983.51 1204.39 L1982.93 1204.39 L1982.34 1204.39 L1981.75 1204.39 L1981.17 1204.39 L1980.58 1204.39 L1979.99 1204.39 L1979.41 1204.39 L1978.82 1204.39 L1978.24 1204.39 L1977.65 1204.39 L1977.06 1204.39 L1976.48 1204.39 L1975.89 1204.39 L1975.3 1204.39 L1974.72 1204.39 L1974.13 1204.39 L1973.54 1204.39 L1972.96 1204.39 L1972.37 1204.39 L1971.78 1204.39 L1971.2 1204.39 L1970.61 1204.39 L1970.03 1204.39 L1969.44 1204.39 L1968.85 1204.39 L1968.27 1204.39 L1967.68 1204.39 L1967.09 1204.39 L1966.51 1204.39 L1965.92 1204.39 L1965.33 1204.39 L1964.75 1204.39 L1964.16 1204.39 L1963.58 1204.39 L1962.99 1204.39 L1962.4 1204.39 L1961.82 1204.39 L1961.23 1204.39 L1960.64 1204.39 L1960.06 1204.39 L1959.47 1204.39 L1958.88 1204.39 L1958.3 1204.39 L1957.71 1204.39 L1957.12 1204.39 L1956.54 1204.39 L1955.95 1204.39 L1955.37 1204.39 L1954.78 1204.39 L1954.19 1204.39 L1953.61 1204.39 L1953.02 1204.39 L1952.43 1204.39 L1951.85 1204.39 L1951.26 1204.39 L1950.67 1204.39 L1950.09 1204.39 L1949.5 1204.39 L1948.91 1204.39 L1948.33 1204.39 L1947.74 1204.39 L1947.16 1204.39 L1946.57 1204.39 L1945.98 1204.39 L1945.4 1204.39 L1944.81 1204.39 L1944.22 1204.39 L1943.64 1204.39 L1943.05 1204.39 L1942.46 1204.39 L1941.88 1204.39 L1941.29 1204.39 L1940.71 1204.39 L1940.12 1204.39 L1939.53 1204.39 L1938.95 1204.39 L1938.36 1204.39 L1937.77 1204.39 L1937.19 1204.39 L1936.6 1204.39 L1936.01 1204.39 L1935.43 1204.39 L1934.84 1204.39 L1934.25 1204.39 L1933.67 1204.39 L1933.08 1204.39 L1932.5 1204.39 L1931.91 1204.39 L1931.32 1204.39 L1930.74 1204.39 L1930.15 1204.39 L1929.56 1204.39 L1928.98 1204.39 L1928.39 1204.39 L1927.8 1204.39 L1927.22 1204.39 L1926.63 1204.39 L1926.04 1204.39 L1925.46 1204.39 L1924.87 1204.39 L1924.29 1204.39 L1923.7 1204.39 L1923.11 1204.39 L1922.53 1204.39 L1921.94 1204.39 L1921.35 1204.39 L1920.77 1204.39 L1920.18 1204.39 L1919.59 1204.39 L1919.01 1204.39 L1918.42 1204.39 L1917.83 1204.39 L1917.25 1204.39 L1916.66 1204.39 L1916.08 1204.39 L1915.49 1204.39 L1914.9 1204.39 L1914.32 1204.39 L1913.73 1204.39 L1913.14 1204.39 L1912.56 1204.39 L1911.97 1204.39 L1911.38 1204.39 L1910.8 1204.39 L1910.21 1204.39 L1909.63 1204.39 L1909.04 1204.39 L1908.45 1204.39 L1907.87 1204.39 L1907.28 1204.39 L1906.69 1204.39 L1906.11 1204.39 L1905.52 1204.39 L1904.93 1204.39 L1904.35 1204.39 L1903.76 1204.39 L1903.17 1204.39 L1902.59 1204.39 L1902 1204.39 L1901.42 1204.39 L1900.83 1204.39 L1900.24 1204.39 L1899.66 1204.39 L1899.07 1204.39 L1898.48 1204.39 L1897.9 1204.39 L1897.31 1204.39 L1896.72 1204.39 L1896.14 1204.39 L1895.55 1204.39 L1894.96 1204.39 L1894.38 1204.39 L1893.79 1204.39 L1893.21 1204.39 L1892.62 1204.39 L1892.03 1204.39 L1891.45 1204.39 L1890.86 1204.39 L1890.27 1204.39 L1889.69 1204.39 L1889.1 1204.39 L1888.51 1204.39 L1887.93 1204.39 L1887.34 1204.39 L1886.76 1204.39 L1886.17 1204.39 L1885.58 1204.39 L1885 1204.39 L1884.41 1204.39 L1883.82 1204.39 L1883.24 1204.39 L1882.65 1204.39 L1882.06 1204.39 L1881.48 1204.39 L1880.89 1204.39 L1880.3 1204.39 L1879.72 1204.39 L1879.13 1204.39 L1878.55 1204.39 L1877.96 1204.39 L1877.37 1204.39 L1876.79 1204.39 L1876.2 1204.39 L1875.61 1204.39 L1875.03 1204.39 L1874.44 1204.39 L1873.85 1204.39 L1873.27 1204.39 L1872.68 1204.39 L1872.09 1204.39 L1871.51 1204.39 L1870.92 1204.39 L1870.34 1204.39 L1869.75 1204.39 L1869.16 1204.39 L1868.58 1204.39 L1867.99 1204.39 L1867.4 1204.39 L1866.82 1204.39 L1866.23 1204.39 L1865.64 1204.39 L1865.06 1204.39 L1864.47 1204.39 L1863.88 1204.39 L1863.3 1204.39 L1862.71 1204.39 L1862.13 1204.39 L1861.54 1204.39 L1860.95 1204.39 L1860.37 1204.39 L1859.78 1204.39 L1859.19 1204.39 L1858.61 1204.39 L1858.02 1204.39 L1857.43 1204.39 L1856.85 1204.39 L1856.26 1204.39 L1855.68 1204.39 L1855.09 1204.39 L1854.5 1204.39 L1853.92 1204.39 L1853.33 1204.39 L1852.74 1204.39 L1852.16 1204.39 L1851.57 1204.39 L1850.98 1204.39 L1850.4 1204.39 L1849.81 1204.39 L1849.22 1204.39 L1848.64 1204.39 L1848.05 1204.39 L1847.47 1204.39 L1846.88 1204.39 L1846.29 1204.39 L1845.71 1204.39 L1845.12 1204.39 L1844.53 1204.39 L1843.95 1204.39 L1843.36 1204.39 L1842.77 1204.39 L1842.19 1204.39 L1841.6 1204.39 L1841.01 1204.39 L1840.43 1204.39 L1839.84 1204.39 L1839.26 1204.39 L1838.67 1204.39 L1838.08 1204.39 L1837.5 1204.39 L1836.91 1204.39 L1836.32 1204.39 L1835.74 1204.39 L1835.15 1204.39 L1834.56 1204.39 L1833.98 1204.39 L1833.39 1204.39 L1832.81 1204.39 L1832.22 1204.39 L1831.63 1204.39 L1831.05 1204.39 L1830.46 1204.39 L1829.87 1204.39 L1829.29 1204.39 L1828.7 1204.39 L1828.11 1204.39 L1827.53 1204.39 L1826.94 1204.39 L1826.35 1204.39 L1825.77 1204.39 L1825.18 1204.39 L1824.6 1204.39 L1824.01 1204.39 L1823.42 1204.39 L1822.84 1204.39 L1822.25 1204.39 L1821.66 1204.39 L1821.08 1204.39 L1820.49 1204.39 L1819.9 1204.39 L1819.32 1204.39 L1818.73 1204.39 L1818.14 1204.39 L1817.56 1204.39 L1816.97 1204.39 L1816.39 1204.39 L1815.8 1204.39 L1815.21 1204.39 L1814.63 1204.39 L1814.04 1204.39 L1813.45 1204.39 L1812.87 1204.39 L1812.28 1204.39 L1811.69 1204.39 L1811.11 1204.39 L1810.52 1204.39 L1809.94 1204.39 L1809.35 1204.39 L1808.76 1204.39 L1808.18 1204.39 L1807.59 1204.39 L1807 1204.39 L1806.42 1204.39 L1805.83 1204.39 L1805.24 1204.39 L1804.66 1204.39 L1804.07 1204.39 L1803.48 1204.39 L1802.9 1204.39 L1802.31 1204.39 L1801.73 1204.39 L1801.14 1204.39 L1800.55 1204.39 L1799.97 1204.39 L1799.38 1204.39 L1798.79 1204.39 L1798.21 1204.39 L1797.62 1204.39 L1797.03 1204.39 L1796.45 1204.39 L1795.86 1204.39 L1795.27 1204.39 L1794.69 1204.39 L1794.1 1204.39 L1793.52 1204.39 L1792.93 1204.39 L1792.34 1204.39 L1791.76 1204.39 L1791.17 1204.39 L1790.58 1204.39 L1790 1204.39 L1789.41 1204.39 L1788.82 1204.39 L1788.24 1204.39 L1787.65 1204.39 L1787.06 1204.39 L1786.48 1204.39 L1785.89 1204.39 L1785.31 1204.39 L1784.72 1204.39 L1784.13 1204.39 L1783.55 1204.39 L1782.96 1204.39 L1782.37 1204.39 L1781.79 1204.39 L1781.2 1204.39 L1780.61 1204.39 L1780.03 1204.39 L1779.44 1204.39 L1778.86 1204.39 L1778.27 1204.39 L1777.68 1204.39 L1777.1 1204.39 L1776.51 1204.39 L1775.92 1204.39 L1775.34 1204.39 L1774.75 1204.39 L1774.16 1204.39 L1773.58 1204.39 L1772.99 1204.39 L1772.4 1204.39 L1771.82 1204.39 L1771.23 1204.39 L1770.65 1204.39 L1770.06 1204.39 L1769.47 1204.39 L1768.89 1204.39 L1768.3 1204.39 L1767.71 1204.39 L1767.13 1204.39 L1766.54 1204.39 L1765.95 1204.39 L1765.37 1204.39 L1764.78 1204.39 L1764.19 1204.39 L1763.61 1204.39 L1763.02 1204.39 L1762.44 1204.39 L1761.85 1204.39 L1761.26 1204.39 L1760.68 1204.39 L1760.09 1204.39 L1759.5 1204.39 L1758.92 1204.39 L1758.33 1204.39 L1757.74 1204.39 L1757.16 1204.39 L1756.57 1204.39 L1755.99 1204.39 L1755.4 1204.39 L1754.81 1204.39 L1754.23 1204.39 L1753.64 1204.39 L1753.05 1204.39 L1752.47 1204.39 L1751.88 1204.39 L1751.29 1204.39 L1750.71 1204.39 L1750.12 1204.39 L1749.53 1204.39 L1748.95 1204.39 L1748.36 1204.39 L1747.78 1204.39 L1747.19 1204.39 L1746.6 1204.39 L1746.02 1204.39 L1745.43 1204.39 L1744.84 1204.39 L1744.26 1204.39 L1743.67 1204.39 L1743.08 1204.39 L1742.5 1204.39 L1741.91 1204.39 L1741.32 1204.39 L1740.74 1204.39 L1740.15 1204.39 L1739.57 1204.39 L1738.98 1204.39 L1738.39 1204.39 L1737.81 1204.39 L1737.22 1204.39 L1736.63 1204.39 L1736.05 1204.39 L1735.46 1204.39 L1734.87 1204.39 L1734.29 1204.39 L1733.7 1204.39 L1733.11 1204.39 L1732.53 1204.39 L1731.94 1204.39 L1731.36 1204.39 L1730.77 1204.39 L1730.18 1204.39 L1729.6 1204.39 L1729.01 1204.39 L1728.42 1204.39 L1727.84 1204.39 L1727.25 1204.39 L1726.66 1204.39 L1726.08 1204.39 L1725.49 1204.39 L1724.91 1204.39 L1724.32 1204.39 L1723.73 1204.39 L1723.15 1204.39 L1722.56 1204.39 L1721.97 1204.39 L1721.39 1204.39 L1720.8 1204.39 L1720.21 1204.39 L1719.63 1204.39 L1719.04 1204.39 L1718.45 1204.39 L1717.87 1204.39 L1717.28 1204.39 L1716.7 1204.39 L1716.11 1204.39 L1715.52 1204.39 L1714.94 1204.39 L1714.35 1204.39 L1713.76 1204.39 L1713.18 1204.39 L1712.59 1204.39 L1712 1204.39 L1711.42 1204.39 L1710.83 1204.39 L1710.24 1204.39 L1709.66 1204.39 L1709.07 1204.39 L1708.49 1204.39 L1707.9 1204.39 L1707.31 1204.39 L1706.73 1204.39 L1706.14 1204.39 L1705.55 1204.39 L1704.97 1204.39 L1704.38 1204.39 L1703.79 1204.39 L1703.21 1204.39 L1702.62 1204.39 L1702.04 1204.39 L1701.45 1204.39 L1700.86 1204.39 L1700.28 1204.39 L1699.69 1204.39 L1699.1 1204.39 L1698.52 1204.39 L1697.93 1204.39 L1697.34 1204.39 L1696.76 1204.39 L1696.17 1204.39 L1695.58 1204.39 L1695 1204.39 L1694.41 1204.39 L1693.83 1204.39 L1693.24 1204.39 L1692.65 1204.39 L1692.07 1204.39 L1691.48 1204.39 L1690.89 1204.39 L1690.31 1204.39 L1689.72 1204.39 L1689.13 1204.39 L1688.55 1204.39 L1687.96 1204.39 L1687.37 1204.39 L1686.79 1204.39 L1686.2 1204.39 L1685.62 1204.39 L1685.03 1204.39 L1684.44 1204.39 L1683.86 1204.39 L1683.27 1204.39 L1682.68 1204.39 L1682.1 1204.39 L1681.51 1204.39 L1680.92 1204.39 L1680.34 1204.39 L1679.75 1204.39 L1679.17 1204.39 L1678.58 1204.39 L1677.99 1204.39 L1677.41 1204.39 L1676.82 1204.39 L1676.23 1204.39 L1675.65 1204.39 L1675.06 1204.39 L1674.47 1204.39 L1673.89 1204.39 L1673.3 1204.39 L1672.71 1204.39 L1672.13 1204.39 L1671.54 1204.39 L1670.96 1204.39 L1670.37 1204.39 L1669.78 1204.39 L1669.2 1204.39 L1668.61 1204.39 L1668.02 1204.39 L1667.44 1204.39 L1666.85 1204.39 L1666.26 1204.39 L1665.68 1204.39 L1665.09 1204.39 L1664.5 1204.39 L1663.92 1204.39 L1663.33 1204.39 L1662.75 1204.39 L1662.16 1204.39 L1661.57 1204.39 L1660.99 1204.39 L1660.4 1204.39 L1659.81 1204.39 L1659.23 1204.39 L1658.64 1204.39 L1658.05 1204.39 L1657.47 1204.39 L1656.88 1204.39 L1656.29 1204.39 L1655.71 1204.39 L1655.12 1204.39 L1654.54 1204.39 L1653.95 1204.39 L1653.36 1204.39 L1652.78 1204.39 L1652.19 1204.39 L1651.6 1204.39 L1651.02 1204.39 L1650.43 1204.39 L1649.84 1204.39 L1649.26 1204.39 L1648.67 1204.39 L1648.09 1204.39 L1647.5 1204.39 L1646.91 1204.39 L1646.33 1204.39 L1645.74 1204.39 L1645.15 1204.39 L1644.57 1204.39 L1643.98 1204.39 L1643.39 1204.39 L1642.81 1204.39 L1642.22 1204.39 L1641.63 1204.39 L1641.05 1204.39 L1640.46 1204.39 L1639.88 1204.39 L1639.29 1204.39 L1638.7 1204.39 L1638.12 1204.39 L1637.53 1204.39 L1636.94 1204.39 L1636.36 1204.39 L1635.77 1204.39 L1635.18 1204.39 L1634.6 1204.39 L1634.01 1204.39 L1633.42 1204.39 L1632.84 1204.39 L1632.25 1204.39 L1631.67 1204.39 L1631.08 1204.39 L1630.49 1204.39 L1629.91 1204.39 L1629.32 1204.39 L1628.73 1204.39 L1628.15 1204.39 L1627.56 1204.39 L1626.97 1204.39 L1626.39 1204.39 L1625.8 1204.39 L1625.22 1204.39 L1624.63 1204.39 L1624.04 1204.39 L1623.46 1204.39 L1622.87 1204.39 L1622.28 1204.39 L1621.7 1204.39 L1621.11 1204.39 L1620.52 1204.39 L1619.94 1204.39 L1619.35 1204.39 L1618.76 1204.39 L1618.18 1204.39 L1617.59 1204.39 L1617.01 1204.39 L1616.42 1204.39 L1615.83 1204.39 L1615.25 1204.39 L1614.66 1204.39 L1614.07 1204.39 L1613.49 1204.39 L1612.9 1204.39 L1612.31 1204.39 L1611.73 1204.39 L1611.14 1204.39 L1610.55 1204.39 L1609.97 1204.39 L1609.38 1204.39 L1608.8 1204.39 L1608.21 1204.39 L1607.62 1204.39 L1607.04 1204.39 L1606.45 1204.39 L1605.86 1204.39 L1605.28 1204.39 L1604.69 1204.39 L1604.1 1204.39 L1603.52 1204.39 L1602.93 1204.39 L1602.34 1204.39 L1601.76 1204.39 L1601.17 1204.39 L1600.59 1204.39 L1600 1204.39 L1599.41 1204.39 L1598.83 1204.39 L1598.24 1204.39 L1597.65 1204.39 L1597.07 1204.39 L1596.48 1204.39 L1595.89 1204.39 L1595.31 1204.39 L1594.72 1204.39 L1594.14 1204.39 L1593.55 1204.39 L1592.96 1204.39 L1592.38 1204.39 L1591.79 1204.39 L1591.2 1204.39 L1590.62 1204.39 L1590.03 1204.39 L1589.44 1204.39 L1588.86 1204.39 L1588.27 1204.39 L1587.68 1204.39 L1587.1 1204.39 L1586.51 1204.39 L1585.93 1204.39 L1585.34 1204.39 L1584.75 1204.39 L1584.17 1204.39 L1583.58 1204.39 L1582.99 1204.39 L1582.41 1204.39 L1581.82 1204.39 L1581.23 1204.39 L1580.65 1204.39 L1580.06 1204.39 L1579.47 1204.39 L1578.89 1204.39 L1578.3 1204.39 L1577.72 1204.39 L1577.13 1204.39 L1576.54 1204.39 L1575.96 1204.39 L1575.37 1204.39 L1574.78 1204.39 L1574.2 1204.39 L1573.61 1204.39 L1573.02 1204.39 L1572.44 1204.39 L1571.85 1204.39 L1571.27 1204.39 L1570.68 1204.39 L1570.09 1204.39 L1569.51 1204.39 L1568.92 1204.39 L1568.33 1204.39 L1567.75 1204.39 L1567.16 1204.39 L1566.57 1204.39 L1565.99 1204.39 L1565.4 1204.39 L1564.81 1204.39 L1564.23 1204.39 L1563.64 1204.39 L1563.06 1204.39 L1562.47 1204.39 L1561.88 1204.39 L1561.3 1204.39 L1560.71 1204.39 L1560.12 1204.39 L1559.54 1204.39 L1558.95 1204.39 L1558.36 1204.39 L1557.78 1204.39 L1557.19 1204.39 L1556.6 1204.39 L1556.02 1204.39 L1555.43 1204.39 L1554.85 1204.39 L1554.26 1204.39 L1553.67 1204.39 L1553.09 1204.39 L1552.5 1204.39 L1551.91 1204.39 L1551.33 1204.39 L1550.74 1204.39 L1550.15 1204.39 L1549.57 1204.39 L1548.98 1204.39 L1548.4 1204.39 L1547.81 1204.39 L1547.22 1204.39 L1546.64 1204.39 L1546.05 1204.39 L1545.46 1204.39 L1544.88 1204.39 L1544.29 1204.39 L1543.7 1204.39 L1543.12 1204.39 L1542.53 1204.39 L1541.94 1204.39 L1541.36 1204.39 L1540.77 1204.39 L1540.19 1204.39 L1539.6 1204.39 L1539.01 1204.39 L1538.43 1204.39 L1537.84 1204.39 L1537.25 1204.39 L1536.67 1204.39 L1536.08 1204.39 L1535.49 1204.39 L1534.91 1204.39 L1534.32 1204.39 L1533.73 1204.39 L1533.15 1204.39 L1532.56 1204.39 L1531.98 1204.39 L1531.39 1204.39 L1530.8 1204.39 L1530.22 1204.39 L1529.63 1204.39 L1529.04 1204.39 L1528.46 1204.39 L1527.87 1204.39 L1527.28 1204.39 L1526.7 1204.39 L1526.11 1204.39 L1525.52 1204.39 L1524.94 1204.39 L1524.35 1204.39 L1523.77 1204.39 L1523.18 1204.39 L1522.59 1204.39 L1522.01 1204.39 L1521.42 1204.39 L1520.83 1204.39 L1520.25 1204.39 L1519.66 1204.39 L1519.07 1204.39 L1518.49 1204.39 L1517.9 1204.39 L1517.32 1204.39 L1516.73 1204.39 L1516.14 1204.39 L1515.56 1204.39 L1514.97 1204.39 L1514.38 1204.39 L1513.8 1204.39 L1513.21 1204.39 L1512.62 1204.39 L1512.04 1204.39 L1511.45 1204.39 L1510.86 1204.39 L1510.28 1204.39 L1509.69 1204.39 L1509.11 1204.39 L1508.52 1204.39 L1507.93 1204.39 L1507.35 1204.39 L1506.76 1204.39 L1506.17 1204.39 L1505.59 1204.39 L1505 1204.39 L1504.41 1204.39 L1503.83 1204.39 L1503.24 1204.39 L1502.65 1204.39 L1502.07 1204.39 L1501.48 1204.39 L1500.9 1204.39 L1500.31 1204.39 L1499.72 1204.39 L1499.14 1204.39 L1498.55 1204.39 L1497.96 1204.39 L1497.38 1204.39 L1496.79 1204.39 L1496.2 1204.39 L1495.62 1204.39 L1495.03 1204.39 L1494.45 1204.39 L1493.86 1204.39 L1493.27 1204.39 L1492.69 1204.39 L1492.1 1204.39 L1491.51 1204.39 L1490.93 1204.39 L1490.34 1204.39 L1489.75 1204.39 L1489.17 1204.39 L1488.58 1204.39 L1487.99 1204.39 L1487.41 1204.39 L1486.82 1204.39 L1486.24 1204.39 L1485.65 1204.39 L1485.06 1204.39 L1484.48 1204.39 L1483.89 1204.39 L1483.3 1204.39 L1482.72 1204.39 L1482.13 1204.39 L1481.54 1204.39 L1480.96 1204.39 L1480.37 1204.39 L1479.78 1204.39 L1479.2 1204.39 L1478.61 1204.39 L1478.03 1204.39 L1477.44 1204.39 L1476.85 1204.39 L1476.27 1204.39 L1475.68 1204.39 L1475.09 1204.39 L1474.51 1204.39 L1473.92 1204.39 L1473.33 1204.39 L1472.75 1204.39 L1472.16 1204.39 L1471.57 1204.39 L1470.99 1204.39 L1470.4 1204.39 L1469.82 1204.39 L1469.23 1204.39 L1468.64 1204.39 L1468.06 1204.39 L1467.47 1204.39 L1466.88 1204.39 L1466.3 1204.39 L1465.71 1204.39 L1465.12 1204.39 L1464.54 1204.39 L1463.95 1204.39 L1463.37 1204.39 L1462.78 1204.39 L1462.19 1204.39 L1461.61 1204.39 L1461.02 1204.39 L1460.43 1204.39 L1459.85 1204.39 L1459.26 1204.39 L1458.67 1204.39 L1458.09 1204.39 L1457.5 1204.39 L1456.91 1204.39 L1456.33 1204.39 L1455.74 1204.39 L1455.16 1204.39 L1454.57 1204.39 L1453.98 1204.39 L1453.4 1204.39 L1452.81 1204.39 L1452.22 1204.39 L1451.64 1204.39 L1451.05 1204.39 L1450.46 1204.39 L1449.88 1204.39 L1449.29 1204.39 L1448.7 1204.39 L1448.12 1204.39 L1447.53 1204.39 L1446.95 1204.39 L1446.36 1204.39 L1445.77 1204.39 L1445.19 1204.39 L1444.6 1204.39 L1444.01 1204.39 L1443.43 1204.39 L1442.84 1204.39 L1442.25 1204.39 L1441.67 1204.39 L1441.08 1204.39 L1440.5 1204.39 L1439.91 1204.39 L1439.32 1204.39 L1438.74 1204.39 L1438.15 1204.39 L1437.56 1204.39 L1436.98 1204.39 L1436.39 1204.39 L1435.8 1204.39 L1435.22 1204.39 L1434.63 1204.39 L1434.04 1204.39 L1433.46 1204.39 L1432.87 1204.39 L1432.29 1204.39 L1431.7 1204.39 L1431.11 1204.39 L1430.53 1204.39 L1429.94 1204.39 L1429.35 1204.39 L1428.77 1204.39 L1428.18 1204.39 L1427.59 1204.39 L1427.01 1204.39 L1426.42 1204.39 L1425.83 1204.39 L1425.25 1204.39 L1424.66 1204.39 L1424.08 1204.39 L1423.49 1204.39 L1422.9 1204.39 L1422.32 1204.39 L1421.73 1204.39 L1421.14 1204.39 L1420.56 1204.39 L1419.97 1204.39 L1419.38 1204.39 L1418.8 1204.39 L1418.21 1204.39 L1417.63 1204.39 L1417.04 1204.39 L1416.45 1204.39 L1415.87 1204.39 L1415.28 1204.39 L1414.69 1204.39 L1414.11 1204.39 L1413.52 1204.39 L1412.93 1204.39 L1412.35 1204.39 L1411.76 1204.39 L1411.17 1204.39 L1410.59 1204.39 L1410 1204.39 L1409.42 1204.39 L1408.83 1204.39 L1408.24 1204.39 L1407.66 1204.39 L1407.07 1204.39 L1406.48 1204.39 L1405.9 1204.39 L1405.31 1204.39 L1404.72 1204.39 L1404.14 1204.39 L1403.55 1204.39 L1402.96 1204.39 L1402.38 1204.39 L1401.79 1204.39 L1401.21 1204.39 L1400.62 1204.39 L1400.03 1204.39 L1399.45 1204.39 L1398.86 1204.39 L1398.27 1204.39 L1397.69 1204.39 L1397.1 1204.39 L1396.51 1204.39 L1395.93 1204.39 L1395.34 1204.39 L1394.75 1204.39 L1394.17 1204.39 L1393.58 1204.39 L1393 1204.39 L1392.41 1204.39 L1391.82 1204.39 L1391.24 1204.39 L1390.65 1204.39 L1390.06 1204.39 L1389.48 1204.39 L1388.89 1204.39 L1388.3 1204.39 L1387.72 1204.39 L1387.13 1204.39 L1386.55 1204.39 L1385.96 1204.39 L1385.37 1204.39 L1384.79 1204.39 L1384.2 1204.39 L1383.61 1204.39 L1383.03 1204.39 L1382.44 1204.39 L1381.85 1204.39 L1381.27 1204.39 L1380.68 1204.39 L1380.09 1204.39 L1379.51 1204.39 L1378.92 1204.39 L1378.34 1204.39 L1377.75 1204.39 L1377.16 1204.39 L1376.58 1204.39 L1375.99 1204.39 L1375.4 1204.39 L1374.82 1204.39 L1374.23 1204.39 L1373.64 1204.39 L1373.06 1204.39 L1372.47 1204.39 L1371.88 1204.39 L1371.3 1204.39 L1370.71 1204.39 L1370.13 1204.39 L1369.54 1204.39 L1368.95 1204.39 L1368.37 1204.39 L1367.78 1204.39 L1367.19 1204.39 L1366.61 1204.39 L1366.02 1204.39 L1365.43 1204.39 L1364.85 1204.39 L1364.26 1204.39 L1363.68 1204.39 L1363.09 1204.39 L1362.5 1204.39 L1361.92 1204.39 L1361.33 1204.39 L1360.74 1204.39 L1360.16 1204.39 L1359.57 1204.39 L1358.98 1204.39 L1358.4 1204.39 L1357.81 1204.39 L1357.22 1204.39 L1356.64 1204.39 L1356.05 1204.39 L1355.47 1204.39 L1354.88 1204.39 L1354.29 1204.39 L1353.71 1204.39 L1353.12 1204.39 L1352.53 1204.39 L1351.95 1204.39 L1351.36 1204.39 L1350.77 1204.39 L1350.19 1204.39 L1349.6 1204.39 L1349.01 1204.39 L1348.43 1204.39 L1347.84 1204.39 L1347.26 1204.39 L1346.67 1204.39 L1346.08 1204.39 L1345.5 1204.39 L1344.91 1204.39 L1344.32 1204.39 L1343.74 1204.39 L1343.15 1204.39 L1342.56 1204.39 L1341.98 1204.39 L1341.39 1204.39 L1340.8 1204.39 L1340.22 1204.39 L1339.63 1204.39 L1339.05 1204.39 L1338.46 1204.39 L1337.87 1204.39 L1337.29 1204.39 L1336.7 1204.39 L1336.11 1204.39 L1335.53 1204.39 L1334.94 1204.39 L1334.35 1204.39 L1333.77 1204.39 L1333.18 1204.39 L1332.6 1204.39 L1332.01 1204.39 L1331.42 1204.39 L1330.84 1204.39 L1330.25 1204.39 L1329.66 1204.39 L1329.08 1204.39 L1328.49 1204.39 L1327.9 1204.39 L1327.32 1204.39 L1326.73 1204.39 L1326.14 1204.39 L1325.56 1204.39 L1324.97 1204.39 L1324.39 1204.39 L1323.8 1204.39 L1323.21 1204.39 L1322.63 1204.39 L1322.04 1204.39 L1321.45 1204.39 L1320.87 1204.39 L1320.28 1204.39 L1319.69 1204.39 L1319.11 1204.39 L1318.52 1204.39 L1317.93 1204.39 L1317.35 1204.39 L1316.76 1204.39 L1316.18 1204.39 L1315.59 1204.39 L1315 1204.39 L1314.42 1204.39 L1313.83 1204.39 L1313.24 1204.39 L1312.66 1204.39 L1312.07 1204.39 L1311.48 1204.39 L1310.9 1204.39 L1310.31 1204.39 L1309.73 1204.39 L1309.14 1204.39 L1308.55 1204.39 L1307.97 1204.39 L1307.38 1204.39 L1306.79 1204.39 L1306.21 1204.39 L1305.62 1204.39 L1305.03 1204.39 L1304.45 1204.39 L1303.86 1204.39 L1303.27 1204.39 L1302.69 1204.39 L1302.1 1204.39 L1301.52 1204.39 L1300.93 1204.39 L1300.34 1204.39 L1299.76 1204.39 L1299.17 1204.39 L1298.58 1204.39 L1298 1204.39 L1297.41 1204.39 L1296.82 1204.39 L1296.24 1204.39 L1295.65 1204.39 L1295.06 1204.39 L1294.48 1204.39 L1293.89 1204.39 L1293.31 1204.39 L1292.72 1204.39 L1292.13 1204.39 L1291.55 1204.39 L1290.96 1204.39 L1290.37 1204.39 L1289.79 1204.39 L1289.2 1204.39 L1288.61 1204.39 L1288.03 1204.39 L1287.44 1204.39 L1286.86 1204.39 L1286.27 1204.39 L1285.68 1204.39 L1285.1 1204.39 L1284.51 1204.39 L1283.92 1204.39 L1283.34 1204.39 L1282.75 1204.39 L1282.16 1204.39 L1281.58 1204.39 L1280.99 1204.39 L1280.4 1204.39 L1279.82 1204.39 L1279.23 1204.39 L1278.65 1204.39 L1278.06 1204.39 L1277.47 1204.39 L1276.89 1204.39 L1276.3 1204.39 L1275.71 1204.39 L1275.13 1204.39 L1274.54 1204.39 L1273.95 1204.39 L1273.37 1204.39 L1272.78 1204.39 L1272.19 1204.39 L1271.61 1204.39 L1271.02 1204.39 L1270.44 1204.39 L1269.85 1204.39 L1269.26 1204.39 L1268.68 1204.39 L1268.09 1204.39 L1267.5 1204.39 L1266.92 1204.39 L1266.33 1204.39 L1265.74 1204.39 L1265.16 1204.39 L1264.57 1204.39 L1263.98 1204.39 L1263.4 1204.39 L1262.81 1204.39 L1262.23 1204.39 L1261.64 1204.39 L1261.05 1204.39 L1260.47 1204.39 L1259.88 1204.39 L1259.29 1204.39 L1258.71 1204.39 L1258.12 1204.39 L1257.53 1204.39 L1256.95 1204.39 L1256.36 1204.39 L1255.78 1204.39 L1255.19 1204.39 L1254.6 1204.39 L1254.02 1204.39 L1253.43 1204.39 L1252.84 1204.39 L1252.26 1204.39 L1251.67 1204.39 L1251.08 1204.39 L1250.5 1204.39 L1249.91 1204.39 L1249.32 1204.39 L1248.74 1204.39 L1248.15 1204.39 L1247.57 1204.39 L1246.98 1204.39 L1246.39 1204.39 L1245.81 1204.39 L1245.22 1204.39 L1244.63 1204.39 L1244.05 1204.39 L1243.46 1204.39 L1242.87 1204.39 L1242.29 1204.39 L1241.7 1204.39 L1241.11 1204.39 L1240.53 1204.39 L1239.94 1204.39 L1239.36 1204.39 L1238.77 1204.39 L1238.18 1204.39 L1237.6 1204.39 L1237.01 1204.39 L1236.42 1204.39 L1235.84 1204.39 L1235.25 1204.39 L1234.66 1204.39 L1234.08 1204.39 L1233.49 1204.39 L1232.91 1204.39 L1232.32 1204.39 L1231.73 1204.39 L1231.15 1204.39 L1230.56 1204.39 L1229.97 1204.39 L1229.39 1204.39 L1228.8 1204.39 L1228.21 1204.39 L1227.63 1204.39 L1227.04 1204.39 L1226.45 1204.39 L1225.87 1204.39 L1225.28 1204.39 L1224.7 1204.39 L1224.11 1204.39 L1223.52 1204.39 L1222.94 1204.39 L1222.35 1204.39 L1221.76 1204.39 L1221.18 1204.39 L1220.59 1204.39 L1220 1204.39 L1219.42 1204.39 L1218.83 1204.39 L1218.24 1204.39 L1217.66 1204.39 L1217.07 1204.39 L1216.49 1204.39 L1215.9 1204.39 L1215.31 1204.39 L1214.73 1204.39 L1214.14 1204.39 L1213.55 1204.39 L1212.97 1204.39 L1212.38 1204.39 L1211.79 1204.39 L1211.21 1204.39 L1210.62 1204.39 L1210.03 1204.39 L1209.45 1204.39 L1208.86 1204.39 L1208.28 1204.39 L1207.69 1204.39 L1207.1 1204.39 L1206.52 1204.39 L1205.93 1204.39 L1205.34 1204.39 L1204.76 1204.39 L1204.17 1204.39 L1203.58 1204.39 L1203 1204.39 L1202.41 1204.39 L1201.83 1204.39 L1201.24 1204.39 L1200.65 1204.39 L1200.07 1204.39 L1199.48 1204.39 L1198.89 1204.39 L1198.31 1204.39 L1197.72 1204.39 L1197.13 1204.39 L1196.55 1204.39 L1195.96 1204.39 L1195.37 1204.39 L1194.79 1204.39 L1194.2 1204.39 L1193.62 1204.39 L1193.03 1204.39 L1192.44 1204.39 L1191.86 1204.39 L1191.27 1204.39 L1190.68 1204.39 L1190.1 1204.39 L1189.51 1204.39 L1188.92 1204.39 L1188.34 1204.39 L1187.75 1204.39 L1187.16 1204.39 L1186.58 1204.39 L1185.99 1204.39 L1185.41 1204.39 L1184.82 1204.39 L1184.23 1204.39 L1183.65 1204.39 L1183.06 1204.39 L1182.47 1204.39 L1181.89 1204.39 L1181.3 1204.39 L1180.71 1204.39 L1180.13 1204.39 L1179.54 1204.39 L1178.96 1204.39 L1178.37 1204.39 L1177.78 1204.39 L1177.2 1204.39 L1176.61 1204.39 L1176.02 1204.39 L1175.44 1204.39 L1174.85 1204.39 L1174.26 1204.39 L1173.68 1204.39 L1173.09 1204.39 L1172.5 1204.39 L1171.92 1204.39 L1171.33 1204.39 L1170.75 1204.39 L1170.16 1204.39 L1169.57 1204.39 L1168.99 1204.39 L1168.4 1204.39 L1167.81 1204.39 L1167.23 1204.39 L1166.64 1204.39 L1166.05 1204.39 L1165.47 1204.39 L1164.88 1204.39 L1164.29 1204.39 L1163.71 1204.39 L1163.12 1204.39 L1162.54 1204.39 L1161.95 1204.39 L1161.36 1204.39 L1160.78 1204.39 L1160.19 1204.39 L1159.6 1204.39 L1159.02 1204.39 L1158.43 1204.39 L1157.84 1204.39 L1157.26 1204.39 L1156.67 1204.39 L1156.09 1204.39 L1155.5 1204.39 L1154.91 1204.39 L1154.33 1204.39 L1153.74 1204.39 L1153.15 1204.39 L1152.57 1204.39 L1151.98 1204.39 L1151.39 1204.39 L1150.81 1204.39 L1150.22 1204.39 L1149.63 1204.39 L1149.05 1204.39 L1148.46 1204.39 L1147.88 1204.39 L1147.29 1204.39 L1146.7 1204.39 L1146.12 1204.39 L1145.53 1204.39 L1144.94 1204.39 L1144.36 1204.39 L1143.77 1204.39 L1143.18 1204.39 L1142.6 1204.39 L1142.01 1204.39 L1141.42 1204.39 L1140.84 1204.39 L1140.25 1204.39 L1139.67 1204.39 L1139.08 1204.39 L1138.49 1204.39 L1137.91 1204.39 L1137.32 1204.39 L1136.73 1204.39 L1136.15 1204.39 L1135.56 1204.39 L1134.97 1204.39 L1134.39 1204.39 L1133.8 1204.39 L1133.21 1204.39 L1132.63 1204.39 L1132.04 1204.39 L1131.46 1204.39 L1130.87 1204.39 L1130.28 1204.39 L1129.7 1204.39 L1129.11 1204.39 L1128.52 1204.39 L1127.94 1204.39 L1127.35 1204.39 L1126.76 1204.39 L1126.18 1204.39 L1125.59 1204.39 L1125.01 1204.39 L1124.42 1204.39 L1123.83 1204.39 L1123.25 1204.39 L1122.66 1204.39 L1122.07 1204.39 L1121.49 1204.39 L1120.9 1204.39 L1120.31 1204.39 L1119.73 1204.39 L1119.14 1204.39 L1118.55 1204.39 L1117.97 1204.39 L1117.38 1204.39 L1116.8 1204.39 L1116.21 1204.39 L1115.62 1204.39 L1115.04 1204.39 L1114.45 1204.39 L1113.86 1204.39 L1113.28 1204.39 L1112.69 1204.39 L1112.1 1204.39 L1111.52 1204.39 L1110.93 1204.39 L1110.34 1204.39 L1109.76 1204.39 L1109.17 1204.39 L1108.59 1204.39 L1108 1204.39 L1107.41 1204.39 L1106.83 1204.39 L1106.24 1204.39 L1105.65 1204.39 L1105.07 1204.39 L1104.48 1204.39 L1103.89 1204.39 L1103.31 1204.39 L1102.72 1204.39 L1102.14 1204.39 L1101.55 1204.39 L1100.96 1204.39 L1100.38 1204.39 L1099.79 1204.39 L1099.2 1204.39 L1098.62 1204.39 L1098.03 1204.39 L1097.44 1204.39 L1096.86 1204.39 L1096.27 1204.39 L1095.68 1204.39 L1095.1 1204.39 L1094.51 1204.39 L1093.93 1204.39 L1093.34 1204.39 L1092.75 1204.39 L1092.17 1204.39 L1091.58 1204.39 L1090.99 1204.39 L1090.41 1204.39 L1089.82 1204.39 L1089.23 1204.39 L1088.65 1204.39 L1088.06 1204.39 L1087.47 1204.39 L1086.89 1204.39 L1086.3 1204.39 L1085.72 1204.39 L1085.13 1204.39 L1084.54 1204.39 L1083.96 1204.39 L1083.37 1204.39 L1082.78 1204.39 L1082.2 1204.39 L1081.61 1204.39 L1081.02 1204.39 L1080.44 1204.39 L1079.85 1204.39 L1079.26 1204.39 L1078.68 1204.39 L1078.09 1204.39 L1077.51 1204.39 L1076.92 1204.39 L1076.33 1204.39 L1075.75 1204.39 L1075.16 1204.39 L1074.57 1204.39 L1073.99 1204.39 L1073.4 1204.39 L1072.81 1204.39 L1072.23 1204.39 L1071.64 1204.39 L1071.06 1204.39 L1070.47 1204.39 L1069.88 1204.39 L1069.3 1204.39 L1068.71 1204.39 L1068.12 1204.39 L1067.54 1204.39 L1066.95 1204.39 L1066.36 1204.39 L1065.78 1204.39 L1065.19 1204.39 L1064.6 1204.39 L1064.02 1204.39 L1063.43 1204.39 L1062.85 1204.39 L1062.26 1204.39 L1061.67 1204.39 L1061.09 1204.39 L1060.5 1204.39 L1059.91 1204.39 L1059.33 1204.39 L1058.74 1204.39 L1058.15 1204.39 L1057.57 1204.39 L1056.98 1204.39 L1056.39 1204.39 L1055.81 1204.39 L1055.22 1204.39 L1054.64 1204.39 L1054.05 1204.39 L1053.46 1204.39 L1052.88 1204.39 L1052.29 1204.39 L1051.7 1204.39 L1051.12 1204.39 L1050.53 1204.39 L1049.94 1204.39 L1049.36 1204.39 L1048.77 1204.39 L1048.19 1204.39 L1047.6 1204.39 L1047.01 1204.39 L1046.43 1204.39 L1045.84 1204.39 L1045.25 1204.39 L1044.67 1204.39 L1044.08 1204.39 L1043.49 1204.39 L1042.91 1204.39 L1042.32 1204.39 L1041.73 1204.39 L1041.15 1204.39 L1040.56 1204.39 L1039.98 1204.39 L1039.39 1204.39 L1038.8 1204.39 L1038.22 1204.39 L1037.63 1204.39 L1037.04 1204.39 L1036.46 1204.39 L1035.87 1204.39 L1035.28 1204.39 L1034.7 1204.39 L1034.11 1204.39 L1033.52 1204.39 L1032.94 1204.39 L1032.35 1204.39 L1031.77 1204.39 L1031.18 1204.39 L1030.59 1204.39 L1030.01 1204.39 L1029.42 1204.39 L1028.83 1204.39 L1028.25 1204.39 L1027.66 1204.39 L1027.07 1204.39 L1026.49 1204.39 L1025.9 1204.39 L1025.32 1204.39 L1024.73 1204.39 L1024.14 1204.39 L1023.56 1204.39 L1022.97 1204.39 L1022.38 1204.39 L1021.8 1204.39 L1021.21 1204.39 L1020.62 1204.39 L1020.04 1204.39 L1019.45 1204.39 L1018.86 1204.39 L1018.28 1204.39 L1017.69 1204.39 L1017.11 1204.39 L1016.52 1204.39 L1015.93 1204.39 L1015.35 1204.39 L1014.76 1204.39 L1014.17 1204.39 L1013.59 1204.39 L1013 1204.39 L1012.41 1204.39 L1011.83 1204.39 L1011.24 1204.39 L1010.65 1204.39 L1010.07 1204.39 L1009.48 1204.39 L1008.9 1204.39 L1008.31 1204.39 L1007.72 1204.39 L1007.14 1204.39 L1006.55 1204.39 L1005.96 1204.39 L1005.38 1204.39 L1004.79 1204.39 L1004.2 1204.39 L1003.62 1204.39 L1003.03 1204.39 L1002.44 1204.39 L1001.86 1204.39 L1001.27 1204.39 L1000.69 1204.39 L1000.1 1204.39 L999.513 1204.39 L998.926 1204.39 L998.34 1204.39 L997.754 1204.39 L997.167 1204.39 L996.581 1204.39 L995.994 1204.39 L995.408 1204.39 L994.822 1204.39 L994.235 1204.39 L993.649 1204.39 L993.062 1204.39 L992.476 1204.39 L991.889 1204.39 L991.303 1204.39 L990.717 1204.39 L990.13 1204.39 L989.544 1204.39 L988.957 1204.39 L988.371 1204.39 L987.785 1204.39 L987.198 1204.39 L986.612 1204.39 L986.025 1204.39  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1204.47 986.612,1204.47 987.198,1204.47 987.785,1204.47 988.371,1204.47 988.957,1204.47 989.544,1204.47 990.13,1204.47 990.717,1204.47 991.303,1204.47 991.889,1204.47 992.476,1204.47 993.062,1204.47 993.649,1204.47 994.235,1204.47 994.822,1204.47 995.408,1204.47 995.994,1204.47 996.581,1204.47 997.167,1204.47 997.754,1204.47 998.34,1204.47 998.926,1204.47 999.513,1204.47 1000.1,1204.47 1000.69,1204.47 1001.27,1204.47 1001.86,1204.47 1002.44,1204.47 1003.03,1204.47 1003.62,1204.47 1004.2,1204.47 1004.79,1204.47 1005.38,1204.47 1005.96,1204.47 1006.55,1204.47 1007.14,1204.47 1007.72,1204.47 1008.31,1204.47 1008.9,1204.47 1009.48,1204.47 1010.07,1204.47 1010.65,1204.47 1011.24,1204.47 1011.83,1204.47 1012.41,1204.47 1013,1204.47 1013.59,1204.47 1014.17,1204.47 1014.76,1204.47 1015.35,1204.47 1015.93,1204.47 1016.52,1204.47 1017.11,1204.47 1017.69,1204.47 1018.28,1204.47 1018.86,1204.47 1019.45,1204.47 1020.04,1204.47 1020.62,1204.47 1021.21,1204.47 1021.8,1204.47 1022.38,1204.47 1022.97,1204.47 1023.56,1204.47 1024.14,1204.47 1024.73,1204.47 1025.32,1204.47 1025.9,1204.47 1026.49,1204.47 1027.07,1204.47 1027.66,1204.47 1028.25,1204.47 1028.83,1204.47 1029.42,1204.47 1030.01,1204.47 1030.59,1204.47 1031.18,1204.47 1031.77,1204.47 1032.35,1204.47 1032.94,1204.47 1033.52,1204.47 1034.11,1204.47 1034.7,1204.47 1035.28,1204.47 1035.87,1204.47 1036.46,1204.47 1037.04,1204.47 1037.63,1204.47 1038.22,1204.47 1038.8,1204.47 1039.39,1204.47 1039.98,1204.47 1040.56,1204.47 1041.15,1204.47 1041.73,1204.47 1042.32,1204.47 1042.91,1204.47 1043.49,1204.47 1044.08,1204.47 1044.67,1204.47 1045.25,1204.47 1045.84,1204.47 1046.43,1204.47 1047.01,1204.47 1047.6,1204.47 1048.19,1204.47 1048.77,1204.47 1049.36,1204.47 1049.94,1204.47 1050.53,1204.47 1051.12,1204.47 1051.7,1204.47 1052.29,1204.47 1052.88,1204.47 1053.46,1204.47 1054.05,1204.47 1054.64,1204.47 1055.22,1204.47 1055.81,1204.47 1056.39,1204.47 1056.98,1204.47 1057.57,1204.47 1058.15,1204.47 1058.74,1204.47 1059.33,1204.47 1059.91,1204.47 1060.5,1204.47 1061.09,1204.47 1061.67,1204.47 1062.26,1204.47 1062.85,1204.47 1063.43,1204.47 1064.02,1204.47 1064.6,1204.47 1065.19,1204.47 1065.78,1204.47 1066.36,1204.47 1066.95,1204.47 1067.54,1204.47 1068.12,1204.47 1068.71,1204.47 1069.3,1204.47 1069.88,1204.47 1070.47,1204.47 1071.06,1204.47 1071.64,1204.47 1072.23,1204.47 1072.81,1204.47 1073.4,1204.47 1073.99,1204.47 1074.57,1204.47 1075.16,1204.47 1075.75,1204.47 1076.33,1204.47 1076.92,1204.47 1077.51,1204.47 1078.09,1204.47 1078.68,1204.47 1079.26,1204.47 1079.85,1204.47 1080.44,1204.47 1081.02,1204.47 1081.61,1204.47 1082.2,1204.47 1082.78,1204.47 1083.37,1204.47 1083.96,1204.47 1084.54,1204.47 1085.13,1204.47 1085.72,1204.47 1086.3,1204.47 1086.89,1204.47 1087.47,1204.47 1088.06,1204.47 1088.65,1204.47 1089.23,1204.47 1089.82,1204.47 1090.41,1204.47 1090.99,1204.47 1091.58,1204.47 1092.17,1204.47 1092.75,1204.47 1093.34,1204.47 1093.93,1204.47 1094.51,1204.47 1095.1,1204.47 1095.68,1204.47 1096.27,1204.47 1096.86,1204.47 1097.44,1204.47 1098.03,1204.47 1098.62,1204.47 1099.2,1204.47 1099.79,1204.47 1100.38,1204.47 1100.96,1204.47 1101.55,1204.47 1102.14,1204.47 1102.72,1204.47 1103.31,1204.47 1103.89,1204.47 1104.48,1204.47 1105.07,1204.47 1105.65,1204.47 1106.24,1204.47 1106.83,1204.47 1107.41,1204.47 1108,1204.47 1108.59,1204.47 1109.17,1204.47 1109.76,1204.47 1110.34,1204.47 1110.93,1204.47 1111.52,1204.47 1112.1,1204.47 1112.69,1204.47 1113.28,1204.47 1113.86,1204.47 1114.45,1204.47 1115.04,1204.47 1115.62,1204.47 1116.21,1204.47 1116.8,1204.47 1117.38,1204.47 1117.97,1204.47 1118.55,1204.47 1119.14,1204.47 1119.73,1204.47 1120.31,1204.47 1120.9,1204.47 1121.49,1204.47 1122.07,1204.47 1122.66,1204.47 1123.25,1204.47 1123.83,1204.47 1124.42,1204.47 1125.01,1204.47 1125.59,1204.47 1126.18,1204.47 1126.76,1204.47 1127.35,1204.47 1127.94,1204.47 1128.52,1204.47 1129.11,1204.47 1129.7,1204.47 1130.28,1204.47 1130.87,1204.47 1131.46,1204.47 1132.04,1204.47 1132.63,1204.47 1133.21,1204.47 1133.8,1204.47 1134.39,1204.47 1134.97,1204.47 1135.56,1204.47 1136.15,1204.47 1136.73,1204.47 1137.32,1204.47 1137.91,1204.47 1138.49,1204.47 1139.08,1204.47 1139.67,1204.47 1140.25,1204.47 1140.84,1204.47 1141.42,1204.47 1142.01,1204.47 1142.6,1204.47 1143.18,1204.47 1143.77,1204.47 1144.36,1204.47 1144.94,1204.47 1145.53,1204.47 1146.12,1204.47 1146.7,1204.47 1147.29,1204.47 1147.88,1204.47 1148.46,1204.47 1149.05,1204.47 1149.63,1204.47 1150.22,1204.47 1150.81,1204.47 1151.39,1204.47 1151.98,1204.47 1152.57,1204.47 1153.15,1204.47 1153.74,1204.47 1154.33,1204.47 1154.91,1204.47 1155.5,1204.47 1156.09,1204.47 1156.67,1204.47 1157.26,1204.47 1157.84,1204.47 1158.43,1204.47 1159.02,1204.47 1159.6,1204.47 1160.19,1204.47 1160.78,1204.47 1161.36,1204.47 1161.95,1204.47 1162.54,1204.47 1163.12,1204.47 1163.71,1204.47 1164.29,1204.47 1164.88,1204.47 1165.47,1204.47 1166.05,1204.47 1166.64,1204.47 1167.23,1204.47 1167.81,1204.47 1168.4,1204.47 1168.99,1204.47 1169.57,1204.47 1170.16,1204.47 1170.75,1204.47 1171.33,1204.47 1171.92,1204.47 1172.5,1204.47 1173.09,1204.47 1173.68,1204.47 1174.26,1204.47 1174.85,1204.47 1175.44,1204.47 1176.02,1204.47 1176.61,1204.47 1177.2,1204.47 1177.78,1204.47 1178.37,1204.47 1178.96,1204.47 1179.54,1204.47 1180.13,1204.47 1180.71,1204.47 1181.3,1204.47 1181.89,1204.47 1182.47,1204.47 1183.06,1204.47 1183.65,1204.47 1184.23,1204.47 1184.82,1204.47 1185.41,1204.47 1185.99,1204.47 1186.58,1204.47 1187.16,1204.47 1187.75,1204.47 1188.34,1204.47 1188.92,1204.47 1189.51,1204.47 1190.1,1204.47 1190.68,1204.47 1191.27,1204.47 1191.86,1204.47 1192.44,1204.47 1193.03,1204.47 1193.62,1204.47 1194.2,1204.47 1194.79,1204.47 1195.37,1204.47 1195.96,1204.47 1196.55,1204.47 1197.13,1204.47 1197.72,1204.47 1198.31,1204.47 1198.89,1204.47 1199.48,1204.47 1200.07,1204.47 1200.65,1204.47 1201.24,1204.47 1201.83,1204.47 1202.41,1204.47 1203,1204.47 1203.58,1204.47 1204.17,1204.47 1204.76,1204.47 1205.34,1204.47 1205.93,1204.47 1206.52,1204.47 1207.1,1204.47 1207.69,1204.47 1208.28,1204.47 1208.86,1204.47 1209.45,1204.47 1210.03,1204.47 1210.62,1204.47 1211.21,1204.47 1211.79,1204.47 1212.38,1204.47 1212.97,1204.47 1213.55,1204.47 1214.14,1204.47 1214.73,1204.47 1215.31,1204.47 1215.9,1204.47 1216.49,1204.47 1217.07,1204.47 1217.66,1204.47 1218.24,1204.47 1218.83,1204.47 1219.42,1204.47 1220,1204.47 1220.59,1204.47 1221.18,1204.47 1221.76,1204.47 1222.35,1204.47 1222.94,1204.47 1223.52,1204.47 1224.11,1204.47 1224.7,1204.47 1225.28,1204.47 1225.87,1204.47 1226.45,1204.47 1227.04,1204.47 1227.63,1204.47 1228.21,1204.47 1228.8,1204.47 1229.39,1204.47 1229.97,1204.47 1230.56,1204.47 1231.15,1204.47 1231.73,1204.47 1232.32,1204.47 1232.91,1204.47 1233.49,1204.47 1234.08,1204.47 1234.66,1204.47 1235.25,1204.47 1235.84,1204.47 1236.42,1204.47 1237.01,1204.47 1237.6,1204.47 1238.18,1204.47 1238.77,1204.47 1239.36,1204.47 1239.94,1204.47 1240.53,1204.47 1241.11,1204.47 1241.7,1204.47 1242.29,1204.47 1242.87,1204.47 1243.46,1204.47 1244.05,1204.47 1244.63,1204.47 1245.22,1204.47 1245.81,1204.47 1246.39,1204.47 1246.98,1204.47 1247.57,1204.47 1248.15,1204.47 1248.74,1204.47 1249.32,1204.47 1249.91,1204.47 1250.5,1204.47 1251.08,1204.47 1251.67,1204.47 1252.26,1204.47 1252.84,1204.47 1253.43,1204.47 1254.02,1204.47 1254.6,1204.47 1255.19,1204.47 1255.78,1204.47 1256.36,1204.47 1256.95,1204.47 1257.53,1204.47 1258.12,1204.47 1258.71,1204.47 1259.29,1204.47 1259.88,1204.47 1260.47,1204.47 1261.05,1204.47 1261.64,1204.47 1262.23,1204.47 1262.81,1204.47 1263.4,1204.47 1263.98,1204.47 1264.57,1204.47 1265.16,1204.47 1265.74,1204.47 1266.33,1204.47 1266.92,1204.47 1267.5,1204.47 1268.09,1204.47 1268.68,1204.47 1269.26,1204.47 1269.85,1204.47 1270.44,1204.47 1271.02,1204.47 1271.61,1204.47 1272.19,1204.47 1272.78,1204.47 1273.37,1204.47 1273.95,1204.47 1274.54,1204.47 1275.13,1204.47 1275.71,1204.47 1276.3,1204.47 1276.89,1204.47 1277.47,1204.47 1278.06,1204.47 1278.65,1204.47 1279.23,1204.47 1279.82,1204.47 1280.4,1204.47 1280.99,1204.47 1281.58,1204.47 1282.16,1204.47 1282.75,1204.47 1283.34,1204.47 1283.92,1204.47 1284.51,1204.47 1285.1,1204.47 1285.68,1204.47 1286.27,1204.47 1286.86,1204.47 1287.44,1204.47 1288.03,1204.47 1288.61,1204.47 1289.2,1204.47 1289.79,1204.47 1290.37,1204.47 1290.96,1204.47 1291.55,1204.47 1292.13,1204.47 1292.72,1204.47 1293.31,1204.47 1293.89,1204.47 1294.48,1204.47 1295.06,1204.47 1295.65,1204.47 1296.24,1204.47 1296.82,1204.47 1297.41,1204.47 1298,1204.47 1298.58,1204.47 1299.17,1204.47 1299.76,1204.47 1300.34,1204.47 1300.93,1204.47 1301.52,1204.47 1302.1,1204.47 1302.69,1204.47 1303.27,1204.47 1303.86,1204.47 1304.45,1204.47 1305.03,1204.47 1305.62,1204.47 1306.21,1204.47 1306.79,1204.47 1307.38,1204.47 1307.97,1204.47 1308.55,1204.47 1309.14,1204.47 1309.73,1204.47 1310.31,1204.47 1310.9,1204.47 1311.48,1204.47 1312.07,1204.47 1312.66,1204.47 1313.24,1204.47 1313.83,1204.47 1314.42,1204.47 1315,1204.47 1315.59,1204.47 1316.18,1204.47 1316.76,1204.47 1317.35,1204.47 1317.93,1204.47 1318.52,1204.47 1319.11,1204.47 1319.69,1204.47 1320.28,1204.47 1320.87,1204.47 1321.45,1204.47 1322.04,1204.47 1322.63,1204.47 1323.21,1204.47 1323.8,1204.47 1324.39,1204.47 1324.97,1204.47 1325.56,1204.47 1326.14,1204.47 1326.73,1204.47 1327.32,1204.47 1327.9,1204.47 1328.49,1204.47 1329.08,1204.47 1329.66,1204.47 1330.25,1204.47 1330.84,1204.47 1331.42,1204.47 1332.01,1204.47 1332.6,1204.47 1333.18,1204.47 1333.77,1204.47 1334.35,1204.47 1334.94,1204.47 1335.53,1204.47 1336.11,1204.47 1336.7,1204.47 1337.29,1204.47 1337.87,1204.47 1338.46,1204.47 1339.05,1204.47 1339.63,1204.47 1340.22,1204.47 1340.8,1204.47 1341.39,1204.47 1341.98,1204.47 1342.56,1204.47 1343.15,1204.47 1343.74,1204.47 1344.32,1204.47 1344.91,1204.47 1345.5,1204.47 1346.08,1204.47 1346.67,1204.47 1347.26,1204.47 1347.84,1204.47 1348.43,1204.47 1349.01,1204.47 1349.6,1204.47 1350.19,1204.47 1350.77,1204.47 1351.36,1204.47 1351.95,1204.47 1352.53,1204.47 1353.12,1204.47 1353.71,1204.47 1354.29,1204.47 1354.88,1204.47 1355.47,1204.47 1356.05,1204.47 1356.64,1204.47 1357.22,1204.47 1357.81,1204.47 1358.4,1204.47 1358.98,1204.47 1359.57,1204.47 1360.16,1204.47 1360.74,1204.47 1361.33,1204.47 1361.92,1204.47 1362.5,1204.47 1363.09,1204.47 1363.68,1204.47 1364.26,1204.47 1364.85,1204.47 1365.43,1204.47 1366.02,1204.47 1366.61,1204.47 1367.19,1204.47 1367.78,1204.47 1368.37,1204.47 1368.95,1204.47 1369.54,1204.47 1370.13,1204.47 1370.71,1204.47 1371.3,1204.47 1371.88,1204.47 1372.47,1204.47 1373.06,1204.47 1373.64,1204.47 1374.23,1204.47 1374.82,1204.47 1375.4,1204.47 1375.99,1204.47 1376.58,1204.47 1377.16,1204.47 1377.75,1204.47 1378.34,1204.47 1378.92,1204.47 1379.51,1204.47 1380.09,1204.47 1380.68,1204.47 1381.27,1204.47 1381.85,1204.47 1382.44,1204.47 1383.03,1204.47 1383.61,1204.47 1384.2,1204.47 1384.79,1204.47 1385.37,1204.47 1385.96,1204.47 1386.55,1204.47 1387.13,1204.47 1387.72,1204.47 1388.3,1204.47 1388.89,1204.47 1389.48,1204.47 1390.06,1204.47 1390.65,1204.47 1391.24,1204.47 1391.82,1204.47 1392.41,1204.47 1393,1204.47 1393.58,1204.47 1394.17,1204.47 1394.75,1204.47 1395.34,1204.47 1395.93,1204.47 1396.51,1204.47 1397.1,1204.47 1397.69,1204.47 1398.27,1204.47 1398.86,1204.47 1399.45,1204.47 1400.03,1204.47 1400.62,1204.47 1401.21,1204.47 1401.79,1204.47 1402.38,1204.47 1402.96,1204.47 1403.55,1204.47 1404.14,1204.47 1404.72,1204.47 1405.31,1204.47 1405.9,1204.47 1406.48,1204.47 1407.07,1204.47 1407.66,1204.47 1408.24,1204.47 1408.83,1204.47 1409.42,1204.47 1410,1204.47 1410.59,1204.47 1411.17,1204.47 1411.76,1204.47 1412.35,1204.47 1412.93,1204.47 1413.52,1204.47 1414.11,1204.47 1414.69,1204.47 1415.28,1204.47 1415.87,1204.47 1416.45,1204.47 1417.04,1204.47 1417.63,1204.47 1418.21,1204.47 1418.8,1204.47 1419.38,1204.47 1419.97,1204.47 1420.56,1204.47 1421.14,1204.47 1421.73,1204.47 1422.32,1204.47 1422.9,1204.47 1423.49,1204.47 1424.08,1204.47 1424.66,1204.47 1425.25,1204.47 1425.83,1204.47 1426.42,1204.47 1427.01,1204.47 1427.59,1204.47 1428.18,1204.47 1428.77,1204.47 1429.35,1204.47 1429.94,1204.47 1430.53,1204.47 1431.11,1204.47 1431.7,1204.47 1432.29,1204.47 1432.87,1204.47 1433.46,1204.47 1434.04,1204.47 1434.63,1204.47 1435.22,1204.47 1435.8,1204.47 1436.39,1204.47 1436.98,1204.47 1437.56,1204.47 1438.15,1204.47 1438.74,1204.47 1439.32,1204.47 1439.91,1204.47 1440.5,1204.47 1441.08,1204.47 1441.67,1204.47 1442.25,1204.47 1442.84,1204.47 1443.43,1204.47 1444.01,1204.47 1444.6,1204.47 1445.19,1204.47 1445.77,1204.47 1446.36,1204.47 1446.95,1204.47 1447.53,1204.47 1448.12,1204.47 1448.7,1204.47 1449.29,1204.47 1449.88,1204.47 1450.46,1204.47 1451.05,1204.47 1451.64,1204.47 1452.22,1204.47 1452.81,1204.47 1453.4,1204.47 1453.98,1204.47 1454.57,1204.47 1455.16,1204.47 1455.74,1204.47 1456.33,1204.47 1456.91,1204.47 1457.5,1204.47 1458.09,1204.47 1458.67,1204.47 1459.26,1204.47 1459.85,1204.47 1460.43,1204.47 1461.02,1204.47 1461.61,1204.47 1462.19,1204.47 1462.78,1204.47 1463.37,1204.47 1463.95,1204.47 1464.54,1204.47 1465.12,1204.47 1465.71,1204.47 1466.3,1204.47 1466.88,1204.47 1467.47,1204.47 1468.06,1204.47 1468.64,1204.47 1469.23,1204.47 1469.82,1204.47 1470.4,1204.47 1470.99,1204.47 1471.57,1204.47 1472.16,1204.47 1472.75,1204.47 1473.33,1204.47 1473.92,1204.47 1474.51,1204.47 1475.09,1204.47 1475.68,1204.47 1476.27,1204.47 1476.85,1204.47 1477.44,1204.47 1478.03,1204.47 1478.61,1204.47 1479.2,1204.47 1479.78,1204.47 1480.37,1204.47 1480.96,1204.47 1481.54,1204.47 1482.13,1204.47 1482.72,1204.47 1483.3,1204.47 1483.89,1204.47 1484.48,1204.47 1485.06,1204.47 1485.65,1204.47 1486.24,1204.47 1486.82,1204.47 1487.41,1204.47 1487.99,1204.47 1488.58,1204.47 1489.17,1204.47 1489.75,1204.47 1490.34,1204.47 1490.93,1204.47 1491.51,1204.47 1492.1,1204.47 1492.69,1204.47 1493.27,1204.47 1493.86,1204.47 1494.45,1204.47 1495.03,1204.47 1495.62,1204.47 1496.2,1204.47 1496.79,1204.47 1497.38,1204.47 1497.96,1204.47 1498.55,1204.47 1499.14,1204.47 1499.72,1204.47 1500.31,1204.47 1500.9,1204.47 1501.48,1204.47 1502.07,1204.47 1502.65,1204.47 1503.24,1204.47 1503.83,1204.47 1504.41,1204.47 1505,1204.47 1505.59,1204.47 1506.17,1204.47 1506.76,1204.47 1507.35,1204.47 1507.93,1204.47 1508.52,1204.47 1509.11,1204.47 1509.69,1204.47 1510.28,1204.47 1510.86,1204.47 1511.45,1204.47 1512.04,1204.47 1512.62,1204.47 1513.21,1204.47 1513.8,1204.47 1514.38,1204.47 1514.97,1204.47 1515.56,1204.47 1516.14,1204.47 1516.73,1204.47 1517.32,1204.47 1517.9,1204.47 1518.49,1204.47 1519.07,1204.47 1519.66,1204.47 1520.25,1204.47 1520.83,1204.47 1521.42,1204.47 1522.01,1204.47 1522.59,1204.47 1523.18,1204.47 1523.77,1204.47 1524.35,1204.47 1524.94,1204.47 1525.52,1204.47 1526.11,1204.47 1526.7,1204.47 1527.28,1204.47 1527.87,1204.47 1528.46,1204.47 1529.04,1204.47 1529.63,1204.47 1530.22,1204.47 1530.8,1204.47 1531.39,1204.47 1531.98,1204.47 1532.56,1204.47 1533.15,1204.47 1533.73,1204.47 1534.32,1204.47 1534.91,1204.47 1535.49,1204.47 1536.08,1204.47 1536.67,1204.47 1537.25,1204.47 1537.84,1204.47 1538.43,1204.47 1539.01,1204.47 1539.6,1204.47 1540.19,1204.47 1540.77,1204.47 1541.36,1204.47 1541.94,1204.47 1542.53,1204.47 1543.12,1204.47 1543.7,1204.47 1544.29,1204.47 1544.88,1204.47 1545.46,1204.47 1546.05,1204.47 1546.64,1204.47 1547.22,1204.47 1547.81,1204.47 1548.4,1204.47 1548.98,1204.47 1549.57,1204.47 1550.15,1204.47 1550.74,1204.47 1551.33,1204.47 1551.91,1204.47 1552.5,1204.47 1553.09,1204.47 1553.67,1204.47 1554.26,1204.47 1554.85,1204.47 1555.43,1204.47 1556.02,1204.47 1556.6,1204.47 1557.19,1204.47 1557.78,1204.47 1558.36,1204.47 1558.95,1204.47 1559.54,1204.47 1560.12,1204.47 1560.71,1204.47 1561.3,1204.47 1561.88,1204.47 1562.47,1204.47 1563.06,1204.47 1563.64,1204.47 1564.23,1204.47 1564.81,1204.47 1565.4,1204.47 1565.99,1204.47 1566.57,1204.47 1567.16,1204.47 1567.75,1204.47 1568.33,1204.47 1568.92,1204.47 1569.51,1204.47 1570.09,1204.47 1570.68,1204.47 1571.27,1204.47 1571.85,1204.47 1572.44,1204.47 1573.02,1204.47 1573.61,1204.47 1574.2,1204.47 1574.78,1204.47 1575.37,1204.47 1575.96,1204.47 1576.54,1204.47 1577.13,1204.47 1577.72,1204.47 1578.3,1204.47 1578.89,1204.47 1579.47,1204.47 1580.06,1204.47 1580.65,1204.47 1581.23,1204.47 1581.82,1204.47 1582.41,1204.47 1582.99,1204.47 1583.58,1204.47 1584.17,1204.47 1584.75,1204.47 1585.34,1204.47 1585.93,1204.47 1586.51,1204.47 1587.1,1204.47 1587.68,1204.47 1588.27,1204.47 1588.86,1204.47 1589.44,1204.47 1590.03,1204.47 1590.62,1204.47 1591.2,1204.47 1591.79,1204.47 1592.38,1204.47 1592.96,1204.47 1593.55,1204.47 1594.14,1204.47 1594.72,1204.47 1595.31,1204.47 1595.89,1204.47 1596.48,1204.47 1597.07,1204.47 1597.65,1204.47 1598.24,1204.47 1598.83,1204.47 1599.41,1204.47 1600,1204.47 1600.59,1204.47 1601.17,1204.47 1601.76,1204.47 1602.34,1204.47 1602.93,1204.47 1603.52,1204.47 1604.1,1204.47 1604.69,1204.47 1605.28,1204.47 1605.86,1204.47 1606.45,1204.47 1607.04,1204.47 1607.62,1204.47 1608.21,1204.47 1608.8,1204.47 1609.38,1204.47 1609.97,1204.47 1610.55,1204.47 1611.14,1204.47 1611.73,1204.47 1612.31,1204.47 1612.9,1204.47 1613.49,1204.47 1614.07,1204.47 1614.66,1204.47 1615.25,1204.47 1615.83,1204.47 1616.42,1204.47 1617.01,1204.47 1617.59,1204.47 1618.18,1204.47 1618.76,1204.47 1619.35,1204.47 1619.94,1204.47 1620.52,1204.47 1621.11,1204.47 1621.7,1204.47 1622.28,1204.47 1622.87,1204.47 1623.46,1204.47 1624.04,1204.47 1624.63,1204.47 1625.22,1204.47 1625.8,1204.47 1626.39,1204.47 1626.97,1204.47 1627.56,1204.47 1628.15,1204.47 1628.73,1204.47 1629.32,1204.47 1629.91,1204.47 1630.49,1204.47 1631.08,1204.47 1631.67,1204.47 1632.25,1204.47 1632.84,1204.47 1633.42,1204.47 1634.01,1204.47 1634.6,1204.47 1635.18,1204.47 1635.77,1204.47 1636.36,1204.47 1636.94,1204.47 1637.53,1204.47 1638.12,1204.47 1638.7,1204.47 1639.29,1204.47 1639.88,1204.47 1640.46,1204.47 1641.05,1204.47 1641.63,1204.47 1642.22,1204.47 1642.81,1204.47 1643.39,1204.47 1643.98,1204.47 1644.57,1204.47 1645.15,1204.47 1645.74,1204.47 1646.33,1204.47 1646.91,1204.47 1647.5,1204.47 1648.09,1204.47 1648.67,1204.47 1649.26,1204.47 1649.84,1204.47 1650.43,1204.47 1651.02,1204.47 1651.6,1204.47 1652.19,1204.47 1652.78,1204.47 1653.36,1204.47 1653.95,1204.47 1654.54,1204.47 1655.12,1204.47 1655.71,1204.47 1656.29,1204.47 1656.88,1204.47 1657.47,1204.47 1658.05,1204.47 1658.64,1204.47 1659.23,1204.47 1659.81,1204.47 1660.4,1204.47 1660.99,1204.47 1661.57,1204.47 1662.16,1204.47 1662.75,1204.47 1663.33,1204.47 1663.92,1204.47 1664.5,1204.47 1665.09,1204.47 1665.68,1204.47 1666.26,1204.47 1666.85,1204.47 1667.44,1204.47 1668.02,1204.47 1668.61,1204.47 1669.2,1204.47 1669.78,1204.47 1670.37,1204.47 1670.96,1204.47 1671.54,1204.47 1672.13,1204.47 1672.71,1204.47 1673.3,1204.47 1673.89,1204.47 1674.47,1204.47 1675.06,1204.47 1675.65,1204.47 1676.23,1204.47 1676.82,1204.47 1677.41,1204.47 1677.99,1204.47 1678.58,1204.47 1679.17,1204.47 1679.75,1204.47 1680.34,1204.47 1680.92,1204.47 1681.51,1204.47 1682.1,1204.47 1682.68,1204.47 1683.27,1204.47 1683.86,1204.47 1684.44,1204.47 1685.03,1204.47 1685.62,1204.47 1686.2,1204.47 1686.79,1204.47 1687.37,1204.47 1687.96,1204.47 1688.55,1204.47 1689.13,1204.47 1689.72,1204.47 1690.31,1204.47 1690.89,1204.47 1691.48,1204.47 1692.07,1204.47 1692.65,1204.47 1693.24,1204.47 1693.83,1204.47 1694.41,1204.47 1695,1204.47 1695.58,1204.47 1696.17,1204.47 1696.76,1204.47 1697.34,1204.47 1697.93,1204.47 1698.52,1204.47 1699.1,1204.47 1699.69,1204.47 1700.28,1204.47 1700.86,1204.47 1701.45,1204.47 1702.04,1204.47 1702.62,1204.47 1703.21,1204.47 1703.79,1204.47 1704.38,1204.47 1704.97,1204.47 1705.55,1204.47 1706.14,1204.47 1706.73,1204.47 1707.31,1204.47 1707.9,1204.47 1708.49,1204.47 1709.07,1204.47 1709.66,1204.47 1710.24,1204.47 1710.83,1204.47 1711.42,1204.47 1712,1204.47 1712.59,1204.47 1713.18,1204.47 1713.76,1204.47 1714.35,1204.47 1714.94,1204.47 1715.52,1204.47 1716.11,1204.47 1716.7,1204.47 1717.28,1204.47 1717.87,1204.47 1718.45,1204.47 1719.04,1204.47 1719.63,1204.47 1720.21,1204.47 1720.8,1204.47 1721.39,1204.47 1721.97,1204.47 1722.56,1204.47 1723.15,1204.47 1723.73,1204.47 1724.32,1204.47 1724.91,1204.47 1725.49,1204.47 1726.08,1204.47 1726.66,1204.47 1727.25,1204.47 1727.84,1204.47 1728.42,1204.47 1729.01,1204.47 1729.6,1204.47 1730.18,1204.47 1730.77,1204.47 1731.36,1204.47 1731.94,1204.47 1732.53,1204.47 1733.11,1204.47 1733.7,1204.47 1734.29,1204.47 1734.87,1204.47 1735.46,1204.47 1736.05,1204.47 1736.63,1204.47 1737.22,1204.47 1737.81,1204.47 1738.39,1204.47 1738.98,1204.47 1739.57,1204.47 1740.15,1204.47 1740.74,1204.47 1741.32,1204.47 1741.91,1204.47 1742.5,1204.47 1743.08,1204.47 1743.67,1204.47 1744.26,1204.47 1744.84,1204.47 1745.43,1204.47 1746.02,1204.47 1746.6,1204.47 1747.19,1204.47 1747.78,1204.47 1748.36,1204.47 1748.95,1204.47 1749.53,1204.47 1750.12,1204.47 1750.71,1204.47 1751.29,1204.47 1751.88,1204.47 1752.47,1204.47 1753.05,1204.47 1753.64,1204.47 1754.23,1204.47 1754.81,1204.47 1755.4,1204.47 1755.99,1204.47 1756.57,1204.47 1757.16,1204.47 1757.74,1204.47 1758.33,1204.47 1758.92,1204.47 1759.5,1204.47 1760.09,1204.47 1760.68,1204.47 1761.26,1204.47 1761.85,1204.47 1762.44,1204.47 1763.02,1204.47 1763.61,1204.47 1764.19,1204.47 1764.78,1204.47 1765.37,1204.47 1765.95,1204.47 1766.54,1204.47 1767.13,1204.47 1767.71,1204.47 1768.3,1204.47 1768.89,1204.47 1769.47,1204.47 1770.06,1204.47 1770.65,1204.47 1771.23,1204.47 1771.82,1204.47 1772.4,1204.47 1772.99,1204.47 1773.58,1204.47 1774.16,1204.47 1774.75,1204.47 1775.34,1204.47 1775.92,1204.47 1776.51,1204.47 1777.1,1204.47 1777.68,1204.47 1778.27,1204.47 1778.86,1204.47 1779.44,1204.47 1780.03,1204.47 1780.61,1204.47 1781.2,1204.47 1781.79,1204.47 1782.37,1204.47 1782.96,1204.47 1783.55,1204.47 1784.13,1204.47 1784.72,1204.47 1785.31,1204.47 1785.89,1204.47 1786.48,1204.47 1787.06,1204.47 1787.65,1204.47 1788.24,1204.47 1788.82,1204.47 1789.41,1204.47 1790,1204.47 1790.58,1204.47 1791.17,1204.47 1791.76,1204.47 1792.34,1204.47 1792.93,1204.47 1793.52,1204.47 1794.1,1204.47 1794.69,1204.47 1795.27,1204.47 1795.86,1204.47 1796.45,1204.47 1797.03,1204.47 1797.62,1204.47 1798.21,1204.47 1798.79,1204.47 1799.38,1204.47 1799.97,1204.47 1800.55,1204.47 1801.14,1204.47 1801.73,1204.47 1802.31,1204.47 1802.9,1204.47 1803.48,1204.47 1804.07,1204.47 1804.66,1204.47 1805.24,1204.47 1805.83,1204.47 1806.42,1204.47 1807,1204.47 1807.59,1204.47 1808.18,1204.47 1808.76,1204.47 1809.35,1204.47 1809.94,1204.47 1810.52,1204.47 1811.11,1204.47 1811.69,1204.47 1812.28,1204.47 1812.87,1204.47 1813.45,1204.47 1814.04,1204.47 1814.63,1204.47 1815.21,1204.47 1815.8,1204.47 1816.39,1204.47 1816.97,1204.47 1817.56,1204.47 1818.14,1204.47 1818.73,1204.47 1819.32,1204.47 1819.9,1204.47 1820.49,1204.47 1821.08,1204.47 1821.66,1204.47 1822.25,1204.47 1822.84,1204.47 1823.42,1204.47 1824.01,1204.47 1824.6,1204.47 1825.18,1204.47 1825.77,1204.47 1826.35,1204.47 1826.94,1204.47 1827.53,1204.47 1828.11,1204.47 1828.7,1204.47 1829.29,1204.47 1829.87,1204.47 1830.46,1204.47 1831.05,1204.47 1831.63,1204.47 1832.22,1204.47 1832.81,1204.47 1833.39,1204.47 1833.98,1204.47 1834.56,1204.47 1835.15,1204.47 1835.74,1204.47 1836.32,1204.47 1836.91,1204.47 1837.5,1204.47 1838.08,1204.47 1838.67,1204.47 1839.26,1204.47 1839.84,1204.47 1840.43,1204.47 1841.01,1204.47 1841.6,1204.47 1842.19,1204.47 1842.77,1204.47 1843.36,1204.47 1843.95,1204.47 1844.53,1204.47 1845.12,1204.47 1845.71,1204.47 1846.29,1204.47 1846.88,1204.47 1847.47,1204.47 1848.05,1204.47 1848.64,1204.47 1849.22,1204.47 1849.81,1204.47 1850.4,1204.47 1850.98,1204.47 1851.57,1204.47 1852.16,1204.47 1852.74,1204.47 1853.33,1204.47 1853.92,1204.47 1854.5,1204.47 1855.09,1204.47 1855.68,1204.47 1856.26,1204.47 1856.85,1204.47 1857.43,1204.47 1858.02,1204.47 1858.61,1204.47 1859.19,1204.47 1859.78,1204.47 1860.37,1204.47 1860.95,1204.47 1861.54,1204.47 1862.13,1204.47 1862.71,1204.47 1863.3,1204.47 1863.88,1204.47 1864.47,1204.47 1865.06,1204.47 1865.64,1204.47 1866.23,1204.47 1866.82,1204.47 1867.4,1204.47 1867.99,1204.47 1868.58,1204.47 1869.16,1204.47 1869.75,1204.47 1870.34,1204.47 1870.92,1204.47 1871.51,1204.47 1872.09,1204.47 1872.68,1204.47 1873.27,1204.47 1873.85,1204.47 1874.44,1204.47 1875.03,1204.47 1875.61,1204.47 1876.2,1204.47 1876.79,1204.47 1877.37,1204.47 1877.96,1204.47 1878.55,1204.47 1879.13,1204.47 1879.72,1204.47 1880.3,1204.47 1880.89,1204.47 1881.48,1204.47 1882.06,1204.47 1882.65,1204.47 1883.24,1204.47 1883.82,1204.47 1884.41,1204.47 1885,1204.47 1885.58,1204.47 1886.17,1204.47 1886.76,1204.47 1887.34,1204.47 1887.93,1204.47 1888.51,1204.47 1889.1,1204.47 1889.69,1204.47 1890.27,1204.47 1890.86,1204.47 1891.45,1204.47 1892.03,1204.47 1892.62,1204.47 1893.21,1204.47 1893.79,1204.47 1894.38,1204.47 1894.96,1204.47 1895.55,1204.47 1896.14,1204.47 1896.72,1204.47 1897.31,1204.47 1897.9,1204.47 1898.48,1204.47 1899.07,1204.47 1899.66,1204.47 1900.24,1204.47 1900.83,1204.47 1901.42,1204.47 1902,1204.47 1902.59,1204.47 1903.17,1204.47 1903.76,1204.47 1904.35,1204.47 1904.93,1204.47 1905.52,1204.47 1906.11,1204.47 1906.69,1204.47 1907.28,1204.47 1907.87,1204.47 1908.45,1204.47 1909.04,1204.47 1909.63,1204.47 1910.21,1204.47 1910.8,1204.47 1911.38,1204.47 1911.97,1204.47 1912.56,1204.47 1913.14,1204.47 1913.73,1204.47 1914.32,1204.47 1914.9,1204.47 1915.49,1204.47 1916.08,1204.47 1916.66,1204.47 1917.25,1204.47 1917.83,1204.47 1918.42,1204.47 1919.01,1204.47 1919.59,1204.47 1920.18,1204.47 1920.77,1204.47 1921.35,1204.47 1921.94,1204.47 1922.53,1204.47 1923.11,1204.47 1923.7,1204.47 1924.29,1204.47 1924.87,1204.47 1925.46,1204.47 1926.04,1204.47 1926.63,1204.47 1927.22,1204.47 1927.8,1204.47 1928.39,1204.47 1928.98,1204.47 1929.56,1204.47 1930.15,1204.47 1930.74,1204.47 1931.32,1204.47 1931.91,1204.47 1932.5,1204.47 1933.08,1204.47 1933.67,1204.47 1934.25,1204.47 1934.84,1204.47 1935.43,1204.47 1936.01,1204.47 1936.6,1204.47 1937.19,1204.47 1937.77,1204.47 1938.36,1204.47 1938.95,1204.47 1939.53,1204.47 1940.12,1204.47 1940.71,1204.47 1941.29,1204.47 1941.88,1204.47 1942.46,1204.47 1943.05,1204.47 1943.64,1204.47 1944.22,1204.47 1944.81,1204.47 1945.4,1204.47 1945.98,1204.47 1946.57,1204.47 1947.16,1204.47 1947.74,1204.47 1948.33,1204.47 1948.91,1204.47 1949.5,1204.47 1950.09,1204.47 1950.67,1204.47 1951.26,1204.47 1951.85,1204.47 1952.43,1204.47 1953.02,1204.47 1953.61,1204.47 1954.19,1204.47 1954.78,1204.47 1955.37,1204.47 1955.95,1204.47 1956.54,1204.47 1957.12,1204.47 1957.71,1204.47 1958.3,1204.47 1958.88,1204.47 1959.47,1204.47 1960.06,1204.47 1960.64,1204.47 1961.23,1204.47 1961.82,1204.47 1962.4,1204.47 1962.99,1204.47 1963.58,1204.47 1964.16,1204.47 1964.75,1204.47 1965.33,1204.47 1965.92,1204.47 1966.51,1204.47 1967.09,1204.47 1967.68,1204.47 1968.27,1204.47 1968.85,1204.47 1969.44,1204.47 1970.03,1204.47 1970.61,1204.47 1971.2,1204.47 1971.78,1204.47 1972.37,1204.47 1972.96,1204.47 1973.54,1204.47 1974.13,1204.47 1974.72,1204.47 1975.3,1204.47 1975.89,1204.47 1976.48,1204.47 1977.06,1204.47 1977.65,1204.47 1978.24,1204.47 1978.82,1204.47 1979.41,1204.47 1979.99,1204.47 1980.58,1204.47 1981.17,1204.47 1981.75,1204.47 1982.34,1204.47 1982.93,1204.47 1983.51,1204.47 1984.1,1204.47 1984.69,1204.47 1985.27,1204.47 1985.86,1204.47 1986.45,1204.47 1987.03,1204.47 1987.62,1204.47 1988.2,1204.47 1988.79,1204.47 1989.38,1204.47 1989.96,1204.47 1990.55,1204.47 1991.14,1204.47 1991.72,1204.47 1992.31,1204.47 1992.9,1204.47 1993.48,1204.47 1994.07,1204.47 1994.65,1204.47 1995.24,1204.47 1995.83,1204.47 1996.41,1204.47 1997,1204.47 1997.59,1204.47 1998.17,1204.47 1998.76,1204.47 1999.35,1204.47 1999.93,1204.47 2000.52,1204.47 2001.11,1204.47 2001.69,1204.47 2002.28,1204.47 2002.86,1204.47 2003.45,1204.47 2004.04,1204.47 2004.62,1204.47 2005.21,1204.47 2005.8,1204.47 2006.38,1204.47 2006.97,1204.47 2007.56,1204.47 2008.14,1204.47 2008.73,1204.47 2009.32,1204.47 2009.9,1204.47 2010.49,1204.47 2011.07,1204.47 2011.66,1204.47 2012.25,1204.47 2012.83,1204.47 2013.42,1204.47 2014.01,1204.47 2014.59,1204.47 2015.18,1204.47 2015.77,1204.47 2016.35,1204.47 2016.94,1204.47 2017.53,1204.47 2018.11,1204.47 2018.7,1204.47 2019.28,1204.47 2019.87,1204.47 2020.46,1204.47 2021.04,1204.47 2021.63,1204.47 2022.22,1204.47 2022.8,1204.47 2023.39,1204.47 2023.98,1204.47 2024.56,1204.47 2025.15,1204.47 2025.73,1204.47 2026.32,1204.47 2026.91,1204.47 2027.49,1204.47 2028.08,1204.47 2028.67,1204.47 2029.25,1204.47 2029.84,1204.47 2030.43,1204.47 2031.01,1204.47 2031.6,1204.47 2032.19,1204.47 2032.77,1204.47 2033.36,1204.47 2033.94,1204.47 2034.53,1204.47 2035.12,1204.47 2035.7,1204.47 2036.29,1204.47 2036.88,1204.47 2037.46,1204.47 2038.05,1204.47 2038.64,1204.47 2039.22,1204.47 2039.81,1204.47 2040.4,1204.47 2040.98,1204.47 2041.57,1204.47 2042.15,1204.47 2042.74,1204.47 2043.33,1204.47 2043.91,1204.47 2044.5,1204.47 2045.09,1204.47 2045.67,1204.47 2046.26,1204.47 2046.85,1204.47 2047.43,1204.47 2048.02,1204.47 2048.6,1204.47 2049.19,1204.47 2049.78,1204.47 2050.36,1204.47 2050.95,1204.47 2051.54,1204.47 2052.12,1204.47 2052.71,1204.47 2053.3,1204.47 2053.88,1204.47 2054.47,1204.47 2055.06,1204.47 2055.64,1204.47 2056.23,1204.47 2056.81,1204.47 2057.4,1204.47 2057.99,1204.47 2058.57,1204.47 2059.16,1204.47 2059.75,1204.47 2060.33,1204.47 2060.92,1204.47 2061.51,1204.47 2062.09,1204.47 2062.68,1204.47 2063.27,1204.47 2063.85,1204.47 2064.44,1204.47 2065.02,1204.47 2065.61,1204.47 2066.2,1204.47 2066.78,1204.47 2067.37,1204.47 2067.96,1204.47 2068.54,1204.47 2069.13,1204.47 2069.72,1204.47 2070.3,1204.47 2070.89,1204.47 2071.48,1204.47 2072.06,1204.47 2072.65,1204.47 2073.23,1204.47 2073.82,1204.47 2074.41,1204.47 2074.99,1204.47 2075.58,1204.47 2076.17,1204.47 2076.75,1204.47 2077.34,1204.47 2077.93,1204.47 2078.51,1204.47 2079.1,1204.47 2079.68,1204.47 2080.27,1204.47 2080.86,1204.47 2081.44,1204.47 2082.03,1204.47 2082.62,1204.47 2083.2,1204.47 2083.79,1204.47 2084.38,1204.47 2084.96,1204.47 2085.55,1204.47 2086.14,1204.47 2086.72,1204.47 2087.31,1204.47 2087.89,1204.47 2088.48,1204.47 2089.07,1204.47 2089.65,1204.47 2090.24,1204.47 2090.83,1204.47 2091.41,1204.47 2092,1204.47 2092.59,1204.47 2093.17,1204.47 2093.76,1204.47 2094.35,1204.47 2094.93,1204.47 2095.52,1204.47 2096.1,1204.47 2096.69,1204.47 2097.28,1204.47 2097.86,1204.47 2098.45,1204.47 2099.04,1204.47 2099.62,1204.47 2100.21,1204.47 2100.8,1204.47 2101.38,1204.47 2101.97,1204.47 2102.55,1204.47 2103.14,1204.47 2103.73,1204.47 2104.31,1204.47 2104.9,1204.47 2105.49,1204.47 2106.07,1204.47 2106.66,1204.47 2107.25,1204.47 2107.83,1204.47 2108.42,1204.47 2109.01,1204.47 2109.59,1204.47 2110.18,1204.47 2110.76,1204.47 2111.35,1204.47 2111.94,1204.47 2112.52,1204.47 2113.11,1204.47 2113.7,1204.47 2114.28,1204.47 2114.87,1204.47 2115.46,1204.47 2116.04,1204.47 2116.63,1204.47 2117.22,1204.47 2117.8,1204.47 2118.39,1204.47 2118.97,1204.47 2119.56,1204.47 2120.15,1204.47 2120.73,1204.47 2121.32,1204.47 2121.91,1204.47 2122.49,1204.47 2123.08,1204.47 2123.67,1204.47 2124.25,1204.47 2124.84,1204.47 2125.42,1204.47 2126.01,1204.47 2126.6,1204.47 2127.18,1204.47 2127.77,1204.47 2128.36,1204.47 2128.94,1204.47 2129.53,1204.47 2130.12,1204.47 2130.7,1204.47 2131.29,1204.47 2131.88,1204.47 2132.46,1204.47 2133.05,1204.47 2133.63,1204.47 2134.22,1204.47 2134.81,1204.47 2135.39,1204.47 2135.98,1204.47 2136.57,1204.47 2137.15,1204.47 2137.74,1204.47 2138.33,1204.47 2138.91,1204.47 2139.5,1204.47 2140.09,1204.47 2140.67,1204.47 2141.26,1204.47 2141.84,1204.47 2142.43,1204.47 2143.02,1204.47 2143.6,1204.47 2144.19,1204.47 2144.78,1204.47 2145.36,1204.47 2145.95,1204.47 2146.54,1204.47 2147.12,1204.47 2147.71,1204.47 2148.3,1204.47 2148.88,1204.47 2149.47,1204.47 2150.05,1204.47 2150.64,1204.47 2151.23,1204.47 2151.81,1204.47 2152.4,1204.47 2152.99,1204.47 2153.57,1204.47 2154.16,1204.47 2154.75,1204.47 2155.33,1204.47 2155.92,1204.47 2156.5,1204.47 2157.09,1204.47 2157.68,1204.47 2158.26,1204.47 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1560.78,1184.39 1401.17,899.083 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1223.99 985.439,1184.39 2158.26,1184.39 2158.26,1223.99 985.439,1223.99 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip160)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip160)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip163\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip163)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1431.46 162.114,-1341.37 162.673,-2592.54 163.232,-2526.27 163.792,-3661.7 164.351,-4701.78 164.91,-5673.28 165.469,-6580.45 166.029,-7390.77 166.588,-8126.36 167.147,-7809.29 167.706,-7570.22 168.266,-8187.91 168.825,-8745.03 169.384,-9233.76 169.943,-9681.86 170.503,-9413.7 171.062,-9809.99 171.621,-9563.07 172.18,-9889.04 172.74,-10181.9 173.299,-9477.45 173.858,-9306.97 174.417,-9570.94 174.977,-9772.27 175.536,-9943.52 176.095,-10092.9 176.655,-9882.01 177.214,-10010.2 177.773,-10110 178.332,-10181.6 178.892,-9973.45 179.451,-9769.94 180.01,-9786.36 180.569,-9793.13 181.129,-9584.47 181.688,-9571.23 182.247,-9543.22 182.806,-9507.45 183.366,-9452.01 183.925,-8910.68 184.484,-8849.8 185.043,-8352.47 185.603,-8302.69 186.162,-8230.33 186.721,-8045.39 187.28,-7964.73 187.84,-7861.6 188.399,-7657.87 188.958,-7369.16 189.517,-7282.04 190.077,-6999.32 190.636,-6641.27 191.195,-6474.16 191.754,-6304.67 192.314,-6140.91 192.873,-6065.93 193.432,-5985.42 193.991,-5824.3 194.551,-5598.21 195.11,-5382.18 195.669,-5177.07 196.228,-5085.75 196.788,-4937.08 197.347,-4794 197.906,-4661.62 198.465,-4579.18 199.025,-4491.76 199.584,-4252.87 200.143,-4122.22 200.702,-4040.69 201.262,-3872.91 201.821,-3666.78 202.38,-3553.88 202.939,-3441.28 203.499,-3248.62 204.058,-3137.04 204.617,-3060.82 205.176,-2950.5 205.736,-2848.28 206.295,-2743.62 206.854,-2608.34 207.413,-2508.57 207.973,-2414.21 208.532,-2221.75 209.091,-2132.99 209.65,-1986.28 210.21,-1874.19 210.769,-1820.81 211.328,-1770.85 211.887,-1689.96 212.447,-1607.68 213.006,-1529.53 213.565,-1454.04 214.124,-1354.73 214.684,-1286.77 215.243,-1247.99 215.802,-1201.3 216.361,-1156.02 216.921,-1057.2 217.48,-961.796 218.039,-847.873 218.598,-811.892 219.158,-652.885 219.717,-571.4 220.276,-541.445 220.835,-463.308 221.395,-457.641 221.954,-404.747 222.513,-356.356 223.072,-288.903 223.632,-199.147 224.191,-154.868 224.75,-136.591 225.309,-96.1188 225.869,-60.0932 226.428,-25.9982 226.987,12.567 227.546,31.7117 228.106,24.7057 228.665,102.722 229.224,121.769 229.783,120.663 230.343,157.04 230.902,214.038 231.461,228.539 232.02,261.938 232.58,292.523 233.139,306.434 233.698,358.706 234.257,372.944 234.817,405.838 235.376,417.436 235.935,445.713 236.494,491.827 237.054,502.644 237.613,490.62 238.172,498.458 238.731,580.831 239.291,609.57 239.85,631.403 240.409,691.529 240.968,730.891 241.528,784.159 242.087,798.568 242.646,779.193 243.205,811.377 243.765,843.13 244.324,858.12 244.883,870.753 245.442,882.884 246.002,877.017 246.561,872.616 247.12,888.469 247.679,883.761 248.239,883.513 248.798,879.298 249.357,908.477 249.916,923.247 250.476,936.36 251.035,929.71 251.594,964.342 252.153,974.691 252.713,935.459 253.272,965.715 253.831,974.707 254.39,967.686 254.95,995.807 255.509,972.861 256.068,988.98 256.627,1017.28 257.187,1012.01 257.746,1002.71 258.305,1045.21 258.864,1037.28 259.424,1026.29 259.983,999.757 260.542,1009.75 261.101,1035.62 261.661,994.276 262.22,988.141 262.779,1001.01 263.338,1014.55 263.898,1005.6 264.457,1018.32 265.016,1025.25 265.575,1032.04 266.135,1041.02 266.694,1033.66 267.253,1040.94 267.812,1031.79 268.372,1025.36 268.931,1052.13 269.49,1061.58 270.049,1035.37 270.609,1031.68 271.168,1059.71 271.727,1032.32 272.286,1009.68 272.846,1002.83 273.405,1012.61 273.964,1009.06 274.523,1035.13 275.083,1038.17 275.642,1012.77 276.201,1020.74 276.76,1031.6 277.32,1026.24 277.879,1051.99 278.438,1059.95 278.997,1084.91 279.557,1072.34 280.116,1113.8 280.675,1186.24 281.234,1170.97 281.794,1191.95 282.353,1176.51 282.912,1160.79 283.471,1162.33 284.031,1180.46 284.59,1166.8 285.149,1153.04 285.708,1139.33 286.268,1125.9 286.827,1111.5 287.386,1121.49 287.945,1044.47 288.505,1022.02 289.064,1031.99 289.623,991.062 290.182,1023.64 290.742,984.217 291.301,941.545 291.86,989.661 292.419,1004.96 292.979,999.039 293.538,992.184 294.097,1016.45 294.656,1027.29 295.216,1024.78 295.775,1015.52 296.334,990.577 296.893,1071.06 297.453,1045.52 298.012,1005.88 298.571,999.288 299.13,996.224 299.69,1006.47 300.249,967.064 300.808,977.079 301.368,970.165 301.927,948.587 302.486,962.733 303.045,976.822 303.605,970.019 304.164,968.683 304.723,997.395 305.282,1009.47 305.842,975.584 306.401,983.852 306.96,964.218 307.519,993.122 308.079,1019.84 308.638,1012.61 309.197,1022.71 309.756,1031.31 310.316,1054.87 310.875,1077.37 311.434,1084.43 311.993,1072.34 312.553,1030.24 313.112,1038.85 313.671,1013.96 314.23,1057 314.79,1066.65 315.349,1036.84 315.908,1058.22 316.467,1045.23 317.027,1053.65 317.586,1060.08 318.145,1029.97 318.704,1018.76 319.264,1011.41 319.823,968.733 320.382,977.804 320.941,987.51 321.501,980.44 322.06,957.168 322.619,965.634 323.178,1010.49 323.738,1000.25 324.297,959.272 324.856,968.278 325.415,998.299 325.975,977.327 326.534,988.968 327.093,931.122 327.652,930.835 328.212,927.038 328.771,907.367 329.33,921.075 329.889,966.014 330.449,957.418 331.008,986.286 331.567,960.6 332.126,969.97 332.686,962.495 333.245,940.488 333.804,948.116 334.363,972.368 334.923,997.537 335.482,976.483 336.041,984.504 336.6,976.741 337.16,955.443 337.719,913.505 338.278,907.632 338.837,938.797 339.397,931.572 339.956,958.024 340.515,933.148 341.074,910.267 341.634,903.615 342.193,915.654 342.752,894.556 343.311,891.334 343.871,852.57 344.43,832.303 344.989,798.272 345.548,782.177 346.108,783.333 346.667,832.555 347.226,864.324 347.785,861.551 348.345,862.442 348.904,861.952 349.463,892.397 350.022,837.966 350.582,837.002 351.141,802.312 351.7,800.26 352.259,833.066 352.819,813.818 353.378,831.827 353.937,830.457 354.496,828.72 355.056,842.95 355.615,828.303 356.174,845.901 356.733,826.022 357.293,810.016 357.852,826.877 358.411,791.335 358.97,813.652 359.53,831.539 360.089,834.275 360.648,817.223 361.207,836.667 361.767,854.188 362.326,851.194 362.885,832.141 363.444,814.767 364.004,846.61 364.563,848.516 365.122,859.856 365.681,876.02 366.241,888.063 366.8,896.783 367.359,891.108 367.918,855.432 368.478,834.982 369.037,849.198 369.596,859.516 370.155,823.343 370.715,821.711 371.274,848.199 371.833,830.608 372.392,811.613 372.952,813.991 373.511,812.64 374.07,813.684 374.629,809.671 375.189,810.179 375.748,809.292 376.307,824.004 376.866,836.23 377.426,837.006 377.985,848.51 378.544,877.328 379.103,906.807 379.663,884.399 380.222,880.452 380.781,908.976 381.34,904.521 381.9,867.61 382.459,845.823 383.018,875.514 383.577,851.649 384.137,815.955 384.696,830.001 385.255,861.63 385.814,873.054 386.374,906.334 386.933,918.123 387.492,927.176 388.051,919.773 388.611,864.045 389.17,858.014 389.729,871.507 390.288,915.083 390.848,894.679 391.407,900.543 391.966,895.851 392.525,870.944 393.085,898.367 393.644,859.885 394.203,851.676 394.762,829.507 395.322,807.247 395.881,807.957 396.44,825.287 396.999,839.058 397.559,800.675 398.118,766.8 398.677,783.022 399.236,781.187 399.796,765.515 400.355,764.098 400.914,796.359 401.473,813.59 402.033,846.245 402.592,825.616 403.151,840.502 403.71,820.904 404.27,802.516 404.829,802.821 405.388,816.065 405.947,830.556 406.507,825.319 407.066,871.759 407.625,866.941 408.184,893.176 408.744,886.196 409.303,897.746 409.862,889.104 410.421,884.71 410.981,866.854 411.54,846.593 412.099,859.781 412.658,855.391 413.218,785.123 413.777,819.262 414.336,815.909 414.895,813.384 415.455,812.506 416.014,824.13 416.573,819.994 417.132,803.083 417.692,801.475 418.251,784.89 418.81,768.375 419.369,766.091 419.929,731.163 420.488,736.779 421.047,733.783 421.606,736.419 422.166,753.539 422.725,756.249 423.284,757.277 423.843,775.629 424.403,776.568 424.962,778.551 425.521,781.512 426.08,796.807 426.64,779.783 427.199,780.201 427.758,766.118 428.318,715.149 428.877,718.918 429.436,720.715 429.995,738.998 430.555,738.897 431.114,719.185 431.673,721.772 432.232,739.115 432.792,800.857 433.351,815.044 433.91,779.289 434.469,776.764 435.029,771.461 435.588,755.573 436.147,772.759 436.706,774.208 437.266,773.958 437.825,772.855 438.384,775.601 438.943,761.159 439.503,809.53 440.062,805.727 440.621,805.517 441.18,821.057 441.74,832.725 442.299,811.196 442.858,805.258 443.417,804.369 443.977,788.216 444.536,785.387 445.095,798.075 445.654,796.483 446.214,779.833 446.773,778.674 447.332,790.962 447.891,806.012 448.451,786.257 449.01,768.592 449.569,798.896 450.128,765.38 450.688,781.638 451.247,796.683 451.806,826.495 452.365,855.613 452.925,851.617 453.484,858.087 454.043,881.786 454.602,859.388 455.162,856.106 455.721,882.535 456.28,892.13 456.839,879.449 457.399,846.593 457.958,825.892 458.517,819.49 459.076,802.049 459.636,787.806 460.195,771.038 460.754,834.74 461.313,814.343 461.873,811.563 462.432,792.983 462.991,789.684 463.55,756.753 464.11,693.768 464.669,682.607 465.228,685.26 465.787,704.677 466.347,704.091 466.906,709.88 467.465,711.824 468.024,682.059 468.584,685.611 469.143,671.29 469.702,707.983 470.261,694.996 470.821,713.184 471.38,733.807 471.939,719.874 472.498,724.802 473.058,709.679 473.617,761.251 474.176,728.918 474.735,745.904 475.295,759.809 475.854,758.305 476.413,758.026 476.972,725.078 477.532,742.448 478.091,710.732 478.65,744.6 479.209,741.956 479.769,772.063 480.328,786.149 480.887,816.02 481.446,795.08 482.006,827.814 482.565,841.19 483.124,849.859 483.683,811.48 484.243,790.882 484.802,836.824 485.361,828.791 485.92,820.523 486.48,813.271 487.039,777.107 487.598,773.713 488.157,785.986 488.717,767.813 489.276,795.998 489.835,776.847 490.394,792.929 490.954,759.447 491.513,723.63 492.072,710.47 492.631,699.972 493.191,705.483 493.75,689.938 494.309,711.483 494.868,709.079 495.428,725.834 495.987,742.276 496.546,772.791 497.105,801.749 497.665,809.16 498.224,773.77 498.783,785.11 499.342,815.118 499.902,858.515 500.461,865.236 501.02,844.501 501.579,853.75 502.139,832.033 502.698,831.302 503.257,790.103 503.816,719.792 504.376,719.506 504.935,702.195 505.494,683.348 506.053,716.837 506.613,731.475 507.172,697.144 507.731,726.961 508.29,675.296 508.85,679.263 509.409,664.995 509.968,651.193 510.527,653.839 511.087,707.809 511.646,708.103 512.205,709.863 512.764,675.279 513.324,676.176 513.883,657.4 514.442,692.175 515.001,710.152 515.561,693.152 516.12,678.58 516.679,669.054 517.238,719.291 517.798,749.091 518.357,717.368 518.916,717.391 519.475,733.261 520.035,730.95 520.594,729.467 521.153,730.232 521.712,713.012 522.272,713.694 522.831,694.458 523.39,714.872 523.949,715.234 524.509,763.274 525.068,747.062 525.627,761.368 526.186,723.885 526.746,739.65 527.305,723.195 527.864,690.474 528.423,708.222 528.983,705.942 529.542,740.558 530.101,743.007 530.66,725.98 531.22,709.959 531.779,693.904 532.338,662.069 532.897,648.886 533.457,649.262 534.016,653.916 534.575,643.208 535.134,664.491 535.694,686.463 536.253,704.908 536.812,709.894 537.371,712.121 537.931,727.397 538.49,709.741 539.049,710.326 539.608,743.891 540.168,757.121 540.727,720.642 541.286,720.91 541.845,737.492 542.405,738.157 542.964,739.092 543.523,738.02 544.082,688.888 544.642,692.824 545.201,707.339 545.76,755.501 546.319,785.446 546.879,796.575 547.438,793.241 547.997,790.584 548.556,789.836 549.116,787.234 549.675,782.089 550.234,792.947 550.793,771.795 551.353,766.235 551.912,765.471 552.471,792.161 553.031,819.525 553.59,831.735 554.149,845.695 554.708,838.408 555.268,831.714 555.827,805.95 556.386,836.537 556.945,845.018 557.505,807.04 558.064,767.207 558.623,783.721 559.182,745.953 559.742,763.775 560.301,791.9 560.86,803.47 561.419,782.468 561.979,761.114 562.538,760.929 563.097,757.372 563.656,771.771 564.216,736.966 564.775,718.218 565.334,718.574 565.893,683.568 566.453,700.948 567.012,748.212 567.571,743.428 568.13,774.174 568.69,802.451 569.249,731.654 569.808,764.068 570.367,729.022 570.927,711.732 571.486,713.336 572.045,711.915 572.604,711.077 573.164,742.85 573.723,739.137 574.282,738.818 574.841,770.604 575.401,767.257 575.96,775.098 576.519,756.013 577.078,738.434 577.638,748.185 578.197,759.754 578.756,743.12 579.315,727.25 579.875,711.922 580.434,693.502 580.993,711.034 581.552,676.935 582.112,662.743 582.671,698.627 583.23,668.445 583.789,639.19 584.349,637.484 584.908,640.096 585.467,675.725 586.026,695.97 586.586,661.988 587.145,646.172 587.704,634.508 588.263,655.61 588.823,610.939 589.382,614.27 589.941,613.736 590.5,634.682 591.06,640.73 591.619,628.357 592.178,601.427 592.737,638.582 593.297,627.129 593.856,597.113 594.415,618.409 594.974,619.952 595.534,607.405 596.093,598.664 596.652,588.934 597.211,596.044 597.771,622.597 598.33,626.571 598.889,631.555 599.448,573.344 600.008,580.826 600.567,586.67 601.126,625.04 601.685,627.5 602.245,680.747 602.804,635.044 603.363,652.737 603.922,718.653 604.482,718.372 605.041,715.04 605.6,735.355 606.159,747.195 606.719,730.87 607.278,744.801 607.837,724.971 608.396,709.349 608.956,686.44 609.515,673.618 610.074,670.574 610.633,690.404 611.193,673.526 611.752,655.862 612.311,625.504 612.87,613.555 613.43,648.251 613.989,633.654 614.548,718.728 615.107,703.658 615.667,689.472 616.226,674.045 616.785,659.696 617.344,678.927 617.904,681.557 618.463,676.964 619.022,660.838 619.581,663.837 620.141,663.092 620.7,649.325 621.259,633.45 621.818,619.075 622.378,608.423 622.937,616.571 623.496,639.045 624.055,658.745 624.615,674.175 625.174,693.838 625.733,709.137 626.292,723.99 626.852,707.232 627.411,676.322 627.97,677.151 628.529,678.073 629.089,709.534 629.648,708 630.207,724.419 630.766,720.601 631.326,717.551 631.885,685.217 632.444,667.653 633.003,619.945 633.563,624.458 634.122,613.78 634.681,635.912 635.24,655.51 635.8,625.769 636.359,631.231 636.918,684.481 637.477,715.482 638.037,745.404 638.596,760.703 639.155,757.27 639.714,737.334 640.274,723.399 640.833,734.901 641.392,717.319 641.951,747.959 642.511,763.843 643.07,728.57 643.629,744.83 644.188,774.278 644.748,752.113 645.307,780.28 645.866,756.855 646.425,771.263 646.985,764.809 647.544,728.728 648.103,713.329 648.662,727.785 649.222,725.842 649.781,742.613 650.34,727.635 650.899,725.9 651.459,744.508 652.018,726.106 652.577,742.357 653.136,707.094 653.696,723.124 654.255,725.604 654.814,727.51 655.373,760.066 655.933,757.493 656.492,802.208 657.051,812.422 657.61,788.283 658.17,768.616 658.729,763.582 659.288,805.506 659.847,801.368 660.407,793.261 660.966,790.806 661.525,818.003 662.084,811.863 662.644,807.736 663.203,806.383 663.762,802.584 664.321,781.629 664.881,777.504 665.44,821.726 665.999,796.122 666.558,771.557 667.118,702.631 667.677,670.183 668.236,685.711 668.795,698.913 669.355,729.62 669.914,727.129 670.473,744.626 671.032,739.947 671.592,724.124 672.151,721.915 672.71,738.476 673.269,701.197 673.829,716.737 674.388,699.199 674.947,729.32 675.506,760.313 676.066,773.675 676.625,816.277 677.184,822.972 677.743,813.734 678.303,806.344 678.862,767.167 679.421,713.61 679.981,708.032 680.54,705.974 681.099,724.08 681.658,703.929 682.218,720.368 682.777,736.382 683.336,733.602 683.895,699.254 684.455,647.313 685.014,631.3 685.573,631.174 686.132,668.609 686.692,654.326 687.251,660.508 687.81,680.761 688.369,679.891 688.929,649.32 689.488,634.835 690.047,656.748 690.606,673.796 691.166,706.751 691.725,688.284 692.284,722.124 692.843,721.561 693.403,734.792 693.962,704.269 694.521,689.306 695.08,672.065 695.64,690.017 696.199,672.451 696.758,657.31 697.317,674.184 697.877,724.687 698.436,737.469 698.995,752.003 699.554,749.793 700.114,746.51 700.673,744.255 701.232,755.111 701.791,752.508 702.351,717.807 702.91,716.134 703.469,729.637 704.028,712.16 704.588,725.551 705.147,754.096 705.706,685.03 706.265,685.272 706.825,651.769 707.384,688.043 707.943,673.814 708.502,675.349 709.062,627.925 709.621,599.815 710.18,620.54 710.739,608.121 711.299,610.825 711.858,634.405 712.417,621.525 712.976,642.586 713.536,613.898 714.095,601.293 714.654,559.056 715.213,550.828 715.773,576.208 716.332,583.476 716.891,571.526 717.45,593.761 718.01,629.529 718.569,637.624 719.128,643.161 719.687,648.506 720.247,684.578 720.806,636.046 721.365,624.824 721.924,628.704 722.484,618.714 723.043,655.659 723.602,673.02 724.161,687.734 724.721,706.488 725.28,708.915 725.839,678.084 726.398,679.026 726.958,681.94 727.517,715.366 728.076,746.082 728.635,725.913 729.195,738.549 729.754,731.986 730.313,727.583 730.872,776.572 731.432,756.208 731.991,721.28 732.55,656.117 733.109,675.179 733.669,692.415 734.228,678.814 734.787,709.855 735.346,710.162 735.906,660.683 736.465,660.714 737.024,643.863 737.583,647.097 738.143,649.099 738.702,651.494 739.261,621.056 739.82,642.508 740.38,628.952 740.939,648.601 741.498,699.913 742.057,700.47 742.617,697.37 743.176,727.731 743.735,742.602 744.294,754.703 744.854,752.395 745.413,778.978 745.972,805.777 746.531,765.95 747.091,744.912 747.65,724.918 748.209,737.496 748.768,700.866 749.328,699.29 749.887,730.971 750.446,730.207 751.005,692.026 751.565,691.528 752.124,659.183 752.683,659.925 753.242,641.83 753.802,627.492 754.361,663.217 754.92,650.691 755.479,669.269 756.039,704.967 756.598,705.162 757.157,721.094 757.716,686.979 758.276,700.402 758.835,701.607 759.394,701.261 759.953,703.255 760.513,702.21 761.072,704.414 761.631,702.12 762.19,700.299 762.75,733.821 763.309,730.285 763.868,745.456 764.427,738.938 764.987,737.925 765.546,755.276 766.105,752.365 766.664,765.122 767.224,766.702 767.783,763.979 768.342,775.289 768.901,769.561 769.461,799.631 770.02,807.459 770.579,784.681 771.138,795.309 771.698,758.065 772.257,755.313 772.816,748.942 773.375,715.929 773.935,732.071 774.494,749.84 775.053,745.091 775.612,740.525 776.172,735.754 776.731,732.589 777.29,732.003 777.849,730.338 778.409,712.369 778.968,663.873 779.527,698.346 780.086,694.445 780.646,696.841 781.205,696.18 781.764,697.38 782.323,713.216 782.883,714.787 783.442,703.111 784.001,737.217 784.56,735.228 785.12,732.071 785.679,728.434 786.238,723.549 786.797,721.73 787.357,735.003 787.916,731.517 788.475,713.989 789.034,731.336 789.594,747.842 790.153,697.316 790.712,728.576 791.271,728.679 791.831,726.265 792.39,728.306 792.949,679.274 793.508,649.01 794.068,684.572 794.627,700.055 795.186,734.586 795.745,749.054 796.305,741.998 796.864,738.417 797.423,768.345 797.982,730.985 798.542,664.027 799.101,635.24 799.66,655.433 800.219,672.814 800.779,658.761 801.338,693.185 801.897,692.15 802.456,689.587 803.016,689.466 803.575,718.214 804.134,715.509 804.693,710.838 805.253,726.775 805.812,721.908 806.371,766.686 806.931,710.358 807.49,682.552 808.049,683.245 808.608,684.999 809.168,668.518 809.727,668.87 810.286,653.351 810.845,672.591 811.405,623.04 811.964,641.054 812.523,656.448 813.082,690.486 813.642,704.298 814.201,717.914 814.76,685.557 815.319,717.573 815.879,702.548 816.438,703.32 816.997,721.921 817.556,671.53 818.116,690.471 818.675,658.074 819.234,661.377 819.793,664.057 820.353,679.323 820.912,664.193 821.471,698.807 822.03,664.583 822.59,651.549 823.149,671.964 823.708,692.696 824.267,677.67 824.827,694.455 825.386,615.678 825.945,617.567 826.504,589.345 827.064,614.516 827.623,651.727 828.182,638.844 828.741,657.793 829.301,658.825 829.86,676.126 830.419,661.472 830.978,645.453 831.538,632.301 832.097,633.903 832.656,669.81 833.215,686.249 833.775,653.763 834.334,634.779 834.893,649.2 835.452,618.412 836.012,623.777 836.571,642.644 837.13,645.769 837.689,629.121 838.249,633.583 838.808,618.444 839.367,609.524 839.926,598.056 840.486,570.2 841.045,578.593 841.604,598.834 842.163,604.063 842.723,590.603 843.282,607.547 843.841,596.652 844.4,604.968 844.96,644.601 845.519,631.986 846.078,648.311 846.637,619.432 847.197,593.612 847.756,630.6 848.315,619.889 848.874,639.71 849.434,626.563 849.993,600.639 850.552,586.806 851.111,594.276 851.671,580.457 852.23,555.21 852.789,580.194 853.348,573.425 853.908,579.296 854.467,569.333 855.026,594.793 855.585,603.131 856.145,619.765 856.704,609.523 857.263,631.77 857.822,636.139 858.382,623.634 858.941,644.7 859.5,665.114 860.059,697.426 860.619,747.315 861.178,759.228 861.737,738.417 862.296,738.841 862.856,753.997 863.415,737.536 863.974,716.622 864.533,731.094 865.093,729.623 865.652,727.924 866.211,773.883 866.77,723.315 867.33,706.872 867.889,720.119 868.448,723.046 869.007,722.678 869.567,721.724 870.126,722.608 870.685,737.188 871.244,685.57 871.804,651.165 872.363,653.263 872.922,653.333 873.481,655.425 874.041,658.996 874.6,657.457 875.159,642.459 875.718,640.029 876.278,641.472 876.837,608.823 877.396,600.367 877.955,626.771 878.515,646.067 879.074,667.799 879.633,696.479 880.192,712.342 880.752,728.04 881.311,756.751 881.87,754.17 882.429,767.344 882.989,731.014 883.548,697.637 884.107,711.47 884.666,694.396 885.226,729.164 885.785,707.568 886.344,690.007 886.903,706.193 887.463,722.061 888.022,737.911 888.581,734.686 889.14,748.077 889.7,730.777 890.259,727.111 890.818,758.716 891.377,707.311 891.937,690.808 892.496,675.936 893.055,655.257 893.614,655.754 894.174,642.123 894.733,645.354 895.292,635.589 895.851,624.175 896.411,563.781 896.97,602.369 897.529,592.682 898.088,581.165 898.648,622.81 899.207,627.157 899.766,611.667 900.325,615.941 900.885,650.345 901.444,654.93 902.003,671.142 902.562,672.797 903.122,706.39 903.681,705.479 904.24,673.749 904.799,645.711 905.359,663.48 905.918,667.758 906.477,700.751 907.036,700.368 907.596,715.531 908.155,697.182 908.714,713.525 909.273,744.576 909.833,726.428 910.392,741.27 910.951,706.189 911.51,690.148 912.07,705.767 912.629,703 913.188,700.559 913.747,700.361 914.307,715.268 914.866,744.915 915.425,758.021 915.984,801.559 916.544,779.729 917.103,805.473 917.662,811.367 918.221,790.523 918.781,753.426 919.34,766.354 919.899,743.749 920.458,726.275 921.018,710.866 921.577,662.134 922.136,643.836 922.695,647.772 923.255,665.056 923.814,684.773 924.373,701.016 924.932,682.285 925.492,646.16 926.051,663.425 926.61,647.93 927.169,632.521 927.729,665.719 928.288,653.004 928.847,688.211 929.406,635.864 929.966,592.468 930.525,611.55 931.084,652.03 931.644,638.11 932.203,637.989 932.762,660.404 933.321,691.949 933.881,691.8 934.44,688.984 934.999,719.799 935.558,747.318 936.118,744.63 936.677,740.483 937.236,738.494 937.795,735.642 938.355,717.811 938.914,719.598 939.473,748.749 940.032,728.028 940.592,708.83 941.151,723.329 941.71,687.091 942.269,701.765 942.829,702.65 943.388,735.51 943.947,735.129 944.506,733.645 945.066,733.927 945.625,731.255 946.184,680.439 946.743,713.387 947.303,697.171 947.862,698.306 948.421,663.136 948.98,680.451 949.54,694.877 950.099,692.516 950.658,674.334 951.217,643.544 951.777,615.655 952.336,600.914 952.895,572.967 953.454,577.417 954.014,583.375 954.573,606.318 955.132,629.926 955.691,664.492 956.251,664.213 956.81,667.205 957.369,667.712 957.928,685.836 958.488,703.537 959.047,682.875 959.606,701.52 960.165,699.444 960.725,701.402 961.284,700.545 961.843,682.538 962.402,665.564 962.962,681.469 963.521,697.894 964.08,664.287 964.639,699.296 965.199,692.902 965.758,711.276 966.317,696.302 966.876,708.131 967.436,707.331 967.995,707.106 968.554,703.979 969.113,669.881 969.673,687.529 970.232,686.766 970.791,655.55 971.35,691.557 971.91,693.839 972.469,677.314 973.028,722.434 973.587,717.289 974.147,696.111 974.706,678.105 975.265,677.734 975.824,662.949 976.384,666.663 976.943,697.62 977.502,698.669 978.061,728.875 978.621,729.142 979.18,744.16 979.739,742.416 980.298,755.223 980.858,751.187 981.417,728.586 981.976,741.123 982.535,734.995 983.095,747.018 983.654,744.185 984.213,724.887 984.772,708.748 985.332,705.974 985.891,688.057 986.45,674.553 987.009,657.59 987.569,672.204 988.128,692.145 988.687,674.09 989.246,692.026 989.806,663.143 990.365,669.1 990.924,653.683 991.483,654.128 992.043,638.517 992.602,641.322 993.161,642.027 993.72,657.862 994.28,656.895 994.839,658.7 995.398,644.03 995.957,646.763 996.517,666.788 997.076,669.811 997.635,689.634 998.194,704.164 998.754,670.089 999.313,688.339 999.872,703.281 1000.43,686.483 1000.99,723.107 1001.55,722.959 1002.11,706.888 1002.67,723.228 1003.23,739.279 1003.79,734.186 1004.35,717.516 1004.91,732.394 1005.46,743.531 1006.02,737.184 1006.58,750.744 1007.14,734.931 1007.7,685.653 1008.26,669.087 1008.82,636.15 1009.38,638.292 1009.94,640.806 1010.5,624.399 1011.06,640.944 1011.62,655.124 1012.18,672.432 1012.73,691.461 1013.29,722.019 1013.85,734.935 1014.41,796.894 1014.97,804.335 1015.53,781.169 1016.09,744.543 1016.65,741.538 1017.21,738.599 1017.77,751.911 1018.33,732.483 1018.89,714.931 1019.45,729.362 1020.01,728.29 1020.56,710.434 1021.12,695.874 1021.68,662.799 1022.24,646.613 1022.8,650.794 1023.36,636.873 1023.92,640.596 1024.48,642.092 1025.04,649.854 1025.6,653.102 1026.16,668.427 1026.72,685.592 1027.28,667.13 1027.83,664.177 1028.39,679.296 1028.95,695.747 1029.51,696.1 1030.07,761.111 1030.63,753.693 1031.19,699.709 1031.75,679.079 1032.31,664.537 1032.87,667.146 1033.43,680.1 1033.99,694.387 1034.55,677.826 1035.1,678.836 1035.66,663.672 1036.22,598.979 1036.78,602.939 1037.34,586.939 1037.9,593.511 1038.46,618.457 1039.02,639.426 1039.58,640.483 1040.14,659.886 1040.7,662.49 1041.26,645.981 1041.82,666.193 1042.38,666.142 1042.93,653.551 1043.49,636.851 1044.05,688.519 1044.61,673.431 1045.17,629.417 1045.73,650.15 1046.29,681.884 1046.85,679.078 1047.41,679.054 1047.97,664.198 1048.53,665.131 1049.09,700.86 1049.65,729.276 1050.2,711.677 1050.76,708.466 1051.32,678.76 1051.88,677.695 1052.44,628.514 1053,648.336 1053.56,634.88 1054.12,670.851 1054.68,653.276 1055.24,672.266 1055.8,686.527 1056.36,684.825 1056.92,698.085 1057.48,761.36 1058.03,759.705 1058.59,772.559 1059.15,766.161 1059.71,743.965 1060.27,773.394 1060.83,784.019 1061.39,744.285 1061.95,755.575 1062.51,748.665 1063.07,742.286 1063.63,735.454 1064.19,749.857 1064.75,731.474 1065.3,712.901 1065.86,679.875 1066.42,666.254 1066.98,701.936 1067.54,700.456 1068.1,702.543 1068.66,730.114 1069.22,728.066 1069.78,741.705 1070.34,768.814 1070.9,731.866 1071.46,711.974 1072.02,675.94 1072.57,694.234 1073.13,694.041 1073.69,696.271 1074.25,679.823 1074.81,696.328 1075.37,711.822 1075.93,692.838 1076.49,687.85 1077.05,640.902 1077.61,646.874 1078.17,696.404 1078.73,678.248 1079.29,676.176 1079.85,675.996 1080.4,675.893 1080.96,674.991 1081.52,674.7 1082.08,690.986 1082.64,661.112 1083.2,678.847 1083.76,694.632 1084.32,693.873 1084.88,712.992 1085.44,693.094 1086,711.662 1086.56,724.648 1087.12,721.829 1087.67,720.795 1088.23,720.312 1088.79,749.117 1089.35,713.264 1089.91,713.883 1090.47,712.029 1091.03,692.426 1091.59,707.926 1092.15,720.939 1092.71,702.403 1093.27,682.369 1093.83,667.079 1094.39,666.502 1094.94,667.21 1095.5,682.198 1096.06,666.016 1096.62,663.614 1097.18,696.377 1097.74,681.079 1098.3,680.587 1098.86,680.108 1099.42,695.592 1099.98,696.072 1100.54,712.568 1101.1,761.97 1101.66,773.921 1102.22,751.727 1102.77,733.334 1103.33,696.669 1103.89,741.404 1104.45,722.266 1105.01,720.712 1105.57,718.337 1106.13,764.284 1106.69,728.88 1107.25,721.741 1107.81,752.348 1108.37,746.945 1108.93,710.12 1109.49,691.703 1110.04,695.397 1110.6,677.324 1111.16,662.51 1111.72,680.757 1112.28,629.65 1112.84,633.529 1113.4,618.31 1113.96,638.521 1114.52,626.631 1115.08,648.988 1115.64,669.015 1116.2,658.739 1116.76,626.386 1117.31,597.478 1117.87,617.813 1118.43,620.138 1118.99,623.618 1119.55,613 1120.11,635.856 1120.67,652.985 1121.23,655.976 1121.79,628.951 1122.35,615.938 1122.91,619.894 1123.47,623.222 1124.03,626.279 1124.59,648.229 1125.14,663.204 1125.7,663.908 1126.26,680.972 1126.82,726.637 1127.38,741.915 1127.94,708.812 1128.5,741.438 1129.06,752.928 1129.62,750.714 1130.18,717.163 1130.74,717.031 1131.3,747.667 1131.86,790.908 1132.41,800.674 1132.97,812.088 1133.53,803.849 1134.09,778.339 1134.65,775.513 1135.21,789.607 1135.77,781.939 1136.33,746.917 1136.89,759.221 1137.45,737.621 1138.01,704.134 1138.57,706.524 1139.13,721.767 1139.68,734.111 1140.24,713.546 1140.8,725.662 1141.36,738.852 1141.92,716.39 1142.48,703.197 1143.04,715.741 1143.6,681.453 1144.16,646.698 1144.72,647.15 1145.28,666.678 1145.84,701.947 1146.4,719.676 1146.96,719.785 1147.51,700.638 1148.07,731.788 1148.63,698.976 1149.19,699.353 1149.75,699.59 1150.31,682.159 1150.87,684.126 1151.43,667.875 1151.99,688.965 1152.55,706.11 1153.11,705.655 1153.67,710.56 1154.23,709.953 1154.78,724.585 1155.34,692.141 1155.9,672.99 1156.46,655.468 1157.02,641.136 1157.58,674.177 1158.14,689.551 1158.7,688.904 1159.26,690.579 1159.82,721.989 1160.38,703.319 1160.94,690.149 1161.5,707.953 1162.05,687.76 1162.61,639.663 1163.17,687.317 1163.73,686.01 1164.29,702.662 1164.85,686.639 1165.41,704.059 1165.97,718.775 1166.53,718.883 1167.09,750.256 1167.65,747.434 1168.21,710.149 1168.77,711.33 1169.33,760.548 1169.88,737.264 1170.44,744.637 1171,775.42 1171.56,787.579 1172.12,784.547 1172.68,760.746 1173.24,788.377 1173.8,769.907 1174.36,768.766 1174.92,764.351 1175.48,729.062 1176.04,740.343 1176.6,766.072 1177.15,777.613 1177.71,773.738 1178.27,764.899 1178.83,728.785 1179.39,741.788 1179.95,735.612 1180.51,751.95 1181.07,765.023 1181.63,730.5 1182.19,726.595 1182.75,709.515 1183.31,725.137 1183.87,708.469 1184.43,740.614 1184.98,737.423 1185.54,751.008 1186.1,746.324 1186.66,741.322 1187.22,787.647 1187.78,815.926 1188.34,839.622 1188.9,832.542 1189.46,840.66 1190.02,830.474 1190.58,807.016 1191.14,753.572 1191.7,734.229 1192.25,711.603 1192.81,692.849 1193.37,694.562 1193.93,679.084 1194.49,661.344 1195.05,644.029 1195.61,632.456 1196.17,636.126 1196.73,606.994 1197.29,607.649 1197.85,629.654 1198.41,617.681 1198.97,591.203 1199.52,582.236 1200.08,588.854 1200.64,572.224 1201.2,593.366 1201.76,584.108 1202.32,569.887 1202.88,574.421 1203.44,516.898 1204,494.171 1204.56,504.801 1205.12,499.442 1205.68,527.513 1206.24,552.621 1206.8,527.323 1207.35,515.968 1207.91,542.321 1208.47,502.751 1209.03,492.548 1209.59,517.251 1210.15,477.605 1210.71,486.331 1211.27,449.386 1211.83,466.279 1212.39,445.288 1212.95,461.674 1213.51,486.354 1214.07,513.325 1214.62,505.845 1215.18,535.947 1215.74,545.341 1216.3,572.898 1216.86,579.889 1217.42,585.332 1217.98,605.767 1218.54,593.069 1219.1,628.277 1219.66,632.398 1220.22,601.799 1220.78,637.107 1221.34,640.719 1221.89,674.946 1222.45,660.726 1223.01,680.804 1223.57,714.301 1224.13,765.391 1224.69,762.247 1225.25,741.365 1225.81,708.401 1226.37,771.932 1226.93,767.225 1227.49,762.66 1228.05,742.985 1228.61,709.061 1229.17,710.26 1229.72,723.305 1230.28,688.098 1230.84,686.959 1231.4,699.734 1231.96,698.254 1232.52,712.298 1233.08,696.091 1233.64,677.5 1234.2,663.299 1234.76,697.744 1235.32,712.917 1235.88,679.636 1236.44,715.916 1236.99,715.085 1237.55,713.826 1238.11,711.629 1238.67,678.758 1239.23,681.732 1239.79,663.931 1240.35,696.767 1240.91,693.162 1241.47,689.925 1242.03,689.244 1242.59,656.917 1243.15,643.81 1243.71,663.947 1244.26,663.941 1244.82,698.905 1245.38,727.578 1245.94,741.788 1246.5,752.675 1247.06,747.22 1247.62,744.194 1248.18,708.686 1248.74,659.904 1249.3,674.893 1249.86,674.261 1250.42,707.236 1250.98,736.427 1251.54,766.97 1252.09,743.076 1252.65,738.473 1253.21,733.192 1253.77,728.277 1254.33,688.651 1254.89,672.295 1255.45,688.114 1256.01,671.584 1256.57,702.547 1257.13,719.799 1257.69,687.421 1258.25,670.561 1258.81,717.698 1259.36,715.768 1259.92,731.876 1260.48,731.791 1261.04,698.726 1261.6,684.138 1262.16,664.861 1262.72,681.363 1263.28,684.622 1263.84,667.429 1264.4,686.585 1264.96,654.753 1265.52,671.227 1266.08,623.566 1266.63,614.057 1267.19,620.07 1267.75,622.216 1268.31,607.436 1268.87,593.548 1269.43,578.691 1269.99,600.088 1270.55,605.391 1271.11,626.796 1271.67,645.305 1272.23,630.968 1272.79,603.472 1273.35,619.741 1273.91,607.521 1274.46,631.56 1275.02,632.975 1275.58,636.254 1276.14,639.035 1276.7,657.477 1277.26,657.663 1277.82,674.455 1278.38,674.862 1278.94,677.457 1279.5,712.916 1280.06,742.632 1280.62,740.017 1281.18,737.328 1281.73,734.307 1282.29,728.6 1282.85,693.96 1283.41,678.235 1283.97,693.236 1284.53,707.99 1285.09,707.932 1285.65,705.267 1286.21,706.398 1286.77,739.397 1287.33,740.744 1287.89,732.225 1288.45,746.227 1289,729.554 1289.56,663.613 1290.12,647.733 1290.68,668.135 1291.24,667.972 1291.8,669.426 1292.36,686.554 1292.92,706.408 1293.48,703.683 1294.04,689.826 1294.6,704.894 1295.16,689.138 1295.72,690.866 1296.28,676.487 1296.83,696.41 1297.39,694.746 1297.95,692.796 1298.51,673.901 1299.07,677.533 1299.63,679.143 1300.19,699.892 1300.75,696.348 1301.31,681.682 1301.87,697.196 1302.43,648.872 1302.99,648.137 1303.55,638.797 1304.1,657.559 1304.66,689.419 1305.22,675.539 1305.78,692.596 1306.34,690.952 1306.9,689.215 1307.46,753.914 1308.02,798.913 1308.58,778.12 1309.14,774.253 1309.7,772.658 1310.26,770.014 1310.82,762.767 1311.38,760.189 1311.93,787.869 1312.49,796.633 1313.05,825.471 1313.61,865.115 1314.17,853.888 1314.73,814.699 1315.29,771.345 1315.85,750.508 1316.41,715.535 1316.97,679.296 1317.53,678.802 1318.09,693.892 1318.65,710.874 1319.2,710.365 1319.76,724.077 1320.32,692.107 1320.88,674.449 1321.44,705.638 1322,704.789 1322.56,686.198 1323.12,704.554 1323.68,705.536 1324.24,689.409 1324.8,721.906 1325.36,689.453 1325.92,702.913 1326.47,681.922 1327.03,679.064 1327.59,647.373 1328.15,646.862 1328.71,661.066 1329.27,664.755 1329.83,665.385 1330.39,678.209 1330.95,646.31 1331.51,634.765 1332.07,637.3 1332.63,589.966 1333.19,563.911 1333.75,590.909 1334.3,564.773 1334.86,569.628 1335.42,610.295 1335.98,595.152 1336.54,600.98 1337.1,575.798 1337.66,615.545 1338.22,622.004 1338.78,606.374 1339.34,627.869 1339.9,651.616 1340.46,658.397 1341.02,674.352 1341.57,720.011 1342.13,653.721 1342.69,687.005 1343.25,670.864 1343.81,656.321 1344.37,689.818 1344.93,673.343 1345.49,678.868 1346.05,678.935 1346.61,679.314 1347.17,680.536 1347.73,681.463 1348.29,664.376 1348.84,679.148 1349.4,614.898 1349.96,622.725 1350.52,628.054 1351.08,651.431 1351.64,637.416 1352.2,636.929 1352.76,671.901 1353.32,675.119 1353.88,673.031 1354.44,676.293 1355,708.068 1355.56,693.468 1356.12,659.036 1356.67,628.541 1357.23,631.502 1357.79,599.992 1358.35,619.357 1358.91,624.973 1359.47,646.631 1360.03,650.393 1360.59,664.6 1361.15,681.162 1361.71,698.035 1362.27,684.75 1362.83,668.047 1363.39,655.144 1363.94,659.541 1364.5,660.554 1365.06,647.175 1365.62,682.636 1366.18,681.015 1366.74,697.109 1367.3,710.9 1367.86,708.727 1368.42,706.699 1368.98,722.436 1369.54,703.77 1370.1,700.806 1370.66,717.031 1371.21,683.594 1371.77,715.326 1372.33,728.76 1372.89,730.625 1373.45,696.08 1374.01,683.044 1374.57,731.9 1375.13,748.313 1375.69,710.368 1376.25,675.938 1376.81,643.674 1377.37,660.88 1377.93,665 1378.49,651.215 1379.04,656.048 1379.6,661.992 1380.16,676.572 1380.72,660.625 1381.28,645.031 1381.84,648.377 1382.4,667.191 1382.96,687.489 1383.52,707.378 1384.08,738.145 1384.64,784.538 1385.2,798.248 1385.76,792.485 1386.31,790.167 1386.87,750.044 1387.43,731.186 1387.99,698.738 1388.55,696.941 1389.11,695.042 1389.67,711.587 1390.23,730.616 1390.79,729.248 1391.35,695.3 1391.91,678.001 1392.47,661.04 1393.03,678.968 1393.58,692.631 1394.14,707.755 1394.7,707.43 1395.26,722.842 1395.82,721.794 1396.38,718.194 1396.94,670.574 1397.5,638.572 1398.06,623.112 1398.62,560.929 1399.18,561.035 1399.74,520.052 1400.3,561.221 1400.86,580.989 1401.41,603.492 1401.97,608.476 1402.53,662.673 1403.09,647.525 1403.65,651.013 1404.21,621.144 1404.77,658.539 1405.33,676.544 1405.89,673.903 1406.45,691.536 1407.01,691.019 1407.57,706.714 1408.13,687.717 1408.68,670.025 1409.24,681.042 1409.8,695.673 1410.36,692.907 1410.92,692.075 1411.48,693.606 1412.04,674.98 1412.6,678.141 1413.16,710.702 1413.72,707.661 1414.28,689.603 1414.84,688.59 1415.4,747.852 1415.95,758.724 1416.51,755.051 1417.07,737.617 1417.63,719.734 1418.19,722.886 1418.75,704.679 1419.31,686.016 1419.87,669.445 1420.43,655.898 1420.99,676.116 1421.55,697.321 1422.11,696.412 1422.67,692.279 1423.23,708.837 1423.78,701.053 1424.34,701.14 1424.9,682.856 1425.46,663.34 1426.02,664.713 1426.58,631.246 1427.14,637.265 1427.7,654.88 1428.26,655.736 1428.82,655.055 1429.38,605.217 1429.94,604.811 1430.5,608.399 1431.05,626.048 1431.61,675.729 1432.17,693.659 1432.73,677.181 1433.29,692.527 1433.85,693.471 1434.41,723.511 1434.97,752.592 1435.53,732.523 1436.09,714.161 1436.65,700.8 1437.21,718.046 1437.77,701.834 1438.33,702.577 1438.88,719.389 1439.44,733.812 1440,697.937 1440.56,680.704 1441.12,664.822 1441.68,632.651 1442.24,634.387 1442.8,637.005 1443.36,606.419 1443.92,627.344 1444.48,618.75 1445.04,637.474 1445.6,605.909 1446.15,562.945 1446.71,586.189 1447.27,589.673 1447.83,624.409 1448.39,595.712 1448.95,618.627 1449.51,609.327 1450.07,613.897 1450.63,647.764 1451.19,648.894 1451.75,652.178 1452.31,670.949 1452.87,670.14 1453.42,669.691 1453.98,671.136 1454.54,654.427 1455.1,655.776 1455.66,676.411 1456.22,661.156 1456.78,665.122 1457.34,646.685 1457.9,646.822 1458.46,647.846 1459.02,665.516 1459.58,667.378 1460.14,656.889 1460.7,640.587 1461.25,659.431 1461.81,677.318 1462.37,678.267 1462.93,694.519 1463.49,757.257 1464.05,786.308 1464.61,766.991 1465.17,779.833 1465.73,744.407 1466.29,721.504 1466.85,735.247 1467.41,782.383 1467.97,764.406 1468.52,758.221 1469.08,720.608 1469.64,755.479 1470.2,735.303 1470.76,718.152 1471.32,712.738 1471.88,725.799 1472.44,738.545 1473,701.937 1473.56,700.199 1474.12,685.247 1474.68,702.26 1475.24,701.921 1475.79,687.362 1476.35,673.793 1476.91,637.552 1477.47,640.886 1478.03,675.437 1478.59,704.819 1479.15,735.373 1479.71,711.309 1480.27,706.588 1480.83,686.266 1481.39,715.614 1481.95,714.843 1482.51,729.892 1483.07,694.475 1483.62,712.518 1484.18,694.632 1484.74,693.399 1485.3,741.914 1485.86,705.045 1486.42,719.452 1486.98,735.057 1487.54,763.219 1488.1,772.086 1488.66,747.143 1489.22,758.203 1489.78,756.308 1490.34,732.86 1490.89,712.241 1491.45,697.856 1492.01,677.543 1492.57,659.939 1493.13,674.151 1493.69,675.54 1494.25,672.565 1494.81,660.749 1495.37,645.788 1495.93,678.799 1496.49,694.357 1497.05,722.973 1497.61,701.139 1498.16,681.891 1498.72,679.994 1499.28,647.281 1499.84,650.758 1500.4,654.335 1500.96,671.887 1501.52,654.808 1502.08,652.776 1502.64,671.785 1503.2,688.486 1503.76,705.016 1504.32,671.905 1504.88,659.616 1505.44,625.939 1505.99,629.09 1506.55,646.727 1507.11,660.514 1507.67,662.166 1508.23,661.626 1508.79,613.828 1509.35,640.419 1509.91,689.653 1510.47,706.867 1511.03,690.004 1511.59,674.023 1512.15,674.969 1512.71,651.128 1513.26,683.711 1513.82,686.795 1514.38,687.429 1514.94,672.564 1515.5,691.382 1516.06,677.099 1516.62,691.126 1517.18,689.516 1517.74,706.616 1518.3,689.25 1518.86,721.256 1519.42,731.012 1519.98,697.137 1520.53,678.884 1521.09,695.725 1521.65,706.206 1522.21,704.608 1522.77,701.019 1523.33,714.473 1523.89,731.116 1524.45,777.803 1525.01,757.127 1525.57,722.12 1526.13,735.134 1526.69,751.165 1527.25,751.987 1527.81,766.693 1528.36,762.952 1528.92,789.749 1529.48,782.804 1530.04,745.698 1530.6,745.475 1531.16,727.508 1531.72,708.866 1532.28,727.696 1532.84,710.021 1533.4,679.249 1533.96,663.412 1534.52,699.823 1535.08,715.497 1535.63,682.57 1536.19,667.071 1536.75,652.212 1537.31,635.978 1537.87,621.027 1538.43,608.742 1538.99,611.134 1539.55,628.483 1540.11,643.534 1540.67,627.203 1541.23,629.446 1541.79,664.357 1542.35,667.731 1542.9,636.656 1543.46,653.962 1544.02,685.34 1544.58,669.947 1545.14,672.873 1545.7,675.622 1546.26,696.142 1546.82,697.616 1547.38,714.264 1547.94,724.777 1548.5,754.771 1549.06,723.032 1549.62,736.265 1550.18,732.502 1550.73,728.718 1551.29,710.74 1551.85,708.285 1552.41,724.585 1552.97,690.054 1553.53,672.423 1554.09,655.095 1554.65,658.299 1555.21,658.891 1555.77,691.406 1556.33,693.693 1556.89,692.587 1557.45,691.576 1558,709.417 1558.56,741.641 1559.12,756.396 1559.68,754.558 1560.24,752.857 1560.8,733.915 1561.36,749.553 1561.92,715.749 1562.48,731.167 1563.04,710.895 1563.6,710.368 1564.16,695.643 1564.72,744.418 1565.28,760.247 1565.83,770.799 1566.39,749.844 1566.95,730.966 1567.51,727.934 1568.07,722.826 1568.63,720.081 1569.19,717.37 1569.75,716.647 1570.31,665.794 1570.87,650.039 1571.43,670.791 1571.99,671.44 1572.55,673.525 1573.1,672.116 1573.66,608.526 1574.22,641.511 1574.78,677.521 1575.34,660.866 1575.9,644.824 1576.46,612.95 1577.02,648.533 1577.58,636.136 1578.14,634.551 1578.7,652.183 1579.26,650.121 1579.82,655.661 1580.37,659.415 1580.93,644.77 1581.49,615.039 1582.05,633.64 1582.61,633.99 1583.17,619.595 1583.73,641.858 1584.29,673.679 1584.85,658.059 1585.41,626.141 1585.97,646.796 1586.53,682.544 1587.09,651.221 1587.65,700.789 1588.2,663.46 1588.76,682.835 1589.32,664.926 1589.88,648.603 1590.44,633.315 1591,634.642 1591.56,603.658 1592.12,628.134 1592.68,597.093 1593.24,568.852 1593.8,592.905 1594.36,615.479 1594.92,617.428 1595.47,619.193 1596.03,590.886 1596.59,629.598 1597.15,613.725 1597.71,619.035 1598.27,619.69 1598.83,609.152 1599.39,614.697 1599.95,667.861 1600.51,684.337 1601.07,700.369 1601.63,684.807 1602.19,683.791 1602.74,715.082 1603.3,711.492 1603.86,710.331 1604.42,709.747 1604.98,738.956 1605.54,752.755 1606.1,736.808 1606.66,779.992 1607.22,759.233 1607.78,757.026 1608.34,733.707 1608.9,748.18 1609.46,743.717 1610.02,770.793 1610.57,768.188 1611.13,749.328 1611.69,732.039 1612.25,731.094 1612.81,761.428 1613.37,773.104 1613.93,783.933 1614.49,827.624 1615.05,817.271 1615.61,809.705 1616.17,806.146 1616.73,781.957 1617.29,824.193 1617.84,798.957 1618.4,792.197 1618.96,787.061 1619.52,813.513 1620.08,806.831 1620.64,785.93 1621.2,796.774 1621.76,756.812 1622.32,751.67 1622.88,793.415 1623.44,788.083 1624,814.621 1624.56,809.156 1625.11,802.553 1625.67,797.214 1626.23,773.39 1626.79,718.426 1627.35,699.45 1627.91,667.941 1628.47,649.578 1629.03,662.878 1629.59,629.066 1630.15,646.79 1630.71,647.712 1631.27,647.34 1631.83,649.852 1632.39,652.817 1632.94,623.184 1633.5,625.859 1634.06,626.752 1634.62,645.463 1635.18,663.548 1635.74,648.566 1636.3,650.542 1636.86,652.378 1637.42,649.56 1637.98,667.993 1638.54,667.52 1639.1,636.769 1639.66,654.319 1640.21,674.254 1640.77,675.853 1641.33,643.921 1641.89,650.168 1642.45,652.993 1643.01,623.131 1643.57,626.776 1644.13,645.858 1644.69,629.573 1645.25,630.492 1645.81,633.477 1646.37,619.259 1646.93,641.166 1647.48,629.561 1648.04,636.54 1648.6,672.747 1649.16,641.297 1649.72,639.637 1650.28,626.482 1650.84,648.418 1651.4,618.414 1651.96,606.241 1652.52,594.135 1653.08,602.378 1653.64,573.468 1654.2,594.812 1654.76,600.487 1655.31,620.012 1655.87,641.197 1656.43,628.558 1656.99,632.09 1657.55,654.231 1658.11,644.402 1658.67,651.863 1659.23,607.663 1659.79,628.794 1660.35,647.139 1660.91,663.6 1661.47,679.554 1662.03,713.117 1662.58,710.57 1663.14,710.52 1663.7,710.037 1664.26,709.683 1664.82,712.184 1665.38,725.981 1665.94,725.327 1666.5,724.686 1667.06,704.45 1667.62,720.19 1668.18,737.56 1668.74,754.999 1669.3,736.423 1669.85,766.529 1670.41,726.667 1670.97,755.009 1671.53,750.559 1672.09,746.948 1672.65,728.469 1673.21,725.575 1673.77,771.772 1674.33,753.897 1674.89,738.391 1675.45,721.51 1676.01,733.466 1676.57,734.349 1677.13,712.622 1677.68,696.354 1678.24,678.929 1678.8,691.248 1679.36,687.553 1679.92,668.471 1680.48,669.889 1681.04,654.747 1681.6,652.346 1682.16,649.754 1682.72,652.599 1683.28,651.835 1683.84,671.588 1684.4,672.706 1684.95,705.573 1685.51,703.224 1686.07,684.541 1686.63,653.276 1687.19,654.88 1687.75,640.242 1688.31,656.125 1688.87,660.553 1689.43,644.715 1689.99,665.452 1690.55,664.058 1691.11,696.673 1691.67,665.01 1692.23,652.953 1692.78,640.886 1693.34,643.468 1693.9,647.502 1694.46,614.652 1695.02,598.648 1695.58,600.668 1696.14,621.567 1696.7,605.119 1697.26,592.01 1697.82,598.485 1698.38,604.015 1698.94,624.564 1699.5,673.25 1700.05,701.928 1700.61,650.9 1701.17,638.826 1701.73,638.982 1702.29,642.421 1702.85,659.462 1703.41,692.002 1703.97,691.689 1704.53,675.567 1705.09,674.592 1705.65,692.064 1706.21,677.318 1706.77,678.43 1707.32,677.849 1707.88,696.327 1708.44,680.305 1709,680.867 1709.56,648.027 1710.12,621.462 1710.68,657.237 1711.24,658.378 1711.8,660.5 1712.36,630.004 1712.92,632.33 1713.48,622.106 1714.04,623.592 1714.6,628.748 1715.15,648.106 1715.71,681.028 1716.27,638.317 1716.83,672.924 1717.39,706.091 1717.95,687.314 1718.51,673.281 1719.07,691.026 1719.63,690.329 1720.19,674.307 1720.75,676.328 1721.31,675.832 1721.87,659.562 1722.42,660.014 1722.98,657.995 1723.54,645.767 1724.1,648.077 1724.66,650.186 1725.22,640.546 1725.78,658.902 1726.34,677.509 1726.9,679.366 1727.46,661.679 1728.02,649.754 1728.58,701.303 1729.14,718.677 1729.69,702.516 1730.25,715.494 1730.81,728.41 1731.37,705.715 1731.93,686.793 1732.49,699.911 1733.05,699.533 1733.61,714.922 1734.17,729.025 1734.73,744.761 1735.29,758.422 1735.85,756.575 1736.41,752.21 1736.97,761.387 1737.52,775.854 1738.08,738.887 1738.64,722.919 1739.2,703.52 1739.76,672.809 1740.32,675.43 1740.88,673.198 1741.44,673.643 1742,659.084 1742.56,662.487 1743.12,647.214 1743.68,681.534 1744.24,632.305 1744.79,618.374 1745.35,617.186 1745.91,619.505 1746.47,641.223 1747.03,642.081 1747.59,678.579 1748.15,661.055 1748.71,664.022 1749.27,678.299 1749.83,693.178 1750.39,691.55 1750.95,659.195 1751.51,659.511 1752.06,676.836 1752.62,679.761 1753.18,711.353 1753.74,712.41 1754.3,709.098 1754.86,693.684 1755.42,675.947 1755.98,677.23 1756.54,692.917 1757.1,689.82 1757.66,691.337 1758.22,689.358 1758.78,685.849 1759.34,685.219 1759.89,748.049 1760.45,725.73 1761.01,726.622 1761.57,736.315 1762.13,733.426 1762.69,731.9 1763.25,747.558 1763.81,709.681 1764.37,693.482 1764.93,658.424 1765.49,676.081 1766.05,723.292 1766.61,705.286 1767.16,704.207 1767.72,703.901 1768.28,702.596 1768.84,719.051 1769.4,685.277 1769.96,663.066 1770.52,681.99 1771.08,680.455 1771.64,682.064 1772.2,665.032 1772.76,666.597 1773.32,697.417 1773.88,710.785 1774.43,676.461 1774.99,679.371 1775.55,695.446 1776.11,695.733 1776.67,682.441 1777.23,698.66 1777.79,712.091 1778.35,713.18 1778.91,694.946 1779.47,713.802 1780.03,693.699 1780.59,679.913 1781.15,678.227 1781.71,677.692 1782.26,660.959 1782.82,630.494 1783.38,650.782 1783.94,652.293 1784.5,653.482 1785.06,656.408 1785.62,675.308 1786.18,674.727 1786.74,675.668 1787.3,628.966 1787.86,616.432 1788.42,606.25 1788.98,561.509 1789.53,569.75 1790.09,590.92 1790.65,593.452 1791.21,630.686 1791.77,636.298 1792.33,636.59 1792.89,625.9 1793.45,609.396 1794.01,596.501 1794.57,571.452 1795.13,590.875 1795.69,582.934 1796.25,605.367 1796.8,625.893 1797.36,663.989 1797.92,697.931 1798.48,681.055 1799.04,716.352 1799.6,650.804 1800.16,636.524 1800.72,639.362 1801.28,689.901 1801.84,673.202 1802.4,643.452 1802.96,627.873 1803.52,617.726 1804.08,621.559 1804.63,610.803 1805.19,631.971 1805.75,637.031 1806.31,641.396 1806.87,611.463 1807.43,617.41 1807.99,606.727 1808.55,628.904 1809.11,585.266 1809.67,591.116 1810.23,583.927 1810.79,603.749 1811.35,623.876 1811.9,608.159 1812.46,611.294 1813.02,662.275 1813.58,678.747 1814.14,694.431 1814.7,711.643 1815.26,697.895 1815.82,693.359 1816.38,691.351 1816.94,691.387 1817.5,708.561 1818.06,740.127 1818.62,738.976 1819.18,750.745 1819.73,745.846 1820.29,710.939 1820.85,711.418 1821.41,742.09 1821.97,720.012 1822.53,720.326 1823.09,731.533 1823.65,714.464 1824.21,698.512 1824.77,678.792 1825.33,714.007 1825.89,727.091 1826.45,752.768 1827,720.24 1827.56,700.897 1828.12,699.432 1828.68,734.021 1829.24,760.407 1829.8,757.174 1830.36,754.07 1830.92,752.158 1831.48,744.905 1832.04,689.918 1832.6,690.583 1833.16,675.467 1833.72,646.874 1834.27,711.175 1834.83,710.053 1835.39,753.643 1835.95,748.197 1836.51,760.663 1837.07,721.537 1837.63,687.197 1838.19,703.534 \"/>\n<path clip-path=\"url(#clip163)\" d=\"M720.247 689.36 L720.806 689.36 L721.365 689.36 L721.924 689.36 L722.484 689.36 L723.043 689.36 L723.602 689.36 L724.161 689.36 L724.721 689.36 L725.28 689.36 L725.839 689.36 L726.398 689.36 L726.958 689.36 L727.517 689.36 L728.076 689.36 L728.635 689.36 L729.195 689.36 L729.754 689.36 L730.313 689.36 L730.872 689.36 L731.432 689.36 L731.991 689.36 L732.55 689.36 L733.109 689.36 L733.669 689.36 L734.228 689.36 L734.787 689.36 L735.346 689.36 L735.906 689.36 L736.465 689.36 L737.024 689.36 L737.583 689.36 L738.143 689.36 L738.702 689.36 L739.261 689.36 L739.82 689.36 L740.38 689.36 L740.939 689.36 L741.498 689.36 L742.057 689.36 L742.617 689.36 L743.176 689.36 L743.735 689.36 L744.294 689.36 L744.854 689.36 L745.413 689.36 L745.972 689.36 L746.531 689.36 L747.091 689.36 L747.65 689.36 L748.209 689.36 L748.768 689.36 L749.328 689.36 L749.887 689.36 L750.446 689.36 L751.005 689.36 L751.565 689.36 L752.124 689.36 L752.683 689.36 L753.242 689.36 L753.802 689.36 L754.361 689.36 L754.92 689.36 L755.479 689.36 L756.039 689.36 L756.598 689.36 L757.157 689.36 L757.716 689.36 L758.276 689.36 L758.835 689.36 L759.394 689.36 L759.953 689.36 L760.513 689.36 L761.072 689.36 L761.631 689.36 L762.19 689.36 L762.75 689.36 L763.309 689.36 L763.868 689.36 L764.427 689.36 L764.987 689.36 L765.546 689.36 L766.105 689.36 L766.664 689.36 L767.224 689.36 L767.783 689.36 L768.342 689.36 L768.901 689.36 L769.461 689.36 L770.02 689.36 L770.579 689.36 L771.138 689.36 L771.698 689.36 L772.257 689.36 L772.816 689.36 L773.375 689.36 L773.935 689.36 L774.494 689.36 L775.053 689.36 L775.612 689.36 L776.172 689.36 L776.731 689.36 L777.29 689.36 L777.849 689.36 L778.409 689.36 L778.968 689.36 L779.527 689.36 L780.086 689.36 L780.646 689.36 L781.205 689.36 L781.764 689.36 L782.323 689.36 L782.883 689.36 L783.442 689.36 L784.001 689.36 L784.56 689.36 L785.12 689.36 L785.679 689.36 L786.238 689.36 L786.797 689.36 L787.357 689.36 L787.916 689.36 L788.475 689.36 L789.034 689.36 L789.594 689.36 L790.153 689.36 L790.712 689.36 L791.271 689.36 L791.831 689.36 L792.39 689.36 L792.949 689.36 L793.508 689.36 L794.068 689.36 L794.627 689.36 L795.186 689.36 L795.745 689.36 L796.305 689.36 L796.864 689.36 L797.423 689.36 L797.982 689.36 L798.542 689.36 L799.101 689.36 L799.66 689.36 L800.219 689.36 L800.779 689.36 L801.338 689.36 L801.897 689.36 L802.456 689.36 L803.016 689.36 L803.575 689.36 L804.134 689.36 L804.693 689.36 L805.253 689.36 L805.812 689.36 L806.371 689.36 L806.931 689.36 L807.49 689.36 L808.049 689.36 L808.608 689.36 L809.168 689.36 L809.727 689.36 L810.286 689.36 L810.845 689.36 L811.405 689.36 L811.964 689.36 L812.523 689.36 L813.082 689.36 L813.642 689.36 L814.201 689.36 L814.76 689.36 L815.319 689.36 L815.879 689.36 L816.438 689.36 L816.997 689.36 L817.556 689.36 L818.116 689.36 L818.675 689.36 L819.234 689.36 L819.793 689.36 L820.353 689.36 L820.912 689.36 L821.471 689.36 L822.03 689.36 L822.59 689.36 L823.149 689.36 L823.708 689.36 L824.267 689.36 L824.827 689.36 L825.386 689.36 L825.945 689.36 L826.504 689.36 L827.064 689.36 L827.623 689.36 L828.182 689.36 L828.741 689.36 L829.301 689.36 L829.86 689.36 L830.419 689.36 L830.978 689.36 L831.538 689.36 L832.097 689.36 L832.656 689.36 L833.215 689.36 L833.775 689.36 L834.334 689.36 L834.893 689.36 L835.452 689.36 L836.012 689.36 L836.571 689.36 L837.13 689.36 L837.689 689.36 L838.249 689.36 L838.808 689.36 L839.367 689.36 L839.926 689.36 L840.486 689.36 L841.045 689.36 L841.604 689.36 L842.163 689.36 L842.723 689.36 L843.282 689.36 L843.841 689.36 L844.4 689.36 L844.96 689.36 L845.519 689.36 L846.078 689.36 L846.637 689.36 L847.197 689.36 L847.756 689.36 L848.315 689.36 L848.874 689.36 L849.434 689.36 L849.993 689.36 L850.552 689.36 L851.111 689.36 L851.671 689.36 L852.23 689.36 L852.789 689.36 L853.348 689.36 L853.908 689.36 L854.467 689.36 L855.026 689.36 L855.585 689.36 L856.145 689.36 L856.704 689.36 L857.263 689.36 L857.822 689.36 L858.382 689.36 L858.941 689.36 L859.5 689.36 L860.059 689.36 L860.619 689.36 L861.178 689.36 L861.737 689.36 L862.296 689.36 L862.856 689.36 L863.415 689.36 L863.974 689.36 L864.533 689.36 L865.093 689.36 L865.652 689.36 L866.211 689.36 L866.77 689.36 L867.33 689.36 L867.889 689.36 L868.448 689.36 L869.007 689.36 L869.567 689.36 L870.126 689.36 L870.685 689.36 L871.244 689.36 L871.804 689.36 L872.363 689.36 L872.922 689.36 L873.481 689.36 L874.041 689.36 L874.6 689.36 L875.159 689.36 L875.718 689.36 L876.278 689.36 L876.837 689.36 L877.396 689.36 L877.955 689.36 L878.515 689.36 L879.074 689.36 L879.633 689.36 L880.192 689.36 L880.752 689.36 L881.311 689.36 L881.87 689.36 L882.429 689.36 L882.989 689.36 L883.548 689.36 L884.107 689.36 L884.666 689.36 L885.226 689.36 L885.785 689.36 L886.344 689.36 L886.903 689.36 L887.463 689.36 L888.022 689.36 L888.581 689.36 L889.14 689.36 L889.7 689.36 L890.259 689.36 L890.818 689.36 L891.377 689.36 L891.937 689.36 L892.496 689.36 L893.055 689.36 L893.614 689.36 L894.174 689.36 L894.733 689.36 L895.292 689.36 L895.851 689.36 L896.411 689.36 L896.97 689.36 L897.529 689.36 L898.088 689.36 L898.648 689.36 L899.207 689.36 L899.766 689.36 L900.325 689.36 L900.885 689.36 L901.444 689.36 L902.003 689.36 L902.562 689.36 L903.122 689.36 L903.681 689.36 L904.24 689.36 L904.799 689.36 L905.359 689.36 L905.918 689.36 L906.477 689.36 L907.036 689.36 L907.596 689.36 L908.155 689.36 L908.714 689.36 L909.273 689.36 L909.833 689.36 L910.392 689.36 L910.951 689.36 L911.51 689.36 L912.07 689.36 L912.629 689.36 L913.188 689.36 L913.747 689.36 L914.307 689.36 L914.866 689.36 L915.425 689.36 L915.984 689.36 L916.544 689.36 L917.103 689.36 L917.662 689.36 L918.221 689.36 L918.781 689.36 L919.34 689.36 L919.899 689.36 L920.458 689.36 L921.018 689.36 L921.577 689.36 L922.136 689.36 L922.695 689.36 L923.255 689.36 L923.814 689.36 L924.373 689.36 L924.932 689.36 L925.492 689.36 L926.051 689.36 L926.61 689.36 L927.169 689.36 L927.729 689.36 L928.288 689.36 L928.847 689.36 L929.406 689.36 L929.966 689.36 L930.525 689.36 L931.084 689.36 L931.644 689.36 L932.203 689.36 L932.762 689.36 L933.321 689.36 L933.881 689.36 L934.44 689.36 L934.999 689.36 L935.558 689.36 L936.118 689.36 L936.677 689.36 L937.236 689.36 L937.795 689.36 L938.355 689.36 L938.914 689.36 L939.473 689.36 L940.032 689.36 L940.592 689.36 L941.151 689.36 L941.71 689.36 L942.269 689.36 L942.829 689.36 L943.388 689.36 L943.947 689.36 L944.506 689.36 L945.066 689.36 L945.625 689.36 L946.184 689.36 L946.743 689.36 L947.303 689.36 L947.862 689.36 L948.421 689.36 L948.98 689.36 L949.54 689.36 L950.099 689.36 L950.658 689.36 L951.217 689.36 L951.777 689.36 L952.336 689.36 L952.895 689.36 L953.454 689.36 L954.014 689.36 L954.573 689.36 L955.132 689.36 L955.691 689.36 L956.251 689.36 L956.81 689.36 L957.369 689.36 L957.928 689.36 L958.488 689.36 L959.047 689.36 L959.606 689.36 L960.165 689.36 L960.725 689.36 L961.284 689.36 L961.843 689.36 L962.402 689.36 L962.962 689.36 L963.521 689.36 L964.08 689.36 L964.639 689.36 L965.199 689.36 L965.758 689.36 L966.317 689.36 L966.876 689.36 L967.436 689.36 L967.995 689.36 L968.554 689.36 L969.113 689.36 L969.673 689.36 L970.232 689.36 L970.791 689.36 L971.35 689.36 L971.91 689.36 L972.469 689.36 L973.028 689.36 L973.587 689.36 L974.147 689.36 L974.706 689.36 L975.265 689.36 L975.824 689.36 L976.384 689.36 L976.943 689.36 L977.502 689.36 L978.061 689.36 L978.621 689.36 L979.18 689.36 L979.739 689.36 L980.298 689.36 L980.858 689.36 L981.417 689.36 L981.976 689.36 L982.535 689.36 L983.095 689.36 L983.654 689.36 L984.213 689.36 L984.772 689.36 L985.332 689.36 L985.891 689.36 L986.45 689.36 L987.009 689.36 L987.569 689.36 L988.128 689.36 L988.687 689.36 L989.246 689.36 L989.806 689.36 L990.365 689.36 L990.924 689.36 L991.483 689.36 L992.043 689.36 L992.602 689.36 L993.161 689.36 L993.72 689.36 L994.28 689.36 L994.839 689.36 L995.398 689.36 L995.957 689.36 L996.517 689.36 L997.076 689.36 L997.635 689.36 L998.194 689.36 L998.754 689.36 L999.313 689.36 L999.872 689.36 L1000.43 689.36 L1000.99 689.36 L1001.55 689.36 L1002.11 689.36 L1002.67 689.36 L1003.23 689.36 L1003.79 689.36 L1004.35 689.36 L1004.91 689.36 L1005.46 689.36 L1006.02 689.36 L1006.58 689.36 L1007.14 689.36 L1007.7 689.36 L1008.26 689.36 L1008.82 689.36 L1009.38 689.36 L1009.94 689.36 L1010.5 689.36 L1011.06 689.36 L1011.62 689.36 L1012.18 689.36 L1012.73 689.36 L1013.29 689.36 L1013.85 689.36 L1014.41 689.36 L1014.97 689.36 L1015.53 689.36 L1016.09 689.36 L1016.65 689.36 L1017.21 689.36 L1017.77 689.36 L1018.33 689.36 L1018.89 689.36 L1019.45 689.36 L1020.01 689.36 L1020.56 689.36 L1021.12 689.36 L1021.68 689.36 L1022.24 689.36 L1022.8 689.36 L1023.36 689.36 L1023.92 689.36 L1024.48 689.36 L1025.04 689.36 L1025.6 689.36 L1026.16 689.36 L1026.72 689.36 L1027.28 689.36 L1027.83 689.36 L1028.39 689.36 L1028.95 689.36 L1029.51 689.36 L1030.07 689.36 L1030.63 689.36 L1031.19 689.36 L1031.75 689.36 L1032.31 689.36 L1032.87 689.36 L1033.43 689.36 L1033.99 689.36 L1034.55 689.36 L1035.1 689.36 L1035.66 689.36 L1036.22 689.36 L1036.78 689.36 L1037.34 689.36 L1037.9 689.36 L1038.46 689.36 L1039.02 689.36 L1039.58 689.36 L1040.14 689.36 L1040.7 689.36 L1041.26 689.36 L1041.82 689.36 L1042.38 689.36 L1042.93 689.36 L1043.49 689.36 L1044.05 689.36 L1044.61 689.36 L1045.17 689.36 L1045.73 689.36 L1046.29 689.36 L1046.85 689.36 L1047.41 689.36 L1047.97 689.36 L1048.53 689.36 L1049.09 689.36 L1049.65 689.36 L1050.2 689.36 L1050.76 689.36 L1051.32 689.36 L1051.88 689.36 L1052.44 689.36 L1053 689.36 L1053.56 689.36 L1054.12 689.36 L1054.68 689.36 L1055.24 689.36 L1055.8 689.36 L1056.36 689.36 L1056.92 689.36 L1057.48 689.36 L1058.03 689.36 L1058.59 689.36 L1059.15 689.36 L1059.71 689.36 L1060.27 689.36 L1060.83 689.36 L1061.39 689.36 L1061.95 689.36 L1062.51 689.36 L1063.07 689.36 L1063.63 689.36 L1064.19 689.36 L1064.75 689.36 L1065.3 689.36 L1065.86 689.36 L1066.42 689.36 L1066.98 689.36 L1067.54 689.36 L1068.1 689.36 L1068.66 689.36 L1069.22 689.36 L1069.78 689.36 L1070.34 689.36 L1070.9 689.36 L1071.46 689.36 L1072.02 689.36 L1072.57 689.36 L1073.13 689.36 L1073.69 689.36 L1074.25 689.36 L1074.81 689.36 L1075.37 689.36 L1075.93 689.36 L1076.49 689.36 L1077.05 689.36 L1077.61 689.36 L1078.17 689.36 L1078.73 689.36 L1079.29 689.36 L1079.85 689.36 L1080.4 689.36 L1080.96 689.36 L1081.52 689.36 L1082.08 689.36 L1082.64 689.36 L1083.2 689.36 L1083.76 689.36 L1084.32 689.36 L1084.88 689.36 L1085.44 689.36 L1086 689.36 L1086.56 689.36 L1087.12 689.36 L1087.67 689.36 L1088.23 689.36 L1088.79 689.36 L1089.35 689.36 L1089.91 689.36 L1090.47 689.36 L1091.03 689.36 L1091.59 689.36 L1092.15 689.36 L1092.71 689.36 L1093.27 689.36 L1093.83 689.36 L1094.39 689.36 L1094.94 689.36 L1095.5 689.36 L1096.06 689.36 L1096.62 689.36 L1097.18 689.36 L1097.74 689.36 L1098.3 689.36 L1098.86 689.36 L1099.42 689.36 L1099.98 689.36 L1100.54 689.36 L1101.1 689.36 L1101.66 689.36 L1102.22 689.36 L1102.77 689.36 L1103.33 689.36 L1103.89 689.36 L1104.45 689.36 L1105.01 689.36 L1105.57 689.36 L1106.13 689.36 L1106.69 689.36 L1107.25 689.36 L1107.81 689.36 L1108.37 689.36 L1108.93 689.36 L1109.49 689.36 L1110.04 689.36 L1110.6 689.36 L1111.16 689.36 L1111.72 689.36 L1112.28 689.36 L1112.84 689.36 L1113.4 689.36 L1113.96 689.36 L1114.52 689.36 L1115.08 689.36 L1115.64 689.36 L1116.2 689.36 L1116.76 689.36 L1117.31 689.36 L1117.87 689.36 L1118.43 689.36 L1118.99 689.36 L1119.55 689.36 L1120.11 689.36 L1120.67 689.36 L1121.23 689.36 L1121.79 689.36 L1122.35 689.36 L1122.91 689.36 L1123.47 689.36 L1124.03 689.36 L1124.59 689.36 L1125.14 689.36 L1125.7 689.36 L1126.26 689.36 L1126.82 689.36 L1127.38 689.36 L1127.94 689.36 L1128.5 689.36 L1129.06 689.36 L1129.62 689.36 L1130.18 689.36 L1130.74 689.36 L1131.3 689.36 L1131.86 689.36 L1132.41 689.36 L1132.97 689.36 L1133.53 689.36 L1134.09 689.36 L1134.65 689.36 L1135.21 689.36 L1135.77 689.36 L1136.33 689.36 L1136.89 689.36 L1137.45 689.36 L1138.01 689.36 L1138.57 689.36 L1139.13 689.36 L1139.68 689.36 L1140.24 689.36 L1140.8 689.36 L1141.36 689.36 L1141.92 689.36 L1142.48 689.36 L1143.04 689.36 L1143.6 689.36 L1144.16 689.36 L1144.72 689.36 L1145.28 689.36 L1145.84 689.36 L1146.4 689.36 L1146.96 689.36 L1147.51 689.36 L1148.07 689.36 L1148.63 689.36 L1149.19 689.36 L1149.75 689.36 L1150.31 689.36 L1150.87 689.36 L1151.43 689.36 L1151.99 689.36 L1152.55 689.36 L1153.11 689.36 L1153.67 689.36 L1154.23 689.36 L1154.78 689.36 L1155.34 689.36 L1155.9 689.36 L1156.46 689.36 L1157.02 689.36 L1157.58 689.36 L1158.14 689.36 L1158.7 689.36 L1159.26 689.36 L1159.82 689.36 L1160.38 689.36 L1160.94 689.36 L1161.5 689.36 L1162.05 689.36 L1162.61 689.36 L1163.17 689.36 L1163.73 689.36 L1164.29 689.36 L1164.85 689.36 L1165.41 689.36 L1165.97 689.36 L1166.53 689.36 L1167.09 689.36 L1167.65 689.36 L1168.21 689.36 L1168.77 689.36 L1169.33 689.36 L1169.88 689.36 L1170.44 689.36 L1171 689.36 L1171.56 689.36 L1172.12 689.36 L1172.68 689.36 L1173.24 689.36 L1173.8 689.36 L1174.36 689.36 L1174.92 689.36 L1175.48 689.36 L1176.04 689.36 L1176.6 689.36 L1177.15 689.36 L1177.71 689.36 L1178.27 689.36 L1178.83 689.36 L1179.39 689.36 L1179.95 689.36 L1180.51 689.36 L1181.07 689.36 L1181.63 689.36 L1182.19 689.36 L1182.75 689.36 L1183.31 689.36 L1183.87 689.36 L1184.43 689.36 L1184.98 689.36 L1185.54 689.36 L1186.1 689.36 L1186.66 689.36 L1187.22 689.36 L1187.78 689.36 L1188.34 689.36 L1188.9 689.36 L1189.46 689.36 L1190.02 689.36 L1190.58 689.36 L1191.14 689.36 L1191.7 689.36 L1192.25 689.36 L1192.81 689.36 L1193.37 689.36 L1193.93 689.36 L1194.49 689.36 L1195.05 689.36 L1195.61 689.36 L1196.17 689.36 L1196.73 689.36 L1197.29 689.36 L1197.85 689.36 L1198.41 689.36 L1198.97 689.36 L1199.52 689.36 L1200.08 689.36 L1200.64 689.36 L1201.2 689.36 L1201.76 689.36 L1202.32 689.36 L1202.88 689.36 L1203.44 689.36 L1204 689.36 L1204.56 689.36 L1205.12 689.36 L1205.68 689.36 L1206.24 689.36 L1206.8 689.36 L1207.35 689.36 L1207.91 689.36 L1208.47 689.36 L1209.03 689.36 L1209.59 689.36 L1210.15 689.36 L1210.71 689.36 L1211.27 689.36 L1211.83 689.36 L1212.39 689.36 L1212.95 689.36 L1213.51 689.36 L1214.07 689.36 L1214.62 689.36 L1215.18 689.36 L1215.74 689.36 L1216.3 689.36 L1216.86 689.36 L1217.42 689.36 L1217.98 689.36 L1218.54 689.36 L1219.1 689.36 L1219.66 689.36 L1220.22 689.36 L1220.78 689.36 L1221.34 689.36 L1221.89 689.36 L1222.45 689.36 L1223.01 689.36 L1223.57 689.36 L1224.13 689.36 L1224.69 689.36 L1225.25 689.36 L1225.81 689.36 L1226.37 689.36 L1226.93 689.36 L1227.49 689.36 L1228.05 689.36 L1228.61 689.36 L1229.17 689.36 L1229.72 689.36 L1230.28 689.36 L1230.84 689.36 L1231.4 689.36 L1231.96 689.36 L1232.52 689.36 L1233.08 689.36 L1233.64 689.36 L1234.2 689.36 L1234.76 689.36 L1235.32 689.36 L1235.88 689.36 L1236.44 689.36 L1236.99 689.36 L1237.55 689.36 L1238.11 689.36 L1238.67 689.36 L1239.23 689.36 L1239.79 689.36 L1240.35 689.36 L1240.91 689.36 L1241.47 689.36 L1242.03 689.36 L1242.59 689.36 L1243.15 689.36 L1243.71 689.36 L1244.26 689.36 L1244.82 689.36 L1245.38 689.36 L1245.94 689.36 L1246.5 689.36 L1247.06 689.36 L1247.62 689.36 L1248.18 689.36 L1248.74 689.36 L1249.3 689.36 L1249.86 689.36 L1250.42 689.36 L1250.98 689.36 L1251.54 689.36 L1252.09 689.36 L1252.65 689.36 L1253.21 689.36 L1253.77 689.36 L1254.33 689.36 L1254.89 689.36 L1255.45 689.36 L1256.01 689.36 L1256.57 689.36 L1257.13 689.36 L1257.69 689.36 L1258.25 689.36 L1258.81 689.36 L1259.36 689.36 L1259.92 689.36 L1260.48 689.36 L1261.04 689.36 L1261.6 689.36 L1262.16 689.36 L1262.72 689.36 L1263.28 689.36 L1263.84 689.36 L1264.4 689.36 L1264.96 689.36 L1265.52 689.36 L1266.08 689.36 L1266.63 689.36 L1267.19 689.36 L1267.75 689.36 L1268.31 689.36 L1268.87 689.36 L1269.43 689.36 L1269.99 689.36 L1270.55 689.36 L1271.11 689.36 L1271.67 689.36 L1272.23 689.36 L1272.79 689.36 L1273.35 689.36 L1273.91 689.36 L1274.46 689.36 L1275.02 689.36 L1275.58 689.36 L1276.14 689.36 L1276.7 689.36 L1277.26 689.36 L1277.82 689.36 L1278.38 689.36 L1278.94 689.36 L1279.5 689.36 L1280.06 689.36 L1280.62 689.36 L1281.18 689.36 L1281.73 689.36 L1282.29 689.36 L1282.85 689.36 L1283.41 689.36 L1283.97 689.36 L1284.53 689.36 L1285.09 689.36 L1285.65 689.36 L1286.21 689.36 L1286.77 689.36 L1287.33 689.36 L1287.89 689.36 L1288.45 689.36 L1289 689.36 L1289.56 689.36 L1290.12 689.36 L1290.68 689.36 L1291.24 689.36 L1291.8 689.36 L1292.36 689.36 L1292.92 689.36 L1293.48 689.36 L1294.04 689.36 L1294.6 689.36 L1295.16 689.36 L1295.72 689.36 L1296.28 689.36 L1296.83 689.36 L1297.39 689.36 L1297.95 689.36 L1298.51 689.36 L1299.07 689.36 L1299.63 689.36 L1300.19 689.36 L1300.75 689.36 L1301.31 689.36 L1301.87 689.36 L1302.43 689.36 L1302.99 689.36 L1303.55 689.36 L1304.1 689.36 L1304.66 689.36 L1305.22 689.36 L1305.78 689.36 L1306.34 689.36 L1306.9 689.36 L1307.46 689.36 L1308.02 689.36 L1308.58 689.36 L1309.14 689.36 L1309.7 689.36 L1310.26 689.36 L1310.82 689.36 L1311.38 689.36 L1311.93 689.36 L1312.49 689.36 L1313.05 689.36 L1313.61 689.36 L1314.17 689.36 L1314.73 689.36 L1315.29 689.36 L1315.85 689.36 L1316.41 689.36 L1316.97 689.36 L1317.53 689.36 L1318.09 689.36 L1318.65 689.36 L1319.2 689.36 L1319.76 689.36 L1320.32 689.36 L1320.88 689.36 L1321.44 689.36 L1322 689.36 L1322.56 689.36 L1323.12 689.36 L1323.68 689.36 L1324.24 689.36 L1324.8 689.36 L1325.36 689.36 L1325.92 689.36 L1326.47 689.36 L1327.03 689.36 L1327.59 689.36 L1328.15 689.36 L1328.71 689.36 L1329.27 689.36 L1329.83 689.36 L1330.39 689.36 L1330.95 689.36 L1331.51 689.36 L1332.07 689.36 L1332.63 689.36 L1333.19 689.36 L1333.75 689.36 L1334.3 689.36 L1334.86 689.36 L1335.42 689.36 L1335.98 689.36 L1336.54 689.36 L1337.1 689.36 L1337.66 689.36 L1338.22 689.36 L1338.78 689.36 L1339.34 689.36 L1339.9 689.36 L1340.46 689.36 L1341.02 689.36 L1341.57 689.36 L1342.13 689.36 L1342.69 689.36 L1343.25 689.36 L1343.81 689.36 L1344.37 689.36 L1344.93 689.36 L1345.49 689.36 L1346.05 689.36 L1346.61 689.36 L1347.17 689.36 L1347.73 689.36 L1348.29 689.36 L1348.84 689.36 L1349.4 689.36 L1349.96 689.36 L1350.52 689.36 L1351.08 689.36 L1351.64 689.36 L1352.2 689.36 L1352.76 689.36 L1353.32 689.36 L1353.88 689.36 L1354.44 689.36 L1355 689.36 L1355.56 689.36 L1356.12 689.36 L1356.67 689.36 L1357.23 689.36 L1357.79 689.36 L1358.35 689.36 L1358.91 689.36 L1359.47 689.36 L1360.03 689.36 L1360.59 689.36 L1361.15 689.36 L1361.71 689.36 L1362.27 689.36 L1362.83 689.36 L1363.39 689.36 L1363.94 689.36 L1364.5 689.36 L1365.06 689.36 L1365.62 689.36 L1366.18 689.36 L1366.74 689.36 L1367.3 689.36 L1367.86 689.36 L1368.42 689.36 L1368.98 689.36 L1369.54 689.36 L1370.1 689.36 L1370.66 689.36 L1371.21 689.36 L1371.77 689.36 L1372.33 689.36 L1372.89 689.36 L1373.45 689.36 L1374.01 689.36 L1374.57 689.36 L1375.13 689.36 L1375.69 689.36 L1376.25 689.36 L1376.81 689.36 L1377.37 689.36 L1377.93 689.36 L1378.49 689.36 L1379.04 689.36 L1379.6 689.36 L1380.16 689.36 L1380.72 689.36 L1381.28 689.36 L1381.84 689.36 L1382.4 689.36 L1382.96 689.36 L1383.52 689.36 L1384.08 689.36 L1384.64 689.36 L1385.2 689.36 L1385.76 689.36 L1386.31 689.36 L1386.87 689.36 L1387.43 689.36 L1387.99 689.36 L1388.55 689.36 L1389.11 689.36 L1389.67 689.36 L1390.23 689.36 L1390.79 689.36 L1391.35 689.36 L1391.91 689.36 L1392.47 689.36 L1393.03 689.36 L1393.58 689.36 L1394.14 689.36 L1394.7 689.36 L1395.26 689.36 L1395.82 689.36 L1396.38 689.36 L1396.94 689.36 L1397.5 689.36 L1398.06 689.36 L1398.62 689.36 L1399.18 689.36 L1399.74 689.36 L1400.3 689.36 L1400.86 689.36 L1401.41 689.36 L1401.97 689.36 L1402.53 689.36 L1403.09 689.36 L1403.65 689.36 L1404.21 689.36 L1404.77 689.36 L1405.33 689.36 L1405.89 689.36 L1406.45 689.36 L1407.01 689.36 L1407.57 689.36 L1408.13 689.36 L1408.68 689.36 L1409.24 689.36 L1409.8 689.36 L1410.36 689.36 L1410.92 689.36 L1411.48 689.36 L1412.04 689.36 L1412.6 689.36 L1413.16 689.36 L1413.72 689.36 L1414.28 689.36 L1414.84 689.36 L1415.4 689.36 L1415.95 689.36 L1416.51 689.36 L1417.07 689.36 L1417.63 689.36 L1418.19 689.36 L1418.75 689.36 L1419.31 689.36 L1419.87 689.36 L1420.43 689.36 L1420.99 689.36 L1421.55 689.36 L1422.11 689.36 L1422.67 689.36 L1423.23 689.36 L1423.78 689.36 L1424.34 689.36 L1424.9 689.36 L1425.46 689.36 L1426.02 689.36 L1426.58 689.36 L1427.14 689.36 L1427.7 689.36 L1428.26 689.36 L1428.82 689.36 L1429.38 689.36 L1429.94 689.36 L1430.5 689.36 L1431.05 689.36 L1431.61 689.36 L1432.17 689.36 L1432.73 689.36 L1433.29 689.36 L1433.85 689.36 L1434.41 689.36 L1434.97 689.36 L1435.53 689.36 L1436.09 689.36 L1436.65 689.36 L1437.21 689.36 L1437.77 689.36 L1438.33 689.36 L1438.88 689.36 L1439.44 689.36 L1440 689.36 L1440.56 689.36 L1441.12 689.36 L1441.68 689.36 L1442.24 689.36 L1442.8 689.36 L1443.36 689.36 L1443.92 689.36 L1444.48 689.36 L1445.04 689.36 L1445.6 689.36 L1446.15 689.36 L1446.71 689.36 L1447.27 689.36 L1447.83 689.36 L1448.39 689.36 L1448.95 689.36 L1449.51 689.36 L1450.07 689.36 L1450.63 689.36 L1451.19 689.36 L1451.75 689.36 L1452.31 689.36 L1452.87 689.36 L1453.42 689.36 L1453.98 689.36 L1454.54 689.36 L1455.1 689.36 L1455.66 689.36 L1456.22 689.36 L1456.78 689.36 L1457.34 689.36 L1457.9 689.36 L1458.46 689.36 L1459.02 689.36 L1459.58 689.36 L1460.14 689.36 L1460.7 689.36 L1461.25 689.36 L1461.81 689.36 L1462.37 689.36 L1462.93 689.36 L1463.49 689.36 L1464.05 689.36 L1464.61 689.36 L1465.17 689.36 L1465.73 689.36 L1466.29 689.36 L1466.85 689.36 L1467.41 689.36 L1467.97 689.36 L1468.52 689.36 L1469.08 689.36 L1469.64 689.36 L1470.2 689.36 L1470.76 689.36 L1471.32 689.36 L1471.88 689.36 L1472.44 689.36 L1473 689.36 L1473.56 689.36 L1474.12 689.36 L1474.68 689.36 L1475.24 689.36 L1475.79 689.36 L1476.35 689.36 L1476.91 689.36 L1477.47 689.36 L1478.03 689.36 L1478.59 689.36 L1479.15 689.36 L1479.71 689.36 L1480.27 689.36 L1480.83 689.36 L1481.39 689.36 L1481.95 689.36 L1482.51 689.36 L1483.07 689.36 L1483.62 689.36 L1484.18 689.36 L1484.74 689.36 L1485.3 689.36 L1485.86 689.36 L1486.42 689.36 L1486.98 689.36 L1487.54 689.36 L1488.1 689.36 L1488.66 689.36 L1489.22 689.36 L1489.78 689.36 L1490.34 689.36 L1490.89 689.36 L1491.45 689.36 L1492.01 689.36 L1492.57 689.36 L1493.13 689.36 L1493.69 689.36 L1494.25 689.36 L1494.81 689.36 L1495.37 689.36 L1495.93 689.36 L1496.49 689.36 L1497.05 689.36 L1497.61 689.36 L1498.16 689.36 L1498.72 689.36 L1499.28 689.36 L1499.84 689.36 L1500.4 689.36 L1500.96 689.36 L1501.52 689.36 L1502.08 689.36 L1502.64 689.36 L1503.2 689.36 L1503.76 689.36 L1504.32 689.36 L1504.88 689.36 L1505.44 689.36 L1505.99 689.36 L1506.55 689.36 L1507.11 689.36 L1507.67 689.36 L1508.23 689.36 L1508.79 689.36 L1509.35 689.36 L1509.91 689.36 L1510.47 689.36 L1511.03 689.36 L1511.59 689.36 L1512.15 689.36 L1512.71 689.36 L1513.26 689.36 L1513.82 689.36 L1514.38 689.36 L1514.94 689.36 L1515.5 689.36 L1516.06 689.36 L1516.62 689.36 L1517.18 689.36 L1517.74 689.36 L1518.3 689.36 L1518.86 689.36 L1519.42 689.36 L1519.98 689.36 L1520.53 689.36 L1521.09 689.36 L1521.65 689.36 L1522.21 689.36 L1522.77 689.36 L1523.33 689.36 L1523.89 689.36 L1524.45 689.36 L1525.01 689.36 L1525.57 689.36 L1526.13 689.36 L1526.69 689.36 L1527.25 689.36 L1527.81 689.36 L1528.36 689.36 L1528.92 689.36 L1529.48 689.36 L1530.04 689.36 L1530.6 689.36 L1531.16 689.36 L1531.72 689.36 L1532.28 689.36 L1532.84 689.36 L1533.4 689.36 L1533.96 689.36 L1534.52 689.36 L1535.08 689.36 L1535.63 689.36 L1536.19 689.36 L1536.75 689.36 L1537.31 689.36 L1537.87 689.36 L1538.43 689.36 L1538.99 689.36 L1539.55 689.36 L1540.11 689.36 L1540.67 689.36 L1541.23 689.36 L1541.79 689.36 L1542.35 689.36 L1542.9 689.36 L1543.46 689.36 L1544.02 689.36 L1544.58 689.36 L1545.14 689.36 L1545.7 689.36 L1546.26 689.36 L1546.82 689.36 L1547.38 689.36 L1547.94 689.36 L1548.5 689.36 L1549.06 689.36 L1549.62 689.36 L1550.18 689.36 L1550.73 689.36 L1551.29 689.36 L1551.85 689.36 L1552.41 689.36 L1552.97 689.36 L1553.53 689.36 L1554.09 689.36 L1554.65 689.36 L1555.21 689.36 L1555.77 689.36 L1556.33 689.36 L1556.89 689.36 L1557.45 689.36 L1558 689.36 L1558.56 689.36 L1559.12 689.36 L1559.68 689.36 L1560.24 689.36 L1560.8 689.36 L1561.36 689.36 L1561.92 689.36 L1562.48 689.36 L1563.04 689.36 L1563.6 689.36 L1564.16 689.36 L1564.72 689.36 L1565.28 689.36 L1565.83 689.36 L1566.39 689.36 L1566.95 689.36 L1567.51 689.36 L1568.07 689.36 L1568.63 689.36 L1569.19 689.36 L1569.75 689.36 L1570.31 689.36 L1570.87 689.36 L1571.43 689.36 L1571.99 689.36 L1572.55 689.36 L1573.1 689.36 L1573.66 689.36 L1574.22 689.36 L1574.78 689.36 L1575.34 689.36 L1575.9 689.36 L1576.46 689.36 L1577.02 689.36 L1577.58 689.36 L1578.14 689.36 L1578.7 689.36 L1579.26 689.36 L1579.82 689.36 L1580.37 689.36 L1580.93 689.36 L1581.49 689.36 L1582.05 689.36 L1582.61 689.36 L1583.17 689.36 L1583.73 689.36 L1584.29 689.36 L1584.85 689.36 L1585.41 689.36 L1585.97 689.36 L1586.53 689.36 L1587.09 689.36 L1587.65 689.36 L1588.2 689.36 L1588.76 689.36 L1589.32 689.36 L1589.88 689.36 L1590.44 689.36 L1591 689.36 L1591.56 689.36 L1592.12 689.36 L1592.68 689.36 L1593.24 689.36 L1593.8 689.36 L1594.36 689.36 L1594.92 689.36 L1595.47 689.36 L1596.03 689.36 L1596.59 689.36 L1597.15 689.36 L1597.71 689.36 L1598.27 689.36 L1598.83 689.36 L1599.39 689.36 L1599.95 689.36 L1600.51 689.36 L1601.07 689.36 L1601.63 689.36 L1602.19 689.36 L1602.74 689.36 L1603.3 689.36 L1603.86 689.36 L1604.42 689.36 L1604.98 689.36 L1605.54 689.36 L1606.1 689.36 L1606.66 689.36 L1607.22 689.36 L1607.78 689.36 L1608.34 689.36 L1608.9 689.36 L1609.46 689.36 L1610.02 689.36 L1610.57 689.36 L1611.13 689.36 L1611.69 689.36 L1612.25 689.36 L1612.81 689.36 L1613.37 689.36 L1613.93 689.36 L1614.49 689.36 L1615.05 689.36 L1615.61 689.36 L1616.17 689.36 L1616.73 689.36 L1617.29 689.36 L1617.84 689.36 L1618.4 689.36 L1618.96 689.36 L1619.52 689.36 L1620.08 689.36 L1620.64 689.36 L1621.2 689.36 L1621.76 689.36 L1622.32 689.36 L1622.88 689.36 L1623.44 689.36 L1624 689.36 L1624.56 689.36 L1625.11 689.36 L1625.67 689.36 L1626.23 689.36 L1626.79 689.36 L1627.35 689.36 L1627.91 689.36 L1628.47 689.36 L1629.03 689.36 L1629.59 689.36 L1630.15 689.36 L1630.71 689.36 L1631.27 689.36 L1631.83 689.36 L1632.39 689.36 L1632.94 689.36 L1633.5 689.36 L1634.06 689.36 L1634.62 689.36 L1635.18 689.36 L1635.74 689.36 L1636.3 689.36 L1636.86 689.36 L1637.42 689.36 L1637.98 689.36 L1638.54 689.36 L1639.1 689.36 L1639.66 689.36 L1640.21 689.36 L1640.77 689.36 L1641.33 689.36 L1641.89 689.36 L1642.45 689.36 L1643.01 689.36 L1643.57 689.36 L1644.13 689.36 L1644.69 689.36 L1645.25 689.36 L1645.81 689.36 L1646.37 689.36 L1646.93 689.36 L1647.48 689.36 L1648.04 689.36 L1648.6 689.36 L1649.16 689.36 L1649.72 689.36 L1650.28 689.36 L1650.84 689.36 L1651.4 689.36 L1651.96 689.36 L1652.52 689.36 L1653.08 689.36 L1653.64 689.36 L1654.2 689.36 L1654.76 689.36 L1655.31 689.36 L1655.87 689.36 L1656.43 689.36 L1656.99 689.36 L1657.55 689.36 L1658.11 689.36 L1658.67 689.36 L1659.23 689.36 L1659.79 689.36 L1660.35 689.36 L1660.91 689.36 L1661.47 689.36 L1662.03 689.36 L1662.58 689.36 L1663.14 689.36 L1663.7 689.36 L1664.26 689.36 L1664.82 689.36 L1665.38 689.36 L1665.94 689.36 L1666.5 689.36 L1667.06 689.36 L1667.62 689.36 L1668.18 689.36 L1668.74 689.36 L1669.3 689.36 L1669.85 689.36 L1670.41 689.36 L1670.97 689.36 L1671.53 689.36 L1672.09 689.36 L1672.65 689.36 L1673.21 689.36 L1673.77 689.36 L1674.33 689.36 L1674.89 689.36 L1675.45 689.36 L1676.01 689.36 L1676.57 689.36 L1677.13 689.36 L1677.68 689.36 L1678.24 689.36 L1678.8 689.36 L1679.36 689.36 L1679.92 689.36 L1680.48 689.36 L1681.04 689.36 L1681.6 689.36 L1682.16 689.36 L1682.72 689.36 L1683.28 689.36 L1683.84 689.36 L1684.4 689.36 L1684.95 689.36 L1685.51 689.36 L1686.07 689.36 L1686.63 689.36 L1687.19 689.36 L1687.75 689.36 L1688.31 689.36 L1688.87 689.36 L1689.43 689.36 L1689.99 689.36 L1690.55 689.36 L1691.11 689.36 L1691.67 689.36 L1692.23 689.36 L1692.78 689.36 L1693.34 689.36 L1693.9 689.36 L1694.46 689.36 L1695.02 689.36 L1695.58 689.36 L1696.14 689.36 L1696.7 689.36 L1697.26 689.36 L1697.82 689.36 L1698.38 689.36 L1698.94 689.36 L1699.5 689.36 L1700.05 689.36 L1700.61 689.36 L1701.17 689.36 L1701.73 689.36 L1702.29 689.36 L1702.85 689.36 L1703.41 689.36 L1703.97 689.36 L1704.53 689.36 L1705.09 689.36 L1705.65 689.36 L1706.21 689.36 L1706.77 689.36 L1707.32 689.36 L1707.88 689.36 L1708.44 689.36 L1709 689.36 L1709.56 689.36 L1710.12 689.36 L1710.68 689.36 L1711.24 689.36 L1711.8 689.36 L1712.36 689.36 L1712.92 689.36 L1713.48 689.36 L1714.04 689.36 L1714.6 689.36 L1715.15 689.36 L1715.71 689.36 L1716.27 689.36 L1716.83 689.36 L1717.39 689.36 L1717.95 689.36 L1718.51 689.36 L1719.07 689.36 L1719.63 689.36 L1720.19 689.36 L1720.75 689.36 L1721.31 689.36 L1721.87 689.36 L1722.42 689.36 L1722.98 689.36 L1723.54 689.36 L1724.1 689.36 L1724.66 689.36 L1725.22 689.36 L1725.78 689.36 L1726.34 689.36 L1726.9 689.36 L1727.46 689.36 L1728.02 689.36 L1728.58 689.36 L1729.14 689.36 L1729.69 689.36 L1730.25 689.36 L1730.81 689.36 L1731.37 689.36 L1731.93 689.36 L1732.49 689.36 L1733.05 689.36 L1733.61 689.36 L1734.17 689.36 L1734.73 689.36 L1735.29 689.36 L1735.85 689.36 L1736.41 689.36 L1736.97 689.36 L1737.52 689.36 L1738.08 689.36 L1738.64 689.36 L1739.2 689.36 L1739.76 689.36 L1740.32 689.36 L1740.88 689.36 L1741.44 689.36 L1742 689.36 L1742.56 689.36 L1743.12 689.36 L1743.68 689.36 L1744.24 689.36 L1744.79 689.36 L1745.35 689.36 L1745.91 689.36 L1746.47 689.36 L1747.03 689.36 L1747.59 689.36 L1748.15 689.36 L1748.71 689.36 L1749.27 689.36 L1749.83 689.36 L1750.39 689.36 L1750.95 689.36 L1751.51 689.36 L1752.06 689.36 L1752.62 689.36 L1753.18 689.36 L1753.74 689.36 L1754.3 689.36 L1754.86 689.36 L1755.42 689.36 L1755.98 689.36 L1756.54 689.36 L1757.1 689.36 L1757.66 689.36 L1758.22 689.36 L1758.78 689.36 L1759.34 689.36 L1759.89 689.36 L1760.45 689.36 L1761.01 689.36 L1761.57 689.36 L1762.13 689.36 L1762.69 689.36 L1763.25 689.36 L1763.81 689.36 L1764.37 689.36 L1764.93 689.36 L1765.49 689.36 L1766.05 689.36 L1766.61 689.36 L1767.16 689.36 L1767.72 689.36 L1768.28 689.36 L1768.84 689.36 L1769.4 689.36 L1769.96 689.36 L1770.52 689.36 L1771.08 689.36 L1771.64 689.36 L1772.2 689.36 L1772.76 689.36 L1773.32 689.36 L1773.88 689.36 L1774.43 689.36 L1774.99 689.36 L1775.55 689.36 L1776.11 689.36 L1776.67 689.36 L1777.23 689.36 L1777.79 689.36 L1778.35 689.36 L1778.91 689.36 L1779.47 689.36 L1780.03 689.36 L1780.59 689.36 L1781.15 689.36 L1781.71 689.36 L1782.26 689.36 L1782.82 689.36 L1783.38 689.36 L1783.94 689.36 L1784.5 689.36 L1785.06 689.36 L1785.62 689.36 L1786.18 689.36 L1786.74 689.36 L1787.3 689.36 L1787.86 689.36 L1788.42 689.36 L1788.98 689.36 L1789.53 689.36 L1790.09 689.36 L1790.65 689.36 L1791.21 689.36 L1791.77 689.36 L1792.33 689.36 L1792.89 689.36 L1793.45 689.36 L1794.01 689.36 L1794.57 689.36 L1795.13 689.36 L1795.69 689.36 L1796.25 689.36 L1796.8 689.36 L1797.36 689.36 L1797.92 689.36 L1798.48 689.36 L1799.04 689.36 L1799.6 689.36 L1800.16 689.36 L1800.72 689.36 L1801.28 689.36 L1801.84 689.36 L1802.4 689.36 L1802.96 689.36 L1803.52 689.36 L1804.08 689.36 L1804.63 689.36 L1805.19 689.36 L1805.75 689.36 L1806.31 689.36 L1806.87 689.36 L1807.43 689.36 L1807.99 689.36 L1808.55 689.36 L1809.11 689.36 L1809.67 689.36 L1810.23 689.36 L1810.79 689.36 L1811.35 689.36 L1811.9 689.36 L1812.46 689.36 L1813.02 689.36 L1813.58 689.36 L1814.14 689.36 L1814.7 689.36 L1815.26 689.36 L1815.82 689.36 L1816.38 689.36 L1816.94 689.36 L1817.5 689.36 L1818.06 689.36 L1818.62 689.36 L1819.18 689.36 L1819.73 689.36 L1820.29 689.36 L1820.85 689.36 L1821.41 689.36 L1821.97 689.36 L1822.53 689.36 L1823.09 689.36 L1823.65 689.36 L1824.21 689.36 L1824.77 689.36 L1825.33 689.36 L1825.89 689.36 L1826.45 689.36 L1827 689.36 L1827.56 689.36 L1828.12 689.36 L1828.68 689.36 L1829.24 689.36 L1829.8 689.36 L1830.36 689.36 L1830.92 689.36 L1831.48 689.36 L1832.04 689.36 L1832.6 689.36 L1833.16 689.36 L1833.72 689.36 L1834.27 689.36 L1834.83 689.36 L1835.39 689.36 L1835.95 689.36 L1836.51 689.36 L1837.07 689.36 L1837.63 689.36 L1838.19 689.36 L1838.19 680.656 L1837.63 680.656 L1837.07 680.656 L1836.51 680.656 L1835.95 680.656 L1835.39 680.656 L1834.83 680.656 L1834.27 680.656 L1833.72 680.656 L1833.16 680.656 L1832.6 680.656 L1832.04 680.656 L1831.48 680.656 L1830.92 680.656 L1830.36 680.656 L1829.8 680.656 L1829.24 680.656 L1828.68 680.656 L1828.12 680.656 L1827.56 680.656 L1827 680.656 L1826.45 680.656 L1825.89 680.656 L1825.33 680.656 L1824.77 680.656 L1824.21 680.656 L1823.65 680.656 L1823.09 680.656 L1822.53 680.656 L1821.97 680.656 L1821.41 680.656 L1820.85 680.656 L1820.29 680.656 L1819.73 680.656 L1819.18 680.656 L1818.62 680.656 L1818.06 680.656 L1817.5 680.656 L1816.94 680.656 L1816.38 680.656 L1815.82 680.656 L1815.26 680.656 L1814.7 680.656 L1814.14 680.656 L1813.58 680.656 L1813.02 680.656 L1812.46 680.656 L1811.9 680.656 L1811.35 680.656 L1810.79 680.656 L1810.23 680.656 L1809.67 680.656 L1809.11 680.656 L1808.55 680.656 L1807.99 680.656 L1807.43 680.656 L1806.87 680.656 L1806.31 680.656 L1805.75 680.656 L1805.19 680.656 L1804.63 680.656 L1804.08 680.656 L1803.52 680.656 L1802.96 680.656 L1802.4 680.656 L1801.84 680.656 L1801.28 680.656 L1800.72 680.656 L1800.16 680.656 L1799.6 680.656 L1799.04 680.656 L1798.48 680.656 L1797.92 680.656 L1797.36 680.656 L1796.8 680.656 L1796.25 680.656 L1795.69 680.656 L1795.13 680.656 L1794.57 680.656 L1794.01 680.656 L1793.45 680.656 L1792.89 680.656 L1792.33 680.656 L1791.77 680.656 L1791.21 680.656 L1790.65 680.656 L1790.09 680.656 L1789.53 680.656 L1788.98 680.656 L1788.42 680.656 L1787.86 680.656 L1787.3 680.656 L1786.74 680.656 L1786.18 680.656 L1785.62 680.656 L1785.06 680.656 L1784.5 680.656 L1783.94 680.656 L1783.38 680.656 L1782.82 680.656 L1782.26 680.656 L1781.71 680.656 L1781.15 680.656 L1780.59 680.656 L1780.03 680.656 L1779.47 680.656 L1778.91 680.656 L1778.35 680.656 L1777.79 680.656 L1777.23 680.656 L1776.67 680.656 L1776.11 680.656 L1775.55 680.656 L1774.99 680.656 L1774.43 680.656 L1773.88 680.656 L1773.32 680.656 L1772.76 680.656 L1772.2 680.656 L1771.64 680.656 L1771.08 680.656 L1770.52 680.656 L1769.96 680.656 L1769.4 680.656 L1768.84 680.656 L1768.28 680.656 L1767.72 680.656 L1767.16 680.656 L1766.61 680.656 L1766.05 680.656 L1765.49 680.656 L1764.93 680.656 L1764.37 680.656 L1763.81 680.656 L1763.25 680.656 L1762.69 680.656 L1762.13 680.656 L1761.57 680.656 L1761.01 680.656 L1760.45 680.656 L1759.89 680.656 L1759.34 680.656 L1758.78 680.656 L1758.22 680.656 L1757.66 680.656 L1757.1 680.656 L1756.54 680.656 L1755.98 680.656 L1755.42 680.656 L1754.86 680.656 L1754.3 680.656 L1753.74 680.656 L1753.18 680.656 L1752.62 680.656 L1752.06 680.656 L1751.51 680.656 L1750.95 680.656 L1750.39 680.656 L1749.83 680.656 L1749.27 680.656 L1748.71 680.656 L1748.15 680.656 L1747.59 680.656 L1747.03 680.656 L1746.47 680.656 L1745.91 680.656 L1745.35 680.656 L1744.79 680.656 L1744.24 680.656 L1743.68 680.656 L1743.12 680.656 L1742.56 680.656 L1742 680.656 L1741.44 680.656 L1740.88 680.656 L1740.32 680.656 L1739.76 680.656 L1739.2 680.656 L1738.64 680.656 L1738.08 680.656 L1737.52 680.656 L1736.97 680.656 L1736.41 680.656 L1735.85 680.656 L1735.29 680.656 L1734.73 680.656 L1734.17 680.656 L1733.61 680.656 L1733.05 680.656 L1732.49 680.656 L1731.93 680.656 L1731.37 680.656 L1730.81 680.656 L1730.25 680.656 L1729.69 680.656 L1729.14 680.656 L1728.58 680.656 L1728.02 680.656 L1727.46 680.656 L1726.9 680.656 L1726.34 680.656 L1725.78 680.656 L1725.22 680.656 L1724.66 680.656 L1724.1 680.656 L1723.54 680.656 L1722.98 680.656 L1722.42 680.656 L1721.87 680.656 L1721.31 680.656 L1720.75 680.656 L1720.19 680.656 L1719.63 680.656 L1719.07 680.656 L1718.51 680.656 L1717.95 680.656 L1717.39 680.656 L1716.83 680.656 L1716.27 680.656 L1715.71 680.656 L1715.15 680.656 L1714.6 680.656 L1714.04 680.656 L1713.48 680.656 L1712.92 680.656 L1712.36 680.656 L1711.8 680.656 L1711.24 680.656 L1710.68 680.656 L1710.12 680.656 L1709.56 680.656 L1709 680.656 L1708.44 680.656 L1707.88 680.656 L1707.32 680.656 L1706.77 680.656 L1706.21 680.656 L1705.65 680.656 L1705.09 680.656 L1704.53 680.656 L1703.97 680.656 L1703.41 680.656 L1702.85 680.656 L1702.29 680.656 L1701.73 680.656 L1701.17 680.656 L1700.61 680.656 L1700.05 680.656 L1699.5 680.656 L1698.94 680.656 L1698.38 680.656 L1697.82 680.656 L1697.26 680.656 L1696.7 680.656 L1696.14 680.656 L1695.58 680.656 L1695.02 680.656 L1694.46 680.656 L1693.9 680.656 L1693.34 680.656 L1692.78 680.656 L1692.23 680.656 L1691.67 680.656 L1691.11 680.656 L1690.55 680.656 L1689.99 680.656 L1689.43 680.656 L1688.87 680.656 L1688.31 680.656 L1687.75 680.656 L1687.19 680.656 L1686.63 680.656 L1686.07 680.656 L1685.51 680.656 L1684.95 680.656 L1684.4 680.656 L1683.84 680.656 L1683.28 680.656 L1682.72 680.656 L1682.16 680.656 L1681.6 680.656 L1681.04 680.656 L1680.48 680.656 L1679.92 680.656 L1679.36 680.656 L1678.8 680.656 L1678.24 680.656 L1677.68 680.656 L1677.13 680.656 L1676.57 680.656 L1676.01 680.656 L1675.45 680.656 L1674.89 680.656 L1674.33 680.656 L1673.77 680.656 L1673.21 680.656 L1672.65 680.656 L1672.09 680.656 L1671.53 680.656 L1670.97 680.656 L1670.41 680.656 L1669.85 680.656 L1669.3 680.656 L1668.74 680.656 L1668.18 680.656 L1667.62 680.656 L1667.06 680.656 L1666.5 680.656 L1665.94 680.656 L1665.38 680.656 L1664.82 680.656 L1664.26 680.656 L1663.7 680.656 L1663.14 680.656 L1662.58 680.656 L1662.03 680.656 L1661.47 680.656 L1660.91 680.656 L1660.35 680.656 L1659.79 680.656 L1659.23 680.656 L1658.67 680.656 L1658.11 680.656 L1657.55 680.656 L1656.99 680.656 L1656.43 680.656 L1655.87 680.656 L1655.31 680.656 L1654.76 680.656 L1654.2 680.656 L1653.64 680.656 L1653.08 680.656 L1652.52 680.656 L1651.96 680.656 L1651.4 680.656 L1650.84 680.656 L1650.28 680.656 L1649.72 680.656 L1649.16 680.656 L1648.6 680.656 L1648.04 680.656 L1647.48 680.656 L1646.93 680.656 L1646.37 680.656 L1645.81 680.656 L1645.25 680.656 L1644.69 680.656 L1644.13 680.656 L1643.57 680.656 L1643.01 680.656 L1642.45 680.656 L1641.89 680.656 L1641.33 680.656 L1640.77 680.656 L1640.21 680.656 L1639.66 680.656 L1639.1 680.656 L1638.54 680.656 L1637.98 680.656 L1637.42 680.656 L1636.86 680.656 L1636.3 680.656 L1635.74 680.656 L1635.18 680.656 L1634.62 680.656 L1634.06 680.656 L1633.5 680.656 L1632.94 680.656 L1632.39 680.656 L1631.83 680.656 L1631.27 680.656 L1630.71 680.656 L1630.15 680.656 L1629.59 680.656 L1629.03 680.656 L1628.47 680.656 L1627.91 680.656 L1627.35 680.656 L1626.79 680.656 L1626.23 680.656 L1625.67 680.656 L1625.11 680.656 L1624.56 680.656 L1624 680.656 L1623.44 680.656 L1622.88 680.656 L1622.32 680.656 L1621.76 680.656 L1621.2 680.656 L1620.64 680.656 L1620.08 680.656 L1619.52 680.656 L1618.96 680.656 L1618.4 680.656 L1617.84 680.656 L1617.29 680.656 L1616.73 680.656 L1616.17 680.656 L1615.61 680.656 L1615.05 680.656 L1614.49 680.656 L1613.93 680.656 L1613.37 680.656 L1612.81 680.656 L1612.25 680.656 L1611.69 680.656 L1611.13 680.656 L1610.57 680.656 L1610.02 680.656 L1609.46 680.656 L1608.9 680.656 L1608.34 680.656 L1607.78 680.656 L1607.22 680.656 L1606.66 680.656 L1606.1 680.656 L1605.54 680.656 L1604.98 680.656 L1604.42 680.656 L1603.86 680.656 L1603.3 680.656 L1602.74 680.656 L1602.19 680.656 L1601.63 680.656 L1601.07 680.656 L1600.51 680.656 L1599.95 680.656 L1599.39 680.656 L1598.83 680.656 L1598.27 680.656 L1597.71 680.656 L1597.15 680.656 L1596.59 680.656 L1596.03 680.656 L1595.47 680.656 L1594.92 680.656 L1594.36 680.656 L1593.8 680.656 L1593.24 680.656 L1592.68 680.656 L1592.12 680.656 L1591.56 680.656 L1591 680.656 L1590.44 680.656 L1589.88 680.656 L1589.32 680.656 L1588.76 680.656 L1588.2 680.656 L1587.65 680.656 L1587.09 680.656 L1586.53 680.656 L1585.97 680.656 L1585.41 680.656 L1584.85 680.656 L1584.29 680.656 L1583.73 680.656 L1583.17 680.656 L1582.61 680.656 L1582.05 680.656 L1581.49 680.656 L1580.93 680.656 L1580.37 680.656 L1579.82 680.656 L1579.26 680.656 L1578.7 680.656 L1578.14 680.656 L1577.58 680.656 L1577.02 680.656 L1576.46 680.656 L1575.9 680.656 L1575.34 680.656 L1574.78 680.656 L1574.22 680.656 L1573.66 680.656 L1573.1 680.656 L1572.55 680.656 L1571.99 680.656 L1571.43 680.656 L1570.87 680.656 L1570.31 680.656 L1569.75 680.656 L1569.19 680.656 L1568.63 680.656 L1568.07 680.656 L1567.51 680.656 L1566.95 680.656 L1566.39 680.656 L1565.83 680.656 L1565.28 680.656 L1564.72 680.656 L1564.16 680.656 L1563.6 680.656 L1563.04 680.656 L1562.48 680.656 L1561.92 680.656 L1561.36 680.656 L1560.8 680.656 L1560.24 680.656 L1559.68 680.656 L1559.12 680.656 L1558.56 680.656 L1558 680.656 L1557.45 680.656 L1556.89 680.656 L1556.33 680.656 L1555.77 680.656 L1555.21 680.656 L1554.65 680.656 L1554.09 680.656 L1553.53 680.656 L1552.97 680.656 L1552.41 680.656 L1551.85 680.656 L1551.29 680.656 L1550.73 680.656 L1550.18 680.656 L1549.62 680.656 L1549.06 680.656 L1548.5 680.656 L1547.94 680.656 L1547.38 680.656 L1546.82 680.656 L1546.26 680.656 L1545.7 680.656 L1545.14 680.656 L1544.58 680.656 L1544.02 680.656 L1543.46 680.656 L1542.9 680.656 L1542.35 680.656 L1541.79 680.656 L1541.23 680.656 L1540.67 680.656 L1540.11 680.656 L1539.55 680.656 L1538.99 680.656 L1538.43 680.656 L1537.87 680.656 L1537.31 680.656 L1536.75 680.656 L1536.19 680.656 L1535.63 680.656 L1535.08 680.656 L1534.52 680.656 L1533.96 680.656 L1533.4 680.656 L1532.84 680.656 L1532.28 680.656 L1531.72 680.656 L1531.16 680.656 L1530.6 680.656 L1530.04 680.656 L1529.48 680.656 L1528.92 680.656 L1528.36 680.656 L1527.81 680.656 L1527.25 680.656 L1526.69 680.656 L1526.13 680.656 L1525.57 680.656 L1525.01 680.656 L1524.45 680.656 L1523.89 680.656 L1523.33 680.656 L1522.77 680.656 L1522.21 680.656 L1521.65 680.656 L1521.09 680.656 L1520.53 680.656 L1519.98 680.656 L1519.42 680.656 L1518.86 680.656 L1518.3 680.656 L1517.74 680.656 L1517.18 680.656 L1516.62 680.656 L1516.06 680.656 L1515.5 680.656 L1514.94 680.656 L1514.38 680.656 L1513.82 680.656 L1513.26 680.656 L1512.71 680.656 L1512.15 680.656 L1511.59 680.656 L1511.03 680.656 L1510.47 680.656 L1509.91 680.656 L1509.35 680.656 L1508.79 680.656 L1508.23 680.656 L1507.67 680.656 L1507.11 680.656 L1506.55 680.656 L1505.99 680.656 L1505.44 680.656 L1504.88 680.656 L1504.32 680.656 L1503.76 680.656 L1503.2 680.656 L1502.64 680.656 L1502.08 680.656 L1501.52 680.656 L1500.96 680.656 L1500.4 680.656 L1499.84 680.656 L1499.28 680.656 L1498.72 680.656 L1498.16 680.656 L1497.61 680.656 L1497.05 680.656 L1496.49 680.656 L1495.93 680.656 L1495.37 680.656 L1494.81 680.656 L1494.25 680.656 L1493.69 680.656 L1493.13 680.656 L1492.57 680.656 L1492.01 680.656 L1491.45 680.656 L1490.89 680.656 L1490.34 680.656 L1489.78 680.656 L1489.22 680.656 L1488.66 680.656 L1488.1 680.656 L1487.54 680.656 L1486.98 680.656 L1486.42 680.656 L1485.86 680.656 L1485.3 680.656 L1484.74 680.656 L1484.18 680.656 L1483.62 680.656 L1483.07 680.656 L1482.51 680.656 L1481.95 680.656 L1481.39 680.656 L1480.83 680.656 L1480.27 680.656 L1479.71 680.656 L1479.15 680.656 L1478.59 680.656 L1478.03 680.656 L1477.47 680.656 L1476.91 680.656 L1476.35 680.656 L1475.79 680.656 L1475.24 680.656 L1474.68 680.656 L1474.12 680.656 L1473.56 680.656 L1473 680.656 L1472.44 680.656 L1471.88 680.656 L1471.32 680.656 L1470.76 680.656 L1470.2 680.656 L1469.64 680.656 L1469.08 680.656 L1468.52 680.656 L1467.97 680.656 L1467.41 680.656 L1466.85 680.656 L1466.29 680.656 L1465.73 680.656 L1465.17 680.656 L1464.61 680.656 L1464.05 680.656 L1463.49 680.656 L1462.93 680.656 L1462.37 680.656 L1461.81 680.656 L1461.25 680.656 L1460.7 680.656 L1460.14 680.656 L1459.58 680.656 L1459.02 680.656 L1458.46 680.656 L1457.9 680.656 L1457.34 680.656 L1456.78 680.656 L1456.22 680.656 L1455.66 680.656 L1455.1 680.656 L1454.54 680.656 L1453.98 680.656 L1453.42 680.656 L1452.87 680.656 L1452.31 680.656 L1451.75 680.656 L1451.19 680.656 L1450.63 680.656 L1450.07 680.656 L1449.51 680.656 L1448.95 680.656 L1448.39 680.656 L1447.83 680.656 L1447.27 680.656 L1446.71 680.656 L1446.15 680.656 L1445.6 680.656 L1445.04 680.656 L1444.48 680.656 L1443.92 680.656 L1443.36 680.656 L1442.8 680.656 L1442.24 680.656 L1441.68 680.656 L1441.12 680.656 L1440.56 680.656 L1440 680.656 L1439.44 680.656 L1438.88 680.656 L1438.33 680.656 L1437.77 680.656 L1437.21 680.656 L1436.65 680.656 L1436.09 680.656 L1435.53 680.656 L1434.97 680.656 L1434.41 680.656 L1433.85 680.656 L1433.29 680.656 L1432.73 680.656 L1432.17 680.656 L1431.61 680.656 L1431.05 680.656 L1430.5 680.656 L1429.94 680.656 L1429.38 680.656 L1428.82 680.656 L1428.26 680.656 L1427.7 680.656 L1427.14 680.656 L1426.58 680.656 L1426.02 680.656 L1425.46 680.656 L1424.9 680.656 L1424.34 680.656 L1423.78 680.656 L1423.23 680.656 L1422.67 680.656 L1422.11 680.656 L1421.55 680.656 L1420.99 680.656 L1420.43 680.656 L1419.87 680.656 L1419.31 680.656 L1418.75 680.656 L1418.19 680.656 L1417.63 680.656 L1417.07 680.656 L1416.51 680.656 L1415.95 680.656 L1415.4 680.656 L1414.84 680.656 L1414.28 680.656 L1413.72 680.656 L1413.16 680.656 L1412.6 680.656 L1412.04 680.656 L1411.48 680.656 L1410.92 680.656 L1410.36 680.656 L1409.8 680.656 L1409.24 680.656 L1408.68 680.656 L1408.13 680.656 L1407.57 680.656 L1407.01 680.656 L1406.45 680.656 L1405.89 680.656 L1405.33 680.656 L1404.77 680.656 L1404.21 680.656 L1403.65 680.656 L1403.09 680.656 L1402.53 680.656 L1401.97 680.656 L1401.41 680.656 L1400.86 680.656 L1400.3 680.656 L1399.74 680.656 L1399.18 680.656 L1398.62 680.656 L1398.06 680.656 L1397.5 680.656 L1396.94 680.656 L1396.38 680.656 L1395.82 680.656 L1395.26 680.656 L1394.7 680.656 L1394.14 680.656 L1393.58 680.656 L1393.03 680.656 L1392.47 680.656 L1391.91 680.656 L1391.35 680.656 L1390.79 680.656 L1390.23 680.656 L1389.67 680.656 L1389.11 680.656 L1388.55 680.656 L1387.99 680.656 L1387.43 680.656 L1386.87 680.656 L1386.31 680.656 L1385.76 680.656 L1385.2 680.656 L1384.64 680.656 L1384.08 680.656 L1383.52 680.656 L1382.96 680.656 L1382.4 680.656 L1381.84 680.656 L1381.28 680.656 L1380.72 680.656 L1380.16 680.656 L1379.6 680.656 L1379.04 680.656 L1378.49 680.656 L1377.93 680.656 L1377.37 680.656 L1376.81 680.656 L1376.25 680.656 L1375.69 680.656 L1375.13 680.656 L1374.57 680.656 L1374.01 680.656 L1373.45 680.656 L1372.89 680.656 L1372.33 680.656 L1371.77 680.656 L1371.21 680.656 L1370.66 680.656 L1370.1 680.656 L1369.54 680.656 L1368.98 680.656 L1368.42 680.656 L1367.86 680.656 L1367.3 680.656 L1366.74 680.656 L1366.18 680.656 L1365.62 680.656 L1365.06 680.656 L1364.5 680.656 L1363.94 680.656 L1363.39 680.656 L1362.83 680.656 L1362.27 680.656 L1361.71 680.656 L1361.15 680.656 L1360.59 680.656 L1360.03 680.656 L1359.47 680.656 L1358.91 680.656 L1358.35 680.656 L1357.79 680.656 L1357.23 680.656 L1356.67 680.656 L1356.12 680.656 L1355.56 680.656 L1355 680.656 L1354.44 680.656 L1353.88 680.656 L1353.32 680.656 L1352.76 680.656 L1352.2 680.656 L1351.64 680.656 L1351.08 680.656 L1350.52 680.656 L1349.96 680.656 L1349.4 680.656 L1348.84 680.656 L1348.29 680.656 L1347.73 680.656 L1347.17 680.656 L1346.61 680.656 L1346.05 680.656 L1345.49 680.656 L1344.93 680.656 L1344.37 680.656 L1343.81 680.656 L1343.25 680.656 L1342.69 680.656 L1342.13 680.656 L1341.57 680.656 L1341.02 680.656 L1340.46 680.656 L1339.9 680.656 L1339.34 680.656 L1338.78 680.656 L1338.22 680.656 L1337.66 680.656 L1337.1 680.656 L1336.54 680.656 L1335.98 680.656 L1335.42 680.656 L1334.86 680.656 L1334.3 680.656 L1333.75 680.656 L1333.19 680.656 L1332.63 680.656 L1332.07 680.656 L1331.51 680.656 L1330.95 680.656 L1330.39 680.656 L1329.83 680.656 L1329.27 680.656 L1328.71 680.656 L1328.15 680.656 L1327.59 680.656 L1327.03 680.656 L1326.47 680.656 L1325.92 680.656 L1325.36 680.656 L1324.8 680.656 L1324.24 680.656 L1323.68 680.656 L1323.12 680.656 L1322.56 680.656 L1322 680.656 L1321.44 680.656 L1320.88 680.656 L1320.32 680.656 L1319.76 680.656 L1319.2 680.656 L1318.65 680.656 L1318.09 680.656 L1317.53 680.656 L1316.97 680.656 L1316.41 680.656 L1315.85 680.656 L1315.29 680.656 L1314.73 680.656 L1314.17 680.656 L1313.61 680.656 L1313.05 680.656 L1312.49 680.656 L1311.93 680.656 L1311.38 680.656 L1310.82 680.656 L1310.26 680.656 L1309.7 680.656 L1309.14 680.656 L1308.58 680.656 L1308.02 680.656 L1307.46 680.656 L1306.9 680.656 L1306.34 680.656 L1305.78 680.656 L1305.22 680.656 L1304.66 680.656 L1304.1 680.656 L1303.55 680.656 L1302.99 680.656 L1302.43 680.656 L1301.87 680.656 L1301.31 680.656 L1300.75 680.656 L1300.19 680.656 L1299.63 680.656 L1299.07 680.656 L1298.51 680.656 L1297.95 680.656 L1297.39 680.656 L1296.83 680.656 L1296.28 680.656 L1295.72 680.656 L1295.16 680.656 L1294.6 680.656 L1294.04 680.656 L1293.48 680.656 L1292.92 680.656 L1292.36 680.656 L1291.8 680.656 L1291.24 680.656 L1290.68 680.656 L1290.12 680.656 L1289.56 680.656 L1289 680.656 L1288.45 680.656 L1287.89 680.656 L1287.33 680.656 L1286.77 680.656 L1286.21 680.656 L1285.65 680.656 L1285.09 680.656 L1284.53 680.656 L1283.97 680.656 L1283.41 680.656 L1282.85 680.656 L1282.29 680.656 L1281.73 680.656 L1281.18 680.656 L1280.62 680.656 L1280.06 680.656 L1279.5 680.656 L1278.94 680.656 L1278.38 680.656 L1277.82 680.656 L1277.26 680.656 L1276.7 680.656 L1276.14 680.656 L1275.58 680.656 L1275.02 680.656 L1274.46 680.656 L1273.91 680.656 L1273.35 680.656 L1272.79 680.656 L1272.23 680.656 L1271.67 680.656 L1271.11 680.656 L1270.55 680.656 L1269.99 680.656 L1269.43 680.656 L1268.87 680.656 L1268.31 680.656 L1267.75 680.656 L1267.19 680.656 L1266.63 680.656 L1266.08 680.656 L1265.52 680.656 L1264.96 680.656 L1264.4 680.656 L1263.84 680.656 L1263.28 680.656 L1262.72 680.656 L1262.16 680.656 L1261.6 680.656 L1261.04 680.656 L1260.48 680.656 L1259.92 680.656 L1259.36 680.656 L1258.81 680.656 L1258.25 680.656 L1257.69 680.656 L1257.13 680.656 L1256.57 680.656 L1256.01 680.656 L1255.45 680.656 L1254.89 680.656 L1254.33 680.656 L1253.77 680.656 L1253.21 680.656 L1252.65 680.656 L1252.09 680.656 L1251.54 680.656 L1250.98 680.656 L1250.42 680.656 L1249.86 680.656 L1249.3 680.656 L1248.74 680.656 L1248.18 680.656 L1247.62 680.656 L1247.06 680.656 L1246.5 680.656 L1245.94 680.656 L1245.38 680.656 L1244.82 680.656 L1244.26 680.656 L1243.71 680.656 L1243.15 680.656 L1242.59 680.656 L1242.03 680.656 L1241.47 680.656 L1240.91 680.656 L1240.35 680.656 L1239.79 680.656 L1239.23 680.656 L1238.67 680.656 L1238.11 680.656 L1237.55 680.656 L1236.99 680.656 L1236.44 680.656 L1235.88 680.656 L1235.32 680.656 L1234.76 680.656 L1234.2 680.656 L1233.64 680.656 L1233.08 680.656 L1232.52 680.656 L1231.96 680.656 L1231.4 680.656 L1230.84 680.656 L1230.28 680.656 L1229.72 680.656 L1229.17 680.656 L1228.61 680.656 L1228.05 680.656 L1227.49 680.656 L1226.93 680.656 L1226.37 680.656 L1225.81 680.656 L1225.25 680.656 L1224.69 680.656 L1224.13 680.656 L1223.57 680.656 L1223.01 680.656 L1222.45 680.656 L1221.89 680.656 L1221.34 680.656 L1220.78 680.656 L1220.22 680.656 L1219.66 680.656 L1219.1 680.656 L1218.54 680.656 L1217.98 680.656 L1217.42 680.656 L1216.86 680.656 L1216.3 680.656 L1215.74 680.656 L1215.18 680.656 L1214.62 680.656 L1214.07 680.656 L1213.51 680.656 L1212.95 680.656 L1212.39 680.656 L1211.83 680.656 L1211.27 680.656 L1210.71 680.656 L1210.15 680.656 L1209.59 680.656 L1209.03 680.656 L1208.47 680.656 L1207.91 680.656 L1207.35 680.656 L1206.8 680.656 L1206.24 680.656 L1205.68 680.656 L1205.12 680.656 L1204.56 680.656 L1204 680.656 L1203.44 680.656 L1202.88 680.656 L1202.32 680.656 L1201.76 680.656 L1201.2 680.656 L1200.64 680.656 L1200.08 680.656 L1199.52 680.656 L1198.97 680.656 L1198.41 680.656 L1197.85 680.656 L1197.29 680.656 L1196.73 680.656 L1196.17 680.656 L1195.61 680.656 L1195.05 680.656 L1194.49 680.656 L1193.93 680.656 L1193.37 680.656 L1192.81 680.656 L1192.25 680.656 L1191.7 680.656 L1191.14 680.656 L1190.58 680.656 L1190.02 680.656 L1189.46 680.656 L1188.9 680.656 L1188.34 680.656 L1187.78 680.656 L1187.22 680.656 L1186.66 680.656 L1186.1 680.656 L1185.54 680.656 L1184.98 680.656 L1184.43 680.656 L1183.87 680.656 L1183.31 680.656 L1182.75 680.656 L1182.19 680.656 L1181.63 680.656 L1181.07 680.656 L1180.51 680.656 L1179.95 680.656 L1179.39 680.656 L1178.83 680.656 L1178.27 680.656 L1177.71 680.656 L1177.15 680.656 L1176.6 680.656 L1176.04 680.656 L1175.48 680.656 L1174.92 680.656 L1174.36 680.656 L1173.8 680.656 L1173.24 680.656 L1172.68 680.656 L1172.12 680.656 L1171.56 680.656 L1171 680.656 L1170.44 680.656 L1169.88 680.656 L1169.33 680.656 L1168.77 680.656 L1168.21 680.656 L1167.65 680.656 L1167.09 680.656 L1166.53 680.656 L1165.97 680.656 L1165.41 680.656 L1164.85 680.656 L1164.29 680.656 L1163.73 680.656 L1163.17 680.656 L1162.61 680.656 L1162.05 680.656 L1161.5 680.656 L1160.94 680.656 L1160.38 680.656 L1159.82 680.656 L1159.26 680.656 L1158.7 680.656 L1158.14 680.656 L1157.58 680.656 L1157.02 680.656 L1156.46 680.656 L1155.9 680.656 L1155.34 680.656 L1154.78 680.656 L1154.23 680.656 L1153.67 680.656 L1153.11 680.656 L1152.55 680.656 L1151.99 680.656 L1151.43 680.656 L1150.87 680.656 L1150.31 680.656 L1149.75 680.656 L1149.19 680.656 L1148.63 680.656 L1148.07 680.656 L1147.51 680.656 L1146.96 680.656 L1146.4 680.656 L1145.84 680.656 L1145.28 680.656 L1144.72 680.656 L1144.16 680.656 L1143.6 680.656 L1143.04 680.656 L1142.48 680.656 L1141.92 680.656 L1141.36 680.656 L1140.8 680.656 L1140.24 680.656 L1139.68 680.656 L1139.13 680.656 L1138.57 680.656 L1138.01 680.656 L1137.45 680.656 L1136.89 680.656 L1136.33 680.656 L1135.77 680.656 L1135.21 680.656 L1134.65 680.656 L1134.09 680.656 L1133.53 680.656 L1132.97 680.656 L1132.41 680.656 L1131.86 680.656 L1131.3 680.656 L1130.74 680.656 L1130.18 680.656 L1129.62 680.656 L1129.06 680.656 L1128.5 680.656 L1127.94 680.656 L1127.38 680.656 L1126.82 680.656 L1126.26 680.656 L1125.7 680.656 L1125.14 680.656 L1124.59 680.656 L1124.03 680.656 L1123.47 680.656 L1122.91 680.656 L1122.35 680.656 L1121.79 680.656 L1121.23 680.656 L1120.67 680.656 L1120.11 680.656 L1119.55 680.656 L1118.99 680.656 L1118.43 680.656 L1117.87 680.656 L1117.31 680.656 L1116.76 680.656 L1116.2 680.656 L1115.64 680.656 L1115.08 680.656 L1114.52 680.656 L1113.96 680.656 L1113.4 680.656 L1112.84 680.656 L1112.28 680.656 L1111.72 680.656 L1111.16 680.656 L1110.6 680.656 L1110.04 680.656 L1109.49 680.656 L1108.93 680.656 L1108.37 680.656 L1107.81 680.656 L1107.25 680.656 L1106.69 680.656 L1106.13 680.656 L1105.57 680.656 L1105.01 680.656 L1104.45 680.656 L1103.89 680.656 L1103.33 680.656 L1102.77 680.656 L1102.22 680.656 L1101.66 680.656 L1101.1 680.656 L1100.54 680.656 L1099.98 680.656 L1099.42 680.656 L1098.86 680.656 L1098.3 680.656 L1097.74 680.656 L1097.18 680.656 L1096.62 680.656 L1096.06 680.656 L1095.5 680.656 L1094.94 680.656 L1094.39 680.656 L1093.83 680.656 L1093.27 680.656 L1092.71 680.656 L1092.15 680.656 L1091.59 680.656 L1091.03 680.656 L1090.47 680.656 L1089.91 680.656 L1089.35 680.656 L1088.79 680.656 L1088.23 680.656 L1087.67 680.656 L1087.12 680.656 L1086.56 680.656 L1086 680.656 L1085.44 680.656 L1084.88 680.656 L1084.32 680.656 L1083.76 680.656 L1083.2 680.656 L1082.64 680.656 L1082.08 680.656 L1081.52 680.656 L1080.96 680.656 L1080.4 680.656 L1079.85 680.656 L1079.29 680.656 L1078.73 680.656 L1078.17 680.656 L1077.61 680.656 L1077.05 680.656 L1076.49 680.656 L1075.93 680.656 L1075.37 680.656 L1074.81 680.656 L1074.25 680.656 L1073.69 680.656 L1073.13 680.656 L1072.57 680.656 L1072.02 680.656 L1071.46 680.656 L1070.9 680.656 L1070.34 680.656 L1069.78 680.656 L1069.22 680.656 L1068.66 680.656 L1068.1 680.656 L1067.54 680.656 L1066.98 680.656 L1066.42 680.656 L1065.86 680.656 L1065.3 680.656 L1064.75 680.656 L1064.19 680.656 L1063.63 680.656 L1063.07 680.656 L1062.51 680.656 L1061.95 680.656 L1061.39 680.656 L1060.83 680.656 L1060.27 680.656 L1059.71 680.656 L1059.15 680.656 L1058.59 680.656 L1058.03 680.656 L1057.48 680.656 L1056.92 680.656 L1056.36 680.656 L1055.8 680.656 L1055.24 680.656 L1054.68 680.656 L1054.12 680.656 L1053.56 680.656 L1053 680.656 L1052.44 680.656 L1051.88 680.656 L1051.32 680.656 L1050.76 680.656 L1050.2 680.656 L1049.65 680.656 L1049.09 680.656 L1048.53 680.656 L1047.97 680.656 L1047.41 680.656 L1046.85 680.656 L1046.29 680.656 L1045.73 680.656 L1045.17 680.656 L1044.61 680.656 L1044.05 680.656 L1043.49 680.656 L1042.93 680.656 L1042.38 680.656 L1041.82 680.656 L1041.26 680.656 L1040.7 680.656 L1040.14 680.656 L1039.58 680.656 L1039.02 680.656 L1038.46 680.656 L1037.9 680.656 L1037.34 680.656 L1036.78 680.656 L1036.22 680.656 L1035.66 680.656 L1035.1 680.656 L1034.55 680.656 L1033.99 680.656 L1033.43 680.656 L1032.87 680.656 L1032.31 680.656 L1031.75 680.656 L1031.19 680.656 L1030.63 680.656 L1030.07 680.656 L1029.51 680.656 L1028.95 680.656 L1028.39 680.656 L1027.83 680.656 L1027.28 680.656 L1026.72 680.656 L1026.16 680.656 L1025.6 680.656 L1025.04 680.656 L1024.48 680.656 L1023.92 680.656 L1023.36 680.656 L1022.8 680.656 L1022.24 680.656 L1021.68 680.656 L1021.12 680.656 L1020.56 680.656 L1020.01 680.656 L1019.45 680.656 L1018.89 680.656 L1018.33 680.656 L1017.77 680.656 L1017.21 680.656 L1016.65 680.656 L1016.09 680.656 L1015.53 680.656 L1014.97 680.656 L1014.41 680.656 L1013.85 680.656 L1013.29 680.656 L1012.73 680.656 L1012.18 680.656 L1011.62 680.656 L1011.06 680.656 L1010.5 680.656 L1009.94 680.656 L1009.38 680.656 L1008.82 680.656 L1008.26 680.656 L1007.7 680.656 L1007.14 680.656 L1006.58 680.656 L1006.02 680.656 L1005.46 680.656 L1004.91 680.656 L1004.35 680.656 L1003.79 680.656 L1003.23 680.656 L1002.67 680.656 L1002.11 680.656 L1001.55 680.656 L1000.99 680.656 L1000.43 680.656 L999.872 680.656 L999.313 680.656 L998.754 680.656 L998.194 680.656 L997.635 680.656 L997.076 680.656 L996.517 680.656 L995.957 680.656 L995.398 680.656 L994.839 680.656 L994.28 680.656 L993.72 680.656 L993.161 680.656 L992.602 680.656 L992.043 680.656 L991.483 680.656 L990.924 680.656 L990.365 680.656 L989.806 680.656 L989.246 680.656 L988.687 680.656 L988.128 680.656 L987.569 680.656 L987.009 680.656 L986.45 680.656 L985.891 680.656 L985.332 680.656 L984.772 680.656 L984.213 680.656 L983.654 680.656 L983.095 680.656 L982.535 680.656 L981.976 680.656 L981.417 680.656 L980.858 680.656 L980.298 680.656 L979.739 680.656 L979.18 680.656 L978.621 680.656 L978.061 680.656 L977.502 680.656 L976.943 680.656 L976.384 680.656 L975.824 680.656 L975.265 680.656 L974.706 680.656 L974.147 680.656 L973.587 680.656 L973.028 680.656 L972.469 680.656 L971.91 680.656 L971.35 680.656 L970.791 680.656 L970.232 680.656 L969.673 680.656 L969.113 680.656 L968.554 680.656 L967.995 680.656 L967.436 680.656 L966.876 680.656 L966.317 680.656 L965.758 680.656 L965.199 680.656 L964.639 680.656 L964.08 680.656 L963.521 680.656 L962.962 680.656 L962.402 680.656 L961.843 680.656 L961.284 680.656 L960.725 680.656 L960.165 680.656 L959.606 680.656 L959.047 680.656 L958.488 680.656 L957.928 680.656 L957.369 680.656 L956.81 680.656 L956.251 680.656 L955.691 680.656 L955.132 680.656 L954.573 680.656 L954.014 680.656 L953.454 680.656 L952.895 680.656 L952.336 680.656 L951.777 680.656 L951.217 680.656 L950.658 680.656 L950.099 680.656 L949.54 680.656 L948.98 680.656 L948.421 680.656 L947.862 680.656 L947.303 680.656 L946.743 680.656 L946.184 680.656 L945.625 680.656 L945.066 680.656 L944.506 680.656 L943.947 680.656 L943.388 680.656 L942.829 680.656 L942.269 680.656 L941.71 680.656 L941.151 680.656 L940.592 680.656 L940.032 680.656 L939.473 680.656 L938.914 680.656 L938.355 680.656 L937.795 680.656 L937.236 680.656 L936.677 680.656 L936.118 680.656 L935.558 680.656 L934.999 680.656 L934.44 680.656 L933.881 680.656 L933.321 680.656 L932.762 680.656 L932.203 680.656 L931.644 680.656 L931.084 680.656 L930.525 680.656 L929.966 680.656 L929.406 680.656 L928.847 680.656 L928.288 680.656 L927.729 680.656 L927.169 680.656 L926.61 680.656 L926.051 680.656 L925.492 680.656 L924.932 680.656 L924.373 680.656 L923.814 680.656 L923.255 680.656 L922.695 680.656 L922.136 680.656 L921.577 680.656 L921.018 680.656 L920.458 680.656 L919.899 680.656 L919.34 680.656 L918.781 680.656 L918.221 680.656 L917.662 680.656 L917.103 680.656 L916.544 680.656 L915.984 680.656 L915.425 680.656 L914.866 680.656 L914.307 680.656 L913.747 680.656 L913.188 680.656 L912.629 680.656 L912.07 680.656 L911.51 680.656 L910.951 680.656 L910.392 680.656 L909.833 680.656 L909.273 680.656 L908.714 680.656 L908.155 680.656 L907.596 680.656 L907.036 680.656 L906.477 680.656 L905.918 680.656 L905.359 680.656 L904.799 680.656 L904.24 680.656 L903.681 680.656 L903.122 680.656 L902.562 680.656 L902.003 680.656 L901.444 680.656 L900.885 680.656 L900.325 680.656 L899.766 680.656 L899.207 680.656 L898.648 680.656 L898.088 680.656 L897.529 680.656 L896.97 680.656 L896.411 680.656 L895.851 680.656 L895.292 680.656 L894.733 680.656 L894.174 680.656 L893.614 680.656 L893.055 680.656 L892.496 680.656 L891.937 680.656 L891.377 680.656 L890.818 680.656 L890.259 680.656 L889.7 680.656 L889.14 680.656 L888.581 680.656 L888.022 680.656 L887.463 680.656 L886.903 680.656 L886.344 680.656 L885.785 680.656 L885.226 680.656 L884.666 680.656 L884.107 680.656 L883.548 680.656 L882.989 680.656 L882.429 680.656 L881.87 680.656 L881.311 680.656 L880.752 680.656 L880.192 680.656 L879.633 680.656 L879.074 680.656 L878.515 680.656 L877.955 680.656 L877.396 680.656 L876.837 680.656 L876.278 680.656 L875.718 680.656 L875.159 680.656 L874.6 680.656 L874.041 680.656 L873.481 680.656 L872.922 680.656 L872.363 680.656 L871.804 680.656 L871.244 680.656 L870.685 680.656 L870.126 680.656 L869.567 680.656 L869.007 680.656 L868.448 680.656 L867.889 680.656 L867.33 680.656 L866.77 680.656 L866.211 680.656 L865.652 680.656 L865.093 680.656 L864.533 680.656 L863.974 680.656 L863.415 680.656 L862.856 680.656 L862.296 680.656 L861.737 680.656 L861.178 680.656 L860.619 680.656 L860.059 680.656 L859.5 680.656 L858.941 680.656 L858.382 680.656 L857.822 680.656 L857.263 680.656 L856.704 680.656 L856.145 680.656 L855.585 680.656 L855.026 680.656 L854.467 680.656 L853.908 680.656 L853.348 680.656 L852.789 680.656 L852.23 680.656 L851.671 680.656 L851.111 680.656 L850.552 680.656 L849.993 680.656 L849.434 680.656 L848.874 680.656 L848.315 680.656 L847.756 680.656 L847.197 680.656 L846.637 680.656 L846.078 680.656 L845.519 680.656 L844.96 680.656 L844.4 680.656 L843.841 680.656 L843.282 680.656 L842.723 680.656 L842.163 680.656 L841.604 680.656 L841.045 680.656 L840.486 680.656 L839.926 680.656 L839.367 680.656 L838.808 680.656 L838.249 680.656 L837.689 680.656 L837.13 680.656 L836.571 680.656 L836.012 680.656 L835.452 680.656 L834.893 680.656 L834.334 680.656 L833.775 680.656 L833.215 680.656 L832.656 680.656 L832.097 680.656 L831.538 680.656 L830.978 680.656 L830.419 680.656 L829.86 680.656 L829.301 680.656 L828.741 680.656 L828.182 680.656 L827.623 680.656 L827.064 680.656 L826.504 680.656 L825.945 680.656 L825.386 680.656 L824.827 680.656 L824.267 680.656 L823.708 680.656 L823.149 680.656 L822.59 680.656 L822.03 680.656 L821.471 680.656 L820.912 680.656 L820.353 680.656 L819.793 680.656 L819.234 680.656 L818.675 680.656 L818.116 680.656 L817.556 680.656 L816.997 680.656 L816.438 680.656 L815.879 680.656 L815.319 680.656 L814.76 680.656 L814.201 680.656 L813.642 680.656 L813.082 680.656 L812.523 680.656 L811.964 680.656 L811.405 680.656 L810.845 680.656 L810.286 680.656 L809.727 680.656 L809.168 680.656 L808.608 680.656 L808.049 680.656 L807.49 680.656 L806.931 680.656 L806.371 680.656 L805.812 680.656 L805.253 680.656 L804.693 680.656 L804.134 680.656 L803.575 680.656 L803.016 680.656 L802.456 680.656 L801.897 680.656 L801.338 680.656 L800.779 680.656 L800.219 680.656 L799.66 680.656 L799.101 680.656 L798.542 680.656 L797.982 680.656 L797.423 680.656 L796.864 680.656 L796.305 680.656 L795.745 680.656 L795.186 680.656 L794.627 680.656 L794.068 680.656 L793.508 680.656 L792.949 680.656 L792.39 680.656 L791.831 680.656 L791.271 680.656 L790.712 680.656 L790.153 680.656 L789.594 680.656 L789.034 680.656 L788.475 680.656 L787.916 680.656 L787.357 680.656 L786.797 680.656 L786.238 680.656 L785.679 680.656 L785.12 680.656 L784.56 680.656 L784.001 680.656 L783.442 680.656 L782.883 680.656 L782.323 680.656 L781.764 680.656 L781.205 680.656 L780.646 680.656 L780.086 680.656 L779.527 680.656 L778.968 680.656 L778.409 680.656 L777.849 680.656 L777.29 680.656 L776.731 680.656 L776.172 680.656 L775.612 680.656 L775.053 680.656 L774.494 680.656 L773.935 680.656 L773.375 680.656 L772.816 680.656 L772.257 680.656 L771.698 680.656 L771.138 680.656 L770.579 680.656 L770.02 680.656 L769.461 680.656 L768.901 680.656 L768.342 680.656 L767.783 680.656 L767.224 680.656 L766.664 680.656 L766.105 680.656 L765.546 680.656 L764.987 680.656 L764.427 680.656 L763.868 680.656 L763.309 680.656 L762.75 680.656 L762.19 680.656 L761.631 680.656 L761.072 680.656 L760.513 680.656 L759.953 680.656 L759.394 680.656 L758.835 680.656 L758.276 680.656 L757.716 680.656 L757.157 680.656 L756.598 680.656 L756.039 680.656 L755.479 680.656 L754.92 680.656 L754.361 680.656 L753.802 680.656 L753.242 680.656 L752.683 680.656 L752.124 680.656 L751.565 680.656 L751.005 680.656 L750.446 680.656 L749.887 680.656 L749.328 680.656 L748.768 680.656 L748.209 680.656 L747.65 680.656 L747.091 680.656 L746.531 680.656 L745.972 680.656 L745.413 680.656 L744.854 680.656 L744.294 680.656 L743.735 680.656 L743.176 680.656 L742.617 680.656 L742.057 680.656 L741.498 680.656 L740.939 680.656 L740.38 680.656 L739.82 680.656 L739.261 680.656 L738.702 680.656 L738.143 680.656 L737.583 680.656 L737.024 680.656 L736.465 680.656 L735.906 680.656 L735.346 680.656 L734.787 680.656 L734.228 680.656 L733.669 680.656 L733.109 680.656 L732.55 680.656 L731.991 680.656 L731.432 680.656 L730.872 680.656 L730.313 680.656 L729.754 680.656 L729.195 680.656 L728.635 680.656 L728.076 680.656 L727.517 680.656 L726.958 680.656 L726.398 680.656 L725.839 680.656 L725.28 680.656 L724.721 680.656 L724.161 680.656 L723.602 680.656 L723.043 680.656 L722.484 680.656 L721.924 680.656 L721.365 680.656 L720.806 680.656 L720.247 680.656  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.008 720.806,685.008 721.365,685.008 721.924,685.008 722.484,685.008 723.043,685.008 723.602,685.008 724.161,685.008 724.721,685.008 725.28,685.008 725.839,685.008 726.398,685.008 726.958,685.008 727.517,685.008 728.076,685.008 728.635,685.008 729.195,685.008 729.754,685.008 730.313,685.008 730.872,685.008 731.432,685.008 731.991,685.008 732.55,685.008 733.109,685.008 733.669,685.008 734.228,685.008 734.787,685.008 735.346,685.008 735.906,685.008 736.465,685.008 737.024,685.008 737.583,685.008 738.143,685.008 738.702,685.008 739.261,685.008 739.82,685.008 740.38,685.008 740.939,685.008 741.498,685.008 742.057,685.008 742.617,685.008 743.176,685.008 743.735,685.008 744.294,685.008 744.854,685.008 745.413,685.008 745.972,685.008 746.531,685.008 747.091,685.008 747.65,685.008 748.209,685.008 748.768,685.008 749.328,685.008 749.887,685.008 750.446,685.008 751.005,685.008 751.565,685.008 752.124,685.008 752.683,685.008 753.242,685.008 753.802,685.008 754.361,685.008 754.92,685.008 755.479,685.008 756.039,685.008 756.598,685.008 757.157,685.008 757.716,685.008 758.276,685.008 758.835,685.008 759.394,685.008 759.953,685.008 760.513,685.008 761.072,685.008 761.631,685.008 762.19,685.008 762.75,685.008 763.309,685.008 763.868,685.008 764.427,685.008 764.987,685.008 765.546,685.008 766.105,685.008 766.664,685.008 767.224,685.008 767.783,685.008 768.342,685.008 768.901,685.008 769.461,685.008 770.02,685.008 770.579,685.008 771.138,685.008 771.698,685.008 772.257,685.008 772.816,685.008 773.375,685.008 773.935,685.008 774.494,685.008 775.053,685.008 775.612,685.008 776.172,685.008 776.731,685.008 777.29,685.008 777.849,685.008 778.409,685.008 778.968,685.008 779.527,685.008 780.086,685.008 780.646,685.008 781.205,685.008 781.764,685.008 782.323,685.008 782.883,685.008 783.442,685.008 784.001,685.008 784.56,685.008 785.12,685.008 785.679,685.008 786.238,685.008 786.797,685.008 787.357,685.008 787.916,685.008 788.475,685.008 789.034,685.008 789.594,685.008 790.153,685.008 790.712,685.008 791.271,685.008 791.831,685.008 792.39,685.008 792.949,685.008 793.508,685.008 794.068,685.008 794.627,685.008 795.186,685.008 795.745,685.008 796.305,685.008 796.864,685.008 797.423,685.008 797.982,685.008 798.542,685.008 799.101,685.008 799.66,685.008 800.219,685.008 800.779,685.008 801.338,685.008 801.897,685.008 802.456,685.008 803.016,685.008 803.575,685.008 804.134,685.008 804.693,685.008 805.253,685.008 805.812,685.008 806.371,685.008 806.931,685.008 807.49,685.008 808.049,685.008 808.608,685.008 809.168,685.008 809.727,685.008 810.286,685.008 810.845,685.008 811.405,685.008 811.964,685.008 812.523,685.008 813.082,685.008 813.642,685.008 814.201,685.008 814.76,685.008 815.319,685.008 815.879,685.008 816.438,685.008 816.997,685.008 817.556,685.008 818.116,685.008 818.675,685.008 819.234,685.008 819.793,685.008 820.353,685.008 820.912,685.008 821.471,685.008 822.03,685.008 822.59,685.008 823.149,685.008 823.708,685.008 824.267,685.008 824.827,685.008 825.386,685.008 825.945,685.008 826.504,685.008 827.064,685.008 827.623,685.008 828.182,685.008 828.741,685.008 829.301,685.008 829.86,685.008 830.419,685.008 830.978,685.008 831.538,685.008 832.097,685.008 832.656,685.008 833.215,685.008 833.775,685.008 834.334,685.008 834.893,685.008 835.452,685.008 836.012,685.008 836.571,685.008 837.13,685.008 837.689,685.008 838.249,685.008 838.808,685.008 839.367,685.008 839.926,685.008 840.486,685.008 841.045,685.008 841.604,685.008 842.163,685.008 842.723,685.008 843.282,685.008 843.841,685.008 844.4,685.008 844.96,685.008 845.519,685.008 846.078,685.008 846.637,685.008 847.197,685.008 847.756,685.008 848.315,685.008 848.874,685.008 849.434,685.008 849.993,685.008 850.552,685.008 851.111,685.008 851.671,685.008 852.23,685.008 852.789,685.008 853.348,685.008 853.908,685.008 854.467,685.008 855.026,685.008 855.585,685.008 856.145,685.008 856.704,685.008 857.263,685.008 857.822,685.008 858.382,685.008 858.941,685.008 859.5,685.008 860.059,685.008 860.619,685.008 861.178,685.008 861.737,685.008 862.296,685.008 862.856,685.008 863.415,685.008 863.974,685.008 864.533,685.008 865.093,685.008 865.652,685.008 866.211,685.008 866.77,685.008 867.33,685.008 867.889,685.008 868.448,685.008 869.007,685.008 869.567,685.008 870.126,685.008 870.685,685.008 871.244,685.008 871.804,685.008 872.363,685.008 872.922,685.008 873.481,685.008 874.041,685.008 874.6,685.008 875.159,685.008 875.718,685.008 876.278,685.008 876.837,685.008 877.396,685.008 877.955,685.008 878.515,685.008 879.074,685.008 879.633,685.008 880.192,685.008 880.752,685.008 881.311,685.008 881.87,685.008 882.429,685.008 882.989,685.008 883.548,685.008 884.107,685.008 884.666,685.008 885.226,685.008 885.785,685.008 886.344,685.008 886.903,685.008 887.463,685.008 888.022,685.008 888.581,685.008 889.14,685.008 889.7,685.008 890.259,685.008 890.818,685.008 891.377,685.008 891.937,685.008 892.496,685.008 893.055,685.008 893.614,685.008 894.174,685.008 894.733,685.008 895.292,685.008 895.851,685.008 896.411,685.008 896.97,685.008 897.529,685.008 898.088,685.008 898.648,685.008 899.207,685.008 899.766,685.008 900.325,685.008 900.885,685.008 901.444,685.008 902.003,685.008 902.562,685.008 903.122,685.008 903.681,685.008 904.24,685.008 904.799,685.008 905.359,685.008 905.918,685.008 906.477,685.008 907.036,685.008 907.596,685.008 908.155,685.008 908.714,685.008 909.273,685.008 909.833,685.008 910.392,685.008 910.951,685.008 911.51,685.008 912.07,685.008 912.629,685.008 913.188,685.008 913.747,685.008 914.307,685.008 914.866,685.008 915.425,685.008 915.984,685.008 916.544,685.008 917.103,685.008 917.662,685.008 918.221,685.008 918.781,685.008 919.34,685.008 919.899,685.008 920.458,685.008 921.018,685.008 921.577,685.008 922.136,685.008 922.695,685.008 923.255,685.008 923.814,685.008 924.373,685.008 924.932,685.008 925.492,685.008 926.051,685.008 926.61,685.008 927.169,685.008 927.729,685.008 928.288,685.008 928.847,685.008 929.406,685.008 929.966,685.008 930.525,685.008 931.084,685.008 931.644,685.008 932.203,685.008 932.762,685.008 933.321,685.008 933.881,685.008 934.44,685.008 934.999,685.008 935.558,685.008 936.118,685.008 936.677,685.008 937.236,685.008 937.795,685.008 938.355,685.008 938.914,685.008 939.473,685.008 940.032,685.008 940.592,685.008 941.151,685.008 941.71,685.008 942.269,685.008 942.829,685.008 943.388,685.008 943.947,685.008 944.506,685.008 945.066,685.008 945.625,685.008 946.184,685.008 946.743,685.008 947.303,685.008 947.862,685.008 948.421,685.008 948.98,685.008 949.54,685.008 950.099,685.008 950.658,685.008 951.217,685.008 951.777,685.008 952.336,685.008 952.895,685.008 953.454,685.008 954.014,685.008 954.573,685.008 955.132,685.008 955.691,685.008 956.251,685.008 956.81,685.008 957.369,685.008 957.928,685.008 958.488,685.008 959.047,685.008 959.606,685.008 960.165,685.008 960.725,685.008 961.284,685.008 961.843,685.008 962.402,685.008 962.962,685.008 963.521,685.008 964.08,685.008 964.639,685.008 965.199,685.008 965.758,685.008 966.317,685.008 966.876,685.008 967.436,685.008 967.995,685.008 968.554,685.008 969.113,685.008 969.673,685.008 970.232,685.008 970.791,685.008 971.35,685.008 971.91,685.008 972.469,685.008 973.028,685.008 973.587,685.008 974.147,685.008 974.706,685.008 975.265,685.008 975.824,685.008 976.384,685.008 976.943,685.008 977.502,685.008 978.061,685.008 978.621,685.008 979.18,685.008 979.739,685.008 980.298,685.008 980.858,685.008 981.417,685.008 981.976,685.008 982.535,685.008 983.095,685.008 983.654,685.008 984.213,685.008 984.772,685.008 985.332,685.008 985.891,685.008 986.45,685.008 987.009,685.008 987.569,685.008 988.128,685.008 988.687,685.008 989.246,685.008 989.806,685.008 990.365,685.008 990.924,685.008 991.483,685.008 992.043,685.008 992.602,685.008 993.161,685.008 993.72,685.008 994.28,685.008 994.839,685.008 995.398,685.008 995.957,685.008 996.517,685.008 997.076,685.008 997.635,685.008 998.194,685.008 998.754,685.008 999.313,685.008 999.872,685.008 1000.43,685.008 1000.99,685.008 1001.55,685.008 1002.11,685.008 1002.67,685.008 1003.23,685.008 1003.79,685.008 1004.35,685.008 1004.91,685.008 1005.46,685.008 1006.02,685.008 1006.58,685.008 1007.14,685.008 1007.7,685.008 1008.26,685.008 1008.82,685.008 1009.38,685.008 1009.94,685.008 1010.5,685.008 1011.06,685.008 1011.62,685.008 1012.18,685.008 1012.73,685.008 1013.29,685.008 1013.85,685.008 1014.41,685.008 1014.97,685.008 1015.53,685.008 1016.09,685.008 1016.65,685.008 1017.21,685.008 1017.77,685.008 1018.33,685.008 1018.89,685.008 1019.45,685.008 1020.01,685.008 1020.56,685.008 1021.12,685.008 1021.68,685.008 1022.24,685.008 1022.8,685.008 1023.36,685.008 1023.92,685.008 1024.48,685.008 1025.04,685.008 1025.6,685.008 1026.16,685.008 1026.72,685.008 1027.28,685.008 1027.83,685.008 1028.39,685.008 1028.95,685.008 1029.51,685.008 1030.07,685.008 1030.63,685.008 1031.19,685.008 1031.75,685.008 1032.31,685.008 1032.87,685.008 1033.43,685.008 1033.99,685.008 1034.55,685.008 1035.1,685.008 1035.66,685.008 1036.22,685.008 1036.78,685.008 1037.34,685.008 1037.9,685.008 1038.46,685.008 1039.02,685.008 1039.58,685.008 1040.14,685.008 1040.7,685.008 1041.26,685.008 1041.82,685.008 1042.38,685.008 1042.93,685.008 1043.49,685.008 1044.05,685.008 1044.61,685.008 1045.17,685.008 1045.73,685.008 1046.29,685.008 1046.85,685.008 1047.41,685.008 1047.97,685.008 1048.53,685.008 1049.09,685.008 1049.65,685.008 1050.2,685.008 1050.76,685.008 1051.32,685.008 1051.88,685.008 1052.44,685.008 1053,685.008 1053.56,685.008 1054.12,685.008 1054.68,685.008 1055.24,685.008 1055.8,685.008 1056.36,685.008 1056.92,685.008 1057.48,685.008 1058.03,685.008 1058.59,685.008 1059.15,685.008 1059.71,685.008 1060.27,685.008 1060.83,685.008 1061.39,685.008 1061.95,685.008 1062.51,685.008 1063.07,685.008 1063.63,685.008 1064.19,685.008 1064.75,685.008 1065.3,685.008 1065.86,685.008 1066.42,685.008 1066.98,685.008 1067.54,685.008 1068.1,685.008 1068.66,685.008 1069.22,685.008 1069.78,685.008 1070.34,685.008 1070.9,685.008 1071.46,685.008 1072.02,685.008 1072.57,685.008 1073.13,685.008 1073.69,685.008 1074.25,685.008 1074.81,685.008 1075.37,685.008 1075.93,685.008 1076.49,685.008 1077.05,685.008 1077.61,685.008 1078.17,685.008 1078.73,685.008 1079.29,685.008 1079.85,685.008 1080.4,685.008 1080.96,685.008 1081.52,685.008 1082.08,685.008 1082.64,685.008 1083.2,685.008 1083.76,685.008 1084.32,685.008 1084.88,685.008 1085.44,685.008 1086,685.008 1086.56,685.008 1087.12,685.008 1087.67,685.008 1088.23,685.008 1088.79,685.008 1089.35,685.008 1089.91,685.008 1090.47,685.008 1091.03,685.008 1091.59,685.008 1092.15,685.008 1092.71,685.008 1093.27,685.008 1093.83,685.008 1094.39,685.008 1094.94,685.008 1095.5,685.008 1096.06,685.008 1096.62,685.008 1097.18,685.008 1097.74,685.008 1098.3,685.008 1098.86,685.008 1099.42,685.008 1099.98,685.008 1100.54,685.008 1101.1,685.008 1101.66,685.008 1102.22,685.008 1102.77,685.008 1103.33,685.008 1103.89,685.008 1104.45,685.008 1105.01,685.008 1105.57,685.008 1106.13,685.008 1106.69,685.008 1107.25,685.008 1107.81,685.008 1108.37,685.008 1108.93,685.008 1109.49,685.008 1110.04,685.008 1110.6,685.008 1111.16,685.008 1111.72,685.008 1112.28,685.008 1112.84,685.008 1113.4,685.008 1113.96,685.008 1114.52,685.008 1115.08,685.008 1115.64,685.008 1116.2,685.008 1116.76,685.008 1117.31,685.008 1117.87,685.008 1118.43,685.008 1118.99,685.008 1119.55,685.008 1120.11,685.008 1120.67,685.008 1121.23,685.008 1121.79,685.008 1122.35,685.008 1122.91,685.008 1123.47,685.008 1124.03,685.008 1124.59,685.008 1125.14,685.008 1125.7,685.008 1126.26,685.008 1126.82,685.008 1127.38,685.008 1127.94,685.008 1128.5,685.008 1129.06,685.008 1129.62,685.008 1130.18,685.008 1130.74,685.008 1131.3,685.008 1131.86,685.008 1132.41,685.008 1132.97,685.008 1133.53,685.008 1134.09,685.008 1134.65,685.008 1135.21,685.008 1135.77,685.008 1136.33,685.008 1136.89,685.008 1137.45,685.008 1138.01,685.008 1138.57,685.008 1139.13,685.008 1139.68,685.008 1140.24,685.008 1140.8,685.008 1141.36,685.008 1141.92,685.008 1142.48,685.008 1143.04,685.008 1143.6,685.008 1144.16,685.008 1144.72,685.008 1145.28,685.008 1145.84,685.008 1146.4,685.008 1146.96,685.008 1147.51,685.008 1148.07,685.008 1148.63,685.008 1149.19,685.008 1149.75,685.008 1150.31,685.008 1150.87,685.008 1151.43,685.008 1151.99,685.008 1152.55,685.008 1153.11,685.008 1153.67,685.008 1154.23,685.008 1154.78,685.008 1155.34,685.008 1155.9,685.008 1156.46,685.008 1157.02,685.008 1157.58,685.008 1158.14,685.008 1158.7,685.008 1159.26,685.008 1159.82,685.008 1160.38,685.008 1160.94,685.008 1161.5,685.008 1162.05,685.008 1162.61,685.008 1163.17,685.008 1163.73,685.008 1164.29,685.008 1164.85,685.008 1165.41,685.008 1165.97,685.008 1166.53,685.008 1167.09,685.008 1167.65,685.008 1168.21,685.008 1168.77,685.008 1169.33,685.008 1169.88,685.008 1170.44,685.008 1171,685.008 1171.56,685.008 1172.12,685.008 1172.68,685.008 1173.24,685.008 1173.8,685.008 1174.36,685.008 1174.92,685.008 1175.48,685.008 1176.04,685.008 1176.6,685.008 1177.15,685.008 1177.71,685.008 1178.27,685.008 1178.83,685.008 1179.39,685.008 1179.95,685.008 1180.51,685.008 1181.07,685.008 1181.63,685.008 1182.19,685.008 1182.75,685.008 1183.31,685.008 1183.87,685.008 1184.43,685.008 1184.98,685.008 1185.54,685.008 1186.1,685.008 1186.66,685.008 1187.22,685.008 1187.78,685.008 1188.34,685.008 1188.9,685.008 1189.46,685.008 1190.02,685.008 1190.58,685.008 1191.14,685.008 1191.7,685.008 1192.25,685.008 1192.81,685.008 1193.37,685.008 1193.93,685.008 1194.49,685.008 1195.05,685.008 1195.61,685.008 1196.17,685.008 1196.73,685.008 1197.29,685.008 1197.85,685.008 1198.41,685.008 1198.97,685.008 1199.52,685.008 1200.08,685.008 1200.64,685.008 1201.2,685.008 1201.76,685.008 1202.32,685.008 1202.88,685.008 1203.44,685.008 1204,685.008 1204.56,685.008 1205.12,685.008 1205.68,685.008 1206.24,685.008 1206.8,685.008 1207.35,685.008 1207.91,685.008 1208.47,685.008 1209.03,685.008 1209.59,685.008 1210.15,685.008 1210.71,685.008 1211.27,685.008 1211.83,685.008 1212.39,685.008 1212.95,685.008 1213.51,685.008 1214.07,685.008 1214.62,685.008 1215.18,685.008 1215.74,685.008 1216.3,685.008 1216.86,685.008 1217.42,685.008 1217.98,685.008 1218.54,685.008 1219.1,685.008 1219.66,685.008 1220.22,685.008 1220.78,685.008 1221.34,685.008 1221.89,685.008 1222.45,685.008 1223.01,685.008 1223.57,685.008 1224.13,685.008 1224.69,685.008 1225.25,685.008 1225.81,685.008 1226.37,685.008 1226.93,685.008 1227.49,685.008 1228.05,685.008 1228.61,685.008 1229.17,685.008 1229.72,685.008 1230.28,685.008 1230.84,685.008 1231.4,685.008 1231.96,685.008 1232.52,685.008 1233.08,685.008 1233.64,685.008 1234.2,685.008 1234.76,685.008 1235.32,685.008 1235.88,685.008 1236.44,685.008 1236.99,685.008 1237.55,685.008 1238.11,685.008 1238.67,685.008 1239.23,685.008 1239.79,685.008 1240.35,685.008 1240.91,685.008 1241.47,685.008 1242.03,685.008 1242.59,685.008 1243.15,685.008 1243.71,685.008 1244.26,685.008 1244.82,685.008 1245.38,685.008 1245.94,685.008 1246.5,685.008 1247.06,685.008 1247.62,685.008 1248.18,685.008 1248.74,685.008 1249.3,685.008 1249.86,685.008 1250.42,685.008 1250.98,685.008 1251.54,685.008 1252.09,685.008 1252.65,685.008 1253.21,685.008 1253.77,685.008 1254.33,685.008 1254.89,685.008 1255.45,685.008 1256.01,685.008 1256.57,685.008 1257.13,685.008 1257.69,685.008 1258.25,685.008 1258.81,685.008 1259.36,685.008 1259.92,685.008 1260.48,685.008 1261.04,685.008 1261.6,685.008 1262.16,685.008 1262.72,685.008 1263.28,685.008 1263.84,685.008 1264.4,685.008 1264.96,685.008 1265.52,685.008 1266.08,685.008 1266.63,685.008 1267.19,685.008 1267.75,685.008 1268.31,685.008 1268.87,685.008 1269.43,685.008 1269.99,685.008 1270.55,685.008 1271.11,685.008 1271.67,685.008 1272.23,685.008 1272.79,685.008 1273.35,685.008 1273.91,685.008 1274.46,685.008 1275.02,685.008 1275.58,685.008 1276.14,685.008 1276.7,685.008 1277.26,685.008 1277.82,685.008 1278.38,685.008 1278.94,685.008 1279.5,685.008 1280.06,685.008 1280.62,685.008 1281.18,685.008 1281.73,685.008 1282.29,685.008 1282.85,685.008 1283.41,685.008 1283.97,685.008 1284.53,685.008 1285.09,685.008 1285.65,685.008 1286.21,685.008 1286.77,685.008 1287.33,685.008 1287.89,685.008 1288.45,685.008 1289,685.008 1289.56,685.008 1290.12,685.008 1290.68,685.008 1291.24,685.008 1291.8,685.008 1292.36,685.008 1292.92,685.008 1293.48,685.008 1294.04,685.008 1294.6,685.008 1295.16,685.008 1295.72,685.008 1296.28,685.008 1296.83,685.008 1297.39,685.008 1297.95,685.008 1298.51,685.008 1299.07,685.008 1299.63,685.008 1300.19,685.008 1300.75,685.008 1301.31,685.008 1301.87,685.008 1302.43,685.008 1302.99,685.008 1303.55,685.008 1304.1,685.008 1304.66,685.008 1305.22,685.008 1305.78,685.008 1306.34,685.008 1306.9,685.008 1307.46,685.008 1308.02,685.008 1308.58,685.008 1309.14,685.008 1309.7,685.008 1310.26,685.008 1310.82,685.008 1311.38,685.008 1311.93,685.008 1312.49,685.008 1313.05,685.008 1313.61,685.008 1314.17,685.008 1314.73,685.008 1315.29,685.008 1315.85,685.008 1316.41,685.008 1316.97,685.008 1317.53,685.008 1318.09,685.008 1318.65,685.008 1319.2,685.008 1319.76,685.008 1320.32,685.008 1320.88,685.008 1321.44,685.008 1322,685.008 1322.56,685.008 1323.12,685.008 1323.68,685.008 1324.24,685.008 1324.8,685.008 1325.36,685.008 1325.92,685.008 1326.47,685.008 1327.03,685.008 1327.59,685.008 1328.15,685.008 1328.71,685.008 1329.27,685.008 1329.83,685.008 1330.39,685.008 1330.95,685.008 1331.51,685.008 1332.07,685.008 1332.63,685.008 1333.19,685.008 1333.75,685.008 1334.3,685.008 1334.86,685.008 1335.42,685.008 1335.98,685.008 1336.54,685.008 1337.1,685.008 1337.66,685.008 1338.22,685.008 1338.78,685.008 1339.34,685.008 1339.9,685.008 1340.46,685.008 1341.02,685.008 1341.57,685.008 1342.13,685.008 1342.69,685.008 1343.25,685.008 1343.81,685.008 1344.37,685.008 1344.93,685.008 1345.49,685.008 1346.05,685.008 1346.61,685.008 1347.17,685.008 1347.73,685.008 1348.29,685.008 1348.84,685.008 1349.4,685.008 1349.96,685.008 1350.52,685.008 1351.08,685.008 1351.64,685.008 1352.2,685.008 1352.76,685.008 1353.32,685.008 1353.88,685.008 1354.44,685.008 1355,685.008 1355.56,685.008 1356.12,685.008 1356.67,685.008 1357.23,685.008 1357.79,685.008 1358.35,685.008 1358.91,685.008 1359.47,685.008 1360.03,685.008 1360.59,685.008 1361.15,685.008 1361.71,685.008 1362.27,685.008 1362.83,685.008 1363.39,685.008 1363.94,685.008 1364.5,685.008 1365.06,685.008 1365.62,685.008 1366.18,685.008 1366.74,685.008 1367.3,685.008 1367.86,685.008 1368.42,685.008 1368.98,685.008 1369.54,685.008 1370.1,685.008 1370.66,685.008 1371.21,685.008 1371.77,685.008 1372.33,685.008 1372.89,685.008 1373.45,685.008 1374.01,685.008 1374.57,685.008 1375.13,685.008 1375.69,685.008 1376.25,685.008 1376.81,685.008 1377.37,685.008 1377.93,685.008 1378.49,685.008 1379.04,685.008 1379.6,685.008 1380.16,685.008 1380.72,685.008 1381.28,685.008 1381.84,685.008 1382.4,685.008 1382.96,685.008 1383.52,685.008 1384.08,685.008 1384.64,685.008 1385.2,685.008 1385.76,685.008 1386.31,685.008 1386.87,685.008 1387.43,685.008 1387.99,685.008 1388.55,685.008 1389.11,685.008 1389.67,685.008 1390.23,685.008 1390.79,685.008 1391.35,685.008 1391.91,685.008 1392.47,685.008 1393.03,685.008 1393.58,685.008 1394.14,685.008 1394.7,685.008 1395.26,685.008 1395.82,685.008 1396.38,685.008 1396.94,685.008 1397.5,685.008 1398.06,685.008 1398.62,685.008 1399.18,685.008 1399.74,685.008 1400.3,685.008 1400.86,685.008 1401.41,685.008 1401.97,685.008 1402.53,685.008 1403.09,685.008 1403.65,685.008 1404.21,685.008 1404.77,685.008 1405.33,685.008 1405.89,685.008 1406.45,685.008 1407.01,685.008 1407.57,685.008 1408.13,685.008 1408.68,685.008 1409.24,685.008 1409.8,685.008 1410.36,685.008 1410.92,685.008 1411.48,685.008 1412.04,685.008 1412.6,685.008 1413.16,685.008 1413.72,685.008 1414.28,685.008 1414.84,685.008 1415.4,685.008 1415.95,685.008 1416.51,685.008 1417.07,685.008 1417.63,685.008 1418.19,685.008 1418.75,685.008 1419.31,685.008 1419.87,685.008 1420.43,685.008 1420.99,685.008 1421.55,685.008 1422.11,685.008 1422.67,685.008 1423.23,685.008 1423.78,685.008 1424.34,685.008 1424.9,685.008 1425.46,685.008 1426.02,685.008 1426.58,685.008 1427.14,685.008 1427.7,685.008 1428.26,685.008 1428.82,685.008 1429.38,685.008 1429.94,685.008 1430.5,685.008 1431.05,685.008 1431.61,685.008 1432.17,685.008 1432.73,685.008 1433.29,685.008 1433.85,685.008 1434.41,685.008 1434.97,685.008 1435.53,685.008 1436.09,685.008 1436.65,685.008 1437.21,685.008 1437.77,685.008 1438.33,685.008 1438.88,685.008 1439.44,685.008 1440,685.008 1440.56,685.008 1441.12,685.008 1441.68,685.008 1442.24,685.008 1442.8,685.008 1443.36,685.008 1443.92,685.008 1444.48,685.008 1445.04,685.008 1445.6,685.008 1446.15,685.008 1446.71,685.008 1447.27,685.008 1447.83,685.008 1448.39,685.008 1448.95,685.008 1449.51,685.008 1450.07,685.008 1450.63,685.008 1451.19,685.008 1451.75,685.008 1452.31,685.008 1452.87,685.008 1453.42,685.008 1453.98,685.008 1454.54,685.008 1455.1,685.008 1455.66,685.008 1456.22,685.008 1456.78,685.008 1457.34,685.008 1457.9,685.008 1458.46,685.008 1459.02,685.008 1459.58,685.008 1460.14,685.008 1460.7,685.008 1461.25,685.008 1461.81,685.008 1462.37,685.008 1462.93,685.008 1463.49,685.008 1464.05,685.008 1464.61,685.008 1465.17,685.008 1465.73,685.008 1466.29,685.008 1466.85,685.008 1467.41,685.008 1467.97,685.008 1468.52,685.008 1469.08,685.008 1469.64,685.008 1470.2,685.008 1470.76,685.008 1471.32,685.008 1471.88,685.008 1472.44,685.008 1473,685.008 1473.56,685.008 1474.12,685.008 1474.68,685.008 1475.24,685.008 1475.79,685.008 1476.35,685.008 1476.91,685.008 1477.47,685.008 1478.03,685.008 1478.59,685.008 1479.15,685.008 1479.71,685.008 1480.27,685.008 1480.83,685.008 1481.39,685.008 1481.95,685.008 1482.51,685.008 1483.07,685.008 1483.62,685.008 1484.18,685.008 1484.74,685.008 1485.3,685.008 1485.86,685.008 1486.42,685.008 1486.98,685.008 1487.54,685.008 1488.1,685.008 1488.66,685.008 1489.22,685.008 1489.78,685.008 1490.34,685.008 1490.89,685.008 1491.45,685.008 1492.01,685.008 1492.57,685.008 1493.13,685.008 1493.69,685.008 1494.25,685.008 1494.81,685.008 1495.37,685.008 1495.93,685.008 1496.49,685.008 1497.05,685.008 1497.61,685.008 1498.16,685.008 1498.72,685.008 1499.28,685.008 1499.84,685.008 1500.4,685.008 1500.96,685.008 1501.52,685.008 1502.08,685.008 1502.64,685.008 1503.2,685.008 1503.76,685.008 1504.32,685.008 1504.88,685.008 1505.44,685.008 1505.99,685.008 1506.55,685.008 1507.11,685.008 1507.67,685.008 1508.23,685.008 1508.79,685.008 1509.35,685.008 1509.91,685.008 1510.47,685.008 1511.03,685.008 1511.59,685.008 1512.15,685.008 1512.71,685.008 1513.26,685.008 1513.82,685.008 1514.38,685.008 1514.94,685.008 1515.5,685.008 1516.06,685.008 1516.62,685.008 1517.18,685.008 1517.74,685.008 1518.3,685.008 1518.86,685.008 1519.42,685.008 1519.98,685.008 1520.53,685.008 1521.09,685.008 1521.65,685.008 1522.21,685.008 1522.77,685.008 1523.33,685.008 1523.89,685.008 1524.45,685.008 1525.01,685.008 1525.57,685.008 1526.13,685.008 1526.69,685.008 1527.25,685.008 1527.81,685.008 1528.36,685.008 1528.92,685.008 1529.48,685.008 1530.04,685.008 1530.6,685.008 1531.16,685.008 1531.72,685.008 1532.28,685.008 1532.84,685.008 1533.4,685.008 1533.96,685.008 1534.52,685.008 1535.08,685.008 1535.63,685.008 1536.19,685.008 1536.75,685.008 1537.31,685.008 1537.87,685.008 1538.43,685.008 1538.99,685.008 1539.55,685.008 1540.11,685.008 1540.67,685.008 1541.23,685.008 1541.79,685.008 1542.35,685.008 1542.9,685.008 1543.46,685.008 1544.02,685.008 1544.58,685.008 1545.14,685.008 1545.7,685.008 1546.26,685.008 1546.82,685.008 1547.38,685.008 1547.94,685.008 1548.5,685.008 1549.06,685.008 1549.62,685.008 1550.18,685.008 1550.73,685.008 1551.29,685.008 1551.85,685.008 1552.41,685.008 1552.97,685.008 1553.53,685.008 1554.09,685.008 1554.65,685.008 1555.21,685.008 1555.77,685.008 1556.33,685.008 1556.89,685.008 1557.45,685.008 1558,685.008 1558.56,685.008 1559.12,685.008 1559.68,685.008 1560.24,685.008 1560.8,685.008 1561.36,685.008 1561.92,685.008 1562.48,685.008 1563.04,685.008 1563.6,685.008 1564.16,685.008 1564.72,685.008 1565.28,685.008 1565.83,685.008 1566.39,685.008 1566.95,685.008 1567.51,685.008 1568.07,685.008 1568.63,685.008 1569.19,685.008 1569.75,685.008 1570.31,685.008 1570.87,685.008 1571.43,685.008 1571.99,685.008 1572.55,685.008 1573.1,685.008 1573.66,685.008 1574.22,685.008 1574.78,685.008 1575.34,685.008 1575.9,685.008 1576.46,685.008 1577.02,685.008 1577.58,685.008 1578.14,685.008 1578.7,685.008 1579.26,685.008 1579.82,685.008 1580.37,685.008 1580.93,685.008 1581.49,685.008 1582.05,685.008 1582.61,685.008 1583.17,685.008 1583.73,685.008 1584.29,685.008 1584.85,685.008 1585.41,685.008 1585.97,685.008 1586.53,685.008 1587.09,685.008 1587.65,685.008 1588.2,685.008 1588.76,685.008 1589.32,685.008 1589.88,685.008 1590.44,685.008 1591,685.008 1591.56,685.008 1592.12,685.008 1592.68,685.008 1593.24,685.008 1593.8,685.008 1594.36,685.008 1594.92,685.008 1595.47,685.008 1596.03,685.008 1596.59,685.008 1597.15,685.008 1597.71,685.008 1598.27,685.008 1598.83,685.008 1599.39,685.008 1599.95,685.008 1600.51,685.008 1601.07,685.008 1601.63,685.008 1602.19,685.008 1602.74,685.008 1603.3,685.008 1603.86,685.008 1604.42,685.008 1604.98,685.008 1605.54,685.008 1606.1,685.008 1606.66,685.008 1607.22,685.008 1607.78,685.008 1608.34,685.008 1608.9,685.008 1609.46,685.008 1610.02,685.008 1610.57,685.008 1611.13,685.008 1611.69,685.008 1612.25,685.008 1612.81,685.008 1613.37,685.008 1613.93,685.008 1614.49,685.008 1615.05,685.008 1615.61,685.008 1616.17,685.008 1616.73,685.008 1617.29,685.008 1617.84,685.008 1618.4,685.008 1618.96,685.008 1619.52,685.008 1620.08,685.008 1620.64,685.008 1621.2,685.008 1621.76,685.008 1622.32,685.008 1622.88,685.008 1623.44,685.008 1624,685.008 1624.56,685.008 1625.11,685.008 1625.67,685.008 1626.23,685.008 1626.79,685.008 1627.35,685.008 1627.91,685.008 1628.47,685.008 1629.03,685.008 1629.59,685.008 1630.15,685.008 1630.71,685.008 1631.27,685.008 1631.83,685.008 1632.39,685.008 1632.94,685.008 1633.5,685.008 1634.06,685.008 1634.62,685.008 1635.18,685.008 1635.74,685.008 1636.3,685.008 1636.86,685.008 1637.42,685.008 1637.98,685.008 1638.54,685.008 1639.1,685.008 1639.66,685.008 1640.21,685.008 1640.77,685.008 1641.33,685.008 1641.89,685.008 1642.45,685.008 1643.01,685.008 1643.57,685.008 1644.13,685.008 1644.69,685.008 1645.25,685.008 1645.81,685.008 1646.37,685.008 1646.93,685.008 1647.48,685.008 1648.04,685.008 1648.6,685.008 1649.16,685.008 1649.72,685.008 1650.28,685.008 1650.84,685.008 1651.4,685.008 1651.96,685.008 1652.52,685.008 1653.08,685.008 1653.64,685.008 1654.2,685.008 1654.76,685.008 1655.31,685.008 1655.87,685.008 1656.43,685.008 1656.99,685.008 1657.55,685.008 1658.11,685.008 1658.67,685.008 1659.23,685.008 1659.79,685.008 1660.35,685.008 1660.91,685.008 1661.47,685.008 1662.03,685.008 1662.58,685.008 1663.14,685.008 1663.7,685.008 1664.26,685.008 1664.82,685.008 1665.38,685.008 1665.94,685.008 1666.5,685.008 1667.06,685.008 1667.62,685.008 1668.18,685.008 1668.74,685.008 1669.3,685.008 1669.85,685.008 1670.41,685.008 1670.97,685.008 1671.53,685.008 1672.09,685.008 1672.65,685.008 1673.21,685.008 1673.77,685.008 1674.33,685.008 1674.89,685.008 1675.45,685.008 1676.01,685.008 1676.57,685.008 1677.13,685.008 1677.68,685.008 1678.24,685.008 1678.8,685.008 1679.36,685.008 1679.92,685.008 1680.48,685.008 1681.04,685.008 1681.6,685.008 1682.16,685.008 1682.72,685.008 1683.28,685.008 1683.84,685.008 1684.4,685.008 1684.95,685.008 1685.51,685.008 1686.07,685.008 1686.63,685.008 1687.19,685.008 1687.75,685.008 1688.31,685.008 1688.87,685.008 1689.43,685.008 1689.99,685.008 1690.55,685.008 1691.11,685.008 1691.67,685.008 1692.23,685.008 1692.78,685.008 1693.34,685.008 1693.9,685.008 1694.46,685.008 1695.02,685.008 1695.58,685.008 1696.14,685.008 1696.7,685.008 1697.26,685.008 1697.82,685.008 1698.38,685.008 1698.94,685.008 1699.5,685.008 1700.05,685.008 1700.61,685.008 1701.17,685.008 1701.73,685.008 1702.29,685.008 1702.85,685.008 1703.41,685.008 1703.97,685.008 1704.53,685.008 1705.09,685.008 1705.65,685.008 1706.21,685.008 1706.77,685.008 1707.32,685.008 1707.88,685.008 1708.44,685.008 1709,685.008 1709.56,685.008 1710.12,685.008 1710.68,685.008 1711.24,685.008 1711.8,685.008 1712.36,685.008 1712.92,685.008 1713.48,685.008 1714.04,685.008 1714.6,685.008 1715.15,685.008 1715.71,685.008 1716.27,685.008 1716.83,685.008 1717.39,685.008 1717.95,685.008 1718.51,685.008 1719.07,685.008 1719.63,685.008 1720.19,685.008 1720.75,685.008 1721.31,685.008 1721.87,685.008 1722.42,685.008 1722.98,685.008 1723.54,685.008 1724.1,685.008 1724.66,685.008 1725.22,685.008 1725.78,685.008 1726.34,685.008 1726.9,685.008 1727.46,685.008 1728.02,685.008 1728.58,685.008 1729.14,685.008 1729.69,685.008 1730.25,685.008 1730.81,685.008 1731.37,685.008 1731.93,685.008 1732.49,685.008 1733.05,685.008 1733.61,685.008 1734.17,685.008 1734.73,685.008 1735.29,685.008 1735.85,685.008 1736.41,685.008 1736.97,685.008 1737.52,685.008 1738.08,685.008 1738.64,685.008 1739.2,685.008 1739.76,685.008 1740.32,685.008 1740.88,685.008 1741.44,685.008 1742,685.008 1742.56,685.008 1743.12,685.008 1743.68,685.008 1744.24,685.008 1744.79,685.008 1745.35,685.008 1745.91,685.008 1746.47,685.008 1747.03,685.008 1747.59,685.008 1748.15,685.008 1748.71,685.008 1749.27,685.008 1749.83,685.008 1750.39,685.008 1750.95,685.008 1751.51,685.008 1752.06,685.008 1752.62,685.008 1753.18,685.008 1753.74,685.008 1754.3,685.008 1754.86,685.008 1755.42,685.008 1755.98,685.008 1756.54,685.008 1757.1,685.008 1757.66,685.008 1758.22,685.008 1758.78,685.008 1759.34,685.008 1759.89,685.008 1760.45,685.008 1761.01,685.008 1761.57,685.008 1762.13,685.008 1762.69,685.008 1763.25,685.008 1763.81,685.008 1764.37,685.008 1764.93,685.008 1765.49,685.008 1766.05,685.008 1766.61,685.008 1767.16,685.008 1767.72,685.008 1768.28,685.008 1768.84,685.008 1769.4,685.008 1769.96,685.008 1770.52,685.008 1771.08,685.008 1771.64,685.008 1772.2,685.008 1772.76,685.008 1773.32,685.008 1773.88,685.008 1774.43,685.008 1774.99,685.008 1775.55,685.008 1776.11,685.008 1776.67,685.008 1777.23,685.008 1777.79,685.008 1778.35,685.008 1778.91,685.008 1779.47,685.008 1780.03,685.008 1780.59,685.008 1781.15,685.008 1781.71,685.008 1782.26,685.008 1782.82,685.008 1783.38,685.008 1783.94,685.008 1784.5,685.008 1785.06,685.008 1785.62,685.008 1786.18,685.008 1786.74,685.008 1787.3,685.008 1787.86,685.008 1788.42,685.008 1788.98,685.008 1789.53,685.008 1790.09,685.008 1790.65,685.008 1791.21,685.008 1791.77,685.008 1792.33,685.008 1792.89,685.008 1793.45,685.008 1794.01,685.008 1794.57,685.008 1795.13,685.008 1795.69,685.008 1796.25,685.008 1796.8,685.008 1797.36,685.008 1797.92,685.008 1798.48,685.008 1799.04,685.008 1799.6,685.008 1800.16,685.008 1800.72,685.008 1801.28,685.008 1801.84,685.008 1802.4,685.008 1802.96,685.008 1803.52,685.008 1804.08,685.008 1804.63,685.008 1805.19,685.008 1805.75,685.008 1806.31,685.008 1806.87,685.008 1807.43,685.008 1807.99,685.008 1808.55,685.008 1809.11,685.008 1809.67,685.008 1810.23,685.008 1810.79,685.008 1811.35,685.008 1811.9,685.008 1812.46,685.008 1813.02,685.008 1813.58,685.008 1814.14,685.008 1814.7,685.008 1815.26,685.008 1815.82,685.008 1816.38,685.008 1816.94,685.008 1817.5,685.008 1818.06,685.008 1818.62,685.008 1819.18,685.008 1819.73,685.008 1820.29,685.008 1820.85,685.008 1821.41,685.008 1821.97,685.008 1822.53,685.008 1823.09,685.008 1823.65,685.008 1824.21,685.008 1824.77,685.008 1825.33,685.008 1825.89,685.008 1826.45,685.008 1827,685.008 1827.56,685.008 1828.12,685.008 1828.68,685.008 1829.24,685.008 1829.8,685.008 1830.36,685.008 1830.92,685.008 1831.48,685.008 1832.04,685.008 1832.6,685.008 1833.16,685.008 1833.72,685.008 1834.27,685.008 1834.83,685.008 1835.39,685.008 1835.95,685.008 1836.51,685.008 1837.07,685.008 1837.63,685.008 1838.19,685.008 \"/>\n<path clip-path=\"url(#clip163)\" d=\"M720.247 684.64 L720.806 684.64 L721.365 684.64 L721.924 684.64 L722.484 684.64 L723.043 684.64 L723.602 684.64 L724.161 684.64 L724.721 684.64 L725.28 684.64 L725.839 684.64 L726.398 684.64 L726.958 684.64 L727.517 684.64 L728.076 684.64 L728.635 684.64 L729.195 684.64 L729.754 684.64 L730.313 684.64 L730.872 684.64 L731.432 684.64 L731.991 684.64 L732.55 684.64 L733.109 684.64 L733.669 684.64 L734.228 684.64 L734.787 684.64 L735.346 684.64 L735.906 684.64 L736.465 684.64 L737.024 684.64 L737.583 684.64 L738.143 684.64 L738.702 684.64 L739.261 684.64 L739.82 684.64 L740.38 684.64 L740.939 684.64 L741.498 684.64 L742.057 684.64 L742.617 684.64 L743.176 684.64 L743.735 684.64 L744.294 684.64 L744.854 684.64 L745.413 684.64 L745.972 684.64 L746.531 684.64 L747.091 684.64 L747.65 684.64 L748.209 684.64 L748.768 684.64 L749.328 684.64 L749.887 684.64 L750.446 684.64 L751.005 684.64 L751.565 684.64 L752.124 684.64 L752.683 684.64 L753.242 684.64 L753.802 684.64 L754.361 684.64 L754.92 684.64 L755.479 684.64 L756.039 684.64 L756.598 684.64 L757.157 684.64 L757.716 684.64 L758.276 684.64 L758.835 684.64 L759.394 684.64 L759.953 684.64 L760.513 684.64 L761.072 684.64 L761.631 684.64 L762.19 684.64 L762.75 684.64 L763.309 684.64 L763.868 684.64 L764.427 684.64 L764.987 684.64 L765.546 684.64 L766.105 684.64 L766.664 684.64 L767.224 684.64 L767.783 684.64 L768.342 684.64 L768.901 684.64 L769.461 684.64 L770.02 684.64 L770.579 684.64 L771.138 684.64 L771.698 684.64 L772.257 684.64 L772.816 684.64 L773.375 684.64 L773.935 684.64 L774.494 684.64 L775.053 684.64 L775.612 684.64 L776.172 684.64 L776.731 684.64 L777.29 684.64 L777.849 684.64 L778.409 684.64 L778.968 684.64 L779.527 684.64 L780.086 684.64 L780.646 684.64 L781.205 684.64 L781.764 684.64 L782.323 684.64 L782.883 684.64 L783.442 684.64 L784.001 684.64 L784.56 684.64 L785.12 684.64 L785.679 684.64 L786.238 684.64 L786.797 684.64 L787.357 684.64 L787.916 684.64 L788.475 684.64 L789.034 684.64 L789.594 684.64 L790.153 684.64 L790.712 684.64 L791.271 684.64 L791.831 684.64 L792.39 684.64 L792.949 684.64 L793.508 684.64 L794.068 684.64 L794.627 684.64 L795.186 684.64 L795.745 684.64 L796.305 684.64 L796.864 684.64 L797.423 684.64 L797.982 684.64 L798.542 684.64 L799.101 684.64 L799.66 684.64 L800.219 684.64 L800.779 684.64 L801.338 684.64 L801.897 684.64 L802.456 684.64 L803.016 684.64 L803.575 684.64 L804.134 684.64 L804.693 684.64 L805.253 684.64 L805.812 684.64 L806.371 684.64 L806.931 684.64 L807.49 684.64 L808.049 684.64 L808.608 684.64 L809.168 684.64 L809.727 684.64 L810.286 684.64 L810.845 684.64 L811.405 684.64 L811.964 684.64 L812.523 684.64 L813.082 684.64 L813.642 684.64 L814.201 684.64 L814.76 684.64 L815.319 684.64 L815.879 684.64 L816.438 684.64 L816.997 684.64 L817.556 684.64 L818.116 684.64 L818.675 684.64 L819.234 684.64 L819.793 684.64 L820.353 684.64 L820.912 684.64 L821.471 684.64 L822.03 684.64 L822.59 684.64 L823.149 684.64 L823.708 684.64 L824.267 684.64 L824.827 684.64 L825.386 684.64 L825.945 684.64 L826.504 684.64 L827.064 684.64 L827.623 684.64 L828.182 684.64 L828.741 684.64 L829.301 684.64 L829.86 684.64 L830.419 684.64 L830.978 684.64 L831.538 684.64 L832.097 684.64 L832.656 684.64 L833.215 684.64 L833.775 684.64 L834.334 684.64 L834.893 684.64 L835.452 684.64 L836.012 684.64 L836.571 684.64 L837.13 684.64 L837.689 684.64 L838.249 684.64 L838.808 684.64 L839.367 684.64 L839.926 684.64 L840.486 684.64 L841.045 684.64 L841.604 684.64 L842.163 684.64 L842.723 684.64 L843.282 684.64 L843.841 684.64 L844.4 684.64 L844.96 684.64 L845.519 684.64 L846.078 684.64 L846.637 684.64 L847.197 684.64 L847.756 684.64 L848.315 684.64 L848.874 684.64 L849.434 684.64 L849.993 684.64 L850.552 684.64 L851.111 684.64 L851.671 684.64 L852.23 684.64 L852.789 684.64 L853.348 684.64 L853.908 684.64 L854.467 684.64 L855.026 684.64 L855.585 684.64 L856.145 684.64 L856.704 684.64 L857.263 684.64 L857.822 684.64 L858.382 684.64 L858.941 684.64 L859.5 684.64 L860.059 684.64 L860.619 684.64 L861.178 684.64 L861.737 684.64 L862.296 684.64 L862.856 684.64 L863.415 684.64 L863.974 684.64 L864.533 684.64 L865.093 684.64 L865.652 684.64 L866.211 684.64 L866.77 684.64 L867.33 684.64 L867.889 684.64 L868.448 684.64 L869.007 684.64 L869.567 684.64 L870.126 684.64 L870.685 684.64 L871.244 684.64 L871.804 684.64 L872.363 684.64 L872.922 684.64 L873.481 684.64 L874.041 684.64 L874.6 684.64 L875.159 684.64 L875.718 684.64 L876.278 684.64 L876.837 684.64 L877.396 684.64 L877.955 684.64 L878.515 684.64 L879.074 684.64 L879.633 684.64 L880.192 684.64 L880.752 684.64 L881.311 684.64 L881.87 684.64 L882.429 684.64 L882.989 684.64 L883.548 684.64 L884.107 684.64 L884.666 684.64 L885.226 684.64 L885.785 684.64 L886.344 684.64 L886.903 684.64 L887.463 684.64 L888.022 684.64 L888.581 684.64 L889.14 684.64 L889.7 684.64 L890.259 684.64 L890.818 684.64 L891.377 684.64 L891.937 684.64 L892.496 684.64 L893.055 684.64 L893.614 684.64 L894.174 684.64 L894.733 684.64 L895.292 684.64 L895.851 684.64 L896.411 684.64 L896.97 684.64 L897.529 684.64 L898.088 684.64 L898.648 684.64 L899.207 684.64 L899.766 684.64 L900.325 684.64 L900.885 684.64 L901.444 684.64 L902.003 684.64 L902.562 684.64 L903.122 684.64 L903.681 684.64 L904.24 684.64 L904.799 684.64 L905.359 684.64 L905.918 684.64 L906.477 684.64 L907.036 684.64 L907.596 684.64 L908.155 684.64 L908.714 684.64 L909.273 684.64 L909.833 684.64 L910.392 684.64 L910.951 684.64 L911.51 684.64 L912.07 684.64 L912.629 684.64 L913.188 684.64 L913.747 684.64 L914.307 684.64 L914.866 684.64 L915.425 684.64 L915.984 684.64 L916.544 684.64 L917.103 684.64 L917.662 684.64 L918.221 684.64 L918.781 684.64 L919.34 684.64 L919.899 684.64 L920.458 684.64 L921.018 684.64 L921.577 684.64 L922.136 684.64 L922.695 684.64 L923.255 684.64 L923.814 684.64 L924.373 684.64 L924.932 684.64 L925.492 684.64 L926.051 684.64 L926.61 684.64 L927.169 684.64 L927.729 684.64 L928.288 684.64 L928.847 684.64 L929.406 684.64 L929.966 684.64 L930.525 684.64 L931.084 684.64 L931.644 684.64 L932.203 684.64 L932.762 684.64 L933.321 684.64 L933.881 684.64 L934.44 684.64 L934.999 684.64 L935.558 684.64 L936.118 684.64 L936.677 684.64 L937.236 684.64 L937.795 684.64 L938.355 684.64 L938.914 684.64 L939.473 684.64 L940.032 684.64 L940.592 684.64 L941.151 684.64 L941.71 684.64 L942.269 684.64 L942.829 684.64 L943.388 684.64 L943.947 684.64 L944.506 684.64 L945.066 684.64 L945.625 684.64 L946.184 684.64 L946.743 684.64 L947.303 684.64 L947.862 684.64 L948.421 684.64 L948.98 684.64 L949.54 684.64 L950.099 684.64 L950.658 684.64 L951.217 684.64 L951.777 684.64 L952.336 684.64 L952.895 684.64 L953.454 684.64 L954.014 684.64 L954.573 684.64 L955.132 684.64 L955.691 684.64 L956.251 684.64 L956.81 684.64 L957.369 684.64 L957.928 684.64 L958.488 684.64 L959.047 684.64 L959.606 684.64 L960.165 684.64 L960.725 684.64 L961.284 684.64 L961.843 684.64 L962.402 684.64 L962.962 684.64 L963.521 684.64 L964.08 684.64 L964.639 684.64 L965.199 684.64 L965.758 684.64 L966.317 684.64 L966.876 684.64 L967.436 684.64 L967.995 684.64 L968.554 684.64 L969.113 684.64 L969.673 684.64 L970.232 684.64 L970.791 684.64 L971.35 684.64 L971.91 684.64 L972.469 684.64 L973.028 684.64 L973.587 684.64 L974.147 684.64 L974.706 684.64 L975.265 684.64 L975.824 684.64 L976.384 684.64 L976.943 684.64 L977.502 684.64 L978.061 684.64 L978.621 684.64 L979.18 684.64 L979.739 684.64 L980.298 684.64 L980.858 684.64 L981.417 684.64 L981.976 684.64 L982.535 684.64 L983.095 684.64 L983.654 684.64 L984.213 684.64 L984.772 684.64 L985.332 684.64 L985.891 684.64 L986.45 684.64 L987.009 684.64 L987.569 684.64 L988.128 684.64 L988.687 684.64 L989.246 684.64 L989.806 684.64 L990.365 684.64 L990.924 684.64 L991.483 684.64 L992.043 684.64 L992.602 684.64 L993.161 684.64 L993.72 684.64 L994.28 684.64 L994.839 684.64 L995.398 684.64 L995.957 684.64 L996.517 684.64 L997.076 684.64 L997.635 684.64 L998.194 684.64 L998.754 684.64 L999.313 684.64 L999.872 684.64 L1000.43 684.64 L1000.99 684.64 L1001.55 684.64 L1002.11 684.64 L1002.67 684.64 L1003.23 684.64 L1003.79 684.64 L1004.35 684.64 L1004.91 684.64 L1005.46 684.64 L1006.02 684.64 L1006.58 684.64 L1007.14 684.64 L1007.7 684.64 L1008.26 684.64 L1008.82 684.64 L1009.38 684.64 L1009.94 684.64 L1010.5 684.64 L1011.06 684.64 L1011.62 684.64 L1012.18 684.64 L1012.73 684.64 L1013.29 684.64 L1013.85 684.64 L1014.41 684.64 L1014.97 684.64 L1015.53 684.64 L1016.09 684.64 L1016.65 684.64 L1017.21 684.64 L1017.77 684.64 L1018.33 684.64 L1018.89 684.64 L1019.45 684.64 L1020.01 684.64 L1020.56 684.64 L1021.12 684.64 L1021.68 684.64 L1022.24 684.64 L1022.8 684.64 L1023.36 684.64 L1023.92 684.64 L1024.48 684.64 L1025.04 684.64 L1025.6 684.64 L1026.16 684.64 L1026.72 684.64 L1027.28 684.64 L1027.83 684.64 L1028.39 684.64 L1028.95 684.64 L1029.51 684.64 L1030.07 684.64 L1030.63 684.64 L1031.19 684.64 L1031.75 684.64 L1032.31 684.64 L1032.87 684.64 L1033.43 684.64 L1033.99 684.64 L1034.55 684.64 L1035.1 684.64 L1035.66 684.64 L1036.22 684.64 L1036.78 684.64 L1037.34 684.64 L1037.9 684.64 L1038.46 684.64 L1039.02 684.64 L1039.58 684.64 L1040.14 684.64 L1040.7 684.64 L1041.26 684.64 L1041.82 684.64 L1042.38 684.64 L1042.93 684.64 L1043.49 684.64 L1044.05 684.64 L1044.61 684.64 L1045.17 684.64 L1045.73 684.64 L1046.29 684.64 L1046.85 684.64 L1047.41 684.64 L1047.97 684.64 L1048.53 684.64 L1049.09 684.64 L1049.65 684.64 L1050.2 684.64 L1050.76 684.64 L1051.32 684.64 L1051.88 684.64 L1052.44 684.64 L1053 684.64 L1053.56 684.64 L1054.12 684.64 L1054.68 684.64 L1055.24 684.64 L1055.8 684.64 L1056.36 684.64 L1056.92 684.64 L1057.48 684.64 L1058.03 684.64 L1058.59 684.64 L1059.15 684.64 L1059.71 684.64 L1060.27 684.64 L1060.83 684.64 L1061.39 684.64 L1061.95 684.64 L1062.51 684.64 L1063.07 684.64 L1063.63 684.64 L1064.19 684.64 L1064.75 684.64 L1065.3 684.64 L1065.86 684.64 L1066.42 684.64 L1066.98 684.64 L1067.54 684.64 L1068.1 684.64 L1068.66 684.64 L1069.22 684.64 L1069.78 684.64 L1070.34 684.64 L1070.9 684.64 L1071.46 684.64 L1072.02 684.64 L1072.57 684.64 L1073.13 684.64 L1073.69 684.64 L1074.25 684.64 L1074.81 684.64 L1075.37 684.64 L1075.93 684.64 L1076.49 684.64 L1077.05 684.64 L1077.61 684.64 L1078.17 684.64 L1078.73 684.64 L1079.29 684.64 L1079.85 684.64 L1080.4 684.64 L1080.96 684.64 L1081.52 684.64 L1082.08 684.64 L1082.64 684.64 L1083.2 684.64 L1083.76 684.64 L1084.32 684.64 L1084.88 684.64 L1085.44 684.64 L1086 684.64 L1086.56 684.64 L1087.12 684.64 L1087.67 684.64 L1088.23 684.64 L1088.79 684.64 L1089.35 684.64 L1089.91 684.64 L1090.47 684.64 L1091.03 684.64 L1091.59 684.64 L1092.15 684.64 L1092.71 684.64 L1093.27 684.64 L1093.83 684.64 L1094.39 684.64 L1094.94 684.64 L1095.5 684.64 L1096.06 684.64 L1096.62 684.64 L1097.18 684.64 L1097.74 684.64 L1098.3 684.64 L1098.86 684.64 L1099.42 684.64 L1099.98 684.64 L1100.54 684.64 L1101.1 684.64 L1101.66 684.64 L1102.22 684.64 L1102.77 684.64 L1103.33 684.64 L1103.89 684.64 L1104.45 684.64 L1105.01 684.64 L1105.57 684.64 L1106.13 684.64 L1106.69 684.64 L1107.25 684.64 L1107.81 684.64 L1108.37 684.64 L1108.93 684.64 L1109.49 684.64 L1110.04 684.64 L1110.6 684.64 L1111.16 684.64 L1111.72 684.64 L1112.28 684.64 L1112.84 684.64 L1113.4 684.64 L1113.96 684.64 L1114.52 684.64 L1115.08 684.64 L1115.64 684.64 L1116.2 684.64 L1116.76 684.64 L1117.31 684.64 L1117.87 684.64 L1118.43 684.64 L1118.99 684.64 L1119.55 684.64 L1120.11 684.64 L1120.67 684.64 L1121.23 684.64 L1121.79 684.64 L1122.35 684.64 L1122.91 684.64 L1123.47 684.64 L1124.03 684.64 L1124.59 684.64 L1125.14 684.64 L1125.7 684.64 L1126.26 684.64 L1126.82 684.64 L1127.38 684.64 L1127.94 684.64 L1128.5 684.64 L1129.06 684.64 L1129.62 684.64 L1130.18 684.64 L1130.74 684.64 L1131.3 684.64 L1131.86 684.64 L1132.41 684.64 L1132.97 684.64 L1133.53 684.64 L1134.09 684.64 L1134.65 684.64 L1135.21 684.64 L1135.77 684.64 L1136.33 684.64 L1136.89 684.64 L1137.45 684.64 L1138.01 684.64 L1138.57 684.64 L1139.13 684.64 L1139.68 684.64 L1140.24 684.64 L1140.8 684.64 L1141.36 684.64 L1141.92 684.64 L1142.48 684.64 L1143.04 684.64 L1143.6 684.64 L1144.16 684.64 L1144.72 684.64 L1145.28 684.64 L1145.84 684.64 L1146.4 684.64 L1146.96 684.64 L1147.51 684.64 L1148.07 684.64 L1148.63 684.64 L1149.19 684.64 L1149.75 684.64 L1150.31 684.64 L1150.87 684.64 L1151.43 684.64 L1151.99 684.64 L1152.55 684.64 L1153.11 684.64 L1153.67 684.64 L1154.23 684.64 L1154.78 684.64 L1155.34 684.64 L1155.9 684.64 L1156.46 684.64 L1157.02 684.64 L1157.58 684.64 L1158.14 684.64 L1158.7 684.64 L1159.26 684.64 L1159.82 684.64 L1160.38 684.64 L1160.94 684.64 L1161.5 684.64 L1162.05 684.64 L1162.61 684.64 L1163.17 684.64 L1163.73 684.64 L1164.29 684.64 L1164.85 684.64 L1165.41 684.64 L1165.97 684.64 L1166.53 684.64 L1167.09 684.64 L1167.65 684.64 L1168.21 684.64 L1168.77 684.64 L1169.33 684.64 L1169.88 684.64 L1170.44 684.64 L1171 684.64 L1171.56 684.64 L1172.12 684.64 L1172.68 684.64 L1173.24 684.64 L1173.8 684.64 L1174.36 684.64 L1174.92 684.64 L1175.48 684.64 L1176.04 684.64 L1176.6 684.64 L1177.15 684.64 L1177.71 684.64 L1178.27 684.64 L1178.83 684.64 L1179.39 684.64 L1179.95 684.64 L1180.51 684.64 L1181.07 684.64 L1181.63 684.64 L1182.19 684.64 L1182.75 684.64 L1183.31 684.64 L1183.87 684.64 L1184.43 684.64 L1184.98 684.64 L1185.54 684.64 L1186.1 684.64 L1186.66 684.64 L1187.22 684.64 L1187.78 684.64 L1188.34 684.64 L1188.9 684.64 L1189.46 684.64 L1190.02 684.64 L1190.58 684.64 L1191.14 684.64 L1191.7 684.64 L1192.25 684.64 L1192.81 684.64 L1193.37 684.64 L1193.93 684.64 L1194.49 684.64 L1195.05 684.64 L1195.61 684.64 L1196.17 684.64 L1196.73 684.64 L1197.29 684.64 L1197.85 684.64 L1198.41 684.64 L1198.97 684.64 L1199.52 684.64 L1200.08 684.64 L1200.64 684.64 L1201.2 684.64 L1201.76 684.64 L1202.32 684.64 L1202.88 684.64 L1203.44 684.64 L1204 684.64 L1204.56 684.64 L1205.12 684.64 L1205.68 684.64 L1206.24 684.64 L1206.8 684.64 L1207.35 684.64 L1207.91 684.64 L1208.47 684.64 L1209.03 684.64 L1209.59 684.64 L1210.15 684.64 L1210.71 684.64 L1211.27 684.64 L1211.83 684.64 L1212.39 684.64 L1212.95 684.64 L1213.51 684.64 L1214.07 684.64 L1214.62 684.64 L1215.18 684.64 L1215.74 684.64 L1216.3 684.64 L1216.86 684.64 L1217.42 684.64 L1217.98 684.64 L1218.54 684.64 L1219.1 684.64 L1219.66 684.64 L1220.22 684.64 L1220.78 684.64 L1221.34 684.64 L1221.89 684.64 L1222.45 684.64 L1223.01 684.64 L1223.57 684.64 L1224.13 684.64 L1224.69 684.64 L1225.25 684.64 L1225.81 684.64 L1226.37 684.64 L1226.93 684.64 L1227.49 684.64 L1228.05 684.64 L1228.61 684.64 L1229.17 684.64 L1229.72 684.64 L1230.28 684.64 L1230.84 684.64 L1231.4 684.64 L1231.96 684.64 L1232.52 684.64 L1233.08 684.64 L1233.64 684.64 L1234.2 684.64 L1234.76 684.64 L1235.32 684.64 L1235.88 684.64 L1236.44 684.64 L1236.99 684.64 L1237.55 684.64 L1238.11 684.64 L1238.67 684.64 L1239.23 684.64 L1239.79 684.64 L1240.35 684.64 L1240.91 684.64 L1241.47 684.64 L1242.03 684.64 L1242.59 684.64 L1243.15 684.64 L1243.71 684.64 L1244.26 684.64 L1244.82 684.64 L1245.38 684.64 L1245.94 684.64 L1246.5 684.64 L1247.06 684.64 L1247.62 684.64 L1248.18 684.64 L1248.74 684.64 L1249.3 684.64 L1249.86 684.64 L1250.42 684.64 L1250.98 684.64 L1251.54 684.64 L1252.09 684.64 L1252.65 684.64 L1253.21 684.64 L1253.77 684.64 L1254.33 684.64 L1254.89 684.64 L1255.45 684.64 L1256.01 684.64 L1256.57 684.64 L1257.13 684.64 L1257.69 684.64 L1258.25 684.64 L1258.81 684.64 L1259.36 684.64 L1259.92 684.64 L1260.48 684.64 L1261.04 684.64 L1261.6 684.64 L1262.16 684.64 L1262.72 684.64 L1263.28 684.64 L1263.84 684.64 L1264.4 684.64 L1264.96 684.64 L1265.52 684.64 L1266.08 684.64 L1266.63 684.64 L1267.19 684.64 L1267.75 684.64 L1268.31 684.64 L1268.87 684.64 L1269.43 684.64 L1269.99 684.64 L1270.55 684.64 L1271.11 684.64 L1271.67 684.64 L1272.23 684.64 L1272.79 684.64 L1273.35 684.64 L1273.91 684.64 L1274.46 684.64 L1275.02 684.64 L1275.58 684.64 L1276.14 684.64 L1276.7 684.64 L1277.26 684.64 L1277.82 684.64 L1278.38 684.64 L1278.94 684.64 L1279.5 684.64 L1280.06 684.64 L1280.62 684.64 L1281.18 684.64 L1281.73 684.64 L1282.29 684.64 L1282.85 684.64 L1283.41 684.64 L1283.97 684.64 L1284.53 684.64 L1285.09 684.64 L1285.65 684.64 L1286.21 684.64 L1286.77 684.64 L1287.33 684.64 L1287.89 684.64 L1288.45 684.64 L1289 684.64 L1289.56 684.64 L1290.12 684.64 L1290.68 684.64 L1291.24 684.64 L1291.8 684.64 L1292.36 684.64 L1292.92 684.64 L1293.48 684.64 L1294.04 684.64 L1294.6 684.64 L1295.16 684.64 L1295.72 684.64 L1296.28 684.64 L1296.83 684.64 L1297.39 684.64 L1297.95 684.64 L1298.51 684.64 L1299.07 684.64 L1299.63 684.64 L1300.19 684.64 L1300.75 684.64 L1301.31 684.64 L1301.87 684.64 L1302.43 684.64 L1302.99 684.64 L1303.55 684.64 L1304.1 684.64 L1304.66 684.64 L1305.22 684.64 L1305.78 684.64 L1306.34 684.64 L1306.9 684.64 L1307.46 684.64 L1308.02 684.64 L1308.58 684.64 L1309.14 684.64 L1309.7 684.64 L1310.26 684.64 L1310.82 684.64 L1311.38 684.64 L1311.93 684.64 L1312.49 684.64 L1313.05 684.64 L1313.61 684.64 L1314.17 684.64 L1314.73 684.64 L1315.29 684.64 L1315.85 684.64 L1316.41 684.64 L1316.97 684.64 L1317.53 684.64 L1318.09 684.64 L1318.65 684.64 L1319.2 684.64 L1319.76 684.64 L1320.32 684.64 L1320.88 684.64 L1321.44 684.64 L1322 684.64 L1322.56 684.64 L1323.12 684.64 L1323.68 684.64 L1324.24 684.64 L1324.8 684.64 L1325.36 684.64 L1325.92 684.64 L1326.47 684.64 L1327.03 684.64 L1327.59 684.64 L1328.15 684.64 L1328.71 684.64 L1329.27 684.64 L1329.83 684.64 L1330.39 684.64 L1330.95 684.64 L1331.51 684.64 L1332.07 684.64 L1332.63 684.64 L1333.19 684.64 L1333.75 684.64 L1334.3 684.64 L1334.86 684.64 L1335.42 684.64 L1335.98 684.64 L1336.54 684.64 L1337.1 684.64 L1337.66 684.64 L1338.22 684.64 L1338.78 684.64 L1339.34 684.64 L1339.9 684.64 L1340.46 684.64 L1341.02 684.64 L1341.57 684.64 L1342.13 684.64 L1342.69 684.64 L1343.25 684.64 L1343.81 684.64 L1344.37 684.64 L1344.93 684.64 L1345.49 684.64 L1346.05 684.64 L1346.61 684.64 L1347.17 684.64 L1347.73 684.64 L1348.29 684.64 L1348.84 684.64 L1349.4 684.64 L1349.96 684.64 L1350.52 684.64 L1351.08 684.64 L1351.64 684.64 L1352.2 684.64 L1352.76 684.64 L1353.32 684.64 L1353.88 684.64 L1354.44 684.64 L1355 684.64 L1355.56 684.64 L1356.12 684.64 L1356.67 684.64 L1357.23 684.64 L1357.79 684.64 L1358.35 684.64 L1358.91 684.64 L1359.47 684.64 L1360.03 684.64 L1360.59 684.64 L1361.15 684.64 L1361.71 684.64 L1362.27 684.64 L1362.83 684.64 L1363.39 684.64 L1363.94 684.64 L1364.5 684.64 L1365.06 684.64 L1365.62 684.64 L1366.18 684.64 L1366.74 684.64 L1367.3 684.64 L1367.86 684.64 L1368.42 684.64 L1368.98 684.64 L1369.54 684.64 L1370.1 684.64 L1370.66 684.64 L1371.21 684.64 L1371.77 684.64 L1372.33 684.64 L1372.89 684.64 L1373.45 684.64 L1374.01 684.64 L1374.57 684.64 L1375.13 684.64 L1375.69 684.64 L1376.25 684.64 L1376.81 684.64 L1377.37 684.64 L1377.93 684.64 L1378.49 684.64 L1379.04 684.64 L1379.6 684.64 L1380.16 684.64 L1380.72 684.64 L1381.28 684.64 L1381.84 684.64 L1382.4 684.64 L1382.96 684.64 L1383.52 684.64 L1384.08 684.64 L1384.64 684.64 L1385.2 684.64 L1385.76 684.64 L1386.31 684.64 L1386.87 684.64 L1387.43 684.64 L1387.99 684.64 L1388.55 684.64 L1389.11 684.64 L1389.67 684.64 L1390.23 684.64 L1390.79 684.64 L1391.35 684.64 L1391.91 684.64 L1392.47 684.64 L1393.03 684.64 L1393.58 684.64 L1394.14 684.64 L1394.7 684.64 L1395.26 684.64 L1395.82 684.64 L1396.38 684.64 L1396.94 684.64 L1397.5 684.64 L1398.06 684.64 L1398.62 684.64 L1399.18 684.64 L1399.74 684.64 L1400.3 684.64 L1400.86 684.64 L1401.41 684.64 L1401.97 684.64 L1402.53 684.64 L1403.09 684.64 L1403.65 684.64 L1404.21 684.64 L1404.77 684.64 L1405.33 684.64 L1405.89 684.64 L1406.45 684.64 L1407.01 684.64 L1407.57 684.64 L1408.13 684.64 L1408.68 684.64 L1409.24 684.64 L1409.8 684.64 L1410.36 684.64 L1410.92 684.64 L1411.48 684.64 L1412.04 684.64 L1412.6 684.64 L1413.16 684.64 L1413.72 684.64 L1414.28 684.64 L1414.84 684.64 L1415.4 684.64 L1415.95 684.64 L1416.51 684.64 L1417.07 684.64 L1417.63 684.64 L1418.19 684.64 L1418.75 684.64 L1419.31 684.64 L1419.87 684.64 L1420.43 684.64 L1420.99 684.64 L1421.55 684.64 L1422.11 684.64 L1422.67 684.64 L1423.23 684.64 L1423.78 684.64 L1424.34 684.64 L1424.9 684.64 L1425.46 684.64 L1426.02 684.64 L1426.58 684.64 L1427.14 684.64 L1427.7 684.64 L1428.26 684.64 L1428.82 684.64 L1429.38 684.64 L1429.94 684.64 L1430.5 684.64 L1431.05 684.64 L1431.61 684.64 L1432.17 684.64 L1432.73 684.64 L1433.29 684.64 L1433.85 684.64 L1434.41 684.64 L1434.97 684.64 L1435.53 684.64 L1436.09 684.64 L1436.65 684.64 L1437.21 684.64 L1437.77 684.64 L1438.33 684.64 L1438.88 684.64 L1439.44 684.64 L1440 684.64 L1440.56 684.64 L1441.12 684.64 L1441.68 684.64 L1442.24 684.64 L1442.8 684.64 L1443.36 684.64 L1443.92 684.64 L1444.48 684.64 L1445.04 684.64 L1445.6 684.64 L1446.15 684.64 L1446.71 684.64 L1447.27 684.64 L1447.83 684.64 L1448.39 684.64 L1448.95 684.64 L1449.51 684.64 L1450.07 684.64 L1450.63 684.64 L1451.19 684.64 L1451.75 684.64 L1452.31 684.64 L1452.87 684.64 L1453.42 684.64 L1453.98 684.64 L1454.54 684.64 L1455.1 684.64 L1455.66 684.64 L1456.22 684.64 L1456.78 684.64 L1457.34 684.64 L1457.9 684.64 L1458.46 684.64 L1459.02 684.64 L1459.58 684.64 L1460.14 684.64 L1460.7 684.64 L1461.25 684.64 L1461.81 684.64 L1462.37 684.64 L1462.93 684.64 L1463.49 684.64 L1464.05 684.64 L1464.61 684.64 L1465.17 684.64 L1465.73 684.64 L1466.29 684.64 L1466.85 684.64 L1467.41 684.64 L1467.97 684.64 L1468.52 684.64 L1469.08 684.64 L1469.64 684.64 L1470.2 684.64 L1470.76 684.64 L1471.32 684.64 L1471.88 684.64 L1472.44 684.64 L1473 684.64 L1473.56 684.64 L1474.12 684.64 L1474.68 684.64 L1475.24 684.64 L1475.79 684.64 L1476.35 684.64 L1476.91 684.64 L1477.47 684.64 L1478.03 684.64 L1478.59 684.64 L1479.15 684.64 L1479.71 684.64 L1480.27 684.64 L1480.83 684.64 L1481.39 684.64 L1481.95 684.64 L1482.51 684.64 L1483.07 684.64 L1483.62 684.64 L1484.18 684.64 L1484.74 684.64 L1485.3 684.64 L1485.86 684.64 L1486.42 684.64 L1486.98 684.64 L1487.54 684.64 L1488.1 684.64 L1488.66 684.64 L1489.22 684.64 L1489.78 684.64 L1490.34 684.64 L1490.89 684.64 L1491.45 684.64 L1492.01 684.64 L1492.57 684.64 L1493.13 684.64 L1493.69 684.64 L1494.25 684.64 L1494.81 684.64 L1495.37 684.64 L1495.93 684.64 L1496.49 684.64 L1497.05 684.64 L1497.61 684.64 L1498.16 684.64 L1498.72 684.64 L1499.28 684.64 L1499.84 684.64 L1500.4 684.64 L1500.96 684.64 L1501.52 684.64 L1502.08 684.64 L1502.64 684.64 L1503.2 684.64 L1503.76 684.64 L1504.32 684.64 L1504.88 684.64 L1505.44 684.64 L1505.99 684.64 L1506.55 684.64 L1507.11 684.64 L1507.67 684.64 L1508.23 684.64 L1508.79 684.64 L1509.35 684.64 L1509.91 684.64 L1510.47 684.64 L1511.03 684.64 L1511.59 684.64 L1512.15 684.64 L1512.71 684.64 L1513.26 684.64 L1513.82 684.64 L1514.38 684.64 L1514.94 684.64 L1515.5 684.64 L1516.06 684.64 L1516.62 684.64 L1517.18 684.64 L1517.74 684.64 L1518.3 684.64 L1518.86 684.64 L1519.42 684.64 L1519.98 684.64 L1520.53 684.64 L1521.09 684.64 L1521.65 684.64 L1522.21 684.64 L1522.77 684.64 L1523.33 684.64 L1523.89 684.64 L1524.45 684.64 L1525.01 684.64 L1525.57 684.64 L1526.13 684.64 L1526.69 684.64 L1527.25 684.64 L1527.81 684.64 L1528.36 684.64 L1528.92 684.64 L1529.48 684.64 L1530.04 684.64 L1530.6 684.64 L1531.16 684.64 L1531.72 684.64 L1532.28 684.64 L1532.84 684.64 L1533.4 684.64 L1533.96 684.64 L1534.52 684.64 L1535.08 684.64 L1535.63 684.64 L1536.19 684.64 L1536.75 684.64 L1537.31 684.64 L1537.87 684.64 L1538.43 684.64 L1538.99 684.64 L1539.55 684.64 L1540.11 684.64 L1540.67 684.64 L1541.23 684.64 L1541.79 684.64 L1542.35 684.64 L1542.9 684.64 L1543.46 684.64 L1544.02 684.64 L1544.58 684.64 L1545.14 684.64 L1545.7 684.64 L1546.26 684.64 L1546.82 684.64 L1547.38 684.64 L1547.94 684.64 L1548.5 684.64 L1549.06 684.64 L1549.62 684.64 L1550.18 684.64 L1550.73 684.64 L1551.29 684.64 L1551.85 684.64 L1552.41 684.64 L1552.97 684.64 L1553.53 684.64 L1554.09 684.64 L1554.65 684.64 L1555.21 684.64 L1555.77 684.64 L1556.33 684.64 L1556.89 684.64 L1557.45 684.64 L1558 684.64 L1558.56 684.64 L1559.12 684.64 L1559.68 684.64 L1560.24 684.64 L1560.8 684.64 L1561.36 684.64 L1561.92 684.64 L1562.48 684.64 L1563.04 684.64 L1563.6 684.64 L1564.16 684.64 L1564.72 684.64 L1565.28 684.64 L1565.83 684.64 L1566.39 684.64 L1566.95 684.64 L1567.51 684.64 L1568.07 684.64 L1568.63 684.64 L1569.19 684.64 L1569.75 684.64 L1570.31 684.64 L1570.87 684.64 L1571.43 684.64 L1571.99 684.64 L1572.55 684.64 L1573.1 684.64 L1573.66 684.64 L1574.22 684.64 L1574.78 684.64 L1575.34 684.64 L1575.9 684.64 L1576.46 684.64 L1577.02 684.64 L1577.58 684.64 L1578.14 684.64 L1578.7 684.64 L1579.26 684.64 L1579.82 684.64 L1580.37 684.64 L1580.93 684.64 L1581.49 684.64 L1582.05 684.64 L1582.61 684.64 L1583.17 684.64 L1583.73 684.64 L1584.29 684.64 L1584.85 684.64 L1585.41 684.64 L1585.97 684.64 L1586.53 684.64 L1587.09 684.64 L1587.65 684.64 L1588.2 684.64 L1588.76 684.64 L1589.32 684.64 L1589.88 684.64 L1590.44 684.64 L1591 684.64 L1591.56 684.64 L1592.12 684.64 L1592.68 684.64 L1593.24 684.64 L1593.8 684.64 L1594.36 684.64 L1594.92 684.64 L1595.47 684.64 L1596.03 684.64 L1596.59 684.64 L1597.15 684.64 L1597.71 684.64 L1598.27 684.64 L1598.83 684.64 L1599.39 684.64 L1599.95 684.64 L1600.51 684.64 L1601.07 684.64 L1601.63 684.64 L1602.19 684.64 L1602.74 684.64 L1603.3 684.64 L1603.86 684.64 L1604.42 684.64 L1604.98 684.64 L1605.54 684.64 L1606.1 684.64 L1606.66 684.64 L1607.22 684.64 L1607.78 684.64 L1608.34 684.64 L1608.9 684.64 L1609.46 684.64 L1610.02 684.64 L1610.57 684.64 L1611.13 684.64 L1611.69 684.64 L1612.25 684.64 L1612.81 684.64 L1613.37 684.64 L1613.93 684.64 L1614.49 684.64 L1615.05 684.64 L1615.61 684.64 L1616.17 684.64 L1616.73 684.64 L1617.29 684.64 L1617.84 684.64 L1618.4 684.64 L1618.96 684.64 L1619.52 684.64 L1620.08 684.64 L1620.64 684.64 L1621.2 684.64 L1621.76 684.64 L1622.32 684.64 L1622.88 684.64 L1623.44 684.64 L1624 684.64 L1624.56 684.64 L1625.11 684.64 L1625.67 684.64 L1626.23 684.64 L1626.79 684.64 L1627.35 684.64 L1627.91 684.64 L1628.47 684.64 L1629.03 684.64 L1629.59 684.64 L1630.15 684.64 L1630.71 684.64 L1631.27 684.64 L1631.83 684.64 L1632.39 684.64 L1632.94 684.64 L1633.5 684.64 L1634.06 684.64 L1634.62 684.64 L1635.18 684.64 L1635.74 684.64 L1636.3 684.64 L1636.86 684.64 L1637.42 684.64 L1637.98 684.64 L1638.54 684.64 L1639.1 684.64 L1639.66 684.64 L1640.21 684.64 L1640.77 684.64 L1641.33 684.64 L1641.89 684.64 L1642.45 684.64 L1643.01 684.64 L1643.57 684.64 L1644.13 684.64 L1644.69 684.64 L1645.25 684.64 L1645.81 684.64 L1646.37 684.64 L1646.93 684.64 L1647.48 684.64 L1648.04 684.64 L1648.6 684.64 L1649.16 684.64 L1649.72 684.64 L1650.28 684.64 L1650.84 684.64 L1651.4 684.64 L1651.96 684.64 L1652.52 684.64 L1653.08 684.64 L1653.64 684.64 L1654.2 684.64 L1654.76 684.64 L1655.31 684.64 L1655.87 684.64 L1656.43 684.64 L1656.99 684.64 L1657.55 684.64 L1658.11 684.64 L1658.67 684.64 L1659.23 684.64 L1659.79 684.64 L1660.35 684.64 L1660.91 684.64 L1661.47 684.64 L1662.03 684.64 L1662.58 684.64 L1663.14 684.64 L1663.7 684.64 L1664.26 684.64 L1664.82 684.64 L1665.38 684.64 L1665.94 684.64 L1666.5 684.64 L1667.06 684.64 L1667.62 684.64 L1668.18 684.64 L1668.74 684.64 L1669.3 684.64 L1669.85 684.64 L1670.41 684.64 L1670.97 684.64 L1671.53 684.64 L1672.09 684.64 L1672.65 684.64 L1673.21 684.64 L1673.77 684.64 L1674.33 684.64 L1674.89 684.64 L1675.45 684.64 L1676.01 684.64 L1676.57 684.64 L1677.13 684.64 L1677.68 684.64 L1678.24 684.64 L1678.8 684.64 L1679.36 684.64 L1679.92 684.64 L1680.48 684.64 L1681.04 684.64 L1681.6 684.64 L1682.16 684.64 L1682.72 684.64 L1683.28 684.64 L1683.84 684.64 L1684.4 684.64 L1684.95 684.64 L1685.51 684.64 L1686.07 684.64 L1686.63 684.64 L1687.19 684.64 L1687.75 684.64 L1688.31 684.64 L1688.87 684.64 L1689.43 684.64 L1689.99 684.64 L1690.55 684.64 L1691.11 684.64 L1691.67 684.64 L1692.23 684.64 L1692.78 684.64 L1693.34 684.64 L1693.9 684.64 L1694.46 684.64 L1695.02 684.64 L1695.58 684.64 L1696.14 684.64 L1696.7 684.64 L1697.26 684.64 L1697.82 684.64 L1698.38 684.64 L1698.94 684.64 L1699.5 684.64 L1700.05 684.64 L1700.61 684.64 L1701.17 684.64 L1701.73 684.64 L1702.29 684.64 L1702.85 684.64 L1703.41 684.64 L1703.97 684.64 L1704.53 684.64 L1705.09 684.64 L1705.65 684.64 L1706.21 684.64 L1706.77 684.64 L1707.32 684.64 L1707.88 684.64 L1708.44 684.64 L1709 684.64 L1709.56 684.64 L1710.12 684.64 L1710.68 684.64 L1711.24 684.64 L1711.8 684.64 L1712.36 684.64 L1712.92 684.64 L1713.48 684.64 L1714.04 684.64 L1714.6 684.64 L1715.15 684.64 L1715.71 684.64 L1716.27 684.64 L1716.83 684.64 L1717.39 684.64 L1717.95 684.64 L1718.51 684.64 L1719.07 684.64 L1719.63 684.64 L1720.19 684.64 L1720.75 684.64 L1721.31 684.64 L1721.87 684.64 L1722.42 684.64 L1722.98 684.64 L1723.54 684.64 L1724.1 684.64 L1724.66 684.64 L1725.22 684.64 L1725.78 684.64 L1726.34 684.64 L1726.9 684.64 L1727.46 684.64 L1728.02 684.64 L1728.58 684.64 L1729.14 684.64 L1729.69 684.64 L1730.25 684.64 L1730.81 684.64 L1731.37 684.64 L1731.93 684.64 L1732.49 684.64 L1733.05 684.64 L1733.61 684.64 L1734.17 684.64 L1734.73 684.64 L1735.29 684.64 L1735.85 684.64 L1736.41 684.64 L1736.97 684.64 L1737.52 684.64 L1738.08 684.64 L1738.64 684.64 L1739.2 684.64 L1739.76 684.64 L1740.32 684.64 L1740.88 684.64 L1741.44 684.64 L1742 684.64 L1742.56 684.64 L1743.12 684.64 L1743.68 684.64 L1744.24 684.64 L1744.79 684.64 L1745.35 684.64 L1745.91 684.64 L1746.47 684.64 L1747.03 684.64 L1747.59 684.64 L1748.15 684.64 L1748.71 684.64 L1749.27 684.64 L1749.83 684.64 L1750.39 684.64 L1750.95 684.64 L1751.51 684.64 L1752.06 684.64 L1752.62 684.64 L1753.18 684.64 L1753.74 684.64 L1754.3 684.64 L1754.86 684.64 L1755.42 684.64 L1755.98 684.64 L1756.54 684.64 L1757.1 684.64 L1757.66 684.64 L1758.22 684.64 L1758.78 684.64 L1759.34 684.64 L1759.89 684.64 L1760.45 684.64 L1761.01 684.64 L1761.57 684.64 L1762.13 684.64 L1762.69 684.64 L1763.25 684.64 L1763.81 684.64 L1764.37 684.64 L1764.93 684.64 L1765.49 684.64 L1766.05 684.64 L1766.61 684.64 L1767.16 684.64 L1767.72 684.64 L1768.28 684.64 L1768.84 684.64 L1769.4 684.64 L1769.96 684.64 L1770.52 684.64 L1771.08 684.64 L1771.64 684.64 L1772.2 684.64 L1772.76 684.64 L1773.32 684.64 L1773.88 684.64 L1774.43 684.64 L1774.99 684.64 L1775.55 684.64 L1776.11 684.64 L1776.67 684.64 L1777.23 684.64 L1777.79 684.64 L1778.35 684.64 L1778.91 684.64 L1779.47 684.64 L1780.03 684.64 L1780.59 684.64 L1781.15 684.64 L1781.71 684.64 L1782.26 684.64 L1782.82 684.64 L1783.38 684.64 L1783.94 684.64 L1784.5 684.64 L1785.06 684.64 L1785.62 684.64 L1786.18 684.64 L1786.74 684.64 L1787.3 684.64 L1787.86 684.64 L1788.42 684.64 L1788.98 684.64 L1789.53 684.64 L1790.09 684.64 L1790.65 684.64 L1791.21 684.64 L1791.77 684.64 L1792.33 684.64 L1792.89 684.64 L1793.45 684.64 L1794.01 684.64 L1794.57 684.64 L1795.13 684.64 L1795.69 684.64 L1796.25 684.64 L1796.8 684.64 L1797.36 684.64 L1797.92 684.64 L1798.48 684.64 L1799.04 684.64 L1799.6 684.64 L1800.16 684.64 L1800.72 684.64 L1801.28 684.64 L1801.84 684.64 L1802.4 684.64 L1802.96 684.64 L1803.52 684.64 L1804.08 684.64 L1804.63 684.64 L1805.19 684.64 L1805.75 684.64 L1806.31 684.64 L1806.87 684.64 L1807.43 684.64 L1807.99 684.64 L1808.55 684.64 L1809.11 684.64 L1809.67 684.64 L1810.23 684.64 L1810.79 684.64 L1811.35 684.64 L1811.9 684.64 L1812.46 684.64 L1813.02 684.64 L1813.58 684.64 L1814.14 684.64 L1814.7 684.64 L1815.26 684.64 L1815.82 684.64 L1816.38 684.64 L1816.94 684.64 L1817.5 684.64 L1818.06 684.64 L1818.62 684.64 L1819.18 684.64 L1819.73 684.64 L1820.29 684.64 L1820.85 684.64 L1821.41 684.64 L1821.97 684.64 L1822.53 684.64 L1823.09 684.64 L1823.65 684.64 L1824.21 684.64 L1824.77 684.64 L1825.33 684.64 L1825.89 684.64 L1826.45 684.64 L1827 684.64 L1827.56 684.64 L1828.12 684.64 L1828.68 684.64 L1829.24 684.64 L1829.8 684.64 L1830.36 684.64 L1830.92 684.64 L1831.48 684.64 L1832.04 684.64 L1832.6 684.64 L1833.16 684.64 L1833.72 684.64 L1834.27 684.64 L1834.83 684.64 L1835.39 684.64 L1835.95 684.64 L1836.51 684.64 L1837.07 684.64 L1837.63 684.64 L1838.19 684.64 L1838.19 682.757 L1837.63 682.757 L1837.07 682.757 L1836.51 682.757 L1835.95 682.757 L1835.39 682.757 L1834.83 682.757 L1834.27 682.757 L1833.72 682.757 L1833.16 682.757 L1832.6 682.757 L1832.04 682.757 L1831.48 682.757 L1830.92 682.757 L1830.36 682.757 L1829.8 682.757 L1829.24 682.757 L1828.68 682.757 L1828.12 682.757 L1827.56 682.757 L1827 682.757 L1826.45 682.757 L1825.89 682.757 L1825.33 682.757 L1824.77 682.757 L1824.21 682.757 L1823.65 682.757 L1823.09 682.757 L1822.53 682.757 L1821.97 682.757 L1821.41 682.757 L1820.85 682.757 L1820.29 682.757 L1819.73 682.757 L1819.18 682.757 L1818.62 682.757 L1818.06 682.757 L1817.5 682.757 L1816.94 682.757 L1816.38 682.757 L1815.82 682.757 L1815.26 682.757 L1814.7 682.757 L1814.14 682.757 L1813.58 682.757 L1813.02 682.757 L1812.46 682.757 L1811.9 682.757 L1811.35 682.757 L1810.79 682.757 L1810.23 682.757 L1809.67 682.757 L1809.11 682.757 L1808.55 682.757 L1807.99 682.757 L1807.43 682.757 L1806.87 682.757 L1806.31 682.757 L1805.75 682.757 L1805.19 682.757 L1804.63 682.757 L1804.08 682.757 L1803.52 682.757 L1802.96 682.757 L1802.4 682.757 L1801.84 682.757 L1801.28 682.757 L1800.72 682.757 L1800.16 682.757 L1799.6 682.757 L1799.04 682.757 L1798.48 682.757 L1797.92 682.757 L1797.36 682.757 L1796.8 682.757 L1796.25 682.757 L1795.69 682.757 L1795.13 682.757 L1794.57 682.757 L1794.01 682.757 L1793.45 682.757 L1792.89 682.757 L1792.33 682.757 L1791.77 682.757 L1791.21 682.757 L1790.65 682.757 L1790.09 682.757 L1789.53 682.757 L1788.98 682.757 L1788.42 682.757 L1787.86 682.757 L1787.3 682.757 L1786.74 682.757 L1786.18 682.757 L1785.62 682.757 L1785.06 682.757 L1784.5 682.757 L1783.94 682.757 L1783.38 682.757 L1782.82 682.757 L1782.26 682.757 L1781.71 682.757 L1781.15 682.757 L1780.59 682.757 L1780.03 682.757 L1779.47 682.757 L1778.91 682.757 L1778.35 682.757 L1777.79 682.757 L1777.23 682.757 L1776.67 682.757 L1776.11 682.757 L1775.55 682.757 L1774.99 682.757 L1774.43 682.757 L1773.88 682.757 L1773.32 682.757 L1772.76 682.757 L1772.2 682.757 L1771.64 682.757 L1771.08 682.757 L1770.52 682.757 L1769.96 682.757 L1769.4 682.757 L1768.84 682.757 L1768.28 682.757 L1767.72 682.757 L1767.16 682.757 L1766.61 682.757 L1766.05 682.757 L1765.49 682.757 L1764.93 682.757 L1764.37 682.757 L1763.81 682.757 L1763.25 682.757 L1762.69 682.757 L1762.13 682.757 L1761.57 682.757 L1761.01 682.757 L1760.45 682.757 L1759.89 682.757 L1759.34 682.757 L1758.78 682.757 L1758.22 682.757 L1757.66 682.757 L1757.1 682.757 L1756.54 682.757 L1755.98 682.757 L1755.42 682.757 L1754.86 682.757 L1754.3 682.757 L1753.74 682.757 L1753.18 682.757 L1752.62 682.757 L1752.06 682.757 L1751.51 682.757 L1750.95 682.757 L1750.39 682.757 L1749.83 682.757 L1749.27 682.757 L1748.71 682.757 L1748.15 682.757 L1747.59 682.757 L1747.03 682.757 L1746.47 682.757 L1745.91 682.757 L1745.35 682.757 L1744.79 682.757 L1744.24 682.757 L1743.68 682.757 L1743.12 682.757 L1742.56 682.757 L1742 682.757 L1741.44 682.757 L1740.88 682.757 L1740.32 682.757 L1739.76 682.757 L1739.2 682.757 L1738.64 682.757 L1738.08 682.757 L1737.52 682.757 L1736.97 682.757 L1736.41 682.757 L1735.85 682.757 L1735.29 682.757 L1734.73 682.757 L1734.17 682.757 L1733.61 682.757 L1733.05 682.757 L1732.49 682.757 L1731.93 682.757 L1731.37 682.757 L1730.81 682.757 L1730.25 682.757 L1729.69 682.757 L1729.14 682.757 L1728.58 682.757 L1728.02 682.757 L1727.46 682.757 L1726.9 682.757 L1726.34 682.757 L1725.78 682.757 L1725.22 682.757 L1724.66 682.757 L1724.1 682.757 L1723.54 682.757 L1722.98 682.757 L1722.42 682.757 L1721.87 682.757 L1721.31 682.757 L1720.75 682.757 L1720.19 682.757 L1719.63 682.757 L1719.07 682.757 L1718.51 682.757 L1717.95 682.757 L1717.39 682.757 L1716.83 682.757 L1716.27 682.757 L1715.71 682.757 L1715.15 682.757 L1714.6 682.757 L1714.04 682.757 L1713.48 682.757 L1712.92 682.757 L1712.36 682.757 L1711.8 682.757 L1711.24 682.757 L1710.68 682.757 L1710.12 682.757 L1709.56 682.757 L1709 682.757 L1708.44 682.757 L1707.88 682.757 L1707.32 682.757 L1706.77 682.757 L1706.21 682.757 L1705.65 682.757 L1705.09 682.757 L1704.53 682.757 L1703.97 682.757 L1703.41 682.757 L1702.85 682.757 L1702.29 682.757 L1701.73 682.757 L1701.17 682.757 L1700.61 682.757 L1700.05 682.757 L1699.5 682.757 L1698.94 682.757 L1698.38 682.757 L1697.82 682.757 L1697.26 682.757 L1696.7 682.757 L1696.14 682.757 L1695.58 682.757 L1695.02 682.757 L1694.46 682.757 L1693.9 682.757 L1693.34 682.757 L1692.78 682.757 L1692.23 682.757 L1691.67 682.757 L1691.11 682.757 L1690.55 682.757 L1689.99 682.757 L1689.43 682.757 L1688.87 682.757 L1688.31 682.757 L1687.75 682.757 L1687.19 682.757 L1686.63 682.757 L1686.07 682.757 L1685.51 682.757 L1684.95 682.757 L1684.4 682.757 L1683.84 682.757 L1683.28 682.757 L1682.72 682.757 L1682.16 682.757 L1681.6 682.757 L1681.04 682.757 L1680.48 682.757 L1679.92 682.757 L1679.36 682.757 L1678.8 682.757 L1678.24 682.757 L1677.68 682.757 L1677.13 682.757 L1676.57 682.757 L1676.01 682.757 L1675.45 682.757 L1674.89 682.757 L1674.33 682.757 L1673.77 682.757 L1673.21 682.757 L1672.65 682.757 L1672.09 682.757 L1671.53 682.757 L1670.97 682.757 L1670.41 682.757 L1669.85 682.757 L1669.3 682.757 L1668.74 682.757 L1668.18 682.757 L1667.62 682.757 L1667.06 682.757 L1666.5 682.757 L1665.94 682.757 L1665.38 682.757 L1664.82 682.757 L1664.26 682.757 L1663.7 682.757 L1663.14 682.757 L1662.58 682.757 L1662.03 682.757 L1661.47 682.757 L1660.91 682.757 L1660.35 682.757 L1659.79 682.757 L1659.23 682.757 L1658.67 682.757 L1658.11 682.757 L1657.55 682.757 L1656.99 682.757 L1656.43 682.757 L1655.87 682.757 L1655.31 682.757 L1654.76 682.757 L1654.2 682.757 L1653.64 682.757 L1653.08 682.757 L1652.52 682.757 L1651.96 682.757 L1651.4 682.757 L1650.84 682.757 L1650.28 682.757 L1649.72 682.757 L1649.16 682.757 L1648.6 682.757 L1648.04 682.757 L1647.48 682.757 L1646.93 682.757 L1646.37 682.757 L1645.81 682.757 L1645.25 682.757 L1644.69 682.757 L1644.13 682.757 L1643.57 682.757 L1643.01 682.757 L1642.45 682.757 L1641.89 682.757 L1641.33 682.757 L1640.77 682.757 L1640.21 682.757 L1639.66 682.757 L1639.1 682.757 L1638.54 682.757 L1637.98 682.757 L1637.42 682.757 L1636.86 682.757 L1636.3 682.757 L1635.74 682.757 L1635.18 682.757 L1634.62 682.757 L1634.06 682.757 L1633.5 682.757 L1632.94 682.757 L1632.39 682.757 L1631.83 682.757 L1631.27 682.757 L1630.71 682.757 L1630.15 682.757 L1629.59 682.757 L1629.03 682.757 L1628.47 682.757 L1627.91 682.757 L1627.35 682.757 L1626.79 682.757 L1626.23 682.757 L1625.67 682.757 L1625.11 682.757 L1624.56 682.757 L1624 682.757 L1623.44 682.757 L1622.88 682.757 L1622.32 682.757 L1621.76 682.757 L1621.2 682.757 L1620.64 682.757 L1620.08 682.757 L1619.52 682.757 L1618.96 682.757 L1618.4 682.757 L1617.84 682.757 L1617.29 682.757 L1616.73 682.757 L1616.17 682.757 L1615.61 682.757 L1615.05 682.757 L1614.49 682.757 L1613.93 682.757 L1613.37 682.757 L1612.81 682.757 L1612.25 682.757 L1611.69 682.757 L1611.13 682.757 L1610.57 682.757 L1610.02 682.757 L1609.46 682.757 L1608.9 682.757 L1608.34 682.757 L1607.78 682.757 L1607.22 682.757 L1606.66 682.757 L1606.1 682.757 L1605.54 682.757 L1604.98 682.757 L1604.42 682.757 L1603.86 682.757 L1603.3 682.757 L1602.74 682.757 L1602.19 682.757 L1601.63 682.757 L1601.07 682.757 L1600.51 682.757 L1599.95 682.757 L1599.39 682.757 L1598.83 682.757 L1598.27 682.757 L1597.71 682.757 L1597.15 682.757 L1596.59 682.757 L1596.03 682.757 L1595.47 682.757 L1594.92 682.757 L1594.36 682.757 L1593.8 682.757 L1593.24 682.757 L1592.68 682.757 L1592.12 682.757 L1591.56 682.757 L1591 682.757 L1590.44 682.757 L1589.88 682.757 L1589.32 682.757 L1588.76 682.757 L1588.2 682.757 L1587.65 682.757 L1587.09 682.757 L1586.53 682.757 L1585.97 682.757 L1585.41 682.757 L1584.85 682.757 L1584.29 682.757 L1583.73 682.757 L1583.17 682.757 L1582.61 682.757 L1582.05 682.757 L1581.49 682.757 L1580.93 682.757 L1580.37 682.757 L1579.82 682.757 L1579.26 682.757 L1578.7 682.757 L1578.14 682.757 L1577.58 682.757 L1577.02 682.757 L1576.46 682.757 L1575.9 682.757 L1575.34 682.757 L1574.78 682.757 L1574.22 682.757 L1573.66 682.757 L1573.1 682.757 L1572.55 682.757 L1571.99 682.757 L1571.43 682.757 L1570.87 682.757 L1570.31 682.757 L1569.75 682.757 L1569.19 682.757 L1568.63 682.757 L1568.07 682.757 L1567.51 682.757 L1566.95 682.757 L1566.39 682.757 L1565.83 682.757 L1565.28 682.757 L1564.72 682.757 L1564.16 682.757 L1563.6 682.757 L1563.04 682.757 L1562.48 682.757 L1561.92 682.757 L1561.36 682.757 L1560.8 682.757 L1560.24 682.757 L1559.68 682.757 L1559.12 682.757 L1558.56 682.757 L1558 682.757 L1557.45 682.757 L1556.89 682.757 L1556.33 682.757 L1555.77 682.757 L1555.21 682.757 L1554.65 682.757 L1554.09 682.757 L1553.53 682.757 L1552.97 682.757 L1552.41 682.757 L1551.85 682.757 L1551.29 682.757 L1550.73 682.757 L1550.18 682.757 L1549.62 682.757 L1549.06 682.757 L1548.5 682.757 L1547.94 682.757 L1547.38 682.757 L1546.82 682.757 L1546.26 682.757 L1545.7 682.757 L1545.14 682.757 L1544.58 682.757 L1544.02 682.757 L1543.46 682.757 L1542.9 682.757 L1542.35 682.757 L1541.79 682.757 L1541.23 682.757 L1540.67 682.757 L1540.11 682.757 L1539.55 682.757 L1538.99 682.757 L1538.43 682.757 L1537.87 682.757 L1537.31 682.757 L1536.75 682.757 L1536.19 682.757 L1535.63 682.757 L1535.08 682.757 L1534.52 682.757 L1533.96 682.757 L1533.4 682.757 L1532.84 682.757 L1532.28 682.757 L1531.72 682.757 L1531.16 682.757 L1530.6 682.757 L1530.04 682.757 L1529.48 682.757 L1528.92 682.757 L1528.36 682.757 L1527.81 682.757 L1527.25 682.757 L1526.69 682.757 L1526.13 682.757 L1525.57 682.757 L1525.01 682.757 L1524.45 682.757 L1523.89 682.757 L1523.33 682.757 L1522.77 682.757 L1522.21 682.757 L1521.65 682.757 L1521.09 682.757 L1520.53 682.757 L1519.98 682.757 L1519.42 682.757 L1518.86 682.757 L1518.3 682.757 L1517.74 682.757 L1517.18 682.757 L1516.62 682.757 L1516.06 682.757 L1515.5 682.757 L1514.94 682.757 L1514.38 682.757 L1513.82 682.757 L1513.26 682.757 L1512.71 682.757 L1512.15 682.757 L1511.59 682.757 L1511.03 682.757 L1510.47 682.757 L1509.91 682.757 L1509.35 682.757 L1508.79 682.757 L1508.23 682.757 L1507.67 682.757 L1507.11 682.757 L1506.55 682.757 L1505.99 682.757 L1505.44 682.757 L1504.88 682.757 L1504.32 682.757 L1503.76 682.757 L1503.2 682.757 L1502.64 682.757 L1502.08 682.757 L1501.52 682.757 L1500.96 682.757 L1500.4 682.757 L1499.84 682.757 L1499.28 682.757 L1498.72 682.757 L1498.16 682.757 L1497.61 682.757 L1497.05 682.757 L1496.49 682.757 L1495.93 682.757 L1495.37 682.757 L1494.81 682.757 L1494.25 682.757 L1493.69 682.757 L1493.13 682.757 L1492.57 682.757 L1492.01 682.757 L1491.45 682.757 L1490.89 682.757 L1490.34 682.757 L1489.78 682.757 L1489.22 682.757 L1488.66 682.757 L1488.1 682.757 L1487.54 682.757 L1486.98 682.757 L1486.42 682.757 L1485.86 682.757 L1485.3 682.757 L1484.74 682.757 L1484.18 682.757 L1483.62 682.757 L1483.07 682.757 L1482.51 682.757 L1481.95 682.757 L1481.39 682.757 L1480.83 682.757 L1480.27 682.757 L1479.71 682.757 L1479.15 682.757 L1478.59 682.757 L1478.03 682.757 L1477.47 682.757 L1476.91 682.757 L1476.35 682.757 L1475.79 682.757 L1475.24 682.757 L1474.68 682.757 L1474.12 682.757 L1473.56 682.757 L1473 682.757 L1472.44 682.757 L1471.88 682.757 L1471.32 682.757 L1470.76 682.757 L1470.2 682.757 L1469.64 682.757 L1469.08 682.757 L1468.52 682.757 L1467.97 682.757 L1467.41 682.757 L1466.85 682.757 L1466.29 682.757 L1465.73 682.757 L1465.17 682.757 L1464.61 682.757 L1464.05 682.757 L1463.49 682.757 L1462.93 682.757 L1462.37 682.757 L1461.81 682.757 L1461.25 682.757 L1460.7 682.757 L1460.14 682.757 L1459.58 682.757 L1459.02 682.757 L1458.46 682.757 L1457.9 682.757 L1457.34 682.757 L1456.78 682.757 L1456.22 682.757 L1455.66 682.757 L1455.1 682.757 L1454.54 682.757 L1453.98 682.757 L1453.42 682.757 L1452.87 682.757 L1452.31 682.757 L1451.75 682.757 L1451.19 682.757 L1450.63 682.757 L1450.07 682.757 L1449.51 682.757 L1448.95 682.757 L1448.39 682.757 L1447.83 682.757 L1447.27 682.757 L1446.71 682.757 L1446.15 682.757 L1445.6 682.757 L1445.04 682.757 L1444.48 682.757 L1443.92 682.757 L1443.36 682.757 L1442.8 682.757 L1442.24 682.757 L1441.68 682.757 L1441.12 682.757 L1440.56 682.757 L1440 682.757 L1439.44 682.757 L1438.88 682.757 L1438.33 682.757 L1437.77 682.757 L1437.21 682.757 L1436.65 682.757 L1436.09 682.757 L1435.53 682.757 L1434.97 682.757 L1434.41 682.757 L1433.85 682.757 L1433.29 682.757 L1432.73 682.757 L1432.17 682.757 L1431.61 682.757 L1431.05 682.757 L1430.5 682.757 L1429.94 682.757 L1429.38 682.757 L1428.82 682.757 L1428.26 682.757 L1427.7 682.757 L1427.14 682.757 L1426.58 682.757 L1426.02 682.757 L1425.46 682.757 L1424.9 682.757 L1424.34 682.757 L1423.78 682.757 L1423.23 682.757 L1422.67 682.757 L1422.11 682.757 L1421.55 682.757 L1420.99 682.757 L1420.43 682.757 L1419.87 682.757 L1419.31 682.757 L1418.75 682.757 L1418.19 682.757 L1417.63 682.757 L1417.07 682.757 L1416.51 682.757 L1415.95 682.757 L1415.4 682.757 L1414.84 682.757 L1414.28 682.757 L1413.72 682.757 L1413.16 682.757 L1412.6 682.757 L1412.04 682.757 L1411.48 682.757 L1410.92 682.757 L1410.36 682.757 L1409.8 682.757 L1409.24 682.757 L1408.68 682.757 L1408.13 682.757 L1407.57 682.757 L1407.01 682.757 L1406.45 682.757 L1405.89 682.757 L1405.33 682.757 L1404.77 682.757 L1404.21 682.757 L1403.65 682.757 L1403.09 682.757 L1402.53 682.757 L1401.97 682.757 L1401.41 682.757 L1400.86 682.757 L1400.3 682.757 L1399.74 682.757 L1399.18 682.757 L1398.62 682.757 L1398.06 682.757 L1397.5 682.757 L1396.94 682.757 L1396.38 682.757 L1395.82 682.757 L1395.26 682.757 L1394.7 682.757 L1394.14 682.757 L1393.58 682.757 L1393.03 682.757 L1392.47 682.757 L1391.91 682.757 L1391.35 682.757 L1390.79 682.757 L1390.23 682.757 L1389.67 682.757 L1389.11 682.757 L1388.55 682.757 L1387.99 682.757 L1387.43 682.757 L1386.87 682.757 L1386.31 682.757 L1385.76 682.757 L1385.2 682.757 L1384.64 682.757 L1384.08 682.757 L1383.52 682.757 L1382.96 682.757 L1382.4 682.757 L1381.84 682.757 L1381.28 682.757 L1380.72 682.757 L1380.16 682.757 L1379.6 682.757 L1379.04 682.757 L1378.49 682.757 L1377.93 682.757 L1377.37 682.757 L1376.81 682.757 L1376.25 682.757 L1375.69 682.757 L1375.13 682.757 L1374.57 682.757 L1374.01 682.757 L1373.45 682.757 L1372.89 682.757 L1372.33 682.757 L1371.77 682.757 L1371.21 682.757 L1370.66 682.757 L1370.1 682.757 L1369.54 682.757 L1368.98 682.757 L1368.42 682.757 L1367.86 682.757 L1367.3 682.757 L1366.74 682.757 L1366.18 682.757 L1365.62 682.757 L1365.06 682.757 L1364.5 682.757 L1363.94 682.757 L1363.39 682.757 L1362.83 682.757 L1362.27 682.757 L1361.71 682.757 L1361.15 682.757 L1360.59 682.757 L1360.03 682.757 L1359.47 682.757 L1358.91 682.757 L1358.35 682.757 L1357.79 682.757 L1357.23 682.757 L1356.67 682.757 L1356.12 682.757 L1355.56 682.757 L1355 682.757 L1354.44 682.757 L1353.88 682.757 L1353.32 682.757 L1352.76 682.757 L1352.2 682.757 L1351.64 682.757 L1351.08 682.757 L1350.52 682.757 L1349.96 682.757 L1349.4 682.757 L1348.84 682.757 L1348.29 682.757 L1347.73 682.757 L1347.17 682.757 L1346.61 682.757 L1346.05 682.757 L1345.49 682.757 L1344.93 682.757 L1344.37 682.757 L1343.81 682.757 L1343.25 682.757 L1342.69 682.757 L1342.13 682.757 L1341.57 682.757 L1341.02 682.757 L1340.46 682.757 L1339.9 682.757 L1339.34 682.757 L1338.78 682.757 L1338.22 682.757 L1337.66 682.757 L1337.1 682.757 L1336.54 682.757 L1335.98 682.757 L1335.42 682.757 L1334.86 682.757 L1334.3 682.757 L1333.75 682.757 L1333.19 682.757 L1332.63 682.757 L1332.07 682.757 L1331.51 682.757 L1330.95 682.757 L1330.39 682.757 L1329.83 682.757 L1329.27 682.757 L1328.71 682.757 L1328.15 682.757 L1327.59 682.757 L1327.03 682.757 L1326.47 682.757 L1325.92 682.757 L1325.36 682.757 L1324.8 682.757 L1324.24 682.757 L1323.68 682.757 L1323.12 682.757 L1322.56 682.757 L1322 682.757 L1321.44 682.757 L1320.88 682.757 L1320.32 682.757 L1319.76 682.757 L1319.2 682.757 L1318.65 682.757 L1318.09 682.757 L1317.53 682.757 L1316.97 682.757 L1316.41 682.757 L1315.85 682.757 L1315.29 682.757 L1314.73 682.757 L1314.17 682.757 L1313.61 682.757 L1313.05 682.757 L1312.49 682.757 L1311.93 682.757 L1311.38 682.757 L1310.82 682.757 L1310.26 682.757 L1309.7 682.757 L1309.14 682.757 L1308.58 682.757 L1308.02 682.757 L1307.46 682.757 L1306.9 682.757 L1306.34 682.757 L1305.78 682.757 L1305.22 682.757 L1304.66 682.757 L1304.1 682.757 L1303.55 682.757 L1302.99 682.757 L1302.43 682.757 L1301.87 682.757 L1301.31 682.757 L1300.75 682.757 L1300.19 682.757 L1299.63 682.757 L1299.07 682.757 L1298.51 682.757 L1297.95 682.757 L1297.39 682.757 L1296.83 682.757 L1296.28 682.757 L1295.72 682.757 L1295.16 682.757 L1294.6 682.757 L1294.04 682.757 L1293.48 682.757 L1292.92 682.757 L1292.36 682.757 L1291.8 682.757 L1291.24 682.757 L1290.68 682.757 L1290.12 682.757 L1289.56 682.757 L1289 682.757 L1288.45 682.757 L1287.89 682.757 L1287.33 682.757 L1286.77 682.757 L1286.21 682.757 L1285.65 682.757 L1285.09 682.757 L1284.53 682.757 L1283.97 682.757 L1283.41 682.757 L1282.85 682.757 L1282.29 682.757 L1281.73 682.757 L1281.18 682.757 L1280.62 682.757 L1280.06 682.757 L1279.5 682.757 L1278.94 682.757 L1278.38 682.757 L1277.82 682.757 L1277.26 682.757 L1276.7 682.757 L1276.14 682.757 L1275.58 682.757 L1275.02 682.757 L1274.46 682.757 L1273.91 682.757 L1273.35 682.757 L1272.79 682.757 L1272.23 682.757 L1271.67 682.757 L1271.11 682.757 L1270.55 682.757 L1269.99 682.757 L1269.43 682.757 L1268.87 682.757 L1268.31 682.757 L1267.75 682.757 L1267.19 682.757 L1266.63 682.757 L1266.08 682.757 L1265.52 682.757 L1264.96 682.757 L1264.4 682.757 L1263.84 682.757 L1263.28 682.757 L1262.72 682.757 L1262.16 682.757 L1261.6 682.757 L1261.04 682.757 L1260.48 682.757 L1259.92 682.757 L1259.36 682.757 L1258.81 682.757 L1258.25 682.757 L1257.69 682.757 L1257.13 682.757 L1256.57 682.757 L1256.01 682.757 L1255.45 682.757 L1254.89 682.757 L1254.33 682.757 L1253.77 682.757 L1253.21 682.757 L1252.65 682.757 L1252.09 682.757 L1251.54 682.757 L1250.98 682.757 L1250.42 682.757 L1249.86 682.757 L1249.3 682.757 L1248.74 682.757 L1248.18 682.757 L1247.62 682.757 L1247.06 682.757 L1246.5 682.757 L1245.94 682.757 L1245.38 682.757 L1244.82 682.757 L1244.26 682.757 L1243.71 682.757 L1243.15 682.757 L1242.59 682.757 L1242.03 682.757 L1241.47 682.757 L1240.91 682.757 L1240.35 682.757 L1239.79 682.757 L1239.23 682.757 L1238.67 682.757 L1238.11 682.757 L1237.55 682.757 L1236.99 682.757 L1236.44 682.757 L1235.88 682.757 L1235.32 682.757 L1234.76 682.757 L1234.2 682.757 L1233.64 682.757 L1233.08 682.757 L1232.52 682.757 L1231.96 682.757 L1231.4 682.757 L1230.84 682.757 L1230.28 682.757 L1229.72 682.757 L1229.17 682.757 L1228.61 682.757 L1228.05 682.757 L1227.49 682.757 L1226.93 682.757 L1226.37 682.757 L1225.81 682.757 L1225.25 682.757 L1224.69 682.757 L1224.13 682.757 L1223.57 682.757 L1223.01 682.757 L1222.45 682.757 L1221.89 682.757 L1221.34 682.757 L1220.78 682.757 L1220.22 682.757 L1219.66 682.757 L1219.1 682.757 L1218.54 682.757 L1217.98 682.757 L1217.42 682.757 L1216.86 682.757 L1216.3 682.757 L1215.74 682.757 L1215.18 682.757 L1214.62 682.757 L1214.07 682.757 L1213.51 682.757 L1212.95 682.757 L1212.39 682.757 L1211.83 682.757 L1211.27 682.757 L1210.71 682.757 L1210.15 682.757 L1209.59 682.757 L1209.03 682.757 L1208.47 682.757 L1207.91 682.757 L1207.35 682.757 L1206.8 682.757 L1206.24 682.757 L1205.68 682.757 L1205.12 682.757 L1204.56 682.757 L1204 682.757 L1203.44 682.757 L1202.88 682.757 L1202.32 682.757 L1201.76 682.757 L1201.2 682.757 L1200.64 682.757 L1200.08 682.757 L1199.52 682.757 L1198.97 682.757 L1198.41 682.757 L1197.85 682.757 L1197.29 682.757 L1196.73 682.757 L1196.17 682.757 L1195.61 682.757 L1195.05 682.757 L1194.49 682.757 L1193.93 682.757 L1193.37 682.757 L1192.81 682.757 L1192.25 682.757 L1191.7 682.757 L1191.14 682.757 L1190.58 682.757 L1190.02 682.757 L1189.46 682.757 L1188.9 682.757 L1188.34 682.757 L1187.78 682.757 L1187.22 682.757 L1186.66 682.757 L1186.1 682.757 L1185.54 682.757 L1184.98 682.757 L1184.43 682.757 L1183.87 682.757 L1183.31 682.757 L1182.75 682.757 L1182.19 682.757 L1181.63 682.757 L1181.07 682.757 L1180.51 682.757 L1179.95 682.757 L1179.39 682.757 L1178.83 682.757 L1178.27 682.757 L1177.71 682.757 L1177.15 682.757 L1176.6 682.757 L1176.04 682.757 L1175.48 682.757 L1174.92 682.757 L1174.36 682.757 L1173.8 682.757 L1173.24 682.757 L1172.68 682.757 L1172.12 682.757 L1171.56 682.757 L1171 682.757 L1170.44 682.757 L1169.88 682.757 L1169.33 682.757 L1168.77 682.757 L1168.21 682.757 L1167.65 682.757 L1167.09 682.757 L1166.53 682.757 L1165.97 682.757 L1165.41 682.757 L1164.85 682.757 L1164.29 682.757 L1163.73 682.757 L1163.17 682.757 L1162.61 682.757 L1162.05 682.757 L1161.5 682.757 L1160.94 682.757 L1160.38 682.757 L1159.82 682.757 L1159.26 682.757 L1158.7 682.757 L1158.14 682.757 L1157.58 682.757 L1157.02 682.757 L1156.46 682.757 L1155.9 682.757 L1155.34 682.757 L1154.78 682.757 L1154.23 682.757 L1153.67 682.757 L1153.11 682.757 L1152.55 682.757 L1151.99 682.757 L1151.43 682.757 L1150.87 682.757 L1150.31 682.757 L1149.75 682.757 L1149.19 682.757 L1148.63 682.757 L1148.07 682.757 L1147.51 682.757 L1146.96 682.757 L1146.4 682.757 L1145.84 682.757 L1145.28 682.757 L1144.72 682.757 L1144.16 682.757 L1143.6 682.757 L1143.04 682.757 L1142.48 682.757 L1141.92 682.757 L1141.36 682.757 L1140.8 682.757 L1140.24 682.757 L1139.68 682.757 L1139.13 682.757 L1138.57 682.757 L1138.01 682.757 L1137.45 682.757 L1136.89 682.757 L1136.33 682.757 L1135.77 682.757 L1135.21 682.757 L1134.65 682.757 L1134.09 682.757 L1133.53 682.757 L1132.97 682.757 L1132.41 682.757 L1131.86 682.757 L1131.3 682.757 L1130.74 682.757 L1130.18 682.757 L1129.62 682.757 L1129.06 682.757 L1128.5 682.757 L1127.94 682.757 L1127.38 682.757 L1126.82 682.757 L1126.26 682.757 L1125.7 682.757 L1125.14 682.757 L1124.59 682.757 L1124.03 682.757 L1123.47 682.757 L1122.91 682.757 L1122.35 682.757 L1121.79 682.757 L1121.23 682.757 L1120.67 682.757 L1120.11 682.757 L1119.55 682.757 L1118.99 682.757 L1118.43 682.757 L1117.87 682.757 L1117.31 682.757 L1116.76 682.757 L1116.2 682.757 L1115.64 682.757 L1115.08 682.757 L1114.52 682.757 L1113.96 682.757 L1113.4 682.757 L1112.84 682.757 L1112.28 682.757 L1111.72 682.757 L1111.16 682.757 L1110.6 682.757 L1110.04 682.757 L1109.49 682.757 L1108.93 682.757 L1108.37 682.757 L1107.81 682.757 L1107.25 682.757 L1106.69 682.757 L1106.13 682.757 L1105.57 682.757 L1105.01 682.757 L1104.45 682.757 L1103.89 682.757 L1103.33 682.757 L1102.77 682.757 L1102.22 682.757 L1101.66 682.757 L1101.1 682.757 L1100.54 682.757 L1099.98 682.757 L1099.42 682.757 L1098.86 682.757 L1098.3 682.757 L1097.74 682.757 L1097.18 682.757 L1096.62 682.757 L1096.06 682.757 L1095.5 682.757 L1094.94 682.757 L1094.39 682.757 L1093.83 682.757 L1093.27 682.757 L1092.71 682.757 L1092.15 682.757 L1091.59 682.757 L1091.03 682.757 L1090.47 682.757 L1089.91 682.757 L1089.35 682.757 L1088.79 682.757 L1088.23 682.757 L1087.67 682.757 L1087.12 682.757 L1086.56 682.757 L1086 682.757 L1085.44 682.757 L1084.88 682.757 L1084.32 682.757 L1083.76 682.757 L1083.2 682.757 L1082.64 682.757 L1082.08 682.757 L1081.52 682.757 L1080.96 682.757 L1080.4 682.757 L1079.85 682.757 L1079.29 682.757 L1078.73 682.757 L1078.17 682.757 L1077.61 682.757 L1077.05 682.757 L1076.49 682.757 L1075.93 682.757 L1075.37 682.757 L1074.81 682.757 L1074.25 682.757 L1073.69 682.757 L1073.13 682.757 L1072.57 682.757 L1072.02 682.757 L1071.46 682.757 L1070.9 682.757 L1070.34 682.757 L1069.78 682.757 L1069.22 682.757 L1068.66 682.757 L1068.1 682.757 L1067.54 682.757 L1066.98 682.757 L1066.42 682.757 L1065.86 682.757 L1065.3 682.757 L1064.75 682.757 L1064.19 682.757 L1063.63 682.757 L1063.07 682.757 L1062.51 682.757 L1061.95 682.757 L1061.39 682.757 L1060.83 682.757 L1060.27 682.757 L1059.71 682.757 L1059.15 682.757 L1058.59 682.757 L1058.03 682.757 L1057.48 682.757 L1056.92 682.757 L1056.36 682.757 L1055.8 682.757 L1055.24 682.757 L1054.68 682.757 L1054.12 682.757 L1053.56 682.757 L1053 682.757 L1052.44 682.757 L1051.88 682.757 L1051.32 682.757 L1050.76 682.757 L1050.2 682.757 L1049.65 682.757 L1049.09 682.757 L1048.53 682.757 L1047.97 682.757 L1047.41 682.757 L1046.85 682.757 L1046.29 682.757 L1045.73 682.757 L1045.17 682.757 L1044.61 682.757 L1044.05 682.757 L1043.49 682.757 L1042.93 682.757 L1042.38 682.757 L1041.82 682.757 L1041.26 682.757 L1040.7 682.757 L1040.14 682.757 L1039.58 682.757 L1039.02 682.757 L1038.46 682.757 L1037.9 682.757 L1037.34 682.757 L1036.78 682.757 L1036.22 682.757 L1035.66 682.757 L1035.1 682.757 L1034.55 682.757 L1033.99 682.757 L1033.43 682.757 L1032.87 682.757 L1032.31 682.757 L1031.75 682.757 L1031.19 682.757 L1030.63 682.757 L1030.07 682.757 L1029.51 682.757 L1028.95 682.757 L1028.39 682.757 L1027.83 682.757 L1027.28 682.757 L1026.72 682.757 L1026.16 682.757 L1025.6 682.757 L1025.04 682.757 L1024.48 682.757 L1023.92 682.757 L1023.36 682.757 L1022.8 682.757 L1022.24 682.757 L1021.68 682.757 L1021.12 682.757 L1020.56 682.757 L1020.01 682.757 L1019.45 682.757 L1018.89 682.757 L1018.33 682.757 L1017.77 682.757 L1017.21 682.757 L1016.65 682.757 L1016.09 682.757 L1015.53 682.757 L1014.97 682.757 L1014.41 682.757 L1013.85 682.757 L1013.29 682.757 L1012.73 682.757 L1012.18 682.757 L1011.62 682.757 L1011.06 682.757 L1010.5 682.757 L1009.94 682.757 L1009.38 682.757 L1008.82 682.757 L1008.26 682.757 L1007.7 682.757 L1007.14 682.757 L1006.58 682.757 L1006.02 682.757 L1005.46 682.757 L1004.91 682.757 L1004.35 682.757 L1003.79 682.757 L1003.23 682.757 L1002.67 682.757 L1002.11 682.757 L1001.55 682.757 L1000.99 682.757 L1000.43 682.757 L999.872 682.757 L999.313 682.757 L998.754 682.757 L998.194 682.757 L997.635 682.757 L997.076 682.757 L996.517 682.757 L995.957 682.757 L995.398 682.757 L994.839 682.757 L994.28 682.757 L993.72 682.757 L993.161 682.757 L992.602 682.757 L992.043 682.757 L991.483 682.757 L990.924 682.757 L990.365 682.757 L989.806 682.757 L989.246 682.757 L988.687 682.757 L988.128 682.757 L987.569 682.757 L987.009 682.757 L986.45 682.757 L985.891 682.757 L985.332 682.757 L984.772 682.757 L984.213 682.757 L983.654 682.757 L983.095 682.757 L982.535 682.757 L981.976 682.757 L981.417 682.757 L980.858 682.757 L980.298 682.757 L979.739 682.757 L979.18 682.757 L978.621 682.757 L978.061 682.757 L977.502 682.757 L976.943 682.757 L976.384 682.757 L975.824 682.757 L975.265 682.757 L974.706 682.757 L974.147 682.757 L973.587 682.757 L973.028 682.757 L972.469 682.757 L971.91 682.757 L971.35 682.757 L970.791 682.757 L970.232 682.757 L969.673 682.757 L969.113 682.757 L968.554 682.757 L967.995 682.757 L967.436 682.757 L966.876 682.757 L966.317 682.757 L965.758 682.757 L965.199 682.757 L964.639 682.757 L964.08 682.757 L963.521 682.757 L962.962 682.757 L962.402 682.757 L961.843 682.757 L961.284 682.757 L960.725 682.757 L960.165 682.757 L959.606 682.757 L959.047 682.757 L958.488 682.757 L957.928 682.757 L957.369 682.757 L956.81 682.757 L956.251 682.757 L955.691 682.757 L955.132 682.757 L954.573 682.757 L954.014 682.757 L953.454 682.757 L952.895 682.757 L952.336 682.757 L951.777 682.757 L951.217 682.757 L950.658 682.757 L950.099 682.757 L949.54 682.757 L948.98 682.757 L948.421 682.757 L947.862 682.757 L947.303 682.757 L946.743 682.757 L946.184 682.757 L945.625 682.757 L945.066 682.757 L944.506 682.757 L943.947 682.757 L943.388 682.757 L942.829 682.757 L942.269 682.757 L941.71 682.757 L941.151 682.757 L940.592 682.757 L940.032 682.757 L939.473 682.757 L938.914 682.757 L938.355 682.757 L937.795 682.757 L937.236 682.757 L936.677 682.757 L936.118 682.757 L935.558 682.757 L934.999 682.757 L934.44 682.757 L933.881 682.757 L933.321 682.757 L932.762 682.757 L932.203 682.757 L931.644 682.757 L931.084 682.757 L930.525 682.757 L929.966 682.757 L929.406 682.757 L928.847 682.757 L928.288 682.757 L927.729 682.757 L927.169 682.757 L926.61 682.757 L926.051 682.757 L925.492 682.757 L924.932 682.757 L924.373 682.757 L923.814 682.757 L923.255 682.757 L922.695 682.757 L922.136 682.757 L921.577 682.757 L921.018 682.757 L920.458 682.757 L919.899 682.757 L919.34 682.757 L918.781 682.757 L918.221 682.757 L917.662 682.757 L917.103 682.757 L916.544 682.757 L915.984 682.757 L915.425 682.757 L914.866 682.757 L914.307 682.757 L913.747 682.757 L913.188 682.757 L912.629 682.757 L912.07 682.757 L911.51 682.757 L910.951 682.757 L910.392 682.757 L909.833 682.757 L909.273 682.757 L908.714 682.757 L908.155 682.757 L907.596 682.757 L907.036 682.757 L906.477 682.757 L905.918 682.757 L905.359 682.757 L904.799 682.757 L904.24 682.757 L903.681 682.757 L903.122 682.757 L902.562 682.757 L902.003 682.757 L901.444 682.757 L900.885 682.757 L900.325 682.757 L899.766 682.757 L899.207 682.757 L898.648 682.757 L898.088 682.757 L897.529 682.757 L896.97 682.757 L896.411 682.757 L895.851 682.757 L895.292 682.757 L894.733 682.757 L894.174 682.757 L893.614 682.757 L893.055 682.757 L892.496 682.757 L891.937 682.757 L891.377 682.757 L890.818 682.757 L890.259 682.757 L889.7 682.757 L889.14 682.757 L888.581 682.757 L888.022 682.757 L887.463 682.757 L886.903 682.757 L886.344 682.757 L885.785 682.757 L885.226 682.757 L884.666 682.757 L884.107 682.757 L883.548 682.757 L882.989 682.757 L882.429 682.757 L881.87 682.757 L881.311 682.757 L880.752 682.757 L880.192 682.757 L879.633 682.757 L879.074 682.757 L878.515 682.757 L877.955 682.757 L877.396 682.757 L876.837 682.757 L876.278 682.757 L875.718 682.757 L875.159 682.757 L874.6 682.757 L874.041 682.757 L873.481 682.757 L872.922 682.757 L872.363 682.757 L871.804 682.757 L871.244 682.757 L870.685 682.757 L870.126 682.757 L869.567 682.757 L869.007 682.757 L868.448 682.757 L867.889 682.757 L867.33 682.757 L866.77 682.757 L866.211 682.757 L865.652 682.757 L865.093 682.757 L864.533 682.757 L863.974 682.757 L863.415 682.757 L862.856 682.757 L862.296 682.757 L861.737 682.757 L861.178 682.757 L860.619 682.757 L860.059 682.757 L859.5 682.757 L858.941 682.757 L858.382 682.757 L857.822 682.757 L857.263 682.757 L856.704 682.757 L856.145 682.757 L855.585 682.757 L855.026 682.757 L854.467 682.757 L853.908 682.757 L853.348 682.757 L852.789 682.757 L852.23 682.757 L851.671 682.757 L851.111 682.757 L850.552 682.757 L849.993 682.757 L849.434 682.757 L848.874 682.757 L848.315 682.757 L847.756 682.757 L847.197 682.757 L846.637 682.757 L846.078 682.757 L845.519 682.757 L844.96 682.757 L844.4 682.757 L843.841 682.757 L843.282 682.757 L842.723 682.757 L842.163 682.757 L841.604 682.757 L841.045 682.757 L840.486 682.757 L839.926 682.757 L839.367 682.757 L838.808 682.757 L838.249 682.757 L837.689 682.757 L837.13 682.757 L836.571 682.757 L836.012 682.757 L835.452 682.757 L834.893 682.757 L834.334 682.757 L833.775 682.757 L833.215 682.757 L832.656 682.757 L832.097 682.757 L831.538 682.757 L830.978 682.757 L830.419 682.757 L829.86 682.757 L829.301 682.757 L828.741 682.757 L828.182 682.757 L827.623 682.757 L827.064 682.757 L826.504 682.757 L825.945 682.757 L825.386 682.757 L824.827 682.757 L824.267 682.757 L823.708 682.757 L823.149 682.757 L822.59 682.757 L822.03 682.757 L821.471 682.757 L820.912 682.757 L820.353 682.757 L819.793 682.757 L819.234 682.757 L818.675 682.757 L818.116 682.757 L817.556 682.757 L816.997 682.757 L816.438 682.757 L815.879 682.757 L815.319 682.757 L814.76 682.757 L814.201 682.757 L813.642 682.757 L813.082 682.757 L812.523 682.757 L811.964 682.757 L811.405 682.757 L810.845 682.757 L810.286 682.757 L809.727 682.757 L809.168 682.757 L808.608 682.757 L808.049 682.757 L807.49 682.757 L806.931 682.757 L806.371 682.757 L805.812 682.757 L805.253 682.757 L804.693 682.757 L804.134 682.757 L803.575 682.757 L803.016 682.757 L802.456 682.757 L801.897 682.757 L801.338 682.757 L800.779 682.757 L800.219 682.757 L799.66 682.757 L799.101 682.757 L798.542 682.757 L797.982 682.757 L797.423 682.757 L796.864 682.757 L796.305 682.757 L795.745 682.757 L795.186 682.757 L794.627 682.757 L794.068 682.757 L793.508 682.757 L792.949 682.757 L792.39 682.757 L791.831 682.757 L791.271 682.757 L790.712 682.757 L790.153 682.757 L789.594 682.757 L789.034 682.757 L788.475 682.757 L787.916 682.757 L787.357 682.757 L786.797 682.757 L786.238 682.757 L785.679 682.757 L785.12 682.757 L784.56 682.757 L784.001 682.757 L783.442 682.757 L782.883 682.757 L782.323 682.757 L781.764 682.757 L781.205 682.757 L780.646 682.757 L780.086 682.757 L779.527 682.757 L778.968 682.757 L778.409 682.757 L777.849 682.757 L777.29 682.757 L776.731 682.757 L776.172 682.757 L775.612 682.757 L775.053 682.757 L774.494 682.757 L773.935 682.757 L773.375 682.757 L772.816 682.757 L772.257 682.757 L771.698 682.757 L771.138 682.757 L770.579 682.757 L770.02 682.757 L769.461 682.757 L768.901 682.757 L768.342 682.757 L767.783 682.757 L767.224 682.757 L766.664 682.757 L766.105 682.757 L765.546 682.757 L764.987 682.757 L764.427 682.757 L763.868 682.757 L763.309 682.757 L762.75 682.757 L762.19 682.757 L761.631 682.757 L761.072 682.757 L760.513 682.757 L759.953 682.757 L759.394 682.757 L758.835 682.757 L758.276 682.757 L757.716 682.757 L757.157 682.757 L756.598 682.757 L756.039 682.757 L755.479 682.757 L754.92 682.757 L754.361 682.757 L753.802 682.757 L753.242 682.757 L752.683 682.757 L752.124 682.757 L751.565 682.757 L751.005 682.757 L750.446 682.757 L749.887 682.757 L749.328 682.757 L748.768 682.757 L748.209 682.757 L747.65 682.757 L747.091 682.757 L746.531 682.757 L745.972 682.757 L745.413 682.757 L744.854 682.757 L744.294 682.757 L743.735 682.757 L743.176 682.757 L742.617 682.757 L742.057 682.757 L741.498 682.757 L740.939 682.757 L740.38 682.757 L739.82 682.757 L739.261 682.757 L738.702 682.757 L738.143 682.757 L737.583 682.757 L737.024 682.757 L736.465 682.757 L735.906 682.757 L735.346 682.757 L734.787 682.757 L734.228 682.757 L733.669 682.757 L733.109 682.757 L732.55 682.757 L731.991 682.757 L731.432 682.757 L730.872 682.757 L730.313 682.757 L729.754 682.757 L729.195 682.757 L728.635 682.757 L728.076 682.757 L727.517 682.757 L726.958 682.757 L726.398 682.757 L725.839 682.757 L725.28 682.757 L724.721 682.757 L724.161 682.757 L723.602 682.757 L723.043 682.757 L722.484 682.757 L721.924 682.757 L721.365 682.757 L720.806 682.757 L720.247 682.757  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.686 720.806,683.686 721.365,683.686 721.924,683.686 722.484,683.686 723.043,683.686 723.602,683.686 724.161,683.686 724.721,683.686 725.28,683.686 725.839,683.686 726.398,683.686 726.958,683.686 727.517,683.686 728.076,683.686 728.635,683.686 729.195,683.686 729.754,683.686 730.313,683.686 730.872,683.686 731.432,683.686 731.991,683.686 732.55,683.686 733.109,683.686 733.669,683.686 734.228,683.686 734.787,683.686 735.346,683.686 735.906,683.686 736.465,683.686 737.024,683.686 737.583,683.686 738.143,683.686 738.702,683.686 739.261,683.686 739.82,683.686 740.38,683.686 740.939,683.686 741.498,683.686 742.057,683.686 742.617,683.686 743.176,683.686 743.735,683.686 744.294,683.686 744.854,683.686 745.413,683.686 745.972,683.686 746.531,683.686 747.091,683.686 747.65,683.686 748.209,683.686 748.768,683.686 749.328,683.686 749.887,683.686 750.446,683.686 751.005,683.686 751.565,683.686 752.124,683.686 752.683,683.686 753.242,683.686 753.802,683.686 754.361,683.686 754.92,683.686 755.479,683.686 756.039,683.686 756.598,683.686 757.157,683.686 757.716,683.686 758.276,683.686 758.835,683.686 759.394,683.686 759.953,683.686 760.513,683.686 761.072,683.686 761.631,683.686 762.19,683.686 762.75,683.686 763.309,683.686 763.868,683.686 764.427,683.686 764.987,683.686 765.546,683.686 766.105,683.686 766.664,683.686 767.224,683.686 767.783,683.686 768.342,683.686 768.901,683.686 769.461,683.686 770.02,683.686 770.579,683.686 771.138,683.686 771.698,683.686 772.257,683.686 772.816,683.686 773.375,683.686 773.935,683.686 774.494,683.686 775.053,683.686 775.612,683.686 776.172,683.686 776.731,683.686 777.29,683.686 777.849,683.686 778.409,683.686 778.968,683.686 779.527,683.686 780.086,683.686 780.646,683.686 781.205,683.686 781.764,683.686 782.323,683.686 782.883,683.686 783.442,683.686 784.001,683.686 784.56,683.686 785.12,683.686 785.679,683.686 786.238,683.686 786.797,683.686 787.357,683.686 787.916,683.686 788.475,683.686 789.034,683.686 789.594,683.686 790.153,683.686 790.712,683.686 791.271,683.686 791.831,683.686 792.39,683.686 792.949,683.686 793.508,683.686 794.068,683.686 794.627,683.686 795.186,683.686 795.745,683.686 796.305,683.686 796.864,683.686 797.423,683.686 797.982,683.686 798.542,683.686 799.101,683.686 799.66,683.686 800.219,683.686 800.779,683.686 801.338,683.686 801.897,683.686 802.456,683.686 803.016,683.686 803.575,683.686 804.134,683.686 804.693,683.686 805.253,683.686 805.812,683.686 806.371,683.686 806.931,683.686 807.49,683.686 808.049,683.686 808.608,683.686 809.168,683.686 809.727,683.686 810.286,683.686 810.845,683.686 811.405,683.686 811.964,683.686 812.523,683.686 813.082,683.686 813.642,683.686 814.201,683.686 814.76,683.686 815.319,683.686 815.879,683.686 816.438,683.686 816.997,683.686 817.556,683.686 818.116,683.686 818.675,683.686 819.234,683.686 819.793,683.686 820.353,683.686 820.912,683.686 821.471,683.686 822.03,683.686 822.59,683.686 823.149,683.686 823.708,683.686 824.267,683.686 824.827,683.686 825.386,683.686 825.945,683.686 826.504,683.686 827.064,683.686 827.623,683.686 828.182,683.686 828.741,683.686 829.301,683.686 829.86,683.686 830.419,683.686 830.978,683.686 831.538,683.686 832.097,683.686 832.656,683.686 833.215,683.686 833.775,683.686 834.334,683.686 834.893,683.686 835.452,683.686 836.012,683.686 836.571,683.686 837.13,683.686 837.689,683.686 838.249,683.686 838.808,683.686 839.367,683.686 839.926,683.686 840.486,683.686 841.045,683.686 841.604,683.686 842.163,683.686 842.723,683.686 843.282,683.686 843.841,683.686 844.4,683.686 844.96,683.686 845.519,683.686 846.078,683.686 846.637,683.686 847.197,683.686 847.756,683.686 848.315,683.686 848.874,683.686 849.434,683.686 849.993,683.686 850.552,683.686 851.111,683.686 851.671,683.686 852.23,683.686 852.789,683.686 853.348,683.686 853.908,683.686 854.467,683.686 855.026,683.686 855.585,683.686 856.145,683.686 856.704,683.686 857.263,683.686 857.822,683.686 858.382,683.686 858.941,683.686 859.5,683.686 860.059,683.686 860.619,683.686 861.178,683.686 861.737,683.686 862.296,683.686 862.856,683.686 863.415,683.686 863.974,683.686 864.533,683.686 865.093,683.686 865.652,683.686 866.211,683.686 866.77,683.686 867.33,683.686 867.889,683.686 868.448,683.686 869.007,683.686 869.567,683.686 870.126,683.686 870.685,683.686 871.244,683.686 871.804,683.686 872.363,683.686 872.922,683.686 873.481,683.686 874.041,683.686 874.6,683.686 875.159,683.686 875.718,683.686 876.278,683.686 876.837,683.686 877.396,683.686 877.955,683.686 878.515,683.686 879.074,683.686 879.633,683.686 880.192,683.686 880.752,683.686 881.311,683.686 881.87,683.686 882.429,683.686 882.989,683.686 883.548,683.686 884.107,683.686 884.666,683.686 885.226,683.686 885.785,683.686 886.344,683.686 886.903,683.686 887.463,683.686 888.022,683.686 888.581,683.686 889.14,683.686 889.7,683.686 890.259,683.686 890.818,683.686 891.377,683.686 891.937,683.686 892.496,683.686 893.055,683.686 893.614,683.686 894.174,683.686 894.733,683.686 895.292,683.686 895.851,683.686 896.411,683.686 896.97,683.686 897.529,683.686 898.088,683.686 898.648,683.686 899.207,683.686 899.766,683.686 900.325,683.686 900.885,683.686 901.444,683.686 902.003,683.686 902.562,683.686 903.122,683.686 903.681,683.686 904.24,683.686 904.799,683.686 905.359,683.686 905.918,683.686 906.477,683.686 907.036,683.686 907.596,683.686 908.155,683.686 908.714,683.686 909.273,683.686 909.833,683.686 910.392,683.686 910.951,683.686 911.51,683.686 912.07,683.686 912.629,683.686 913.188,683.686 913.747,683.686 914.307,683.686 914.866,683.686 915.425,683.686 915.984,683.686 916.544,683.686 917.103,683.686 917.662,683.686 918.221,683.686 918.781,683.686 919.34,683.686 919.899,683.686 920.458,683.686 921.018,683.686 921.577,683.686 922.136,683.686 922.695,683.686 923.255,683.686 923.814,683.686 924.373,683.686 924.932,683.686 925.492,683.686 926.051,683.686 926.61,683.686 927.169,683.686 927.729,683.686 928.288,683.686 928.847,683.686 929.406,683.686 929.966,683.686 930.525,683.686 931.084,683.686 931.644,683.686 932.203,683.686 932.762,683.686 933.321,683.686 933.881,683.686 934.44,683.686 934.999,683.686 935.558,683.686 936.118,683.686 936.677,683.686 937.236,683.686 937.795,683.686 938.355,683.686 938.914,683.686 939.473,683.686 940.032,683.686 940.592,683.686 941.151,683.686 941.71,683.686 942.269,683.686 942.829,683.686 943.388,683.686 943.947,683.686 944.506,683.686 945.066,683.686 945.625,683.686 946.184,683.686 946.743,683.686 947.303,683.686 947.862,683.686 948.421,683.686 948.98,683.686 949.54,683.686 950.099,683.686 950.658,683.686 951.217,683.686 951.777,683.686 952.336,683.686 952.895,683.686 953.454,683.686 954.014,683.686 954.573,683.686 955.132,683.686 955.691,683.686 956.251,683.686 956.81,683.686 957.369,683.686 957.928,683.686 958.488,683.686 959.047,683.686 959.606,683.686 960.165,683.686 960.725,683.686 961.284,683.686 961.843,683.686 962.402,683.686 962.962,683.686 963.521,683.686 964.08,683.686 964.639,683.686 965.199,683.686 965.758,683.686 966.317,683.686 966.876,683.686 967.436,683.686 967.995,683.686 968.554,683.686 969.113,683.686 969.673,683.686 970.232,683.686 970.791,683.686 971.35,683.686 971.91,683.686 972.469,683.686 973.028,683.686 973.587,683.686 974.147,683.686 974.706,683.686 975.265,683.686 975.824,683.686 976.384,683.686 976.943,683.686 977.502,683.686 978.061,683.686 978.621,683.686 979.18,683.686 979.739,683.686 980.298,683.686 980.858,683.686 981.417,683.686 981.976,683.686 982.535,683.686 983.095,683.686 983.654,683.686 984.213,683.686 984.772,683.686 985.332,683.686 985.891,683.686 986.45,683.686 987.009,683.686 987.569,683.686 988.128,683.686 988.687,683.686 989.246,683.686 989.806,683.686 990.365,683.686 990.924,683.686 991.483,683.686 992.043,683.686 992.602,683.686 993.161,683.686 993.72,683.686 994.28,683.686 994.839,683.686 995.398,683.686 995.957,683.686 996.517,683.686 997.076,683.686 997.635,683.686 998.194,683.686 998.754,683.686 999.313,683.686 999.872,683.686 1000.43,683.686 1000.99,683.686 1001.55,683.686 1002.11,683.686 1002.67,683.686 1003.23,683.686 1003.79,683.686 1004.35,683.686 1004.91,683.686 1005.46,683.686 1006.02,683.686 1006.58,683.686 1007.14,683.686 1007.7,683.686 1008.26,683.686 1008.82,683.686 1009.38,683.686 1009.94,683.686 1010.5,683.686 1011.06,683.686 1011.62,683.686 1012.18,683.686 1012.73,683.686 1013.29,683.686 1013.85,683.686 1014.41,683.686 1014.97,683.686 1015.53,683.686 1016.09,683.686 1016.65,683.686 1017.21,683.686 1017.77,683.686 1018.33,683.686 1018.89,683.686 1019.45,683.686 1020.01,683.686 1020.56,683.686 1021.12,683.686 1021.68,683.686 1022.24,683.686 1022.8,683.686 1023.36,683.686 1023.92,683.686 1024.48,683.686 1025.04,683.686 1025.6,683.686 1026.16,683.686 1026.72,683.686 1027.28,683.686 1027.83,683.686 1028.39,683.686 1028.95,683.686 1029.51,683.686 1030.07,683.686 1030.63,683.686 1031.19,683.686 1031.75,683.686 1032.31,683.686 1032.87,683.686 1033.43,683.686 1033.99,683.686 1034.55,683.686 1035.1,683.686 1035.66,683.686 1036.22,683.686 1036.78,683.686 1037.34,683.686 1037.9,683.686 1038.46,683.686 1039.02,683.686 1039.58,683.686 1040.14,683.686 1040.7,683.686 1041.26,683.686 1041.82,683.686 1042.38,683.686 1042.93,683.686 1043.49,683.686 1044.05,683.686 1044.61,683.686 1045.17,683.686 1045.73,683.686 1046.29,683.686 1046.85,683.686 1047.41,683.686 1047.97,683.686 1048.53,683.686 1049.09,683.686 1049.65,683.686 1050.2,683.686 1050.76,683.686 1051.32,683.686 1051.88,683.686 1052.44,683.686 1053,683.686 1053.56,683.686 1054.12,683.686 1054.68,683.686 1055.24,683.686 1055.8,683.686 1056.36,683.686 1056.92,683.686 1057.48,683.686 1058.03,683.686 1058.59,683.686 1059.15,683.686 1059.71,683.686 1060.27,683.686 1060.83,683.686 1061.39,683.686 1061.95,683.686 1062.51,683.686 1063.07,683.686 1063.63,683.686 1064.19,683.686 1064.75,683.686 1065.3,683.686 1065.86,683.686 1066.42,683.686 1066.98,683.686 1067.54,683.686 1068.1,683.686 1068.66,683.686 1069.22,683.686 1069.78,683.686 1070.34,683.686 1070.9,683.686 1071.46,683.686 1072.02,683.686 1072.57,683.686 1073.13,683.686 1073.69,683.686 1074.25,683.686 1074.81,683.686 1075.37,683.686 1075.93,683.686 1076.49,683.686 1077.05,683.686 1077.61,683.686 1078.17,683.686 1078.73,683.686 1079.29,683.686 1079.85,683.686 1080.4,683.686 1080.96,683.686 1081.52,683.686 1082.08,683.686 1082.64,683.686 1083.2,683.686 1083.76,683.686 1084.32,683.686 1084.88,683.686 1085.44,683.686 1086,683.686 1086.56,683.686 1087.12,683.686 1087.67,683.686 1088.23,683.686 1088.79,683.686 1089.35,683.686 1089.91,683.686 1090.47,683.686 1091.03,683.686 1091.59,683.686 1092.15,683.686 1092.71,683.686 1093.27,683.686 1093.83,683.686 1094.39,683.686 1094.94,683.686 1095.5,683.686 1096.06,683.686 1096.62,683.686 1097.18,683.686 1097.74,683.686 1098.3,683.686 1098.86,683.686 1099.42,683.686 1099.98,683.686 1100.54,683.686 1101.1,683.686 1101.66,683.686 1102.22,683.686 1102.77,683.686 1103.33,683.686 1103.89,683.686 1104.45,683.686 1105.01,683.686 1105.57,683.686 1106.13,683.686 1106.69,683.686 1107.25,683.686 1107.81,683.686 1108.37,683.686 1108.93,683.686 1109.49,683.686 1110.04,683.686 1110.6,683.686 1111.16,683.686 1111.72,683.686 1112.28,683.686 1112.84,683.686 1113.4,683.686 1113.96,683.686 1114.52,683.686 1115.08,683.686 1115.64,683.686 1116.2,683.686 1116.76,683.686 1117.31,683.686 1117.87,683.686 1118.43,683.686 1118.99,683.686 1119.55,683.686 1120.11,683.686 1120.67,683.686 1121.23,683.686 1121.79,683.686 1122.35,683.686 1122.91,683.686 1123.47,683.686 1124.03,683.686 1124.59,683.686 1125.14,683.686 1125.7,683.686 1126.26,683.686 1126.82,683.686 1127.38,683.686 1127.94,683.686 1128.5,683.686 1129.06,683.686 1129.62,683.686 1130.18,683.686 1130.74,683.686 1131.3,683.686 1131.86,683.686 1132.41,683.686 1132.97,683.686 1133.53,683.686 1134.09,683.686 1134.65,683.686 1135.21,683.686 1135.77,683.686 1136.33,683.686 1136.89,683.686 1137.45,683.686 1138.01,683.686 1138.57,683.686 1139.13,683.686 1139.68,683.686 1140.24,683.686 1140.8,683.686 1141.36,683.686 1141.92,683.686 1142.48,683.686 1143.04,683.686 1143.6,683.686 1144.16,683.686 1144.72,683.686 1145.28,683.686 1145.84,683.686 1146.4,683.686 1146.96,683.686 1147.51,683.686 1148.07,683.686 1148.63,683.686 1149.19,683.686 1149.75,683.686 1150.31,683.686 1150.87,683.686 1151.43,683.686 1151.99,683.686 1152.55,683.686 1153.11,683.686 1153.67,683.686 1154.23,683.686 1154.78,683.686 1155.34,683.686 1155.9,683.686 1156.46,683.686 1157.02,683.686 1157.58,683.686 1158.14,683.686 1158.7,683.686 1159.26,683.686 1159.82,683.686 1160.38,683.686 1160.94,683.686 1161.5,683.686 1162.05,683.686 1162.61,683.686 1163.17,683.686 1163.73,683.686 1164.29,683.686 1164.85,683.686 1165.41,683.686 1165.97,683.686 1166.53,683.686 1167.09,683.686 1167.65,683.686 1168.21,683.686 1168.77,683.686 1169.33,683.686 1169.88,683.686 1170.44,683.686 1171,683.686 1171.56,683.686 1172.12,683.686 1172.68,683.686 1173.24,683.686 1173.8,683.686 1174.36,683.686 1174.92,683.686 1175.48,683.686 1176.04,683.686 1176.6,683.686 1177.15,683.686 1177.71,683.686 1178.27,683.686 1178.83,683.686 1179.39,683.686 1179.95,683.686 1180.51,683.686 1181.07,683.686 1181.63,683.686 1182.19,683.686 1182.75,683.686 1183.31,683.686 1183.87,683.686 1184.43,683.686 1184.98,683.686 1185.54,683.686 1186.1,683.686 1186.66,683.686 1187.22,683.686 1187.78,683.686 1188.34,683.686 1188.9,683.686 1189.46,683.686 1190.02,683.686 1190.58,683.686 1191.14,683.686 1191.7,683.686 1192.25,683.686 1192.81,683.686 1193.37,683.686 1193.93,683.686 1194.49,683.686 1195.05,683.686 1195.61,683.686 1196.17,683.686 1196.73,683.686 1197.29,683.686 1197.85,683.686 1198.41,683.686 1198.97,683.686 1199.52,683.686 1200.08,683.686 1200.64,683.686 1201.2,683.686 1201.76,683.686 1202.32,683.686 1202.88,683.686 1203.44,683.686 1204,683.686 1204.56,683.686 1205.12,683.686 1205.68,683.686 1206.24,683.686 1206.8,683.686 1207.35,683.686 1207.91,683.686 1208.47,683.686 1209.03,683.686 1209.59,683.686 1210.15,683.686 1210.71,683.686 1211.27,683.686 1211.83,683.686 1212.39,683.686 1212.95,683.686 1213.51,683.686 1214.07,683.686 1214.62,683.686 1215.18,683.686 1215.74,683.686 1216.3,683.686 1216.86,683.686 1217.42,683.686 1217.98,683.686 1218.54,683.686 1219.1,683.686 1219.66,683.686 1220.22,683.686 1220.78,683.686 1221.34,683.686 1221.89,683.686 1222.45,683.686 1223.01,683.686 1223.57,683.686 1224.13,683.686 1224.69,683.686 1225.25,683.686 1225.81,683.686 1226.37,683.686 1226.93,683.686 1227.49,683.686 1228.05,683.686 1228.61,683.686 1229.17,683.686 1229.72,683.686 1230.28,683.686 1230.84,683.686 1231.4,683.686 1231.96,683.686 1232.52,683.686 1233.08,683.686 1233.64,683.686 1234.2,683.686 1234.76,683.686 1235.32,683.686 1235.88,683.686 1236.44,683.686 1236.99,683.686 1237.55,683.686 1238.11,683.686 1238.67,683.686 1239.23,683.686 1239.79,683.686 1240.35,683.686 1240.91,683.686 1241.47,683.686 1242.03,683.686 1242.59,683.686 1243.15,683.686 1243.71,683.686 1244.26,683.686 1244.82,683.686 1245.38,683.686 1245.94,683.686 1246.5,683.686 1247.06,683.686 1247.62,683.686 1248.18,683.686 1248.74,683.686 1249.3,683.686 1249.86,683.686 1250.42,683.686 1250.98,683.686 1251.54,683.686 1252.09,683.686 1252.65,683.686 1253.21,683.686 1253.77,683.686 1254.33,683.686 1254.89,683.686 1255.45,683.686 1256.01,683.686 1256.57,683.686 1257.13,683.686 1257.69,683.686 1258.25,683.686 1258.81,683.686 1259.36,683.686 1259.92,683.686 1260.48,683.686 1261.04,683.686 1261.6,683.686 1262.16,683.686 1262.72,683.686 1263.28,683.686 1263.84,683.686 1264.4,683.686 1264.96,683.686 1265.52,683.686 1266.08,683.686 1266.63,683.686 1267.19,683.686 1267.75,683.686 1268.31,683.686 1268.87,683.686 1269.43,683.686 1269.99,683.686 1270.55,683.686 1271.11,683.686 1271.67,683.686 1272.23,683.686 1272.79,683.686 1273.35,683.686 1273.91,683.686 1274.46,683.686 1275.02,683.686 1275.58,683.686 1276.14,683.686 1276.7,683.686 1277.26,683.686 1277.82,683.686 1278.38,683.686 1278.94,683.686 1279.5,683.686 1280.06,683.686 1280.62,683.686 1281.18,683.686 1281.73,683.686 1282.29,683.686 1282.85,683.686 1283.41,683.686 1283.97,683.686 1284.53,683.686 1285.09,683.686 1285.65,683.686 1286.21,683.686 1286.77,683.686 1287.33,683.686 1287.89,683.686 1288.45,683.686 1289,683.686 1289.56,683.686 1290.12,683.686 1290.68,683.686 1291.24,683.686 1291.8,683.686 1292.36,683.686 1292.92,683.686 1293.48,683.686 1294.04,683.686 1294.6,683.686 1295.16,683.686 1295.72,683.686 1296.28,683.686 1296.83,683.686 1297.39,683.686 1297.95,683.686 1298.51,683.686 1299.07,683.686 1299.63,683.686 1300.19,683.686 1300.75,683.686 1301.31,683.686 1301.87,683.686 1302.43,683.686 1302.99,683.686 1303.55,683.686 1304.1,683.686 1304.66,683.686 1305.22,683.686 1305.78,683.686 1306.34,683.686 1306.9,683.686 1307.46,683.686 1308.02,683.686 1308.58,683.686 1309.14,683.686 1309.7,683.686 1310.26,683.686 1310.82,683.686 1311.38,683.686 1311.93,683.686 1312.49,683.686 1313.05,683.686 1313.61,683.686 1314.17,683.686 1314.73,683.686 1315.29,683.686 1315.85,683.686 1316.41,683.686 1316.97,683.686 1317.53,683.686 1318.09,683.686 1318.65,683.686 1319.2,683.686 1319.76,683.686 1320.32,683.686 1320.88,683.686 1321.44,683.686 1322,683.686 1322.56,683.686 1323.12,683.686 1323.68,683.686 1324.24,683.686 1324.8,683.686 1325.36,683.686 1325.92,683.686 1326.47,683.686 1327.03,683.686 1327.59,683.686 1328.15,683.686 1328.71,683.686 1329.27,683.686 1329.83,683.686 1330.39,683.686 1330.95,683.686 1331.51,683.686 1332.07,683.686 1332.63,683.686 1333.19,683.686 1333.75,683.686 1334.3,683.686 1334.86,683.686 1335.42,683.686 1335.98,683.686 1336.54,683.686 1337.1,683.686 1337.66,683.686 1338.22,683.686 1338.78,683.686 1339.34,683.686 1339.9,683.686 1340.46,683.686 1341.02,683.686 1341.57,683.686 1342.13,683.686 1342.69,683.686 1343.25,683.686 1343.81,683.686 1344.37,683.686 1344.93,683.686 1345.49,683.686 1346.05,683.686 1346.61,683.686 1347.17,683.686 1347.73,683.686 1348.29,683.686 1348.84,683.686 1349.4,683.686 1349.96,683.686 1350.52,683.686 1351.08,683.686 1351.64,683.686 1352.2,683.686 1352.76,683.686 1353.32,683.686 1353.88,683.686 1354.44,683.686 1355,683.686 1355.56,683.686 1356.12,683.686 1356.67,683.686 1357.23,683.686 1357.79,683.686 1358.35,683.686 1358.91,683.686 1359.47,683.686 1360.03,683.686 1360.59,683.686 1361.15,683.686 1361.71,683.686 1362.27,683.686 1362.83,683.686 1363.39,683.686 1363.94,683.686 1364.5,683.686 1365.06,683.686 1365.62,683.686 1366.18,683.686 1366.74,683.686 1367.3,683.686 1367.86,683.686 1368.42,683.686 1368.98,683.686 1369.54,683.686 1370.1,683.686 1370.66,683.686 1371.21,683.686 1371.77,683.686 1372.33,683.686 1372.89,683.686 1373.45,683.686 1374.01,683.686 1374.57,683.686 1375.13,683.686 1375.69,683.686 1376.25,683.686 1376.81,683.686 1377.37,683.686 1377.93,683.686 1378.49,683.686 1379.04,683.686 1379.6,683.686 1380.16,683.686 1380.72,683.686 1381.28,683.686 1381.84,683.686 1382.4,683.686 1382.96,683.686 1383.52,683.686 1384.08,683.686 1384.64,683.686 1385.2,683.686 1385.76,683.686 1386.31,683.686 1386.87,683.686 1387.43,683.686 1387.99,683.686 1388.55,683.686 1389.11,683.686 1389.67,683.686 1390.23,683.686 1390.79,683.686 1391.35,683.686 1391.91,683.686 1392.47,683.686 1393.03,683.686 1393.58,683.686 1394.14,683.686 1394.7,683.686 1395.26,683.686 1395.82,683.686 1396.38,683.686 1396.94,683.686 1397.5,683.686 1398.06,683.686 1398.62,683.686 1399.18,683.686 1399.74,683.686 1400.3,683.686 1400.86,683.686 1401.41,683.686 1401.97,683.686 1402.53,683.686 1403.09,683.686 1403.65,683.686 1404.21,683.686 1404.77,683.686 1405.33,683.686 1405.89,683.686 1406.45,683.686 1407.01,683.686 1407.57,683.686 1408.13,683.686 1408.68,683.686 1409.24,683.686 1409.8,683.686 1410.36,683.686 1410.92,683.686 1411.48,683.686 1412.04,683.686 1412.6,683.686 1413.16,683.686 1413.72,683.686 1414.28,683.686 1414.84,683.686 1415.4,683.686 1415.95,683.686 1416.51,683.686 1417.07,683.686 1417.63,683.686 1418.19,683.686 1418.75,683.686 1419.31,683.686 1419.87,683.686 1420.43,683.686 1420.99,683.686 1421.55,683.686 1422.11,683.686 1422.67,683.686 1423.23,683.686 1423.78,683.686 1424.34,683.686 1424.9,683.686 1425.46,683.686 1426.02,683.686 1426.58,683.686 1427.14,683.686 1427.7,683.686 1428.26,683.686 1428.82,683.686 1429.38,683.686 1429.94,683.686 1430.5,683.686 1431.05,683.686 1431.61,683.686 1432.17,683.686 1432.73,683.686 1433.29,683.686 1433.85,683.686 1434.41,683.686 1434.97,683.686 1435.53,683.686 1436.09,683.686 1436.65,683.686 1437.21,683.686 1437.77,683.686 1438.33,683.686 1438.88,683.686 1439.44,683.686 1440,683.686 1440.56,683.686 1441.12,683.686 1441.68,683.686 1442.24,683.686 1442.8,683.686 1443.36,683.686 1443.92,683.686 1444.48,683.686 1445.04,683.686 1445.6,683.686 1446.15,683.686 1446.71,683.686 1447.27,683.686 1447.83,683.686 1448.39,683.686 1448.95,683.686 1449.51,683.686 1450.07,683.686 1450.63,683.686 1451.19,683.686 1451.75,683.686 1452.31,683.686 1452.87,683.686 1453.42,683.686 1453.98,683.686 1454.54,683.686 1455.1,683.686 1455.66,683.686 1456.22,683.686 1456.78,683.686 1457.34,683.686 1457.9,683.686 1458.46,683.686 1459.02,683.686 1459.58,683.686 1460.14,683.686 1460.7,683.686 1461.25,683.686 1461.81,683.686 1462.37,683.686 1462.93,683.686 1463.49,683.686 1464.05,683.686 1464.61,683.686 1465.17,683.686 1465.73,683.686 1466.29,683.686 1466.85,683.686 1467.41,683.686 1467.97,683.686 1468.52,683.686 1469.08,683.686 1469.64,683.686 1470.2,683.686 1470.76,683.686 1471.32,683.686 1471.88,683.686 1472.44,683.686 1473,683.686 1473.56,683.686 1474.12,683.686 1474.68,683.686 1475.24,683.686 1475.79,683.686 1476.35,683.686 1476.91,683.686 1477.47,683.686 1478.03,683.686 1478.59,683.686 1479.15,683.686 1479.71,683.686 1480.27,683.686 1480.83,683.686 1481.39,683.686 1481.95,683.686 1482.51,683.686 1483.07,683.686 1483.62,683.686 1484.18,683.686 1484.74,683.686 1485.3,683.686 1485.86,683.686 1486.42,683.686 1486.98,683.686 1487.54,683.686 1488.1,683.686 1488.66,683.686 1489.22,683.686 1489.78,683.686 1490.34,683.686 1490.89,683.686 1491.45,683.686 1492.01,683.686 1492.57,683.686 1493.13,683.686 1493.69,683.686 1494.25,683.686 1494.81,683.686 1495.37,683.686 1495.93,683.686 1496.49,683.686 1497.05,683.686 1497.61,683.686 1498.16,683.686 1498.72,683.686 1499.28,683.686 1499.84,683.686 1500.4,683.686 1500.96,683.686 1501.52,683.686 1502.08,683.686 1502.64,683.686 1503.2,683.686 1503.76,683.686 1504.32,683.686 1504.88,683.686 1505.44,683.686 1505.99,683.686 1506.55,683.686 1507.11,683.686 1507.67,683.686 1508.23,683.686 1508.79,683.686 1509.35,683.686 1509.91,683.686 1510.47,683.686 1511.03,683.686 1511.59,683.686 1512.15,683.686 1512.71,683.686 1513.26,683.686 1513.82,683.686 1514.38,683.686 1514.94,683.686 1515.5,683.686 1516.06,683.686 1516.62,683.686 1517.18,683.686 1517.74,683.686 1518.3,683.686 1518.86,683.686 1519.42,683.686 1519.98,683.686 1520.53,683.686 1521.09,683.686 1521.65,683.686 1522.21,683.686 1522.77,683.686 1523.33,683.686 1523.89,683.686 1524.45,683.686 1525.01,683.686 1525.57,683.686 1526.13,683.686 1526.69,683.686 1527.25,683.686 1527.81,683.686 1528.36,683.686 1528.92,683.686 1529.48,683.686 1530.04,683.686 1530.6,683.686 1531.16,683.686 1531.72,683.686 1532.28,683.686 1532.84,683.686 1533.4,683.686 1533.96,683.686 1534.52,683.686 1535.08,683.686 1535.63,683.686 1536.19,683.686 1536.75,683.686 1537.31,683.686 1537.87,683.686 1538.43,683.686 1538.99,683.686 1539.55,683.686 1540.11,683.686 1540.67,683.686 1541.23,683.686 1541.79,683.686 1542.35,683.686 1542.9,683.686 1543.46,683.686 1544.02,683.686 1544.58,683.686 1545.14,683.686 1545.7,683.686 1546.26,683.686 1546.82,683.686 1547.38,683.686 1547.94,683.686 1548.5,683.686 1549.06,683.686 1549.62,683.686 1550.18,683.686 1550.73,683.686 1551.29,683.686 1551.85,683.686 1552.41,683.686 1552.97,683.686 1553.53,683.686 1554.09,683.686 1554.65,683.686 1555.21,683.686 1555.77,683.686 1556.33,683.686 1556.89,683.686 1557.45,683.686 1558,683.686 1558.56,683.686 1559.12,683.686 1559.68,683.686 1560.24,683.686 1560.8,683.686 1561.36,683.686 1561.92,683.686 1562.48,683.686 1563.04,683.686 1563.6,683.686 1564.16,683.686 1564.72,683.686 1565.28,683.686 1565.83,683.686 1566.39,683.686 1566.95,683.686 1567.51,683.686 1568.07,683.686 1568.63,683.686 1569.19,683.686 1569.75,683.686 1570.31,683.686 1570.87,683.686 1571.43,683.686 1571.99,683.686 1572.55,683.686 1573.1,683.686 1573.66,683.686 1574.22,683.686 1574.78,683.686 1575.34,683.686 1575.9,683.686 1576.46,683.686 1577.02,683.686 1577.58,683.686 1578.14,683.686 1578.7,683.686 1579.26,683.686 1579.82,683.686 1580.37,683.686 1580.93,683.686 1581.49,683.686 1582.05,683.686 1582.61,683.686 1583.17,683.686 1583.73,683.686 1584.29,683.686 1584.85,683.686 1585.41,683.686 1585.97,683.686 1586.53,683.686 1587.09,683.686 1587.65,683.686 1588.2,683.686 1588.76,683.686 1589.32,683.686 1589.88,683.686 1590.44,683.686 1591,683.686 1591.56,683.686 1592.12,683.686 1592.68,683.686 1593.24,683.686 1593.8,683.686 1594.36,683.686 1594.92,683.686 1595.47,683.686 1596.03,683.686 1596.59,683.686 1597.15,683.686 1597.71,683.686 1598.27,683.686 1598.83,683.686 1599.39,683.686 1599.95,683.686 1600.51,683.686 1601.07,683.686 1601.63,683.686 1602.19,683.686 1602.74,683.686 1603.3,683.686 1603.86,683.686 1604.42,683.686 1604.98,683.686 1605.54,683.686 1606.1,683.686 1606.66,683.686 1607.22,683.686 1607.78,683.686 1608.34,683.686 1608.9,683.686 1609.46,683.686 1610.02,683.686 1610.57,683.686 1611.13,683.686 1611.69,683.686 1612.25,683.686 1612.81,683.686 1613.37,683.686 1613.93,683.686 1614.49,683.686 1615.05,683.686 1615.61,683.686 1616.17,683.686 1616.73,683.686 1617.29,683.686 1617.84,683.686 1618.4,683.686 1618.96,683.686 1619.52,683.686 1620.08,683.686 1620.64,683.686 1621.2,683.686 1621.76,683.686 1622.32,683.686 1622.88,683.686 1623.44,683.686 1624,683.686 1624.56,683.686 1625.11,683.686 1625.67,683.686 1626.23,683.686 1626.79,683.686 1627.35,683.686 1627.91,683.686 1628.47,683.686 1629.03,683.686 1629.59,683.686 1630.15,683.686 1630.71,683.686 1631.27,683.686 1631.83,683.686 1632.39,683.686 1632.94,683.686 1633.5,683.686 1634.06,683.686 1634.62,683.686 1635.18,683.686 1635.74,683.686 1636.3,683.686 1636.86,683.686 1637.42,683.686 1637.98,683.686 1638.54,683.686 1639.1,683.686 1639.66,683.686 1640.21,683.686 1640.77,683.686 1641.33,683.686 1641.89,683.686 1642.45,683.686 1643.01,683.686 1643.57,683.686 1644.13,683.686 1644.69,683.686 1645.25,683.686 1645.81,683.686 1646.37,683.686 1646.93,683.686 1647.48,683.686 1648.04,683.686 1648.6,683.686 1649.16,683.686 1649.72,683.686 1650.28,683.686 1650.84,683.686 1651.4,683.686 1651.96,683.686 1652.52,683.686 1653.08,683.686 1653.64,683.686 1654.2,683.686 1654.76,683.686 1655.31,683.686 1655.87,683.686 1656.43,683.686 1656.99,683.686 1657.55,683.686 1658.11,683.686 1658.67,683.686 1659.23,683.686 1659.79,683.686 1660.35,683.686 1660.91,683.686 1661.47,683.686 1662.03,683.686 1662.58,683.686 1663.14,683.686 1663.7,683.686 1664.26,683.686 1664.82,683.686 1665.38,683.686 1665.94,683.686 1666.5,683.686 1667.06,683.686 1667.62,683.686 1668.18,683.686 1668.74,683.686 1669.3,683.686 1669.85,683.686 1670.41,683.686 1670.97,683.686 1671.53,683.686 1672.09,683.686 1672.65,683.686 1673.21,683.686 1673.77,683.686 1674.33,683.686 1674.89,683.686 1675.45,683.686 1676.01,683.686 1676.57,683.686 1677.13,683.686 1677.68,683.686 1678.24,683.686 1678.8,683.686 1679.36,683.686 1679.92,683.686 1680.48,683.686 1681.04,683.686 1681.6,683.686 1682.16,683.686 1682.72,683.686 1683.28,683.686 1683.84,683.686 1684.4,683.686 1684.95,683.686 1685.51,683.686 1686.07,683.686 1686.63,683.686 1687.19,683.686 1687.75,683.686 1688.31,683.686 1688.87,683.686 1689.43,683.686 1689.99,683.686 1690.55,683.686 1691.11,683.686 1691.67,683.686 1692.23,683.686 1692.78,683.686 1693.34,683.686 1693.9,683.686 1694.46,683.686 1695.02,683.686 1695.58,683.686 1696.14,683.686 1696.7,683.686 1697.26,683.686 1697.82,683.686 1698.38,683.686 1698.94,683.686 1699.5,683.686 1700.05,683.686 1700.61,683.686 1701.17,683.686 1701.73,683.686 1702.29,683.686 1702.85,683.686 1703.41,683.686 1703.97,683.686 1704.53,683.686 1705.09,683.686 1705.65,683.686 1706.21,683.686 1706.77,683.686 1707.32,683.686 1707.88,683.686 1708.44,683.686 1709,683.686 1709.56,683.686 1710.12,683.686 1710.68,683.686 1711.24,683.686 1711.8,683.686 1712.36,683.686 1712.92,683.686 1713.48,683.686 1714.04,683.686 1714.6,683.686 1715.15,683.686 1715.71,683.686 1716.27,683.686 1716.83,683.686 1717.39,683.686 1717.95,683.686 1718.51,683.686 1719.07,683.686 1719.63,683.686 1720.19,683.686 1720.75,683.686 1721.31,683.686 1721.87,683.686 1722.42,683.686 1722.98,683.686 1723.54,683.686 1724.1,683.686 1724.66,683.686 1725.22,683.686 1725.78,683.686 1726.34,683.686 1726.9,683.686 1727.46,683.686 1728.02,683.686 1728.58,683.686 1729.14,683.686 1729.69,683.686 1730.25,683.686 1730.81,683.686 1731.37,683.686 1731.93,683.686 1732.49,683.686 1733.05,683.686 1733.61,683.686 1734.17,683.686 1734.73,683.686 1735.29,683.686 1735.85,683.686 1736.41,683.686 1736.97,683.686 1737.52,683.686 1738.08,683.686 1738.64,683.686 1739.2,683.686 1739.76,683.686 1740.32,683.686 1740.88,683.686 1741.44,683.686 1742,683.686 1742.56,683.686 1743.12,683.686 1743.68,683.686 1744.24,683.686 1744.79,683.686 1745.35,683.686 1745.91,683.686 1746.47,683.686 1747.03,683.686 1747.59,683.686 1748.15,683.686 1748.71,683.686 1749.27,683.686 1749.83,683.686 1750.39,683.686 1750.95,683.686 1751.51,683.686 1752.06,683.686 1752.62,683.686 1753.18,683.686 1753.74,683.686 1754.3,683.686 1754.86,683.686 1755.42,683.686 1755.98,683.686 1756.54,683.686 1757.1,683.686 1757.66,683.686 1758.22,683.686 1758.78,683.686 1759.34,683.686 1759.89,683.686 1760.45,683.686 1761.01,683.686 1761.57,683.686 1762.13,683.686 1762.69,683.686 1763.25,683.686 1763.81,683.686 1764.37,683.686 1764.93,683.686 1765.49,683.686 1766.05,683.686 1766.61,683.686 1767.16,683.686 1767.72,683.686 1768.28,683.686 1768.84,683.686 1769.4,683.686 1769.96,683.686 1770.52,683.686 1771.08,683.686 1771.64,683.686 1772.2,683.686 1772.76,683.686 1773.32,683.686 1773.88,683.686 1774.43,683.686 1774.99,683.686 1775.55,683.686 1776.11,683.686 1776.67,683.686 1777.23,683.686 1777.79,683.686 1778.35,683.686 1778.91,683.686 1779.47,683.686 1780.03,683.686 1780.59,683.686 1781.15,683.686 1781.71,683.686 1782.26,683.686 1782.82,683.686 1783.38,683.686 1783.94,683.686 1784.5,683.686 1785.06,683.686 1785.62,683.686 1786.18,683.686 1786.74,683.686 1787.3,683.686 1787.86,683.686 1788.42,683.686 1788.98,683.686 1789.53,683.686 1790.09,683.686 1790.65,683.686 1791.21,683.686 1791.77,683.686 1792.33,683.686 1792.89,683.686 1793.45,683.686 1794.01,683.686 1794.57,683.686 1795.13,683.686 1795.69,683.686 1796.25,683.686 1796.8,683.686 1797.36,683.686 1797.92,683.686 1798.48,683.686 1799.04,683.686 1799.6,683.686 1800.16,683.686 1800.72,683.686 1801.28,683.686 1801.84,683.686 1802.4,683.686 1802.96,683.686 1803.52,683.686 1804.08,683.686 1804.63,683.686 1805.19,683.686 1805.75,683.686 1806.31,683.686 1806.87,683.686 1807.43,683.686 1807.99,683.686 1808.55,683.686 1809.11,683.686 1809.67,683.686 1810.23,683.686 1810.79,683.686 1811.35,683.686 1811.9,683.686 1812.46,683.686 1813.02,683.686 1813.58,683.686 1814.14,683.686 1814.7,683.686 1815.26,683.686 1815.82,683.686 1816.38,683.686 1816.94,683.686 1817.5,683.686 1818.06,683.686 1818.62,683.686 1819.18,683.686 1819.73,683.686 1820.29,683.686 1820.85,683.686 1821.41,683.686 1821.97,683.686 1822.53,683.686 1823.09,683.686 1823.65,683.686 1824.21,683.686 1824.77,683.686 1825.33,683.686 1825.89,683.686 1826.45,683.686 1827,683.686 1827.56,683.686 1828.12,683.686 1828.68,683.686 1829.24,683.686 1829.8,683.686 1830.36,683.686 1830.92,683.686 1831.48,683.686 1832.04,683.686 1832.6,683.686 1833.16,683.686 1833.72,683.686 1834.27,683.686 1834.83,683.686 1835.39,683.686 1835.95,683.686 1836.51,683.686 1837.07,683.686 1837.63,683.686 1838.19,683.686 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.022251667150308 ± 0.021910534046150617\nProjected Energy: -4.015593117977897 ± (0.004802314187553947, 0.004674042244925403)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.13444</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.4154e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.4395e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.6962e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.927e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">7.033e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.3745e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321594\n -3.363124291613371\n -0.7590191922770924\n  0.13584182219621077\n  0.1578999869460862\n  0.8767114411781343\n  1.530592997097334\n  1.5835732611867446\n  3.072870330325869\n  3.1256726539518365\n  4.862107221562168\n  6.260694850380595\n  6.402671211183113\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, wall_time = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the wall_time is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = @suppress lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = @suppress lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 0.8, 0.8, 0.2, 0.2)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
