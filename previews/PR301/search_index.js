var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21104783236308935 ± 0.0013003458121850066\n   G2(1) = 0.9175355994539153 ± 0.0005471427402323356\n   G2(2) = 0.9818751123374421 ± 0.0005089962993541041\n   G2(3) = 0.9901307440541957 ± 0.000684712091395773\n   G2(4) = 0.9818751123374421 ± 0.0005089962993541041\n   G2(5) = 0.9175355994539153 ± 0.0005471427402323356\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.089487960271647 ± 0.11976008972503742\n   Replica 2: -3.9759413339442538 ± 0.127975289693495\n   Replica 3: -4.011888406545836 ± 0.12988089216251159\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip790\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip790)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip791\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip790)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip792\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.85 2211.02,1260.85 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1002.75 2211.02,1002.75 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,744.645 2211.02,744.645 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,486.541 2211.02,486.541 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,228.438 2211.02,228.438 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.85 423.181,1260.85 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1002.75 423.181,1002.75 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,744.645 423.181,744.645 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,486.541 423.181,486.541 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,228.438 423.181,228.438 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M356.339 1246.65 Q352.728 1246.65 350.899 1250.22 Q349.094 1253.76 349.094 1260.89 Q349.094 1267.99 350.899 1271.56 Q352.728 1275.1 356.339 1275.1 Q359.973 1275.1 361.779 1271.56 Q363.608 1267.99 363.608 1260.89 Q363.608 1253.76 361.779 1250.22 Q359.973 1246.65 356.339 1246.65 M356.339 1242.95 Q362.149 1242.95 365.205 1247.55 Q368.284 1252.14 368.284 1260.89 Q368.284 1269.61 365.205 1274.22 Q362.149 1278.8 356.339 1278.8 Q350.529 1278.8 347.45 1274.22 Q344.395 1269.61 344.395 1260.89 Q344.395 1252.14 347.45 1247.55 Q350.529 1242.95 356.339 1242.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M290.043 1016.09 L306.363 1016.09 L306.363 1020.03 L284.418 1020.03 L284.418 1016.09 Q287.08 1013.34 291.664 1008.71 Q296.27 1004.06 297.451 1002.71 Q299.696 1000.19 300.576 998.455 Q301.478 996.696 301.478 995.006 Q301.478 992.251 299.534 990.515 Q297.613 988.779 294.511 988.779 Q292.312 988.779 289.858 989.543 Q287.427 990.307 284.65 991.858 L284.65 987.136 Q287.474 986.001 289.927 985.423 Q292.381 984.844 294.418 984.844 Q299.789 984.844 302.983 987.529 Q306.177 990.214 306.177 994.705 Q306.177 996.835 305.367 998.756 Q304.58 1000.65 302.474 1003.25 Q301.895 1003.92 298.793 1007.14 Q295.691 1010.33 290.043 1016.09 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M316.224 985.469 L334.58 985.469 L334.58 989.404 L320.506 989.404 L320.506 997.876 Q321.524 997.529 322.543 997.367 Q323.562 997.182 324.58 997.182 Q330.367 997.182 333.747 1000.35 Q337.126 1003.52 337.126 1008.94 Q337.126 1014.52 333.654 1017.62 Q330.182 1020.7 323.862 1020.7 Q321.687 1020.7 319.418 1020.33 Q317.173 1019.96 314.765 1019.22 L314.765 1014.52 Q316.849 1015.65 319.071 1016.21 Q321.293 1016.77 323.77 1016.77 Q327.774 1016.77 330.112 1014.66 Q332.45 1012.55 332.45 1008.94 Q332.45 1005.33 330.112 1003.22 Q327.774 1001.12 323.77 1001.12 Q321.895 1001.12 320.02 1001.53 Q318.168 1001.95 316.224 1002.83 L316.224 985.469 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M356.339 988.548 Q352.728 988.548 350.899 992.112 Q349.094 995.654 349.094 1002.78 Q349.094 1009.89 350.899 1013.45 Q352.728 1017 356.339 1017 Q359.973 1017 361.779 1013.45 Q363.608 1009.89 363.608 1002.78 Q363.608 995.654 361.779 992.112 Q359.973 988.548 356.339 988.548 M356.339 984.844 Q362.149 984.844 365.205 989.45 Q368.284 994.034 368.284 1002.78 Q368.284 1011.51 365.205 1016.12 Q362.149 1020.7 356.339 1020.7 Q350.529 1020.7 347.45 1016.12 Q344.395 1011.51 344.395 1002.78 Q344.395 994.034 347.45 989.45 Q350.529 984.844 356.339 984.844 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M286.062 727.365 L304.418 727.365 L304.418 731.3 L290.344 731.3 L290.344 739.773 Q291.363 739.425 292.381 739.263 Q293.4 739.078 294.418 739.078 Q300.205 739.078 303.585 742.249 Q306.964 745.421 306.964 750.837 Q306.964 756.416 303.492 759.518 Q300.02 762.596 293.701 762.596 Q291.525 762.596 289.256 762.226 Q287.011 761.856 284.603 761.115 L284.603 756.416 Q286.687 757.55 288.909 758.106 Q291.131 758.661 293.608 758.661 Q297.613 758.661 299.951 756.555 Q302.288 754.448 302.288 750.837 Q302.288 747.226 299.951 745.12 Q297.613 743.013 293.608 743.013 Q291.733 743.013 289.858 743.43 Q288.006 743.847 286.062 744.726 L286.062 727.365 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M326.177 730.444 Q322.566 730.444 320.737 734.009 Q318.932 737.55 318.932 744.68 Q318.932 751.786 320.737 755.351 Q322.566 758.893 326.177 758.893 Q329.811 758.893 331.617 755.351 Q333.446 751.786 333.446 744.68 Q333.446 737.55 331.617 734.009 Q329.811 730.444 326.177 730.444 M326.177 726.74 Q331.987 726.74 335.043 731.347 Q338.122 735.93 338.122 744.68 Q338.122 753.407 335.043 758.013 Q331.987 762.596 326.177 762.596 Q320.367 762.596 317.288 758.013 Q314.233 753.407 314.233 744.68 Q314.233 735.93 317.288 731.347 Q320.367 726.74 326.177 726.74 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M356.339 730.444 Q352.728 730.444 350.899 734.009 Q349.094 737.55 349.094 744.68 Q349.094 751.786 350.899 755.351 Q352.728 758.893 356.339 758.893 Q359.973 758.893 361.779 755.351 Q363.608 751.786 363.608 744.68 Q363.608 737.55 361.779 734.009 Q359.973 730.444 356.339 730.444 M356.339 726.74 Q362.149 726.74 365.205 731.347 Q368.284 735.93 368.284 744.68 Q368.284 753.407 365.205 758.013 Q362.149 762.596 356.339 762.596 Q350.529 762.596 347.45 758.013 Q344.395 753.407 344.395 744.68 Q344.395 735.93 347.45 731.347 Q350.529 726.74 356.339 726.74 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M284.835 469.261 L307.057 469.261 L307.057 471.252 L294.511 503.821 L289.627 503.821 L301.432 473.197 L284.835 473.197 L284.835 469.261 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M316.224 469.261 L334.58 469.261 L334.58 473.197 L320.506 473.197 L320.506 481.669 Q321.524 481.322 322.543 481.159 Q323.562 480.974 324.58 480.974 Q330.367 480.974 333.747 484.146 Q337.126 487.317 337.126 492.734 Q337.126 498.312 333.654 501.414 Q330.182 504.493 323.862 504.493 Q321.687 504.493 319.418 504.122 Q317.173 503.752 314.765 503.011 L314.765 498.312 Q316.849 499.446 319.071 500.002 Q321.293 500.558 323.77 500.558 Q327.774 500.558 330.112 498.451 Q332.45 496.345 332.45 492.734 Q332.45 489.122 330.112 487.016 Q327.774 484.909 323.77 484.909 Q321.895 484.909 320.02 485.326 Q318.168 485.743 316.224 486.622 L316.224 469.261 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M356.339 472.34 Q352.728 472.34 350.899 475.905 Q349.094 479.447 349.094 486.576 Q349.094 493.683 350.899 497.247 Q352.728 500.789 356.339 500.789 Q359.973 500.789 361.779 497.247 Q363.608 493.683 363.608 486.576 Q363.608 479.447 361.779 475.905 Q359.973 472.34 356.339 472.34 M356.339 468.636 Q362.149 468.636 365.205 473.243 Q368.284 477.826 368.284 486.576 Q368.284 495.303 365.205 499.909 Q362.149 504.493 356.339 504.493 Q350.529 504.493 347.45 499.909 Q344.395 495.303 344.395 486.576 Q344.395 477.826 347.45 473.243 Q350.529 468.636 356.339 468.636 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M256.664 241.782 L264.303 241.782 L264.303 215.417 L255.992 217.084 L255.992 212.824 L264.256 211.158 L268.932 211.158 L268.932 241.782 L276.571 241.782 L276.571 245.718 L256.664 245.718 L256.664 241.782 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M296.015 214.236 Q292.404 214.236 290.576 217.801 Q288.77 221.343 288.77 228.472 Q288.77 235.579 290.576 239.144 Q292.404 242.685 296.015 242.685 Q299.65 242.685 301.455 239.144 Q303.284 235.579 303.284 228.472 Q303.284 221.343 301.455 217.801 Q299.65 214.236 296.015 214.236 M296.015 210.533 Q301.826 210.533 304.881 215.139 Q307.96 219.722 307.96 228.472 Q307.96 237.199 304.881 241.806 Q301.826 246.389 296.015 246.389 Q290.205 246.389 287.127 241.806 Q284.071 237.199 284.071 228.472 Q284.071 219.722 287.127 215.139 Q290.205 210.533 296.015 210.533 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M326.177 214.236 Q322.566 214.236 320.737 217.801 Q318.932 221.343 318.932 228.472 Q318.932 235.579 320.737 239.144 Q322.566 242.685 326.177 242.685 Q329.811 242.685 331.617 239.144 Q333.446 235.579 333.446 228.472 Q333.446 221.343 331.617 217.801 Q329.811 214.236 326.177 214.236 M326.177 210.533 Q331.987 210.533 335.043 215.139 Q338.122 219.722 338.122 228.472 Q338.122 237.199 335.043 241.806 Q331.987 246.389 326.177 246.389 Q320.367 246.389 317.288 241.806 Q314.233 237.199 314.233 228.472 Q314.233 219.722 317.288 215.139 Q320.367 210.533 326.177 210.533 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M356.339 214.236 Q352.728 214.236 350.899 217.801 Q349.094 221.343 349.094 228.472 Q349.094 235.579 350.899 239.144 Q352.728 242.685 356.339 242.685 Q359.973 242.685 361.779 239.144 Q363.608 235.579 363.608 228.472 Q363.608 221.343 361.779 217.801 Q359.973 214.236 356.339 214.236 M356.339 210.533 Q362.149 210.533 365.205 215.139 Q368.284 219.722 368.284 228.472 Q368.284 237.199 365.205 241.806 Q362.149 246.389 356.339 246.389 Q350.529 246.389 347.45 241.806 Q344.395 237.199 344.395 228.472 Q344.395 219.722 347.45 215.139 Q350.529 210.533 356.339 210.533 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip792)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,228.438 4017.76,228.438 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.42 461.101,1246.74 461.669,1245.98 462.238,1245.14 462.806,1243.18 463.375,1242.18 463.943,1241.08 464.511,1238.85 465.08,1237.54 465.648,1236.11 466.216,1234.58 466.785,1232.93 467.353,1229.09 467.921,1227.14 468.49,1225.07 469.058,1222.82 469.626,1220.44 470.195,1217.91 470.763,1215.2 471.331,1212.29 471.9,1209.23 472.468,1205.96 473.036,1201.49 473.605,1197.79 474.173,1192.87 474.741,1187.7 475.31,1183.28 475.878,1178.66 476.446,1172.75 477.015,1167.63 477.583,1162.25 478.152,1156.64 478.72,1150.83 479.288,1144.78 479.857,1138.53 480.425,1131.96 480.993,1122.15 481.562,1115.04 482.13,1107.69 482.698,1100.1 483.267,1090.24 483.835,1079.18 484.403,1071.05 484.972,1058.41 485.54,1050 486.108,1038.29 486.677,1027.55 487.245,1017.58 487.813,1007.55 488.382,998.44 488.95,989.213 489.518,979.802 490.087,970.27 490.655,959.578 491.224,948.758 491.792,936.952 492.36,924.159 492.929,914.413 493.497,904.602 494.065,892.661 494.634,880.812 495.202,870.077 495.77,856.15 496.339,846.586 496.907,833.951 497.475,823.436 498.044,808.818 498.612,798.473 499.18,787.118 499.749,776.897 500.317,765.767 500.885,755.764 501.454,745.777 502.022,734.969 502.59,726.251 503.159,716.485 503.727,705.839 504.295,697.208 504.864,686.688 505.432,675.325 506.001,667.077 506.569,656.986 507.137,648.164 507.706,640.423 508.274,632.68 508.842,626.071 509.411,618.399 509.979,606.711 510.547,597.391 511.116,589.127 511.684,581.043 512.252,573.143 512.821,565.269 513.389,557.626 513.957,550.946 514.526,544.597 515.094,537.14 515.662,528.934 516.231,519.695 516.799,510.755 517.367,505.227 517.936,498.745 518.504,492.2 519.072,486.881 519.641,480.529 520.209,474.27 520.778,468.373 521.346,462.545 521.914,456.722 522.483,447.95 523.051,443.833 523.619,437.498 524.188,431.532 524.756,427.741 525.324,424.996 525.893,419.146 526.461,415.633 527.029,409.888 527.598,407.364 528.166,404.907 528.734,400.311 529.303,393.736 529.871,391.671 530.439,387.428 531.008,380.051 531.576,376.195 532.144,372.641 532.713,367.963 533.281,366.478 533.85,363.067 534.418,359.529 534.986,355.244 535.555,351.063 536.123,348.131 536.691,345.309 537.26,343.611 537.828,338.775 538.396,336.01 538.965,336.547 539.533,333.866 540.101,331.214 540.67,329.604 541.238,326.004 541.806,324.519 542.375,321.084 542.943,319.698 543.511,315.331 544.08,314.331 544.648,312.064 545.216,312.259 545.785,309.091 546.353,306.034 546.921,305.29 547.49,303.101 548.058,301.371 548.627,299.516 549.195,297.88 549.763,294.08 550.332,291.368 550.9,289.93 551.468,286.151 552.037,286.032 552.605,284.899 553.173,284.61 553.742,283.191 554.31,281.64 554.878,280.27 555.447,280.002 556.015,277.669 556.583,275.552 557.152,273.321 557.72,272.452 558.288,271.55 558.857,270.7 559.425,269.77 559.993,271.992 560.562,271.024 561.13,268.938 561.698,267.155 562.267,266.235 562.835,265.694 563.404,264.997 563.972,268.212 564.54,269.179 565.109,269.187 565.677,267.848 566.245,265.729 566.814,265.806 567.382,265.624 567.95,264.537 568.519,265.561 569.087,262.444 569.655,262.669 570.224,263.663 570.792,263.315 571.36,262.919 571.929,261.815 572.497,260.653 573.065,259.715 573.634,258.633 574.202,258.755 574.77,258.871 575.339,259.921 575.907,261.877 576.476,261.698 577.044,262.265 577.612,261.929 578.181,260.486 578.749,260.024 579.317,257.357 579.886,258.228 580.454,255.925 581.022,254.755 581.591,253.4 582.159,253.335 582.727,251.177 583.296,250.943 583.864,251.213 584.432,251.355 585.001,253.338 585.569,254.455 586.137,253.262 586.706,250.979 587.274,252.772 587.842,251.536 588.411,249.323 588.979,247.361 589.547,245.516 590.116,246.644 590.684,247.005 591.253,246.042 591.821,245.299 592.389,244.384 592.958,244.779 593.526,245.012 594.094,244.343 594.663,244.576 595.231,242.68 595.799,244.132 596.368,242.415 596.936,243.805 597.504,240.84 598.073,241.384 598.641,241.937 599.209,243.412 599.778,243.534 600.346,244.868 600.914,247.059 601.483,246.958 602.051,244.791 602.619,243.783 603.188,244.02 603.756,244.261 604.325,244.344 604.893,244.509 605.461,245.651 606.03,245.615 606.598,247.53 607.166,247.367 607.735,247.146 608.303,248.004 608.871,247.958 609.44,246.444 610.008,245.134 610.576,244.86 611.145,244.777 611.713,243.669 612.281,240.462 612.85,241.501 613.418,239.476 613.986,237.768 614.555,239.927 615.123,241.116 615.691,241.178 616.26,240.107 616.828,240.35 617.396,238.367 617.965,238.681 618.533,238.91 619.102,239.826 619.67,240.852 620.238,243.054 620.807,240.847 621.375,241.939 621.943,240.805 622.512,241.718 623.08,240.576 623.648,240.265 624.217,241.085 624.785,242.043 625.353,237.65 625.922,239.676 626.49,239.621 627.058,237.392 627.627,238.795 628.195,238.81 628.763,238.834 629.332,237.612 629.9,238.481 630.468,239.366 631.037,239.438 631.605,240.195 632.173,239.903 632.742,239.804 633.31,240.644 633.879,239.364 634.447,238.271 635.015,236.001 635.584,235.113 636.152,236.043 636.72,235.988 637.289,239.201 637.857,239.416 638.425,241.252 638.994,240.851 639.562,239.506 640.13,238.564 640.699,237.225 641.267,240.327 641.835,237.795 642.404,236.792 642.972,235.597 643.54,235.538 644.109,234.417 644.677,231.437 645.245,231.85 645.814,231.917 646.382,233.343 646.951,233.368 647.519,235.667 648.087,234.486 648.656,233.621 649.224,234.705 649.792,233.742 650.361,232.755 650.929,231.673 651.497,229.906 652.066,231.276 652.634,231.259 653.202,230.625 653.771,227.809 654.339,228.437 654.907,230.912 655.476,229.568 656.044,231.087 656.612,232.639 657.181,233.004 657.749,231.255 658.317,230.521 658.886,229.736 659.454,229.049 660.022,231.516 660.591,232.894 661.159,234.072 661.728,233.1 662.296,233.274 662.864,235.545 663.433,235.429 664.001,237.392 664.569,234.082 665.138,238.264 665.706,238.948 666.274,239.786 666.843,238.429 667.411,237.044 667.979,235.957 668.548,234.549 669.116,234.65 669.684,232.74 670.253,231.909 670.821,230.965 671.389,232.168 671.958,233.136 672.526,232.306 673.094,231.068 673.663,229.222 674.231,228.517 674.799,226.626 675.368,228.131 675.936,230.646 676.505,228.847 677.073,229.211 677.641,230.568 678.21,232.018 678.778,231.135 679.346,230.25 679.915,231.452 680.483,230.661 681.051,229.89 681.62,229.102 682.188,230.445 682.756,231.625 683.325,231.731 683.893,233.119 684.461,233.93 685.03,235.1 685.598,237.152 686.166,234.743 686.735,233.62 687.303,231.616 687.871,231.729 688.44,232.871 689.008,233.949 689.577,234.782 690.145,233.66 690.713,234.614 691.282,234.669 691.85,233.628 692.418,232.473 692.987,232.585 693.555,230.485 694.123,231.604 694.692,231.732 695.26,229.728 695.828,228.907 696.397,228.014 696.965,227.272 697.533,227.681 698.102,230.127 698.67,229.251 699.238,229.678 699.807,228.943 700.375,230.178 700.943,228.396 701.512,227.86 702.08,229.306 702.648,228.531 703.217,227.652 703.785,226.837 704.354,229.233 704.922,228.449 705.49,228.823 706.059,229.116 706.627,227.428 707.195,227.762 707.764,226.012 708.332,227.42 708.9,226.655 709.469,230.203 710.037,230.533 710.605,230.725 711.174,229.919 711.742,230.112 712.31,230.314 712.879,230.413 713.447,231.569 714.015,231.506 714.584,231.67 715.152,233.039 715.72,232.073 716.289,232.231 716.857,236.291 717.425,238.277 717.994,236.878 718.562,236.708 719.131,235.399 719.699,232.276 720.267,234.465 720.836,234.352 721.404,236.35 721.972,236.177 722.541,236.14 723.109,234.732 723.677,234.62 724.246,235.612 724.814,235.396 725.382,236.234 725.951,235.927 726.519,234.678 727.087,233.462 727.656,233.4 728.224,233.211 728.792,232.143 729.361,232.13 729.929,231.95 730.497,230.908 731.066,233.933 731.634,232.922 732.203,232.637 732.771,231.519 733.339,231.42 733.908,231.377 734.476,232.519 735.044,231.341 735.613,231.418 736.181,230.373 736.749,229.294 737.318,228.423 737.886,227.462 738.454,228.499 739.023,229.377 739.591,229.483 740.159,229.429 740.728,232.664 741.296,232.56 741.864,232.629 742.433,231.41 743.001,229.492 743.569,229.355 744.138,228.507 744.706,226.702 745.274,225.854 745.843,226.298 746.411,226.913 746.98,227.105 747.548,228.578 748.116,229.87 748.685,229.79 749.253,230.817 749.821,230.721 750.39,230.741 750.958,229.64 751.526,229.806 752.095,228.829 752.663,228.06 753.231,225.141 753.8,224.689 754.368,226.153 754.936,226.656 755.505,225.807 756.073,225.045 756.641,225.663 757.21,225.988 757.778,223.355 758.346,224.163 758.915,226.695 759.483,226.119 760.052,226.186 760.62,227.611 761.188,228.111 761.757,228.29 762.325,229.675 762.893,229.959 763.462,230.121 764.03,229.204 764.598,230.151 765.167,229.295 765.735,228.662 766.303,228.88 766.872,229.123 767.44,229.479 768.008,229.743 768.577,229.946 769.145,234.027 769.713,234.892 770.282,234.59 770.85,234.334 771.418,236.1 771.987,237.951 772.555,237.566 773.123,237.105 773.692,238.771 774.26,237.028 774.829,235.507 775.397,235.374 775.965,234.196 776.534,233.01 777.102,233.079 777.67,233.99 778.239,234.851 778.807,234.658 779.375,237.431 779.944,236.956 780.512,235.651 781.08,235.182 781.649,234.775 782.217,234.546 782.785,235.216 783.354,233.812 783.922,231.241 784.49,229.315 785.059,229.439 785.627,226.164 786.195,226.647 786.764,223.752 787.332,222.907 787.9,222.156 788.469,222.701 789.037,223.199 789.606,224.74 790.174,226.217 790.742,225.605 791.311,229.122 791.879,228.238 792.447,229.343 793.016,228.296 793.584,225.449 794.152,223.729 794.721,224.238 795.289,225.57 795.857,225.958 796.426,225.11 796.994,226.461 797.562,226.771 798.131,225.875 798.699,228.504 799.267,227.642 799.836,230.003 800.404,228.016 800.972,229.345 801.541,229.388 802.109,228.198 802.678,229.446 803.246,230.754 803.814,232.607 804.383,233.782 804.951,232.558 805.519,233.404 806.088,229.377 806.656,229.589 807.224,229.612 807.793,230.641 808.361,231.607 808.929,229.489 809.498,228.55 810.066,229.814 810.634,230.017 811.203,230.092 811.771,228.974 812.339,228.196 812.908,229.26 813.476,228.298 814.044,228.381 814.613,228.52 815.181,228.642 815.749,228.822 816.318,230.017 816.886,229.022 817.455,231.252 818.023,230.28 818.591,234.522 819.16,232.408 819.728,232.315 820.296,232.285 820.865,230.817 821.433,229.885 822.001,230.904 822.57,232.816 823.138,232.623 823.706,232.37 824.275,230.985 824.843,230.647 825.411,230.714 825.98,229.551 826.548,227.468 827.116,227.573 827.685,226.646 828.253,225.856 828.821,226.899 829.39,228.095 829.958,227.247 830.526,225.41 831.095,225.77 831.663,228.101 832.232,225.961 832.8,224.421 833.368,226.639 833.937,227.101 834.505,226.202 835.073,226.444 835.642,226.747 836.21,224.786 836.778,228.31 837.347,227.381 837.915,229.76 838.483,229.877 839.052,230.991 839.62,231.01 840.188,230.855 840.757,231.682 841.325,231.464 841.893,234.501 842.462,234.287 843.03,234.087 843.598,233.805 844.167,233.828 844.735,233.442 845.304,234.156 845.872,233.79 846.44,234.51 847.009,231.076 847.577,229.904 848.145,228.74 848.714,227.753 849.282,226.925 849.85,228.997 850.419,229.073 850.987,230.158 851.555,231.153 852.124,231.226 852.692,231.128 853.26,229.96 853.829,229.869 854.397,230.6 854.965,232.599 855.534,231.418 856.102,229.383 856.67,228.393 857.239,228.512 857.807,225.607 858.375,225.817 858.944,225.122 859.512,224.555 860.081,225.07 860.649,226.505 861.217,226.818 861.786,226.919 862.354,228.249 862.922,228.488 863.491,232.833 864.059,232.666 864.627,232.316 865.196,228.907 865.764,228.963 866.332,231.057 866.901,230.984 867.469,229.825 868.037,231.157 868.606,231.816 869.174,234.746 869.742,233.38 870.311,234.133 870.879,231.737 871.447,228.486 872.016,226.561 872.584,226.807 873.152,226.748 873.721,226.984 874.289,227.204 874.858,227.254 875.426,227.463 875.994,226.452 876.563,226.695 877.131,226.844 877.699,226.07 878.268,226.261 878.836,223.551 879.404,224.155 879.973,225.56 880.541,225.833 881.109,225.101 881.678,228.621 882.246,228.835 882.814,228.652 883.383,228.77 883.951,227.918 884.519,229.082 885.088,230.991 885.656,230.066 886.224,229.981 886.793,231.046 887.361,227.852 887.93,225.869 888.498,225.105 889.066,227.497 889.635,227.774 890.203,227.988 890.771,227.032 891.34,226.007 891.908,228.294 892.476,229.599 893.045,229.861 893.613,232.159 894.181,232.914 894.75,233.329 895.318,233.859 895.886,232.289 896.455,233.029 897.023,231.982 897.591,230.025 898.16,230.124 898.728,231.047 899.296,229.803 899.865,229.704 900.433,230.884 901.001,229.892 901.57,230.035 902.138,229.868 902.707,228.013 903.275,230.355 903.843,231.447 904.412,230.39 904.98,227.191 905.548,226.329 906.117,224.48 906.685,223.676 907.253,226.104 907.822,226.35 908.39,224.514 908.958,223.918 909.527,225.421 910.095,224.722 910.663,226.227 911.232,228.311 911.8,227.326 912.368,227.652 912.937,225.898 913.505,223.956 914.073,224.397 914.642,226.741 915.21,226.887 915.779,226.071 916.347,226.239 916.915,226.587 917.484,225.649 918.052,227.063 918.62,228.471 919.189,230.865 919.757,230.933 920.325,229.987 920.894,232.258 921.462,230.239 922.03,232.221 922.599,234.037 923.167,236.912 923.735,235.404 924.304,234.946 924.872,235.539 925.44,235.193 926.009,232.61 926.577,229.154 927.145,230.277 927.714,227.101 928.282,225.281 928.85,225.45 929.419,225.774 929.987,225.862 930.556,225.987 931.124,228.072 931.692,227.998 932.261,227.014 932.829,227.147 933.397,226.377 933.966,229.546 934.534,229.507 935.102,228.512 935.671,228.388 936.239,228.498 936.807,225.657 937.376,225.037 937.944,226.563 938.512,229.796 939.081,228.751 939.649,229.767 940.217,230.806 940.786,229.845 941.354,229.834 941.922,230.667 942.491,229.346 943.059,231.557 943.627,233.549 944.196,232.081 944.764,232.851 945.333,231.652 945.901,233.439 946.469,234.203 947.038,230.667 947.606,231.746 948.174,231.482 948.743,232.191 949.311,229.884 949.879,229.869 950.448,227.614 951.016,226.597 951.584,227.767 952.153,229.888 952.721,232.032 953.289,231.929 953.858,232.921 954.426,234.971 954.994,233.54 955.563,231.167 956.131,228.961 956.699,228.932 957.268,227.964 957.836,228.122 958.405,226.255 958.973,224.555 959.541,226.992 960.11,227.125 960.678,227.167 961.246,227.031 961.815,225.851 962.383,225.11 962.951,224.335 963.52,225.759 964.088,226.851 964.656,225.891 965.225,226.032 965.793,224.095 966.361,223.549 966.93,222.992 967.498,224.343 968.066,224.609 968.635,226.764 969.203,227.097 969.771,226.068 970.34,224.163 970.908,224.631 971.476,225.135 972.045,226.501 972.613,228.773 973.182,226.826 973.75,229.868 974.318,227.938 974.887,227.162 975.455,230.421 976.023,230.526 976.592,229.571 977.16,230.812 977.728,230.756 978.297,229.822 978.865,229.872 979.433,229.639 980.002,230.59 980.57,232.576 981.138,233.658 981.707,233.482 982.275,235.27 982.843,236.804 983.412,238.288 983.98,237.651 984.548,237.089 985.117,235.563 985.685,236.155 986.253,234.684 986.822,234.098 987.39,231.683 987.959,234.457 988.527,233.221 989.095,233.891 989.664,233.624 990.232,231.051 990.8,229.809 991.369,228.653 991.937,228.896 992.505,229.893 993.074,226.749 993.642,225.017 994.21,225.195 994.779,223.313 995.347,222.619 995.915,222.073 996.484,222.327 997.052,221.753 997.62,221.421 998.189,223.975 998.757,225.398 999.325,226.703 999.894,226.829 1000.46,226.038 1001.03,224.31 1001.6,223.592 1002.17,225.207 1002.74,225.544 1003.3,228.983 1003.87,228.967 1004.44,229.845 1005.01,228.493 1005.58,229.455 1006.15,229.521 1006.71,230.408 1007.28,228.187 1007.85,228.173 1008.42,228.33 1008.99,228.615 1009.56,226.813 1010.12,226.851 1010.69,227.025 1011.26,227.217 1011.83,228.415 1012.4,227.479 1012.97,226.625 1013.53,228.958 1014.1,226 1014.67,223.916 1015.24,224.236 1015.81,226.749 1016.38,227.819 1016.94,227.002 1017.51,227.453 1018.08,227.592 1018.65,225.539 1019.22,224.834 1019.79,226.227 1020.35,226.474 1020.92,227.735 1021.49,229.228 1022.06,230.075 1022.63,229.993 1023.2,230.8 1023.76,230.623 1024.33,229.55 1024.9,225.397 1025.47,225.626 1026.04,226.921 1026.61,228.985 1027.17,228.117 1027.74,228.179 1028.31,227.093 1028.88,226.283 1029.45,226.765 1030.02,227.227 1030.58,225.322 1031.15,227.698 1031.72,228.94 1032.29,228.087 1032.86,231.255 1033.43,231.173 1033.99,232.088 1034.56,232.893 1035.13,231.706 1035.7,231.619 1036.27,232.272 1036.84,229.071 1037.4,228.123 1037.97,230.203 1038.54,232.067 1039.11,229.777 1039.68,228.867 1040.25,229.089 1040.81,229.281 1041.38,230.447 1041.95,231.416 1042.52,230.41 1043.09,231.535 1043.66,231.552 1044.22,232.529 1044.79,232.366 1045.36,232.296 1045.93,233.104 1046.5,232.879 1047.07,234.393 1047.63,235.957 1048.2,234.469 1048.77,232.945 1049.34,233.858 1049.91,236.525 1050.48,237.112 1051.05,235.534 1051.61,235.056 1052.18,234.648 1052.75,236.174 1053.32,236.736 1053.89,235.251 1054.46,235.481 1055.02,234.737 1055.59,234.13 1056.16,234.45 1056.73,232.931 1057.3,232.596 1057.87,232.171 1058.43,233.807 1059,233.432 1059.57,233.021 1060.14,229.513 1060.71,229.322 1061.28,229.077 1061.84,230.004 1062.41,227.548 1062.98,228.391 1063.55,229.28 1064.12,229.047 1064.69,228.872 1065.25,229.791 1065.82,230.736 1066.39,230.422 1066.96,229.958 1067.53,230.65 1068.1,233.481 1068.66,231.924 1069.23,231.204 1069.8,232.981 1070.37,230.507 1070.94,227.931 1071.51,226.74 1072.07,226.508 1072.64,225.51 1073.21,226.43 1073.78,226.305 1074.35,225.27 1074.92,225.439 1075.48,224.356 1076.05,226.559 1076.62,228.677 1077.19,226.381 1077.76,226.259 1078.33,226.408 1078.89,226.494 1079.46,226.648 1080.03,226.611 1080.6,227.557 1081.17,227.384 1081.74,226.253 1082.3,226.37 1082.87,226.272 1083.44,225.211 1084.01,225.266 1084.58,224.4 1085.15,224.782 1085.71,225.972 1086.28,226.116 1086.85,225.228 1087.42,225.274 1087.99,228.581 1088.56,232.749 1089.12,233.282 1089.69,231.69 1090.26,231.47 1090.83,230.243 1091.4,230.925 1091.97,229.537 1092.53,227.401 1093.1,227.471 1093.67,228.605 1094.24,227.497 1094.81,227.545 1095.38,225.425 1095.94,225.537 1096.51,224.708 1097.08,227.847 1097.65,226.818 1098.22,228.921 1098.79,228.93 1099.35,226.85 1099.92,227.919 1100.49,228.943 1101.06,226.666 1101.63,225.983 1102.2,227.035 1102.76,226.954 1103.33,226.187 1103.9,226.389 1104.47,225.526 1105.04,224.794 1105.61,224.923 1106.17,226.166 1106.74,227.632 1107.31,224.562 1107.88,224.96 1108.45,224.175 1109.02,224.509 1109.58,223.702 1110.15,227.068 1110.72,226.317 1111.29,226.348 1111.86,227.118 1112.43,226.228 1112.99,225.471 1113.56,225.578 1114.13,225.602 1114.7,224.781 1115.27,226.029 1115.84,225.155 1116.4,226.485 1116.97,225.417 1117.54,224.587 1118.11,224.689 1118.68,227.086 1119.25,229.147 1119.81,229.233 1120.38,231.332 1120.95,233.227 1121.52,235.889 1122.09,236.638 1122.66,236.935 1123.23,236.115 1123.79,235.628 1124.36,232.697 1124.93,233.278 1125.5,231.582 1126.07,231.458 1126.64,230.931 1127.2,230.727 1127.77,227.535 1128.34,227.57 1128.91,227.314 1129.48,228.402 1130.05,228.419 1130.61,226.399 1131.18,226.343 1131.75,224.365 1132.32,224.64 1132.89,224.838 1133.46,226.146 1134.02,226.255 1134.59,226.327 1135.16,226.427 1135.73,224.184 1136.3,224.393 1136.87,224.809 1137.43,223.958 1138,224.051 1138.57,224.429 1139.14,223.866 1139.71,224.153 1140.28,224.276 1140.84,223.285 1141.41,220.61 1141.98,220.064 1142.55,221.735 1143.12,223.067 1143.69,223.696 1144.25,225.029 1144.82,226.458 1145.39,226.655 1145.96,226.896 1146.53,228.044 1147.1,227.236 1147.66,226.354 1148.23,227.447 1148.8,228.753 1149.37,227.807 1149.94,227.994 1150.51,230.117 1151.07,228.155 1151.64,227.1 1152.21,227.176 1152.78,228.332 1153.35,227.415 1153.92,229.483 1154.48,230.616 1155.05,230.599 1155.62,229.442 1156.19,231.451 1156.76,234.416 1157.33,235.219 1157.89,233.94 1158.46,233.54 1159.03,234.233 1159.6,235.912 1160.17,234.188 1160.74,233.759 1161.3,232.294 1161.87,231.184 1162.44,231.049 1163.01,231.88 1163.58,230.574 1164.15,229.173 1164.71,231.23 1165.28,233.018 1165.85,232.924 1166.42,232.711 1166.99,234.498 1167.56,233.982 1168.12,232.501 1168.69,232.388 1169.26,233.16 1169.83,232.727 1170.4,232.378 1170.97,231.016 1171.53,230.906 1172.1,229.585 1172.67,230.404 1173.24,231.216 1173.81,229.697 1174.38,229.478 1174.94,230.295 1175.51,230.074 1176.08,230.886 1176.65,230.619 1177.22,231.505 1177.79,232.354 1178.35,228.801 1178.92,228.672 1179.49,227.627 1180.06,228.513 1180.63,229.546 1181.2,230.285 1181.76,228.756 1182.33,229.669 1182.9,229.463 1183.47,229.4 1184.04,229.465 1184.61,228.268 1185.17,225.228 1185.74,224.235 1186.31,225.464 1186.88,224.584 1187.45,224.536 1188.02,224.879 1188.58,225.137 1189.15,225.243 1189.72,226.642 1190.29,226.828 1190.86,225.817 1191.43,224.961 1192,225.266 1192.56,224.423 1193.13,223.591 1193.7,225.075 1194.27,225.404 1194.84,226.577 1195.41,227.673 1195.97,227.745 1196.54,227.899 1197.11,227.972 1197.68,228.088 1198.25,228.945 1198.82,230.982 1199.38,224.477 1199.95,223.779 1200.52,224.272 1201.09,222.567 1201.66,222.995 1202.23,222.344 1202.79,225.891 1203.36,226.306 1203.93,223.292 1204.5,222.831 1205.07,222.066 1205.64,222.714 1206.2,223.314 1206.77,220.762 1207.34,221.361 1207.91,223 1208.48,222.374 1209.05,221.668 1209.61,222.084 1210.18,224.775 1210.75,223.155 1211.32,228.788 1211.89,228.834 1212.46,231.257 1213.02,232.299 1213.59,232.122 1214.16,231.094 1214.73,232.047 1215.3,230.892 1215.87,230.789 1216.43,227.589 1217,228.627 1217.57,229.622 1218.14,229.493 1218.71,228.431 1219.28,228.432 1219.84,227.338 1220.41,227.287 1220.98,225.584 1221.55,227.166 1222.12,228.162 1222.69,229.253 1223.25,231.445 1223.82,230.256 1224.39,230.231 1224.96,232.379 1225.53,232.168 1226.1,232.053 1226.66,233.028 1227.23,231.915 1227.8,229.706 1228.37,229.588 1228.94,227.487 1229.51,227.68 1230.07,227.906 1230.64,229.06 1231.21,229.043 1231.78,226.85 1232.35,227.113 1232.92,227.311 1233.48,229.426 1234.05,228.453 1234.62,229.646 1235.19,229.798 1235.76,228.704 1236.33,226.606 1236.89,227.739 1237.46,229.017 1238.03,229.141 1238.6,229.159 1239.17,229.452 1239.74,229.206 1240.3,230.182 1240.87,228.169 1241.44,226.048 1242.01,225.289 1242.58,225.559 1243.15,228.921 1243.71,226.868 1244.28,226.26 1244.85,226.398 1245.42,227.614 1245.99,231.013 1246.56,231.975 1247.12,234.859 1247.69,236.527 1248.26,237.048 1248.83,236.384 1249.4,236.087 1249.97,233.489 1250.53,233.345 1251.1,233.084 1251.67,230.932 1252.24,230.877 1252.81,227.542 1253.38,227.709 1253.94,224.789 1254.51,225.124 1255.08,225.362 1255.65,223.541 1256.22,225.978 1256.79,223.054 1257.35,223.487 1257.92,222.685 1258.49,226.369 1259.06,227.889 1259.63,230.042 1260.2,230.025 1260.76,229.942 1261.33,228.831 1261.9,230.978 1262.47,231.89 1263.04,233.625 1263.61,235.366 1264.18,234.847 1264.74,235.522 1265.31,233.869 1265.88,234.429 1266.45,230.73 1267.02,227.553 1267.59,226.847 1268.15,227.319 1268.72,230.554 1269.29,228.446 1269.86,224.198 1270.43,224.354 1271,226.662 1271.56,228.95 1272.13,228.748 1272.7,227.666 1273.27,225.6 1273.84,225.814 1274.41,226.767 1274.97,225.727 1275.54,224.741 1276.11,225.994 1276.68,226.317 1277.25,228.533 1277.82,228.533 1278.38,228.422 1278.95,227.455 1279.52,226.595 1280.09,227.988 1280.66,226.002 1281.23,228.46 1281.79,229.529 1282.36,231.541 1282.93,231.336 1283.5,231.045 1284.07,230.874 1284.64,229.746 1285.2,227.561 1285.77,226.629 1286.34,228.91 1286.91,228.887 1287.48,229.697 1288.05,230.756 1288.61,231.356 1289.18,228.975 1289.75,228.831 1290.32,228.611 1290.89,230.597 1291.46,231.613 1292.02,231.466 1292.59,232.23 1293.16,232.894 1293.73,232.627 1294.3,232.273 1294.87,229.868 1295.43,227.504 1296,227.644 1296.57,228.665 1297.14,229.415 1297.71,232.331 1298.28,231.902 1298.84,233.531 1299.41,231.173 1299.98,229.698 1300.55,228.572 1301.12,229.404 1301.69,228.214 1302.25,226.915 1302.82,227.87 1303.39,227.899 1303.96,227.811 1304.53,227.635 1305.1,226.727 1305.66,226.805 1306.23,225.747 1306.8,226.813 1307.37,228.972 1307.94,228.976 1308.51,228.928 1309.07,230.98 1309.64,231.912 1310.21,233.75 1310.78,231.354 1311.35,232.06 1311.92,231.834 1312.48,231.407 1313.05,232.194 1313.62,229.02 1314.19,230.038 1314.76,230.829 1315.33,230.716 1315.89,229.507 1316.46,231.362 1317.03,231.967 1317.6,231.665 1318.17,230.397 1318.74,230.061 1319.3,229.871 1319.87,226.649 1320.44,225.675 1321.01,225.513 1321.58,226.589 1322.15,228.669 1322.71,227.452 1323.28,228.42 1323.85,227.268 1324.42,227.212 1324.99,227.14 1325.56,227.004 1326.12,225.904 1326.69,224.006 1327.26,226.243 1327.83,226.263 1328.4,226.41 1328.97,225.529 1329.53,226.65 1330.1,225.812 1330.67,225.934 1331.24,225.004 1331.81,225.122 1332.38,224.162 1332.94,222.334 1333.51,224.686 1334.08,226.939 1334.65,226.969 1335.22,226.3 1335.79,226.423 1336.36,226.726 1336.92,226.848 1337.49,226.165 1338.06,227.576 1338.63,227.63 1339.2,227.764 1339.77,226.566 1340.33,226.76 1340.9,224.847 1341.47,225.937 1342.04,227.276 1342.61,225.199 1343.18,226.444 1343.74,227.73 1344.31,227.821 1344.88,228.748 1345.45,231.665 1346.02,230.455 1346.59,233.336 1347.15,235.03 1347.72,232.749 1348.29,232.35 1348.86,231.999 1349.43,231.959 1350,230.642 1350.56,230.303 1351.13,230.088 1351.7,229.993 1352.27,231.915 1352.84,230.527 1353.41,231.363 1353.97,231.095 1354.54,230.732 1355.11,231.484 1355.68,232.365 1356.25,232.056 1356.82,233 1357.38,230.555 1357.95,229.406 1358.52,231.24 1359.09,230.05 1359.66,229.821 1360.23,233.788 1360.79,235.542 1361.36,234.692 1361.93,232.961 1362.5,229.173 1363.07,226.877 1363.64,223.861 1364.2,226.024 1364.77,226.418 1365.34,228.636 1365.91,227.307 1366.48,226.342 1367.05,225.367 1367.61,226.338 1368.18,225.458 1368.75,222.29 1369.32,221.573 1369.89,221.86 1370.46,222.319 1371.02,222.65 1371.59,222.956 1372.16,224.168 1372.73,225.183 1373.3,225.323 1373.87,224.366 1374.43,225.819 1375,226.951 1375.57,229.118 1376.14,226.983 1376.71,224.953 1377.28,226.097 1377.84,228.135 1378.41,229.312 1378.98,230.135 1379.55,230.868 1380.12,230.744 1380.69,227.445 1381.25,225.433 1381.82,224.769 1382.39,226.019 1382.96,225.861 1383.53,226.952 1384.1,223.959 1384.66,224.127 1385.23,224.391 1385.8,224.728 1386.37,223.996 1386.94,224.43 1387.51,227.607 1388.07,227.843 1388.64,227.674 1389.21,229.874 1389.78,230.645 1390.35,230.481 1390.92,231.285 1391.48,232.037 1392.05,232.835 1392.62,232.512 1393.19,230.102 1393.76,229.052 1394.33,229.921 1394.89,229.941 1395.46,231.001 1396.03,227.715 1396.6,227.773 1397.17,226.782 1397.74,228.162 1398.3,230.538 1398.87,230.267 1399.44,228.999 1400.01,227.763 1400.58,226.62 1401.15,228.873 1401.71,230.157 1402.28,233.075 1402.85,231.709 1403.42,232.493 1403.99,233.202 1404.56,232.767 1405.13,231.306 1405.69,230.847 1406.26,230.667 1406.83,230.462 1407.4,229.367 1407.97,233.45 1408.54,230.782 1409.1,231.436 1409.67,232.344 1410.24,232.088 1410.81,232.027 1411.38,231.729 1411.95,232.625 1412.51,233.418 1413.08,233.871 1413.65,233.456 1414.22,232.114 1414.79,231.5 1415.36,231.006 1415.92,228.756 1416.49,227.619 1417.06,228.775 1417.63,228.627 1418.2,229.47 1418.77,227.36 1419.33,228.02 1419.9,227.864 1420.47,228.002 1421.04,226.727 1421.61,225.689 1422.18,223.856 1422.74,224.182 1423.31,224.507 1423.88,225.686 1424.45,225.891 1425.02,225.879 1425.59,226.072 1426.15,226.187 1426.72,228.268 1427.29,227.167 1427.86,226.376 1428.43,225.569 1429,224.679 1429.56,224.823 1430.13,225.232 1430.7,226.565 1431.27,226.792 1431.84,226.715 1432.41,225.813 1432.97,224.734 1433.54,220.976 1434.11,222.553 1434.68,223.822 1435.25,223.1 1435.82,222.38 1436.38,223.906 1436.95,222.442 1437.52,222.905 1438.09,224.41 1438.66,225.136 1439.23,223.171 1439.79,222.585 1440.36,221.854 1440.93,223.281 1441.5,222.683 1442.07,223.9 1442.64,225.335 1443.2,225.575 1443.77,224.001 1444.34,223.306 1444.91,223.865 1445.48,225.271 1446.05,225.703 1446.61,228.043 1447.18,228.231 1447.75,227.512 1448.32,228.649 1448.89,227.69 1449.46,228.778 1450.02,227.618 1450.59,230.679 1451.16,234.819 1451.73,234.349 1452.3,237.174 1452.87,236.603 1453.43,236.049 1454,236.591 1454.57,235.891 1455.14,235.305 1455.71,233.841 1456.28,232.411 1456.84,232.181 1457.41,232.894 1457.98,234.768 1458.55,233.233 1459.12,232.024 1459.69,230.621 1460.25,230.226 1460.82,227.838 1461.39,227.913 1461.96,226.902 1462.53,227.033 1463.1,229.184 1463.66,227.802 1464.23,228.146 1464.8,230.133 1465.37,229.966 1465.94,228.759 1466.51,229.496 1467.07,230.316 1467.64,226.886 1468.21,227.927 1468.78,227.863 1469.35,227.034 1469.92,228.14 1470.48,226.885 1471.05,228.117 1471.62,226.08 1472.19,225.015 1472.76,225.3 1473.33,225.491 1473.89,225.628 1474.46,225.732 1475.03,220.842 1475.6,222.527 1476.17,224.062 1476.74,223.422 1477.31,225.115 1477.87,225.418 1478.44,226.7 1479.01,227.99 1479.58,228.2 1480.15,228.349 1480.72,229.265 1481.28,227.339 1481.85,228.192 1482.42,228.107 1482.99,226.024 1483.56,229.167 1484.13,232.391 1484.69,234.219 1485.26,232.076 1485.83,232.061 1486.4,231.669 1486.97,231.644 1487.54,234.545 1488.1,235.466 1488.67,236.041 1489.24,235.436 1489.81,233.866 1490.38,234.472 1490.95,232.924 1491.51,232.565 1492.08,231.166 1492.65,230.927 1493.22,229.53 1493.79,230.371 1494.36,230.149 1494.92,230.046 1495.49,231.138 1496.06,232.037 1496.63,229.595 1497.2,229.532 1497.77,229.529 1498.33,229.704 1498.9,230.527 1499.47,231.383 1500.04,230.119 1500.61,229.923 1501.18,230.91 1501.74,229.565 1502.31,231.422 1502.88,232.072 1503.45,228.685 1504.02,229.705 1504.59,232.563 1505.15,231.048 1505.72,229.814 1506.29,231.8 1506.86,232.584 1507.43,232.229 1508,231.895 1508.56,229.671 1509.13,229.6 1509.7,229.369 1510.27,231.494 1510.84,230.164 1511.41,231.189 1511.97,230.78 1512.54,229.675 1513.11,228.251 1513.68,228.215 1514.25,228.078 1514.82,226.023 1515.38,228.029 1515.95,227.855 1516.52,228.734 1517.09,227.521 1517.66,228.196 1518.23,228.182 1518.79,226.992 1519.36,228.019 1519.93,227.791 1520.5,227.89 1521.07,227.608 1521.64,227.406 1522.2,226.369 1522.77,225.52 1523.34,224.466 1523.91,226.796 1524.48,225.803 1525.05,224.114 1525.61,224.353 1526.18,224.238 1526.75,222.449 1527.32,222.889 1527.89,225.217 1528.46,225.376 1529.02,226.497 1529.59,226.448 1530.16,228.448 1530.73,228.328 1531.3,228.458 1531.87,228.422 1532.43,228.397 1533,227.272 1533.57,227.098 1534.14,227.173 1534.71,227.269 1535.28,225.207 1535.84,224.347 1536.41,225.718 1536.98,226.626 1537.55,227.543 1538.12,226.425 1538.69,227.574 1539.25,228.507 1539.82,228.477 1540.39,228.495 1540.96,229.543 1541.53,227.333 1542.1,228.33 1542.66,229.518 1543.23,227.432 1543.8,225.397 1544.37,224.63 1544.94,223.915 1545.51,223.022 1546.08,223.413 1546.64,224.79 1547.21,225.126 1547.78,226.447 1548.35,225.515 1548.92,225.628 1549.49,227.879 1550.05,229.007 1550.62,228.82 1551.19,228.714 1551.76,228.828 1552.33,229.613 1552.9,231.557 1553.46,232.559 1554.03,232.623 1554.6,232.253 1555.17,228.802 1555.74,230.99 1556.31,226.766 1556.87,227.192 1557.44,225.206 1558.01,226.451 1558.58,227.723 1559.15,228.881 1559.72,226.843 1560.28,227.053 1560.85,227.318 1561.42,226.331 1561.99,225.577 1562.56,223.796 1563.13,223.138 1563.69,224.533 1564.26,225.822 1564.83,224.921 1565.4,226.274 1565.97,224.4 1566.54,223.901 1567.1,223.424 1567.67,222.98 1568.24,221.272 1568.81,223.749 1569.38,224.289 1569.95,224.689 1570.51,223.955 1571.08,223.377 1571.65,224.835 1572.22,225.123 1572.79,226.55 1573.36,224.652 1573.92,224.934 1574.49,227.408 1575.06,228.719 1575.63,230.936 1576.2,228.706 1576.77,226.888 1577.33,227.228 1577.9,227.349 1578.47,228.531 1579.04,229.65 1579.61,230.695 1580.18,228.466 1580.74,227.395 1581.31,228.496 1581.88,229.655 1582.45,229.651 1583.02,228.755 1583.59,228.881 1584.15,228.909 1584.72,227.841 1585.29,229.179 1585.86,229.308 1586.43,229.271 1587,228.403 1587.56,229.644 1588.13,230.594 1588.7,229.806 1589.27,229.048 1589.84,228.991 1590.41,229.168 1590.97,230.03 1591.54,229.089 1592.11,233.219 1592.68,230.937 1593.25,231.062 1593.82,230.842 1594.38,231.561 1594.95,232.384 1595.52,232.965 1596.09,236.869 1596.66,236.226 1597.23,236.952 1597.79,236.403 1598.36,234.677 1598.93,232.145 1599.5,232.038 1600.07,228.831 1600.64,229.983 1601.2,226.797 1601.77,225.991 1602.34,226.127 1602.91,226.251 1603.48,226.567 1604.05,226.778 1604.61,226.756 1605.18,228.031 1605.75,227.993 1606.32,230.172 1606.89,231.353 1607.46,230.266 1608.02,232.314 1608.59,231.918 1609.16,229.567 1609.73,227.181 1610.3,226.233 1610.87,225.147 1611.43,225.462 1612,225.881 1612.57,228.221 1613.14,228.02 1613.71,226.175 1614.28,226.329 1614.84,226.201 1615.41,225.431 1615.98,225.915 1616.55,226.096 1617.12,224.056 1617.69,224.284 1618.26,224.59 1618.82,224.944 1619.39,226.432 1619.96,226.64 1620.53,225.914 1621.1,225.068 1621.67,224.252 1622.23,222.718 1622.8,221.288 1623.37,222.96 1623.94,220.363 1624.51,220.789 1625.08,222.205 1625.64,221.665 1626.21,222.279 1626.78,223.98 1627.35,223.516 1627.92,225.025 1628.49,224.311 1629.05,225.743 1629.62,226.049 1630.19,226.453 1630.76,228.669 1631.33,228.918 1631.9,229.824 1632.46,229.573 1633.03,229.517 1633.6,230.761 1634.17,229.7 1634.74,229.849 1635.31,229.758 1635.87,231.006 1636.44,226.958 1637.01,227.345 1637.58,228.493 1638.15,227.515 1638.72,226.687 1639.28,228.134 1639.85,229.302 1640.42,228.221 1640.99,230.274 1641.56,229.385 1642.13,228.446 1642.69,225.275 1643.26,225.607 1643.83,226.911 1644.4,227.11 1644.97,228.466 1645.54,227.583 1646.1,226.702 1646.67,230.133 1647.24,230.379 1647.81,231.667 1648.38,229.612 1648.95,231.792 1649.51,230.535 1650.08,230.177 1650.65,231.197 1651.22,230.141 1651.79,230.096 1652.36,228.987 1652.92,229.907 1653.49,232.794 1654.06,233.69 1654.63,233.43 1655.2,232.403 1655.77,233.191 1656.33,232.959 1656.9,231.668 1657.47,232.614 1658.04,232.563 1658.61,233.506 1659.18,232.218 1659.74,231.095 1660.31,229.815 1660.88,229.578 1661.45,230.447 1662.02,231.431 1662.59,231.289 1663.15,230.093 1663.72,230.025 1664.29,229.856 1664.86,230.712 1665.43,229.599 1666,228.552 1666.56,226.523 1667.13,226.877 1667.7,226.209 1668.27,225.484 1668.84,225.685 1669.41,226.173 1669.97,225.554 1670.54,225.964 1671.11,227.256 1671.68,227.319 1672.25,226.39 1672.82,226.708 1673.38,225.894 1673.95,226.029 1674.52,225.336 1675.09,224.669 1675.66,224.906 1676.23,226.159 1676.79,229.574 1677.36,229.407 1677.93,228.568 1678.5,229.591 1679.07,229.697 1679.64,229.592 1680.2,230.64 1680.77,231.469 1681.34,230.348 1681.91,231.316 1682.48,229.088 1683.05,228.269 1683.61,227.15 1684.18,226.224 1684.75,226.39 1685.32,227.606 1685.89,228.028 1686.46,227.08 1687.02,226.141 1687.59,226.509 1688.16,226.25 1688.73,225.495 1689.3,226.623 1689.87,228.73 1690.44,227.849 1691,231.012 1691.57,230.195 1692.14,230.186 1692.71,230.297 1693.28,232.426 1693.85,233.507 1694.41,235.425 1694.98,235.011 1695.55,235.769 1696.12,236.383 1696.69,235.962 1697.26,233.356 1697.82,234.085 1698.39,232.569 1698.96,234.29 1699.53,234.89 1700.1,237.502 1700.67,234.713 1701.23,235.24 1701.8,232.75 1702.37,232.23 1702.94,228.607 1703.51,228.447 1704.08,228.465 1704.64,228.547 1705.21,227.52 1705.78,227.489 1706.35,229.603 1706.92,231.584 1707.49,230.257 1708.05,232.245 1708.62,232.89 1709.19,233.539 1709.76,235.354 1710.33,233.699 1710.9,234.227 1711.46,232.726 1712.03,232.152 1712.6,230.722 1713.17,231.516 1713.74,231.572 1714.31,229.214 1714.87,226 1715.44,227.147 1716.01,227.258 1716.58,226.248 1717.15,228.323 1717.72,226.23 1718.28,227.321 1718.85,226.133 1719.42,227.185 1719.99,226.386 1720.56,224.301 1721.13,222.687 1721.69,223.024 1722.26,222.206 1722.83,220.411 1723.4,221.97 1723.97,222.21 1724.54,221.4 1725.1,223.835 1725.67,224.111 1726.24,226.311 1726.81,226.244 1727.38,226.507 1727.95,225.608 1728.51,228.129 1729.08,227.319 1729.65,228.403 1730.22,226.434 1730.79,227.61 1731.36,226.77 1731.92,227.992 1732.49,225.996 1733.06,227.237 1733.63,228.417 1734.2,230.436 1734.77,231.341 1735.33,231.076 1735.9,230.942 1736.47,228.629 1737.04,229.555 1737.61,229.457 1738.18,232.355 1738.74,233.229 1739.31,234.951 1739.88,235.195 1740.45,238.719 1741.02,238.788 1741.59,239.115 1742.15,239.484 1742.72,238.716 1743.29,236.912 1743.86,235.204 1744.43,234.654 1745,234.017 1745.56,233.567 1746.13,232.8 1746.7,232.164 1747.27,233.909 1747.84,233.385 1748.41,230.684 1748.97,228.562 1749.54,228.322 1750.11,228.18 1750.68,228.366 1751.25,227.167 1751.82,224.995 1752.38,226.135 1752.95,224.839 1753.52,224.933 1754.09,222.03 1754.66,222.302 1755.23,225.701 1755.79,225.827 1756.36,226.009 1756.93,226.029 1757.5,225.26 1758.07,225.347 1758.64,224.442 1759.21,224.819 1759.77,222.907 1760.34,223.371 1760.91,224.685 1761.48,225.868 1762.05,226.169 1762.62,226.366 1763.18,227.621 1763.75,226.527 1764.32,228.765 1764.89,228.634 1765.46,226.613 1766.03,225.334 1766.59,228.634 1767.16,227.746 1767.73,226.847 1768.3,228.087 1768.87,225.095 1769.44,224.057 1770,223.42 1770.57,223.428 1771.14,225.783 1771.71,225.766 1772.28,225.059 1772.85,225.217 1773.41,227.634 1773.98,226.598 1774.55,229.883 1775.12,233.051 1775.69,232.843 1776.26,232.511 1776.82,233.288 1777.39,233.936 1777.96,232.684 1778.53,231.662 1779.1,232.412 1779.67,232.329 1780.23,233.915 1780.8,233.437 1781.37,231.793 1781.94,229.678 1782.51,227.655 1783.08,228.471 1783.64,228.494 1784.21,227.394 1784.78,227.405 1785.35,229.408 1785.92,229.194 1786.49,227.935 1787.05,227.876 1787.62,227.777 1788.19,227.685 1788.76,227.562 1789.33,228.471 1789.9,228.307 1790.46,228.237 1791.03,227.218 1791.6,228.373 1792.17,230.31 1792.74,232.106 1793.31,231.697 1793.87,231.262 1794.44,229.764 1795.01,228.408 1795.58,231.331 1796.15,230.93 1796.72,230.693 1797.28,231.454 1797.85,230.252 1798.42,231.026 1798.99,229.757 1799.56,229.571 1800.13,232.411 1800.69,231.133 1801.26,231.063 1801.83,231.768 1802.4,232.473 1802.97,231.981 1803.54,230.733 1804.1,230.241 1804.67,229.792 1805.24,227.379 1805.81,227.021 1806.38,227.921 1806.95,227.768 1807.51,227.672 1808.08,227.596 1808.65,226.856 1809.22,227.682 1809.79,227.544 1810.36,225.487 1810.92,225.711 1811.49,225.903 1812.06,226.95 1812.63,226.031 1813.2,226.162 1813.77,225.098 1814.33,226.334 1814.9,226.587 1815.47,226.728 1816.04,226.399 1816.61,226.523 1817.18,225.609 1817.74,225.786 1818.31,226.737 1818.88,227.695 1819.45,230.685 1820.02,230.58 1820.59,229.541 1821.15,232.519 1821.72,230.879 1822.29,230.455 1822.86,231.138 1823.43,230.646 1824,229.343 1824.56,230.064 1825.13,230.841 1825.7,231.553 1826.27,232.258 1826.84,229.83 1827.41,229.493 1827.97,228.353 1828.54,227.342 1829.11,228.057 1829.68,225.768 1830.25,227.084 1830.82,228.068 1831.39,225.61 1831.95,226.805 1832.52,227.762 1833.09,228.388 1833.66,229.313 1834.23,228.203 1834.8,226.107 1835.36,222.097 1835.93,222.309 1836.5,226.903 1837.07,225.773 1837.64,224.735 1838.21,226.21 1838.77,223.991 1839.34,225.239 1839.91,224.627 1840.48,223.617 1841.05,225.805 1841.62,222.83 1842.18,223.257 1842.75,224.705 1843.32,229.068 1843.89,229.061 1844.46,228.914 1845.03,227.025 1845.59,227.164 1846.16,228.167 1846.73,229.315 1847.3,229.49 1847.87,231.508 1848.44,230.288 1849,228.111 1849.57,229.09 1850.14,229.021 1850.71,227.881 1851.28,229.015 1851.85,226.993 1852.41,229.043 1852.98,227.999 1853.55,230.115 1854.12,227.668 1854.69,227.596 1855.26,225.344 1855.82,223.345 1856.39,223.694 1856.96,224.039 1857.53,225.386 1858.1,225.805 1858.67,225.769 1859.23,224.025 1859.8,225.074 1860.37,226.311 1860.94,226.429 1861.51,226.563 1862.08,223.448 1862.64,224.817 1863.21,224.28 1863.78,223.595 1864.35,224.941 1864.92,226.254 1865.49,227.505 1866.05,228.611 1866.62,228.75 1867.19,227.783 1867.76,227.806 1868.33,225.898 1868.9,226.915 1869.46,226.923 1870.03,225.142 1870.6,221.174 1871.17,221.82 1871.74,221.171 1872.31,224.027 1872.87,224.508 1873.44,227.282 1874.01,227.409 1874.58,226.48 1875.15,226.727 1875.72,228.112 1876.28,227.154 1876.85,229.334 1877.42,226.177 1877.99,226.612 1878.56,225.717 1879.13,226.007 1879.69,227.258 1880.26,225.333 1880.83,224.557 1881.4,227.043 1881.97,227.34 1882.54,228.73 1883.1,229.791 1883.67,232.92 1884.24,230.627 1884.81,229.472 1885.38,231.575 1885.95,229.345 1886.51,232.175 1887.08,229.089 1887.65,230.141 1888.22,233.181 1888.79,231.8 1889.36,227.61 1889.92,227.802 1890.49,227.005 1891.06,225.211 1891.63,226.705 1892.2,225.091 1892.77,225.508 1893.33,225.792 1893.9,226.066 1894.47,226.36 1895.04,227.547 1895.61,227.683 1896.18,228.868 1896.74,227.776 1897.31,227.034 1897.88,227.266 1898.45,226.632 1899.02,225.802 1899.59,227.18 1900.16,226.338 1900.72,227.714 1901.29,229.063 1901.86,228.243 1902.43,227.28 1903,227.496 1903.57,229.645 1904.13,229.72 1904.7,228.714 1905.27,227.87 1905.84,227.717 1906.41,227.672 1906.98,227.757 1907.54,228.022 1908.11,229.111 1908.68,232.348 1909.25,233.14 1909.82,234.144 1910.39,231.833 1910.95,232.757 1911.52,230.545 1912.09,229.367 1912.66,227.308 1913.23,228.563 1913.8,228.683 1914.36,227.85 1914.93,228.127 1915.5,226.175 1916.07,226.276 1916.64,224.371 1917.21,225.838 1917.77,227.269 1918.34,228.436 1918.91,227.671 1919.48,227.757 1920.05,227.897 1920.62,228.106 1921.18,230.14 1921.75,229.031 1922.32,228.144 1922.89,227.281 1923.46,226.407 1924.03,228.474 1924.59,227.547 1925.16,229.82 1925.73,230.654 1926.3,231.574 1926.87,231.562 1927.44,232.444 1928,230.9 1928.57,230.606 1929.14,230.56 1929.71,229.275 1930.28,230.283 1930.85,230.289 1931.41,230.115 1931.98,230.017 1932.55,230.011 1933.12,228.96 1933.69,226.76 1934.26,226.866 1934.82,228.144 1935.39,229.234 1935.96,229.492 1936.53,228.345 1937.1,228.408 1937.67,228.399 1938.23,228.43 1938.8,226.566 1939.37,227.751 1939.94,228.098 1940.51,227.428 1941.08,228.466 1941.64,226.549 1942.21,226.661 1942.78,225.678 1943.35,225.115 1943.92,225.502 1944.49,226.858 1945.05,227.05 1945.62,224.21 1946.19,225.661 1946.76,227.981 1947.33,229.076 1947.9,226.093 1948.46,227.271 1949.03,229.693 1949.6,231.67 1950.17,233.632 1950.74,232.407 1951.31,234.172 1951.87,235.068 1952.44,234.699 1953.01,235.268 1953.58,237.232 1954.15,237.877 1954.72,237.496 1955.28,235.96 1955.85,236.433 1956.42,235.041 1956.99,234.592 1957.56,236.407 1958.13,236.891 1958.69,235.334 1959.26,235.783 1959.83,234.091 1960.4,232.526 1960.97,233.294 1961.54,230.925 1962.1,232.763 1962.67,232.448 1963.24,233.244 1963.81,231.699 1964.38,233.516 1964.95,230.952 1965.51,229.704 1966.08,230.444 1966.65,230.431 1967.22,228.152 1967.79,229.088 1968.36,227.892 1968.92,227.835 1969.49,227.758 1970.06,227.498 1970.63,225.357 1971.2,226.271 1971.77,226.203 1972.34,228.534 1972.9,226.411 1973.47,226.68 1974.04,223.702 1974.61,222.991 1975.18,222.269 1975.75,224.679 1976.31,226.093 1976.88,224.016 1977.45,225.399 1978.02,225.737 1978.59,225.784 1979.16,222.796 1979.72,222.165 1980.29,220.392 1980.86,220.855 1981.43,220.166 1982,219.895 1982.57,223.415 1983.13,221.845 1983.7,224.391 1984.27,223.565 1984.84,223.739 1985.41,223.168 1985.98,223.151 1986.54,225.643 1987.11,225.848 1987.68,223.083 1988.25,221.407 1988.82,222.961 1989.39,222.212 1989.95,225.698 1990.52,226.034 1991.09,226.28 1991.66,227.707 1992.23,228.831 1992.8,228.936 1993.36,227.003 1993.93,226.182 1994.5,225.567 1995.07,224.952 1995.64,229.45 1996.21,229.485 1996.77,229.342 1997.34,228.35 1997.91,228.664 1998.48,227.915 1999.05,227.956 1999.62,230.108 2000.18,229.773 2000.75,230.713 2001.32,231.682 2001.89,231.525 2002.46,231.341 2003.03,233.13 2003.59,233.941 2004.16,233.543 2004.73,234.241 2005.3,236.077 2005.87,234.619 2006.44,234.136 2007,231.647 2007.57,232.686 2008.14,232.411 2008.71,232.073 2009.28,230.771 2009.85,232.731 2010.41,231.424 2010.98,232.275 2011.55,230.036 2012.12,231.092 2012.69,231.846 2013.26,229.733 2013.82,229.656 2014.39,231.682 2014.96,230.279 2015.53,232.122 2016.1,230.774 2016.67,230.595 2017.23,232.549 2017.8,234.113 2018.37,232.675 2018.94,232.328 2019.51,234.215 2020.08,232.752 2020.64,232.633 2021.21,233.319 2021.78,233.633 2022.35,234.197 2022.92,232.558 2023.49,231.982 2024.05,230.633 2024.62,229.597 2025.19,227.226 2025.76,228.229 2026.33,227.163 2026.9,227.101 2027.46,226.028 2028.03,225.131 2028.6,226.137 2029.17,228.036 2029.74,227.098 2030.31,227.235 2030.87,223.195 2031.44,221.526 2032.01,223.975 2032.58,225.339 2033.15,225.323 2033.72,224.231 2034.28,223.376 2034.85,223.943 2035.42,226.257 2035.99,226.2 2036.56,225.11 2037.13,224.38 2037.69,225.941 2038.26,225.081 2038.83,223.171 2039.4,221.428 2039.97,220.805 2040.54,221.327 2041.11,224.031 2041.67,226.659 2042.24,225.707 2042.81,225.922 2043.38,225.943 2043.95,228.287 2044.52,228.388 2045.08,229.417 2045.65,228.27 2046.22,227.313 2046.79,226.717 2047.36,225.889 2047.93,228.12 2048.49,228.15 2049.06,228.106 2049.63,230.33 2050.2,230.161 2050.77,230.41 2051.34,232.527 2051.9,232.007 2052.47,230.649 2053.04,234.758 2053.61,234.321 2054.18,232.782 2054.75,229.582 2055.31,230.257 2055.88,230.988 2056.45,232.753 2057.02,234.314 2057.59,232.85 2058.16,231.504 2058.72,229.353 2059.29,227.218 2059.86,226.422 2060.43,226.27 2061,228.371 2061.57,228.549 2062.13,228.419 2062.7,224.402 2063.27,226.763 2063.84,226.62 2064.41,224.629 2064.98,225.038 2065.54,225.07 2066.11,221.312 2066.68,223.688 2067.25,224.21 2067.82,223.661 2068.39,225.155 2068.95,225.28 2069.52,224.647 2070.09,226.111 2070.66,225.252 2071.23,227.467 2071.8,228.789 2072.36,229.902 2072.93,228.064 2073.5,227.085 2074.07,226.242 2074.64,222.385 2075.21,224.046 2075.77,225.467 2076.34,225.92 2076.91,225.303 2077.48,225.453 2078.05,229.888 2078.62,231.993 2079.18,233.128 2079.75,233.641 2080.32,233.298 2080.89,235.342 2081.46,234.86 2082.03,234.396 2082.59,233.87 2083.16,231.375 2083.73,231.135 2084.3,228.964 2084.87,230.139 2085.44,233.073 2086,231.788 2086.57,230.377 2087.14,230.236 2087.71,228.14 2088.28,228.073 2088.85,229.09 2089.41,228.019 2089.98,228.134 2090.55,228.064 2091.12,228.155 2091.69,229.987 2092.26,230.869 2092.82,229.674 2093.39,228.78 2093.96,230.058 2094.53,229.789 2095.1,229.588 2095.67,229.389 2096.23,230.342 2096.8,228.868 2097.37,227.819 2097.94,230.068 2098.51,228.011 2099.08,231.121 2099.64,228.82 2100.21,229.609 2100.78,229.73 2101.35,229.591 2101.92,228.232 2102.49,229.163 2103.05,229.32 2103.62,230.479 2104.19,230.37 2104.76,232.476 2105.33,233.294 2105.9,233.143 2106.46,230.612 2107.03,231.361 2107.6,233.994 2108.17,235.571 2108.74,235.979 2109.31,235.392 2109.87,234.734 2110.44,234.202 2111.01,229.502 2111.58,227.331 2112.15,228.516 2112.72,224.17 2113.29,226.117 2113.85,225.383 2114.42,226.705 2114.99,226.652 2115.56,226.723 2116.13,227.84 2116.7,227.756 2117.26,228.835 2117.83,229.995 2118.4,229.852 2118.97,231.659 2119.54,231.444 2120.11,231.238 2120.67,229.886 2121.24,229.85 2121.81,229.636 2122.38,230.43 2122.95,228.137 2123.52,229.089 2124.08,227.993 2124.65,226.993 2125.22,228.313 2125.79,227.236 2126.36,228.326 2126.93,228.469 2127.49,228.28 2128.06,229.004 2128.63,227.955 2129.2,225.96 2129.77,224.987 2130.34,225.262 2130.9,223.489 2131.47,224.729 2132.04,224.618 2132.61,223.828 2133.18,224.991 2133.75,226.109 2134.31,226.214 2134.88,226.383 2135.45,226.337 2136.02,227.605 2136.59,227.663 2137.16,226.711 2137.72,227.824 2138.29,229.782 2138.86,227.604 2139.43,229.571 2140,229.594 2140.57,230.495 2141.13,232.087 2141.7,232.984 2142.27,231.836 2142.84,230.377 2143.41,231.124 2143.98,230.914 2144.54,230.997 2145.11,231.821 2145.68,232.442 2146.25,235.05 2146.82,232.387 2147.39,230.971 2147.95,230.68 2148.52,230.194 2149.09,231.945 2149.66,231.639 2150.23,231.118 2150.8,231.02 2151.36,228.778 2151.93,228.626 2152.5,229.663 2153.07,230.343 2153.64,230.237 2154.21,231.002 2154.77,230.698 2155.34,232.419 2155.91,232.075 2156.48,232.628 2157.05,231.998 2157.62,230.651 2158.18,227.22 2158.75,230.422 2159.32,227.913 2159.89,227.591 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip790)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.011 ± 0.024\n  with uncertainty of ± 0.0021775240978759557\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01302 ± (0.00363692, 0.00385387) (MC)\n  95% confidence interval: [-4.02023, -4.00603] (MC)\n  linear error propagation: -4.01328 ± 0.00384072\n  |δ_y| = |0.00201946| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.0130237123678185, val_l = 0.007202953774751997, val_u = 0.00699711145637405)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip820\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip820)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip821\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip820)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip822\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1146.75 2211.02,1146.75 \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,997.024 2211.02,997.024 \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,847.297 2211.02,847.297 \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,697.571 2211.02,697.571 \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,547.845 2211.02,547.845 \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,398.118 2211.02,398.118 \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,248.392 2211.02,248.392 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip820)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1146.75 365.751,1146.75 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,997.024 365.751,997.024 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,847.297 365.751,847.297 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,697.571 365.751,697.571 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,547.845 365.751,547.845 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,398.118 365.751,398.118 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,248.392 365.751,248.392 \"/>\n<path clip-path=\"url(#clip820)\" d=\"M298.909 1132.55 Q295.298 1132.55 293.469 1136.11 Q291.664 1139.65 291.664 1146.78 Q291.664 1153.89 293.469 1157.46 Q295.298 1161 298.909 1161 Q302.543 1161 304.349 1157.46 Q306.177 1153.89 306.177 1146.78 Q306.177 1139.65 304.349 1136.11 Q302.543 1132.55 298.909 1132.55 M298.909 1128.84 Q304.719 1128.84 307.775 1133.45 Q310.853 1138.03 310.853 1146.78 Q310.853 1155.51 307.775 1160.12 Q304.719 1164.7 298.909 1164.7 Q293.099 1164.7 290.02 1160.12 Q286.964 1155.51 286.964 1146.78 Q286.964 1138.03 290.02 1133.45 Q293.099 1128.84 298.909 1128.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M259.557 1010.37 L267.196 1010.37 L267.196 984.003 L258.886 985.669 L258.886 981.41 L267.15 979.744 L271.826 979.744 L271.826 1010.37 L279.465 1010.37 L279.465 1014.3 L259.557 1014.3 L259.557 1010.37 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M298.909 982.822 Q295.298 982.822 293.469 986.387 Q291.664 989.929 291.664 997.058 Q291.664 1004.16 293.469 1007.73 Q295.298 1011.27 298.909 1011.27 Q302.543 1011.27 304.349 1007.73 Q306.177 1004.16 306.177 997.058 Q306.177 989.929 304.349 986.387 Q302.543 982.822 298.909 982.822 M298.909 979.119 Q304.719 979.119 307.775 983.725 Q310.853 988.308 310.853 997.058 Q310.853 1005.79 307.775 1010.39 Q304.719 1014.97 298.909 1014.97 Q293.099 1014.97 290.02 1010.39 Q286.964 1005.79 286.964 997.058 Q286.964 988.308 290.02 983.725 Q293.099 979.119 298.909 979.119 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M262.775 860.642 L279.094 860.642 L279.094 864.577 L257.15 864.577 L257.15 860.642 Q259.812 857.887 264.395 853.258 Q269.002 848.605 270.182 847.263 Q272.428 844.739 273.307 843.003 Q274.21 841.244 274.21 839.554 Q274.21 836.8 272.266 835.064 Q270.344 833.327 267.242 833.327 Q265.043 833.327 262.59 834.091 Q260.159 834.855 257.381 836.406 L257.381 831.684 Q260.205 830.55 262.659 829.971 Q265.113 829.392 267.15 829.392 Q272.52 829.392 275.715 832.077 Q278.909 834.763 278.909 839.253 Q278.909 841.383 278.099 843.304 Q277.312 845.202 275.205 847.795 Q274.627 848.466 271.525 851.684 Q268.423 854.878 262.775 860.642 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M298.909 833.096 Q295.298 833.096 293.469 836.661 Q291.664 840.202 291.664 847.332 Q291.664 854.438 293.469 858.003 Q295.298 861.545 298.909 861.545 Q302.543 861.545 304.349 858.003 Q306.177 854.438 306.177 847.332 Q306.177 840.202 304.349 836.661 Q302.543 833.096 298.909 833.096 M298.909 829.392 Q304.719 829.392 307.775 833.999 Q310.853 838.582 310.853 847.332 Q310.853 856.059 307.775 860.665 Q304.719 865.249 298.909 865.249 Q293.099 865.249 290.02 860.665 Q286.964 856.059 286.964 847.332 Q286.964 838.582 290.02 833.999 Q293.099 829.392 298.909 829.392 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M272.914 696.217 Q276.27 696.934 278.145 699.203 Q280.043 701.471 280.043 704.805 Q280.043 709.92 276.525 712.721 Q273.006 715.522 266.525 715.522 Q264.349 715.522 262.034 715.082 Q259.742 714.666 257.289 713.809 L257.289 709.295 Q259.233 710.43 261.548 711.008 Q263.863 711.587 266.386 711.587 Q270.784 711.587 273.076 709.851 Q275.39 708.115 275.39 704.805 Q275.39 701.749 273.238 700.036 Q271.108 698.3 267.289 698.3 L263.261 698.3 L263.261 694.458 L267.474 694.458 Q270.923 694.458 272.752 693.092 Q274.58 691.703 274.58 689.11 Q274.58 686.448 272.682 685.036 Q270.807 683.601 267.289 683.601 Q265.367 683.601 263.168 684.018 Q260.969 684.434 258.33 685.314 L258.33 681.147 Q260.992 680.407 263.307 680.036 Q265.645 679.666 267.705 679.666 Q273.029 679.666 276.131 682.097 Q279.233 684.504 279.233 688.624 Q279.233 691.495 277.59 693.485 Q275.946 695.453 272.914 696.217 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M298.909 683.37 Q295.298 683.37 293.469 686.934 Q291.664 690.476 291.664 697.606 Q291.664 704.712 293.469 708.277 Q295.298 711.819 298.909 711.819 Q302.543 711.819 304.349 708.277 Q306.177 704.712 306.177 697.606 Q306.177 690.476 304.349 686.934 Q302.543 683.37 298.909 683.37 M298.909 679.666 Q304.719 679.666 307.775 684.272 Q310.853 688.856 310.853 697.606 Q310.853 706.332 307.775 710.939 Q304.719 715.522 298.909 715.522 Q293.099 715.522 290.02 710.939 Q286.964 706.332 286.964 697.606 Q286.964 688.856 290.02 684.272 Q293.099 679.666 298.909 679.666 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M271.594 534.639 L259.789 553.088 L271.594 553.088 L271.594 534.639 M270.367 530.565 L276.247 530.565 L276.247 553.088 L281.177 553.088 L281.177 556.977 L276.247 556.977 L276.247 565.125 L271.594 565.125 L271.594 556.977 L255.992 556.977 L255.992 552.463 L270.367 530.565 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M298.909 533.643 Q295.298 533.643 293.469 537.208 Q291.664 540.75 291.664 547.879 Q291.664 554.986 293.469 558.551 Q295.298 562.092 298.909 562.092 Q302.543 562.092 304.349 558.551 Q306.177 554.986 306.177 547.879 Q306.177 540.75 304.349 537.208 Q302.543 533.643 298.909 533.643 M298.909 529.94 Q304.719 529.94 307.775 534.546 Q310.853 539.129 310.853 547.879 Q310.853 556.606 307.775 561.213 Q304.719 565.796 298.909 565.796 Q293.099 565.796 290.02 561.213 Q286.964 556.606 286.964 547.879 Q286.964 539.129 290.02 534.546 Q293.099 529.94 298.909 529.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M258.793 380.838 L277.15 380.838 L277.15 384.774 L263.076 384.774 L263.076 393.246 Q264.094 392.899 265.113 392.736 Q266.131 392.551 267.15 392.551 Q272.937 392.551 276.316 395.723 Q279.696 398.894 279.696 404.31 Q279.696 409.889 276.224 412.991 Q272.752 416.07 266.432 416.07 Q264.256 416.07 261.988 415.699 Q259.742 415.329 257.335 414.588 L257.335 409.889 Q259.418 411.023 261.641 411.579 Q263.863 412.135 266.34 412.135 Q270.344 412.135 272.682 410.028 Q275.02 407.922 275.02 404.31 Q275.02 400.699 272.682 398.593 Q270.344 396.486 266.34 396.486 Q264.465 396.486 262.59 396.903 Q260.738 397.32 258.793 398.199 L258.793 380.838 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M298.909 383.917 Q295.298 383.917 293.469 387.482 Q291.664 391.024 291.664 398.153 Q291.664 405.26 293.469 408.824 Q295.298 412.366 298.909 412.366 Q302.543 412.366 304.349 408.824 Q306.177 405.26 306.177 398.153 Q306.177 391.024 304.349 387.482 Q302.543 383.917 298.909 383.917 M298.909 380.213 Q304.719 380.213 307.775 384.82 Q310.853 389.403 310.853 398.153 Q310.853 406.88 307.775 411.486 Q304.719 416.07 298.909 416.07 Q293.099 416.07 290.02 411.486 Q286.964 406.88 286.964 398.153 Q286.964 389.403 290.02 384.82 Q293.099 380.213 298.909 380.213 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M269.326 246.529 Q266.178 246.529 264.326 248.681 Q262.497 250.834 262.497 254.584 Q262.497 258.311 264.326 260.487 Q266.178 262.64 269.326 262.64 Q272.474 262.64 274.303 260.487 Q276.154 258.311 276.154 254.584 Q276.154 250.834 274.303 248.681 Q272.474 246.529 269.326 246.529 M278.608 231.876 L278.608 236.135 Q276.849 235.302 275.043 234.862 Q273.261 234.422 271.502 234.422 Q266.872 234.422 264.418 237.547 Q261.988 240.672 261.641 246.992 Q263.006 244.978 265.066 243.913 Q267.127 242.825 269.603 242.825 Q274.812 242.825 277.821 245.996 Q280.853 249.144 280.853 254.584 Q280.853 259.908 277.705 263.126 Q274.557 266.343 269.326 266.343 Q263.33 266.343 260.159 261.76 Q256.988 257.154 256.988 248.427 Q256.988 240.232 260.877 235.371 Q264.766 230.487 271.316 230.487 Q273.076 230.487 274.858 230.834 Q276.664 231.182 278.608 231.876 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M298.909 234.191 Q295.298 234.191 293.469 237.756 Q291.664 241.297 291.664 248.427 Q291.664 255.533 293.469 259.098 Q295.298 262.64 298.909 262.64 Q302.543 262.64 304.349 259.098 Q306.177 255.533 306.177 248.427 Q306.177 241.297 304.349 237.756 Q302.543 234.191 298.909 234.191 M298.909 230.487 Q304.719 230.487 307.775 235.094 Q310.853 239.677 310.853 248.427 Q310.853 257.154 307.775 261.76 Q304.719 266.343 298.909 266.343 Q293.099 266.343 290.02 261.76 Q286.964 257.154 286.964 248.427 Q286.964 239.677 290.02 235.094 Q293.099 230.487 298.909 230.487 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip822)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1036.43 400.199,935.074 400.786,842.08 401.372,756.881 401.958,678.959 402.545,607.835 403.131,543.063 403.718,484.229 404.304,430.948 404.891,382.86 405.477,339.631 406.063,300.945 406.65,266.509 407.236,309.598 407.823,279.755 408.409,253.532 408.995,289.396 409.582,267.431 410.168,249.476 410.755,233.357 411.341,219.895 411.927,291.025 412.514,280.295 413.1,271.248 413.687,265.085 414.273,260.021 414.86,256.761 415.446,255.172 416.032,256.154 416.619,257.489 417.205,260.776 417.792,286.058 418.378,291.504 418.964,316.314 419.551,340.749 420.137,349.011 420.724,357.751 421.31,381.883 421.896,392.033 422.483,402.949 423.069,414.247 423.656,425.558 424.242,437.375 424.829,449.125 425.415,461.917 426.001,501.723 426.588,514.655 427.174,527.873 427.761,541.282 428.347,569.397 428.933,603.03 429.52,614.913 430.106,653.081 430.693,663.804 431.279,691.763 431.865,712.595 432.452,728.093 433.038,742.851 433.625,752.342 434.211,761.75 434.798,771.376 435.384,780.954 435.97,794.732 436.557,808.337 437.143,825.039 437.73,844.597 438.316,852.618 438.902,860.579 439.489,875.368 440.075,889.369 440.662,899.458 441.248,918.971 441.835,925.071 442.421,939.904 443.007,948.476 443.594,968.065 444.18,975.925 444.767,986.324 445.353,993.742 445.939,1003.37 446.526,1010.2 447.112,1017 447.699,1025.71 448.285,1029.64 448.871,1035.99 449.458,1044.32 450.044,1048.31 450.631,1056.4 451.217,1066.29 451.804,1069.79 452.39,1077.13 452.976,1082 453.563,1084.84 454.149,1087.79 454.736,1088.68 455.322,1091.71 455.908,1102.37 456.495,1108.72 457.081,1113.25 457.668,1117.57 458.254,1121.68 458.84,1125.85 459.427,1129.74 460.013,1132.1 460.6,1134 461.186,1137.9 461.773,1143.16 462.359,1150.25 462.945,1156.96 463.532,1158.28 464.118,1161.23 464.705,1164.41 465.291,1165.77 465.877,1168.85 466.464,1171.91 467.05,1174.52 467.637,1177.13 468.223,1179.85 468.809,1187.12 469.396,1187.57 469.982,1191.4 470.569,1194.8 471.155,1195.12 471.742,1194 472.328,1197.46 472.914,1197.66 473.501,1201.14 474.087,1200.13 474.674,1199.08 475.26,1201.14 475.846,1206.07 476.433,1204.8 477.019,1206.63 477.606,1212.9 478.192,1214.43 478.778,1215.63 479.365,1218.44 479.951,1216.99 480.538,1218.2 481.124,1219.66 481.711,1222.21 482.297,1224.69 482.883,1225.6 483.47,1226.41 484.056,1225.8 484.643,1229.39 485.229,1230.34 485.815,1227 486.402,1227.89 486.988,1228.8 487.575,1228.4 488.161,1230.64 488.748,1230.2 489.334,1232.34 489.92,1231.88 490.507,1235.32 491.093,1234.51 491.68,1235.35 492.266,1233.07 492.852,1235.12 493.439,1237.09 494.025,1236.17 494.612,1237.11 495.198,1237.52 495.784,1238.12 496.371,1238.49 496.957,1241.63 497.544,1243.48 498.13,1243.79 498.717,1247.06 499.303,1245.83 499.889,1245.88 500.476,1244.89 501.062,1245.33 501.649,1245.96 502.235,1246.4 502.821,1245.5 503.408,1247.17 503.994,1248.63 504.581,1250.28 505.167,1250.29 505.753,1250.36 506.34,1250.38 506.926,1250.53 507.513,1246.81 508.099,1246.97 508.686,1248.53 509.272,1249.77 509.858,1249.98 510.445,1249.76 511.031,1249.73 511.618,1244.92 512.204,1242.78 512.79,1241.81 513.377,1242.49 513.963,1244.17 514.55,1243.19 515.136,1242.53 515.722,1242.98 516.309,1240.87 516.895,1243.82 517.482,1242.74 518.068,1240.72 518.655,1240.31 519.241,1239.97 519.827,1240.51 520.414,1241.14 521,1241.53 521.587,1242.11 522.173,1241.25 522.759,1240.39 523.346,1238.4 523.932,1235.27 524.519,1234.7 525.105,1233.22 525.691,1232.83 526.278,1233.8 526.864,1233.61 527.451,1236.12 528.037,1234.38 528.624,1236.48 529.21,1237.26 529.796,1238.28 530.383,1237.77 530.969,1239.8 531.556,1239.55 532.142,1238.7 532.728,1237.99 533.315,1235.05 533.901,1233.11 534.488,1233.95 535.074,1236.13 535.661,1233.43 536.247,1234.36 536.833,1236.49 537.42,1238.37 538.006,1240.15 538.593,1238.39 539.179,1237.53 539.765,1238.25 540.352,1238.73 540.938,1239.44 541.525,1238.59 542.111,1237.93 542.697,1238.35 543.284,1237.69 543.87,1239.59 544.457,1237.52 545.043,1239.21 545.63,1237.22 546.216,1240.41 546.802,1239.47 547.389,1238.51 547.975,1236.42 548.562,1235.93 549.148,1233.97 549.734,1230.95 550.321,1230.63 550.907,1232.81 551.494,1233.64 552.08,1232.99 552.666,1232.34 553.253,1231.87 553.839,1231.3 554.426,1229.55 555.012,1229.19 555.599,1226.48 556.185,1226.23 556.771,1226.06 557.358,1224.58 557.944,1224.18 558.531,1225.55 559.117,1226.7 559.703,1226.64 560.29,1226.36 560.876,1227.31 561.463,1230.8 562.049,1229.27 562.635,1231.39 563.222,1233.18 563.808,1230.38 564.395,1228.68 564.981,1228.31 565.568,1229.3 566.154,1228.74 566.74,1230.83 567.327,1230.22 567.913,1229.71 568.5,1228.37 569.086,1226.88 569.672,1223.95 570.259,1226.25 570.845,1224.65 571.432,1225.7 572.018,1224.31 572.605,1225.37 573.191,1225.46 573.777,1224.2 574.364,1222.76 574.95,1227.7 575.537,1225.06 576.123,1224.87 576.709,1227.27 577.296,1225.38 577.882,1225.12 578.469,1224.85 579.055,1226.07 579.641,1224.82 580.228,1223.53 580.814,1223.19 581.401,1222.02 581.987,1222.1 582.574,1221.95 583.16,1220.68 583.746,1221.93 584.333,1222.98 584.919,1225.46 585.506,1226.34 586.092,1225.08 586.678,1224.96 587.265,1220.95 587.851,1220.44 588.438,1217.99 589.024,1218.17 589.61,1219.49 590.197,1220.36 590.783,1221.72 591.37,1217.81 591.956,1220.56 592.543,1221.54 593.129,1222.77 593.715,1222.67 594.302,1223.84 594.888,1227.24 595.475,1226.68 596.061,1226.53 596.647,1224.75 597.234,1224.61 597.82,1221.76 598.407,1222.99 598.993,1223.88 599.579,1222.47 600.166,1223.47 600.752,1224.52 601.339,1225.71 601.925,1227.73 602.512,1226.07 603.098,1226.02 603.684,1226.71 604.271,1229.99 604.857,1229.26 605.444,1226.33 606.03,1227.87 606.616,1226.04 607.203,1224.14 607.789,1223.61 608.376,1225.58 608.962,1226.38 609.548,1227.26 610.135,1228.05 610.721,1225.11 611.308,1223.4 611.894,1221.9 612.481,1222.92 613.067,1222.61 613.653,1219.79 614.24,1219.76 614.826,1217.26 615.413,1220.99 615.999,1215.88 616.585,1214.83 617.172,1213.58 617.758,1214.94 618.345,1216.36 618.931,1217.46 619.518,1218.96 620.104,1218.7 620.69,1220.82 621.277,1221.71 621.863,1222.75 622.45,1221.26 623.036,1220.03 623.622,1220.91 624.209,1222.29 624.795,1224.41 625.382,1225.23 625.968,1227.46 626.554,1225.73 627.141,1222.75 627.727,1224.83 628.314,1224.39 628.9,1222.77 629.487,1221 630.073,1221.96 630.659,1222.95 631.246,1221.48 631.832,1222.35 632.419,1223.21 633.005,1224.11 633.591,1222.5 634.178,1221.06 634.764,1220.86 635.351,1219.13 635.937,1218.06 636.523,1216.54 637.11,1213.94 637.696,1216.61 638.283,1217.8 638.869,1220.06 639.456,1219.85 640.042,1218.42 640.628,1217.03 641.215,1215.91 641.801,1217.1 642.388,1215.84 642.974,1215.63 643.56,1216.73 644.147,1217.98 644.733,1217.75 645.32,1220.15 645.906,1218.77 646.492,1218.55 647.079,1220.85 647.665,1221.79 648.252,1222.84 648.838,1223.72 649.425,1223.27 650.011,1220.39 650.597,1221.39 651.184,1220.86 651.77,1221.7 652.357,1220.23 652.943,1222.3 653.529,1222.93 654.116,1221.24 654.702,1222.13 655.289,1223.17 655.875,1224.15 656.462,1221.36 657.048,1222.27 657.634,1221.82 658.221,1221.47 658.807,1223.45 659.394,1223.08 659.98,1225.16 660.566,1223.55 661.153,1224.48 661.739,1220.32 662.326,1219.89 662.912,1219.61 663.498,1220.52 664.085,1220.25 664.671,1219.97 665.258,1219.81 665.844,1218.4 666.431,1218.4 667.017,1218.13 667.603,1216.43 668.19,1217.47 668.776,1217.2 669.363,1212.28 669.949,1209.73 670.535,1211.17 671.122,1211.17 671.708,1212.54 672.295,1216.1 672.881,1213.4 673.467,1213.4 674.054,1210.88 674.64,1210.9 675.227,1210.77 675.813,1212.26 676.4,1212.25 676.986,1210.92 677.572,1211.01 678.159,1209.85 678.745,1210.04 679.332,1211.35 679.918,1212.65 680.504,1212.61 681.091,1212.72 681.677,1213.88 682.264,1213.81 682.85,1213.94 683.436,1215.09 684.023,1211.44 684.609,1212.51 685.196,1212.75 685.782,1213.98 686.369,1214.02 686.955,1214.01 687.541,1212.58 688.128,1213.89 688.714,1213.73 689.301,1214.9 689.887,1216.13 690.473,1217.14 691.06,1218.28 691.646,1217.07 692.233,1216.03 692.819,1215.89 693.405,1215.93 693.992,1212.07 694.578,1212.09 695.165,1211.91 695.751,1213.26 696.338,1215.47 696.924,1215.61 697.51,1216.59 698.097,1218.72 698.683,1219.76 699.27,1219.3 699.856,1218.62 700.442,1218.43 701.029,1216.72 701.615,1215.19 702.202,1215.25 702.788,1214 703.375,1214.06 703.961,1213.98 704.547,1215.23 705.134,1215.01 705.72,1216.13 706.307,1217.03 706.893,1220.49 707.479,1221.1 708.066,1219.46 708.652,1218.92 709.239,1219.96 709.825,1220.92 710.411,1220.27 710.998,1219.95 711.584,1223.11 712.171,1222.28 712.757,1219.39 713.344,1220.11 713.93,1220.08 714.516,1218.45 715.103,1217.88 715.689,1217.68 716.276,1216.04 716.862,1215.68 717.448,1215.45 718.035,1216.5 718.621,1215.36 719.208,1216.33 719.794,1217.06 720.38,1216.8 720.967,1216.5 721.553,1216.06 722.14,1215.72 722.726,1215.45 723.313,1210.57 723.899,1209.41 724.485,1209.62 725.072,1209.78 725.658,1207.54 726.245,1205.15 726.831,1205.39 727.417,1205.73 728.004,1203.54 728.59,1205.38 729.177,1206.99 729.763,1206.99 730.349,1208.23 730.936,1209.5 731.522,1209.32 732.109,1208.12 732.695,1206.97 733.282,1207.05 733.868,1203.6 734.454,1203.96 735.041,1205.32 735.627,1205.71 736.214,1206.03 736.8,1206.16 737.386,1205.22 737.973,1206.73 738.559,1209.66 739.146,1211.88 739.732,1211.71 740.318,1215.56 740.905,1215.05 741.491,1218.5 742.078,1219.61 742.664,1220.62 743.251,1220.12 743.837,1219.67 744.423,1217.97 745.01,1216.32 745.596,1217.09 746.183,1213 746.769,1214.03 747.355,1212.73 747.942,1213.94 748.528,1217.31 749.115,1219.41 749.701,1218.92 750.288,1217.44 750.874,1217.05 751.46,1218.11 752.047,1216.59 752.633,1216.27 753.22,1217.37 753.806,1214.32 754.392,1215.34 754.979,1212.56 755.565,1214.88 756.152,1213.32 756.738,1213.24 757.324,1214.63 757.911,1213.16 758.497,1211.58 759.084,1209.33 759.67,1207.84 760.257,1209.17 760.843,1208.07 761.429,1212.73 762.016,1212.46 762.602,1212.4 763.189,1211.16 763.775,1209.96 764.361,1212.4 764.948,1213.48 765.534,1211.99 766.121,1211.71 766.707,1211.59 767.293,1212.87 767.88,1213.78 768.466,1212.53 769.053,1213.65 769.639,1213.55 770.226,1213.39 770.812,1213.24 771.398,1213.02 771.985,1211.6 772.571,1212.74 773.158,1210.09 773.744,1211.17 774.33,1206.09 774.917,1208.46 775.503,1208.48 776.09,1208.43 776.676,1210.08 777.262,1211.13 777.849,1209.89 778.435,1207.56 779.022,1207.69 779.608,1207.89 780.195,1209.44 780.781,1209.79 781.367,1209.66 781.954,1210.98 782.54,1213.42 783.127,1213.32 783.713,1214.43 784.299,1215.41 784.886,1214.24 785.472,1212.86 786.059,1213.87 786.645,1216.07 787.232,1215.71 787.818,1213.02 788.404,1215.56 788.991,1217.43 789.577,1214.91 790.164,1214.4 790.75,1215.49 791.336,1215.26 791.923,1214.95 792.509,1217.3 793.096,1213.22 793.682,1214.33 794.268,1211.53 794.855,1211.36 795.441,1210.01 796.028,1209.93 796.614,1210.05 797.201,1209.02 797.787,1209.2 798.373,1205.52 798.96,1205.63 799.546,1205.73 800.133,1205.94 800.719,1205.79 801.305,1206.12 801.892,1205.15 802.478,1205.46 803.065,1204.48 803.651,1208.41 804.237,1209.74 804.824,1211.09 805.41,1212.25 805.997,1213.24 806.583,1210.83 807.17,1210.72 807.756,1209.42 808.342,1208.2 808.929,1208.05 809.515,1208.11 810.102,1209.43 810.688,1209.5 811.274,1208.6 811.861,1206.18 812.447,1207.48 813.034,1209.83 813.62,1210.98 814.206,1210.84 814.793,1214.27 815.379,1214.09 815.966,1214.97 816.552,1215.71 817.139,1215.2 817.725,1213.58 818.311,1213.26 818.898,1213.17 819.484,1211.64 820.071,1211.36 820.657,1206.2 821.243,1206.3 821.83,1206.62 822.416,1210.57 823.003,1210.49 823.589,1208 824.175,1208.02 824.762,1209.34 825.348,1207.73 825.935,1206.88 826.521,1203.32 827.108,1204.8 827.694,1203.79 828.28,1206.5 828.867,1210.28 829.453,1212.56 830.04,1212.31 830.626,1212.42 831.212,1212.18 831.799,1211.95 832.385,1211.92 832.972,1211.7 833.558,1212.92 834.145,1212.68 834.731,1212.54 835.317,1213.49 835.904,1213.32 836.49,1216.57 837.077,1215.97 837.663,1214.41 838.249,1214.15 838.836,1215.08 839.422,1211 840.009,1210.74 840.595,1210.95 841.181,1210.8 841.768,1211.8 842.354,1210.44 842.941,1208.16 843.527,1209.2 844.114,1209.26 844.7,1207.96 845.286,1211.69 845.873,1214.04 846.459,1215 847.046,1212.26 847.632,1211.95 848.218,1211.71 848.805,1212.85 849.391,1214.1 849.978,1211.45 850.564,1209.91 851.15,1209.57 851.737,1206.81 852.323,1205.83 852.91,1205.23 853.496,1204.49 854.083,1206.23 854.669,1205.26 855.255,1206.39 855.842,1208.63 856.428,1208.48 857.015,1207.35 857.601,1208.76 858.187,1208.84 858.774,1207.42 859.36,1208.54 859.947,1208.33 860.533,1208.49 861.119,1210.66 861.706,1207.89 862.292,1206.55 862.879,1207.74 863.465,1211.48 864.052,1212.53 864.638,1214.76 865.224,1215.8 865.811,1213.04 866.397,1212.81 866.984,1215.02 867.57,1215.81 868.156,1214.15 868.743,1215.04 869.329,1213.35 869.916,1210.94 870.502,1212.11 871.089,1211.75 871.675,1213.84 872.261,1216.19 872.848,1215.77 873.434,1213.1 874.021,1212.96 874.607,1213.96 875.193,1213.82 875.78,1213.46 876.366,1214.61 876.953,1213.01 877.539,1211.37 878.125,1208.54 878.712,1208.4 879.298,1209.46 879.885,1206.73 880.471,1209.04 881.058,1206.65 881.644,1204.4 882.23,1200.84 882.817,1202.44 883.403,1202.83 883.99,1201.97 884.576,1202.22 885.162,1205.13 885.749,1209.13 886.335,1207.79 886.922,1211.5 887.508,1213.68 888.094,1213.56 888.681,1213.24 889.267,1213.2 889.854,1213.11 890.44,1210.71 891.027,1210.8 891.613,1211.98 892.199,1211.85 892.786,1212.79 893.372,1209.09 893.959,1209.11 894.545,1210.26 895.131,1210.41 895.718,1210.28 896.304,1213.64 896.891,1214.43 897.477,1212.71 898.063,1208.93 898.65,1210.14 899.236,1208.93 899.823,1207.66 900.409,1208.75 900.996,1208.73 901.582,1207.71 902.168,1209.22 902.755,1206.58 903.341,1204.14 903.928,1205.76 904.514,1204.76 905.1,1206.09 905.687,1203.89 906.273,1202.86 906.86,1206.93 907.446,1205.6 908.032,1205.83 908.619,1204.92 909.205,1207.57 909.792,1207.56 910.378,1210.19 910.965,1211.41 911.551,1210.07 912.137,1207.58 912.724,1205 913.31,1205.04 913.897,1203.78 914.483,1201.24 915.069,1202.79 915.656,1205.49 916.242,1208.04 916.829,1208.06 917.415,1209.2 918.002,1209.02 918.588,1211.23 919.174,1213.29 919.761,1210.5 920.347,1210.38 920.934,1210.36 921.52,1210.55 922.106,1211.98 922.693,1212.91 923.279,1213.9 923.866,1212.32 924.452,1211.09 925.038,1212.26 925.625,1212.15 926.211,1214.49 926.798,1215.24 927.384,1216.01 927.971,1214.54 928.557,1214.32 929.143,1211.87 929.73,1211.51 930.316,1212.76 930.903,1215.06 931.489,1214.61 932.075,1214.1 932.662,1212.57 933.248,1209.92 933.835,1212.22 934.421,1208.66 935.007,1210.91 935.594,1211.84 936.18,1208.01 936.767,1207.84 937.353,1208.92 937.94,1207.42 938.526,1207.44 939.112,1208.49 939.699,1208.4 940.285,1208.64 940.872,1207.49 941.458,1205.08 942.044,1203.7 942.631,1203.78 943.217,1201.54 943.804,1199.55 944.39,1197.58 944.976,1198.12 945.563,1198.57 946.149,1200.19 946.736,1199.32 947.322,1200.89 947.909,1201.44 948.495,1204.18 949.081,1200.81 949.668,1202.14 950.254,1201.23 950.841,1201.42 951.427,1204.36 952.013,1205.77 952.6,1207.11 953.186,1206.81 953.773,1205.62 954.359,1209.31 954.945,1211.39 955.532,1211.26 956.118,1213.56 956.705,1214.49 957.291,1215.27 957.878,1215.12 958.464,1215.93 959.05,1216.48 959.637,1213.63 960.223,1212.06 960.81,1210.59 961.396,1210.48 961.982,1211.45 962.569,1213.55 963.155,1214.49 963.742,1212.7 964.328,1212.37 964.915,1208.38 965.501,1208.38 966.087,1207.33 966.674,1208.9 967.26,1207.76 967.847,1207.66 968.433,1206.58 969.019,1209.16 969.606,1209.19 970.192,1209.01 970.779,1208.67 971.365,1210.8 971.951,1210.79 972.538,1210.62 973.124,1210.43 973.711,1209.04 974.297,1210.15 974.884,1211.18 975.47,1208.46 976.056,1211.95 976.643,1214.46 977.229,1214.19 977.816,1211.32 978.402,1210.1 978.988,1211.08 979.575,1210.58 980.161,1210.43 980.748,1212.88 981.334,1213.78 981.92,1212.22 982.507,1211.98 983.093,1210.53 983.68,1208.78 984.266,1207.76 984.853,1207.82 985.439,1206.83 986.025,1206.98 986.612,1208.2 987.198,1213.09 987.785,1212.89 988.371,1211.42 988.957,1209.02 989.544,1210.03 990.13,1209.96 990.717,1211.25 991.303,1212.24 991.889,1211.72 992.476,1211.22 993.062,1213.49 993.649,1210.76 994.235,1209.31 994.822,1210.3 995.408,1206.56 995.994,1206.59 996.581,1205.44 997.167,1204.4 997.754,1205.71 998.34,1205.73 998.926,1204.89 999.513,1208.59 1000.1,1209.7 1000.69,1207.24 1001.27,1204.99 1001.86,1207.62 1002.44,1208.67 1003.03,1208.4 1003.62,1208.15 1004.2,1206.75 1004.79,1205.56 1005.38,1206.68 1005.96,1205.3 1006.55,1205.21 1007.14,1203.98 1007.72,1204.08 1008.31,1204.07 1008.9,1203.02 1009.48,1203.18 1010.07,1201.27 1010.65,1199.27 1011.24,1200.87 1011.83,1202.54 1012.41,1201.35 1013,1198.05 1013.59,1197.16 1014.17,1198.84 1014.76,1199.24 1015.35,1199.57 1015.93,1197.61 1016.52,1196.76 1017.11,1198.34 1017.69,1197.9 1018.28,1198.63 1018.86,1199.2 1019.45,1198.69 1020.04,1200.36 1020.62,1200.65 1021.21,1201.06 1021.8,1199.03 1022.38,1199.35 1022.97,1199.72 1023.56,1203.78 1024.14,1203.98 1024.73,1204.25 1025.32,1203.13 1025.9,1206.01 1026.49,1205.03 1027.07,1203.98 1027.66,1204.23 1028.25,1204.43 1028.83,1203.33 1029.42,1202.18 1030.01,1202.5 1030.59,1203 1031.18,1202.14 1031.77,1198.73 1032.35,1200.46 1032.94,1201.24 1033.52,1199.06 1034.11,1201.89 1034.7,1204.9 1035.28,1206.32 1035.87,1206.63 1036.46,1207.85 1037.04,1206.83 1037.63,1207.03 1038.22,1208.3 1038.8,1208.17 1039.39,1209.52 1039.98,1207.02 1040.56,1204.55 1041.15,1207.26 1041.73,1207.46 1042.32,1207.33 1042.91,1207.28 1043.49,1207.14 1044.08,1207.22 1044.67,1206.15 1045.25,1206.37 1045.84,1207.73 1046.43,1207.65 1047.01,1207.81 1047.6,1209.11 1048.19,1209.12 1048.77,1210.22 1049.36,1209.86 1049.94,1208.54 1050.53,1208.43 1051.12,1209.53 1051.7,1209.55 1052.29,1205.72 1052.88,1200.77 1053.46,1200.03 1054.05,1201.81 1054.64,1202 1055.22,1203.38 1055.81,1202.53 1056.39,1204.12 1056.98,1206.62 1057.57,1206.56 1058.15,1205.25 1058.74,1206.55 1059.33,1206.52 1059.91,1209.04 1060.5,1208.98 1061.09,1210.03 1061.67,1206.4 1062.26,1207.64 1062.85,1205.19 1063.43,1205.16 1064.02,1207.61 1064.6,1206.38 1065.19,1205.18 1065.78,1207.87 1066.36,1208.71 1066.95,1207.53 1067.54,1207.66 1068.12,1208.6 1068.71,1208.41 1069.3,1209.48 1069.88,1210.41 1070.47,1210.34 1071.06,1208.95 1071.64,1207.28 1072.23,1210.92 1072.81,1210.54 1073.4,1211.55 1073.99,1211.25 1074.57,1212.29 1075.16,1208.43 1075.75,1209.35 1076.33,1209.36 1076.92,1208.5 1077.51,1209.58 1078.09,1210.53 1078.68,1210.47 1079.26,1210.51 1079.85,1211.54 1080.44,1210.15 1081.02,1211.24 1081.61,1209.75 1082.2,1211.05 1082.78,1212.1 1083.37,1212.07 1083.96,1209.33 1084.54,1206.92 1085.13,1206.8 1085.72,1204.3 1086.3,1201.98 1086.89,1198.7 1087.47,1197.63 1088.06,1197.09 1088.65,1197.87 1089.23,1198.27 1089.82,1201.59 1090.41,1200.8 1090.99,1202.7 1091.58,1202.77 1092.17,1203.33 1092.75,1203.51 1093.34,1207.24 1093.93,1207.22 1094.51,1207.54 1095.1,1206.28 1095.68,1206.26 1096.27,1208.65 1096.86,1208.76 1097.44,1211.15 1098.03,1210.92 1098.62,1210.77 1099.2,1209.31 1099.79,1209.24 1100.38,1209.2 1100.96,1209.13 1101.55,1211.83 1102.14,1211.68 1102.72,1211.28 1103.31,1212.37 1103.89,1212.36 1104.48,1212.02 1105.07,1212.77 1105.65,1212.54 1106.24,1212.5 1106.83,1213.76 1107.41,1217.03 1108,1217.85 1108.59,1216.08 1109.17,1214.67 1109.76,1214.05 1110.34,1212.59 1110.93,1210.98 1111.52,1210.79 1112.1,1210.55 1112.69,1209.23 1113.28,1210.19 1113.86,1211.26 1114.45,1210.02 1115.04,1208.5 1115.62,1209.61 1116.21,1209.4 1116.8,1206.9 1117.38,1209.18 1117.97,1210.44 1118.55,1210.38 1119.14,1209.04 1119.73,1210.13 1120.31,1207.71 1120.9,1206.34 1121.49,1206.31 1122.07,1207.63 1122.66,1205.22 1123.25,1201.63 1123.83,1200.53 1124.42,1201.9 1125.01,1202.25 1125.59,1201.3 1126.18,1199.17 1126.76,1201.05 1127.35,1201.42 1127.94,1203.04 1128.52,1204.27 1129.11,1204.37 1129.7,1203.32 1130.28,1204.79 1130.87,1206.4 1131.46,1203.94 1132.04,1201.76 1132.63,1201.76 1133.21,1201.91 1133.8,1199.68 1134.39,1200.16 1134.97,1201.79 1135.56,1201.83 1136.15,1200.82 1136.73,1201.22 1137.32,1201.54 1137.91,1203.07 1138.49,1203.14 1139.08,1204.64 1139.67,1203.65 1140.25,1202.64 1140.84,1204.38 1141.42,1204.61 1142.01,1203.61 1142.6,1203.83 1143.18,1202.83 1143.77,1203.09 1144.36,1201.99 1144.94,1200.91 1145.53,1205.03 1146.12,1205.18 1146.7,1206.41 1147.29,1205.38 1147.88,1204.15 1148.46,1203.25 1149.05,1205.02 1149.63,1203.93 1150.22,1204.15 1150.81,1204.2 1151.39,1204.1 1151.98,1205.49 1152.57,1209.09 1153.15,1210.33 1153.74,1208.98 1154.33,1210.09 1154.91,1210.23 1155.5,1209.92 1156.09,1209.7 1156.67,1209.65 1157.26,1208.07 1157.84,1207.89 1158.43,1209.12 1159.02,1210.19 1159.6,1209.92 1160.19,1210.98 1160.78,1212.06 1161.36,1210.42 1161.95,1210.11 1162.54,1208.79 1163.12,1207.54 1163.71,1207.47 1164.29,1207.31 1164.88,1207.23 1165.47,1207.11 1166.05,1206.1 1166.64,1203.68 1167.23,1211.31 1167.81,1212.22 1168.4,1211.75 1168.99,1213.86 1169.57,1213.49 1170.16,1214.38 1170.75,1210.34 1171.33,1209.91 1171.92,1213.51 1172.5,1214.17 1173.09,1215.2 1173.68,1214.59 1174.26,1214.02 1174.85,1217.14 1175.44,1216.61 1176.02,1214.85 1176.61,1215.71 1177.2,1216.68 1177.78,1216.35 1178.37,1213.32 1178.96,1215.32 1179.54,1208.79 1180.13,1208.73 1180.71,1205.85 1181.3,1204.54 1181.89,1204.66 1182.47,1205.8 1183.06,1204.61 1183.65,1205.89 1184.23,1205.96 1184.82,1209.69 1185.41,1208.48 1185.99,1207.3 1186.58,1207.43 1187.16,1208.66 1187.75,1208.66 1188.34,1209.95 1188.92,1210.04 1189.51,1212.08 1190.1,1210.28 1190.68,1209.13 1191.27,1207.84 1191.86,1205.22 1192.44,1206.56 1193.03,1206.55 1193.62,1203.96 1194.2,1204.12 1194.79,1204.17 1195.37,1202.93 1195.96,1204.14 1196.55,1206.68 1197.13,1206.79 1197.72,1209.25 1198.31,1209.05 1198.89,1208.8 1199.48,1207.44 1200.07,1207.45 1200.65,1210.03 1201.24,1209.75 1201.83,1209.55 1202.41,1207.07 1203,1208.2 1203.58,1206.79 1204.17,1206.58 1204.76,1207.85 1205.34,1210.32 1205.93,1209.02 1206.52,1207.53 1207.1,1207.37 1207.69,1207.33 1208.28,1206.97 1208.86,1207.23 1209.45,1206.06 1210.03,1208.4 1210.62,1210.92 1211.21,1211.87 1211.79,1211.62 1212.38,1207.72 1212.97,1210.13 1213.55,1210.89 1214.14,1210.77 1214.73,1209.38 1215.31,1205.38 1215.9,1204.18 1216.49,1200.66 1217.07,1198.53 1217.66,1197.72 1218.24,1198.31 1218.83,1198.48 1219.42,1201.39 1220,1201.45 1220.59,1201.64 1221.18,1204.09 1221.76,1204.1 1222.35,1207.99 1222.94,1207.81 1223.52,1211.28 1224.11,1210.97 1224.7,1210.76 1225.28,1212.98 1225.87,1210.22 1226.45,1213.73 1227.04,1213.34 1227.63,1214.4 1228.21,1210.19 1228.8,1208.44 1229.39,1205.9 1229.97,1205.89 1230.56,1205.95 1231.15,1207.23 1231.73,1204.68 1232.32,1203.53 1232.91,1201.39 1233.49,1199.2 1234.08,1199.66 1234.66,1198.7 1235.25,1200.51 1235.84,1199.71 1236.42,1203.97 1237.01,1207.68 1237.6,1208.53 1238.18,1208.01 1238.77,1204.21 1239.36,1206.66 1239.94,1211.67 1240.53,1211.59 1241.11,1208.96 1241.7,1206.29 1242.29,1206.52 1242.87,1207.79 1243.46,1210.25 1244.05,1210.07 1244.63,1209 1245.22,1210.27 1245.81,1211.49 1246.39,1210.1 1246.98,1209.78 1247.57,1207.2 1248.15,1207.2 1248.74,1207.33 1249.32,1208.48 1249.91,1209.52 1250.5,1207.91 1251.08,1210.27 1251.67,1207.42 1252.26,1206.15 1252.84,1203.74 1253.43,1203.91 1254.02,1204.19 1254.6,1204.33 1255.19,1205.61 1255.78,1208.17 1256.36,1209.29 1256.95,1206.64 1257.53,1206.65 1258.12,1205.68 1258.71,1204.4 1259.29,1203.63 1259.88,1206.39 1260.47,1206.55 1261.05,1206.8 1261.64,1204.44 1262.23,1203.18 1262.81,1203.28 1263.4,1202.31 1263.98,1201.43 1264.57,1201.64 1265.16,1201.97 1265.74,1204.73 1266.33,1207.5 1266.92,1207.35 1267.5,1206.16 1268.09,1205.27 1268.68,1201.79 1269.26,1202.21 1269.85,1200.19 1270.44,1202.87 1271.02,1204.56 1271.61,1205.86 1272.19,1204.88 1272.78,1206.26 1273.37,1207.8 1273.95,1206.71 1274.54,1206.69 1275.13,1206.8 1275.71,1207.03 1276.3,1208.12 1276.89,1208.07 1277.47,1209.35 1278.06,1208.16 1278.65,1205.64 1279.23,1205.62 1279.82,1205.67 1280.4,1203.22 1280.99,1202.06 1281.58,1199.79 1282.16,1202.52 1282.75,1201.61 1283.34,1201.8 1283.92,1202.22 1284.51,1201.22 1285.1,1204.9 1285.68,1203.68 1286.27,1202.7 1286.86,1202.78 1287.44,1204.16 1288.03,1201.94 1288.61,1201.15 1289.2,1201.43 1289.79,1202.86 1290.37,1203.21 1290.96,1203.4 1291.55,1207.18 1292.13,1208.37 1292.72,1208.62 1293.31,1207.42 1293.89,1205 1294.48,1206.44 1295.06,1205.32 1295.65,1206.68 1296.24,1206.77 1296.82,1206.89 1297.41,1207.08 1298,1208.41 1298.58,1210.71 1299.17,1208.17 1299.76,1208.2 1300.34,1208.07 1300.93,1209.16 1301.52,1207.9 1302.1,1208.94 1302.69,1208.85 1303.27,1210.01 1303.86,1209.95 1304.45,1211.16 1305.03,1213.41 1305.62,1210.78 1306.21,1208.21 1306.79,1208.21 1307.38,1209.03 1307.97,1208.94 1308.55,1208.62 1309.14,1208.52 1309.73,1209.36 1310.31,1207.75 1310.9,1207.7 1311.48,1207.56 1312.07,1209 1312.66,1208.81 1313.24,1211.11 1313.83,1209.9 1314.42,1208.38 1315,1210.86 1315.59,1209.47 1316.18,1207.99 1316.76,1207.9 1317.35,1206.82 1317.93,1203.35 1318.52,1204.71 1319.11,1201.25 1319.69,1199.12 1320.28,1201.68 1320.87,1202.05 1321.45,1202.38 1322.04,1202.34 1322.63,1203.82 1323.21,1204.17 1323.8,1204.38 1324.39,1204.46 1324.97,1202.14 1325.56,1203.71 1326.14,1202.67 1326.73,1202.92 1327.32,1203.29 1327.9,1202.34 1328.49,1201.22 1329.08,1201.5 1329.66,1200.29 1330.25,1203.09 1330.84,1204.4 1331.42,1202.21 1332.01,1203.55 1332.6,1203.79 1333.18,1199.05 1333.77,1196.83 1334.35,1197.68 1334.94,1199.59 1335.53,1203.98 1336.11,1206.68 1336.7,1210.28 1337.29,1207.83 1337.87,1207.42 1338.46,1204.85 1339.05,1206.41 1339.63,1207.58 1340.22,1208.78 1340.8,1207.7 1341.39,1208.79 1341.98,1212.59 1342.56,1213.58 1343.15,1213.4 1343.74,1213.01 1344.32,1212.76 1344.91,1212.54 1345.5,1211.24 1346.08,1210.14 1346.67,1210.05 1347.26,1211.25 1347.84,1209.63 1348.43,1208.35 1349.01,1205.83 1349.6,1208.34 1350.19,1210.77 1350.77,1209.5 1351.36,1207.14 1351.95,1205.76 1352.53,1204.76 1353.12,1203.85 1353.71,1203.94 1354.29,1207.79 1354.88,1210.19 1355.47,1211.05 1356.05,1209.66 1356.64,1209.9 1357.22,1208.67 1357.81,1212.24 1358.4,1212.14 1358.98,1211.93 1359.57,1211.63 1360.16,1212.58 1360.74,1212.17 1361.33,1208.51 1361.92,1208.25 1362.5,1208.46 1363.09,1205.88 1363.68,1204.93 1364.26,1205.07 1364.85,1204.07 1365.43,1203.11 1366.02,1202.08 1366.61,1202.36 1367.19,1205.13 1367.78,1206.33 1368.37,1205.29 1368.95,1205.23 1369.54,1203.94 1370.13,1207.77 1370.71,1207.72 1371.3,1208.91 1371.88,1207.31 1372.47,1204.51 1373.06,1204.78 1373.64,1206.24 1374.23,1207.69 1374.82,1209.05 1375.4,1206.43 1375.99,1204.9 1376.58,1201.4 1377.16,1202.91 1377.75,1201.91 1378.34,1200.97 1378.92,1201.37 1379.51,1203.01 1380.09,1203.49 1380.68,1203.64 1381.27,1203.84 1381.85,1205.09 1382.44,1200.22 1383.03,1203.27 1383.61,1202.44 1384.2,1201.29 1384.79,1201.51 1385.37,1201.49 1385.96,1201.76 1386.55,1200.62 1387.13,1199.58 1387.72,1198.93 1388.3,1199.3 1388.89,1200.77 1389.48,1201.42 1390.06,1201.93 1390.65,1204.54 1391.24,1205.88 1391.82,1204.53 1392.41,1204.7 1393,1203.69 1393.58,1206.17 1394.17,1205.41 1394.75,1205.61 1395.34,1205.46 1395.93,1206.97 1396.51,1208.24 1397.1,1210.46 1397.69,1210.18 1398.27,1209.9 1398.86,1208.6 1399.45,1208.42 1400.03,1208.5 1400.62,1208.33 1401.21,1208.25 1401.79,1205.84 1402.38,1207.14 1402.96,1208.11 1403.55,1209.11 1404.14,1210.23 1404.72,1210.14 1405.31,1209.74 1405.9,1208.25 1406.48,1208.02 1407.07,1208.15 1407.66,1209.25 1408.24,1210.59 1408.83,1215.1 1409.42,1213.42 1410,1212.06 1410.59,1213.01 1411.17,1213.99 1411.76,1212.33 1412.35,1214.16 1412.93,1213.75 1413.52,1212.11 1414.11,1211.34 1414.69,1213.74 1415.28,1214.55 1415.87,1215.54 1416.45,1214.02 1417.04,1214.84 1417.63,1213.54 1418.21,1211.95 1418.8,1211.74 1419.38,1213.66 1419.97,1214.59 1420.56,1214.05 1421.14,1212.49 1421.73,1212.06 1422.32,1209.36 1422.9,1209.14 1423.49,1210 1424.08,1208.67 1424.66,1209.8 1425.25,1208.53 1425.83,1209.9 1426.42,1206.29 1427.01,1201.32 1427.59,1201.73 1428.18,1198.23 1428.77,1198.7 1429.35,1199.17 1429.94,1198.35 1430.53,1199 1431.11,1199.52 1431.7,1201.1 1432.29,1202.68 1432.87,1202.86 1433.46,1201.93 1434.04,1199.59 1434.63,1201.27 1435.22,1202.6 1435.8,1204.18 1436.39,1204.6 1436.98,1207.38 1437.56,1207.31 1438.15,1208.51 1438.74,1208.39 1439.32,1205.88 1439.91,1207.5 1440.5,1207.11 1441.08,1204.76 1441.67,1204.92 1442.25,1206.32 1442.84,1205.43 1443.43,1204.44 1444.01,1208.46 1444.6,1207.26 1445.19,1207.35 1445.77,1208.34 1446.36,1207.07 1446.95,1208.56 1447.53,1207.14 1448.12,1209.55 1448.7,1210.86 1449.29,1210.61 1449.88,1210.45 1450.46,1210.36 1451.05,1210.3 1451.64,1216.12 1452.22,1214.32 1452.81,1212.65 1453.4,1213.5 1453.98,1211.62 1454.57,1211.34 1455.16,1209.9 1455.74,1208.41 1456.33,1208.18 1456.91,1208 1457.5,1206.92 1458.09,1209.18 1458.67,1208.2 1459.26,1208.31 1459.85,1210.77 1460.43,1207.11 1461.02,1203.27 1461.61,1201.01 1462.19,1203.42 1462.78,1203.35 1463.37,1203.74 1463.95,1203.69 1464.54,1200.17 1465.12,1198.93 1465.71,1198.08 1466.3,1198.62 1466.88,1200.33 1467.47,1199.48 1468.06,1201.18 1468.64,1201.5 1469.23,1203.07 1469.82,1203.29 1470.4,1204.89 1470.99,1203.87 1471.57,1204.08 1472.16,1204.17 1472.75,1202.83 1473.33,1201.7 1473.92,1204.52 1474.51,1204.57 1475.09,1204.54 1475.68,1204.31 1476.27,1203.31 1476.85,1202.24 1477.44,1203.67 1478.03,1203.87 1478.61,1202.66 1479.2,1204.2 1479.78,1201.97 1480.37,1201.13 1480.96,1205.06 1481.54,1203.85 1482.13,1200.43 1482.72,1202.13 1483.3,1203.53 1483.89,1201.14 1484.48,1200.13 1485.06,1200.46 1485.65,1200.77 1486.24,1203.33 1486.82,1203.38 1487.41,1203.63 1487.99,1201.09 1488.58,1202.59 1489.17,1201.34 1489.75,1201.76 1490.34,1203.01 1490.93,1204.67 1491.51,1204.72 1492.1,1204.89 1492.69,1207.32 1493.27,1205.01 1493.86,1205.22 1494.45,1204.2 1495.03,1205.62 1495.62,1204.85 1496.2,1204.87 1496.79,1206.28 1497.38,1205.1 1497.96,1205.38 1498.55,1205.28 1499.14,1205.63 1499.72,1205.88 1500.31,1207.13 1500.9,1208.18 1501.48,1209.49 1502.07,1206.84 1502.65,1208.05 1503.24,1210.1 1503.83,1209.92 1504.41,1210.15 1505,1212.35 1505.59,1211.97 1506.17,1209.36 1506.76,1209.25 1507.35,1207.99 1507.93,1208.1 1508.52,1205.78 1509.11,1205.92 1509.69,1205.77 1510.28,1205.81 1510.86,1205.84 1511.45,1207.17 1512.04,1207.4 1512.62,1207.35 1513.21,1207.26 1513.8,1209.72 1514.38,1210.81 1514.97,1209.29 1515.56,1208.28 1516.14,1207.24 1516.73,1208.58 1517.32,1207.27 1517.9,1206.19 1518.49,1206.22 1519.07,1206.2 1519.66,1204.96 1520.25,1207.55 1520.83,1206.39 1521.42,1204.99 1522.01,1207.43 1522.59,1209.86 1523.18,1210.83 1523.77,1211.77 1524.35,1212.92 1524.94,1212.59 1525.52,1211.08 1526.11,1210.77 1526.7,1209.29 1527.28,1210.43 1527.87,1210.37 1528.46,1207.77 1529.04,1206.45 1529.63,1206.66 1530.22,1206.78 1530.8,1206.63 1531.39,1205.69 1531.98,1203.36 1532.56,1202.1 1533.15,1201.93 1533.73,1202.27 1534.32,1206.27 1534.91,1203.67 1535.49,1208.61 1536.08,1208.15 1536.67,1210.52 1537.25,1209.13 1537.84,1207.67 1538.43,1206.32 1539.01,1208.72 1539.6,1208.51 1540.19,1208.23 1540.77,1209.42 1541.36,1210.36 1541.94,1212.52 1542.53,1213.4 1543.12,1211.89 1543.7,1210.45 1544.29,1211.58 1544.88,1210.06 1545.46,1212.32 1546.05,1213.01 1546.64,1213.67 1547.22,1214.31 1547.81,1216.45 1548.4,1213.7 1548.98,1213.17 1549.57,1212.79 1550.15,1213.75 1550.74,1214.53 1551.33,1212.93 1551.91,1212.67 1552.5,1211.07 1553.09,1213.35 1553.67,1213.11 1554.26,1210.26 1554.85,1208.74 1555.43,1206.1 1556.02,1208.69 1556.6,1210.83 1557.19,1210.47 1557.78,1210.35 1558.36,1208.98 1558.95,1207.65 1559.54,1206.38 1560.12,1208.97 1560.71,1210.24 1561.3,1208.96 1561.88,1207.59 1562.47,1207.56 1563.06,1208.6 1563.64,1208.44 1564.23,1208.4 1564.81,1209.65 1565.4,1208.08 1565.99,1207.91 1566.57,1207.93 1567.16,1208.94 1567.75,1207.47 1568.33,1206.32 1568.92,1207.2 1569.51,1208.07 1570.09,1208.12 1570.68,1207.9 1571.27,1206.86 1571.85,1207.94 1572.44,1203.02 1573.02,1205.62 1573.61,1205.42 1574.2,1205.62 1574.78,1204.71 1575.37,1203.66 1575.96,1202.88 1576.54,1198.12 1577.13,1198.69 1577.72,1197.64 1578.3,1198.1 1578.89,1199.97 1579.47,1202.84 1580.06,1202.88 1580.65,1206.6 1581.23,1205.22 1581.82,1208.96 1582.41,1209.95 1582.99,1209.84 1583.58,1209.75 1584.17,1209.43 1584.75,1209.22 1585.34,1209.29 1585.93,1207.82 1586.51,1207.87 1587.1,1205.3 1587.68,1203.86 1588.27,1205.08 1588.86,1202.61 1589.44,1202.99 1590.03,1205.7 1590.62,1208.5 1591.2,1209.65 1591.79,1210.98 1592.38,1210.68 1592.96,1210.26 1593.55,1207.55 1594.14,1207.79 1594.72,1209.98 1595.31,1209.85 1595.89,1210.06 1596.48,1211.02 1597.07,1210.51 1597.65,1210.36 1598.24,1212.82 1598.83,1212.65 1599.41,1212.39 1600,1212.06 1600.59,1210.38 1601.17,1210.18 1601.76,1211.08 1602.34,1212.14 1602.93,1213.18 1603.52,1215.08 1604.1,1216.9 1604.69,1215.1 1605.28,1218.28 1605.86,1217.96 1606.45,1216.48 1607.04,1217.25 1607.62,1216.69 1608.21,1214.83 1608.8,1215.48 1609.38,1213.81 1609.97,1214.74 1610.55,1213.14 1611.14,1212.84 1611.73,1212.42 1612.31,1209.85 1612.9,1209.55 1613.49,1208.46 1614.07,1208.73 1614.66,1208.77 1615.25,1207.27 1615.83,1208.47 1616.42,1208.27 1617.01,1208.34 1617.59,1206.83 1618.18,1211.56 1618.76,1211.14 1619.35,1209.81 1619.94,1210.96 1620.52,1211.96 1621.11,1210.29 1621.7,1208.92 1622.28,1210.18 1622.87,1207.75 1623.46,1208.76 1624.04,1209.85 1624.63,1213.6 1625.22,1213.28 1625.8,1211.81 1626.39,1211.61 1626.97,1210.03 1627.56,1211.08 1628.15,1212.14 1628.73,1208.12 1629.32,1207.79 1629.91,1206.21 1630.49,1208.58 1631.08,1205.96 1631.67,1207.38 1632.25,1207.75 1632.84,1206.5 1633.42,1207.69 1634.01,1207.7 1634.6,1208.98 1635.18,1207.88 1635.77,1204.42 1636.36,1203.25 1636.94,1203.44 1637.53,1204.54 1638.12,1203.51 1638.7,1203.68 1639.29,1205.11 1639.88,1203.91 1640.46,1203.87 1641.05,1202.66 1641.63,1204.07 1642.22,1205.31 1642.81,1206.77 1643.39,1207.02 1643.98,1205.96 1644.57,1204.75 1645.15,1204.85 1645.74,1206.2 1646.33,1206.24 1646.91,1206.41 1647.5,1205.36 1648.09,1206.62 1648.67,1207.84 1649.26,1210.23 1649.84,1209.86 1650.43,1210.68 1651.02,1211.59 1651.6,1211.42 1652.19,1210.91 1652.78,1211.69 1653.36,1211.28 1653.95,1209.81 1654.54,1209.76 1655.12,1210.88 1655.71,1210.56 1656.29,1211.56 1656.88,1211.46 1657.47,1212.33 1658.05,1213.19 1658.64,1213 1659.23,1211.6 1659.81,1207.61 1660.4,1207.79 1660.99,1208.76 1661.57,1207.54 1662.16,1207.39 1662.75,1207.49 1663.33,1206.22 1663.92,1205.18 1664.5,1206.44 1665.09,1205.25 1665.68,1207.82 1666.26,1208.78 1666.85,1210.1 1667.44,1211.23 1668.02,1211.08 1668.61,1209.69 1669.2,1209.21 1669.78,1210.34 1670.37,1211.48 1670.96,1211.1 1671.54,1211.45 1672.13,1212.4 1672.71,1211.13 1673.3,1208.68 1673.89,1209.72 1674.47,1205.99 1675.06,1206.89 1675.65,1206.86 1676.23,1206.69 1676.82,1204.12 1677.41,1202.74 1677.99,1200.34 1678.58,1200.67 1679.17,1199.62 1679.75,1198.71 1680.34,1199.03 1680.92,1201.96 1681.51,1200.98 1682.1,1202.65 1682.68,1200.51 1683.27,1199.66 1683.86,1196.39 1684.44,1199.51 1685.03,1198.73 1685.62,1201.54 1686.2,1202.05 1686.79,1206.26 1687.37,1206.45 1687.96,1206.42 1688.55,1206.33 1689.13,1207.54 1689.72,1207.6 1690.31,1205.12 1690.89,1202.74 1691.48,1204.24 1692.07,1201.84 1692.65,1200.99 1693.24,1200.11 1693.83,1197.83 1694.41,1199.64 1695,1198.89 1695.58,1200.54 1696.17,1201.12 1696.76,1202.73 1697.34,1201.74 1697.93,1201.6 1698.52,1204.32 1699.1,1208.11 1699.69,1206.81 1700.28,1206.71 1700.86,1207.93 1701.45,1205.52 1702.04,1208 1702.62,1206.76 1703.21,1208.19 1703.79,1207 1704.38,1207.98 1704.97,1210.48 1705.55,1212.48 1706.14,1212.22 1706.73,1213.3 1707.31,1215.56 1707.9,1213.91 1708.49,1213.78 1709.07,1214.88 1709.66,1212.17 1710.24,1211.95 1710.83,1209.46 1711.42,1209.59 1712,1209.33 1712.59,1210.43 1713.18,1207.52 1713.76,1208.49 1714.35,1207.23 1714.94,1209.56 1715.52,1208.22 1716.11,1209.23 1716.7,1207.82 1717.28,1210.19 1717.87,1208.78 1718.45,1207.41 1719.04,1205.02 1719.63,1203.9 1720.21,1204.15 1720.8,1204.25 1721.39,1206.93 1721.97,1205.83 1722.56,1205.92 1723.15,1202.46 1723.73,1201.33 1724.32,1199.17 1724.91,1198.72 1725.49,1194.36 1726.08,1194.04 1726.66,1193.41 1727.25,1192.72 1727.84,1193.38 1728.42,1195.29 1729.01,1197.13 1729.6,1197.63 1730.18,1198.24 1730.77,1198.65 1731.36,1199.44 1731.94,1200.1 1732.53,1197.93 1733.11,1198.43 1733.7,1201.52 1734.29,1203.99 1734.87,1204.27 1735.46,1204.44 1736.05,1204.22 1736.63,1205.64 1737.22,1208.24 1737.81,1206.97 1738.39,1208.55 1738.98,1208.53 1739.57,1212.03 1740.15,1211.85 1740.74,1207.99 1741.32,1207.91 1741.91,1207.75 1742.5,1207.78 1743.08,1208.75 1743.67,1208.72 1744.26,1209.86 1744.84,1209.51 1745.43,1211.84 1746.02,1211.42 1746.6,1209.99 1747.19,1208.68 1747.78,1208.39 1748.36,1208.21 1748.95,1206.77 1749.53,1208.08 1750.12,1205.48 1750.71,1205.63 1751.29,1208.02 1751.88,1209.57 1752.47,1205.74 1753.05,1206.79 1753.64,1207.86 1754.23,1206.44 1754.81,1209.98 1755.4,1211.28 1755.99,1212.13 1756.57,1212.24 1757.16,1209.58 1757.74,1209.66 1758.33,1210.55 1758.92,1210.45 1759.5,1207.67 1760.09,1208.91 1760.68,1205.07 1761.26,1201.27 1761.85,1201.41 1762.44,1201.7 1763.02,1200.69 1763.61,1199.8 1764.19,1201.16 1764.78,1202.28 1765.37,1201.31 1765.95,1201.32 1766.54,1199.34 1767.13,1199.78 1767.71,1201.62 1768.3,1204.05 1768.89,1206.42 1769.47,1205.47 1770.06,1205.44 1770.65,1206.74 1771.23,1206.75 1771.82,1204.41 1772.4,1204.64 1772.99,1206.11 1773.58,1206.19 1774.16,1206.32 1774.75,1206.45 1775.34,1206.61 1775.92,1205.55 1776.51,1205.75 1777.1,1205.83 1777.68,1207.04 1778.27,1205.71 1778.86,1203.41 1779.44,1201.24 1780.03,1201.64 1780.61,1202.08 1781.2,1203.79 1781.79,1205.36 1782.37,1201.9 1782.96,1202.31 1783.55,1202.53 1784.13,1201.58 1784.72,1202.93 1785.31,1201.97 1785.89,1203.42 1786.48,1203.61 1787.06,1200.21 1787.65,1201.64 1788.24,1201.66 1788.82,1200.76 1789.41,1199.84 1790,1200.33 1790.58,1201.73 1791.17,1202.26 1791.76,1202.75 1792.34,1205.58 1792.93,1206.03 1793.52,1205 1794.1,1205.19 1794.69,1205.32 1795.27,1205.42 1795.86,1206.32 1796.45,1205.38 1797.03,1205.56 1797.62,1208.01 1798.21,1207.81 1798.79,1207.65 1799.38,1206.47 1799.97,1207.59 1800.55,1207.49 1801.14,1208.8 1801.73,1207.42 1802.31,1207.17 1802.9,1207.05 1803.48,1207.48 1804.07,1207.38 1804.66,1208.5 1805.24,1208.36 1805.83,1207.29 1806.42,1206.2 1807,1202.68 1807.59,1202.75 1808.18,1203.93 1808.76,1200.37 1809.35,1202.23 1809.94,1202.67 1810.52,1201.81 1811.11,1202.34 1811.69,1203.83 1812.28,1202.95 1812.87,1201.99 1813.45,1201.09 1814.04,1200.18 1814.63,1202.98 1815.21,1203.34 1815.8,1204.67 1816.39,1205.87 1816.97,1205.05 1817.56,1207.76 1818.14,1206.27 1818.73,1205.13 1819.32,1208.05 1819.9,1206.7 1820.49,1205.61 1821.08,1204.88 1821.66,1203.79 1822.25,1205.08 1822.84,1207.57 1823.42,1212.35 1824.01,1212.24 1824.6,1206.97 1825.18,1208.34 1825.77,1209.63 1826.35,1207.97 1826.94,1210.64 1827.53,1209.27 1828.11,1210.07 1828.7,1211.35 1829.29,1208.88 1829.87,1212.44 1830.46,1212.07 1831.05,1210.49 1831.63,1205.42 1832.22,1205.41 1832.81,1205.57 1833.39,1207.79 1833.98,1207.66 1834.56,1206.51 1835.15,1205.15 1835.74,1204.92 1836.32,1202.51 1836.91,1203.88 1837.5,1206.42 1838.08,1205.27 1838.67,1205.33 1839.26,1206.67 1839.84,1205.34 1840.43,1207.72 1841.01,1205.33 1841.6,1206.55 1842.19,1204.05 1842.77,1206.91 1843.36,1207.01 1843.95,1209.69 1844.53,1212.12 1845.12,1211.83 1845.71,1211.53 1846.29,1210.05 1846.88,1209.62 1847.47,1209.73 1848.05,1211.84 1848.64,1210.71 1849.22,1209.33 1849.81,1209.24 1850.4,1209.13 1850.98,1212.84 1851.57,1211.35 1852.16,1212.06 1852.74,1212.97 1853.33,1211.49 1853.92,1210.02 1854.5,1208.59 1855.09,1207.31 1855.68,1207.14 1856.26,1208.28 1856.85,1208.26 1857.43,1210.53 1858.02,1209.39 1858.61,1209.42 1859.19,1211.56 1859.78,1216.3 1860.37,1215.71 1860.95,1216.63 1861.54,1213.44 1862.13,1212.97 1862.71,1209.79 1863.3,1209.66 1863.88,1210.79 1864.47,1210.54 1865.06,1208.94 1865.64,1210.08 1866.23,1207.53 1866.82,1211.24 1867.4,1210.78 1867.99,1211.88 1868.58,1211.6 1869.16,1210.18 1869.75,1212.48 1870.34,1213.47 1870.92,1210.62 1871.51,1210.31 1872.09,1208.69 1872.68,1207.42 1873.27,1203.68 1873.85,1206.3 1874.44,1207.61 1875.03,1205.1 1875.61,1207.67 1876.2,1204.29 1876.79,1207.86 1877.37,1206.6 1877.96,1202.95 1878.55,1204.48 1879.13,1209.37 1879.72,1209.16 1880.3,1210.12 1880.89,1212.27 1881.48,1210.58 1882.06,1212.53 1882.65,1212.11 1883.24,1211.85 1883.82,1211.58 1884.41,1211.29 1885,1209.94 1885.58,1209.8 1886.17,1208.41 1886.76,1209.69 1887.34,1210.59 1887.93,1210.35 1888.51,1211.12 1889.1,1212.14 1889.69,1210.58 1890.27,1211.6 1890.86,1210.02 1891.45,1208.44 1892.03,1209.4 1892.62,1210.54 1893.21,1210.32 1893.79,1207.79 1894.38,1207.68 1894.96,1208.84 1895.55,1209.83 1896.14,1210.03 1896.72,1210.09 1897.31,1210.01 1897.9,1209.71 1898.48,1208.43 1899.07,1204.58 1899.66,1203.55 1900.24,1202.24 1900.83,1204.86 1901.42,1203.68 1902,1206.21 1902.59,1207.55 1903.17,1209.97 1903.76,1208.51 1904.35,1208.37 1904.93,1209.35 1905.52,1209.03 1906.11,1211.35 1906.69,1211.28 1907.28,1213.58 1907.87,1211.94 1908.45,1210.31 1909.04,1208.96 1909.63,1209.86 1910.21,1209.78 1910.8,1209.63 1911.38,1209.4 1911.97,1206.99 1912.56,1208.27 1913.14,1209.3 1913.73,1210.33 1914.32,1211.39 1914.9,1208.99 1915.49,1210.09 1916.08,1207.42 1916.66,1206.4 1917.25,1205.26 1917.83,1205.2 1918.42,1204.08 1919.01,1205.82 1919.59,1206.11 1920.18,1206.11 1920.77,1207.59 1921.35,1206.37 1921.94,1206.32 1922.53,1206.49 1923.11,1206.56 1923.7,1206.53 1924.29,1207.74 1924.87,1210.33 1925.46,1210.25 1926.04,1208.77 1926.63,1207.49 1927.22,1207.16 1927.8,1208.5 1928.39,1208.43 1928.98,1208.44 1929.56,1208.4 1930.15,1210.61 1930.74,1209.25 1931.32,1208.85 1931.91,1209.65 1932.5,1208.45 1933.08,1210.72 1933.67,1210.63 1934.25,1211.83 1934.84,1212.56 1935.43,1212.18 1936.01,1210.64 1936.6,1210.45 1937.19,1213.84 1937.77,1212.22 1938.36,1209.55 1938.95,1208.26 1939.53,1211.77 1940.12,1210.44 1940.71,1207.6 1941.29,1205.22 1941.88,1202.82 1942.46,1204.15 1943.05,1201.96 1943.64,1200.76 1944.22,1201.05 1944.81,1200.22 1945.4,1197.72 1945.98,1196.75 1946.57,1196.98 1947.16,1198.6 1947.74,1197.86 1948.33,1199.34 1948.91,1199.72 1949.5,1197.41 1950.09,1196.65 1950.67,1198.31 1951.26,1197.61 1951.85,1199.46 1952.43,1201.19 1953.02,1200.18 1953.61,1202.88 1954.19,1200.64 1954.78,1200.91 1955.37,1199.87 1955.95,1201.6 1956.54,1199.36 1957.12,1202.29 1957.71,1203.71 1958.3,1202.8 1958.88,1202.77 1959.47,1205.43 1960.06,1204.32 1960.64,1205.72 1961.23,1205.81 1961.82,1205.91 1962.4,1206.23 1962.99,1208.78 1963.58,1207.78 1964.16,1207.91 1964.75,1205.2 1965.33,1207.71 1965.92,1207.44 1966.51,1210.99 1967.09,1211.94 1967.68,1212.92 1968.27,1210.22 1968.85,1208.64 1969.44,1211.14 1970.03,1209.61 1970.61,1209.29 1971.2,1209.29 1971.78,1212.88 1972.37,1213.75 1972.96,1215.98 1973.54,1215.62 1974.13,1216.61 1974.72,1217.11 1975.3,1213.17 1975.89,1215.14 1976.48,1212.29 1977.06,1213.36 1977.65,1213.27 1978.24,1214.05 1978.82,1214.19 1979.41,1211.38 1979.99,1211.2 1980.58,1214.52 1981.17,1216.61 1981.75,1214.95 1982.34,1215.96 1982.93,1211.99 1983.51,1211.66 1984.1,1211.42 1984.69,1209.79 1985.27,1208.48 1985.86,1208.34 1986.45,1210.62 1987.03,1211.62 1987.62,1212.4 1988.2,1213.19 1988.79,1207.95 1989.38,1207.89 1989.96,1208.03 1990.55,1209.19 1991.14,1208.82 1991.72,1209.7 1992.31,1209.66 1992.9,1207.13 1993.48,1207.48 1994.07,1206.34 1994.65,1205.14 1995.24,1205.25 1995.83,1205.39 1996.41,1203.2 1997,1202.13 1997.59,1202.47 1998.17,1201.52 1998.76,1199.2 1999.35,1200.76 1999.93,1201.19 2000.52,1204.02 2001.11,1202.71 2001.69,1202.94 2002.28,1203.25 2002.86,1204.71 2003.45,1202.33 2004.04,1203.78 2004.62,1202.7 2005.21,1205.27 2005.8,1203.98 2006.38,1203.02 2006.97,1205.45 2007.56,1205.51 2008.14,1203.08 2008.73,1204.67 2009.32,1202.44 2009.9,1203.95 2010.49,1204.11 2011.07,1201.74 2011.66,1199.78 2012.25,1201.36 2012.83,1201.68 2013.42,1199.34 2014.01,1200.95 2014.59,1200.99 2015.18,1200.07 2015.77,1199.59 2016.35,1198.8 2016.94,1200.61 2017.53,1201.2 2018.11,1202.72 2018.7,1203.9 2019.28,1206.67 2019.87,1205.52 2020.46,1206.78 2021.04,1206.88 2021.63,1208.18 2022.22,1209.3 2022.8,1208.19 2023.39,1206 2023.98,1207.11 2024.56,1206.98 2025.15,1211.78 2025.73,1213.86 2026.32,1211.14 2026.91,1209.63 2027.49,1209.73 2028.08,1211.08 2028.67,1212.19 2029.25,1211.64 2029.84,1209.01 2030.43,1209.13 2031.01,1210.47 2031.6,1211.41 2032.19,1209.66 2032.77,1210.73 2033.36,1213.06 2033.94,1215.23 2034.53,1216.13 2035.12,1215.69 2035.7,1212.67 2036.29,1209.67 2036.88,1210.84 2037.46,1210.65 2038.05,1210.68 2038.64,1207.97 2039.22,1207.85 2039.81,1206.64 2040.4,1207.97 2040.98,1209.11 2041.57,1209.84 2042.15,1210.86 2042.74,1208.28 2043.33,1208.25 2043.91,1208.31 2044.5,1205.68 2045.09,1205.84 2045.67,1205.5 2046.26,1202.95 2046.85,1203.47 2047.43,1205 2048.02,1200.06 2048.6,1200.44 2049.19,1202.13 2049.78,1205.83 2050.36,1205 2050.95,1204.09 2051.54,1201.94 2052.12,1199.98 2052.71,1201.58 2053.3,1203.08 2053.88,1205.56 2054.47,1208.06 2055.06,1209.03 2055.64,1209.26 2056.23,1206.82 2056.81,1206.62 2057.4,1206.77 2057.99,1211.51 2058.57,1208.82 2059.16,1209.03 2059.75,1211.42 2060.33,1211.02 2060.92,1211.06 2061.51,1215.57 2062.09,1212.94 2062.68,1212.43 2063.27,1213.18 2063.85,1211.53 2064.44,1211.45 2065.02,1212.28 2065.61,1210.64 2066.2,1211.7 2066.78,1209.16 2067.37,1207.62 2067.96,1206.29 2068.54,1208.44 2069.13,1209.6 2069.72,1210.63 2070.3,1215.23 2070.89,1213.41 2071.48,1211.84 2072.06,1211.37 2072.65,1212.16 2073.23,1212.05 2073.82,1206.88 2074.41,1204.35 2074.99,1202.92 2075.58,1202.2 2076.17,1202.48 2076.75,1199.94 2077.34,1200.35 2077.93,1200.75 2078.51,1201.24 2079.1,1204.08 2079.68,1204.3 2080.27,1206.8 2080.86,1205.4 2081.44,1201.88 2082.03,1203.3 2082.62,1204.89 2083.2,1205.02 2083.79,1207.46 2084.38,1207.54 2084.96,1206.35 2085.55,1207.6 2086.14,1207.47 2086.72,1207.56 2087.31,1207.46 2087.89,1205.3 2088.48,1204.22 2089.07,1205.58 2089.65,1206.61 2090.24,1205.09 2090.83,1205.37 2091.41,1205.58 2092,1205.79 2092.59,1204.63 2093.17,1206.34 2093.76,1207.57 2094.35,1204.92 2094.93,1207.32 2095.52,1203.64 2096.1,1206.31 2096.69,1205.36 2097.28,1205.19 2097.86,1205.33 2098.45,1206.91 2099.04,1205.81 2099.62,1205.61 2100.21,1204.22 2100.8,1204.3 2101.38,1201.75 2101.97,1200.69 2102.55,1200.75 2103.14,1203.65 2103.73,1202.71 2104.31,1199.51 2104.9,1197.51 2105.49,1196.85 2106.07,1197.38 2106.66,1198 2107.25,1198.49 2107.83,1203.93 2108.42,1206.48 2109.01,1205.1 2109.59,1210.23 2110.18,1208.03 2110.76,1208.96 2111.35,1207.46 2111.94,1207.57 2112.52,1207.53 2113.11,1206.24 2113.7,1206.36 2114.28,1205.1 2114.87,1203.71 2115.46,1203.85 2116.04,1201.67 2116.63,1201.85 2117.22,1202.03 2117.8,1203.56 2118.39,1203.57 2118.97,1203.79 2119.56,1202.82 2120.15,1205.49 2120.73,1204.37 2121.32,1205.66 2121.91,1206.85 2122.49,1205.32 2123.08,1206.6 2123.67,1205.34 2124.25,1205.17 2124.84,1205.39 2125.42,1204.54 2126.01,1205.77 2126.6,1208.14 2127.18,1209.34 2127.77,1209.1 2128.36,1211.26 2128.94,1209.91 2129.53,1210.13 2130.12,1211.15 2130.7,1209.89 2131.29,1208.65 2131.88,1208.58 2132.46,1208.43 2133.05,1208.53 2133.63,1207.08 2134.22,1207.03 2134.81,1208.18 2135.39,1206.9 2135.98,1204.6 2136.57,1207.14 2137.15,1204.83 2137.74,1204.78 2138.33,1203.69 2138.91,1201.75 2139.5,1200.6 2140.09,1201.86 2140.67,1203.51 2141.26,1202.58 2141.84,1202.76 2142.43,1202.61 2143.02,1201.57 2143.6,1200.75 2144.19,1197.56 2144.78,1200.57 2145.36,1202.16 2145.95,1202.45 2146.54,1202.97 2147.12,1200.85 2147.71,1201.14 2148.3,1201.68 2148.88,1201.73 2149.47,1204.33 2150.05,1204.5 2150.64,1203.27 2151.23,1202.44 2151.81,1202.52 2152.4,1201.57 2152.99,1201.87 2153.57,1199.77 2154.16,1200.09 2154.75,1199.35 2155.33,1200 2155.92,1201.52 2156.5,1205.53 2157.09,1201.76 2157.68,1204.69 2158.26,1205.08 \"/>\n<path clip-path=\"url(#clip822)\" d=\"M986.025 1207.16 L986.612 1207.16 L987.198 1207.16 L987.785 1207.16 L988.371 1207.16 L988.957 1207.16 L989.544 1207.16 L990.13 1207.16 L990.717 1207.16 L991.303 1207.16 L991.889 1207.16 L992.476 1207.16 L993.062 1207.16 L993.649 1207.16 L994.235 1207.16 L994.822 1207.16 L995.408 1207.16 L995.994 1207.16 L996.581 1207.16 L997.167 1207.16 L997.754 1207.16 L998.34 1207.16 L998.926 1207.16 L999.513 1207.16 L1000.1 1207.16 L1000.69 1207.16 L1001.27 1207.16 L1001.86 1207.16 L1002.44 1207.16 L1003.03 1207.16 L1003.62 1207.16 L1004.2 1207.16 L1004.79 1207.16 L1005.38 1207.16 L1005.96 1207.16 L1006.55 1207.16 L1007.14 1207.16 L1007.72 1207.16 L1008.31 1207.16 L1008.9 1207.16 L1009.48 1207.16 L1010.07 1207.16 L1010.65 1207.16 L1011.24 1207.16 L1011.83 1207.16 L1012.41 1207.16 L1013 1207.16 L1013.59 1207.16 L1014.17 1207.16 L1014.76 1207.16 L1015.35 1207.16 L1015.93 1207.16 L1016.52 1207.16 L1017.11 1207.16 L1017.69 1207.16 L1018.28 1207.16 L1018.86 1207.16 L1019.45 1207.16 L1020.04 1207.16 L1020.62 1207.16 L1021.21 1207.16 L1021.8 1207.16 L1022.38 1207.16 L1022.97 1207.16 L1023.56 1207.16 L1024.14 1207.16 L1024.73 1207.16 L1025.32 1207.16 L1025.9 1207.16 L1026.49 1207.16 L1027.07 1207.16 L1027.66 1207.16 L1028.25 1207.16 L1028.83 1207.16 L1029.42 1207.16 L1030.01 1207.16 L1030.59 1207.16 L1031.18 1207.16 L1031.77 1207.16 L1032.35 1207.16 L1032.94 1207.16 L1033.52 1207.16 L1034.11 1207.16 L1034.7 1207.16 L1035.28 1207.16 L1035.87 1207.16 L1036.46 1207.16 L1037.04 1207.16 L1037.63 1207.16 L1038.22 1207.16 L1038.8 1207.16 L1039.39 1207.16 L1039.98 1207.16 L1040.56 1207.16 L1041.15 1207.16 L1041.73 1207.16 L1042.32 1207.16 L1042.91 1207.16 L1043.49 1207.16 L1044.08 1207.16 L1044.67 1207.16 L1045.25 1207.16 L1045.84 1207.16 L1046.43 1207.16 L1047.01 1207.16 L1047.6 1207.16 L1048.19 1207.16 L1048.77 1207.16 L1049.36 1207.16 L1049.94 1207.16 L1050.53 1207.16 L1051.12 1207.16 L1051.7 1207.16 L1052.29 1207.16 L1052.88 1207.16 L1053.46 1207.16 L1054.05 1207.16 L1054.64 1207.16 L1055.22 1207.16 L1055.81 1207.16 L1056.39 1207.16 L1056.98 1207.16 L1057.57 1207.16 L1058.15 1207.16 L1058.74 1207.16 L1059.33 1207.16 L1059.91 1207.16 L1060.5 1207.16 L1061.09 1207.16 L1061.67 1207.16 L1062.26 1207.16 L1062.85 1207.16 L1063.43 1207.16 L1064.02 1207.16 L1064.6 1207.16 L1065.19 1207.16 L1065.78 1207.16 L1066.36 1207.16 L1066.95 1207.16 L1067.54 1207.16 L1068.12 1207.16 L1068.71 1207.16 L1069.3 1207.16 L1069.88 1207.16 L1070.47 1207.16 L1071.06 1207.16 L1071.64 1207.16 L1072.23 1207.16 L1072.81 1207.16 L1073.4 1207.16 L1073.99 1207.16 L1074.57 1207.16 L1075.16 1207.16 L1075.75 1207.16 L1076.33 1207.16 L1076.92 1207.16 L1077.51 1207.16 L1078.09 1207.16 L1078.68 1207.16 L1079.26 1207.16 L1079.85 1207.16 L1080.44 1207.16 L1081.02 1207.16 L1081.61 1207.16 L1082.2 1207.16 L1082.78 1207.16 L1083.37 1207.16 L1083.96 1207.16 L1084.54 1207.16 L1085.13 1207.16 L1085.72 1207.16 L1086.3 1207.16 L1086.89 1207.16 L1087.47 1207.16 L1088.06 1207.16 L1088.65 1207.16 L1089.23 1207.16 L1089.82 1207.16 L1090.41 1207.16 L1090.99 1207.16 L1091.58 1207.16 L1092.17 1207.16 L1092.75 1207.16 L1093.34 1207.16 L1093.93 1207.16 L1094.51 1207.16 L1095.1 1207.16 L1095.68 1207.16 L1096.27 1207.16 L1096.86 1207.16 L1097.44 1207.16 L1098.03 1207.16 L1098.62 1207.16 L1099.2 1207.16 L1099.79 1207.16 L1100.38 1207.16 L1100.96 1207.16 L1101.55 1207.16 L1102.14 1207.16 L1102.72 1207.16 L1103.31 1207.16 L1103.89 1207.16 L1104.48 1207.16 L1105.07 1207.16 L1105.65 1207.16 L1106.24 1207.16 L1106.83 1207.16 L1107.41 1207.16 L1108 1207.16 L1108.59 1207.16 L1109.17 1207.16 L1109.76 1207.16 L1110.34 1207.16 L1110.93 1207.16 L1111.52 1207.16 L1112.1 1207.16 L1112.69 1207.16 L1113.28 1207.16 L1113.86 1207.16 L1114.45 1207.16 L1115.04 1207.16 L1115.62 1207.16 L1116.21 1207.16 L1116.8 1207.16 L1117.38 1207.16 L1117.97 1207.16 L1118.55 1207.16 L1119.14 1207.16 L1119.73 1207.16 L1120.31 1207.16 L1120.9 1207.16 L1121.49 1207.16 L1122.07 1207.16 L1122.66 1207.16 L1123.25 1207.16 L1123.83 1207.16 L1124.42 1207.16 L1125.01 1207.16 L1125.59 1207.16 L1126.18 1207.16 L1126.76 1207.16 L1127.35 1207.16 L1127.94 1207.16 L1128.52 1207.16 L1129.11 1207.16 L1129.7 1207.16 L1130.28 1207.16 L1130.87 1207.16 L1131.46 1207.16 L1132.04 1207.16 L1132.63 1207.16 L1133.21 1207.16 L1133.8 1207.16 L1134.39 1207.16 L1134.97 1207.16 L1135.56 1207.16 L1136.15 1207.16 L1136.73 1207.16 L1137.32 1207.16 L1137.91 1207.16 L1138.49 1207.16 L1139.08 1207.16 L1139.67 1207.16 L1140.25 1207.16 L1140.84 1207.16 L1141.42 1207.16 L1142.01 1207.16 L1142.6 1207.16 L1143.18 1207.16 L1143.77 1207.16 L1144.36 1207.16 L1144.94 1207.16 L1145.53 1207.16 L1146.12 1207.16 L1146.7 1207.16 L1147.29 1207.16 L1147.88 1207.16 L1148.46 1207.16 L1149.05 1207.16 L1149.63 1207.16 L1150.22 1207.16 L1150.81 1207.16 L1151.39 1207.16 L1151.98 1207.16 L1152.57 1207.16 L1153.15 1207.16 L1153.74 1207.16 L1154.33 1207.16 L1154.91 1207.16 L1155.5 1207.16 L1156.09 1207.16 L1156.67 1207.16 L1157.26 1207.16 L1157.84 1207.16 L1158.43 1207.16 L1159.02 1207.16 L1159.6 1207.16 L1160.19 1207.16 L1160.78 1207.16 L1161.36 1207.16 L1161.95 1207.16 L1162.54 1207.16 L1163.12 1207.16 L1163.71 1207.16 L1164.29 1207.16 L1164.88 1207.16 L1165.47 1207.16 L1166.05 1207.16 L1166.64 1207.16 L1167.23 1207.16 L1167.81 1207.16 L1168.4 1207.16 L1168.99 1207.16 L1169.57 1207.16 L1170.16 1207.16 L1170.75 1207.16 L1171.33 1207.16 L1171.92 1207.16 L1172.5 1207.16 L1173.09 1207.16 L1173.68 1207.16 L1174.26 1207.16 L1174.85 1207.16 L1175.44 1207.16 L1176.02 1207.16 L1176.61 1207.16 L1177.2 1207.16 L1177.78 1207.16 L1178.37 1207.16 L1178.96 1207.16 L1179.54 1207.16 L1180.13 1207.16 L1180.71 1207.16 L1181.3 1207.16 L1181.89 1207.16 L1182.47 1207.16 L1183.06 1207.16 L1183.65 1207.16 L1184.23 1207.16 L1184.82 1207.16 L1185.41 1207.16 L1185.99 1207.16 L1186.58 1207.16 L1187.16 1207.16 L1187.75 1207.16 L1188.34 1207.16 L1188.92 1207.16 L1189.51 1207.16 L1190.1 1207.16 L1190.68 1207.16 L1191.27 1207.16 L1191.86 1207.16 L1192.44 1207.16 L1193.03 1207.16 L1193.62 1207.16 L1194.2 1207.16 L1194.79 1207.16 L1195.37 1207.16 L1195.96 1207.16 L1196.55 1207.16 L1197.13 1207.16 L1197.72 1207.16 L1198.31 1207.16 L1198.89 1207.16 L1199.48 1207.16 L1200.07 1207.16 L1200.65 1207.16 L1201.24 1207.16 L1201.83 1207.16 L1202.41 1207.16 L1203 1207.16 L1203.58 1207.16 L1204.17 1207.16 L1204.76 1207.16 L1205.34 1207.16 L1205.93 1207.16 L1206.52 1207.16 L1207.1 1207.16 L1207.69 1207.16 L1208.28 1207.16 L1208.86 1207.16 L1209.45 1207.16 L1210.03 1207.16 L1210.62 1207.16 L1211.21 1207.16 L1211.79 1207.16 L1212.38 1207.16 L1212.97 1207.16 L1213.55 1207.16 L1214.14 1207.16 L1214.73 1207.16 L1215.31 1207.16 L1215.9 1207.16 L1216.49 1207.16 L1217.07 1207.16 L1217.66 1207.16 L1218.24 1207.16 L1218.83 1207.16 L1219.42 1207.16 L1220 1207.16 L1220.59 1207.16 L1221.18 1207.16 L1221.76 1207.16 L1222.35 1207.16 L1222.94 1207.16 L1223.52 1207.16 L1224.11 1207.16 L1224.7 1207.16 L1225.28 1207.16 L1225.87 1207.16 L1226.45 1207.16 L1227.04 1207.16 L1227.63 1207.16 L1228.21 1207.16 L1228.8 1207.16 L1229.39 1207.16 L1229.97 1207.16 L1230.56 1207.16 L1231.15 1207.16 L1231.73 1207.16 L1232.32 1207.16 L1232.91 1207.16 L1233.49 1207.16 L1234.08 1207.16 L1234.66 1207.16 L1235.25 1207.16 L1235.84 1207.16 L1236.42 1207.16 L1237.01 1207.16 L1237.6 1207.16 L1238.18 1207.16 L1238.77 1207.16 L1239.36 1207.16 L1239.94 1207.16 L1240.53 1207.16 L1241.11 1207.16 L1241.7 1207.16 L1242.29 1207.16 L1242.87 1207.16 L1243.46 1207.16 L1244.05 1207.16 L1244.63 1207.16 L1245.22 1207.16 L1245.81 1207.16 L1246.39 1207.16 L1246.98 1207.16 L1247.57 1207.16 L1248.15 1207.16 L1248.74 1207.16 L1249.32 1207.16 L1249.91 1207.16 L1250.5 1207.16 L1251.08 1207.16 L1251.67 1207.16 L1252.26 1207.16 L1252.84 1207.16 L1253.43 1207.16 L1254.02 1207.16 L1254.6 1207.16 L1255.19 1207.16 L1255.78 1207.16 L1256.36 1207.16 L1256.95 1207.16 L1257.53 1207.16 L1258.12 1207.16 L1258.71 1207.16 L1259.29 1207.16 L1259.88 1207.16 L1260.47 1207.16 L1261.05 1207.16 L1261.64 1207.16 L1262.23 1207.16 L1262.81 1207.16 L1263.4 1207.16 L1263.98 1207.16 L1264.57 1207.16 L1265.16 1207.16 L1265.74 1207.16 L1266.33 1207.16 L1266.92 1207.16 L1267.5 1207.16 L1268.09 1207.16 L1268.68 1207.16 L1269.26 1207.16 L1269.85 1207.16 L1270.44 1207.16 L1271.02 1207.16 L1271.61 1207.16 L1272.19 1207.16 L1272.78 1207.16 L1273.37 1207.16 L1273.95 1207.16 L1274.54 1207.16 L1275.13 1207.16 L1275.71 1207.16 L1276.3 1207.16 L1276.89 1207.16 L1277.47 1207.16 L1278.06 1207.16 L1278.65 1207.16 L1279.23 1207.16 L1279.82 1207.16 L1280.4 1207.16 L1280.99 1207.16 L1281.58 1207.16 L1282.16 1207.16 L1282.75 1207.16 L1283.34 1207.16 L1283.92 1207.16 L1284.51 1207.16 L1285.1 1207.16 L1285.68 1207.16 L1286.27 1207.16 L1286.86 1207.16 L1287.44 1207.16 L1288.03 1207.16 L1288.61 1207.16 L1289.2 1207.16 L1289.79 1207.16 L1290.37 1207.16 L1290.96 1207.16 L1291.55 1207.16 L1292.13 1207.16 L1292.72 1207.16 L1293.31 1207.16 L1293.89 1207.16 L1294.48 1207.16 L1295.06 1207.16 L1295.65 1207.16 L1296.24 1207.16 L1296.82 1207.16 L1297.41 1207.16 L1298 1207.16 L1298.58 1207.16 L1299.17 1207.16 L1299.76 1207.16 L1300.34 1207.16 L1300.93 1207.16 L1301.52 1207.16 L1302.1 1207.16 L1302.69 1207.16 L1303.27 1207.16 L1303.86 1207.16 L1304.45 1207.16 L1305.03 1207.16 L1305.62 1207.16 L1306.21 1207.16 L1306.79 1207.16 L1307.38 1207.16 L1307.97 1207.16 L1308.55 1207.16 L1309.14 1207.16 L1309.73 1207.16 L1310.31 1207.16 L1310.9 1207.16 L1311.48 1207.16 L1312.07 1207.16 L1312.66 1207.16 L1313.24 1207.16 L1313.83 1207.16 L1314.42 1207.16 L1315 1207.16 L1315.59 1207.16 L1316.18 1207.16 L1316.76 1207.16 L1317.35 1207.16 L1317.93 1207.16 L1318.52 1207.16 L1319.11 1207.16 L1319.69 1207.16 L1320.28 1207.16 L1320.87 1207.16 L1321.45 1207.16 L1322.04 1207.16 L1322.63 1207.16 L1323.21 1207.16 L1323.8 1207.16 L1324.39 1207.16 L1324.97 1207.16 L1325.56 1207.16 L1326.14 1207.16 L1326.73 1207.16 L1327.32 1207.16 L1327.9 1207.16 L1328.49 1207.16 L1329.08 1207.16 L1329.66 1207.16 L1330.25 1207.16 L1330.84 1207.16 L1331.42 1207.16 L1332.01 1207.16 L1332.6 1207.16 L1333.18 1207.16 L1333.77 1207.16 L1334.35 1207.16 L1334.94 1207.16 L1335.53 1207.16 L1336.11 1207.16 L1336.7 1207.16 L1337.29 1207.16 L1337.87 1207.16 L1338.46 1207.16 L1339.05 1207.16 L1339.63 1207.16 L1340.22 1207.16 L1340.8 1207.16 L1341.39 1207.16 L1341.98 1207.16 L1342.56 1207.16 L1343.15 1207.16 L1343.74 1207.16 L1344.32 1207.16 L1344.91 1207.16 L1345.5 1207.16 L1346.08 1207.16 L1346.67 1207.16 L1347.26 1207.16 L1347.84 1207.16 L1348.43 1207.16 L1349.01 1207.16 L1349.6 1207.16 L1350.19 1207.16 L1350.77 1207.16 L1351.36 1207.16 L1351.95 1207.16 L1352.53 1207.16 L1353.12 1207.16 L1353.71 1207.16 L1354.29 1207.16 L1354.88 1207.16 L1355.47 1207.16 L1356.05 1207.16 L1356.64 1207.16 L1357.22 1207.16 L1357.81 1207.16 L1358.4 1207.16 L1358.98 1207.16 L1359.57 1207.16 L1360.16 1207.16 L1360.74 1207.16 L1361.33 1207.16 L1361.92 1207.16 L1362.5 1207.16 L1363.09 1207.16 L1363.68 1207.16 L1364.26 1207.16 L1364.85 1207.16 L1365.43 1207.16 L1366.02 1207.16 L1366.61 1207.16 L1367.19 1207.16 L1367.78 1207.16 L1368.37 1207.16 L1368.95 1207.16 L1369.54 1207.16 L1370.13 1207.16 L1370.71 1207.16 L1371.3 1207.16 L1371.88 1207.16 L1372.47 1207.16 L1373.06 1207.16 L1373.64 1207.16 L1374.23 1207.16 L1374.82 1207.16 L1375.4 1207.16 L1375.99 1207.16 L1376.58 1207.16 L1377.16 1207.16 L1377.75 1207.16 L1378.34 1207.16 L1378.92 1207.16 L1379.51 1207.16 L1380.09 1207.16 L1380.68 1207.16 L1381.27 1207.16 L1381.85 1207.16 L1382.44 1207.16 L1383.03 1207.16 L1383.61 1207.16 L1384.2 1207.16 L1384.79 1207.16 L1385.37 1207.16 L1385.96 1207.16 L1386.55 1207.16 L1387.13 1207.16 L1387.72 1207.16 L1388.3 1207.16 L1388.89 1207.16 L1389.48 1207.16 L1390.06 1207.16 L1390.65 1207.16 L1391.24 1207.16 L1391.82 1207.16 L1392.41 1207.16 L1393 1207.16 L1393.58 1207.16 L1394.17 1207.16 L1394.75 1207.16 L1395.34 1207.16 L1395.93 1207.16 L1396.51 1207.16 L1397.1 1207.16 L1397.69 1207.16 L1398.27 1207.16 L1398.86 1207.16 L1399.45 1207.16 L1400.03 1207.16 L1400.62 1207.16 L1401.21 1207.16 L1401.79 1207.16 L1402.38 1207.16 L1402.96 1207.16 L1403.55 1207.16 L1404.14 1207.16 L1404.72 1207.16 L1405.31 1207.16 L1405.9 1207.16 L1406.48 1207.16 L1407.07 1207.16 L1407.66 1207.16 L1408.24 1207.16 L1408.83 1207.16 L1409.42 1207.16 L1410 1207.16 L1410.59 1207.16 L1411.17 1207.16 L1411.76 1207.16 L1412.35 1207.16 L1412.93 1207.16 L1413.52 1207.16 L1414.11 1207.16 L1414.69 1207.16 L1415.28 1207.16 L1415.87 1207.16 L1416.45 1207.16 L1417.04 1207.16 L1417.63 1207.16 L1418.21 1207.16 L1418.8 1207.16 L1419.38 1207.16 L1419.97 1207.16 L1420.56 1207.16 L1421.14 1207.16 L1421.73 1207.16 L1422.32 1207.16 L1422.9 1207.16 L1423.49 1207.16 L1424.08 1207.16 L1424.66 1207.16 L1425.25 1207.16 L1425.83 1207.16 L1426.42 1207.16 L1427.01 1207.16 L1427.59 1207.16 L1428.18 1207.16 L1428.77 1207.16 L1429.35 1207.16 L1429.94 1207.16 L1430.53 1207.16 L1431.11 1207.16 L1431.7 1207.16 L1432.29 1207.16 L1432.87 1207.16 L1433.46 1207.16 L1434.04 1207.16 L1434.63 1207.16 L1435.22 1207.16 L1435.8 1207.16 L1436.39 1207.16 L1436.98 1207.16 L1437.56 1207.16 L1438.15 1207.16 L1438.74 1207.16 L1439.32 1207.16 L1439.91 1207.16 L1440.5 1207.16 L1441.08 1207.16 L1441.67 1207.16 L1442.25 1207.16 L1442.84 1207.16 L1443.43 1207.16 L1444.01 1207.16 L1444.6 1207.16 L1445.19 1207.16 L1445.77 1207.16 L1446.36 1207.16 L1446.95 1207.16 L1447.53 1207.16 L1448.12 1207.16 L1448.7 1207.16 L1449.29 1207.16 L1449.88 1207.16 L1450.46 1207.16 L1451.05 1207.16 L1451.64 1207.16 L1452.22 1207.16 L1452.81 1207.16 L1453.4 1207.16 L1453.98 1207.16 L1454.57 1207.16 L1455.16 1207.16 L1455.74 1207.16 L1456.33 1207.16 L1456.91 1207.16 L1457.5 1207.16 L1458.09 1207.16 L1458.67 1207.16 L1459.26 1207.16 L1459.85 1207.16 L1460.43 1207.16 L1461.02 1207.16 L1461.61 1207.16 L1462.19 1207.16 L1462.78 1207.16 L1463.37 1207.16 L1463.95 1207.16 L1464.54 1207.16 L1465.12 1207.16 L1465.71 1207.16 L1466.3 1207.16 L1466.88 1207.16 L1467.47 1207.16 L1468.06 1207.16 L1468.64 1207.16 L1469.23 1207.16 L1469.82 1207.16 L1470.4 1207.16 L1470.99 1207.16 L1471.57 1207.16 L1472.16 1207.16 L1472.75 1207.16 L1473.33 1207.16 L1473.92 1207.16 L1474.51 1207.16 L1475.09 1207.16 L1475.68 1207.16 L1476.27 1207.16 L1476.85 1207.16 L1477.44 1207.16 L1478.03 1207.16 L1478.61 1207.16 L1479.2 1207.16 L1479.78 1207.16 L1480.37 1207.16 L1480.96 1207.16 L1481.54 1207.16 L1482.13 1207.16 L1482.72 1207.16 L1483.3 1207.16 L1483.89 1207.16 L1484.48 1207.16 L1485.06 1207.16 L1485.65 1207.16 L1486.24 1207.16 L1486.82 1207.16 L1487.41 1207.16 L1487.99 1207.16 L1488.58 1207.16 L1489.17 1207.16 L1489.75 1207.16 L1490.34 1207.16 L1490.93 1207.16 L1491.51 1207.16 L1492.1 1207.16 L1492.69 1207.16 L1493.27 1207.16 L1493.86 1207.16 L1494.45 1207.16 L1495.03 1207.16 L1495.62 1207.16 L1496.2 1207.16 L1496.79 1207.16 L1497.38 1207.16 L1497.96 1207.16 L1498.55 1207.16 L1499.14 1207.16 L1499.72 1207.16 L1500.31 1207.16 L1500.9 1207.16 L1501.48 1207.16 L1502.07 1207.16 L1502.65 1207.16 L1503.24 1207.16 L1503.83 1207.16 L1504.41 1207.16 L1505 1207.16 L1505.59 1207.16 L1506.17 1207.16 L1506.76 1207.16 L1507.35 1207.16 L1507.93 1207.16 L1508.52 1207.16 L1509.11 1207.16 L1509.69 1207.16 L1510.28 1207.16 L1510.86 1207.16 L1511.45 1207.16 L1512.04 1207.16 L1512.62 1207.16 L1513.21 1207.16 L1513.8 1207.16 L1514.38 1207.16 L1514.97 1207.16 L1515.56 1207.16 L1516.14 1207.16 L1516.73 1207.16 L1517.32 1207.16 L1517.9 1207.16 L1518.49 1207.16 L1519.07 1207.16 L1519.66 1207.16 L1520.25 1207.16 L1520.83 1207.16 L1521.42 1207.16 L1522.01 1207.16 L1522.59 1207.16 L1523.18 1207.16 L1523.77 1207.16 L1524.35 1207.16 L1524.94 1207.16 L1525.52 1207.16 L1526.11 1207.16 L1526.7 1207.16 L1527.28 1207.16 L1527.87 1207.16 L1528.46 1207.16 L1529.04 1207.16 L1529.63 1207.16 L1530.22 1207.16 L1530.8 1207.16 L1531.39 1207.16 L1531.98 1207.16 L1532.56 1207.16 L1533.15 1207.16 L1533.73 1207.16 L1534.32 1207.16 L1534.91 1207.16 L1535.49 1207.16 L1536.08 1207.16 L1536.67 1207.16 L1537.25 1207.16 L1537.84 1207.16 L1538.43 1207.16 L1539.01 1207.16 L1539.6 1207.16 L1540.19 1207.16 L1540.77 1207.16 L1541.36 1207.16 L1541.94 1207.16 L1542.53 1207.16 L1543.12 1207.16 L1543.7 1207.16 L1544.29 1207.16 L1544.88 1207.16 L1545.46 1207.16 L1546.05 1207.16 L1546.64 1207.16 L1547.22 1207.16 L1547.81 1207.16 L1548.4 1207.16 L1548.98 1207.16 L1549.57 1207.16 L1550.15 1207.16 L1550.74 1207.16 L1551.33 1207.16 L1551.91 1207.16 L1552.5 1207.16 L1553.09 1207.16 L1553.67 1207.16 L1554.26 1207.16 L1554.85 1207.16 L1555.43 1207.16 L1556.02 1207.16 L1556.6 1207.16 L1557.19 1207.16 L1557.78 1207.16 L1558.36 1207.16 L1558.95 1207.16 L1559.54 1207.16 L1560.12 1207.16 L1560.71 1207.16 L1561.3 1207.16 L1561.88 1207.16 L1562.47 1207.16 L1563.06 1207.16 L1563.64 1207.16 L1564.23 1207.16 L1564.81 1207.16 L1565.4 1207.16 L1565.99 1207.16 L1566.57 1207.16 L1567.16 1207.16 L1567.75 1207.16 L1568.33 1207.16 L1568.92 1207.16 L1569.51 1207.16 L1570.09 1207.16 L1570.68 1207.16 L1571.27 1207.16 L1571.85 1207.16 L1572.44 1207.16 L1573.02 1207.16 L1573.61 1207.16 L1574.2 1207.16 L1574.78 1207.16 L1575.37 1207.16 L1575.96 1207.16 L1576.54 1207.16 L1577.13 1207.16 L1577.72 1207.16 L1578.3 1207.16 L1578.89 1207.16 L1579.47 1207.16 L1580.06 1207.16 L1580.65 1207.16 L1581.23 1207.16 L1581.82 1207.16 L1582.41 1207.16 L1582.99 1207.16 L1583.58 1207.16 L1584.17 1207.16 L1584.75 1207.16 L1585.34 1207.16 L1585.93 1207.16 L1586.51 1207.16 L1587.1 1207.16 L1587.68 1207.16 L1588.27 1207.16 L1588.86 1207.16 L1589.44 1207.16 L1590.03 1207.16 L1590.62 1207.16 L1591.2 1207.16 L1591.79 1207.16 L1592.38 1207.16 L1592.96 1207.16 L1593.55 1207.16 L1594.14 1207.16 L1594.72 1207.16 L1595.31 1207.16 L1595.89 1207.16 L1596.48 1207.16 L1597.07 1207.16 L1597.65 1207.16 L1598.24 1207.16 L1598.83 1207.16 L1599.41 1207.16 L1600 1207.16 L1600.59 1207.16 L1601.17 1207.16 L1601.76 1207.16 L1602.34 1207.16 L1602.93 1207.16 L1603.52 1207.16 L1604.1 1207.16 L1604.69 1207.16 L1605.28 1207.16 L1605.86 1207.16 L1606.45 1207.16 L1607.04 1207.16 L1607.62 1207.16 L1608.21 1207.16 L1608.8 1207.16 L1609.38 1207.16 L1609.97 1207.16 L1610.55 1207.16 L1611.14 1207.16 L1611.73 1207.16 L1612.31 1207.16 L1612.9 1207.16 L1613.49 1207.16 L1614.07 1207.16 L1614.66 1207.16 L1615.25 1207.16 L1615.83 1207.16 L1616.42 1207.16 L1617.01 1207.16 L1617.59 1207.16 L1618.18 1207.16 L1618.76 1207.16 L1619.35 1207.16 L1619.94 1207.16 L1620.52 1207.16 L1621.11 1207.16 L1621.7 1207.16 L1622.28 1207.16 L1622.87 1207.16 L1623.46 1207.16 L1624.04 1207.16 L1624.63 1207.16 L1625.22 1207.16 L1625.8 1207.16 L1626.39 1207.16 L1626.97 1207.16 L1627.56 1207.16 L1628.15 1207.16 L1628.73 1207.16 L1629.32 1207.16 L1629.91 1207.16 L1630.49 1207.16 L1631.08 1207.16 L1631.67 1207.16 L1632.25 1207.16 L1632.84 1207.16 L1633.42 1207.16 L1634.01 1207.16 L1634.6 1207.16 L1635.18 1207.16 L1635.77 1207.16 L1636.36 1207.16 L1636.94 1207.16 L1637.53 1207.16 L1638.12 1207.16 L1638.7 1207.16 L1639.29 1207.16 L1639.88 1207.16 L1640.46 1207.16 L1641.05 1207.16 L1641.63 1207.16 L1642.22 1207.16 L1642.81 1207.16 L1643.39 1207.16 L1643.98 1207.16 L1644.57 1207.16 L1645.15 1207.16 L1645.74 1207.16 L1646.33 1207.16 L1646.91 1207.16 L1647.5 1207.16 L1648.09 1207.16 L1648.67 1207.16 L1649.26 1207.16 L1649.84 1207.16 L1650.43 1207.16 L1651.02 1207.16 L1651.6 1207.16 L1652.19 1207.16 L1652.78 1207.16 L1653.36 1207.16 L1653.95 1207.16 L1654.54 1207.16 L1655.12 1207.16 L1655.71 1207.16 L1656.29 1207.16 L1656.88 1207.16 L1657.47 1207.16 L1658.05 1207.16 L1658.64 1207.16 L1659.23 1207.16 L1659.81 1207.16 L1660.4 1207.16 L1660.99 1207.16 L1661.57 1207.16 L1662.16 1207.16 L1662.75 1207.16 L1663.33 1207.16 L1663.92 1207.16 L1664.5 1207.16 L1665.09 1207.16 L1665.68 1207.16 L1666.26 1207.16 L1666.85 1207.16 L1667.44 1207.16 L1668.02 1207.16 L1668.61 1207.16 L1669.2 1207.16 L1669.78 1207.16 L1670.37 1207.16 L1670.96 1207.16 L1671.54 1207.16 L1672.13 1207.16 L1672.71 1207.16 L1673.3 1207.16 L1673.89 1207.16 L1674.47 1207.16 L1675.06 1207.16 L1675.65 1207.16 L1676.23 1207.16 L1676.82 1207.16 L1677.41 1207.16 L1677.99 1207.16 L1678.58 1207.16 L1679.17 1207.16 L1679.75 1207.16 L1680.34 1207.16 L1680.92 1207.16 L1681.51 1207.16 L1682.1 1207.16 L1682.68 1207.16 L1683.27 1207.16 L1683.86 1207.16 L1684.44 1207.16 L1685.03 1207.16 L1685.62 1207.16 L1686.2 1207.16 L1686.79 1207.16 L1687.37 1207.16 L1687.96 1207.16 L1688.55 1207.16 L1689.13 1207.16 L1689.72 1207.16 L1690.31 1207.16 L1690.89 1207.16 L1691.48 1207.16 L1692.07 1207.16 L1692.65 1207.16 L1693.24 1207.16 L1693.83 1207.16 L1694.41 1207.16 L1695 1207.16 L1695.58 1207.16 L1696.17 1207.16 L1696.76 1207.16 L1697.34 1207.16 L1697.93 1207.16 L1698.52 1207.16 L1699.1 1207.16 L1699.69 1207.16 L1700.28 1207.16 L1700.86 1207.16 L1701.45 1207.16 L1702.04 1207.16 L1702.62 1207.16 L1703.21 1207.16 L1703.79 1207.16 L1704.38 1207.16 L1704.97 1207.16 L1705.55 1207.16 L1706.14 1207.16 L1706.73 1207.16 L1707.31 1207.16 L1707.9 1207.16 L1708.49 1207.16 L1709.07 1207.16 L1709.66 1207.16 L1710.24 1207.16 L1710.83 1207.16 L1711.42 1207.16 L1712 1207.16 L1712.59 1207.16 L1713.18 1207.16 L1713.76 1207.16 L1714.35 1207.16 L1714.94 1207.16 L1715.52 1207.16 L1716.11 1207.16 L1716.7 1207.16 L1717.28 1207.16 L1717.87 1207.16 L1718.45 1207.16 L1719.04 1207.16 L1719.63 1207.16 L1720.21 1207.16 L1720.8 1207.16 L1721.39 1207.16 L1721.97 1207.16 L1722.56 1207.16 L1723.15 1207.16 L1723.73 1207.16 L1724.32 1207.16 L1724.91 1207.16 L1725.49 1207.16 L1726.08 1207.16 L1726.66 1207.16 L1727.25 1207.16 L1727.84 1207.16 L1728.42 1207.16 L1729.01 1207.16 L1729.6 1207.16 L1730.18 1207.16 L1730.77 1207.16 L1731.36 1207.16 L1731.94 1207.16 L1732.53 1207.16 L1733.11 1207.16 L1733.7 1207.16 L1734.29 1207.16 L1734.87 1207.16 L1735.46 1207.16 L1736.05 1207.16 L1736.63 1207.16 L1737.22 1207.16 L1737.81 1207.16 L1738.39 1207.16 L1738.98 1207.16 L1739.57 1207.16 L1740.15 1207.16 L1740.74 1207.16 L1741.32 1207.16 L1741.91 1207.16 L1742.5 1207.16 L1743.08 1207.16 L1743.67 1207.16 L1744.26 1207.16 L1744.84 1207.16 L1745.43 1207.16 L1746.02 1207.16 L1746.6 1207.16 L1747.19 1207.16 L1747.78 1207.16 L1748.36 1207.16 L1748.95 1207.16 L1749.53 1207.16 L1750.12 1207.16 L1750.71 1207.16 L1751.29 1207.16 L1751.88 1207.16 L1752.47 1207.16 L1753.05 1207.16 L1753.64 1207.16 L1754.23 1207.16 L1754.81 1207.16 L1755.4 1207.16 L1755.99 1207.16 L1756.57 1207.16 L1757.16 1207.16 L1757.74 1207.16 L1758.33 1207.16 L1758.92 1207.16 L1759.5 1207.16 L1760.09 1207.16 L1760.68 1207.16 L1761.26 1207.16 L1761.85 1207.16 L1762.44 1207.16 L1763.02 1207.16 L1763.61 1207.16 L1764.19 1207.16 L1764.78 1207.16 L1765.37 1207.16 L1765.95 1207.16 L1766.54 1207.16 L1767.13 1207.16 L1767.71 1207.16 L1768.3 1207.16 L1768.89 1207.16 L1769.47 1207.16 L1770.06 1207.16 L1770.65 1207.16 L1771.23 1207.16 L1771.82 1207.16 L1772.4 1207.16 L1772.99 1207.16 L1773.58 1207.16 L1774.16 1207.16 L1774.75 1207.16 L1775.34 1207.16 L1775.92 1207.16 L1776.51 1207.16 L1777.1 1207.16 L1777.68 1207.16 L1778.27 1207.16 L1778.86 1207.16 L1779.44 1207.16 L1780.03 1207.16 L1780.61 1207.16 L1781.2 1207.16 L1781.79 1207.16 L1782.37 1207.16 L1782.96 1207.16 L1783.55 1207.16 L1784.13 1207.16 L1784.72 1207.16 L1785.31 1207.16 L1785.89 1207.16 L1786.48 1207.16 L1787.06 1207.16 L1787.65 1207.16 L1788.24 1207.16 L1788.82 1207.16 L1789.41 1207.16 L1790 1207.16 L1790.58 1207.16 L1791.17 1207.16 L1791.76 1207.16 L1792.34 1207.16 L1792.93 1207.16 L1793.52 1207.16 L1794.1 1207.16 L1794.69 1207.16 L1795.27 1207.16 L1795.86 1207.16 L1796.45 1207.16 L1797.03 1207.16 L1797.62 1207.16 L1798.21 1207.16 L1798.79 1207.16 L1799.38 1207.16 L1799.97 1207.16 L1800.55 1207.16 L1801.14 1207.16 L1801.73 1207.16 L1802.31 1207.16 L1802.9 1207.16 L1803.48 1207.16 L1804.07 1207.16 L1804.66 1207.16 L1805.24 1207.16 L1805.83 1207.16 L1806.42 1207.16 L1807 1207.16 L1807.59 1207.16 L1808.18 1207.16 L1808.76 1207.16 L1809.35 1207.16 L1809.94 1207.16 L1810.52 1207.16 L1811.11 1207.16 L1811.69 1207.16 L1812.28 1207.16 L1812.87 1207.16 L1813.45 1207.16 L1814.04 1207.16 L1814.63 1207.16 L1815.21 1207.16 L1815.8 1207.16 L1816.39 1207.16 L1816.97 1207.16 L1817.56 1207.16 L1818.14 1207.16 L1818.73 1207.16 L1819.32 1207.16 L1819.9 1207.16 L1820.49 1207.16 L1821.08 1207.16 L1821.66 1207.16 L1822.25 1207.16 L1822.84 1207.16 L1823.42 1207.16 L1824.01 1207.16 L1824.6 1207.16 L1825.18 1207.16 L1825.77 1207.16 L1826.35 1207.16 L1826.94 1207.16 L1827.53 1207.16 L1828.11 1207.16 L1828.7 1207.16 L1829.29 1207.16 L1829.87 1207.16 L1830.46 1207.16 L1831.05 1207.16 L1831.63 1207.16 L1832.22 1207.16 L1832.81 1207.16 L1833.39 1207.16 L1833.98 1207.16 L1834.56 1207.16 L1835.15 1207.16 L1835.74 1207.16 L1836.32 1207.16 L1836.91 1207.16 L1837.5 1207.16 L1838.08 1207.16 L1838.67 1207.16 L1839.26 1207.16 L1839.84 1207.16 L1840.43 1207.16 L1841.01 1207.16 L1841.6 1207.16 L1842.19 1207.16 L1842.77 1207.16 L1843.36 1207.16 L1843.95 1207.16 L1844.53 1207.16 L1845.12 1207.16 L1845.71 1207.16 L1846.29 1207.16 L1846.88 1207.16 L1847.47 1207.16 L1848.05 1207.16 L1848.64 1207.16 L1849.22 1207.16 L1849.81 1207.16 L1850.4 1207.16 L1850.98 1207.16 L1851.57 1207.16 L1852.16 1207.16 L1852.74 1207.16 L1853.33 1207.16 L1853.92 1207.16 L1854.5 1207.16 L1855.09 1207.16 L1855.68 1207.16 L1856.26 1207.16 L1856.85 1207.16 L1857.43 1207.16 L1858.02 1207.16 L1858.61 1207.16 L1859.19 1207.16 L1859.78 1207.16 L1860.37 1207.16 L1860.95 1207.16 L1861.54 1207.16 L1862.13 1207.16 L1862.71 1207.16 L1863.3 1207.16 L1863.88 1207.16 L1864.47 1207.16 L1865.06 1207.16 L1865.64 1207.16 L1866.23 1207.16 L1866.82 1207.16 L1867.4 1207.16 L1867.99 1207.16 L1868.58 1207.16 L1869.16 1207.16 L1869.75 1207.16 L1870.34 1207.16 L1870.92 1207.16 L1871.51 1207.16 L1872.09 1207.16 L1872.68 1207.16 L1873.27 1207.16 L1873.85 1207.16 L1874.44 1207.16 L1875.03 1207.16 L1875.61 1207.16 L1876.2 1207.16 L1876.79 1207.16 L1877.37 1207.16 L1877.96 1207.16 L1878.55 1207.16 L1879.13 1207.16 L1879.72 1207.16 L1880.3 1207.16 L1880.89 1207.16 L1881.48 1207.16 L1882.06 1207.16 L1882.65 1207.16 L1883.24 1207.16 L1883.82 1207.16 L1884.41 1207.16 L1885 1207.16 L1885.58 1207.16 L1886.17 1207.16 L1886.76 1207.16 L1887.34 1207.16 L1887.93 1207.16 L1888.51 1207.16 L1889.1 1207.16 L1889.69 1207.16 L1890.27 1207.16 L1890.86 1207.16 L1891.45 1207.16 L1892.03 1207.16 L1892.62 1207.16 L1893.21 1207.16 L1893.79 1207.16 L1894.38 1207.16 L1894.96 1207.16 L1895.55 1207.16 L1896.14 1207.16 L1896.72 1207.16 L1897.31 1207.16 L1897.9 1207.16 L1898.48 1207.16 L1899.07 1207.16 L1899.66 1207.16 L1900.24 1207.16 L1900.83 1207.16 L1901.42 1207.16 L1902 1207.16 L1902.59 1207.16 L1903.17 1207.16 L1903.76 1207.16 L1904.35 1207.16 L1904.93 1207.16 L1905.52 1207.16 L1906.11 1207.16 L1906.69 1207.16 L1907.28 1207.16 L1907.87 1207.16 L1908.45 1207.16 L1909.04 1207.16 L1909.63 1207.16 L1910.21 1207.16 L1910.8 1207.16 L1911.38 1207.16 L1911.97 1207.16 L1912.56 1207.16 L1913.14 1207.16 L1913.73 1207.16 L1914.32 1207.16 L1914.9 1207.16 L1915.49 1207.16 L1916.08 1207.16 L1916.66 1207.16 L1917.25 1207.16 L1917.83 1207.16 L1918.42 1207.16 L1919.01 1207.16 L1919.59 1207.16 L1920.18 1207.16 L1920.77 1207.16 L1921.35 1207.16 L1921.94 1207.16 L1922.53 1207.16 L1923.11 1207.16 L1923.7 1207.16 L1924.29 1207.16 L1924.87 1207.16 L1925.46 1207.16 L1926.04 1207.16 L1926.63 1207.16 L1927.22 1207.16 L1927.8 1207.16 L1928.39 1207.16 L1928.98 1207.16 L1929.56 1207.16 L1930.15 1207.16 L1930.74 1207.16 L1931.32 1207.16 L1931.91 1207.16 L1932.5 1207.16 L1933.08 1207.16 L1933.67 1207.16 L1934.25 1207.16 L1934.84 1207.16 L1935.43 1207.16 L1936.01 1207.16 L1936.6 1207.16 L1937.19 1207.16 L1937.77 1207.16 L1938.36 1207.16 L1938.95 1207.16 L1939.53 1207.16 L1940.12 1207.16 L1940.71 1207.16 L1941.29 1207.16 L1941.88 1207.16 L1942.46 1207.16 L1943.05 1207.16 L1943.64 1207.16 L1944.22 1207.16 L1944.81 1207.16 L1945.4 1207.16 L1945.98 1207.16 L1946.57 1207.16 L1947.16 1207.16 L1947.74 1207.16 L1948.33 1207.16 L1948.91 1207.16 L1949.5 1207.16 L1950.09 1207.16 L1950.67 1207.16 L1951.26 1207.16 L1951.85 1207.16 L1952.43 1207.16 L1953.02 1207.16 L1953.61 1207.16 L1954.19 1207.16 L1954.78 1207.16 L1955.37 1207.16 L1955.95 1207.16 L1956.54 1207.16 L1957.12 1207.16 L1957.71 1207.16 L1958.3 1207.16 L1958.88 1207.16 L1959.47 1207.16 L1960.06 1207.16 L1960.64 1207.16 L1961.23 1207.16 L1961.82 1207.16 L1962.4 1207.16 L1962.99 1207.16 L1963.58 1207.16 L1964.16 1207.16 L1964.75 1207.16 L1965.33 1207.16 L1965.92 1207.16 L1966.51 1207.16 L1967.09 1207.16 L1967.68 1207.16 L1968.27 1207.16 L1968.85 1207.16 L1969.44 1207.16 L1970.03 1207.16 L1970.61 1207.16 L1971.2 1207.16 L1971.78 1207.16 L1972.37 1207.16 L1972.96 1207.16 L1973.54 1207.16 L1974.13 1207.16 L1974.72 1207.16 L1975.3 1207.16 L1975.89 1207.16 L1976.48 1207.16 L1977.06 1207.16 L1977.65 1207.16 L1978.24 1207.16 L1978.82 1207.16 L1979.41 1207.16 L1979.99 1207.16 L1980.58 1207.16 L1981.17 1207.16 L1981.75 1207.16 L1982.34 1207.16 L1982.93 1207.16 L1983.51 1207.16 L1984.1 1207.16 L1984.69 1207.16 L1985.27 1207.16 L1985.86 1207.16 L1986.45 1207.16 L1987.03 1207.16 L1987.62 1207.16 L1988.2 1207.16 L1988.79 1207.16 L1989.38 1207.16 L1989.96 1207.16 L1990.55 1207.16 L1991.14 1207.16 L1991.72 1207.16 L1992.31 1207.16 L1992.9 1207.16 L1993.48 1207.16 L1994.07 1207.16 L1994.65 1207.16 L1995.24 1207.16 L1995.83 1207.16 L1996.41 1207.16 L1997 1207.16 L1997.59 1207.16 L1998.17 1207.16 L1998.76 1207.16 L1999.35 1207.16 L1999.93 1207.16 L2000.52 1207.16 L2001.11 1207.16 L2001.69 1207.16 L2002.28 1207.16 L2002.86 1207.16 L2003.45 1207.16 L2004.04 1207.16 L2004.62 1207.16 L2005.21 1207.16 L2005.8 1207.16 L2006.38 1207.16 L2006.97 1207.16 L2007.56 1207.16 L2008.14 1207.16 L2008.73 1207.16 L2009.32 1207.16 L2009.9 1207.16 L2010.49 1207.16 L2011.07 1207.16 L2011.66 1207.16 L2012.25 1207.16 L2012.83 1207.16 L2013.42 1207.16 L2014.01 1207.16 L2014.59 1207.16 L2015.18 1207.16 L2015.77 1207.16 L2016.35 1207.16 L2016.94 1207.16 L2017.53 1207.16 L2018.11 1207.16 L2018.7 1207.16 L2019.28 1207.16 L2019.87 1207.16 L2020.46 1207.16 L2021.04 1207.16 L2021.63 1207.16 L2022.22 1207.16 L2022.8 1207.16 L2023.39 1207.16 L2023.98 1207.16 L2024.56 1207.16 L2025.15 1207.16 L2025.73 1207.16 L2026.32 1207.16 L2026.91 1207.16 L2027.49 1207.16 L2028.08 1207.16 L2028.67 1207.16 L2029.25 1207.16 L2029.84 1207.16 L2030.43 1207.16 L2031.01 1207.16 L2031.6 1207.16 L2032.19 1207.16 L2032.77 1207.16 L2033.36 1207.16 L2033.94 1207.16 L2034.53 1207.16 L2035.12 1207.16 L2035.7 1207.16 L2036.29 1207.16 L2036.88 1207.16 L2037.46 1207.16 L2038.05 1207.16 L2038.64 1207.16 L2039.22 1207.16 L2039.81 1207.16 L2040.4 1207.16 L2040.98 1207.16 L2041.57 1207.16 L2042.15 1207.16 L2042.74 1207.16 L2043.33 1207.16 L2043.91 1207.16 L2044.5 1207.16 L2045.09 1207.16 L2045.67 1207.16 L2046.26 1207.16 L2046.85 1207.16 L2047.43 1207.16 L2048.02 1207.16 L2048.6 1207.16 L2049.19 1207.16 L2049.78 1207.16 L2050.36 1207.16 L2050.95 1207.16 L2051.54 1207.16 L2052.12 1207.16 L2052.71 1207.16 L2053.3 1207.16 L2053.88 1207.16 L2054.47 1207.16 L2055.06 1207.16 L2055.64 1207.16 L2056.23 1207.16 L2056.81 1207.16 L2057.4 1207.16 L2057.99 1207.16 L2058.57 1207.16 L2059.16 1207.16 L2059.75 1207.16 L2060.33 1207.16 L2060.92 1207.16 L2061.51 1207.16 L2062.09 1207.16 L2062.68 1207.16 L2063.27 1207.16 L2063.85 1207.16 L2064.44 1207.16 L2065.02 1207.16 L2065.61 1207.16 L2066.2 1207.16 L2066.78 1207.16 L2067.37 1207.16 L2067.96 1207.16 L2068.54 1207.16 L2069.13 1207.16 L2069.72 1207.16 L2070.3 1207.16 L2070.89 1207.16 L2071.48 1207.16 L2072.06 1207.16 L2072.65 1207.16 L2073.23 1207.16 L2073.82 1207.16 L2074.41 1207.16 L2074.99 1207.16 L2075.58 1207.16 L2076.17 1207.16 L2076.75 1207.16 L2077.34 1207.16 L2077.93 1207.16 L2078.51 1207.16 L2079.1 1207.16 L2079.68 1207.16 L2080.27 1207.16 L2080.86 1207.16 L2081.44 1207.16 L2082.03 1207.16 L2082.62 1207.16 L2083.2 1207.16 L2083.79 1207.16 L2084.38 1207.16 L2084.96 1207.16 L2085.55 1207.16 L2086.14 1207.16 L2086.72 1207.16 L2087.31 1207.16 L2087.89 1207.16 L2088.48 1207.16 L2089.07 1207.16 L2089.65 1207.16 L2090.24 1207.16 L2090.83 1207.16 L2091.41 1207.16 L2092 1207.16 L2092.59 1207.16 L2093.17 1207.16 L2093.76 1207.16 L2094.35 1207.16 L2094.93 1207.16 L2095.52 1207.16 L2096.1 1207.16 L2096.69 1207.16 L2097.28 1207.16 L2097.86 1207.16 L2098.45 1207.16 L2099.04 1207.16 L2099.62 1207.16 L2100.21 1207.16 L2100.8 1207.16 L2101.38 1207.16 L2101.97 1207.16 L2102.55 1207.16 L2103.14 1207.16 L2103.73 1207.16 L2104.31 1207.16 L2104.9 1207.16 L2105.49 1207.16 L2106.07 1207.16 L2106.66 1207.16 L2107.25 1207.16 L2107.83 1207.16 L2108.42 1207.16 L2109.01 1207.16 L2109.59 1207.16 L2110.18 1207.16 L2110.76 1207.16 L2111.35 1207.16 L2111.94 1207.16 L2112.52 1207.16 L2113.11 1207.16 L2113.7 1207.16 L2114.28 1207.16 L2114.87 1207.16 L2115.46 1207.16 L2116.04 1207.16 L2116.63 1207.16 L2117.22 1207.16 L2117.8 1207.16 L2118.39 1207.16 L2118.97 1207.16 L2119.56 1207.16 L2120.15 1207.16 L2120.73 1207.16 L2121.32 1207.16 L2121.91 1207.16 L2122.49 1207.16 L2123.08 1207.16 L2123.67 1207.16 L2124.25 1207.16 L2124.84 1207.16 L2125.42 1207.16 L2126.01 1207.16 L2126.6 1207.16 L2127.18 1207.16 L2127.77 1207.16 L2128.36 1207.16 L2128.94 1207.16 L2129.53 1207.16 L2130.12 1207.16 L2130.7 1207.16 L2131.29 1207.16 L2131.88 1207.16 L2132.46 1207.16 L2133.05 1207.16 L2133.63 1207.16 L2134.22 1207.16 L2134.81 1207.16 L2135.39 1207.16 L2135.98 1207.16 L2136.57 1207.16 L2137.15 1207.16 L2137.74 1207.16 L2138.33 1207.16 L2138.91 1207.16 L2139.5 1207.16 L2140.09 1207.16 L2140.67 1207.16 L2141.26 1207.16 L2141.84 1207.16 L2142.43 1207.16 L2143.02 1207.16 L2143.6 1207.16 L2144.19 1207.16 L2144.78 1207.16 L2145.36 1207.16 L2145.95 1207.16 L2146.54 1207.16 L2147.12 1207.16 L2147.71 1207.16 L2148.3 1207.16 L2148.88 1207.16 L2149.47 1207.16 L2150.05 1207.16 L2150.64 1207.16 L2151.23 1207.16 L2151.81 1207.16 L2152.4 1207.16 L2152.99 1207.16 L2153.57 1207.16 L2154.16 1207.16 L2154.75 1207.16 L2155.33 1207.16 L2155.92 1207.16 L2156.5 1207.16 L2157.09 1207.16 L2157.68 1207.16 L2158.26 1207.16 L2158.26 1206.44 L2157.68 1206.44 L2157.09 1206.44 L2156.5 1206.44 L2155.92 1206.44 L2155.33 1206.44 L2154.75 1206.44 L2154.16 1206.44 L2153.57 1206.44 L2152.99 1206.44 L2152.4 1206.44 L2151.81 1206.44 L2151.23 1206.44 L2150.64 1206.44 L2150.05 1206.44 L2149.47 1206.44 L2148.88 1206.44 L2148.3 1206.44 L2147.71 1206.44 L2147.12 1206.44 L2146.54 1206.44 L2145.95 1206.44 L2145.36 1206.44 L2144.78 1206.44 L2144.19 1206.44 L2143.6 1206.44 L2143.02 1206.44 L2142.43 1206.44 L2141.84 1206.44 L2141.26 1206.44 L2140.67 1206.44 L2140.09 1206.44 L2139.5 1206.44 L2138.91 1206.44 L2138.33 1206.44 L2137.74 1206.44 L2137.15 1206.44 L2136.57 1206.44 L2135.98 1206.44 L2135.39 1206.44 L2134.81 1206.44 L2134.22 1206.44 L2133.63 1206.44 L2133.05 1206.44 L2132.46 1206.44 L2131.88 1206.44 L2131.29 1206.44 L2130.7 1206.44 L2130.12 1206.44 L2129.53 1206.44 L2128.94 1206.44 L2128.36 1206.44 L2127.77 1206.44 L2127.18 1206.44 L2126.6 1206.44 L2126.01 1206.44 L2125.42 1206.44 L2124.84 1206.44 L2124.25 1206.44 L2123.67 1206.44 L2123.08 1206.44 L2122.49 1206.44 L2121.91 1206.44 L2121.32 1206.44 L2120.73 1206.44 L2120.15 1206.44 L2119.56 1206.44 L2118.97 1206.44 L2118.39 1206.44 L2117.8 1206.44 L2117.22 1206.44 L2116.63 1206.44 L2116.04 1206.44 L2115.46 1206.44 L2114.87 1206.44 L2114.28 1206.44 L2113.7 1206.44 L2113.11 1206.44 L2112.52 1206.44 L2111.94 1206.44 L2111.35 1206.44 L2110.76 1206.44 L2110.18 1206.44 L2109.59 1206.44 L2109.01 1206.44 L2108.42 1206.44 L2107.83 1206.44 L2107.25 1206.44 L2106.66 1206.44 L2106.07 1206.44 L2105.49 1206.44 L2104.9 1206.44 L2104.31 1206.44 L2103.73 1206.44 L2103.14 1206.44 L2102.55 1206.44 L2101.97 1206.44 L2101.38 1206.44 L2100.8 1206.44 L2100.21 1206.44 L2099.62 1206.44 L2099.04 1206.44 L2098.45 1206.44 L2097.86 1206.44 L2097.28 1206.44 L2096.69 1206.44 L2096.1 1206.44 L2095.52 1206.44 L2094.93 1206.44 L2094.35 1206.44 L2093.76 1206.44 L2093.17 1206.44 L2092.59 1206.44 L2092 1206.44 L2091.41 1206.44 L2090.83 1206.44 L2090.24 1206.44 L2089.65 1206.44 L2089.07 1206.44 L2088.48 1206.44 L2087.89 1206.44 L2087.31 1206.44 L2086.72 1206.44 L2086.14 1206.44 L2085.55 1206.44 L2084.96 1206.44 L2084.38 1206.44 L2083.79 1206.44 L2083.2 1206.44 L2082.62 1206.44 L2082.03 1206.44 L2081.44 1206.44 L2080.86 1206.44 L2080.27 1206.44 L2079.68 1206.44 L2079.1 1206.44 L2078.51 1206.44 L2077.93 1206.44 L2077.34 1206.44 L2076.75 1206.44 L2076.17 1206.44 L2075.58 1206.44 L2074.99 1206.44 L2074.41 1206.44 L2073.82 1206.44 L2073.23 1206.44 L2072.65 1206.44 L2072.06 1206.44 L2071.48 1206.44 L2070.89 1206.44 L2070.3 1206.44 L2069.72 1206.44 L2069.13 1206.44 L2068.54 1206.44 L2067.96 1206.44 L2067.37 1206.44 L2066.78 1206.44 L2066.2 1206.44 L2065.61 1206.44 L2065.02 1206.44 L2064.44 1206.44 L2063.85 1206.44 L2063.27 1206.44 L2062.68 1206.44 L2062.09 1206.44 L2061.51 1206.44 L2060.92 1206.44 L2060.33 1206.44 L2059.75 1206.44 L2059.16 1206.44 L2058.57 1206.44 L2057.99 1206.44 L2057.4 1206.44 L2056.81 1206.44 L2056.23 1206.44 L2055.64 1206.44 L2055.06 1206.44 L2054.47 1206.44 L2053.88 1206.44 L2053.3 1206.44 L2052.71 1206.44 L2052.12 1206.44 L2051.54 1206.44 L2050.95 1206.44 L2050.36 1206.44 L2049.78 1206.44 L2049.19 1206.44 L2048.6 1206.44 L2048.02 1206.44 L2047.43 1206.44 L2046.85 1206.44 L2046.26 1206.44 L2045.67 1206.44 L2045.09 1206.44 L2044.5 1206.44 L2043.91 1206.44 L2043.33 1206.44 L2042.74 1206.44 L2042.15 1206.44 L2041.57 1206.44 L2040.98 1206.44 L2040.4 1206.44 L2039.81 1206.44 L2039.22 1206.44 L2038.64 1206.44 L2038.05 1206.44 L2037.46 1206.44 L2036.88 1206.44 L2036.29 1206.44 L2035.7 1206.44 L2035.12 1206.44 L2034.53 1206.44 L2033.94 1206.44 L2033.36 1206.44 L2032.77 1206.44 L2032.19 1206.44 L2031.6 1206.44 L2031.01 1206.44 L2030.43 1206.44 L2029.84 1206.44 L2029.25 1206.44 L2028.67 1206.44 L2028.08 1206.44 L2027.49 1206.44 L2026.91 1206.44 L2026.32 1206.44 L2025.73 1206.44 L2025.15 1206.44 L2024.56 1206.44 L2023.98 1206.44 L2023.39 1206.44 L2022.8 1206.44 L2022.22 1206.44 L2021.63 1206.44 L2021.04 1206.44 L2020.46 1206.44 L2019.87 1206.44 L2019.28 1206.44 L2018.7 1206.44 L2018.11 1206.44 L2017.53 1206.44 L2016.94 1206.44 L2016.35 1206.44 L2015.77 1206.44 L2015.18 1206.44 L2014.59 1206.44 L2014.01 1206.44 L2013.42 1206.44 L2012.83 1206.44 L2012.25 1206.44 L2011.66 1206.44 L2011.07 1206.44 L2010.49 1206.44 L2009.9 1206.44 L2009.32 1206.44 L2008.73 1206.44 L2008.14 1206.44 L2007.56 1206.44 L2006.97 1206.44 L2006.38 1206.44 L2005.8 1206.44 L2005.21 1206.44 L2004.62 1206.44 L2004.04 1206.44 L2003.45 1206.44 L2002.86 1206.44 L2002.28 1206.44 L2001.69 1206.44 L2001.11 1206.44 L2000.52 1206.44 L1999.93 1206.44 L1999.35 1206.44 L1998.76 1206.44 L1998.17 1206.44 L1997.59 1206.44 L1997 1206.44 L1996.41 1206.44 L1995.83 1206.44 L1995.24 1206.44 L1994.65 1206.44 L1994.07 1206.44 L1993.48 1206.44 L1992.9 1206.44 L1992.31 1206.44 L1991.72 1206.44 L1991.14 1206.44 L1990.55 1206.44 L1989.96 1206.44 L1989.38 1206.44 L1988.79 1206.44 L1988.2 1206.44 L1987.62 1206.44 L1987.03 1206.44 L1986.45 1206.44 L1985.86 1206.44 L1985.27 1206.44 L1984.69 1206.44 L1984.1 1206.44 L1983.51 1206.44 L1982.93 1206.44 L1982.34 1206.44 L1981.75 1206.44 L1981.17 1206.44 L1980.58 1206.44 L1979.99 1206.44 L1979.41 1206.44 L1978.82 1206.44 L1978.24 1206.44 L1977.65 1206.44 L1977.06 1206.44 L1976.48 1206.44 L1975.89 1206.44 L1975.3 1206.44 L1974.72 1206.44 L1974.13 1206.44 L1973.54 1206.44 L1972.96 1206.44 L1972.37 1206.44 L1971.78 1206.44 L1971.2 1206.44 L1970.61 1206.44 L1970.03 1206.44 L1969.44 1206.44 L1968.85 1206.44 L1968.27 1206.44 L1967.68 1206.44 L1967.09 1206.44 L1966.51 1206.44 L1965.92 1206.44 L1965.33 1206.44 L1964.75 1206.44 L1964.16 1206.44 L1963.58 1206.44 L1962.99 1206.44 L1962.4 1206.44 L1961.82 1206.44 L1961.23 1206.44 L1960.64 1206.44 L1960.06 1206.44 L1959.47 1206.44 L1958.88 1206.44 L1958.3 1206.44 L1957.71 1206.44 L1957.12 1206.44 L1956.54 1206.44 L1955.95 1206.44 L1955.37 1206.44 L1954.78 1206.44 L1954.19 1206.44 L1953.61 1206.44 L1953.02 1206.44 L1952.43 1206.44 L1951.85 1206.44 L1951.26 1206.44 L1950.67 1206.44 L1950.09 1206.44 L1949.5 1206.44 L1948.91 1206.44 L1948.33 1206.44 L1947.74 1206.44 L1947.16 1206.44 L1946.57 1206.44 L1945.98 1206.44 L1945.4 1206.44 L1944.81 1206.44 L1944.22 1206.44 L1943.64 1206.44 L1943.05 1206.44 L1942.46 1206.44 L1941.88 1206.44 L1941.29 1206.44 L1940.71 1206.44 L1940.12 1206.44 L1939.53 1206.44 L1938.95 1206.44 L1938.36 1206.44 L1937.77 1206.44 L1937.19 1206.44 L1936.6 1206.44 L1936.01 1206.44 L1935.43 1206.44 L1934.84 1206.44 L1934.25 1206.44 L1933.67 1206.44 L1933.08 1206.44 L1932.5 1206.44 L1931.91 1206.44 L1931.32 1206.44 L1930.74 1206.44 L1930.15 1206.44 L1929.56 1206.44 L1928.98 1206.44 L1928.39 1206.44 L1927.8 1206.44 L1927.22 1206.44 L1926.63 1206.44 L1926.04 1206.44 L1925.46 1206.44 L1924.87 1206.44 L1924.29 1206.44 L1923.7 1206.44 L1923.11 1206.44 L1922.53 1206.44 L1921.94 1206.44 L1921.35 1206.44 L1920.77 1206.44 L1920.18 1206.44 L1919.59 1206.44 L1919.01 1206.44 L1918.42 1206.44 L1917.83 1206.44 L1917.25 1206.44 L1916.66 1206.44 L1916.08 1206.44 L1915.49 1206.44 L1914.9 1206.44 L1914.32 1206.44 L1913.73 1206.44 L1913.14 1206.44 L1912.56 1206.44 L1911.97 1206.44 L1911.38 1206.44 L1910.8 1206.44 L1910.21 1206.44 L1909.63 1206.44 L1909.04 1206.44 L1908.45 1206.44 L1907.87 1206.44 L1907.28 1206.44 L1906.69 1206.44 L1906.11 1206.44 L1905.52 1206.44 L1904.93 1206.44 L1904.35 1206.44 L1903.76 1206.44 L1903.17 1206.44 L1902.59 1206.44 L1902 1206.44 L1901.42 1206.44 L1900.83 1206.44 L1900.24 1206.44 L1899.66 1206.44 L1899.07 1206.44 L1898.48 1206.44 L1897.9 1206.44 L1897.31 1206.44 L1896.72 1206.44 L1896.14 1206.44 L1895.55 1206.44 L1894.96 1206.44 L1894.38 1206.44 L1893.79 1206.44 L1893.21 1206.44 L1892.62 1206.44 L1892.03 1206.44 L1891.45 1206.44 L1890.86 1206.44 L1890.27 1206.44 L1889.69 1206.44 L1889.1 1206.44 L1888.51 1206.44 L1887.93 1206.44 L1887.34 1206.44 L1886.76 1206.44 L1886.17 1206.44 L1885.58 1206.44 L1885 1206.44 L1884.41 1206.44 L1883.82 1206.44 L1883.24 1206.44 L1882.65 1206.44 L1882.06 1206.44 L1881.48 1206.44 L1880.89 1206.44 L1880.3 1206.44 L1879.72 1206.44 L1879.13 1206.44 L1878.55 1206.44 L1877.96 1206.44 L1877.37 1206.44 L1876.79 1206.44 L1876.2 1206.44 L1875.61 1206.44 L1875.03 1206.44 L1874.44 1206.44 L1873.85 1206.44 L1873.27 1206.44 L1872.68 1206.44 L1872.09 1206.44 L1871.51 1206.44 L1870.92 1206.44 L1870.34 1206.44 L1869.75 1206.44 L1869.16 1206.44 L1868.58 1206.44 L1867.99 1206.44 L1867.4 1206.44 L1866.82 1206.44 L1866.23 1206.44 L1865.64 1206.44 L1865.06 1206.44 L1864.47 1206.44 L1863.88 1206.44 L1863.3 1206.44 L1862.71 1206.44 L1862.13 1206.44 L1861.54 1206.44 L1860.95 1206.44 L1860.37 1206.44 L1859.78 1206.44 L1859.19 1206.44 L1858.61 1206.44 L1858.02 1206.44 L1857.43 1206.44 L1856.85 1206.44 L1856.26 1206.44 L1855.68 1206.44 L1855.09 1206.44 L1854.5 1206.44 L1853.92 1206.44 L1853.33 1206.44 L1852.74 1206.44 L1852.16 1206.44 L1851.57 1206.44 L1850.98 1206.44 L1850.4 1206.44 L1849.81 1206.44 L1849.22 1206.44 L1848.64 1206.44 L1848.05 1206.44 L1847.47 1206.44 L1846.88 1206.44 L1846.29 1206.44 L1845.71 1206.44 L1845.12 1206.44 L1844.53 1206.44 L1843.95 1206.44 L1843.36 1206.44 L1842.77 1206.44 L1842.19 1206.44 L1841.6 1206.44 L1841.01 1206.44 L1840.43 1206.44 L1839.84 1206.44 L1839.26 1206.44 L1838.67 1206.44 L1838.08 1206.44 L1837.5 1206.44 L1836.91 1206.44 L1836.32 1206.44 L1835.74 1206.44 L1835.15 1206.44 L1834.56 1206.44 L1833.98 1206.44 L1833.39 1206.44 L1832.81 1206.44 L1832.22 1206.44 L1831.63 1206.44 L1831.05 1206.44 L1830.46 1206.44 L1829.87 1206.44 L1829.29 1206.44 L1828.7 1206.44 L1828.11 1206.44 L1827.53 1206.44 L1826.94 1206.44 L1826.35 1206.44 L1825.77 1206.44 L1825.18 1206.44 L1824.6 1206.44 L1824.01 1206.44 L1823.42 1206.44 L1822.84 1206.44 L1822.25 1206.44 L1821.66 1206.44 L1821.08 1206.44 L1820.49 1206.44 L1819.9 1206.44 L1819.32 1206.44 L1818.73 1206.44 L1818.14 1206.44 L1817.56 1206.44 L1816.97 1206.44 L1816.39 1206.44 L1815.8 1206.44 L1815.21 1206.44 L1814.63 1206.44 L1814.04 1206.44 L1813.45 1206.44 L1812.87 1206.44 L1812.28 1206.44 L1811.69 1206.44 L1811.11 1206.44 L1810.52 1206.44 L1809.94 1206.44 L1809.35 1206.44 L1808.76 1206.44 L1808.18 1206.44 L1807.59 1206.44 L1807 1206.44 L1806.42 1206.44 L1805.83 1206.44 L1805.24 1206.44 L1804.66 1206.44 L1804.07 1206.44 L1803.48 1206.44 L1802.9 1206.44 L1802.31 1206.44 L1801.73 1206.44 L1801.14 1206.44 L1800.55 1206.44 L1799.97 1206.44 L1799.38 1206.44 L1798.79 1206.44 L1798.21 1206.44 L1797.62 1206.44 L1797.03 1206.44 L1796.45 1206.44 L1795.86 1206.44 L1795.27 1206.44 L1794.69 1206.44 L1794.1 1206.44 L1793.52 1206.44 L1792.93 1206.44 L1792.34 1206.44 L1791.76 1206.44 L1791.17 1206.44 L1790.58 1206.44 L1790 1206.44 L1789.41 1206.44 L1788.82 1206.44 L1788.24 1206.44 L1787.65 1206.44 L1787.06 1206.44 L1786.48 1206.44 L1785.89 1206.44 L1785.31 1206.44 L1784.72 1206.44 L1784.13 1206.44 L1783.55 1206.44 L1782.96 1206.44 L1782.37 1206.44 L1781.79 1206.44 L1781.2 1206.44 L1780.61 1206.44 L1780.03 1206.44 L1779.44 1206.44 L1778.86 1206.44 L1778.27 1206.44 L1777.68 1206.44 L1777.1 1206.44 L1776.51 1206.44 L1775.92 1206.44 L1775.34 1206.44 L1774.75 1206.44 L1774.16 1206.44 L1773.58 1206.44 L1772.99 1206.44 L1772.4 1206.44 L1771.82 1206.44 L1771.23 1206.44 L1770.65 1206.44 L1770.06 1206.44 L1769.47 1206.44 L1768.89 1206.44 L1768.3 1206.44 L1767.71 1206.44 L1767.13 1206.44 L1766.54 1206.44 L1765.95 1206.44 L1765.37 1206.44 L1764.78 1206.44 L1764.19 1206.44 L1763.61 1206.44 L1763.02 1206.44 L1762.44 1206.44 L1761.85 1206.44 L1761.26 1206.44 L1760.68 1206.44 L1760.09 1206.44 L1759.5 1206.44 L1758.92 1206.44 L1758.33 1206.44 L1757.74 1206.44 L1757.16 1206.44 L1756.57 1206.44 L1755.99 1206.44 L1755.4 1206.44 L1754.81 1206.44 L1754.23 1206.44 L1753.64 1206.44 L1753.05 1206.44 L1752.47 1206.44 L1751.88 1206.44 L1751.29 1206.44 L1750.71 1206.44 L1750.12 1206.44 L1749.53 1206.44 L1748.95 1206.44 L1748.36 1206.44 L1747.78 1206.44 L1747.19 1206.44 L1746.6 1206.44 L1746.02 1206.44 L1745.43 1206.44 L1744.84 1206.44 L1744.26 1206.44 L1743.67 1206.44 L1743.08 1206.44 L1742.5 1206.44 L1741.91 1206.44 L1741.32 1206.44 L1740.74 1206.44 L1740.15 1206.44 L1739.57 1206.44 L1738.98 1206.44 L1738.39 1206.44 L1737.81 1206.44 L1737.22 1206.44 L1736.63 1206.44 L1736.05 1206.44 L1735.46 1206.44 L1734.87 1206.44 L1734.29 1206.44 L1733.7 1206.44 L1733.11 1206.44 L1732.53 1206.44 L1731.94 1206.44 L1731.36 1206.44 L1730.77 1206.44 L1730.18 1206.44 L1729.6 1206.44 L1729.01 1206.44 L1728.42 1206.44 L1727.84 1206.44 L1727.25 1206.44 L1726.66 1206.44 L1726.08 1206.44 L1725.49 1206.44 L1724.91 1206.44 L1724.32 1206.44 L1723.73 1206.44 L1723.15 1206.44 L1722.56 1206.44 L1721.97 1206.44 L1721.39 1206.44 L1720.8 1206.44 L1720.21 1206.44 L1719.63 1206.44 L1719.04 1206.44 L1718.45 1206.44 L1717.87 1206.44 L1717.28 1206.44 L1716.7 1206.44 L1716.11 1206.44 L1715.52 1206.44 L1714.94 1206.44 L1714.35 1206.44 L1713.76 1206.44 L1713.18 1206.44 L1712.59 1206.44 L1712 1206.44 L1711.42 1206.44 L1710.83 1206.44 L1710.24 1206.44 L1709.66 1206.44 L1709.07 1206.44 L1708.49 1206.44 L1707.9 1206.44 L1707.31 1206.44 L1706.73 1206.44 L1706.14 1206.44 L1705.55 1206.44 L1704.97 1206.44 L1704.38 1206.44 L1703.79 1206.44 L1703.21 1206.44 L1702.62 1206.44 L1702.04 1206.44 L1701.45 1206.44 L1700.86 1206.44 L1700.28 1206.44 L1699.69 1206.44 L1699.1 1206.44 L1698.52 1206.44 L1697.93 1206.44 L1697.34 1206.44 L1696.76 1206.44 L1696.17 1206.44 L1695.58 1206.44 L1695 1206.44 L1694.41 1206.44 L1693.83 1206.44 L1693.24 1206.44 L1692.65 1206.44 L1692.07 1206.44 L1691.48 1206.44 L1690.89 1206.44 L1690.31 1206.44 L1689.72 1206.44 L1689.13 1206.44 L1688.55 1206.44 L1687.96 1206.44 L1687.37 1206.44 L1686.79 1206.44 L1686.2 1206.44 L1685.62 1206.44 L1685.03 1206.44 L1684.44 1206.44 L1683.86 1206.44 L1683.27 1206.44 L1682.68 1206.44 L1682.1 1206.44 L1681.51 1206.44 L1680.92 1206.44 L1680.34 1206.44 L1679.75 1206.44 L1679.17 1206.44 L1678.58 1206.44 L1677.99 1206.44 L1677.41 1206.44 L1676.82 1206.44 L1676.23 1206.44 L1675.65 1206.44 L1675.06 1206.44 L1674.47 1206.44 L1673.89 1206.44 L1673.3 1206.44 L1672.71 1206.44 L1672.13 1206.44 L1671.54 1206.44 L1670.96 1206.44 L1670.37 1206.44 L1669.78 1206.44 L1669.2 1206.44 L1668.61 1206.44 L1668.02 1206.44 L1667.44 1206.44 L1666.85 1206.44 L1666.26 1206.44 L1665.68 1206.44 L1665.09 1206.44 L1664.5 1206.44 L1663.92 1206.44 L1663.33 1206.44 L1662.75 1206.44 L1662.16 1206.44 L1661.57 1206.44 L1660.99 1206.44 L1660.4 1206.44 L1659.81 1206.44 L1659.23 1206.44 L1658.64 1206.44 L1658.05 1206.44 L1657.47 1206.44 L1656.88 1206.44 L1656.29 1206.44 L1655.71 1206.44 L1655.12 1206.44 L1654.54 1206.44 L1653.95 1206.44 L1653.36 1206.44 L1652.78 1206.44 L1652.19 1206.44 L1651.6 1206.44 L1651.02 1206.44 L1650.43 1206.44 L1649.84 1206.44 L1649.26 1206.44 L1648.67 1206.44 L1648.09 1206.44 L1647.5 1206.44 L1646.91 1206.44 L1646.33 1206.44 L1645.74 1206.44 L1645.15 1206.44 L1644.57 1206.44 L1643.98 1206.44 L1643.39 1206.44 L1642.81 1206.44 L1642.22 1206.44 L1641.63 1206.44 L1641.05 1206.44 L1640.46 1206.44 L1639.88 1206.44 L1639.29 1206.44 L1638.7 1206.44 L1638.12 1206.44 L1637.53 1206.44 L1636.94 1206.44 L1636.36 1206.44 L1635.77 1206.44 L1635.18 1206.44 L1634.6 1206.44 L1634.01 1206.44 L1633.42 1206.44 L1632.84 1206.44 L1632.25 1206.44 L1631.67 1206.44 L1631.08 1206.44 L1630.49 1206.44 L1629.91 1206.44 L1629.32 1206.44 L1628.73 1206.44 L1628.15 1206.44 L1627.56 1206.44 L1626.97 1206.44 L1626.39 1206.44 L1625.8 1206.44 L1625.22 1206.44 L1624.63 1206.44 L1624.04 1206.44 L1623.46 1206.44 L1622.87 1206.44 L1622.28 1206.44 L1621.7 1206.44 L1621.11 1206.44 L1620.52 1206.44 L1619.94 1206.44 L1619.35 1206.44 L1618.76 1206.44 L1618.18 1206.44 L1617.59 1206.44 L1617.01 1206.44 L1616.42 1206.44 L1615.83 1206.44 L1615.25 1206.44 L1614.66 1206.44 L1614.07 1206.44 L1613.49 1206.44 L1612.9 1206.44 L1612.31 1206.44 L1611.73 1206.44 L1611.14 1206.44 L1610.55 1206.44 L1609.97 1206.44 L1609.38 1206.44 L1608.8 1206.44 L1608.21 1206.44 L1607.62 1206.44 L1607.04 1206.44 L1606.45 1206.44 L1605.86 1206.44 L1605.28 1206.44 L1604.69 1206.44 L1604.1 1206.44 L1603.52 1206.44 L1602.93 1206.44 L1602.34 1206.44 L1601.76 1206.44 L1601.17 1206.44 L1600.59 1206.44 L1600 1206.44 L1599.41 1206.44 L1598.83 1206.44 L1598.24 1206.44 L1597.65 1206.44 L1597.07 1206.44 L1596.48 1206.44 L1595.89 1206.44 L1595.31 1206.44 L1594.72 1206.44 L1594.14 1206.44 L1593.55 1206.44 L1592.96 1206.44 L1592.38 1206.44 L1591.79 1206.44 L1591.2 1206.44 L1590.62 1206.44 L1590.03 1206.44 L1589.44 1206.44 L1588.86 1206.44 L1588.27 1206.44 L1587.68 1206.44 L1587.1 1206.44 L1586.51 1206.44 L1585.93 1206.44 L1585.34 1206.44 L1584.75 1206.44 L1584.17 1206.44 L1583.58 1206.44 L1582.99 1206.44 L1582.41 1206.44 L1581.82 1206.44 L1581.23 1206.44 L1580.65 1206.44 L1580.06 1206.44 L1579.47 1206.44 L1578.89 1206.44 L1578.3 1206.44 L1577.72 1206.44 L1577.13 1206.44 L1576.54 1206.44 L1575.96 1206.44 L1575.37 1206.44 L1574.78 1206.44 L1574.2 1206.44 L1573.61 1206.44 L1573.02 1206.44 L1572.44 1206.44 L1571.85 1206.44 L1571.27 1206.44 L1570.68 1206.44 L1570.09 1206.44 L1569.51 1206.44 L1568.92 1206.44 L1568.33 1206.44 L1567.75 1206.44 L1567.16 1206.44 L1566.57 1206.44 L1565.99 1206.44 L1565.4 1206.44 L1564.81 1206.44 L1564.23 1206.44 L1563.64 1206.44 L1563.06 1206.44 L1562.47 1206.44 L1561.88 1206.44 L1561.3 1206.44 L1560.71 1206.44 L1560.12 1206.44 L1559.54 1206.44 L1558.95 1206.44 L1558.36 1206.44 L1557.78 1206.44 L1557.19 1206.44 L1556.6 1206.44 L1556.02 1206.44 L1555.43 1206.44 L1554.85 1206.44 L1554.26 1206.44 L1553.67 1206.44 L1553.09 1206.44 L1552.5 1206.44 L1551.91 1206.44 L1551.33 1206.44 L1550.74 1206.44 L1550.15 1206.44 L1549.57 1206.44 L1548.98 1206.44 L1548.4 1206.44 L1547.81 1206.44 L1547.22 1206.44 L1546.64 1206.44 L1546.05 1206.44 L1545.46 1206.44 L1544.88 1206.44 L1544.29 1206.44 L1543.7 1206.44 L1543.12 1206.44 L1542.53 1206.44 L1541.94 1206.44 L1541.36 1206.44 L1540.77 1206.44 L1540.19 1206.44 L1539.6 1206.44 L1539.01 1206.44 L1538.43 1206.44 L1537.84 1206.44 L1537.25 1206.44 L1536.67 1206.44 L1536.08 1206.44 L1535.49 1206.44 L1534.91 1206.44 L1534.32 1206.44 L1533.73 1206.44 L1533.15 1206.44 L1532.56 1206.44 L1531.98 1206.44 L1531.39 1206.44 L1530.8 1206.44 L1530.22 1206.44 L1529.63 1206.44 L1529.04 1206.44 L1528.46 1206.44 L1527.87 1206.44 L1527.28 1206.44 L1526.7 1206.44 L1526.11 1206.44 L1525.52 1206.44 L1524.94 1206.44 L1524.35 1206.44 L1523.77 1206.44 L1523.18 1206.44 L1522.59 1206.44 L1522.01 1206.44 L1521.42 1206.44 L1520.83 1206.44 L1520.25 1206.44 L1519.66 1206.44 L1519.07 1206.44 L1518.49 1206.44 L1517.9 1206.44 L1517.32 1206.44 L1516.73 1206.44 L1516.14 1206.44 L1515.56 1206.44 L1514.97 1206.44 L1514.38 1206.44 L1513.8 1206.44 L1513.21 1206.44 L1512.62 1206.44 L1512.04 1206.44 L1511.45 1206.44 L1510.86 1206.44 L1510.28 1206.44 L1509.69 1206.44 L1509.11 1206.44 L1508.52 1206.44 L1507.93 1206.44 L1507.35 1206.44 L1506.76 1206.44 L1506.17 1206.44 L1505.59 1206.44 L1505 1206.44 L1504.41 1206.44 L1503.83 1206.44 L1503.24 1206.44 L1502.65 1206.44 L1502.07 1206.44 L1501.48 1206.44 L1500.9 1206.44 L1500.31 1206.44 L1499.72 1206.44 L1499.14 1206.44 L1498.55 1206.44 L1497.96 1206.44 L1497.38 1206.44 L1496.79 1206.44 L1496.2 1206.44 L1495.62 1206.44 L1495.03 1206.44 L1494.45 1206.44 L1493.86 1206.44 L1493.27 1206.44 L1492.69 1206.44 L1492.1 1206.44 L1491.51 1206.44 L1490.93 1206.44 L1490.34 1206.44 L1489.75 1206.44 L1489.17 1206.44 L1488.58 1206.44 L1487.99 1206.44 L1487.41 1206.44 L1486.82 1206.44 L1486.24 1206.44 L1485.65 1206.44 L1485.06 1206.44 L1484.48 1206.44 L1483.89 1206.44 L1483.3 1206.44 L1482.72 1206.44 L1482.13 1206.44 L1481.54 1206.44 L1480.96 1206.44 L1480.37 1206.44 L1479.78 1206.44 L1479.2 1206.44 L1478.61 1206.44 L1478.03 1206.44 L1477.44 1206.44 L1476.85 1206.44 L1476.27 1206.44 L1475.68 1206.44 L1475.09 1206.44 L1474.51 1206.44 L1473.92 1206.44 L1473.33 1206.44 L1472.75 1206.44 L1472.16 1206.44 L1471.57 1206.44 L1470.99 1206.44 L1470.4 1206.44 L1469.82 1206.44 L1469.23 1206.44 L1468.64 1206.44 L1468.06 1206.44 L1467.47 1206.44 L1466.88 1206.44 L1466.3 1206.44 L1465.71 1206.44 L1465.12 1206.44 L1464.54 1206.44 L1463.95 1206.44 L1463.37 1206.44 L1462.78 1206.44 L1462.19 1206.44 L1461.61 1206.44 L1461.02 1206.44 L1460.43 1206.44 L1459.85 1206.44 L1459.26 1206.44 L1458.67 1206.44 L1458.09 1206.44 L1457.5 1206.44 L1456.91 1206.44 L1456.33 1206.44 L1455.74 1206.44 L1455.16 1206.44 L1454.57 1206.44 L1453.98 1206.44 L1453.4 1206.44 L1452.81 1206.44 L1452.22 1206.44 L1451.64 1206.44 L1451.05 1206.44 L1450.46 1206.44 L1449.88 1206.44 L1449.29 1206.44 L1448.7 1206.44 L1448.12 1206.44 L1447.53 1206.44 L1446.95 1206.44 L1446.36 1206.44 L1445.77 1206.44 L1445.19 1206.44 L1444.6 1206.44 L1444.01 1206.44 L1443.43 1206.44 L1442.84 1206.44 L1442.25 1206.44 L1441.67 1206.44 L1441.08 1206.44 L1440.5 1206.44 L1439.91 1206.44 L1439.32 1206.44 L1438.74 1206.44 L1438.15 1206.44 L1437.56 1206.44 L1436.98 1206.44 L1436.39 1206.44 L1435.8 1206.44 L1435.22 1206.44 L1434.63 1206.44 L1434.04 1206.44 L1433.46 1206.44 L1432.87 1206.44 L1432.29 1206.44 L1431.7 1206.44 L1431.11 1206.44 L1430.53 1206.44 L1429.94 1206.44 L1429.35 1206.44 L1428.77 1206.44 L1428.18 1206.44 L1427.59 1206.44 L1427.01 1206.44 L1426.42 1206.44 L1425.83 1206.44 L1425.25 1206.44 L1424.66 1206.44 L1424.08 1206.44 L1423.49 1206.44 L1422.9 1206.44 L1422.32 1206.44 L1421.73 1206.44 L1421.14 1206.44 L1420.56 1206.44 L1419.97 1206.44 L1419.38 1206.44 L1418.8 1206.44 L1418.21 1206.44 L1417.63 1206.44 L1417.04 1206.44 L1416.45 1206.44 L1415.87 1206.44 L1415.28 1206.44 L1414.69 1206.44 L1414.11 1206.44 L1413.52 1206.44 L1412.93 1206.44 L1412.35 1206.44 L1411.76 1206.44 L1411.17 1206.44 L1410.59 1206.44 L1410 1206.44 L1409.42 1206.44 L1408.83 1206.44 L1408.24 1206.44 L1407.66 1206.44 L1407.07 1206.44 L1406.48 1206.44 L1405.9 1206.44 L1405.31 1206.44 L1404.72 1206.44 L1404.14 1206.44 L1403.55 1206.44 L1402.96 1206.44 L1402.38 1206.44 L1401.79 1206.44 L1401.21 1206.44 L1400.62 1206.44 L1400.03 1206.44 L1399.45 1206.44 L1398.86 1206.44 L1398.27 1206.44 L1397.69 1206.44 L1397.1 1206.44 L1396.51 1206.44 L1395.93 1206.44 L1395.34 1206.44 L1394.75 1206.44 L1394.17 1206.44 L1393.58 1206.44 L1393 1206.44 L1392.41 1206.44 L1391.82 1206.44 L1391.24 1206.44 L1390.65 1206.44 L1390.06 1206.44 L1389.48 1206.44 L1388.89 1206.44 L1388.3 1206.44 L1387.72 1206.44 L1387.13 1206.44 L1386.55 1206.44 L1385.96 1206.44 L1385.37 1206.44 L1384.79 1206.44 L1384.2 1206.44 L1383.61 1206.44 L1383.03 1206.44 L1382.44 1206.44 L1381.85 1206.44 L1381.27 1206.44 L1380.68 1206.44 L1380.09 1206.44 L1379.51 1206.44 L1378.92 1206.44 L1378.34 1206.44 L1377.75 1206.44 L1377.16 1206.44 L1376.58 1206.44 L1375.99 1206.44 L1375.4 1206.44 L1374.82 1206.44 L1374.23 1206.44 L1373.64 1206.44 L1373.06 1206.44 L1372.47 1206.44 L1371.88 1206.44 L1371.3 1206.44 L1370.71 1206.44 L1370.13 1206.44 L1369.54 1206.44 L1368.95 1206.44 L1368.37 1206.44 L1367.78 1206.44 L1367.19 1206.44 L1366.61 1206.44 L1366.02 1206.44 L1365.43 1206.44 L1364.85 1206.44 L1364.26 1206.44 L1363.68 1206.44 L1363.09 1206.44 L1362.5 1206.44 L1361.92 1206.44 L1361.33 1206.44 L1360.74 1206.44 L1360.16 1206.44 L1359.57 1206.44 L1358.98 1206.44 L1358.4 1206.44 L1357.81 1206.44 L1357.22 1206.44 L1356.64 1206.44 L1356.05 1206.44 L1355.47 1206.44 L1354.88 1206.44 L1354.29 1206.44 L1353.71 1206.44 L1353.12 1206.44 L1352.53 1206.44 L1351.95 1206.44 L1351.36 1206.44 L1350.77 1206.44 L1350.19 1206.44 L1349.6 1206.44 L1349.01 1206.44 L1348.43 1206.44 L1347.84 1206.44 L1347.26 1206.44 L1346.67 1206.44 L1346.08 1206.44 L1345.5 1206.44 L1344.91 1206.44 L1344.32 1206.44 L1343.74 1206.44 L1343.15 1206.44 L1342.56 1206.44 L1341.98 1206.44 L1341.39 1206.44 L1340.8 1206.44 L1340.22 1206.44 L1339.63 1206.44 L1339.05 1206.44 L1338.46 1206.44 L1337.87 1206.44 L1337.29 1206.44 L1336.7 1206.44 L1336.11 1206.44 L1335.53 1206.44 L1334.94 1206.44 L1334.35 1206.44 L1333.77 1206.44 L1333.18 1206.44 L1332.6 1206.44 L1332.01 1206.44 L1331.42 1206.44 L1330.84 1206.44 L1330.25 1206.44 L1329.66 1206.44 L1329.08 1206.44 L1328.49 1206.44 L1327.9 1206.44 L1327.32 1206.44 L1326.73 1206.44 L1326.14 1206.44 L1325.56 1206.44 L1324.97 1206.44 L1324.39 1206.44 L1323.8 1206.44 L1323.21 1206.44 L1322.63 1206.44 L1322.04 1206.44 L1321.45 1206.44 L1320.87 1206.44 L1320.28 1206.44 L1319.69 1206.44 L1319.11 1206.44 L1318.52 1206.44 L1317.93 1206.44 L1317.35 1206.44 L1316.76 1206.44 L1316.18 1206.44 L1315.59 1206.44 L1315 1206.44 L1314.42 1206.44 L1313.83 1206.44 L1313.24 1206.44 L1312.66 1206.44 L1312.07 1206.44 L1311.48 1206.44 L1310.9 1206.44 L1310.31 1206.44 L1309.73 1206.44 L1309.14 1206.44 L1308.55 1206.44 L1307.97 1206.44 L1307.38 1206.44 L1306.79 1206.44 L1306.21 1206.44 L1305.62 1206.44 L1305.03 1206.44 L1304.45 1206.44 L1303.86 1206.44 L1303.27 1206.44 L1302.69 1206.44 L1302.1 1206.44 L1301.52 1206.44 L1300.93 1206.44 L1300.34 1206.44 L1299.76 1206.44 L1299.17 1206.44 L1298.58 1206.44 L1298 1206.44 L1297.41 1206.44 L1296.82 1206.44 L1296.24 1206.44 L1295.65 1206.44 L1295.06 1206.44 L1294.48 1206.44 L1293.89 1206.44 L1293.31 1206.44 L1292.72 1206.44 L1292.13 1206.44 L1291.55 1206.44 L1290.96 1206.44 L1290.37 1206.44 L1289.79 1206.44 L1289.2 1206.44 L1288.61 1206.44 L1288.03 1206.44 L1287.44 1206.44 L1286.86 1206.44 L1286.27 1206.44 L1285.68 1206.44 L1285.1 1206.44 L1284.51 1206.44 L1283.92 1206.44 L1283.34 1206.44 L1282.75 1206.44 L1282.16 1206.44 L1281.58 1206.44 L1280.99 1206.44 L1280.4 1206.44 L1279.82 1206.44 L1279.23 1206.44 L1278.65 1206.44 L1278.06 1206.44 L1277.47 1206.44 L1276.89 1206.44 L1276.3 1206.44 L1275.71 1206.44 L1275.13 1206.44 L1274.54 1206.44 L1273.95 1206.44 L1273.37 1206.44 L1272.78 1206.44 L1272.19 1206.44 L1271.61 1206.44 L1271.02 1206.44 L1270.44 1206.44 L1269.85 1206.44 L1269.26 1206.44 L1268.68 1206.44 L1268.09 1206.44 L1267.5 1206.44 L1266.92 1206.44 L1266.33 1206.44 L1265.74 1206.44 L1265.16 1206.44 L1264.57 1206.44 L1263.98 1206.44 L1263.4 1206.44 L1262.81 1206.44 L1262.23 1206.44 L1261.64 1206.44 L1261.05 1206.44 L1260.47 1206.44 L1259.88 1206.44 L1259.29 1206.44 L1258.71 1206.44 L1258.12 1206.44 L1257.53 1206.44 L1256.95 1206.44 L1256.36 1206.44 L1255.78 1206.44 L1255.19 1206.44 L1254.6 1206.44 L1254.02 1206.44 L1253.43 1206.44 L1252.84 1206.44 L1252.26 1206.44 L1251.67 1206.44 L1251.08 1206.44 L1250.5 1206.44 L1249.91 1206.44 L1249.32 1206.44 L1248.74 1206.44 L1248.15 1206.44 L1247.57 1206.44 L1246.98 1206.44 L1246.39 1206.44 L1245.81 1206.44 L1245.22 1206.44 L1244.63 1206.44 L1244.05 1206.44 L1243.46 1206.44 L1242.87 1206.44 L1242.29 1206.44 L1241.7 1206.44 L1241.11 1206.44 L1240.53 1206.44 L1239.94 1206.44 L1239.36 1206.44 L1238.77 1206.44 L1238.18 1206.44 L1237.6 1206.44 L1237.01 1206.44 L1236.42 1206.44 L1235.84 1206.44 L1235.25 1206.44 L1234.66 1206.44 L1234.08 1206.44 L1233.49 1206.44 L1232.91 1206.44 L1232.32 1206.44 L1231.73 1206.44 L1231.15 1206.44 L1230.56 1206.44 L1229.97 1206.44 L1229.39 1206.44 L1228.8 1206.44 L1228.21 1206.44 L1227.63 1206.44 L1227.04 1206.44 L1226.45 1206.44 L1225.87 1206.44 L1225.28 1206.44 L1224.7 1206.44 L1224.11 1206.44 L1223.52 1206.44 L1222.94 1206.44 L1222.35 1206.44 L1221.76 1206.44 L1221.18 1206.44 L1220.59 1206.44 L1220 1206.44 L1219.42 1206.44 L1218.83 1206.44 L1218.24 1206.44 L1217.66 1206.44 L1217.07 1206.44 L1216.49 1206.44 L1215.9 1206.44 L1215.31 1206.44 L1214.73 1206.44 L1214.14 1206.44 L1213.55 1206.44 L1212.97 1206.44 L1212.38 1206.44 L1211.79 1206.44 L1211.21 1206.44 L1210.62 1206.44 L1210.03 1206.44 L1209.45 1206.44 L1208.86 1206.44 L1208.28 1206.44 L1207.69 1206.44 L1207.1 1206.44 L1206.52 1206.44 L1205.93 1206.44 L1205.34 1206.44 L1204.76 1206.44 L1204.17 1206.44 L1203.58 1206.44 L1203 1206.44 L1202.41 1206.44 L1201.83 1206.44 L1201.24 1206.44 L1200.65 1206.44 L1200.07 1206.44 L1199.48 1206.44 L1198.89 1206.44 L1198.31 1206.44 L1197.72 1206.44 L1197.13 1206.44 L1196.55 1206.44 L1195.96 1206.44 L1195.37 1206.44 L1194.79 1206.44 L1194.2 1206.44 L1193.62 1206.44 L1193.03 1206.44 L1192.44 1206.44 L1191.86 1206.44 L1191.27 1206.44 L1190.68 1206.44 L1190.1 1206.44 L1189.51 1206.44 L1188.92 1206.44 L1188.34 1206.44 L1187.75 1206.44 L1187.16 1206.44 L1186.58 1206.44 L1185.99 1206.44 L1185.41 1206.44 L1184.82 1206.44 L1184.23 1206.44 L1183.65 1206.44 L1183.06 1206.44 L1182.47 1206.44 L1181.89 1206.44 L1181.3 1206.44 L1180.71 1206.44 L1180.13 1206.44 L1179.54 1206.44 L1178.96 1206.44 L1178.37 1206.44 L1177.78 1206.44 L1177.2 1206.44 L1176.61 1206.44 L1176.02 1206.44 L1175.44 1206.44 L1174.85 1206.44 L1174.26 1206.44 L1173.68 1206.44 L1173.09 1206.44 L1172.5 1206.44 L1171.92 1206.44 L1171.33 1206.44 L1170.75 1206.44 L1170.16 1206.44 L1169.57 1206.44 L1168.99 1206.44 L1168.4 1206.44 L1167.81 1206.44 L1167.23 1206.44 L1166.64 1206.44 L1166.05 1206.44 L1165.47 1206.44 L1164.88 1206.44 L1164.29 1206.44 L1163.71 1206.44 L1163.12 1206.44 L1162.54 1206.44 L1161.95 1206.44 L1161.36 1206.44 L1160.78 1206.44 L1160.19 1206.44 L1159.6 1206.44 L1159.02 1206.44 L1158.43 1206.44 L1157.84 1206.44 L1157.26 1206.44 L1156.67 1206.44 L1156.09 1206.44 L1155.5 1206.44 L1154.91 1206.44 L1154.33 1206.44 L1153.74 1206.44 L1153.15 1206.44 L1152.57 1206.44 L1151.98 1206.44 L1151.39 1206.44 L1150.81 1206.44 L1150.22 1206.44 L1149.63 1206.44 L1149.05 1206.44 L1148.46 1206.44 L1147.88 1206.44 L1147.29 1206.44 L1146.7 1206.44 L1146.12 1206.44 L1145.53 1206.44 L1144.94 1206.44 L1144.36 1206.44 L1143.77 1206.44 L1143.18 1206.44 L1142.6 1206.44 L1142.01 1206.44 L1141.42 1206.44 L1140.84 1206.44 L1140.25 1206.44 L1139.67 1206.44 L1139.08 1206.44 L1138.49 1206.44 L1137.91 1206.44 L1137.32 1206.44 L1136.73 1206.44 L1136.15 1206.44 L1135.56 1206.44 L1134.97 1206.44 L1134.39 1206.44 L1133.8 1206.44 L1133.21 1206.44 L1132.63 1206.44 L1132.04 1206.44 L1131.46 1206.44 L1130.87 1206.44 L1130.28 1206.44 L1129.7 1206.44 L1129.11 1206.44 L1128.52 1206.44 L1127.94 1206.44 L1127.35 1206.44 L1126.76 1206.44 L1126.18 1206.44 L1125.59 1206.44 L1125.01 1206.44 L1124.42 1206.44 L1123.83 1206.44 L1123.25 1206.44 L1122.66 1206.44 L1122.07 1206.44 L1121.49 1206.44 L1120.9 1206.44 L1120.31 1206.44 L1119.73 1206.44 L1119.14 1206.44 L1118.55 1206.44 L1117.97 1206.44 L1117.38 1206.44 L1116.8 1206.44 L1116.21 1206.44 L1115.62 1206.44 L1115.04 1206.44 L1114.45 1206.44 L1113.86 1206.44 L1113.28 1206.44 L1112.69 1206.44 L1112.1 1206.44 L1111.52 1206.44 L1110.93 1206.44 L1110.34 1206.44 L1109.76 1206.44 L1109.17 1206.44 L1108.59 1206.44 L1108 1206.44 L1107.41 1206.44 L1106.83 1206.44 L1106.24 1206.44 L1105.65 1206.44 L1105.07 1206.44 L1104.48 1206.44 L1103.89 1206.44 L1103.31 1206.44 L1102.72 1206.44 L1102.14 1206.44 L1101.55 1206.44 L1100.96 1206.44 L1100.38 1206.44 L1099.79 1206.44 L1099.2 1206.44 L1098.62 1206.44 L1098.03 1206.44 L1097.44 1206.44 L1096.86 1206.44 L1096.27 1206.44 L1095.68 1206.44 L1095.1 1206.44 L1094.51 1206.44 L1093.93 1206.44 L1093.34 1206.44 L1092.75 1206.44 L1092.17 1206.44 L1091.58 1206.44 L1090.99 1206.44 L1090.41 1206.44 L1089.82 1206.44 L1089.23 1206.44 L1088.65 1206.44 L1088.06 1206.44 L1087.47 1206.44 L1086.89 1206.44 L1086.3 1206.44 L1085.72 1206.44 L1085.13 1206.44 L1084.54 1206.44 L1083.96 1206.44 L1083.37 1206.44 L1082.78 1206.44 L1082.2 1206.44 L1081.61 1206.44 L1081.02 1206.44 L1080.44 1206.44 L1079.85 1206.44 L1079.26 1206.44 L1078.68 1206.44 L1078.09 1206.44 L1077.51 1206.44 L1076.92 1206.44 L1076.33 1206.44 L1075.75 1206.44 L1075.16 1206.44 L1074.57 1206.44 L1073.99 1206.44 L1073.4 1206.44 L1072.81 1206.44 L1072.23 1206.44 L1071.64 1206.44 L1071.06 1206.44 L1070.47 1206.44 L1069.88 1206.44 L1069.3 1206.44 L1068.71 1206.44 L1068.12 1206.44 L1067.54 1206.44 L1066.95 1206.44 L1066.36 1206.44 L1065.78 1206.44 L1065.19 1206.44 L1064.6 1206.44 L1064.02 1206.44 L1063.43 1206.44 L1062.85 1206.44 L1062.26 1206.44 L1061.67 1206.44 L1061.09 1206.44 L1060.5 1206.44 L1059.91 1206.44 L1059.33 1206.44 L1058.74 1206.44 L1058.15 1206.44 L1057.57 1206.44 L1056.98 1206.44 L1056.39 1206.44 L1055.81 1206.44 L1055.22 1206.44 L1054.64 1206.44 L1054.05 1206.44 L1053.46 1206.44 L1052.88 1206.44 L1052.29 1206.44 L1051.7 1206.44 L1051.12 1206.44 L1050.53 1206.44 L1049.94 1206.44 L1049.36 1206.44 L1048.77 1206.44 L1048.19 1206.44 L1047.6 1206.44 L1047.01 1206.44 L1046.43 1206.44 L1045.84 1206.44 L1045.25 1206.44 L1044.67 1206.44 L1044.08 1206.44 L1043.49 1206.44 L1042.91 1206.44 L1042.32 1206.44 L1041.73 1206.44 L1041.15 1206.44 L1040.56 1206.44 L1039.98 1206.44 L1039.39 1206.44 L1038.8 1206.44 L1038.22 1206.44 L1037.63 1206.44 L1037.04 1206.44 L1036.46 1206.44 L1035.87 1206.44 L1035.28 1206.44 L1034.7 1206.44 L1034.11 1206.44 L1033.52 1206.44 L1032.94 1206.44 L1032.35 1206.44 L1031.77 1206.44 L1031.18 1206.44 L1030.59 1206.44 L1030.01 1206.44 L1029.42 1206.44 L1028.83 1206.44 L1028.25 1206.44 L1027.66 1206.44 L1027.07 1206.44 L1026.49 1206.44 L1025.9 1206.44 L1025.32 1206.44 L1024.73 1206.44 L1024.14 1206.44 L1023.56 1206.44 L1022.97 1206.44 L1022.38 1206.44 L1021.8 1206.44 L1021.21 1206.44 L1020.62 1206.44 L1020.04 1206.44 L1019.45 1206.44 L1018.86 1206.44 L1018.28 1206.44 L1017.69 1206.44 L1017.11 1206.44 L1016.52 1206.44 L1015.93 1206.44 L1015.35 1206.44 L1014.76 1206.44 L1014.17 1206.44 L1013.59 1206.44 L1013 1206.44 L1012.41 1206.44 L1011.83 1206.44 L1011.24 1206.44 L1010.65 1206.44 L1010.07 1206.44 L1009.48 1206.44 L1008.9 1206.44 L1008.31 1206.44 L1007.72 1206.44 L1007.14 1206.44 L1006.55 1206.44 L1005.96 1206.44 L1005.38 1206.44 L1004.79 1206.44 L1004.2 1206.44 L1003.62 1206.44 L1003.03 1206.44 L1002.44 1206.44 L1001.86 1206.44 L1001.27 1206.44 L1000.69 1206.44 L1000.1 1206.44 L999.513 1206.44 L998.926 1206.44 L998.34 1206.44 L997.754 1206.44 L997.167 1206.44 L996.581 1206.44 L995.994 1206.44 L995.408 1206.44 L994.822 1206.44 L994.235 1206.44 L993.649 1206.44 L993.062 1206.44 L992.476 1206.44 L991.889 1206.44 L991.303 1206.44 L990.717 1206.44 L990.13 1206.44 L989.544 1206.44 L988.957 1206.44 L988.371 1206.44 L987.785 1206.44 L987.198 1206.44 L986.612 1206.44 L986.025 1206.44  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1206.8 986.612,1206.8 987.198,1206.8 987.785,1206.8 988.371,1206.8 988.957,1206.8 989.544,1206.8 990.13,1206.8 990.717,1206.8 991.303,1206.8 991.889,1206.8 992.476,1206.8 993.062,1206.8 993.649,1206.8 994.235,1206.8 994.822,1206.8 995.408,1206.8 995.994,1206.8 996.581,1206.8 997.167,1206.8 997.754,1206.8 998.34,1206.8 998.926,1206.8 999.513,1206.8 1000.1,1206.8 1000.69,1206.8 1001.27,1206.8 1001.86,1206.8 1002.44,1206.8 1003.03,1206.8 1003.62,1206.8 1004.2,1206.8 1004.79,1206.8 1005.38,1206.8 1005.96,1206.8 1006.55,1206.8 1007.14,1206.8 1007.72,1206.8 1008.31,1206.8 1008.9,1206.8 1009.48,1206.8 1010.07,1206.8 1010.65,1206.8 1011.24,1206.8 1011.83,1206.8 1012.41,1206.8 1013,1206.8 1013.59,1206.8 1014.17,1206.8 1014.76,1206.8 1015.35,1206.8 1015.93,1206.8 1016.52,1206.8 1017.11,1206.8 1017.69,1206.8 1018.28,1206.8 1018.86,1206.8 1019.45,1206.8 1020.04,1206.8 1020.62,1206.8 1021.21,1206.8 1021.8,1206.8 1022.38,1206.8 1022.97,1206.8 1023.56,1206.8 1024.14,1206.8 1024.73,1206.8 1025.32,1206.8 1025.9,1206.8 1026.49,1206.8 1027.07,1206.8 1027.66,1206.8 1028.25,1206.8 1028.83,1206.8 1029.42,1206.8 1030.01,1206.8 1030.59,1206.8 1031.18,1206.8 1031.77,1206.8 1032.35,1206.8 1032.94,1206.8 1033.52,1206.8 1034.11,1206.8 1034.7,1206.8 1035.28,1206.8 1035.87,1206.8 1036.46,1206.8 1037.04,1206.8 1037.63,1206.8 1038.22,1206.8 1038.8,1206.8 1039.39,1206.8 1039.98,1206.8 1040.56,1206.8 1041.15,1206.8 1041.73,1206.8 1042.32,1206.8 1042.91,1206.8 1043.49,1206.8 1044.08,1206.8 1044.67,1206.8 1045.25,1206.8 1045.84,1206.8 1046.43,1206.8 1047.01,1206.8 1047.6,1206.8 1048.19,1206.8 1048.77,1206.8 1049.36,1206.8 1049.94,1206.8 1050.53,1206.8 1051.12,1206.8 1051.7,1206.8 1052.29,1206.8 1052.88,1206.8 1053.46,1206.8 1054.05,1206.8 1054.64,1206.8 1055.22,1206.8 1055.81,1206.8 1056.39,1206.8 1056.98,1206.8 1057.57,1206.8 1058.15,1206.8 1058.74,1206.8 1059.33,1206.8 1059.91,1206.8 1060.5,1206.8 1061.09,1206.8 1061.67,1206.8 1062.26,1206.8 1062.85,1206.8 1063.43,1206.8 1064.02,1206.8 1064.6,1206.8 1065.19,1206.8 1065.78,1206.8 1066.36,1206.8 1066.95,1206.8 1067.54,1206.8 1068.12,1206.8 1068.71,1206.8 1069.3,1206.8 1069.88,1206.8 1070.47,1206.8 1071.06,1206.8 1071.64,1206.8 1072.23,1206.8 1072.81,1206.8 1073.4,1206.8 1073.99,1206.8 1074.57,1206.8 1075.16,1206.8 1075.75,1206.8 1076.33,1206.8 1076.92,1206.8 1077.51,1206.8 1078.09,1206.8 1078.68,1206.8 1079.26,1206.8 1079.85,1206.8 1080.44,1206.8 1081.02,1206.8 1081.61,1206.8 1082.2,1206.8 1082.78,1206.8 1083.37,1206.8 1083.96,1206.8 1084.54,1206.8 1085.13,1206.8 1085.72,1206.8 1086.3,1206.8 1086.89,1206.8 1087.47,1206.8 1088.06,1206.8 1088.65,1206.8 1089.23,1206.8 1089.82,1206.8 1090.41,1206.8 1090.99,1206.8 1091.58,1206.8 1092.17,1206.8 1092.75,1206.8 1093.34,1206.8 1093.93,1206.8 1094.51,1206.8 1095.1,1206.8 1095.68,1206.8 1096.27,1206.8 1096.86,1206.8 1097.44,1206.8 1098.03,1206.8 1098.62,1206.8 1099.2,1206.8 1099.79,1206.8 1100.38,1206.8 1100.96,1206.8 1101.55,1206.8 1102.14,1206.8 1102.72,1206.8 1103.31,1206.8 1103.89,1206.8 1104.48,1206.8 1105.07,1206.8 1105.65,1206.8 1106.24,1206.8 1106.83,1206.8 1107.41,1206.8 1108,1206.8 1108.59,1206.8 1109.17,1206.8 1109.76,1206.8 1110.34,1206.8 1110.93,1206.8 1111.52,1206.8 1112.1,1206.8 1112.69,1206.8 1113.28,1206.8 1113.86,1206.8 1114.45,1206.8 1115.04,1206.8 1115.62,1206.8 1116.21,1206.8 1116.8,1206.8 1117.38,1206.8 1117.97,1206.8 1118.55,1206.8 1119.14,1206.8 1119.73,1206.8 1120.31,1206.8 1120.9,1206.8 1121.49,1206.8 1122.07,1206.8 1122.66,1206.8 1123.25,1206.8 1123.83,1206.8 1124.42,1206.8 1125.01,1206.8 1125.59,1206.8 1126.18,1206.8 1126.76,1206.8 1127.35,1206.8 1127.94,1206.8 1128.52,1206.8 1129.11,1206.8 1129.7,1206.8 1130.28,1206.8 1130.87,1206.8 1131.46,1206.8 1132.04,1206.8 1132.63,1206.8 1133.21,1206.8 1133.8,1206.8 1134.39,1206.8 1134.97,1206.8 1135.56,1206.8 1136.15,1206.8 1136.73,1206.8 1137.32,1206.8 1137.91,1206.8 1138.49,1206.8 1139.08,1206.8 1139.67,1206.8 1140.25,1206.8 1140.84,1206.8 1141.42,1206.8 1142.01,1206.8 1142.6,1206.8 1143.18,1206.8 1143.77,1206.8 1144.36,1206.8 1144.94,1206.8 1145.53,1206.8 1146.12,1206.8 1146.7,1206.8 1147.29,1206.8 1147.88,1206.8 1148.46,1206.8 1149.05,1206.8 1149.63,1206.8 1150.22,1206.8 1150.81,1206.8 1151.39,1206.8 1151.98,1206.8 1152.57,1206.8 1153.15,1206.8 1153.74,1206.8 1154.33,1206.8 1154.91,1206.8 1155.5,1206.8 1156.09,1206.8 1156.67,1206.8 1157.26,1206.8 1157.84,1206.8 1158.43,1206.8 1159.02,1206.8 1159.6,1206.8 1160.19,1206.8 1160.78,1206.8 1161.36,1206.8 1161.95,1206.8 1162.54,1206.8 1163.12,1206.8 1163.71,1206.8 1164.29,1206.8 1164.88,1206.8 1165.47,1206.8 1166.05,1206.8 1166.64,1206.8 1167.23,1206.8 1167.81,1206.8 1168.4,1206.8 1168.99,1206.8 1169.57,1206.8 1170.16,1206.8 1170.75,1206.8 1171.33,1206.8 1171.92,1206.8 1172.5,1206.8 1173.09,1206.8 1173.68,1206.8 1174.26,1206.8 1174.85,1206.8 1175.44,1206.8 1176.02,1206.8 1176.61,1206.8 1177.2,1206.8 1177.78,1206.8 1178.37,1206.8 1178.96,1206.8 1179.54,1206.8 1180.13,1206.8 1180.71,1206.8 1181.3,1206.8 1181.89,1206.8 1182.47,1206.8 1183.06,1206.8 1183.65,1206.8 1184.23,1206.8 1184.82,1206.8 1185.41,1206.8 1185.99,1206.8 1186.58,1206.8 1187.16,1206.8 1187.75,1206.8 1188.34,1206.8 1188.92,1206.8 1189.51,1206.8 1190.1,1206.8 1190.68,1206.8 1191.27,1206.8 1191.86,1206.8 1192.44,1206.8 1193.03,1206.8 1193.62,1206.8 1194.2,1206.8 1194.79,1206.8 1195.37,1206.8 1195.96,1206.8 1196.55,1206.8 1197.13,1206.8 1197.72,1206.8 1198.31,1206.8 1198.89,1206.8 1199.48,1206.8 1200.07,1206.8 1200.65,1206.8 1201.24,1206.8 1201.83,1206.8 1202.41,1206.8 1203,1206.8 1203.58,1206.8 1204.17,1206.8 1204.76,1206.8 1205.34,1206.8 1205.93,1206.8 1206.52,1206.8 1207.1,1206.8 1207.69,1206.8 1208.28,1206.8 1208.86,1206.8 1209.45,1206.8 1210.03,1206.8 1210.62,1206.8 1211.21,1206.8 1211.79,1206.8 1212.38,1206.8 1212.97,1206.8 1213.55,1206.8 1214.14,1206.8 1214.73,1206.8 1215.31,1206.8 1215.9,1206.8 1216.49,1206.8 1217.07,1206.8 1217.66,1206.8 1218.24,1206.8 1218.83,1206.8 1219.42,1206.8 1220,1206.8 1220.59,1206.8 1221.18,1206.8 1221.76,1206.8 1222.35,1206.8 1222.94,1206.8 1223.52,1206.8 1224.11,1206.8 1224.7,1206.8 1225.28,1206.8 1225.87,1206.8 1226.45,1206.8 1227.04,1206.8 1227.63,1206.8 1228.21,1206.8 1228.8,1206.8 1229.39,1206.8 1229.97,1206.8 1230.56,1206.8 1231.15,1206.8 1231.73,1206.8 1232.32,1206.8 1232.91,1206.8 1233.49,1206.8 1234.08,1206.8 1234.66,1206.8 1235.25,1206.8 1235.84,1206.8 1236.42,1206.8 1237.01,1206.8 1237.6,1206.8 1238.18,1206.8 1238.77,1206.8 1239.36,1206.8 1239.94,1206.8 1240.53,1206.8 1241.11,1206.8 1241.7,1206.8 1242.29,1206.8 1242.87,1206.8 1243.46,1206.8 1244.05,1206.8 1244.63,1206.8 1245.22,1206.8 1245.81,1206.8 1246.39,1206.8 1246.98,1206.8 1247.57,1206.8 1248.15,1206.8 1248.74,1206.8 1249.32,1206.8 1249.91,1206.8 1250.5,1206.8 1251.08,1206.8 1251.67,1206.8 1252.26,1206.8 1252.84,1206.8 1253.43,1206.8 1254.02,1206.8 1254.6,1206.8 1255.19,1206.8 1255.78,1206.8 1256.36,1206.8 1256.95,1206.8 1257.53,1206.8 1258.12,1206.8 1258.71,1206.8 1259.29,1206.8 1259.88,1206.8 1260.47,1206.8 1261.05,1206.8 1261.64,1206.8 1262.23,1206.8 1262.81,1206.8 1263.4,1206.8 1263.98,1206.8 1264.57,1206.8 1265.16,1206.8 1265.74,1206.8 1266.33,1206.8 1266.92,1206.8 1267.5,1206.8 1268.09,1206.8 1268.68,1206.8 1269.26,1206.8 1269.85,1206.8 1270.44,1206.8 1271.02,1206.8 1271.61,1206.8 1272.19,1206.8 1272.78,1206.8 1273.37,1206.8 1273.95,1206.8 1274.54,1206.8 1275.13,1206.8 1275.71,1206.8 1276.3,1206.8 1276.89,1206.8 1277.47,1206.8 1278.06,1206.8 1278.65,1206.8 1279.23,1206.8 1279.82,1206.8 1280.4,1206.8 1280.99,1206.8 1281.58,1206.8 1282.16,1206.8 1282.75,1206.8 1283.34,1206.8 1283.92,1206.8 1284.51,1206.8 1285.1,1206.8 1285.68,1206.8 1286.27,1206.8 1286.86,1206.8 1287.44,1206.8 1288.03,1206.8 1288.61,1206.8 1289.2,1206.8 1289.79,1206.8 1290.37,1206.8 1290.96,1206.8 1291.55,1206.8 1292.13,1206.8 1292.72,1206.8 1293.31,1206.8 1293.89,1206.8 1294.48,1206.8 1295.06,1206.8 1295.65,1206.8 1296.24,1206.8 1296.82,1206.8 1297.41,1206.8 1298,1206.8 1298.58,1206.8 1299.17,1206.8 1299.76,1206.8 1300.34,1206.8 1300.93,1206.8 1301.52,1206.8 1302.1,1206.8 1302.69,1206.8 1303.27,1206.8 1303.86,1206.8 1304.45,1206.8 1305.03,1206.8 1305.62,1206.8 1306.21,1206.8 1306.79,1206.8 1307.38,1206.8 1307.97,1206.8 1308.55,1206.8 1309.14,1206.8 1309.73,1206.8 1310.31,1206.8 1310.9,1206.8 1311.48,1206.8 1312.07,1206.8 1312.66,1206.8 1313.24,1206.8 1313.83,1206.8 1314.42,1206.8 1315,1206.8 1315.59,1206.8 1316.18,1206.8 1316.76,1206.8 1317.35,1206.8 1317.93,1206.8 1318.52,1206.8 1319.11,1206.8 1319.69,1206.8 1320.28,1206.8 1320.87,1206.8 1321.45,1206.8 1322.04,1206.8 1322.63,1206.8 1323.21,1206.8 1323.8,1206.8 1324.39,1206.8 1324.97,1206.8 1325.56,1206.8 1326.14,1206.8 1326.73,1206.8 1327.32,1206.8 1327.9,1206.8 1328.49,1206.8 1329.08,1206.8 1329.66,1206.8 1330.25,1206.8 1330.84,1206.8 1331.42,1206.8 1332.01,1206.8 1332.6,1206.8 1333.18,1206.8 1333.77,1206.8 1334.35,1206.8 1334.94,1206.8 1335.53,1206.8 1336.11,1206.8 1336.7,1206.8 1337.29,1206.8 1337.87,1206.8 1338.46,1206.8 1339.05,1206.8 1339.63,1206.8 1340.22,1206.8 1340.8,1206.8 1341.39,1206.8 1341.98,1206.8 1342.56,1206.8 1343.15,1206.8 1343.74,1206.8 1344.32,1206.8 1344.91,1206.8 1345.5,1206.8 1346.08,1206.8 1346.67,1206.8 1347.26,1206.8 1347.84,1206.8 1348.43,1206.8 1349.01,1206.8 1349.6,1206.8 1350.19,1206.8 1350.77,1206.8 1351.36,1206.8 1351.95,1206.8 1352.53,1206.8 1353.12,1206.8 1353.71,1206.8 1354.29,1206.8 1354.88,1206.8 1355.47,1206.8 1356.05,1206.8 1356.64,1206.8 1357.22,1206.8 1357.81,1206.8 1358.4,1206.8 1358.98,1206.8 1359.57,1206.8 1360.16,1206.8 1360.74,1206.8 1361.33,1206.8 1361.92,1206.8 1362.5,1206.8 1363.09,1206.8 1363.68,1206.8 1364.26,1206.8 1364.85,1206.8 1365.43,1206.8 1366.02,1206.8 1366.61,1206.8 1367.19,1206.8 1367.78,1206.8 1368.37,1206.8 1368.95,1206.8 1369.54,1206.8 1370.13,1206.8 1370.71,1206.8 1371.3,1206.8 1371.88,1206.8 1372.47,1206.8 1373.06,1206.8 1373.64,1206.8 1374.23,1206.8 1374.82,1206.8 1375.4,1206.8 1375.99,1206.8 1376.58,1206.8 1377.16,1206.8 1377.75,1206.8 1378.34,1206.8 1378.92,1206.8 1379.51,1206.8 1380.09,1206.8 1380.68,1206.8 1381.27,1206.8 1381.85,1206.8 1382.44,1206.8 1383.03,1206.8 1383.61,1206.8 1384.2,1206.8 1384.79,1206.8 1385.37,1206.8 1385.96,1206.8 1386.55,1206.8 1387.13,1206.8 1387.72,1206.8 1388.3,1206.8 1388.89,1206.8 1389.48,1206.8 1390.06,1206.8 1390.65,1206.8 1391.24,1206.8 1391.82,1206.8 1392.41,1206.8 1393,1206.8 1393.58,1206.8 1394.17,1206.8 1394.75,1206.8 1395.34,1206.8 1395.93,1206.8 1396.51,1206.8 1397.1,1206.8 1397.69,1206.8 1398.27,1206.8 1398.86,1206.8 1399.45,1206.8 1400.03,1206.8 1400.62,1206.8 1401.21,1206.8 1401.79,1206.8 1402.38,1206.8 1402.96,1206.8 1403.55,1206.8 1404.14,1206.8 1404.72,1206.8 1405.31,1206.8 1405.9,1206.8 1406.48,1206.8 1407.07,1206.8 1407.66,1206.8 1408.24,1206.8 1408.83,1206.8 1409.42,1206.8 1410,1206.8 1410.59,1206.8 1411.17,1206.8 1411.76,1206.8 1412.35,1206.8 1412.93,1206.8 1413.52,1206.8 1414.11,1206.8 1414.69,1206.8 1415.28,1206.8 1415.87,1206.8 1416.45,1206.8 1417.04,1206.8 1417.63,1206.8 1418.21,1206.8 1418.8,1206.8 1419.38,1206.8 1419.97,1206.8 1420.56,1206.8 1421.14,1206.8 1421.73,1206.8 1422.32,1206.8 1422.9,1206.8 1423.49,1206.8 1424.08,1206.8 1424.66,1206.8 1425.25,1206.8 1425.83,1206.8 1426.42,1206.8 1427.01,1206.8 1427.59,1206.8 1428.18,1206.8 1428.77,1206.8 1429.35,1206.8 1429.94,1206.8 1430.53,1206.8 1431.11,1206.8 1431.7,1206.8 1432.29,1206.8 1432.87,1206.8 1433.46,1206.8 1434.04,1206.8 1434.63,1206.8 1435.22,1206.8 1435.8,1206.8 1436.39,1206.8 1436.98,1206.8 1437.56,1206.8 1438.15,1206.8 1438.74,1206.8 1439.32,1206.8 1439.91,1206.8 1440.5,1206.8 1441.08,1206.8 1441.67,1206.8 1442.25,1206.8 1442.84,1206.8 1443.43,1206.8 1444.01,1206.8 1444.6,1206.8 1445.19,1206.8 1445.77,1206.8 1446.36,1206.8 1446.95,1206.8 1447.53,1206.8 1448.12,1206.8 1448.7,1206.8 1449.29,1206.8 1449.88,1206.8 1450.46,1206.8 1451.05,1206.8 1451.64,1206.8 1452.22,1206.8 1452.81,1206.8 1453.4,1206.8 1453.98,1206.8 1454.57,1206.8 1455.16,1206.8 1455.74,1206.8 1456.33,1206.8 1456.91,1206.8 1457.5,1206.8 1458.09,1206.8 1458.67,1206.8 1459.26,1206.8 1459.85,1206.8 1460.43,1206.8 1461.02,1206.8 1461.61,1206.8 1462.19,1206.8 1462.78,1206.8 1463.37,1206.8 1463.95,1206.8 1464.54,1206.8 1465.12,1206.8 1465.71,1206.8 1466.3,1206.8 1466.88,1206.8 1467.47,1206.8 1468.06,1206.8 1468.64,1206.8 1469.23,1206.8 1469.82,1206.8 1470.4,1206.8 1470.99,1206.8 1471.57,1206.8 1472.16,1206.8 1472.75,1206.8 1473.33,1206.8 1473.92,1206.8 1474.51,1206.8 1475.09,1206.8 1475.68,1206.8 1476.27,1206.8 1476.85,1206.8 1477.44,1206.8 1478.03,1206.8 1478.61,1206.8 1479.2,1206.8 1479.78,1206.8 1480.37,1206.8 1480.96,1206.8 1481.54,1206.8 1482.13,1206.8 1482.72,1206.8 1483.3,1206.8 1483.89,1206.8 1484.48,1206.8 1485.06,1206.8 1485.65,1206.8 1486.24,1206.8 1486.82,1206.8 1487.41,1206.8 1487.99,1206.8 1488.58,1206.8 1489.17,1206.8 1489.75,1206.8 1490.34,1206.8 1490.93,1206.8 1491.51,1206.8 1492.1,1206.8 1492.69,1206.8 1493.27,1206.8 1493.86,1206.8 1494.45,1206.8 1495.03,1206.8 1495.62,1206.8 1496.2,1206.8 1496.79,1206.8 1497.38,1206.8 1497.96,1206.8 1498.55,1206.8 1499.14,1206.8 1499.72,1206.8 1500.31,1206.8 1500.9,1206.8 1501.48,1206.8 1502.07,1206.8 1502.65,1206.8 1503.24,1206.8 1503.83,1206.8 1504.41,1206.8 1505,1206.8 1505.59,1206.8 1506.17,1206.8 1506.76,1206.8 1507.35,1206.8 1507.93,1206.8 1508.52,1206.8 1509.11,1206.8 1509.69,1206.8 1510.28,1206.8 1510.86,1206.8 1511.45,1206.8 1512.04,1206.8 1512.62,1206.8 1513.21,1206.8 1513.8,1206.8 1514.38,1206.8 1514.97,1206.8 1515.56,1206.8 1516.14,1206.8 1516.73,1206.8 1517.32,1206.8 1517.9,1206.8 1518.49,1206.8 1519.07,1206.8 1519.66,1206.8 1520.25,1206.8 1520.83,1206.8 1521.42,1206.8 1522.01,1206.8 1522.59,1206.8 1523.18,1206.8 1523.77,1206.8 1524.35,1206.8 1524.94,1206.8 1525.52,1206.8 1526.11,1206.8 1526.7,1206.8 1527.28,1206.8 1527.87,1206.8 1528.46,1206.8 1529.04,1206.8 1529.63,1206.8 1530.22,1206.8 1530.8,1206.8 1531.39,1206.8 1531.98,1206.8 1532.56,1206.8 1533.15,1206.8 1533.73,1206.8 1534.32,1206.8 1534.91,1206.8 1535.49,1206.8 1536.08,1206.8 1536.67,1206.8 1537.25,1206.8 1537.84,1206.8 1538.43,1206.8 1539.01,1206.8 1539.6,1206.8 1540.19,1206.8 1540.77,1206.8 1541.36,1206.8 1541.94,1206.8 1542.53,1206.8 1543.12,1206.8 1543.7,1206.8 1544.29,1206.8 1544.88,1206.8 1545.46,1206.8 1546.05,1206.8 1546.64,1206.8 1547.22,1206.8 1547.81,1206.8 1548.4,1206.8 1548.98,1206.8 1549.57,1206.8 1550.15,1206.8 1550.74,1206.8 1551.33,1206.8 1551.91,1206.8 1552.5,1206.8 1553.09,1206.8 1553.67,1206.8 1554.26,1206.8 1554.85,1206.8 1555.43,1206.8 1556.02,1206.8 1556.6,1206.8 1557.19,1206.8 1557.78,1206.8 1558.36,1206.8 1558.95,1206.8 1559.54,1206.8 1560.12,1206.8 1560.71,1206.8 1561.3,1206.8 1561.88,1206.8 1562.47,1206.8 1563.06,1206.8 1563.64,1206.8 1564.23,1206.8 1564.81,1206.8 1565.4,1206.8 1565.99,1206.8 1566.57,1206.8 1567.16,1206.8 1567.75,1206.8 1568.33,1206.8 1568.92,1206.8 1569.51,1206.8 1570.09,1206.8 1570.68,1206.8 1571.27,1206.8 1571.85,1206.8 1572.44,1206.8 1573.02,1206.8 1573.61,1206.8 1574.2,1206.8 1574.78,1206.8 1575.37,1206.8 1575.96,1206.8 1576.54,1206.8 1577.13,1206.8 1577.72,1206.8 1578.3,1206.8 1578.89,1206.8 1579.47,1206.8 1580.06,1206.8 1580.65,1206.8 1581.23,1206.8 1581.82,1206.8 1582.41,1206.8 1582.99,1206.8 1583.58,1206.8 1584.17,1206.8 1584.75,1206.8 1585.34,1206.8 1585.93,1206.8 1586.51,1206.8 1587.1,1206.8 1587.68,1206.8 1588.27,1206.8 1588.86,1206.8 1589.44,1206.8 1590.03,1206.8 1590.62,1206.8 1591.2,1206.8 1591.79,1206.8 1592.38,1206.8 1592.96,1206.8 1593.55,1206.8 1594.14,1206.8 1594.72,1206.8 1595.31,1206.8 1595.89,1206.8 1596.48,1206.8 1597.07,1206.8 1597.65,1206.8 1598.24,1206.8 1598.83,1206.8 1599.41,1206.8 1600,1206.8 1600.59,1206.8 1601.17,1206.8 1601.76,1206.8 1602.34,1206.8 1602.93,1206.8 1603.52,1206.8 1604.1,1206.8 1604.69,1206.8 1605.28,1206.8 1605.86,1206.8 1606.45,1206.8 1607.04,1206.8 1607.62,1206.8 1608.21,1206.8 1608.8,1206.8 1609.38,1206.8 1609.97,1206.8 1610.55,1206.8 1611.14,1206.8 1611.73,1206.8 1612.31,1206.8 1612.9,1206.8 1613.49,1206.8 1614.07,1206.8 1614.66,1206.8 1615.25,1206.8 1615.83,1206.8 1616.42,1206.8 1617.01,1206.8 1617.59,1206.8 1618.18,1206.8 1618.76,1206.8 1619.35,1206.8 1619.94,1206.8 1620.52,1206.8 1621.11,1206.8 1621.7,1206.8 1622.28,1206.8 1622.87,1206.8 1623.46,1206.8 1624.04,1206.8 1624.63,1206.8 1625.22,1206.8 1625.8,1206.8 1626.39,1206.8 1626.97,1206.8 1627.56,1206.8 1628.15,1206.8 1628.73,1206.8 1629.32,1206.8 1629.91,1206.8 1630.49,1206.8 1631.08,1206.8 1631.67,1206.8 1632.25,1206.8 1632.84,1206.8 1633.42,1206.8 1634.01,1206.8 1634.6,1206.8 1635.18,1206.8 1635.77,1206.8 1636.36,1206.8 1636.94,1206.8 1637.53,1206.8 1638.12,1206.8 1638.7,1206.8 1639.29,1206.8 1639.88,1206.8 1640.46,1206.8 1641.05,1206.8 1641.63,1206.8 1642.22,1206.8 1642.81,1206.8 1643.39,1206.8 1643.98,1206.8 1644.57,1206.8 1645.15,1206.8 1645.74,1206.8 1646.33,1206.8 1646.91,1206.8 1647.5,1206.8 1648.09,1206.8 1648.67,1206.8 1649.26,1206.8 1649.84,1206.8 1650.43,1206.8 1651.02,1206.8 1651.6,1206.8 1652.19,1206.8 1652.78,1206.8 1653.36,1206.8 1653.95,1206.8 1654.54,1206.8 1655.12,1206.8 1655.71,1206.8 1656.29,1206.8 1656.88,1206.8 1657.47,1206.8 1658.05,1206.8 1658.64,1206.8 1659.23,1206.8 1659.81,1206.8 1660.4,1206.8 1660.99,1206.8 1661.57,1206.8 1662.16,1206.8 1662.75,1206.8 1663.33,1206.8 1663.92,1206.8 1664.5,1206.8 1665.09,1206.8 1665.68,1206.8 1666.26,1206.8 1666.85,1206.8 1667.44,1206.8 1668.02,1206.8 1668.61,1206.8 1669.2,1206.8 1669.78,1206.8 1670.37,1206.8 1670.96,1206.8 1671.54,1206.8 1672.13,1206.8 1672.71,1206.8 1673.3,1206.8 1673.89,1206.8 1674.47,1206.8 1675.06,1206.8 1675.65,1206.8 1676.23,1206.8 1676.82,1206.8 1677.41,1206.8 1677.99,1206.8 1678.58,1206.8 1679.17,1206.8 1679.75,1206.8 1680.34,1206.8 1680.92,1206.8 1681.51,1206.8 1682.1,1206.8 1682.68,1206.8 1683.27,1206.8 1683.86,1206.8 1684.44,1206.8 1685.03,1206.8 1685.62,1206.8 1686.2,1206.8 1686.79,1206.8 1687.37,1206.8 1687.96,1206.8 1688.55,1206.8 1689.13,1206.8 1689.72,1206.8 1690.31,1206.8 1690.89,1206.8 1691.48,1206.8 1692.07,1206.8 1692.65,1206.8 1693.24,1206.8 1693.83,1206.8 1694.41,1206.8 1695,1206.8 1695.58,1206.8 1696.17,1206.8 1696.76,1206.8 1697.34,1206.8 1697.93,1206.8 1698.52,1206.8 1699.1,1206.8 1699.69,1206.8 1700.28,1206.8 1700.86,1206.8 1701.45,1206.8 1702.04,1206.8 1702.62,1206.8 1703.21,1206.8 1703.79,1206.8 1704.38,1206.8 1704.97,1206.8 1705.55,1206.8 1706.14,1206.8 1706.73,1206.8 1707.31,1206.8 1707.9,1206.8 1708.49,1206.8 1709.07,1206.8 1709.66,1206.8 1710.24,1206.8 1710.83,1206.8 1711.42,1206.8 1712,1206.8 1712.59,1206.8 1713.18,1206.8 1713.76,1206.8 1714.35,1206.8 1714.94,1206.8 1715.52,1206.8 1716.11,1206.8 1716.7,1206.8 1717.28,1206.8 1717.87,1206.8 1718.45,1206.8 1719.04,1206.8 1719.63,1206.8 1720.21,1206.8 1720.8,1206.8 1721.39,1206.8 1721.97,1206.8 1722.56,1206.8 1723.15,1206.8 1723.73,1206.8 1724.32,1206.8 1724.91,1206.8 1725.49,1206.8 1726.08,1206.8 1726.66,1206.8 1727.25,1206.8 1727.84,1206.8 1728.42,1206.8 1729.01,1206.8 1729.6,1206.8 1730.18,1206.8 1730.77,1206.8 1731.36,1206.8 1731.94,1206.8 1732.53,1206.8 1733.11,1206.8 1733.7,1206.8 1734.29,1206.8 1734.87,1206.8 1735.46,1206.8 1736.05,1206.8 1736.63,1206.8 1737.22,1206.8 1737.81,1206.8 1738.39,1206.8 1738.98,1206.8 1739.57,1206.8 1740.15,1206.8 1740.74,1206.8 1741.32,1206.8 1741.91,1206.8 1742.5,1206.8 1743.08,1206.8 1743.67,1206.8 1744.26,1206.8 1744.84,1206.8 1745.43,1206.8 1746.02,1206.8 1746.6,1206.8 1747.19,1206.8 1747.78,1206.8 1748.36,1206.8 1748.95,1206.8 1749.53,1206.8 1750.12,1206.8 1750.71,1206.8 1751.29,1206.8 1751.88,1206.8 1752.47,1206.8 1753.05,1206.8 1753.64,1206.8 1754.23,1206.8 1754.81,1206.8 1755.4,1206.8 1755.99,1206.8 1756.57,1206.8 1757.16,1206.8 1757.74,1206.8 1758.33,1206.8 1758.92,1206.8 1759.5,1206.8 1760.09,1206.8 1760.68,1206.8 1761.26,1206.8 1761.85,1206.8 1762.44,1206.8 1763.02,1206.8 1763.61,1206.8 1764.19,1206.8 1764.78,1206.8 1765.37,1206.8 1765.95,1206.8 1766.54,1206.8 1767.13,1206.8 1767.71,1206.8 1768.3,1206.8 1768.89,1206.8 1769.47,1206.8 1770.06,1206.8 1770.65,1206.8 1771.23,1206.8 1771.82,1206.8 1772.4,1206.8 1772.99,1206.8 1773.58,1206.8 1774.16,1206.8 1774.75,1206.8 1775.34,1206.8 1775.92,1206.8 1776.51,1206.8 1777.1,1206.8 1777.68,1206.8 1778.27,1206.8 1778.86,1206.8 1779.44,1206.8 1780.03,1206.8 1780.61,1206.8 1781.2,1206.8 1781.79,1206.8 1782.37,1206.8 1782.96,1206.8 1783.55,1206.8 1784.13,1206.8 1784.72,1206.8 1785.31,1206.8 1785.89,1206.8 1786.48,1206.8 1787.06,1206.8 1787.65,1206.8 1788.24,1206.8 1788.82,1206.8 1789.41,1206.8 1790,1206.8 1790.58,1206.8 1791.17,1206.8 1791.76,1206.8 1792.34,1206.8 1792.93,1206.8 1793.52,1206.8 1794.1,1206.8 1794.69,1206.8 1795.27,1206.8 1795.86,1206.8 1796.45,1206.8 1797.03,1206.8 1797.62,1206.8 1798.21,1206.8 1798.79,1206.8 1799.38,1206.8 1799.97,1206.8 1800.55,1206.8 1801.14,1206.8 1801.73,1206.8 1802.31,1206.8 1802.9,1206.8 1803.48,1206.8 1804.07,1206.8 1804.66,1206.8 1805.24,1206.8 1805.83,1206.8 1806.42,1206.8 1807,1206.8 1807.59,1206.8 1808.18,1206.8 1808.76,1206.8 1809.35,1206.8 1809.94,1206.8 1810.52,1206.8 1811.11,1206.8 1811.69,1206.8 1812.28,1206.8 1812.87,1206.8 1813.45,1206.8 1814.04,1206.8 1814.63,1206.8 1815.21,1206.8 1815.8,1206.8 1816.39,1206.8 1816.97,1206.8 1817.56,1206.8 1818.14,1206.8 1818.73,1206.8 1819.32,1206.8 1819.9,1206.8 1820.49,1206.8 1821.08,1206.8 1821.66,1206.8 1822.25,1206.8 1822.84,1206.8 1823.42,1206.8 1824.01,1206.8 1824.6,1206.8 1825.18,1206.8 1825.77,1206.8 1826.35,1206.8 1826.94,1206.8 1827.53,1206.8 1828.11,1206.8 1828.7,1206.8 1829.29,1206.8 1829.87,1206.8 1830.46,1206.8 1831.05,1206.8 1831.63,1206.8 1832.22,1206.8 1832.81,1206.8 1833.39,1206.8 1833.98,1206.8 1834.56,1206.8 1835.15,1206.8 1835.74,1206.8 1836.32,1206.8 1836.91,1206.8 1837.5,1206.8 1838.08,1206.8 1838.67,1206.8 1839.26,1206.8 1839.84,1206.8 1840.43,1206.8 1841.01,1206.8 1841.6,1206.8 1842.19,1206.8 1842.77,1206.8 1843.36,1206.8 1843.95,1206.8 1844.53,1206.8 1845.12,1206.8 1845.71,1206.8 1846.29,1206.8 1846.88,1206.8 1847.47,1206.8 1848.05,1206.8 1848.64,1206.8 1849.22,1206.8 1849.81,1206.8 1850.4,1206.8 1850.98,1206.8 1851.57,1206.8 1852.16,1206.8 1852.74,1206.8 1853.33,1206.8 1853.92,1206.8 1854.5,1206.8 1855.09,1206.8 1855.68,1206.8 1856.26,1206.8 1856.85,1206.8 1857.43,1206.8 1858.02,1206.8 1858.61,1206.8 1859.19,1206.8 1859.78,1206.8 1860.37,1206.8 1860.95,1206.8 1861.54,1206.8 1862.13,1206.8 1862.71,1206.8 1863.3,1206.8 1863.88,1206.8 1864.47,1206.8 1865.06,1206.8 1865.64,1206.8 1866.23,1206.8 1866.82,1206.8 1867.4,1206.8 1867.99,1206.8 1868.58,1206.8 1869.16,1206.8 1869.75,1206.8 1870.34,1206.8 1870.92,1206.8 1871.51,1206.8 1872.09,1206.8 1872.68,1206.8 1873.27,1206.8 1873.85,1206.8 1874.44,1206.8 1875.03,1206.8 1875.61,1206.8 1876.2,1206.8 1876.79,1206.8 1877.37,1206.8 1877.96,1206.8 1878.55,1206.8 1879.13,1206.8 1879.72,1206.8 1880.3,1206.8 1880.89,1206.8 1881.48,1206.8 1882.06,1206.8 1882.65,1206.8 1883.24,1206.8 1883.82,1206.8 1884.41,1206.8 1885,1206.8 1885.58,1206.8 1886.17,1206.8 1886.76,1206.8 1887.34,1206.8 1887.93,1206.8 1888.51,1206.8 1889.1,1206.8 1889.69,1206.8 1890.27,1206.8 1890.86,1206.8 1891.45,1206.8 1892.03,1206.8 1892.62,1206.8 1893.21,1206.8 1893.79,1206.8 1894.38,1206.8 1894.96,1206.8 1895.55,1206.8 1896.14,1206.8 1896.72,1206.8 1897.31,1206.8 1897.9,1206.8 1898.48,1206.8 1899.07,1206.8 1899.66,1206.8 1900.24,1206.8 1900.83,1206.8 1901.42,1206.8 1902,1206.8 1902.59,1206.8 1903.17,1206.8 1903.76,1206.8 1904.35,1206.8 1904.93,1206.8 1905.52,1206.8 1906.11,1206.8 1906.69,1206.8 1907.28,1206.8 1907.87,1206.8 1908.45,1206.8 1909.04,1206.8 1909.63,1206.8 1910.21,1206.8 1910.8,1206.8 1911.38,1206.8 1911.97,1206.8 1912.56,1206.8 1913.14,1206.8 1913.73,1206.8 1914.32,1206.8 1914.9,1206.8 1915.49,1206.8 1916.08,1206.8 1916.66,1206.8 1917.25,1206.8 1917.83,1206.8 1918.42,1206.8 1919.01,1206.8 1919.59,1206.8 1920.18,1206.8 1920.77,1206.8 1921.35,1206.8 1921.94,1206.8 1922.53,1206.8 1923.11,1206.8 1923.7,1206.8 1924.29,1206.8 1924.87,1206.8 1925.46,1206.8 1926.04,1206.8 1926.63,1206.8 1927.22,1206.8 1927.8,1206.8 1928.39,1206.8 1928.98,1206.8 1929.56,1206.8 1930.15,1206.8 1930.74,1206.8 1931.32,1206.8 1931.91,1206.8 1932.5,1206.8 1933.08,1206.8 1933.67,1206.8 1934.25,1206.8 1934.84,1206.8 1935.43,1206.8 1936.01,1206.8 1936.6,1206.8 1937.19,1206.8 1937.77,1206.8 1938.36,1206.8 1938.95,1206.8 1939.53,1206.8 1940.12,1206.8 1940.71,1206.8 1941.29,1206.8 1941.88,1206.8 1942.46,1206.8 1943.05,1206.8 1943.64,1206.8 1944.22,1206.8 1944.81,1206.8 1945.4,1206.8 1945.98,1206.8 1946.57,1206.8 1947.16,1206.8 1947.74,1206.8 1948.33,1206.8 1948.91,1206.8 1949.5,1206.8 1950.09,1206.8 1950.67,1206.8 1951.26,1206.8 1951.85,1206.8 1952.43,1206.8 1953.02,1206.8 1953.61,1206.8 1954.19,1206.8 1954.78,1206.8 1955.37,1206.8 1955.95,1206.8 1956.54,1206.8 1957.12,1206.8 1957.71,1206.8 1958.3,1206.8 1958.88,1206.8 1959.47,1206.8 1960.06,1206.8 1960.64,1206.8 1961.23,1206.8 1961.82,1206.8 1962.4,1206.8 1962.99,1206.8 1963.58,1206.8 1964.16,1206.8 1964.75,1206.8 1965.33,1206.8 1965.92,1206.8 1966.51,1206.8 1967.09,1206.8 1967.68,1206.8 1968.27,1206.8 1968.85,1206.8 1969.44,1206.8 1970.03,1206.8 1970.61,1206.8 1971.2,1206.8 1971.78,1206.8 1972.37,1206.8 1972.96,1206.8 1973.54,1206.8 1974.13,1206.8 1974.72,1206.8 1975.3,1206.8 1975.89,1206.8 1976.48,1206.8 1977.06,1206.8 1977.65,1206.8 1978.24,1206.8 1978.82,1206.8 1979.41,1206.8 1979.99,1206.8 1980.58,1206.8 1981.17,1206.8 1981.75,1206.8 1982.34,1206.8 1982.93,1206.8 1983.51,1206.8 1984.1,1206.8 1984.69,1206.8 1985.27,1206.8 1985.86,1206.8 1986.45,1206.8 1987.03,1206.8 1987.62,1206.8 1988.2,1206.8 1988.79,1206.8 1989.38,1206.8 1989.96,1206.8 1990.55,1206.8 1991.14,1206.8 1991.72,1206.8 1992.31,1206.8 1992.9,1206.8 1993.48,1206.8 1994.07,1206.8 1994.65,1206.8 1995.24,1206.8 1995.83,1206.8 1996.41,1206.8 1997,1206.8 1997.59,1206.8 1998.17,1206.8 1998.76,1206.8 1999.35,1206.8 1999.93,1206.8 2000.52,1206.8 2001.11,1206.8 2001.69,1206.8 2002.28,1206.8 2002.86,1206.8 2003.45,1206.8 2004.04,1206.8 2004.62,1206.8 2005.21,1206.8 2005.8,1206.8 2006.38,1206.8 2006.97,1206.8 2007.56,1206.8 2008.14,1206.8 2008.73,1206.8 2009.32,1206.8 2009.9,1206.8 2010.49,1206.8 2011.07,1206.8 2011.66,1206.8 2012.25,1206.8 2012.83,1206.8 2013.42,1206.8 2014.01,1206.8 2014.59,1206.8 2015.18,1206.8 2015.77,1206.8 2016.35,1206.8 2016.94,1206.8 2017.53,1206.8 2018.11,1206.8 2018.7,1206.8 2019.28,1206.8 2019.87,1206.8 2020.46,1206.8 2021.04,1206.8 2021.63,1206.8 2022.22,1206.8 2022.8,1206.8 2023.39,1206.8 2023.98,1206.8 2024.56,1206.8 2025.15,1206.8 2025.73,1206.8 2026.32,1206.8 2026.91,1206.8 2027.49,1206.8 2028.08,1206.8 2028.67,1206.8 2029.25,1206.8 2029.84,1206.8 2030.43,1206.8 2031.01,1206.8 2031.6,1206.8 2032.19,1206.8 2032.77,1206.8 2033.36,1206.8 2033.94,1206.8 2034.53,1206.8 2035.12,1206.8 2035.7,1206.8 2036.29,1206.8 2036.88,1206.8 2037.46,1206.8 2038.05,1206.8 2038.64,1206.8 2039.22,1206.8 2039.81,1206.8 2040.4,1206.8 2040.98,1206.8 2041.57,1206.8 2042.15,1206.8 2042.74,1206.8 2043.33,1206.8 2043.91,1206.8 2044.5,1206.8 2045.09,1206.8 2045.67,1206.8 2046.26,1206.8 2046.85,1206.8 2047.43,1206.8 2048.02,1206.8 2048.6,1206.8 2049.19,1206.8 2049.78,1206.8 2050.36,1206.8 2050.95,1206.8 2051.54,1206.8 2052.12,1206.8 2052.71,1206.8 2053.3,1206.8 2053.88,1206.8 2054.47,1206.8 2055.06,1206.8 2055.64,1206.8 2056.23,1206.8 2056.81,1206.8 2057.4,1206.8 2057.99,1206.8 2058.57,1206.8 2059.16,1206.8 2059.75,1206.8 2060.33,1206.8 2060.92,1206.8 2061.51,1206.8 2062.09,1206.8 2062.68,1206.8 2063.27,1206.8 2063.85,1206.8 2064.44,1206.8 2065.02,1206.8 2065.61,1206.8 2066.2,1206.8 2066.78,1206.8 2067.37,1206.8 2067.96,1206.8 2068.54,1206.8 2069.13,1206.8 2069.72,1206.8 2070.3,1206.8 2070.89,1206.8 2071.48,1206.8 2072.06,1206.8 2072.65,1206.8 2073.23,1206.8 2073.82,1206.8 2074.41,1206.8 2074.99,1206.8 2075.58,1206.8 2076.17,1206.8 2076.75,1206.8 2077.34,1206.8 2077.93,1206.8 2078.51,1206.8 2079.1,1206.8 2079.68,1206.8 2080.27,1206.8 2080.86,1206.8 2081.44,1206.8 2082.03,1206.8 2082.62,1206.8 2083.2,1206.8 2083.79,1206.8 2084.38,1206.8 2084.96,1206.8 2085.55,1206.8 2086.14,1206.8 2086.72,1206.8 2087.31,1206.8 2087.89,1206.8 2088.48,1206.8 2089.07,1206.8 2089.65,1206.8 2090.24,1206.8 2090.83,1206.8 2091.41,1206.8 2092,1206.8 2092.59,1206.8 2093.17,1206.8 2093.76,1206.8 2094.35,1206.8 2094.93,1206.8 2095.52,1206.8 2096.1,1206.8 2096.69,1206.8 2097.28,1206.8 2097.86,1206.8 2098.45,1206.8 2099.04,1206.8 2099.62,1206.8 2100.21,1206.8 2100.8,1206.8 2101.38,1206.8 2101.97,1206.8 2102.55,1206.8 2103.14,1206.8 2103.73,1206.8 2104.31,1206.8 2104.9,1206.8 2105.49,1206.8 2106.07,1206.8 2106.66,1206.8 2107.25,1206.8 2107.83,1206.8 2108.42,1206.8 2109.01,1206.8 2109.59,1206.8 2110.18,1206.8 2110.76,1206.8 2111.35,1206.8 2111.94,1206.8 2112.52,1206.8 2113.11,1206.8 2113.7,1206.8 2114.28,1206.8 2114.87,1206.8 2115.46,1206.8 2116.04,1206.8 2116.63,1206.8 2117.22,1206.8 2117.8,1206.8 2118.39,1206.8 2118.97,1206.8 2119.56,1206.8 2120.15,1206.8 2120.73,1206.8 2121.32,1206.8 2121.91,1206.8 2122.49,1206.8 2123.08,1206.8 2123.67,1206.8 2124.25,1206.8 2124.84,1206.8 2125.42,1206.8 2126.01,1206.8 2126.6,1206.8 2127.18,1206.8 2127.77,1206.8 2128.36,1206.8 2128.94,1206.8 2129.53,1206.8 2130.12,1206.8 2130.7,1206.8 2131.29,1206.8 2131.88,1206.8 2132.46,1206.8 2133.05,1206.8 2133.63,1206.8 2134.22,1206.8 2134.81,1206.8 2135.39,1206.8 2135.98,1206.8 2136.57,1206.8 2137.15,1206.8 2137.74,1206.8 2138.33,1206.8 2138.91,1206.8 2139.5,1206.8 2140.09,1206.8 2140.67,1206.8 2141.26,1206.8 2141.84,1206.8 2142.43,1206.8 2143.02,1206.8 2143.6,1206.8 2144.19,1206.8 2144.78,1206.8 2145.36,1206.8 2145.95,1206.8 2146.54,1206.8 2147.12,1206.8 2147.71,1206.8 2148.3,1206.8 2148.88,1206.8 2149.47,1206.8 2150.05,1206.8 2150.64,1206.8 2151.23,1206.8 2151.81,1206.8 2152.4,1206.8 2152.99,1206.8 2153.57,1206.8 2154.16,1206.8 2154.75,1206.8 2155.33,1206.8 2155.92,1206.8 2156.5,1206.8 2157.09,1206.8 2157.68,1206.8 2158.26,1206.8 \"/>\n<path clip-path=\"url(#clip822)\" d=\"M986.025 1206.94 L986.612 1206.94 L987.198 1206.94 L987.785 1206.94 L988.371 1206.94 L988.957 1206.94 L989.544 1206.94 L990.13 1206.94 L990.717 1206.94 L991.303 1206.94 L991.889 1206.94 L992.476 1206.94 L993.062 1206.94 L993.649 1206.94 L994.235 1206.94 L994.822 1206.94 L995.408 1206.94 L995.994 1206.94 L996.581 1206.94 L997.167 1206.94 L997.754 1206.94 L998.34 1206.94 L998.926 1206.94 L999.513 1206.94 L1000.1 1206.94 L1000.69 1206.94 L1001.27 1206.94 L1001.86 1206.94 L1002.44 1206.94 L1003.03 1206.94 L1003.62 1206.94 L1004.2 1206.94 L1004.79 1206.94 L1005.38 1206.94 L1005.96 1206.94 L1006.55 1206.94 L1007.14 1206.94 L1007.72 1206.94 L1008.31 1206.94 L1008.9 1206.94 L1009.48 1206.94 L1010.07 1206.94 L1010.65 1206.94 L1011.24 1206.94 L1011.83 1206.94 L1012.41 1206.94 L1013 1206.94 L1013.59 1206.94 L1014.17 1206.94 L1014.76 1206.94 L1015.35 1206.94 L1015.93 1206.94 L1016.52 1206.94 L1017.11 1206.94 L1017.69 1206.94 L1018.28 1206.94 L1018.86 1206.94 L1019.45 1206.94 L1020.04 1206.94 L1020.62 1206.94 L1021.21 1206.94 L1021.8 1206.94 L1022.38 1206.94 L1022.97 1206.94 L1023.56 1206.94 L1024.14 1206.94 L1024.73 1206.94 L1025.32 1206.94 L1025.9 1206.94 L1026.49 1206.94 L1027.07 1206.94 L1027.66 1206.94 L1028.25 1206.94 L1028.83 1206.94 L1029.42 1206.94 L1030.01 1206.94 L1030.59 1206.94 L1031.18 1206.94 L1031.77 1206.94 L1032.35 1206.94 L1032.94 1206.94 L1033.52 1206.94 L1034.11 1206.94 L1034.7 1206.94 L1035.28 1206.94 L1035.87 1206.94 L1036.46 1206.94 L1037.04 1206.94 L1037.63 1206.94 L1038.22 1206.94 L1038.8 1206.94 L1039.39 1206.94 L1039.98 1206.94 L1040.56 1206.94 L1041.15 1206.94 L1041.73 1206.94 L1042.32 1206.94 L1042.91 1206.94 L1043.49 1206.94 L1044.08 1206.94 L1044.67 1206.94 L1045.25 1206.94 L1045.84 1206.94 L1046.43 1206.94 L1047.01 1206.94 L1047.6 1206.94 L1048.19 1206.94 L1048.77 1206.94 L1049.36 1206.94 L1049.94 1206.94 L1050.53 1206.94 L1051.12 1206.94 L1051.7 1206.94 L1052.29 1206.94 L1052.88 1206.94 L1053.46 1206.94 L1054.05 1206.94 L1054.64 1206.94 L1055.22 1206.94 L1055.81 1206.94 L1056.39 1206.94 L1056.98 1206.94 L1057.57 1206.94 L1058.15 1206.94 L1058.74 1206.94 L1059.33 1206.94 L1059.91 1206.94 L1060.5 1206.94 L1061.09 1206.94 L1061.67 1206.94 L1062.26 1206.94 L1062.85 1206.94 L1063.43 1206.94 L1064.02 1206.94 L1064.6 1206.94 L1065.19 1206.94 L1065.78 1206.94 L1066.36 1206.94 L1066.95 1206.94 L1067.54 1206.94 L1068.12 1206.94 L1068.71 1206.94 L1069.3 1206.94 L1069.88 1206.94 L1070.47 1206.94 L1071.06 1206.94 L1071.64 1206.94 L1072.23 1206.94 L1072.81 1206.94 L1073.4 1206.94 L1073.99 1206.94 L1074.57 1206.94 L1075.16 1206.94 L1075.75 1206.94 L1076.33 1206.94 L1076.92 1206.94 L1077.51 1206.94 L1078.09 1206.94 L1078.68 1206.94 L1079.26 1206.94 L1079.85 1206.94 L1080.44 1206.94 L1081.02 1206.94 L1081.61 1206.94 L1082.2 1206.94 L1082.78 1206.94 L1083.37 1206.94 L1083.96 1206.94 L1084.54 1206.94 L1085.13 1206.94 L1085.72 1206.94 L1086.3 1206.94 L1086.89 1206.94 L1087.47 1206.94 L1088.06 1206.94 L1088.65 1206.94 L1089.23 1206.94 L1089.82 1206.94 L1090.41 1206.94 L1090.99 1206.94 L1091.58 1206.94 L1092.17 1206.94 L1092.75 1206.94 L1093.34 1206.94 L1093.93 1206.94 L1094.51 1206.94 L1095.1 1206.94 L1095.68 1206.94 L1096.27 1206.94 L1096.86 1206.94 L1097.44 1206.94 L1098.03 1206.94 L1098.62 1206.94 L1099.2 1206.94 L1099.79 1206.94 L1100.38 1206.94 L1100.96 1206.94 L1101.55 1206.94 L1102.14 1206.94 L1102.72 1206.94 L1103.31 1206.94 L1103.89 1206.94 L1104.48 1206.94 L1105.07 1206.94 L1105.65 1206.94 L1106.24 1206.94 L1106.83 1206.94 L1107.41 1206.94 L1108 1206.94 L1108.59 1206.94 L1109.17 1206.94 L1109.76 1206.94 L1110.34 1206.94 L1110.93 1206.94 L1111.52 1206.94 L1112.1 1206.94 L1112.69 1206.94 L1113.28 1206.94 L1113.86 1206.94 L1114.45 1206.94 L1115.04 1206.94 L1115.62 1206.94 L1116.21 1206.94 L1116.8 1206.94 L1117.38 1206.94 L1117.97 1206.94 L1118.55 1206.94 L1119.14 1206.94 L1119.73 1206.94 L1120.31 1206.94 L1120.9 1206.94 L1121.49 1206.94 L1122.07 1206.94 L1122.66 1206.94 L1123.25 1206.94 L1123.83 1206.94 L1124.42 1206.94 L1125.01 1206.94 L1125.59 1206.94 L1126.18 1206.94 L1126.76 1206.94 L1127.35 1206.94 L1127.94 1206.94 L1128.52 1206.94 L1129.11 1206.94 L1129.7 1206.94 L1130.28 1206.94 L1130.87 1206.94 L1131.46 1206.94 L1132.04 1206.94 L1132.63 1206.94 L1133.21 1206.94 L1133.8 1206.94 L1134.39 1206.94 L1134.97 1206.94 L1135.56 1206.94 L1136.15 1206.94 L1136.73 1206.94 L1137.32 1206.94 L1137.91 1206.94 L1138.49 1206.94 L1139.08 1206.94 L1139.67 1206.94 L1140.25 1206.94 L1140.84 1206.94 L1141.42 1206.94 L1142.01 1206.94 L1142.6 1206.94 L1143.18 1206.94 L1143.77 1206.94 L1144.36 1206.94 L1144.94 1206.94 L1145.53 1206.94 L1146.12 1206.94 L1146.7 1206.94 L1147.29 1206.94 L1147.88 1206.94 L1148.46 1206.94 L1149.05 1206.94 L1149.63 1206.94 L1150.22 1206.94 L1150.81 1206.94 L1151.39 1206.94 L1151.98 1206.94 L1152.57 1206.94 L1153.15 1206.94 L1153.74 1206.94 L1154.33 1206.94 L1154.91 1206.94 L1155.5 1206.94 L1156.09 1206.94 L1156.67 1206.94 L1157.26 1206.94 L1157.84 1206.94 L1158.43 1206.94 L1159.02 1206.94 L1159.6 1206.94 L1160.19 1206.94 L1160.78 1206.94 L1161.36 1206.94 L1161.95 1206.94 L1162.54 1206.94 L1163.12 1206.94 L1163.71 1206.94 L1164.29 1206.94 L1164.88 1206.94 L1165.47 1206.94 L1166.05 1206.94 L1166.64 1206.94 L1167.23 1206.94 L1167.81 1206.94 L1168.4 1206.94 L1168.99 1206.94 L1169.57 1206.94 L1170.16 1206.94 L1170.75 1206.94 L1171.33 1206.94 L1171.92 1206.94 L1172.5 1206.94 L1173.09 1206.94 L1173.68 1206.94 L1174.26 1206.94 L1174.85 1206.94 L1175.44 1206.94 L1176.02 1206.94 L1176.61 1206.94 L1177.2 1206.94 L1177.78 1206.94 L1178.37 1206.94 L1178.96 1206.94 L1179.54 1206.94 L1180.13 1206.94 L1180.71 1206.94 L1181.3 1206.94 L1181.89 1206.94 L1182.47 1206.94 L1183.06 1206.94 L1183.65 1206.94 L1184.23 1206.94 L1184.82 1206.94 L1185.41 1206.94 L1185.99 1206.94 L1186.58 1206.94 L1187.16 1206.94 L1187.75 1206.94 L1188.34 1206.94 L1188.92 1206.94 L1189.51 1206.94 L1190.1 1206.94 L1190.68 1206.94 L1191.27 1206.94 L1191.86 1206.94 L1192.44 1206.94 L1193.03 1206.94 L1193.62 1206.94 L1194.2 1206.94 L1194.79 1206.94 L1195.37 1206.94 L1195.96 1206.94 L1196.55 1206.94 L1197.13 1206.94 L1197.72 1206.94 L1198.31 1206.94 L1198.89 1206.94 L1199.48 1206.94 L1200.07 1206.94 L1200.65 1206.94 L1201.24 1206.94 L1201.83 1206.94 L1202.41 1206.94 L1203 1206.94 L1203.58 1206.94 L1204.17 1206.94 L1204.76 1206.94 L1205.34 1206.94 L1205.93 1206.94 L1206.52 1206.94 L1207.1 1206.94 L1207.69 1206.94 L1208.28 1206.94 L1208.86 1206.94 L1209.45 1206.94 L1210.03 1206.94 L1210.62 1206.94 L1211.21 1206.94 L1211.79 1206.94 L1212.38 1206.94 L1212.97 1206.94 L1213.55 1206.94 L1214.14 1206.94 L1214.73 1206.94 L1215.31 1206.94 L1215.9 1206.94 L1216.49 1206.94 L1217.07 1206.94 L1217.66 1206.94 L1218.24 1206.94 L1218.83 1206.94 L1219.42 1206.94 L1220 1206.94 L1220.59 1206.94 L1221.18 1206.94 L1221.76 1206.94 L1222.35 1206.94 L1222.94 1206.94 L1223.52 1206.94 L1224.11 1206.94 L1224.7 1206.94 L1225.28 1206.94 L1225.87 1206.94 L1226.45 1206.94 L1227.04 1206.94 L1227.63 1206.94 L1228.21 1206.94 L1228.8 1206.94 L1229.39 1206.94 L1229.97 1206.94 L1230.56 1206.94 L1231.15 1206.94 L1231.73 1206.94 L1232.32 1206.94 L1232.91 1206.94 L1233.49 1206.94 L1234.08 1206.94 L1234.66 1206.94 L1235.25 1206.94 L1235.84 1206.94 L1236.42 1206.94 L1237.01 1206.94 L1237.6 1206.94 L1238.18 1206.94 L1238.77 1206.94 L1239.36 1206.94 L1239.94 1206.94 L1240.53 1206.94 L1241.11 1206.94 L1241.7 1206.94 L1242.29 1206.94 L1242.87 1206.94 L1243.46 1206.94 L1244.05 1206.94 L1244.63 1206.94 L1245.22 1206.94 L1245.81 1206.94 L1246.39 1206.94 L1246.98 1206.94 L1247.57 1206.94 L1248.15 1206.94 L1248.74 1206.94 L1249.32 1206.94 L1249.91 1206.94 L1250.5 1206.94 L1251.08 1206.94 L1251.67 1206.94 L1252.26 1206.94 L1252.84 1206.94 L1253.43 1206.94 L1254.02 1206.94 L1254.6 1206.94 L1255.19 1206.94 L1255.78 1206.94 L1256.36 1206.94 L1256.95 1206.94 L1257.53 1206.94 L1258.12 1206.94 L1258.71 1206.94 L1259.29 1206.94 L1259.88 1206.94 L1260.47 1206.94 L1261.05 1206.94 L1261.64 1206.94 L1262.23 1206.94 L1262.81 1206.94 L1263.4 1206.94 L1263.98 1206.94 L1264.57 1206.94 L1265.16 1206.94 L1265.74 1206.94 L1266.33 1206.94 L1266.92 1206.94 L1267.5 1206.94 L1268.09 1206.94 L1268.68 1206.94 L1269.26 1206.94 L1269.85 1206.94 L1270.44 1206.94 L1271.02 1206.94 L1271.61 1206.94 L1272.19 1206.94 L1272.78 1206.94 L1273.37 1206.94 L1273.95 1206.94 L1274.54 1206.94 L1275.13 1206.94 L1275.71 1206.94 L1276.3 1206.94 L1276.89 1206.94 L1277.47 1206.94 L1278.06 1206.94 L1278.65 1206.94 L1279.23 1206.94 L1279.82 1206.94 L1280.4 1206.94 L1280.99 1206.94 L1281.58 1206.94 L1282.16 1206.94 L1282.75 1206.94 L1283.34 1206.94 L1283.92 1206.94 L1284.51 1206.94 L1285.1 1206.94 L1285.68 1206.94 L1286.27 1206.94 L1286.86 1206.94 L1287.44 1206.94 L1288.03 1206.94 L1288.61 1206.94 L1289.2 1206.94 L1289.79 1206.94 L1290.37 1206.94 L1290.96 1206.94 L1291.55 1206.94 L1292.13 1206.94 L1292.72 1206.94 L1293.31 1206.94 L1293.89 1206.94 L1294.48 1206.94 L1295.06 1206.94 L1295.65 1206.94 L1296.24 1206.94 L1296.82 1206.94 L1297.41 1206.94 L1298 1206.94 L1298.58 1206.94 L1299.17 1206.94 L1299.76 1206.94 L1300.34 1206.94 L1300.93 1206.94 L1301.52 1206.94 L1302.1 1206.94 L1302.69 1206.94 L1303.27 1206.94 L1303.86 1206.94 L1304.45 1206.94 L1305.03 1206.94 L1305.62 1206.94 L1306.21 1206.94 L1306.79 1206.94 L1307.38 1206.94 L1307.97 1206.94 L1308.55 1206.94 L1309.14 1206.94 L1309.73 1206.94 L1310.31 1206.94 L1310.9 1206.94 L1311.48 1206.94 L1312.07 1206.94 L1312.66 1206.94 L1313.24 1206.94 L1313.83 1206.94 L1314.42 1206.94 L1315 1206.94 L1315.59 1206.94 L1316.18 1206.94 L1316.76 1206.94 L1317.35 1206.94 L1317.93 1206.94 L1318.52 1206.94 L1319.11 1206.94 L1319.69 1206.94 L1320.28 1206.94 L1320.87 1206.94 L1321.45 1206.94 L1322.04 1206.94 L1322.63 1206.94 L1323.21 1206.94 L1323.8 1206.94 L1324.39 1206.94 L1324.97 1206.94 L1325.56 1206.94 L1326.14 1206.94 L1326.73 1206.94 L1327.32 1206.94 L1327.9 1206.94 L1328.49 1206.94 L1329.08 1206.94 L1329.66 1206.94 L1330.25 1206.94 L1330.84 1206.94 L1331.42 1206.94 L1332.01 1206.94 L1332.6 1206.94 L1333.18 1206.94 L1333.77 1206.94 L1334.35 1206.94 L1334.94 1206.94 L1335.53 1206.94 L1336.11 1206.94 L1336.7 1206.94 L1337.29 1206.94 L1337.87 1206.94 L1338.46 1206.94 L1339.05 1206.94 L1339.63 1206.94 L1340.22 1206.94 L1340.8 1206.94 L1341.39 1206.94 L1341.98 1206.94 L1342.56 1206.94 L1343.15 1206.94 L1343.74 1206.94 L1344.32 1206.94 L1344.91 1206.94 L1345.5 1206.94 L1346.08 1206.94 L1346.67 1206.94 L1347.26 1206.94 L1347.84 1206.94 L1348.43 1206.94 L1349.01 1206.94 L1349.6 1206.94 L1350.19 1206.94 L1350.77 1206.94 L1351.36 1206.94 L1351.95 1206.94 L1352.53 1206.94 L1353.12 1206.94 L1353.71 1206.94 L1354.29 1206.94 L1354.88 1206.94 L1355.47 1206.94 L1356.05 1206.94 L1356.64 1206.94 L1357.22 1206.94 L1357.81 1206.94 L1358.4 1206.94 L1358.98 1206.94 L1359.57 1206.94 L1360.16 1206.94 L1360.74 1206.94 L1361.33 1206.94 L1361.92 1206.94 L1362.5 1206.94 L1363.09 1206.94 L1363.68 1206.94 L1364.26 1206.94 L1364.85 1206.94 L1365.43 1206.94 L1366.02 1206.94 L1366.61 1206.94 L1367.19 1206.94 L1367.78 1206.94 L1368.37 1206.94 L1368.95 1206.94 L1369.54 1206.94 L1370.13 1206.94 L1370.71 1206.94 L1371.3 1206.94 L1371.88 1206.94 L1372.47 1206.94 L1373.06 1206.94 L1373.64 1206.94 L1374.23 1206.94 L1374.82 1206.94 L1375.4 1206.94 L1375.99 1206.94 L1376.58 1206.94 L1377.16 1206.94 L1377.75 1206.94 L1378.34 1206.94 L1378.92 1206.94 L1379.51 1206.94 L1380.09 1206.94 L1380.68 1206.94 L1381.27 1206.94 L1381.85 1206.94 L1382.44 1206.94 L1383.03 1206.94 L1383.61 1206.94 L1384.2 1206.94 L1384.79 1206.94 L1385.37 1206.94 L1385.96 1206.94 L1386.55 1206.94 L1387.13 1206.94 L1387.72 1206.94 L1388.3 1206.94 L1388.89 1206.94 L1389.48 1206.94 L1390.06 1206.94 L1390.65 1206.94 L1391.24 1206.94 L1391.82 1206.94 L1392.41 1206.94 L1393 1206.94 L1393.58 1206.94 L1394.17 1206.94 L1394.75 1206.94 L1395.34 1206.94 L1395.93 1206.94 L1396.51 1206.94 L1397.1 1206.94 L1397.69 1206.94 L1398.27 1206.94 L1398.86 1206.94 L1399.45 1206.94 L1400.03 1206.94 L1400.62 1206.94 L1401.21 1206.94 L1401.79 1206.94 L1402.38 1206.94 L1402.96 1206.94 L1403.55 1206.94 L1404.14 1206.94 L1404.72 1206.94 L1405.31 1206.94 L1405.9 1206.94 L1406.48 1206.94 L1407.07 1206.94 L1407.66 1206.94 L1408.24 1206.94 L1408.83 1206.94 L1409.42 1206.94 L1410 1206.94 L1410.59 1206.94 L1411.17 1206.94 L1411.76 1206.94 L1412.35 1206.94 L1412.93 1206.94 L1413.52 1206.94 L1414.11 1206.94 L1414.69 1206.94 L1415.28 1206.94 L1415.87 1206.94 L1416.45 1206.94 L1417.04 1206.94 L1417.63 1206.94 L1418.21 1206.94 L1418.8 1206.94 L1419.38 1206.94 L1419.97 1206.94 L1420.56 1206.94 L1421.14 1206.94 L1421.73 1206.94 L1422.32 1206.94 L1422.9 1206.94 L1423.49 1206.94 L1424.08 1206.94 L1424.66 1206.94 L1425.25 1206.94 L1425.83 1206.94 L1426.42 1206.94 L1427.01 1206.94 L1427.59 1206.94 L1428.18 1206.94 L1428.77 1206.94 L1429.35 1206.94 L1429.94 1206.94 L1430.53 1206.94 L1431.11 1206.94 L1431.7 1206.94 L1432.29 1206.94 L1432.87 1206.94 L1433.46 1206.94 L1434.04 1206.94 L1434.63 1206.94 L1435.22 1206.94 L1435.8 1206.94 L1436.39 1206.94 L1436.98 1206.94 L1437.56 1206.94 L1438.15 1206.94 L1438.74 1206.94 L1439.32 1206.94 L1439.91 1206.94 L1440.5 1206.94 L1441.08 1206.94 L1441.67 1206.94 L1442.25 1206.94 L1442.84 1206.94 L1443.43 1206.94 L1444.01 1206.94 L1444.6 1206.94 L1445.19 1206.94 L1445.77 1206.94 L1446.36 1206.94 L1446.95 1206.94 L1447.53 1206.94 L1448.12 1206.94 L1448.7 1206.94 L1449.29 1206.94 L1449.88 1206.94 L1450.46 1206.94 L1451.05 1206.94 L1451.64 1206.94 L1452.22 1206.94 L1452.81 1206.94 L1453.4 1206.94 L1453.98 1206.94 L1454.57 1206.94 L1455.16 1206.94 L1455.74 1206.94 L1456.33 1206.94 L1456.91 1206.94 L1457.5 1206.94 L1458.09 1206.94 L1458.67 1206.94 L1459.26 1206.94 L1459.85 1206.94 L1460.43 1206.94 L1461.02 1206.94 L1461.61 1206.94 L1462.19 1206.94 L1462.78 1206.94 L1463.37 1206.94 L1463.95 1206.94 L1464.54 1206.94 L1465.12 1206.94 L1465.71 1206.94 L1466.3 1206.94 L1466.88 1206.94 L1467.47 1206.94 L1468.06 1206.94 L1468.64 1206.94 L1469.23 1206.94 L1469.82 1206.94 L1470.4 1206.94 L1470.99 1206.94 L1471.57 1206.94 L1472.16 1206.94 L1472.75 1206.94 L1473.33 1206.94 L1473.92 1206.94 L1474.51 1206.94 L1475.09 1206.94 L1475.68 1206.94 L1476.27 1206.94 L1476.85 1206.94 L1477.44 1206.94 L1478.03 1206.94 L1478.61 1206.94 L1479.2 1206.94 L1479.78 1206.94 L1480.37 1206.94 L1480.96 1206.94 L1481.54 1206.94 L1482.13 1206.94 L1482.72 1206.94 L1483.3 1206.94 L1483.89 1206.94 L1484.48 1206.94 L1485.06 1206.94 L1485.65 1206.94 L1486.24 1206.94 L1486.82 1206.94 L1487.41 1206.94 L1487.99 1206.94 L1488.58 1206.94 L1489.17 1206.94 L1489.75 1206.94 L1490.34 1206.94 L1490.93 1206.94 L1491.51 1206.94 L1492.1 1206.94 L1492.69 1206.94 L1493.27 1206.94 L1493.86 1206.94 L1494.45 1206.94 L1495.03 1206.94 L1495.62 1206.94 L1496.2 1206.94 L1496.79 1206.94 L1497.38 1206.94 L1497.96 1206.94 L1498.55 1206.94 L1499.14 1206.94 L1499.72 1206.94 L1500.31 1206.94 L1500.9 1206.94 L1501.48 1206.94 L1502.07 1206.94 L1502.65 1206.94 L1503.24 1206.94 L1503.83 1206.94 L1504.41 1206.94 L1505 1206.94 L1505.59 1206.94 L1506.17 1206.94 L1506.76 1206.94 L1507.35 1206.94 L1507.93 1206.94 L1508.52 1206.94 L1509.11 1206.94 L1509.69 1206.94 L1510.28 1206.94 L1510.86 1206.94 L1511.45 1206.94 L1512.04 1206.94 L1512.62 1206.94 L1513.21 1206.94 L1513.8 1206.94 L1514.38 1206.94 L1514.97 1206.94 L1515.56 1206.94 L1516.14 1206.94 L1516.73 1206.94 L1517.32 1206.94 L1517.9 1206.94 L1518.49 1206.94 L1519.07 1206.94 L1519.66 1206.94 L1520.25 1206.94 L1520.83 1206.94 L1521.42 1206.94 L1522.01 1206.94 L1522.59 1206.94 L1523.18 1206.94 L1523.77 1206.94 L1524.35 1206.94 L1524.94 1206.94 L1525.52 1206.94 L1526.11 1206.94 L1526.7 1206.94 L1527.28 1206.94 L1527.87 1206.94 L1528.46 1206.94 L1529.04 1206.94 L1529.63 1206.94 L1530.22 1206.94 L1530.8 1206.94 L1531.39 1206.94 L1531.98 1206.94 L1532.56 1206.94 L1533.15 1206.94 L1533.73 1206.94 L1534.32 1206.94 L1534.91 1206.94 L1535.49 1206.94 L1536.08 1206.94 L1536.67 1206.94 L1537.25 1206.94 L1537.84 1206.94 L1538.43 1206.94 L1539.01 1206.94 L1539.6 1206.94 L1540.19 1206.94 L1540.77 1206.94 L1541.36 1206.94 L1541.94 1206.94 L1542.53 1206.94 L1543.12 1206.94 L1543.7 1206.94 L1544.29 1206.94 L1544.88 1206.94 L1545.46 1206.94 L1546.05 1206.94 L1546.64 1206.94 L1547.22 1206.94 L1547.81 1206.94 L1548.4 1206.94 L1548.98 1206.94 L1549.57 1206.94 L1550.15 1206.94 L1550.74 1206.94 L1551.33 1206.94 L1551.91 1206.94 L1552.5 1206.94 L1553.09 1206.94 L1553.67 1206.94 L1554.26 1206.94 L1554.85 1206.94 L1555.43 1206.94 L1556.02 1206.94 L1556.6 1206.94 L1557.19 1206.94 L1557.78 1206.94 L1558.36 1206.94 L1558.95 1206.94 L1559.54 1206.94 L1560.12 1206.94 L1560.71 1206.94 L1561.3 1206.94 L1561.88 1206.94 L1562.47 1206.94 L1563.06 1206.94 L1563.64 1206.94 L1564.23 1206.94 L1564.81 1206.94 L1565.4 1206.94 L1565.99 1206.94 L1566.57 1206.94 L1567.16 1206.94 L1567.75 1206.94 L1568.33 1206.94 L1568.92 1206.94 L1569.51 1206.94 L1570.09 1206.94 L1570.68 1206.94 L1571.27 1206.94 L1571.85 1206.94 L1572.44 1206.94 L1573.02 1206.94 L1573.61 1206.94 L1574.2 1206.94 L1574.78 1206.94 L1575.37 1206.94 L1575.96 1206.94 L1576.54 1206.94 L1577.13 1206.94 L1577.72 1206.94 L1578.3 1206.94 L1578.89 1206.94 L1579.47 1206.94 L1580.06 1206.94 L1580.65 1206.94 L1581.23 1206.94 L1581.82 1206.94 L1582.41 1206.94 L1582.99 1206.94 L1583.58 1206.94 L1584.17 1206.94 L1584.75 1206.94 L1585.34 1206.94 L1585.93 1206.94 L1586.51 1206.94 L1587.1 1206.94 L1587.68 1206.94 L1588.27 1206.94 L1588.86 1206.94 L1589.44 1206.94 L1590.03 1206.94 L1590.62 1206.94 L1591.2 1206.94 L1591.79 1206.94 L1592.38 1206.94 L1592.96 1206.94 L1593.55 1206.94 L1594.14 1206.94 L1594.72 1206.94 L1595.31 1206.94 L1595.89 1206.94 L1596.48 1206.94 L1597.07 1206.94 L1597.65 1206.94 L1598.24 1206.94 L1598.83 1206.94 L1599.41 1206.94 L1600 1206.94 L1600.59 1206.94 L1601.17 1206.94 L1601.76 1206.94 L1602.34 1206.94 L1602.93 1206.94 L1603.52 1206.94 L1604.1 1206.94 L1604.69 1206.94 L1605.28 1206.94 L1605.86 1206.94 L1606.45 1206.94 L1607.04 1206.94 L1607.62 1206.94 L1608.21 1206.94 L1608.8 1206.94 L1609.38 1206.94 L1609.97 1206.94 L1610.55 1206.94 L1611.14 1206.94 L1611.73 1206.94 L1612.31 1206.94 L1612.9 1206.94 L1613.49 1206.94 L1614.07 1206.94 L1614.66 1206.94 L1615.25 1206.94 L1615.83 1206.94 L1616.42 1206.94 L1617.01 1206.94 L1617.59 1206.94 L1618.18 1206.94 L1618.76 1206.94 L1619.35 1206.94 L1619.94 1206.94 L1620.52 1206.94 L1621.11 1206.94 L1621.7 1206.94 L1622.28 1206.94 L1622.87 1206.94 L1623.46 1206.94 L1624.04 1206.94 L1624.63 1206.94 L1625.22 1206.94 L1625.8 1206.94 L1626.39 1206.94 L1626.97 1206.94 L1627.56 1206.94 L1628.15 1206.94 L1628.73 1206.94 L1629.32 1206.94 L1629.91 1206.94 L1630.49 1206.94 L1631.08 1206.94 L1631.67 1206.94 L1632.25 1206.94 L1632.84 1206.94 L1633.42 1206.94 L1634.01 1206.94 L1634.6 1206.94 L1635.18 1206.94 L1635.77 1206.94 L1636.36 1206.94 L1636.94 1206.94 L1637.53 1206.94 L1638.12 1206.94 L1638.7 1206.94 L1639.29 1206.94 L1639.88 1206.94 L1640.46 1206.94 L1641.05 1206.94 L1641.63 1206.94 L1642.22 1206.94 L1642.81 1206.94 L1643.39 1206.94 L1643.98 1206.94 L1644.57 1206.94 L1645.15 1206.94 L1645.74 1206.94 L1646.33 1206.94 L1646.91 1206.94 L1647.5 1206.94 L1648.09 1206.94 L1648.67 1206.94 L1649.26 1206.94 L1649.84 1206.94 L1650.43 1206.94 L1651.02 1206.94 L1651.6 1206.94 L1652.19 1206.94 L1652.78 1206.94 L1653.36 1206.94 L1653.95 1206.94 L1654.54 1206.94 L1655.12 1206.94 L1655.71 1206.94 L1656.29 1206.94 L1656.88 1206.94 L1657.47 1206.94 L1658.05 1206.94 L1658.64 1206.94 L1659.23 1206.94 L1659.81 1206.94 L1660.4 1206.94 L1660.99 1206.94 L1661.57 1206.94 L1662.16 1206.94 L1662.75 1206.94 L1663.33 1206.94 L1663.92 1206.94 L1664.5 1206.94 L1665.09 1206.94 L1665.68 1206.94 L1666.26 1206.94 L1666.85 1206.94 L1667.44 1206.94 L1668.02 1206.94 L1668.61 1206.94 L1669.2 1206.94 L1669.78 1206.94 L1670.37 1206.94 L1670.96 1206.94 L1671.54 1206.94 L1672.13 1206.94 L1672.71 1206.94 L1673.3 1206.94 L1673.89 1206.94 L1674.47 1206.94 L1675.06 1206.94 L1675.65 1206.94 L1676.23 1206.94 L1676.82 1206.94 L1677.41 1206.94 L1677.99 1206.94 L1678.58 1206.94 L1679.17 1206.94 L1679.75 1206.94 L1680.34 1206.94 L1680.92 1206.94 L1681.51 1206.94 L1682.1 1206.94 L1682.68 1206.94 L1683.27 1206.94 L1683.86 1206.94 L1684.44 1206.94 L1685.03 1206.94 L1685.62 1206.94 L1686.2 1206.94 L1686.79 1206.94 L1687.37 1206.94 L1687.96 1206.94 L1688.55 1206.94 L1689.13 1206.94 L1689.72 1206.94 L1690.31 1206.94 L1690.89 1206.94 L1691.48 1206.94 L1692.07 1206.94 L1692.65 1206.94 L1693.24 1206.94 L1693.83 1206.94 L1694.41 1206.94 L1695 1206.94 L1695.58 1206.94 L1696.17 1206.94 L1696.76 1206.94 L1697.34 1206.94 L1697.93 1206.94 L1698.52 1206.94 L1699.1 1206.94 L1699.69 1206.94 L1700.28 1206.94 L1700.86 1206.94 L1701.45 1206.94 L1702.04 1206.94 L1702.62 1206.94 L1703.21 1206.94 L1703.79 1206.94 L1704.38 1206.94 L1704.97 1206.94 L1705.55 1206.94 L1706.14 1206.94 L1706.73 1206.94 L1707.31 1206.94 L1707.9 1206.94 L1708.49 1206.94 L1709.07 1206.94 L1709.66 1206.94 L1710.24 1206.94 L1710.83 1206.94 L1711.42 1206.94 L1712 1206.94 L1712.59 1206.94 L1713.18 1206.94 L1713.76 1206.94 L1714.35 1206.94 L1714.94 1206.94 L1715.52 1206.94 L1716.11 1206.94 L1716.7 1206.94 L1717.28 1206.94 L1717.87 1206.94 L1718.45 1206.94 L1719.04 1206.94 L1719.63 1206.94 L1720.21 1206.94 L1720.8 1206.94 L1721.39 1206.94 L1721.97 1206.94 L1722.56 1206.94 L1723.15 1206.94 L1723.73 1206.94 L1724.32 1206.94 L1724.91 1206.94 L1725.49 1206.94 L1726.08 1206.94 L1726.66 1206.94 L1727.25 1206.94 L1727.84 1206.94 L1728.42 1206.94 L1729.01 1206.94 L1729.6 1206.94 L1730.18 1206.94 L1730.77 1206.94 L1731.36 1206.94 L1731.94 1206.94 L1732.53 1206.94 L1733.11 1206.94 L1733.7 1206.94 L1734.29 1206.94 L1734.87 1206.94 L1735.46 1206.94 L1736.05 1206.94 L1736.63 1206.94 L1737.22 1206.94 L1737.81 1206.94 L1738.39 1206.94 L1738.98 1206.94 L1739.57 1206.94 L1740.15 1206.94 L1740.74 1206.94 L1741.32 1206.94 L1741.91 1206.94 L1742.5 1206.94 L1743.08 1206.94 L1743.67 1206.94 L1744.26 1206.94 L1744.84 1206.94 L1745.43 1206.94 L1746.02 1206.94 L1746.6 1206.94 L1747.19 1206.94 L1747.78 1206.94 L1748.36 1206.94 L1748.95 1206.94 L1749.53 1206.94 L1750.12 1206.94 L1750.71 1206.94 L1751.29 1206.94 L1751.88 1206.94 L1752.47 1206.94 L1753.05 1206.94 L1753.64 1206.94 L1754.23 1206.94 L1754.81 1206.94 L1755.4 1206.94 L1755.99 1206.94 L1756.57 1206.94 L1757.16 1206.94 L1757.74 1206.94 L1758.33 1206.94 L1758.92 1206.94 L1759.5 1206.94 L1760.09 1206.94 L1760.68 1206.94 L1761.26 1206.94 L1761.85 1206.94 L1762.44 1206.94 L1763.02 1206.94 L1763.61 1206.94 L1764.19 1206.94 L1764.78 1206.94 L1765.37 1206.94 L1765.95 1206.94 L1766.54 1206.94 L1767.13 1206.94 L1767.71 1206.94 L1768.3 1206.94 L1768.89 1206.94 L1769.47 1206.94 L1770.06 1206.94 L1770.65 1206.94 L1771.23 1206.94 L1771.82 1206.94 L1772.4 1206.94 L1772.99 1206.94 L1773.58 1206.94 L1774.16 1206.94 L1774.75 1206.94 L1775.34 1206.94 L1775.92 1206.94 L1776.51 1206.94 L1777.1 1206.94 L1777.68 1206.94 L1778.27 1206.94 L1778.86 1206.94 L1779.44 1206.94 L1780.03 1206.94 L1780.61 1206.94 L1781.2 1206.94 L1781.79 1206.94 L1782.37 1206.94 L1782.96 1206.94 L1783.55 1206.94 L1784.13 1206.94 L1784.72 1206.94 L1785.31 1206.94 L1785.89 1206.94 L1786.48 1206.94 L1787.06 1206.94 L1787.65 1206.94 L1788.24 1206.94 L1788.82 1206.94 L1789.41 1206.94 L1790 1206.94 L1790.58 1206.94 L1791.17 1206.94 L1791.76 1206.94 L1792.34 1206.94 L1792.93 1206.94 L1793.52 1206.94 L1794.1 1206.94 L1794.69 1206.94 L1795.27 1206.94 L1795.86 1206.94 L1796.45 1206.94 L1797.03 1206.94 L1797.62 1206.94 L1798.21 1206.94 L1798.79 1206.94 L1799.38 1206.94 L1799.97 1206.94 L1800.55 1206.94 L1801.14 1206.94 L1801.73 1206.94 L1802.31 1206.94 L1802.9 1206.94 L1803.48 1206.94 L1804.07 1206.94 L1804.66 1206.94 L1805.24 1206.94 L1805.83 1206.94 L1806.42 1206.94 L1807 1206.94 L1807.59 1206.94 L1808.18 1206.94 L1808.76 1206.94 L1809.35 1206.94 L1809.94 1206.94 L1810.52 1206.94 L1811.11 1206.94 L1811.69 1206.94 L1812.28 1206.94 L1812.87 1206.94 L1813.45 1206.94 L1814.04 1206.94 L1814.63 1206.94 L1815.21 1206.94 L1815.8 1206.94 L1816.39 1206.94 L1816.97 1206.94 L1817.56 1206.94 L1818.14 1206.94 L1818.73 1206.94 L1819.32 1206.94 L1819.9 1206.94 L1820.49 1206.94 L1821.08 1206.94 L1821.66 1206.94 L1822.25 1206.94 L1822.84 1206.94 L1823.42 1206.94 L1824.01 1206.94 L1824.6 1206.94 L1825.18 1206.94 L1825.77 1206.94 L1826.35 1206.94 L1826.94 1206.94 L1827.53 1206.94 L1828.11 1206.94 L1828.7 1206.94 L1829.29 1206.94 L1829.87 1206.94 L1830.46 1206.94 L1831.05 1206.94 L1831.63 1206.94 L1832.22 1206.94 L1832.81 1206.94 L1833.39 1206.94 L1833.98 1206.94 L1834.56 1206.94 L1835.15 1206.94 L1835.74 1206.94 L1836.32 1206.94 L1836.91 1206.94 L1837.5 1206.94 L1838.08 1206.94 L1838.67 1206.94 L1839.26 1206.94 L1839.84 1206.94 L1840.43 1206.94 L1841.01 1206.94 L1841.6 1206.94 L1842.19 1206.94 L1842.77 1206.94 L1843.36 1206.94 L1843.95 1206.94 L1844.53 1206.94 L1845.12 1206.94 L1845.71 1206.94 L1846.29 1206.94 L1846.88 1206.94 L1847.47 1206.94 L1848.05 1206.94 L1848.64 1206.94 L1849.22 1206.94 L1849.81 1206.94 L1850.4 1206.94 L1850.98 1206.94 L1851.57 1206.94 L1852.16 1206.94 L1852.74 1206.94 L1853.33 1206.94 L1853.92 1206.94 L1854.5 1206.94 L1855.09 1206.94 L1855.68 1206.94 L1856.26 1206.94 L1856.85 1206.94 L1857.43 1206.94 L1858.02 1206.94 L1858.61 1206.94 L1859.19 1206.94 L1859.78 1206.94 L1860.37 1206.94 L1860.95 1206.94 L1861.54 1206.94 L1862.13 1206.94 L1862.71 1206.94 L1863.3 1206.94 L1863.88 1206.94 L1864.47 1206.94 L1865.06 1206.94 L1865.64 1206.94 L1866.23 1206.94 L1866.82 1206.94 L1867.4 1206.94 L1867.99 1206.94 L1868.58 1206.94 L1869.16 1206.94 L1869.75 1206.94 L1870.34 1206.94 L1870.92 1206.94 L1871.51 1206.94 L1872.09 1206.94 L1872.68 1206.94 L1873.27 1206.94 L1873.85 1206.94 L1874.44 1206.94 L1875.03 1206.94 L1875.61 1206.94 L1876.2 1206.94 L1876.79 1206.94 L1877.37 1206.94 L1877.96 1206.94 L1878.55 1206.94 L1879.13 1206.94 L1879.72 1206.94 L1880.3 1206.94 L1880.89 1206.94 L1881.48 1206.94 L1882.06 1206.94 L1882.65 1206.94 L1883.24 1206.94 L1883.82 1206.94 L1884.41 1206.94 L1885 1206.94 L1885.58 1206.94 L1886.17 1206.94 L1886.76 1206.94 L1887.34 1206.94 L1887.93 1206.94 L1888.51 1206.94 L1889.1 1206.94 L1889.69 1206.94 L1890.27 1206.94 L1890.86 1206.94 L1891.45 1206.94 L1892.03 1206.94 L1892.62 1206.94 L1893.21 1206.94 L1893.79 1206.94 L1894.38 1206.94 L1894.96 1206.94 L1895.55 1206.94 L1896.14 1206.94 L1896.72 1206.94 L1897.31 1206.94 L1897.9 1206.94 L1898.48 1206.94 L1899.07 1206.94 L1899.66 1206.94 L1900.24 1206.94 L1900.83 1206.94 L1901.42 1206.94 L1902 1206.94 L1902.59 1206.94 L1903.17 1206.94 L1903.76 1206.94 L1904.35 1206.94 L1904.93 1206.94 L1905.52 1206.94 L1906.11 1206.94 L1906.69 1206.94 L1907.28 1206.94 L1907.87 1206.94 L1908.45 1206.94 L1909.04 1206.94 L1909.63 1206.94 L1910.21 1206.94 L1910.8 1206.94 L1911.38 1206.94 L1911.97 1206.94 L1912.56 1206.94 L1913.14 1206.94 L1913.73 1206.94 L1914.32 1206.94 L1914.9 1206.94 L1915.49 1206.94 L1916.08 1206.94 L1916.66 1206.94 L1917.25 1206.94 L1917.83 1206.94 L1918.42 1206.94 L1919.01 1206.94 L1919.59 1206.94 L1920.18 1206.94 L1920.77 1206.94 L1921.35 1206.94 L1921.94 1206.94 L1922.53 1206.94 L1923.11 1206.94 L1923.7 1206.94 L1924.29 1206.94 L1924.87 1206.94 L1925.46 1206.94 L1926.04 1206.94 L1926.63 1206.94 L1927.22 1206.94 L1927.8 1206.94 L1928.39 1206.94 L1928.98 1206.94 L1929.56 1206.94 L1930.15 1206.94 L1930.74 1206.94 L1931.32 1206.94 L1931.91 1206.94 L1932.5 1206.94 L1933.08 1206.94 L1933.67 1206.94 L1934.25 1206.94 L1934.84 1206.94 L1935.43 1206.94 L1936.01 1206.94 L1936.6 1206.94 L1937.19 1206.94 L1937.77 1206.94 L1938.36 1206.94 L1938.95 1206.94 L1939.53 1206.94 L1940.12 1206.94 L1940.71 1206.94 L1941.29 1206.94 L1941.88 1206.94 L1942.46 1206.94 L1943.05 1206.94 L1943.64 1206.94 L1944.22 1206.94 L1944.81 1206.94 L1945.4 1206.94 L1945.98 1206.94 L1946.57 1206.94 L1947.16 1206.94 L1947.74 1206.94 L1948.33 1206.94 L1948.91 1206.94 L1949.5 1206.94 L1950.09 1206.94 L1950.67 1206.94 L1951.26 1206.94 L1951.85 1206.94 L1952.43 1206.94 L1953.02 1206.94 L1953.61 1206.94 L1954.19 1206.94 L1954.78 1206.94 L1955.37 1206.94 L1955.95 1206.94 L1956.54 1206.94 L1957.12 1206.94 L1957.71 1206.94 L1958.3 1206.94 L1958.88 1206.94 L1959.47 1206.94 L1960.06 1206.94 L1960.64 1206.94 L1961.23 1206.94 L1961.82 1206.94 L1962.4 1206.94 L1962.99 1206.94 L1963.58 1206.94 L1964.16 1206.94 L1964.75 1206.94 L1965.33 1206.94 L1965.92 1206.94 L1966.51 1206.94 L1967.09 1206.94 L1967.68 1206.94 L1968.27 1206.94 L1968.85 1206.94 L1969.44 1206.94 L1970.03 1206.94 L1970.61 1206.94 L1971.2 1206.94 L1971.78 1206.94 L1972.37 1206.94 L1972.96 1206.94 L1973.54 1206.94 L1974.13 1206.94 L1974.72 1206.94 L1975.3 1206.94 L1975.89 1206.94 L1976.48 1206.94 L1977.06 1206.94 L1977.65 1206.94 L1978.24 1206.94 L1978.82 1206.94 L1979.41 1206.94 L1979.99 1206.94 L1980.58 1206.94 L1981.17 1206.94 L1981.75 1206.94 L1982.34 1206.94 L1982.93 1206.94 L1983.51 1206.94 L1984.1 1206.94 L1984.69 1206.94 L1985.27 1206.94 L1985.86 1206.94 L1986.45 1206.94 L1987.03 1206.94 L1987.62 1206.94 L1988.2 1206.94 L1988.79 1206.94 L1989.38 1206.94 L1989.96 1206.94 L1990.55 1206.94 L1991.14 1206.94 L1991.72 1206.94 L1992.31 1206.94 L1992.9 1206.94 L1993.48 1206.94 L1994.07 1206.94 L1994.65 1206.94 L1995.24 1206.94 L1995.83 1206.94 L1996.41 1206.94 L1997 1206.94 L1997.59 1206.94 L1998.17 1206.94 L1998.76 1206.94 L1999.35 1206.94 L1999.93 1206.94 L2000.52 1206.94 L2001.11 1206.94 L2001.69 1206.94 L2002.28 1206.94 L2002.86 1206.94 L2003.45 1206.94 L2004.04 1206.94 L2004.62 1206.94 L2005.21 1206.94 L2005.8 1206.94 L2006.38 1206.94 L2006.97 1206.94 L2007.56 1206.94 L2008.14 1206.94 L2008.73 1206.94 L2009.32 1206.94 L2009.9 1206.94 L2010.49 1206.94 L2011.07 1206.94 L2011.66 1206.94 L2012.25 1206.94 L2012.83 1206.94 L2013.42 1206.94 L2014.01 1206.94 L2014.59 1206.94 L2015.18 1206.94 L2015.77 1206.94 L2016.35 1206.94 L2016.94 1206.94 L2017.53 1206.94 L2018.11 1206.94 L2018.7 1206.94 L2019.28 1206.94 L2019.87 1206.94 L2020.46 1206.94 L2021.04 1206.94 L2021.63 1206.94 L2022.22 1206.94 L2022.8 1206.94 L2023.39 1206.94 L2023.98 1206.94 L2024.56 1206.94 L2025.15 1206.94 L2025.73 1206.94 L2026.32 1206.94 L2026.91 1206.94 L2027.49 1206.94 L2028.08 1206.94 L2028.67 1206.94 L2029.25 1206.94 L2029.84 1206.94 L2030.43 1206.94 L2031.01 1206.94 L2031.6 1206.94 L2032.19 1206.94 L2032.77 1206.94 L2033.36 1206.94 L2033.94 1206.94 L2034.53 1206.94 L2035.12 1206.94 L2035.7 1206.94 L2036.29 1206.94 L2036.88 1206.94 L2037.46 1206.94 L2038.05 1206.94 L2038.64 1206.94 L2039.22 1206.94 L2039.81 1206.94 L2040.4 1206.94 L2040.98 1206.94 L2041.57 1206.94 L2042.15 1206.94 L2042.74 1206.94 L2043.33 1206.94 L2043.91 1206.94 L2044.5 1206.94 L2045.09 1206.94 L2045.67 1206.94 L2046.26 1206.94 L2046.85 1206.94 L2047.43 1206.94 L2048.02 1206.94 L2048.6 1206.94 L2049.19 1206.94 L2049.78 1206.94 L2050.36 1206.94 L2050.95 1206.94 L2051.54 1206.94 L2052.12 1206.94 L2052.71 1206.94 L2053.3 1206.94 L2053.88 1206.94 L2054.47 1206.94 L2055.06 1206.94 L2055.64 1206.94 L2056.23 1206.94 L2056.81 1206.94 L2057.4 1206.94 L2057.99 1206.94 L2058.57 1206.94 L2059.16 1206.94 L2059.75 1206.94 L2060.33 1206.94 L2060.92 1206.94 L2061.51 1206.94 L2062.09 1206.94 L2062.68 1206.94 L2063.27 1206.94 L2063.85 1206.94 L2064.44 1206.94 L2065.02 1206.94 L2065.61 1206.94 L2066.2 1206.94 L2066.78 1206.94 L2067.37 1206.94 L2067.96 1206.94 L2068.54 1206.94 L2069.13 1206.94 L2069.72 1206.94 L2070.3 1206.94 L2070.89 1206.94 L2071.48 1206.94 L2072.06 1206.94 L2072.65 1206.94 L2073.23 1206.94 L2073.82 1206.94 L2074.41 1206.94 L2074.99 1206.94 L2075.58 1206.94 L2076.17 1206.94 L2076.75 1206.94 L2077.34 1206.94 L2077.93 1206.94 L2078.51 1206.94 L2079.1 1206.94 L2079.68 1206.94 L2080.27 1206.94 L2080.86 1206.94 L2081.44 1206.94 L2082.03 1206.94 L2082.62 1206.94 L2083.2 1206.94 L2083.79 1206.94 L2084.38 1206.94 L2084.96 1206.94 L2085.55 1206.94 L2086.14 1206.94 L2086.72 1206.94 L2087.31 1206.94 L2087.89 1206.94 L2088.48 1206.94 L2089.07 1206.94 L2089.65 1206.94 L2090.24 1206.94 L2090.83 1206.94 L2091.41 1206.94 L2092 1206.94 L2092.59 1206.94 L2093.17 1206.94 L2093.76 1206.94 L2094.35 1206.94 L2094.93 1206.94 L2095.52 1206.94 L2096.1 1206.94 L2096.69 1206.94 L2097.28 1206.94 L2097.86 1206.94 L2098.45 1206.94 L2099.04 1206.94 L2099.62 1206.94 L2100.21 1206.94 L2100.8 1206.94 L2101.38 1206.94 L2101.97 1206.94 L2102.55 1206.94 L2103.14 1206.94 L2103.73 1206.94 L2104.31 1206.94 L2104.9 1206.94 L2105.49 1206.94 L2106.07 1206.94 L2106.66 1206.94 L2107.25 1206.94 L2107.83 1206.94 L2108.42 1206.94 L2109.01 1206.94 L2109.59 1206.94 L2110.18 1206.94 L2110.76 1206.94 L2111.35 1206.94 L2111.94 1206.94 L2112.52 1206.94 L2113.11 1206.94 L2113.7 1206.94 L2114.28 1206.94 L2114.87 1206.94 L2115.46 1206.94 L2116.04 1206.94 L2116.63 1206.94 L2117.22 1206.94 L2117.8 1206.94 L2118.39 1206.94 L2118.97 1206.94 L2119.56 1206.94 L2120.15 1206.94 L2120.73 1206.94 L2121.32 1206.94 L2121.91 1206.94 L2122.49 1206.94 L2123.08 1206.94 L2123.67 1206.94 L2124.25 1206.94 L2124.84 1206.94 L2125.42 1206.94 L2126.01 1206.94 L2126.6 1206.94 L2127.18 1206.94 L2127.77 1206.94 L2128.36 1206.94 L2128.94 1206.94 L2129.53 1206.94 L2130.12 1206.94 L2130.7 1206.94 L2131.29 1206.94 L2131.88 1206.94 L2132.46 1206.94 L2133.05 1206.94 L2133.63 1206.94 L2134.22 1206.94 L2134.81 1206.94 L2135.39 1206.94 L2135.98 1206.94 L2136.57 1206.94 L2137.15 1206.94 L2137.74 1206.94 L2138.33 1206.94 L2138.91 1206.94 L2139.5 1206.94 L2140.09 1206.94 L2140.67 1206.94 L2141.26 1206.94 L2141.84 1206.94 L2142.43 1206.94 L2143.02 1206.94 L2143.6 1206.94 L2144.19 1206.94 L2144.78 1206.94 L2145.36 1206.94 L2145.95 1206.94 L2146.54 1206.94 L2147.12 1206.94 L2147.71 1206.94 L2148.3 1206.94 L2148.88 1206.94 L2149.47 1206.94 L2150.05 1206.94 L2150.64 1206.94 L2151.23 1206.94 L2151.81 1206.94 L2152.4 1206.94 L2152.99 1206.94 L2153.57 1206.94 L2154.16 1206.94 L2154.75 1206.94 L2155.33 1206.94 L2155.92 1206.94 L2156.5 1206.94 L2157.09 1206.94 L2157.68 1206.94 L2158.26 1206.94 L2158.26 1206.73 L2157.68 1206.73 L2157.09 1206.73 L2156.5 1206.73 L2155.92 1206.73 L2155.33 1206.73 L2154.75 1206.73 L2154.16 1206.73 L2153.57 1206.73 L2152.99 1206.73 L2152.4 1206.73 L2151.81 1206.73 L2151.23 1206.73 L2150.64 1206.73 L2150.05 1206.73 L2149.47 1206.73 L2148.88 1206.73 L2148.3 1206.73 L2147.71 1206.73 L2147.12 1206.73 L2146.54 1206.73 L2145.95 1206.73 L2145.36 1206.73 L2144.78 1206.73 L2144.19 1206.73 L2143.6 1206.73 L2143.02 1206.73 L2142.43 1206.73 L2141.84 1206.73 L2141.26 1206.73 L2140.67 1206.73 L2140.09 1206.73 L2139.5 1206.73 L2138.91 1206.73 L2138.33 1206.73 L2137.74 1206.73 L2137.15 1206.73 L2136.57 1206.73 L2135.98 1206.73 L2135.39 1206.73 L2134.81 1206.73 L2134.22 1206.73 L2133.63 1206.73 L2133.05 1206.73 L2132.46 1206.73 L2131.88 1206.73 L2131.29 1206.73 L2130.7 1206.73 L2130.12 1206.73 L2129.53 1206.73 L2128.94 1206.73 L2128.36 1206.73 L2127.77 1206.73 L2127.18 1206.73 L2126.6 1206.73 L2126.01 1206.73 L2125.42 1206.73 L2124.84 1206.73 L2124.25 1206.73 L2123.67 1206.73 L2123.08 1206.73 L2122.49 1206.73 L2121.91 1206.73 L2121.32 1206.73 L2120.73 1206.73 L2120.15 1206.73 L2119.56 1206.73 L2118.97 1206.73 L2118.39 1206.73 L2117.8 1206.73 L2117.22 1206.73 L2116.63 1206.73 L2116.04 1206.73 L2115.46 1206.73 L2114.87 1206.73 L2114.28 1206.73 L2113.7 1206.73 L2113.11 1206.73 L2112.52 1206.73 L2111.94 1206.73 L2111.35 1206.73 L2110.76 1206.73 L2110.18 1206.73 L2109.59 1206.73 L2109.01 1206.73 L2108.42 1206.73 L2107.83 1206.73 L2107.25 1206.73 L2106.66 1206.73 L2106.07 1206.73 L2105.49 1206.73 L2104.9 1206.73 L2104.31 1206.73 L2103.73 1206.73 L2103.14 1206.73 L2102.55 1206.73 L2101.97 1206.73 L2101.38 1206.73 L2100.8 1206.73 L2100.21 1206.73 L2099.62 1206.73 L2099.04 1206.73 L2098.45 1206.73 L2097.86 1206.73 L2097.28 1206.73 L2096.69 1206.73 L2096.1 1206.73 L2095.52 1206.73 L2094.93 1206.73 L2094.35 1206.73 L2093.76 1206.73 L2093.17 1206.73 L2092.59 1206.73 L2092 1206.73 L2091.41 1206.73 L2090.83 1206.73 L2090.24 1206.73 L2089.65 1206.73 L2089.07 1206.73 L2088.48 1206.73 L2087.89 1206.73 L2087.31 1206.73 L2086.72 1206.73 L2086.14 1206.73 L2085.55 1206.73 L2084.96 1206.73 L2084.38 1206.73 L2083.79 1206.73 L2083.2 1206.73 L2082.62 1206.73 L2082.03 1206.73 L2081.44 1206.73 L2080.86 1206.73 L2080.27 1206.73 L2079.68 1206.73 L2079.1 1206.73 L2078.51 1206.73 L2077.93 1206.73 L2077.34 1206.73 L2076.75 1206.73 L2076.17 1206.73 L2075.58 1206.73 L2074.99 1206.73 L2074.41 1206.73 L2073.82 1206.73 L2073.23 1206.73 L2072.65 1206.73 L2072.06 1206.73 L2071.48 1206.73 L2070.89 1206.73 L2070.3 1206.73 L2069.72 1206.73 L2069.13 1206.73 L2068.54 1206.73 L2067.96 1206.73 L2067.37 1206.73 L2066.78 1206.73 L2066.2 1206.73 L2065.61 1206.73 L2065.02 1206.73 L2064.44 1206.73 L2063.85 1206.73 L2063.27 1206.73 L2062.68 1206.73 L2062.09 1206.73 L2061.51 1206.73 L2060.92 1206.73 L2060.33 1206.73 L2059.75 1206.73 L2059.16 1206.73 L2058.57 1206.73 L2057.99 1206.73 L2057.4 1206.73 L2056.81 1206.73 L2056.23 1206.73 L2055.64 1206.73 L2055.06 1206.73 L2054.47 1206.73 L2053.88 1206.73 L2053.3 1206.73 L2052.71 1206.73 L2052.12 1206.73 L2051.54 1206.73 L2050.95 1206.73 L2050.36 1206.73 L2049.78 1206.73 L2049.19 1206.73 L2048.6 1206.73 L2048.02 1206.73 L2047.43 1206.73 L2046.85 1206.73 L2046.26 1206.73 L2045.67 1206.73 L2045.09 1206.73 L2044.5 1206.73 L2043.91 1206.73 L2043.33 1206.73 L2042.74 1206.73 L2042.15 1206.73 L2041.57 1206.73 L2040.98 1206.73 L2040.4 1206.73 L2039.81 1206.73 L2039.22 1206.73 L2038.64 1206.73 L2038.05 1206.73 L2037.46 1206.73 L2036.88 1206.73 L2036.29 1206.73 L2035.7 1206.73 L2035.12 1206.73 L2034.53 1206.73 L2033.94 1206.73 L2033.36 1206.73 L2032.77 1206.73 L2032.19 1206.73 L2031.6 1206.73 L2031.01 1206.73 L2030.43 1206.73 L2029.84 1206.73 L2029.25 1206.73 L2028.67 1206.73 L2028.08 1206.73 L2027.49 1206.73 L2026.91 1206.73 L2026.32 1206.73 L2025.73 1206.73 L2025.15 1206.73 L2024.56 1206.73 L2023.98 1206.73 L2023.39 1206.73 L2022.8 1206.73 L2022.22 1206.73 L2021.63 1206.73 L2021.04 1206.73 L2020.46 1206.73 L2019.87 1206.73 L2019.28 1206.73 L2018.7 1206.73 L2018.11 1206.73 L2017.53 1206.73 L2016.94 1206.73 L2016.35 1206.73 L2015.77 1206.73 L2015.18 1206.73 L2014.59 1206.73 L2014.01 1206.73 L2013.42 1206.73 L2012.83 1206.73 L2012.25 1206.73 L2011.66 1206.73 L2011.07 1206.73 L2010.49 1206.73 L2009.9 1206.73 L2009.32 1206.73 L2008.73 1206.73 L2008.14 1206.73 L2007.56 1206.73 L2006.97 1206.73 L2006.38 1206.73 L2005.8 1206.73 L2005.21 1206.73 L2004.62 1206.73 L2004.04 1206.73 L2003.45 1206.73 L2002.86 1206.73 L2002.28 1206.73 L2001.69 1206.73 L2001.11 1206.73 L2000.52 1206.73 L1999.93 1206.73 L1999.35 1206.73 L1998.76 1206.73 L1998.17 1206.73 L1997.59 1206.73 L1997 1206.73 L1996.41 1206.73 L1995.83 1206.73 L1995.24 1206.73 L1994.65 1206.73 L1994.07 1206.73 L1993.48 1206.73 L1992.9 1206.73 L1992.31 1206.73 L1991.72 1206.73 L1991.14 1206.73 L1990.55 1206.73 L1989.96 1206.73 L1989.38 1206.73 L1988.79 1206.73 L1988.2 1206.73 L1987.62 1206.73 L1987.03 1206.73 L1986.45 1206.73 L1985.86 1206.73 L1985.27 1206.73 L1984.69 1206.73 L1984.1 1206.73 L1983.51 1206.73 L1982.93 1206.73 L1982.34 1206.73 L1981.75 1206.73 L1981.17 1206.73 L1980.58 1206.73 L1979.99 1206.73 L1979.41 1206.73 L1978.82 1206.73 L1978.24 1206.73 L1977.65 1206.73 L1977.06 1206.73 L1976.48 1206.73 L1975.89 1206.73 L1975.3 1206.73 L1974.72 1206.73 L1974.13 1206.73 L1973.54 1206.73 L1972.96 1206.73 L1972.37 1206.73 L1971.78 1206.73 L1971.2 1206.73 L1970.61 1206.73 L1970.03 1206.73 L1969.44 1206.73 L1968.85 1206.73 L1968.27 1206.73 L1967.68 1206.73 L1967.09 1206.73 L1966.51 1206.73 L1965.92 1206.73 L1965.33 1206.73 L1964.75 1206.73 L1964.16 1206.73 L1963.58 1206.73 L1962.99 1206.73 L1962.4 1206.73 L1961.82 1206.73 L1961.23 1206.73 L1960.64 1206.73 L1960.06 1206.73 L1959.47 1206.73 L1958.88 1206.73 L1958.3 1206.73 L1957.71 1206.73 L1957.12 1206.73 L1956.54 1206.73 L1955.95 1206.73 L1955.37 1206.73 L1954.78 1206.73 L1954.19 1206.73 L1953.61 1206.73 L1953.02 1206.73 L1952.43 1206.73 L1951.85 1206.73 L1951.26 1206.73 L1950.67 1206.73 L1950.09 1206.73 L1949.5 1206.73 L1948.91 1206.73 L1948.33 1206.73 L1947.74 1206.73 L1947.16 1206.73 L1946.57 1206.73 L1945.98 1206.73 L1945.4 1206.73 L1944.81 1206.73 L1944.22 1206.73 L1943.64 1206.73 L1943.05 1206.73 L1942.46 1206.73 L1941.88 1206.73 L1941.29 1206.73 L1940.71 1206.73 L1940.12 1206.73 L1939.53 1206.73 L1938.95 1206.73 L1938.36 1206.73 L1937.77 1206.73 L1937.19 1206.73 L1936.6 1206.73 L1936.01 1206.73 L1935.43 1206.73 L1934.84 1206.73 L1934.25 1206.73 L1933.67 1206.73 L1933.08 1206.73 L1932.5 1206.73 L1931.91 1206.73 L1931.32 1206.73 L1930.74 1206.73 L1930.15 1206.73 L1929.56 1206.73 L1928.98 1206.73 L1928.39 1206.73 L1927.8 1206.73 L1927.22 1206.73 L1926.63 1206.73 L1926.04 1206.73 L1925.46 1206.73 L1924.87 1206.73 L1924.29 1206.73 L1923.7 1206.73 L1923.11 1206.73 L1922.53 1206.73 L1921.94 1206.73 L1921.35 1206.73 L1920.77 1206.73 L1920.18 1206.73 L1919.59 1206.73 L1919.01 1206.73 L1918.42 1206.73 L1917.83 1206.73 L1917.25 1206.73 L1916.66 1206.73 L1916.08 1206.73 L1915.49 1206.73 L1914.9 1206.73 L1914.32 1206.73 L1913.73 1206.73 L1913.14 1206.73 L1912.56 1206.73 L1911.97 1206.73 L1911.38 1206.73 L1910.8 1206.73 L1910.21 1206.73 L1909.63 1206.73 L1909.04 1206.73 L1908.45 1206.73 L1907.87 1206.73 L1907.28 1206.73 L1906.69 1206.73 L1906.11 1206.73 L1905.52 1206.73 L1904.93 1206.73 L1904.35 1206.73 L1903.76 1206.73 L1903.17 1206.73 L1902.59 1206.73 L1902 1206.73 L1901.42 1206.73 L1900.83 1206.73 L1900.24 1206.73 L1899.66 1206.73 L1899.07 1206.73 L1898.48 1206.73 L1897.9 1206.73 L1897.31 1206.73 L1896.72 1206.73 L1896.14 1206.73 L1895.55 1206.73 L1894.96 1206.73 L1894.38 1206.73 L1893.79 1206.73 L1893.21 1206.73 L1892.62 1206.73 L1892.03 1206.73 L1891.45 1206.73 L1890.86 1206.73 L1890.27 1206.73 L1889.69 1206.73 L1889.1 1206.73 L1888.51 1206.73 L1887.93 1206.73 L1887.34 1206.73 L1886.76 1206.73 L1886.17 1206.73 L1885.58 1206.73 L1885 1206.73 L1884.41 1206.73 L1883.82 1206.73 L1883.24 1206.73 L1882.65 1206.73 L1882.06 1206.73 L1881.48 1206.73 L1880.89 1206.73 L1880.3 1206.73 L1879.72 1206.73 L1879.13 1206.73 L1878.55 1206.73 L1877.96 1206.73 L1877.37 1206.73 L1876.79 1206.73 L1876.2 1206.73 L1875.61 1206.73 L1875.03 1206.73 L1874.44 1206.73 L1873.85 1206.73 L1873.27 1206.73 L1872.68 1206.73 L1872.09 1206.73 L1871.51 1206.73 L1870.92 1206.73 L1870.34 1206.73 L1869.75 1206.73 L1869.16 1206.73 L1868.58 1206.73 L1867.99 1206.73 L1867.4 1206.73 L1866.82 1206.73 L1866.23 1206.73 L1865.64 1206.73 L1865.06 1206.73 L1864.47 1206.73 L1863.88 1206.73 L1863.3 1206.73 L1862.71 1206.73 L1862.13 1206.73 L1861.54 1206.73 L1860.95 1206.73 L1860.37 1206.73 L1859.78 1206.73 L1859.19 1206.73 L1858.61 1206.73 L1858.02 1206.73 L1857.43 1206.73 L1856.85 1206.73 L1856.26 1206.73 L1855.68 1206.73 L1855.09 1206.73 L1854.5 1206.73 L1853.92 1206.73 L1853.33 1206.73 L1852.74 1206.73 L1852.16 1206.73 L1851.57 1206.73 L1850.98 1206.73 L1850.4 1206.73 L1849.81 1206.73 L1849.22 1206.73 L1848.64 1206.73 L1848.05 1206.73 L1847.47 1206.73 L1846.88 1206.73 L1846.29 1206.73 L1845.71 1206.73 L1845.12 1206.73 L1844.53 1206.73 L1843.95 1206.73 L1843.36 1206.73 L1842.77 1206.73 L1842.19 1206.73 L1841.6 1206.73 L1841.01 1206.73 L1840.43 1206.73 L1839.84 1206.73 L1839.26 1206.73 L1838.67 1206.73 L1838.08 1206.73 L1837.5 1206.73 L1836.91 1206.73 L1836.32 1206.73 L1835.74 1206.73 L1835.15 1206.73 L1834.56 1206.73 L1833.98 1206.73 L1833.39 1206.73 L1832.81 1206.73 L1832.22 1206.73 L1831.63 1206.73 L1831.05 1206.73 L1830.46 1206.73 L1829.87 1206.73 L1829.29 1206.73 L1828.7 1206.73 L1828.11 1206.73 L1827.53 1206.73 L1826.94 1206.73 L1826.35 1206.73 L1825.77 1206.73 L1825.18 1206.73 L1824.6 1206.73 L1824.01 1206.73 L1823.42 1206.73 L1822.84 1206.73 L1822.25 1206.73 L1821.66 1206.73 L1821.08 1206.73 L1820.49 1206.73 L1819.9 1206.73 L1819.32 1206.73 L1818.73 1206.73 L1818.14 1206.73 L1817.56 1206.73 L1816.97 1206.73 L1816.39 1206.73 L1815.8 1206.73 L1815.21 1206.73 L1814.63 1206.73 L1814.04 1206.73 L1813.45 1206.73 L1812.87 1206.73 L1812.28 1206.73 L1811.69 1206.73 L1811.11 1206.73 L1810.52 1206.73 L1809.94 1206.73 L1809.35 1206.73 L1808.76 1206.73 L1808.18 1206.73 L1807.59 1206.73 L1807 1206.73 L1806.42 1206.73 L1805.83 1206.73 L1805.24 1206.73 L1804.66 1206.73 L1804.07 1206.73 L1803.48 1206.73 L1802.9 1206.73 L1802.31 1206.73 L1801.73 1206.73 L1801.14 1206.73 L1800.55 1206.73 L1799.97 1206.73 L1799.38 1206.73 L1798.79 1206.73 L1798.21 1206.73 L1797.62 1206.73 L1797.03 1206.73 L1796.45 1206.73 L1795.86 1206.73 L1795.27 1206.73 L1794.69 1206.73 L1794.1 1206.73 L1793.52 1206.73 L1792.93 1206.73 L1792.34 1206.73 L1791.76 1206.73 L1791.17 1206.73 L1790.58 1206.73 L1790 1206.73 L1789.41 1206.73 L1788.82 1206.73 L1788.24 1206.73 L1787.65 1206.73 L1787.06 1206.73 L1786.48 1206.73 L1785.89 1206.73 L1785.31 1206.73 L1784.72 1206.73 L1784.13 1206.73 L1783.55 1206.73 L1782.96 1206.73 L1782.37 1206.73 L1781.79 1206.73 L1781.2 1206.73 L1780.61 1206.73 L1780.03 1206.73 L1779.44 1206.73 L1778.86 1206.73 L1778.27 1206.73 L1777.68 1206.73 L1777.1 1206.73 L1776.51 1206.73 L1775.92 1206.73 L1775.34 1206.73 L1774.75 1206.73 L1774.16 1206.73 L1773.58 1206.73 L1772.99 1206.73 L1772.4 1206.73 L1771.82 1206.73 L1771.23 1206.73 L1770.65 1206.73 L1770.06 1206.73 L1769.47 1206.73 L1768.89 1206.73 L1768.3 1206.73 L1767.71 1206.73 L1767.13 1206.73 L1766.54 1206.73 L1765.95 1206.73 L1765.37 1206.73 L1764.78 1206.73 L1764.19 1206.73 L1763.61 1206.73 L1763.02 1206.73 L1762.44 1206.73 L1761.85 1206.73 L1761.26 1206.73 L1760.68 1206.73 L1760.09 1206.73 L1759.5 1206.73 L1758.92 1206.73 L1758.33 1206.73 L1757.74 1206.73 L1757.16 1206.73 L1756.57 1206.73 L1755.99 1206.73 L1755.4 1206.73 L1754.81 1206.73 L1754.23 1206.73 L1753.64 1206.73 L1753.05 1206.73 L1752.47 1206.73 L1751.88 1206.73 L1751.29 1206.73 L1750.71 1206.73 L1750.12 1206.73 L1749.53 1206.73 L1748.95 1206.73 L1748.36 1206.73 L1747.78 1206.73 L1747.19 1206.73 L1746.6 1206.73 L1746.02 1206.73 L1745.43 1206.73 L1744.84 1206.73 L1744.26 1206.73 L1743.67 1206.73 L1743.08 1206.73 L1742.5 1206.73 L1741.91 1206.73 L1741.32 1206.73 L1740.74 1206.73 L1740.15 1206.73 L1739.57 1206.73 L1738.98 1206.73 L1738.39 1206.73 L1737.81 1206.73 L1737.22 1206.73 L1736.63 1206.73 L1736.05 1206.73 L1735.46 1206.73 L1734.87 1206.73 L1734.29 1206.73 L1733.7 1206.73 L1733.11 1206.73 L1732.53 1206.73 L1731.94 1206.73 L1731.36 1206.73 L1730.77 1206.73 L1730.18 1206.73 L1729.6 1206.73 L1729.01 1206.73 L1728.42 1206.73 L1727.84 1206.73 L1727.25 1206.73 L1726.66 1206.73 L1726.08 1206.73 L1725.49 1206.73 L1724.91 1206.73 L1724.32 1206.73 L1723.73 1206.73 L1723.15 1206.73 L1722.56 1206.73 L1721.97 1206.73 L1721.39 1206.73 L1720.8 1206.73 L1720.21 1206.73 L1719.63 1206.73 L1719.04 1206.73 L1718.45 1206.73 L1717.87 1206.73 L1717.28 1206.73 L1716.7 1206.73 L1716.11 1206.73 L1715.52 1206.73 L1714.94 1206.73 L1714.35 1206.73 L1713.76 1206.73 L1713.18 1206.73 L1712.59 1206.73 L1712 1206.73 L1711.42 1206.73 L1710.83 1206.73 L1710.24 1206.73 L1709.66 1206.73 L1709.07 1206.73 L1708.49 1206.73 L1707.9 1206.73 L1707.31 1206.73 L1706.73 1206.73 L1706.14 1206.73 L1705.55 1206.73 L1704.97 1206.73 L1704.38 1206.73 L1703.79 1206.73 L1703.21 1206.73 L1702.62 1206.73 L1702.04 1206.73 L1701.45 1206.73 L1700.86 1206.73 L1700.28 1206.73 L1699.69 1206.73 L1699.1 1206.73 L1698.52 1206.73 L1697.93 1206.73 L1697.34 1206.73 L1696.76 1206.73 L1696.17 1206.73 L1695.58 1206.73 L1695 1206.73 L1694.41 1206.73 L1693.83 1206.73 L1693.24 1206.73 L1692.65 1206.73 L1692.07 1206.73 L1691.48 1206.73 L1690.89 1206.73 L1690.31 1206.73 L1689.72 1206.73 L1689.13 1206.73 L1688.55 1206.73 L1687.96 1206.73 L1687.37 1206.73 L1686.79 1206.73 L1686.2 1206.73 L1685.62 1206.73 L1685.03 1206.73 L1684.44 1206.73 L1683.86 1206.73 L1683.27 1206.73 L1682.68 1206.73 L1682.1 1206.73 L1681.51 1206.73 L1680.92 1206.73 L1680.34 1206.73 L1679.75 1206.73 L1679.17 1206.73 L1678.58 1206.73 L1677.99 1206.73 L1677.41 1206.73 L1676.82 1206.73 L1676.23 1206.73 L1675.65 1206.73 L1675.06 1206.73 L1674.47 1206.73 L1673.89 1206.73 L1673.3 1206.73 L1672.71 1206.73 L1672.13 1206.73 L1671.54 1206.73 L1670.96 1206.73 L1670.37 1206.73 L1669.78 1206.73 L1669.2 1206.73 L1668.61 1206.73 L1668.02 1206.73 L1667.44 1206.73 L1666.85 1206.73 L1666.26 1206.73 L1665.68 1206.73 L1665.09 1206.73 L1664.5 1206.73 L1663.92 1206.73 L1663.33 1206.73 L1662.75 1206.73 L1662.16 1206.73 L1661.57 1206.73 L1660.99 1206.73 L1660.4 1206.73 L1659.81 1206.73 L1659.23 1206.73 L1658.64 1206.73 L1658.05 1206.73 L1657.47 1206.73 L1656.88 1206.73 L1656.29 1206.73 L1655.71 1206.73 L1655.12 1206.73 L1654.54 1206.73 L1653.95 1206.73 L1653.36 1206.73 L1652.78 1206.73 L1652.19 1206.73 L1651.6 1206.73 L1651.02 1206.73 L1650.43 1206.73 L1649.84 1206.73 L1649.26 1206.73 L1648.67 1206.73 L1648.09 1206.73 L1647.5 1206.73 L1646.91 1206.73 L1646.33 1206.73 L1645.74 1206.73 L1645.15 1206.73 L1644.57 1206.73 L1643.98 1206.73 L1643.39 1206.73 L1642.81 1206.73 L1642.22 1206.73 L1641.63 1206.73 L1641.05 1206.73 L1640.46 1206.73 L1639.88 1206.73 L1639.29 1206.73 L1638.7 1206.73 L1638.12 1206.73 L1637.53 1206.73 L1636.94 1206.73 L1636.36 1206.73 L1635.77 1206.73 L1635.18 1206.73 L1634.6 1206.73 L1634.01 1206.73 L1633.42 1206.73 L1632.84 1206.73 L1632.25 1206.73 L1631.67 1206.73 L1631.08 1206.73 L1630.49 1206.73 L1629.91 1206.73 L1629.32 1206.73 L1628.73 1206.73 L1628.15 1206.73 L1627.56 1206.73 L1626.97 1206.73 L1626.39 1206.73 L1625.8 1206.73 L1625.22 1206.73 L1624.63 1206.73 L1624.04 1206.73 L1623.46 1206.73 L1622.87 1206.73 L1622.28 1206.73 L1621.7 1206.73 L1621.11 1206.73 L1620.52 1206.73 L1619.94 1206.73 L1619.35 1206.73 L1618.76 1206.73 L1618.18 1206.73 L1617.59 1206.73 L1617.01 1206.73 L1616.42 1206.73 L1615.83 1206.73 L1615.25 1206.73 L1614.66 1206.73 L1614.07 1206.73 L1613.49 1206.73 L1612.9 1206.73 L1612.31 1206.73 L1611.73 1206.73 L1611.14 1206.73 L1610.55 1206.73 L1609.97 1206.73 L1609.38 1206.73 L1608.8 1206.73 L1608.21 1206.73 L1607.62 1206.73 L1607.04 1206.73 L1606.45 1206.73 L1605.86 1206.73 L1605.28 1206.73 L1604.69 1206.73 L1604.1 1206.73 L1603.52 1206.73 L1602.93 1206.73 L1602.34 1206.73 L1601.76 1206.73 L1601.17 1206.73 L1600.59 1206.73 L1600 1206.73 L1599.41 1206.73 L1598.83 1206.73 L1598.24 1206.73 L1597.65 1206.73 L1597.07 1206.73 L1596.48 1206.73 L1595.89 1206.73 L1595.31 1206.73 L1594.72 1206.73 L1594.14 1206.73 L1593.55 1206.73 L1592.96 1206.73 L1592.38 1206.73 L1591.79 1206.73 L1591.2 1206.73 L1590.62 1206.73 L1590.03 1206.73 L1589.44 1206.73 L1588.86 1206.73 L1588.27 1206.73 L1587.68 1206.73 L1587.1 1206.73 L1586.51 1206.73 L1585.93 1206.73 L1585.34 1206.73 L1584.75 1206.73 L1584.17 1206.73 L1583.58 1206.73 L1582.99 1206.73 L1582.41 1206.73 L1581.82 1206.73 L1581.23 1206.73 L1580.65 1206.73 L1580.06 1206.73 L1579.47 1206.73 L1578.89 1206.73 L1578.3 1206.73 L1577.72 1206.73 L1577.13 1206.73 L1576.54 1206.73 L1575.96 1206.73 L1575.37 1206.73 L1574.78 1206.73 L1574.2 1206.73 L1573.61 1206.73 L1573.02 1206.73 L1572.44 1206.73 L1571.85 1206.73 L1571.27 1206.73 L1570.68 1206.73 L1570.09 1206.73 L1569.51 1206.73 L1568.92 1206.73 L1568.33 1206.73 L1567.75 1206.73 L1567.16 1206.73 L1566.57 1206.73 L1565.99 1206.73 L1565.4 1206.73 L1564.81 1206.73 L1564.23 1206.73 L1563.64 1206.73 L1563.06 1206.73 L1562.47 1206.73 L1561.88 1206.73 L1561.3 1206.73 L1560.71 1206.73 L1560.12 1206.73 L1559.54 1206.73 L1558.95 1206.73 L1558.36 1206.73 L1557.78 1206.73 L1557.19 1206.73 L1556.6 1206.73 L1556.02 1206.73 L1555.43 1206.73 L1554.85 1206.73 L1554.26 1206.73 L1553.67 1206.73 L1553.09 1206.73 L1552.5 1206.73 L1551.91 1206.73 L1551.33 1206.73 L1550.74 1206.73 L1550.15 1206.73 L1549.57 1206.73 L1548.98 1206.73 L1548.4 1206.73 L1547.81 1206.73 L1547.22 1206.73 L1546.64 1206.73 L1546.05 1206.73 L1545.46 1206.73 L1544.88 1206.73 L1544.29 1206.73 L1543.7 1206.73 L1543.12 1206.73 L1542.53 1206.73 L1541.94 1206.73 L1541.36 1206.73 L1540.77 1206.73 L1540.19 1206.73 L1539.6 1206.73 L1539.01 1206.73 L1538.43 1206.73 L1537.84 1206.73 L1537.25 1206.73 L1536.67 1206.73 L1536.08 1206.73 L1535.49 1206.73 L1534.91 1206.73 L1534.32 1206.73 L1533.73 1206.73 L1533.15 1206.73 L1532.56 1206.73 L1531.98 1206.73 L1531.39 1206.73 L1530.8 1206.73 L1530.22 1206.73 L1529.63 1206.73 L1529.04 1206.73 L1528.46 1206.73 L1527.87 1206.73 L1527.28 1206.73 L1526.7 1206.73 L1526.11 1206.73 L1525.52 1206.73 L1524.94 1206.73 L1524.35 1206.73 L1523.77 1206.73 L1523.18 1206.73 L1522.59 1206.73 L1522.01 1206.73 L1521.42 1206.73 L1520.83 1206.73 L1520.25 1206.73 L1519.66 1206.73 L1519.07 1206.73 L1518.49 1206.73 L1517.9 1206.73 L1517.32 1206.73 L1516.73 1206.73 L1516.14 1206.73 L1515.56 1206.73 L1514.97 1206.73 L1514.38 1206.73 L1513.8 1206.73 L1513.21 1206.73 L1512.62 1206.73 L1512.04 1206.73 L1511.45 1206.73 L1510.86 1206.73 L1510.28 1206.73 L1509.69 1206.73 L1509.11 1206.73 L1508.52 1206.73 L1507.93 1206.73 L1507.35 1206.73 L1506.76 1206.73 L1506.17 1206.73 L1505.59 1206.73 L1505 1206.73 L1504.41 1206.73 L1503.83 1206.73 L1503.24 1206.73 L1502.65 1206.73 L1502.07 1206.73 L1501.48 1206.73 L1500.9 1206.73 L1500.31 1206.73 L1499.72 1206.73 L1499.14 1206.73 L1498.55 1206.73 L1497.96 1206.73 L1497.38 1206.73 L1496.79 1206.73 L1496.2 1206.73 L1495.62 1206.73 L1495.03 1206.73 L1494.45 1206.73 L1493.86 1206.73 L1493.27 1206.73 L1492.69 1206.73 L1492.1 1206.73 L1491.51 1206.73 L1490.93 1206.73 L1490.34 1206.73 L1489.75 1206.73 L1489.17 1206.73 L1488.58 1206.73 L1487.99 1206.73 L1487.41 1206.73 L1486.82 1206.73 L1486.24 1206.73 L1485.65 1206.73 L1485.06 1206.73 L1484.48 1206.73 L1483.89 1206.73 L1483.3 1206.73 L1482.72 1206.73 L1482.13 1206.73 L1481.54 1206.73 L1480.96 1206.73 L1480.37 1206.73 L1479.78 1206.73 L1479.2 1206.73 L1478.61 1206.73 L1478.03 1206.73 L1477.44 1206.73 L1476.85 1206.73 L1476.27 1206.73 L1475.68 1206.73 L1475.09 1206.73 L1474.51 1206.73 L1473.92 1206.73 L1473.33 1206.73 L1472.75 1206.73 L1472.16 1206.73 L1471.57 1206.73 L1470.99 1206.73 L1470.4 1206.73 L1469.82 1206.73 L1469.23 1206.73 L1468.64 1206.73 L1468.06 1206.73 L1467.47 1206.73 L1466.88 1206.73 L1466.3 1206.73 L1465.71 1206.73 L1465.12 1206.73 L1464.54 1206.73 L1463.95 1206.73 L1463.37 1206.73 L1462.78 1206.73 L1462.19 1206.73 L1461.61 1206.73 L1461.02 1206.73 L1460.43 1206.73 L1459.85 1206.73 L1459.26 1206.73 L1458.67 1206.73 L1458.09 1206.73 L1457.5 1206.73 L1456.91 1206.73 L1456.33 1206.73 L1455.74 1206.73 L1455.16 1206.73 L1454.57 1206.73 L1453.98 1206.73 L1453.4 1206.73 L1452.81 1206.73 L1452.22 1206.73 L1451.64 1206.73 L1451.05 1206.73 L1450.46 1206.73 L1449.88 1206.73 L1449.29 1206.73 L1448.7 1206.73 L1448.12 1206.73 L1447.53 1206.73 L1446.95 1206.73 L1446.36 1206.73 L1445.77 1206.73 L1445.19 1206.73 L1444.6 1206.73 L1444.01 1206.73 L1443.43 1206.73 L1442.84 1206.73 L1442.25 1206.73 L1441.67 1206.73 L1441.08 1206.73 L1440.5 1206.73 L1439.91 1206.73 L1439.32 1206.73 L1438.74 1206.73 L1438.15 1206.73 L1437.56 1206.73 L1436.98 1206.73 L1436.39 1206.73 L1435.8 1206.73 L1435.22 1206.73 L1434.63 1206.73 L1434.04 1206.73 L1433.46 1206.73 L1432.87 1206.73 L1432.29 1206.73 L1431.7 1206.73 L1431.11 1206.73 L1430.53 1206.73 L1429.94 1206.73 L1429.35 1206.73 L1428.77 1206.73 L1428.18 1206.73 L1427.59 1206.73 L1427.01 1206.73 L1426.42 1206.73 L1425.83 1206.73 L1425.25 1206.73 L1424.66 1206.73 L1424.08 1206.73 L1423.49 1206.73 L1422.9 1206.73 L1422.32 1206.73 L1421.73 1206.73 L1421.14 1206.73 L1420.56 1206.73 L1419.97 1206.73 L1419.38 1206.73 L1418.8 1206.73 L1418.21 1206.73 L1417.63 1206.73 L1417.04 1206.73 L1416.45 1206.73 L1415.87 1206.73 L1415.28 1206.73 L1414.69 1206.73 L1414.11 1206.73 L1413.52 1206.73 L1412.93 1206.73 L1412.35 1206.73 L1411.76 1206.73 L1411.17 1206.73 L1410.59 1206.73 L1410 1206.73 L1409.42 1206.73 L1408.83 1206.73 L1408.24 1206.73 L1407.66 1206.73 L1407.07 1206.73 L1406.48 1206.73 L1405.9 1206.73 L1405.31 1206.73 L1404.72 1206.73 L1404.14 1206.73 L1403.55 1206.73 L1402.96 1206.73 L1402.38 1206.73 L1401.79 1206.73 L1401.21 1206.73 L1400.62 1206.73 L1400.03 1206.73 L1399.45 1206.73 L1398.86 1206.73 L1398.27 1206.73 L1397.69 1206.73 L1397.1 1206.73 L1396.51 1206.73 L1395.93 1206.73 L1395.34 1206.73 L1394.75 1206.73 L1394.17 1206.73 L1393.58 1206.73 L1393 1206.73 L1392.41 1206.73 L1391.82 1206.73 L1391.24 1206.73 L1390.65 1206.73 L1390.06 1206.73 L1389.48 1206.73 L1388.89 1206.73 L1388.3 1206.73 L1387.72 1206.73 L1387.13 1206.73 L1386.55 1206.73 L1385.96 1206.73 L1385.37 1206.73 L1384.79 1206.73 L1384.2 1206.73 L1383.61 1206.73 L1383.03 1206.73 L1382.44 1206.73 L1381.85 1206.73 L1381.27 1206.73 L1380.68 1206.73 L1380.09 1206.73 L1379.51 1206.73 L1378.92 1206.73 L1378.34 1206.73 L1377.75 1206.73 L1377.16 1206.73 L1376.58 1206.73 L1375.99 1206.73 L1375.4 1206.73 L1374.82 1206.73 L1374.23 1206.73 L1373.64 1206.73 L1373.06 1206.73 L1372.47 1206.73 L1371.88 1206.73 L1371.3 1206.73 L1370.71 1206.73 L1370.13 1206.73 L1369.54 1206.73 L1368.95 1206.73 L1368.37 1206.73 L1367.78 1206.73 L1367.19 1206.73 L1366.61 1206.73 L1366.02 1206.73 L1365.43 1206.73 L1364.85 1206.73 L1364.26 1206.73 L1363.68 1206.73 L1363.09 1206.73 L1362.5 1206.73 L1361.92 1206.73 L1361.33 1206.73 L1360.74 1206.73 L1360.16 1206.73 L1359.57 1206.73 L1358.98 1206.73 L1358.4 1206.73 L1357.81 1206.73 L1357.22 1206.73 L1356.64 1206.73 L1356.05 1206.73 L1355.47 1206.73 L1354.88 1206.73 L1354.29 1206.73 L1353.71 1206.73 L1353.12 1206.73 L1352.53 1206.73 L1351.95 1206.73 L1351.36 1206.73 L1350.77 1206.73 L1350.19 1206.73 L1349.6 1206.73 L1349.01 1206.73 L1348.43 1206.73 L1347.84 1206.73 L1347.26 1206.73 L1346.67 1206.73 L1346.08 1206.73 L1345.5 1206.73 L1344.91 1206.73 L1344.32 1206.73 L1343.74 1206.73 L1343.15 1206.73 L1342.56 1206.73 L1341.98 1206.73 L1341.39 1206.73 L1340.8 1206.73 L1340.22 1206.73 L1339.63 1206.73 L1339.05 1206.73 L1338.46 1206.73 L1337.87 1206.73 L1337.29 1206.73 L1336.7 1206.73 L1336.11 1206.73 L1335.53 1206.73 L1334.94 1206.73 L1334.35 1206.73 L1333.77 1206.73 L1333.18 1206.73 L1332.6 1206.73 L1332.01 1206.73 L1331.42 1206.73 L1330.84 1206.73 L1330.25 1206.73 L1329.66 1206.73 L1329.08 1206.73 L1328.49 1206.73 L1327.9 1206.73 L1327.32 1206.73 L1326.73 1206.73 L1326.14 1206.73 L1325.56 1206.73 L1324.97 1206.73 L1324.39 1206.73 L1323.8 1206.73 L1323.21 1206.73 L1322.63 1206.73 L1322.04 1206.73 L1321.45 1206.73 L1320.87 1206.73 L1320.28 1206.73 L1319.69 1206.73 L1319.11 1206.73 L1318.52 1206.73 L1317.93 1206.73 L1317.35 1206.73 L1316.76 1206.73 L1316.18 1206.73 L1315.59 1206.73 L1315 1206.73 L1314.42 1206.73 L1313.83 1206.73 L1313.24 1206.73 L1312.66 1206.73 L1312.07 1206.73 L1311.48 1206.73 L1310.9 1206.73 L1310.31 1206.73 L1309.73 1206.73 L1309.14 1206.73 L1308.55 1206.73 L1307.97 1206.73 L1307.38 1206.73 L1306.79 1206.73 L1306.21 1206.73 L1305.62 1206.73 L1305.03 1206.73 L1304.45 1206.73 L1303.86 1206.73 L1303.27 1206.73 L1302.69 1206.73 L1302.1 1206.73 L1301.52 1206.73 L1300.93 1206.73 L1300.34 1206.73 L1299.76 1206.73 L1299.17 1206.73 L1298.58 1206.73 L1298 1206.73 L1297.41 1206.73 L1296.82 1206.73 L1296.24 1206.73 L1295.65 1206.73 L1295.06 1206.73 L1294.48 1206.73 L1293.89 1206.73 L1293.31 1206.73 L1292.72 1206.73 L1292.13 1206.73 L1291.55 1206.73 L1290.96 1206.73 L1290.37 1206.73 L1289.79 1206.73 L1289.2 1206.73 L1288.61 1206.73 L1288.03 1206.73 L1287.44 1206.73 L1286.86 1206.73 L1286.27 1206.73 L1285.68 1206.73 L1285.1 1206.73 L1284.51 1206.73 L1283.92 1206.73 L1283.34 1206.73 L1282.75 1206.73 L1282.16 1206.73 L1281.58 1206.73 L1280.99 1206.73 L1280.4 1206.73 L1279.82 1206.73 L1279.23 1206.73 L1278.65 1206.73 L1278.06 1206.73 L1277.47 1206.73 L1276.89 1206.73 L1276.3 1206.73 L1275.71 1206.73 L1275.13 1206.73 L1274.54 1206.73 L1273.95 1206.73 L1273.37 1206.73 L1272.78 1206.73 L1272.19 1206.73 L1271.61 1206.73 L1271.02 1206.73 L1270.44 1206.73 L1269.85 1206.73 L1269.26 1206.73 L1268.68 1206.73 L1268.09 1206.73 L1267.5 1206.73 L1266.92 1206.73 L1266.33 1206.73 L1265.74 1206.73 L1265.16 1206.73 L1264.57 1206.73 L1263.98 1206.73 L1263.4 1206.73 L1262.81 1206.73 L1262.23 1206.73 L1261.64 1206.73 L1261.05 1206.73 L1260.47 1206.73 L1259.88 1206.73 L1259.29 1206.73 L1258.71 1206.73 L1258.12 1206.73 L1257.53 1206.73 L1256.95 1206.73 L1256.36 1206.73 L1255.78 1206.73 L1255.19 1206.73 L1254.6 1206.73 L1254.02 1206.73 L1253.43 1206.73 L1252.84 1206.73 L1252.26 1206.73 L1251.67 1206.73 L1251.08 1206.73 L1250.5 1206.73 L1249.91 1206.73 L1249.32 1206.73 L1248.74 1206.73 L1248.15 1206.73 L1247.57 1206.73 L1246.98 1206.73 L1246.39 1206.73 L1245.81 1206.73 L1245.22 1206.73 L1244.63 1206.73 L1244.05 1206.73 L1243.46 1206.73 L1242.87 1206.73 L1242.29 1206.73 L1241.7 1206.73 L1241.11 1206.73 L1240.53 1206.73 L1239.94 1206.73 L1239.36 1206.73 L1238.77 1206.73 L1238.18 1206.73 L1237.6 1206.73 L1237.01 1206.73 L1236.42 1206.73 L1235.84 1206.73 L1235.25 1206.73 L1234.66 1206.73 L1234.08 1206.73 L1233.49 1206.73 L1232.91 1206.73 L1232.32 1206.73 L1231.73 1206.73 L1231.15 1206.73 L1230.56 1206.73 L1229.97 1206.73 L1229.39 1206.73 L1228.8 1206.73 L1228.21 1206.73 L1227.63 1206.73 L1227.04 1206.73 L1226.45 1206.73 L1225.87 1206.73 L1225.28 1206.73 L1224.7 1206.73 L1224.11 1206.73 L1223.52 1206.73 L1222.94 1206.73 L1222.35 1206.73 L1221.76 1206.73 L1221.18 1206.73 L1220.59 1206.73 L1220 1206.73 L1219.42 1206.73 L1218.83 1206.73 L1218.24 1206.73 L1217.66 1206.73 L1217.07 1206.73 L1216.49 1206.73 L1215.9 1206.73 L1215.31 1206.73 L1214.73 1206.73 L1214.14 1206.73 L1213.55 1206.73 L1212.97 1206.73 L1212.38 1206.73 L1211.79 1206.73 L1211.21 1206.73 L1210.62 1206.73 L1210.03 1206.73 L1209.45 1206.73 L1208.86 1206.73 L1208.28 1206.73 L1207.69 1206.73 L1207.1 1206.73 L1206.52 1206.73 L1205.93 1206.73 L1205.34 1206.73 L1204.76 1206.73 L1204.17 1206.73 L1203.58 1206.73 L1203 1206.73 L1202.41 1206.73 L1201.83 1206.73 L1201.24 1206.73 L1200.65 1206.73 L1200.07 1206.73 L1199.48 1206.73 L1198.89 1206.73 L1198.31 1206.73 L1197.72 1206.73 L1197.13 1206.73 L1196.55 1206.73 L1195.96 1206.73 L1195.37 1206.73 L1194.79 1206.73 L1194.2 1206.73 L1193.62 1206.73 L1193.03 1206.73 L1192.44 1206.73 L1191.86 1206.73 L1191.27 1206.73 L1190.68 1206.73 L1190.1 1206.73 L1189.51 1206.73 L1188.92 1206.73 L1188.34 1206.73 L1187.75 1206.73 L1187.16 1206.73 L1186.58 1206.73 L1185.99 1206.73 L1185.41 1206.73 L1184.82 1206.73 L1184.23 1206.73 L1183.65 1206.73 L1183.06 1206.73 L1182.47 1206.73 L1181.89 1206.73 L1181.3 1206.73 L1180.71 1206.73 L1180.13 1206.73 L1179.54 1206.73 L1178.96 1206.73 L1178.37 1206.73 L1177.78 1206.73 L1177.2 1206.73 L1176.61 1206.73 L1176.02 1206.73 L1175.44 1206.73 L1174.85 1206.73 L1174.26 1206.73 L1173.68 1206.73 L1173.09 1206.73 L1172.5 1206.73 L1171.92 1206.73 L1171.33 1206.73 L1170.75 1206.73 L1170.16 1206.73 L1169.57 1206.73 L1168.99 1206.73 L1168.4 1206.73 L1167.81 1206.73 L1167.23 1206.73 L1166.64 1206.73 L1166.05 1206.73 L1165.47 1206.73 L1164.88 1206.73 L1164.29 1206.73 L1163.71 1206.73 L1163.12 1206.73 L1162.54 1206.73 L1161.95 1206.73 L1161.36 1206.73 L1160.78 1206.73 L1160.19 1206.73 L1159.6 1206.73 L1159.02 1206.73 L1158.43 1206.73 L1157.84 1206.73 L1157.26 1206.73 L1156.67 1206.73 L1156.09 1206.73 L1155.5 1206.73 L1154.91 1206.73 L1154.33 1206.73 L1153.74 1206.73 L1153.15 1206.73 L1152.57 1206.73 L1151.98 1206.73 L1151.39 1206.73 L1150.81 1206.73 L1150.22 1206.73 L1149.63 1206.73 L1149.05 1206.73 L1148.46 1206.73 L1147.88 1206.73 L1147.29 1206.73 L1146.7 1206.73 L1146.12 1206.73 L1145.53 1206.73 L1144.94 1206.73 L1144.36 1206.73 L1143.77 1206.73 L1143.18 1206.73 L1142.6 1206.73 L1142.01 1206.73 L1141.42 1206.73 L1140.84 1206.73 L1140.25 1206.73 L1139.67 1206.73 L1139.08 1206.73 L1138.49 1206.73 L1137.91 1206.73 L1137.32 1206.73 L1136.73 1206.73 L1136.15 1206.73 L1135.56 1206.73 L1134.97 1206.73 L1134.39 1206.73 L1133.8 1206.73 L1133.21 1206.73 L1132.63 1206.73 L1132.04 1206.73 L1131.46 1206.73 L1130.87 1206.73 L1130.28 1206.73 L1129.7 1206.73 L1129.11 1206.73 L1128.52 1206.73 L1127.94 1206.73 L1127.35 1206.73 L1126.76 1206.73 L1126.18 1206.73 L1125.59 1206.73 L1125.01 1206.73 L1124.42 1206.73 L1123.83 1206.73 L1123.25 1206.73 L1122.66 1206.73 L1122.07 1206.73 L1121.49 1206.73 L1120.9 1206.73 L1120.31 1206.73 L1119.73 1206.73 L1119.14 1206.73 L1118.55 1206.73 L1117.97 1206.73 L1117.38 1206.73 L1116.8 1206.73 L1116.21 1206.73 L1115.62 1206.73 L1115.04 1206.73 L1114.45 1206.73 L1113.86 1206.73 L1113.28 1206.73 L1112.69 1206.73 L1112.1 1206.73 L1111.52 1206.73 L1110.93 1206.73 L1110.34 1206.73 L1109.76 1206.73 L1109.17 1206.73 L1108.59 1206.73 L1108 1206.73 L1107.41 1206.73 L1106.83 1206.73 L1106.24 1206.73 L1105.65 1206.73 L1105.07 1206.73 L1104.48 1206.73 L1103.89 1206.73 L1103.31 1206.73 L1102.72 1206.73 L1102.14 1206.73 L1101.55 1206.73 L1100.96 1206.73 L1100.38 1206.73 L1099.79 1206.73 L1099.2 1206.73 L1098.62 1206.73 L1098.03 1206.73 L1097.44 1206.73 L1096.86 1206.73 L1096.27 1206.73 L1095.68 1206.73 L1095.1 1206.73 L1094.51 1206.73 L1093.93 1206.73 L1093.34 1206.73 L1092.75 1206.73 L1092.17 1206.73 L1091.58 1206.73 L1090.99 1206.73 L1090.41 1206.73 L1089.82 1206.73 L1089.23 1206.73 L1088.65 1206.73 L1088.06 1206.73 L1087.47 1206.73 L1086.89 1206.73 L1086.3 1206.73 L1085.72 1206.73 L1085.13 1206.73 L1084.54 1206.73 L1083.96 1206.73 L1083.37 1206.73 L1082.78 1206.73 L1082.2 1206.73 L1081.61 1206.73 L1081.02 1206.73 L1080.44 1206.73 L1079.85 1206.73 L1079.26 1206.73 L1078.68 1206.73 L1078.09 1206.73 L1077.51 1206.73 L1076.92 1206.73 L1076.33 1206.73 L1075.75 1206.73 L1075.16 1206.73 L1074.57 1206.73 L1073.99 1206.73 L1073.4 1206.73 L1072.81 1206.73 L1072.23 1206.73 L1071.64 1206.73 L1071.06 1206.73 L1070.47 1206.73 L1069.88 1206.73 L1069.3 1206.73 L1068.71 1206.73 L1068.12 1206.73 L1067.54 1206.73 L1066.95 1206.73 L1066.36 1206.73 L1065.78 1206.73 L1065.19 1206.73 L1064.6 1206.73 L1064.02 1206.73 L1063.43 1206.73 L1062.85 1206.73 L1062.26 1206.73 L1061.67 1206.73 L1061.09 1206.73 L1060.5 1206.73 L1059.91 1206.73 L1059.33 1206.73 L1058.74 1206.73 L1058.15 1206.73 L1057.57 1206.73 L1056.98 1206.73 L1056.39 1206.73 L1055.81 1206.73 L1055.22 1206.73 L1054.64 1206.73 L1054.05 1206.73 L1053.46 1206.73 L1052.88 1206.73 L1052.29 1206.73 L1051.7 1206.73 L1051.12 1206.73 L1050.53 1206.73 L1049.94 1206.73 L1049.36 1206.73 L1048.77 1206.73 L1048.19 1206.73 L1047.6 1206.73 L1047.01 1206.73 L1046.43 1206.73 L1045.84 1206.73 L1045.25 1206.73 L1044.67 1206.73 L1044.08 1206.73 L1043.49 1206.73 L1042.91 1206.73 L1042.32 1206.73 L1041.73 1206.73 L1041.15 1206.73 L1040.56 1206.73 L1039.98 1206.73 L1039.39 1206.73 L1038.8 1206.73 L1038.22 1206.73 L1037.63 1206.73 L1037.04 1206.73 L1036.46 1206.73 L1035.87 1206.73 L1035.28 1206.73 L1034.7 1206.73 L1034.11 1206.73 L1033.52 1206.73 L1032.94 1206.73 L1032.35 1206.73 L1031.77 1206.73 L1031.18 1206.73 L1030.59 1206.73 L1030.01 1206.73 L1029.42 1206.73 L1028.83 1206.73 L1028.25 1206.73 L1027.66 1206.73 L1027.07 1206.73 L1026.49 1206.73 L1025.9 1206.73 L1025.32 1206.73 L1024.73 1206.73 L1024.14 1206.73 L1023.56 1206.73 L1022.97 1206.73 L1022.38 1206.73 L1021.8 1206.73 L1021.21 1206.73 L1020.62 1206.73 L1020.04 1206.73 L1019.45 1206.73 L1018.86 1206.73 L1018.28 1206.73 L1017.69 1206.73 L1017.11 1206.73 L1016.52 1206.73 L1015.93 1206.73 L1015.35 1206.73 L1014.76 1206.73 L1014.17 1206.73 L1013.59 1206.73 L1013 1206.73 L1012.41 1206.73 L1011.83 1206.73 L1011.24 1206.73 L1010.65 1206.73 L1010.07 1206.73 L1009.48 1206.73 L1008.9 1206.73 L1008.31 1206.73 L1007.72 1206.73 L1007.14 1206.73 L1006.55 1206.73 L1005.96 1206.73 L1005.38 1206.73 L1004.79 1206.73 L1004.2 1206.73 L1003.62 1206.73 L1003.03 1206.73 L1002.44 1206.73 L1001.86 1206.73 L1001.27 1206.73 L1000.69 1206.73 L1000.1 1206.73 L999.513 1206.73 L998.926 1206.73 L998.34 1206.73 L997.754 1206.73 L997.167 1206.73 L996.581 1206.73 L995.994 1206.73 L995.408 1206.73 L994.822 1206.73 L994.235 1206.73 L993.649 1206.73 L993.062 1206.73 L992.476 1206.73 L991.889 1206.73 L991.303 1206.73 L990.717 1206.73 L990.13 1206.73 L989.544 1206.73 L988.957 1206.73 L988.371 1206.73 L987.785 1206.73 L987.198 1206.73 L986.612 1206.73 L986.025 1206.73  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1206.84 986.612,1206.84 987.198,1206.84 987.785,1206.84 988.371,1206.84 988.957,1206.84 989.544,1206.84 990.13,1206.84 990.717,1206.84 991.303,1206.84 991.889,1206.84 992.476,1206.84 993.062,1206.84 993.649,1206.84 994.235,1206.84 994.822,1206.84 995.408,1206.84 995.994,1206.84 996.581,1206.84 997.167,1206.84 997.754,1206.84 998.34,1206.84 998.926,1206.84 999.513,1206.84 1000.1,1206.84 1000.69,1206.84 1001.27,1206.84 1001.86,1206.84 1002.44,1206.84 1003.03,1206.84 1003.62,1206.84 1004.2,1206.84 1004.79,1206.84 1005.38,1206.84 1005.96,1206.84 1006.55,1206.84 1007.14,1206.84 1007.72,1206.84 1008.31,1206.84 1008.9,1206.84 1009.48,1206.84 1010.07,1206.84 1010.65,1206.84 1011.24,1206.84 1011.83,1206.84 1012.41,1206.84 1013,1206.84 1013.59,1206.84 1014.17,1206.84 1014.76,1206.84 1015.35,1206.84 1015.93,1206.84 1016.52,1206.84 1017.11,1206.84 1017.69,1206.84 1018.28,1206.84 1018.86,1206.84 1019.45,1206.84 1020.04,1206.84 1020.62,1206.84 1021.21,1206.84 1021.8,1206.84 1022.38,1206.84 1022.97,1206.84 1023.56,1206.84 1024.14,1206.84 1024.73,1206.84 1025.32,1206.84 1025.9,1206.84 1026.49,1206.84 1027.07,1206.84 1027.66,1206.84 1028.25,1206.84 1028.83,1206.84 1029.42,1206.84 1030.01,1206.84 1030.59,1206.84 1031.18,1206.84 1031.77,1206.84 1032.35,1206.84 1032.94,1206.84 1033.52,1206.84 1034.11,1206.84 1034.7,1206.84 1035.28,1206.84 1035.87,1206.84 1036.46,1206.84 1037.04,1206.84 1037.63,1206.84 1038.22,1206.84 1038.8,1206.84 1039.39,1206.84 1039.98,1206.84 1040.56,1206.84 1041.15,1206.84 1041.73,1206.84 1042.32,1206.84 1042.91,1206.84 1043.49,1206.84 1044.08,1206.84 1044.67,1206.84 1045.25,1206.84 1045.84,1206.84 1046.43,1206.84 1047.01,1206.84 1047.6,1206.84 1048.19,1206.84 1048.77,1206.84 1049.36,1206.84 1049.94,1206.84 1050.53,1206.84 1051.12,1206.84 1051.7,1206.84 1052.29,1206.84 1052.88,1206.84 1053.46,1206.84 1054.05,1206.84 1054.64,1206.84 1055.22,1206.84 1055.81,1206.84 1056.39,1206.84 1056.98,1206.84 1057.57,1206.84 1058.15,1206.84 1058.74,1206.84 1059.33,1206.84 1059.91,1206.84 1060.5,1206.84 1061.09,1206.84 1061.67,1206.84 1062.26,1206.84 1062.85,1206.84 1063.43,1206.84 1064.02,1206.84 1064.6,1206.84 1065.19,1206.84 1065.78,1206.84 1066.36,1206.84 1066.95,1206.84 1067.54,1206.84 1068.12,1206.84 1068.71,1206.84 1069.3,1206.84 1069.88,1206.84 1070.47,1206.84 1071.06,1206.84 1071.64,1206.84 1072.23,1206.84 1072.81,1206.84 1073.4,1206.84 1073.99,1206.84 1074.57,1206.84 1075.16,1206.84 1075.75,1206.84 1076.33,1206.84 1076.92,1206.84 1077.51,1206.84 1078.09,1206.84 1078.68,1206.84 1079.26,1206.84 1079.85,1206.84 1080.44,1206.84 1081.02,1206.84 1081.61,1206.84 1082.2,1206.84 1082.78,1206.84 1083.37,1206.84 1083.96,1206.84 1084.54,1206.84 1085.13,1206.84 1085.72,1206.84 1086.3,1206.84 1086.89,1206.84 1087.47,1206.84 1088.06,1206.84 1088.65,1206.84 1089.23,1206.84 1089.82,1206.84 1090.41,1206.84 1090.99,1206.84 1091.58,1206.84 1092.17,1206.84 1092.75,1206.84 1093.34,1206.84 1093.93,1206.84 1094.51,1206.84 1095.1,1206.84 1095.68,1206.84 1096.27,1206.84 1096.86,1206.84 1097.44,1206.84 1098.03,1206.84 1098.62,1206.84 1099.2,1206.84 1099.79,1206.84 1100.38,1206.84 1100.96,1206.84 1101.55,1206.84 1102.14,1206.84 1102.72,1206.84 1103.31,1206.84 1103.89,1206.84 1104.48,1206.84 1105.07,1206.84 1105.65,1206.84 1106.24,1206.84 1106.83,1206.84 1107.41,1206.84 1108,1206.84 1108.59,1206.84 1109.17,1206.84 1109.76,1206.84 1110.34,1206.84 1110.93,1206.84 1111.52,1206.84 1112.1,1206.84 1112.69,1206.84 1113.28,1206.84 1113.86,1206.84 1114.45,1206.84 1115.04,1206.84 1115.62,1206.84 1116.21,1206.84 1116.8,1206.84 1117.38,1206.84 1117.97,1206.84 1118.55,1206.84 1119.14,1206.84 1119.73,1206.84 1120.31,1206.84 1120.9,1206.84 1121.49,1206.84 1122.07,1206.84 1122.66,1206.84 1123.25,1206.84 1123.83,1206.84 1124.42,1206.84 1125.01,1206.84 1125.59,1206.84 1126.18,1206.84 1126.76,1206.84 1127.35,1206.84 1127.94,1206.84 1128.52,1206.84 1129.11,1206.84 1129.7,1206.84 1130.28,1206.84 1130.87,1206.84 1131.46,1206.84 1132.04,1206.84 1132.63,1206.84 1133.21,1206.84 1133.8,1206.84 1134.39,1206.84 1134.97,1206.84 1135.56,1206.84 1136.15,1206.84 1136.73,1206.84 1137.32,1206.84 1137.91,1206.84 1138.49,1206.84 1139.08,1206.84 1139.67,1206.84 1140.25,1206.84 1140.84,1206.84 1141.42,1206.84 1142.01,1206.84 1142.6,1206.84 1143.18,1206.84 1143.77,1206.84 1144.36,1206.84 1144.94,1206.84 1145.53,1206.84 1146.12,1206.84 1146.7,1206.84 1147.29,1206.84 1147.88,1206.84 1148.46,1206.84 1149.05,1206.84 1149.63,1206.84 1150.22,1206.84 1150.81,1206.84 1151.39,1206.84 1151.98,1206.84 1152.57,1206.84 1153.15,1206.84 1153.74,1206.84 1154.33,1206.84 1154.91,1206.84 1155.5,1206.84 1156.09,1206.84 1156.67,1206.84 1157.26,1206.84 1157.84,1206.84 1158.43,1206.84 1159.02,1206.84 1159.6,1206.84 1160.19,1206.84 1160.78,1206.84 1161.36,1206.84 1161.95,1206.84 1162.54,1206.84 1163.12,1206.84 1163.71,1206.84 1164.29,1206.84 1164.88,1206.84 1165.47,1206.84 1166.05,1206.84 1166.64,1206.84 1167.23,1206.84 1167.81,1206.84 1168.4,1206.84 1168.99,1206.84 1169.57,1206.84 1170.16,1206.84 1170.75,1206.84 1171.33,1206.84 1171.92,1206.84 1172.5,1206.84 1173.09,1206.84 1173.68,1206.84 1174.26,1206.84 1174.85,1206.84 1175.44,1206.84 1176.02,1206.84 1176.61,1206.84 1177.2,1206.84 1177.78,1206.84 1178.37,1206.84 1178.96,1206.84 1179.54,1206.84 1180.13,1206.84 1180.71,1206.84 1181.3,1206.84 1181.89,1206.84 1182.47,1206.84 1183.06,1206.84 1183.65,1206.84 1184.23,1206.84 1184.82,1206.84 1185.41,1206.84 1185.99,1206.84 1186.58,1206.84 1187.16,1206.84 1187.75,1206.84 1188.34,1206.84 1188.92,1206.84 1189.51,1206.84 1190.1,1206.84 1190.68,1206.84 1191.27,1206.84 1191.86,1206.84 1192.44,1206.84 1193.03,1206.84 1193.62,1206.84 1194.2,1206.84 1194.79,1206.84 1195.37,1206.84 1195.96,1206.84 1196.55,1206.84 1197.13,1206.84 1197.72,1206.84 1198.31,1206.84 1198.89,1206.84 1199.48,1206.84 1200.07,1206.84 1200.65,1206.84 1201.24,1206.84 1201.83,1206.84 1202.41,1206.84 1203,1206.84 1203.58,1206.84 1204.17,1206.84 1204.76,1206.84 1205.34,1206.84 1205.93,1206.84 1206.52,1206.84 1207.1,1206.84 1207.69,1206.84 1208.28,1206.84 1208.86,1206.84 1209.45,1206.84 1210.03,1206.84 1210.62,1206.84 1211.21,1206.84 1211.79,1206.84 1212.38,1206.84 1212.97,1206.84 1213.55,1206.84 1214.14,1206.84 1214.73,1206.84 1215.31,1206.84 1215.9,1206.84 1216.49,1206.84 1217.07,1206.84 1217.66,1206.84 1218.24,1206.84 1218.83,1206.84 1219.42,1206.84 1220,1206.84 1220.59,1206.84 1221.18,1206.84 1221.76,1206.84 1222.35,1206.84 1222.94,1206.84 1223.52,1206.84 1224.11,1206.84 1224.7,1206.84 1225.28,1206.84 1225.87,1206.84 1226.45,1206.84 1227.04,1206.84 1227.63,1206.84 1228.21,1206.84 1228.8,1206.84 1229.39,1206.84 1229.97,1206.84 1230.56,1206.84 1231.15,1206.84 1231.73,1206.84 1232.32,1206.84 1232.91,1206.84 1233.49,1206.84 1234.08,1206.84 1234.66,1206.84 1235.25,1206.84 1235.84,1206.84 1236.42,1206.84 1237.01,1206.84 1237.6,1206.84 1238.18,1206.84 1238.77,1206.84 1239.36,1206.84 1239.94,1206.84 1240.53,1206.84 1241.11,1206.84 1241.7,1206.84 1242.29,1206.84 1242.87,1206.84 1243.46,1206.84 1244.05,1206.84 1244.63,1206.84 1245.22,1206.84 1245.81,1206.84 1246.39,1206.84 1246.98,1206.84 1247.57,1206.84 1248.15,1206.84 1248.74,1206.84 1249.32,1206.84 1249.91,1206.84 1250.5,1206.84 1251.08,1206.84 1251.67,1206.84 1252.26,1206.84 1252.84,1206.84 1253.43,1206.84 1254.02,1206.84 1254.6,1206.84 1255.19,1206.84 1255.78,1206.84 1256.36,1206.84 1256.95,1206.84 1257.53,1206.84 1258.12,1206.84 1258.71,1206.84 1259.29,1206.84 1259.88,1206.84 1260.47,1206.84 1261.05,1206.84 1261.64,1206.84 1262.23,1206.84 1262.81,1206.84 1263.4,1206.84 1263.98,1206.84 1264.57,1206.84 1265.16,1206.84 1265.74,1206.84 1266.33,1206.84 1266.92,1206.84 1267.5,1206.84 1268.09,1206.84 1268.68,1206.84 1269.26,1206.84 1269.85,1206.84 1270.44,1206.84 1271.02,1206.84 1271.61,1206.84 1272.19,1206.84 1272.78,1206.84 1273.37,1206.84 1273.95,1206.84 1274.54,1206.84 1275.13,1206.84 1275.71,1206.84 1276.3,1206.84 1276.89,1206.84 1277.47,1206.84 1278.06,1206.84 1278.65,1206.84 1279.23,1206.84 1279.82,1206.84 1280.4,1206.84 1280.99,1206.84 1281.58,1206.84 1282.16,1206.84 1282.75,1206.84 1283.34,1206.84 1283.92,1206.84 1284.51,1206.84 1285.1,1206.84 1285.68,1206.84 1286.27,1206.84 1286.86,1206.84 1287.44,1206.84 1288.03,1206.84 1288.61,1206.84 1289.2,1206.84 1289.79,1206.84 1290.37,1206.84 1290.96,1206.84 1291.55,1206.84 1292.13,1206.84 1292.72,1206.84 1293.31,1206.84 1293.89,1206.84 1294.48,1206.84 1295.06,1206.84 1295.65,1206.84 1296.24,1206.84 1296.82,1206.84 1297.41,1206.84 1298,1206.84 1298.58,1206.84 1299.17,1206.84 1299.76,1206.84 1300.34,1206.84 1300.93,1206.84 1301.52,1206.84 1302.1,1206.84 1302.69,1206.84 1303.27,1206.84 1303.86,1206.84 1304.45,1206.84 1305.03,1206.84 1305.62,1206.84 1306.21,1206.84 1306.79,1206.84 1307.38,1206.84 1307.97,1206.84 1308.55,1206.84 1309.14,1206.84 1309.73,1206.84 1310.31,1206.84 1310.9,1206.84 1311.48,1206.84 1312.07,1206.84 1312.66,1206.84 1313.24,1206.84 1313.83,1206.84 1314.42,1206.84 1315,1206.84 1315.59,1206.84 1316.18,1206.84 1316.76,1206.84 1317.35,1206.84 1317.93,1206.84 1318.52,1206.84 1319.11,1206.84 1319.69,1206.84 1320.28,1206.84 1320.87,1206.84 1321.45,1206.84 1322.04,1206.84 1322.63,1206.84 1323.21,1206.84 1323.8,1206.84 1324.39,1206.84 1324.97,1206.84 1325.56,1206.84 1326.14,1206.84 1326.73,1206.84 1327.32,1206.84 1327.9,1206.84 1328.49,1206.84 1329.08,1206.84 1329.66,1206.84 1330.25,1206.84 1330.84,1206.84 1331.42,1206.84 1332.01,1206.84 1332.6,1206.84 1333.18,1206.84 1333.77,1206.84 1334.35,1206.84 1334.94,1206.84 1335.53,1206.84 1336.11,1206.84 1336.7,1206.84 1337.29,1206.84 1337.87,1206.84 1338.46,1206.84 1339.05,1206.84 1339.63,1206.84 1340.22,1206.84 1340.8,1206.84 1341.39,1206.84 1341.98,1206.84 1342.56,1206.84 1343.15,1206.84 1343.74,1206.84 1344.32,1206.84 1344.91,1206.84 1345.5,1206.84 1346.08,1206.84 1346.67,1206.84 1347.26,1206.84 1347.84,1206.84 1348.43,1206.84 1349.01,1206.84 1349.6,1206.84 1350.19,1206.84 1350.77,1206.84 1351.36,1206.84 1351.95,1206.84 1352.53,1206.84 1353.12,1206.84 1353.71,1206.84 1354.29,1206.84 1354.88,1206.84 1355.47,1206.84 1356.05,1206.84 1356.64,1206.84 1357.22,1206.84 1357.81,1206.84 1358.4,1206.84 1358.98,1206.84 1359.57,1206.84 1360.16,1206.84 1360.74,1206.84 1361.33,1206.84 1361.92,1206.84 1362.5,1206.84 1363.09,1206.84 1363.68,1206.84 1364.26,1206.84 1364.85,1206.84 1365.43,1206.84 1366.02,1206.84 1366.61,1206.84 1367.19,1206.84 1367.78,1206.84 1368.37,1206.84 1368.95,1206.84 1369.54,1206.84 1370.13,1206.84 1370.71,1206.84 1371.3,1206.84 1371.88,1206.84 1372.47,1206.84 1373.06,1206.84 1373.64,1206.84 1374.23,1206.84 1374.82,1206.84 1375.4,1206.84 1375.99,1206.84 1376.58,1206.84 1377.16,1206.84 1377.75,1206.84 1378.34,1206.84 1378.92,1206.84 1379.51,1206.84 1380.09,1206.84 1380.68,1206.84 1381.27,1206.84 1381.85,1206.84 1382.44,1206.84 1383.03,1206.84 1383.61,1206.84 1384.2,1206.84 1384.79,1206.84 1385.37,1206.84 1385.96,1206.84 1386.55,1206.84 1387.13,1206.84 1387.72,1206.84 1388.3,1206.84 1388.89,1206.84 1389.48,1206.84 1390.06,1206.84 1390.65,1206.84 1391.24,1206.84 1391.82,1206.84 1392.41,1206.84 1393,1206.84 1393.58,1206.84 1394.17,1206.84 1394.75,1206.84 1395.34,1206.84 1395.93,1206.84 1396.51,1206.84 1397.1,1206.84 1397.69,1206.84 1398.27,1206.84 1398.86,1206.84 1399.45,1206.84 1400.03,1206.84 1400.62,1206.84 1401.21,1206.84 1401.79,1206.84 1402.38,1206.84 1402.96,1206.84 1403.55,1206.84 1404.14,1206.84 1404.72,1206.84 1405.31,1206.84 1405.9,1206.84 1406.48,1206.84 1407.07,1206.84 1407.66,1206.84 1408.24,1206.84 1408.83,1206.84 1409.42,1206.84 1410,1206.84 1410.59,1206.84 1411.17,1206.84 1411.76,1206.84 1412.35,1206.84 1412.93,1206.84 1413.52,1206.84 1414.11,1206.84 1414.69,1206.84 1415.28,1206.84 1415.87,1206.84 1416.45,1206.84 1417.04,1206.84 1417.63,1206.84 1418.21,1206.84 1418.8,1206.84 1419.38,1206.84 1419.97,1206.84 1420.56,1206.84 1421.14,1206.84 1421.73,1206.84 1422.32,1206.84 1422.9,1206.84 1423.49,1206.84 1424.08,1206.84 1424.66,1206.84 1425.25,1206.84 1425.83,1206.84 1426.42,1206.84 1427.01,1206.84 1427.59,1206.84 1428.18,1206.84 1428.77,1206.84 1429.35,1206.84 1429.94,1206.84 1430.53,1206.84 1431.11,1206.84 1431.7,1206.84 1432.29,1206.84 1432.87,1206.84 1433.46,1206.84 1434.04,1206.84 1434.63,1206.84 1435.22,1206.84 1435.8,1206.84 1436.39,1206.84 1436.98,1206.84 1437.56,1206.84 1438.15,1206.84 1438.74,1206.84 1439.32,1206.84 1439.91,1206.84 1440.5,1206.84 1441.08,1206.84 1441.67,1206.84 1442.25,1206.84 1442.84,1206.84 1443.43,1206.84 1444.01,1206.84 1444.6,1206.84 1445.19,1206.84 1445.77,1206.84 1446.36,1206.84 1446.95,1206.84 1447.53,1206.84 1448.12,1206.84 1448.7,1206.84 1449.29,1206.84 1449.88,1206.84 1450.46,1206.84 1451.05,1206.84 1451.64,1206.84 1452.22,1206.84 1452.81,1206.84 1453.4,1206.84 1453.98,1206.84 1454.57,1206.84 1455.16,1206.84 1455.74,1206.84 1456.33,1206.84 1456.91,1206.84 1457.5,1206.84 1458.09,1206.84 1458.67,1206.84 1459.26,1206.84 1459.85,1206.84 1460.43,1206.84 1461.02,1206.84 1461.61,1206.84 1462.19,1206.84 1462.78,1206.84 1463.37,1206.84 1463.95,1206.84 1464.54,1206.84 1465.12,1206.84 1465.71,1206.84 1466.3,1206.84 1466.88,1206.84 1467.47,1206.84 1468.06,1206.84 1468.64,1206.84 1469.23,1206.84 1469.82,1206.84 1470.4,1206.84 1470.99,1206.84 1471.57,1206.84 1472.16,1206.84 1472.75,1206.84 1473.33,1206.84 1473.92,1206.84 1474.51,1206.84 1475.09,1206.84 1475.68,1206.84 1476.27,1206.84 1476.85,1206.84 1477.44,1206.84 1478.03,1206.84 1478.61,1206.84 1479.2,1206.84 1479.78,1206.84 1480.37,1206.84 1480.96,1206.84 1481.54,1206.84 1482.13,1206.84 1482.72,1206.84 1483.3,1206.84 1483.89,1206.84 1484.48,1206.84 1485.06,1206.84 1485.65,1206.84 1486.24,1206.84 1486.82,1206.84 1487.41,1206.84 1487.99,1206.84 1488.58,1206.84 1489.17,1206.84 1489.75,1206.84 1490.34,1206.84 1490.93,1206.84 1491.51,1206.84 1492.1,1206.84 1492.69,1206.84 1493.27,1206.84 1493.86,1206.84 1494.45,1206.84 1495.03,1206.84 1495.62,1206.84 1496.2,1206.84 1496.79,1206.84 1497.38,1206.84 1497.96,1206.84 1498.55,1206.84 1499.14,1206.84 1499.72,1206.84 1500.31,1206.84 1500.9,1206.84 1501.48,1206.84 1502.07,1206.84 1502.65,1206.84 1503.24,1206.84 1503.83,1206.84 1504.41,1206.84 1505,1206.84 1505.59,1206.84 1506.17,1206.84 1506.76,1206.84 1507.35,1206.84 1507.93,1206.84 1508.52,1206.84 1509.11,1206.84 1509.69,1206.84 1510.28,1206.84 1510.86,1206.84 1511.45,1206.84 1512.04,1206.84 1512.62,1206.84 1513.21,1206.84 1513.8,1206.84 1514.38,1206.84 1514.97,1206.84 1515.56,1206.84 1516.14,1206.84 1516.73,1206.84 1517.32,1206.84 1517.9,1206.84 1518.49,1206.84 1519.07,1206.84 1519.66,1206.84 1520.25,1206.84 1520.83,1206.84 1521.42,1206.84 1522.01,1206.84 1522.59,1206.84 1523.18,1206.84 1523.77,1206.84 1524.35,1206.84 1524.94,1206.84 1525.52,1206.84 1526.11,1206.84 1526.7,1206.84 1527.28,1206.84 1527.87,1206.84 1528.46,1206.84 1529.04,1206.84 1529.63,1206.84 1530.22,1206.84 1530.8,1206.84 1531.39,1206.84 1531.98,1206.84 1532.56,1206.84 1533.15,1206.84 1533.73,1206.84 1534.32,1206.84 1534.91,1206.84 1535.49,1206.84 1536.08,1206.84 1536.67,1206.84 1537.25,1206.84 1537.84,1206.84 1538.43,1206.84 1539.01,1206.84 1539.6,1206.84 1540.19,1206.84 1540.77,1206.84 1541.36,1206.84 1541.94,1206.84 1542.53,1206.84 1543.12,1206.84 1543.7,1206.84 1544.29,1206.84 1544.88,1206.84 1545.46,1206.84 1546.05,1206.84 1546.64,1206.84 1547.22,1206.84 1547.81,1206.84 1548.4,1206.84 1548.98,1206.84 1549.57,1206.84 1550.15,1206.84 1550.74,1206.84 1551.33,1206.84 1551.91,1206.84 1552.5,1206.84 1553.09,1206.84 1553.67,1206.84 1554.26,1206.84 1554.85,1206.84 1555.43,1206.84 1556.02,1206.84 1556.6,1206.84 1557.19,1206.84 1557.78,1206.84 1558.36,1206.84 1558.95,1206.84 1559.54,1206.84 1560.12,1206.84 1560.71,1206.84 1561.3,1206.84 1561.88,1206.84 1562.47,1206.84 1563.06,1206.84 1563.64,1206.84 1564.23,1206.84 1564.81,1206.84 1565.4,1206.84 1565.99,1206.84 1566.57,1206.84 1567.16,1206.84 1567.75,1206.84 1568.33,1206.84 1568.92,1206.84 1569.51,1206.84 1570.09,1206.84 1570.68,1206.84 1571.27,1206.84 1571.85,1206.84 1572.44,1206.84 1573.02,1206.84 1573.61,1206.84 1574.2,1206.84 1574.78,1206.84 1575.37,1206.84 1575.96,1206.84 1576.54,1206.84 1577.13,1206.84 1577.72,1206.84 1578.3,1206.84 1578.89,1206.84 1579.47,1206.84 1580.06,1206.84 1580.65,1206.84 1581.23,1206.84 1581.82,1206.84 1582.41,1206.84 1582.99,1206.84 1583.58,1206.84 1584.17,1206.84 1584.75,1206.84 1585.34,1206.84 1585.93,1206.84 1586.51,1206.84 1587.1,1206.84 1587.68,1206.84 1588.27,1206.84 1588.86,1206.84 1589.44,1206.84 1590.03,1206.84 1590.62,1206.84 1591.2,1206.84 1591.79,1206.84 1592.38,1206.84 1592.96,1206.84 1593.55,1206.84 1594.14,1206.84 1594.72,1206.84 1595.31,1206.84 1595.89,1206.84 1596.48,1206.84 1597.07,1206.84 1597.65,1206.84 1598.24,1206.84 1598.83,1206.84 1599.41,1206.84 1600,1206.84 1600.59,1206.84 1601.17,1206.84 1601.76,1206.84 1602.34,1206.84 1602.93,1206.84 1603.52,1206.84 1604.1,1206.84 1604.69,1206.84 1605.28,1206.84 1605.86,1206.84 1606.45,1206.84 1607.04,1206.84 1607.62,1206.84 1608.21,1206.84 1608.8,1206.84 1609.38,1206.84 1609.97,1206.84 1610.55,1206.84 1611.14,1206.84 1611.73,1206.84 1612.31,1206.84 1612.9,1206.84 1613.49,1206.84 1614.07,1206.84 1614.66,1206.84 1615.25,1206.84 1615.83,1206.84 1616.42,1206.84 1617.01,1206.84 1617.59,1206.84 1618.18,1206.84 1618.76,1206.84 1619.35,1206.84 1619.94,1206.84 1620.52,1206.84 1621.11,1206.84 1621.7,1206.84 1622.28,1206.84 1622.87,1206.84 1623.46,1206.84 1624.04,1206.84 1624.63,1206.84 1625.22,1206.84 1625.8,1206.84 1626.39,1206.84 1626.97,1206.84 1627.56,1206.84 1628.15,1206.84 1628.73,1206.84 1629.32,1206.84 1629.91,1206.84 1630.49,1206.84 1631.08,1206.84 1631.67,1206.84 1632.25,1206.84 1632.84,1206.84 1633.42,1206.84 1634.01,1206.84 1634.6,1206.84 1635.18,1206.84 1635.77,1206.84 1636.36,1206.84 1636.94,1206.84 1637.53,1206.84 1638.12,1206.84 1638.7,1206.84 1639.29,1206.84 1639.88,1206.84 1640.46,1206.84 1641.05,1206.84 1641.63,1206.84 1642.22,1206.84 1642.81,1206.84 1643.39,1206.84 1643.98,1206.84 1644.57,1206.84 1645.15,1206.84 1645.74,1206.84 1646.33,1206.84 1646.91,1206.84 1647.5,1206.84 1648.09,1206.84 1648.67,1206.84 1649.26,1206.84 1649.84,1206.84 1650.43,1206.84 1651.02,1206.84 1651.6,1206.84 1652.19,1206.84 1652.78,1206.84 1653.36,1206.84 1653.95,1206.84 1654.54,1206.84 1655.12,1206.84 1655.71,1206.84 1656.29,1206.84 1656.88,1206.84 1657.47,1206.84 1658.05,1206.84 1658.64,1206.84 1659.23,1206.84 1659.81,1206.84 1660.4,1206.84 1660.99,1206.84 1661.57,1206.84 1662.16,1206.84 1662.75,1206.84 1663.33,1206.84 1663.92,1206.84 1664.5,1206.84 1665.09,1206.84 1665.68,1206.84 1666.26,1206.84 1666.85,1206.84 1667.44,1206.84 1668.02,1206.84 1668.61,1206.84 1669.2,1206.84 1669.78,1206.84 1670.37,1206.84 1670.96,1206.84 1671.54,1206.84 1672.13,1206.84 1672.71,1206.84 1673.3,1206.84 1673.89,1206.84 1674.47,1206.84 1675.06,1206.84 1675.65,1206.84 1676.23,1206.84 1676.82,1206.84 1677.41,1206.84 1677.99,1206.84 1678.58,1206.84 1679.17,1206.84 1679.75,1206.84 1680.34,1206.84 1680.92,1206.84 1681.51,1206.84 1682.1,1206.84 1682.68,1206.84 1683.27,1206.84 1683.86,1206.84 1684.44,1206.84 1685.03,1206.84 1685.62,1206.84 1686.2,1206.84 1686.79,1206.84 1687.37,1206.84 1687.96,1206.84 1688.55,1206.84 1689.13,1206.84 1689.72,1206.84 1690.31,1206.84 1690.89,1206.84 1691.48,1206.84 1692.07,1206.84 1692.65,1206.84 1693.24,1206.84 1693.83,1206.84 1694.41,1206.84 1695,1206.84 1695.58,1206.84 1696.17,1206.84 1696.76,1206.84 1697.34,1206.84 1697.93,1206.84 1698.52,1206.84 1699.1,1206.84 1699.69,1206.84 1700.28,1206.84 1700.86,1206.84 1701.45,1206.84 1702.04,1206.84 1702.62,1206.84 1703.21,1206.84 1703.79,1206.84 1704.38,1206.84 1704.97,1206.84 1705.55,1206.84 1706.14,1206.84 1706.73,1206.84 1707.31,1206.84 1707.9,1206.84 1708.49,1206.84 1709.07,1206.84 1709.66,1206.84 1710.24,1206.84 1710.83,1206.84 1711.42,1206.84 1712,1206.84 1712.59,1206.84 1713.18,1206.84 1713.76,1206.84 1714.35,1206.84 1714.94,1206.84 1715.52,1206.84 1716.11,1206.84 1716.7,1206.84 1717.28,1206.84 1717.87,1206.84 1718.45,1206.84 1719.04,1206.84 1719.63,1206.84 1720.21,1206.84 1720.8,1206.84 1721.39,1206.84 1721.97,1206.84 1722.56,1206.84 1723.15,1206.84 1723.73,1206.84 1724.32,1206.84 1724.91,1206.84 1725.49,1206.84 1726.08,1206.84 1726.66,1206.84 1727.25,1206.84 1727.84,1206.84 1728.42,1206.84 1729.01,1206.84 1729.6,1206.84 1730.18,1206.84 1730.77,1206.84 1731.36,1206.84 1731.94,1206.84 1732.53,1206.84 1733.11,1206.84 1733.7,1206.84 1734.29,1206.84 1734.87,1206.84 1735.46,1206.84 1736.05,1206.84 1736.63,1206.84 1737.22,1206.84 1737.81,1206.84 1738.39,1206.84 1738.98,1206.84 1739.57,1206.84 1740.15,1206.84 1740.74,1206.84 1741.32,1206.84 1741.91,1206.84 1742.5,1206.84 1743.08,1206.84 1743.67,1206.84 1744.26,1206.84 1744.84,1206.84 1745.43,1206.84 1746.02,1206.84 1746.6,1206.84 1747.19,1206.84 1747.78,1206.84 1748.36,1206.84 1748.95,1206.84 1749.53,1206.84 1750.12,1206.84 1750.71,1206.84 1751.29,1206.84 1751.88,1206.84 1752.47,1206.84 1753.05,1206.84 1753.64,1206.84 1754.23,1206.84 1754.81,1206.84 1755.4,1206.84 1755.99,1206.84 1756.57,1206.84 1757.16,1206.84 1757.74,1206.84 1758.33,1206.84 1758.92,1206.84 1759.5,1206.84 1760.09,1206.84 1760.68,1206.84 1761.26,1206.84 1761.85,1206.84 1762.44,1206.84 1763.02,1206.84 1763.61,1206.84 1764.19,1206.84 1764.78,1206.84 1765.37,1206.84 1765.95,1206.84 1766.54,1206.84 1767.13,1206.84 1767.71,1206.84 1768.3,1206.84 1768.89,1206.84 1769.47,1206.84 1770.06,1206.84 1770.65,1206.84 1771.23,1206.84 1771.82,1206.84 1772.4,1206.84 1772.99,1206.84 1773.58,1206.84 1774.16,1206.84 1774.75,1206.84 1775.34,1206.84 1775.92,1206.84 1776.51,1206.84 1777.1,1206.84 1777.68,1206.84 1778.27,1206.84 1778.86,1206.84 1779.44,1206.84 1780.03,1206.84 1780.61,1206.84 1781.2,1206.84 1781.79,1206.84 1782.37,1206.84 1782.96,1206.84 1783.55,1206.84 1784.13,1206.84 1784.72,1206.84 1785.31,1206.84 1785.89,1206.84 1786.48,1206.84 1787.06,1206.84 1787.65,1206.84 1788.24,1206.84 1788.82,1206.84 1789.41,1206.84 1790,1206.84 1790.58,1206.84 1791.17,1206.84 1791.76,1206.84 1792.34,1206.84 1792.93,1206.84 1793.52,1206.84 1794.1,1206.84 1794.69,1206.84 1795.27,1206.84 1795.86,1206.84 1796.45,1206.84 1797.03,1206.84 1797.62,1206.84 1798.21,1206.84 1798.79,1206.84 1799.38,1206.84 1799.97,1206.84 1800.55,1206.84 1801.14,1206.84 1801.73,1206.84 1802.31,1206.84 1802.9,1206.84 1803.48,1206.84 1804.07,1206.84 1804.66,1206.84 1805.24,1206.84 1805.83,1206.84 1806.42,1206.84 1807,1206.84 1807.59,1206.84 1808.18,1206.84 1808.76,1206.84 1809.35,1206.84 1809.94,1206.84 1810.52,1206.84 1811.11,1206.84 1811.69,1206.84 1812.28,1206.84 1812.87,1206.84 1813.45,1206.84 1814.04,1206.84 1814.63,1206.84 1815.21,1206.84 1815.8,1206.84 1816.39,1206.84 1816.97,1206.84 1817.56,1206.84 1818.14,1206.84 1818.73,1206.84 1819.32,1206.84 1819.9,1206.84 1820.49,1206.84 1821.08,1206.84 1821.66,1206.84 1822.25,1206.84 1822.84,1206.84 1823.42,1206.84 1824.01,1206.84 1824.6,1206.84 1825.18,1206.84 1825.77,1206.84 1826.35,1206.84 1826.94,1206.84 1827.53,1206.84 1828.11,1206.84 1828.7,1206.84 1829.29,1206.84 1829.87,1206.84 1830.46,1206.84 1831.05,1206.84 1831.63,1206.84 1832.22,1206.84 1832.81,1206.84 1833.39,1206.84 1833.98,1206.84 1834.56,1206.84 1835.15,1206.84 1835.74,1206.84 1836.32,1206.84 1836.91,1206.84 1837.5,1206.84 1838.08,1206.84 1838.67,1206.84 1839.26,1206.84 1839.84,1206.84 1840.43,1206.84 1841.01,1206.84 1841.6,1206.84 1842.19,1206.84 1842.77,1206.84 1843.36,1206.84 1843.95,1206.84 1844.53,1206.84 1845.12,1206.84 1845.71,1206.84 1846.29,1206.84 1846.88,1206.84 1847.47,1206.84 1848.05,1206.84 1848.64,1206.84 1849.22,1206.84 1849.81,1206.84 1850.4,1206.84 1850.98,1206.84 1851.57,1206.84 1852.16,1206.84 1852.74,1206.84 1853.33,1206.84 1853.92,1206.84 1854.5,1206.84 1855.09,1206.84 1855.68,1206.84 1856.26,1206.84 1856.85,1206.84 1857.43,1206.84 1858.02,1206.84 1858.61,1206.84 1859.19,1206.84 1859.78,1206.84 1860.37,1206.84 1860.95,1206.84 1861.54,1206.84 1862.13,1206.84 1862.71,1206.84 1863.3,1206.84 1863.88,1206.84 1864.47,1206.84 1865.06,1206.84 1865.64,1206.84 1866.23,1206.84 1866.82,1206.84 1867.4,1206.84 1867.99,1206.84 1868.58,1206.84 1869.16,1206.84 1869.75,1206.84 1870.34,1206.84 1870.92,1206.84 1871.51,1206.84 1872.09,1206.84 1872.68,1206.84 1873.27,1206.84 1873.85,1206.84 1874.44,1206.84 1875.03,1206.84 1875.61,1206.84 1876.2,1206.84 1876.79,1206.84 1877.37,1206.84 1877.96,1206.84 1878.55,1206.84 1879.13,1206.84 1879.72,1206.84 1880.3,1206.84 1880.89,1206.84 1881.48,1206.84 1882.06,1206.84 1882.65,1206.84 1883.24,1206.84 1883.82,1206.84 1884.41,1206.84 1885,1206.84 1885.58,1206.84 1886.17,1206.84 1886.76,1206.84 1887.34,1206.84 1887.93,1206.84 1888.51,1206.84 1889.1,1206.84 1889.69,1206.84 1890.27,1206.84 1890.86,1206.84 1891.45,1206.84 1892.03,1206.84 1892.62,1206.84 1893.21,1206.84 1893.79,1206.84 1894.38,1206.84 1894.96,1206.84 1895.55,1206.84 1896.14,1206.84 1896.72,1206.84 1897.31,1206.84 1897.9,1206.84 1898.48,1206.84 1899.07,1206.84 1899.66,1206.84 1900.24,1206.84 1900.83,1206.84 1901.42,1206.84 1902,1206.84 1902.59,1206.84 1903.17,1206.84 1903.76,1206.84 1904.35,1206.84 1904.93,1206.84 1905.52,1206.84 1906.11,1206.84 1906.69,1206.84 1907.28,1206.84 1907.87,1206.84 1908.45,1206.84 1909.04,1206.84 1909.63,1206.84 1910.21,1206.84 1910.8,1206.84 1911.38,1206.84 1911.97,1206.84 1912.56,1206.84 1913.14,1206.84 1913.73,1206.84 1914.32,1206.84 1914.9,1206.84 1915.49,1206.84 1916.08,1206.84 1916.66,1206.84 1917.25,1206.84 1917.83,1206.84 1918.42,1206.84 1919.01,1206.84 1919.59,1206.84 1920.18,1206.84 1920.77,1206.84 1921.35,1206.84 1921.94,1206.84 1922.53,1206.84 1923.11,1206.84 1923.7,1206.84 1924.29,1206.84 1924.87,1206.84 1925.46,1206.84 1926.04,1206.84 1926.63,1206.84 1927.22,1206.84 1927.8,1206.84 1928.39,1206.84 1928.98,1206.84 1929.56,1206.84 1930.15,1206.84 1930.74,1206.84 1931.32,1206.84 1931.91,1206.84 1932.5,1206.84 1933.08,1206.84 1933.67,1206.84 1934.25,1206.84 1934.84,1206.84 1935.43,1206.84 1936.01,1206.84 1936.6,1206.84 1937.19,1206.84 1937.77,1206.84 1938.36,1206.84 1938.95,1206.84 1939.53,1206.84 1940.12,1206.84 1940.71,1206.84 1941.29,1206.84 1941.88,1206.84 1942.46,1206.84 1943.05,1206.84 1943.64,1206.84 1944.22,1206.84 1944.81,1206.84 1945.4,1206.84 1945.98,1206.84 1946.57,1206.84 1947.16,1206.84 1947.74,1206.84 1948.33,1206.84 1948.91,1206.84 1949.5,1206.84 1950.09,1206.84 1950.67,1206.84 1951.26,1206.84 1951.85,1206.84 1952.43,1206.84 1953.02,1206.84 1953.61,1206.84 1954.19,1206.84 1954.78,1206.84 1955.37,1206.84 1955.95,1206.84 1956.54,1206.84 1957.12,1206.84 1957.71,1206.84 1958.3,1206.84 1958.88,1206.84 1959.47,1206.84 1960.06,1206.84 1960.64,1206.84 1961.23,1206.84 1961.82,1206.84 1962.4,1206.84 1962.99,1206.84 1963.58,1206.84 1964.16,1206.84 1964.75,1206.84 1965.33,1206.84 1965.92,1206.84 1966.51,1206.84 1967.09,1206.84 1967.68,1206.84 1968.27,1206.84 1968.85,1206.84 1969.44,1206.84 1970.03,1206.84 1970.61,1206.84 1971.2,1206.84 1971.78,1206.84 1972.37,1206.84 1972.96,1206.84 1973.54,1206.84 1974.13,1206.84 1974.72,1206.84 1975.3,1206.84 1975.89,1206.84 1976.48,1206.84 1977.06,1206.84 1977.65,1206.84 1978.24,1206.84 1978.82,1206.84 1979.41,1206.84 1979.99,1206.84 1980.58,1206.84 1981.17,1206.84 1981.75,1206.84 1982.34,1206.84 1982.93,1206.84 1983.51,1206.84 1984.1,1206.84 1984.69,1206.84 1985.27,1206.84 1985.86,1206.84 1986.45,1206.84 1987.03,1206.84 1987.62,1206.84 1988.2,1206.84 1988.79,1206.84 1989.38,1206.84 1989.96,1206.84 1990.55,1206.84 1991.14,1206.84 1991.72,1206.84 1992.31,1206.84 1992.9,1206.84 1993.48,1206.84 1994.07,1206.84 1994.65,1206.84 1995.24,1206.84 1995.83,1206.84 1996.41,1206.84 1997,1206.84 1997.59,1206.84 1998.17,1206.84 1998.76,1206.84 1999.35,1206.84 1999.93,1206.84 2000.52,1206.84 2001.11,1206.84 2001.69,1206.84 2002.28,1206.84 2002.86,1206.84 2003.45,1206.84 2004.04,1206.84 2004.62,1206.84 2005.21,1206.84 2005.8,1206.84 2006.38,1206.84 2006.97,1206.84 2007.56,1206.84 2008.14,1206.84 2008.73,1206.84 2009.32,1206.84 2009.9,1206.84 2010.49,1206.84 2011.07,1206.84 2011.66,1206.84 2012.25,1206.84 2012.83,1206.84 2013.42,1206.84 2014.01,1206.84 2014.59,1206.84 2015.18,1206.84 2015.77,1206.84 2016.35,1206.84 2016.94,1206.84 2017.53,1206.84 2018.11,1206.84 2018.7,1206.84 2019.28,1206.84 2019.87,1206.84 2020.46,1206.84 2021.04,1206.84 2021.63,1206.84 2022.22,1206.84 2022.8,1206.84 2023.39,1206.84 2023.98,1206.84 2024.56,1206.84 2025.15,1206.84 2025.73,1206.84 2026.32,1206.84 2026.91,1206.84 2027.49,1206.84 2028.08,1206.84 2028.67,1206.84 2029.25,1206.84 2029.84,1206.84 2030.43,1206.84 2031.01,1206.84 2031.6,1206.84 2032.19,1206.84 2032.77,1206.84 2033.36,1206.84 2033.94,1206.84 2034.53,1206.84 2035.12,1206.84 2035.7,1206.84 2036.29,1206.84 2036.88,1206.84 2037.46,1206.84 2038.05,1206.84 2038.64,1206.84 2039.22,1206.84 2039.81,1206.84 2040.4,1206.84 2040.98,1206.84 2041.57,1206.84 2042.15,1206.84 2042.74,1206.84 2043.33,1206.84 2043.91,1206.84 2044.5,1206.84 2045.09,1206.84 2045.67,1206.84 2046.26,1206.84 2046.85,1206.84 2047.43,1206.84 2048.02,1206.84 2048.6,1206.84 2049.19,1206.84 2049.78,1206.84 2050.36,1206.84 2050.95,1206.84 2051.54,1206.84 2052.12,1206.84 2052.71,1206.84 2053.3,1206.84 2053.88,1206.84 2054.47,1206.84 2055.06,1206.84 2055.64,1206.84 2056.23,1206.84 2056.81,1206.84 2057.4,1206.84 2057.99,1206.84 2058.57,1206.84 2059.16,1206.84 2059.75,1206.84 2060.33,1206.84 2060.92,1206.84 2061.51,1206.84 2062.09,1206.84 2062.68,1206.84 2063.27,1206.84 2063.85,1206.84 2064.44,1206.84 2065.02,1206.84 2065.61,1206.84 2066.2,1206.84 2066.78,1206.84 2067.37,1206.84 2067.96,1206.84 2068.54,1206.84 2069.13,1206.84 2069.72,1206.84 2070.3,1206.84 2070.89,1206.84 2071.48,1206.84 2072.06,1206.84 2072.65,1206.84 2073.23,1206.84 2073.82,1206.84 2074.41,1206.84 2074.99,1206.84 2075.58,1206.84 2076.17,1206.84 2076.75,1206.84 2077.34,1206.84 2077.93,1206.84 2078.51,1206.84 2079.1,1206.84 2079.68,1206.84 2080.27,1206.84 2080.86,1206.84 2081.44,1206.84 2082.03,1206.84 2082.62,1206.84 2083.2,1206.84 2083.79,1206.84 2084.38,1206.84 2084.96,1206.84 2085.55,1206.84 2086.14,1206.84 2086.72,1206.84 2087.31,1206.84 2087.89,1206.84 2088.48,1206.84 2089.07,1206.84 2089.65,1206.84 2090.24,1206.84 2090.83,1206.84 2091.41,1206.84 2092,1206.84 2092.59,1206.84 2093.17,1206.84 2093.76,1206.84 2094.35,1206.84 2094.93,1206.84 2095.52,1206.84 2096.1,1206.84 2096.69,1206.84 2097.28,1206.84 2097.86,1206.84 2098.45,1206.84 2099.04,1206.84 2099.62,1206.84 2100.21,1206.84 2100.8,1206.84 2101.38,1206.84 2101.97,1206.84 2102.55,1206.84 2103.14,1206.84 2103.73,1206.84 2104.31,1206.84 2104.9,1206.84 2105.49,1206.84 2106.07,1206.84 2106.66,1206.84 2107.25,1206.84 2107.83,1206.84 2108.42,1206.84 2109.01,1206.84 2109.59,1206.84 2110.18,1206.84 2110.76,1206.84 2111.35,1206.84 2111.94,1206.84 2112.52,1206.84 2113.11,1206.84 2113.7,1206.84 2114.28,1206.84 2114.87,1206.84 2115.46,1206.84 2116.04,1206.84 2116.63,1206.84 2117.22,1206.84 2117.8,1206.84 2118.39,1206.84 2118.97,1206.84 2119.56,1206.84 2120.15,1206.84 2120.73,1206.84 2121.32,1206.84 2121.91,1206.84 2122.49,1206.84 2123.08,1206.84 2123.67,1206.84 2124.25,1206.84 2124.84,1206.84 2125.42,1206.84 2126.01,1206.84 2126.6,1206.84 2127.18,1206.84 2127.77,1206.84 2128.36,1206.84 2128.94,1206.84 2129.53,1206.84 2130.12,1206.84 2130.7,1206.84 2131.29,1206.84 2131.88,1206.84 2132.46,1206.84 2133.05,1206.84 2133.63,1206.84 2134.22,1206.84 2134.81,1206.84 2135.39,1206.84 2135.98,1206.84 2136.57,1206.84 2137.15,1206.84 2137.74,1206.84 2138.33,1206.84 2138.91,1206.84 2139.5,1206.84 2140.09,1206.84 2140.67,1206.84 2141.26,1206.84 2141.84,1206.84 2142.43,1206.84 2143.02,1206.84 2143.6,1206.84 2144.19,1206.84 2144.78,1206.84 2145.36,1206.84 2145.95,1206.84 2146.54,1206.84 2147.12,1206.84 2147.71,1206.84 2148.3,1206.84 2148.88,1206.84 2149.47,1206.84 2150.05,1206.84 2150.64,1206.84 2151.23,1206.84 2151.81,1206.84 2152.4,1206.84 2152.99,1206.84 2153.57,1206.84 2154.16,1206.84 2154.75,1206.84 2155.33,1206.84 2155.92,1206.84 2156.5,1206.84 2157.09,1206.84 2157.68,1206.84 2158.26,1206.84 \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.68,1190.17 1400.6,899.083 \"/>\n<polyline clip-path=\"url(#clip822)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1223.11 985.439,1190.17 2158.26,1190.17 2158.26,1223.11 985.439,1223.11 \"/>\n<path clip-path=\"url(#clip820)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip820)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip820)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip820)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip820)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip820)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip823\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip823)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip823)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip823)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip823)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip823)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip823)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip823)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip823)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip823)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip823)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip820)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip820)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip820)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip820)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip823)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-10821.4 167.147,-11334.6 167.706,-11791.5 168.266,-11219.8 168.825,-11615.7 169.384,-11963.6 169.943,-11487.8 170.503,-11779.2 171.062,-12017.4 171.621,-12231.3 172.18,-12409.8 172.74,-11466.2 173.299,-11608.6 173.858,-11728.6 174.417,-11810.3 174.977,-11877.5 175.536,-11920.8 176.095,-11941.9 176.655,-11928.8 177.214,-11911.1 177.773,-11867.5 178.332,-11532.1 178.892,-11459.9 179.451,-11130.7 180.01,-10806.6 180.569,-10697 181.129,-10581 181.688,-10260.9 182.247,-10126.2 182.806,-9981.41 183.366,-9831.52 183.925,-9681.47 184.484,-9524.7 185.043,-9368.83 185.603,-9199.12 186.162,-8671.04 186.721,-8499.49 187.28,-8324.13 187.84,-8146.24 188.399,-7773.26 188.958,-7327.07 189.517,-7169.43 190.077,-6663.08 190.636,-6520.83 191.195,-6149.91 191.754,-5873.56 192.314,-5667.95 192.873,-5472.17 193.432,-5346.27 193.991,-5221.45 194.551,-5093.76 195.11,-4966.69 195.669,-4783.9 196.228,-4603.41 196.788,-4381.84 197.347,-4122.39 197.906,-4015.98 198.465,-3910.36 199.025,-3714.17 199.584,-3528.43 200.143,-3394.58 200.702,-3135.72 201.262,-3054.79 201.821,-2858.01 202.38,-2744.29 202.939,-2484.42 203.499,-2380.14 204.058,-2242.18 204.617,-2143.78 205.176,-2016.04 205.736,-1925.39 206.295,-1835.25 206.854,-1719.66 207.413,-1667.53 207.973,-1583.28 208.532,-1472.76 209.091,-1419.9 209.65,-1312.52 210.21,-1181.36 210.769,-1134.9 211.328,-1037.55 211.887,-972.902 212.447,-935.247 213.006,-896.066 213.565,-884.313 214.124,-844.169 214.684,-702.707 215.243,-618.426 215.802,-558.315 216.361,-501.028 216.921,-446.539 217.48,-391.147 218.039,-339.535 218.598,-308.33 219.158,-283.035 219.717,-231.363 220.276,-161.523 220.835,-67.5191 221.395,21.4825 221.954,38.9759 222.513,78.217 223.072,120.343 223.632,138.352 224.191,179.264 224.75,219.789 225.309,254.429 225.869,289.121 226.428,325.201 226.987,421.62 227.546,427.546 228.106,478.364 228.665,523.468 229.224,527.787 229.783,512.931 230.343,558.85 230.902,561.453 231.461,607.675 232.02,594.256 232.58,580.355 233.139,607.582 233.698,673.083 234.257,656.183 234.817,680.415 235.376,763.592 235.935,783.921 236.494,799.808 237.054,837.137 237.613,817.928 238.172,834.002 238.731,853.36 239.291,887.078 239.85,920.088 240.409,932.047 240.968,942.913 241.528,934.772 242.087,982.418 242.646,995.026 243.205,950.632 243.765,962.437 244.324,974.499 244.883,969.221 245.442,998.988 246.002,993.154 246.561,1021.47 247.12,1015.47 247.679,1061.08 248.239,1050.28 248.798,1061.46 249.357,1031.27 249.916,1058.4 250.476,1084.52 251.035,1072.32 251.594,1084.82 252.153,1090.22 252.713,1098.25 253.272,1103.13 253.831,1144.83 254.39,1169.36 254.95,1173.4 255.509,1216.85 256.068,1200.53 256.627,1201.13 257.187,1188.05 257.746,1193.81 258.305,1202.19 258.864,1208.04 259.424,1196.09 259.983,1218.32 260.542,1237.65 261.101,1259.46 261.661,1259.6 262.22,1260.53 262.779,1260.9 263.338,1262.82 263.898,1213.46 264.457,1215.62 265.016,1236.36 265.575,1252.75 266.135,1255.6 266.694,1252.56 267.253,1252.23 267.812,1188.36 268.372,1160.07 268.931,1147.16 269.49,1156.23 270.049,1178.41 270.609,1165.47 271.168,1156.71 271.727,1162.74 272.286,1134.75 272.846,1173.81 273.405,1159.5 273.964,1132.65 274.523,1127.26 275.083,1122.77 275.642,1129.91 276.201,1138.31 276.76,1143.41 277.32,1151.15 277.879,1139.73 278.438,1128.39 278.997,1101.89 279.557,1060.34 280.116,1052.78 280.675,1033.18 281.234,1028.04 281.794,1040.96 282.353,1038.41 282.912,1071.67 283.471,1048.58 284.031,1076.46 284.59,1086.74 285.149,1100.35 285.708,1093.61 286.268,1120.53 286.827,1117.22 287.386,1105.87 287.945,1096.5 288.505,1057.5 289.064,1031.77 289.623,1042.86 290.182,1071.81 290.742,1035.98 291.301,1048.27 291.86,1076.57 292.419,1101.48 292.979,1125.09 293.538,1101.76 294.097,1090.34 294.656,1099.95 295.216,1106.36 295.775,1115.71 296.334,1104.48 296.893,1095.69 297.453,1101.21 298.012,1092.56 298.571,1117.77 299.13,1090.22 299.69,1112.7 300.249,1086.24 300.808,1128.64 301.368,1116.16 301.927,1103.36 302.486,1075.7 303.045,1069.11 303.605,1043.16 304.164,1003.07 304.723,998.905 305.282,1027.75 305.842,1038.75 306.401,1030.21 306.96,1021.53 307.519,1015.31 308.079,1007.73 308.638,984.526 309.197,979.759 309.756,943.825 310.316,940.495 310.875,938.15 311.434,918.622 311.993,913.27 312.553,931.419 313.112,946.738 313.671,945.926 314.23,942.161 314.79,954.755 315.349,1001.05 315.908,980.813 316.467,1008.93 317.027,1032.61 317.586,995.471 318.145,973.037 318.704,968.117 319.264,981.192 319.823,973.716 320.382,1001.49 320.941,993.439 321.501,986.644 322.06,968.864 322.619,949.055 323.178,910.167 323.738,940.748 324.297,919.54 324.856,933.389 325.415,915.05 325.975,929.091 326.534,930.273 327.093,913.573 327.652,894.431 328.212,959.94 328.771,924.967 329.33,922.376 329.889,954.24 330.449,929.244 331.008,925.798 331.567,922.216 332.126,938.369 332.686,921.756 333.245,904.605 333.804,900.091 334.363,884.672 334.923,885.66 335.482,883.69 336.041,866.82 336.6,883.363 337.16,897.326 337.719,930.223 338.278,941.92 338.837,925.152 339.397,923.672 339.956,870.458 340.515,863.703 341.074,831.147 341.634,833.563 342.193,851.078 342.752,862.585 343.311,880.667 343.871,828.764 344.43,865.252 344.989,878.241 345.548,894.557 346.108,893.269 346.667,908.793 347.226,953.931 347.785,946.503 348.345,944.404 348.904,920.849 349.463,918.938 350.022,881.107 350.582,897.543 351.141,909.328 351.7,890.615 352.259,903.875 352.819,917.81 353.378,933.526 353.937,960.342 354.496,938.328 355.056,937.73 355.615,946.825 356.174,990.394 356.733,980.733 357.293,941.843 357.852,962.209 358.411,937.964 358.97,912.704 359.53,905.653 360.089,931.811 360.648,942.485 361.207,954.193 361.767,964.59 362.326,925.595 362.885,902.927 363.444,882.98 364.004,896.575 364.563,892.397 365.122,855.034 365.681,854.669 366.241,821.463 366.8,871.018 367.359,803.134 367.918,789.241 368.478,772.697 369.037,790.712 369.596,809.557 370.155,824.095 370.715,844.022 371.274,840.549 371.833,868.762 372.392,880.529 372.952,894.327 373.511,874.602 374.07,858.201 374.629,869.837 375.189,888.142 375.748,916.351 376.307,927.192 376.866,956.825 377.426,933.783 377.985,894.353 378.544,921.95 379.103,916.101 379.663,894.537 380.222,871.053 380.781,883.855 381.34,896.948 381.9,877.467 382.459,888.993 383.018,900.441 383.577,912.363 384.137,891.048 384.696,871.87 385.255,869.203 385.814,846.325 386.374,832.082 386.933,811.907 387.492,777.388 388.051,812.79 388.611,828.574 389.17,858.561 389.729,855.81 390.288,836.798 390.848,818.419 391.407,803.569 391.966,819.329 392.525,802.647 393.085,799.876 393.644,814.39 394.203,831.007 394.762,827.995 395.322,859.774 395.881,841.537 396.44,838.55 396.999,869.056 397.559,881.558 398.118,895.433 398.677,907.21 399.236,901.155 399.796,862.967 400.355,876.211 400.914,869.257 401.473,880.426 402.033,860.858 402.592,888.321 403.151,896.742 403.71,874.222 404.27,886.119 404.829,899.892 405.388,912.913 405.947,875.801 406.507,887.877 407.066,881.988 407.625,877.275 408.184,903.553 408.744,898.63 409.303,926.278 409.862,904.944 410.421,917.258 410.981,862.104 411.54,856.365 412.099,852.71 412.658,864.673 413.218,861.19 413.777,857.485 414.336,855.351 414.895,836.547 415.455,836.586 416.014,833.059 416.573,810.478 417.132,824.292 417.692,820.671 418.251,755.409 418.81,721.528 419.369,740.654 419.929,740.735 420.488,758.876 421.047,806.018 421.606,770.305 422.166,770.225 422.725,736.815 423.284,737.105 423.843,735.309 424.403,755.185 424.962,755.012 425.521,737.419 426.08,738.613 426.64,723.226 427.199,725.669 427.758,743.097 428.318,760.366 428.877,759.784 429.436,761.239 429.995,776.609 430.555,775.667 431.114,777.367 431.673,792.691 432.232,744.249 432.792,758.501 433.351,761.612 433.91,777.928 434.469,778.544 435.029,778.291 435.588,759.405 436.147,776.704 436.706,774.595 437.266,790.113 437.825,806.486 438.384,819.905 438.943,834.98 439.503,819.006 440.062,805.204 440.621,803.24 441.18,803.779 441.74,752.558 442.299,752.889 442.858,750.524 443.417,768.436 443.977,797.693 444.536,799.523 445.095,812.561 445.654,840.85 446.214,854.668 446.773,848.515 447.332,839.529 447.891,836.984 448.451,814.288 449.01,793.95 449.569,794.765 450.128,778.196 450.688,778.964 451.247,777.947 451.806,794.562 452.365,791.574 452.925,806.499 453.484,818.462 454.043,864.316 454.602,872.403 455.162,850.641 455.721,843.458 456.28,857.313 456.839,870.047 457.399,861.413 457.958,857.185 458.517,899.116 459.076,888.054 459.636,849.723 460.195,859.297 460.754,858.947 461.313,837.302 461.873,829.713 462.432,827.013 462.991,805.292 463.55,800.455 464.11,797.44 464.669,811.33 465.228,796.215 465.787,809.132 466.347,818.815 466.906,815.321 467.465,811.363 468.024,805.561 468.584,801.09 469.143,797.506 469.702,732.749 470.261,717.37 470.821,720.139 471.38,722.289 471.939,692.555 472.498,660.882 473.058,664.04 473.617,668.525 474.176,639.439 474.735,663.855 475.295,685.268 475.854,685.187 476.413,701.653 476.972,718.589 477.532,716.09 478.091,700.276 478.65,684.974 479.209,686.041 479.769,640.259 480.328,645.006 480.887,663.011 481.446,668.195 482.006,672.554 482.565,674.211 483.124,661.737 483.683,681.814 484.243,720.68 484.802,750.103 485.361,747.893 485.92,798.965 486.48,792.096 487.039,837.95 487.598,852.594 488.157,866.022 488.717,859.441 489.276,853.424 489.835,830.949 490.394,808.962 490.954,819.23 491.513,764.936 492.072,778.612 492.631,761.31 493.191,777.472 493.75,822.148 494.309,849.971 494.868,843.455 495.428,823.916 495.987,818.712 496.546,832.76 497.105,812.62 497.665,808.372 498.224,822.916 498.783,782.487 499.342,796.002 499.902,759.154 500.461,789.887 501.02,769.153 501.579,768.197 502.139,786.596 502.698,767.072 503.257,746.186 503.816,716.282 504.376,696.476 504.935,714.119 505.494,699.515 506.053,761.386 506.613,757.768 507.172,757.047 507.731,740.507 508.29,724.622 508.85,756.971 509.409,771.389 509.968,751.498 510.527,747.878 511.087,746.215 511.646,763.284 512.205,775.321 512.764,758.694 513.324,773.554 513.883,772.293 514.442,770.125 515.001,768.178 515.561,765.286 516.12,746.391 516.679,761.538 517.238,726.296 517.798,740.729 518.357,673.306 518.916,704.774 519.475,705.022 520.035,704.299 520.594,726.232 521.153,740.149 521.712,723.675 522.272,692.798 522.831,694.492 523.39,697.195 523.949,717.785 524.509,722.317 525.068,720.593 525.627,738.178 526.186,770.539 526.746,769.183 527.305,783.991 527.864,796.918 528.423,781.365 528.983,763.084 529.542,776.495 530.101,805.63 530.66,800.934 531.22,765.209 531.779,798.862 532.338,823.718 532.897,790.238 533.457,783.543 534.016,798.054 534.575,794.941 535.134,790.809 535.694,822.033 536.253,767.94 536.812,782.545 537.371,745.513 537.931,743.267 538.49,725.305 539.049,724.225 539.608,725.861 540.168,712.108 540.727,714.529 541.286,665.706 541.845,667.225 542.405,668.574 542.964,671.283 543.523,669.257 544.082,673.68 544.642,660.874 545.201,664.886 545.76,651.873 546.319,704.131 546.879,721.752 547.438,739.594 547.997,754.994 548.556,768.184 549.116,736.136 549.675,734.771 550.234,717.531 550.793,701.34 551.353,699.35 551.912,700.042 552.471,717.587 553.031,718.553 553.59,706.601 554.149,674.465 554.708,691.776 555.268,722.876 555.827,738.13 556.386,736.274 556.945,781.799 557.505,779.386 558.064,791.069 558.623,800.957 559.182,794.1 559.742,772.651 560.301,768.347 560.86,767.259 561.419,746.864 561.979,743.167 562.538,674.798 563.097,676.067 563.656,680.278 564.216,732.718 564.775,731.699 565.334,698.607 565.893,698.957 566.453,716.394 567.012,695.011 567.571,683.801 568.13,636.54 568.69,656.166 569.249,642.756 569.808,678.767 570.367,728.884 570.927,759.059 571.486,755.78 572.045,757.204 572.604,754.023 573.164,751.031 573.723,750.614 574.282,747.701 574.841,763.86 575.401,760.664 575.96,758.862 576.519,771.484 577.078,769.207 577.638,812.277 578.197,804.338 578.756,783.677 579.315,780.28 579.875,792.552 580.434,738.391 580.993,734.97 581.552,737.72 582.112,735.815 582.671,749.082 583.23,730.972 583.789,700.747 584.349,714.512 584.908,715.347 585.467,698.122 586.026,747.514 586.586,778.769 587.145,791.532 587.704,755.075 588.263,751.02 588.823,747.858 589.382,762.998 589.941,779.487 590.5,744.385 591.06,723.926 591.619,719.45 592.178,682.838 592.737,669.8 593.297,661.866 593.856,652 594.415,675.092 594.974,662.227 595.534,677.316 596.093,707.019 596.652,704.977 597.211,689.941 597.771,708.696 598.33,709.832 598.889,690.896 599.448,705.737 600.008,703.049 600.567,705.175 601.126,733.87 601.685,697.214 602.245,679.433 602.804,695.134 603.363,744.773 603.922,758.67 604.482,788.26 605.041,802.052 605.6,765.522 606.159,762.387 606.719,791.772 607.278,802.285 607.837,780.176 608.396,792.038 608.956,769.62 609.515,737.624 610.074,753.11 610.633,748.347 611.193,776.07 611.752,807.233 612.311,801.714 612.87,766.259 613.43,764.493 613.989,777.757 614.548,775.864 615.107,771.075 615.667,786.338 616.226,765.052 616.785,743.377 617.344,705.743 617.904,703.925 618.463,718.038 619.022,681.806 619.581,712.412 620.141,680.656 620.7,650.853 621.259,603.672 621.818,624.915 622.378,629.99 622.937,618.613 623.496,621.887 624.055,660.574 624.615,713.673 625.174,695.805 625.733,745.107 626.292,774.025 626.852,772.35 627.411,768.203 627.97,767.634 628.529,766.478 629.089,734.53 629.648,735.806 630.207,751.373 630.766,749.73 631.326,762.201 631.885,713.107 632.444,713.37 633.003,728.672 633.563,730.593 634.122,728.89 634.681,773.407 635.24,783.971 635.8,761.115 636.359,710.955 636.918,726.955 637.477,710.9 638.037,694.143 638.596,708.53 639.155,708.275 639.714,694.731 640.274,714.826 640.833,679.761 641.392,647.403 641.951,668.972 642.511,655.703 643.07,673.246 643.629,644.085 644.188,630.491 644.748,684.441 645.307,666.766 645.866,669.904 646.425,657.791 646.985,692.94 647.544,692.732 648.103,727.702 648.662,743.904 649.222,726.121 649.781,693.025 650.34,658.833 650.899,659.351 651.459,642.641 652.018,608.903 652.577,629.47 653.136,665.302 653.696,699.147 654.255,699.43 654.814,714.48 655.373,712.148 655.933,741.518 656.492,768.796 657.051,731.829 657.61,730.188 658.17,729.931 658.729,732.467 659.288,751.387 659.847,763.786 660.407,776.919 660.966,755.896 661.525,739.616 662.084,755.149 662.644,753.727 663.203,784.77 663.762,794.639 664.321,804.844 664.881,785.401 665.44,782.492 665.999,749.94 666.558,745.233 667.118,761.77 667.677,792.298 668.236,786.295 668.795,779.589 669.355,759.202 669.914,724.156 670.473,754.605 671.032,707.346 671.592,737.221 672.151,749.54 672.71,698.757 673.269,696.501 673.829,710.866 674.388,690.996 674.947,691.151 675.506,705.132 676.066,703.922 676.625,707.143 677.184,691.815 677.743,659.875 678.303,641.534 678.862,642.692 679.421,612.903 679.981,586.54 680.54,560.442 681.099,567.495 681.658,573.551 682.218,595.006 682.777,583.454 683.336,604.31 683.895,611.64 684.455,647.979 685.014,603.225 685.573,620.881 686.132,608.824 686.692,611.363 687.251,650.301 687.81,669.037 688.369,686.783 688.929,682.888 689.488,667.083 690.047,715.99 690.606,743.633 691.166,741.899 691.725,772.325 692.284,784.737 692.843,795.047 693.403,793.034 693.962,803.86 694.521,811.086 695.08,773.367 695.64,752.486 696.199,732.976 696.758,731.537 697.317,744.429 697.877,772.198 698.436,784.692 698.995,760.928 699.554,756.642 700.114,703.611 700.673,703.687 701.232,689.733 701.791,710.532 702.351,695.414 702.91,694.053 703.469,679.775 704.028,714.072 704.588,714.358 705.147,711.979 705.706,707.538 706.265,735.758 706.825,735.661 707.384,733.423 707.943,730.844 708.502,712.426 709.062,727.125 709.621,740.807 710.18,704.75 710.739,750.996 711.299,784.356 711.858,780.733 712.417,742.687 712.976,726.431 713.536,739.434 714.095,732.796 714.654,730.916 715.213,763.361 715.773,775.276 716.332,754.579 716.891,751.388 717.45,732.216 718.01,709.003 718.569,695.441 719.128,696.222 719.687,683.05 720.247,685.109 720.806,701.314 721.365,766.112 721.924,763.461 722.484,744.025 723.043,712.114 723.602,725.566 724.161,724.69 724.721,741.808 725.28,754.92 725.839,748.023 726.398,741.296 726.958,771.512 727.517,735.251 728.076,715.972 728.635,729.204 729.195,679.527 729.754,679.941 730.313,664.694 730.872,650.887 731.432,668.211 731.991,668.568 732.55,657.31 733.109,706.479 733.669,721.173 734.228,688.601 734.787,658.71 735.346,693.623 735.906,707.515 736.465,703.904 737.024,700.673 737.583,682.093 738.143,666.218 738.702,681.141 739.261,662.824 739.82,661.593 740.38,645.249 740.939,646.557 741.498,646.448 742.057,632.511 742.617,634.631 743.176,609.374 743.735,582.819 744.294,603.998 744.854,626.184 745.413,610.401 745.972,566.582 746.531,554.783 747.091,577.073 747.65,582.432 748.209,586.836 748.768,560.797 749.328,549.514 749.887,570.434 750.446,564.7 751.005,574.27 751.565,581.916 752.124,575.114 752.683,597.224 753.242,601.12 753.802,606.529 754.361,579.579 754.92,583.842 755.479,588.784 756.039,642.589 756.598,645.266 757.157,648.844 757.716,634.071 758.276,672.165 758.835,659.211 759.394,645.255 759.953,648.654 760.513,651.227 761.072,636.655 761.631,621.365 762.19,625.606 762.75,632.287 763.309,620.928 763.868,575.652 764.427,598.648 764.987,608.897 765.546,580.059 766.105,617.623 766.664,657.453 767.224,676.292 767.783,680.443 768.342,696.674 768.901,683.153 769.461,685.736 770.02,702.591 770.579,700.929 771.138,718.787 771.698,685.564 772.257,652.914 772.816,688.85 773.375,691.4 773.935,689.739 774.494,689.013 775.053,687.193 775.612,688.325 776.172,674.054 776.731,677.045 777.29,695.085 777.849,693.935 778.409,696.099 778.968,713.388 779.527,713.513 780.086,728.033 780.646,723.294 781.205,705.803 781.764,704.302 782.323,718.911 782.883,719.183 783.442,668.316 784.001,602.688 784.56,592.956 785.12,616.562 785.679,619.024 786.238,637.394 786.797,626.107 787.357,647.174 787.916,680.365 788.475,679.584 789.034,662.086 789.594,679.424 790.153,678.952 790.712,712.453 791.271,711.632 791.831,725.492 792.39,677.458 792.949,693.787 793.508,661.284 794.068,660.987 794.627,693.477 795.186,677.192 795.745,661.281 796.305,696.859 796.864,708.096 797.423,692.369 797.982,694.07 798.542,706.537 799.101,704.068 799.66,718.218 800.219,730.57 800.779,729.677 801.338,711.29 801.897,689.013 802.456,737.348 803.016,732.307 803.575,745.657 804.134,741.741 804.693,755.56 805.253,704.337 805.812,716.519 806.371,716.682 806.931,705.258 807.49,719.611 808.049,732.159 808.608,731.392 809.168,731.887 809.727,745.618 810.286,727.206 810.845,741.621 811.405,721.814 811.964,739.13 812.523,753.043 813.082,752.637 813.642,716.253 814.201,684.315 814.76,682.756 815.319,649.487 815.879,618.737 816.438,575.218 816.997,561.074 817.556,553.839 818.116,564.178 818.675,569.513 819.234,613.558 819.793,603.089 820.353,628.322 820.912,629.301 821.471,636.663 822.03,639.108 822.59,688.549 823.149,688.276 823.708,692.56 824.267,675.84 824.827,675.586 825.386,707.271 825.945,708.769 826.504,740.371 827.064,737.324 827.623,735.393 828.182,716.022 828.741,715.023 829.301,714.564 829.86,713.656 830.419,749.379 830.978,747.416 831.538,742.145 832.097,756.577 832.656,756.503 833.215,751.927 833.775,761.97 834.334,758.888 834.893,758.272 835.452,775.037 836.012,818.366 836.571,829.267 837.13,805.787 837.689,787.057 838.249,778.876 838.808,759.494 839.367,738.16 839.926,735.683 840.486,732.459 841.045,714.928 841.604,727.714 842.163,741.919 842.723,725.418 843.282,705.224 843.841,719.983 844.4,717.243 844.96,684.02 845.519,714.329 846.078,730.97 846.637,730.193 847.197,712.436 847.756,726.859 848.315,694.714 848.874,676.58 849.434,676.172 849.993,693.691 850.552,661.788 851.111,614.105 851.671,599.569 852.23,617.674 852.789,622.287 853.348,609.779 853.908,581.458 854.467,606.383 855.026,611.388 855.585,632.854 856.145,649.141 856.704,650.415 857.263,636.525 857.822,656.019 858.382,677.399 858.941,644.812 859.5,615.784 860.059,615.86 860.619,617.827 861.178,588.308 861.737,594.588 862.296,616.246 862.856,616.766 863.415,603.375 863.974,608.743 864.533,612.93 865.093,633.167 865.652,634.105 866.211,654.115 866.77,640.878 867.33,627.501 867.889,650.537 868.448,653.597 869.007,640.427 869.567,643.322 870.126,630.05 870.685,633.496 871.244,618.88 871.804,604.563 872.363,659.246 872.922,661.169 873.481,677.496 874.041,663.833 874.6,647.581 875.159,635.62 875.718,659.095 876.278,644.642 876.837,647.501 877.396,648.176 877.955,646.857 878.515,665.349 879.074,713.049 879.633,729.557 880.192,711.623 880.752,726.316 881.311,728.251 881.87,724.081 882.429,721.138 882.989,720.492 883.548,699.556 884.107,697.199 884.666,713.531 885.226,727.743 885.785,724.038 886.344,738.203 886.903,752.44 887.463,730.718 888.022,726.602 888.581,709.169 889.14,692.555 889.7,691.66 890.259,689.461 890.818,688.47 891.377,686.803 891.937,673.45 892.496,641.265 893.055,742.542 893.614,754.673 894.174,748.396 894.733,776.313 895.292,771.428 895.851,783.27 896.411,729.684 896.97,723.961 897.529,771.764 898.088,780.545 898.648,794.207 899.207,786.047 899.766,778.438 900.325,819.827 900.885,812.847 901.444,789.447 902.003,800.878 902.562,813.769 903.122,809.35 903.681,769.253 904.24,795.697 904.799,709.106 905.359,708.274 905.918,670.049 906.477,652.771 907.036,654.367 907.596,669.426 908.155,653.593 908.714,670.673 909.273,671.534 909.833,721.087 910.392,705.055 910.951,689.362 911.51,691.022 912.07,707.382 912.629,707.366 913.188,724.536 913.747,725.671 914.307,752.72 914.866,728.811 915.425,713.569 915.984,696.517 916.544,661.789 917.103,679.582 917.662,679.412 918.221,645.047 918.781,647.147 919.34,647.809 919.899,631.331 920.458,647.451 921.018,681.143 921.577,682.603 922.136,715.236 922.695,712.505 923.255,709.194 923.814,691.234 924.373,691.311 924.932,725.546 925.492,721.907 926.051,719.213 926.61,686.349 927.169,701.326 927.729,682.586 928.288,679.817 928.847,696.587 929.406,729.423 929.966,712.223 930.525,692.37 931.084,690.24 931.644,689.754 932.203,684.927 932.762,688.467 933.321,672.903 933.881,703.991 934.44,737.321 934.999,749.939 935.558,746.69 936.118,694.847 936.677,726.914 937.236,736.924 937.795,735.43 938.355,716.987 938.914,663.845 939.473,647.894 940.032,601.313 940.592,572.961 941.151,562.209 941.71,570.052 942.269,572.295 942.829,610.975 943.388,611.696 943.947,614.287 944.506,646.759 945.066,646.855 945.625,698.5 946.184,696.152 946.743,742.128 947.303,738.002 947.862,735.294 948.421,764.718 948.98,728.104 949.54,774.593 950.099,769.476 950.658,783.529 951.217,727.675 951.777,704.471 952.336,670.823 952.895,670.599 953.454,671.42 954.014,688.413 954.573,654.531 955.132,639.387 955.691,610.973 956.251,581.877 956.81,587.946 957.369,575.296 957.928,599.218 958.488,588.699 959.047,645.157 959.606,694.36 960.165,705.701 960.725,698.787 961.284,648.33 961.843,680.795 962.402,747.346 962.962,746.221 963.521,711.347 964.08,675.984 964.639,679.009 965.199,695.887 965.758,728.505 966.317,726.033 966.876,711.91 967.436,728.708 967.995,744.974 968.554,726.492 969.113,722.183 969.673,688.079 970.232,688.053 970.791,689.772 971.35,704.947 971.91,718.73 972.469,697.447 973.028,728.733 973.587,690.936 974.147,674.136 974.706,642.151 975.265,644.421 975.824,648.106 976.384,649.99 976.943,666.984 977.502,700.889 978.061,715.771 978.621,680.542 979.18,680.759 979.739,667.893 980.298,650.847 980.858,640.692 981.417,677.23 981.976,679.335 982.535,682.673 983.095,651.398 983.654,634.739 984.213,636.073 984.772,623.115 985.332,611.472 985.891,614.307 986.45,618.595 987.009,655.273 987.569,691.942 988.128,690.031 988.687,674.261 989.246,662.409 989.806,616.225 990.365,621.78 990.924,595.02 991.483,630.622 992.043,652.976 992.602,670.278 993.161,657.169 993.72,675.557 994.28,696.002 994.839,681.489 995.398,681.206 995.957,682.759 996.517,685.712 997.076,700.204 997.635,699.499 998.194,716.577 998.754,700.712 999.313,667.323 999.872,667.106 1000.43,667.683 1000.99,635.276 1001.55,619.819 1002.11,589.761 1002.67,625.901 1003.23,613.88 1003.79,616.321 1004.35,621.989 1004.91,608.683 1005.46,657.459 1006.02,641.28 1006.58,628.352 1007.14,629.396 1007.7,647.692 1008.26,618.189 1008.82,607.756 1009.38,611.433 1009.94,630.383 1010.5,635.066 1011.06,637.561 1011.62,687.692 1012.18,703.494 1012.73,706.878 1013.29,690.924 1013.85,658.876 1014.41,677.899 1014.97,663.009 1015.53,681.093 1016.09,682.328 1016.65,683.841 1017.21,686.367 1017.77,704.049 1018.33,734.517 1018.89,700.879 1019.45,701.237 1020.01,699.599 1020.56,714.024 1021.12,697.358 1021.68,711.032 1022.24,709.925 1022.8,725.269 1023.36,724.47 1023.92,740.504 1024.48,770.374 1025.04,735.501 1025.6,701.373 1026.16,701.353 1026.72,712.303 1027.28,711.033 1027.83,706.893 1028.39,705.515 1028.95,716.699 1029.51,695.288 1030.07,694.704 1030.63,692.843 1031.19,711.835 1031.75,709.379 1032.31,739.855 1032.87,723.882 1033.43,703.676 1033.99,736.575 1034.55,718.076 1035.1,698.513 1035.66,697.313 1036.22,682.941 1036.78,636.983 1037.34,655.025 1037.9,609.018 1038.46,580.774 1039.02,614.736 1039.58,619.69 1040.14,624.009 1040.7,623.549 1041.26,643.202 1041.82,647.853 1042.38,650.663 1042.93,651.642 1043.49,620.91 1044.05,641.69 1044.61,627.89 1045.17,631.212 1045.73,636.095 1046.29,623.565 1046.85,608.743 1047.41,612.394 1047.97,596.396 1048.53,633.502 1049.09,650.918 1049.65,621.768 1050.2,639.634 1050.76,642.731 1051.32,579.828 1051.88,550.476 1052.44,561.716 1053,587.096 1053.56,645.317 1054.12,681.121 1054.68,728.809 1055.24,696.376 1055.8,690.956 1056.36,656.783 1056.92,677.575 1057.48,693.051 1058.03,708.954 1058.59,694.705 1059.15,709.125 1059.71,759.566 1060.27,772.633 1060.83,770.265 1061.39,765.118 1061.95,761.834 1062.51,758.825 1063.07,741.578 1063.63,727.011 1064.19,725.809 1064.75,741.74 1065.3,720.253 1065.86,703.32 1066.42,669.776 1066.98,703.078 1067.54,735.315 1068.1,718.476 1068.66,687.248 1069.22,668.844 1069.78,655.639 1070.34,643.588 1070.9,644.79 1071.46,695.901 1072.02,727.737 1072.57,739.055 1073.13,720.609 1073.69,723.836 1074.25,707.524 1074.81,754.845 1075.37,753.588 1075.93,750.791 1076.49,746.752 1077.05,759.351 1077.61,753.921 1078.17,705.396 1078.73,701.942 1079.29,704.783 1079.85,670.47 1080.4,657.906 1080.96,659.803 1081.52,646.513 1082.08,633.792 1082.64,620.111 1083.2,623.845 1083.76,660.526 1084.32,676.521 1084.88,662.681 1085.44,661.903 1086,644.76 1086.56,695.607 1087.12,694.921 1087.67,710.668 1088.23,689.526 1088.79,652.281 1089.35,655.894 1089.91,675.269 1090.47,694.499 1091.03,712.622 1091.59,677.837 1092.15,657.52 1092.71,611.044 1093.27,631.14 1093.83,617.784 1094.39,605.354 1094.94,610.731 1095.5,632.422 1096.06,638.76 1096.62,640.846 1097.18,643.388 1097.74,659.98 1098.3,595.407 1098.86,635.888 1099.42,624.882 1099.98,609.652 1100.54,612.487 1101.1,612.311 1101.66,615.899 1102.22,600.766 1102.77,586.974 1103.33,578.286 1103.89,583.166 1104.45,602.763 1105.01,611.305 1105.57,618.144 1106.13,652.726 1106.69,670.461 1107.25,652.573 1107.81,654.792 1108.37,641.489 1108.93,674.305 1109.49,664.28 1110.04,666.854 1110.6,664.875 1111.16,684.991 1111.72,701.789 1112.28,731.308 1112.84,727.61 1113.4,723.837 1113.96,706.597 1114.52,704.23 1115.08,705.206 1115.64,702.975 1116.2,701.896 1116.76,669.953 1117.31,687.274 1117.87,700.075 1118.43,713.349 1118.99,728.157 1119.55,727.05 1120.11,721.761 1120.67,701.881 1121.23,698.9 1121.79,700.609 1122.35,715.272 1122.91,732.96 1123.47,792.781 1124.03,770.467 1124.59,752.46 1125.14,765.148 1125.7,778.039 1126.26,756.055 1126.82,780.313 1127.38,774.93 1127.94,753.104 1128.5,742.984 1129.06,774.724 1129.62,785.49 1130.18,798.697 1130.74,778.434 1131.3,789.356 1131.86,772.117 1132.41,751.068 1132.97,748.259 1133.53,773.772 1134.09,785.993 1134.65,778.83 1135.21,758.245 1135.77,752.453 1136.33,716.607 1136.89,713.784 1137.45,725.133 1138.01,707.566 1138.57,722.556 1139.13,705.713 1139.68,723.807 1140.24,675.972 1140.8,610.017 1141.36,615.475 1141.92,568.979 1142.48,575.31 1143.04,581.55 1143.6,570.629 1144.16,579.188 1144.72,586.144 1145.28,607.14 1145.84,628.023 1146.4,630.424 1146.96,618.04 1147.51,587.089 1148.07,609.357 1148.63,626.933 1149.19,647.924 1149.75,653.456 1150.31,690.419 1150.87,689.422 1151.43,705.452 1151.99,703.859 1152.55,670.539 1153.11,692.007 1153.67,686.801 1154.23,655.683 1154.78,657.777 1155.34,676.277 1155.9,664.594 1156.46,651.377 1157.02,704.665 1157.58,688.807 1158.14,689.976 1158.7,703.153 1159.26,686.234 1159.82,706.01 1160.38,687.159 1160.94,719.205 1161.5,736.595 1162.05,733.192 1162.61,731.162 1163.17,729.931 1163.73,729.168 1164.29,806.382 1164.85,782.435 1165.41,760.26 1165.97,771.618 1166.53,746.679 1167.09,742.955 1167.65,723.802 1168.21,704.112 1168.77,700.955 1169.33,698.691 1169.88,684.335 1170.44,714.309 1171,701.258 1171.56,702.679 1172.12,735.439 1172.68,686.869 1173.24,635.923 1173.8,605.86 1174.36,637.884 1174.92,636.984 1175.48,642.055 1176.04,641.453 1176.6,594.711 1177.15,578.277 1177.71,567.009 1178.27,574.229 1178.83,596.864 1179.39,585.619 1179.95,608.189 1180.51,612.451 1181.07,633.217 1181.63,636.143 1182.19,657.345 1182.75,643.79 1183.31,646.679 1183.87,647.777 1184.43,630.1 1184.98,615.103 1185.54,652.427 1186.1,653.06 1186.66,652.767 1187.22,649.685 1187.78,636.352 1188.34,622.237 1188.9,641.215 1189.46,643.78 1190.02,627.79 1190.58,648.19 1191.14,618.628 1191.7,607.466 1192.25,659.631 1192.81,643.517 1193.37,598.147 1193.93,620.73 1194.49,639.349 1195.05,607.661 1195.61,594.27 1196.17,598.594 1196.73,602.692 1197.29,636.616 1197.85,637.353 1198.41,640.626 1198.97,606.916 1199.52,626.896 1200.08,610.236 1200.64,615.831 1201.2,632.482 1201.76,654.469 1202.32,655.093 1202.88,657.309 1203.44,689.64 1204,658.935 1204.56,661.793 1205.12,648.172 1205.68,667.115 1206.24,656.807 1206.8,657.096 1207.35,675.851 1207.91,660.186 1208.47,663.886 1209.03,662.534 1209.59,667.135 1210.15,670.551 1210.71,687.124 1211.27,701.053 1211.83,718.451 1212.39,683.192 1212.95,699.252 1213.51,726.485 1214.07,724.071 1214.62,727.133 1215.18,756.363 1215.74,751.344 1216.3,716.65 1216.86,715.145 1217.42,698.534 1217.98,699.904 1218.54,669.134 1219.1,671.016 1219.66,669.015 1220.22,669.57 1220.78,669.964 1221.34,687.63 1221.89,690.72 1222.45,689.96 1223.01,688.84 1223.57,721.509 1224.13,735.953 1224.69,715.757 1225.25,702.368 1225.81,688.551 1226.37,706.35 1226.93,688.958 1227.49,674.572 1228.05,675.022 1228.61,674.726 1229.17,658.25 1229.72,692.601 1230.28,677.303 1230.84,658.673 1231.4,691.098 1231.96,723.29 1232.52,736.229 1233.08,748.574 1233.64,763.923 1234.2,759.468 1234.76,739.491 1235.32,735.347 1235.88,715.689 1236.44,730.897 1236.99,730.028 1237.55,695.599 1238.11,678.073 1238.67,680.83 1239.23,682.378 1239.79,680.506 1240.35,668.047 1240.91,637.104 1241.47,620.358 1242.03,618.079 1242.59,622.618 1243.15,675.731 1243.71,641.221 1244.26,706.767 1244.82,700.615 1245.38,732.109 1245.94,713.597 1246.5,694.268 1247.06,676.316 1247.62,708.148 1248.18,705.348 1248.74,701.619 1249.3,717.436 1249.86,729.888 1250.42,758.633 1250.98,770.33 1251.54,750.168 1252.09,731.187 1252.65,746.088 1253.21,725.995 1253.77,755.997 1254.33,765.031 1254.89,773.881 1255.45,782.348 1256.01,810.677 1256.57,774.211 1257.13,767.211 1257.69,762.237 1258.25,774.865 1258.81,785.277 1259.36,764.032 1259.92,760.627 1260.48,739.298 1261.04,769.598 1261.6,766.351 1262.16,728.669 1262.72,708.413 1263.28,673.481 1263.84,707.768 1264.4,736.206 1264.96,731.348 1265.52,729.821 1266.08,711.613 1266.63,694.009 1267.19,677.193 1267.75,711.533 1268.31,728.331 1268.87,711.376 1269.43,693.151 1269.99,692.84 1270.55,706.537 1271.11,704.472 1271.67,703.885 1272.23,720.51 1272.79,699.688 1273.35,697.43 1273.91,697.744 1274.46,711.122 1275.02,691.633 1275.58,676.325 1276.14,688.048 1276.7,699.542 1277.26,700.257 1277.82,697.296 1278.38,683.529 1278.94,697.823 1279.5,632.621 1280.06,667.088 1280.62,664.349 1281.18,667.006 1281.73,654.955 1282.29,641.022 1282.85,630.64 1283.41,567.579 1283.97,575.14 1284.53,561.241 1285.09,567.295 1285.65,592.127 1286.21,630.144 1286.77,630.684 1287.33,680.022 1287.89,661.804 1288.45,711.342 1289,724.471 1289.56,723.087 1290.12,721.86 1290.68,717.585 1291.24,714.853 1291.8,715.698 1292.36,696.218 1292.92,696.945 1293.48,662.854 1294.04,643.739 1294.6,659.949 1295.16,627.143 1295.72,632.175 1296.28,668.102 1296.83,705.206 1297.39,720.45 1297.95,738.131 1298.51,734.213 1299.07,728.572 1299.63,692.666 1300.19,695.896 1300.75,724.951 1301.31,723.225 1301.87,725.89 1302.43,738.627 1302.99,731.976 1303.55,729.92 1304.1,762.563 1304.66,760.345 1305.22,756.839 1305.78,752.482 1306.34,730.251 1306.9,727.612 1307.46,739.54 1308.02,753.547 1308.58,767.361 1309.14,792.608 1309.7,816.673 1310.26,792.779 1310.82,834.971 1311.38,830.806 1311.93,811.075 1312.49,821.399 1313.05,813.899 1313.61,789.225 1314.17,797.845 1314.73,775.761 1315.29,787.98 1315.85,766.841 1316.41,762.885 1316.97,757.288 1317.53,723.139 1318.09,719.146 1318.65,704.771 1319.2,708.278 1319.76,708.816 1320.32,688.921 1320.88,704.894 1321.44,702.158 1322,703.158 1322.56,683.12 1323.12,745.906 1323.68,740.304 1324.24,722.624 1324.8,737.955 1325.36,751.21 1325.92,729.064 1326.47,710.816 1327.03,727.516 1327.59,695.338 1328.15,708.751 1328.71,723.199 1329.27,772.911 1329.83,768.673 1330.39,749.123 1330.95,746.472 1331.51,725.605 1332.07,739.451 1332.63,753.522 1333.19,700.202 1333.75,695.808 1334.3,674.946 1334.86,706.27 1335.42,671.618 1335.98,690.362 1336.54,695.354 1337.1,678.768 1337.66,694.526 1338.22,694.711 1338.78,711.629 1339.34,697.007 1339.9,651.102 1340.46,635.621 1341.02,638.11 1341.57,652.762 1342.13,639.116 1342.69,641.306 1343.25,660.258 1343.81,644.344 1344.37,643.869 1344.93,627.725 1345.49,646.467 1346.05,662.989 1346.61,682.305 1347.17,685.608 1347.73,671.584 1348.29,655.487 1348.84,656.801 1349.4,674.738 1349.96,675.294 1350.52,677.469 1351.08,663.56 1351.64,680.363 1352.2,696.452 1352.76,728.241 1353.32,723.286 1353.88,734.241 1354.44,746.27 1355,744.027 1355.56,737.237 1356.12,747.624 1356.67,742.09 1357.23,722.611 1357.79,721.981 1358.35,736.887 1358.91,732.53 1359.47,745.815 1360.03,744.49 1360.59,756.073 1361.15,767.467 1361.71,764.917 1362.27,746.381 1362.83,693.5 1363.39,695.782 1363.94,708.657 1364.5,692.551 1365.06,690.533 1365.62,691.797 1366.18,674.96 1366.74,661.226 1367.3,677.942 1367.86,662.122 1368.42,696.258 1368.98,708.932 1369.54,726.531 1370.1,741.447 1370.66,739.528 1371.21,721.088 1371.77,714.727 1372.33,729.726 1372.89,744.859 1373.45,739.793 1374.01,744.438 1374.57,756.948 1375.13,740.175 1375.69,707.675 1376.25,721.414 1376.81,671.896 1377.37,683.951 1377.93,683.551 1378.49,681.274 1379.04,647.187 1379.6,628.899 1380.16,597.052 1380.72,601.443 1381.28,587.427 1381.84,575.447 1382.4,579.658 1382.96,618.488 1383.52,605.472 1384.08,627.631 1384.64,599.212 1385.2,587.929 1385.76,544.614 1386.31,585.934 1386.87,575.667 1387.43,612.873 1387.99,619.739 1388.55,675.556 1389.11,678.01 1389.67,677.727 1390.23,676.435 1390.79,692.514 1391.35,693.284 1391.91,660.389 1392.47,628.862 1393.03,648.767 1393.58,616.923 1394.14,605.577 1394.7,593.969 1395.26,563.732 1395.82,587.733 1396.38,577.77 1396.94,599.669 1397.5,607.394 1398.06,628.761 1398.62,615.561 1399.18,613.735 1399.74,649.858 1400.3,700.03 1400.86,682.802 1401.41,681.465 1401.97,697.653 1402.53,665.787 1403.09,698.649 1403.65,682.217 1404.21,701.183 1404.77,685.413 1405.33,698.319 1405.89,731.584 1406.45,758.067 1407.01,754.576 1407.57,769.001 1408.13,798.902 1408.68,777.065 1409.24,775.298 1409.8,789.846 1410.36,753.994 1410.92,751.092 1411.48,717.992 1412.04,719.704 1412.6,716.257 1413.16,730.918 1413.72,692.281 1414.28,705.085 1414.84,688.416 1415.4,719.306 1415.95,701.491 1416.51,714.918 1417.07,696.254 1417.63,727.686 1418.19,708.998 1418.75,690.841 1419.31,659.123 1419.87,644.261 1420.43,647.548 1420.99,648.845 1421.55,684.436 1422.11,669.83 1422.67,671.017 1423.23,625.104 1423.78,610.108 1424.34,581.454 1424.9,575.58 1425.46,517.718 1426.02,513.439 1426.58,505.053 1427.14,495.896 1427.7,504.657 1428.26,530.05 1428.82,554.452 1429.38,561.056 1429.94,569.182 1430.5,574.565 1431.05,585.079 1431.61,593.761 1432.17,565.089 1432.73,571.671 1433.29,612.694 1433.85,645.365 1434.41,649.088 1434.97,651.348 1435.53,648.512 1436.09,667.347 1436.65,701.76 1437.21,684.971 1437.77,705.964 1438.33,705.604 1438.88,752.037 1439.44,749.76 1440,698.512 1440.56,697.378 1441.12,695.325 1441.68,695.754 1442.24,708.536 1442.8,708.155 1443.36,723.264 1443.92,718.603 1444.48,749.586 1445.04,744.049 1445.6,725.062 1446.15,707.7 1446.71,703.775 1447.27,701.389 1447.83,682.337 1448.39,699.752 1448.95,665.224 1449.51,667.18 1450.07,698.83 1450.63,719.419 1451.19,668.633 1451.75,682.511 1452.31,696.831 1452.87,677.873 1453.42,724.86 1453.98,742.126 1454.54,753.421 1455.1,754.838 1455.66,719.552 1456.22,720.633 1456.78,732.513 1457.34,731.078 1457.9,694.196 1458.46,710.689 1459.02,659.697 1459.58,609.366 1460.14,611.221 1460.7,615.091 1461.25,601.589 1461.81,589.874 1462.37,607.927 1462.93,622.707 1463.49,609.91 1464.05,609.984 1464.61,583.778 1465.17,589.624 1465.73,613.996 1466.29,646.238 1466.85,677.621 1467.41,665.053 1467.97,664.696 1468.52,681.939 1469.08,682.077 1469.64,650.949 1470.2,654.022 1470.76,673.549 1471.32,674.63 1471.88,676.355 1472.44,678.006 1473,680.173 1473.56,666.172 1474.12,668.741 1474.68,669.868 1475.24,685.923 1475.79,668.183 1476.35,637.754 1476.91,608.919 1477.47,614.221 1478.03,620.066 1478.59,642.757 1479.15,663.653 1479.71,617.711 1480.27,623.137 1480.83,626.098 1481.39,613.422 1481.95,631.399 1482.51,618.668 1483.07,637.825 1483.62,640.354 1484.18,595.306 1484.74,614.207 1485.3,614.475 1485.86,602.573 1486.42,590.437 1486.98,596.937 1487.54,615.499 1488.1,622.523 1488.66,629.039 1489.22,666.506 1489.78,672.437 1490.34,658.765 1490.89,661.32 1491.45,663.03 1492.01,664.457 1492.57,676.32 1493.13,663.86 1493.69,666.252 1494.25,698.762 1494.81,696.16 1495.37,694.001 1495.93,678.363 1496.49,693.232 1497.05,691.914 1497.61,709.281 1498.16,690.941 1498.72,687.633 1499.28,685.992 1499.84,691.666 1500.4,690.361 1500.96,705.263 1501.52,703.365 1502.08,689.272 1502.64,674.783 1503.2,628.027 1503.76,628.988 1504.32,644.665 1504.88,597.461 1505.44,622.022 1505.99,627.943 1506.55,616.574 1507.11,623.485 1507.67,643.299 1508.23,631.682 1508.79,618.96 1509.35,607.008 1509.91,594.941 1510.47,631.975 1511.03,636.842 1511.59,654.422 1512.15,670.311 1512.71,659.431 1513.26,695.441 1513.82,675.632 1514.38,660.615 1514.94,699.259 1515.5,681.409 1516.06,666.906 1516.62,657.286 1517.18,642.779 1517.74,659.931 1518.3,692.872 1518.86,756.281 1519.42,754.913 1519.98,684.947 1520.53,703.121 1521.09,720.186 1521.65,698.24 1522.21,733.648 1522.77,715.487 1523.33,726.054 1523.89,743.016 1524.45,710.262 1525.01,757.587 1525.57,752.641 1526.13,731.606 1526.69,664.354 1527.25,664.27 1527.81,666.38 1528.36,695.88 1528.92,694.141 1529.48,678.797 1530.04,660.85 1530.6,657.823 1531.16,625.766 1531.72,644.006 1532.28,677.639 1532.84,662.373 1533.4,663.257 1533.96,680.972 1534.52,663.351 1535.08,694.897 1535.63,663.174 1536.19,679.379 1536.75,646.277 1537.31,684.186 1537.87,685.556 1538.43,721.103 1538.99,753.309 1539.55,749.422 1540.11,745.484 1540.67,725.761 1541.23,720.146 1541.79,721.515 1542.35,749.631 1542.9,734.57 1543.46,716.236 1544.02,715.044 1544.58,713.567 1545.14,762.88 1545.7,743.013 1546.26,752.519 1546.82,764.501 1547.38,744.949 1547.94,725.47 1548.5,706.519 1549.06,689.446 1549.62,687.214 1550.18,702.296 1550.73,702.138 1551.29,732.241 1551.85,717.085 1552.41,717.432 1552.97,745.795 1553.53,808.79 1554.09,800.932 1554.65,813.092 1555.21,770.73 1555.77,764.565 1556.33,722.334 1556.89,720.7 1557.45,735.578 1558,732.311 1558.56,711.118 1559.12,726.241 1559.68,692.421 1560.24,741.667 1560.8,735.554 1561.36,750.126 1561.92,746.427 1562.48,727.564 1563.04,758.085 1563.6,771.186 1564.16,733.446 1564.72,729.219 1565.28,707.747 1565.83,690.986 1566.39,641.298 1566.95,676.032 1567.51,693.516 1568.07,660.128 1568.63,694.227 1569.19,649.421 1569.75,696.831 1570.31,680.081 1570.87,631.689 1571.43,651.985 1571.99,716.817 1572.55,714.053 1573.1,726.758 1573.66,755.297 1574.22,732.887 1574.78,758.7 1575.34,753.202 1575.9,749.661 1576.46,746.171 1577.02,742.292 1577.58,724.325 1578.14,722.465 1578.7,704.103 1579.26,721.107 1579.82,732.959 1580.37,729.743 1580.93,740.048 1581.49,753.601 1582.05,732.813 1582.61,746.407 1583.17,725.478 1583.73,704.519 1584.29,717.21 1584.85,732.38 1585.41,729.345 1585.97,695.892 1586.53,694.336 1587.09,709.75 1587.65,722.914 1588.2,725.491 1588.76,726.419 1589.32,725.326 1589.88,721.367 1590.44,704.396 1591,653.267 1591.56,639.568 1592.12,622.27 1592.68,656.959 1593.24,641.352 1593.8,674.847 1594.36,692.722 1594.92,724.766 1595.47,705.409 1596.03,703.497 1596.59,716.485 1597.15,712.325 1597.71,743.026 1598.27,742.136 1598.83,772.621 1599.39,750.907 1599.95,729.292 1600.51,711.33 1601.07,723.344 1601.63,722.227 1602.19,720.244 1602.74,717.135 1603.3,685.274 1603.86,702.182 1604.42,715.935 1604.98,729.556 1605.54,743.612 1606.1,711.823 1606.66,726.354 1607.22,690.943 1607.78,677.394 1608.34,662.231 1608.9,661.457 1609.46,646.592 1610.02,669.675 1610.57,673.54 1611.13,673.605 1611.69,693.143 1612.25,677.045 1612.81,676.379 1613.37,678.55 1613.93,679.567 1614.49,679.185 1615.05,695.215 1615.61,729.568 1616.17,728.418 1616.73,708.855 1617.29,691.828 1617.84,687.528 1618.4,705.222 1618.96,704.272 1619.52,704.409 1620.08,703.947 1620.64,733.186 1621.2,715.181 1621.76,709.945 1622.32,720.563 1622.88,704.581 1623.44,734.647 1624,733.473 1624.56,749.405 1625.11,759.071 1625.67,754.041 1626.23,733.698 1626.79,731.18 1627.35,776.063 1627.91,754.657 1628.47,719.145 1629.03,702.091 1629.59,748.693 1630.15,730.944 1630.71,693.28 1631.27,661.799 1631.83,629.871 1632.39,647.584 1632.94,618.52 1633.5,602.591 1634.06,606.379 1634.62,595.451 1635.18,562.27 1635.74,549.349 1636.3,552.456 1636.86,573.967 1637.42,564.157 1637.98,583.699 1638.54,588.757 1639.1,558.169 1639.66,548.044 1640.21,570.047 1640.77,560.821 1641.33,585.285 1641.89,608.223 1642.45,594.858 1643.01,630.686 1643.57,600.961 1644.13,604.59 1644.69,590.803 1645.25,613.673 1645.81,584.033 1646.37,622.858 1646.93,641.717 1647.48,629.692 1648.04,629.273 1648.6,664.473 1649.16,649.859 1649.72,668.435 1650.28,669.508 1650.84,670.894 1651.4,675.178 1651.96,709.013 1652.52,695.654 1653.08,697.388 1653.64,661.515 1654.2,694.791 1654.76,691.188 1655.31,738.34 1655.87,750.906 1656.43,763.852 1656.99,728.081 1657.55,707.113 1658.11,740.331 1658.67,720.051 1659.23,715.692 1659.79,715.781 1660.35,763.321 1660.91,774.902 1661.47,804.478 1662.03,799.725 1662.58,812.797 1663.14,819.54 1663.7,767.264 1664.26,793.312 1664.82,755.575 1665.38,769.729 1665.94,768.504 1666.5,778.862 1667.06,780.751 1667.62,743.405 1668.18,741.056 1668.74,785.094 1669.3,812.894 1669.85,790.798 1670.41,804.172 1670.97,751.599 1671.53,747.18 1672.09,744.06 1672.65,722.357 1673.21,704.94 1673.77,703.164 1674.33,733.345 1674.89,746.644 1675.45,756.968 1676.01,767.482 1676.57,698.024 1677.13,697.166 1677.68,699.086 1678.24,714.393 1678.8,709.491 1679.36,721.172 1679.92,720.685 1680.48,687.032 1681.04,691.78 1681.6,676.587 1682.16,660.642 1682.72,662.113 1683.28,664.046 1683.84,634.961 1684.4,620.731 1684.95,625.314 1685.51,612.711 1686.07,581.908 1686.63,602.601 1687.19,608.312 1687.75,645.801 1688.31,628.445 1688.87,631.47 1689.43,635.568 1689.99,654.947 1690.55,623.358 1691.11,642.619 1691.67,628.291 1692.23,662.352 1692.78,645.255 1693.34,632.554 1693.9,664.752 1694.46,665.57 1695.02,633.321 1695.58,654.395 1696.14,624.816 1696.7,644.901 1697.26,647.009 1697.82,615.575 1698.38,589.637 1698.94,610.557 1699.5,614.721 1700.05,583.756 1700.61,605.062 1701.17,605.603 1701.73,593.491 1702.29,587.037 1702.85,576.53 1703.41,600.61 1703.97,608.405 1704.53,628.558 1705.09,644.169 1705.65,681.033 1706.21,665.676 1706.77,682.464 1707.32,683.829 1707.88,701.055 1708.44,715.837 1709,701.093 1709.56,672.029 1710.12,686.878 1710.68,685.128 1711.24,748.732 1711.8,776.391 1712.36,740.267 1712.92,720.302 1713.48,721.516 1714.04,739.546 1714.6,754.215 1715.15,746.9 1715.71,712.069 1716.27,713.63 1716.83,731.386 1717.39,743.826 1717.95,720.65 1718.51,734.878 1719.07,765.765 1719.63,794.584 1720.19,806.446 1720.75,800.659 1721.31,760.625 1721.87,720.847 1722.42,736.295 1722.98,733.773 1723.54,734.213 1724.1,698.235 1724.66,696.702 1725.22,680.55 1725.78,698.262 1726.34,713.331 1726.9,723.019 1727.46,736.517 1728.02,702.331 1728.58,701.96 1729.14,702.724 1729.69,667.898 1730.25,669.973 1730.81,665.514 1731.37,631.585 1731.93,638.508 1732.49,658.796 1733.05,593.329 1733.61,598.281 1734.17,620.754 1734.73,669.774 1735.29,658.81 1735.85,646.761 1736.41,618.168 1736.97,592.205 1737.52,613.493 1738.08,633.332 1738.64,666.231 1739.2,699.456 1739.76,712.319 1740.32,715.313 1740.88,683.029 1741.44,680.263 1742,682.268 1742.56,745.204 1743.12,709.493 1743.68,712.243 1744.24,743.975 1744.79,738.74 1745.35,739.284 1745.91,799.032 1746.47,764.124 1747.03,757.425 1747.59,767.296 1748.15,745.407 1748.71,744.451 1749.27,755.34 1749.83,733.584 1750.39,747.739 1750.95,714.016 1751.51,693.569 1752.06,675.969 1752.62,704.398 1753.18,719.864 1753.74,733.492 1754.3,794.484 1754.86,770.386 1755.42,749.518 1755.98,743.331 1756.54,753.765 1757.1,752.375 1757.66,683.726 1758.22,650.157 1758.78,631.168 1759.34,621.626 1759.89,625.426 1760.45,591.649 1761.01,597.138 1761.57,602.488 1762.13,608.957 1762.69,646.601 1763.25,649.48 1763.81,682.772 1764.37,664.15 1764.93,617.423 1765.49,636.24 1766.05,657.413 1766.61,659.044 1767.16,691.424 1767.72,692.559 1768.28,676.706 1768.84,693.32 1769.4,691.646 1769.96,692.828 1770.52,691.52 1771.08,662.837 1771.64,648.471 1772.2,666.518 1772.76,680.193 1773.32,659.997 1773.88,663.723 1774.43,666.471 1774.99,669.25 1775.55,653.975 1776.11,676.555 1776.67,692.89 1777.23,657.758 1777.79,689.569 1778.35,640.822 1778.91,676.162 1779.47,663.645 1780.03,661.387 1780.59,663.168 1781.15,684.159 1781.71,669.612 1782.26,666.924 1782.82,648.429 1783.38,649.516 1783.94,615.765 1784.5,601.608 1785.06,602.495 1785.62,640.909 1786.18,628.459 1786.74,586.05 1787.3,559.42 1787.86,550.765 1788.42,557.717 1788.98,565.961 1789.53,572.422 1790.09,644.681 1790.65,678.433 1791.21,660.178 1791.77,728.237 1792.33,699.091 1792.89,711.297 1793.45,691.525 1794.01,692.894 1794.57,692.328 1795.13,675.328 1795.69,676.839 1796.25,660.107 1796.8,641.753 1797.36,643.529 1797.92,614.662 1798.48,617.055 1799.04,619.376 1799.6,639.78 1800.16,639.893 1800.72,642.828 1801.28,629.964 1801.84,665.384 1802.4,650.532 1802.96,667.535 1803.52,683.358 1804.08,663.088 1804.63,680.031 1805.19,663.298 1805.75,661.087 1806.31,664.041 1806.87,652.722 1807.43,669.021 1807.99,700.448 1808.55,716.44 1809.11,713.199 1809.67,741.902 1810.23,724.026 1810.79,726.907 1811.35,740.436 1811.9,723.665 1812.46,707.213 1813.02,706.296 1813.58,704.316 1814.14,705.676 1814.7,686.438 1815.26,685.789 1815.82,700.948 1816.38,684.027 1816.94,653.472 1817.5,687.254 1818.06,656.63 1818.62,655.925 1819.18,641.391 1819.73,615.702 1820.29,600.437 1820.85,617.12 1821.41,639.047 1821.97,626.691 1822.53,629.169 1823.09,627.101 1823.65,613.343 1824.21,602.508 1824.77,560.126 1825.33,600.1 1825.89,621.184 1826.45,624.976 1827,631.939 1827.56,603.83 1828.12,607.567 1828.68,614.792 1829.24,615.507 1829.8,649.958 1830.36,652.24 1830.92,635.891 1831.48,624.814 1832.04,625.892 1832.6,613.309 1833.16,617.309 1833.72,589.51 1834.27,593.693 1834.83,583.857 1835.39,592.496 1835.95,612.606 1836.51,665.819 1837.07,615.901 1837.63,654.71 1838.19,659.924 \"/>\n<path clip-path=\"url(#clip823)\" d=\"M720.247 687.514 L720.806 687.514 L721.365 687.514 L721.924 687.514 L722.484 687.514 L723.043 687.514 L723.602 687.514 L724.161 687.514 L724.721 687.514 L725.28 687.514 L725.839 687.514 L726.398 687.514 L726.958 687.514 L727.517 687.514 L728.076 687.514 L728.635 687.514 L729.195 687.514 L729.754 687.514 L730.313 687.514 L730.872 687.514 L731.432 687.514 L731.991 687.514 L732.55 687.514 L733.109 687.514 L733.669 687.514 L734.228 687.514 L734.787 687.514 L735.346 687.514 L735.906 687.514 L736.465 687.514 L737.024 687.514 L737.583 687.514 L738.143 687.514 L738.702 687.514 L739.261 687.514 L739.82 687.514 L740.38 687.514 L740.939 687.514 L741.498 687.514 L742.057 687.514 L742.617 687.514 L743.176 687.514 L743.735 687.514 L744.294 687.514 L744.854 687.514 L745.413 687.514 L745.972 687.514 L746.531 687.514 L747.091 687.514 L747.65 687.514 L748.209 687.514 L748.768 687.514 L749.328 687.514 L749.887 687.514 L750.446 687.514 L751.005 687.514 L751.565 687.514 L752.124 687.514 L752.683 687.514 L753.242 687.514 L753.802 687.514 L754.361 687.514 L754.92 687.514 L755.479 687.514 L756.039 687.514 L756.598 687.514 L757.157 687.514 L757.716 687.514 L758.276 687.514 L758.835 687.514 L759.394 687.514 L759.953 687.514 L760.513 687.514 L761.072 687.514 L761.631 687.514 L762.19 687.514 L762.75 687.514 L763.309 687.514 L763.868 687.514 L764.427 687.514 L764.987 687.514 L765.546 687.514 L766.105 687.514 L766.664 687.514 L767.224 687.514 L767.783 687.514 L768.342 687.514 L768.901 687.514 L769.461 687.514 L770.02 687.514 L770.579 687.514 L771.138 687.514 L771.698 687.514 L772.257 687.514 L772.816 687.514 L773.375 687.514 L773.935 687.514 L774.494 687.514 L775.053 687.514 L775.612 687.514 L776.172 687.514 L776.731 687.514 L777.29 687.514 L777.849 687.514 L778.409 687.514 L778.968 687.514 L779.527 687.514 L780.086 687.514 L780.646 687.514 L781.205 687.514 L781.764 687.514 L782.323 687.514 L782.883 687.514 L783.442 687.514 L784.001 687.514 L784.56 687.514 L785.12 687.514 L785.679 687.514 L786.238 687.514 L786.797 687.514 L787.357 687.514 L787.916 687.514 L788.475 687.514 L789.034 687.514 L789.594 687.514 L790.153 687.514 L790.712 687.514 L791.271 687.514 L791.831 687.514 L792.39 687.514 L792.949 687.514 L793.508 687.514 L794.068 687.514 L794.627 687.514 L795.186 687.514 L795.745 687.514 L796.305 687.514 L796.864 687.514 L797.423 687.514 L797.982 687.514 L798.542 687.514 L799.101 687.514 L799.66 687.514 L800.219 687.514 L800.779 687.514 L801.338 687.514 L801.897 687.514 L802.456 687.514 L803.016 687.514 L803.575 687.514 L804.134 687.514 L804.693 687.514 L805.253 687.514 L805.812 687.514 L806.371 687.514 L806.931 687.514 L807.49 687.514 L808.049 687.514 L808.608 687.514 L809.168 687.514 L809.727 687.514 L810.286 687.514 L810.845 687.514 L811.405 687.514 L811.964 687.514 L812.523 687.514 L813.082 687.514 L813.642 687.514 L814.201 687.514 L814.76 687.514 L815.319 687.514 L815.879 687.514 L816.438 687.514 L816.997 687.514 L817.556 687.514 L818.116 687.514 L818.675 687.514 L819.234 687.514 L819.793 687.514 L820.353 687.514 L820.912 687.514 L821.471 687.514 L822.03 687.514 L822.59 687.514 L823.149 687.514 L823.708 687.514 L824.267 687.514 L824.827 687.514 L825.386 687.514 L825.945 687.514 L826.504 687.514 L827.064 687.514 L827.623 687.514 L828.182 687.514 L828.741 687.514 L829.301 687.514 L829.86 687.514 L830.419 687.514 L830.978 687.514 L831.538 687.514 L832.097 687.514 L832.656 687.514 L833.215 687.514 L833.775 687.514 L834.334 687.514 L834.893 687.514 L835.452 687.514 L836.012 687.514 L836.571 687.514 L837.13 687.514 L837.689 687.514 L838.249 687.514 L838.808 687.514 L839.367 687.514 L839.926 687.514 L840.486 687.514 L841.045 687.514 L841.604 687.514 L842.163 687.514 L842.723 687.514 L843.282 687.514 L843.841 687.514 L844.4 687.514 L844.96 687.514 L845.519 687.514 L846.078 687.514 L846.637 687.514 L847.197 687.514 L847.756 687.514 L848.315 687.514 L848.874 687.514 L849.434 687.514 L849.993 687.514 L850.552 687.514 L851.111 687.514 L851.671 687.514 L852.23 687.514 L852.789 687.514 L853.348 687.514 L853.908 687.514 L854.467 687.514 L855.026 687.514 L855.585 687.514 L856.145 687.514 L856.704 687.514 L857.263 687.514 L857.822 687.514 L858.382 687.514 L858.941 687.514 L859.5 687.514 L860.059 687.514 L860.619 687.514 L861.178 687.514 L861.737 687.514 L862.296 687.514 L862.856 687.514 L863.415 687.514 L863.974 687.514 L864.533 687.514 L865.093 687.514 L865.652 687.514 L866.211 687.514 L866.77 687.514 L867.33 687.514 L867.889 687.514 L868.448 687.514 L869.007 687.514 L869.567 687.514 L870.126 687.514 L870.685 687.514 L871.244 687.514 L871.804 687.514 L872.363 687.514 L872.922 687.514 L873.481 687.514 L874.041 687.514 L874.6 687.514 L875.159 687.514 L875.718 687.514 L876.278 687.514 L876.837 687.514 L877.396 687.514 L877.955 687.514 L878.515 687.514 L879.074 687.514 L879.633 687.514 L880.192 687.514 L880.752 687.514 L881.311 687.514 L881.87 687.514 L882.429 687.514 L882.989 687.514 L883.548 687.514 L884.107 687.514 L884.666 687.514 L885.226 687.514 L885.785 687.514 L886.344 687.514 L886.903 687.514 L887.463 687.514 L888.022 687.514 L888.581 687.514 L889.14 687.514 L889.7 687.514 L890.259 687.514 L890.818 687.514 L891.377 687.514 L891.937 687.514 L892.496 687.514 L893.055 687.514 L893.614 687.514 L894.174 687.514 L894.733 687.514 L895.292 687.514 L895.851 687.514 L896.411 687.514 L896.97 687.514 L897.529 687.514 L898.088 687.514 L898.648 687.514 L899.207 687.514 L899.766 687.514 L900.325 687.514 L900.885 687.514 L901.444 687.514 L902.003 687.514 L902.562 687.514 L903.122 687.514 L903.681 687.514 L904.24 687.514 L904.799 687.514 L905.359 687.514 L905.918 687.514 L906.477 687.514 L907.036 687.514 L907.596 687.514 L908.155 687.514 L908.714 687.514 L909.273 687.514 L909.833 687.514 L910.392 687.514 L910.951 687.514 L911.51 687.514 L912.07 687.514 L912.629 687.514 L913.188 687.514 L913.747 687.514 L914.307 687.514 L914.866 687.514 L915.425 687.514 L915.984 687.514 L916.544 687.514 L917.103 687.514 L917.662 687.514 L918.221 687.514 L918.781 687.514 L919.34 687.514 L919.899 687.514 L920.458 687.514 L921.018 687.514 L921.577 687.514 L922.136 687.514 L922.695 687.514 L923.255 687.514 L923.814 687.514 L924.373 687.514 L924.932 687.514 L925.492 687.514 L926.051 687.514 L926.61 687.514 L927.169 687.514 L927.729 687.514 L928.288 687.514 L928.847 687.514 L929.406 687.514 L929.966 687.514 L930.525 687.514 L931.084 687.514 L931.644 687.514 L932.203 687.514 L932.762 687.514 L933.321 687.514 L933.881 687.514 L934.44 687.514 L934.999 687.514 L935.558 687.514 L936.118 687.514 L936.677 687.514 L937.236 687.514 L937.795 687.514 L938.355 687.514 L938.914 687.514 L939.473 687.514 L940.032 687.514 L940.592 687.514 L941.151 687.514 L941.71 687.514 L942.269 687.514 L942.829 687.514 L943.388 687.514 L943.947 687.514 L944.506 687.514 L945.066 687.514 L945.625 687.514 L946.184 687.514 L946.743 687.514 L947.303 687.514 L947.862 687.514 L948.421 687.514 L948.98 687.514 L949.54 687.514 L950.099 687.514 L950.658 687.514 L951.217 687.514 L951.777 687.514 L952.336 687.514 L952.895 687.514 L953.454 687.514 L954.014 687.514 L954.573 687.514 L955.132 687.514 L955.691 687.514 L956.251 687.514 L956.81 687.514 L957.369 687.514 L957.928 687.514 L958.488 687.514 L959.047 687.514 L959.606 687.514 L960.165 687.514 L960.725 687.514 L961.284 687.514 L961.843 687.514 L962.402 687.514 L962.962 687.514 L963.521 687.514 L964.08 687.514 L964.639 687.514 L965.199 687.514 L965.758 687.514 L966.317 687.514 L966.876 687.514 L967.436 687.514 L967.995 687.514 L968.554 687.514 L969.113 687.514 L969.673 687.514 L970.232 687.514 L970.791 687.514 L971.35 687.514 L971.91 687.514 L972.469 687.514 L973.028 687.514 L973.587 687.514 L974.147 687.514 L974.706 687.514 L975.265 687.514 L975.824 687.514 L976.384 687.514 L976.943 687.514 L977.502 687.514 L978.061 687.514 L978.621 687.514 L979.18 687.514 L979.739 687.514 L980.298 687.514 L980.858 687.514 L981.417 687.514 L981.976 687.514 L982.535 687.514 L983.095 687.514 L983.654 687.514 L984.213 687.514 L984.772 687.514 L985.332 687.514 L985.891 687.514 L986.45 687.514 L987.009 687.514 L987.569 687.514 L988.128 687.514 L988.687 687.514 L989.246 687.514 L989.806 687.514 L990.365 687.514 L990.924 687.514 L991.483 687.514 L992.043 687.514 L992.602 687.514 L993.161 687.514 L993.72 687.514 L994.28 687.514 L994.839 687.514 L995.398 687.514 L995.957 687.514 L996.517 687.514 L997.076 687.514 L997.635 687.514 L998.194 687.514 L998.754 687.514 L999.313 687.514 L999.872 687.514 L1000.43 687.514 L1000.99 687.514 L1001.55 687.514 L1002.11 687.514 L1002.67 687.514 L1003.23 687.514 L1003.79 687.514 L1004.35 687.514 L1004.91 687.514 L1005.46 687.514 L1006.02 687.514 L1006.58 687.514 L1007.14 687.514 L1007.7 687.514 L1008.26 687.514 L1008.82 687.514 L1009.38 687.514 L1009.94 687.514 L1010.5 687.514 L1011.06 687.514 L1011.62 687.514 L1012.18 687.514 L1012.73 687.514 L1013.29 687.514 L1013.85 687.514 L1014.41 687.514 L1014.97 687.514 L1015.53 687.514 L1016.09 687.514 L1016.65 687.514 L1017.21 687.514 L1017.77 687.514 L1018.33 687.514 L1018.89 687.514 L1019.45 687.514 L1020.01 687.514 L1020.56 687.514 L1021.12 687.514 L1021.68 687.514 L1022.24 687.514 L1022.8 687.514 L1023.36 687.514 L1023.92 687.514 L1024.48 687.514 L1025.04 687.514 L1025.6 687.514 L1026.16 687.514 L1026.72 687.514 L1027.28 687.514 L1027.83 687.514 L1028.39 687.514 L1028.95 687.514 L1029.51 687.514 L1030.07 687.514 L1030.63 687.514 L1031.19 687.514 L1031.75 687.514 L1032.31 687.514 L1032.87 687.514 L1033.43 687.514 L1033.99 687.514 L1034.55 687.514 L1035.1 687.514 L1035.66 687.514 L1036.22 687.514 L1036.78 687.514 L1037.34 687.514 L1037.9 687.514 L1038.46 687.514 L1039.02 687.514 L1039.58 687.514 L1040.14 687.514 L1040.7 687.514 L1041.26 687.514 L1041.82 687.514 L1042.38 687.514 L1042.93 687.514 L1043.49 687.514 L1044.05 687.514 L1044.61 687.514 L1045.17 687.514 L1045.73 687.514 L1046.29 687.514 L1046.85 687.514 L1047.41 687.514 L1047.97 687.514 L1048.53 687.514 L1049.09 687.514 L1049.65 687.514 L1050.2 687.514 L1050.76 687.514 L1051.32 687.514 L1051.88 687.514 L1052.44 687.514 L1053 687.514 L1053.56 687.514 L1054.12 687.514 L1054.68 687.514 L1055.24 687.514 L1055.8 687.514 L1056.36 687.514 L1056.92 687.514 L1057.48 687.514 L1058.03 687.514 L1058.59 687.514 L1059.15 687.514 L1059.71 687.514 L1060.27 687.514 L1060.83 687.514 L1061.39 687.514 L1061.95 687.514 L1062.51 687.514 L1063.07 687.514 L1063.63 687.514 L1064.19 687.514 L1064.75 687.514 L1065.3 687.514 L1065.86 687.514 L1066.42 687.514 L1066.98 687.514 L1067.54 687.514 L1068.1 687.514 L1068.66 687.514 L1069.22 687.514 L1069.78 687.514 L1070.34 687.514 L1070.9 687.514 L1071.46 687.514 L1072.02 687.514 L1072.57 687.514 L1073.13 687.514 L1073.69 687.514 L1074.25 687.514 L1074.81 687.514 L1075.37 687.514 L1075.93 687.514 L1076.49 687.514 L1077.05 687.514 L1077.61 687.514 L1078.17 687.514 L1078.73 687.514 L1079.29 687.514 L1079.85 687.514 L1080.4 687.514 L1080.96 687.514 L1081.52 687.514 L1082.08 687.514 L1082.64 687.514 L1083.2 687.514 L1083.76 687.514 L1084.32 687.514 L1084.88 687.514 L1085.44 687.514 L1086 687.514 L1086.56 687.514 L1087.12 687.514 L1087.67 687.514 L1088.23 687.514 L1088.79 687.514 L1089.35 687.514 L1089.91 687.514 L1090.47 687.514 L1091.03 687.514 L1091.59 687.514 L1092.15 687.514 L1092.71 687.514 L1093.27 687.514 L1093.83 687.514 L1094.39 687.514 L1094.94 687.514 L1095.5 687.514 L1096.06 687.514 L1096.62 687.514 L1097.18 687.514 L1097.74 687.514 L1098.3 687.514 L1098.86 687.514 L1099.42 687.514 L1099.98 687.514 L1100.54 687.514 L1101.1 687.514 L1101.66 687.514 L1102.22 687.514 L1102.77 687.514 L1103.33 687.514 L1103.89 687.514 L1104.45 687.514 L1105.01 687.514 L1105.57 687.514 L1106.13 687.514 L1106.69 687.514 L1107.25 687.514 L1107.81 687.514 L1108.37 687.514 L1108.93 687.514 L1109.49 687.514 L1110.04 687.514 L1110.6 687.514 L1111.16 687.514 L1111.72 687.514 L1112.28 687.514 L1112.84 687.514 L1113.4 687.514 L1113.96 687.514 L1114.52 687.514 L1115.08 687.514 L1115.64 687.514 L1116.2 687.514 L1116.76 687.514 L1117.31 687.514 L1117.87 687.514 L1118.43 687.514 L1118.99 687.514 L1119.55 687.514 L1120.11 687.514 L1120.67 687.514 L1121.23 687.514 L1121.79 687.514 L1122.35 687.514 L1122.91 687.514 L1123.47 687.514 L1124.03 687.514 L1124.59 687.514 L1125.14 687.514 L1125.7 687.514 L1126.26 687.514 L1126.82 687.514 L1127.38 687.514 L1127.94 687.514 L1128.5 687.514 L1129.06 687.514 L1129.62 687.514 L1130.18 687.514 L1130.74 687.514 L1131.3 687.514 L1131.86 687.514 L1132.41 687.514 L1132.97 687.514 L1133.53 687.514 L1134.09 687.514 L1134.65 687.514 L1135.21 687.514 L1135.77 687.514 L1136.33 687.514 L1136.89 687.514 L1137.45 687.514 L1138.01 687.514 L1138.57 687.514 L1139.13 687.514 L1139.68 687.514 L1140.24 687.514 L1140.8 687.514 L1141.36 687.514 L1141.92 687.514 L1142.48 687.514 L1143.04 687.514 L1143.6 687.514 L1144.16 687.514 L1144.72 687.514 L1145.28 687.514 L1145.84 687.514 L1146.4 687.514 L1146.96 687.514 L1147.51 687.514 L1148.07 687.514 L1148.63 687.514 L1149.19 687.514 L1149.75 687.514 L1150.31 687.514 L1150.87 687.514 L1151.43 687.514 L1151.99 687.514 L1152.55 687.514 L1153.11 687.514 L1153.67 687.514 L1154.23 687.514 L1154.78 687.514 L1155.34 687.514 L1155.9 687.514 L1156.46 687.514 L1157.02 687.514 L1157.58 687.514 L1158.14 687.514 L1158.7 687.514 L1159.26 687.514 L1159.82 687.514 L1160.38 687.514 L1160.94 687.514 L1161.5 687.514 L1162.05 687.514 L1162.61 687.514 L1163.17 687.514 L1163.73 687.514 L1164.29 687.514 L1164.85 687.514 L1165.41 687.514 L1165.97 687.514 L1166.53 687.514 L1167.09 687.514 L1167.65 687.514 L1168.21 687.514 L1168.77 687.514 L1169.33 687.514 L1169.88 687.514 L1170.44 687.514 L1171 687.514 L1171.56 687.514 L1172.12 687.514 L1172.68 687.514 L1173.24 687.514 L1173.8 687.514 L1174.36 687.514 L1174.92 687.514 L1175.48 687.514 L1176.04 687.514 L1176.6 687.514 L1177.15 687.514 L1177.71 687.514 L1178.27 687.514 L1178.83 687.514 L1179.39 687.514 L1179.95 687.514 L1180.51 687.514 L1181.07 687.514 L1181.63 687.514 L1182.19 687.514 L1182.75 687.514 L1183.31 687.514 L1183.87 687.514 L1184.43 687.514 L1184.98 687.514 L1185.54 687.514 L1186.1 687.514 L1186.66 687.514 L1187.22 687.514 L1187.78 687.514 L1188.34 687.514 L1188.9 687.514 L1189.46 687.514 L1190.02 687.514 L1190.58 687.514 L1191.14 687.514 L1191.7 687.514 L1192.25 687.514 L1192.81 687.514 L1193.37 687.514 L1193.93 687.514 L1194.49 687.514 L1195.05 687.514 L1195.61 687.514 L1196.17 687.514 L1196.73 687.514 L1197.29 687.514 L1197.85 687.514 L1198.41 687.514 L1198.97 687.514 L1199.52 687.514 L1200.08 687.514 L1200.64 687.514 L1201.2 687.514 L1201.76 687.514 L1202.32 687.514 L1202.88 687.514 L1203.44 687.514 L1204 687.514 L1204.56 687.514 L1205.12 687.514 L1205.68 687.514 L1206.24 687.514 L1206.8 687.514 L1207.35 687.514 L1207.91 687.514 L1208.47 687.514 L1209.03 687.514 L1209.59 687.514 L1210.15 687.514 L1210.71 687.514 L1211.27 687.514 L1211.83 687.514 L1212.39 687.514 L1212.95 687.514 L1213.51 687.514 L1214.07 687.514 L1214.62 687.514 L1215.18 687.514 L1215.74 687.514 L1216.3 687.514 L1216.86 687.514 L1217.42 687.514 L1217.98 687.514 L1218.54 687.514 L1219.1 687.514 L1219.66 687.514 L1220.22 687.514 L1220.78 687.514 L1221.34 687.514 L1221.89 687.514 L1222.45 687.514 L1223.01 687.514 L1223.57 687.514 L1224.13 687.514 L1224.69 687.514 L1225.25 687.514 L1225.81 687.514 L1226.37 687.514 L1226.93 687.514 L1227.49 687.514 L1228.05 687.514 L1228.61 687.514 L1229.17 687.514 L1229.72 687.514 L1230.28 687.514 L1230.84 687.514 L1231.4 687.514 L1231.96 687.514 L1232.52 687.514 L1233.08 687.514 L1233.64 687.514 L1234.2 687.514 L1234.76 687.514 L1235.32 687.514 L1235.88 687.514 L1236.44 687.514 L1236.99 687.514 L1237.55 687.514 L1238.11 687.514 L1238.67 687.514 L1239.23 687.514 L1239.79 687.514 L1240.35 687.514 L1240.91 687.514 L1241.47 687.514 L1242.03 687.514 L1242.59 687.514 L1243.15 687.514 L1243.71 687.514 L1244.26 687.514 L1244.82 687.514 L1245.38 687.514 L1245.94 687.514 L1246.5 687.514 L1247.06 687.514 L1247.62 687.514 L1248.18 687.514 L1248.74 687.514 L1249.3 687.514 L1249.86 687.514 L1250.42 687.514 L1250.98 687.514 L1251.54 687.514 L1252.09 687.514 L1252.65 687.514 L1253.21 687.514 L1253.77 687.514 L1254.33 687.514 L1254.89 687.514 L1255.45 687.514 L1256.01 687.514 L1256.57 687.514 L1257.13 687.514 L1257.69 687.514 L1258.25 687.514 L1258.81 687.514 L1259.36 687.514 L1259.92 687.514 L1260.48 687.514 L1261.04 687.514 L1261.6 687.514 L1262.16 687.514 L1262.72 687.514 L1263.28 687.514 L1263.84 687.514 L1264.4 687.514 L1264.96 687.514 L1265.52 687.514 L1266.08 687.514 L1266.63 687.514 L1267.19 687.514 L1267.75 687.514 L1268.31 687.514 L1268.87 687.514 L1269.43 687.514 L1269.99 687.514 L1270.55 687.514 L1271.11 687.514 L1271.67 687.514 L1272.23 687.514 L1272.79 687.514 L1273.35 687.514 L1273.91 687.514 L1274.46 687.514 L1275.02 687.514 L1275.58 687.514 L1276.14 687.514 L1276.7 687.514 L1277.26 687.514 L1277.82 687.514 L1278.38 687.514 L1278.94 687.514 L1279.5 687.514 L1280.06 687.514 L1280.62 687.514 L1281.18 687.514 L1281.73 687.514 L1282.29 687.514 L1282.85 687.514 L1283.41 687.514 L1283.97 687.514 L1284.53 687.514 L1285.09 687.514 L1285.65 687.514 L1286.21 687.514 L1286.77 687.514 L1287.33 687.514 L1287.89 687.514 L1288.45 687.514 L1289 687.514 L1289.56 687.514 L1290.12 687.514 L1290.68 687.514 L1291.24 687.514 L1291.8 687.514 L1292.36 687.514 L1292.92 687.514 L1293.48 687.514 L1294.04 687.514 L1294.6 687.514 L1295.16 687.514 L1295.72 687.514 L1296.28 687.514 L1296.83 687.514 L1297.39 687.514 L1297.95 687.514 L1298.51 687.514 L1299.07 687.514 L1299.63 687.514 L1300.19 687.514 L1300.75 687.514 L1301.31 687.514 L1301.87 687.514 L1302.43 687.514 L1302.99 687.514 L1303.55 687.514 L1304.1 687.514 L1304.66 687.514 L1305.22 687.514 L1305.78 687.514 L1306.34 687.514 L1306.9 687.514 L1307.46 687.514 L1308.02 687.514 L1308.58 687.514 L1309.14 687.514 L1309.7 687.514 L1310.26 687.514 L1310.82 687.514 L1311.38 687.514 L1311.93 687.514 L1312.49 687.514 L1313.05 687.514 L1313.61 687.514 L1314.17 687.514 L1314.73 687.514 L1315.29 687.514 L1315.85 687.514 L1316.41 687.514 L1316.97 687.514 L1317.53 687.514 L1318.09 687.514 L1318.65 687.514 L1319.2 687.514 L1319.76 687.514 L1320.32 687.514 L1320.88 687.514 L1321.44 687.514 L1322 687.514 L1322.56 687.514 L1323.12 687.514 L1323.68 687.514 L1324.24 687.514 L1324.8 687.514 L1325.36 687.514 L1325.92 687.514 L1326.47 687.514 L1327.03 687.514 L1327.59 687.514 L1328.15 687.514 L1328.71 687.514 L1329.27 687.514 L1329.83 687.514 L1330.39 687.514 L1330.95 687.514 L1331.51 687.514 L1332.07 687.514 L1332.63 687.514 L1333.19 687.514 L1333.75 687.514 L1334.3 687.514 L1334.86 687.514 L1335.42 687.514 L1335.98 687.514 L1336.54 687.514 L1337.1 687.514 L1337.66 687.514 L1338.22 687.514 L1338.78 687.514 L1339.34 687.514 L1339.9 687.514 L1340.46 687.514 L1341.02 687.514 L1341.57 687.514 L1342.13 687.514 L1342.69 687.514 L1343.25 687.514 L1343.81 687.514 L1344.37 687.514 L1344.93 687.514 L1345.49 687.514 L1346.05 687.514 L1346.61 687.514 L1347.17 687.514 L1347.73 687.514 L1348.29 687.514 L1348.84 687.514 L1349.4 687.514 L1349.96 687.514 L1350.52 687.514 L1351.08 687.514 L1351.64 687.514 L1352.2 687.514 L1352.76 687.514 L1353.32 687.514 L1353.88 687.514 L1354.44 687.514 L1355 687.514 L1355.56 687.514 L1356.12 687.514 L1356.67 687.514 L1357.23 687.514 L1357.79 687.514 L1358.35 687.514 L1358.91 687.514 L1359.47 687.514 L1360.03 687.514 L1360.59 687.514 L1361.15 687.514 L1361.71 687.514 L1362.27 687.514 L1362.83 687.514 L1363.39 687.514 L1363.94 687.514 L1364.5 687.514 L1365.06 687.514 L1365.62 687.514 L1366.18 687.514 L1366.74 687.514 L1367.3 687.514 L1367.86 687.514 L1368.42 687.514 L1368.98 687.514 L1369.54 687.514 L1370.1 687.514 L1370.66 687.514 L1371.21 687.514 L1371.77 687.514 L1372.33 687.514 L1372.89 687.514 L1373.45 687.514 L1374.01 687.514 L1374.57 687.514 L1375.13 687.514 L1375.69 687.514 L1376.25 687.514 L1376.81 687.514 L1377.37 687.514 L1377.93 687.514 L1378.49 687.514 L1379.04 687.514 L1379.6 687.514 L1380.16 687.514 L1380.72 687.514 L1381.28 687.514 L1381.84 687.514 L1382.4 687.514 L1382.96 687.514 L1383.52 687.514 L1384.08 687.514 L1384.64 687.514 L1385.2 687.514 L1385.76 687.514 L1386.31 687.514 L1386.87 687.514 L1387.43 687.514 L1387.99 687.514 L1388.55 687.514 L1389.11 687.514 L1389.67 687.514 L1390.23 687.514 L1390.79 687.514 L1391.35 687.514 L1391.91 687.514 L1392.47 687.514 L1393.03 687.514 L1393.58 687.514 L1394.14 687.514 L1394.7 687.514 L1395.26 687.514 L1395.82 687.514 L1396.38 687.514 L1396.94 687.514 L1397.5 687.514 L1398.06 687.514 L1398.62 687.514 L1399.18 687.514 L1399.74 687.514 L1400.3 687.514 L1400.86 687.514 L1401.41 687.514 L1401.97 687.514 L1402.53 687.514 L1403.09 687.514 L1403.65 687.514 L1404.21 687.514 L1404.77 687.514 L1405.33 687.514 L1405.89 687.514 L1406.45 687.514 L1407.01 687.514 L1407.57 687.514 L1408.13 687.514 L1408.68 687.514 L1409.24 687.514 L1409.8 687.514 L1410.36 687.514 L1410.92 687.514 L1411.48 687.514 L1412.04 687.514 L1412.6 687.514 L1413.16 687.514 L1413.72 687.514 L1414.28 687.514 L1414.84 687.514 L1415.4 687.514 L1415.95 687.514 L1416.51 687.514 L1417.07 687.514 L1417.63 687.514 L1418.19 687.514 L1418.75 687.514 L1419.31 687.514 L1419.87 687.514 L1420.43 687.514 L1420.99 687.514 L1421.55 687.514 L1422.11 687.514 L1422.67 687.514 L1423.23 687.514 L1423.78 687.514 L1424.34 687.514 L1424.9 687.514 L1425.46 687.514 L1426.02 687.514 L1426.58 687.514 L1427.14 687.514 L1427.7 687.514 L1428.26 687.514 L1428.82 687.514 L1429.38 687.514 L1429.94 687.514 L1430.5 687.514 L1431.05 687.514 L1431.61 687.514 L1432.17 687.514 L1432.73 687.514 L1433.29 687.514 L1433.85 687.514 L1434.41 687.514 L1434.97 687.514 L1435.53 687.514 L1436.09 687.514 L1436.65 687.514 L1437.21 687.514 L1437.77 687.514 L1438.33 687.514 L1438.88 687.514 L1439.44 687.514 L1440 687.514 L1440.56 687.514 L1441.12 687.514 L1441.68 687.514 L1442.24 687.514 L1442.8 687.514 L1443.36 687.514 L1443.92 687.514 L1444.48 687.514 L1445.04 687.514 L1445.6 687.514 L1446.15 687.514 L1446.71 687.514 L1447.27 687.514 L1447.83 687.514 L1448.39 687.514 L1448.95 687.514 L1449.51 687.514 L1450.07 687.514 L1450.63 687.514 L1451.19 687.514 L1451.75 687.514 L1452.31 687.514 L1452.87 687.514 L1453.42 687.514 L1453.98 687.514 L1454.54 687.514 L1455.1 687.514 L1455.66 687.514 L1456.22 687.514 L1456.78 687.514 L1457.34 687.514 L1457.9 687.514 L1458.46 687.514 L1459.02 687.514 L1459.58 687.514 L1460.14 687.514 L1460.7 687.514 L1461.25 687.514 L1461.81 687.514 L1462.37 687.514 L1462.93 687.514 L1463.49 687.514 L1464.05 687.514 L1464.61 687.514 L1465.17 687.514 L1465.73 687.514 L1466.29 687.514 L1466.85 687.514 L1467.41 687.514 L1467.97 687.514 L1468.52 687.514 L1469.08 687.514 L1469.64 687.514 L1470.2 687.514 L1470.76 687.514 L1471.32 687.514 L1471.88 687.514 L1472.44 687.514 L1473 687.514 L1473.56 687.514 L1474.12 687.514 L1474.68 687.514 L1475.24 687.514 L1475.79 687.514 L1476.35 687.514 L1476.91 687.514 L1477.47 687.514 L1478.03 687.514 L1478.59 687.514 L1479.15 687.514 L1479.71 687.514 L1480.27 687.514 L1480.83 687.514 L1481.39 687.514 L1481.95 687.514 L1482.51 687.514 L1483.07 687.514 L1483.62 687.514 L1484.18 687.514 L1484.74 687.514 L1485.3 687.514 L1485.86 687.514 L1486.42 687.514 L1486.98 687.514 L1487.54 687.514 L1488.1 687.514 L1488.66 687.514 L1489.22 687.514 L1489.78 687.514 L1490.34 687.514 L1490.89 687.514 L1491.45 687.514 L1492.01 687.514 L1492.57 687.514 L1493.13 687.514 L1493.69 687.514 L1494.25 687.514 L1494.81 687.514 L1495.37 687.514 L1495.93 687.514 L1496.49 687.514 L1497.05 687.514 L1497.61 687.514 L1498.16 687.514 L1498.72 687.514 L1499.28 687.514 L1499.84 687.514 L1500.4 687.514 L1500.96 687.514 L1501.52 687.514 L1502.08 687.514 L1502.64 687.514 L1503.2 687.514 L1503.76 687.514 L1504.32 687.514 L1504.88 687.514 L1505.44 687.514 L1505.99 687.514 L1506.55 687.514 L1507.11 687.514 L1507.67 687.514 L1508.23 687.514 L1508.79 687.514 L1509.35 687.514 L1509.91 687.514 L1510.47 687.514 L1511.03 687.514 L1511.59 687.514 L1512.15 687.514 L1512.71 687.514 L1513.26 687.514 L1513.82 687.514 L1514.38 687.514 L1514.94 687.514 L1515.5 687.514 L1516.06 687.514 L1516.62 687.514 L1517.18 687.514 L1517.74 687.514 L1518.3 687.514 L1518.86 687.514 L1519.42 687.514 L1519.98 687.514 L1520.53 687.514 L1521.09 687.514 L1521.65 687.514 L1522.21 687.514 L1522.77 687.514 L1523.33 687.514 L1523.89 687.514 L1524.45 687.514 L1525.01 687.514 L1525.57 687.514 L1526.13 687.514 L1526.69 687.514 L1527.25 687.514 L1527.81 687.514 L1528.36 687.514 L1528.92 687.514 L1529.48 687.514 L1530.04 687.514 L1530.6 687.514 L1531.16 687.514 L1531.72 687.514 L1532.28 687.514 L1532.84 687.514 L1533.4 687.514 L1533.96 687.514 L1534.52 687.514 L1535.08 687.514 L1535.63 687.514 L1536.19 687.514 L1536.75 687.514 L1537.31 687.514 L1537.87 687.514 L1538.43 687.514 L1538.99 687.514 L1539.55 687.514 L1540.11 687.514 L1540.67 687.514 L1541.23 687.514 L1541.79 687.514 L1542.35 687.514 L1542.9 687.514 L1543.46 687.514 L1544.02 687.514 L1544.58 687.514 L1545.14 687.514 L1545.7 687.514 L1546.26 687.514 L1546.82 687.514 L1547.38 687.514 L1547.94 687.514 L1548.5 687.514 L1549.06 687.514 L1549.62 687.514 L1550.18 687.514 L1550.73 687.514 L1551.29 687.514 L1551.85 687.514 L1552.41 687.514 L1552.97 687.514 L1553.53 687.514 L1554.09 687.514 L1554.65 687.514 L1555.21 687.514 L1555.77 687.514 L1556.33 687.514 L1556.89 687.514 L1557.45 687.514 L1558 687.514 L1558.56 687.514 L1559.12 687.514 L1559.68 687.514 L1560.24 687.514 L1560.8 687.514 L1561.36 687.514 L1561.92 687.514 L1562.48 687.514 L1563.04 687.514 L1563.6 687.514 L1564.16 687.514 L1564.72 687.514 L1565.28 687.514 L1565.83 687.514 L1566.39 687.514 L1566.95 687.514 L1567.51 687.514 L1568.07 687.514 L1568.63 687.514 L1569.19 687.514 L1569.75 687.514 L1570.31 687.514 L1570.87 687.514 L1571.43 687.514 L1571.99 687.514 L1572.55 687.514 L1573.1 687.514 L1573.66 687.514 L1574.22 687.514 L1574.78 687.514 L1575.34 687.514 L1575.9 687.514 L1576.46 687.514 L1577.02 687.514 L1577.58 687.514 L1578.14 687.514 L1578.7 687.514 L1579.26 687.514 L1579.82 687.514 L1580.37 687.514 L1580.93 687.514 L1581.49 687.514 L1582.05 687.514 L1582.61 687.514 L1583.17 687.514 L1583.73 687.514 L1584.29 687.514 L1584.85 687.514 L1585.41 687.514 L1585.97 687.514 L1586.53 687.514 L1587.09 687.514 L1587.65 687.514 L1588.2 687.514 L1588.76 687.514 L1589.32 687.514 L1589.88 687.514 L1590.44 687.514 L1591 687.514 L1591.56 687.514 L1592.12 687.514 L1592.68 687.514 L1593.24 687.514 L1593.8 687.514 L1594.36 687.514 L1594.92 687.514 L1595.47 687.514 L1596.03 687.514 L1596.59 687.514 L1597.15 687.514 L1597.71 687.514 L1598.27 687.514 L1598.83 687.514 L1599.39 687.514 L1599.95 687.514 L1600.51 687.514 L1601.07 687.514 L1601.63 687.514 L1602.19 687.514 L1602.74 687.514 L1603.3 687.514 L1603.86 687.514 L1604.42 687.514 L1604.98 687.514 L1605.54 687.514 L1606.1 687.514 L1606.66 687.514 L1607.22 687.514 L1607.78 687.514 L1608.34 687.514 L1608.9 687.514 L1609.46 687.514 L1610.02 687.514 L1610.57 687.514 L1611.13 687.514 L1611.69 687.514 L1612.25 687.514 L1612.81 687.514 L1613.37 687.514 L1613.93 687.514 L1614.49 687.514 L1615.05 687.514 L1615.61 687.514 L1616.17 687.514 L1616.73 687.514 L1617.29 687.514 L1617.84 687.514 L1618.4 687.514 L1618.96 687.514 L1619.52 687.514 L1620.08 687.514 L1620.64 687.514 L1621.2 687.514 L1621.76 687.514 L1622.32 687.514 L1622.88 687.514 L1623.44 687.514 L1624 687.514 L1624.56 687.514 L1625.11 687.514 L1625.67 687.514 L1626.23 687.514 L1626.79 687.514 L1627.35 687.514 L1627.91 687.514 L1628.47 687.514 L1629.03 687.514 L1629.59 687.514 L1630.15 687.514 L1630.71 687.514 L1631.27 687.514 L1631.83 687.514 L1632.39 687.514 L1632.94 687.514 L1633.5 687.514 L1634.06 687.514 L1634.62 687.514 L1635.18 687.514 L1635.74 687.514 L1636.3 687.514 L1636.86 687.514 L1637.42 687.514 L1637.98 687.514 L1638.54 687.514 L1639.1 687.514 L1639.66 687.514 L1640.21 687.514 L1640.77 687.514 L1641.33 687.514 L1641.89 687.514 L1642.45 687.514 L1643.01 687.514 L1643.57 687.514 L1644.13 687.514 L1644.69 687.514 L1645.25 687.514 L1645.81 687.514 L1646.37 687.514 L1646.93 687.514 L1647.48 687.514 L1648.04 687.514 L1648.6 687.514 L1649.16 687.514 L1649.72 687.514 L1650.28 687.514 L1650.84 687.514 L1651.4 687.514 L1651.96 687.514 L1652.52 687.514 L1653.08 687.514 L1653.64 687.514 L1654.2 687.514 L1654.76 687.514 L1655.31 687.514 L1655.87 687.514 L1656.43 687.514 L1656.99 687.514 L1657.55 687.514 L1658.11 687.514 L1658.67 687.514 L1659.23 687.514 L1659.79 687.514 L1660.35 687.514 L1660.91 687.514 L1661.47 687.514 L1662.03 687.514 L1662.58 687.514 L1663.14 687.514 L1663.7 687.514 L1664.26 687.514 L1664.82 687.514 L1665.38 687.514 L1665.94 687.514 L1666.5 687.514 L1667.06 687.514 L1667.62 687.514 L1668.18 687.514 L1668.74 687.514 L1669.3 687.514 L1669.85 687.514 L1670.41 687.514 L1670.97 687.514 L1671.53 687.514 L1672.09 687.514 L1672.65 687.514 L1673.21 687.514 L1673.77 687.514 L1674.33 687.514 L1674.89 687.514 L1675.45 687.514 L1676.01 687.514 L1676.57 687.514 L1677.13 687.514 L1677.68 687.514 L1678.24 687.514 L1678.8 687.514 L1679.36 687.514 L1679.92 687.514 L1680.48 687.514 L1681.04 687.514 L1681.6 687.514 L1682.16 687.514 L1682.72 687.514 L1683.28 687.514 L1683.84 687.514 L1684.4 687.514 L1684.95 687.514 L1685.51 687.514 L1686.07 687.514 L1686.63 687.514 L1687.19 687.514 L1687.75 687.514 L1688.31 687.514 L1688.87 687.514 L1689.43 687.514 L1689.99 687.514 L1690.55 687.514 L1691.11 687.514 L1691.67 687.514 L1692.23 687.514 L1692.78 687.514 L1693.34 687.514 L1693.9 687.514 L1694.46 687.514 L1695.02 687.514 L1695.58 687.514 L1696.14 687.514 L1696.7 687.514 L1697.26 687.514 L1697.82 687.514 L1698.38 687.514 L1698.94 687.514 L1699.5 687.514 L1700.05 687.514 L1700.61 687.514 L1701.17 687.514 L1701.73 687.514 L1702.29 687.514 L1702.85 687.514 L1703.41 687.514 L1703.97 687.514 L1704.53 687.514 L1705.09 687.514 L1705.65 687.514 L1706.21 687.514 L1706.77 687.514 L1707.32 687.514 L1707.88 687.514 L1708.44 687.514 L1709 687.514 L1709.56 687.514 L1710.12 687.514 L1710.68 687.514 L1711.24 687.514 L1711.8 687.514 L1712.36 687.514 L1712.92 687.514 L1713.48 687.514 L1714.04 687.514 L1714.6 687.514 L1715.15 687.514 L1715.71 687.514 L1716.27 687.514 L1716.83 687.514 L1717.39 687.514 L1717.95 687.514 L1718.51 687.514 L1719.07 687.514 L1719.63 687.514 L1720.19 687.514 L1720.75 687.514 L1721.31 687.514 L1721.87 687.514 L1722.42 687.514 L1722.98 687.514 L1723.54 687.514 L1724.1 687.514 L1724.66 687.514 L1725.22 687.514 L1725.78 687.514 L1726.34 687.514 L1726.9 687.514 L1727.46 687.514 L1728.02 687.514 L1728.58 687.514 L1729.14 687.514 L1729.69 687.514 L1730.25 687.514 L1730.81 687.514 L1731.37 687.514 L1731.93 687.514 L1732.49 687.514 L1733.05 687.514 L1733.61 687.514 L1734.17 687.514 L1734.73 687.514 L1735.29 687.514 L1735.85 687.514 L1736.41 687.514 L1736.97 687.514 L1737.52 687.514 L1738.08 687.514 L1738.64 687.514 L1739.2 687.514 L1739.76 687.514 L1740.32 687.514 L1740.88 687.514 L1741.44 687.514 L1742 687.514 L1742.56 687.514 L1743.12 687.514 L1743.68 687.514 L1744.24 687.514 L1744.79 687.514 L1745.35 687.514 L1745.91 687.514 L1746.47 687.514 L1747.03 687.514 L1747.59 687.514 L1748.15 687.514 L1748.71 687.514 L1749.27 687.514 L1749.83 687.514 L1750.39 687.514 L1750.95 687.514 L1751.51 687.514 L1752.06 687.514 L1752.62 687.514 L1753.18 687.514 L1753.74 687.514 L1754.3 687.514 L1754.86 687.514 L1755.42 687.514 L1755.98 687.514 L1756.54 687.514 L1757.1 687.514 L1757.66 687.514 L1758.22 687.514 L1758.78 687.514 L1759.34 687.514 L1759.89 687.514 L1760.45 687.514 L1761.01 687.514 L1761.57 687.514 L1762.13 687.514 L1762.69 687.514 L1763.25 687.514 L1763.81 687.514 L1764.37 687.514 L1764.93 687.514 L1765.49 687.514 L1766.05 687.514 L1766.61 687.514 L1767.16 687.514 L1767.72 687.514 L1768.28 687.514 L1768.84 687.514 L1769.4 687.514 L1769.96 687.514 L1770.52 687.514 L1771.08 687.514 L1771.64 687.514 L1772.2 687.514 L1772.76 687.514 L1773.32 687.514 L1773.88 687.514 L1774.43 687.514 L1774.99 687.514 L1775.55 687.514 L1776.11 687.514 L1776.67 687.514 L1777.23 687.514 L1777.79 687.514 L1778.35 687.514 L1778.91 687.514 L1779.47 687.514 L1780.03 687.514 L1780.59 687.514 L1781.15 687.514 L1781.71 687.514 L1782.26 687.514 L1782.82 687.514 L1783.38 687.514 L1783.94 687.514 L1784.5 687.514 L1785.06 687.514 L1785.62 687.514 L1786.18 687.514 L1786.74 687.514 L1787.3 687.514 L1787.86 687.514 L1788.42 687.514 L1788.98 687.514 L1789.53 687.514 L1790.09 687.514 L1790.65 687.514 L1791.21 687.514 L1791.77 687.514 L1792.33 687.514 L1792.89 687.514 L1793.45 687.514 L1794.01 687.514 L1794.57 687.514 L1795.13 687.514 L1795.69 687.514 L1796.25 687.514 L1796.8 687.514 L1797.36 687.514 L1797.92 687.514 L1798.48 687.514 L1799.04 687.514 L1799.6 687.514 L1800.16 687.514 L1800.72 687.514 L1801.28 687.514 L1801.84 687.514 L1802.4 687.514 L1802.96 687.514 L1803.52 687.514 L1804.08 687.514 L1804.63 687.514 L1805.19 687.514 L1805.75 687.514 L1806.31 687.514 L1806.87 687.514 L1807.43 687.514 L1807.99 687.514 L1808.55 687.514 L1809.11 687.514 L1809.67 687.514 L1810.23 687.514 L1810.79 687.514 L1811.35 687.514 L1811.9 687.514 L1812.46 687.514 L1813.02 687.514 L1813.58 687.514 L1814.14 687.514 L1814.7 687.514 L1815.26 687.514 L1815.82 687.514 L1816.38 687.514 L1816.94 687.514 L1817.5 687.514 L1818.06 687.514 L1818.62 687.514 L1819.18 687.514 L1819.73 687.514 L1820.29 687.514 L1820.85 687.514 L1821.41 687.514 L1821.97 687.514 L1822.53 687.514 L1823.09 687.514 L1823.65 687.514 L1824.21 687.514 L1824.77 687.514 L1825.33 687.514 L1825.89 687.514 L1826.45 687.514 L1827 687.514 L1827.56 687.514 L1828.12 687.514 L1828.68 687.514 L1829.24 687.514 L1829.8 687.514 L1830.36 687.514 L1830.92 687.514 L1831.48 687.514 L1832.04 687.514 L1832.6 687.514 L1833.16 687.514 L1833.72 687.514 L1834.27 687.514 L1834.83 687.514 L1835.39 687.514 L1835.95 687.514 L1836.51 687.514 L1837.07 687.514 L1837.63 687.514 L1838.19 687.514 L1838.19 677.959 L1837.63 677.959 L1837.07 677.959 L1836.51 677.959 L1835.95 677.959 L1835.39 677.959 L1834.83 677.959 L1834.27 677.959 L1833.72 677.959 L1833.16 677.959 L1832.6 677.959 L1832.04 677.959 L1831.48 677.959 L1830.92 677.959 L1830.36 677.959 L1829.8 677.959 L1829.24 677.959 L1828.68 677.959 L1828.12 677.959 L1827.56 677.959 L1827 677.959 L1826.45 677.959 L1825.89 677.959 L1825.33 677.959 L1824.77 677.959 L1824.21 677.959 L1823.65 677.959 L1823.09 677.959 L1822.53 677.959 L1821.97 677.959 L1821.41 677.959 L1820.85 677.959 L1820.29 677.959 L1819.73 677.959 L1819.18 677.959 L1818.62 677.959 L1818.06 677.959 L1817.5 677.959 L1816.94 677.959 L1816.38 677.959 L1815.82 677.959 L1815.26 677.959 L1814.7 677.959 L1814.14 677.959 L1813.58 677.959 L1813.02 677.959 L1812.46 677.959 L1811.9 677.959 L1811.35 677.959 L1810.79 677.959 L1810.23 677.959 L1809.67 677.959 L1809.11 677.959 L1808.55 677.959 L1807.99 677.959 L1807.43 677.959 L1806.87 677.959 L1806.31 677.959 L1805.75 677.959 L1805.19 677.959 L1804.63 677.959 L1804.08 677.959 L1803.52 677.959 L1802.96 677.959 L1802.4 677.959 L1801.84 677.959 L1801.28 677.959 L1800.72 677.959 L1800.16 677.959 L1799.6 677.959 L1799.04 677.959 L1798.48 677.959 L1797.92 677.959 L1797.36 677.959 L1796.8 677.959 L1796.25 677.959 L1795.69 677.959 L1795.13 677.959 L1794.57 677.959 L1794.01 677.959 L1793.45 677.959 L1792.89 677.959 L1792.33 677.959 L1791.77 677.959 L1791.21 677.959 L1790.65 677.959 L1790.09 677.959 L1789.53 677.959 L1788.98 677.959 L1788.42 677.959 L1787.86 677.959 L1787.3 677.959 L1786.74 677.959 L1786.18 677.959 L1785.62 677.959 L1785.06 677.959 L1784.5 677.959 L1783.94 677.959 L1783.38 677.959 L1782.82 677.959 L1782.26 677.959 L1781.71 677.959 L1781.15 677.959 L1780.59 677.959 L1780.03 677.959 L1779.47 677.959 L1778.91 677.959 L1778.35 677.959 L1777.79 677.959 L1777.23 677.959 L1776.67 677.959 L1776.11 677.959 L1775.55 677.959 L1774.99 677.959 L1774.43 677.959 L1773.88 677.959 L1773.32 677.959 L1772.76 677.959 L1772.2 677.959 L1771.64 677.959 L1771.08 677.959 L1770.52 677.959 L1769.96 677.959 L1769.4 677.959 L1768.84 677.959 L1768.28 677.959 L1767.72 677.959 L1767.16 677.959 L1766.61 677.959 L1766.05 677.959 L1765.49 677.959 L1764.93 677.959 L1764.37 677.959 L1763.81 677.959 L1763.25 677.959 L1762.69 677.959 L1762.13 677.959 L1761.57 677.959 L1761.01 677.959 L1760.45 677.959 L1759.89 677.959 L1759.34 677.959 L1758.78 677.959 L1758.22 677.959 L1757.66 677.959 L1757.1 677.959 L1756.54 677.959 L1755.98 677.959 L1755.42 677.959 L1754.86 677.959 L1754.3 677.959 L1753.74 677.959 L1753.18 677.959 L1752.62 677.959 L1752.06 677.959 L1751.51 677.959 L1750.95 677.959 L1750.39 677.959 L1749.83 677.959 L1749.27 677.959 L1748.71 677.959 L1748.15 677.959 L1747.59 677.959 L1747.03 677.959 L1746.47 677.959 L1745.91 677.959 L1745.35 677.959 L1744.79 677.959 L1744.24 677.959 L1743.68 677.959 L1743.12 677.959 L1742.56 677.959 L1742 677.959 L1741.44 677.959 L1740.88 677.959 L1740.32 677.959 L1739.76 677.959 L1739.2 677.959 L1738.64 677.959 L1738.08 677.959 L1737.52 677.959 L1736.97 677.959 L1736.41 677.959 L1735.85 677.959 L1735.29 677.959 L1734.73 677.959 L1734.17 677.959 L1733.61 677.959 L1733.05 677.959 L1732.49 677.959 L1731.93 677.959 L1731.37 677.959 L1730.81 677.959 L1730.25 677.959 L1729.69 677.959 L1729.14 677.959 L1728.58 677.959 L1728.02 677.959 L1727.46 677.959 L1726.9 677.959 L1726.34 677.959 L1725.78 677.959 L1725.22 677.959 L1724.66 677.959 L1724.1 677.959 L1723.54 677.959 L1722.98 677.959 L1722.42 677.959 L1721.87 677.959 L1721.31 677.959 L1720.75 677.959 L1720.19 677.959 L1719.63 677.959 L1719.07 677.959 L1718.51 677.959 L1717.95 677.959 L1717.39 677.959 L1716.83 677.959 L1716.27 677.959 L1715.71 677.959 L1715.15 677.959 L1714.6 677.959 L1714.04 677.959 L1713.48 677.959 L1712.92 677.959 L1712.36 677.959 L1711.8 677.959 L1711.24 677.959 L1710.68 677.959 L1710.12 677.959 L1709.56 677.959 L1709 677.959 L1708.44 677.959 L1707.88 677.959 L1707.32 677.959 L1706.77 677.959 L1706.21 677.959 L1705.65 677.959 L1705.09 677.959 L1704.53 677.959 L1703.97 677.959 L1703.41 677.959 L1702.85 677.959 L1702.29 677.959 L1701.73 677.959 L1701.17 677.959 L1700.61 677.959 L1700.05 677.959 L1699.5 677.959 L1698.94 677.959 L1698.38 677.959 L1697.82 677.959 L1697.26 677.959 L1696.7 677.959 L1696.14 677.959 L1695.58 677.959 L1695.02 677.959 L1694.46 677.959 L1693.9 677.959 L1693.34 677.959 L1692.78 677.959 L1692.23 677.959 L1691.67 677.959 L1691.11 677.959 L1690.55 677.959 L1689.99 677.959 L1689.43 677.959 L1688.87 677.959 L1688.31 677.959 L1687.75 677.959 L1687.19 677.959 L1686.63 677.959 L1686.07 677.959 L1685.51 677.959 L1684.95 677.959 L1684.4 677.959 L1683.84 677.959 L1683.28 677.959 L1682.72 677.959 L1682.16 677.959 L1681.6 677.959 L1681.04 677.959 L1680.48 677.959 L1679.92 677.959 L1679.36 677.959 L1678.8 677.959 L1678.24 677.959 L1677.68 677.959 L1677.13 677.959 L1676.57 677.959 L1676.01 677.959 L1675.45 677.959 L1674.89 677.959 L1674.33 677.959 L1673.77 677.959 L1673.21 677.959 L1672.65 677.959 L1672.09 677.959 L1671.53 677.959 L1670.97 677.959 L1670.41 677.959 L1669.85 677.959 L1669.3 677.959 L1668.74 677.959 L1668.18 677.959 L1667.62 677.959 L1667.06 677.959 L1666.5 677.959 L1665.94 677.959 L1665.38 677.959 L1664.82 677.959 L1664.26 677.959 L1663.7 677.959 L1663.14 677.959 L1662.58 677.959 L1662.03 677.959 L1661.47 677.959 L1660.91 677.959 L1660.35 677.959 L1659.79 677.959 L1659.23 677.959 L1658.67 677.959 L1658.11 677.959 L1657.55 677.959 L1656.99 677.959 L1656.43 677.959 L1655.87 677.959 L1655.31 677.959 L1654.76 677.959 L1654.2 677.959 L1653.64 677.959 L1653.08 677.959 L1652.52 677.959 L1651.96 677.959 L1651.4 677.959 L1650.84 677.959 L1650.28 677.959 L1649.72 677.959 L1649.16 677.959 L1648.6 677.959 L1648.04 677.959 L1647.48 677.959 L1646.93 677.959 L1646.37 677.959 L1645.81 677.959 L1645.25 677.959 L1644.69 677.959 L1644.13 677.959 L1643.57 677.959 L1643.01 677.959 L1642.45 677.959 L1641.89 677.959 L1641.33 677.959 L1640.77 677.959 L1640.21 677.959 L1639.66 677.959 L1639.1 677.959 L1638.54 677.959 L1637.98 677.959 L1637.42 677.959 L1636.86 677.959 L1636.3 677.959 L1635.74 677.959 L1635.18 677.959 L1634.62 677.959 L1634.06 677.959 L1633.5 677.959 L1632.94 677.959 L1632.39 677.959 L1631.83 677.959 L1631.27 677.959 L1630.71 677.959 L1630.15 677.959 L1629.59 677.959 L1629.03 677.959 L1628.47 677.959 L1627.91 677.959 L1627.35 677.959 L1626.79 677.959 L1626.23 677.959 L1625.67 677.959 L1625.11 677.959 L1624.56 677.959 L1624 677.959 L1623.44 677.959 L1622.88 677.959 L1622.32 677.959 L1621.76 677.959 L1621.2 677.959 L1620.64 677.959 L1620.08 677.959 L1619.52 677.959 L1618.96 677.959 L1618.4 677.959 L1617.84 677.959 L1617.29 677.959 L1616.73 677.959 L1616.17 677.959 L1615.61 677.959 L1615.05 677.959 L1614.49 677.959 L1613.93 677.959 L1613.37 677.959 L1612.81 677.959 L1612.25 677.959 L1611.69 677.959 L1611.13 677.959 L1610.57 677.959 L1610.02 677.959 L1609.46 677.959 L1608.9 677.959 L1608.34 677.959 L1607.78 677.959 L1607.22 677.959 L1606.66 677.959 L1606.1 677.959 L1605.54 677.959 L1604.98 677.959 L1604.42 677.959 L1603.86 677.959 L1603.3 677.959 L1602.74 677.959 L1602.19 677.959 L1601.63 677.959 L1601.07 677.959 L1600.51 677.959 L1599.95 677.959 L1599.39 677.959 L1598.83 677.959 L1598.27 677.959 L1597.71 677.959 L1597.15 677.959 L1596.59 677.959 L1596.03 677.959 L1595.47 677.959 L1594.92 677.959 L1594.36 677.959 L1593.8 677.959 L1593.24 677.959 L1592.68 677.959 L1592.12 677.959 L1591.56 677.959 L1591 677.959 L1590.44 677.959 L1589.88 677.959 L1589.32 677.959 L1588.76 677.959 L1588.2 677.959 L1587.65 677.959 L1587.09 677.959 L1586.53 677.959 L1585.97 677.959 L1585.41 677.959 L1584.85 677.959 L1584.29 677.959 L1583.73 677.959 L1583.17 677.959 L1582.61 677.959 L1582.05 677.959 L1581.49 677.959 L1580.93 677.959 L1580.37 677.959 L1579.82 677.959 L1579.26 677.959 L1578.7 677.959 L1578.14 677.959 L1577.58 677.959 L1577.02 677.959 L1576.46 677.959 L1575.9 677.959 L1575.34 677.959 L1574.78 677.959 L1574.22 677.959 L1573.66 677.959 L1573.1 677.959 L1572.55 677.959 L1571.99 677.959 L1571.43 677.959 L1570.87 677.959 L1570.31 677.959 L1569.75 677.959 L1569.19 677.959 L1568.63 677.959 L1568.07 677.959 L1567.51 677.959 L1566.95 677.959 L1566.39 677.959 L1565.83 677.959 L1565.28 677.959 L1564.72 677.959 L1564.16 677.959 L1563.6 677.959 L1563.04 677.959 L1562.48 677.959 L1561.92 677.959 L1561.36 677.959 L1560.8 677.959 L1560.24 677.959 L1559.68 677.959 L1559.12 677.959 L1558.56 677.959 L1558 677.959 L1557.45 677.959 L1556.89 677.959 L1556.33 677.959 L1555.77 677.959 L1555.21 677.959 L1554.65 677.959 L1554.09 677.959 L1553.53 677.959 L1552.97 677.959 L1552.41 677.959 L1551.85 677.959 L1551.29 677.959 L1550.73 677.959 L1550.18 677.959 L1549.62 677.959 L1549.06 677.959 L1548.5 677.959 L1547.94 677.959 L1547.38 677.959 L1546.82 677.959 L1546.26 677.959 L1545.7 677.959 L1545.14 677.959 L1544.58 677.959 L1544.02 677.959 L1543.46 677.959 L1542.9 677.959 L1542.35 677.959 L1541.79 677.959 L1541.23 677.959 L1540.67 677.959 L1540.11 677.959 L1539.55 677.959 L1538.99 677.959 L1538.43 677.959 L1537.87 677.959 L1537.31 677.959 L1536.75 677.959 L1536.19 677.959 L1535.63 677.959 L1535.08 677.959 L1534.52 677.959 L1533.96 677.959 L1533.4 677.959 L1532.84 677.959 L1532.28 677.959 L1531.72 677.959 L1531.16 677.959 L1530.6 677.959 L1530.04 677.959 L1529.48 677.959 L1528.92 677.959 L1528.36 677.959 L1527.81 677.959 L1527.25 677.959 L1526.69 677.959 L1526.13 677.959 L1525.57 677.959 L1525.01 677.959 L1524.45 677.959 L1523.89 677.959 L1523.33 677.959 L1522.77 677.959 L1522.21 677.959 L1521.65 677.959 L1521.09 677.959 L1520.53 677.959 L1519.98 677.959 L1519.42 677.959 L1518.86 677.959 L1518.3 677.959 L1517.74 677.959 L1517.18 677.959 L1516.62 677.959 L1516.06 677.959 L1515.5 677.959 L1514.94 677.959 L1514.38 677.959 L1513.82 677.959 L1513.26 677.959 L1512.71 677.959 L1512.15 677.959 L1511.59 677.959 L1511.03 677.959 L1510.47 677.959 L1509.91 677.959 L1509.35 677.959 L1508.79 677.959 L1508.23 677.959 L1507.67 677.959 L1507.11 677.959 L1506.55 677.959 L1505.99 677.959 L1505.44 677.959 L1504.88 677.959 L1504.32 677.959 L1503.76 677.959 L1503.2 677.959 L1502.64 677.959 L1502.08 677.959 L1501.52 677.959 L1500.96 677.959 L1500.4 677.959 L1499.84 677.959 L1499.28 677.959 L1498.72 677.959 L1498.16 677.959 L1497.61 677.959 L1497.05 677.959 L1496.49 677.959 L1495.93 677.959 L1495.37 677.959 L1494.81 677.959 L1494.25 677.959 L1493.69 677.959 L1493.13 677.959 L1492.57 677.959 L1492.01 677.959 L1491.45 677.959 L1490.89 677.959 L1490.34 677.959 L1489.78 677.959 L1489.22 677.959 L1488.66 677.959 L1488.1 677.959 L1487.54 677.959 L1486.98 677.959 L1486.42 677.959 L1485.86 677.959 L1485.3 677.959 L1484.74 677.959 L1484.18 677.959 L1483.62 677.959 L1483.07 677.959 L1482.51 677.959 L1481.95 677.959 L1481.39 677.959 L1480.83 677.959 L1480.27 677.959 L1479.71 677.959 L1479.15 677.959 L1478.59 677.959 L1478.03 677.959 L1477.47 677.959 L1476.91 677.959 L1476.35 677.959 L1475.79 677.959 L1475.24 677.959 L1474.68 677.959 L1474.12 677.959 L1473.56 677.959 L1473 677.959 L1472.44 677.959 L1471.88 677.959 L1471.32 677.959 L1470.76 677.959 L1470.2 677.959 L1469.64 677.959 L1469.08 677.959 L1468.52 677.959 L1467.97 677.959 L1467.41 677.959 L1466.85 677.959 L1466.29 677.959 L1465.73 677.959 L1465.17 677.959 L1464.61 677.959 L1464.05 677.959 L1463.49 677.959 L1462.93 677.959 L1462.37 677.959 L1461.81 677.959 L1461.25 677.959 L1460.7 677.959 L1460.14 677.959 L1459.58 677.959 L1459.02 677.959 L1458.46 677.959 L1457.9 677.959 L1457.34 677.959 L1456.78 677.959 L1456.22 677.959 L1455.66 677.959 L1455.1 677.959 L1454.54 677.959 L1453.98 677.959 L1453.42 677.959 L1452.87 677.959 L1452.31 677.959 L1451.75 677.959 L1451.19 677.959 L1450.63 677.959 L1450.07 677.959 L1449.51 677.959 L1448.95 677.959 L1448.39 677.959 L1447.83 677.959 L1447.27 677.959 L1446.71 677.959 L1446.15 677.959 L1445.6 677.959 L1445.04 677.959 L1444.48 677.959 L1443.92 677.959 L1443.36 677.959 L1442.8 677.959 L1442.24 677.959 L1441.68 677.959 L1441.12 677.959 L1440.56 677.959 L1440 677.959 L1439.44 677.959 L1438.88 677.959 L1438.33 677.959 L1437.77 677.959 L1437.21 677.959 L1436.65 677.959 L1436.09 677.959 L1435.53 677.959 L1434.97 677.959 L1434.41 677.959 L1433.85 677.959 L1433.29 677.959 L1432.73 677.959 L1432.17 677.959 L1431.61 677.959 L1431.05 677.959 L1430.5 677.959 L1429.94 677.959 L1429.38 677.959 L1428.82 677.959 L1428.26 677.959 L1427.7 677.959 L1427.14 677.959 L1426.58 677.959 L1426.02 677.959 L1425.46 677.959 L1424.9 677.959 L1424.34 677.959 L1423.78 677.959 L1423.23 677.959 L1422.67 677.959 L1422.11 677.959 L1421.55 677.959 L1420.99 677.959 L1420.43 677.959 L1419.87 677.959 L1419.31 677.959 L1418.75 677.959 L1418.19 677.959 L1417.63 677.959 L1417.07 677.959 L1416.51 677.959 L1415.95 677.959 L1415.4 677.959 L1414.84 677.959 L1414.28 677.959 L1413.72 677.959 L1413.16 677.959 L1412.6 677.959 L1412.04 677.959 L1411.48 677.959 L1410.92 677.959 L1410.36 677.959 L1409.8 677.959 L1409.24 677.959 L1408.68 677.959 L1408.13 677.959 L1407.57 677.959 L1407.01 677.959 L1406.45 677.959 L1405.89 677.959 L1405.33 677.959 L1404.77 677.959 L1404.21 677.959 L1403.65 677.959 L1403.09 677.959 L1402.53 677.959 L1401.97 677.959 L1401.41 677.959 L1400.86 677.959 L1400.3 677.959 L1399.74 677.959 L1399.18 677.959 L1398.62 677.959 L1398.06 677.959 L1397.5 677.959 L1396.94 677.959 L1396.38 677.959 L1395.82 677.959 L1395.26 677.959 L1394.7 677.959 L1394.14 677.959 L1393.58 677.959 L1393.03 677.959 L1392.47 677.959 L1391.91 677.959 L1391.35 677.959 L1390.79 677.959 L1390.23 677.959 L1389.67 677.959 L1389.11 677.959 L1388.55 677.959 L1387.99 677.959 L1387.43 677.959 L1386.87 677.959 L1386.31 677.959 L1385.76 677.959 L1385.2 677.959 L1384.64 677.959 L1384.08 677.959 L1383.52 677.959 L1382.96 677.959 L1382.4 677.959 L1381.84 677.959 L1381.28 677.959 L1380.72 677.959 L1380.16 677.959 L1379.6 677.959 L1379.04 677.959 L1378.49 677.959 L1377.93 677.959 L1377.37 677.959 L1376.81 677.959 L1376.25 677.959 L1375.69 677.959 L1375.13 677.959 L1374.57 677.959 L1374.01 677.959 L1373.45 677.959 L1372.89 677.959 L1372.33 677.959 L1371.77 677.959 L1371.21 677.959 L1370.66 677.959 L1370.1 677.959 L1369.54 677.959 L1368.98 677.959 L1368.42 677.959 L1367.86 677.959 L1367.3 677.959 L1366.74 677.959 L1366.18 677.959 L1365.62 677.959 L1365.06 677.959 L1364.5 677.959 L1363.94 677.959 L1363.39 677.959 L1362.83 677.959 L1362.27 677.959 L1361.71 677.959 L1361.15 677.959 L1360.59 677.959 L1360.03 677.959 L1359.47 677.959 L1358.91 677.959 L1358.35 677.959 L1357.79 677.959 L1357.23 677.959 L1356.67 677.959 L1356.12 677.959 L1355.56 677.959 L1355 677.959 L1354.44 677.959 L1353.88 677.959 L1353.32 677.959 L1352.76 677.959 L1352.2 677.959 L1351.64 677.959 L1351.08 677.959 L1350.52 677.959 L1349.96 677.959 L1349.4 677.959 L1348.84 677.959 L1348.29 677.959 L1347.73 677.959 L1347.17 677.959 L1346.61 677.959 L1346.05 677.959 L1345.49 677.959 L1344.93 677.959 L1344.37 677.959 L1343.81 677.959 L1343.25 677.959 L1342.69 677.959 L1342.13 677.959 L1341.57 677.959 L1341.02 677.959 L1340.46 677.959 L1339.9 677.959 L1339.34 677.959 L1338.78 677.959 L1338.22 677.959 L1337.66 677.959 L1337.1 677.959 L1336.54 677.959 L1335.98 677.959 L1335.42 677.959 L1334.86 677.959 L1334.3 677.959 L1333.75 677.959 L1333.19 677.959 L1332.63 677.959 L1332.07 677.959 L1331.51 677.959 L1330.95 677.959 L1330.39 677.959 L1329.83 677.959 L1329.27 677.959 L1328.71 677.959 L1328.15 677.959 L1327.59 677.959 L1327.03 677.959 L1326.47 677.959 L1325.92 677.959 L1325.36 677.959 L1324.8 677.959 L1324.24 677.959 L1323.68 677.959 L1323.12 677.959 L1322.56 677.959 L1322 677.959 L1321.44 677.959 L1320.88 677.959 L1320.32 677.959 L1319.76 677.959 L1319.2 677.959 L1318.65 677.959 L1318.09 677.959 L1317.53 677.959 L1316.97 677.959 L1316.41 677.959 L1315.85 677.959 L1315.29 677.959 L1314.73 677.959 L1314.17 677.959 L1313.61 677.959 L1313.05 677.959 L1312.49 677.959 L1311.93 677.959 L1311.38 677.959 L1310.82 677.959 L1310.26 677.959 L1309.7 677.959 L1309.14 677.959 L1308.58 677.959 L1308.02 677.959 L1307.46 677.959 L1306.9 677.959 L1306.34 677.959 L1305.78 677.959 L1305.22 677.959 L1304.66 677.959 L1304.1 677.959 L1303.55 677.959 L1302.99 677.959 L1302.43 677.959 L1301.87 677.959 L1301.31 677.959 L1300.75 677.959 L1300.19 677.959 L1299.63 677.959 L1299.07 677.959 L1298.51 677.959 L1297.95 677.959 L1297.39 677.959 L1296.83 677.959 L1296.28 677.959 L1295.72 677.959 L1295.16 677.959 L1294.6 677.959 L1294.04 677.959 L1293.48 677.959 L1292.92 677.959 L1292.36 677.959 L1291.8 677.959 L1291.24 677.959 L1290.68 677.959 L1290.12 677.959 L1289.56 677.959 L1289 677.959 L1288.45 677.959 L1287.89 677.959 L1287.33 677.959 L1286.77 677.959 L1286.21 677.959 L1285.65 677.959 L1285.09 677.959 L1284.53 677.959 L1283.97 677.959 L1283.41 677.959 L1282.85 677.959 L1282.29 677.959 L1281.73 677.959 L1281.18 677.959 L1280.62 677.959 L1280.06 677.959 L1279.5 677.959 L1278.94 677.959 L1278.38 677.959 L1277.82 677.959 L1277.26 677.959 L1276.7 677.959 L1276.14 677.959 L1275.58 677.959 L1275.02 677.959 L1274.46 677.959 L1273.91 677.959 L1273.35 677.959 L1272.79 677.959 L1272.23 677.959 L1271.67 677.959 L1271.11 677.959 L1270.55 677.959 L1269.99 677.959 L1269.43 677.959 L1268.87 677.959 L1268.31 677.959 L1267.75 677.959 L1267.19 677.959 L1266.63 677.959 L1266.08 677.959 L1265.52 677.959 L1264.96 677.959 L1264.4 677.959 L1263.84 677.959 L1263.28 677.959 L1262.72 677.959 L1262.16 677.959 L1261.6 677.959 L1261.04 677.959 L1260.48 677.959 L1259.92 677.959 L1259.36 677.959 L1258.81 677.959 L1258.25 677.959 L1257.69 677.959 L1257.13 677.959 L1256.57 677.959 L1256.01 677.959 L1255.45 677.959 L1254.89 677.959 L1254.33 677.959 L1253.77 677.959 L1253.21 677.959 L1252.65 677.959 L1252.09 677.959 L1251.54 677.959 L1250.98 677.959 L1250.42 677.959 L1249.86 677.959 L1249.3 677.959 L1248.74 677.959 L1248.18 677.959 L1247.62 677.959 L1247.06 677.959 L1246.5 677.959 L1245.94 677.959 L1245.38 677.959 L1244.82 677.959 L1244.26 677.959 L1243.71 677.959 L1243.15 677.959 L1242.59 677.959 L1242.03 677.959 L1241.47 677.959 L1240.91 677.959 L1240.35 677.959 L1239.79 677.959 L1239.23 677.959 L1238.67 677.959 L1238.11 677.959 L1237.55 677.959 L1236.99 677.959 L1236.44 677.959 L1235.88 677.959 L1235.32 677.959 L1234.76 677.959 L1234.2 677.959 L1233.64 677.959 L1233.08 677.959 L1232.52 677.959 L1231.96 677.959 L1231.4 677.959 L1230.84 677.959 L1230.28 677.959 L1229.72 677.959 L1229.17 677.959 L1228.61 677.959 L1228.05 677.959 L1227.49 677.959 L1226.93 677.959 L1226.37 677.959 L1225.81 677.959 L1225.25 677.959 L1224.69 677.959 L1224.13 677.959 L1223.57 677.959 L1223.01 677.959 L1222.45 677.959 L1221.89 677.959 L1221.34 677.959 L1220.78 677.959 L1220.22 677.959 L1219.66 677.959 L1219.1 677.959 L1218.54 677.959 L1217.98 677.959 L1217.42 677.959 L1216.86 677.959 L1216.3 677.959 L1215.74 677.959 L1215.18 677.959 L1214.62 677.959 L1214.07 677.959 L1213.51 677.959 L1212.95 677.959 L1212.39 677.959 L1211.83 677.959 L1211.27 677.959 L1210.71 677.959 L1210.15 677.959 L1209.59 677.959 L1209.03 677.959 L1208.47 677.959 L1207.91 677.959 L1207.35 677.959 L1206.8 677.959 L1206.24 677.959 L1205.68 677.959 L1205.12 677.959 L1204.56 677.959 L1204 677.959 L1203.44 677.959 L1202.88 677.959 L1202.32 677.959 L1201.76 677.959 L1201.2 677.959 L1200.64 677.959 L1200.08 677.959 L1199.52 677.959 L1198.97 677.959 L1198.41 677.959 L1197.85 677.959 L1197.29 677.959 L1196.73 677.959 L1196.17 677.959 L1195.61 677.959 L1195.05 677.959 L1194.49 677.959 L1193.93 677.959 L1193.37 677.959 L1192.81 677.959 L1192.25 677.959 L1191.7 677.959 L1191.14 677.959 L1190.58 677.959 L1190.02 677.959 L1189.46 677.959 L1188.9 677.959 L1188.34 677.959 L1187.78 677.959 L1187.22 677.959 L1186.66 677.959 L1186.1 677.959 L1185.54 677.959 L1184.98 677.959 L1184.43 677.959 L1183.87 677.959 L1183.31 677.959 L1182.75 677.959 L1182.19 677.959 L1181.63 677.959 L1181.07 677.959 L1180.51 677.959 L1179.95 677.959 L1179.39 677.959 L1178.83 677.959 L1178.27 677.959 L1177.71 677.959 L1177.15 677.959 L1176.6 677.959 L1176.04 677.959 L1175.48 677.959 L1174.92 677.959 L1174.36 677.959 L1173.8 677.959 L1173.24 677.959 L1172.68 677.959 L1172.12 677.959 L1171.56 677.959 L1171 677.959 L1170.44 677.959 L1169.88 677.959 L1169.33 677.959 L1168.77 677.959 L1168.21 677.959 L1167.65 677.959 L1167.09 677.959 L1166.53 677.959 L1165.97 677.959 L1165.41 677.959 L1164.85 677.959 L1164.29 677.959 L1163.73 677.959 L1163.17 677.959 L1162.61 677.959 L1162.05 677.959 L1161.5 677.959 L1160.94 677.959 L1160.38 677.959 L1159.82 677.959 L1159.26 677.959 L1158.7 677.959 L1158.14 677.959 L1157.58 677.959 L1157.02 677.959 L1156.46 677.959 L1155.9 677.959 L1155.34 677.959 L1154.78 677.959 L1154.23 677.959 L1153.67 677.959 L1153.11 677.959 L1152.55 677.959 L1151.99 677.959 L1151.43 677.959 L1150.87 677.959 L1150.31 677.959 L1149.75 677.959 L1149.19 677.959 L1148.63 677.959 L1148.07 677.959 L1147.51 677.959 L1146.96 677.959 L1146.4 677.959 L1145.84 677.959 L1145.28 677.959 L1144.72 677.959 L1144.16 677.959 L1143.6 677.959 L1143.04 677.959 L1142.48 677.959 L1141.92 677.959 L1141.36 677.959 L1140.8 677.959 L1140.24 677.959 L1139.68 677.959 L1139.13 677.959 L1138.57 677.959 L1138.01 677.959 L1137.45 677.959 L1136.89 677.959 L1136.33 677.959 L1135.77 677.959 L1135.21 677.959 L1134.65 677.959 L1134.09 677.959 L1133.53 677.959 L1132.97 677.959 L1132.41 677.959 L1131.86 677.959 L1131.3 677.959 L1130.74 677.959 L1130.18 677.959 L1129.62 677.959 L1129.06 677.959 L1128.5 677.959 L1127.94 677.959 L1127.38 677.959 L1126.82 677.959 L1126.26 677.959 L1125.7 677.959 L1125.14 677.959 L1124.59 677.959 L1124.03 677.959 L1123.47 677.959 L1122.91 677.959 L1122.35 677.959 L1121.79 677.959 L1121.23 677.959 L1120.67 677.959 L1120.11 677.959 L1119.55 677.959 L1118.99 677.959 L1118.43 677.959 L1117.87 677.959 L1117.31 677.959 L1116.76 677.959 L1116.2 677.959 L1115.64 677.959 L1115.08 677.959 L1114.52 677.959 L1113.96 677.959 L1113.4 677.959 L1112.84 677.959 L1112.28 677.959 L1111.72 677.959 L1111.16 677.959 L1110.6 677.959 L1110.04 677.959 L1109.49 677.959 L1108.93 677.959 L1108.37 677.959 L1107.81 677.959 L1107.25 677.959 L1106.69 677.959 L1106.13 677.959 L1105.57 677.959 L1105.01 677.959 L1104.45 677.959 L1103.89 677.959 L1103.33 677.959 L1102.77 677.959 L1102.22 677.959 L1101.66 677.959 L1101.1 677.959 L1100.54 677.959 L1099.98 677.959 L1099.42 677.959 L1098.86 677.959 L1098.3 677.959 L1097.74 677.959 L1097.18 677.959 L1096.62 677.959 L1096.06 677.959 L1095.5 677.959 L1094.94 677.959 L1094.39 677.959 L1093.83 677.959 L1093.27 677.959 L1092.71 677.959 L1092.15 677.959 L1091.59 677.959 L1091.03 677.959 L1090.47 677.959 L1089.91 677.959 L1089.35 677.959 L1088.79 677.959 L1088.23 677.959 L1087.67 677.959 L1087.12 677.959 L1086.56 677.959 L1086 677.959 L1085.44 677.959 L1084.88 677.959 L1084.32 677.959 L1083.76 677.959 L1083.2 677.959 L1082.64 677.959 L1082.08 677.959 L1081.52 677.959 L1080.96 677.959 L1080.4 677.959 L1079.85 677.959 L1079.29 677.959 L1078.73 677.959 L1078.17 677.959 L1077.61 677.959 L1077.05 677.959 L1076.49 677.959 L1075.93 677.959 L1075.37 677.959 L1074.81 677.959 L1074.25 677.959 L1073.69 677.959 L1073.13 677.959 L1072.57 677.959 L1072.02 677.959 L1071.46 677.959 L1070.9 677.959 L1070.34 677.959 L1069.78 677.959 L1069.22 677.959 L1068.66 677.959 L1068.1 677.959 L1067.54 677.959 L1066.98 677.959 L1066.42 677.959 L1065.86 677.959 L1065.3 677.959 L1064.75 677.959 L1064.19 677.959 L1063.63 677.959 L1063.07 677.959 L1062.51 677.959 L1061.95 677.959 L1061.39 677.959 L1060.83 677.959 L1060.27 677.959 L1059.71 677.959 L1059.15 677.959 L1058.59 677.959 L1058.03 677.959 L1057.48 677.959 L1056.92 677.959 L1056.36 677.959 L1055.8 677.959 L1055.24 677.959 L1054.68 677.959 L1054.12 677.959 L1053.56 677.959 L1053 677.959 L1052.44 677.959 L1051.88 677.959 L1051.32 677.959 L1050.76 677.959 L1050.2 677.959 L1049.65 677.959 L1049.09 677.959 L1048.53 677.959 L1047.97 677.959 L1047.41 677.959 L1046.85 677.959 L1046.29 677.959 L1045.73 677.959 L1045.17 677.959 L1044.61 677.959 L1044.05 677.959 L1043.49 677.959 L1042.93 677.959 L1042.38 677.959 L1041.82 677.959 L1041.26 677.959 L1040.7 677.959 L1040.14 677.959 L1039.58 677.959 L1039.02 677.959 L1038.46 677.959 L1037.9 677.959 L1037.34 677.959 L1036.78 677.959 L1036.22 677.959 L1035.66 677.959 L1035.1 677.959 L1034.55 677.959 L1033.99 677.959 L1033.43 677.959 L1032.87 677.959 L1032.31 677.959 L1031.75 677.959 L1031.19 677.959 L1030.63 677.959 L1030.07 677.959 L1029.51 677.959 L1028.95 677.959 L1028.39 677.959 L1027.83 677.959 L1027.28 677.959 L1026.72 677.959 L1026.16 677.959 L1025.6 677.959 L1025.04 677.959 L1024.48 677.959 L1023.92 677.959 L1023.36 677.959 L1022.8 677.959 L1022.24 677.959 L1021.68 677.959 L1021.12 677.959 L1020.56 677.959 L1020.01 677.959 L1019.45 677.959 L1018.89 677.959 L1018.33 677.959 L1017.77 677.959 L1017.21 677.959 L1016.65 677.959 L1016.09 677.959 L1015.53 677.959 L1014.97 677.959 L1014.41 677.959 L1013.85 677.959 L1013.29 677.959 L1012.73 677.959 L1012.18 677.959 L1011.62 677.959 L1011.06 677.959 L1010.5 677.959 L1009.94 677.959 L1009.38 677.959 L1008.82 677.959 L1008.26 677.959 L1007.7 677.959 L1007.14 677.959 L1006.58 677.959 L1006.02 677.959 L1005.46 677.959 L1004.91 677.959 L1004.35 677.959 L1003.79 677.959 L1003.23 677.959 L1002.67 677.959 L1002.11 677.959 L1001.55 677.959 L1000.99 677.959 L1000.43 677.959 L999.872 677.959 L999.313 677.959 L998.754 677.959 L998.194 677.959 L997.635 677.959 L997.076 677.959 L996.517 677.959 L995.957 677.959 L995.398 677.959 L994.839 677.959 L994.28 677.959 L993.72 677.959 L993.161 677.959 L992.602 677.959 L992.043 677.959 L991.483 677.959 L990.924 677.959 L990.365 677.959 L989.806 677.959 L989.246 677.959 L988.687 677.959 L988.128 677.959 L987.569 677.959 L987.009 677.959 L986.45 677.959 L985.891 677.959 L985.332 677.959 L984.772 677.959 L984.213 677.959 L983.654 677.959 L983.095 677.959 L982.535 677.959 L981.976 677.959 L981.417 677.959 L980.858 677.959 L980.298 677.959 L979.739 677.959 L979.18 677.959 L978.621 677.959 L978.061 677.959 L977.502 677.959 L976.943 677.959 L976.384 677.959 L975.824 677.959 L975.265 677.959 L974.706 677.959 L974.147 677.959 L973.587 677.959 L973.028 677.959 L972.469 677.959 L971.91 677.959 L971.35 677.959 L970.791 677.959 L970.232 677.959 L969.673 677.959 L969.113 677.959 L968.554 677.959 L967.995 677.959 L967.436 677.959 L966.876 677.959 L966.317 677.959 L965.758 677.959 L965.199 677.959 L964.639 677.959 L964.08 677.959 L963.521 677.959 L962.962 677.959 L962.402 677.959 L961.843 677.959 L961.284 677.959 L960.725 677.959 L960.165 677.959 L959.606 677.959 L959.047 677.959 L958.488 677.959 L957.928 677.959 L957.369 677.959 L956.81 677.959 L956.251 677.959 L955.691 677.959 L955.132 677.959 L954.573 677.959 L954.014 677.959 L953.454 677.959 L952.895 677.959 L952.336 677.959 L951.777 677.959 L951.217 677.959 L950.658 677.959 L950.099 677.959 L949.54 677.959 L948.98 677.959 L948.421 677.959 L947.862 677.959 L947.303 677.959 L946.743 677.959 L946.184 677.959 L945.625 677.959 L945.066 677.959 L944.506 677.959 L943.947 677.959 L943.388 677.959 L942.829 677.959 L942.269 677.959 L941.71 677.959 L941.151 677.959 L940.592 677.959 L940.032 677.959 L939.473 677.959 L938.914 677.959 L938.355 677.959 L937.795 677.959 L937.236 677.959 L936.677 677.959 L936.118 677.959 L935.558 677.959 L934.999 677.959 L934.44 677.959 L933.881 677.959 L933.321 677.959 L932.762 677.959 L932.203 677.959 L931.644 677.959 L931.084 677.959 L930.525 677.959 L929.966 677.959 L929.406 677.959 L928.847 677.959 L928.288 677.959 L927.729 677.959 L927.169 677.959 L926.61 677.959 L926.051 677.959 L925.492 677.959 L924.932 677.959 L924.373 677.959 L923.814 677.959 L923.255 677.959 L922.695 677.959 L922.136 677.959 L921.577 677.959 L921.018 677.959 L920.458 677.959 L919.899 677.959 L919.34 677.959 L918.781 677.959 L918.221 677.959 L917.662 677.959 L917.103 677.959 L916.544 677.959 L915.984 677.959 L915.425 677.959 L914.866 677.959 L914.307 677.959 L913.747 677.959 L913.188 677.959 L912.629 677.959 L912.07 677.959 L911.51 677.959 L910.951 677.959 L910.392 677.959 L909.833 677.959 L909.273 677.959 L908.714 677.959 L908.155 677.959 L907.596 677.959 L907.036 677.959 L906.477 677.959 L905.918 677.959 L905.359 677.959 L904.799 677.959 L904.24 677.959 L903.681 677.959 L903.122 677.959 L902.562 677.959 L902.003 677.959 L901.444 677.959 L900.885 677.959 L900.325 677.959 L899.766 677.959 L899.207 677.959 L898.648 677.959 L898.088 677.959 L897.529 677.959 L896.97 677.959 L896.411 677.959 L895.851 677.959 L895.292 677.959 L894.733 677.959 L894.174 677.959 L893.614 677.959 L893.055 677.959 L892.496 677.959 L891.937 677.959 L891.377 677.959 L890.818 677.959 L890.259 677.959 L889.7 677.959 L889.14 677.959 L888.581 677.959 L888.022 677.959 L887.463 677.959 L886.903 677.959 L886.344 677.959 L885.785 677.959 L885.226 677.959 L884.666 677.959 L884.107 677.959 L883.548 677.959 L882.989 677.959 L882.429 677.959 L881.87 677.959 L881.311 677.959 L880.752 677.959 L880.192 677.959 L879.633 677.959 L879.074 677.959 L878.515 677.959 L877.955 677.959 L877.396 677.959 L876.837 677.959 L876.278 677.959 L875.718 677.959 L875.159 677.959 L874.6 677.959 L874.041 677.959 L873.481 677.959 L872.922 677.959 L872.363 677.959 L871.804 677.959 L871.244 677.959 L870.685 677.959 L870.126 677.959 L869.567 677.959 L869.007 677.959 L868.448 677.959 L867.889 677.959 L867.33 677.959 L866.77 677.959 L866.211 677.959 L865.652 677.959 L865.093 677.959 L864.533 677.959 L863.974 677.959 L863.415 677.959 L862.856 677.959 L862.296 677.959 L861.737 677.959 L861.178 677.959 L860.619 677.959 L860.059 677.959 L859.5 677.959 L858.941 677.959 L858.382 677.959 L857.822 677.959 L857.263 677.959 L856.704 677.959 L856.145 677.959 L855.585 677.959 L855.026 677.959 L854.467 677.959 L853.908 677.959 L853.348 677.959 L852.789 677.959 L852.23 677.959 L851.671 677.959 L851.111 677.959 L850.552 677.959 L849.993 677.959 L849.434 677.959 L848.874 677.959 L848.315 677.959 L847.756 677.959 L847.197 677.959 L846.637 677.959 L846.078 677.959 L845.519 677.959 L844.96 677.959 L844.4 677.959 L843.841 677.959 L843.282 677.959 L842.723 677.959 L842.163 677.959 L841.604 677.959 L841.045 677.959 L840.486 677.959 L839.926 677.959 L839.367 677.959 L838.808 677.959 L838.249 677.959 L837.689 677.959 L837.13 677.959 L836.571 677.959 L836.012 677.959 L835.452 677.959 L834.893 677.959 L834.334 677.959 L833.775 677.959 L833.215 677.959 L832.656 677.959 L832.097 677.959 L831.538 677.959 L830.978 677.959 L830.419 677.959 L829.86 677.959 L829.301 677.959 L828.741 677.959 L828.182 677.959 L827.623 677.959 L827.064 677.959 L826.504 677.959 L825.945 677.959 L825.386 677.959 L824.827 677.959 L824.267 677.959 L823.708 677.959 L823.149 677.959 L822.59 677.959 L822.03 677.959 L821.471 677.959 L820.912 677.959 L820.353 677.959 L819.793 677.959 L819.234 677.959 L818.675 677.959 L818.116 677.959 L817.556 677.959 L816.997 677.959 L816.438 677.959 L815.879 677.959 L815.319 677.959 L814.76 677.959 L814.201 677.959 L813.642 677.959 L813.082 677.959 L812.523 677.959 L811.964 677.959 L811.405 677.959 L810.845 677.959 L810.286 677.959 L809.727 677.959 L809.168 677.959 L808.608 677.959 L808.049 677.959 L807.49 677.959 L806.931 677.959 L806.371 677.959 L805.812 677.959 L805.253 677.959 L804.693 677.959 L804.134 677.959 L803.575 677.959 L803.016 677.959 L802.456 677.959 L801.897 677.959 L801.338 677.959 L800.779 677.959 L800.219 677.959 L799.66 677.959 L799.101 677.959 L798.542 677.959 L797.982 677.959 L797.423 677.959 L796.864 677.959 L796.305 677.959 L795.745 677.959 L795.186 677.959 L794.627 677.959 L794.068 677.959 L793.508 677.959 L792.949 677.959 L792.39 677.959 L791.831 677.959 L791.271 677.959 L790.712 677.959 L790.153 677.959 L789.594 677.959 L789.034 677.959 L788.475 677.959 L787.916 677.959 L787.357 677.959 L786.797 677.959 L786.238 677.959 L785.679 677.959 L785.12 677.959 L784.56 677.959 L784.001 677.959 L783.442 677.959 L782.883 677.959 L782.323 677.959 L781.764 677.959 L781.205 677.959 L780.646 677.959 L780.086 677.959 L779.527 677.959 L778.968 677.959 L778.409 677.959 L777.849 677.959 L777.29 677.959 L776.731 677.959 L776.172 677.959 L775.612 677.959 L775.053 677.959 L774.494 677.959 L773.935 677.959 L773.375 677.959 L772.816 677.959 L772.257 677.959 L771.698 677.959 L771.138 677.959 L770.579 677.959 L770.02 677.959 L769.461 677.959 L768.901 677.959 L768.342 677.959 L767.783 677.959 L767.224 677.959 L766.664 677.959 L766.105 677.959 L765.546 677.959 L764.987 677.959 L764.427 677.959 L763.868 677.959 L763.309 677.959 L762.75 677.959 L762.19 677.959 L761.631 677.959 L761.072 677.959 L760.513 677.959 L759.953 677.959 L759.394 677.959 L758.835 677.959 L758.276 677.959 L757.716 677.959 L757.157 677.959 L756.598 677.959 L756.039 677.959 L755.479 677.959 L754.92 677.959 L754.361 677.959 L753.802 677.959 L753.242 677.959 L752.683 677.959 L752.124 677.959 L751.565 677.959 L751.005 677.959 L750.446 677.959 L749.887 677.959 L749.328 677.959 L748.768 677.959 L748.209 677.959 L747.65 677.959 L747.091 677.959 L746.531 677.959 L745.972 677.959 L745.413 677.959 L744.854 677.959 L744.294 677.959 L743.735 677.959 L743.176 677.959 L742.617 677.959 L742.057 677.959 L741.498 677.959 L740.939 677.959 L740.38 677.959 L739.82 677.959 L739.261 677.959 L738.702 677.959 L738.143 677.959 L737.583 677.959 L737.024 677.959 L736.465 677.959 L735.906 677.959 L735.346 677.959 L734.787 677.959 L734.228 677.959 L733.669 677.959 L733.109 677.959 L732.55 677.959 L731.991 677.959 L731.432 677.959 L730.872 677.959 L730.313 677.959 L729.754 677.959 L729.195 677.959 L728.635 677.959 L728.076 677.959 L727.517 677.959 L726.958 677.959 L726.398 677.959 L725.839 677.959 L725.28 677.959 L724.721 677.959 L724.161 677.959 L723.602 677.959 L723.043 677.959 L722.484 677.959 L721.924 677.959 L721.365 677.959 L720.806 677.959 L720.247 677.959  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip823)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,682.737 720.806,682.737 721.365,682.737 721.924,682.737 722.484,682.737 723.043,682.737 723.602,682.737 724.161,682.737 724.721,682.737 725.28,682.737 725.839,682.737 726.398,682.737 726.958,682.737 727.517,682.737 728.076,682.737 728.635,682.737 729.195,682.737 729.754,682.737 730.313,682.737 730.872,682.737 731.432,682.737 731.991,682.737 732.55,682.737 733.109,682.737 733.669,682.737 734.228,682.737 734.787,682.737 735.346,682.737 735.906,682.737 736.465,682.737 737.024,682.737 737.583,682.737 738.143,682.737 738.702,682.737 739.261,682.737 739.82,682.737 740.38,682.737 740.939,682.737 741.498,682.737 742.057,682.737 742.617,682.737 743.176,682.737 743.735,682.737 744.294,682.737 744.854,682.737 745.413,682.737 745.972,682.737 746.531,682.737 747.091,682.737 747.65,682.737 748.209,682.737 748.768,682.737 749.328,682.737 749.887,682.737 750.446,682.737 751.005,682.737 751.565,682.737 752.124,682.737 752.683,682.737 753.242,682.737 753.802,682.737 754.361,682.737 754.92,682.737 755.479,682.737 756.039,682.737 756.598,682.737 757.157,682.737 757.716,682.737 758.276,682.737 758.835,682.737 759.394,682.737 759.953,682.737 760.513,682.737 761.072,682.737 761.631,682.737 762.19,682.737 762.75,682.737 763.309,682.737 763.868,682.737 764.427,682.737 764.987,682.737 765.546,682.737 766.105,682.737 766.664,682.737 767.224,682.737 767.783,682.737 768.342,682.737 768.901,682.737 769.461,682.737 770.02,682.737 770.579,682.737 771.138,682.737 771.698,682.737 772.257,682.737 772.816,682.737 773.375,682.737 773.935,682.737 774.494,682.737 775.053,682.737 775.612,682.737 776.172,682.737 776.731,682.737 777.29,682.737 777.849,682.737 778.409,682.737 778.968,682.737 779.527,682.737 780.086,682.737 780.646,682.737 781.205,682.737 781.764,682.737 782.323,682.737 782.883,682.737 783.442,682.737 784.001,682.737 784.56,682.737 785.12,682.737 785.679,682.737 786.238,682.737 786.797,682.737 787.357,682.737 787.916,682.737 788.475,682.737 789.034,682.737 789.594,682.737 790.153,682.737 790.712,682.737 791.271,682.737 791.831,682.737 792.39,682.737 792.949,682.737 793.508,682.737 794.068,682.737 794.627,682.737 795.186,682.737 795.745,682.737 796.305,682.737 796.864,682.737 797.423,682.737 797.982,682.737 798.542,682.737 799.101,682.737 799.66,682.737 800.219,682.737 800.779,682.737 801.338,682.737 801.897,682.737 802.456,682.737 803.016,682.737 803.575,682.737 804.134,682.737 804.693,682.737 805.253,682.737 805.812,682.737 806.371,682.737 806.931,682.737 807.49,682.737 808.049,682.737 808.608,682.737 809.168,682.737 809.727,682.737 810.286,682.737 810.845,682.737 811.405,682.737 811.964,682.737 812.523,682.737 813.082,682.737 813.642,682.737 814.201,682.737 814.76,682.737 815.319,682.737 815.879,682.737 816.438,682.737 816.997,682.737 817.556,682.737 818.116,682.737 818.675,682.737 819.234,682.737 819.793,682.737 820.353,682.737 820.912,682.737 821.471,682.737 822.03,682.737 822.59,682.737 823.149,682.737 823.708,682.737 824.267,682.737 824.827,682.737 825.386,682.737 825.945,682.737 826.504,682.737 827.064,682.737 827.623,682.737 828.182,682.737 828.741,682.737 829.301,682.737 829.86,682.737 830.419,682.737 830.978,682.737 831.538,682.737 832.097,682.737 832.656,682.737 833.215,682.737 833.775,682.737 834.334,682.737 834.893,682.737 835.452,682.737 836.012,682.737 836.571,682.737 837.13,682.737 837.689,682.737 838.249,682.737 838.808,682.737 839.367,682.737 839.926,682.737 840.486,682.737 841.045,682.737 841.604,682.737 842.163,682.737 842.723,682.737 843.282,682.737 843.841,682.737 844.4,682.737 844.96,682.737 845.519,682.737 846.078,682.737 846.637,682.737 847.197,682.737 847.756,682.737 848.315,682.737 848.874,682.737 849.434,682.737 849.993,682.737 850.552,682.737 851.111,682.737 851.671,682.737 852.23,682.737 852.789,682.737 853.348,682.737 853.908,682.737 854.467,682.737 855.026,682.737 855.585,682.737 856.145,682.737 856.704,682.737 857.263,682.737 857.822,682.737 858.382,682.737 858.941,682.737 859.5,682.737 860.059,682.737 860.619,682.737 861.178,682.737 861.737,682.737 862.296,682.737 862.856,682.737 863.415,682.737 863.974,682.737 864.533,682.737 865.093,682.737 865.652,682.737 866.211,682.737 866.77,682.737 867.33,682.737 867.889,682.737 868.448,682.737 869.007,682.737 869.567,682.737 870.126,682.737 870.685,682.737 871.244,682.737 871.804,682.737 872.363,682.737 872.922,682.737 873.481,682.737 874.041,682.737 874.6,682.737 875.159,682.737 875.718,682.737 876.278,682.737 876.837,682.737 877.396,682.737 877.955,682.737 878.515,682.737 879.074,682.737 879.633,682.737 880.192,682.737 880.752,682.737 881.311,682.737 881.87,682.737 882.429,682.737 882.989,682.737 883.548,682.737 884.107,682.737 884.666,682.737 885.226,682.737 885.785,682.737 886.344,682.737 886.903,682.737 887.463,682.737 888.022,682.737 888.581,682.737 889.14,682.737 889.7,682.737 890.259,682.737 890.818,682.737 891.377,682.737 891.937,682.737 892.496,682.737 893.055,682.737 893.614,682.737 894.174,682.737 894.733,682.737 895.292,682.737 895.851,682.737 896.411,682.737 896.97,682.737 897.529,682.737 898.088,682.737 898.648,682.737 899.207,682.737 899.766,682.737 900.325,682.737 900.885,682.737 901.444,682.737 902.003,682.737 902.562,682.737 903.122,682.737 903.681,682.737 904.24,682.737 904.799,682.737 905.359,682.737 905.918,682.737 906.477,682.737 907.036,682.737 907.596,682.737 908.155,682.737 908.714,682.737 909.273,682.737 909.833,682.737 910.392,682.737 910.951,682.737 911.51,682.737 912.07,682.737 912.629,682.737 913.188,682.737 913.747,682.737 914.307,682.737 914.866,682.737 915.425,682.737 915.984,682.737 916.544,682.737 917.103,682.737 917.662,682.737 918.221,682.737 918.781,682.737 919.34,682.737 919.899,682.737 920.458,682.737 921.018,682.737 921.577,682.737 922.136,682.737 922.695,682.737 923.255,682.737 923.814,682.737 924.373,682.737 924.932,682.737 925.492,682.737 926.051,682.737 926.61,682.737 927.169,682.737 927.729,682.737 928.288,682.737 928.847,682.737 929.406,682.737 929.966,682.737 930.525,682.737 931.084,682.737 931.644,682.737 932.203,682.737 932.762,682.737 933.321,682.737 933.881,682.737 934.44,682.737 934.999,682.737 935.558,682.737 936.118,682.737 936.677,682.737 937.236,682.737 937.795,682.737 938.355,682.737 938.914,682.737 939.473,682.737 940.032,682.737 940.592,682.737 941.151,682.737 941.71,682.737 942.269,682.737 942.829,682.737 943.388,682.737 943.947,682.737 944.506,682.737 945.066,682.737 945.625,682.737 946.184,682.737 946.743,682.737 947.303,682.737 947.862,682.737 948.421,682.737 948.98,682.737 949.54,682.737 950.099,682.737 950.658,682.737 951.217,682.737 951.777,682.737 952.336,682.737 952.895,682.737 953.454,682.737 954.014,682.737 954.573,682.737 955.132,682.737 955.691,682.737 956.251,682.737 956.81,682.737 957.369,682.737 957.928,682.737 958.488,682.737 959.047,682.737 959.606,682.737 960.165,682.737 960.725,682.737 961.284,682.737 961.843,682.737 962.402,682.737 962.962,682.737 963.521,682.737 964.08,682.737 964.639,682.737 965.199,682.737 965.758,682.737 966.317,682.737 966.876,682.737 967.436,682.737 967.995,682.737 968.554,682.737 969.113,682.737 969.673,682.737 970.232,682.737 970.791,682.737 971.35,682.737 971.91,682.737 972.469,682.737 973.028,682.737 973.587,682.737 974.147,682.737 974.706,682.737 975.265,682.737 975.824,682.737 976.384,682.737 976.943,682.737 977.502,682.737 978.061,682.737 978.621,682.737 979.18,682.737 979.739,682.737 980.298,682.737 980.858,682.737 981.417,682.737 981.976,682.737 982.535,682.737 983.095,682.737 983.654,682.737 984.213,682.737 984.772,682.737 985.332,682.737 985.891,682.737 986.45,682.737 987.009,682.737 987.569,682.737 988.128,682.737 988.687,682.737 989.246,682.737 989.806,682.737 990.365,682.737 990.924,682.737 991.483,682.737 992.043,682.737 992.602,682.737 993.161,682.737 993.72,682.737 994.28,682.737 994.839,682.737 995.398,682.737 995.957,682.737 996.517,682.737 997.076,682.737 997.635,682.737 998.194,682.737 998.754,682.737 999.313,682.737 999.872,682.737 1000.43,682.737 1000.99,682.737 1001.55,682.737 1002.11,682.737 1002.67,682.737 1003.23,682.737 1003.79,682.737 1004.35,682.737 1004.91,682.737 1005.46,682.737 1006.02,682.737 1006.58,682.737 1007.14,682.737 1007.7,682.737 1008.26,682.737 1008.82,682.737 1009.38,682.737 1009.94,682.737 1010.5,682.737 1011.06,682.737 1011.62,682.737 1012.18,682.737 1012.73,682.737 1013.29,682.737 1013.85,682.737 1014.41,682.737 1014.97,682.737 1015.53,682.737 1016.09,682.737 1016.65,682.737 1017.21,682.737 1017.77,682.737 1018.33,682.737 1018.89,682.737 1019.45,682.737 1020.01,682.737 1020.56,682.737 1021.12,682.737 1021.68,682.737 1022.24,682.737 1022.8,682.737 1023.36,682.737 1023.92,682.737 1024.48,682.737 1025.04,682.737 1025.6,682.737 1026.16,682.737 1026.72,682.737 1027.28,682.737 1027.83,682.737 1028.39,682.737 1028.95,682.737 1029.51,682.737 1030.07,682.737 1030.63,682.737 1031.19,682.737 1031.75,682.737 1032.31,682.737 1032.87,682.737 1033.43,682.737 1033.99,682.737 1034.55,682.737 1035.1,682.737 1035.66,682.737 1036.22,682.737 1036.78,682.737 1037.34,682.737 1037.9,682.737 1038.46,682.737 1039.02,682.737 1039.58,682.737 1040.14,682.737 1040.7,682.737 1041.26,682.737 1041.82,682.737 1042.38,682.737 1042.93,682.737 1043.49,682.737 1044.05,682.737 1044.61,682.737 1045.17,682.737 1045.73,682.737 1046.29,682.737 1046.85,682.737 1047.41,682.737 1047.97,682.737 1048.53,682.737 1049.09,682.737 1049.65,682.737 1050.2,682.737 1050.76,682.737 1051.32,682.737 1051.88,682.737 1052.44,682.737 1053,682.737 1053.56,682.737 1054.12,682.737 1054.68,682.737 1055.24,682.737 1055.8,682.737 1056.36,682.737 1056.92,682.737 1057.48,682.737 1058.03,682.737 1058.59,682.737 1059.15,682.737 1059.71,682.737 1060.27,682.737 1060.83,682.737 1061.39,682.737 1061.95,682.737 1062.51,682.737 1063.07,682.737 1063.63,682.737 1064.19,682.737 1064.75,682.737 1065.3,682.737 1065.86,682.737 1066.42,682.737 1066.98,682.737 1067.54,682.737 1068.1,682.737 1068.66,682.737 1069.22,682.737 1069.78,682.737 1070.34,682.737 1070.9,682.737 1071.46,682.737 1072.02,682.737 1072.57,682.737 1073.13,682.737 1073.69,682.737 1074.25,682.737 1074.81,682.737 1075.37,682.737 1075.93,682.737 1076.49,682.737 1077.05,682.737 1077.61,682.737 1078.17,682.737 1078.73,682.737 1079.29,682.737 1079.85,682.737 1080.4,682.737 1080.96,682.737 1081.52,682.737 1082.08,682.737 1082.64,682.737 1083.2,682.737 1083.76,682.737 1084.32,682.737 1084.88,682.737 1085.44,682.737 1086,682.737 1086.56,682.737 1087.12,682.737 1087.67,682.737 1088.23,682.737 1088.79,682.737 1089.35,682.737 1089.91,682.737 1090.47,682.737 1091.03,682.737 1091.59,682.737 1092.15,682.737 1092.71,682.737 1093.27,682.737 1093.83,682.737 1094.39,682.737 1094.94,682.737 1095.5,682.737 1096.06,682.737 1096.62,682.737 1097.18,682.737 1097.74,682.737 1098.3,682.737 1098.86,682.737 1099.42,682.737 1099.98,682.737 1100.54,682.737 1101.1,682.737 1101.66,682.737 1102.22,682.737 1102.77,682.737 1103.33,682.737 1103.89,682.737 1104.45,682.737 1105.01,682.737 1105.57,682.737 1106.13,682.737 1106.69,682.737 1107.25,682.737 1107.81,682.737 1108.37,682.737 1108.93,682.737 1109.49,682.737 1110.04,682.737 1110.6,682.737 1111.16,682.737 1111.72,682.737 1112.28,682.737 1112.84,682.737 1113.4,682.737 1113.96,682.737 1114.52,682.737 1115.08,682.737 1115.64,682.737 1116.2,682.737 1116.76,682.737 1117.31,682.737 1117.87,682.737 1118.43,682.737 1118.99,682.737 1119.55,682.737 1120.11,682.737 1120.67,682.737 1121.23,682.737 1121.79,682.737 1122.35,682.737 1122.91,682.737 1123.47,682.737 1124.03,682.737 1124.59,682.737 1125.14,682.737 1125.7,682.737 1126.26,682.737 1126.82,682.737 1127.38,682.737 1127.94,682.737 1128.5,682.737 1129.06,682.737 1129.62,682.737 1130.18,682.737 1130.74,682.737 1131.3,682.737 1131.86,682.737 1132.41,682.737 1132.97,682.737 1133.53,682.737 1134.09,682.737 1134.65,682.737 1135.21,682.737 1135.77,682.737 1136.33,682.737 1136.89,682.737 1137.45,682.737 1138.01,682.737 1138.57,682.737 1139.13,682.737 1139.68,682.737 1140.24,682.737 1140.8,682.737 1141.36,682.737 1141.92,682.737 1142.48,682.737 1143.04,682.737 1143.6,682.737 1144.16,682.737 1144.72,682.737 1145.28,682.737 1145.84,682.737 1146.4,682.737 1146.96,682.737 1147.51,682.737 1148.07,682.737 1148.63,682.737 1149.19,682.737 1149.75,682.737 1150.31,682.737 1150.87,682.737 1151.43,682.737 1151.99,682.737 1152.55,682.737 1153.11,682.737 1153.67,682.737 1154.23,682.737 1154.78,682.737 1155.34,682.737 1155.9,682.737 1156.46,682.737 1157.02,682.737 1157.58,682.737 1158.14,682.737 1158.7,682.737 1159.26,682.737 1159.82,682.737 1160.38,682.737 1160.94,682.737 1161.5,682.737 1162.05,682.737 1162.61,682.737 1163.17,682.737 1163.73,682.737 1164.29,682.737 1164.85,682.737 1165.41,682.737 1165.97,682.737 1166.53,682.737 1167.09,682.737 1167.65,682.737 1168.21,682.737 1168.77,682.737 1169.33,682.737 1169.88,682.737 1170.44,682.737 1171,682.737 1171.56,682.737 1172.12,682.737 1172.68,682.737 1173.24,682.737 1173.8,682.737 1174.36,682.737 1174.92,682.737 1175.48,682.737 1176.04,682.737 1176.6,682.737 1177.15,682.737 1177.71,682.737 1178.27,682.737 1178.83,682.737 1179.39,682.737 1179.95,682.737 1180.51,682.737 1181.07,682.737 1181.63,682.737 1182.19,682.737 1182.75,682.737 1183.31,682.737 1183.87,682.737 1184.43,682.737 1184.98,682.737 1185.54,682.737 1186.1,682.737 1186.66,682.737 1187.22,682.737 1187.78,682.737 1188.34,682.737 1188.9,682.737 1189.46,682.737 1190.02,682.737 1190.58,682.737 1191.14,682.737 1191.7,682.737 1192.25,682.737 1192.81,682.737 1193.37,682.737 1193.93,682.737 1194.49,682.737 1195.05,682.737 1195.61,682.737 1196.17,682.737 1196.73,682.737 1197.29,682.737 1197.85,682.737 1198.41,682.737 1198.97,682.737 1199.52,682.737 1200.08,682.737 1200.64,682.737 1201.2,682.737 1201.76,682.737 1202.32,682.737 1202.88,682.737 1203.44,682.737 1204,682.737 1204.56,682.737 1205.12,682.737 1205.68,682.737 1206.24,682.737 1206.8,682.737 1207.35,682.737 1207.91,682.737 1208.47,682.737 1209.03,682.737 1209.59,682.737 1210.15,682.737 1210.71,682.737 1211.27,682.737 1211.83,682.737 1212.39,682.737 1212.95,682.737 1213.51,682.737 1214.07,682.737 1214.62,682.737 1215.18,682.737 1215.74,682.737 1216.3,682.737 1216.86,682.737 1217.42,682.737 1217.98,682.737 1218.54,682.737 1219.1,682.737 1219.66,682.737 1220.22,682.737 1220.78,682.737 1221.34,682.737 1221.89,682.737 1222.45,682.737 1223.01,682.737 1223.57,682.737 1224.13,682.737 1224.69,682.737 1225.25,682.737 1225.81,682.737 1226.37,682.737 1226.93,682.737 1227.49,682.737 1228.05,682.737 1228.61,682.737 1229.17,682.737 1229.72,682.737 1230.28,682.737 1230.84,682.737 1231.4,682.737 1231.96,682.737 1232.52,682.737 1233.08,682.737 1233.64,682.737 1234.2,682.737 1234.76,682.737 1235.32,682.737 1235.88,682.737 1236.44,682.737 1236.99,682.737 1237.55,682.737 1238.11,682.737 1238.67,682.737 1239.23,682.737 1239.79,682.737 1240.35,682.737 1240.91,682.737 1241.47,682.737 1242.03,682.737 1242.59,682.737 1243.15,682.737 1243.71,682.737 1244.26,682.737 1244.82,682.737 1245.38,682.737 1245.94,682.737 1246.5,682.737 1247.06,682.737 1247.62,682.737 1248.18,682.737 1248.74,682.737 1249.3,682.737 1249.86,682.737 1250.42,682.737 1250.98,682.737 1251.54,682.737 1252.09,682.737 1252.65,682.737 1253.21,682.737 1253.77,682.737 1254.33,682.737 1254.89,682.737 1255.45,682.737 1256.01,682.737 1256.57,682.737 1257.13,682.737 1257.69,682.737 1258.25,682.737 1258.81,682.737 1259.36,682.737 1259.92,682.737 1260.48,682.737 1261.04,682.737 1261.6,682.737 1262.16,682.737 1262.72,682.737 1263.28,682.737 1263.84,682.737 1264.4,682.737 1264.96,682.737 1265.52,682.737 1266.08,682.737 1266.63,682.737 1267.19,682.737 1267.75,682.737 1268.31,682.737 1268.87,682.737 1269.43,682.737 1269.99,682.737 1270.55,682.737 1271.11,682.737 1271.67,682.737 1272.23,682.737 1272.79,682.737 1273.35,682.737 1273.91,682.737 1274.46,682.737 1275.02,682.737 1275.58,682.737 1276.14,682.737 1276.7,682.737 1277.26,682.737 1277.82,682.737 1278.38,682.737 1278.94,682.737 1279.5,682.737 1280.06,682.737 1280.62,682.737 1281.18,682.737 1281.73,682.737 1282.29,682.737 1282.85,682.737 1283.41,682.737 1283.97,682.737 1284.53,682.737 1285.09,682.737 1285.65,682.737 1286.21,682.737 1286.77,682.737 1287.33,682.737 1287.89,682.737 1288.45,682.737 1289,682.737 1289.56,682.737 1290.12,682.737 1290.68,682.737 1291.24,682.737 1291.8,682.737 1292.36,682.737 1292.92,682.737 1293.48,682.737 1294.04,682.737 1294.6,682.737 1295.16,682.737 1295.72,682.737 1296.28,682.737 1296.83,682.737 1297.39,682.737 1297.95,682.737 1298.51,682.737 1299.07,682.737 1299.63,682.737 1300.19,682.737 1300.75,682.737 1301.31,682.737 1301.87,682.737 1302.43,682.737 1302.99,682.737 1303.55,682.737 1304.1,682.737 1304.66,682.737 1305.22,682.737 1305.78,682.737 1306.34,682.737 1306.9,682.737 1307.46,682.737 1308.02,682.737 1308.58,682.737 1309.14,682.737 1309.7,682.737 1310.26,682.737 1310.82,682.737 1311.38,682.737 1311.93,682.737 1312.49,682.737 1313.05,682.737 1313.61,682.737 1314.17,682.737 1314.73,682.737 1315.29,682.737 1315.85,682.737 1316.41,682.737 1316.97,682.737 1317.53,682.737 1318.09,682.737 1318.65,682.737 1319.2,682.737 1319.76,682.737 1320.32,682.737 1320.88,682.737 1321.44,682.737 1322,682.737 1322.56,682.737 1323.12,682.737 1323.68,682.737 1324.24,682.737 1324.8,682.737 1325.36,682.737 1325.92,682.737 1326.47,682.737 1327.03,682.737 1327.59,682.737 1328.15,682.737 1328.71,682.737 1329.27,682.737 1329.83,682.737 1330.39,682.737 1330.95,682.737 1331.51,682.737 1332.07,682.737 1332.63,682.737 1333.19,682.737 1333.75,682.737 1334.3,682.737 1334.86,682.737 1335.42,682.737 1335.98,682.737 1336.54,682.737 1337.1,682.737 1337.66,682.737 1338.22,682.737 1338.78,682.737 1339.34,682.737 1339.9,682.737 1340.46,682.737 1341.02,682.737 1341.57,682.737 1342.13,682.737 1342.69,682.737 1343.25,682.737 1343.81,682.737 1344.37,682.737 1344.93,682.737 1345.49,682.737 1346.05,682.737 1346.61,682.737 1347.17,682.737 1347.73,682.737 1348.29,682.737 1348.84,682.737 1349.4,682.737 1349.96,682.737 1350.52,682.737 1351.08,682.737 1351.64,682.737 1352.2,682.737 1352.76,682.737 1353.32,682.737 1353.88,682.737 1354.44,682.737 1355,682.737 1355.56,682.737 1356.12,682.737 1356.67,682.737 1357.23,682.737 1357.79,682.737 1358.35,682.737 1358.91,682.737 1359.47,682.737 1360.03,682.737 1360.59,682.737 1361.15,682.737 1361.71,682.737 1362.27,682.737 1362.83,682.737 1363.39,682.737 1363.94,682.737 1364.5,682.737 1365.06,682.737 1365.62,682.737 1366.18,682.737 1366.74,682.737 1367.3,682.737 1367.86,682.737 1368.42,682.737 1368.98,682.737 1369.54,682.737 1370.1,682.737 1370.66,682.737 1371.21,682.737 1371.77,682.737 1372.33,682.737 1372.89,682.737 1373.45,682.737 1374.01,682.737 1374.57,682.737 1375.13,682.737 1375.69,682.737 1376.25,682.737 1376.81,682.737 1377.37,682.737 1377.93,682.737 1378.49,682.737 1379.04,682.737 1379.6,682.737 1380.16,682.737 1380.72,682.737 1381.28,682.737 1381.84,682.737 1382.4,682.737 1382.96,682.737 1383.52,682.737 1384.08,682.737 1384.64,682.737 1385.2,682.737 1385.76,682.737 1386.31,682.737 1386.87,682.737 1387.43,682.737 1387.99,682.737 1388.55,682.737 1389.11,682.737 1389.67,682.737 1390.23,682.737 1390.79,682.737 1391.35,682.737 1391.91,682.737 1392.47,682.737 1393.03,682.737 1393.58,682.737 1394.14,682.737 1394.7,682.737 1395.26,682.737 1395.82,682.737 1396.38,682.737 1396.94,682.737 1397.5,682.737 1398.06,682.737 1398.62,682.737 1399.18,682.737 1399.74,682.737 1400.3,682.737 1400.86,682.737 1401.41,682.737 1401.97,682.737 1402.53,682.737 1403.09,682.737 1403.65,682.737 1404.21,682.737 1404.77,682.737 1405.33,682.737 1405.89,682.737 1406.45,682.737 1407.01,682.737 1407.57,682.737 1408.13,682.737 1408.68,682.737 1409.24,682.737 1409.8,682.737 1410.36,682.737 1410.92,682.737 1411.48,682.737 1412.04,682.737 1412.6,682.737 1413.16,682.737 1413.72,682.737 1414.28,682.737 1414.84,682.737 1415.4,682.737 1415.95,682.737 1416.51,682.737 1417.07,682.737 1417.63,682.737 1418.19,682.737 1418.75,682.737 1419.31,682.737 1419.87,682.737 1420.43,682.737 1420.99,682.737 1421.55,682.737 1422.11,682.737 1422.67,682.737 1423.23,682.737 1423.78,682.737 1424.34,682.737 1424.9,682.737 1425.46,682.737 1426.02,682.737 1426.58,682.737 1427.14,682.737 1427.7,682.737 1428.26,682.737 1428.82,682.737 1429.38,682.737 1429.94,682.737 1430.5,682.737 1431.05,682.737 1431.61,682.737 1432.17,682.737 1432.73,682.737 1433.29,682.737 1433.85,682.737 1434.41,682.737 1434.97,682.737 1435.53,682.737 1436.09,682.737 1436.65,682.737 1437.21,682.737 1437.77,682.737 1438.33,682.737 1438.88,682.737 1439.44,682.737 1440,682.737 1440.56,682.737 1441.12,682.737 1441.68,682.737 1442.24,682.737 1442.8,682.737 1443.36,682.737 1443.92,682.737 1444.48,682.737 1445.04,682.737 1445.6,682.737 1446.15,682.737 1446.71,682.737 1447.27,682.737 1447.83,682.737 1448.39,682.737 1448.95,682.737 1449.51,682.737 1450.07,682.737 1450.63,682.737 1451.19,682.737 1451.75,682.737 1452.31,682.737 1452.87,682.737 1453.42,682.737 1453.98,682.737 1454.54,682.737 1455.1,682.737 1455.66,682.737 1456.22,682.737 1456.78,682.737 1457.34,682.737 1457.9,682.737 1458.46,682.737 1459.02,682.737 1459.58,682.737 1460.14,682.737 1460.7,682.737 1461.25,682.737 1461.81,682.737 1462.37,682.737 1462.93,682.737 1463.49,682.737 1464.05,682.737 1464.61,682.737 1465.17,682.737 1465.73,682.737 1466.29,682.737 1466.85,682.737 1467.41,682.737 1467.97,682.737 1468.52,682.737 1469.08,682.737 1469.64,682.737 1470.2,682.737 1470.76,682.737 1471.32,682.737 1471.88,682.737 1472.44,682.737 1473,682.737 1473.56,682.737 1474.12,682.737 1474.68,682.737 1475.24,682.737 1475.79,682.737 1476.35,682.737 1476.91,682.737 1477.47,682.737 1478.03,682.737 1478.59,682.737 1479.15,682.737 1479.71,682.737 1480.27,682.737 1480.83,682.737 1481.39,682.737 1481.95,682.737 1482.51,682.737 1483.07,682.737 1483.62,682.737 1484.18,682.737 1484.74,682.737 1485.3,682.737 1485.86,682.737 1486.42,682.737 1486.98,682.737 1487.54,682.737 1488.1,682.737 1488.66,682.737 1489.22,682.737 1489.78,682.737 1490.34,682.737 1490.89,682.737 1491.45,682.737 1492.01,682.737 1492.57,682.737 1493.13,682.737 1493.69,682.737 1494.25,682.737 1494.81,682.737 1495.37,682.737 1495.93,682.737 1496.49,682.737 1497.05,682.737 1497.61,682.737 1498.16,682.737 1498.72,682.737 1499.28,682.737 1499.84,682.737 1500.4,682.737 1500.96,682.737 1501.52,682.737 1502.08,682.737 1502.64,682.737 1503.2,682.737 1503.76,682.737 1504.32,682.737 1504.88,682.737 1505.44,682.737 1505.99,682.737 1506.55,682.737 1507.11,682.737 1507.67,682.737 1508.23,682.737 1508.79,682.737 1509.35,682.737 1509.91,682.737 1510.47,682.737 1511.03,682.737 1511.59,682.737 1512.15,682.737 1512.71,682.737 1513.26,682.737 1513.82,682.737 1514.38,682.737 1514.94,682.737 1515.5,682.737 1516.06,682.737 1516.62,682.737 1517.18,682.737 1517.74,682.737 1518.3,682.737 1518.86,682.737 1519.42,682.737 1519.98,682.737 1520.53,682.737 1521.09,682.737 1521.65,682.737 1522.21,682.737 1522.77,682.737 1523.33,682.737 1523.89,682.737 1524.45,682.737 1525.01,682.737 1525.57,682.737 1526.13,682.737 1526.69,682.737 1527.25,682.737 1527.81,682.737 1528.36,682.737 1528.92,682.737 1529.48,682.737 1530.04,682.737 1530.6,682.737 1531.16,682.737 1531.72,682.737 1532.28,682.737 1532.84,682.737 1533.4,682.737 1533.96,682.737 1534.52,682.737 1535.08,682.737 1535.63,682.737 1536.19,682.737 1536.75,682.737 1537.31,682.737 1537.87,682.737 1538.43,682.737 1538.99,682.737 1539.55,682.737 1540.11,682.737 1540.67,682.737 1541.23,682.737 1541.79,682.737 1542.35,682.737 1542.9,682.737 1543.46,682.737 1544.02,682.737 1544.58,682.737 1545.14,682.737 1545.7,682.737 1546.26,682.737 1546.82,682.737 1547.38,682.737 1547.94,682.737 1548.5,682.737 1549.06,682.737 1549.62,682.737 1550.18,682.737 1550.73,682.737 1551.29,682.737 1551.85,682.737 1552.41,682.737 1552.97,682.737 1553.53,682.737 1554.09,682.737 1554.65,682.737 1555.21,682.737 1555.77,682.737 1556.33,682.737 1556.89,682.737 1557.45,682.737 1558,682.737 1558.56,682.737 1559.12,682.737 1559.68,682.737 1560.24,682.737 1560.8,682.737 1561.36,682.737 1561.92,682.737 1562.48,682.737 1563.04,682.737 1563.6,682.737 1564.16,682.737 1564.72,682.737 1565.28,682.737 1565.83,682.737 1566.39,682.737 1566.95,682.737 1567.51,682.737 1568.07,682.737 1568.63,682.737 1569.19,682.737 1569.75,682.737 1570.31,682.737 1570.87,682.737 1571.43,682.737 1571.99,682.737 1572.55,682.737 1573.1,682.737 1573.66,682.737 1574.22,682.737 1574.78,682.737 1575.34,682.737 1575.9,682.737 1576.46,682.737 1577.02,682.737 1577.58,682.737 1578.14,682.737 1578.7,682.737 1579.26,682.737 1579.82,682.737 1580.37,682.737 1580.93,682.737 1581.49,682.737 1582.05,682.737 1582.61,682.737 1583.17,682.737 1583.73,682.737 1584.29,682.737 1584.85,682.737 1585.41,682.737 1585.97,682.737 1586.53,682.737 1587.09,682.737 1587.65,682.737 1588.2,682.737 1588.76,682.737 1589.32,682.737 1589.88,682.737 1590.44,682.737 1591,682.737 1591.56,682.737 1592.12,682.737 1592.68,682.737 1593.24,682.737 1593.8,682.737 1594.36,682.737 1594.92,682.737 1595.47,682.737 1596.03,682.737 1596.59,682.737 1597.15,682.737 1597.71,682.737 1598.27,682.737 1598.83,682.737 1599.39,682.737 1599.95,682.737 1600.51,682.737 1601.07,682.737 1601.63,682.737 1602.19,682.737 1602.74,682.737 1603.3,682.737 1603.86,682.737 1604.42,682.737 1604.98,682.737 1605.54,682.737 1606.1,682.737 1606.66,682.737 1607.22,682.737 1607.78,682.737 1608.34,682.737 1608.9,682.737 1609.46,682.737 1610.02,682.737 1610.57,682.737 1611.13,682.737 1611.69,682.737 1612.25,682.737 1612.81,682.737 1613.37,682.737 1613.93,682.737 1614.49,682.737 1615.05,682.737 1615.61,682.737 1616.17,682.737 1616.73,682.737 1617.29,682.737 1617.84,682.737 1618.4,682.737 1618.96,682.737 1619.52,682.737 1620.08,682.737 1620.64,682.737 1621.2,682.737 1621.76,682.737 1622.32,682.737 1622.88,682.737 1623.44,682.737 1624,682.737 1624.56,682.737 1625.11,682.737 1625.67,682.737 1626.23,682.737 1626.79,682.737 1627.35,682.737 1627.91,682.737 1628.47,682.737 1629.03,682.737 1629.59,682.737 1630.15,682.737 1630.71,682.737 1631.27,682.737 1631.83,682.737 1632.39,682.737 1632.94,682.737 1633.5,682.737 1634.06,682.737 1634.62,682.737 1635.18,682.737 1635.74,682.737 1636.3,682.737 1636.86,682.737 1637.42,682.737 1637.98,682.737 1638.54,682.737 1639.1,682.737 1639.66,682.737 1640.21,682.737 1640.77,682.737 1641.33,682.737 1641.89,682.737 1642.45,682.737 1643.01,682.737 1643.57,682.737 1644.13,682.737 1644.69,682.737 1645.25,682.737 1645.81,682.737 1646.37,682.737 1646.93,682.737 1647.48,682.737 1648.04,682.737 1648.6,682.737 1649.16,682.737 1649.72,682.737 1650.28,682.737 1650.84,682.737 1651.4,682.737 1651.96,682.737 1652.52,682.737 1653.08,682.737 1653.64,682.737 1654.2,682.737 1654.76,682.737 1655.31,682.737 1655.87,682.737 1656.43,682.737 1656.99,682.737 1657.55,682.737 1658.11,682.737 1658.67,682.737 1659.23,682.737 1659.79,682.737 1660.35,682.737 1660.91,682.737 1661.47,682.737 1662.03,682.737 1662.58,682.737 1663.14,682.737 1663.7,682.737 1664.26,682.737 1664.82,682.737 1665.38,682.737 1665.94,682.737 1666.5,682.737 1667.06,682.737 1667.62,682.737 1668.18,682.737 1668.74,682.737 1669.3,682.737 1669.85,682.737 1670.41,682.737 1670.97,682.737 1671.53,682.737 1672.09,682.737 1672.65,682.737 1673.21,682.737 1673.77,682.737 1674.33,682.737 1674.89,682.737 1675.45,682.737 1676.01,682.737 1676.57,682.737 1677.13,682.737 1677.68,682.737 1678.24,682.737 1678.8,682.737 1679.36,682.737 1679.92,682.737 1680.48,682.737 1681.04,682.737 1681.6,682.737 1682.16,682.737 1682.72,682.737 1683.28,682.737 1683.84,682.737 1684.4,682.737 1684.95,682.737 1685.51,682.737 1686.07,682.737 1686.63,682.737 1687.19,682.737 1687.75,682.737 1688.31,682.737 1688.87,682.737 1689.43,682.737 1689.99,682.737 1690.55,682.737 1691.11,682.737 1691.67,682.737 1692.23,682.737 1692.78,682.737 1693.34,682.737 1693.9,682.737 1694.46,682.737 1695.02,682.737 1695.58,682.737 1696.14,682.737 1696.7,682.737 1697.26,682.737 1697.82,682.737 1698.38,682.737 1698.94,682.737 1699.5,682.737 1700.05,682.737 1700.61,682.737 1701.17,682.737 1701.73,682.737 1702.29,682.737 1702.85,682.737 1703.41,682.737 1703.97,682.737 1704.53,682.737 1705.09,682.737 1705.65,682.737 1706.21,682.737 1706.77,682.737 1707.32,682.737 1707.88,682.737 1708.44,682.737 1709,682.737 1709.56,682.737 1710.12,682.737 1710.68,682.737 1711.24,682.737 1711.8,682.737 1712.36,682.737 1712.92,682.737 1713.48,682.737 1714.04,682.737 1714.6,682.737 1715.15,682.737 1715.71,682.737 1716.27,682.737 1716.83,682.737 1717.39,682.737 1717.95,682.737 1718.51,682.737 1719.07,682.737 1719.63,682.737 1720.19,682.737 1720.75,682.737 1721.31,682.737 1721.87,682.737 1722.42,682.737 1722.98,682.737 1723.54,682.737 1724.1,682.737 1724.66,682.737 1725.22,682.737 1725.78,682.737 1726.34,682.737 1726.9,682.737 1727.46,682.737 1728.02,682.737 1728.58,682.737 1729.14,682.737 1729.69,682.737 1730.25,682.737 1730.81,682.737 1731.37,682.737 1731.93,682.737 1732.49,682.737 1733.05,682.737 1733.61,682.737 1734.17,682.737 1734.73,682.737 1735.29,682.737 1735.85,682.737 1736.41,682.737 1736.97,682.737 1737.52,682.737 1738.08,682.737 1738.64,682.737 1739.2,682.737 1739.76,682.737 1740.32,682.737 1740.88,682.737 1741.44,682.737 1742,682.737 1742.56,682.737 1743.12,682.737 1743.68,682.737 1744.24,682.737 1744.79,682.737 1745.35,682.737 1745.91,682.737 1746.47,682.737 1747.03,682.737 1747.59,682.737 1748.15,682.737 1748.71,682.737 1749.27,682.737 1749.83,682.737 1750.39,682.737 1750.95,682.737 1751.51,682.737 1752.06,682.737 1752.62,682.737 1753.18,682.737 1753.74,682.737 1754.3,682.737 1754.86,682.737 1755.42,682.737 1755.98,682.737 1756.54,682.737 1757.1,682.737 1757.66,682.737 1758.22,682.737 1758.78,682.737 1759.34,682.737 1759.89,682.737 1760.45,682.737 1761.01,682.737 1761.57,682.737 1762.13,682.737 1762.69,682.737 1763.25,682.737 1763.81,682.737 1764.37,682.737 1764.93,682.737 1765.49,682.737 1766.05,682.737 1766.61,682.737 1767.16,682.737 1767.72,682.737 1768.28,682.737 1768.84,682.737 1769.4,682.737 1769.96,682.737 1770.52,682.737 1771.08,682.737 1771.64,682.737 1772.2,682.737 1772.76,682.737 1773.32,682.737 1773.88,682.737 1774.43,682.737 1774.99,682.737 1775.55,682.737 1776.11,682.737 1776.67,682.737 1777.23,682.737 1777.79,682.737 1778.35,682.737 1778.91,682.737 1779.47,682.737 1780.03,682.737 1780.59,682.737 1781.15,682.737 1781.71,682.737 1782.26,682.737 1782.82,682.737 1783.38,682.737 1783.94,682.737 1784.5,682.737 1785.06,682.737 1785.62,682.737 1786.18,682.737 1786.74,682.737 1787.3,682.737 1787.86,682.737 1788.42,682.737 1788.98,682.737 1789.53,682.737 1790.09,682.737 1790.65,682.737 1791.21,682.737 1791.77,682.737 1792.33,682.737 1792.89,682.737 1793.45,682.737 1794.01,682.737 1794.57,682.737 1795.13,682.737 1795.69,682.737 1796.25,682.737 1796.8,682.737 1797.36,682.737 1797.92,682.737 1798.48,682.737 1799.04,682.737 1799.6,682.737 1800.16,682.737 1800.72,682.737 1801.28,682.737 1801.84,682.737 1802.4,682.737 1802.96,682.737 1803.52,682.737 1804.08,682.737 1804.63,682.737 1805.19,682.737 1805.75,682.737 1806.31,682.737 1806.87,682.737 1807.43,682.737 1807.99,682.737 1808.55,682.737 1809.11,682.737 1809.67,682.737 1810.23,682.737 1810.79,682.737 1811.35,682.737 1811.9,682.737 1812.46,682.737 1813.02,682.737 1813.58,682.737 1814.14,682.737 1814.7,682.737 1815.26,682.737 1815.82,682.737 1816.38,682.737 1816.94,682.737 1817.5,682.737 1818.06,682.737 1818.62,682.737 1819.18,682.737 1819.73,682.737 1820.29,682.737 1820.85,682.737 1821.41,682.737 1821.97,682.737 1822.53,682.737 1823.09,682.737 1823.65,682.737 1824.21,682.737 1824.77,682.737 1825.33,682.737 1825.89,682.737 1826.45,682.737 1827,682.737 1827.56,682.737 1828.12,682.737 1828.68,682.737 1829.24,682.737 1829.8,682.737 1830.36,682.737 1830.92,682.737 1831.48,682.737 1832.04,682.737 1832.6,682.737 1833.16,682.737 1833.72,682.737 1834.27,682.737 1834.83,682.737 1835.39,682.737 1835.95,682.737 1836.51,682.737 1837.07,682.737 1837.63,682.737 1838.19,682.737 \"/>\n<path clip-path=\"url(#clip823)\" d=\"M720.247 684.606 L720.806 684.606 L721.365 684.606 L721.924 684.606 L722.484 684.606 L723.043 684.606 L723.602 684.606 L724.161 684.606 L724.721 684.606 L725.28 684.606 L725.839 684.606 L726.398 684.606 L726.958 684.606 L727.517 684.606 L728.076 684.606 L728.635 684.606 L729.195 684.606 L729.754 684.606 L730.313 684.606 L730.872 684.606 L731.432 684.606 L731.991 684.606 L732.55 684.606 L733.109 684.606 L733.669 684.606 L734.228 684.606 L734.787 684.606 L735.346 684.606 L735.906 684.606 L736.465 684.606 L737.024 684.606 L737.583 684.606 L738.143 684.606 L738.702 684.606 L739.261 684.606 L739.82 684.606 L740.38 684.606 L740.939 684.606 L741.498 684.606 L742.057 684.606 L742.617 684.606 L743.176 684.606 L743.735 684.606 L744.294 684.606 L744.854 684.606 L745.413 684.606 L745.972 684.606 L746.531 684.606 L747.091 684.606 L747.65 684.606 L748.209 684.606 L748.768 684.606 L749.328 684.606 L749.887 684.606 L750.446 684.606 L751.005 684.606 L751.565 684.606 L752.124 684.606 L752.683 684.606 L753.242 684.606 L753.802 684.606 L754.361 684.606 L754.92 684.606 L755.479 684.606 L756.039 684.606 L756.598 684.606 L757.157 684.606 L757.716 684.606 L758.276 684.606 L758.835 684.606 L759.394 684.606 L759.953 684.606 L760.513 684.606 L761.072 684.606 L761.631 684.606 L762.19 684.606 L762.75 684.606 L763.309 684.606 L763.868 684.606 L764.427 684.606 L764.987 684.606 L765.546 684.606 L766.105 684.606 L766.664 684.606 L767.224 684.606 L767.783 684.606 L768.342 684.606 L768.901 684.606 L769.461 684.606 L770.02 684.606 L770.579 684.606 L771.138 684.606 L771.698 684.606 L772.257 684.606 L772.816 684.606 L773.375 684.606 L773.935 684.606 L774.494 684.606 L775.053 684.606 L775.612 684.606 L776.172 684.606 L776.731 684.606 L777.29 684.606 L777.849 684.606 L778.409 684.606 L778.968 684.606 L779.527 684.606 L780.086 684.606 L780.646 684.606 L781.205 684.606 L781.764 684.606 L782.323 684.606 L782.883 684.606 L783.442 684.606 L784.001 684.606 L784.56 684.606 L785.12 684.606 L785.679 684.606 L786.238 684.606 L786.797 684.606 L787.357 684.606 L787.916 684.606 L788.475 684.606 L789.034 684.606 L789.594 684.606 L790.153 684.606 L790.712 684.606 L791.271 684.606 L791.831 684.606 L792.39 684.606 L792.949 684.606 L793.508 684.606 L794.068 684.606 L794.627 684.606 L795.186 684.606 L795.745 684.606 L796.305 684.606 L796.864 684.606 L797.423 684.606 L797.982 684.606 L798.542 684.606 L799.101 684.606 L799.66 684.606 L800.219 684.606 L800.779 684.606 L801.338 684.606 L801.897 684.606 L802.456 684.606 L803.016 684.606 L803.575 684.606 L804.134 684.606 L804.693 684.606 L805.253 684.606 L805.812 684.606 L806.371 684.606 L806.931 684.606 L807.49 684.606 L808.049 684.606 L808.608 684.606 L809.168 684.606 L809.727 684.606 L810.286 684.606 L810.845 684.606 L811.405 684.606 L811.964 684.606 L812.523 684.606 L813.082 684.606 L813.642 684.606 L814.201 684.606 L814.76 684.606 L815.319 684.606 L815.879 684.606 L816.438 684.606 L816.997 684.606 L817.556 684.606 L818.116 684.606 L818.675 684.606 L819.234 684.606 L819.793 684.606 L820.353 684.606 L820.912 684.606 L821.471 684.606 L822.03 684.606 L822.59 684.606 L823.149 684.606 L823.708 684.606 L824.267 684.606 L824.827 684.606 L825.386 684.606 L825.945 684.606 L826.504 684.606 L827.064 684.606 L827.623 684.606 L828.182 684.606 L828.741 684.606 L829.301 684.606 L829.86 684.606 L830.419 684.606 L830.978 684.606 L831.538 684.606 L832.097 684.606 L832.656 684.606 L833.215 684.606 L833.775 684.606 L834.334 684.606 L834.893 684.606 L835.452 684.606 L836.012 684.606 L836.571 684.606 L837.13 684.606 L837.689 684.606 L838.249 684.606 L838.808 684.606 L839.367 684.606 L839.926 684.606 L840.486 684.606 L841.045 684.606 L841.604 684.606 L842.163 684.606 L842.723 684.606 L843.282 684.606 L843.841 684.606 L844.4 684.606 L844.96 684.606 L845.519 684.606 L846.078 684.606 L846.637 684.606 L847.197 684.606 L847.756 684.606 L848.315 684.606 L848.874 684.606 L849.434 684.606 L849.993 684.606 L850.552 684.606 L851.111 684.606 L851.671 684.606 L852.23 684.606 L852.789 684.606 L853.348 684.606 L853.908 684.606 L854.467 684.606 L855.026 684.606 L855.585 684.606 L856.145 684.606 L856.704 684.606 L857.263 684.606 L857.822 684.606 L858.382 684.606 L858.941 684.606 L859.5 684.606 L860.059 684.606 L860.619 684.606 L861.178 684.606 L861.737 684.606 L862.296 684.606 L862.856 684.606 L863.415 684.606 L863.974 684.606 L864.533 684.606 L865.093 684.606 L865.652 684.606 L866.211 684.606 L866.77 684.606 L867.33 684.606 L867.889 684.606 L868.448 684.606 L869.007 684.606 L869.567 684.606 L870.126 684.606 L870.685 684.606 L871.244 684.606 L871.804 684.606 L872.363 684.606 L872.922 684.606 L873.481 684.606 L874.041 684.606 L874.6 684.606 L875.159 684.606 L875.718 684.606 L876.278 684.606 L876.837 684.606 L877.396 684.606 L877.955 684.606 L878.515 684.606 L879.074 684.606 L879.633 684.606 L880.192 684.606 L880.752 684.606 L881.311 684.606 L881.87 684.606 L882.429 684.606 L882.989 684.606 L883.548 684.606 L884.107 684.606 L884.666 684.606 L885.226 684.606 L885.785 684.606 L886.344 684.606 L886.903 684.606 L887.463 684.606 L888.022 684.606 L888.581 684.606 L889.14 684.606 L889.7 684.606 L890.259 684.606 L890.818 684.606 L891.377 684.606 L891.937 684.606 L892.496 684.606 L893.055 684.606 L893.614 684.606 L894.174 684.606 L894.733 684.606 L895.292 684.606 L895.851 684.606 L896.411 684.606 L896.97 684.606 L897.529 684.606 L898.088 684.606 L898.648 684.606 L899.207 684.606 L899.766 684.606 L900.325 684.606 L900.885 684.606 L901.444 684.606 L902.003 684.606 L902.562 684.606 L903.122 684.606 L903.681 684.606 L904.24 684.606 L904.799 684.606 L905.359 684.606 L905.918 684.606 L906.477 684.606 L907.036 684.606 L907.596 684.606 L908.155 684.606 L908.714 684.606 L909.273 684.606 L909.833 684.606 L910.392 684.606 L910.951 684.606 L911.51 684.606 L912.07 684.606 L912.629 684.606 L913.188 684.606 L913.747 684.606 L914.307 684.606 L914.866 684.606 L915.425 684.606 L915.984 684.606 L916.544 684.606 L917.103 684.606 L917.662 684.606 L918.221 684.606 L918.781 684.606 L919.34 684.606 L919.899 684.606 L920.458 684.606 L921.018 684.606 L921.577 684.606 L922.136 684.606 L922.695 684.606 L923.255 684.606 L923.814 684.606 L924.373 684.606 L924.932 684.606 L925.492 684.606 L926.051 684.606 L926.61 684.606 L927.169 684.606 L927.729 684.606 L928.288 684.606 L928.847 684.606 L929.406 684.606 L929.966 684.606 L930.525 684.606 L931.084 684.606 L931.644 684.606 L932.203 684.606 L932.762 684.606 L933.321 684.606 L933.881 684.606 L934.44 684.606 L934.999 684.606 L935.558 684.606 L936.118 684.606 L936.677 684.606 L937.236 684.606 L937.795 684.606 L938.355 684.606 L938.914 684.606 L939.473 684.606 L940.032 684.606 L940.592 684.606 L941.151 684.606 L941.71 684.606 L942.269 684.606 L942.829 684.606 L943.388 684.606 L943.947 684.606 L944.506 684.606 L945.066 684.606 L945.625 684.606 L946.184 684.606 L946.743 684.606 L947.303 684.606 L947.862 684.606 L948.421 684.606 L948.98 684.606 L949.54 684.606 L950.099 684.606 L950.658 684.606 L951.217 684.606 L951.777 684.606 L952.336 684.606 L952.895 684.606 L953.454 684.606 L954.014 684.606 L954.573 684.606 L955.132 684.606 L955.691 684.606 L956.251 684.606 L956.81 684.606 L957.369 684.606 L957.928 684.606 L958.488 684.606 L959.047 684.606 L959.606 684.606 L960.165 684.606 L960.725 684.606 L961.284 684.606 L961.843 684.606 L962.402 684.606 L962.962 684.606 L963.521 684.606 L964.08 684.606 L964.639 684.606 L965.199 684.606 L965.758 684.606 L966.317 684.606 L966.876 684.606 L967.436 684.606 L967.995 684.606 L968.554 684.606 L969.113 684.606 L969.673 684.606 L970.232 684.606 L970.791 684.606 L971.35 684.606 L971.91 684.606 L972.469 684.606 L973.028 684.606 L973.587 684.606 L974.147 684.606 L974.706 684.606 L975.265 684.606 L975.824 684.606 L976.384 684.606 L976.943 684.606 L977.502 684.606 L978.061 684.606 L978.621 684.606 L979.18 684.606 L979.739 684.606 L980.298 684.606 L980.858 684.606 L981.417 684.606 L981.976 684.606 L982.535 684.606 L983.095 684.606 L983.654 684.606 L984.213 684.606 L984.772 684.606 L985.332 684.606 L985.891 684.606 L986.45 684.606 L987.009 684.606 L987.569 684.606 L988.128 684.606 L988.687 684.606 L989.246 684.606 L989.806 684.606 L990.365 684.606 L990.924 684.606 L991.483 684.606 L992.043 684.606 L992.602 684.606 L993.161 684.606 L993.72 684.606 L994.28 684.606 L994.839 684.606 L995.398 684.606 L995.957 684.606 L996.517 684.606 L997.076 684.606 L997.635 684.606 L998.194 684.606 L998.754 684.606 L999.313 684.606 L999.872 684.606 L1000.43 684.606 L1000.99 684.606 L1001.55 684.606 L1002.11 684.606 L1002.67 684.606 L1003.23 684.606 L1003.79 684.606 L1004.35 684.606 L1004.91 684.606 L1005.46 684.606 L1006.02 684.606 L1006.58 684.606 L1007.14 684.606 L1007.7 684.606 L1008.26 684.606 L1008.82 684.606 L1009.38 684.606 L1009.94 684.606 L1010.5 684.606 L1011.06 684.606 L1011.62 684.606 L1012.18 684.606 L1012.73 684.606 L1013.29 684.606 L1013.85 684.606 L1014.41 684.606 L1014.97 684.606 L1015.53 684.606 L1016.09 684.606 L1016.65 684.606 L1017.21 684.606 L1017.77 684.606 L1018.33 684.606 L1018.89 684.606 L1019.45 684.606 L1020.01 684.606 L1020.56 684.606 L1021.12 684.606 L1021.68 684.606 L1022.24 684.606 L1022.8 684.606 L1023.36 684.606 L1023.92 684.606 L1024.48 684.606 L1025.04 684.606 L1025.6 684.606 L1026.16 684.606 L1026.72 684.606 L1027.28 684.606 L1027.83 684.606 L1028.39 684.606 L1028.95 684.606 L1029.51 684.606 L1030.07 684.606 L1030.63 684.606 L1031.19 684.606 L1031.75 684.606 L1032.31 684.606 L1032.87 684.606 L1033.43 684.606 L1033.99 684.606 L1034.55 684.606 L1035.1 684.606 L1035.66 684.606 L1036.22 684.606 L1036.78 684.606 L1037.34 684.606 L1037.9 684.606 L1038.46 684.606 L1039.02 684.606 L1039.58 684.606 L1040.14 684.606 L1040.7 684.606 L1041.26 684.606 L1041.82 684.606 L1042.38 684.606 L1042.93 684.606 L1043.49 684.606 L1044.05 684.606 L1044.61 684.606 L1045.17 684.606 L1045.73 684.606 L1046.29 684.606 L1046.85 684.606 L1047.41 684.606 L1047.97 684.606 L1048.53 684.606 L1049.09 684.606 L1049.65 684.606 L1050.2 684.606 L1050.76 684.606 L1051.32 684.606 L1051.88 684.606 L1052.44 684.606 L1053 684.606 L1053.56 684.606 L1054.12 684.606 L1054.68 684.606 L1055.24 684.606 L1055.8 684.606 L1056.36 684.606 L1056.92 684.606 L1057.48 684.606 L1058.03 684.606 L1058.59 684.606 L1059.15 684.606 L1059.71 684.606 L1060.27 684.606 L1060.83 684.606 L1061.39 684.606 L1061.95 684.606 L1062.51 684.606 L1063.07 684.606 L1063.63 684.606 L1064.19 684.606 L1064.75 684.606 L1065.3 684.606 L1065.86 684.606 L1066.42 684.606 L1066.98 684.606 L1067.54 684.606 L1068.1 684.606 L1068.66 684.606 L1069.22 684.606 L1069.78 684.606 L1070.34 684.606 L1070.9 684.606 L1071.46 684.606 L1072.02 684.606 L1072.57 684.606 L1073.13 684.606 L1073.69 684.606 L1074.25 684.606 L1074.81 684.606 L1075.37 684.606 L1075.93 684.606 L1076.49 684.606 L1077.05 684.606 L1077.61 684.606 L1078.17 684.606 L1078.73 684.606 L1079.29 684.606 L1079.85 684.606 L1080.4 684.606 L1080.96 684.606 L1081.52 684.606 L1082.08 684.606 L1082.64 684.606 L1083.2 684.606 L1083.76 684.606 L1084.32 684.606 L1084.88 684.606 L1085.44 684.606 L1086 684.606 L1086.56 684.606 L1087.12 684.606 L1087.67 684.606 L1088.23 684.606 L1088.79 684.606 L1089.35 684.606 L1089.91 684.606 L1090.47 684.606 L1091.03 684.606 L1091.59 684.606 L1092.15 684.606 L1092.71 684.606 L1093.27 684.606 L1093.83 684.606 L1094.39 684.606 L1094.94 684.606 L1095.5 684.606 L1096.06 684.606 L1096.62 684.606 L1097.18 684.606 L1097.74 684.606 L1098.3 684.606 L1098.86 684.606 L1099.42 684.606 L1099.98 684.606 L1100.54 684.606 L1101.1 684.606 L1101.66 684.606 L1102.22 684.606 L1102.77 684.606 L1103.33 684.606 L1103.89 684.606 L1104.45 684.606 L1105.01 684.606 L1105.57 684.606 L1106.13 684.606 L1106.69 684.606 L1107.25 684.606 L1107.81 684.606 L1108.37 684.606 L1108.93 684.606 L1109.49 684.606 L1110.04 684.606 L1110.6 684.606 L1111.16 684.606 L1111.72 684.606 L1112.28 684.606 L1112.84 684.606 L1113.4 684.606 L1113.96 684.606 L1114.52 684.606 L1115.08 684.606 L1115.64 684.606 L1116.2 684.606 L1116.76 684.606 L1117.31 684.606 L1117.87 684.606 L1118.43 684.606 L1118.99 684.606 L1119.55 684.606 L1120.11 684.606 L1120.67 684.606 L1121.23 684.606 L1121.79 684.606 L1122.35 684.606 L1122.91 684.606 L1123.47 684.606 L1124.03 684.606 L1124.59 684.606 L1125.14 684.606 L1125.7 684.606 L1126.26 684.606 L1126.82 684.606 L1127.38 684.606 L1127.94 684.606 L1128.5 684.606 L1129.06 684.606 L1129.62 684.606 L1130.18 684.606 L1130.74 684.606 L1131.3 684.606 L1131.86 684.606 L1132.41 684.606 L1132.97 684.606 L1133.53 684.606 L1134.09 684.606 L1134.65 684.606 L1135.21 684.606 L1135.77 684.606 L1136.33 684.606 L1136.89 684.606 L1137.45 684.606 L1138.01 684.606 L1138.57 684.606 L1139.13 684.606 L1139.68 684.606 L1140.24 684.606 L1140.8 684.606 L1141.36 684.606 L1141.92 684.606 L1142.48 684.606 L1143.04 684.606 L1143.6 684.606 L1144.16 684.606 L1144.72 684.606 L1145.28 684.606 L1145.84 684.606 L1146.4 684.606 L1146.96 684.606 L1147.51 684.606 L1148.07 684.606 L1148.63 684.606 L1149.19 684.606 L1149.75 684.606 L1150.31 684.606 L1150.87 684.606 L1151.43 684.606 L1151.99 684.606 L1152.55 684.606 L1153.11 684.606 L1153.67 684.606 L1154.23 684.606 L1154.78 684.606 L1155.34 684.606 L1155.9 684.606 L1156.46 684.606 L1157.02 684.606 L1157.58 684.606 L1158.14 684.606 L1158.7 684.606 L1159.26 684.606 L1159.82 684.606 L1160.38 684.606 L1160.94 684.606 L1161.5 684.606 L1162.05 684.606 L1162.61 684.606 L1163.17 684.606 L1163.73 684.606 L1164.29 684.606 L1164.85 684.606 L1165.41 684.606 L1165.97 684.606 L1166.53 684.606 L1167.09 684.606 L1167.65 684.606 L1168.21 684.606 L1168.77 684.606 L1169.33 684.606 L1169.88 684.606 L1170.44 684.606 L1171 684.606 L1171.56 684.606 L1172.12 684.606 L1172.68 684.606 L1173.24 684.606 L1173.8 684.606 L1174.36 684.606 L1174.92 684.606 L1175.48 684.606 L1176.04 684.606 L1176.6 684.606 L1177.15 684.606 L1177.71 684.606 L1178.27 684.606 L1178.83 684.606 L1179.39 684.606 L1179.95 684.606 L1180.51 684.606 L1181.07 684.606 L1181.63 684.606 L1182.19 684.606 L1182.75 684.606 L1183.31 684.606 L1183.87 684.606 L1184.43 684.606 L1184.98 684.606 L1185.54 684.606 L1186.1 684.606 L1186.66 684.606 L1187.22 684.606 L1187.78 684.606 L1188.34 684.606 L1188.9 684.606 L1189.46 684.606 L1190.02 684.606 L1190.58 684.606 L1191.14 684.606 L1191.7 684.606 L1192.25 684.606 L1192.81 684.606 L1193.37 684.606 L1193.93 684.606 L1194.49 684.606 L1195.05 684.606 L1195.61 684.606 L1196.17 684.606 L1196.73 684.606 L1197.29 684.606 L1197.85 684.606 L1198.41 684.606 L1198.97 684.606 L1199.52 684.606 L1200.08 684.606 L1200.64 684.606 L1201.2 684.606 L1201.76 684.606 L1202.32 684.606 L1202.88 684.606 L1203.44 684.606 L1204 684.606 L1204.56 684.606 L1205.12 684.606 L1205.68 684.606 L1206.24 684.606 L1206.8 684.606 L1207.35 684.606 L1207.91 684.606 L1208.47 684.606 L1209.03 684.606 L1209.59 684.606 L1210.15 684.606 L1210.71 684.606 L1211.27 684.606 L1211.83 684.606 L1212.39 684.606 L1212.95 684.606 L1213.51 684.606 L1214.07 684.606 L1214.62 684.606 L1215.18 684.606 L1215.74 684.606 L1216.3 684.606 L1216.86 684.606 L1217.42 684.606 L1217.98 684.606 L1218.54 684.606 L1219.1 684.606 L1219.66 684.606 L1220.22 684.606 L1220.78 684.606 L1221.34 684.606 L1221.89 684.606 L1222.45 684.606 L1223.01 684.606 L1223.57 684.606 L1224.13 684.606 L1224.69 684.606 L1225.25 684.606 L1225.81 684.606 L1226.37 684.606 L1226.93 684.606 L1227.49 684.606 L1228.05 684.606 L1228.61 684.606 L1229.17 684.606 L1229.72 684.606 L1230.28 684.606 L1230.84 684.606 L1231.4 684.606 L1231.96 684.606 L1232.52 684.606 L1233.08 684.606 L1233.64 684.606 L1234.2 684.606 L1234.76 684.606 L1235.32 684.606 L1235.88 684.606 L1236.44 684.606 L1236.99 684.606 L1237.55 684.606 L1238.11 684.606 L1238.67 684.606 L1239.23 684.606 L1239.79 684.606 L1240.35 684.606 L1240.91 684.606 L1241.47 684.606 L1242.03 684.606 L1242.59 684.606 L1243.15 684.606 L1243.71 684.606 L1244.26 684.606 L1244.82 684.606 L1245.38 684.606 L1245.94 684.606 L1246.5 684.606 L1247.06 684.606 L1247.62 684.606 L1248.18 684.606 L1248.74 684.606 L1249.3 684.606 L1249.86 684.606 L1250.42 684.606 L1250.98 684.606 L1251.54 684.606 L1252.09 684.606 L1252.65 684.606 L1253.21 684.606 L1253.77 684.606 L1254.33 684.606 L1254.89 684.606 L1255.45 684.606 L1256.01 684.606 L1256.57 684.606 L1257.13 684.606 L1257.69 684.606 L1258.25 684.606 L1258.81 684.606 L1259.36 684.606 L1259.92 684.606 L1260.48 684.606 L1261.04 684.606 L1261.6 684.606 L1262.16 684.606 L1262.72 684.606 L1263.28 684.606 L1263.84 684.606 L1264.4 684.606 L1264.96 684.606 L1265.52 684.606 L1266.08 684.606 L1266.63 684.606 L1267.19 684.606 L1267.75 684.606 L1268.31 684.606 L1268.87 684.606 L1269.43 684.606 L1269.99 684.606 L1270.55 684.606 L1271.11 684.606 L1271.67 684.606 L1272.23 684.606 L1272.79 684.606 L1273.35 684.606 L1273.91 684.606 L1274.46 684.606 L1275.02 684.606 L1275.58 684.606 L1276.14 684.606 L1276.7 684.606 L1277.26 684.606 L1277.82 684.606 L1278.38 684.606 L1278.94 684.606 L1279.5 684.606 L1280.06 684.606 L1280.62 684.606 L1281.18 684.606 L1281.73 684.606 L1282.29 684.606 L1282.85 684.606 L1283.41 684.606 L1283.97 684.606 L1284.53 684.606 L1285.09 684.606 L1285.65 684.606 L1286.21 684.606 L1286.77 684.606 L1287.33 684.606 L1287.89 684.606 L1288.45 684.606 L1289 684.606 L1289.56 684.606 L1290.12 684.606 L1290.68 684.606 L1291.24 684.606 L1291.8 684.606 L1292.36 684.606 L1292.92 684.606 L1293.48 684.606 L1294.04 684.606 L1294.6 684.606 L1295.16 684.606 L1295.72 684.606 L1296.28 684.606 L1296.83 684.606 L1297.39 684.606 L1297.95 684.606 L1298.51 684.606 L1299.07 684.606 L1299.63 684.606 L1300.19 684.606 L1300.75 684.606 L1301.31 684.606 L1301.87 684.606 L1302.43 684.606 L1302.99 684.606 L1303.55 684.606 L1304.1 684.606 L1304.66 684.606 L1305.22 684.606 L1305.78 684.606 L1306.34 684.606 L1306.9 684.606 L1307.46 684.606 L1308.02 684.606 L1308.58 684.606 L1309.14 684.606 L1309.7 684.606 L1310.26 684.606 L1310.82 684.606 L1311.38 684.606 L1311.93 684.606 L1312.49 684.606 L1313.05 684.606 L1313.61 684.606 L1314.17 684.606 L1314.73 684.606 L1315.29 684.606 L1315.85 684.606 L1316.41 684.606 L1316.97 684.606 L1317.53 684.606 L1318.09 684.606 L1318.65 684.606 L1319.2 684.606 L1319.76 684.606 L1320.32 684.606 L1320.88 684.606 L1321.44 684.606 L1322 684.606 L1322.56 684.606 L1323.12 684.606 L1323.68 684.606 L1324.24 684.606 L1324.8 684.606 L1325.36 684.606 L1325.92 684.606 L1326.47 684.606 L1327.03 684.606 L1327.59 684.606 L1328.15 684.606 L1328.71 684.606 L1329.27 684.606 L1329.83 684.606 L1330.39 684.606 L1330.95 684.606 L1331.51 684.606 L1332.07 684.606 L1332.63 684.606 L1333.19 684.606 L1333.75 684.606 L1334.3 684.606 L1334.86 684.606 L1335.42 684.606 L1335.98 684.606 L1336.54 684.606 L1337.1 684.606 L1337.66 684.606 L1338.22 684.606 L1338.78 684.606 L1339.34 684.606 L1339.9 684.606 L1340.46 684.606 L1341.02 684.606 L1341.57 684.606 L1342.13 684.606 L1342.69 684.606 L1343.25 684.606 L1343.81 684.606 L1344.37 684.606 L1344.93 684.606 L1345.49 684.606 L1346.05 684.606 L1346.61 684.606 L1347.17 684.606 L1347.73 684.606 L1348.29 684.606 L1348.84 684.606 L1349.4 684.606 L1349.96 684.606 L1350.52 684.606 L1351.08 684.606 L1351.64 684.606 L1352.2 684.606 L1352.76 684.606 L1353.32 684.606 L1353.88 684.606 L1354.44 684.606 L1355 684.606 L1355.56 684.606 L1356.12 684.606 L1356.67 684.606 L1357.23 684.606 L1357.79 684.606 L1358.35 684.606 L1358.91 684.606 L1359.47 684.606 L1360.03 684.606 L1360.59 684.606 L1361.15 684.606 L1361.71 684.606 L1362.27 684.606 L1362.83 684.606 L1363.39 684.606 L1363.94 684.606 L1364.5 684.606 L1365.06 684.606 L1365.62 684.606 L1366.18 684.606 L1366.74 684.606 L1367.3 684.606 L1367.86 684.606 L1368.42 684.606 L1368.98 684.606 L1369.54 684.606 L1370.1 684.606 L1370.66 684.606 L1371.21 684.606 L1371.77 684.606 L1372.33 684.606 L1372.89 684.606 L1373.45 684.606 L1374.01 684.606 L1374.57 684.606 L1375.13 684.606 L1375.69 684.606 L1376.25 684.606 L1376.81 684.606 L1377.37 684.606 L1377.93 684.606 L1378.49 684.606 L1379.04 684.606 L1379.6 684.606 L1380.16 684.606 L1380.72 684.606 L1381.28 684.606 L1381.84 684.606 L1382.4 684.606 L1382.96 684.606 L1383.52 684.606 L1384.08 684.606 L1384.64 684.606 L1385.2 684.606 L1385.76 684.606 L1386.31 684.606 L1386.87 684.606 L1387.43 684.606 L1387.99 684.606 L1388.55 684.606 L1389.11 684.606 L1389.67 684.606 L1390.23 684.606 L1390.79 684.606 L1391.35 684.606 L1391.91 684.606 L1392.47 684.606 L1393.03 684.606 L1393.58 684.606 L1394.14 684.606 L1394.7 684.606 L1395.26 684.606 L1395.82 684.606 L1396.38 684.606 L1396.94 684.606 L1397.5 684.606 L1398.06 684.606 L1398.62 684.606 L1399.18 684.606 L1399.74 684.606 L1400.3 684.606 L1400.86 684.606 L1401.41 684.606 L1401.97 684.606 L1402.53 684.606 L1403.09 684.606 L1403.65 684.606 L1404.21 684.606 L1404.77 684.606 L1405.33 684.606 L1405.89 684.606 L1406.45 684.606 L1407.01 684.606 L1407.57 684.606 L1408.13 684.606 L1408.68 684.606 L1409.24 684.606 L1409.8 684.606 L1410.36 684.606 L1410.92 684.606 L1411.48 684.606 L1412.04 684.606 L1412.6 684.606 L1413.16 684.606 L1413.72 684.606 L1414.28 684.606 L1414.84 684.606 L1415.4 684.606 L1415.95 684.606 L1416.51 684.606 L1417.07 684.606 L1417.63 684.606 L1418.19 684.606 L1418.75 684.606 L1419.31 684.606 L1419.87 684.606 L1420.43 684.606 L1420.99 684.606 L1421.55 684.606 L1422.11 684.606 L1422.67 684.606 L1423.23 684.606 L1423.78 684.606 L1424.34 684.606 L1424.9 684.606 L1425.46 684.606 L1426.02 684.606 L1426.58 684.606 L1427.14 684.606 L1427.7 684.606 L1428.26 684.606 L1428.82 684.606 L1429.38 684.606 L1429.94 684.606 L1430.5 684.606 L1431.05 684.606 L1431.61 684.606 L1432.17 684.606 L1432.73 684.606 L1433.29 684.606 L1433.85 684.606 L1434.41 684.606 L1434.97 684.606 L1435.53 684.606 L1436.09 684.606 L1436.65 684.606 L1437.21 684.606 L1437.77 684.606 L1438.33 684.606 L1438.88 684.606 L1439.44 684.606 L1440 684.606 L1440.56 684.606 L1441.12 684.606 L1441.68 684.606 L1442.24 684.606 L1442.8 684.606 L1443.36 684.606 L1443.92 684.606 L1444.48 684.606 L1445.04 684.606 L1445.6 684.606 L1446.15 684.606 L1446.71 684.606 L1447.27 684.606 L1447.83 684.606 L1448.39 684.606 L1448.95 684.606 L1449.51 684.606 L1450.07 684.606 L1450.63 684.606 L1451.19 684.606 L1451.75 684.606 L1452.31 684.606 L1452.87 684.606 L1453.42 684.606 L1453.98 684.606 L1454.54 684.606 L1455.1 684.606 L1455.66 684.606 L1456.22 684.606 L1456.78 684.606 L1457.34 684.606 L1457.9 684.606 L1458.46 684.606 L1459.02 684.606 L1459.58 684.606 L1460.14 684.606 L1460.7 684.606 L1461.25 684.606 L1461.81 684.606 L1462.37 684.606 L1462.93 684.606 L1463.49 684.606 L1464.05 684.606 L1464.61 684.606 L1465.17 684.606 L1465.73 684.606 L1466.29 684.606 L1466.85 684.606 L1467.41 684.606 L1467.97 684.606 L1468.52 684.606 L1469.08 684.606 L1469.64 684.606 L1470.2 684.606 L1470.76 684.606 L1471.32 684.606 L1471.88 684.606 L1472.44 684.606 L1473 684.606 L1473.56 684.606 L1474.12 684.606 L1474.68 684.606 L1475.24 684.606 L1475.79 684.606 L1476.35 684.606 L1476.91 684.606 L1477.47 684.606 L1478.03 684.606 L1478.59 684.606 L1479.15 684.606 L1479.71 684.606 L1480.27 684.606 L1480.83 684.606 L1481.39 684.606 L1481.95 684.606 L1482.51 684.606 L1483.07 684.606 L1483.62 684.606 L1484.18 684.606 L1484.74 684.606 L1485.3 684.606 L1485.86 684.606 L1486.42 684.606 L1486.98 684.606 L1487.54 684.606 L1488.1 684.606 L1488.66 684.606 L1489.22 684.606 L1489.78 684.606 L1490.34 684.606 L1490.89 684.606 L1491.45 684.606 L1492.01 684.606 L1492.57 684.606 L1493.13 684.606 L1493.69 684.606 L1494.25 684.606 L1494.81 684.606 L1495.37 684.606 L1495.93 684.606 L1496.49 684.606 L1497.05 684.606 L1497.61 684.606 L1498.16 684.606 L1498.72 684.606 L1499.28 684.606 L1499.84 684.606 L1500.4 684.606 L1500.96 684.606 L1501.52 684.606 L1502.08 684.606 L1502.64 684.606 L1503.2 684.606 L1503.76 684.606 L1504.32 684.606 L1504.88 684.606 L1505.44 684.606 L1505.99 684.606 L1506.55 684.606 L1507.11 684.606 L1507.67 684.606 L1508.23 684.606 L1508.79 684.606 L1509.35 684.606 L1509.91 684.606 L1510.47 684.606 L1511.03 684.606 L1511.59 684.606 L1512.15 684.606 L1512.71 684.606 L1513.26 684.606 L1513.82 684.606 L1514.38 684.606 L1514.94 684.606 L1515.5 684.606 L1516.06 684.606 L1516.62 684.606 L1517.18 684.606 L1517.74 684.606 L1518.3 684.606 L1518.86 684.606 L1519.42 684.606 L1519.98 684.606 L1520.53 684.606 L1521.09 684.606 L1521.65 684.606 L1522.21 684.606 L1522.77 684.606 L1523.33 684.606 L1523.89 684.606 L1524.45 684.606 L1525.01 684.606 L1525.57 684.606 L1526.13 684.606 L1526.69 684.606 L1527.25 684.606 L1527.81 684.606 L1528.36 684.606 L1528.92 684.606 L1529.48 684.606 L1530.04 684.606 L1530.6 684.606 L1531.16 684.606 L1531.72 684.606 L1532.28 684.606 L1532.84 684.606 L1533.4 684.606 L1533.96 684.606 L1534.52 684.606 L1535.08 684.606 L1535.63 684.606 L1536.19 684.606 L1536.75 684.606 L1537.31 684.606 L1537.87 684.606 L1538.43 684.606 L1538.99 684.606 L1539.55 684.606 L1540.11 684.606 L1540.67 684.606 L1541.23 684.606 L1541.79 684.606 L1542.35 684.606 L1542.9 684.606 L1543.46 684.606 L1544.02 684.606 L1544.58 684.606 L1545.14 684.606 L1545.7 684.606 L1546.26 684.606 L1546.82 684.606 L1547.38 684.606 L1547.94 684.606 L1548.5 684.606 L1549.06 684.606 L1549.62 684.606 L1550.18 684.606 L1550.73 684.606 L1551.29 684.606 L1551.85 684.606 L1552.41 684.606 L1552.97 684.606 L1553.53 684.606 L1554.09 684.606 L1554.65 684.606 L1555.21 684.606 L1555.77 684.606 L1556.33 684.606 L1556.89 684.606 L1557.45 684.606 L1558 684.606 L1558.56 684.606 L1559.12 684.606 L1559.68 684.606 L1560.24 684.606 L1560.8 684.606 L1561.36 684.606 L1561.92 684.606 L1562.48 684.606 L1563.04 684.606 L1563.6 684.606 L1564.16 684.606 L1564.72 684.606 L1565.28 684.606 L1565.83 684.606 L1566.39 684.606 L1566.95 684.606 L1567.51 684.606 L1568.07 684.606 L1568.63 684.606 L1569.19 684.606 L1569.75 684.606 L1570.31 684.606 L1570.87 684.606 L1571.43 684.606 L1571.99 684.606 L1572.55 684.606 L1573.1 684.606 L1573.66 684.606 L1574.22 684.606 L1574.78 684.606 L1575.34 684.606 L1575.9 684.606 L1576.46 684.606 L1577.02 684.606 L1577.58 684.606 L1578.14 684.606 L1578.7 684.606 L1579.26 684.606 L1579.82 684.606 L1580.37 684.606 L1580.93 684.606 L1581.49 684.606 L1582.05 684.606 L1582.61 684.606 L1583.17 684.606 L1583.73 684.606 L1584.29 684.606 L1584.85 684.606 L1585.41 684.606 L1585.97 684.606 L1586.53 684.606 L1587.09 684.606 L1587.65 684.606 L1588.2 684.606 L1588.76 684.606 L1589.32 684.606 L1589.88 684.606 L1590.44 684.606 L1591 684.606 L1591.56 684.606 L1592.12 684.606 L1592.68 684.606 L1593.24 684.606 L1593.8 684.606 L1594.36 684.606 L1594.92 684.606 L1595.47 684.606 L1596.03 684.606 L1596.59 684.606 L1597.15 684.606 L1597.71 684.606 L1598.27 684.606 L1598.83 684.606 L1599.39 684.606 L1599.95 684.606 L1600.51 684.606 L1601.07 684.606 L1601.63 684.606 L1602.19 684.606 L1602.74 684.606 L1603.3 684.606 L1603.86 684.606 L1604.42 684.606 L1604.98 684.606 L1605.54 684.606 L1606.1 684.606 L1606.66 684.606 L1607.22 684.606 L1607.78 684.606 L1608.34 684.606 L1608.9 684.606 L1609.46 684.606 L1610.02 684.606 L1610.57 684.606 L1611.13 684.606 L1611.69 684.606 L1612.25 684.606 L1612.81 684.606 L1613.37 684.606 L1613.93 684.606 L1614.49 684.606 L1615.05 684.606 L1615.61 684.606 L1616.17 684.606 L1616.73 684.606 L1617.29 684.606 L1617.84 684.606 L1618.4 684.606 L1618.96 684.606 L1619.52 684.606 L1620.08 684.606 L1620.64 684.606 L1621.2 684.606 L1621.76 684.606 L1622.32 684.606 L1622.88 684.606 L1623.44 684.606 L1624 684.606 L1624.56 684.606 L1625.11 684.606 L1625.67 684.606 L1626.23 684.606 L1626.79 684.606 L1627.35 684.606 L1627.91 684.606 L1628.47 684.606 L1629.03 684.606 L1629.59 684.606 L1630.15 684.606 L1630.71 684.606 L1631.27 684.606 L1631.83 684.606 L1632.39 684.606 L1632.94 684.606 L1633.5 684.606 L1634.06 684.606 L1634.62 684.606 L1635.18 684.606 L1635.74 684.606 L1636.3 684.606 L1636.86 684.606 L1637.42 684.606 L1637.98 684.606 L1638.54 684.606 L1639.1 684.606 L1639.66 684.606 L1640.21 684.606 L1640.77 684.606 L1641.33 684.606 L1641.89 684.606 L1642.45 684.606 L1643.01 684.606 L1643.57 684.606 L1644.13 684.606 L1644.69 684.606 L1645.25 684.606 L1645.81 684.606 L1646.37 684.606 L1646.93 684.606 L1647.48 684.606 L1648.04 684.606 L1648.6 684.606 L1649.16 684.606 L1649.72 684.606 L1650.28 684.606 L1650.84 684.606 L1651.4 684.606 L1651.96 684.606 L1652.52 684.606 L1653.08 684.606 L1653.64 684.606 L1654.2 684.606 L1654.76 684.606 L1655.31 684.606 L1655.87 684.606 L1656.43 684.606 L1656.99 684.606 L1657.55 684.606 L1658.11 684.606 L1658.67 684.606 L1659.23 684.606 L1659.79 684.606 L1660.35 684.606 L1660.91 684.606 L1661.47 684.606 L1662.03 684.606 L1662.58 684.606 L1663.14 684.606 L1663.7 684.606 L1664.26 684.606 L1664.82 684.606 L1665.38 684.606 L1665.94 684.606 L1666.5 684.606 L1667.06 684.606 L1667.62 684.606 L1668.18 684.606 L1668.74 684.606 L1669.3 684.606 L1669.85 684.606 L1670.41 684.606 L1670.97 684.606 L1671.53 684.606 L1672.09 684.606 L1672.65 684.606 L1673.21 684.606 L1673.77 684.606 L1674.33 684.606 L1674.89 684.606 L1675.45 684.606 L1676.01 684.606 L1676.57 684.606 L1677.13 684.606 L1677.68 684.606 L1678.24 684.606 L1678.8 684.606 L1679.36 684.606 L1679.92 684.606 L1680.48 684.606 L1681.04 684.606 L1681.6 684.606 L1682.16 684.606 L1682.72 684.606 L1683.28 684.606 L1683.84 684.606 L1684.4 684.606 L1684.95 684.606 L1685.51 684.606 L1686.07 684.606 L1686.63 684.606 L1687.19 684.606 L1687.75 684.606 L1688.31 684.606 L1688.87 684.606 L1689.43 684.606 L1689.99 684.606 L1690.55 684.606 L1691.11 684.606 L1691.67 684.606 L1692.23 684.606 L1692.78 684.606 L1693.34 684.606 L1693.9 684.606 L1694.46 684.606 L1695.02 684.606 L1695.58 684.606 L1696.14 684.606 L1696.7 684.606 L1697.26 684.606 L1697.82 684.606 L1698.38 684.606 L1698.94 684.606 L1699.5 684.606 L1700.05 684.606 L1700.61 684.606 L1701.17 684.606 L1701.73 684.606 L1702.29 684.606 L1702.85 684.606 L1703.41 684.606 L1703.97 684.606 L1704.53 684.606 L1705.09 684.606 L1705.65 684.606 L1706.21 684.606 L1706.77 684.606 L1707.32 684.606 L1707.88 684.606 L1708.44 684.606 L1709 684.606 L1709.56 684.606 L1710.12 684.606 L1710.68 684.606 L1711.24 684.606 L1711.8 684.606 L1712.36 684.606 L1712.92 684.606 L1713.48 684.606 L1714.04 684.606 L1714.6 684.606 L1715.15 684.606 L1715.71 684.606 L1716.27 684.606 L1716.83 684.606 L1717.39 684.606 L1717.95 684.606 L1718.51 684.606 L1719.07 684.606 L1719.63 684.606 L1720.19 684.606 L1720.75 684.606 L1721.31 684.606 L1721.87 684.606 L1722.42 684.606 L1722.98 684.606 L1723.54 684.606 L1724.1 684.606 L1724.66 684.606 L1725.22 684.606 L1725.78 684.606 L1726.34 684.606 L1726.9 684.606 L1727.46 684.606 L1728.02 684.606 L1728.58 684.606 L1729.14 684.606 L1729.69 684.606 L1730.25 684.606 L1730.81 684.606 L1731.37 684.606 L1731.93 684.606 L1732.49 684.606 L1733.05 684.606 L1733.61 684.606 L1734.17 684.606 L1734.73 684.606 L1735.29 684.606 L1735.85 684.606 L1736.41 684.606 L1736.97 684.606 L1737.52 684.606 L1738.08 684.606 L1738.64 684.606 L1739.2 684.606 L1739.76 684.606 L1740.32 684.606 L1740.88 684.606 L1741.44 684.606 L1742 684.606 L1742.56 684.606 L1743.12 684.606 L1743.68 684.606 L1744.24 684.606 L1744.79 684.606 L1745.35 684.606 L1745.91 684.606 L1746.47 684.606 L1747.03 684.606 L1747.59 684.606 L1748.15 684.606 L1748.71 684.606 L1749.27 684.606 L1749.83 684.606 L1750.39 684.606 L1750.95 684.606 L1751.51 684.606 L1752.06 684.606 L1752.62 684.606 L1753.18 684.606 L1753.74 684.606 L1754.3 684.606 L1754.86 684.606 L1755.42 684.606 L1755.98 684.606 L1756.54 684.606 L1757.1 684.606 L1757.66 684.606 L1758.22 684.606 L1758.78 684.606 L1759.34 684.606 L1759.89 684.606 L1760.45 684.606 L1761.01 684.606 L1761.57 684.606 L1762.13 684.606 L1762.69 684.606 L1763.25 684.606 L1763.81 684.606 L1764.37 684.606 L1764.93 684.606 L1765.49 684.606 L1766.05 684.606 L1766.61 684.606 L1767.16 684.606 L1767.72 684.606 L1768.28 684.606 L1768.84 684.606 L1769.4 684.606 L1769.96 684.606 L1770.52 684.606 L1771.08 684.606 L1771.64 684.606 L1772.2 684.606 L1772.76 684.606 L1773.32 684.606 L1773.88 684.606 L1774.43 684.606 L1774.99 684.606 L1775.55 684.606 L1776.11 684.606 L1776.67 684.606 L1777.23 684.606 L1777.79 684.606 L1778.35 684.606 L1778.91 684.606 L1779.47 684.606 L1780.03 684.606 L1780.59 684.606 L1781.15 684.606 L1781.71 684.606 L1782.26 684.606 L1782.82 684.606 L1783.38 684.606 L1783.94 684.606 L1784.5 684.606 L1785.06 684.606 L1785.62 684.606 L1786.18 684.606 L1786.74 684.606 L1787.3 684.606 L1787.86 684.606 L1788.42 684.606 L1788.98 684.606 L1789.53 684.606 L1790.09 684.606 L1790.65 684.606 L1791.21 684.606 L1791.77 684.606 L1792.33 684.606 L1792.89 684.606 L1793.45 684.606 L1794.01 684.606 L1794.57 684.606 L1795.13 684.606 L1795.69 684.606 L1796.25 684.606 L1796.8 684.606 L1797.36 684.606 L1797.92 684.606 L1798.48 684.606 L1799.04 684.606 L1799.6 684.606 L1800.16 684.606 L1800.72 684.606 L1801.28 684.606 L1801.84 684.606 L1802.4 684.606 L1802.96 684.606 L1803.52 684.606 L1804.08 684.606 L1804.63 684.606 L1805.19 684.606 L1805.75 684.606 L1806.31 684.606 L1806.87 684.606 L1807.43 684.606 L1807.99 684.606 L1808.55 684.606 L1809.11 684.606 L1809.67 684.606 L1810.23 684.606 L1810.79 684.606 L1811.35 684.606 L1811.9 684.606 L1812.46 684.606 L1813.02 684.606 L1813.58 684.606 L1814.14 684.606 L1814.7 684.606 L1815.26 684.606 L1815.82 684.606 L1816.38 684.606 L1816.94 684.606 L1817.5 684.606 L1818.06 684.606 L1818.62 684.606 L1819.18 684.606 L1819.73 684.606 L1820.29 684.606 L1820.85 684.606 L1821.41 684.606 L1821.97 684.606 L1822.53 684.606 L1823.09 684.606 L1823.65 684.606 L1824.21 684.606 L1824.77 684.606 L1825.33 684.606 L1825.89 684.606 L1826.45 684.606 L1827 684.606 L1827.56 684.606 L1828.12 684.606 L1828.68 684.606 L1829.24 684.606 L1829.8 684.606 L1830.36 684.606 L1830.92 684.606 L1831.48 684.606 L1832.04 684.606 L1832.6 684.606 L1833.16 684.606 L1833.72 684.606 L1834.27 684.606 L1834.83 684.606 L1835.39 684.606 L1835.95 684.606 L1836.51 684.606 L1837.07 684.606 L1837.63 684.606 L1838.19 684.606 L1838.19 681.785 L1837.63 681.785 L1837.07 681.785 L1836.51 681.785 L1835.95 681.785 L1835.39 681.785 L1834.83 681.785 L1834.27 681.785 L1833.72 681.785 L1833.16 681.785 L1832.6 681.785 L1832.04 681.785 L1831.48 681.785 L1830.92 681.785 L1830.36 681.785 L1829.8 681.785 L1829.24 681.785 L1828.68 681.785 L1828.12 681.785 L1827.56 681.785 L1827 681.785 L1826.45 681.785 L1825.89 681.785 L1825.33 681.785 L1824.77 681.785 L1824.21 681.785 L1823.65 681.785 L1823.09 681.785 L1822.53 681.785 L1821.97 681.785 L1821.41 681.785 L1820.85 681.785 L1820.29 681.785 L1819.73 681.785 L1819.18 681.785 L1818.62 681.785 L1818.06 681.785 L1817.5 681.785 L1816.94 681.785 L1816.38 681.785 L1815.82 681.785 L1815.26 681.785 L1814.7 681.785 L1814.14 681.785 L1813.58 681.785 L1813.02 681.785 L1812.46 681.785 L1811.9 681.785 L1811.35 681.785 L1810.79 681.785 L1810.23 681.785 L1809.67 681.785 L1809.11 681.785 L1808.55 681.785 L1807.99 681.785 L1807.43 681.785 L1806.87 681.785 L1806.31 681.785 L1805.75 681.785 L1805.19 681.785 L1804.63 681.785 L1804.08 681.785 L1803.52 681.785 L1802.96 681.785 L1802.4 681.785 L1801.84 681.785 L1801.28 681.785 L1800.72 681.785 L1800.16 681.785 L1799.6 681.785 L1799.04 681.785 L1798.48 681.785 L1797.92 681.785 L1797.36 681.785 L1796.8 681.785 L1796.25 681.785 L1795.69 681.785 L1795.13 681.785 L1794.57 681.785 L1794.01 681.785 L1793.45 681.785 L1792.89 681.785 L1792.33 681.785 L1791.77 681.785 L1791.21 681.785 L1790.65 681.785 L1790.09 681.785 L1789.53 681.785 L1788.98 681.785 L1788.42 681.785 L1787.86 681.785 L1787.3 681.785 L1786.74 681.785 L1786.18 681.785 L1785.62 681.785 L1785.06 681.785 L1784.5 681.785 L1783.94 681.785 L1783.38 681.785 L1782.82 681.785 L1782.26 681.785 L1781.71 681.785 L1781.15 681.785 L1780.59 681.785 L1780.03 681.785 L1779.47 681.785 L1778.91 681.785 L1778.35 681.785 L1777.79 681.785 L1777.23 681.785 L1776.67 681.785 L1776.11 681.785 L1775.55 681.785 L1774.99 681.785 L1774.43 681.785 L1773.88 681.785 L1773.32 681.785 L1772.76 681.785 L1772.2 681.785 L1771.64 681.785 L1771.08 681.785 L1770.52 681.785 L1769.96 681.785 L1769.4 681.785 L1768.84 681.785 L1768.28 681.785 L1767.72 681.785 L1767.16 681.785 L1766.61 681.785 L1766.05 681.785 L1765.49 681.785 L1764.93 681.785 L1764.37 681.785 L1763.81 681.785 L1763.25 681.785 L1762.69 681.785 L1762.13 681.785 L1761.57 681.785 L1761.01 681.785 L1760.45 681.785 L1759.89 681.785 L1759.34 681.785 L1758.78 681.785 L1758.22 681.785 L1757.66 681.785 L1757.1 681.785 L1756.54 681.785 L1755.98 681.785 L1755.42 681.785 L1754.86 681.785 L1754.3 681.785 L1753.74 681.785 L1753.18 681.785 L1752.62 681.785 L1752.06 681.785 L1751.51 681.785 L1750.95 681.785 L1750.39 681.785 L1749.83 681.785 L1749.27 681.785 L1748.71 681.785 L1748.15 681.785 L1747.59 681.785 L1747.03 681.785 L1746.47 681.785 L1745.91 681.785 L1745.35 681.785 L1744.79 681.785 L1744.24 681.785 L1743.68 681.785 L1743.12 681.785 L1742.56 681.785 L1742 681.785 L1741.44 681.785 L1740.88 681.785 L1740.32 681.785 L1739.76 681.785 L1739.2 681.785 L1738.64 681.785 L1738.08 681.785 L1737.52 681.785 L1736.97 681.785 L1736.41 681.785 L1735.85 681.785 L1735.29 681.785 L1734.73 681.785 L1734.17 681.785 L1733.61 681.785 L1733.05 681.785 L1732.49 681.785 L1731.93 681.785 L1731.37 681.785 L1730.81 681.785 L1730.25 681.785 L1729.69 681.785 L1729.14 681.785 L1728.58 681.785 L1728.02 681.785 L1727.46 681.785 L1726.9 681.785 L1726.34 681.785 L1725.78 681.785 L1725.22 681.785 L1724.66 681.785 L1724.1 681.785 L1723.54 681.785 L1722.98 681.785 L1722.42 681.785 L1721.87 681.785 L1721.31 681.785 L1720.75 681.785 L1720.19 681.785 L1719.63 681.785 L1719.07 681.785 L1718.51 681.785 L1717.95 681.785 L1717.39 681.785 L1716.83 681.785 L1716.27 681.785 L1715.71 681.785 L1715.15 681.785 L1714.6 681.785 L1714.04 681.785 L1713.48 681.785 L1712.92 681.785 L1712.36 681.785 L1711.8 681.785 L1711.24 681.785 L1710.68 681.785 L1710.12 681.785 L1709.56 681.785 L1709 681.785 L1708.44 681.785 L1707.88 681.785 L1707.32 681.785 L1706.77 681.785 L1706.21 681.785 L1705.65 681.785 L1705.09 681.785 L1704.53 681.785 L1703.97 681.785 L1703.41 681.785 L1702.85 681.785 L1702.29 681.785 L1701.73 681.785 L1701.17 681.785 L1700.61 681.785 L1700.05 681.785 L1699.5 681.785 L1698.94 681.785 L1698.38 681.785 L1697.82 681.785 L1697.26 681.785 L1696.7 681.785 L1696.14 681.785 L1695.58 681.785 L1695.02 681.785 L1694.46 681.785 L1693.9 681.785 L1693.34 681.785 L1692.78 681.785 L1692.23 681.785 L1691.67 681.785 L1691.11 681.785 L1690.55 681.785 L1689.99 681.785 L1689.43 681.785 L1688.87 681.785 L1688.31 681.785 L1687.75 681.785 L1687.19 681.785 L1686.63 681.785 L1686.07 681.785 L1685.51 681.785 L1684.95 681.785 L1684.4 681.785 L1683.84 681.785 L1683.28 681.785 L1682.72 681.785 L1682.16 681.785 L1681.6 681.785 L1681.04 681.785 L1680.48 681.785 L1679.92 681.785 L1679.36 681.785 L1678.8 681.785 L1678.24 681.785 L1677.68 681.785 L1677.13 681.785 L1676.57 681.785 L1676.01 681.785 L1675.45 681.785 L1674.89 681.785 L1674.33 681.785 L1673.77 681.785 L1673.21 681.785 L1672.65 681.785 L1672.09 681.785 L1671.53 681.785 L1670.97 681.785 L1670.41 681.785 L1669.85 681.785 L1669.3 681.785 L1668.74 681.785 L1668.18 681.785 L1667.62 681.785 L1667.06 681.785 L1666.5 681.785 L1665.94 681.785 L1665.38 681.785 L1664.82 681.785 L1664.26 681.785 L1663.7 681.785 L1663.14 681.785 L1662.58 681.785 L1662.03 681.785 L1661.47 681.785 L1660.91 681.785 L1660.35 681.785 L1659.79 681.785 L1659.23 681.785 L1658.67 681.785 L1658.11 681.785 L1657.55 681.785 L1656.99 681.785 L1656.43 681.785 L1655.87 681.785 L1655.31 681.785 L1654.76 681.785 L1654.2 681.785 L1653.64 681.785 L1653.08 681.785 L1652.52 681.785 L1651.96 681.785 L1651.4 681.785 L1650.84 681.785 L1650.28 681.785 L1649.72 681.785 L1649.16 681.785 L1648.6 681.785 L1648.04 681.785 L1647.48 681.785 L1646.93 681.785 L1646.37 681.785 L1645.81 681.785 L1645.25 681.785 L1644.69 681.785 L1644.13 681.785 L1643.57 681.785 L1643.01 681.785 L1642.45 681.785 L1641.89 681.785 L1641.33 681.785 L1640.77 681.785 L1640.21 681.785 L1639.66 681.785 L1639.1 681.785 L1638.54 681.785 L1637.98 681.785 L1637.42 681.785 L1636.86 681.785 L1636.3 681.785 L1635.74 681.785 L1635.18 681.785 L1634.62 681.785 L1634.06 681.785 L1633.5 681.785 L1632.94 681.785 L1632.39 681.785 L1631.83 681.785 L1631.27 681.785 L1630.71 681.785 L1630.15 681.785 L1629.59 681.785 L1629.03 681.785 L1628.47 681.785 L1627.91 681.785 L1627.35 681.785 L1626.79 681.785 L1626.23 681.785 L1625.67 681.785 L1625.11 681.785 L1624.56 681.785 L1624 681.785 L1623.44 681.785 L1622.88 681.785 L1622.32 681.785 L1621.76 681.785 L1621.2 681.785 L1620.64 681.785 L1620.08 681.785 L1619.52 681.785 L1618.96 681.785 L1618.4 681.785 L1617.84 681.785 L1617.29 681.785 L1616.73 681.785 L1616.17 681.785 L1615.61 681.785 L1615.05 681.785 L1614.49 681.785 L1613.93 681.785 L1613.37 681.785 L1612.81 681.785 L1612.25 681.785 L1611.69 681.785 L1611.13 681.785 L1610.57 681.785 L1610.02 681.785 L1609.46 681.785 L1608.9 681.785 L1608.34 681.785 L1607.78 681.785 L1607.22 681.785 L1606.66 681.785 L1606.1 681.785 L1605.54 681.785 L1604.98 681.785 L1604.42 681.785 L1603.86 681.785 L1603.3 681.785 L1602.74 681.785 L1602.19 681.785 L1601.63 681.785 L1601.07 681.785 L1600.51 681.785 L1599.95 681.785 L1599.39 681.785 L1598.83 681.785 L1598.27 681.785 L1597.71 681.785 L1597.15 681.785 L1596.59 681.785 L1596.03 681.785 L1595.47 681.785 L1594.92 681.785 L1594.36 681.785 L1593.8 681.785 L1593.24 681.785 L1592.68 681.785 L1592.12 681.785 L1591.56 681.785 L1591 681.785 L1590.44 681.785 L1589.88 681.785 L1589.32 681.785 L1588.76 681.785 L1588.2 681.785 L1587.65 681.785 L1587.09 681.785 L1586.53 681.785 L1585.97 681.785 L1585.41 681.785 L1584.85 681.785 L1584.29 681.785 L1583.73 681.785 L1583.17 681.785 L1582.61 681.785 L1582.05 681.785 L1581.49 681.785 L1580.93 681.785 L1580.37 681.785 L1579.82 681.785 L1579.26 681.785 L1578.7 681.785 L1578.14 681.785 L1577.58 681.785 L1577.02 681.785 L1576.46 681.785 L1575.9 681.785 L1575.34 681.785 L1574.78 681.785 L1574.22 681.785 L1573.66 681.785 L1573.1 681.785 L1572.55 681.785 L1571.99 681.785 L1571.43 681.785 L1570.87 681.785 L1570.31 681.785 L1569.75 681.785 L1569.19 681.785 L1568.63 681.785 L1568.07 681.785 L1567.51 681.785 L1566.95 681.785 L1566.39 681.785 L1565.83 681.785 L1565.28 681.785 L1564.72 681.785 L1564.16 681.785 L1563.6 681.785 L1563.04 681.785 L1562.48 681.785 L1561.92 681.785 L1561.36 681.785 L1560.8 681.785 L1560.24 681.785 L1559.68 681.785 L1559.12 681.785 L1558.56 681.785 L1558 681.785 L1557.45 681.785 L1556.89 681.785 L1556.33 681.785 L1555.77 681.785 L1555.21 681.785 L1554.65 681.785 L1554.09 681.785 L1553.53 681.785 L1552.97 681.785 L1552.41 681.785 L1551.85 681.785 L1551.29 681.785 L1550.73 681.785 L1550.18 681.785 L1549.62 681.785 L1549.06 681.785 L1548.5 681.785 L1547.94 681.785 L1547.38 681.785 L1546.82 681.785 L1546.26 681.785 L1545.7 681.785 L1545.14 681.785 L1544.58 681.785 L1544.02 681.785 L1543.46 681.785 L1542.9 681.785 L1542.35 681.785 L1541.79 681.785 L1541.23 681.785 L1540.67 681.785 L1540.11 681.785 L1539.55 681.785 L1538.99 681.785 L1538.43 681.785 L1537.87 681.785 L1537.31 681.785 L1536.75 681.785 L1536.19 681.785 L1535.63 681.785 L1535.08 681.785 L1534.52 681.785 L1533.96 681.785 L1533.4 681.785 L1532.84 681.785 L1532.28 681.785 L1531.72 681.785 L1531.16 681.785 L1530.6 681.785 L1530.04 681.785 L1529.48 681.785 L1528.92 681.785 L1528.36 681.785 L1527.81 681.785 L1527.25 681.785 L1526.69 681.785 L1526.13 681.785 L1525.57 681.785 L1525.01 681.785 L1524.45 681.785 L1523.89 681.785 L1523.33 681.785 L1522.77 681.785 L1522.21 681.785 L1521.65 681.785 L1521.09 681.785 L1520.53 681.785 L1519.98 681.785 L1519.42 681.785 L1518.86 681.785 L1518.3 681.785 L1517.74 681.785 L1517.18 681.785 L1516.62 681.785 L1516.06 681.785 L1515.5 681.785 L1514.94 681.785 L1514.38 681.785 L1513.82 681.785 L1513.26 681.785 L1512.71 681.785 L1512.15 681.785 L1511.59 681.785 L1511.03 681.785 L1510.47 681.785 L1509.91 681.785 L1509.35 681.785 L1508.79 681.785 L1508.23 681.785 L1507.67 681.785 L1507.11 681.785 L1506.55 681.785 L1505.99 681.785 L1505.44 681.785 L1504.88 681.785 L1504.32 681.785 L1503.76 681.785 L1503.2 681.785 L1502.64 681.785 L1502.08 681.785 L1501.52 681.785 L1500.96 681.785 L1500.4 681.785 L1499.84 681.785 L1499.28 681.785 L1498.72 681.785 L1498.16 681.785 L1497.61 681.785 L1497.05 681.785 L1496.49 681.785 L1495.93 681.785 L1495.37 681.785 L1494.81 681.785 L1494.25 681.785 L1493.69 681.785 L1493.13 681.785 L1492.57 681.785 L1492.01 681.785 L1491.45 681.785 L1490.89 681.785 L1490.34 681.785 L1489.78 681.785 L1489.22 681.785 L1488.66 681.785 L1488.1 681.785 L1487.54 681.785 L1486.98 681.785 L1486.42 681.785 L1485.86 681.785 L1485.3 681.785 L1484.74 681.785 L1484.18 681.785 L1483.62 681.785 L1483.07 681.785 L1482.51 681.785 L1481.95 681.785 L1481.39 681.785 L1480.83 681.785 L1480.27 681.785 L1479.71 681.785 L1479.15 681.785 L1478.59 681.785 L1478.03 681.785 L1477.47 681.785 L1476.91 681.785 L1476.35 681.785 L1475.79 681.785 L1475.24 681.785 L1474.68 681.785 L1474.12 681.785 L1473.56 681.785 L1473 681.785 L1472.44 681.785 L1471.88 681.785 L1471.32 681.785 L1470.76 681.785 L1470.2 681.785 L1469.64 681.785 L1469.08 681.785 L1468.52 681.785 L1467.97 681.785 L1467.41 681.785 L1466.85 681.785 L1466.29 681.785 L1465.73 681.785 L1465.17 681.785 L1464.61 681.785 L1464.05 681.785 L1463.49 681.785 L1462.93 681.785 L1462.37 681.785 L1461.81 681.785 L1461.25 681.785 L1460.7 681.785 L1460.14 681.785 L1459.58 681.785 L1459.02 681.785 L1458.46 681.785 L1457.9 681.785 L1457.34 681.785 L1456.78 681.785 L1456.22 681.785 L1455.66 681.785 L1455.1 681.785 L1454.54 681.785 L1453.98 681.785 L1453.42 681.785 L1452.87 681.785 L1452.31 681.785 L1451.75 681.785 L1451.19 681.785 L1450.63 681.785 L1450.07 681.785 L1449.51 681.785 L1448.95 681.785 L1448.39 681.785 L1447.83 681.785 L1447.27 681.785 L1446.71 681.785 L1446.15 681.785 L1445.6 681.785 L1445.04 681.785 L1444.48 681.785 L1443.92 681.785 L1443.36 681.785 L1442.8 681.785 L1442.24 681.785 L1441.68 681.785 L1441.12 681.785 L1440.56 681.785 L1440 681.785 L1439.44 681.785 L1438.88 681.785 L1438.33 681.785 L1437.77 681.785 L1437.21 681.785 L1436.65 681.785 L1436.09 681.785 L1435.53 681.785 L1434.97 681.785 L1434.41 681.785 L1433.85 681.785 L1433.29 681.785 L1432.73 681.785 L1432.17 681.785 L1431.61 681.785 L1431.05 681.785 L1430.5 681.785 L1429.94 681.785 L1429.38 681.785 L1428.82 681.785 L1428.26 681.785 L1427.7 681.785 L1427.14 681.785 L1426.58 681.785 L1426.02 681.785 L1425.46 681.785 L1424.9 681.785 L1424.34 681.785 L1423.78 681.785 L1423.23 681.785 L1422.67 681.785 L1422.11 681.785 L1421.55 681.785 L1420.99 681.785 L1420.43 681.785 L1419.87 681.785 L1419.31 681.785 L1418.75 681.785 L1418.19 681.785 L1417.63 681.785 L1417.07 681.785 L1416.51 681.785 L1415.95 681.785 L1415.4 681.785 L1414.84 681.785 L1414.28 681.785 L1413.72 681.785 L1413.16 681.785 L1412.6 681.785 L1412.04 681.785 L1411.48 681.785 L1410.92 681.785 L1410.36 681.785 L1409.8 681.785 L1409.24 681.785 L1408.68 681.785 L1408.13 681.785 L1407.57 681.785 L1407.01 681.785 L1406.45 681.785 L1405.89 681.785 L1405.33 681.785 L1404.77 681.785 L1404.21 681.785 L1403.65 681.785 L1403.09 681.785 L1402.53 681.785 L1401.97 681.785 L1401.41 681.785 L1400.86 681.785 L1400.3 681.785 L1399.74 681.785 L1399.18 681.785 L1398.62 681.785 L1398.06 681.785 L1397.5 681.785 L1396.94 681.785 L1396.38 681.785 L1395.82 681.785 L1395.26 681.785 L1394.7 681.785 L1394.14 681.785 L1393.58 681.785 L1393.03 681.785 L1392.47 681.785 L1391.91 681.785 L1391.35 681.785 L1390.79 681.785 L1390.23 681.785 L1389.67 681.785 L1389.11 681.785 L1388.55 681.785 L1387.99 681.785 L1387.43 681.785 L1386.87 681.785 L1386.31 681.785 L1385.76 681.785 L1385.2 681.785 L1384.64 681.785 L1384.08 681.785 L1383.52 681.785 L1382.96 681.785 L1382.4 681.785 L1381.84 681.785 L1381.28 681.785 L1380.72 681.785 L1380.16 681.785 L1379.6 681.785 L1379.04 681.785 L1378.49 681.785 L1377.93 681.785 L1377.37 681.785 L1376.81 681.785 L1376.25 681.785 L1375.69 681.785 L1375.13 681.785 L1374.57 681.785 L1374.01 681.785 L1373.45 681.785 L1372.89 681.785 L1372.33 681.785 L1371.77 681.785 L1371.21 681.785 L1370.66 681.785 L1370.1 681.785 L1369.54 681.785 L1368.98 681.785 L1368.42 681.785 L1367.86 681.785 L1367.3 681.785 L1366.74 681.785 L1366.18 681.785 L1365.62 681.785 L1365.06 681.785 L1364.5 681.785 L1363.94 681.785 L1363.39 681.785 L1362.83 681.785 L1362.27 681.785 L1361.71 681.785 L1361.15 681.785 L1360.59 681.785 L1360.03 681.785 L1359.47 681.785 L1358.91 681.785 L1358.35 681.785 L1357.79 681.785 L1357.23 681.785 L1356.67 681.785 L1356.12 681.785 L1355.56 681.785 L1355 681.785 L1354.44 681.785 L1353.88 681.785 L1353.32 681.785 L1352.76 681.785 L1352.2 681.785 L1351.64 681.785 L1351.08 681.785 L1350.52 681.785 L1349.96 681.785 L1349.4 681.785 L1348.84 681.785 L1348.29 681.785 L1347.73 681.785 L1347.17 681.785 L1346.61 681.785 L1346.05 681.785 L1345.49 681.785 L1344.93 681.785 L1344.37 681.785 L1343.81 681.785 L1343.25 681.785 L1342.69 681.785 L1342.13 681.785 L1341.57 681.785 L1341.02 681.785 L1340.46 681.785 L1339.9 681.785 L1339.34 681.785 L1338.78 681.785 L1338.22 681.785 L1337.66 681.785 L1337.1 681.785 L1336.54 681.785 L1335.98 681.785 L1335.42 681.785 L1334.86 681.785 L1334.3 681.785 L1333.75 681.785 L1333.19 681.785 L1332.63 681.785 L1332.07 681.785 L1331.51 681.785 L1330.95 681.785 L1330.39 681.785 L1329.83 681.785 L1329.27 681.785 L1328.71 681.785 L1328.15 681.785 L1327.59 681.785 L1327.03 681.785 L1326.47 681.785 L1325.92 681.785 L1325.36 681.785 L1324.8 681.785 L1324.24 681.785 L1323.68 681.785 L1323.12 681.785 L1322.56 681.785 L1322 681.785 L1321.44 681.785 L1320.88 681.785 L1320.32 681.785 L1319.76 681.785 L1319.2 681.785 L1318.65 681.785 L1318.09 681.785 L1317.53 681.785 L1316.97 681.785 L1316.41 681.785 L1315.85 681.785 L1315.29 681.785 L1314.73 681.785 L1314.17 681.785 L1313.61 681.785 L1313.05 681.785 L1312.49 681.785 L1311.93 681.785 L1311.38 681.785 L1310.82 681.785 L1310.26 681.785 L1309.7 681.785 L1309.14 681.785 L1308.58 681.785 L1308.02 681.785 L1307.46 681.785 L1306.9 681.785 L1306.34 681.785 L1305.78 681.785 L1305.22 681.785 L1304.66 681.785 L1304.1 681.785 L1303.55 681.785 L1302.99 681.785 L1302.43 681.785 L1301.87 681.785 L1301.31 681.785 L1300.75 681.785 L1300.19 681.785 L1299.63 681.785 L1299.07 681.785 L1298.51 681.785 L1297.95 681.785 L1297.39 681.785 L1296.83 681.785 L1296.28 681.785 L1295.72 681.785 L1295.16 681.785 L1294.6 681.785 L1294.04 681.785 L1293.48 681.785 L1292.92 681.785 L1292.36 681.785 L1291.8 681.785 L1291.24 681.785 L1290.68 681.785 L1290.12 681.785 L1289.56 681.785 L1289 681.785 L1288.45 681.785 L1287.89 681.785 L1287.33 681.785 L1286.77 681.785 L1286.21 681.785 L1285.65 681.785 L1285.09 681.785 L1284.53 681.785 L1283.97 681.785 L1283.41 681.785 L1282.85 681.785 L1282.29 681.785 L1281.73 681.785 L1281.18 681.785 L1280.62 681.785 L1280.06 681.785 L1279.5 681.785 L1278.94 681.785 L1278.38 681.785 L1277.82 681.785 L1277.26 681.785 L1276.7 681.785 L1276.14 681.785 L1275.58 681.785 L1275.02 681.785 L1274.46 681.785 L1273.91 681.785 L1273.35 681.785 L1272.79 681.785 L1272.23 681.785 L1271.67 681.785 L1271.11 681.785 L1270.55 681.785 L1269.99 681.785 L1269.43 681.785 L1268.87 681.785 L1268.31 681.785 L1267.75 681.785 L1267.19 681.785 L1266.63 681.785 L1266.08 681.785 L1265.52 681.785 L1264.96 681.785 L1264.4 681.785 L1263.84 681.785 L1263.28 681.785 L1262.72 681.785 L1262.16 681.785 L1261.6 681.785 L1261.04 681.785 L1260.48 681.785 L1259.92 681.785 L1259.36 681.785 L1258.81 681.785 L1258.25 681.785 L1257.69 681.785 L1257.13 681.785 L1256.57 681.785 L1256.01 681.785 L1255.45 681.785 L1254.89 681.785 L1254.33 681.785 L1253.77 681.785 L1253.21 681.785 L1252.65 681.785 L1252.09 681.785 L1251.54 681.785 L1250.98 681.785 L1250.42 681.785 L1249.86 681.785 L1249.3 681.785 L1248.74 681.785 L1248.18 681.785 L1247.62 681.785 L1247.06 681.785 L1246.5 681.785 L1245.94 681.785 L1245.38 681.785 L1244.82 681.785 L1244.26 681.785 L1243.71 681.785 L1243.15 681.785 L1242.59 681.785 L1242.03 681.785 L1241.47 681.785 L1240.91 681.785 L1240.35 681.785 L1239.79 681.785 L1239.23 681.785 L1238.67 681.785 L1238.11 681.785 L1237.55 681.785 L1236.99 681.785 L1236.44 681.785 L1235.88 681.785 L1235.32 681.785 L1234.76 681.785 L1234.2 681.785 L1233.64 681.785 L1233.08 681.785 L1232.52 681.785 L1231.96 681.785 L1231.4 681.785 L1230.84 681.785 L1230.28 681.785 L1229.72 681.785 L1229.17 681.785 L1228.61 681.785 L1228.05 681.785 L1227.49 681.785 L1226.93 681.785 L1226.37 681.785 L1225.81 681.785 L1225.25 681.785 L1224.69 681.785 L1224.13 681.785 L1223.57 681.785 L1223.01 681.785 L1222.45 681.785 L1221.89 681.785 L1221.34 681.785 L1220.78 681.785 L1220.22 681.785 L1219.66 681.785 L1219.1 681.785 L1218.54 681.785 L1217.98 681.785 L1217.42 681.785 L1216.86 681.785 L1216.3 681.785 L1215.74 681.785 L1215.18 681.785 L1214.62 681.785 L1214.07 681.785 L1213.51 681.785 L1212.95 681.785 L1212.39 681.785 L1211.83 681.785 L1211.27 681.785 L1210.71 681.785 L1210.15 681.785 L1209.59 681.785 L1209.03 681.785 L1208.47 681.785 L1207.91 681.785 L1207.35 681.785 L1206.8 681.785 L1206.24 681.785 L1205.68 681.785 L1205.12 681.785 L1204.56 681.785 L1204 681.785 L1203.44 681.785 L1202.88 681.785 L1202.32 681.785 L1201.76 681.785 L1201.2 681.785 L1200.64 681.785 L1200.08 681.785 L1199.52 681.785 L1198.97 681.785 L1198.41 681.785 L1197.85 681.785 L1197.29 681.785 L1196.73 681.785 L1196.17 681.785 L1195.61 681.785 L1195.05 681.785 L1194.49 681.785 L1193.93 681.785 L1193.37 681.785 L1192.81 681.785 L1192.25 681.785 L1191.7 681.785 L1191.14 681.785 L1190.58 681.785 L1190.02 681.785 L1189.46 681.785 L1188.9 681.785 L1188.34 681.785 L1187.78 681.785 L1187.22 681.785 L1186.66 681.785 L1186.1 681.785 L1185.54 681.785 L1184.98 681.785 L1184.43 681.785 L1183.87 681.785 L1183.31 681.785 L1182.75 681.785 L1182.19 681.785 L1181.63 681.785 L1181.07 681.785 L1180.51 681.785 L1179.95 681.785 L1179.39 681.785 L1178.83 681.785 L1178.27 681.785 L1177.71 681.785 L1177.15 681.785 L1176.6 681.785 L1176.04 681.785 L1175.48 681.785 L1174.92 681.785 L1174.36 681.785 L1173.8 681.785 L1173.24 681.785 L1172.68 681.785 L1172.12 681.785 L1171.56 681.785 L1171 681.785 L1170.44 681.785 L1169.88 681.785 L1169.33 681.785 L1168.77 681.785 L1168.21 681.785 L1167.65 681.785 L1167.09 681.785 L1166.53 681.785 L1165.97 681.785 L1165.41 681.785 L1164.85 681.785 L1164.29 681.785 L1163.73 681.785 L1163.17 681.785 L1162.61 681.785 L1162.05 681.785 L1161.5 681.785 L1160.94 681.785 L1160.38 681.785 L1159.82 681.785 L1159.26 681.785 L1158.7 681.785 L1158.14 681.785 L1157.58 681.785 L1157.02 681.785 L1156.46 681.785 L1155.9 681.785 L1155.34 681.785 L1154.78 681.785 L1154.23 681.785 L1153.67 681.785 L1153.11 681.785 L1152.55 681.785 L1151.99 681.785 L1151.43 681.785 L1150.87 681.785 L1150.31 681.785 L1149.75 681.785 L1149.19 681.785 L1148.63 681.785 L1148.07 681.785 L1147.51 681.785 L1146.96 681.785 L1146.4 681.785 L1145.84 681.785 L1145.28 681.785 L1144.72 681.785 L1144.16 681.785 L1143.6 681.785 L1143.04 681.785 L1142.48 681.785 L1141.92 681.785 L1141.36 681.785 L1140.8 681.785 L1140.24 681.785 L1139.68 681.785 L1139.13 681.785 L1138.57 681.785 L1138.01 681.785 L1137.45 681.785 L1136.89 681.785 L1136.33 681.785 L1135.77 681.785 L1135.21 681.785 L1134.65 681.785 L1134.09 681.785 L1133.53 681.785 L1132.97 681.785 L1132.41 681.785 L1131.86 681.785 L1131.3 681.785 L1130.74 681.785 L1130.18 681.785 L1129.62 681.785 L1129.06 681.785 L1128.5 681.785 L1127.94 681.785 L1127.38 681.785 L1126.82 681.785 L1126.26 681.785 L1125.7 681.785 L1125.14 681.785 L1124.59 681.785 L1124.03 681.785 L1123.47 681.785 L1122.91 681.785 L1122.35 681.785 L1121.79 681.785 L1121.23 681.785 L1120.67 681.785 L1120.11 681.785 L1119.55 681.785 L1118.99 681.785 L1118.43 681.785 L1117.87 681.785 L1117.31 681.785 L1116.76 681.785 L1116.2 681.785 L1115.64 681.785 L1115.08 681.785 L1114.52 681.785 L1113.96 681.785 L1113.4 681.785 L1112.84 681.785 L1112.28 681.785 L1111.72 681.785 L1111.16 681.785 L1110.6 681.785 L1110.04 681.785 L1109.49 681.785 L1108.93 681.785 L1108.37 681.785 L1107.81 681.785 L1107.25 681.785 L1106.69 681.785 L1106.13 681.785 L1105.57 681.785 L1105.01 681.785 L1104.45 681.785 L1103.89 681.785 L1103.33 681.785 L1102.77 681.785 L1102.22 681.785 L1101.66 681.785 L1101.1 681.785 L1100.54 681.785 L1099.98 681.785 L1099.42 681.785 L1098.86 681.785 L1098.3 681.785 L1097.74 681.785 L1097.18 681.785 L1096.62 681.785 L1096.06 681.785 L1095.5 681.785 L1094.94 681.785 L1094.39 681.785 L1093.83 681.785 L1093.27 681.785 L1092.71 681.785 L1092.15 681.785 L1091.59 681.785 L1091.03 681.785 L1090.47 681.785 L1089.91 681.785 L1089.35 681.785 L1088.79 681.785 L1088.23 681.785 L1087.67 681.785 L1087.12 681.785 L1086.56 681.785 L1086 681.785 L1085.44 681.785 L1084.88 681.785 L1084.32 681.785 L1083.76 681.785 L1083.2 681.785 L1082.64 681.785 L1082.08 681.785 L1081.52 681.785 L1080.96 681.785 L1080.4 681.785 L1079.85 681.785 L1079.29 681.785 L1078.73 681.785 L1078.17 681.785 L1077.61 681.785 L1077.05 681.785 L1076.49 681.785 L1075.93 681.785 L1075.37 681.785 L1074.81 681.785 L1074.25 681.785 L1073.69 681.785 L1073.13 681.785 L1072.57 681.785 L1072.02 681.785 L1071.46 681.785 L1070.9 681.785 L1070.34 681.785 L1069.78 681.785 L1069.22 681.785 L1068.66 681.785 L1068.1 681.785 L1067.54 681.785 L1066.98 681.785 L1066.42 681.785 L1065.86 681.785 L1065.3 681.785 L1064.75 681.785 L1064.19 681.785 L1063.63 681.785 L1063.07 681.785 L1062.51 681.785 L1061.95 681.785 L1061.39 681.785 L1060.83 681.785 L1060.27 681.785 L1059.71 681.785 L1059.15 681.785 L1058.59 681.785 L1058.03 681.785 L1057.48 681.785 L1056.92 681.785 L1056.36 681.785 L1055.8 681.785 L1055.24 681.785 L1054.68 681.785 L1054.12 681.785 L1053.56 681.785 L1053 681.785 L1052.44 681.785 L1051.88 681.785 L1051.32 681.785 L1050.76 681.785 L1050.2 681.785 L1049.65 681.785 L1049.09 681.785 L1048.53 681.785 L1047.97 681.785 L1047.41 681.785 L1046.85 681.785 L1046.29 681.785 L1045.73 681.785 L1045.17 681.785 L1044.61 681.785 L1044.05 681.785 L1043.49 681.785 L1042.93 681.785 L1042.38 681.785 L1041.82 681.785 L1041.26 681.785 L1040.7 681.785 L1040.14 681.785 L1039.58 681.785 L1039.02 681.785 L1038.46 681.785 L1037.9 681.785 L1037.34 681.785 L1036.78 681.785 L1036.22 681.785 L1035.66 681.785 L1035.1 681.785 L1034.55 681.785 L1033.99 681.785 L1033.43 681.785 L1032.87 681.785 L1032.31 681.785 L1031.75 681.785 L1031.19 681.785 L1030.63 681.785 L1030.07 681.785 L1029.51 681.785 L1028.95 681.785 L1028.39 681.785 L1027.83 681.785 L1027.28 681.785 L1026.72 681.785 L1026.16 681.785 L1025.6 681.785 L1025.04 681.785 L1024.48 681.785 L1023.92 681.785 L1023.36 681.785 L1022.8 681.785 L1022.24 681.785 L1021.68 681.785 L1021.12 681.785 L1020.56 681.785 L1020.01 681.785 L1019.45 681.785 L1018.89 681.785 L1018.33 681.785 L1017.77 681.785 L1017.21 681.785 L1016.65 681.785 L1016.09 681.785 L1015.53 681.785 L1014.97 681.785 L1014.41 681.785 L1013.85 681.785 L1013.29 681.785 L1012.73 681.785 L1012.18 681.785 L1011.62 681.785 L1011.06 681.785 L1010.5 681.785 L1009.94 681.785 L1009.38 681.785 L1008.82 681.785 L1008.26 681.785 L1007.7 681.785 L1007.14 681.785 L1006.58 681.785 L1006.02 681.785 L1005.46 681.785 L1004.91 681.785 L1004.35 681.785 L1003.79 681.785 L1003.23 681.785 L1002.67 681.785 L1002.11 681.785 L1001.55 681.785 L1000.99 681.785 L1000.43 681.785 L999.872 681.785 L999.313 681.785 L998.754 681.785 L998.194 681.785 L997.635 681.785 L997.076 681.785 L996.517 681.785 L995.957 681.785 L995.398 681.785 L994.839 681.785 L994.28 681.785 L993.72 681.785 L993.161 681.785 L992.602 681.785 L992.043 681.785 L991.483 681.785 L990.924 681.785 L990.365 681.785 L989.806 681.785 L989.246 681.785 L988.687 681.785 L988.128 681.785 L987.569 681.785 L987.009 681.785 L986.45 681.785 L985.891 681.785 L985.332 681.785 L984.772 681.785 L984.213 681.785 L983.654 681.785 L983.095 681.785 L982.535 681.785 L981.976 681.785 L981.417 681.785 L980.858 681.785 L980.298 681.785 L979.739 681.785 L979.18 681.785 L978.621 681.785 L978.061 681.785 L977.502 681.785 L976.943 681.785 L976.384 681.785 L975.824 681.785 L975.265 681.785 L974.706 681.785 L974.147 681.785 L973.587 681.785 L973.028 681.785 L972.469 681.785 L971.91 681.785 L971.35 681.785 L970.791 681.785 L970.232 681.785 L969.673 681.785 L969.113 681.785 L968.554 681.785 L967.995 681.785 L967.436 681.785 L966.876 681.785 L966.317 681.785 L965.758 681.785 L965.199 681.785 L964.639 681.785 L964.08 681.785 L963.521 681.785 L962.962 681.785 L962.402 681.785 L961.843 681.785 L961.284 681.785 L960.725 681.785 L960.165 681.785 L959.606 681.785 L959.047 681.785 L958.488 681.785 L957.928 681.785 L957.369 681.785 L956.81 681.785 L956.251 681.785 L955.691 681.785 L955.132 681.785 L954.573 681.785 L954.014 681.785 L953.454 681.785 L952.895 681.785 L952.336 681.785 L951.777 681.785 L951.217 681.785 L950.658 681.785 L950.099 681.785 L949.54 681.785 L948.98 681.785 L948.421 681.785 L947.862 681.785 L947.303 681.785 L946.743 681.785 L946.184 681.785 L945.625 681.785 L945.066 681.785 L944.506 681.785 L943.947 681.785 L943.388 681.785 L942.829 681.785 L942.269 681.785 L941.71 681.785 L941.151 681.785 L940.592 681.785 L940.032 681.785 L939.473 681.785 L938.914 681.785 L938.355 681.785 L937.795 681.785 L937.236 681.785 L936.677 681.785 L936.118 681.785 L935.558 681.785 L934.999 681.785 L934.44 681.785 L933.881 681.785 L933.321 681.785 L932.762 681.785 L932.203 681.785 L931.644 681.785 L931.084 681.785 L930.525 681.785 L929.966 681.785 L929.406 681.785 L928.847 681.785 L928.288 681.785 L927.729 681.785 L927.169 681.785 L926.61 681.785 L926.051 681.785 L925.492 681.785 L924.932 681.785 L924.373 681.785 L923.814 681.785 L923.255 681.785 L922.695 681.785 L922.136 681.785 L921.577 681.785 L921.018 681.785 L920.458 681.785 L919.899 681.785 L919.34 681.785 L918.781 681.785 L918.221 681.785 L917.662 681.785 L917.103 681.785 L916.544 681.785 L915.984 681.785 L915.425 681.785 L914.866 681.785 L914.307 681.785 L913.747 681.785 L913.188 681.785 L912.629 681.785 L912.07 681.785 L911.51 681.785 L910.951 681.785 L910.392 681.785 L909.833 681.785 L909.273 681.785 L908.714 681.785 L908.155 681.785 L907.596 681.785 L907.036 681.785 L906.477 681.785 L905.918 681.785 L905.359 681.785 L904.799 681.785 L904.24 681.785 L903.681 681.785 L903.122 681.785 L902.562 681.785 L902.003 681.785 L901.444 681.785 L900.885 681.785 L900.325 681.785 L899.766 681.785 L899.207 681.785 L898.648 681.785 L898.088 681.785 L897.529 681.785 L896.97 681.785 L896.411 681.785 L895.851 681.785 L895.292 681.785 L894.733 681.785 L894.174 681.785 L893.614 681.785 L893.055 681.785 L892.496 681.785 L891.937 681.785 L891.377 681.785 L890.818 681.785 L890.259 681.785 L889.7 681.785 L889.14 681.785 L888.581 681.785 L888.022 681.785 L887.463 681.785 L886.903 681.785 L886.344 681.785 L885.785 681.785 L885.226 681.785 L884.666 681.785 L884.107 681.785 L883.548 681.785 L882.989 681.785 L882.429 681.785 L881.87 681.785 L881.311 681.785 L880.752 681.785 L880.192 681.785 L879.633 681.785 L879.074 681.785 L878.515 681.785 L877.955 681.785 L877.396 681.785 L876.837 681.785 L876.278 681.785 L875.718 681.785 L875.159 681.785 L874.6 681.785 L874.041 681.785 L873.481 681.785 L872.922 681.785 L872.363 681.785 L871.804 681.785 L871.244 681.785 L870.685 681.785 L870.126 681.785 L869.567 681.785 L869.007 681.785 L868.448 681.785 L867.889 681.785 L867.33 681.785 L866.77 681.785 L866.211 681.785 L865.652 681.785 L865.093 681.785 L864.533 681.785 L863.974 681.785 L863.415 681.785 L862.856 681.785 L862.296 681.785 L861.737 681.785 L861.178 681.785 L860.619 681.785 L860.059 681.785 L859.5 681.785 L858.941 681.785 L858.382 681.785 L857.822 681.785 L857.263 681.785 L856.704 681.785 L856.145 681.785 L855.585 681.785 L855.026 681.785 L854.467 681.785 L853.908 681.785 L853.348 681.785 L852.789 681.785 L852.23 681.785 L851.671 681.785 L851.111 681.785 L850.552 681.785 L849.993 681.785 L849.434 681.785 L848.874 681.785 L848.315 681.785 L847.756 681.785 L847.197 681.785 L846.637 681.785 L846.078 681.785 L845.519 681.785 L844.96 681.785 L844.4 681.785 L843.841 681.785 L843.282 681.785 L842.723 681.785 L842.163 681.785 L841.604 681.785 L841.045 681.785 L840.486 681.785 L839.926 681.785 L839.367 681.785 L838.808 681.785 L838.249 681.785 L837.689 681.785 L837.13 681.785 L836.571 681.785 L836.012 681.785 L835.452 681.785 L834.893 681.785 L834.334 681.785 L833.775 681.785 L833.215 681.785 L832.656 681.785 L832.097 681.785 L831.538 681.785 L830.978 681.785 L830.419 681.785 L829.86 681.785 L829.301 681.785 L828.741 681.785 L828.182 681.785 L827.623 681.785 L827.064 681.785 L826.504 681.785 L825.945 681.785 L825.386 681.785 L824.827 681.785 L824.267 681.785 L823.708 681.785 L823.149 681.785 L822.59 681.785 L822.03 681.785 L821.471 681.785 L820.912 681.785 L820.353 681.785 L819.793 681.785 L819.234 681.785 L818.675 681.785 L818.116 681.785 L817.556 681.785 L816.997 681.785 L816.438 681.785 L815.879 681.785 L815.319 681.785 L814.76 681.785 L814.201 681.785 L813.642 681.785 L813.082 681.785 L812.523 681.785 L811.964 681.785 L811.405 681.785 L810.845 681.785 L810.286 681.785 L809.727 681.785 L809.168 681.785 L808.608 681.785 L808.049 681.785 L807.49 681.785 L806.931 681.785 L806.371 681.785 L805.812 681.785 L805.253 681.785 L804.693 681.785 L804.134 681.785 L803.575 681.785 L803.016 681.785 L802.456 681.785 L801.897 681.785 L801.338 681.785 L800.779 681.785 L800.219 681.785 L799.66 681.785 L799.101 681.785 L798.542 681.785 L797.982 681.785 L797.423 681.785 L796.864 681.785 L796.305 681.785 L795.745 681.785 L795.186 681.785 L794.627 681.785 L794.068 681.785 L793.508 681.785 L792.949 681.785 L792.39 681.785 L791.831 681.785 L791.271 681.785 L790.712 681.785 L790.153 681.785 L789.594 681.785 L789.034 681.785 L788.475 681.785 L787.916 681.785 L787.357 681.785 L786.797 681.785 L786.238 681.785 L785.679 681.785 L785.12 681.785 L784.56 681.785 L784.001 681.785 L783.442 681.785 L782.883 681.785 L782.323 681.785 L781.764 681.785 L781.205 681.785 L780.646 681.785 L780.086 681.785 L779.527 681.785 L778.968 681.785 L778.409 681.785 L777.849 681.785 L777.29 681.785 L776.731 681.785 L776.172 681.785 L775.612 681.785 L775.053 681.785 L774.494 681.785 L773.935 681.785 L773.375 681.785 L772.816 681.785 L772.257 681.785 L771.698 681.785 L771.138 681.785 L770.579 681.785 L770.02 681.785 L769.461 681.785 L768.901 681.785 L768.342 681.785 L767.783 681.785 L767.224 681.785 L766.664 681.785 L766.105 681.785 L765.546 681.785 L764.987 681.785 L764.427 681.785 L763.868 681.785 L763.309 681.785 L762.75 681.785 L762.19 681.785 L761.631 681.785 L761.072 681.785 L760.513 681.785 L759.953 681.785 L759.394 681.785 L758.835 681.785 L758.276 681.785 L757.716 681.785 L757.157 681.785 L756.598 681.785 L756.039 681.785 L755.479 681.785 L754.92 681.785 L754.361 681.785 L753.802 681.785 L753.242 681.785 L752.683 681.785 L752.124 681.785 L751.565 681.785 L751.005 681.785 L750.446 681.785 L749.887 681.785 L749.328 681.785 L748.768 681.785 L748.209 681.785 L747.65 681.785 L747.091 681.785 L746.531 681.785 L745.972 681.785 L745.413 681.785 L744.854 681.785 L744.294 681.785 L743.735 681.785 L743.176 681.785 L742.617 681.785 L742.057 681.785 L741.498 681.785 L740.939 681.785 L740.38 681.785 L739.82 681.785 L739.261 681.785 L738.702 681.785 L738.143 681.785 L737.583 681.785 L737.024 681.785 L736.465 681.785 L735.906 681.785 L735.346 681.785 L734.787 681.785 L734.228 681.785 L733.669 681.785 L733.109 681.785 L732.55 681.785 L731.991 681.785 L731.432 681.785 L730.872 681.785 L730.313 681.785 L729.754 681.785 L729.195 681.785 L728.635 681.785 L728.076 681.785 L727.517 681.785 L726.958 681.785 L726.398 681.785 L725.839 681.785 L725.28 681.785 L724.721 681.785 L724.161 681.785 L723.602 681.785 L723.043 681.785 L722.484 681.785 L721.924 681.785 L721.365 681.785 L720.806 681.785 L720.247 681.785  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip823)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.175 720.806,683.175 721.365,683.175 721.924,683.175 722.484,683.175 723.043,683.175 723.602,683.175 724.161,683.175 724.721,683.175 725.28,683.175 725.839,683.175 726.398,683.175 726.958,683.175 727.517,683.175 728.076,683.175 728.635,683.175 729.195,683.175 729.754,683.175 730.313,683.175 730.872,683.175 731.432,683.175 731.991,683.175 732.55,683.175 733.109,683.175 733.669,683.175 734.228,683.175 734.787,683.175 735.346,683.175 735.906,683.175 736.465,683.175 737.024,683.175 737.583,683.175 738.143,683.175 738.702,683.175 739.261,683.175 739.82,683.175 740.38,683.175 740.939,683.175 741.498,683.175 742.057,683.175 742.617,683.175 743.176,683.175 743.735,683.175 744.294,683.175 744.854,683.175 745.413,683.175 745.972,683.175 746.531,683.175 747.091,683.175 747.65,683.175 748.209,683.175 748.768,683.175 749.328,683.175 749.887,683.175 750.446,683.175 751.005,683.175 751.565,683.175 752.124,683.175 752.683,683.175 753.242,683.175 753.802,683.175 754.361,683.175 754.92,683.175 755.479,683.175 756.039,683.175 756.598,683.175 757.157,683.175 757.716,683.175 758.276,683.175 758.835,683.175 759.394,683.175 759.953,683.175 760.513,683.175 761.072,683.175 761.631,683.175 762.19,683.175 762.75,683.175 763.309,683.175 763.868,683.175 764.427,683.175 764.987,683.175 765.546,683.175 766.105,683.175 766.664,683.175 767.224,683.175 767.783,683.175 768.342,683.175 768.901,683.175 769.461,683.175 770.02,683.175 770.579,683.175 771.138,683.175 771.698,683.175 772.257,683.175 772.816,683.175 773.375,683.175 773.935,683.175 774.494,683.175 775.053,683.175 775.612,683.175 776.172,683.175 776.731,683.175 777.29,683.175 777.849,683.175 778.409,683.175 778.968,683.175 779.527,683.175 780.086,683.175 780.646,683.175 781.205,683.175 781.764,683.175 782.323,683.175 782.883,683.175 783.442,683.175 784.001,683.175 784.56,683.175 785.12,683.175 785.679,683.175 786.238,683.175 786.797,683.175 787.357,683.175 787.916,683.175 788.475,683.175 789.034,683.175 789.594,683.175 790.153,683.175 790.712,683.175 791.271,683.175 791.831,683.175 792.39,683.175 792.949,683.175 793.508,683.175 794.068,683.175 794.627,683.175 795.186,683.175 795.745,683.175 796.305,683.175 796.864,683.175 797.423,683.175 797.982,683.175 798.542,683.175 799.101,683.175 799.66,683.175 800.219,683.175 800.779,683.175 801.338,683.175 801.897,683.175 802.456,683.175 803.016,683.175 803.575,683.175 804.134,683.175 804.693,683.175 805.253,683.175 805.812,683.175 806.371,683.175 806.931,683.175 807.49,683.175 808.049,683.175 808.608,683.175 809.168,683.175 809.727,683.175 810.286,683.175 810.845,683.175 811.405,683.175 811.964,683.175 812.523,683.175 813.082,683.175 813.642,683.175 814.201,683.175 814.76,683.175 815.319,683.175 815.879,683.175 816.438,683.175 816.997,683.175 817.556,683.175 818.116,683.175 818.675,683.175 819.234,683.175 819.793,683.175 820.353,683.175 820.912,683.175 821.471,683.175 822.03,683.175 822.59,683.175 823.149,683.175 823.708,683.175 824.267,683.175 824.827,683.175 825.386,683.175 825.945,683.175 826.504,683.175 827.064,683.175 827.623,683.175 828.182,683.175 828.741,683.175 829.301,683.175 829.86,683.175 830.419,683.175 830.978,683.175 831.538,683.175 832.097,683.175 832.656,683.175 833.215,683.175 833.775,683.175 834.334,683.175 834.893,683.175 835.452,683.175 836.012,683.175 836.571,683.175 837.13,683.175 837.689,683.175 838.249,683.175 838.808,683.175 839.367,683.175 839.926,683.175 840.486,683.175 841.045,683.175 841.604,683.175 842.163,683.175 842.723,683.175 843.282,683.175 843.841,683.175 844.4,683.175 844.96,683.175 845.519,683.175 846.078,683.175 846.637,683.175 847.197,683.175 847.756,683.175 848.315,683.175 848.874,683.175 849.434,683.175 849.993,683.175 850.552,683.175 851.111,683.175 851.671,683.175 852.23,683.175 852.789,683.175 853.348,683.175 853.908,683.175 854.467,683.175 855.026,683.175 855.585,683.175 856.145,683.175 856.704,683.175 857.263,683.175 857.822,683.175 858.382,683.175 858.941,683.175 859.5,683.175 860.059,683.175 860.619,683.175 861.178,683.175 861.737,683.175 862.296,683.175 862.856,683.175 863.415,683.175 863.974,683.175 864.533,683.175 865.093,683.175 865.652,683.175 866.211,683.175 866.77,683.175 867.33,683.175 867.889,683.175 868.448,683.175 869.007,683.175 869.567,683.175 870.126,683.175 870.685,683.175 871.244,683.175 871.804,683.175 872.363,683.175 872.922,683.175 873.481,683.175 874.041,683.175 874.6,683.175 875.159,683.175 875.718,683.175 876.278,683.175 876.837,683.175 877.396,683.175 877.955,683.175 878.515,683.175 879.074,683.175 879.633,683.175 880.192,683.175 880.752,683.175 881.311,683.175 881.87,683.175 882.429,683.175 882.989,683.175 883.548,683.175 884.107,683.175 884.666,683.175 885.226,683.175 885.785,683.175 886.344,683.175 886.903,683.175 887.463,683.175 888.022,683.175 888.581,683.175 889.14,683.175 889.7,683.175 890.259,683.175 890.818,683.175 891.377,683.175 891.937,683.175 892.496,683.175 893.055,683.175 893.614,683.175 894.174,683.175 894.733,683.175 895.292,683.175 895.851,683.175 896.411,683.175 896.97,683.175 897.529,683.175 898.088,683.175 898.648,683.175 899.207,683.175 899.766,683.175 900.325,683.175 900.885,683.175 901.444,683.175 902.003,683.175 902.562,683.175 903.122,683.175 903.681,683.175 904.24,683.175 904.799,683.175 905.359,683.175 905.918,683.175 906.477,683.175 907.036,683.175 907.596,683.175 908.155,683.175 908.714,683.175 909.273,683.175 909.833,683.175 910.392,683.175 910.951,683.175 911.51,683.175 912.07,683.175 912.629,683.175 913.188,683.175 913.747,683.175 914.307,683.175 914.866,683.175 915.425,683.175 915.984,683.175 916.544,683.175 917.103,683.175 917.662,683.175 918.221,683.175 918.781,683.175 919.34,683.175 919.899,683.175 920.458,683.175 921.018,683.175 921.577,683.175 922.136,683.175 922.695,683.175 923.255,683.175 923.814,683.175 924.373,683.175 924.932,683.175 925.492,683.175 926.051,683.175 926.61,683.175 927.169,683.175 927.729,683.175 928.288,683.175 928.847,683.175 929.406,683.175 929.966,683.175 930.525,683.175 931.084,683.175 931.644,683.175 932.203,683.175 932.762,683.175 933.321,683.175 933.881,683.175 934.44,683.175 934.999,683.175 935.558,683.175 936.118,683.175 936.677,683.175 937.236,683.175 937.795,683.175 938.355,683.175 938.914,683.175 939.473,683.175 940.032,683.175 940.592,683.175 941.151,683.175 941.71,683.175 942.269,683.175 942.829,683.175 943.388,683.175 943.947,683.175 944.506,683.175 945.066,683.175 945.625,683.175 946.184,683.175 946.743,683.175 947.303,683.175 947.862,683.175 948.421,683.175 948.98,683.175 949.54,683.175 950.099,683.175 950.658,683.175 951.217,683.175 951.777,683.175 952.336,683.175 952.895,683.175 953.454,683.175 954.014,683.175 954.573,683.175 955.132,683.175 955.691,683.175 956.251,683.175 956.81,683.175 957.369,683.175 957.928,683.175 958.488,683.175 959.047,683.175 959.606,683.175 960.165,683.175 960.725,683.175 961.284,683.175 961.843,683.175 962.402,683.175 962.962,683.175 963.521,683.175 964.08,683.175 964.639,683.175 965.199,683.175 965.758,683.175 966.317,683.175 966.876,683.175 967.436,683.175 967.995,683.175 968.554,683.175 969.113,683.175 969.673,683.175 970.232,683.175 970.791,683.175 971.35,683.175 971.91,683.175 972.469,683.175 973.028,683.175 973.587,683.175 974.147,683.175 974.706,683.175 975.265,683.175 975.824,683.175 976.384,683.175 976.943,683.175 977.502,683.175 978.061,683.175 978.621,683.175 979.18,683.175 979.739,683.175 980.298,683.175 980.858,683.175 981.417,683.175 981.976,683.175 982.535,683.175 983.095,683.175 983.654,683.175 984.213,683.175 984.772,683.175 985.332,683.175 985.891,683.175 986.45,683.175 987.009,683.175 987.569,683.175 988.128,683.175 988.687,683.175 989.246,683.175 989.806,683.175 990.365,683.175 990.924,683.175 991.483,683.175 992.043,683.175 992.602,683.175 993.161,683.175 993.72,683.175 994.28,683.175 994.839,683.175 995.398,683.175 995.957,683.175 996.517,683.175 997.076,683.175 997.635,683.175 998.194,683.175 998.754,683.175 999.313,683.175 999.872,683.175 1000.43,683.175 1000.99,683.175 1001.55,683.175 1002.11,683.175 1002.67,683.175 1003.23,683.175 1003.79,683.175 1004.35,683.175 1004.91,683.175 1005.46,683.175 1006.02,683.175 1006.58,683.175 1007.14,683.175 1007.7,683.175 1008.26,683.175 1008.82,683.175 1009.38,683.175 1009.94,683.175 1010.5,683.175 1011.06,683.175 1011.62,683.175 1012.18,683.175 1012.73,683.175 1013.29,683.175 1013.85,683.175 1014.41,683.175 1014.97,683.175 1015.53,683.175 1016.09,683.175 1016.65,683.175 1017.21,683.175 1017.77,683.175 1018.33,683.175 1018.89,683.175 1019.45,683.175 1020.01,683.175 1020.56,683.175 1021.12,683.175 1021.68,683.175 1022.24,683.175 1022.8,683.175 1023.36,683.175 1023.92,683.175 1024.48,683.175 1025.04,683.175 1025.6,683.175 1026.16,683.175 1026.72,683.175 1027.28,683.175 1027.83,683.175 1028.39,683.175 1028.95,683.175 1029.51,683.175 1030.07,683.175 1030.63,683.175 1031.19,683.175 1031.75,683.175 1032.31,683.175 1032.87,683.175 1033.43,683.175 1033.99,683.175 1034.55,683.175 1035.1,683.175 1035.66,683.175 1036.22,683.175 1036.78,683.175 1037.34,683.175 1037.9,683.175 1038.46,683.175 1039.02,683.175 1039.58,683.175 1040.14,683.175 1040.7,683.175 1041.26,683.175 1041.82,683.175 1042.38,683.175 1042.93,683.175 1043.49,683.175 1044.05,683.175 1044.61,683.175 1045.17,683.175 1045.73,683.175 1046.29,683.175 1046.85,683.175 1047.41,683.175 1047.97,683.175 1048.53,683.175 1049.09,683.175 1049.65,683.175 1050.2,683.175 1050.76,683.175 1051.32,683.175 1051.88,683.175 1052.44,683.175 1053,683.175 1053.56,683.175 1054.12,683.175 1054.68,683.175 1055.24,683.175 1055.8,683.175 1056.36,683.175 1056.92,683.175 1057.48,683.175 1058.03,683.175 1058.59,683.175 1059.15,683.175 1059.71,683.175 1060.27,683.175 1060.83,683.175 1061.39,683.175 1061.95,683.175 1062.51,683.175 1063.07,683.175 1063.63,683.175 1064.19,683.175 1064.75,683.175 1065.3,683.175 1065.86,683.175 1066.42,683.175 1066.98,683.175 1067.54,683.175 1068.1,683.175 1068.66,683.175 1069.22,683.175 1069.78,683.175 1070.34,683.175 1070.9,683.175 1071.46,683.175 1072.02,683.175 1072.57,683.175 1073.13,683.175 1073.69,683.175 1074.25,683.175 1074.81,683.175 1075.37,683.175 1075.93,683.175 1076.49,683.175 1077.05,683.175 1077.61,683.175 1078.17,683.175 1078.73,683.175 1079.29,683.175 1079.85,683.175 1080.4,683.175 1080.96,683.175 1081.52,683.175 1082.08,683.175 1082.64,683.175 1083.2,683.175 1083.76,683.175 1084.32,683.175 1084.88,683.175 1085.44,683.175 1086,683.175 1086.56,683.175 1087.12,683.175 1087.67,683.175 1088.23,683.175 1088.79,683.175 1089.35,683.175 1089.91,683.175 1090.47,683.175 1091.03,683.175 1091.59,683.175 1092.15,683.175 1092.71,683.175 1093.27,683.175 1093.83,683.175 1094.39,683.175 1094.94,683.175 1095.5,683.175 1096.06,683.175 1096.62,683.175 1097.18,683.175 1097.74,683.175 1098.3,683.175 1098.86,683.175 1099.42,683.175 1099.98,683.175 1100.54,683.175 1101.1,683.175 1101.66,683.175 1102.22,683.175 1102.77,683.175 1103.33,683.175 1103.89,683.175 1104.45,683.175 1105.01,683.175 1105.57,683.175 1106.13,683.175 1106.69,683.175 1107.25,683.175 1107.81,683.175 1108.37,683.175 1108.93,683.175 1109.49,683.175 1110.04,683.175 1110.6,683.175 1111.16,683.175 1111.72,683.175 1112.28,683.175 1112.84,683.175 1113.4,683.175 1113.96,683.175 1114.52,683.175 1115.08,683.175 1115.64,683.175 1116.2,683.175 1116.76,683.175 1117.31,683.175 1117.87,683.175 1118.43,683.175 1118.99,683.175 1119.55,683.175 1120.11,683.175 1120.67,683.175 1121.23,683.175 1121.79,683.175 1122.35,683.175 1122.91,683.175 1123.47,683.175 1124.03,683.175 1124.59,683.175 1125.14,683.175 1125.7,683.175 1126.26,683.175 1126.82,683.175 1127.38,683.175 1127.94,683.175 1128.5,683.175 1129.06,683.175 1129.62,683.175 1130.18,683.175 1130.74,683.175 1131.3,683.175 1131.86,683.175 1132.41,683.175 1132.97,683.175 1133.53,683.175 1134.09,683.175 1134.65,683.175 1135.21,683.175 1135.77,683.175 1136.33,683.175 1136.89,683.175 1137.45,683.175 1138.01,683.175 1138.57,683.175 1139.13,683.175 1139.68,683.175 1140.24,683.175 1140.8,683.175 1141.36,683.175 1141.92,683.175 1142.48,683.175 1143.04,683.175 1143.6,683.175 1144.16,683.175 1144.72,683.175 1145.28,683.175 1145.84,683.175 1146.4,683.175 1146.96,683.175 1147.51,683.175 1148.07,683.175 1148.63,683.175 1149.19,683.175 1149.75,683.175 1150.31,683.175 1150.87,683.175 1151.43,683.175 1151.99,683.175 1152.55,683.175 1153.11,683.175 1153.67,683.175 1154.23,683.175 1154.78,683.175 1155.34,683.175 1155.9,683.175 1156.46,683.175 1157.02,683.175 1157.58,683.175 1158.14,683.175 1158.7,683.175 1159.26,683.175 1159.82,683.175 1160.38,683.175 1160.94,683.175 1161.5,683.175 1162.05,683.175 1162.61,683.175 1163.17,683.175 1163.73,683.175 1164.29,683.175 1164.85,683.175 1165.41,683.175 1165.97,683.175 1166.53,683.175 1167.09,683.175 1167.65,683.175 1168.21,683.175 1168.77,683.175 1169.33,683.175 1169.88,683.175 1170.44,683.175 1171,683.175 1171.56,683.175 1172.12,683.175 1172.68,683.175 1173.24,683.175 1173.8,683.175 1174.36,683.175 1174.92,683.175 1175.48,683.175 1176.04,683.175 1176.6,683.175 1177.15,683.175 1177.71,683.175 1178.27,683.175 1178.83,683.175 1179.39,683.175 1179.95,683.175 1180.51,683.175 1181.07,683.175 1181.63,683.175 1182.19,683.175 1182.75,683.175 1183.31,683.175 1183.87,683.175 1184.43,683.175 1184.98,683.175 1185.54,683.175 1186.1,683.175 1186.66,683.175 1187.22,683.175 1187.78,683.175 1188.34,683.175 1188.9,683.175 1189.46,683.175 1190.02,683.175 1190.58,683.175 1191.14,683.175 1191.7,683.175 1192.25,683.175 1192.81,683.175 1193.37,683.175 1193.93,683.175 1194.49,683.175 1195.05,683.175 1195.61,683.175 1196.17,683.175 1196.73,683.175 1197.29,683.175 1197.85,683.175 1198.41,683.175 1198.97,683.175 1199.52,683.175 1200.08,683.175 1200.64,683.175 1201.2,683.175 1201.76,683.175 1202.32,683.175 1202.88,683.175 1203.44,683.175 1204,683.175 1204.56,683.175 1205.12,683.175 1205.68,683.175 1206.24,683.175 1206.8,683.175 1207.35,683.175 1207.91,683.175 1208.47,683.175 1209.03,683.175 1209.59,683.175 1210.15,683.175 1210.71,683.175 1211.27,683.175 1211.83,683.175 1212.39,683.175 1212.95,683.175 1213.51,683.175 1214.07,683.175 1214.62,683.175 1215.18,683.175 1215.74,683.175 1216.3,683.175 1216.86,683.175 1217.42,683.175 1217.98,683.175 1218.54,683.175 1219.1,683.175 1219.66,683.175 1220.22,683.175 1220.78,683.175 1221.34,683.175 1221.89,683.175 1222.45,683.175 1223.01,683.175 1223.57,683.175 1224.13,683.175 1224.69,683.175 1225.25,683.175 1225.81,683.175 1226.37,683.175 1226.93,683.175 1227.49,683.175 1228.05,683.175 1228.61,683.175 1229.17,683.175 1229.72,683.175 1230.28,683.175 1230.84,683.175 1231.4,683.175 1231.96,683.175 1232.52,683.175 1233.08,683.175 1233.64,683.175 1234.2,683.175 1234.76,683.175 1235.32,683.175 1235.88,683.175 1236.44,683.175 1236.99,683.175 1237.55,683.175 1238.11,683.175 1238.67,683.175 1239.23,683.175 1239.79,683.175 1240.35,683.175 1240.91,683.175 1241.47,683.175 1242.03,683.175 1242.59,683.175 1243.15,683.175 1243.71,683.175 1244.26,683.175 1244.82,683.175 1245.38,683.175 1245.94,683.175 1246.5,683.175 1247.06,683.175 1247.62,683.175 1248.18,683.175 1248.74,683.175 1249.3,683.175 1249.86,683.175 1250.42,683.175 1250.98,683.175 1251.54,683.175 1252.09,683.175 1252.65,683.175 1253.21,683.175 1253.77,683.175 1254.33,683.175 1254.89,683.175 1255.45,683.175 1256.01,683.175 1256.57,683.175 1257.13,683.175 1257.69,683.175 1258.25,683.175 1258.81,683.175 1259.36,683.175 1259.92,683.175 1260.48,683.175 1261.04,683.175 1261.6,683.175 1262.16,683.175 1262.72,683.175 1263.28,683.175 1263.84,683.175 1264.4,683.175 1264.96,683.175 1265.52,683.175 1266.08,683.175 1266.63,683.175 1267.19,683.175 1267.75,683.175 1268.31,683.175 1268.87,683.175 1269.43,683.175 1269.99,683.175 1270.55,683.175 1271.11,683.175 1271.67,683.175 1272.23,683.175 1272.79,683.175 1273.35,683.175 1273.91,683.175 1274.46,683.175 1275.02,683.175 1275.58,683.175 1276.14,683.175 1276.7,683.175 1277.26,683.175 1277.82,683.175 1278.38,683.175 1278.94,683.175 1279.5,683.175 1280.06,683.175 1280.62,683.175 1281.18,683.175 1281.73,683.175 1282.29,683.175 1282.85,683.175 1283.41,683.175 1283.97,683.175 1284.53,683.175 1285.09,683.175 1285.65,683.175 1286.21,683.175 1286.77,683.175 1287.33,683.175 1287.89,683.175 1288.45,683.175 1289,683.175 1289.56,683.175 1290.12,683.175 1290.68,683.175 1291.24,683.175 1291.8,683.175 1292.36,683.175 1292.92,683.175 1293.48,683.175 1294.04,683.175 1294.6,683.175 1295.16,683.175 1295.72,683.175 1296.28,683.175 1296.83,683.175 1297.39,683.175 1297.95,683.175 1298.51,683.175 1299.07,683.175 1299.63,683.175 1300.19,683.175 1300.75,683.175 1301.31,683.175 1301.87,683.175 1302.43,683.175 1302.99,683.175 1303.55,683.175 1304.1,683.175 1304.66,683.175 1305.22,683.175 1305.78,683.175 1306.34,683.175 1306.9,683.175 1307.46,683.175 1308.02,683.175 1308.58,683.175 1309.14,683.175 1309.7,683.175 1310.26,683.175 1310.82,683.175 1311.38,683.175 1311.93,683.175 1312.49,683.175 1313.05,683.175 1313.61,683.175 1314.17,683.175 1314.73,683.175 1315.29,683.175 1315.85,683.175 1316.41,683.175 1316.97,683.175 1317.53,683.175 1318.09,683.175 1318.65,683.175 1319.2,683.175 1319.76,683.175 1320.32,683.175 1320.88,683.175 1321.44,683.175 1322,683.175 1322.56,683.175 1323.12,683.175 1323.68,683.175 1324.24,683.175 1324.8,683.175 1325.36,683.175 1325.92,683.175 1326.47,683.175 1327.03,683.175 1327.59,683.175 1328.15,683.175 1328.71,683.175 1329.27,683.175 1329.83,683.175 1330.39,683.175 1330.95,683.175 1331.51,683.175 1332.07,683.175 1332.63,683.175 1333.19,683.175 1333.75,683.175 1334.3,683.175 1334.86,683.175 1335.42,683.175 1335.98,683.175 1336.54,683.175 1337.1,683.175 1337.66,683.175 1338.22,683.175 1338.78,683.175 1339.34,683.175 1339.9,683.175 1340.46,683.175 1341.02,683.175 1341.57,683.175 1342.13,683.175 1342.69,683.175 1343.25,683.175 1343.81,683.175 1344.37,683.175 1344.93,683.175 1345.49,683.175 1346.05,683.175 1346.61,683.175 1347.17,683.175 1347.73,683.175 1348.29,683.175 1348.84,683.175 1349.4,683.175 1349.96,683.175 1350.52,683.175 1351.08,683.175 1351.64,683.175 1352.2,683.175 1352.76,683.175 1353.32,683.175 1353.88,683.175 1354.44,683.175 1355,683.175 1355.56,683.175 1356.12,683.175 1356.67,683.175 1357.23,683.175 1357.79,683.175 1358.35,683.175 1358.91,683.175 1359.47,683.175 1360.03,683.175 1360.59,683.175 1361.15,683.175 1361.71,683.175 1362.27,683.175 1362.83,683.175 1363.39,683.175 1363.94,683.175 1364.5,683.175 1365.06,683.175 1365.62,683.175 1366.18,683.175 1366.74,683.175 1367.3,683.175 1367.86,683.175 1368.42,683.175 1368.98,683.175 1369.54,683.175 1370.1,683.175 1370.66,683.175 1371.21,683.175 1371.77,683.175 1372.33,683.175 1372.89,683.175 1373.45,683.175 1374.01,683.175 1374.57,683.175 1375.13,683.175 1375.69,683.175 1376.25,683.175 1376.81,683.175 1377.37,683.175 1377.93,683.175 1378.49,683.175 1379.04,683.175 1379.6,683.175 1380.16,683.175 1380.72,683.175 1381.28,683.175 1381.84,683.175 1382.4,683.175 1382.96,683.175 1383.52,683.175 1384.08,683.175 1384.64,683.175 1385.2,683.175 1385.76,683.175 1386.31,683.175 1386.87,683.175 1387.43,683.175 1387.99,683.175 1388.55,683.175 1389.11,683.175 1389.67,683.175 1390.23,683.175 1390.79,683.175 1391.35,683.175 1391.91,683.175 1392.47,683.175 1393.03,683.175 1393.58,683.175 1394.14,683.175 1394.7,683.175 1395.26,683.175 1395.82,683.175 1396.38,683.175 1396.94,683.175 1397.5,683.175 1398.06,683.175 1398.62,683.175 1399.18,683.175 1399.74,683.175 1400.3,683.175 1400.86,683.175 1401.41,683.175 1401.97,683.175 1402.53,683.175 1403.09,683.175 1403.65,683.175 1404.21,683.175 1404.77,683.175 1405.33,683.175 1405.89,683.175 1406.45,683.175 1407.01,683.175 1407.57,683.175 1408.13,683.175 1408.68,683.175 1409.24,683.175 1409.8,683.175 1410.36,683.175 1410.92,683.175 1411.48,683.175 1412.04,683.175 1412.6,683.175 1413.16,683.175 1413.72,683.175 1414.28,683.175 1414.84,683.175 1415.4,683.175 1415.95,683.175 1416.51,683.175 1417.07,683.175 1417.63,683.175 1418.19,683.175 1418.75,683.175 1419.31,683.175 1419.87,683.175 1420.43,683.175 1420.99,683.175 1421.55,683.175 1422.11,683.175 1422.67,683.175 1423.23,683.175 1423.78,683.175 1424.34,683.175 1424.9,683.175 1425.46,683.175 1426.02,683.175 1426.58,683.175 1427.14,683.175 1427.7,683.175 1428.26,683.175 1428.82,683.175 1429.38,683.175 1429.94,683.175 1430.5,683.175 1431.05,683.175 1431.61,683.175 1432.17,683.175 1432.73,683.175 1433.29,683.175 1433.85,683.175 1434.41,683.175 1434.97,683.175 1435.53,683.175 1436.09,683.175 1436.65,683.175 1437.21,683.175 1437.77,683.175 1438.33,683.175 1438.88,683.175 1439.44,683.175 1440,683.175 1440.56,683.175 1441.12,683.175 1441.68,683.175 1442.24,683.175 1442.8,683.175 1443.36,683.175 1443.92,683.175 1444.48,683.175 1445.04,683.175 1445.6,683.175 1446.15,683.175 1446.71,683.175 1447.27,683.175 1447.83,683.175 1448.39,683.175 1448.95,683.175 1449.51,683.175 1450.07,683.175 1450.63,683.175 1451.19,683.175 1451.75,683.175 1452.31,683.175 1452.87,683.175 1453.42,683.175 1453.98,683.175 1454.54,683.175 1455.1,683.175 1455.66,683.175 1456.22,683.175 1456.78,683.175 1457.34,683.175 1457.9,683.175 1458.46,683.175 1459.02,683.175 1459.58,683.175 1460.14,683.175 1460.7,683.175 1461.25,683.175 1461.81,683.175 1462.37,683.175 1462.93,683.175 1463.49,683.175 1464.05,683.175 1464.61,683.175 1465.17,683.175 1465.73,683.175 1466.29,683.175 1466.85,683.175 1467.41,683.175 1467.97,683.175 1468.52,683.175 1469.08,683.175 1469.64,683.175 1470.2,683.175 1470.76,683.175 1471.32,683.175 1471.88,683.175 1472.44,683.175 1473,683.175 1473.56,683.175 1474.12,683.175 1474.68,683.175 1475.24,683.175 1475.79,683.175 1476.35,683.175 1476.91,683.175 1477.47,683.175 1478.03,683.175 1478.59,683.175 1479.15,683.175 1479.71,683.175 1480.27,683.175 1480.83,683.175 1481.39,683.175 1481.95,683.175 1482.51,683.175 1483.07,683.175 1483.62,683.175 1484.18,683.175 1484.74,683.175 1485.3,683.175 1485.86,683.175 1486.42,683.175 1486.98,683.175 1487.54,683.175 1488.1,683.175 1488.66,683.175 1489.22,683.175 1489.78,683.175 1490.34,683.175 1490.89,683.175 1491.45,683.175 1492.01,683.175 1492.57,683.175 1493.13,683.175 1493.69,683.175 1494.25,683.175 1494.81,683.175 1495.37,683.175 1495.93,683.175 1496.49,683.175 1497.05,683.175 1497.61,683.175 1498.16,683.175 1498.72,683.175 1499.28,683.175 1499.84,683.175 1500.4,683.175 1500.96,683.175 1501.52,683.175 1502.08,683.175 1502.64,683.175 1503.2,683.175 1503.76,683.175 1504.32,683.175 1504.88,683.175 1505.44,683.175 1505.99,683.175 1506.55,683.175 1507.11,683.175 1507.67,683.175 1508.23,683.175 1508.79,683.175 1509.35,683.175 1509.91,683.175 1510.47,683.175 1511.03,683.175 1511.59,683.175 1512.15,683.175 1512.71,683.175 1513.26,683.175 1513.82,683.175 1514.38,683.175 1514.94,683.175 1515.5,683.175 1516.06,683.175 1516.62,683.175 1517.18,683.175 1517.74,683.175 1518.3,683.175 1518.86,683.175 1519.42,683.175 1519.98,683.175 1520.53,683.175 1521.09,683.175 1521.65,683.175 1522.21,683.175 1522.77,683.175 1523.33,683.175 1523.89,683.175 1524.45,683.175 1525.01,683.175 1525.57,683.175 1526.13,683.175 1526.69,683.175 1527.25,683.175 1527.81,683.175 1528.36,683.175 1528.92,683.175 1529.48,683.175 1530.04,683.175 1530.6,683.175 1531.16,683.175 1531.72,683.175 1532.28,683.175 1532.84,683.175 1533.4,683.175 1533.96,683.175 1534.52,683.175 1535.08,683.175 1535.63,683.175 1536.19,683.175 1536.75,683.175 1537.31,683.175 1537.87,683.175 1538.43,683.175 1538.99,683.175 1539.55,683.175 1540.11,683.175 1540.67,683.175 1541.23,683.175 1541.79,683.175 1542.35,683.175 1542.9,683.175 1543.46,683.175 1544.02,683.175 1544.58,683.175 1545.14,683.175 1545.7,683.175 1546.26,683.175 1546.82,683.175 1547.38,683.175 1547.94,683.175 1548.5,683.175 1549.06,683.175 1549.62,683.175 1550.18,683.175 1550.73,683.175 1551.29,683.175 1551.85,683.175 1552.41,683.175 1552.97,683.175 1553.53,683.175 1554.09,683.175 1554.65,683.175 1555.21,683.175 1555.77,683.175 1556.33,683.175 1556.89,683.175 1557.45,683.175 1558,683.175 1558.56,683.175 1559.12,683.175 1559.68,683.175 1560.24,683.175 1560.8,683.175 1561.36,683.175 1561.92,683.175 1562.48,683.175 1563.04,683.175 1563.6,683.175 1564.16,683.175 1564.72,683.175 1565.28,683.175 1565.83,683.175 1566.39,683.175 1566.95,683.175 1567.51,683.175 1568.07,683.175 1568.63,683.175 1569.19,683.175 1569.75,683.175 1570.31,683.175 1570.87,683.175 1571.43,683.175 1571.99,683.175 1572.55,683.175 1573.1,683.175 1573.66,683.175 1574.22,683.175 1574.78,683.175 1575.34,683.175 1575.9,683.175 1576.46,683.175 1577.02,683.175 1577.58,683.175 1578.14,683.175 1578.7,683.175 1579.26,683.175 1579.82,683.175 1580.37,683.175 1580.93,683.175 1581.49,683.175 1582.05,683.175 1582.61,683.175 1583.17,683.175 1583.73,683.175 1584.29,683.175 1584.85,683.175 1585.41,683.175 1585.97,683.175 1586.53,683.175 1587.09,683.175 1587.65,683.175 1588.2,683.175 1588.76,683.175 1589.32,683.175 1589.88,683.175 1590.44,683.175 1591,683.175 1591.56,683.175 1592.12,683.175 1592.68,683.175 1593.24,683.175 1593.8,683.175 1594.36,683.175 1594.92,683.175 1595.47,683.175 1596.03,683.175 1596.59,683.175 1597.15,683.175 1597.71,683.175 1598.27,683.175 1598.83,683.175 1599.39,683.175 1599.95,683.175 1600.51,683.175 1601.07,683.175 1601.63,683.175 1602.19,683.175 1602.74,683.175 1603.3,683.175 1603.86,683.175 1604.42,683.175 1604.98,683.175 1605.54,683.175 1606.1,683.175 1606.66,683.175 1607.22,683.175 1607.78,683.175 1608.34,683.175 1608.9,683.175 1609.46,683.175 1610.02,683.175 1610.57,683.175 1611.13,683.175 1611.69,683.175 1612.25,683.175 1612.81,683.175 1613.37,683.175 1613.93,683.175 1614.49,683.175 1615.05,683.175 1615.61,683.175 1616.17,683.175 1616.73,683.175 1617.29,683.175 1617.84,683.175 1618.4,683.175 1618.96,683.175 1619.52,683.175 1620.08,683.175 1620.64,683.175 1621.2,683.175 1621.76,683.175 1622.32,683.175 1622.88,683.175 1623.44,683.175 1624,683.175 1624.56,683.175 1625.11,683.175 1625.67,683.175 1626.23,683.175 1626.79,683.175 1627.35,683.175 1627.91,683.175 1628.47,683.175 1629.03,683.175 1629.59,683.175 1630.15,683.175 1630.71,683.175 1631.27,683.175 1631.83,683.175 1632.39,683.175 1632.94,683.175 1633.5,683.175 1634.06,683.175 1634.62,683.175 1635.18,683.175 1635.74,683.175 1636.3,683.175 1636.86,683.175 1637.42,683.175 1637.98,683.175 1638.54,683.175 1639.1,683.175 1639.66,683.175 1640.21,683.175 1640.77,683.175 1641.33,683.175 1641.89,683.175 1642.45,683.175 1643.01,683.175 1643.57,683.175 1644.13,683.175 1644.69,683.175 1645.25,683.175 1645.81,683.175 1646.37,683.175 1646.93,683.175 1647.48,683.175 1648.04,683.175 1648.6,683.175 1649.16,683.175 1649.72,683.175 1650.28,683.175 1650.84,683.175 1651.4,683.175 1651.96,683.175 1652.52,683.175 1653.08,683.175 1653.64,683.175 1654.2,683.175 1654.76,683.175 1655.31,683.175 1655.87,683.175 1656.43,683.175 1656.99,683.175 1657.55,683.175 1658.11,683.175 1658.67,683.175 1659.23,683.175 1659.79,683.175 1660.35,683.175 1660.91,683.175 1661.47,683.175 1662.03,683.175 1662.58,683.175 1663.14,683.175 1663.7,683.175 1664.26,683.175 1664.82,683.175 1665.38,683.175 1665.94,683.175 1666.5,683.175 1667.06,683.175 1667.62,683.175 1668.18,683.175 1668.74,683.175 1669.3,683.175 1669.85,683.175 1670.41,683.175 1670.97,683.175 1671.53,683.175 1672.09,683.175 1672.65,683.175 1673.21,683.175 1673.77,683.175 1674.33,683.175 1674.89,683.175 1675.45,683.175 1676.01,683.175 1676.57,683.175 1677.13,683.175 1677.68,683.175 1678.24,683.175 1678.8,683.175 1679.36,683.175 1679.92,683.175 1680.48,683.175 1681.04,683.175 1681.6,683.175 1682.16,683.175 1682.72,683.175 1683.28,683.175 1683.84,683.175 1684.4,683.175 1684.95,683.175 1685.51,683.175 1686.07,683.175 1686.63,683.175 1687.19,683.175 1687.75,683.175 1688.31,683.175 1688.87,683.175 1689.43,683.175 1689.99,683.175 1690.55,683.175 1691.11,683.175 1691.67,683.175 1692.23,683.175 1692.78,683.175 1693.34,683.175 1693.9,683.175 1694.46,683.175 1695.02,683.175 1695.58,683.175 1696.14,683.175 1696.7,683.175 1697.26,683.175 1697.82,683.175 1698.38,683.175 1698.94,683.175 1699.5,683.175 1700.05,683.175 1700.61,683.175 1701.17,683.175 1701.73,683.175 1702.29,683.175 1702.85,683.175 1703.41,683.175 1703.97,683.175 1704.53,683.175 1705.09,683.175 1705.65,683.175 1706.21,683.175 1706.77,683.175 1707.32,683.175 1707.88,683.175 1708.44,683.175 1709,683.175 1709.56,683.175 1710.12,683.175 1710.68,683.175 1711.24,683.175 1711.8,683.175 1712.36,683.175 1712.92,683.175 1713.48,683.175 1714.04,683.175 1714.6,683.175 1715.15,683.175 1715.71,683.175 1716.27,683.175 1716.83,683.175 1717.39,683.175 1717.95,683.175 1718.51,683.175 1719.07,683.175 1719.63,683.175 1720.19,683.175 1720.75,683.175 1721.31,683.175 1721.87,683.175 1722.42,683.175 1722.98,683.175 1723.54,683.175 1724.1,683.175 1724.66,683.175 1725.22,683.175 1725.78,683.175 1726.34,683.175 1726.9,683.175 1727.46,683.175 1728.02,683.175 1728.58,683.175 1729.14,683.175 1729.69,683.175 1730.25,683.175 1730.81,683.175 1731.37,683.175 1731.93,683.175 1732.49,683.175 1733.05,683.175 1733.61,683.175 1734.17,683.175 1734.73,683.175 1735.29,683.175 1735.85,683.175 1736.41,683.175 1736.97,683.175 1737.52,683.175 1738.08,683.175 1738.64,683.175 1739.2,683.175 1739.76,683.175 1740.32,683.175 1740.88,683.175 1741.44,683.175 1742,683.175 1742.56,683.175 1743.12,683.175 1743.68,683.175 1744.24,683.175 1744.79,683.175 1745.35,683.175 1745.91,683.175 1746.47,683.175 1747.03,683.175 1747.59,683.175 1748.15,683.175 1748.71,683.175 1749.27,683.175 1749.83,683.175 1750.39,683.175 1750.95,683.175 1751.51,683.175 1752.06,683.175 1752.62,683.175 1753.18,683.175 1753.74,683.175 1754.3,683.175 1754.86,683.175 1755.42,683.175 1755.98,683.175 1756.54,683.175 1757.1,683.175 1757.66,683.175 1758.22,683.175 1758.78,683.175 1759.34,683.175 1759.89,683.175 1760.45,683.175 1761.01,683.175 1761.57,683.175 1762.13,683.175 1762.69,683.175 1763.25,683.175 1763.81,683.175 1764.37,683.175 1764.93,683.175 1765.49,683.175 1766.05,683.175 1766.61,683.175 1767.16,683.175 1767.72,683.175 1768.28,683.175 1768.84,683.175 1769.4,683.175 1769.96,683.175 1770.52,683.175 1771.08,683.175 1771.64,683.175 1772.2,683.175 1772.76,683.175 1773.32,683.175 1773.88,683.175 1774.43,683.175 1774.99,683.175 1775.55,683.175 1776.11,683.175 1776.67,683.175 1777.23,683.175 1777.79,683.175 1778.35,683.175 1778.91,683.175 1779.47,683.175 1780.03,683.175 1780.59,683.175 1781.15,683.175 1781.71,683.175 1782.26,683.175 1782.82,683.175 1783.38,683.175 1783.94,683.175 1784.5,683.175 1785.06,683.175 1785.62,683.175 1786.18,683.175 1786.74,683.175 1787.3,683.175 1787.86,683.175 1788.42,683.175 1788.98,683.175 1789.53,683.175 1790.09,683.175 1790.65,683.175 1791.21,683.175 1791.77,683.175 1792.33,683.175 1792.89,683.175 1793.45,683.175 1794.01,683.175 1794.57,683.175 1795.13,683.175 1795.69,683.175 1796.25,683.175 1796.8,683.175 1797.36,683.175 1797.92,683.175 1798.48,683.175 1799.04,683.175 1799.6,683.175 1800.16,683.175 1800.72,683.175 1801.28,683.175 1801.84,683.175 1802.4,683.175 1802.96,683.175 1803.52,683.175 1804.08,683.175 1804.63,683.175 1805.19,683.175 1805.75,683.175 1806.31,683.175 1806.87,683.175 1807.43,683.175 1807.99,683.175 1808.55,683.175 1809.11,683.175 1809.67,683.175 1810.23,683.175 1810.79,683.175 1811.35,683.175 1811.9,683.175 1812.46,683.175 1813.02,683.175 1813.58,683.175 1814.14,683.175 1814.7,683.175 1815.26,683.175 1815.82,683.175 1816.38,683.175 1816.94,683.175 1817.5,683.175 1818.06,683.175 1818.62,683.175 1819.18,683.175 1819.73,683.175 1820.29,683.175 1820.85,683.175 1821.41,683.175 1821.97,683.175 1822.53,683.175 1823.09,683.175 1823.65,683.175 1824.21,683.175 1824.77,683.175 1825.33,683.175 1825.89,683.175 1826.45,683.175 1827,683.175 1827.56,683.175 1828.12,683.175 1828.68,683.175 1829.24,683.175 1829.8,683.175 1830.36,683.175 1830.92,683.175 1831.48,683.175 1832.04,683.175 1832.6,683.175 1833.16,683.175 1833.72,683.175 1834.27,683.175 1834.83,683.175 1835.39,683.175 1835.95,683.175 1836.51,683.175 1837.07,683.175 1837.63,683.175 1838.19,683.175 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.01081612604451 ± 0.02405153978466494\nProjected Energy: -4.0130237123678185 ± (0.007202953774751997, 0.00699711145637405)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.12016</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.6337e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">3.3272e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.591e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.646e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">6.793e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.3866e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321619\n -3.363124291613353\n -0.7590191922770781\n  0.13584182219621255\n  0.15789998694608798\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867401\n  3.072870330325868\n  3.1256726539518374\n  4.862107221562168\n  6.2606948503805935\n  6.402671211183111\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, wall_time = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the wall_time is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 0.8, 0.8, 0.2, 0.2)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
