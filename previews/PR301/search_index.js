var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21647214242632165 ± 0.0014429236384519517\n   G2(1) = 0.916022623369366 ± 0.0007567887233706425\n   G2(2) = 0.9814220599059602 ± 0.0006948142099187159\n   G2(3) = 0.9886384910230266 ± 0.0009942884060831333\n   G2(4) = 0.9814220599059602 ± 0.0006948142099187159\n   G2(5) = 0.916022623369366 ± 0.0007567887233706425\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.12096173387413 ± 0.15075112797018608\n   Replica 2: -4.0455071976358585 ± 0.15076785037601842\n   Replica 3: -4.079724769742182 ± 0.135820487475658\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip130\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip130)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip131\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip130)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip132\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.79 2211.02,1260.79 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1004.22 2211.02,1004.22 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,747.643 2211.02,747.643 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,491.069 2211.02,491.069 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,234.495 2211.02,234.495 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.79 423.181,1260.79 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1004.22 423.181,1004.22 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,747.643 423.181,747.643 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,491.069 423.181,491.069 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,234.495 423.181,234.495 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M356.339 1246.59 Q352.728 1246.59 350.899 1250.16 Q349.094 1253.7 349.094 1260.83 Q349.094 1267.93 350.899 1271.5 Q352.728 1275.04 356.339 1275.04 Q359.973 1275.04 361.779 1271.5 Q363.608 1267.93 363.608 1260.83 Q363.608 1253.7 361.779 1250.16 Q359.973 1246.59 356.339 1246.59 M356.339 1242.89 Q362.149 1242.89 365.205 1247.49 Q368.284 1252.08 368.284 1260.83 Q368.284 1269.55 365.205 1274.16 Q362.149 1278.74 356.339 1278.74 Q350.529 1278.74 347.45 1274.16 Q344.395 1269.55 344.395 1260.83 Q344.395 1252.08 347.45 1247.49 Q350.529 1242.89 356.339 1242.89 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M290.043 1017.56 L306.363 1017.56 L306.363 1021.5 L284.418 1021.5 L284.418 1017.56 Q287.08 1014.81 291.664 1010.18 Q296.27 1005.53 297.451 1004.18 Q299.696 1001.66 300.576 999.923 Q301.478 998.164 301.478 996.474 Q301.478 993.72 299.534 991.984 Q297.613 990.247 294.511 990.247 Q292.312 990.247 289.858 991.011 Q287.427 991.775 284.65 993.326 L284.65 988.604 Q287.474 987.47 289.927 986.891 Q292.381 986.312 294.418 986.312 Q299.789 986.312 302.983 988.998 Q306.177 991.683 306.177 996.173 Q306.177 998.303 305.367 1000.22 Q304.58 1002.12 302.474 1004.72 Q301.895 1005.39 298.793 1008.6 Q295.691 1011.8 290.043 1017.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M316.224 986.937 L334.58 986.937 L334.58 990.872 L320.506 990.872 L320.506 999.345 Q321.524 998.997 322.543 998.835 Q323.562 998.65 324.58 998.65 Q330.367 998.65 333.747 1001.82 Q337.126 1004.99 337.126 1010.41 Q337.126 1015.99 333.654 1019.09 Q330.182 1022.17 323.862 1022.17 Q321.687 1022.17 319.418 1021.8 Q317.173 1021.43 314.765 1020.69 L314.765 1015.99 Q316.849 1017.12 319.071 1017.68 Q321.293 1018.23 323.77 1018.23 Q327.774 1018.23 330.112 1016.13 Q332.45 1014.02 332.45 1010.41 Q332.45 1006.8 330.112 1004.69 Q327.774 1002.59 323.77 1002.59 Q321.895 1002.59 320.02 1003 Q318.168 1003.42 316.224 1004.3 L316.224 986.937 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M356.339 990.016 Q352.728 990.016 350.899 993.581 Q349.094 997.122 349.094 1004.25 Q349.094 1011.36 350.899 1014.92 Q352.728 1018.46 356.339 1018.46 Q359.973 1018.46 361.779 1014.92 Q363.608 1011.36 363.608 1004.25 Q363.608 997.122 361.779 993.581 Q359.973 990.016 356.339 990.016 M356.339 986.312 Q362.149 986.312 365.205 990.919 Q368.284 995.502 368.284 1004.25 Q368.284 1012.98 365.205 1017.59 Q362.149 1022.17 356.339 1022.17 Q350.529 1022.17 347.45 1017.59 Q344.395 1012.98 344.395 1004.25 Q344.395 995.502 347.45 990.919 Q350.529 986.312 356.339 986.312 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M286.062 730.363 L304.418 730.363 L304.418 734.298 L290.344 734.298 L290.344 742.77 Q291.363 742.423 292.381 742.261 Q293.4 742.076 294.418 742.076 Q300.205 742.076 303.585 745.247 Q306.964 748.419 306.964 753.835 Q306.964 759.414 303.492 762.516 Q300.02 765.594 293.701 765.594 Q291.525 765.594 289.256 765.224 Q287.011 764.854 284.603 764.113 L284.603 759.414 Q286.687 760.548 288.909 761.104 Q291.131 761.659 293.608 761.659 Q297.613 761.659 299.951 759.553 Q302.288 757.446 302.288 753.835 Q302.288 750.224 299.951 748.118 Q297.613 746.011 293.608 746.011 Q291.733 746.011 289.858 746.428 Q288.006 746.845 286.062 747.724 L286.062 730.363 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M326.177 733.442 Q322.566 733.442 320.737 737.007 Q318.932 740.548 318.932 747.678 Q318.932 754.784 320.737 758.349 Q322.566 761.891 326.177 761.891 Q329.811 761.891 331.617 758.349 Q333.446 754.784 333.446 747.678 Q333.446 740.548 331.617 737.007 Q329.811 733.442 326.177 733.442 M326.177 729.738 Q331.987 729.738 335.043 734.345 Q338.122 738.928 338.122 747.678 Q338.122 756.405 335.043 761.011 Q331.987 765.594 326.177 765.594 Q320.367 765.594 317.288 761.011 Q314.233 756.405 314.233 747.678 Q314.233 738.928 317.288 734.345 Q320.367 729.738 326.177 729.738 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M356.339 733.442 Q352.728 733.442 350.899 737.007 Q349.094 740.548 349.094 747.678 Q349.094 754.784 350.899 758.349 Q352.728 761.891 356.339 761.891 Q359.973 761.891 361.779 758.349 Q363.608 754.784 363.608 747.678 Q363.608 740.548 361.779 737.007 Q359.973 733.442 356.339 733.442 M356.339 729.738 Q362.149 729.738 365.205 734.345 Q368.284 738.928 368.284 747.678 Q368.284 756.405 365.205 761.011 Q362.149 765.594 356.339 765.594 Q350.529 765.594 347.45 761.011 Q344.395 756.405 344.395 747.678 Q344.395 738.928 347.45 734.345 Q350.529 729.738 356.339 729.738 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M284.835 473.789 L307.057 473.789 L307.057 475.78 L294.511 508.349 L289.627 508.349 L301.432 477.724 L284.835 477.724 L284.835 473.789 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M316.224 473.789 L334.58 473.789 L334.58 477.724 L320.506 477.724 L320.506 486.196 Q321.524 485.849 322.543 485.687 Q323.562 485.502 324.58 485.502 Q330.367 485.502 333.747 488.673 Q337.126 491.844 337.126 497.261 Q337.126 502.84 333.654 505.942 Q330.182 509.02 323.862 509.02 Q321.687 509.02 319.418 508.65 Q317.173 508.279 314.765 507.539 L314.765 502.84 Q316.849 503.974 319.071 504.53 Q321.293 505.085 323.77 505.085 Q327.774 505.085 330.112 502.979 Q332.45 500.872 332.45 497.261 Q332.45 493.65 330.112 491.543 Q327.774 489.437 323.77 489.437 Q321.895 489.437 320.02 489.854 Q318.168 490.27 316.224 491.15 L316.224 473.789 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M356.339 476.868 Q352.728 476.868 350.899 480.432 Q349.094 483.974 349.094 491.104 Q349.094 498.21 350.899 501.775 Q352.728 505.317 356.339 505.317 Q359.973 505.317 361.779 501.775 Q363.608 498.21 363.608 491.104 Q363.608 483.974 361.779 480.432 Q359.973 476.868 356.339 476.868 M356.339 473.164 Q362.149 473.164 365.205 477.77 Q368.284 482.354 368.284 491.104 Q368.284 499.83 365.205 504.437 Q362.149 509.02 356.339 509.02 Q350.529 509.02 347.45 504.437 Q344.395 499.83 344.395 491.104 Q344.395 482.354 347.45 477.77 Q350.529 473.164 356.339 473.164 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M256.664 247.84 L264.303 247.84 L264.303 221.474 L255.992 223.141 L255.992 218.881 L264.256 217.215 L268.932 217.215 L268.932 247.84 L276.571 247.84 L276.571 251.775 L256.664 251.775 L256.664 247.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M296.015 220.293 Q292.404 220.293 290.576 223.858 Q288.77 227.4 288.77 234.529 Q288.77 241.636 290.576 245.201 Q292.404 248.742 296.015 248.742 Q299.65 248.742 301.455 245.201 Q303.284 241.636 303.284 234.529 Q303.284 227.4 301.455 223.858 Q299.65 220.293 296.015 220.293 M296.015 216.59 Q301.826 216.59 304.881 221.196 Q307.96 225.779 307.96 234.529 Q307.96 243.256 304.881 247.863 Q301.826 252.446 296.015 252.446 Q290.205 252.446 287.127 247.863 Q284.071 243.256 284.071 234.529 Q284.071 225.779 287.127 221.196 Q290.205 216.59 296.015 216.59 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M326.177 220.293 Q322.566 220.293 320.737 223.858 Q318.932 227.4 318.932 234.529 Q318.932 241.636 320.737 245.201 Q322.566 248.742 326.177 248.742 Q329.811 248.742 331.617 245.201 Q333.446 241.636 333.446 234.529 Q333.446 227.4 331.617 223.858 Q329.811 220.293 326.177 220.293 M326.177 216.59 Q331.987 216.59 335.043 221.196 Q338.122 225.779 338.122 234.529 Q338.122 243.256 335.043 247.863 Q331.987 252.446 326.177 252.446 Q320.367 252.446 317.288 247.863 Q314.233 243.256 314.233 234.529 Q314.233 225.779 317.288 221.196 Q320.367 216.59 326.177 216.59 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M356.339 220.293 Q352.728 220.293 350.899 223.858 Q349.094 227.4 349.094 234.529 Q349.094 241.636 350.899 245.201 Q352.728 248.742 356.339 248.742 Q359.973 248.742 361.779 245.201 Q363.608 241.636 363.608 234.529 Q363.608 227.4 361.779 223.858 Q359.973 220.293 356.339 220.293 M356.339 216.59 Q362.149 216.59 365.205 221.196 Q368.284 225.779 368.284 234.529 Q368.284 243.256 365.205 247.863 Q362.149 252.446 356.339 252.446 Q350.529 252.446 347.45 247.863 Q344.395 243.256 344.395 234.529 Q344.395 225.779 347.45 221.196 Q350.529 216.59 356.339 216.59 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip132)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,234.495 4017.76,234.495 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.59 459.964,1248.05 460.533,1246.42 461.101,1245.76 461.669,1243.99 462.238,1243.2 462.806,1242.31 463.375,1240.31 463.943,1239.25 464.511,1238.09 465.08,1236.83 465.648,1234.43 466.216,1230.89 466.785,1229.29 467.353,1227.58 467.921,1224.74 468.49,1222.82 469.058,1220.76 469.626,1217.5 470.195,1214.11 470.763,1211.53 471.331,1206.76 471.9,1202.86 472.468,1199.85 473.036,1195.65 473.605,1192.24 474.173,1188.67 474.741,1184.81 475.31,1180.81 475.878,1175.56 476.446,1171.2 477.015,1165.54 477.583,1160.73 478.152,1154.79 478.72,1149.58 479.288,1144.24 479.857,1137.65 480.425,1128.82 480.993,1120.67 481.562,1113.33 482.13,1106.88 482.698,1100.18 483.267,1092.24 483.835,1084.12 484.403,1076.9 484.972,1067.29 485.54,1056.55 486.108,1048.99 486.677,1039.08 487.245,1029.11 487.813,1021.18 488.382,1011.99 488.95,1001.66 489.518,991.362 490.087,982.887 490.655,971.26 491.224,962.785 491.792,954.085 492.36,943.186 492.929,933.324 493.497,924.275 494.065,915.281 494.634,903.082 495.202,893.001 495.77,883.768 496.339,870.571 496.907,860.396 497.475,850.329 498.044,841.132 498.612,831.01 499.18,820.857 499.749,808.583 500.317,796.303 500.885,785.144 501.454,775.169 502.022,764.147 502.59,751.382 503.159,740.786 503.727,730.278 504.295,718.869 504.864,710.481 505.432,701.23 506.001,689.071 506.569,679.146 507.137,669.307 507.706,660.448 508.274,652.992 508.842,645.568 509.411,635.885 509.979,628.465 510.547,619.094 511.116,609.897 511.684,600.76 512.252,595.032 512.821,586.036 513.389,578.258 513.957,568.384 514.526,559.829 515.094,552.643 515.662,545.509 516.231,535.203 516.799,524.402 517.367,517.884 517.936,511.541 518.504,506.195 519.072,501.087 519.641,500.163 520.209,492.572 520.778,485.321 521.346,479.252 521.914,473.426 522.483,468.482 523.051,462.57 523.619,455.983 524.188,449.461 524.756,444.277 525.324,436.95 525.893,433.041 526.461,427.062 527.029,423.136 527.598,417.108 528.166,412.74 528.734,409.187 529.303,404.709 529.871,399.314 530.439,394.258 531.008,390.059 531.576,387.27 532.144,384.409 532.713,380.432 533.281,373.759 533.85,371.488 534.418,369.979 534.986,365.342 535.555,363.19 536.123,357.744 536.691,354.516 537.26,352.479 537.828,351.54 538.396,348.424 538.965,345.404 539.533,342.257 540.101,338.423 540.67,335.784 541.238,336.217 541.806,334.429 542.375,330.722 542.943,327.295 543.511,325.796 544.08,324.126 544.648,321.707 545.216,319.261 545.785,320 546.353,320.855 546.921,321.288 547.49,319.36 548.058,318.524 548.627,316.658 549.195,314.795 549.763,310.971 550.332,306.293 550.9,304.117 551.468,302.795 552.037,300.616 552.605,299.59 553.173,299.465 553.742,298.118 554.31,296.049 554.878,295.1 555.447,295.113 556.015,293.106 556.583,293.108 557.152,291 557.72,290.949 558.288,288.786 558.857,288.86 559.425,286.61 559.993,286.57 560.562,284.64 561.13,282.727 561.698,281.762 562.267,280.977 562.835,280.383 563.404,278.263 563.972,275.395 564.54,272.622 565.109,274.061 565.677,270.358 566.245,266.96 566.814,267.821 567.382,264.481 567.95,262.463 568.519,260.355 569.087,259.654 569.655,260.124 570.224,259.37 570.792,259.644 571.36,259.723 571.929,259.684 572.497,259.872 573.065,260.117 573.634,258.358 574.202,256.29 574.77,256.346 575.339,254.378 575.907,253.759 576.476,254.24 577.044,255.418 577.612,255.566 578.181,255.716 578.749,254.923 579.317,255.202 579.886,256.326 580.454,256.294 581.022,256.286 581.591,255.332 582.159,253.102 582.727,253.337 583.296,252.377 583.864,252.483 584.432,252.718 585.001,251.765 585.569,252.043 586.137,252.324 586.706,251.745 587.274,250.864 587.842,247.691 588.411,249.148 588.979,249.415 589.547,251.009 590.116,251.339 590.684,251.416 591.253,250.466 591.821,250.961 592.389,248.881 592.958,248.003 593.526,246.251 594.094,246.764 594.663,246.789 595.231,246.954 595.799,249.342 596.368,249.555 596.936,249.751 597.504,248.706 598.073,248.692 598.641,249.905 599.209,250.103 599.778,250.214 600.346,247.081 600.914,246.323 601.483,245.544 602.051,244.762 602.619,243.968 603.188,245.455 603.756,244.751 604.325,242.697 604.893,244.196 605.461,243.669 606.03,242.928 606.598,241.11 607.166,242.859 607.735,242.224 608.303,243.671 608.871,242.933 609.44,246.394 610.008,246.576 610.576,245.897 611.145,246.136 611.713,245.359 612.281,245.725 612.85,242.778 613.418,241.147 613.986,241.503 614.555,244.03 615.123,245.423 615.691,245.707 616.26,244.719 616.828,244.783 617.396,246.122 617.965,244.158 618.533,245.217 619.102,243.203 619.67,244.336 620.238,244.275 620.807,243.327 621.375,241.504 621.943,241.872 622.512,241.017 623.08,241.459 623.648,242.9 624.217,243.115 624.785,242.987 625.353,244.187 625.922,246.196 626.49,246.066 627.058,248.211 627.627,248.103 628.195,247.95 628.763,246.735 629.332,247.362 629.9,247.166 630.468,245.893 631.037,244.712 631.605,244.842 632.173,244.815 632.742,244.66 633.31,242.858 633.879,243.819 634.447,245.973 635.015,247 635.584,245.623 636.152,245.155 636.72,244.001 637.289,242.956 637.857,242.97 638.425,244.924 638.994,245.693 639.562,246.136 640.13,246.025 640.699,242.715 641.267,241.833 641.835,240.84 642.404,240.069 642.972,241.251 643.54,243.279 644.109,242.28 644.677,244.407 645.245,243.232 645.814,243.032 646.382,243.863 646.951,243.616 647.519,244.422 648.087,244.339 648.656,243.994 649.224,242.658 649.792,242.563 650.361,243.095 650.929,241.881 651.497,241.745 652.066,241.706 652.634,239.19 653.202,240.306 653.771,238.262 654.339,237.309 654.907,235.234 655.476,235.598 656.044,235.748 656.612,236.944 657.181,236.165 657.749,235.554 658.317,234.889 658.886,234.331 659.454,233.676 660.022,232.071 660.591,233.691 661.159,234.575 661.728,234.678 662.296,232.913 662.864,234.381 663.433,233.704 664.001,234.224 664.569,235.453 665.138,235.856 665.706,236.428 666.274,234.68 666.843,236.148 667.411,237.444 667.979,237.599 668.548,238.73 669.116,236.742 669.684,236.831 670.253,238.107 670.821,237.2 671.389,236.468 671.958,236.652 672.526,238.038 673.094,237.229 673.663,237.489 674.231,238.713 674.799,238.744 675.368,241.135 675.936,240.197 676.505,240.037 677.073,239.912 677.641,238.925 678.21,240.086 678.778,243.124 679.346,243.097 679.915,241.792 680.483,242.761 681.051,241.4 681.62,239.372 682.188,238.379 682.756,238.344 683.325,237.549 683.893,236.823 684.461,238.755 685.03,238.877 685.598,241.147 686.166,239.917 686.735,239.991 687.303,237.692 687.871,237.788 688.44,237.011 689.008,238.253 689.577,237.318 690.145,239.319 690.713,239.257 691.282,237.178 691.85,235.321 692.418,235.574 692.987,235.604 693.555,233.777 694.123,234.497 694.692,235.772 695.26,236.815 695.828,237.014 696.397,241.25 696.965,239.167 697.533,240.47 698.102,239.236 698.67,240.054 699.238,237.822 699.807,237.152 700.375,237.059 700.943,236.277 701.512,236.452 702.08,236.36 702.648,236.576 703.217,235.74 703.785,236.261 704.354,238.434 704.922,237.421 705.49,238.668 706.059,238.747 706.627,237.774 707.195,235.977 707.764,235.138 708.332,234.257 708.9,234.597 709.469,235.931 710.037,236.902 710.605,237.13 711.174,238.272 711.742,237.235 712.31,237.425 712.879,237.51 713.447,237.347 714.015,236.37 714.584,235.362 715.152,238.644 715.72,238.329 716.289,239.339 716.857,239.276 717.425,237.928 717.994,238.828 718.562,237.814 719.131,235.74 719.699,235.766 720.267,235.989 720.836,235.166 721.404,236.381 721.972,237.575 722.541,238.439 723.109,239.137 723.677,237.934 724.246,238.117 724.814,238.249 725.382,238.047 725.951,237.939 726.519,237.883 727.087,238.108 727.656,238.134 728.224,237.302 728.792,238.118 729.361,237.107 729.929,235.03 730.497,236.188 731.066,236.363 731.634,235.359 732.203,237.606 732.771,238.806 733.339,238.818 733.908,239.699 734.476,238.416 735.044,238.421 735.613,238.222 736.181,237.06 736.749,236.093 737.318,236.847 737.886,237.003 738.454,237.099 739.023,237.213 739.591,236.261 740.159,238.354 740.728,237.192 741.296,237.243 741.864,238.197 742.433,238.06 743.001,236.785 743.569,236.831 744.138,238.566 744.706,238.421 745.274,237.315 745.843,236.591 746.411,235.63 746.98,234.567 747.548,234.701 748.116,238.019 748.685,237.993 749.253,237.207 749.821,237.314 750.39,237.508 750.958,237.49 751.526,236.503 752.095,237.525 752.663,236.439 753.231,237.357 753.8,236.266 754.368,237.285 754.936,235.813 755.505,235.866 756.073,234.795 756.641,233.865 757.21,234.181 757.778,237.449 758.346,234.427 758.915,233.581 759.483,233.882 760.052,235.151 760.62,235.281 761.188,236.315 761.757,235.511 762.325,234.624 762.893,231.693 763.462,234.126 764.03,235.215 764.598,235.358 765.167,235.465 765.735,235.729 766.303,235.814 766.872,236.271 767.44,233.206 768.008,233.666 768.577,233.874 769.145,234.097 769.713,235.035 770.282,235.045 770.85,235.968 771.418,235.93 771.987,238.06 772.555,234.773 773.123,236.941 773.692,236.932 774.26,235.812 774.829,237.97 775.397,235.792 775.965,238.855 776.534,238.784 777.102,238.488 777.67,238.233 778.239,235.989 778.807,235.156 779.375,233.297 779.944,232.602 780.512,231.731 781.08,232.022 781.649,232.498 782.217,233.918 782.785,235.334 783.354,236.434 783.922,238.693 784.49,238.552 785.059,238.541 785.627,237.242 786.195,237.103 786.764,238.419 787.332,239.416 787.9,239.064 788.469,238.734 789.037,236.633 789.606,236.365 790.174,237.487 790.742,236.287 791.311,236.231 791.879,236.079 792.447,236.127 793.016,238.012 793.584,236.886 794.152,236.761 794.721,236.826 795.289,237.689 795.857,237.63 796.426,237.439 796.994,235.259 797.562,234.35 798.131,235.568 798.699,235.588 799.267,235.362 799.836,235.584 800.404,235.713 800.972,235.627 801.541,237.53 802.109,237.396 802.678,239.259 803.246,239.143 803.814,238.725 804.383,237.194 804.951,237.118 805.519,237.982 806.088,237.825 806.656,235.663 807.224,236.565 807.793,236.408 808.361,237.229 808.929,236.078 809.498,235.789 810.066,235.831 810.634,235.909 811.203,235.861 811.771,234.764 812.339,232.687 812.908,232.892 813.476,229.824 814.044,227.996 814.613,227.331 815.181,228.942 815.749,229.483 816.318,231.783 816.886,232.945 817.455,233.383 818.023,233.806 818.591,232.048 819.16,232.433 819.728,229.717 820.296,230.03 820.865,231.368 821.433,231.93 822.001,230.106 822.57,229.497 823.138,229.676 823.706,229.212 824.275,228.674 824.843,229.291 825.411,231.698 825.98,232.143 826.548,231.519 827.116,232.78 827.685,234.004 828.253,234.288 828.821,235.39 829.39,236.232 829.958,236.133 830.526,234.044 831.095,234.203 831.663,234.585 832.232,233.761 832.8,231.825 833.368,231.041 833.937,232.299 834.505,232.703 835.073,233.128 835.642,233.581 836.21,234.604 836.778,234.777 837.347,235.846 837.915,234.855 838.483,234.994 839.052,233.934 839.62,236.099 840.188,236.143 840.757,234.338 841.325,233.476 841.893,231.712 842.462,233.934 843.03,231.398 843.598,234.037 844.167,233.208 844.735,232.391 845.304,231.81 845.872,232.304 846.44,231.535 847.009,229.813 847.577,230.399 848.145,231.14 848.714,231.413 849.282,234.07 849.85,233.447 850.419,234.745 850.987,236.262 851.555,235.189 852.124,237.493 852.692,236.744 853.26,238.045 853.829,238.111 854.397,238.275 854.965,238.997 855.534,241.035 856.102,242.741 856.67,243.383 857.239,241.897 857.807,240.428 858.375,239.07 858.944,238.841 859.512,238.78 860.081,239.538 860.649,239.356 861.217,240.183 861.786,240.939 862.354,241.544 862.922,240.006 863.491,239.914 864.059,239.528 864.627,238.33 865.196,238.283 865.764,237 866.332,237.106 866.901,237.991 867.469,236.743 868.037,235.568 868.606,235.59 869.174,237.673 869.742,237.465 870.311,237.2 870.879,239.028 871.447,238.812 872.016,238.529 872.584,236.182 873.152,234.029 873.721,234.142 874.289,236.389 874.858,236.112 875.426,234.937 875.994,235.161 876.563,239.295 877.131,237.046 877.699,235.815 878.268,235.825 878.836,234.556 879.404,231.567 879.973,230.623 880.541,231.815 881.109,232.175 881.678,232.535 882.246,231.871 882.814,232.193 883.383,231.495 883.951,232.609 884.519,233.901 885.088,235.097 885.656,235.028 886.224,237.041 886.793,237.922 887.361,237.902 887.93,236.666 888.498,234.468 889.066,236.576 889.635,237.535 890.203,237.159 890.771,238.738 891.34,238.362 891.908,237.259 892.476,238.344 893.045,238.283 893.613,238.079 894.181,236.911 894.75,236.619 895.318,234.511 895.886,233.635 896.455,234.593 897.023,234.289 897.591,234.334 898.16,236.452 898.728,239.55 899.296,239.143 899.865,238.802 900.433,239.697 901.001,236.342 901.57,236.481 902.138,234.225 902.707,234.272 903.275,235.289 903.843,235.222 904.412,236.077 904.98,237.961 905.548,238.745 906.117,237.357 906.685,236.972 907.253,239.917 907.822,240.371 908.39,241.105 908.958,240.478 909.527,239.069 910.095,237.743 910.663,238.244 911.232,238.68 911.8,237.293 912.368,236.894 912.937,233.487 913.505,233.517 914.073,233.534 914.642,234.777 915.21,234.822 915.779,233.79 916.347,232.66 916.915,233.864 917.484,232.951 918.052,234.027 918.62,235.061 919.189,234.925 919.757,235.761 920.325,233.737 920.894,231.651 921.462,231.922 922.03,233.284 922.599,235.258 923.167,236.005 923.735,236.807 924.304,234.594 924.872,233.476 925.44,233.528 926.009,235.576 926.577,235.527 927.145,237.27 927.714,238.146 928.282,238.883 928.85,239.732 929.419,240.266 929.987,238.824 930.556,238.562 931.124,239.147 931.692,238.725 932.261,239.572 932.829,238.068 933.397,235.815 933.966,234.453 934.534,234.206 935.102,235.215 935.671,235.934 936.239,235.78 936.807,235.69 937.376,238.484 937.944,235.958 938.512,234.847 939.081,234.574 939.649,234.344 940.217,233.285 940.786,232.153 941.354,230.067 941.922,230.504 942.491,227.579 943.059,229.191 943.627,232.561 944.196,232.96 944.764,232.956 945.333,235.038 945.901,235.818 946.469,235.759 947.038,237.586 947.606,236.29 948.174,237.144 948.743,236.916 949.311,235.721 949.879,236.37 950.448,238.078 951.016,237.639 951.584,235.409 952.153,235.158 952.721,235.069 953.289,233.988 953.858,234.021 954.426,234.072 954.994,231.643 955.563,235.013 956.131,235.897 956.699,235.718 957.268,234.478 957.836,233.472 958.405,232.439 958.973,232.517 959.541,232.578 960.11,231.693 960.678,229.864 961.246,230.314 961.815,230.509 962.383,230.838 962.951,231.093 963.52,234.35 964.088,234.154 964.656,233.221 965.225,228.895 965.793,228.261 966.361,228.783 966.93,228.053 967.498,227.561 968.066,226.97 968.635,227.603 969.203,229.172 969.771,229.66 970.34,230.025 970.908,230.358 971.476,233.648 972.045,233.768 972.613,234.04 973.182,233.928 973.75,234.974 974.318,235.803 974.887,235.706 975.455,233.777 976.023,233.821 976.592,235.784 977.16,233.895 977.728,233.78 978.297,234.845 978.865,232.92 979.433,235.074 980.002,234.029 980.57,234.995 981.138,234.73 981.707,234.808 982.275,234.833 982.843,233.961 983.412,233.123 983.98,233.17 984.548,230.203 985.117,228.572 985.685,227.97 986.253,228.71 986.822,228.141 987.39,228.731 987.959,229.27 988.527,229.884 989.095,230.373 989.664,230.883 990.232,230.303 990.8,231.763 991.369,232.04 991.937,231.179 992.505,232.599 993.074,235.14 993.642,236.143 994.21,238.158 994.779,236.061 995.347,237.989 995.915,236.884 996.484,235.851 997.052,236.996 997.62,233.668 998.189,231.825 998.757,231.35 999.325,233.889 999.894,230.875 1000.46,231.412 1001.03,230.484 1001.6,231.96 1002.17,231.161 1002.74,233.443 1003.3,233.666 1003.87,233.989 1004.44,234.048 1005.01,233.377 1005.58,232.575 1006.15,230.585 1006.71,230.902 1007.28,233.361 1007.85,236.649 1008.42,234.629 1008.99,235.503 1009.56,234.457 1010.12,234.638 1010.69,235.014 1011.26,235.265 1011.83,233.456 1012.4,233.644 1012.97,233.869 1013.53,234.051 1014.1,234.172 1014.67,233.282 1015.24,235.488 1015.81,236.528 1016.38,234.185 1016.94,234.474 1017.51,234.65 1018.08,235.801 1018.65,236.765 1019.22,237.68 1019.79,237.85 1020.35,237.861 1020.92,238.709 1021.49,237.689 1022.06,236.655 1022.63,235.768 1023.2,235.823 1023.76,235.805 1024.33,234.765 1024.9,234.951 1025.47,237.093 1026.04,237.034 1026.61,235.866 1027.17,233.675 1027.74,233.657 1028.31,229.615 1028.88,230.008 1029.45,230.557 1030.02,229.942 1030.58,230.877 1031.15,229.516 1031.72,232.066 1032.29,232.236 1032.86,233.347 1033.43,233.458 1033.99,234.518 1034.56,234.592 1035.13,234.638 1035.7,234.7 1036.27,236.154 1036.84,235.058 1037.4,236.232 1037.97,237.459 1038.54,237.214 1039.11,235.155 1039.68,234.289 1040.25,236.489 1040.81,236.518 1041.38,236.722 1041.95,235.817 1042.52,236.704 1043.09,236.402 1043.66,238.506 1044.22,239.351 1044.79,240.141 1045.36,240.895 1045.93,240.371 1046.5,239.059 1047.07,239.752 1047.63,238.424 1048.2,238.314 1048.77,237.958 1049.34,234.622 1049.91,235.636 1050.48,238.484 1051.05,238.031 1051.61,238.85 1052.18,239.558 1052.75,240.417 1053.32,236.097 1053.89,236.921 1054.46,236.8 1055.02,236.657 1055.59,237.61 1056.16,237.403 1056.73,239.232 1057.3,240.083 1057.87,238.714 1058.43,240.655 1059,240.336 1059.57,236.887 1060.14,237.871 1060.71,237.483 1061.28,237.343 1061.84,237.996 1062.41,237.847 1062.98,237.521 1063.55,236.322 1064.12,235.942 1064.69,236.841 1065.25,235.569 1065.82,234.192 1066.39,234.132 1066.96,235.27 1067.53,235.18 1068.1,236.165 1068.66,234.837 1069.23,234.823 1069.8,235.82 1070.37,233.674 1070.94,232.431 1071.51,234.757 1072.07,234.682 1072.64,234.56 1073.21,236.235 1073.78,235.026 1074.35,235.904 1074.92,235.922 1075.48,235.802 1076.05,234.611 1076.62,237.585 1077.19,238.35 1077.76,238.918 1078.33,236.406 1078.89,237.428 1079.46,237.292 1080.03,236.968 1080.6,236.559 1081.17,233.232 1081.74,234.226 1082.3,235.058 1082.87,233.841 1083.44,233.914 1084.01,233.994 1084.58,235.003 1085.15,232.81 1085.71,231.751 1086.28,229.752 1086.85,231.141 1087.42,231.418 1087.99,231.631 1088.56,231.669 1089.12,232.096 1089.69,232.106 1090.26,230.288 1090.83,228.43 1091.4,229.989 1091.97,229.046 1092.53,231.192 1093.1,230.309 1093.67,230.621 1094.24,232.993 1094.81,231.947 1095.38,234.181 1095.94,233.296 1096.51,233.347 1097.08,233.532 1097.65,233.559 1098.22,235.812 1098.79,237.819 1099.35,237.421 1099.92,235.034 1100.49,235.898 1101.06,235.846 1101.63,236.821 1102.2,235.621 1102.76,234.476 1103.33,235.484 1103.9,234.714 1104.47,234.848 1105.04,234.897 1105.61,233.87 1106.17,234.857 1106.74,233.979 1107.31,232.95 1107.88,231.237 1108.45,230.548 1109.02,230.782 1109.58,230.097 1110.15,231.496 1110.72,231.647 1111.29,233.744 1111.86,234.866 1112.43,236.166 1112.99,235.955 1113.56,235.683 1114.13,233.398 1114.7,233.388 1115.27,233.412 1115.84,232.576 1116.4,231.761 1116.97,232.874 1117.54,230.875 1118.11,229.886 1118.68,230.163 1119.25,231.677 1119.81,231.136 1120.38,231.272 1120.95,231.308 1121.52,230.518 1122.09,231.073 1122.66,232.345 1123.23,232.197 1123.79,232.42 1124.36,233.569 1124.93,235.649 1125.5,234.54 1126.07,235.405 1126.64,235.515 1127.2,233.597 1127.77,233.819 1128.34,235.215 1128.91,235.114 1129.48,236.136 1130.05,238.228 1130.61,234.179 1131.18,235.269 1131.75,236.379 1132.32,235.579 1132.89,237.705 1133.46,237.582 1134.02,237.639 1134.59,237.487 1135.16,235.424 1135.73,231.407 1136.3,231.633 1136.87,232.607 1137.43,233.713 1138,234.889 1138.57,234.925 1139.14,233.996 1139.71,236.057 1140.28,234.997 1140.84,235.971 1141.41,234.917 1141.98,234.998 1142.55,234.939 1143.12,236.075 1143.69,238.008 1144.25,234.93 1144.82,234.781 1145.39,235.686 1145.96,236.684 1146.53,237.612 1147.1,237.553 1147.66,235.343 1148.23,237.491 1148.8,236.625 1149.37,237.653 1149.94,237.459 1150.51,235.986 1151.07,237.872 1151.64,237.617 1152.21,236.186 1152.78,237.009 1153.35,235.919 1153.92,235.772 1154.48,234.643 1155.05,236.545 1155.62,235.495 1156.19,236.535 1156.76,236.381 1157.33,236.127 1157.89,238.128 1158.46,234.801 1159.03,235.838 1159.6,235.588 1160.17,235.55 1160.74,237.541 1161.3,237.471 1161.87,238.292 1162.44,238.806 1163.01,238.37 1163.58,239.272 1164.15,239.01 1164.71,234.549 1165.28,237.554 1165.85,238.274 1166.42,237.119 1166.99,237.054 1167.56,236.571 1168.12,235.715 1168.69,236.707 1169.26,236.605 1169.83,237.441 1170.4,237.119 1170.97,238.897 1171.53,238.651 1172.1,235.48 1172.67,235.095 1173.24,236.926 1173.81,236.438 1174.38,237.268 1174.94,237.142 1175.51,234.77 1176.08,234.597 1176.65,235.491 1177.22,236.373 1177.79,237.279 1178.35,236.975 1178.92,238.675 1179.49,240.365 1180.06,240.873 1180.63,239.287 1181.2,236.865 1181.76,236.599 1182.33,236.326 1182.9,235.855 1183.47,234.486 1184.04,235.388 1184.61,234.968 1185.17,235.873 1185.74,232.607 1186.31,232.818 1186.88,233.92 1187.45,234.982 1188.02,233.74 1188.58,231.624 1189.15,229.61 1189.72,229.986 1190.29,230.284 1190.86,229.501 1191.43,231.878 1192,232.826 1192.56,232.917 1193.13,231.998 1193.7,231.299 1194.27,231.575 1194.84,231.855 1195.41,231.87 1195.97,228.889 1196.54,227.408 1197.11,229.994 1197.68,228.137 1198.25,227.746 1198.82,228.518 1199.38,226.793 1199.95,224.356 1200.52,219.895 1201.09,221.192 1201.66,223.276 1202.23,226.382 1202.79,226.182 1203.36,229.794 1203.93,232.041 1204.5,235.301 1205.07,234.345 1205.64,235.483 1206.2,233.446 1206.77,233.628 1207.34,235.66 1207.91,239.577 1208.48,240.416 1209.05,238.019 1209.61,237.813 1210.18,238.551 1210.75,236.508 1211.32,231.516 1211.89,232.89 1212.46,233.026 1213.02,235.264 1213.59,233.33 1214.16,234.553 1214.73,233.364 1215.3,233.438 1215.87,234.599 1216.43,234.836 1217,234.466 1217.57,232.588 1218.14,230.92 1218.71,232.426 1219.28,233.482 1219.84,231.611 1220.41,231.827 1220.98,231.916 1221.55,233.261 1222.12,234.716 1222.69,234.927 1223.25,236.037 1223.82,238.086 1224.39,238.947 1224.96,236.77 1225.53,238.722 1226.1,237.171 1226.66,238.067 1227.23,238.967 1227.8,239.658 1228.37,238.32 1228.94,238.203 1229.51,238.773 1230.07,239.589 1230.64,240.213 1231.21,237.724 1231.78,238.396 1232.35,240.314 1232.92,239.765 1233.48,240.372 1234.05,241.083 1234.62,240.554 1235.19,240.129 1235.76,239.787 1236.33,242.208 1236.89,241.633 1237.46,242.162 1238.03,242.495 1238.6,241.054 1239.17,240.689 1239.74,240.289 1240.3,239.816 1240.87,240.34 1241.44,241.719 1242.01,244.147 1242.58,245.247 1243.15,243.036 1243.71,244.349 1244.28,243.364 1244.85,241.451 1245.42,238.726 1245.99,236.995 1246.56,236.667 1247.12,236.265 1247.69,235.997 1248.26,235.409 1248.83,234.043 1249.4,230.743 1249.97,234.902 1250.53,232.782 1251.1,232.864 1251.67,232.624 1252.24,230.684 1252.81,230.631 1253.38,230.609 1253.94,229.658 1254.51,228.735 1255.08,230.166 1255.65,230.305 1256.22,229.528 1256.79,230.844 1257.35,228.62 1257.92,227.973 1258.49,226.324 1259.06,228.794 1259.63,231.193 1260.2,228.346 1260.76,229.897 1261.33,228.105 1261.9,228.336 1262.47,228.444 1263.04,229.792 1263.61,230.09 1264.18,229.297 1264.74,229.438 1265.31,228.696 1265.88,232.165 1266.45,234.433 1267.02,234.518 1267.59,234.621 1268.15,235.542 1268.72,234.394 1269.29,235.403 1269.86,234.152 1270.43,233.954 1271,234.909 1271.56,234.659 1272.13,233.708 1272.7,231.626 1273.27,231.643 1273.84,232.894 1274.41,234 1274.97,236.115 1275.54,233.909 1276.11,234.772 1276.68,234.804 1277.25,234.477 1277.82,235.453 1278.38,235.345 1278.95,235.159 1279.52,233.787 1280.09,233.703 1280.66,233.587 1281.23,232.659 1281.79,232.497 1282.36,233.449 1282.93,233.615 1283.5,234.658 1284.07,233.589 1284.64,233.569 1285.2,232.536 1285.77,232.592 1286.34,231.497 1286.91,230.782 1287.48,229.962 1288.05,230.548 1288.61,232.046 1289.18,233.172 1289.75,234.202 1290.32,233.047 1290.89,230.143 1291.46,231.386 1292.02,229.479 1292.59,230.658 1293.16,229.797 1293.73,230.071 1294.3,229.336 1294.87,228.475 1295.43,230.163 1296,231.493 1296.57,231.843 1297.14,234.115 1297.71,233.933 1298.28,234.035 1298.84,232.899 1299.41,234.039 1299.98,236.149 1300.55,235.016 1301.12,233.977 1301.69,232.856 1302.25,233.062 1302.82,231.073 1303.39,232.392 1303.96,232.539 1304.53,234.585 1305.1,233.334 1305.66,233.42 1306.23,234.721 1306.8,235.629 1307.37,236.721 1307.94,236.516 1308.51,234.51 1309.07,234.418 1309.64,233.408 1310.21,235.446 1310.78,237.556 1311.35,234.399 1311.92,233.659 1312.48,234.443 1313.05,236.7 1313.62,236.59 1314.19,236.363 1314.76,235.257 1315.33,235.005 1315.89,231.773 1316.46,229.026 1317.03,229.151 1317.6,231.81 1318.17,232.064 1318.74,233.299 1319.3,232.37 1319.87,233.569 1320.44,234.706 1321.01,233.734 1321.58,234.743 1322.15,235.867 1322.71,234.866 1323.28,233.981 1323.85,235.14 1324.42,234.061 1324.99,233.105 1325.56,236.321 1326.12,236.314 1326.69,237.315 1327.26,239.302 1327.83,238.951 1328.4,238.745 1328.97,238.337 1329.53,237.012 1330.1,236.859 1330.67,238.76 1331.24,239.544 1331.81,239.206 1332.38,237.637 1332.94,239.371 1333.51,239.081 1334.08,237.908 1334.65,237.78 1335.22,238.415 1335.79,239.033 1336.36,239.525 1336.92,240.055 1337.49,237.652 1338.06,236.54 1338.63,235.264 1339.2,234.146 1339.77,235.078 1340.33,232.947 1340.9,233.411 1341.47,233.627 1342.04,232.695 1342.61,230.712 1343.18,231.057 1343.74,229.416 1344.31,228.902 1344.88,227.247 1345.45,227.776 1346.02,229.473 1346.59,228.801 1347.15,229.33 1347.72,229.617 1348.29,229.996 1348.86,231.345 1349.43,232.637 1350,234.944 1350.56,235.947 1351.13,239.055 1351.7,239.892 1352.27,238.452 1352.84,238.382 1353.41,239.257 1353.97,237.882 1354.54,235.561 1355.11,235.264 1355.68,235.324 1356.25,235.168 1356.82,235.134 1357.38,235.124 1357.95,237.003 1358.52,238.821 1359.09,237.56 1359.66,238.217 1360.23,237.011 1360.79,237.83 1361.36,237.786 1361.93,237.832 1362.5,236.527 1363.07,235.686 1363.64,238.787 1364.2,240.43 1364.77,240.925 1365.34,240.256 1365.91,238.973 1366.48,237.563 1367.05,237.328 1367.61,237.186 1368.18,239.025 1368.75,237.656 1369.32,236.146 1369.89,235.957 1370.46,235.678 1371.02,233.518 1371.59,234.442 1372.16,234.354 1372.73,233.264 1373.3,233.235 1373.87,233.173 1374.43,234.211 1375,234.144 1375.57,234.067 1376.14,235.999 1376.71,236.626 1377.28,239.254 1377.84,238.919 1378.41,237.348 1378.98,237.978 1379.55,239.836 1380.12,241.2 1380.69,239.631 1381.25,238.166 1381.82,237.751 1382.39,236.413 1382.96,232.96 1383.53,231.937 1384.1,230.113 1384.66,229.432 1385.23,228.803 1385.8,228.933 1386.37,226.259 1386.94,227.747 1387.51,226.87 1388.07,228.316 1388.64,227.641 1389.21,226.947 1389.78,227.554 1390.35,228.05 1390.92,231.677 1391.48,232.642 1392.05,231.66 1392.62,235.033 1393.19,234.99 1393.76,234.982 1394.33,235.107 1394.89,233.086 1395.46,233.017 1396.03,233.216 1396.6,231.861 1397.17,232.199 1397.74,231.303 1398.3,229.612 1398.87,230.977 1399.44,231.23 1400.01,233.493 1400.58,232.472 1401.15,231.654 1401.71,230.767 1402.28,230.834 1402.85,229.264 1403.42,230.646 1403.99,231.889 1404.56,234.171 1405.13,233.133 1405.69,236.505 1406.26,237.385 1406.83,234.19 1407.4,233.155 1407.97,233.242 1408.54,231.378 1409.1,235.673 1409.67,235.471 1410.24,233.337 1410.81,234.485 1411.38,235.557 1411.95,235.514 1412.51,235.469 1413.08,235.598 1413.65,236.586 1414.22,235.377 1414.79,233.377 1415.36,233.482 1415.92,231.496 1416.49,232.562 1417.06,231.606 1417.63,231.849 1418.2,232.196 1418.77,231.54 1419.33,230.724 1419.9,232.237 1420.47,231.474 1421.04,231.857 1421.61,231.064 1422.18,231.155 1422.74,230.485 1423.31,230.931 1423.88,231.283 1424.45,231.758 1425.02,233.939 1425.59,232.706 1426.15,231.64 1426.72,232.991 1427.29,233.171 1427.86,233.17 1428.43,234.252 1429,232.051 1429.56,230.396 1430.13,230.846 1430.7,230.096 1431.27,230.872 1431.84,230.186 1432.41,232.579 1432.97,231.654 1433.54,233.959 1434.11,233.129 1434.68,232.383 1435.25,232.778 1435.82,234.039 1436.38,232.311 1436.95,233.718 1437.52,232.863 1438.09,237.186 1438.66,238.244 1439.23,240.265 1439.79,240.037 1440.36,237.701 1440.93,237.381 1441.5,237.381 1442.07,235.102 1442.64,232.136 1443.2,233.603 1443.77,232.652 1444.34,232.914 1444.91,233.205 1445.48,233.281 1446.05,234.702 1446.61,233.735 1447.18,235.116 1447.75,234.361 1448.32,232.615 1448.89,233.849 1449.46,233.911 1450.02,233.14 1450.59,234.453 1451.16,234.75 1451.73,233.894 1452.3,234.166 1452.87,235.207 1453.43,235.347 1454,236.234 1454.57,239.296 1455.14,237.02 1455.71,238.921 1456.28,238.842 1456.84,237.355 1457.41,235.348 1457.98,235.515 1458.55,234.377 1459.12,236.492 1459.69,237.473 1460.25,236.363 1460.82,236.423 1461.39,236.512 1461.96,236.497 1462.53,235.436 1463.1,238.682 1463.66,237.351 1464.23,237.053 1464.8,234.836 1465.37,233.8 1465.94,232.691 1466.51,232.699 1467.07,231.965 1467.64,231.362 1468.21,231.74 1468.78,232.008 1469.35,231.285 1469.92,232.529 1470.48,232.726 1471.05,232.838 1471.62,233.212 1472.19,233.482 1472.76,233.273 1473.33,234.476 1473.89,233.457 1474.46,234.571 1475.03,235.816 1475.6,234.914 1476.17,235.112 1476.74,234.067 1477.31,234.294 1477.87,234.327 1478.44,232.273 1479.01,231.526 1479.58,232.82 1480.15,233.915 1480.72,234.326 1481.28,236.478 1481.85,237.376 1482.42,236.187 1482.99,236.299 1483.56,239.356 1484.13,240.138 1484.69,239.942 1485.26,242.617 1485.83,239.044 1486.4,237.668 1486.97,237.348 1487.54,236.198 1488.1,236.247 1488.67,236.297 1489.24,235.994 1489.81,234.79 1490.38,230.783 1490.95,233.087 1491.51,234.262 1492.08,235.404 1492.65,239.62 1493.22,237.337 1493.79,238.167 1494.36,238.795 1494.92,237.339 1495.49,238.253 1496.06,240.164 1496.63,239.956 1497.2,240.646 1497.77,240.146 1498.33,239.77 1498.9,239.361 1499.47,237.302 1500.04,236.053 1500.61,236.99 1501.18,235.868 1501.74,234.699 1502.31,232.731 1502.88,232.655 1503.45,231.692 1504.02,230.65 1504.59,231.973 1505.15,232.149 1505.72,230.44 1506.29,232.807 1506.86,233.92 1507.43,236.041 1508,239.056 1508.56,238.986 1509.13,240.54 1509.7,239.049 1510.27,238.717 1510.84,237.311 1511.41,234.82 1511.97,234.718 1512.54,236.693 1513.11,238.292 1513.68,237.583 1514.25,237.286 1514.82,235.027 1515.38,235.037 1515.95,234.833 1516.52,236.82 1517.09,235.695 1517.66,235.486 1518.23,234.284 1518.79,235.317 1519.36,235.216 1519.93,234.325 1520.5,237.4 1521.07,234.939 1521.64,234.714 1522.2,233.862 1522.77,231.874 1523.34,234.146 1523.91,234.132 1524.48,234.225 1525.05,236.029 1525.61,235.992 1526.18,234.922 1526.75,235.98 1527.32,235.647 1527.89,234.397 1528.46,234.591 1529.02,234.68 1529.59,233.548 1530.16,232.539 1530.73,232.78 1531.3,234.902 1531.87,235.913 1532.43,233.853 1533,233.933 1533.57,232.827 1534.14,233.01 1534.71,233.914 1535.28,233.769 1535.84,233.715 1536.41,231.818 1536.98,232.125 1537.55,236.302 1538.12,234.012 1538.69,232.885 1539.25,231.053 1539.82,229.282 1540.39,226.822 1540.96,227.231 1541.53,228.815 1542.1,229.091 1542.66,229.545 1543.23,232.957 1543.8,234.104 1544.37,234.124 1544.94,235.024 1545.51,235.72 1546.08,235.452 1546.64,235.325 1547.21,233.37 1547.78,232.575 1548.35,235.031 1548.92,233.258 1549.49,233.419 1550.05,234.441 1550.62,233.287 1551.19,233.063 1551.76,234.966 1552.33,234.125 1552.9,232.29 1553.46,232.403 1554.03,232.682 1554.6,232.925 1555.17,236.339 1555.74,237.246 1556.31,237.074 1556.87,235.979 1557.44,233.882 1558.01,237.081 1558.58,239.098 1559.15,237.773 1559.72,237.44 1560.28,237.324 1560.85,238.138 1561.42,238.891 1561.99,238.697 1562.56,239.168 1563.13,236.723 1563.69,236.389 1564.26,236.505 1564.83,236.612 1565.4,235.319 1565.97,234.196 1566.54,232.076 1567.1,233.137 1567.67,233.163 1568.24,232.131 1568.81,235.15 1569.38,236.05 1569.95,234.622 1570.51,236.532 1571.08,235.227 1571.65,235.024 1572.22,235.887 1572.79,236.809 1573.36,234.534 1573.92,234.707 1574.49,235.638 1575.06,235.584 1575.63,236.513 1576.2,237.097 1576.77,236.658 1577.33,236.616 1577.9,236.319 1578.47,235.187 1579.04,235.902 1579.61,233.89 1580.18,235.091 1580.74,233.836 1581.31,233.89 1581.88,237.032 1582.45,236.769 1583.02,235.584 1583.59,234.357 1584.15,234.343 1584.72,234.086 1585.29,231.641 1585.86,230.625 1586.43,230.833 1587,229.883 1587.56,229.149 1588.13,229.514 1588.7,230.878 1589.27,233.119 1589.84,231.218 1590.41,233.461 1590.97,232.476 1591.54,232.759 1592.11,233.879 1592.68,233.817 1593.25,233.911 1593.82,234.943 1594.38,234.156 1594.95,234.095 1595.52,232.906 1596.09,232.739 1596.66,234.005 1597.23,236.092 1597.79,236.814 1598.36,234.679 1598.93,235.57 1599.5,234.352 1600.07,234.429 1600.64,236.555 1601.2,236.359 1601.77,236.022 1602.34,235.96 1602.91,232.943 1603.48,230.861 1604.05,230.991 1604.61,230.286 1605.18,230.535 1605.75,230.902 1606.32,230.118 1606.89,230.452 1607.46,231.653 1608.02,231.845 1608.59,230.038 1609.16,232.416 1609.73,232.594 1610.3,233.664 1610.87,235.705 1611.43,239.781 1612,239.498 1612.57,239.248 1613.14,238.009 1613.71,236.95 1614.28,238.925 1614.84,239.813 1615.41,240.729 1615.98,240.26 1616.55,238.785 1617.12,238.495 1617.69,239.165 1618.26,236.782 1618.82,235.255 1619.39,235.289 1619.96,236.361 1620.53,237.185 1621.1,237.099 1621.67,235.817 1622.23,234.784 1622.8,235.63 1623.37,235.513 1623.94,233.314 1624.51,233.209 1625.08,233.234 1625.64,232.339 1626.21,231.505 1626.78,231.779 1627.35,232.809 1627.92,233.823 1628.49,234.939 1629.05,233.922 1629.62,233.909 1630.19,233.756 1630.76,233.81 1631.33,231.546 1631.9,233.695 1632.46,231.711 1633.03,231.748 1633.6,229.732 1634.17,230.997 1634.74,232.313 1635.31,232.675 1635.87,235.008 1636.44,236.133 1637.01,235.831 1637.58,236.774 1638.15,235.429 1638.72,233.247 1639.28,233.126 1639.85,236.247 1640.42,235.106 1640.99,235.029 1641.56,235.083 1642.13,234.979 1642.69,233.997 1643.26,233.91 1643.83,235.935 1644.4,235.935 1644.97,234.02 1645.54,235.977 1646.1,237.052 1646.67,236.718 1647.24,237.761 1647.81,237.707 1648.38,237.309 1648.95,238.15 1649.51,239.063 1650.08,237.625 1650.65,238.479 1651.22,236.197 1651.79,234.747 1652.36,234.705 1652.92,234.991 1653.49,235.704 1654.06,235.398 1654.63,235.29 1655.2,236.071 1655.77,232.899 1656.33,234.091 1656.9,233.094 1657.47,230.871 1658.04,229.856 1658.61,229.106 1659.18,229.344 1659.74,230.853 1660.31,232.153 1660.88,232.27 1661.45,232.464 1662.02,233.574 1662.59,232.627 1663.15,232.474 1663.72,231.542 1664.29,230.774 1664.86,231.257 1665.43,228.201 1666,229.935 1666.56,230.144 1667.13,229.234 1667.7,229.586 1668.27,229.778 1668.84,232.107 1669.41,233.274 1669.97,233.575 1670.54,233.742 1671.11,234.816 1671.68,235.662 1672.25,235.392 1672.82,235.447 1673.38,235.252 1673.95,237.22 1674.52,236.929 1675.09,234.79 1675.66,233.992 1676.23,232.117 1676.79,233.297 1677.36,233.531 1677.93,236.798 1678.5,236.895 1679.07,237.987 1679.64,238.764 1680.2,240.551 1680.77,239.107 1681.34,238.599 1681.91,238.341 1682.48,238.125 1683.05,236.929 1683.61,235.718 1684.18,234.423 1684.75,234.376 1685.32,233.087 1685.89,232.948 1686.46,232.906 1687.02,232.068 1687.59,233.209 1688.16,232.218 1688.73,232.616 1689.3,231.883 1689.87,231.06 1690.44,233.319 1691,231.207 1691.57,232.305 1692.14,230.401 1692.71,230.717 1693.28,230.674 1693.85,231.983 1694.41,232.323 1694.98,232.563 1695.55,231.44 1696.12,228.501 1696.69,227.618 1697.26,228.186 1697.82,228.643 1698.39,228.997 1698.96,228.247 1699.53,229.944 1700.1,231.301 1700.67,231.573 1701.23,234.78 1701.8,233.737 1702.37,232.501 1702.94,232.886 1703.51,233.96 1704.08,232.861 1704.64,234.26 1705.21,234.435 1705.78,234.396 1706.35,234.387 1706.92,236.623 1707.49,237.665 1708.05,236.382 1708.62,238.406 1709.19,238.217 1709.76,238.84 1710.33,238.507 1710.9,237.218 1711.46,237.055 1712.03,235.832 1712.6,236.755 1713.17,235.498 1713.74,234.219 1714.31,233.171 1714.87,230.11 1715.44,231.361 1716.01,229.752 1716.58,229.919 1717.15,230.236 1717.72,231.771 1718.28,233.291 1718.85,234.494 1719.42,234.546 1719.99,234.537 1720.56,235.743 1721.13,235.655 1721.69,235.575 1722.26,235.521 1722.83,234.623 1723.4,235.834 1723.97,236.884 1724.54,236.692 1725.1,238.585 1725.67,239.549 1726.24,238.333 1726.81,235.995 1727.38,239.125 1727.95,238.035 1728.51,238.873 1729.08,238.717 1729.65,239.427 1730.22,238.998 1730.79,239.618 1731.36,238.233 1731.92,239.087 1732.49,238.839 1733.06,238.49 1733.63,238.178 1734.2,237.761 1734.77,239.643 1735.33,239.393 1735.9,238.934 1736.47,237.395 1737.04,236.075 1737.61,236.811 1738.18,236.775 1738.74,234.516 1739.31,233.327 1739.88,234.474 1740.45,232.481 1741.02,233.605 1741.59,234.457 1742.15,234.318 1742.72,233.439 1743.29,231.549 1743.86,230.777 1744.43,230.159 1745,229.554 1745.56,228.767 1746.13,228.009 1746.7,228.239 1747.27,225.407 1747.84,225.129 1748.41,224.738 1748.97,225.374 1749.54,227.973 1750.11,226.327 1750.68,229.94 1751.25,231.329 1751.82,233.491 1752.38,234.741 1752.95,235.697 1753.52,234.378 1754.09,235.505 1754.66,236.498 1755.23,237.645 1755.79,236.646 1756.36,235.701 1756.93,238.04 1757.5,237.88 1758.07,237.613 1758.64,238.586 1759.21,237.094 1759.77,238.083 1760.34,238.81 1760.91,238.31 1761.48,236.984 1762.05,236.948 1762.62,237.907 1763.18,235.718 1763.75,236.595 1764.32,235.482 1764.89,234.35 1765.46,234.268 1766.03,233.235 1766.59,233.349 1767.16,233.596 1767.73,234.481 1768.3,235.502 1768.87,232.29 1769.44,230.412 1770,230.731 1770.57,229.194 1771.14,226.488 1771.71,226.058 1772.28,228.967 1772.85,230.645 1773.41,228.716 1773.98,227.186 1774.55,225.75 1775.12,227.56 1775.69,227.349 1776.26,227.971 1776.82,230.661 1777.39,231.114 1777.96,231.305 1778.53,232.82 1779.1,234.063 1779.67,234.201 1780.23,234.219 1780.8,232.264 1781.37,231.537 1781.94,232.907 1782.51,236.145 1783.08,237.137 1783.64,236.135 1784.21,236.324 1784.78,238.49 1785.35,238.302 1785.92,241.138 1786.49,240.578 1787.05,240.135 1787.62,239.946 1788.19,239.778 1788.76,240.685 1789.33,241.411 1789.9,241.969 1790.46,242.715 1791.03,241.094 1791.6,241.778 1792.17,242.336 1792.74,242.937 1793.31,242.534 1793.87,242.819 1794.44,241.209 1795.01,241.811 1795.58,240.073 1796.15,239.76 1796.72,241.326 1797.28,240.515 1797.85,238.947 1798.42,239.566 1798.99,238.107 1799.56,239.046 1800.13,238.549 1800.69,236.213 1801.26,238.262 1801.83,235.89 1802.4,234.623 1802.97,236.403 1803.54,236.223 1804.1,236.142 1804.67,236.949 1805.24,237.817 1805.81,236.413 1806.38,235.343 1806.95,236.355 1807.51,235.074 1808.08,236.035 1808.65,235.706 1809.22,233.279 1809.79,232.292 1810.36,233.464 1810.92,233.452 1811.49,232.505 1812.06,231.725 1812.63,232.989 1813.2,234.011 1813.77,234.005 1814.33,233.942 1814.9,234.692 1815.47,235.632 1816.04,232.277 1816.61,231.241 1817.18,228.249 1817.74,228.421 1818.31,226.655 1818.88,226.99 1819.45,226.595 1820.02,226.094 1820.59,226.608 1821.15,225.968 1821.72,225.624 1822.29,225.466 1822.86,228.245 1823.43,230.517 1824,230.761 1824.56,230.126 1825.13,232.636 1825.7,232.859 1826.27,232.109 1826.84,232.316 1827.41,234.492 1827.97,233.657 1828.54,233.576 1829.11,232.758 1829.68,231.939 1830.25,231.088 1830.82,229.927 1831.39,230.255 1831.95,230.707 1832.52,228.694 1833.09,229.194 1833.66,229.707 1834.23,228.04 1834.8,228.708 1835.36,228.156 1835.93,229.489 1836.5,230.096 1837.07,231.62 1837.64,231.724 1838.21,234.379 1838.77,236.649 1839.34,234.67 1839.91,235.874 1840.48,235.065 1841.05,233.002 1841.62,233.363 1842.18,232.744 1842.75,232.074 1843.32,233.404 1843.89,236.425 1844.46,234.339 1845.03,234.529 1845.59,235.55 1846.16,238.798 1846.73,239.397 1847.3,241.087 1847.87,239.837 1848.44,237.595 1849,238.635 1849.57,238.339 1850.14,238.011 1850.71,238.07 1851.28,238.04 1851.85,236.982 1852.41,236.986 1852.98,235.832 1853.55,235.605 1854.12,235.638 1854.69,235.533 1855.26,235.509 1855.82,234.42 1856.39,234.371 1856.96,237.747 1857.53,239.475 1858.1,239.116 1858.67,240.826 1859.23,241.476 1859.8,242.799 1860.37,242.084 1860.94,240.673 1861.51,240.375 1862.08,241.081 1862.64,239.689 1863.21,239.258 1863.78,239.967 1864.35,240.59 1864.92,239.056 1865.49,237.999 1866.05,238.621 1866.62,239.3 1867.19,237.755 1867.76,238.723 1868.33,238.462 1868.9,237.241 1869.46,233.874 1870.03,234.792 1870.6,233.896 1871.17,232.03 1871.74,233.245 1872.31,232.468 1872.87,232.435 1873.44,230.635 1874.01,234.029 1874.58,232.946 1875.15,232.959 1875.72,231.999 1876.28,232.19 1876.85,234.398 1877.42,234.624 1877.99,234.614 1878.56,233.405 1879.13,235.613 1879.69,234.5 1880.26,234.532 1880.83,236.511 1881.4,236.703 1881.97,235.554 1882.54,235.567 1883.1,236.385 1883.67,236.305 1884.24,235.893 1884.81,235.983 1885.38,238.258 1885.95,235.926 1886.51,234.804 1887.08,231.746 1887.65,232.161 1888.22,231.353 1888.79,231.295 1889.36,231.265 1889.92,230.425 1890.49,230.524 1891.06,231.717 1891.63,230.826 1892.2,228.928 1892.77,229.348 1893.33,233.814 1893.9,233.789 1894.47,235.796 1895.04,237.542 1895.61,239.317 1896.18,239.888 1896.74,239.263 1897.31,237.934 1897.88,237.764 1898.45,236.354 1899.02,236.092 1899.59,236.821 1900.16,236.443 1900.72,235.055 1901.29,233.983 1901.86,235.072 1902.43,235.946 1903,234.859 1903.57,234.634 1904.13,234.496 1904.7,234.436 1905.27,232.53 1905.84,231.649 1906.41,230.759 1906.98,230.862 1907.54,230.013 1908.11,229.53 1908.68,229.992 1909.25,229.231 1909.82,230.828 1910.39,231.141 1910.95,231.15 1911.52,230.418 1912.09,231.654 1912.66,231.665 1913.23,231.84 1913.8,230.99 1914.36,231.081 1914.93,232.13 1915.5,231.055 1916.07,231.352 1916.64,232.527 1917.21,229.468 1917.77,231.981 1918.34,232.364 1918.91,232.429 1919.48,232.708 1920.05,234.925 1920.62,235.989 1921.18,236.758 1921.75,236.639 1922.32,235.548 1922.89,236.352 1923.46,237.155 1924.03,238.186 1924.59,237.807 1925.16,237.779 1925.73,235.541 1926.3,234.658 1926.87,233.709 1927.44,234.952 1928,235.821 1928.57,235.433 1929.14,236.351 1929.71,237.16 1930.28,237.859 1930.85,238.555 1931.41,238.31 1931.98,239.24 1932.55,238.877 1933.12,240.716 1933.69,240.329 1934.26,238.98 1934.82,238.647 1935.39,239.52 1935.96,236.869 1936.53,235.72 1937.1,234.513 1937.67,233.498 1938.23,233.35 1938.8,234.32 1939.37,234.351 1939.94,234.29 1940.51,235.258 1941.08,235.083 1941.64,234.905 1942.21,233.86 1942.78,235.967 1943.35,233.73 1943.92,234.88 1944.49,234.727 1945.05,235.605 1945.62,233.387 1946.19,233.428 1946.76,236.765 1947.33,232.516 1947.9,233.652 1948.46,233.626 1949.03,234.637 1949.6,233.385 1950.17,234.606 1950.74,233.334 1951.31,234.43 1951.87,233.601 1952.44,233.587 1953.01,235.336 1953.58,234.064 1954.15,233.877 1954.72,234.975 1955.28,234.029 1955.85,236.194 1956.42,237.083 1956.99,234.704 1957.56,233.463 1958.13,234.531 1958.69,233.587 1959.26,233.414 1959.83,233.437 1960.4,234.656 1960.97,235.533 1961.54,235.52 1962.1,233.521 1962.67,232.651 1963.24,231.698 1963.81,230.007 1964.38,231.31 1964.95,233.493 1965.51,233.706 1966.08,232.818 1966.65,234.99 1967.22,233.945 1967.79,230.983 1968.36,231.305 1968.92,231.534 1969.49,231.875 1970.06,232.342 1970.63,232.456 1971.2,234.718 1971.77,234.461 1972.34,233.538 1972.9,231.415 1973.47,229.444 1974.04,229.761 1974.61,232.089 1975.18,229.207 1975.75,227.56 1976.31,227.929 1976.88,229.592 1977.45,229.994 1978.02,230.271 1978.59,229.431 1979.16,229.49 1979.72,229.167 1980.29,229.451 1980.86,230.813 1981.43,231.129 1982,233.501 1982.57,235.823 1983.13,235.608 1983.7,234.52 1984.27,234.429 1984.84,236.413 1985.41,237.415 1985.98,236.376 1986.54,234.355 1987.11,233.48 1987.68,234.837 1988.25,233.997 1988.82,235.045 1989.39,233.965 1989.95,234.186 1990.52,235.216 1991.09,235.521 1991.66,234.752 1992.23,234.828 1992.8,233.925 1993.36,234.898 1993.93,234.817 1994.5,235.154 1995.07,235.232 1995.64,234.925 1996.21,236.13 1996.77,236.035 1997.34,237.004 1997.91,236.768 1998.48,236.842 1999.05,236.617 1999.62,237.481 2000.18,240.453 2000.75,239.04 2001.32,240.882 2001.89,240.519 2002.46,240.118 2003.03,242.017 2003.59,242.387 2004.16,238.871 2004.73,237.443 2005.3,237.424 2005.87,237.136 2006.44,234.981 2007,234.887 2007.57,235.964 2008.14,234.946 2008.71,233.64 2009.28,233.675 2009.85,233.753 2010.41,233.668 2010.98,232.769 2011.55,234.838 2012.12,234.72 2012.69,234.604 2013.26,234.562 2013.82,235.448 2014.39,234.537 2014.96,235.474 2015.53,234.654 2016.1,234.399 2016.67,235.557 2017.23,234.309 2017.8,235.395 2018.37,235.26 2018.94,233.253 2019.51,233.392 2020.08,235.449 2020.64,235.393 2021.21,235.447 2021.78,234.398 2022.35,234.352 2022.92,235.175 2023.49,233.174 2024.05,233.019 2024.62,233.256 2025.19,234.452 2025.76,233.555 2026.33,233.599 2026.9,232.589 2027.46,232.582 2028.03,232.796 2028.6,232.816 2029.17,230.918 2029.74,233.224 2030.31,233.362 2030.87,233.395 2031.44,232.418 2032.01,232.626 2032.58,234.577 2033.15,233.532 2033.72,233.684 2034.28,232.755 2034.85,237.006 2035.42,236.714 2035.99,238.629 2036.56,237.273 2037.13,239.052 2037.69,237.804 2038.26,238.539 2038.83,239.444 2039.4,239.748 2039.97,239.144 2040.54,241.493 2041.11,240.806 2041.67,242.325 2042.24,241.859 2042.81,242.445 2043.38,242.988 2043.95,241.551 2044.52,238.854 2045.08,238.633 2045.65,237.268 2046.22,237.888 2046.79,237.535 2047.36,236.344 2047.93,235.088 2048.49,232.597 2049.06,232.895 2049.63,232.928 2050.2,231.849 2050.77,232.739 2051.34,234.912 2051.9,232.736 2052.47,231.735 2053.04,230.87 2053.61,229.935 2054.18,230.404 2054.75,230.813 2055.31,230.997 2055.88,229.223 2056.45,229.591 2057.02,230.076 2057.59,229.425 2058.16,228.793 2058.72,230.24 2059.29,227.487 2059.86,225.898 2060.43,226.567 2061,228.027 2061.57,228.325 2062.13,228.548 2062.7,227.956 2063.27,229.515 2063.84,228.949 2064.41,229.364 2064.98,230.702 2065.54,233.252 2066.11,232.366 2066.68,233.779 2067.25,232.821 2067.82,233.062 2068.39,234.042 2068.95,232.027 2069.52,230.202 2070.09,230.615 2070.66,229.918 2071.23,232.209 2071.8,233.321 2072.36,234.335 2072.93,234.365 2073.5,234.477 2074.07,235.767 2074.64,237.764 2075.21,236.493 2075.77,236.604 2076.34,237.722 2076.91,241.697 2077.48,241.173 2078.05,240.73 2078.62,241.972 2079.18,241.371 2079.75,239.863 2080.32,237.306 2080.89,236.347 2081.46,237.307 2082.03,237.014 2082.59,236.794 2083.16,236.49 2083.73,236.355 2084.3,236.163 2084.87,238.069 2085.44,242.04 2086,241.574 2086.57,241.713 2087.14,241.18 2087.71,239.548 2088.28,239.077 2088.85,237.648 2089.41,236.266 2089.98,235.922 2090.55,235.841 2091.12,234.598 2091.69,236.44 2092.26,235.094 2092.82,232.014 2093.39,230.066 2093.96,231.167 2094.53,233.165 2095.1,232.182 2095.67,233.436 2096.23,233.311 2096.8,232.195 2097.37,234.391 2097.94,235.261 2098.51,233.082 2099.08,234.144 2099.64,233.036 2100.21,233.188 2100.78,234.026 2101.35,233.944 2101.92,234.954 2102.49,232.914 2103.05,230.948 2103.62,231.2 2104.19,231.42 2104.76,232.679 2105.33,232.966 2105.9,233.026 2106.46,234.006 2107.03,232.955 2107.6,234.914 2108.17,236.713 2108.74,236.596 2109.31,237.699 2109.87,237.347 2110.44,234.936 2111.01,233.638 2111.58,232.669 2112.15,230.674 2112.72,230.586 2113.29,228.799 2113.85,229.048 2114.42,232.419 2114.99,231.474 2115.56,232.722 2116.13,230.751 2116.7,232.097 2117.26,230.061 2117.83,233.418 2118.4,233.393 2118.97,234.368 2119.54,234.185 2120.11,234.028 2120.67,233.969 2121.24,233.995 2121.81,235.025 2122.38,234.956 2122.95,234.654 2123.52,233.522 2124.08,233.715 2124.65,233.702 2125.22,233.562 2125.79,233.553 2126.36,234.646 2126.93,234.68 2127.49,233.825 2128.06,232.687 2128.63,231.028 2129.2,232.324 2129.77,230.535 2130.34,230.989 2130.9,229.031 2131.47,230.362 2132.04,231.993 2132.61,230.247 2133.18,230.555 2133.75,229.874 2134.31,230.275 2134.88,229.533 2135.45,233.089 2136.02,234.274 2136.59,234.323 2137.16,235.42 2137.72,234.409 2138.29,234.48 2138.86,233.356 2139.43,233.3 2140,233.513 2140.57,233.591 2141.13,233.702 2141.7,231.854 2142.27,233.088 2142.84,233.635 2143.41,231.937 2143.98,234.157 2144.54,234.2 2145.11,234.378 2145.68,231.388 2146.25,230.68 2146.82,231.206 2147.39,233.665 2147.95,231.802 2148.52,232.049 2149.09,230.101 2149.66,230.53 2150.23,233.033 2150.8,232.215 2151.36,233.549 2151.93,234.74 2152.5,234.809 2153.07,234.939 2153.64,236.006 2154.21,234.981 2154.77,235.125 2155.34,235.243 2155.91,235.421 2156.48,236.267 2157.05,238.212 2157.62,236.354 2158.18,235.101 2158.75,235.213 2159.32,237.333 2159.89,237.17 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip130)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.027 ± 0.022\n  with uncertainty of ± 0.0019647454981764558\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01208 ± (0.00270404, 0.00272536) (MC)\n  95% confidence interval: [-4.01745, -4.00698] (MC)\n  linear error propagation: -4.0128 ± 0.0027764\n  |δ_y| = |0.00202854| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.012082015818644, val_l = 0.005370034255077982, val_u = 0.005098396386215676)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip160\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip160)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip161\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip160)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip162\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1143.95 2211.02,1143.95 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,975.709 2211.02,975.709 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,807.467 2211.02,807.467 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,639.226 2211.02,639.226 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,470.984 2211.02,470.984 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,302.743 2211.02,302.743 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1143.95 365.751,1143.95 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,975.709 365.751,975.709 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,807.467 365.751,807.467 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,639.226 365.751,639.226 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,470.984 365.751,470.984 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,302.743 365.751,302.743 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M298.909 1129.75 Q295.298 1129.75 293.469 1133.31 Q291.664 1136.86 291.664 1143.98 Q291.664 1151.09 293.469 1154.66 Q295.298 1158.2 298.909 1158.2 Q302.543 1158.2 304.349 1154.66 Q306.177 1151.09 306.177 1143.98 Q306.177 1136.86 304.349 1133.31 Q302.543 1129.75 298.909 1129.75 M298.909 1126.05 Q304.719 1126.05 307.775 1130.65 Q310.853 1135.23 310.853 1143.98 Q310.853 1152.71 307.775 1157.32 Q304.719 1161.9 298.909 1161.9 Q293.099 1161.9 290.02 1157.32 Q286.964 1152.71 286.964 1143.98 Q286.964 1135.23 290.02 1130.65 Q293.099 1126.05 298.909 1126.05 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M259.557 989.054 L267.196 989.054 L267.196 962.688 L258.886 964.355 L258.886 960.095 L267.15 958.429 L271.826 958.429 L271.826 989.054 L279.465 989.054 L279.465 992.989 L259.557 992.989 L259.557 989.054 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M298.909 961.507 Q295.298 961.507 293.469 965.072 Q291.664 968.614 291.664 975.743 Q291.664 982.85 293.469 986.415 Q295.298 989.956 298.909 989.956 Q302.543 989.956 304.349 986.415 Q306.177 982.85 306.177 975.743 Q306.177 968.614 304.349 965.072 Q302.543 961.507 298.909 961.507 M298.909 957.804 Q304.719 957.804 307.775 962.41 Q310.853 966.993 310.853 975.743 Q310.853 984.47 307.775 989.077 Q304.719 993.66 298.909 993.66 Q293.099 993.66 290.02 989.077 Q286.964 984.47 286.964 975.743 Q286.964 966.993 290.02 962.41 Q293.099 957.804 298.909 957.804 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M262.775 820.812 L279.094 820.812 L279.094 824.747 L257.15 824.747 L257.15 820.812 Q259.812 818.057 264.395 813.428 Q269.002 808.775 270.182 807.432 Q272.428 804.909 273.307 803.173 Q274.21 801.414 274.21 799.724 Q274.21 796.97 272.266 795.233 Q270.344 793.497 267.242 793.497 Q265.043 793.497 262.59 794.261 Q260.159 795.025 257.381 796.576 L257.381 791.854 Q260.205 790.72 262.659 790.141 Q265.113 789.562 267.15 789.562 Q272.52 789.562 275.715 792.247 Q278.909 794.933 278.909 799.423 Q278.909 801.553 278.099 803.474 Q277.312 805.372 275.205 807.965 Q274.627 808.636 271.525 811.854 Q268.423 815.048 262.775 820.812 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M298.909 793.266 Q295.298 793.266 293.469 796.831 Q291.664 800.372 291.664 807.502 Q291.664 814.608 293.469 818.173 Q295.298 821.715 298.909 821.715 Q302.543 821.715 304.349 818.173 Q306.177 814.608 306.177 807.502 Q306.177 800.372 304.349 796.831 Q302.543 793.266 298.909 793.266 M298.909 789.562 Q304.719 789.562 307.775 794.169 Q310.853 798.752 310.853 807.502 Q310.853 816.229 307.775 820.835 Q304.719 825.418 298.909 825.418 Q293.099 825.418 290.02 820.835 Q286.964 816.229 286.964 807.502 Q286.964 798.752 290.02 794.169 Q293.099 789.562 298.909 789.562 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M272.914 637.872 Q276.27 638.589 278.145 640.858 Q280.043 643.126 280.043 646.459 Q280.043 651.575 276.525 654.376 Q273.006 657.177 266.525 657.177 Q264.349 657.177 262.034 656.737 Q259.742 656.321 257.289 655.464 L257.289 650.95 Q259.233 652.084 261.548 652.663 Q263.863 653.242 266.386 653.242 Q270.784 653.242 273.076 651.506 Q275.39 649.77 275.39 646.459 Q275.39 643.404 273.238 641.691 Q271.108 639.955 267.289 639.955 L263.261 639.955 L263.261 636.112 L267.474 636.112 Q270.923 636.112 272.752 634.747 Q274.58 633.358 274.58 630.765 Q274.58 628.103 272.682 626.691 Q270.807 625.256 267.289 625.256 Q265.367 625.256 263.168 625.673 Q260.969 626.089 258.33 626.969 L258.33 622.802 Q260.992 622.061 263.307 621.691 Q265.645 621.321 267.705 621.321 Q273.029 621.321 276.131 623.751 Q279.233 626.159 279.233 630.279 Q279.233 633.149 277.59 635.14 Q275.946 637.108 272.914 637.872 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M298.909 625.024 Q295.298 625.024 293.469 628.589 Q291.664 632.131 291.664 639.26 Q291.664 646.367 293.469 649.932 Q295.298 653.473 298.909 653.473 Q302.543 653.473 304.349 649.932 Q306.177 646.367 306.177 639.26 Q306.177 632.131 304.349 628.589 Q302.543 625.024 298.909 625.024 M298.909 621.321 Q304.719 621.321 307.775 625.927 Q310.853 630.51 310.853 639.26 Q310.853 647.987 307.775 652.594 Q304.719 657.177 298.909 657.177 Q293.099 657.177 290.02 652.594 Q286.964 647.987 286.964 639.26 Q286.964 630.51 290.02 625.927 Q293.099 621.321 298.909 621.321 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M271.594 457.778 L259.789 476.227 L271.594 476.227 L271.594 457.778 M270.367 453.704 L276.247 453.704 L276.247 476.227 L281.177 476.227 L281.177 480.116 L276.247 480.116 L276.247 488.264 L271.594 488.264 L271.594 480.116 L255.992 480.116 L255.992 475.602 L270.367 453.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M298.909 456.783 Q295.298 456.783 293.469 460.348 Q291.664 463.889 291.664 471.019 Q291.664 478.125 293.469 481.69 Q295.298 485.232 298.909 485.232 Q302.543 485.232 304.349 481.69 Q306.177 478.125 306.177 471.019 Q306.177 463.889 304.349 460.348 Q302.543 456.783 298.909 456.783 M298.909 453.079 Q304.719 453.079 307.775 457.686 Q310.853 462.269 310.853 471.019 Q310.853 479.746 307.775 484.352 Q304.719 488.935 298.909 488.935 Q293.099 488.935 290.02 484.352 Q286.964 479.746 286.964 471.019 Q286.964 462.269 290.02 457.686 Q293.099 453.079 298.909 453.079 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M258.793 285.463 L277.15 285.463 L277.15 289.398 L263.076 289.398 L263.076 297.87 Q264.094 297.523 265.113 297.361 Q266.131 297.176 267.15 297.176 Q272.937 297.176 276.316 300.347 Q279.696 303.518 279.696 308.935 Q279.696 314.513 276.224 317.615 Q272.752 320.694 266.432 320.694 Q264.256 320.694 261.988 320.324 Q259.742 319.953 257.335 319.212 L257.335 314.513 Q259.418 315.648 261.641 316.203 Q263.863 316.759 266.34 316.759 Q270.344 316.759 272.682 314.652 Q275.02 312.546 275.02 308.935 Q275.02 305.324 272.682 303.217 Q270.344 301.111 266.34 301.111 Q264.465 301.111 262.59 301.527 Q260.738 301.944 258.793 302.824 L258.793 285.463 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M298.909 288.541 Q295.298 288.541 293.469 292.106 Q291.664 295.648 291.664 302.777 Q291.664 309.884 293.469 313.449 Q295.298 316.99 298.909 316.99 Q302.543 316.99 304.349 313.449 Q306.177 309.884 306.177 302.777 Q306.177 295.648 304.349 292.106 Q302.543 288.541 298.909 288.541 M298.909 284.838 Q304.719 284.838 307.775 289.444 Q310.853 294.027 310.853 302.777 Q310.853 311.504 307.775 316.111 Q304.719 320.694 298.909 320.694 Q293.099 320.694 290.02 316.111 Q286.964 311.504 286.964 302.777 Q286.964 294.027 290.02 289.444 Q293.099 284.838 298.909 284.838 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip162)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1019.99 400.199,906.099 400.786,801.604 401.372,705.87 401.958,618.313 402.545,538.393 403.131,465.611 403.718,399.501 404.304,339.632 404.891,387.286 405.477,333.949 406.063,372.517 406.65,325.572 407.236,283.513 407.823,316.591 408.409,280.308 408.995,248.166 409.582,219.895 410.168,249.759 410.755,324.007 411.341,300.664 411.927,279.508 412.514,299.834 413.1,280.971 413.687,264.518 414.273,284.747 414.86,302.978 415.446,293.594 416.032,338.816 416.619,355.213 417.205,347.328 417.792,362.969 418.378,358.748 418.964,355.56 419.551,355.612 420.137,356.079 420.724,374.553 421.31,376.074 421.896,394.614 422.483,398.188 423.069,414.782 423.656,419.526 424.242,424.073 424.829,440.986 425.415,479.045 426.001,506.083 426.588,522.525 427.174,529.116 427.761,536.495 428.347,552.805 428.933,568.768 429.52,576.422 430.106,600.112 430.693,629.295 431.279,635.77 431.865,656.041 432.452,675.22 433.038,681.339 433.625,693.873 434.211,711.55 434.798,728.004 435.384,734.523 435.97,755.625 436.557,761.169 437.143,767.386 437.73,782.812 438.316,793.218 438.902,799.89 439.489,806.084 440.075,824.416 440.662,834.197 441.248,840.61 441.835,860.886 442.421,870.194 443.007,878.949 443.594,884.701 444.18,893.346 444.767,901.971 445.353,916.947 445.939,931.667 446.526,942.919 447.112,950.711 447.699,961.378 448.285,976.679 448.871,986.086 449.458,995.252 450.044,1006.7 450.631,1010.6 451.217,1016.71 451.804,1029.89 452.39,1037.77 452.976,1045.51 453.563,1051.09 454.149,1053.6 454.736,1056.16 455.322,1063.83 455.908,1066.68 456.495,1073.84 457.081,1080.73 457.668,1087.61 458.254,1087.59 458.84,1094.37 459.427,1098.82 460.013,1107.55 460.6,1113.82 461.186,1117.56 461.773,1121.33 462.359,1131.25 462.945,1142.2 463.532,1145.36 464.118,1148.34 464.705,1149.63 465.291,1150.61 465.877,1144.18 466.464,1149.75 467.05,1154.86 467.637,1158.01 468.223,1160.88 468.809,1162.34 469.396,1165.57 469.982,1170.09 470.569,1174.63 471.155,1177.05 471.742,1183.16 472.328,1183.74 472.914,1187.83 473.501,1188.69 474.087,1193.06 474.674,1194.88 475.26,1195.48 475.846,1197.66 476.433,1201.4 477.019,1204.73 477.606,1206.81 478.192,1206.77 478.778,1206.92 479.365,1208.89 479.951,1215.13 480.538,1214.71 481.124,1213.18 481.711,1216.5 482.297,1216.12 482.883,1220.82 483.47,1222.27 484.056,1222.01 484.643,1220.14 485.229,1221.58 485.815,1222.95 486.402,1224.58 486.988,1227.31 487.575,1228.36 488.161,1224.92 488.748,1224.76 489.334,1227.49 489.92,1229.89 490.507,1229.54 491.093,1229.48 491.68,1230.56 492.266,1231.74 492.852,1228.34 493.439,1224.75 494.025,1221.75 494.612,1222.19 495.198,1221.09 495.784,1221.5 496.371,1221.96 496.957,1225.31 497.544,1229.97 498.13,1231.14 498.717,1231.14 499.303,1232.41 499.889,1232.08 500.476,1230.5 501.062,1230.66 501.649,1231.89 502.235,1231.57 502.821,1229.91 503.408,1231.12 503.994,1229.54 504.581,1230.94 505.167,1229.49 505.753,1231.03 506.34,1229.46 506.926,1231.17 507.513,1229.82 508.099,1231.14 508.686,1232.48 509.272,1232.53 509.858,1232.37 510.445,1231.95 511.031,1233.68 511.618,1236.51 512.204,1239.28 512.79,1236.26 513.377,1240.34 513.963,1244.08 514.55,1242.03 515.136,1245.75 515.722,1247.73 516.309,1249.88 516.895,1250.16 517.482,1248.84 518.068,1249.2 518.655,1248.16 519.241,1247.38 519.827,1246.77 520.414,1245.84 521,1244.83 521.587,1246.56 522.173,1248.76 522.759,1248.1 523.346,1250.21 523.932,1250.53 524.519,1249.36 525.105,1247.23 525.691,1246.48 526.278,1245.71 526.864,1246.23 527.451,1245.31 528.037,1243.23 528.624,1242.69 529.21,1242.12 529.796,1242.85 530.383,1245.34 530.969,1244.53 531.556,1245.34 532.142,1244.72 532.728,1243.92 533.315,1244.74 533.901,1243.9 534.488,1243.05 535.074,1243.37 535.661,1244.11 536.247,1247.99 536.833,1245.66 537.42,1244.91 538.006,1242.35 538.593,1241.47 539.179,1240.92 539.765,1241.76 540.352,1240.67 540.938,1243.06 541.525,1243.87 542.111,1245.88 542.697,1244.88 543.284,1244.52 543.87,1243.97 544.457,1240.41 545.043,1239.73 545.63,1239.06 546.216,1240.08 546.802,1239.72 547.389,1237.7 547.975,1237.02 548.562,1236.46 549.148,1240.29 549.734,1240.99 550.321,1241.73 550.907,1242.49 551.494,1243.3 552.08,1241.04 552.666,1241.7 553.253,1244.2 553.839,1241.96 554.426,1242.42 555.012,1243.18 555.599,1245.41 556.185,1242.87 556.771,1243.51 557.358,1241.35 557.944,1242.11 558.531,1237.21 559.117,1236.65 559.703,1237.25 560.29,1236.63 560.876,1237.37 561.463,1236.59 562.049,1240.27 562.635,1242.25 563.222,1241.6 563.808,1238.01 564.395,1235.87 564.981,1235.2 565.568,1236.24 566.154,1235.88 566.74,1233.8 567.327,1236.15 567.913,1234.46 568.5,1236.9 569.086,1235.14 569.672,1234.97 570.259,1235.99 570.845,1238.21 571.432,1237.53 572.018,1238.49 572.605,1237.72 573.191,1235.6 573.777,1235.09 574.364,1235.03 574.95,1233.19 575.537,1230.22 576.123,1230.08 576.709,1226.87 577.296,1226.66 577.882,1226.51 578.469,1227.8 579.055,1226.63 579.641,1226.55 580.228,1227.94 580.814,1229.24 581.401,1228.79 581.987,1228.55 582.574,1228.49 583.16,1230.66 583.746,1229.14 584.333,1225.98 584.919,1224.29 585.506,1225.82 586.092,1226.16 586.678,1227.44 587.265,1228.6 587.851,1228.36 588.438,1225.5 589.024,1224.18 589.61,1223.29 590.197,1223.13 590.783,1227.3 591.37,1228.27 591.956,1229.41 592.543,1230.28 593.129,1228.55 593.715,1225.64 594.302,1226.75 594.888,1223.68 595.475,1225 596.061,1225.04 596.647,1223.7 597.234,1223.78 597.82,1222.45 598.407,1222.3 598.993,1222.51 599.579,1224.06 600.166,1223.98 600.752,1223.05 601.339,1224.46 601.925,1224.45 602.512,1224.31 603.098,1227.5 603.684,1225.88 604.271,1228.47 604.857,1229.65 605.444,1232.36 606.03,1231.85 606.616,1231.62 607.203,1229.99 607.789,1230.97 608.376,1231.74 608.962,1232.6 609.548,1233.34 610.135,1234.22 610.721,1236.38 611.308,1234.28 611.894,1233.12 612.481,1232.98 613.067,1235.34 613.653,1233.42 614.24,1234.33 614.826,1233.65 615.413,1232.01 615.999,1231.45 616.585,1230.65 617.172,1232.94 617.758,1230.97 618.345,1229.19 618.931,1228.9 619.518,1227.3 620.104,1229.86 620.69,1229.68 621.277,1227.9 621.863,1229.03 622.45,1229.94 623.036,1229.64 623.622,1227.72 624.209,1228.72 624.795,1228.29 625.382,1226.57 625.968,1226.42 626.554,1223.09 627.141,1224.18 627.727,1224.25 628.314,1224.27 628.9,1225.45 629.487,1223.78 630.073,1219.54 630.659,1219.35 631.246,1220.88 631.832,1219.38 632.419,1221 633.005,1223.54 633.591,1224.75 634.178,1224.69 634.764,1225.66 635.351,1226.55 635.937,1223.9 636.523,1223.62 637.11,1220.46 637.696,1221.94 638.283,1221.69 638.869,1224.64 639.456,1224.43 640.042,1225.38 640.628,1223.65 641.215,1224.8 641.801,1222.04 642.388,1222 642.974,1224.67 643.56,1227.08 644.147,1226.72 644.733,1226.65 645.32,1229.07 645.906,1228.13 646.492,1226.42 647.079,1224.99 647.665,1224.66 648.252,1218.9 648.838,1221.53 649.425,1219.65 650.011,1221.15 650.597,1219.93 651.184,1222.78 651.77,1223.59 652.357,1223.65 652.943,1224.63 653.529,1224.35 654.116,1224.42 654.702,1224.08 655.289,1225.15 655.875,1224.42 656.462,1221.45 657.048,1222.71 657.634,1220.96 658.221,1220.74 658.807,1221.94 659.394,1224.26 659.98,1225.35 660.566,1226.51 661.153,1226.06 661.739,1224.27 662.326,1222.93 662.912,1222.56 663.498,1220.96 664.085,1222.25 664.671,1221.93 665.258,1221.74 665.844,1221.88 666.431,1223.11 667.017,1224.41 667.603,1219.99 668.19,1220.3 668.776,1218.84 669.363,1218.8 669.949,1220.49 670.535,1219.19 671.122,1220.44 671.708,1223.13 672.295,1223.06 672.881,1222.73 673.467,1223.79 674.054,1222.15 674.64,1220.5 675.227,1219.26 675.813,1218.21 676.4,1219.71 676.986,1219.37 677.572,1219.1 678.159,1219.27 678.745,1219.32 679.332,1219.31 679.918,1218.92 680.504,1218.79 681.091,1219.81 681.677,1218.64 682.264,1219.9 682.85,1222.62 683.436,1221.05 684.023,1220.77 684.609,1222.07 685.196,1219.03 685.782,1217.34 686.369,1217.21 686.955,1215.91 687.541,1217.5 688.128,1217.39 688.714,1217.55 689.301,1219.02 689.887,1220.24 690.473,1219.19 691.06,1218.92 691.646,1218.73 692.233,1218.51 692.819,1219.71 693.405,1216.86 693.992,1218.31 694.578,1218.17 695.165,1216.82 695.751,1216.91 696.338,1218.53 696.924,1218.4 697.51,1216.01 698.097,1216.1 698.683,1217.48 699.27,1218.38 699.856,1219.61 700.442,1221.01 701.029,1220.82 701.615,1216.37 702.202,1216.32 702.788,1217.28 703.375,1217.06 703.961,1216.73 704.547,1216.67 705.134,1217.92 705.72,1216.5 706.307,1217.87 706.893,1216.59 707.479,1217.98 708.066,1216.57 708.652,1218.46 709.239,1218.36 709.825,1219.76 710.411,1220.99 710.998,1220.59 711.584,1216.22 712.171,1220.19 712.757,1221.32 713.344,1220.94 713.93,1219.26 714.516,1219.07 715.103,1217.66 715.689,1218.69 716.276,1219.85 716.862,1223.77 717.448,1220.59 718.035,1219.14 718.621,1218.93 719.208,1218.77 719.794,1218.39 720.38,1218.24 720.967,1217.59 721.553,1221.65 722.14,1221.07 722.726,1220.81 723.313,1220.53 723.899,1219.29 724.485,1219.26 725.072,1218.01 725.658,1218.02 726.245,1215.13 726.831,1219.44 727.417,1216.53 728.004,1216.47 728.59,1217.91 729.177,1214.98 729.763,1217.81 730.349,1213.67 730.936,1213.65 731.522,1213.94 732.109,1214.17 732.695,1217.08 733.282,1218.16 733.868,1220.63 734.454,1221.59 735.041,1222.8 735.627,1222.48 736.214,1221.91 736.8,1220.07 737.386,1218.19 737.973,1216.69 738.559,1213.61 739.146,1213.69 739.732,1213.6 740.318,1215.24 740.905,1215.35 741.491,1213.52 742.078,1212.07 742.664,1212.42 743.251,1212.74 743.837,1215.45 744.423,1215.75 745.01,1214.2 745.596,1215.73 746.183,1215.76 746.769,1215.91 747.355,1215.81 747.942,1213.24 748.528,1214.66 749.115,1214.76 749.701,1214.61 750.288,1213.4 750.874,1213.39 751.46,1213.57 752.047,1216.41 752.633,1217.6 753.22,1215.98 753.806,1215.92 754.392,1216.2 754.979,1215.88 755.565,1215.68 756.152,1215.76 756.738,1213.18 757.324,1213.28 757.911,1210.7 758.497,1210.73 759.084,1211.17 759.67,1213.11 760.257,1213.15 760.843,1211.92 761.429,1212.04 762.016,1214.85 762.602,1213.61 763.189,1213.76 763.775,1212.61 764.361,1214.09 764.948,1214.43 765.534,1214.34 766.121,1214.2 766.707,1214.23 767.293,1215.66 767.88,1218.43 768.466,1218.2 769.053,1222.34 769.639,1224.89 770.226,1225.95 770.812,1223.99 771.398,1223.42 771.985,1220.48 772.571,1219 773.158,1218.46 773.744,1217.92 774.33,1220.29 774.917,1219.84 775.503,1223.51 776.09,1223.22 776.676,1221.55 777.262,1220.89 777.849,1223.39 778.435,1224.31 779.022,1224.2 779.608,1224.95 780.195,1225.8 780.781,1225.13 781.367,1222.06 781.954,1221.54 782.54,1222.43 783.127,1220.83 783.713,1219.24 784.299,1218.87 784.886,1217.4 785.472,1216.25 786.059,1216.34 786.645,1219.09 787.232,1218.89 787.818,1218.39 788.404,1219.49 788.991,1222.09 789.577,1223.21 790.164,1221.62 790.75,1221.14 791.336,1220.62 791.923,1220.05 792.509,1218.7 793.096,1218.47 793.682,1217.03 794.268,1218.32 794.855,1218.13 795.441,1219.53 796.028,1216.65 796.614,1216.55 797.201,1218.92 797.787,1220.08 798.373,1222.46 798.96,1219.56 799.546,1222.97 800.133,1219.52 800.719,1220.64 801.305,1221.77 801.892,1222.6 802.478,1222.01 803.065,1223.09 803.651,1225.47 804.237,1224.81 804.824,1223.93 805.41,1223.65 805.997,1220.18 806.583,1221.03 807.17,1219.32 807.756,1217.28 808.342,1218.67 808.929,1215.57 809.515,1216.49 810.102,1214.69 810.688,1214.51 811.274,1214.19 811.861,1213.12 812.447,1210.26 813.034,1207.79 813.62,1206.71 814.206,1208.48 814.793,1210.26 815.379,1211.93 815.966,1212.12 816.552,1212.09 817.139,1210.95 817.725,1211.07 818.311,1209.83 818.898,1208.66 819.484,1207.68 820.071,1209.56 820.657,1209.54 821.243,1209.92 821.83,1211.39 822.416,1211.35 823.003,1212.98 823.589,1212.77 824.175,1211.51 824.762,1213.09 825.348,1214.61 825.935,1214.55 826.521,1211.73 827.108,1211.93 827.694,1212.2 828.28,1209.68 828.867,1209.85 829.453,1210.12 830.04,1213.16 830.626,1216 831.212,1215.86 831.799,1212.86 832.385,1213.18 832.972,1214.71 833.558,1214.4 834.145,1208.84 834.731,1211.73 835.317,1213.31 835.904,1213.27 836.49,1214.93 837.077,1218.92 837.663,1220.26 838.249,1218.77 838.836,1218.36 839.422,1217.94 840.009,1218.88 840.595,1218.51 841.181,1219.51 841.768,1218.1 842.354,1216.42 842.941,1214.84 843.527,1214.91 844.114,1212.2 844.7,1210.95 845.286,1210.89 845.873,1212.46 846.459,1215.35 847.046,1212.52 847.632,1211.18 848.218,1211.61 848.805,1209.42 849.391,1209.81 849.978,1211.19 850.564,1209.66 851.15,1209.64 851.737,1209.82 852.323,1211.29 852.91,1211.62 853.496,1214.39 854.083,1215.56 854.669,1214.3 855.255,1214.7 855.842,1214.65 856.428,1211.82 857.015,1207.61 857.601,1208.02 858.187,1208.36 858.774,1207.04 859.36,1211.41 859.947,1211.17 860.533,1214.14 861.119,1214.08 861.706,1212.73 862.292,1212.8 862.879,1211.63 863.465,1209.07 864.052,1207.92 864.638,1209.67 865.224,1210.11 865.811,1206.09 866.397,1205.34 866.984,1204.2 867.57,1204.87 868.156,1206.61 868.743,1208.27 869.329,1207.51 869.916,1206.82 870.502,1208.58 871.089,1209.04 871.675,1213.53 872.261,1213.52 872.848,1213.52 873.434,1211.89 874.021,1211.82 874.607,1213.19 875.193,1214.72 875.78,1213.16 876.366,1214.4 876.953,1213 877.539,1211.63 878.125,1211.79 878.712,1210.66 879.298,1213.34 879.885,1216.14 880.471,1215.86 881.058,1214.11 881.644,1211.5 882.23,1210.48 882.817,1209.36 883.403,1212.27 883.99,1213.76 884.576,1213.71 885.162,1211 885.749,1211.04 886.335,1208.68 886.922,1207.43 887.508,1206.34 888.094,1205.08 888.681,1204.23 889.267,1206.02 889.854,1206.25 890.44,1205.36 891.027,1205.81 891.613,1204.56 892.199,1206.44 892.786,1209.37 893.372,1211.16 893.959,1211.49 894.545,1210.15 895.131,1209.17 895.718,1209.33 896.304,1209.42 896.891,1205.64 897.477,1208.93 898.063,1210.38 898.65,1210.73 899.236,1211.04 899.823,1212.46 900.409,1214 900.996,1216.84 901.582,1216.38 902.168,1220.37 902.755,1218.41 903.341,1214.06 903.928,1213.57 904.514,1213.62 905.1,1210.88 905.687,1209.82 906.273,1209.86 906.86,1207.38 907.446,1209.04 908.032,1207.84 908.619,1208.08 909.205,1209.62 909.792,1208.72 910.378,1206.38 910.965,1206.87 911.551,1209.78 912.137,1210.09 912.724,1210.19 913.31,1211.62 913.897,1211.59 914.483,1211.54 915.069,1214.79 915.656,1210.36 916.242,1209.17 916.829,1209.37 917.415,1211 918.002,1212.34 918.588,1213.75 919.174,1213.7 919.761,1213.67 920.347,1214.9 920.934,1217.41 921.52,1216.93 922.106,1216.78 922.693,1216.45 923.279,1216.2 923.866,1211.94 924.452,1212.21 925.038,1213.47 925.625,1219.27 926.211,1220.26 926.798,1219.72 927.384,1220.85 927.971,1221.67 928.557,1222.63 929.143,1221.99 929.73,1220.08 930.316,1219.57 930.903,1219.21 931.489,1218.89 932.075,1214.6 932.662,1214.47 933.248,1214.12 933.835,1214.28 934.421,1212.9 935.007,1211.78 935.594,1211.87 936.18,1214.42 936.767,1214.38 937.353,1211.77 937.94,1214.27 938.526,1214.44 939.112,1213.03 939.699,1215.59 940.285,1212.76 940.872,1214.14 941.458,1212.86 942.044,1213.2 942.631,1213.09 943.217,1213.05 943.804,1214.21 944.39,1215.34 944.976,1215.31 945.563,1219.31 946.149,1221.59 946.736,1222.54 947.322,1221.73 947.909,1222.64 948.495,1222.02 949.081,1221.45 949.668,1220.77 950.254,1220.24 950.841,1219.67 951.427,1220.54 952.013,1218.7 952.6,1218.4 953.186,1219.62 953.773,1217.81 954.359,1214.46 954.945,1213.1 955.532,1210.36 956.118,1213.07 956.705,1210.44 957.291,1211.83 957.878,1213.16 958.464,1211.59 959.05,1215.98 959.637,1218.46 960.223,1219.16 960.81,1215.86 961.396,1219.89 961.982,1219.27 962.569,1220.59 963.155,1218.73 963.742,1219.86 964.328,1216.9 964.915,1216.63 965.501,1216.22 966.087,1216.16 966.674,1217.06 967.26,1218.16 967.847,1220.87 968.433,1220.55 969.019,1217.36 969.606,1212.99 970.192,1215.64 970.779,1214.47 971.365,1215.84 971.951,1215.6 972.538,1215.09 973.124,1214.74 973.711,1217.14 974.297,1216.92 974.884,1216.64 975.47,1216.41 976.056,1216.26 976.643,1217.46 977.229,1214.54 977.816,1213.12 978.402,1216.2 978.988,1215.83 979.575,1215.59 980.161,1214.05 980.748,1212.72 981.334,1211.43 981.92,1211.12 982.507,1211.02 983.093,1209.79 983.68,1211.05 984.266,1212.35 984.853,1213.48 985.439,1213.38 986.025,1213.37 986.612,1214.73 987.198,1214.47 987.785,1211.59 988.371,1211.6 988.957,1213.1 989.544,1215.99 990.13,1216.04 990.717,1221.45 991.303,1221.06 991.889,1220.44 992.476,1221.36 993.062,1220.24 993.649,1222.15 994.235,1218.88 994.822,1218.71 995.408,1217.29 995.994,1217.17 996.581,1215.78 997.167,1215.68 997.754,1215.62 998.34,1215.53 998.926,1213.58 999.513,1215 1000.1,1213.42 1000.69,1211.72 1001.27,1211.98 1001.86,1214.66 1002.44,1215.8 1003.03,1212.86 1003.62,1212.77 1004.2,1212.45 1004.79,1213.6 1005.38,1212.38 1005.96,1212.72 1006.55,1209.85 1007.14,1208.61 1007.72,1207.42 1008.31,1206.26 1008.9,1206.8 1009.48,1208.4 1010.07,1207.35 1010.65,1209 1011.24,1209.04 1011.83,1209.42 1012.41,1213.8 1013,1212.44 1013.59,1208.59 1014.17,1209.09 1014.76,1207.9 1015.35,1206.84 1015.93,1205.55 1016.52,1211.19 1017.11,1210.05 1017.69,1210.14 1018.28,1210.27 1018.86,1208.94 1019.45,1209.14 1020.04,1206.6 1020.62,1205.33 1021.21,1207.03 1021.8,1204.31 1022.38,1204.57 1022.97,1209.05 1023.56,1207.67 1024.14,1208.1 1024.73,1208.21 1025.32,1207.26 1025.9,1207.37 1026.49,1207.72 1027.07,1209.25 1027.66,1209.71 1028.25,1208.46 1028.83,1210.11 1029.42,1211.92 1030.01,1212.01 1030.59,1210.5 1031.18,1210.6 1031.77,1209.26 1032.35,1210.99 1032.94,1211 1033.52,1209.66 1034.11,1212.5 1034.7,1214.18 1035.28,1211.12 1035.87,1211.22 1036.46,1211.38 1037.04,1209.13 1037.63,1210.71 1038.22,1209.52 1038.8,1209.45 1039.39,1209.58 1039.98,1211.14 1040.56,1207.15 1041.15,1206.04 1041.73,1205.18 1042.32,1208.43 1042.91,1207.01 1043.49,1207.12 1044.08,1207.48 1044.67,1207.96 1045.25,1212.36 1045.84,1211.06 1046.43,1209.96 1047.01,1211.57 1047.6,1211.49 1048.19,1211.4 1048.77,1210.06 1049.36,1212.98 1049.94,1214.44 1050.53,1217.17 1051.12,1215.45 1051.7,1215.17 1052.29,1214.96 1052.88,1214.99 1053.46,1214.49 1054.05,1214.54 1054.64,1217.03 1055.22,1219.61 1055.81,1217.7 1056.39,1219.07 1056.98,1216.35 1057.57,1217.62 1058.15,1217.31 1058.74,1214.25 1059.33,1215.68 1059.91,1212.76 1060.5,1213.96 1061.09,1213.92 1061.67,1213.7 1062.26,1213.69 1062.85,1210.7 1063.43,1207.98 1064.02,1208.42 1064.6,1211.54 1065.19,1210.37 1065.78,1210.41 1066.36,1209.06 1066.95,1210.61 1067.54,1212.11 1068.12,1210.76 1068.71,1211.77 1069.3,1211.59 1069.88,1211.51 1070.47,1212.87 1071.06,1211.57 1071.64,1212.73 1072.23,1214.12 1072.81,1216.45 1073.4,1217.45 1073.99,1217.24 1074.57,1218.26 1075.16,1216.5 1075.75,1216.38 1076.33,1213.66 1076.92,1212.18 1077.51,1210.43 1078.09,1210.66 1078.68,1210.99 1079.26,1214.02 1079.85,1214.06 1080.44,1214.05 1081.02,1215.2 1081.61,1216.34 1082.2,1214.92 1082.78,1217.63 1083.37,1219.05 1083.96,1218.8 1084.54,1216.89 1085.13,1217.69 1085.72,1217.59 1086.3,1217.63 1086.89,1218.77 1087.47,1218.13 1088.06,1216.52 1088.65,1216.78 1089.23,1216.54 1089.82,1215.06 1090.41,1212.3 1090.99,1213.76 1091.58,1212.6 1092.17,1212.43 1092.75,1214.97 1093.34,1214.69 1093.93,1212.84 1094.51,1212.96 1095.1,1211.57 1095.68,1208.72 1096.27,1214.05 1096.86,1212.6 1097.44,1211.09 1098.03,1212.12 1098.62,1209.24 1099.2,1209.32 1099.79,1209.16 1100.38,1209.28 1100.96,1211.97 1101.55,1217.31 1102.14,1217.09 1102.72,1215.87 1103.31,1214.44 1103.89,1212.89 1104.48,1212.83 1105.07,1214.06 1105.65,1211.32 1106.24,1212.69 1106.83,1211.38 1107.41,1212.75 1108,1212.63 1108.59,1212.69 1109.17,1211.16 1109.76,1208.53 1110.34,1212.56 1110.93,1212.75 1111.52,1211.53 1112.1,1210.16 1112.69,1208.86 1113.28,1208.86 1113.86,1211.74 1114.45,1208.84 1115.04,1209.92 1115.62,1208.49 1116.21,1208.66 1116.8,1210.56 1117.38,1207.99 1117.97,1208.24 1118.55,1210.08 1119.14,1208.93 1119.73,1210.33 1120.31,1210.49 1120.9,1211.97 1121.49,1209.42 1122.07,1210.77 1122.66,1209.35 1123.25,1209.5 1123.83,1209.79 1124.42,1207.07 1125.01,1211.43 1125.59,1210.03 1126.18,1210.33 1126.76,1210.36 1127.35,1207.66 1127.94,1207.67 1128.52,1206.49 1129.11,1205.7 1129.7,1206.17 1130.28,1204.86 1130.87,1205.09 1131.46,1210.95 1132.04,1206.92 1132.63,1205.88 1133.21,1207.33 1133.8,1207.34 1134.39,1207.92 1134.97,1209.02 1135.56,1207.66 1136.15,1207.73 1136.73,1206.56 1137.32,1206.91 1137.91,1204.46 1138.49,1204.67 1139.08,1208.81 1139.67,1209.3 1140.25,1206.84 1140.84,1207.43 1141.42,1206.26 1142.01,1206.36 1142.6,1209.47 1143.18,1209.69 1143.77,1208.49 1144.36,1207.28 1144.94,1206.02 1145.53,1206.35 1146.12,1204.01 1146.7,1201.63 1147.29,1200.79 1147.88,1202.75 1148.46,1205.88 1149.05,1206.17 1149.63,1206.48 1150.22,1207.07 1150.81,1208.86 1151.39,1207.66 1151.98,1208.2 1152.57,1206.97 1153.15,1211.3 1153.74,1211.07 1154.33,1209.64 1154.91,1208.24 1155.5,1209.88 1156.09,1212.73 1156.67,1215.49 1157.26,1215.12 1157.84,1214.84 1158.43,1215.99 1159.02,1212.95 1159.6,1211.76 1160.19,1211.68 1160.78,1212.95 1161.36,1213.95 1161.95,1213.66 1162.54,1213.36 1163.12,1213.41 1163.71,1217.45 1164.29,1219.57 1164.88,1216.31 1165.47,1218.9 1166.05,1219.59 1166.64,1218.74 1167.23,1221.19 1167.81,1224.62 1168.4,1230.78 1168.99,1229.45 1169.57,1227.04 1170.16,1223.22 1170.75,1223.7 1171.33,1219.11 1171.92,1216.24 1172.5,1211.95 1173.09,1213.2 1173.68,1211.68 1174.26,1214.38 1174.85,1214.17 1175.44,1211.47 1176.02,1206.19 1176.61,1204.92 1177.2,1207.99 1177.78,1208.17 1178.37,1207.1 1178.96,1209.73 1179.54,1216.35 1180.13,1214.6 1180.71,1214.46 1181.3,1211.5 1181.89,1214.07 1182.47,1212.46 1183.06,1214.05 1183.65,1213.98 1184.23,1212.46 1184.82,1212.14 1185.41,1212.62 1185.99,1215.13 1186.58,1217.41 1187.16,1215.49 1187.75,1214.14 1188.34,1216.66 1188.92,1216.45 1189.51,1216.4 1190.1,1214.67 1190.68,1212.76 1191.27,1212.47 1191.86,1210.97 1192.44,1208.19 1193.03,1206.94 1193.62,1209.74 1194.2,1207.06 1194.79,1209.03 1195.37,1207.76 1195.96,1206.46 1196.55,1205.41 1197.13,1207.07 1197.72,1207.13 1198.31,1206.27 1198.89,1205.06 1199.48,1204.08 1200.07,1207.28 1200.65,1206.29 1201.24,1203.61 1201.83,1204.2 1202.41,1203.24 1203,1202.13 1203.58,1202.67 1204.17,1203.08 1204.76,1203.39 1205.34,1199.99 1205.93,1200.56 1206.52,1199.67 1207.1,1199.01 1207.69,1200.75 1208.28,1201.06 1208.86,1201.44 1209.45,1201.92 1210.03,1201.08 1210.62,1199.07 1211.21,1195.6 1211.79,1193.86 1212.38,1196.56 1212.97,1194.57 1213.55,1195.64 1214.14,1197.98 1214.73,1201.46 1215.31,1203.68 1215.9,1204.05 1216.49,1204.53 1217.07,1204.84 1217.66,1205.59 1218.24,1207.4 1218.83,1211.81 1219.42,1206.36 1220,1209.18 1220.59,1209.12 1221.18,1209.48 1221.76,1212.12 1222.35,1212.29 1222.94,1212.42 1223.52,1213.79 1224.11,1215.14 1224.7,1213.39 1225.28,1213.31 1225.87,1214.46 1226.45,1212.84 1227.04,1215.89 1227.63,1216.91 1228.21,1219.27 1228.8,1216.2 1229.39,1213.15 1229.97,1217.03 1230.56,1215.13 1231.15,1217.63 1231.73,1217.49 1232.32,1217.51 1232.91,1215.87 1233.49,1215.6 1234.08,1216.77 1234.66,1216.72 1235.25,1217.84 1235.84,1213.37 1236.42,1210.4 1237.01,1210.29 1237.6,1210.15 1238.18,1208.91 1238.77,1210.42 1239.36,1209.07 1239.94,1210.72 1240.53,1211 1241.11,1209.73 1241.7,1210.06 1242.29,1211.32 1242.87,1214.13 1243.46,1214.18 1244.05,1212.58 1244.63,1211.15 1245.22,1208.33 1245.81,1211.24 1246.39,1210.1 1246.98,1210.05 1247.57,1210.48 1248.15,1209.17 1248.74,1209.29 1249.32,1209.52 1249.91,1211.34 1250.5,1211.47 1251.08,1211.64 1251.67,1212.91 1252.26,1213.17 1252.84,1211.95 1253.43,1211.76 1254.02,1210.39 1254.6,1211.81 1255.19,1211.86 1255.78,1213.27 1256.36,1213.24 1256.95,1214.75 1257.53,1215.79 1258.12,1216.98 1258.71,1216.31 1259.29,1214.42 1259.88,1212.98 1260.47,1211.64 1261.05,1213.19 1261.64,1217.1 1262.23,1215.56 1262.81,1218.18 1263.4,1216.74 1263.98,1217.99 1264.57,1217.75 1265.16,1218.84 1265.74,1220.12 1266.33,1218.03 1266.92,1216.37 1267.5,1215.99 1268.09,1213.02 1268.68,1213.27 1269.26,1213.15 1269.85,1214.68 1270.44,1213.2 1271.02,1210.39 1271.61,1211.86 1272.19,1213.24 1272.78,1214.75 1273.37,1214.52 1273.95,1217.21 1274.54,1215.54 1275.13,1215.4 1275.71,1212.72 1276.3,1214.39 1276.89,1214.3 1277.47,1212.59 1278.06,1211.37 1278.65,1209.88 1279.23,1210.09 1279.82,1212.73 1280.4,1212.85 1280.99,1214.2 1281.58,1211.5 1282.16,1208.65 1282.75,1212.8 1283.34,1213.79 1283.92,1212.76 1284.51,1209.74 1285.1,1209.83 1285.68,1210.08 1286.27,1211.51 1286.86,1211.83 1287.44,1216.14 1288.03,1219.87 1288.61,1219.84 1289.2,1216.44 1289.79,1216.17 1290.37,1214.59 1290.96,1215.86 1291.55,1214.31 1292.13,1212.82 1292.72,1214.11 1293.31,1212.78 1293.89,1211.27 1294.48,1212.57 1295.06,1213.75 1295.65,1212.21 1296.24,1213.64 1296.82,1214.93 1297.41,1210.66 1298,1210.62 1298.58,1209.23 1299.17,1206.49 1299.76,1206.84 1300.34,1207 1300.93,1207.43 1301.52,1209.11 1302.1,1209.25 1302.69,1206.63 1303.27,1205.47 1303.86,1205.79 1304.45,1207.77 1305.03,1205.36 1305.62,1205.62 1306.21,1207.08 1306.79,1207.16 1307.38,1206.22 1307.97,1205.29 1308.55,1204.51 1309.14,1203.66 1309.73,1206.75 1310.31,1208.15 1310.9,1209.81 1311.48,1211.29 1312.07,1210.05 1312.66,1212.88 1313.24,1212.3 1313.83,1212.04 1314.42,1213.31 1315,1216 1315.59,1215.64 1316.18,1217.92 1316.76,1218.73 1317.35,1221.08 1317.93,1220.57 1318.52,1218.49 1319.11,1219.51 1319.69,1218.96 1320.28,1218.71 1320.87,1218.33 1321.45,1216.65 1322.04,1215.01 1322.63,1211.98 1323.21,1210.62 1323.8,1206.41 1324.39,1205.17 1324.97,1206.96 1325.56,1206.95 1326.14,1205.67 1326.73,1207.39 1327.32,1210.42 1327.9,1210.79 1328.49,1210.69 1329.08,1210.87 1329.66,1210.9 1330.25,1210.9 1330.84,1208.36 1331.42,1205.86 1332.01,1207.44 1332.6,1206.48 1333.18,1208 1333.77,1206.83 1334.35,1206.8 1334.94,1206.65 1335.53,1208.32 1336.11,1209.39 1336.7,1205.2 1337.29,1202.88 1337.87,1202.05 1338.46,1202.79 1339.05,1204.36 1339.63,1206.14 1340.22,1206.37 1340.8,1206.49 1341.39,1203.95 1341.98,1205.67 1342.56,1207.61 1343.15,1207.82 1343.74,1208.15 1344.32,1211.01 1344.91,1209.8 1345.5,1209.92 1346.08,1211.38 1346.67,1211.45 1347.26,1211.57 1347.84,1210.21 1348.43,1210.31 1349.01,1210.42 1349.6,1207.85 1350.19,1206.97 1350.77,1203.39 1351.36,1203.71 1351.95,1205.71 1352.53,1204.78 1353.12,1202.2 1353.71,1200.22 1354.29,1202.16 1354.88,1203.99 1355.47,1204.45 1356.05,1206.16 1356.64,1210.73 1357.22,1212.13 1357.81,1214.63 1358.4,1215.65 1358.98,1216.62 1359.57,1216.6 1360.16,1220.3 1360.74,1218.54 1361.33,1219.88 1361.92,1218.16 1362.5,1219.21 1363.09,1220.32 1363.68,1219.71 1364.26,1219.23 1364.85,1214.57 1365.43,1213.35 1366.02,1214.71 1366.61,1210.28 1367.19,1210.32 1367.78,1210.32 1368.37,1210.14 1368.95,1212.83 1369.54,1212.96 1370.13,1212.73 1370.71,1214.57 1371.3,1214.19 1371.88,1215.45 1372.47,1217.78 1373.06,1216.09 1373.64,1215.85 1374.23,1212.91 1374.82,1214.3 1375.4,1215.45 1375.99,1216.7 1376.58,1216.71 1377.16,1218.9 1377.75,1217.19 1378.34,1215.64 1378.92,1212.66 1379.51,1214.05 1380.09,1209.58 1380.68,1208.34 1381.27,1212.55 1381.85,1213.94 1382.44,1213.86 1383.03,1216.38 1383.61,1210.72 1384.2,1210.96 1384.79,1213.79 1385.37,1212.28 1385.96,1210.85 1386.55,1210.88 1387.13,1210.91 1387.72,1210.72 1388.3,1209.36 1388.89,1210.93 1389.48,1213.58 1390.06,1213.47 1390.65,1216.15 1391.24,1214.8 1391.82,1216.13 1392.41,1215.88 1393,1215.49 1393.58,1216.42 1394.17,1217.59 1394.75,1215.67 1395.34,1216.74 1395.93,1216.31 1396.51,1217.44 1397.1,1217.41 1397.69,1218.39 1398.27,1217.9 1398.86,1217.52 1399.45,1216.97 1400.03,1214.13 1400.62,1215.79 1401.21,1217.26 1401.79,1215.54 1402.38,1215.33 1402.96,1215.37 1403.55,1213.96 1404.14,1216.91 1404.72,1219.18 1405.31,1218.68 1405.9,1219.78 1406.48,1218.86 1407.07,1219.87 1407.66,1216.79 1408.24,1218.08 1408.83,1215.07 1409.42,1216.19 1410,1217.23 1410.59,1216.75 1411.17,1215.11 1411.76,1217.43 1412.35,1215.61 1412.93,1216.77 1413.52,1211.03 1414.11,1209.54 1414.69,1206.73 1415.28,1206.88 1415.87,1209.88 1416.45,1210.22 1417.04,1210.14 1417.63,1213.12 1418.21,1217.07 1418.8,1215.17 1419.38,1216.47 1419.97,1216.17 1420.56,1215.82 1421.14,1215.75 1421.73,1213.88 1422.32,1215.17 1422.9,1213.34 1423.49,1214.34 1424.08,1216.67 1424.66,1215.07 1425.25,1215.01 1425.83,1216.05 1426.42,1214.33 1427.01,1213.94 1427.59,1215.08 1428.18,1214.73 1428.77,1213.34 1429.35,1213.14 1429.94,1211.93 1430.53,1207.77 1431.11,1210.7 1431.7,1208.08 1432.29,1208.07 1432.87,1209.96 1433.46,1212.57 1434.04,1212.32 1434.63,1213.82 1435.22,1210.99 1435.8,1209.62 1436.39,1211.03 1436.98,1210.9 1437.56,1210.73 1438.15,1210.7 1438.74,1212.07 1439.32,1207.69 1439.91,1209.37 1440.5,1209.69 1441.08,1212.6 1441.67,1213.97 1442.25,1215.47 1442.84,1215.51 1443.43,1216.54 1444.01,1217.41 1444.6,1216.99 1445.19,1216.7 1445.77,1217.73 1446.36,1216.15 1446.95,1215.94 1447.53,1215.84 1448.12,1215.38 1448.7,1215.06 1449.29,1215.36 1449.88,1213.78 1450.46,1215.15 1451.05,1213.69 1451.64,1212.02 1452.22,1213.19 1452.81,1212.91 1453.4,1214.3 1453.98,1214 1454.57,1213.96 1455.16,1216.71 1455.74,1217.77 1456.33,1216.12 1456.91,1214.7 1457.5,1214.17 1458.09,1211.29 1458.67,1210.03 1459.26,1211.55 1459.85,1211.36 1460.43,1207.21 1461.02,1206.03 1461.61,1206.14 1462.19,1202.4 1462.78,1206.99 1463.37,1208.72 1463.95,1209.07 1464.54,1210.53 1465.12,1210.42 1465.71,1210.31 1466.3,1210.67 1466.88,1212.24 1467.47,1217.58 1468.06,1214.61 1468.64,1213.07 1469.23,1211.55 1469.82,1205.87 1470.4,1208.8 1470.99,1207.61 1471.57,1206.67 1472.16,1208.51 1472.75,1207.21 1473.33,1204.55 1473.92,1204.68 1474.51,1203.61 1475.09,1204.12 1475.68,1204.47 1476.27,1204.88 1476.85,1207.52 1477.44,1209.12 1478.03,1207.83 1478.61,1209.26 1479.2,1210.79 1479.78,1213.42 1480.37,1213.57 1480.96,1214.9 1481.54,1216.36 1482.13,1214.7 1482.72,1214.53 1483.3,1216.87 1483.89,1213.82 1484.48,1212.38 1485.06,1209.55 1485.65,1205.47 1486.24,1205.44 1486.82,1203.23 1487.41,1205.08 1487.99,1205.41 1488.58,1207.18 1489.17,1210.44 1489.75,1210.57 1490.34,1207.92 1490.93,1205.72 1491.51,1206.57 1492.1,1206.89 1492.69,1209.84 1493.27,1209.81 1493.86,1210.07 1494.45,1207.4 1495.03,1208.85 1495.62,1209.1 1496.2,1210.68 1496.79,1209.3 1497.38,1209.42 1497.96,1210.59 1498.55,1206.48 1499.14,1209.7 1499.72,1209.99 1500.31,1211.12 1500.9,1213.79 1501.48,1210.82 1502.07,1210.85 1502.65,1210.74 1503.24,1208.33 1503.83,1208.34 1504.41,1209.73 1505,1208.31 1505.59,1208.71 1506.17,1210.35 1506.76,1210.1 1507.35,1209.98 1507.93,1211.49 1508.52,1212.86 1509.11,1212.59 1509.69,1209.8 1510.28,1208.43 1510.86,1211.15 1511.45,1211.06 1512.04,1212.55 1512.62,1212.35 1513.21,1211.18 1513.8,1211.39 1514.38,1211.48 1514.97,1214.04 1515.56,1213.7 1516.14,1208.17 1516.73,1211.19 1517.32,1212.71 1517.9,1215.2 1518.49,1217.65 1519.07,1221.05 1519.66,1220.71 1520.25,1218.8 1520.83,1218.58 1521.42,1218.11 1522.01,1213.69 1522.59,1212.2 1523.18,1212.18 1523.77,1210.99 1524.35,1210.04 1524.94,1210.37 1525.52,1210.52 1526.11,1213.11 1526.7,1214.2 1527.28,1210.97 1527.87,1213.32 1528.46,1213.14 1529.04,1211.8 1529.63,1213.35 1530.22,1213.68 1530.8,1211.17 1531.39,1212.28 1531.98,1214.74 1532.56,1214.65 1533.15,1214.33 1533.73,1214.06 1534.32,1209.53 1534.91,1208.27 1535.49,1208.42 1536.08,1209.82 1536.67,1212.59 1537.25,1208.32 1537.84,1205.55 1538.43,1207.21 1539.01,1207.57 1539.6,1207.65 1540.19,1206.48 1540.77,1205.37 1541.36,1205.52 1541.94,1204.78 1542.53,1207.93 1543.12,1208.32 1543.7,1208.12 1544.29,1207.92 1544.88,1209.6 1545.46,1211.08 1546.05,1213.92 1546.64,1212.57 1547.22,1212.57 1547.81,1213.98 1548.4,1210.01 1548.98,1208.78 1549.57,1210.65 1550.15,1208.09 1550.74,1209.79 1551.33,1210.04 1551.91,1208.87 1552.5,1207.6 1553.09,1210.58 1553.67,1210.35 1554.26,1209.1 1554.85,1209.14 1555.43,1207.87 1556.02,1207.03 1556.6,1207.55 1557.19,1207.55 1557.78,1207.9 1558.36,1209.36 1558.95,1208.39 1559.54,1211.04 1560.12,1209.45 1560.71,1211.12 1561.3,1211.06 1561.88,1206.87 1562.47,1207.16 1563.06,1208.68 1563.64,1210.3 1564.23,1210.32 1564.81,1210.67 1565.4,1213.94 1565.99,1215.37 1566.57,1215.2 1567.16,1216.56 1567.75,1217.66 1568.33,1217.31 1568.92,1215.62 1569.51,1212.73 1570.09,1215.3 1570.68,1212.39 1571.27,1213.74 1571.85,1213.41 1572.44,1211.96 1573.02,1212.06 1573.61,1211.95 1574.2,1210.59 1574.78,1211.63 1575.37,1211.72 1575.96,1213.32 1576.54,1213.58 1577.13,1211.94 1577.72,1209.16 1578.3,1208.15 1578.89,1210.95 1579.47,1209.75 1580.06,1211.35 1580.65,1211.25 1581.23,1208.41 1581.82,1208.61 1582.41,1209.02 1582.99,1209.06 1583.58,1213.06 1584.17,1215.88 1584.75,1215.8 1585.34,1216.83 1585.93,1216.61 1586.51,1216.22 1587.1,1217.36 1587.68,1217.03 1588.27,1215.53 1588.86,1215.35 1589.44,1217.83 1590.03,1214.78 1590.62,1214.59 1591.2,1213.21 1591.79,1210.5 1592.38,1205 1592.96,1205.24 1593.55,1205.45 1594.14,1206.99 1594.72,1208.32 1595.31,1205.6 1595.89,1204.29 1596.48,1202.92 1597.07,1203.39 1597.65,1205.22 1598.24,1205.5 1598.83,1204.49 1599.41,1207.57 1600,1209.55 1600.59,1209.49 1601.17,1208.03 1601.76,1206.88 1602.34,1206.92 1602.93,1208.57 1603.52,1209.92 1604.1,1208.78 1604.69,1208.9 1605.28,1211.82 1605.86,1211.99 1606.45,1211.99 1607.04,1213.22 1607.62,1214.39 1608.21,1214.1 1608.8,1212.8 1609.38,1211.49 1609.97,1210.01 1610.55,1211.36 1611.14,1211.39 1611.73,1211.61 1612.31,1211.56 1612.9,1214.6 1613.49,1211.81 1614.07,1214.48 1614.66,1214.5 1615.25,1217.26 1615.83,1215.7 1616.42,1214.04 1617.01,1213.61 1617.59,1210.54 1618.18,1209.02 1618.76,1209.38 1619.35,1208.08 1619.94,1209.82 1620.52,1212.72 1621.11,1212.91 1621.7,1208.77 1622.28,1210.25 1622.87,1210.34 1623.46,1210.26 1624.04,1210.38 1624.63,1211.68 1625.22,1211.81 1625.8,1209.11 1626.39,1209.08 1626.97,1211.6 1627.56,1209 1628.15,1207.52 1628.73,1207.9 1629.32,1206.44 1629.91,1206.43 1630.49,1206.88 1631.08,1205.67 1631.67,1204.35 1632.25,1206.16 1632.84,1204.93 1633.42,1207.89 1634.01,1209.79 1634.6,1209.84 1635.18,1209.45 1635.77,1208.48 1636.36,1208.86 1636.94,1208.98 1637.53,1207.91 1638.12,1212.11 1638.7,1210.56 1639.29,1211.91 1639.88,1214.91 1640.46,1216.36 1641.05,1217.48 1641.63,1217.3 1642.22,1215.42 1642.81,1213.79 1643.39,1213.69 1643.98,1213.49 1644.57,1212.06 1645.15,1213.35 1645.74,1213.6 1646.33,1214.9 1646.91,1216 1647.5,1215.46 1648.09,1219.61 1648.67,1217.47 1649.26,1217.31 1649.84,1218.63 1650.43,1218.3 1651.02,1218.17 1651.6,1215.19 1652.19,1213.7 1652.78,1213.33 1653.36,1213.13 1653.95,1211.71 1654.54,1210.57 1655.12,1210.9 1655.71,1210.8 1656.29,1211.04 1656.88,1208.38 1657.47,1208.7 1658.05,1211.5 1658.64,1212.56 1659.23,1215.08 1659.81,1213.57 1660.4,1213.29 1660.99,1208.94 1661.57,1208.75 1662.16,1207.22 1662.75,1206.08 1663.33,1203.57 1663.92,1205.35 1664.5,1205.91 1665.09,1206.15 1665.68,1206.34 1666.26,1207.85 1666.85,1209.41 1667.44,1211.11 1668.02,1211.18 1668.61,1212.9 1669.2,1213.12 1669.78,1213.22 1670.37,1214.38 1670.96,1212.92 1671.54,1214.28 1672.13,1213.81 1672.71,1214.83 1673.3,1216 1673.89,1213.07 1674.47,1215.92 1675.06,1214.55 1675.65,1217.14 1676.23,1216.83 1676.82,1216.98 1677.41,1215.34 1677.99,1214.95 1678.58,1214.69 1679.17,1216.24 1679.75,1220.23 1680.34,1221.56 1680.92,1220.99 1681.51,1220.54 1682.1,1220.23 1682.68,1221.37 1683.27,1219.27 1683.86,1217.58 1684.44,1217.3 1685.03,1213.1 1685.62,1214.48 1686.2,1216.15 1686.79,1215.69 1687.37,1214.3 1687.96,1215.78 1688.55,1213.95 1689.13,1213.73 1689.72,1213.78 1690.31,1213.8 1690.89,1210.8 1691.48,1209.35 1692.07,1210.99 1692.65,1208.22 1693.24,1208.38 1693.83,1207.44 1694.41,1207.77 1695,1209.4 1695.58,1209.55 1696.17,1211.12 1696.76,1209.84 1697.34,1211.47 1697.93,1213.16 1698.52,1214.56 1699.1,1218.68 1699.69,1217.13 1700.28,1219.35 1700.86,1219.26 1701.45,1218.95 1702.04,1217.02 1702.62,1215.06 1703.21,1213.48 1703.79,1213.41 1704.38,1213.42 1704.97,1211.81 1705.55,1211.89 1706.14,1211.97 1706.73,1212.02 1707.31,1213.19 1707.9,1211.57 1708.49,1210.12 1709.07,1210.32 1709.66,1207.72 1710.24,1206.32 1710.83,1207.82 1711.42,1210.85 1712,1206.61 1712.59,1207.96 1713.18,1206.74 1713.76,1206.83 1714.35,1205.77 1714.94,1206.22 1715.52,1205.26 1716.11,1206.99 1716.7,1205.74 1717.28,1205.96 1717.87,1206.31 1718.45,1206.62 1719.04,1207.09 1719.63,1204.47 1720.21,1204.67 1720.8,1205.16 1721.39,1207.11 1721.97,1208.81 1722.56,1207.78 1723.15,1207.77 1723.73,1210.73 1724.32,1212.32 1724.91,1210.82 1725.49,1213.48 1726.08,1212.03 1726.66,1210.92 1727.25,1211.1 1727.84,1212.28 1728.42,1214.83 1729.01,1215.94 1729.6,1216.86 1730.18,1217.78 1730.77,1218.96 1731.36,1220.11 1731.94,1219.98 1732.53,1223.9 1733.11,1224.51 1733.7,1225.27 1734.29,1224.68 1734.87,1221.47 1735.46,1223.83 1736.05,1219.24 1736.63,1217.5 1737.22,1214.7 1737.81,1213.06 1738.39,1211.77 1738.98,1213.5 1739.57,1212 1740.15,1210.64 1740.74,1209.05 1741.32,1210.31 1741.91,1211.52 1742.5,1208.35 1743.08,1208.47 1743.67,1208.74 1744.26,1207.35 1744.84,1209.25 1745.43,1207.85 1746.02,1206.78 1746.6,1207.34 1747.19,1209.02 1747.78,1209 1748.36,1207.65 1748.95,1210.5 1749.53,1209.29 1750.12,1210.73 1750.71,1212.21 1751.29,1212.33 1751.88,1213.71 1752.47,1213.6 1753.05,1213.3 1753.64,1212.14 1754.23,1210.77 1754.81,1215.04 1755.4,1217.6 1755.99,1217.28 1756.57,1219.43 1757.16,1223.16 1757.74,1223.94 1758.33,1220.3 1758.92,1218.21 1759.5,1220.88 1760.09,1223.06 1760.68,1225.16 1761.26,1222.98 1761.85,1223.45 1762.44,1222.81 1763.02,1219.4 1763.61,1218.89 1764.19,1218.73 1764.78,1216.79 1765.37,1215.17 1765.95,1215 1766.54,1214.98 1767.13,1217.6 1767.71,1218.63 1768.3,1216.88 1768.89,1212.59 1769.47,1211.21 1770.06,1212.49 1770.65,1212.19 1771.23,1209.24 1771.82,1209.39 1772.4,1205.47 1772.99,1206.05 1773.58,1206.49 1774.16,1206.59 1774.75,1206.68 1775.34,1205.32 1775.92,1204.18 1776.51,1203.24 1777.1,1202.04 1777.68,1204.01 1778.27,1202.91 1778.86,1201.97 1779.44,1200.95 1780.03,1201.27 1780.61,1200.68 1781.2,1202.63 1781.79,1201.64 1782.37,1203.79 1782.96,1204.06 1783.55,1201.82 1784.13,1202.73 1784.72,1204.68 1785.31,1203.73 1785.89,1205.56 1786.48,1204.2 1787.06,1204.75 1787.65,1207.78 1788.24,1204.98 1788.82,1208.06 1789.41,1209.72 1790,1207.34 1790.58,1207.53 1791.17,1207.59 1791.76,1206.47 1792.34,1205.24 1792.93,1207.03 1793.52,1208.42 1794.1,1207.04 1794.69,1208.71 1795.27,1207.4 1795.86,1207.8 1796.45,1211.02 1797.03,1212.37 1797.62,1210.86 1798.21,1210.9 1798.79,1212.19 1799.38,1213.29 1799.97,1211.67 1800.55,1210.35 1801.14,1210.37 1801.73,1210.47 1802.31,1209.48 1802.9,1208.21 1803.48,1212.67 1804.07,1214.11 1804.66,1218.18 1805.24,1218.11 1805.83,1220.62 1806.42,1220.38 1807,1221.1 1807.59,1221.97 1808.18,1221.51 1808.76,1222.56 1809.35,1223.24 1809.94,1223.68 1810.52,1220.23 1811.11,1217.37 1811.69,1217.15 1812.28,1218.09 1812.87,1214.86 1813.45,1214.61 1814.04,1215.65 1814.63,1215.44 1815.21,1212.59 1815.8,1213.7 1816.39,1213.84 1816.97,1214.95 1817.56,1216.09 1818.14,1217.29 1818.73,1218.93 1819.32,1218.61 1819.9,1218.12 1820.49,1220.9 1821.08,1220.39 1821.66,1219.84 1822.25,1222.19 1822.84,1221.47 1823.42,1222.35 1824.01,1220.74 1824.6,1220.07 1825.18,1218.15 1825.77,1218.09 1826.35,1214.61 1826.94,1211.58 1827.53,1214.17 1828.11,1212.55 1828.7,1213.6 1829.29,1216.34 1829.87,1215.9 1830.46,1216.76 1831.05,1217.7 1831.63,1215.99 1832.22,1211.97 1832.81,1214.71 1833.39,1214.46 1833.98,1213.09 1834.56,1208.71 1835.15,1207.79 1835.74,1205.39 1836.32,1206.9 1836.91,1209.77 1837.5,1208.29 1838.08,1208.58 1838.67,1208.92 1839.26,1208.75 1839.84,1208.7 1840.43,1210.02 1841.01,1209.95 1841.6,1211.43 1842.19,1211.7 1842.77,1211.63 1843.36,1211.74 1843.95,1211.74 1844.53,1213.17 1845.12,1213.24 1845.71,1208.72 1846.29,1206.32 1846.88,1206.67 1847.47,1204.25 1848.05,1203.21 1848.64,1201.24 1849.22,1201.98 1849.81,1203.68 1850.4,1203.92 1850.98,1202.82 1851.57,1204.52 1852.16,1204.96 1852.74,1203.88 1853.33,1202.9 1853.92,1204.8 1854.5,1206.1 1855.09,1205.17 1855.68,1204.15 1856.26,1206.1 1856.85,1204.72 1857.43,1204.95 1858.02,1206.49 1858.61,1210.93 1859.19,1209.72 1859.78,1210.91 1860.37,1213.41 1860.95,1211.86 1861.54,1212.93 1862.13,1213.02 1862.71,1215.48 1863.3,1211.05 1863.88,1212.51 1864.47,1212.53 1865.06,1213.85 1865.64,1213.66 1866.23,1210.77 1866.82,1210.48 1867.4,1210.48 1867.99,1212.1 1868.58,1209.17 1869.16,1210.63 1869.75,1210.59 1870.34,1207.94 1870.92,1207.63 1871.51,1209.11 1872.09,1209.07 1872.68,1207.94 1873.27,1208 1873.85,1208.5 1874.44,1208.35 1875.03,1205.26 1875.61,1208.28 1876.2,1209.75 1876.79,1213.83 1877.37,1213.34 1877.96,1214.48 1878.55,1214.64 1879.13,1214.77 1879.72,1215.97 1880.3,1215.95 1880.89,1214.46 1881.48,1215.72 1882.06,1218.34 1882.65,1217.93 1883.24,1212.11 1883.82,1212.16 1884.41,1209.49 1885,1207.12 1885.58,1204.65 1886.17,1203.76 1886.76,1204.46 1887.34,1206.12 1887.93,1206.26 1888.51,1208.06 1889.1,1208.36 1889.69,1207.34 1890.27,1207.79 1890.86,1209.6 1891.45,1211.02 1892.03,1209.57 1892.62,1208.39 1893.21,1209.8 1893.79,1210.1 1894.38,1210.28 1894.96,1210.36 1895.55,1212.91 1896.14,1214.13 1896.72,1215.39 1897.31,1215.36 1897.9,1216.58 1898.48,1217.34 1899.07,1216.86 1899.66,1217.99 1900.24,1216 1900.83,1215.68 1901.42,1215.75 1902,1216.82 1902.59,1215.28 1903.17,1215.34 1903.76,1215.18 1904.35,1216.38 1904.93,1216.35 1905.52,1215.04 1906.11,1216.54 1906.69,1216.23 1907.28,1214.74 1907.87,1218.87 1908.45,1215.66 1909.04,1215.21 1909.63,1215.18 1910.21,1214.86 1910.8,1211.94 1911.38,1210.51 1911.97,1209.44 1912.56,1209.54 1913.14,1210.94 1913.73,1209.84 1914.32,1208.71 1914.9,1207.26 1915.49,1207.67 1916.08,1207.62 1916.66,1210.54 1917.25,1211.69 1917.83,1212.96 1918.42,1211.31 1919.01,1210.14 1919.59,1210.62 1920.18,1209.37 1920.77,1208.24 1921.35,1207.23 1921.94,1206.21 1922.53,1206.43 1923.11,1205.08 1923.7,1205.44 1924.29,1202.85 1924.87,1203.21 1925.46,1204.87 1926.04,1205.2 1926.63,1203.92 1927.22,1207.34 1927.8,1208.82 1928.39,1210.41 1928.98,1211.76 1929.56,1211.99 1930.15,1210.72 1930.74,1210.68 1931.32,1210.77 1931.91,1209.48 1932.5,1209.69 1933.08,1209.91 1933.67,1211.3 1934.25,1208.5 1934.84,1211.45 1935.43,1209.94 1936.01,1210.13 1936.6,1208.95 1937.19,1211.89 1937.77,1211.86 1938.36,1207.42 1938.95,1213.05 1939.53,1211.58 1940.12,1211.64 1940.71,1210.31 1941.29,1211.98 1941.88,1210.38 1942.46,1212.07 1943.05,1210.64 1943.64,1211.75 1944.22,1211.79 1944.81,1209.48 1945.4,1211.16 1945.98,1211.42 1946.57,1209.96 1947.16,1211.22 1947.74,1208.33 1948.33,1207.1 1948.91,1210.21 1949.5,1211.87 1950.09,1210.47 1950.67,1211.73 1951.26,1211.98 1951.85,1211.98 1952.43,1210.38 1953.02,1209.2 1953.61,1209.19 1954.19,1211.84 1954.78,1213.03 1955.37,1214.35 1955.95,1216.67 1956.54,1215.05 1957.12,1212.22 1957.71,1211.96 1958.3,1213.17 1958.88,1210.31 1959.47,1211.7 1960.06,1215.67 1960.64,1215.33 1961.23,1215.11 1961.82,1214.73 1962.4,1214.17 1962.99,1214.08 1963.58,1211.11 1964.16,1211.45 1964.75,1212.68 1965.33,1215.54 1965.92,1218.25 1966.51,1217.96 1967.09,1214.98 1967.68,1218.88 1968.27,1221.21 1968.85,1220.9 1969.44,1218.86 1970.03,1218.45 1970.61,1218.2 1971.2,1219.43 1971.78,1219.49 1972.37,1220.05 1972.96,1219.81 1973.54,1218.13 1974.13,1217.8 1974.72,1214.72 1975.3,1211.64 1975.89,1211.9 1976.48,1213.32 1977.06,1213.44 1977.65,1210.79 1978.24,1209.4 1978.82,1210.71 1979.41,1213.37 1979.99,1214.54 1980.58,1212.75 1981.17,1213.87 1981.75,1212.48 1982.34,1213.91 1982.93,1213.63 1983.51,1212.26 1984.1,1211.83 1984.69,1212.83 1985.27,1212.72 1985.86,1213.92 1986.45,1212.64 1987.03,1212.74 1987.62,1212.28 1988.2,1212.15 1988.79,1212.55 1989.38,1210.92 1989.96,1211.01 1990.55,1209.67 1991.14,1209.92 1991.72,1209.76 1992.31,1210 1992.9,1208.78 1993.48,1204.71 1994.07,1206.45 1994.65,1203.86 1995.24,1204.18 1995.83,1204.56 1996.41,1201.85 1997,1201.16 1997.59,1205.68 1998.17,1207.48 1998.76,1207.43 1999.35,1207.74 1999.93,1210.56 2000.52,1210.67 2001.11,1209.22 2001.69,1210.54 2002.28,1212.28 2002.86,1212.26 2003.45,1212.17 2004.04,1212.3 2004.62,1213.53 2005.21,1210.81 2005.8,1210.96 2006.38,1211.11 2006.97,1211.16 2007.56,1209.97 2008.14,1211.17 2008.73,1209.91 2009.32,1210.98 2009.9,1211.32 2010.49,1209.77 2011.07,1211.41 2011.66,1209.97 2012.25,1210.12 2012.83,1212.79 2013.42,1212.63 2014.01,1209.91 2014.59,1209.96 2015.18,1209.87 2015.77,1211.24 2016.35,1211.31 2016.94,1210.21 2017.53,1212.87 2018.11,1213.11 2018.7,1212.83 2019.28,1211.27 2019.87,1212.47 2020.46,1212.43 2021.04,1213.8 2021.63,1213.86 2022.22,1213.63 2022.8,1213.65 2023.39,1216.22 2023.98,1213.24 2024.56,1213.09 2025.15,1213.07 2025.73,1214.41 2026.32,1214.18 2026.91,1211.63 2027.49,1213.02 2028.08,1212.84 2028.67,1214.11 2029.25,1208.46 2029.84,1208.79 2030.43,1206.16 2031.01,1207.87 2031.6,1205.41 2032.19,1206.97 2032.77,1205.89 2033.36,1204.57 2033.94,1204.03 2034.53,1204.71 2035.12,1201.42 2035.7,1202.16 2036.29,1199.95 2036.88,1200.37 2037.46,1199.39 2038.05,1198.45 2038.64,1200.16 2039.22,1203.6 2039.81,1203.79 2040.4,1205.51 2040.98,1204.6 2041.57,1204.99 2042.15,1206.51 2042.74,1208.14 2043.33,1211.45 2043.91,1211.11 2044.5,1211.1 2045.09,1212.58 2045.67,1211.47 2046.26,1208.61 2046.85,1211.51 2047.43,1212.89 2048.02,1214.11 2048.6,1215.45 2049.19,1214.95 2049.78,1214.51 2050.36,1214.36 2050.95,1216.82 2051.54,1216.46 2052.12,1215.95 2052.71,1216.93 2053.3,1217.9 2053.88,1216.13 2054.47,1219.9 2055.06,1222.19 2055.64,1221.53 2056.23,1219.8 2056.81,1219.57 2057.4,1219.43 2057.99,1220.38 2058.57,1218.47 2059.16,1219.36 2059.75,1218.95 2060.33,1217.3 2060.92,1214 2061.51,1215.22 2062.09,1213.38 2062.68,1214.68 2063.27,1214.4 2063.85,1213.13 2064.44,1215.84 2065.02,1218.33 2065.61,1217.9 2066.2,1218.93 2066.78,1215.99 2067.37,1214.57 2067.96,1213.24 2068.54,1213.21 2069.13,1213.06 2069.72,1211.33 2070.3,1208.62 2070.89,1210.24 2071.48,1210.04 2072.06,1208.48 2072.65,1203.06 2073.23,1203.57 2073.82,1203.99 2074.41,1202.16 2074.99,1202.77 2075.58,1204.62 2076.17,1207.91 2076.75,1209.12 2077.34,1207.79 2077.93,1208.11 2078.51,1208.33 2079.1,1208.68 2079.68,1208.81 2080.27,1209.02 2080.86,1206.42 2081.44,1200.98 2082.03,1201.41 2082.62,1201.04 2083.2,1201.57 2083.79,1203.59 2084.38,1204.09 2084.96,1205.89 2085.55,1207.66 2086.14,1208.07 2086.72,1208.14 2087.31,1209.77 2087.89,1207.3 2088.48,1209.05 2089.07,1213.15 2089.65,1215.81 2090.24,1214.46 2090.83,1211.88 2091.41,1213.23 2092,1211.62 2092.59,1211.81 2093.17,1213.33 2093.76,1210.46 2094.35,1209.3 2094.93,1212.19 2095.52,1210.81 2096.1,1212.3 2096.69,1212.13 2097.28,1211.05 2097.86,1211.17 2098.45,1209.83 2099.04,1212.55 2099.62,1215.21 2100.21,1214.97 2100.8,1214.76 2101.38,1213.16 2101.97,1212.83 2102.55,1212.79 2103.14,1211.52 2103.73,1212.93 2104.31,1210.36 2104.9,1207.94 2105.49,1208.03 2106.07,1206.5 2106.66,1206.89 2107.25,1210.04 2107.83,1211.77 2108.42,1213.08 2109.01,1215.79 2109.59,1216.01 2110.18,1218.49 2110.76,1218.31 2111.35,1213.96 2111.94,1215.28 2112.52,1213.69 2113.11,1216.37 2113.7,1214.67 2114.28,1217.44 2114.87,1213.08 2115.46,1213.14 2116.04,1211.87 2116.63,1212.12 2117.22,1212.34 2117.8,1212.43 2118.39,1212.41 2118.97,1211.04 2119.56,1211.12 2120.15,1211.51 2120.73,1213.02 2121.32,1212.79 2121.91,1212.83 2122.49,1213.03 2123.08,1213.07 2123.67,1211.63 2124.25,1211.58 2124.84,1212.72 2125.42,1214.26 2126.01,1216.52 2126.6,1214.88 2127.18,1217.33 2127.77,1216.82 2128.36,1219.52 2128.94,1217.9 2129.53,1215.83 2130.12,1218.22 2130.7,1217.92 2131.29,1218.93 2131.88,1218.52 2132.46,1219.62 2133.05,1215.01 2133.63,1213.46 2134.22,1213.4 2134.81,1211.94 2135.39,1213.26 2135.98,1213.17 2136.57,1214.68 2137.15,1214.78 2137.74,1214.53 2138.33,1214.45 2138.91,1214.32 2139.5,1216.81 2140.09,1215.23 2140.67,1214.54 2141.26,1216.83 2141.84,1213.93 2142.43,1213.88 2143.02,1213.65 2143.6,1217.65 2144.19,1218.67 2144.78,1218.07 2145.36,1214.88 2145.95,1217.39 2146.54,1217.13 2147.12,1219.79 2147.71,1219.33 2148.3,1216.1 2148.88,1217.23 2149.47,1215.51 2150.05,1213.94 2150.64,1213.84 2151.23,1213.66 2151.81,1212.22 2152.4,1213.55 2152.99,1213.34 2153.57,1213.17 2154.16,1212.91 2154.75,1211.75 2155.33,1209.1 2155.92,1211.49 2156.5,1213.12 2157.09,1212.96 2157.68,1210.1 2158.26,1210.24 \"/>\n<path clip-path=\"url(#clip162)\" d=\"M986.025 1212.07 L986.612 1212.07 L987.198 1212.07 L987.785 1212.07 L988.371 1212.07 L988.957 1212.07 L989.544 1212.07 L990.13 1212.07 L990.717 1212.07 L991.303 1212.07 L991.889 1212.07 L992.476 1212.07 L993.062 1212.07 L993.649 1212.07 L994.235 1212.07 L994.822 1212.07 L995.408 1212.07 L995.994 1212.07 L996.581 1212.07 L997.167 1212.07 L997.754 1212.07 L998.34 1212.07 L998.926 1212.07 L999.513 1212.07 L1000.1 1212.07 L1000.69 1212.07 L1001.27 1212.07 L1001.86 1212.07 L1002.44 1212.07 L1003.03 1212.07 L1003.62 1212.07 L1004.2 1212.07 L1004.79 1212.07 L1005.38 1212.07 L1005.96 1212.07 L1006.55 1212.07 L1007.14 1212.07 L1007.72 1212.07 L1008.31 1212.07 L1008.9 1212.07 L1009.48 1212.07 L1010.07 1212.07 L1010.65 1212.07 L1011.24 1212.07 L1011.83 1212.07 L1012.41 1212.07 L1013 1212.07 L1013.59 1212.07 L1014.17 1212.07 L1014.76 1212.07 L1015.35 1212.07 L1015.93 1212.07 L1016.52 1212.07 L1017.11 1212.07 L1017.69 1212.07 L1018.28 1212.07 L1018.86 1212.07 L1019.45 1212.07 L1020.04 1212.07 L1020.62 1212.07 L1021.21 1212.07 L1021.8 1212.07 L1022.38 1212.07 L1022.97 1212.07 L1023.56 1212.07 L1024.14 1212.07 L1024.73 1212.07 L1025.32 1212.07 L1025.9 1212.07 L1026.49 1212.07 L1027.07 1212.07 L1027.66 1212.07 L1028.25 1212.07 L1028.83 1212.07 L1029.42 1212.07 L1030.01 1212.07 L1030.59 1212.07 L1031.18 1212.07 L1031.77 1212.07 L1032.35 1212.07 L1032.94 1212.07 L1033.52 1212.07 L1034.11 1212.07 L1034.7 1212.07 L1035.28 1212.07 L1035.87 1212.07 L1036.46 1212.07 L1037.04 1212.07 L1037.63 1212.07 L1038.22 1212.07 L1038.8 1212.07 L1039.39 1212.07 L1039.98 1212.07 L1040.56 1212.07 L1041.15 1212.07 L1041.73 1212.07 L1042.32 1212.07 L1042.91 1212.07 L1043.49 1212.07 L1044.08 1212.07 L1044.67 1212.07 L1045.25 1212.07 L1045.84 1212.07 L1046.43 1212.07 L1047.01 1212.07 L1047.6 1212.07 L1048.19 1212.07 L1048.77 1212.07 L1049.36 1212.07 L1049.94 1212.07 L1050.53 1212.07 L1051.12 1212.07 L1051.7 1212.07 L1052.29 1212.07 L1052.88 1212.07 L1053.46 1212.07 L1054.05 1212.07 L1054.64 1212.07 L1055.22 1212.07 L1055.81 1212.07 L1056.39 1212.07 L1056.98 1212.07 L1057.57 1212.07 L1058.15 1212.07 L1058.74 1212.07 L1059.33 1212.07 L1059.91 1212.07 L1060.5 1212.07 L1061.09 1212.07 L1061.67 1212.07 L1062.26 1212.07 L1062.85 1212.07 L1063.43 1212.07 L1064.02 1212.07 L1064.6 1212.07 L1065.19 1212.07 L1065.78 1212.07 L1066.36 1212.07 L1066.95 1212.07 L1067.54 1212.07 L1068.12 1212.07 L1068.71 1212.07 L1069.3 1212.07 L1069.88 1212.07 L1070.47 1212.07 L1071.06 1212.07 L1071.64 1212.07 L1072.23 1212.07 L1072.81 1212.07 L1073.4 1212.07 L1073.99 1212.07 L1074.57 1212.07 L1075.16 1212.07 L1075.75 1212.07 L1076.33 1212.07 L1076.92 1212.07 L1077.51 1212.07 L1078.09 1212.07 L1078.68 1212.07 L1079.26 1212.07 L1079.85 1212.07 L1080.44 1212.07 L1081.02 1212.07 L1081.61 1212.07 L1082.2 1212.07 L1082.78 1212.07 L1083.37 1212.07 L1083.96 1212.07 L1084.54 1212.07 L1085.13 1212.07 L1085.72 1212.07 L1086.3 1212.07 L1086.89 1212.07 L1087.47 1212.07 L1088.06 1212.07 L1088.65 1212.07 L1089.23 1212.07 L1089.82 1212.07 L1090.41 1212.07 L1090.99 1212.07 L1091.58 1212.07 L1092.17 1212.07 L1092.75 1212.07 L1093.34 1212.07 L1093.93 1212.07 L1094.51 1212.07 L1095.1 1212.07 L1095.68 1212.07 L1096.27 1212.07 L1096.86 1212.07 L1097.44 1212.07 L1098.03 1212.07 L1098.62 1212.07 L1099.2 1212.07 L1099.79 1212.07 L1100.38 1212.07 L1100.96 1212.07 L1101.55 1212.07 L1102.14 1212.07 L1102.72 1212.07 L1103.31 1212.07 L1103.89 1212.07 L1104.48 1212.07 L1105.07 1212.07 L1105.65 1212.07 L1106.24 1212.07 L1106.83 1212.07 L1107.41 1212.07 L1108 1212.07 L1108.59 1212.07 L1109.17 1212.07 L1109.76 1212.07 L1110.34 1212.07 L1110.93 1212.07 L1111.52 1212.07 L1112.1 1212.07 L1112.69 1212.07 L1113.28 1212.07 L1113.86 1212.07 L1114.45 1212.07 L1115.04 1212.07 L1115.62 1212.07 L1116.21 1212.07 L1116.8 1212.07 L1117.38 1212.07 L1117.97 1212.07 L1118.55 1212.07 L1119.14 1212.07 L1119.73 1212.07 L1120.31 1212.07 L1120.9 1212.07 L1121.49 1212.07 L1122.07 1212.07 L1122.66 1212.07 L1123.25 1212.07 L1123.83 1212.07 L1124.42 1212.07 L1125.01 1212.07 L1125.59 1212.07 L1126.18 1212.07 L1126.76 1212.07 L1127.35 1212.07 L1127.94 1212.07 L1128.52 1212.07 L1129.11 1212.07 L1129.7 1212.07 L1130.28 1212.07 L1130.87 1212.07 L1131.46 1212.07 L1132.04 1212.07 L1132.63 1212.07 L1133.21 1212.07 L1133.8 1212.07 L1134.39 1212.07 L1134.97 1212.07 L1135.56 1212.07 L1136.15 1212.07 L1136.73 1212.07 L1137.32 1212.07 L1137.91 1212.07 L1138.49 1212.07 L1139.08 1212.07 L1139.67 1212.07 L1140.25 1212.07 L1140.84 1212.07 L1141.42 1212.07 L1142.01 1212.07 L1142.6 1212.07 L1143.18 1212.07 L1143.77 1212.07 L1144.36 1212.07 L1144.94 1212.07 L1145.53 1212.07 L1146.12 1212.07 L1146.7 1212.07 L1147.29 1212.07 L1147.88 1212.07 L1148.46 1212.07 L1149.05 1212.07 L1149.63 1212.07 L1150.22 1212.07 L1150.81 1212.07 L1151.39 1212.07 L1151.98 1212.07 L1152.57 1212.07 L1153.15 1212.07 L1153.74 1212.07 L1154.33 1212.07 L1154.91 1212.07 L1155.5 1212.07 L1156.09 1212.07 L1156.67 1212.07 L1157.26 1212.07 L1157.84 1212.07 L1158.43 1212.07 L1159.02 1212.07 L1159.6 1212.07 L1160.19 1212.07 L1160.78 1212.07 L1161.36 1212.07 L1161.95 1212.07 L1162.54 1212.07 L1163.12 1212.07 L1163.71 1212.07 L1164.29 1212.07 L1164.88 1212.07 L1165.47 1212.07 L1166.05 1212.07 L1166.64 1212.07 L1167.23 1212.07 L1167.81 1212.07 L1168.4 1212.07 L1168.99 1212.07 L1169.57 1212.07 L1170.16 1212.07 L1170.75 1212.07 L1171.33 1212.07 L1171.92 1212.07 L1172.5 1212.07 L1173.09 1212.07 L1173.68 1212.07 L1174.26 1212.07 L1174.85 1212.07 L1175.44 1212.07 L1176.02 1212.07 L1176.61 1212.07 L1177.2 1212.07 L1177.78 1212.07 L1178.37 1212.07 L1178.96 1212.07 L1179.54 1212.07 L1180.13 1212.07 L1180.71 1212.07 L1181.3 1212.07 L1181.89 1212.07 L1182.47 1212.07 L1183.06 1212.07 L1183.65 1212.07 L1184.23 1212.07 L1184.82 1212.07 L1185.41 1212.07 L1185.99 1212.07 L1186.58 1212.07 L1187.16 1212.07 L1187.75 1212.07 L1188.34 1212.07 L1188.92 1212.07 L1189.51 1212.07 L1190.1 1212.07 L1190.68 1212.07 L1191.27 1212.07 L1191.86 1212.07 L1192.44 1212.07 L1193.03 1212.07 L1193.62 1212.07 L1194.2 1212.07 L1194.79 1212.07 L1195.37 1212.07 L1195.96 1212.07 L1196.55 1212.07 L1197.13 1212.07 L1197.72 1212.07 L1198.31 1212.07 L1198.89 1212.07 L1199.48 1212.07 L1200.07 1212.07 L1200.65 1212.07 L1201.24 1212.07 L1201.83 1212.07 L1202.41 1212.07 L1203 1212.07 L1203.58 1212.07 L1204.17 1212.07 L1204.76 1212.07 L1205.34 1212.07 L1205.93 1212.07 L1206.52 1212.07 L1207.1 1212.07 L1207.69 1212.07 L1208.28 1212.07 L1208.86 1212.07 L1209.45 1212.07 L1210.03 1212.07 L1210.62 1212.07 L1211.21 1212.07 L1211.79 1212.07 L1212.38 1212.07 L1212.97 1212.07 L1213.55 1212.07 L1214.14 1212.07 L1214.73 1212.07 L1215.31 1212.07 L1215.9 1212.07 L1216.49 1212.07 L1217.07 1212.07 L1217.66 1212.07 L1218.24 1212.07 L1218.83 1212.07 L1219.42 1212.07 L1220 1212.07 L1220.59 1212.07 L1221.18 1212.07 L1221.76 1212.07 L1222.35 1212.07 L1222.94 1212.07 L1223.52 1212.07 L1224.11 1212.07 L1224.7 1212.07 L1225.28 1212.07 L1225.87 1212.07 L1226.45 1212.07 L1227.04 1212.07 L1227.63 1212.07 L1228.21 1212.07 L1228.8 1212.07 L1229.39 1212.07 L1229.97 1212.07 L1230.56 1212.07 L1231.15 1212.07 L1231.73 1212.07 L1232.32 1212.07 L1232.91 1212.07 L1233.49 1212.07 L1234.08 1212.07 L1234.66 1212.07 L1235.25 1212.07 L1235.84 1212.07 L1236.42 1212.07 L1237.01 1212.07 L1237.6 1212.07 L1238.18 1212.07 L1238.77 1212.07 L1239.36 1212.07 L1239.94 1212.07 L1240.53 1212.07 L1241.11 1212.07 L1241.7 1212.07 L1242.29 1212.07 L1242.87 1212.07 L1243.46 1212.07 L1244.05 1212.07 L1244.63 1212.07 L1245.22 1212.07 L1245.81 1212.07 L1246.39 1212.07 L1246.98 1212.07 L1247.57 1212.07 L1248.15 1212.07 L1248.74 1212.07 L1249.32 1212.07 L1249.91 1212.07 L1250.5 1212.07 L1251.08 1212.07 L1251.67 1212.07 L1252.26 1212.07 L1252.84 1212.07 L1253.43 1212.07 L1254.02 1212.07 L1254.6 1212.07 L1255.19 1212.07 L1255.78 1212.07 L1256.36 1212.07 L1256.95 1212.07 L1257.53 1212.07 L1258.12 1212.07 L1258.71 1212.07 L1259.29 1212.07 L1259.88 1212.07 L1260.47 1212.07 L1261.05 1212.07 L1261.64 1212.07 L1262.23 1212.07 L1262.81 1212.07 L1263.4 1212.07 L1263.98 1212.07 L1264.57 1212.07 L1265.16 1212.07 L1265.74 1212.07 L1266.33 1212.07 L1266.92 1212.07 L1267.5 1212.07 L1268.09 1212.07 L1268.68 1212.07 L1269.26 1212.07 L1269.85 1212.07 L1270.44 1212.07 L1271.02 1212.07 L1271.61 1212.07 L1272.19 1212.07 L1272.78 1212.07 L1273.37 1212.07 L1273.95 1212.07 L1274.54 1212.07 L1275.13 1212.07 L1275.71 1212.07 L1276.3 1212.07 L1276.89 1212.07 L1277.47 1212.07 L1278.06 1212.07 L1278.65 1212.07 L1279.23 1212.07 L1279.82 1212.07 L1280.4 1212.07 L1280.99 1212.07 L1281.58 1212.07 L1282.16 1212.07 L1282.75 1212.07 L1283.34 1212.07 L1283.92 1212.07 L1284.51 1212.07 L1285.1 1212.07 L1285.68 1212.07 L1286.27 1212.07 L1286.86 1212.07 L1287.44 1212.07 L1288.03 1212.07 L1288.61 1212.07 L1289.2 1212.07 L1289.79 1212.07 L1290.37 1212.07 L1290.96 1212.07 L1291.55 1212.07 L1292.13 1212.07 L1292.72 1212.07 L1293.31 1212.07 L1293.89 1212.07 L1294.48 1212.07 L1295.06 1212.07 L1295.65 1212.07 L1296.24 1212.07 L1296.82 1212.07 L1297.41 1212.07 L1298 1212.07 L1298.58 1212.07 L1299.17 1212.07 L1299.76 1212.07 L1300.34 1212.07 L1300.93 1212.07 L1301.52 1212.07 L1302.1 1212.07 L1302.69 1212.07 L1303.27 1212.07 L1303.86 1212.07 L1304.45 1212.07 L1305.03 1212.07 L1305.62 1212.07 L1306.21 1212.07 L1306.79 1212.07 L1307.38 1212.07 L1307.97 1212.07 L1308.55 1212.07 L1309.14 1212.07 L1309.73 1212.07 L1310.31 1212.07 L1310.9 1212.07 L1311.48 1212.07 L1312.07 1212.07 L1312.66 1212.07 L1313.24 1212.07 L1313.83 1212.07 L1314.42 1212.07 L1315 1212.07 L1315.59 1212.07 L1316.18 1212.07 L1316.76 1212.07 L1317.35 1212.07 L1317.93 1212.07 L1318.52 1212.07 L1319.11 1212.07 L1319.69 1212.07 L1320.28 1212.07 L1320.87 1212.07 L1321.45 1212.07 L1322.04 1212.07 L1322.63 1212.07 L1323.21 1212.07 L1323.8 1212.07 L1324.39 1212.07 L1324.97 1212.07 L1325.56 1212.07 L1326.14 1212.07 L1326.73 1212.07 L1327.32 1212.07 L1327.9 1212.07 L1328.49 1212.07 L1329.08 1212.07 L1329.66 1212.07 L1330.25 1212.07 L1330.84 1212.07 L1331.42 1212.07 L1332.01 1212.07 L1332.6 1212.07 L1333.18 1212.07 L1333.77 1212.07 L1334.35 1212.07 L1334.94 1212.07 L1335.53 1212.07 L1336.11 1212.07 L1336.7 1212.07 L1337.29 1212.07 L1337.87 1212.07 L1338.46 1212.07 L1339.05 1212.07 L1339.63 1212.07 L1340.22 1212.07 L1340.8 1212.07 L1341.39 1212.07 L1341.98 1212.07 L1342.56 1212.07 L1343.15 1212.07 L1343.74 1212.07 L1344.32 1212.07 L1344.91 1212.07 L1345.5 1212.07 L1346.08 1212.07 L1346.67 1212.07 L1347.26 1212.07 L1347.84 1212.07 L1348.43 1212.07 L1349.01 1212.07 L1349.6 1212.07 L1350.19 1212.07 L1350.77 1212.07 L1351.36 1212.07 L1351.95 1212.07 L1352.53 1212.07 L1353.12 1212.07 L1353.71 1212.07 L1354.29 1212.07 L1354.88 1212.07 L1355.47 1212.07 L1356.05 1212.07 L1356.64 1212.07 L1357.22 1212.07 L1357.81 1212.07 L1358.4 1212.07 L1358.98 1212.07 L1359.57 1212.07 L1360.16 1212.07 L1360.74 1212.07 L1361.33 1212.07 L1361.92 1212.07 L1362.5 1212.07 L1363.09 1212.07 L1363.68 1212.07 L1364.26 1212.07 L1364.85 1212.07 L1365.43 1212.07 L1366.02 1212.07 L1366.61 1212.07 L1367.19 1212.07 L1367.78 1212.07 L1368.37 1212.07 L1368.95 1212.07 L1369.54 1212.07 L1370.13 1212.07 L1370.71 1212.07 L1371.3 1212.07 L1371.88 1212.07 L1372.47 1212.07 L1373.06 1212.07 L1373.64 1212.07 L1374.23 1212.07 L1374.82 1212.07 L1375.4 1212.07 L1375.99 1212.07 L1376.58 1212.07 L1377.16 1212.07 L1377.75 1212.07 L1378.34 1212.07 L1378.92 1212.07 L1379.51 1212.07 L1380.09 1212.07 L1380.68 1212.07 L1381.27 1212.07 L1381.85 1212.07 L1382.44 1212.07 L1383.03 1212.07 L1383.61 1212.07 L1384.2 1212.07 L1384.79 1212.07 L1385.37 1212.07 L1385.96 1212.07 L1386.55 1212.07 L1387.13 1212.07 L1387.72 1212.07 L1388.3 1212.07 L1388.89 1212.07 L1389.48 1212.07 L1390.06 1212.07 L1390.65 1212.07 L1391.24 1212.07 L1391.82 1212.07 L1392.41 1212.07 L1393 1212.07 L1393.58 1212.07 L1394.17 1212.07 L1394.75 1212.07 L1395.34 1212.07 L1395.93 1212.07 L1396.51 1212.07 L1397.1 1212.07 L1397.69 1212.07 L1398.27 1212.07 L1398.86 1212.07 L1399.45 1212.07 L1400.03 1212.07 L1400.62 1212.07 L1401.21 1212.07 L1401.79 1212.07 L1402.38 1212.07 L1402.96 1212.07 L1403.55 1212.07 L1404.14 1212.07 L1404.72 1212.07 L1405.31 1212.07 L1405.9 1212.07 L1406.48 1212.07 L1407.07 1212.07 L1407.66 1212.07 L1408.24 1212.07 L1408.83 1212.07 L1409.42 1212.07 L1410 1212.07 L1410.59 1212.07 L1411.17 1212.07 L1411.76 1212.07 L1412.35 1212.07 L1412.93 1212.07 L1413.52 1212.07 L1414.11 1212.07 L1414.69 1212.07 L1415.28 1212.07 L1415.87 1212.07 L1416.45 1212.07 L1417.04 1212.07 L1417.63 1212.07 L1418.21 1212.07 L1418.8 1212.07 L1419.38 1212.07 L1419.97 1212.07 L1420.56 1212.07 L1421.14 1212.07 L1421.73 1212.07 L1422.32 1212.07 L1422.9 1212.07 L1423.49 1212.07 L1424.08 1212.07 L1424.66 1212.07 L1425.25 1212.07 L1425.83 1212.07 L1426.42 1212.07 L1427.01 1212.07 L1427.59 1212.07 L1428.18 1212.07 L1428.77 1212.07 L1429.35 1212.07 L1429.94 1212.07 L1430.53 1212.07 L1431.11 1212.07 L1431.7 1212.07 L1432.29 1212.07 L1432.87 1212.07 L1433.46 1212.07 L1434.04 1212.07 L1434.63 1212.07 L1435.22 1212.07 L1435.8 1212.07 L1436.39 1212.07 L1436.98 1212.07 L1437.56 1212.07 L1438.15 1212.07 L1438.74 1212.07 L1439.32 1212.07 L1439.91 1212.07 L1440.5 1212.07 L1441.08 1212.07 L1441.67 1212.07 L1442.25 1212.07 L1442.84 1212.07 L1443.43 1212.07 L1444.01 1212.07 L1444.6 1212.07 L1445.19 1212.07 L1445.77 1212.07 L1446.36 1212.07 L1446.95 1212.07 L1447.53 1212.07 L1448.12 1212.07 L1448.7 1212.07 L1449.29 1212.07 L1449.88 1212.07 L1450.46 1212.07 L1451.05 1212.07 L1451.64 1212.07 L1452.22 1212.07 L1452.81 1212.07 L1453.4 1212.07 L1453.98 1212.07 L1454.57 1212.07 L1455.16 1212.07 L1455.74 1212.07 L1456.33 1212.07 L1456.91 1212.07 L1457.5 1212.07 L1458.09 1212.07 L1458.67 1212.07 L1459.26 1212.07 L1459.85 1212.07 L1460.43 1212.07 L1461.02 1212.07 L1461.61 1212.07 L1462.19 1212.07 L1462.78 1212.07 L1463.37 1212.07 L1463.95 1212.07 L1464.54 1212.07 L1465.12 1212.07 L1465.71 1212.07 L1466.3 1212.07 L1466.88 1212.07 L1467.47 1212.07 L1468.06 1212.07 L1468.64 1212.07 L1469.23 1212.07 L1469.82 1212.07 L1470.4 1212.07 L1470.99 1212.07 L1471.57 1212.07 L1472.16 1212.07 L1472.75 1212.07 L1473.33 1212.07 L1473.92 1212.07 L1474.51 1212.07 L1475.09 1212.07 L1475.68 1212.07 L1476.27 1212.07 L1476.85 1212.07 L1477.44 1212.07 L1478.03 1212.07 L1478.61 1212.07 L1479.2 1212.07 L1479.78 1212.07 L1480.37 1212.07 L1480.96 1212.07 L1481.54 1212.07 L1482.13 1212.07 L1482.72 1212.07 L1483.3 1212.07 L1483.89 1212.07 L1484.48 1212.07 L1485.06 1212.07 L1485.65 1212.07 L1486.24 1212.07 L1486.82 1212.07 L1487.41 1212.07 L1487.99 1212.07 L1488.58 1212.07 L1489.17 1212.07 L1489.75 1212.07 L1490.34 1212.07 L1490.93 1212.07 L1491.51 1212.07 L1492.1 1212.07 L1492.69 1212.07 L1493.27 1212.07 L1493.86 1212.07 L1494.45 1212.07 L1495.03 1212.07 L1495.62 1212.07 L1496.2 1212.07 L1496.79 1212.07 L1497.38 1212.07 L1497.96 1212.07 L1498.55 1212.07 L1499.14 1212.07 L1499.72 1212.07 L1500.31 1212.07 L1500.9 1212.07 L1501.48 1212.07 L1502.07 1212.07 L1502.65 1212.07 L1503.24 1212.07 L1503.83 1212.07 L1504.41 1212.07 L1505 1212.07 L1505.59 1212.07 L1506.17 1212.07 L1506.76 1212.07 L1507.35 1212.07 L1507.93 1212.07 L1508.52 1212.07 L1509.11 1212.07 L1509.69 1212.07 L1510.28 1212.07 L1510.86 1212.07 L1511.45 1212.07 L1512.04 1212.07 L1512.62 1212.07 L1513.21 1212.07 L1513.8 1212.07 L1514.38 1212.07 L1514.97 1212.07 L1515.56 1212.07 L1516.14 1212.07 L1516.73 1212.07 L1517.32 1212.07 L1517.9 1212.07 L1518.49 1212.07 L1519.07 1212.07 L1519.66 1212.07 L1520.25 1212.07 L1520.83 1212.07 L1521.42 1212.07 L1522.01 1212.07 L1522.59 1212.07 L1523.18 1212.07 L1523.77 1212.07 L1524.35 1212.07 L1524.94 1212.07 L1525.52 1212.07 L1526.11 1212.07 L1526.7 1212.07 L1527.28 1212.07 L1527.87 1212.07 L1528.46 1212.07 L1529.04 1212.07 L1529.63 1212.07 L1530.22 1212.07 L1530.8 1212.07 L1531.39 1212.07 L1531.98 1212.07 L1532.56 1212.07 L1533.15 1212.07 L1533.73 1212.07 L1534.32 1212.07 L1534.91 1212.07 L1535.49 1212.07 L1536.08 1212.07 L1536.67 1212.07 L1537.25 1212.07 L1537.84 1212.07 L1538.43 1212.07 L1539.01 1212.07 L1539.6 1212.07 L1540.19 1212.07 L1540.77 1212.07 L1541.36 1212.07 L1541.94 1212.07 L1542.53 1212.07 L1543.12 1212.07 L1543.7 1212.07 L1544.29 1212.07 L1544.88 1212.07 L1545.46 1212.07 L1546.05 1212.07 L1546.64 1212.07 L1547.22 1212.07 L1547.81 1212.07 L1548.4 1212.07 L1548.98 1212.07 L1549.57 1212.07 L1550.15 1212.07 L1550.74 1212.07 L1551.33 1212.07 L1551.91 1212.07 L1552.5 1212.07 L1553.09 1212.07 L1553.67 1212.07 L1554.26 1212.07 L1554.85 1212.07 L1555.43 1212.07 L1556.02 1212.07 L1556.6 1212.07 L1557.19 1212.07 L1557.78 1212.07 L1558.36 1212.07 L1558.95 1212.07 L1559.54 1212.07 L1560.12 1212.07 L1560.71 1212.07 L1561.3 1212.07 L1561.88 1212.07 L1562.47 1212.07 L1563.06 1212.07 L1563.64 1212.07 L1564.23 1212.07 L1564.81 1212.07 L1565.4 1212.07 L1565.99 1212.07 L1566.57 1212.07 L1567.16 1212.07 L1567.75 1212.07 L1568.33 1212.07 L1568.92 1212.07 L1569.51 1212.07 L1570.09 1212.07 L1570.68 1212.07 L1571.27 1212.07 L1571.85 1212.07 L1572.44 1212.07 L1573.02 1212.07 L1573.61 1212.07 L1574.2 1212.07 L1574.78 1212.07 L1575.37 1212.07 L1575.96 1212.07 L1576.54 1212.07 L1577.13 1212.07 L1577.72 1212.07 L1578.3 1212.07 L1578.89 1212.07 L1579.47 1212.07 L1580.06 1212.07 L1580.65 1212.07 L1581.23 1212.07 L1581.82 1212.07 L1582.41 1212.07 L1582.99 1212.07 L1583.58 1212.07 L1584.17 1212.07 L1584.75 1212.07 L1585.34 1212.07 L1585.93 1212.07 L1586.51 1212.07 L1587.1 1212.07 L1587.68 1212.07 L1588.27 1212.07 L1588.86 1212.07 L1589.44 1212.07 L1590.03 1212.07 L1590.62 1212.07 L1591.2 1212.07 L1591.79 1212.07 L1592.38 1212.07 L1592.96 1212.07 L1593.55 1212.07 L1594.14 1212.07 L1594.72 1212.07 L1595.31 1212.07 L1595.89 1212.07 L1596.48 1212.07 L1597.07 1212.07 L1597.65 1212.07 L1598.24 1212.07 L1598.83 1212.07 L1599.41 1212.07 L1600 1212.07 L1600.59 1212.07 L1601.17 1212.07 L1601.76 1212.07 L1602.34 1212.07 L1602.93 1212.07 L1603.52 1212.07 L1604.1 1212.07 L1604.69 1212.07 L1605.28 1212.07 L1605.86 1212.07 L1606.45 1212.07 L1607.04 1212.07 L1607.62 1212.07 L1608.21 1212.07 L1608.8 1212.07 L1609.38 1212.07 L1609.97 1212.07 L1610.55 1212.07 L1611.14 1212.07 L1611.73 1212.07 L1612.31 1212.07 L1612.9 1212.07 L1613.49 1212.07 L1614.07 1212.07 L1614.66 1212.07 L1615.25 1212.07 L1615.83 1212.07 L1616.42 1212.07 L1617.01 1212.07 L1617.59 1212.07 L1618.18 1212.07 L1618.76 1212.07 L1619.35 1212.07 L1619.94 1212.07 L1620.52 1212.07 L1621.11 1212.07 L1621.7 1212.07 L1622.28 1212.07 L1622.87 1212.07 L1623.46 1212.07 L1624.04 1212.07 L1624.63 1212.07 L1625.22 1212.07 L1625.8 1212.07 L1626.39 1212.07 L1626.97 1212.07 L1627.56 1212.07 L1628.15 1212.07 L1628.73 1212.07 L1629.32 1212.07 L1629.91 1212.07 L1630.49 1212.07 L1631.08 1212.07 L1631.67 1212.07 L1632.25 1212.07 L1632.84 1212.07 L1633.42 1212.07 L1634.01 1212.07 L1634.6 1212.07 L1635.18 1212.07 L1635.77 1212.07 L1636.36 1212.07 L1636.94 1212.07 L1637.53 1212.07 L1638.12 1212.07 L1638.7 1212.07 L1639.29 1212.07 L1639.88 1212.07 L1640.46 1212.07 L1641.05 1212.07 L1641.63 1212.07 L1642.22 1212.07 L1642.81 1212.07 L1643.39 1212.07 L1643.98 1212.07 L1644.57 1212.07 L1645.15 1212.07 L1645.74 1212.07 L1646.33 1212.07 L1646.91 1212.07 L1647.5 1212.07 L1648.09 1212.07 L1648.67 1212.07 L1649.26 1212.07 L1649.84 1212.07 L1650.43 1212.07 L1651.02 1212.07 L1651.6 1212.07 L1652.19 1212.07 L1652.78 1212.07 L1653.36 1212.07 L1653.95 1212.07 L1654.54 1212.07 L1655.12 1212.07 L1655.71 1212.07 L1656.29 1212.07 L1656.88 1212.07 L1657.47 1212.07 L1658.05 1212.07 L1658.64 1212.07 L1659.23 1212.07 L1659.81 1212.07 L1660.4 1212.07 L1660.99 1212.07 L1661.57 1212.07 L1662.16 1212.07 L1662.75 1212.07 L1663.33 1212.07 L1663.92 1212.07 L1664.5 1212.07 L1665.09 1212.07 L1665.68 1212.07 L1666.26 1212.07 L1666.85 1212.07 L1667.44 1212.07 L1668.02 1212.07 L1668.61 1212.07 L1669.2 1212.07 L1669.78 1212.07 L1670.37 1212.07 L1670.96 1212.07 L1671.54 1212.07 L1672.13 1212.07 L1672.71 1212.07 L1673.3 1212.07 L1673.89 1212.07 L1674.47 1212.07 L1675.06 1212.07 L1675.65 1212.07 L1676.23 1212.07 L1676.82 1212.07 L1677.41 1212.07 L1677.99 1212.07 L1678.58 1212.07 L1679.17 1212.07 L1679.75 1212.07 L1680.34 1212.07 L1680.92 1212.07 L1681.51 1212.07 L1682.1 1212.07 L1682.68 1212.07 L1683.27 1212.07 L1683.86 1212.07 L1684.44 1212.07 L1685.03 1212.07 L1685.62 1212.07 L1686.2 1212.07 L1686.79 1212.07 L1687.37 1212.07 L1687.96 1212.07 L1688.55 1212.07 L1689.13 1212.07 L1689.72 1212.07 L1690.31 1212.07 L1690.89 1212.07 L1691.48 1212.07 L1692.07 1212.07 L1692.65 1212.07 L1693.24 1212.07 L1693.83 1212.07 L1694.41 1212.07 L1695 1212.07 L1695.58 1212.07 L1696.17 1212.07 L1696.76 1212.07 L1697.34 1212.07 L1697.93 1212.07 L1698.52 1212.07 L1699.1 1212.07 L1699.69 1212.07 L1700.28 1212.07 L1700.86 1212.07 L1701.45 1212.07 L1702.04 1212.07 L1702.62 1212.07 L1703.21 1212.07 L1703.79 1212.07 L1704.38 1212.07 L1704.97 1212.07 L1705.55 1212.07 L1706.14 1212.07 L1706.73 1212.07 L1707.31 1212.07 L1707.9 1212.07 L1708.49 1212.07 L1709.07 1212.07 L1709.66 1212.07 L1710.24 1212.07 L1710.83 1212.07 L1711.42 1212.07 L1712 1212.07 L1712.59 1212.07 L1713.18 1212.07 L1713.76 1212.07 L1714.35 1212.07 L1714.94 1212.07 L1715.52 1212.07 L1716.11 1212.07 L1716.7 1212.07 L1717.28 1212.07 L1717.87 1212.07 L1718.45 1212.07 L1719.04 1212.07 L1719.63 1212.07 L1720.21 1212.07 L1720.8 1212.07 L1721.39 1212.07 L1721.97 1212.07 L1722.56 1212.07 L1723.15 1212.07 L1723.73 1212.07 L1724.32 1212.07 L1724.91 1212.07 L1725.49 1212.07 L1726.08 1212.07 L1726.66 1212.07 L1727.25 1212.07 L1727.84 1212.07 L1728.42 1212.07 L1729.01 1212.07 L1729.6 1212.07 L1730.18 1212.07 L1730.77 1212.07 L1731.36 1212.07 L1731.94 1212.07 L1732.53 1212.07 L1733.11 1212.07 L1733.7 1212.07 L1734.29 1212.07 L1734.87 1212.07 L1735.46 1212.07 L1736.05 1212.07 L1736.63 1212.07 L1737.22 1212.07 L1737.81 1212.07 L1738.39 1212.07 L1738.98 1212.07 L1739.57 1212.07 L1740.15 1212.07 L1740.74 1212.07 L1741.32 1212.07 L1741.91 1212.07 L1742.5 1212.07 L1743.08 1212.07 L1743.67 1212.07 L1744.26 1212.07 L1744.84 1212.07 L1745.43 1212.07 L1746.02 1212.07 L1746.6 1212.07 L1747.19 1212.07 L1747.78 1212.07 L1748.36 1212.07 L1748.95 1212.07 L1749.53 1212.07 L1750.12 1212.07 L1750.71 1212.07 L1751.29 1212.07 L1751.88 1212.07 L1752.47 1212.07 L1753.05 1212.07 L1753.64 1212.07 L1754.23 1212.07 L1754.81 1212.07 L1755.4 1212.07 L1755.99 1212.07 L1756.57 1212.07 L1757.16 1212.07 L1757.74 1212.07 L1758.33 1212.07 L1758.92 1212.07 L1759.5 1212.07 L1760.09 1212.07 L1760.68 1212.07 L1761.26 1212.07 L1761.85 1212.07 L1762.44 1212.07 L1763.02 1212.07 L1763.61 1212.07 L1764.19 1212.07 L1764.78 1212.07 L1765.37 1212.07 L1765.95 1212.07 L1766.54 1212.07 L1767.13 1212.07 L1767.71 1212.07 L1768.3 1212.07 L1768.89 1212.07 L1769.47 1212.07 L1770.06 1212.07 L1770.65 1212.07 L1771.23 1212.07 L1771.82 1212.07 L1772.4 1212.07 L1772.99 1212.07 L1773.58 1212.07 L1774.16 1212.07 L1774.75 1212.07 L1775.34 1212.07 L1775.92 1212.07 L1776.51 1212.07 L1777.1 1212.07 L1777.68 1212.07 L1778.27 1212.07 L1778.86 1212.07 L1779.44 1212.07 L1780.03 1212.07 L1780.61 1212.07 L1781.2 1212.07 L1781.79 1212.07 L1782.37 1212.07 L1782.96 1212.07 L1783.55 1212.07 L1784.13 1212.07 L1784.72 1212.07 L1785.31 1212.07 L1785.89 1212.07 L1786.48 1212.07 L1787.06 1212.07 L1787.65 1212.07 L1788.24 1212.07 L1788.82 1212.07 L1789.41 1212.07 L1790 1212.07 L1790.58 1212.07 L1791.17 1212.07 L1791.76 1212.07 L1792.34 1212.07 L1792.93 1212.07 L1793.52 1212.07 L1794.1 1212.07 L1794.69 1212.07 L1795.27 1212.07 L1795.86 1212.07 L1796.45 1212.07 L1797.03 1212.07 L1797.62 1212.07 L1798.21 1212.07 L1798.79 1212.07 L1799.38 1212.07 L1799.97 1212.07 L1800.55 1212.07 L1801.14 1212.07 L1801.73 1212.07 L1802.31 1212.07 L1802.9 1212.07 L1803.48 1212.07 L1804.07 1212.07 L1804.66 1212.07 L1805.24 1212.07 L1805.83 1212.07 L1806.42 1212.07 L1807 1212.07 L1807.59 1212.07 L1808.18 1212.07 L1808.76 1212.07 L1809.35 1212.07 L1809.94 1212.07 L1810.52 1212.07 L1811.11 1212.07 L1811.69 1212.07 L1812.28 1212.07 L1812.87 1212.07 L1813.45 1212.07 L1814.04 1212.07 L1814.63 1212.07 L1815.21 1212.07 L1815.8 1212.07 L1816.39 1212.07 L1816.97 1212.07 L1817.56 1212.07 L1818.14 1212.07 L1818.73 1212.07 L1819.32 1212.07 L1819.9 1212.07 L1820.49 1212.07 L1821.08 1212.07 L1821.66 1212.07 L1822.25 1212.07 L1822.84 1212.07 L1823.42 1212.07 L1824.01 1212.07 L1824.6 1212.07 L1825.18 1212.07 L1825.77 1212.07 L1826.35 1212.07 L1826.94 1212.07 L1827.53 1212.07 L1828.11 1212.07 L1828.7 1212.07 L1829.29 1212.07 L1829.87 1212.07 L1830.46 1212.07 L1831.05 1212.07 L1831.63 1212.07 L1832.22 1212.07 L1832.81 1212.07 L1833.39 1212.07 L1833.98 1212.07 L1834.56 1212.07 L1835.15 1212.07 L1835.74 1212.07 L1836.32 1212.07 L1836.91 1212.07 L1837.5 1212.07 L1838.08 1212.07 L1838.67 1212.07 L1839.26 1212.07 L1839.84 1212.07 L1840.43 1212.07 L1841.01 1212.07 L1841.6 1212.07 L1842.19 1212.07 L1842.77 1212.07 L1843.36 1212.07 L1843.95 1212.07 L1844.53 1212.07 L1845.12 1212.07 L1845.71 1212.07 L1846.29 1212.07 L1846.88 1212.07 L1847.47 1212.07 L1848.05 1212.07 L1848.64 1212.07 L1849.22 1212.07 L1849.81 1212.07 L1850.4 1212.07 L1850.98 1212.07 L1851.57 1212.07 L1852.16 1212.07 L1852.74 1212.07 L1853.33 1212.07 L1853.92 1212.07 L1854.5 1212.07 L1855.09 1212.07 L1855.68 1212.07 L1856.26 1212.07 L1856.85 1212.07 L1857.43 1212.07 L1858.02 1212.07 L1858.61 1212.07 L1859.19 1212.07 L1859.78 1212.07 L1860.37 1212.07 L1860.95 1212.07 L1861.54 1212.07 L1862.13 1212.07 L1862.71 1212.07 L1863.3 1212.07 L1863.88 1212.07 L1864.47 1212.07 L1865.06 1212.07 L1865.64 1212.07 L1866.23 1212.07 L1866.82 1212.07 L1867.4 1212.07 L1867.99 1212.07 L1868.58 1212.07 L1869.16 1212.07 L1869.75 1212.07 L1870.34 1212.07 L1870.92 1212.07 L1871.51 1212.07 L1872.09 1212.07 L1872.68 1212.07 L1873.27 1212.07 L1873.85 1212.07 L1874.44 1212.07 L1875.03 1212.07 L1875.61 1212.07 L1876.2 1212.07 L1876.79 1212.07 L1877.37 1212.07 L1877.96 1212.07 L1878.55 1212.07 L1879.13 1212.07 L1879.72 1212.07 L1880.3 1212.07 L1880.89 1212.07 L1881.48 1212.07 L1882.06 1212.07 L1882.65 1212.07 L1883.24 1212.07 L1883.82 1212.07 L1884.41 1212.07 L1885 1212.07 L1885.58 1212.07 L1886.17 1212.07 L1886.76 1212.07 L1887.34 1212.07 L1887.93 1212.07 L1888.51 1212.07 L1889.1 1212.07 L1889.69 1212.07 L1890.27 1212.07 L1890.86 1212.07 L1891.45 1212.07 L1892.03 1212.07 L1892.62 1212.07 L1893.21 1212.07 L1893.79 1212.07 L1894.38 1212.07 L1894.96 1212.07 L1895.55 1212.07 L1896.14 1212.07 L1896.72 1212.07 L1897.31 1212.07 L1897.9 1212.07 L1898.48 1212.07 L1899.07 1212.07 L1899.66 1212.07 L1900.24 1212.07 L1900.83 1212.07 L1901.42 1212.07 L1902 1212.07 L1902.59 1212.07 L1903.17 1212.07 L1903.76 1212.07 L1904.35 1212.07 L1904.93 1212.07 L1905.52 1212.07 L1906.11 1212.07 L1906.69 1212.07 L1907.28 1212.07 L1907.87 1212.07 L1908.45 1212.07 L1909.04 1212.07 L1909.63 1212.07 L1910.21 1212.07 L1910.8 1212.07 L1911.38 1212.07 L1911.97 1212.07 L1912.56 1212.07 L1913.14 1212.07 L1913.73 1212.07 L1914.32 1212.07 L1914.9 1212.07 L1915.49 1212.07 L1916.08 1212.07 L1916.66 1212.07 L1917.25 1212.07 L1917.83 1212.07 L1918.42 1212.07 L1919.01 1212.07 L1919.59 1212.07 L1920.18 1212.07 L1920.77 1212.07 L1921.35 1212.07 L1921.94 1212.07 L1922.53 1212.07 L1923.11 1212.07 L1923.7 1212.07 L1924.29 1212.07 L1924.87 1212.07 L1925.46 1212.07 L1926.04 1212.07 L1926.63 1212.07 L1927.22 1212.07 L1927.8 1212.07 L1928.39 1212.07 L1928.98 1212.07 L1929.56 1212.07 L1930.15 1212.07 L1930.74 1212.07 L1931.32 1212.07 L1931.91 1212.07 L1932.5 1212.07 L1933.08 1212.07 L1933.67 1212.07 L1934.25 1212.07 L1934.84 1212.07 L1935.43 1212.07 L1936.01 1212.07 L1936.6 1212.07 L1937.19 1212.07 L1937.77 1212.07 L1938.36 1212.07 L1938.95 1212.07 L1939.53 1212.07 L1940.12 1212.07 L1940.71 1212.07 L1941.29 1212.07 L1941.88 1212.07 L1942.46 1212.07 L1943.05 1212.07 L1943.64 1212.07 L1944.22 1212.07 L1944.81 1212.07 L1945.4 1212.07 L1945.98 1212.07 L1946.57 1212.07 L1947.16 1212.07 L1947.74 1212.07 L1948.33 1212.07 L1948.91 1212.07 L1949.5 1212.07 L1950.09 1212.07 L1950.67 1212.07 L1951.26 1212.07 L1951.85 1212.07 L1952.43 1212.07 L1953.02 1212.07 L1953.61 1212.07 L1954.19 1212.07 L1954.78 1212.07 L1955.37 1212.07 L1955.95 1212.07 L1956.54 1212.07 L1957.12 1212.07 L1957.71 1212.07 L1958.3 1212.07 L1958.88 1212.07 L1959.47 1212.07 L1960.06 1212.07 L1960.64 1212.07 L1961.23 1212.07 L1961.82 1212.07 L1962.4 1212.07 L1962.99 1212.07 L1963.58 1212.07 L1964.16 1212.07 L1964.75 1212.07 L1965.33 1212.07 L1965.92 1212.07 L1966.51 1212.07 L1967.09 1212.07 L1967.68 1212.07 L1968.27 1212.07 L1968.85 1212.07 L1969.44 1212.07 L1970.03 1212.07 L1970.61 1212.07 L1971.2 1212.07 L1971.78 1212.07 L1972.37 1212.07 L1972.96 1212.07 L1973.54 1212.07 L1974.13 1212.07 L1974.72 1212.07 L1975.3 1212.07 L1975.89 1212.07 L1976.48 1212.07 L1977.06 1212.07 L1977.65 1212.07 L1978.24 1212.07 L1978.82 1212.07 L1979.41 1212.07 L1979.99 1212.07 L1980.58 1212.07 L1981.17 1212.07 L1981.75 1212.07 L1982.34 1212.07 L1982.93 1212.07 L1983.51 1212.07 L1984.1 1212.07 L1984.69 1212.07 L1985.27 1212.07 L1985.86 1212.07 L1986.45 1212.07 L1987.03 1212.07 L1987.62 1212.07 L1988.2 1212.07 L1988.79 1212.07 L1989.38 1212.07 L1989.96 1212.07 L1990.55 1212.07 L1991.14 1212.07 L1991.72 1212.07 L1992.31 1212.07 L1992.9 1212.07 L1993.48 1212.07 L1994.07 1212.07 L1994.65 1212.07 L1995.24 1212.07 L1995.83 1212.07 L1996.41 1212.07 L1997 1212.07 L1997.59 1212.07 L1998.17 1212.07 L1998.76 1212.07 L1999.35 1212.07 L1999.93 1212.07 L2000.52 1212.07 L2001.11 1212.07 L2001.69 1212.07 L2002.28 1212.07 L2002.86 1212.07 L2003.45 1212.07 L2004.04 1212.07 L2004.62 1212.07 L2005.21 1212.07 L2005.8 1212.07 L2006.38 1212.07 L2006.97 1212.07 L2007.56 1212.07 L2008.14 1212.07 L2008.73 1212.07 L2009.32 1212.07 L2009.9 1212.07 L2010.49 1212.07 L2011.07 1212.07 L2011.66 1212.07 L2012.25 1212.07 L2012.83 1212.07 L2013.42 1212.07 L2014.01 1212.07 L2014.59 1212.07 L2015.18 1212.07 L2015.77 1212.07 L2016.35 1212.07 L2016.94 1212.07 L2017.53 1212.07 L2018.11 1212.07 L2018.7 1212.07 L2019.28 1212.07 L2019.87 1212.07 L2020.46 1212.07 L2021.04 1212.07 L2021.63 1212.07 L2022.22 1212.07 L2022.8 1212.07 L2023.39 1212.07 L2023.98 1212.07 L2024.56 1212.07 L2025.15 1212.07 L2025.73 1212.07 L2026.32 1212.07 L2026.91 1212.07 L2027.49 1212.07 L2028.08 1212.07 L2028.67 1212.07 L2029.25 1212.07 L2029.84 1212.07 L2030.43 1212.07 L2031.01 1212.07 L2031.6 1212.07 L2032.19 1212.07 L2032.77 1212.07 L2033.36 1212.07 L2033.94 1212.07 L2034.53 1212.07 L2035.12 1212.07 L2035.7 1212.07 L2036.29 1212.07 L2036.88 1212.07 L2037.46 1212.07 L2038.05 1212.07 L2038.64 1212.07 L2039.22 1212.07 L2039.81 1212.07 L2040.4 1212.07 L2040.98 1212.07 L2041.57 1212.07 L2042.15 1212.07 L2042.74 1212.07 L2043.33 1212.07 L2043.91 1212.07 L2044.5 1212.07 L2045.09 1212.07 L2045.67 1212.07 L2046.26 1212.07 L2046.85 1212.07 L2047.43 1212.07 L2048.02 1212.07 L2048.6 1212.07 L2049.19 1212.07 L2049.78 1212.07 L2050.36 1212.07 L2050.95 1212.07 L2051.54 1212.07 L2052.12 1212.07 L2052.71 1212.07 L2053.3 1212.07 L2053.88 1212.07 L2054.47 1212.07 L2055.06 1212.07 L2055.64 1212.07 L2056.23 1212.07 L2056.81 1212.07 L2057.4 1212.07 L2057.99 1212.07 L2058.57 1212.07 L2059.16 1212.07 L2059.75 1212.07 L2060.33 1212.07 L2060.92 1212.07 L2061.51 1212.07 L2062.09 1212.07 L2062.68 1212.07 L2063.27 1212.07 L2063.85 1212.07 L2064.44 1212.07 L2065.02 1212.07 L2065.61 1212.07 L2066.2 1212.07 L2066.78 1212.07 L2067.37 1212.07 L2067.96 1212.07 L2068.54 1212.07 L2069.13 1212.07 L2069.72 1212.07 L2070.3 1212.07 L2070.89 1212.07 L2071.48 1212.07 L2072.06 1212.07 L2072.65 1212.07 L2073.23 1212.07 L2073.82 1212.07 L2074.41 1212.07 L2074.99 1212.07 L2075.58 1212.07 L2076.17 1212.07 L2076.75 1212.07 L2077.34 1212.07 L2077.93 1212.07 L2078.51 1212.07 L2079.1 1212.07 L2079.68 1212.07 L2080.27 1212.07 L2080.86 1212.07 L2081.44 1212.07 L2082.03 1212.07 L2082.62 1212.07 L2083.2 1212.07 L2083.79 1212.07 L2084.38 1212.07 L2084.96 1212.07 L2085.55 1212.07 L2086.14 1212.07 L2086.72 1212.07 L2087.31 1212.07 L2087.89 1212.07 L2088.48 1212.07 L2089.07 1212.07 L2089.65 1212.07 L2090.24 1212.07 L2090.83 1212.07 L2091.41 1212.07 L2092 1212.07 L2092.59 1212.07 L2093.17 1212.07 L2093.76 1212.07 L2094.35 1212.07 L2094.93 1212.07 L2095.52 1212.07 L2096.1 1212.07 L2096.69 1212.07 L2097.28 1212.07 L2097.86 1212.07 L2098.45 1212.07 L2099.04 1212.07 L2099.62 1212.07 L2100.21 1212.07 L2100.8 1212.07 L2101.38 1212.07 L2101.97 1212.07 L2102.55 1212.07 L2103.14 1212.07 L2103.73 1212.07 L2104.31 1212.07 L2104.9 1212.07 L2105.49 1212.07 L2106.07 1212.07 L2106.66 1212.07 L2107.25 1212.07 L2107.83 1212.07 L2108.42 1212.07 L2109.01 1212.07 L2109.59 1212.07 L2110.18 1212.07 L2110.76 1212.07 L2111.35 1212.07 L2111.94 1212.07 L2112.52 1212.07 L2113.11 1212.07 L2113.7 1212.07 L2114.28 1212.07 L2114.87 1212.07 L2115.46 1212.07 L2116.04 1212.07 L2116.63 1212.07 L2117.22 1212.07 L2117.8 1212.07 L2118.39 1212.07 L2118.97 1212.07 L2119.56 1212.07 L2120.15 1212.07 L2120.73 1212.07 L2121.32 1212.07 L2121.91 1212.07 L2122.49 1212.07 L2123.08 1212.07 L2123.67 1212.07 L2124.25 1212.07 L2124.84 1212.07 L2125.42 1212.07 L2126.01 1212.07 L2126.6 1212.07 L2127.18 1212.07 L2127.77 1212.07 L2128.36 1212.07 L2128.94 1212.07 L2129.53 1212.07 L2130.12 1212.07 L2130.7 1212.07 L2131.29 1212.07 L2131.88 1212.07 L2132.46 1212.07 L2133.05 1212.07 L2133.63 1212.07 L2134.22 1212.07 L2134.81 1212.07 L2135.39 1212.07 L2135.98 1212.07 L2136.57 1212.07 L2137.15 1212.07 L2137.74 1212.07 L2138.33 1212.07 L2138.91 1212.07 L2139.5 1212.07 L2140.09 1212.07 L2140.67 1212.07 L2141.26 1212.07 L2141.84 1212.07 L2142.43 1212.07 L2143.02 1212.07 L2143.6 1212.07 L2144.19 1212.07 L2144.78 1212.07 L2145.36 1212.07 L2145.95 1212.07 L2146.54 1212.07 L2147.12 1212.07 L2147.71 1212.07 L2148.3 1212.07 L2148.88 1212.07 L2149.47 1212.07 L2150.05 1212.07 L2150.64 1212.07 L2151.23 1212.07 L2151.81 1212.07 L2152.4 1212.07 L2152.99 1212.07 L2153.57 1212.07 L2154.16 1212.07 L2154.75 1212.07 L2155.33 1212.07 L2155.92 1212.07 L2156.5 1212.07 L2157.09 1212.07 L2157.68 1212.07 L2158.26 1212.07 L2158.26 1211.34 L2157.68 1211.34 L2157.09 1211.34 L2156.5 1211.34 L2155.92 1211.34 L2155.33 1211.34 L2154.75 1211.34 L2154.16 1211.34 L2153.57 1211.34 L2152.99 1211.34 L2152.4 1211.34 L2151.81 1211.34 L2151.23 1211.34 L2150.64 1211.34 L2150.05 1211.34 L2149.47 1211.34 L2148.88 1211.34 L2148.3 1211.34 L2147.71 1211.34 L2147.12 1211.34 L2146.54 1211.34 L2145.95 1211.34 L2145.36 1211.34 L2144.78 1211.34 L2144.19 1211.34 L2143.6 1211.34 L2143.02 1211.34 L2142.43 1211.34 L2141.84 1211.34 L2141.26 1211.34 L2140.67 1211.34 L2140.09 1211.34 L2139.5 1211.34 L2138.91 1211.34 L2138.33 1211.34 L2137.74 1211.34 L2137.15 1211.34 L2136.57 1211.34 L2135.98 1211.34 L2135.39 1211.34 L2134.81 1211.34 L2134.22 1211.34 L2133.63 1211.34 L2133.05 1211.34 L2132.46 1211.34 L2131.88 1211.34 L2131.29 1211.34 L2130.7 1211.34 L2130.12 1211.34 L2129.53 1211.34 L2128.94 1211.34 L2128.36 1211.34 L2127.77 1211.34 L2127.18 1211.34 L2126.6 1211.34 L2126.01 1211.34 L2125.42 1211.34 L2124.84 1211.34 L2124.25 1211.34 L2123.67 1211.34 L2123.08 1211.34 L2122.49 1211.34 L2121.91 1211.34 L2121.32 1211.34 L2120.73 1211.34 L2120.15 1211.34 L2119.56 1211.34 L2118.97 1211.34 L2118.39 1211.34 L2117.8 1211.34 L2117.22 1211.34 L2116.63 1211.34 L2116.04 1211.34 L2115.46 1211.34 L2114.87 1211.34 L2114.28 1211.34 L2113.7 1211.34 L2113.11 1211.34 L2112.52 1211.34 L2111.94 1211.34 L2111.35 1211.34 L2110.76 1211.34 L2110.18 1211.34 L2109.59 1211.34 L2109.01 1211.34 L2108.42 1211.34 L2107.83 1211.34 L2107.25 1211.34 L2106.66 1211.34 L2106.07 1211.34 L2105.49 1211.34 L2104.9 1211.34 L2104.31 1211.34 L2103.73 1211.34 L2103.14 1211.34 L2102.55 1211.34 L2101.97 1211.34 L2101.38 1211.34 L2100.8 1211.34 L2100.21 1211.34 L2099.62 1211.34 L2099.04 1211.34 L2098.45 1211.34 L2097.86 1211.34 L2097.28 1211.34 L2096.69 1211.34 L2096.1 1211.34 L2095.52 1211.34 L2094.93 1211.34 L2094.35 1211.34 L2093.76 1211.34 L2093.17 1211.34 L2092.59 1211.34 L2092 1211.34 L2091.41 1211.34 L2090.83 1211.34 L2090.24 1211.34 L2089.65 1211.34 L2089.07 1211.34 L2088.48 1211.34 L2087.89 1211.34 L2087.31 1211.34 L2086.72 1211.34 L2086.14 1211.34 L2085.55 1211.34 L2084.96 1211.34 L2084.38 1211.34 L2083.79 1211.34 L2083.2 1211.34 L2082.62 1211.34 L2082.03 1211.34 L2081.44 1211.34 L2080.86 1211.34 L2080.27 1211.34 L2079.68 1211.34 L2079.1 1211.34 L2078.51 1211.34 L2077.93 1211.34 L2077.34 1211.34 L2076.75 1211.34 L2076.17 1211.34 L2075.58 1211.34 L2074.99 1211.34 L2074.41 1211.34 L2073.82 1211.34 L2073.23 1211.34 L2072.65 1211.34 L2072.06 1211.34 L2071.48 1211.34 L2070.89 1211.34 L2070.3 1211.34 L2069.72 1211.34 L2069.13 1211.34 L2068.54 1211.34 L2067.96 1211.34 L2067.37 1211.34 L2066.78 1211.34 L2066.2 1211.34 L2065.61 1211.34 L2065.02 1211.34 L2064.44 1211.34 L2063.85 1211.34 L2063.27 1211.34 L2062.68 1211.34 L2062.09 1211.34 L2061.51 1211.34 L2060.92 1211.34 L2060.33 1211.34 L2059.75 1211.34 L2059.16 1211.34 L2058.57 1211.34 L2057.99 1211.34 L2057.4 1211.34 L2056.81 1211.34 L2056.23 1211.34 L2055.64 1211.34 L2055.06 1211.34 L2054.47 1211.34 L2053.88 1211.34 L2053.3 1211.34 L2052.71 1211.34 L2052.12 1211.34 L2051.54 1211.34 L2050.95 1211.34 L2050.36 1211.34 L2049.78 1211.34 L2049.19 1211.34 L2048.6 1211.34 L2048.02 1211.34 L2047.43 1211.34 L2046.85 1211.34 L2046.26 1211.34 L2045.67 1211.34 L2045.09 1211.34 L2044.5 1211.34 L2043.91 1211.34 L2043.33 1211.34 L2042.74 1211.34 L2042.15 1211.34 L2041.57 1211.34 L2040.98 1211.34 L2040.4 1211.34 L2039.81 1211.34 L2039.22 1211.34 L2038.64 1211.34 L2038.05 1211.34 L2037.46 1211.34 L2036.88 1211.34 L2036.29 1211.34 L2035.7 1211.34 L2035.12 1211.34 L2034.53 1211.34 L2033.94 1211.34 L2033.36 1211.34 L2032.77 1211.34 L2032.19 1211.34 L2031.6 1211.34 L2031.01 1211.34 L2030.43 1211.34 L2029.84 1211.34 L2029.25 1211.34 L2028.67 1211.34 L2028.08 1211.34 L2027.49 1211.34 L2026.91 1211.34 L2026.32 1211.34 L2025.73 1211.34 L2025.15 1211.34 L2024.56 1211.34 L2023.98 1211.34 L2023.39 1211.34 L2022.8 1211.34 L2022.22 1211.34 L2021.63 1211.34 L2021.04 1211.34 L2020.46 1211.34 L2019.87 1211.34 L2019.28 1211.34 L2018.7 1211.34 L2018.11 1211.34 L2017.53 1211.34 L2016.94 1211.34 L2016.35 1211.34 L2015.77 1211.34 L2015.18 1211.34 L2014.59 1211.34 L2014.01 1211.34 L2013.42 1211.34 L2012.83 1211.34 L2012.25 1211.34 L2011.66 1211.34 L2011.07 1211.34 L2010.49 1211.34 L2009.9 1211.34 L2009.32 1211.34 L2008.73 1211.34 L2008.14 1211.34 L2007.56 1211.34 L2006.97 1211.34 L2006.38 1211.34 L2005.8 1211.34 L2005.21 1211.34 L2004.62 1211.34 L2004.04 1211.34 L2003.45 1211.34 L2002.86 1211.34 L2002.28 1211.34 L2001.69 1211.34 L2001.11 1211.34 L2000.52 1211.34 L1999.93 1211.34 L1999.35 1211.34 L1998.76 1211.34 L1998.17 1211.34 L1997.59 1211.34 L1997 1211.34 L1996.41 1211.34 L1995.83 1211.34 L1995.24 1211.34 L1994.65 1211.34 L1994.07 1211.34 L1993.48 1211.34 L1992.9 1211.34 L1992.31 1211.34 L1991.72 1211.34 L1991.14 1211.34 L1990.55 1211.34 L1989.96 1211.34 L1989.38 1211.34 L1988.79 1211.34 L1988.2 1211.34 L1987.62 1211.34 L1987.03 1211.34 L1986.45 1211.34 L1985.86 1211.34 L1985.27 1211.34 L1984.69 1211.34 L1984.1 1211.34 L1983.51 1211.34 L1982.93 1211.34 L1982.34 1211.34 L1981.75 1211.34 L1981.17 1211.34 L1980.58 1211.34 L1979.99 1211.34 L1979.41 1211.34 L1978.82 1211.34 L1978.24 1211.34 L1977.65 1211.34 L1977.06 1211.34 L1976.48 1211.34 L1975.89 1211.34 L1975.3 1211.34 L1974.72 1211.34 L1974.13 1211.34 L1973.54 1211.34 L1972.96 1211.34 L1972.37 1211.34 L1971.78 1211.34 L1971.2 1211.34 L1970.61 1211.34 L1970.03 1211.34 L1969.44 1211.34 L1968.85 1211.34 L1968.27 1211.34 L1967.68 1211.34 L1967.09 1211.34 L1966.51 1211.34 L1965.92 1211.34 L1965.33 1211.34 L1964.75 1211.34 L1964.16 1211.34 L1963.58 1211.34 L1962.99 1211.34 L1962.4 1211.34 L1961.82 1211.34 L1961.23 1211.34 L1960.64 1211.34 L1960.06 1211.34 L1959.47 1211.34 L1958.88 1211.34 L1958.3 1211.34 L1957.71 1211.34 L1957.12 1211.34 L1956.54 1211.34 L1955.95 1211.34 L1955.37 1211.34 L1954.78 1211.34 L1954.19 1211.34 L1953.61 1211.34 L1953.02 1211.34 L1952.43 1211.34 L1951.85 1211.34 L1951.26 1211.34 L1950.67 1211.34 L1950.09 1211.34 L1949.5 1211.34 L1948.91 1211.34 L1948.33 1211.34 L1947.74 1211.34 L1947.16 1211.34 L1946.57 1211.34 L1945.98 1211.34 L1945.4 1211.34 L1944.81 1211.34 L1944.22 1211.34 L1943.64 1211.34 L1943.05 1211.34 L1942.46 1211.34 L1941.88 1211.34 L1941.29 1211.34 L1940.71 1211.34 L1940.12 1211.34 L1939.53 1211.34 L1938.95 1211.34 L1938.36 1211.34 L1937.77 1211.34 L1937.19 1211.34 L1936.6 1211.34 L1936.01 1211.34 L1935.43 1211.34 L1934.84 1211.34 L1934.25 1211.34 L1933.67 1211.34 L1933.08 1211.34 L1932.5 1211.34 L1931.91 1211.34 L1931.32 1211.34 L1930.74 1211.34 L1930.15 1211.34 L1929.56 1211.34 L1928.98 1211.34 L1928.39 1211.34 L1927.8 1211.34 L1927.22 1211.34 L1926.63 1211.34 L1926.04 1211.34 L1925.46 1211.34 L1924.87 1211.34 L1924.29 1211.34 L1923.7 1211.34 L1923.11 1211.34 L1922.53 1211.34 L1921.94 1211.34 L1921.35 1211.34 L1920.77 1211.34 L1920.18 1211.34 L1919.59 1211.34 L1919.01 1211.34 L1918.42 1211.34 L1917.83 1211.34 L1917.25 1211.34 L1916.66 1211.34 L1916.08 1211.34 L1915.49 1211.34 L1914.9 1211.34 L1914.32 1211.34 L1913.73 1211.34 L1913.14 1211.34 L1912.56 1211.34 L1911.97 1211.34 L1911.38 1211.34 L1910.8 1211.34 L1910.21 1211.34 L1909.63 1211.34 L1909.04 1211.34 L1908.45 1211.34 L1907.87 1211.34 L1907.28 1211.34 L1906.69 1211.34 L1906.11 1211.34 L1905.52 1211.34 L1904.93 1211.34 L1904.35 1211.34 L1903.76 1211.34 L1903.17 1211.34 L1902.59 1211.34 L1902 1211.34 L1901.42 1211.34 L1900.83 1211.34 L1900.24 1211.34 L1899.66 1211.34 L1899.07 1211.34 L1898.48 1211.34 L1897.9 1211.34 L1897.31 1211.34 L1896.72 1211.34 L1896.14 1211.34 L1895.55 1211.34 L1894.96 1211.34 L1894.38 1211.34 L1893.79 1211.34 L1893.21 1211.34 L1892.62 1211.34 L1892.03 1211.34 L1891.45 1211.34 L1890.86 1211.34 L1890.27 1211.34 L1889.69 1211.34 L1889.1 1211.34 L1888.51 1211.34 L1887.93 1211.34 L1887.34 1211.34 L1886.76 1211.34 L1886.17 1211.34 L1885.58 1211.34 L1885 1211.34 L1884.41 1211.34 L1883.82 1211.34 L1883.24 1211.34 L1882.65 1211.34 L1882.06 1211.34 L1881.48 1211.34 L1880.89 1211.34 L1880.3 1211.34 L1879.72 1211.34 L1879.13 1211.34 L1878.55 1211.34 L1877.96 1211.34 L1877.37 1211.34 L1876.79 1211.34 L1876.2 1211.34 L1875.61 1211.34 L1875.03 1211.34 L1874.44 1211.34 L1873.85 1211.34 L1873.27 1211.34 L1872.68 1211.34 L1872.09 1211.34 L1871.51 1211.34 L1870.92 1211.34 L1870.34 1211.34 L1869.75 1211.34 L1869.16 1211.34 L1868.58 1211.34 L1867.99 1211.34 L1867.4 1211.34 L1866.82 1211.34 L1866.23 1211.34 L1865.64 1211.34 L1865.06 1211.34 L1864.47 1211.34 L1863.88 1211.34 L1863.3 1211.34 L1862.71 1211.34 L1862.13 1211.34 L1861.54 1211.34 L1860.95 1211.34 L1860.37 1211.34 L1859.78 1211.34 L1859.19 1211.34 L1858.61 1211.34 L1858.02 1211.34 L1857.43 1211.34 L1856.85 1211.34 L1856.26 1211.34 L1855.68 1211.34 L1855.09 1211.34 L1854.5 1211.34 L1853.92 1211.34 L1853.33 1211.34 L1852.74 1211.34 L1852.16 1211.34 L1851.57 1211.34 L1850.98 1211.34 L1850.4 1211.34 L1849.81 1211.34 L1849.22 1211.34 L1848.64 1211.34 L1848.05 1211.34 L1847.47 1211.34 L1846.88 1211.34 L1846.29 1211.34 L1845.71 1211.34 L1845.12 1211.34 L1844.53 1211.34 L1843.95 1211.34 L1843.36 1211.34 L1842.77 1211.34 L1842.19 1211.34 L1841.6 1211.34 L1841.01 1211.34 L1840.43 1211.34 L1839.84 1211.34 L1839.26 1211.34 L1838.67 1211.34 L1838.08 1211.34 L1837.5 1211.34 L1836.91 1211.34 L1836.32 1211.34 L1835.74 1211.34 L1835.15 1211.34 L1834.56 1211.34 L1833.98 1211.34 L1833.39 1211.34 L1832.81 1211.34 L1832.22 1211.34 L1831.63 1211.34 L1831.05 1211.34 L1830.46 1211.34 L1829.87 1211.34 L1829.29 1211.34 L1828.7 1211.34 L1828.11 1211.34 L1827.53 1211.34 L1826.94 1211.34 L1826.35 1211.34 L1825.77 1211.34 L1825.18 1211.34 L1824.6 1211.34 L1824.01 1211.34 L1823.42 1211.34 L1822.84 1211.34 L1822.25 1211.34 L1821.66 1211.34 L1821.08 1211.34 L1820.49 1211.34 L1819.9 1211.34 L1819.32 1211.34 L1818.73 1211.34 L1818.14 1211.34 L1817.56 1211.34 L1816.97 1211.34 L1816.39 1211.34 L1815.8 1211.34 L1815.21 1211.34 L1814.63 1211.34 L1814.04 1211.34 L1813.45 1211.34 L1812.87 1211.34 L1812.28 1211.34 L1811.69 1211.34 L1811.11 1211.34 L1810.52 1211.34 L1809.94 1211.34 L1809.35 1211.34 L1808.76 1211.34 L1808.18 1211.34 L1807.59 1211.34 L1807 1211.34 L1806.42 1211.34 L1805.83 1211.34 L1805.24 1211.34 L1804.66 1211.34 L1804.07 1211.34 L1803.48 1211.34 L1802.9 1211.34 L1802.31 1211.34 L1801.73 1211.34 L1801.14 1211.34 L1800.55 1211.34 L1799.97 1211.34 L1799.38 1211.34 L1798.79 1211.34 L1798.21 1211.34 L1797.62 1211.34 L1797.03 1211.34 L1796.45 1211.34 L1795.86 1211.34 L1795.27 1211.34 L1794.69 1211.34 L1794.1 1211.34 L1793.52 1211.34 L1792.93 1211.34 L1792.34 1211.34 L1791.76 1211.34 L1791.17 1211.34 L1790.58 1211.34 L1790 1211.34 L1789.41 1211.34 L1788.82 1211.34 L1788.24 1211.34 L1787.65 1211.34 L1787.06 1211.34 L1786.48 1211.34 L1785.89 1211.34 L1785.31 1211.34 L1784.72 1211.34 L1784.13 1211.34 L1783.55 1211.34 L1782.96 1211.34 L1782.37 1211.34 L1781.79 1211.34 L1781.2 1211.34 L1780.61 1211.34 L1780.03 1211.34 L1779.44 1211.34 L1778.86 1211.34 L1778.27 1211.34 L1777.68 1211.34 L1777.1 1211.34 L1776.51 1211.34 L1775.92 1211.34 L1775.34 1211.34 L1774.75 1211.34 L1774.16 1211.34 L1773.58 1211.34 L1772.99 1211.34 L1772.4 1211.34 L1771.82 1211.34 L1771.23 1211.34 L1770.65 1211.34 L1770.06 1211.34 L1769.47 1211.34 L1768.89 1211.34 L1768.3 1211.34 L1767.71 1211.34 L1767.13 1211.34 L1766.54 1211.34 L1765.95 1211.34 L1765.37 1211.34 L1764.78 1211.34 L1764.19 1211.34 L1763.61 1211.34 L1763.02 1211.34 L1762.44 1211.34 L1761.85 1211.34 L1761.26 1211.34 L1760.68 1211.34 L1760.09 1211.34 L1759.5 1211.34 L1758.92 1211.34 L1758.33 1211.34 L1757.74 1211.34 L1757.16 1211.34 L1756.57 1211.34 L1755.99 1211.34 L1755.4 1211.34 L1754.81 1211.34 L1754.23 1211.34 L1753.64 1211.34 L1753.05 1211.34 L1752.47 1211.34 L1751.88 1211.34 L1751.29 1211.34 L1750.71 1211.34 L1750.12 1211.34 L1749.53 1211.34 L1748.95 1211.34 L1748.36 1211.34 L1747.78 1211.34 L1747.19 1211.34 L1746.6 1211.34 L1746.02 1211.34 L1745.43 1211.34 L1744.84 1211.34 L1744.26 1211.34 L1743.67 1211.34 L1743.08 1211.34 L1742.5 1211.34 L1741.91 1211.34 L1741.32 1211.34 L1740.74 1211.34 L1740.15 1211.34 L1739.57 1211.34 L1738.98 1211.34 L1738.39 1211.34 L1737.81 1211.34 L1737.22 1211.34 L1736.63 1211.34 L1736.05 1211.34 L1735.46 1211.34 L1734.87 1211.34 L1734.29 1211.34 L1733.7 1211.34 L1733.11 1211.34 L1732.53 1211.34 L1731.94 1211.34 L1731.36 1211.34 L1730.77 1211.34 L1730.18 1211.34 L1729.6 1211.34 L1729.01 1211.34 L1728.42 1211.34 L1727.84 1211.34 L1727.25 1211.34 L1726.66 1211.34 L1726.08 1211.34 L1725.49 1211.34 L1724.91 1211.34 L1724.32 1211.34 L1723.73 1211.34 L1723.15 1211.34 L1722.56 1211.34 L1721.97 1211.34 L1721.39 1211.34 L1720.8 1211.34 L1720.21 1211.34 L1719.63 1211.34 L1719.04 1211.34 L1718.45 1211.34 L1717.87 1211.34 L1717.28 1211.34 L1716.7 1211.34 L1716.11 1211.34 L1715.52 1211.34 L1714.94 1211.34 L1714.35 1211.34 L1713.76 1211.34 L1713.18 1211.34 L1712.59 1211.34 L1712 1211.34 L1711.42 1211.34 L1710.83 1211.34 L1710.24 1211.34 L1709.66 1211.34 L1709.07 1211.34 L1708.49 1211.34 L1707.9 1211.34 L1707.31 1211.34 L1706.73 1211.34 L1706.14 1211.34 L1705.55 1211.34 L1704.97 1211.34 L1704.38 1211.34 L1703.79 1211.34 L1703.21 1211.34 L1702.62 1211.34 L1702.04 1211.34 L1701.45 1211.34 L1700.86 1211.34 L1700.28 1211.34 L1699.69 1211.34 L1699.1 1211.34 L1698.52 1211.34 L1697.93 1211.34 L1697.34 1211.34 L1696.76 1211.34 L1696.17 1211.34 L1695.58 1211.34 L1695 1211.34 L1694.41 1211.34 L1693.83 1211.34 L1693.24 1211.34 L1692.65 1211.34 L1692.07 1211.34 L1691.48 1211.34 L1690.89 1211.34 L1690.31 1211.34 L1689.72 1211.34 L1689.13 1211.34 L1688.55 1211.34 L1687.96 1211.34 L1687.37 1211.34 L1686.79 1211.34 L1686.2 1211.34 L1685.62 1211.34 L1685.03 1211.34 L1684.44 1211.34 L1683.86 1211.34 L1683.27 1211.34 L1682.68 1211.34 L1682.1 1211.34 L1681.51 1211.34 L1680.92 1211.34 L1680.34 1211.34 L1679.75 1211.34 L1679.17 1211.34 L1678.58 1211.34 L1677.99 1211.34 L1677.41 1211.34 L1676.82 1211.34 L1676.23 1211.34 L1675.65 1211.34 L1675.06 1211.34 L1674.47 1211.34 L1673.89 1211.34 L1673.3 1211.34 L1672.71 1211.34 L1672.13 1211.34 L1671.54 1211.34 L1670.96 1211.34 L1670.37 1211.34 L1669.78 1211.34 L1669.2 1211.34 L1668.61 1211.34 L1668.02 1211.34 L1667.44 1211.34 L1666.85 1211.34 L1666.26 1211.34 L1665.68 1211.34 L1665.09 1211.34 L1664.5 1211.34 L1663.92 1211.34 L1663.33 1211.34 L1662.75 1211.34 L1662.16 1211.34 L1661.57 1211.34 L1660.99 1211.34 L1660.4 1211.34 L1659.81 1211.34 L1659.23 1211.34 L1658.64 1211.34 L1658.05 1211.34 L1657.47 1211.34 L1656.88 1211.34 L1656.29 1211.34 L1655.71 1211.34 L1655.12 1211.34 L1654.54 1211.34 L1653.95 1211.34 L1653.36 1211.34 L1652.78 1211.34 L1652.19 1211.34 L1651.6 1211.34 L1651.02 1211.34 L1650.43 1211.34 L1649.84 1211.34 L1649.26 1211.34 L1648.67 1211.34 L1648.09 1211.34 L1647.5 1211.34 L1646.91 1211.34 L1646.33 1211.34 L1645.74 1211.34 L1645.15 1211.34 L1644.57 1211.34 L1643.98 1211.34 L1643.39 1211.34 L1642.81 1211.34 L1642.22 1211.34 L1641.63 1211.34 L1641.05 1211.34 L1640.46 1211.34 L1639.88 1211.34 L1639.29 1211.34 L1638.7 1211.34 L1638.12 1211.34 L1637.53 1211.34 L1636.94 1211.34 L1636.36 1211.34 L1635.77 1211.34 L1635.18 1211.34 L1634.6 1211.34 L1634.01 1211.34 L1633.42 1211.34 L1632.84 1211.34 L1632.25 1211.34 L1631.67 1211.34 L1631.08 1211.34 L1630.49 1211.34 L1629.91 1211.34 L1629.32 1211.34 L1628.73 1211.34 L1628.15 1211.34 L1627.56 1211.34 L1626.97 1211.34 L1626.39 1211.34 L1625.8 1211.34 L1625.22 1211.34 L1624.63 1211.34 L1624.04 1211.34 L1623.46 1211.34 L1622.87 1211.34 L1622.28 1211.34 L1621.7 1211.34 L1621.11 1211.34 L1620.52 1211.34 L1619.94 1211.34 L1619.35 1211.34 L1618.76 1211.34 L1618.18 1211.34 L1617.59 1211.34 L1617.01 1211.34 L1616.42 1211.34 L1615.83 1211.34 L1615.25 1211.34 L1614.66 1211.34 L1614.07 1211.34 L1613.49 1211.34 L1612.9 1211.34 L1612.31 1211.34 L1611.73 1211.34 L1611.14 1211.34 L1610.55 1211.34 L1609.97 1211.34 L1609.38 1211.34 L1608.8 1211.34 L1608.21 1211.34 L1607.62 1211.34 L1607.04 1211.34 L1606.45 1211.34 L1605.86 1211.34 L1605.28 1211.34 L1604.69 1211.34 L1604.1 1211.34 L1603.52 1211.34 L1602.93 1211.34 L1602.34 1211.34 L1601.76 1211.34 L1601.17 1211.34 L1600.59 1211.34 L1600 1211.34 L1599.41 1211.34 L1598.83 1211.34 L1598.24 1211.34 L1597.65 1211.34 L1597.07 1211.34 L1596.48 1211.34 L1595.89 1211.34 L1595.31 1211.34 L1594.72 1211.34 L1594.14 1211.34 L1593.55 1211.34 L1592.96 1211.34 L1592.38 1211.34 L1591.79 1211.34 L1591.2 1211.34 L1590.62 1211.34 L1590.03 1211.34 L1589.44 1211.34 L1588.86 1211.34 L1588.27 1211.34 L1587.68 1211.34 L1587.1 1211.34 L1586.51 1211.34 L1585.93 1211.34 L1585.34 1211.34 L1584.75 1211.34 L1584.17 1211.34 L1583.58 1211.34 L1582.99 1211.34 L1582.41 1211.34 L1581.82 1211.34 L1581.23 1211.34 L1580.65 1211.34 L1580.06 1211.34 L1579.47 1211.34 L1578.89 1211.34 L1578.3 1211.34 L1577.72 1211.34 L1577.13 1211.34 L1576.54 1211.34 L1575.96 1211.34 L1575.37 1211.34 L1574.78 1211.34 L1574.2 1211.34 L1573.61 1211.34 L1573.02 1211.34 L1572.44 1211.34 L1571.85 1211.34 L1571.27 1211.34 L1570.68 1211.34 L1570.09 1211.34 L1569.51 1211.34 L1568.92 1211.34 L1568.33 1211.34 L1567.75 1211.34 L1567.16 1211.34 L1566.57 1211.34 L1565.99 1211.34 L1565.4 1211.34 L1564.81 1211.34 L1564.23 1211.34 L1563.64 1211.34 L1563.06 1211.34 L1562.47 1211.34 L1561.88 1211.34 L1561.3 1211.34 L1560.71 1211.34 L1560.12 1211.34 L1559.54 1211.34 L1558.95 1211.34 L1558.36 1211.34 L1557.78 1211.34 L1557.19 1211.34 L1556.6 1211.34 L1556.02 1211.34 L1555.43 1211.34 L1554.85 1211.34 L1554.26 1211.34 L1553.67 1211.34 L1553.09 1211.34 L1552.5 1211.34 L1551.91 1211.34 L1551.33 1211.34 L1550.74 1211.34 L1550.15 1211.34 L1549.57 1211.34 L1548.98 1211.34 L1548.4 1211.34 L1547.81 1211.34 L1547.22 1211.34 L1546.64 1211.34 L1546.05 1211.34 L1545.46 1211.34 L1544.88 1211.34 L1544.29 1211.34 L1543.7 1211.34 L1543.12 1211.34 L1542.53 1211.34 L1541.94 1211.34 L1541.36 1211.34 L1540.77 1211.34 L1540.19 1211.34 L1539.6 1211.34 L1539.01 1211.34 L1538.43 1211.34 L1537.84 1211.34 L1537.25 1211.34 L1536.67 1211.34 L1536.08 1211.34 L1535.49 1211.34 L1534.91 1211.34 L1534.32 1211.34 L1533.73 1211.34 L1533.15 1211.34 L1532.56 1211.34 L1531.98 1211.34 L1531.39 1211.34 L1530.8 1211.34 L1530.22 1211.34 L1529.63 1211.34 L1529.04 1211.34 L1528.46 1211.34 L1527.87 1211.34 L1527.28 1211.34 L1526.7 1211.34 L1526.11 1211.34 L1525.52 1211.34 L1524.94 1211.34 L1524.35 1211.34 L1523.77 1211.34 L1523.18 1211.34 L1522.59 1211.34 L1522.01 1211.34 L1521.42 1211.34 L1520.83 1211.34 L1520.25 1211.34 L1519.66 1211.34 L1519.07 1211.34 L1518.49 1211.34 L1517.9 1211.34 L1517.32 1211.34 L1516.73 1211.34 L1516.14 1211.34 L1515.56 1211.34 L1514.97 1211.34 L1514.38 1211.34 L1513.8 1211.34 L1513.21 1211.34 L1512.62 1211.34 L1512.04 1211.34 L1511.45 1211.34 L1510.86 1211.34 L1510.28 1211.34 L1509.69 1211.34 L1509.11 1211.34 L1508.52 1211.34 L1507.93 1211.34 L1507.35 1211.34 L1506.76 1211.34 L1506.17 1211.34 L1505.59 1211.34 L1505 1211.34 L1504.41 1211.34 L1503.83 1211.34 L1503.24 1211.34 L1502.65 1211.34 L1502.07 1211.34 L1501.48 1211.34 L1500.9 1211.34 L1500.31 1211.34 L1499.72 1211.34 L1499.14 1211.34 L1498.55 1211.34 L1497.96 1211.34 L1497.38 1211.34 L1496.79 1211.34 L1496.2 1211.34 L1495.62 1211.34 L1495.03 1211.34 L1494.45 1211.34 L1493.86 1211.34 L1493.27 1211.34 L1492.69 1211.34 L1492.1 1211.34 L1491.51 1211.34 L1490.93 1211.34 L1490.34 1211.34 L1489.75 1211.34 L1489.17 1211.34 L1488.58 1211.34 L1487.99 1211.34 L1487.41 1211.34 L1486.82 1211.34 L1486.24 1211.34 L1485.65 1211.34 L1485.06 1211.34 L1484.48 1211.34 L1483.89 1211.34 L1483.3 1211.34 L1482.72 1211.34 L1482.13 1211.34 L1481.54 1211.34 L1480.96 1211.34 L1480.37 1211.34 L1479.78 1211.34 L1479.2 1211.34 L1478.61 1211.34 L1478.03 1211.34 L1477.44 1211.34 L1476.85 1211.34 L1476.27 1211.34 L1475.68 1211.34 L1475.09 1211.34 L1474.51 1211.34 L1473.92 1211.34 L1473.33 1211.34 L1472.75 1211.34 L1472.16 1211.34 L1471.57 1211.34 L1470.99 1211.34 L1470.4 1211.34 L1469.82 1211.34 L1469.23 1211.34 L1468.64 1211.34 L1468.06 1211.34 L1467.47 1211.34 L1466.88 1211.34 L1466.3 1211.34 L1465.71 1211.34 L1465.12 1211.34 L1464.54 1211.34 L1463.95 1211.34 L1463.37 1211.34 L1462.78 1211.34 L1462.19 1211.34 L1461.61 1211.34 L1461.02 1211.34 L1460.43 1211.34 L1459.85 1211.34 L1459.26 1211.34 L1458.67 1211.34 L1458.09 1211.34 L1457.5 1211.34 L1456.91 1211.34 L1456.33 1211.34 L1455.74 1211.34 L1455.16 1211.34 L1454.57 1211.34 L1453.98 1211.34 L1453.4 1211.34 L1452.81 1211.34 L1452.22 1211.34 L1451.64 1211.34 L1451.05 1211.34 L1450.46 1211.34 L1449.88 1211.34 L1449.29 1211.34 L1448.7 1211.34 L1448.12 1211.34 L1447.53 1211.34 L1446.95 1211.34 L1446.36 1211.34 L1445.77 1211.34 L1445.19 1211.34 L1444.6 1211.34 L1444.01 1211.34 L1443.43 1211.34 L1442.84 1211.34 L1442.25 1211.34 L1441.67 1211.34 L1441.08 1211.34 L1440.5 1211.34 L1439.91 1211.34 L1439.32 1211.34 L1438.74 1211.34 L1438.15 1211.34 L1437.56 1211.34 L1436.98 1211.34 L1436.39 1211.34 L1435.8 1211.34 L1435.22 1211.34 L1434.63 1211.34 L1434.04 1211.34 L1433.46 1211.34 L1432.87 1211.34 L1432.29 1211.34 L1431.7 1211.34 L1431.11 1211.34 L1430.53 1211.34 L1429.94 1211.34 L1429.35 1211.34 L1428.77 1211.34 L1428.18 1211.34 L1427.59 1211.34 L1427.01 1211.34 L1426.42 1211.34 L1425.83 1211.34 L1425.25 1211.34 L1424.66 1211.34 L1424.08 1211.34 L1423.49 1211.34 L1422.9 1211.34 L1422.32 1211.34 L1421.73 1211.34 L1421.14 1211.34 L1420.56 1211.34 L1419.97 1211.34 L1419.38 1211.34 L1418.8 1211.34 L1418.21 1211.34 L1417.63 1211.34 L1417.04 1211.34 L1416.45 1211.34 L1415.87 1211.34 L1415.28 1211.34 L1414.69 1211.34 L1414.11 1211.34 L1413.52 1211.34 L1412.93 1211.34 L1412.35 1211.34 L1411.76 1211.34 L1411.17 1211.34 L1410.59 1211.34 L1410 1211.34 L1409.42 1211.34 L1408.83 1211.34 L1408.24 1211.34 L1407.66 1211.34 L1407.07 1211.34 L1406.48 1211.34 L1405.9 1211.34 L1405.31 1211.34 L1404.72 1211.34 L1404.14 1211.34 L1403.55 1211.34 L1402.96 1211.34 L1402.38 1211.34 L1401.79 1211.34 L1401.21 1211.34 L1400.62 1211.34 L1400.03 1211.34 L1399.45 1211.34 L1398.86 1211.34 L1398.27 1211.34 L1397.69 1211.34 L1397.1 1211.34 L1396.51 1211.34 L1395.93 1211.34 L1395.34 1211.34 L1394.75 1211.34 L1394.17 1211.34 L1393.58 1211.34 L1393 1211.34 L1392.41 1211.34 L1391.82 1211.34 L1391.24 1211.34 L1390.65 1211.34 L1390.06 1211.34 L1389.48 1211.34 L1388.89 1211.34 L1388.3 1211.34 L1387.72 1211.34 L1387.13 1211.34 L1386.55 1211.34 L1385.96 1211.34 L1385.37 1211.34 L1384.79 1211.34 L1384.2 1211.34 L1383.61 1211.34 L1383.03 1211.34 L1382.44 1211.34 L1381.85 1211.34 L1381.27 1211.34 L1380.68 1211.34 L1380.09 1211.34 L1379.51 1211.34 L1378.92 1211.34 L1378.34 1211.34 L1377.75 1211.34 L1377.16 1211.34 L1376.58 1211.34 L1375.99 1211.34 L1375.4 1211.34 L1374.82 1211.34 L1374.23 1211.34 L1373.64 1211.34 L1373.06 1211.34 L1372.47 1211.34 L1371.88 1211.34 L1371.3 1211.34 L1370.71 1211.34 L1370.13 1211.34 L1369.54 1211.34 L1368.95 1211.34 L1368.37 1211.34 L1367.78 1211.34 L1367.19 1211.34 L1366.61 1211.34 L1366.02 1211.34 L1365.43 1211.34 L1364.85 1211.34 L1364.26 1211.34 L1363.68 1211.34 L1363.09 1211.34 L1362.5 1211.34 L1361.92 1211.34 L1361.33 1211.34 L1360.74 1211.34 L1360.16 1211.34 L1359.57 1211.34 L1358.98 1211.34 L1358.4 1211.34 L1357.81 1211.34 L1357.22 1211.34 L1356.64 1211.34 L1356.05 1211.34 L1355.47 1211.34 L1354.88 1211.34 L1354.29 1211.34 L1353.71 1211.34 L1353.12 1211.34 L1352.53 1211.34 L1351.95 1211.34 L1351.36 1211.34 L1350.77 1211.34 L1350.19 1211.34 L1349.6 1211.34 L1349.01 1211.34 L1348.43 1211.34 L1347.84 1211.34 L1347.26 1211.34 L1346.67 1211.34 L1346.08 1211.34 L1345.5 1211.34 L1344.91 1211.34 L1344.32 1211.34 L1343.74 1211.34 L1343.15 1211.34 L1342.56 1211.34 L1341.98 1211.34 L1341.39 1211.34 L1340.8 1211.34 L1340.22 1211.34 L1339.63 1211.34 L1339.05 1211.34 L1338.46 1211.34 L1337.87 1211.34 L1337.29 1211.34 L1336.7 1211.34 L1336.11 1211.34 L1335.53 1211.34 L1334.94 1211.34 L1334.35 1211.34 L1333.77 1211.34 L1333.18 1211.34 L1332.6 1211.34 L1332.01 1211.34 L1331.42 1211.34 L1330.84 1211.34 L1330.25 1211.34 L1329.66 1211.34 L1329.08 1211.34 L1328.49 1211.34 L1327.9 1211.34 L1327.32 1211.34 L1326.73 1211.34 L1326.14 1211.34 L1325.56 1211.34 L1324.97 1211.34 L1324.39 1211.34 L1323.8 1211.34 L1323.21 1211.34 L1322.63 1211.34 L1322.04 1211.34 L1321.45 1211.34 L1320.87 1211.34 L1320.28 1211.34 L1319.69 1211.34 L1319.11 1211.34 L1318.52 1211.34 L1317.93 1211.34 L1317.35 1211.34 L1316.76 1211.34 L1316.18 1211.34 L1315.59 1211.34 L1315 1211.34 L1314.42 1211.34 L1313.83 1211.34 L1313.24 1211.34 L1312.66 1211.34 L1312.07 1211.34 L1311.48 1211.34 L1310.9 1211.34 L1310.31 1211.34 L1309.73 1211.34 L1309.14 1211.34 L1308.55 1211.34 L1307.97 1211.34 L1307.38 1211.34 L1306.79 1211.34 L1306.21 1211.34 L1305.62 1211.34 L1305.03 1211.34 L1304.45 1211.34 L1303.86 1211.34 L1303.27 1211.34 L1302.69 1211.34 L1302.1 1211.34 L1301.52 1211.34 L1300.93 1211.34 L1300.34 1211.34 L1299.76 1211.34 L1299.17 1211.34 L1298.58 1211.34 L1298 1211.34 L1297.41 1211.34 L1296.82 1211.34 L1296.24 1211.34 L1295.65 1211.34 L1295.06 1211.34 L1294.48 1211.34 L1293.89 1211.34 L1293.31 1211.34 L1292.72 1211.34 L1292.13 1211.34 L1291.55 1211.34 L1290.96 1211.34 L1290.37 1211.34 L1289.79 1211.34 L1289.2 1211.34 L1288.61 1211.34 L1288.03 1211.34 L1287.44 1211.34 L1286.86 1211.34 L1286.27 1211.34 L1285.68 1211.34 L1285.1 1211.34 L1284.51 1211.34 L1283.92 1211.34 L1283.34 1211.34 L1282.75 1211.34 L1282.16 1211.34 L1281.58 1211.34 L1280.99 1211.34 L1280.4 1211.34 L1279.82 1211.34 L1279.23 1211.34 L1278.65 1211.34 L1278.06 1211.34 L1277.47 1211.34 L1276.89 1211.34 L1276.3 1211.34 L1275.71 1211.34 L1275.13 1211.34 L1274.54 1211.34 L1273.95 1211.34 L1273.37 1211.34 L1272.78 1211.34 L1272.19 1211.34 L1271.61 1211.34 L1271.02 1211.34 L1270.44 1211.34 L1269.85 1211.34 L1269.26 1211.34 L1268.68 1211.34 L1268.09 1211.34 L1267.5 1211.34 L1266.92 1211.34 L1266.33 1211.34 L1265.74 1211.34 L1265.16 1211.34 L1264.57 1211.34 L1263.98 1211.34 L1263.4 1211.34 L1262.81 1211.34 L1262.23 1211.34 L1261.64 1211.34 L1261.05 1211.34 L1260.47 1211.34 L1259.88 1211.34 L1259.29 1211.34 L1258.71 1211.34 L1258.12 1211.34 L1257.53 1211.34 L1256.95 1211.34 L1256.36 1211.34 L1255.78 1211.34 L1255.19 1211.34 L1254.6 1211.34 L1254.02 1211.34 L1253.43 1211.34 L1252.84 1211.34 L1252.26 1211.34 L1251.67 1211.34 L1251.08 1211.34 L1250.5 1211.34 L1249.91 1211.34 L1249.32 1211.34 L1248.74 1211.34 L1248.15 1211.34 L1247.57 1211.34 L1246.98 1211.34 L1246.39 1211.34 L1245.81 1211.34 L1245.22 1211.34 L1244.63 1211.34 L1244.05 1211.34 L1243.46 1211.34 L1242.87 1211.34 L1242.29 1211.34 L1241.7 1211.34 L1241.11 1211.34 L1240.53 1211.34 L1239.94 1211.34 L1239.36 1211.34 L1238.77 1211.34 L1238.18 1211.34 L1237.6 1211.34 L1237.01 1211.34 L1236.42 1211.34 L1235.84 1211.34 L1235.25 1211.34 L1234.66 1211.34 L1234.08 1211.34 L1233.49 1211.34 L1232.91 1211.34 L1232.32 1211.34 L1231.73 1211.34 L1231.15 1211.34 L1230.56 1211.34 L1229.97 1211.34 L1229.39 1211.34 L1228.8 1211.34 L1228.21 1211.34 L1227.63 1211.34 L1227.04 1211.34 L1226.45 1211.34 L1225.87 1211.34 L1225.28 1211.34 L1224.7 1211.34 L1224.11 1211.34 L1223.52 1211.34 L1222.94 1211.34 L1222.35 1211.34 L1221.76 1211.34 L1221.18 1211.34 L1220.59 1211.34 L1220 1211.34 L1219.42 1211.34 L1218.83 1211.34 L1218.24 1211.34 L1217.66 1211.34 L1217.07 1211.34 L1216.49 1211.34 L1215.9 1211.34 L1215.31 1211.34 L1214.73 1211.34 L1214.14 1211.34 L1213.55 1211.34 L1212.97 1211.34 L1212.38 1211.34 L1211.79 1211.34 L1211.21 1211.34 L1210.62 1211.34 L1210.03 1211.34 L1209.45 1211.34 L1208.86 1211.34 L1208.28 1211.34 L1207.69 1211.34 L1207.1 1211.34 L1206.52 1211.34 L1205.93 1211.34 L1205.34 1211.34 L1204.76 1211.34 L1204.17 1211.34 L1203.58 1211.34 L1203 1211.34 L1202.41 1211.34 L1201.83 1211.34 L1201.24 1211.34 L1200.65 1211.34 L1200.07 1211.34 L1199.48 1211.34 L1198.89 1211.34 L1198.31 1211.34 L1197.72 1211.34 L1197.13 1211.34 L1196.55 1211.34 L1195.96 1211.34 L1195.37 1211.34 L1194.79 1211.34 L1194.2 1211.34 L1193.62 1211.34 L1193.03 1211.34 L1192.44 1211.34 L1191.86 1211.34 L1191.27 1211.34 L1190.68 1211.34 L1190.1 1211.34 L1189.51 1211.34 L1188.92 1211.34 L1188.34 1211.34 L1187.75 1211.34 L1187.16 1211.34 L1186.58 1211.34 L1185.99 1211.34 L1185.41 1211.34 L1184.82 1211.34 L1184.23 1211.34 L1183.65 1211.34 L1183.06 1211.34 L1182.47 1211.34 L1181.89 1211.34 L1181.3 1211.34 L1180.71 1211.34 L1180.13 1211.34 L1179.54 1211.34 L1178.96 1211.34 L1178.37 1211.34 L1177.78 1211.34 L1177.2 1211.34 L1176.61 1211.34 L1176.02 1211.34 L1175.44 1211.34 L1174.85 1211.34 L1174.26 1211.34 L1173.68 1211.34 L1173.09 1211.34 L1172.5 1211.34 L1171.92 1211.34 L1171.33 1211.34 L1170.75 1211.34 L1170.16 1211.34 L1169.57 1211.34 L1168.99 1211.34 L1168.4 1211.34 L1167.81 1211.34 L1167.23 1211.34 L1166.64 1211.34 L1166.05 1211.34 L1165.47 1211.34 L1164.88 1211.34 L1164.29 1211.34 L1163.71 1211.34 L1163.12 1211.34 L1162.54 1211.34 L1161.95 1211.34 L1161.36 1211.34 L1160.78 1211.34 L1160.19 1211.34 L1159.6 1211.34 L1159.02 1211.34 L1158.43 1211.34 L1157.84 1211.34 L1157.26 1211.34 L1156.67 1211.34 L1156.09 1211.34 L1155.5 1211.34 L1154.91 1211.34 L1154.33 1211.34 L1153.74 1211.34 L1153.15 1211.34 L1152.57 1211.34 L1151.98 1211.34 L1151.39 1211.34 L1150.81 1211.34 L1150.22 1211.34 L1149.63 1211.34 L1149.05 1211.34 L1148.46 1211.34 L1147.88 1211.34 L1147.29 1211.34 L1146.7 1211.34 L1146.12 1211.34 L1145.53 1211.34 L1144.94 1211.34 L1144.36 1211.34 L1143.77 1211.34 L1143.18 1211.34 L1142.6 1211.34 L1142.01 1211.34 L1141.42 1211.34 L1140.84 1211.34 L1140.25 1211.34 L1139.67 1211.34 L1139.08 1211.34 L1138.49 1211.34 L1137.91 1211.34 L1137.32 1211.34 L1136.73 1211.34 L1136.15 1211.34 L1135.56 1211.34 L1134.97 1211.34 L1134.39 1211.34 L1133.8 1211.34 L1133.21 1211.34 L1132.63 1211.34 L1132.04 1211.34 L1131.46 1211.34 L1130.87 1211.34 L1130.28 1211.34 L1129.7 1211.34 L1129.11 1211.34 L1128.52 1211.34 L1127.94 1211.34 L1127.35 1211.34 L1126.76 1211.34 L1126.18 1211.34 L1125.59 1211.34 L1125.01 1211.34 L1124.42 1211.34 L1123.83 1211.34 L1123.25 1211.34 L1122.66 1211.34 L1122.07 1211.34 L1121.49 1211.34 L1120.9 1211.34 L1120.31 1211.34 L1119.73 1211.34 L1119.14 1211.34 L1118.55 1211.34 L1117.97 1211.34 L1117.38 1211.34 L1116.8 1211.34 L1116.21 1211.34 L1115.62 1211.34 L1115.04 1211.34 L1114.45 1211.34 L1113.86 1211.34 L1113.28 1211.34 L1112.69 1211.34 L1112.1 1211.34 L1111.52 1211.34 L1110.93 1211.34 L1110.34 1211.34 L1109.76 1211.34 L1109.17 1211.34 L1108.59 1211.34 L1108 1211.34 L1107.41 1211.34 L1106.83 1211.34 L1106.24 1211.34 L1105.65 1211.34 L1105.07 1211.34 L1104.48 1211.34 L1103.89 1211.34 L1103.31 1211.34 L1102.72 1211.34 L1102.14 1211.34 L1101.55 1211.34 L1100.96 1211.34 L1100.38 1211.34 L1099.79 1211.34 L1099.2 1211.34 L1098.62 1211.34 L1098.03 1211.34 L1097.44 1211.34 L1096.86 1211.34 L1096.27 1211.34 L1095.68 1211.34 L1095.1 1211.34 L1094.51 1211.34 L1093.93 1211.34 L1093.34 1211.34 L1092.75 1211.34 L1092.17 1211.34 L1091.58 1211.34 L1090.99 1211.34 L1090.41 1211.34 L1089.82 1211.34 L1089.23 1211.34 L1088.65 1211.34 L1088.06 1211.34 L1087.47 1211.34 L1086.89 1211.34 L1086.3 1211.34 L1085.72 1211.34 L1085.13 1211.34 L1084.54 1211.34 L1083.96 1211.34 L1083.37 1211.34 L1082.78 1211.34 L1082.2 1211.34 L1081.61 1211.34 L1081.02 1211.34 L1080.44 1211.34 L1079.85 1211.34 L1079.26 1211.34 L1078.68 1211.34 L1078.09 1211.34 L1077.51 1211.34 L1076.92 1211.34 L1076.33 1211.34 L1075.75 1211.34 L1075.16 1211.34 L1074.57 1211.34 L1073.99 1211.34 L1073.4 1211.34 L1072.81 1211.34 L1072.23 1211.34 L1071.64 1211.34 L1071.06 1211.34 L1070.47 1211.34 L1069.88 1211.34 L1069.3 1211.34 L1068.71 1211.34 L1068.12 1211.34 L1067.54 1211.34 L1066.95 1211.34 L1066.36 1211.34 L1065.78 1211.34 L1065.19 1211.34 L1064.6 1211.34 L1064.02 1211.34 L1063.43 1211.34 L1062.85 1211.34 L1062.26 1211.34 L1061.67 1211.34 L1061.09 1211.34 L1060.5 1211.34 L1059.91 1211.34 L1059.33 1211.34 L1058.74 1211.34 L1058.15 1211.34 L1057.57 1211.34 L1056.98 1211.34 L1056.39 1211.34 L1055.81 1211.34 L1055.22 1211.34 L1054.64 1211.34 L1054.05 1211.34 L1053.46 1211.34 L1052.88 1211.34 L1052.29 1211.34 L1051.7 1211.34 L1051.12 1211.34 L1050.53 1211.34 L1049.94 1211.34 L1049.36 1211.34 L1048.77 1211.34 L1048.19 1211.34 L1047.6 1211.34 L1047.01 1211.34 L1046.43 1211.34 L1045.84 1211.34 L1045.25 1211.34 L1044.67 1211.34 L1044.08 1211.34 L1043.49 1211.34 L1042.91 1211.34 L1042.32 1211.34 L1041.73 1211.34 L1041.15 1211.34 L1040.56 1211.34 L1039.98 1211.34 L1039.39 1211.34 L1038.8 1211.34 L1038.22 1211.34 L1037.63 1211.34 L1037.04 1211.34 L1036.46 1211.34 L1035.87 1211.34 L1035.28 1211.34 L1034.7 1211.34 L1034.11 1211.34 L1033.52 1211.34 L1032.94 1211.34 L1032.35 1211.34 L1031.77 1211.34 L1031.18 1211.34 L1030.59 1211.34 L1030.01 1211.34 L1029.42 1211.34 L1028.83 1211.34 L1028.25 1211.34 L1027.66 1211.34 L1027.07 1211.34 L1026.49 1211.34 L1025.9 1211.34 L1025.32 1211.34 L1024.73 1211.34 L1024.14 1211.34 L1023.56 1211.34 L1022.97 1211.34 L1022.38 1211.34 L1021.8 1211.34 L1021.21 1211.34 L1020.62 1211.34 L1020.04 1211.34 L1019.45 1211.34 L1018.86 1211.34 L1018.28 1211.34 L1017.69 1211.34 L1017.11 1211.34 L1016.52 1211.34 L1015.93 1211.34 L1015.35 1211.34 L1014.76 1211.34 L1014.17 1211.34 L1013.59 1211.34 L1013 1211.34 L1012.41 1211.34 L1011.83 1211.34 L1011.24 1211.34 L1010.65 1211.34 L1010.07 1211.34 L1009.48 1211.34 L1008.9 1211.34 L1008.31 1211.34 L1007.72 1211.34 L1007.14 1211.34 L1006.55 1211.34 L1005.96 1211.34 L1005.38 1211.34 L1004.79 1211.34 L1004.2 1211.34 L1003.62 1211.34 L1003.03 1211.34 L1002.44 1211.34 L1001.86 1211.34 L1001.27 1211.34 L1000.69 1211.34 L1000.1 1211.34 L999.513 1211.34 L998.926 1211.34 L998.34 1211.34 L997.754 1211.34 L997.167 1211.34 L996.581 1211.34 L995.994 1211.34 L995.408 1211.34 L994.822 1211.34 L994.235 1211.34 L993.649 1211.34 L993.062 1211.34 L992.476 1211.34 L991.889 1211.34 L991.303 1211.34 L990.717 1211.34 L990.13 1211.34 L989.544 1211.34 L988.957 1211.34 L988.371 1211.34 L987.785 1211.34 L987.198 1211.34 L986.612 1211.34 L986.025 1211.34  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.71 986.612,1211.71 987.198,1211.71 987.785,1211.71 988.371,1211.71 988.957,1211.71 989.544,1211.71 990.13,1211.71 990.717,1211.71 991.303,1211.71 991.889,1211.71 992.476,1211.71 993.062,1211.71 993.649,1211.71 994.235,1211.71 994.822,1211.71 995.408,1211.71 995.994,1211.71 996.581,1211.71 997.167,1211.71 997.754,1211.71 998.34,1211.71 998.926,1211.71 999.513,1211.71 1000.1,1211.71 1000.69,1211.71 1001.27,1211.71 1001.86,1211.71 1002.44,1211.71 1003.03,1211.71 1003.62,1211.71 1004.2,1211.71 1004.79,1211.71 1005.38,1211.71 1005.96,1211.71 1006.55,1211.71 1007.14,1211.71 1007.72,1211.71 1008.31,1211.71 1008.9,1211.71 1009.48,1211.71 1010.07,1211.71 1010.65,1211.71 1011.24,1211.71 1011.83,1211.71 1012.41,1211.71 1013,1211.71 1013.59,1211.71 1014.17,1211.71 1014.76,1211.71 1015.35,1211.71 1015.93,1211.71 1016.52,1211.71 1017.11,1211.71 1017.69,1211.71 1018.28,1211.71 1018.86,1211.71 1019.45,1211.71 1020.04,1211.71 1020.62,1211.71 1021.21,1211.71 1021.8,1211.71 1022.38,1211.71 1022.97,1211.71 1023.56,1211.71 1024.14,1211.71 1024.73,1211.71 1025.32,1211.71 1025.9,1211.71 1026.49,1211.71 1027.07,1211.71 1027.66,1211.71 1028.25,1211.71 1028.83,1211.71 1029.42,1211.71 1030.01,1211.71 1030.59,1211.71 1031.18,1211.71 1031.77,1211.71 1032.35,1211.71 1032.94,1211.71 1033.52,1211.71 1034.11,1211.71 1034.7,1211.71 1035.28,1211.71 1035.87,1211.71 1036.46,1211.71 1037.04,1211.71 1037.63,1211.71 1038.22,1211.71 1038.8,1211.71 1039.39,1211.71 1039.98,1211.71 1040.56,1211.71 1041.15,1211.71 1041.73,1211.71 1042.32,1211.71 1042.91,1211.71 1043.49,1211.71 1044.08,1211.71 1044.67,1211.71 1045.25,1211.71 1045.84,1211.71 1046.43,1211.71 1047.01,1211.71 1047.6,1211.71 1048.19,1211.71 1048.77,1211.71 1049.36,1211.71 1049.94,1211.71 1050.53,1211.71 1051.12,1211.71 1051.7,1211.71 1052.29,1211.71 1052.88,1211.71 1053.46,1211.71 1054.05,1211.71 1054.64,1211.71 1055.22,1211.71 1055.81,1211.71 1056.39,1211.71 1056.98,1211.71 1057.57,1211.71 1058.15,1211.71 1058.74,1211.71 1059.33,1211.71 1059.91,1211.71 1060.5,1211.71 1061.09,1211.71 1061.67,1211.71 1062.26,1211.71 1062.85,1211.71 1063.43,1211.71 1064.02,1211.71 1064.6,1211.71 1065.19,1211.71 1065.78,1211.71 1066.36,1211.71 1066.95,1211.71 1067.54,1211.71 1068.12,1211.71 1068.71,1211.71 1069.3,1211.71 1069.88,1211.71 1070.47,1211.71 1071.06,1211.71 1071.64,1211.71 1072.23,1211.71 1072.81,1211.71 1073.4,1211.71 1073.99,1211.71 1074.57,1211.71 1075.16,1211.71 1075.75,1211.71 1076.33,1211.71 1076.92,1211.71 1077.51,1211.71 1078.09,1211.71 1078.68,1211.71 1079.26,1211.71 1079.85,1211.71 1080.44,1211.71 1081.02,1211.71 1081.61,1211.71 1082.2,1211.71 1082.78,1211.71 1083.37,1211.71 1083.96,1211.71 1084.54,1211.71 1085.13,1211.71 1085.72,1211.71 1086.3,1211.71 1086.89,1211.71 1087.47,1211.71 1088.06,1211.71 1088.65,1211.71 1089.23,1211.71 1089.82,1211.71 1090.41,1211.71 1090.99,1211.71 1091.58,1211.71 1092.17,1211.71 1092.75,1211.71 1093.34,1211.71 1093.93,1211.71 1094.51,1211.71 1095.1,1211.71 1095.68,1211.71 1096.27,1211.71 1096.86,1211.71 1097.44,1211.71 1098.03,1211.71 1098.62,1211.71 1099.2,1211.71 1099.79,1211.71 1100.38,1211.71 1100.96,1211.71 1101.55,1211.71 1102.14,1211.71 1102.72,1211.71 1103.31,1211.71 1103.89,1211.71 1104.48,1211.71 1105.07,1211.71 1105.65,1211.71 1106.24,1211.71 1106.83,1211.71 1107.41,1211.71 1108,1211.71 1108.59,1211.71 1109.17,1211.71 1109.76,1211.71 1110.34,1211.71 1110.93,1211.71 1111.52,1211.71 1112.1,1211.71 1112.69,1211.71 1113.28,1211.71 1113.86,1211.71 1114.45,1211.71 1115.04,1211.71 1115.62,1211.71 1116.21,1211.71 1116.8,1211.71 1117.38,1211.71 1117.97,1211.71 1118.55,1211.71 1119.14,1211.71 1119.73,1211.71 1120.31,1211.71 1120.9,1211.71 1121.49,1211.71 1122.07,1211.71 1122.66,1211.71 1123.25,1211.71 1123.83,1211.71 1124.42,1211.71 1125.01,1211.71 1125.59,1211.71 1126.18,1211.71 1126.76,1211.71 1127.35,1211.71 1127.94,1211.71 1128.52,1211.71 1129.11,1211.71 1129.7,1211.71 1130.28,1211.71 1130.87,1211.71 1131.46,1211.71 1132.04,1211.71 1132.63,1211.71 1133.21,1211.71 1133.8,1211.71 1134.39,1211.71 1134.97,1211.71 1135.56,1211.71 1136.15,1211.71 1136.73,1211.71 1137.32,1211.71 1137.91,1211.71 1138.49,1211.71 1139.08,1211.71 1139.67,1211.71 1140.25,1211.71 1140.84,1211.71 1141.42,1211.71 1142.01,1211.71 1142.6,1211.71 1143.18,1211.71 1143.77,1211.71 1144.36,1211.71 1144.94,1211.71 1145.53,1211.71 1146.12,1211.71 1146.7,1211.71 1147.29,1211.71 1147.88,1211.71 1148.46,1211.71 1149.05,1211.71 1149.63,1211.71 1150.22,1211.71 1150.81,1211.71 1151.39,1211.71 1151.98,1211.71 1152.57,1211.71 1153.15,1211.71 1153.74,1211.71 1154.33,1211.71 1154.91,1211.71 1155.5,1211.71 1156.09,1211.71 1156.67,1211.71 1157.26,1211.71 1157.84,1211.71 1158.43,1211.71 1159.02,1211.71 1159.6,1211.71 1160.19,1211.71 1160.78,1211.71 1161.36,1211.71 1161.95,1211.71 1162.54,1211.71 1163.12,1211.71 1163.71,1211.71 1164.29,1211.71 1164.88,1211.71 1165.47,1211.71 1166.05,1211.71 1166.64,1211.71 1167.23,1211.71 1167.81,1211.71 1168.4,1211.71 1168.99,1211.71 1169.57,1211.71 1170.16,1211.71 1170.75,1211.71 1171.33,1211.71 1171.92,1211.71 1172.5,1211.71 1173.09,1211.71 1173.68,1211.71 1174.26,1211.71 1174.85,1211.71 1175.44,1211.71 1176.02,1211.71 1176.61,1211.71 1177.2,1211.71 1177.78,1211.71 1178.37,1211.71 1178.96,1211.71 1179.54,1211.71 1180.13,1211.71 1180.71,1211.71 1181.3,1211.71 1181.89,1211.71 1182.47,1211.71 1183.06,1211.71 1183.65,1211.71 1184.23,1211.71 1184.82,1211.71 1185.41,1211.71 1185.99,1211.71 1186.58,1211.71 1187.16,1211.71 1187.75,1211.71 1188.34,1211.71 1188.92,1211.71 1189.51,1211.71 1190.1,1211.71 1190.68,1211.71 1191.27,1211.71 1191.86,1211.71 1192.44,1211.71 1193.03,1211.71 1193.62,1211.71 1194.2,1211.71 1194.79,1211.71 1195.37,1211.71 1195.96,1211.71 1196.55,1211.71 1197.13,1211.71 1197.72,1211.71 1198.31,1211.71 1198.89,1211.71 1199.48,1211.71 1200.07,1211.71 1200.65,1211.71 1201.24,1211.71 1201.83,1211.71 1202.41,1211.71 1203,1211.71 1203.58,1211.71 1204.17,1211.71 1204.76,1211.71 1205.34,1211.71 1205.93,1211.71 1206.52,1211.71 1207.1,1211.71 1207.69,1211.71 1208.28,1211.71 1208.86,1211.71 1209.45,1211.71 1210.03,1211.71 1210.62,1211.71 1211.21,1211.71 1211.79,1211.71 1212.38,1211.71 1212.97,1211.71 1213.55,1211.71 1214.14,1211.71 1214.73,1211.71 1215.31,1211.71 1215.9,1211.71 1216.49,1211.71 1217.07,1211.71 1217.66,1211.71 1218.24,1211.71 1218.83,1211.71 1219.42,1211.71 1220,1211.71 1220.59,1211.71 1221.18,1211.71 1221.76,1211.71 1222.35,1211.71 1222.94,1211.71 1223.52,1211.71 1224.11,1211.71 1224.7,1211.71 1225.28,1211.71 1225.87,1211.71 1226.45,1211.71 1227.04,1211.71 1227.63,1211.71 1228.21,1211.71 1228.8,1211.71 1229.39,1211.71 1229.97,1211.71 1230.56,1211.71 1231.15,1211.71 1231.73,1211.71 1232.32,1211.71 1232.91,1211.71 1233.49,1211.71 1234.08,1211.71 1234.66,1211.71 1235.25,1211.71 1235.84,1211.71 1236.42,1211.71 1237.01,1211.71 1237.6,1211.71 1238.18,1211.71 1238.77,1211.71 1239.36,1211.71 1239.94,1211.71 1240.53,1211.71 1241.11,1211.71 1241.7,1211.71 1242.29,1211.71 1242.87,1211.71 1243.46,1211.71 1244.05,1211.71 1244.63,1211.71 1245.22,1211.71 1245.81,1211.71 1246.39,1211.71 1246.98,1211.71 1247.57,1211.71 1248.15,1211.71 1248.74,1211.71 1249.32,1211.71 1249.91,1211.71 1250.5,1211.71 1251.08,1211.71 1251.67,1211.71 1252.26,1211.71 1252.84,1211.71 1253.43,1211.71 1254.02,1211.71 1254.6,1211.71 1255.19,1211.71 1255.78,1211.71 1256.36,1211.71 1256.95,1211.71 1257.53,1211.71 1258.12,1211.71 1258.71,1211.71 1259.29,1211.71 1259.88,1211.71 1260.47,1211.71 1261.05,1211.71 1261.64,1211.71 1262.23,1211.71 1262.81,1211.71 1263.4,1211.71 1263.98,1211.71 1264.57,1211.71 1265.16,1211.71 1265.74,1211.71 1266.33,1211.71 1266.92,1211.71 1267.5,1211.71 1268.09,1211.71 1268.68,1211.71 1269.26,1211.71 1269.85,1211.71 1270.44,1211.71 1271.02,1211.71 1271.61,1211.71 1272.19,1211.71 1272.78,1211.71 1273.37,1211.71 1273.95,1211.71 1274.54,1211.71 1275.13,1211.71 1275.71,1211.71 1276.3,1211.71 1276.89,1211.71 1277.47,1211.71 1278.06,1211.71 1278.65,1211.71 1279.23,1211.71 1279.82,1211.71 1280.4,1211.71 1280.99,1211.71 1281.58,1211.71 1282.16,1211.71 1282.75,1211.71 1283.34,1211.71 1283.92,1211.71 1284.51,1211.71 1285.1,1211.71 1285.68,1211.71 1286.27,1211.71 1286.86,1211.71 1287.44,1211.71 1288.03,1211.71 1288.61,1211.71 1289.2,1211.71 1289.79,1211.71 1290.37,1211.71 1290.96,1211.71 1291.55,1211.71 1292.13,1211.71 1292.72,1211.71 1293.31,1211.71 1293.89,1211.71 1294.48,1211.71 1295.06,1211.71 1295.65,1211.71 1296.24,1211.71 1296.82,1211.71 1297.41,1211.71 1298,1211.71 1298.58,1211.71 1299.17,1211.71 1299.76,1211.71 1300.34,1211.71 1300.93,1211.71 1301.52,1211.71 1302.1,1211.71 1302.69,1211.71 1303.27,1211.71 1303.86,1211.71 1304.45,1211.71 1305.03,1211.71 1305.62,1211.71 1306.21,1211.71 1306.79,1211.71 1307.38,1211.71 1307.97,1211.71 1308.55,1211.71 1309.14,1211.71 1309.73,1211.71 1310.31,1211.71 1310.9,1211.71 1311.48,1211.71 1312.07,1211.71 1312.66,1211.71 1313.24,1211.71 1313.83,1211.71 1314.42,1211.71 1315,1211.71 1315.59,1211.71 1316.18,1211.71 1316.76,1211.71 1317.35,1211.71 1317.93,1211.71 1318.52,1211.71 1319.11,1211.71 1319.69,1211.71 1320.28,1211.71 1320.87,1211.71 1321.45,1211.71 1322.04,1211.71 1322.63,1211.71 1323.21,1211.71 1323.8,1211.71 1324.39,1211.71 1324.97,1211.71 1325.56,1211.71 1326.14,1211.71 1326.73,1211.71 1327.32,1211.71 1327.9,1211.71 1328.49,1211.71 1329.08,1211.71 1329.66,1211.71 1330.25,1211.71 1330.84,1211.71 1331.42,1211.71 1332.01,1211.71 1332.6,1211.71 1333.18,1211.71 1333.77,1211.71 1334.35,1211.71 1334.94,1211.71 1335.53,1211.71 1336.11,1211.71 1336.7,1211.71 1337.29,1211.71 1337.87,1211.71 1338.46,1211.71 1339.05,1211.71 1339.63,1211.71 1340.22,1211.71 1340.8,1211.71 1341.39,1211.71 1341.98,1211.71 1342.56,1211.71 1343.15,1211.71 1343.74,1211.71 1344.32,1211.71 1344.91,1211.71 1345.5,1211.71 1346.08,1211.71 1346.67,1211.71 1347.26,1211.71 1347.84,1211.71 1348.43,1211.71 1349.01,1211.71 1349.6,1211.71 1350.19,1211.71 1350.77,1211.71 1351.36,1211.71 1351.95,1211.71 1352.53,1211.71 1353.12,1211.71 1353.71,1211.71 1354.29,1211.71 1354.88,1211.71 1355.47,1211.71 1356.05,1211.71 1356.64,1211.71 1357.22,1211.71 1357.81,1211.71 1358.4,1211.71 1358.98,1211.71 1359.57,1211.71 1360.16,1211.71 1360.74,1211.71 1361.33,1211.71 1361.92,1211.71 1362.5,1211.71 1363.09,1211.71 1363.68,1211.71 1364.26,1211.71 1364.85,1211.71 1365.43,1211.71 1366.02,1211.71 1366.61,1211.71 1367.19,1211.71 1367.78,1211.71 1368.37,1211.71 1368.95,1211.71 1369.54,1211.71 1370.13,1211.71 1370.71,1211.71 1371.3,1211.71 1371.88,1211.71 1372.47,1211.71 1373.06,1211.71 1373.64,1211.71 1374.23,1211.71 1374.82,1211.71 1375.4,1211.71 1375.99,1211.71 1376.58,1211.71 1377.16,1211.71 1377.75,1211.71 1378.34,1211.71 1378.92,1211.71 1379.51,1211.71 1380.09,1211.71 1380.68,1211.71 1381.27,1211.71 1381.85,1211.71 1382.44,1211.71 1383.03,1211.71 1383.61,1211.71 1384.2,1211.71 1384.79,1211.71 1385.37,1211.71 1385.96,1211.71 1386.55,1211.71 1387.13,1211.71 1387.72,1211.71 1388.3,1211.71 1388.89,1211.71 1389.48,1211.71 1390.06,1211.71 1390.65,1211.71 1391.24,1211.71 1391.82,1211.71 1392.41,1211.71 1393,1211.71 1393.58,1211.71 1394.17,1211.71 1394.75,1211.71 1395.34,1211.71 1395.93,1211.71 1396.51,1211.71 1397.1,1211.71 1397.69,1211.71 1398.27,1211.71 1398.86,1211.71 1399.45,1211.71 1400.03,1211.71 1400.62,1211.71 1401.21,1211.71 1401.79,1211.71 1402.38,1211.71 1402.96,1211.71 1403.55,1211.71 1404.14,1211.71 1404.72,1211.71 1405.31,1211.71 1405.9,1211.71 1406.48,1211.71 1407.07,1211.71 1407.66,1211.71 1408.24,1211.71 1408.83,1211.71 1409.42,1211.71 1410,1211.71 1410.59,1211.71 1411.17,1211.71 1411.76,1211.71 1412.35,1211.71 1412.93,1211.71 1413.52,1211.71 1414.11,1211.71 1414.69,1211.71 1415.28,1211.71 1415.87,1211.71 1416.45,1211.71 1417.04,1211.71 1417.63,1211.71 1418.21,1211.71 1418.8,1211.71 1419.38,1211.71 1419.97,1211.71 1420.56,1211.71 1421.14,1211.71 1421.73,1211.71 1422.32,1211.71 1422.9,1211.71 1423.49,1211.71 1424.08,1211.71 1424.66,1211.71 1425.25,1211.71 1425.83,1211.71 1426.42,1211.71 1427.01,1211.71 1427.59,1211.71 1428.18,1211.71 1428.77,1211.71 1429.35,1211.71 1429.94,1211.71 1430.53,1211.71 1431.11,1211.71 1431.7,1211.71 1432.29,1211.71 1432.87,1211.71 1433.46,1211.71 1434.04,1211.71 1434.63,1211.71 1435.22,1211.71 1435.8,1211.71 1436.39,1211.71 1436.98,1211.71 1437.56,1211.71 1438.15,1211.71 1438.74,1211.71 1439.32,1211.71 1439.91,1211.71 1440.5,1211.71 1441.08,1211.71 1441.67,1211.71 1442.25,1211.71 1442.84,1211.71 1443.43,1211.71 1444.01,1211.71 1444.6,1211.71 1445.19,1211.71 1445.77,1211.71 1446.36,1211.71 1446.95,1211.71 1447.53,1211.71 1448.12,1211.71 1448.7,1211.71 1449.29,1211.71 1449.88,1211.71 1450.46,1211.71 1451.05,1211.71 1451.64,1211.71 1452.22,1211.71 1452.81,1211.71 1453.4,1211.71 1453.98,1211.71 1454.57,1211.71 1455.16,1211.71 1455.74,1211.71 1456.33,1211.71 1456.91,1211.71 1457.5,1211.71 1458.09,1211.71 1458.67,1211.71 1459.26,1211.71 1459.85,1211.71 1460.43,1211.71 1461.02,1211.71 1461.61,1211.71 1462.19,1211.71 1462.78,1211.71 1463.37,1211.71 1463.95,1211.71 1464.54,1211.71 1465.12,1211.71 1465.71,1211.71 1466.3,1211.71 1466.88,1211.71 1467.47,1211.71 1468.06,1211.71 1468.64,1211.71 1469.23,1211.71 1469.82,1211.71 1470.4,1211.71 1470.99,1211.71 1471.57,1211.71 1472.16,1211.71 1472.75,1211.71 1473.33,1211.71 1473.92,1211.71 1474.51,1211.71 1475.09,1211.71 1475.68,1211.71 1476.27,1211.71 1476.85,1211.71 1477.44,1211.71 1478.03,1211.71 1478.61,1211.71 1479.2,1211.71 1479.78,1211.71 1480.37,1211.71 1480.96,1211.71 1481.54,1211.71 1482.13,1211.71 1482.72,1211.71 1483.3,1211.71 1483.89,1211.71 1484.48,1211.71 1485.06,1211.71 1485.65,1211.71 1486.24,1211.71 1486.82,1211.71 1487.41,1211.71 1487.99,1211.71 1488.58,1211.71 1489.17,1211.71 1489.75,1211.71 1490.34,1211.71 1490.93,1211.71 1491.51,1211.71 1492.1,1211.71 1492.69,1211.71 1493.27,1211.71 1493.86,1211.71 1494.45,1211.71 1495.03,1211.71 1495.62,1211.71 1496.2,1211.71 1496.79,1211.71 1497.38,1211.71 1497.96,1211.71 1498.55,1211.71 1499.14,1211.71 1499.72,1211.71 1500.31,1211.71 1500.9,1211.71 1501.48,1211.71 1502.07,1211.71 1502.65,1211.71 1503.24,1211.71 1503.83,1211.71 1504.41,1211.71 1505,1211.71 1505.59,1211.71 1506.17,1211.71 1506.76,1211.71 1507.35,1211.71 1507.93,1211.71 1508.52,1211.71 1509.11,1211.71 1509.69,1211.71 1510.28,1211.71 1510.86,1211.71 1511.45,1211.71 1512.04,1211.71 1512.62,1211.71 1513.21,1211.71 1513.8,1211.71 1514.38,1211.71 1514.97,1211.71 1515.56,1211.71 1516.14,1211.71 1516.73,1211.71 1517.32,1211.71 1517.9,1211.71 1518.49,1211.71 1519.07,1211.71 1519.66,1211.71 1520.25,1211.71 1520.83,1211.71 1521.42,1211.71 1522.01,1211.71 1522.59,1211.71 1523.18,1211.71 1523.77,1211.71 1524.35,1211.71 1524.94,1211.71 1525.52,1211.71 1526.11,1211.71 1526.7,1211.71 1527.28,1211.71 1527.87,1211.71 1528.46,1211.71 1529.04,1211.71 1529.63,1211.71 1530.22,1211.71 1530.8,1211.71 1531.39,1211.71 1531.98,1211.71 1532.56,1211.71 1533.15,1211.71 1533.73,1211.71 1534.32,1211.71 1534.91,1211.71 1535.49,1211.71 1536.08,1211.71 1536.67,1211.71 1537.25,1211.71 1537.84,1211.71 1538.43,1211.71 1539.01,1211.71 1539.6,1211.71 1540.19,1211.71 1540.77,1211.71 1541.36,1211.71 1541.94,1211.71 1542.53,1211.71 1543.12,1211.71 1543.7,1211.71 1544.29,1211.71 1544.88,1211.71 1545.46,1211.71 1546.05,1211.71 1546.64,1211.71 1547.22,1211.71 1547.81,1211.71 1548.4,1211.71 1548.98,1211.71 1549.57,1211.71 1550.15,1211.71 1550.74,1211.71 1551.33,1211.71 1551.91,1211.71 1552.5,1211.71 1553.09,1211.71 1553.67,1211.71 1554.26,1211.71 1554.85,1211.71 1555.43,1211.71 1556.02,1211.71 1556.6,1211.71 1557.19,1211.71 1557.78,1211.71 1558.36,1211.71 1558.95,1211.71 1559.54,1211.71 1560.12,1211.71 1560.71,1211.71 1561.3,1211.71 1561.88,1211.71 1562.47,1211.71 1563.06,1211.71 1563.64,1211.71 1564.23,1211.71 1564.81,1211.71 1565.4,1211.71 1565.99,1211.71 1566.57,1211.71 1567.16,1211.71 1567.75,1211.71 1568.33,1211.71 1568.92,1211.71 1569.51,1211.71 1570.09,1211.71 1570.68,1211.71 1571.27,1211.71 1571.85,1211.71 1572.44,1211.71 1573.02,1211.71 1573.61,1211.71 1574.2,1211.71 1574.78,1211.71 1575.37,1211.71 1575.96,1211.71 1576.54,1211.71 1577.13,1211.71 1577.72,1211.71 1578.3,1211.71 1578.89,1211.71 1579.47,1211.71 1580.06,1211.71 1580.65,1211.71 1581.23,1211.71 1581.82,1211.71 1582.41,1211.71 1582.99,1211.71 1583.58,1211.71 1584.17,1211.71 1584.75,1211.71 1585.34,1211.71 1585.93,1211.71 1586.51,1211.71 1587.1,1211.71 1587.68,1211.71 1588.27,1211.71 1588.86,1211.71 1589.44,1211.71 1590.03,1211.71 1590.62,1211.71 1591.2,1211.71 1591.79,1211.71 1592.38,1211.71 1592.96,1211.71 1593.55,1211.71 1594.14,1211.71 1594.72,1211.71 1595.31,1211.71 1595.89,1211.71 1596.48,1211.71 1597.07,1211.71 1597.65,1211.71 1598.24,1211.71 1598.83,1211.71 1599.41,1211.71 1600,1211.71 1600.59,1211.71 1601.17,1211.71 1601.76,1211.71 1602.34,1211.71 1602.93,1211.71 1603.52,1211.71 1604.1,1211.71 1604.69,1211.71 1605.28,1211.71 1605.86,1211.71 1606.45,1211.71 1607.04,1211.71 1607.62,1211.71 1608.21,1211.71 1608.8,1211.71 1609.38,1211.71 1609.97,1211.71 1610.55,1211.71 1611.14,1211.71 1611.73,1211.71 1612.31,1211.71 1612.9,1211.71 1613.49,1211.71 1614.07,1211.71 1614.66,1211.71 1615.25,1211.71 1615.83,1211.71 1616.42,1211.71 1617.01,1211.71 1617.59,1211.71 1618.18,1211.71 1618.76,1211.71 1619.35,1211.71 1619.94,1211.71 1620.52,1211.71 1621.11,1211.71 1621.7,1211.71 1622.28,1211.71 1622.87,1211.71 1623.46,1211.71 1624.04,1211.71 1624.63,1211.71 1625.22,1211.71 1625.8,1211.71 1626.39,1211.71 1626.97,1211.71 1627.56,1211.71 1628.15,1211.71 1628.73,1211.71 1629.32,1211.71 1629.91,1211.71 1630.49,1211.71 1631.08,1211.71 1631.67,1211.71 1632.25,1211.71 1632.84,1211.71 1633.42,1211.71 1634.01,1211.71 1634.6,1211.71 1635.18,1211.71 1635.77,1211.71 1636.36,1211.71 1636.94,1211.71 1637.53,1211.71 1638.12,1211.71 1638.7,1211.71 1639.29,1211.71 1639.88,1211.71 1640.46,1211.71 1641.05,1211.71 1641.63,1211.71 1642.22,1211.71 1642.81,1211.71 1643.39,1211.71 1643.98,1211.71 1644.57,1211.71 1645.15,1211.71 1645.74,1211.71 1646.33,1211.71 1646.91,1211.71 1647.5,1211.71 1648.09,1211.71 1648.67,1211.71 1649.26,1211.71 1649.84,1211.71 1650.43,1211.71 1651.02,1211.71 1651.6,1211.71 1652.19,1211.71 1652.78,1211.71 1653.36,1211.71 1653.95,1211.71 1654.54,1211.71 1655.12,1211.71 1655.71,1211.71 1656.29,1211.71 1656.88,1211.71 1657.47,1211.71 1658.05,1211.71 1658.64,1211.71 1659.23,1211.71 1659.81,1211.71 1660.4,1211.71 1660.99,1211.71 1661.57,1211.71 1662.16,1211.71 1662.75,1211.71 1663.33,1211.71 1663.92,1211.71 1664.5,1211.71 1665.09,1211.71 1665.68,1211.71 1666.26,1211.71 1666.85,1211.71 1667.44,1211.71 1668.02,1211.71 1668.61,1211.71 1669.2,1211.71 1669.78,1211.71 1670.37,1211.71 1670.96,1211.71 1671.54,1211.71 1672.13,1211.71 1672.71,1211.71 1673.3,1211.71 1673.89,1211.71 1674.47,1211.71 1675.06,1211.71 1675.65,1211.71 1676.23,1211.71 1676.82,1211.71 1677.41,1211.71 1677.99,1211.71 1678.58,1211.71 1679.17,1211.71 1679.75,1211.71 1680.34,1211.71 1680.92,1211.71 1681.51,1211.71 1682.1,1211.71 1682.68,1211.71 1683.27,1211.71 1683.86,1211.71 1684.44,1211.71 1685.03,1211.71 1685.62,1211.71 1686.2,1211.71 1686.79,1211.71 1687.37,1211.71 1687.96,1211.71 1688.55,1211.71 1689.13,1211.71 1689.72,1211.71 1690.31,1211.71 1690.89,1211.71 1691.48,1211.71 1692.07,1211.71 1692.65,1211.71 1693.24,1211.71 1693.83,1211.71 1694.41,1211.71 1695,1211.71 1695.58,1211.71 1696.17,1211.71 1696.76,1211.71 1697.34,1211.71 1697.93,1211.71 1698.52,1211.71 1699.1,1211.71 1699.69,1211.71 1700.28,1211.71 1700.86,1211.71 1701.45,1211.71 1702.04,1211.71 1702.62,1211.71 1703.21,1211.71 1703.79,1211.71 1704.38,1211.71 1704.97,1211.71 1705.55,1211.71 1706.14,1211.71 1706.73,1211.71 1707.31,1211.71 1707.9,1211.71 1708.49,1211.71 1709.07,1211.71 1709.66,1211.71 1710.24,1211.71 1710.83,1211.71 1711.42,1211.71 1712,1211.71 1712.59,1211.71 1713.18,1211.71 1713.76,1211.71 1714.35,1211.71 1714.94,1211.71 1715.52,1211.71 1716.11,1211.71 1716.7,1211.71 1717.28,1211.71 1717.87,1211.71 1718.45,1211.71 1719.04,1211.71 1719.63,1211.71 1720.21,1211.71 1720.8,1211.71 1721.39,1211.71 1721.97,1211.71 1722.56,1211.71 1723.15,1211.71 1723.73,1211.71 1724.32,1211.71 1724.91,1211.71 1725.49,1211.71 1726.08,1211.71 1726.66,1211.71 1727.25,1211.71 1727.84,1211.71 1728.42,1211.71 1729.01,1211.71 1729.6,1211.71 1730.18,1211.71 1730.77,1211.71 1731.36,1211.71 1731.94,1211.71 1732.53,1211.71 1733.11,1211.71 1733.7,1211.71 1734.29,1211.71 1734.87,1211.71 1735.46,1211.71 1736.05,1211.71 1736.63,1211.71 1737.22,1211.71 1737.81,1211.71 1738.39,1211.71 1738.98,1211.71 1739.57,1211.71 1740.15,1211.71 1740.74,1211.71 1741.32,1211.71 1741.91,1211.71 1742.5,1211.71 1743.08,1211.71 1743.67,1211.71 1744.26,1211.71 1744.84,1211.71 1745.43,1211.71 1746.02,1211.71 1746.6,1211.71 1747.19,1211.71 1747.78,1211.71 1748.36,1211.71 1748.95,1211.71 1749.53,1211.71 1750.12,1211.71 1750.71,1211.71 1751.29,1211.71 1751.88,1211.71 1752.47,1211.71 1753.05,1211.71 1753.64,1211.71 1754.23,1211.71 1754.81,1211.71 1755.4,1211.71 1755.99,1211.71 1756.57,1211.71 1757.16,1211.71 1757.74,1211.71 1758.33,1211.71 1758.92,1211.71 1759.5,1211.71 1760.09,1211.71 1760.68,1211.71 1761.26,1211.71 1761.85,1211.71 1762.44,1211.71 1763.02,1211.71 1763.61,1211.71 1764.19,1211.71 1764.78,1211.71 1765.37,1211.71 1765.95,1211.71 1766.54,1211.71 1767.13,1211.71 1767.71,1211.71 1768.3,1211.71 1768.89,1211.71 1769.47,1211.71 1770.06,1211.71 1770.65,1211.71 1771.23,1211.71 1771.82,1211.71 1772.4,1211.71 1772.99,1211.71 1773.58,1211.71 1774.16,1211.71 1774.75,1211.71 1775.34,1211.71 1775.92,1211.71 1776.51,1211.71 1777.1,1211.71 1777.68,1211.71 1778.27,1211.71 1778.86,1211.71 1779.44,1211.71 1780.03,1211.71 1780.61,1211.71 1781.2,1211.71 1781.79,1211.71 1782.37,1211.71 1782.96,1211.71 1783.55,1211.71 1784.13,1211.71 1784.72,1211.71 1785.31,1211.71 1785.89,1211.71 1786.48,1211.71 1787.06,1211.71 1787.65,1211.71 1788.24,1211.71 1788.82,1211.71 1789.41,1211.71 1790,1211.71 1790.58,1211.71 1791.17,1211.71 1791.76,1211.71 1792.34,1211.71 1792.93,1211.71 1793.52,1211.71 1794.1,1211.71 1794.69,1211.71 1795.27,1211.71 1795.86,1211.71 1796.45,1211.71 1797.03,1211.71 1797.62,1211.71 1798.21,1211.71 1798.79,1211.71 1799.38,1211.71 1799.97,1211.71 1800.55,1211.71 1801.14,1211.71 1801.73,1211.71 1802.31,1211.71 1802.9,1211.71 1803.48,1211.71 1804.07,1211.71 1804.66,1211.71 1805.24,1211.71 1805.83,1211.71 1806.42,1211.71 1807,1211.71 1807.59,1211.71 1808.18,1211.71 1808.76,1211.71 1809.35,1211.71 1809.94,1211.71 1810.52,1211.71 1811.11,1211.71 1811.69,1211.71 1812.28,1211.71 1812.87,1211.71 1813.45,1211.71 1814.04,1211.71 1814.63,1211.71 1815.21,1211.71 1815.8,1211.71 1816.39,1211.71 1816.97,1211.71 1817.56,1211.71 1818.14,1211.71 1818.73,1211.71 1819.32,1211.71 1819.9,1211.71 1820.49,1211.71 1821.08,1211.71 1821.66,1211.71 1822.25,1211.71 1822.84,1211.71 1823.42,1211.71 1824.01,1211.71 1824.6,1211.71 1825.18,1211.71 1825.77,1211.71 1826.35,1211.71 1826.94,1211.71 1827.53,1211.71 1828.11,1211.71 1828.7,1211.71 1829.29,1211.71 1829.87,1211.71 1830.46,1211.71 1831.05,1211.71 1831.63,1211.71 1832.22,1211.71 1832.81,1211.71 1833.39,1211.71 1833.98,1211.71 1834.56,1211.71 1835.15,1211.71 1835.74,1211.71 1836.32,1211.71 1836.91,1211.71 1837.5,1211.71 1838.08,1211.71 1838.67,1211.71 1839.26,1211.71 1839.84,1211.71 1840.43,1211.71 1841.01,1211.71 1841.6,1211.71 1842.19,1211.71 1842.77,1211.71 1843.36,1211.71 1843.95,1211.71 1844.53,1211.71 1845.12,1211.71 1845.71,1211.71 1846.29,1211.71 1846.88,1211.71 1847.47,1211.71 1848.05,1211.71 1848.64,1211.71 1849.22,1211.71 1849.81,1211.71 1850.4,1211.71 1850.98,1211.71 1851.57,1211.71 1852.16,1211.71 1852.74,1211.71 1853.33,1211.71 1853.92,1211.71 1854.5,1211.71 1855.09,1211.71 1855.68,1211.71 1856.26,1211.71 1856.85,1211.71 1857.43,1211.71 1858.02,1211.71 1858.61,1211.71 1859.19,1211.71 1859.78,1211.71 1860.37,1211.71 1860.95,1211.71 1861.54,1211.71 1862.13,1211.71 1862.71,1211.71 1863.3,1211.71 1863.88,1211.71 1864.47,1211.71 1865.06,1211.71 1865.64,1211.71 1866.23,1211.71 1866.82,1211.71 1867.4,1211.71 1867.99,1211.71 1868.58,1211.71 1869.16,1211.71 1869.75,1211.71 1870.34,1211.71 1870.92,1211.71 1871.51,1211.71 1872.09,1211.71 1872.68,1211.71 1873.27,1211.71 1873.85,1211.71 1874.44,1211.71 1875.03,1211.71 1875.61,1211.71 1876.2,1211.71 1876.79,1211.71 1877.37,1211.71 1877.96,1211.71 1878.55,1211.71 1879.13,1211.71 1879.72,1211.71 1880.3,1211.71 1880.89,1211.71 1881.48,1211.71 1882.06,1211.71 1882.65,1211.71 1883.24,1211.71 1883.82,1211.71 1884.41,1211.71 1885,1211.71 1885.58,1211.71 1886.17,1211.71 1886.76,1211.71 1887.34,1211.71 1887.93,1211.71 1888.51,1211.71 1889.1,1211.71 1889.69,1211.71 1890.27,1211.71 1890.86,1211.71 1891.45,1211.71 1892.03,1211.71 1892.62,1211.71 1893.21,1211.71 1893.79,1211.71 1894.38,1211.71 1894.96,1211.71 1895.55,1211.71 1896.14,1211.71 1896.72,1211.71 1897.31,1211.71 1897.9,1211.71 1898.48,1211.71 1899.07,1211.71 1899.66,1211.71 1900.24,1211.71 1900.83,1211.71 1901.42,1211.71 1902,1211.71 1902.59,1211.71 1903.17,1211.71 1903.76,1211.71 1904.35,1211.71 1904.93,1211.71 1905.52,1211.71 1906.11,1211.71 1906.69,1211.71 1907.28,1211.71 1907.87,1211.71 1908.45,1211.71 1909.04,1211.71 1909.63,1211.71 1910.21,1211.71 1910.8,1211.71 1911.38,1211.71 1911.97,1211.71 1912.56,1211.71 1913.14,1211.71 1913.73,1211.71 1914.32,1211.71 1914.9,1211.71 1915.49,1211.71 1916.08,1211.71 1916.66,1211.71 1917.25,1211.71 1917.83,1211.71 1918.42,1211.71 1919.01,1211.71 1919.59,1211.71 1920.18,1211.71 1920.77,1211.71 1921.35,1211.71 1921.94,1211.71 1922.53,1211.71 1923.11,1211.71 1923.7,1211.71 1924.29,1211.71 1924.87,1211.71 1925.46,1211.71 1926.04,1211.71 1926.63,1211.71 1927.22,1211.71 1927.8,1211.71 1928.39,1211.71 1928.98,1211.71 1929.56,1211.71 1930.15,1211.71 1930.74,1211.71 1931.32,1211.71 1931.91,1211.71 1932.5,1211.71 1933.08,1211.71 1933.67,1211.71 1934.25,1211.71 1934.84,1211.71 1935.43,1211.71 1936.01,1211.71 1936.6,1211.71 1937.19,1211.71 1937.77,1211.71 1938.36,1211.71 1938.95,1211.71 1939.53,1211.71 1940.12,1211.71 1940.71,1211.71 1941.29,1211.71 1941.88,1211.71 1942.46,1211.71 1943.05,1211.71 1943.64,1211.71 1944.22,1211.71 1944.81,1211.71 1945.4,1211.71 1945.98,1211.71 1946.57,1211.71 1947.16,1211.71 1947.74,1211.71 1948.33,1211.71 1948.91,1211.71 1949.5,1211.71 1950.09,1211.71 1950.67,1211.71 1951.26,1211.71 1951.85,1211.71 1952.43,1211.71 1953.02,1211.71 1953.61,1211.71 1954.19,1211.71 1954.78,1211.71 1955.37,1211.71 1955.95,1211.71 1956.54,1211.71 1957.12,1211.71 1957.71,1211.71 1958.3,1211.71 1958.88,1211.71 1959.47,1211.71 1960.06,1211.71 1960.64,1211.71 1961.23,1211.71 1961.82,1211.71 1962.4,1211.71 1962.99,1211.71 1963.58,1211.71 1964.16,1211.71 1964.75,1211.71 1965.33,1211.71 1965.92,1211.71 1966.51,1211.71 1967.09,1211.71 1967.68,1211.71 1968.27,1211.71 1968.85,1211.71 1969.44,1211.71 1970.03,1211.71 1970.61,1211.71 1971.2,1211.71 1971.78,1211.71 1972.37,1211.71 1972.96,1211.71 1973.54,1211.71 1974.13,1211.71 1974.72,1211.71 1975.3,1211.71 1975.89,1211.71 1976.48,1211.71 1977.06,1211.71 1977.65,1211.71 1978.24,1211.71 1978.82,1211.71 1979.41,1211.71 1979.99,1211.71 1980.58,1211.71 1981.17,1211.71 1981.75,1211.71 1982.34,1211.71 1982.93,1211.71 1983.51,1211.71 1984.1,1211.71 1984.69,1211.71 1985.27,1211.71 1985.86,1211.71 1986.45,1211.71 1987.03,1211.71 1987.62,1211.71 1988.2,1211.71 1988.79,1211.71 1989.38,1211.71 1989.96,1211.71 1990.55,1211.71 1991.14,1211.71 1991.72,1211.71 1992.31,1211.71 1992.9,1211.71 1993.48,1211.71 1994.07,1211.71 1994.65,1211.71 1995.24,1211.71 1995.83,1211.71 1996.41,1211.71 1997,1211.71 1997.59,1211.71 1998.17,1211.71 1998.76,1211.71 1999.35,1211.71 1999.93,1211.71 2000.52,1211.71 2001.11,1211.71 2001.69,1211.71 2002.28,1211.71 2002.86,1211.71 2003.45,1211.71 2004.04,1211.71 2004.62,1211.71 2005.21,1211.71 2005.8,1211.71 2006.38,1211.71 2006.97,1211.71 2007.56,1211.71 2008.14,1211.71 2008.73,1211.71 2009.32,1211.71 2009.9,1211.71 2010.49,1211.71 2011.07,1211.71 2011.66,1211.71 2012.25,1211.71 2012.83,1211.71 2013.42,1211.71 2014.01,1211.71 2014.59,1211.71 2015.18,1211.71 2015.77,1211.71 2016.35,1211.71 2016.94,1211.71 2017.53,1211.71 2018.11,1211.71 2018.7,1211.71 2019.28,1211.71 2019.87,1211.71 2020.46,1211.71 2021.04,1211.71 2021.63,1211.71 2022.22,1211.71 2022.8,1211.71 2023.39,1211.71 2023.98,1211.71 2024.56,1211.71 2025.15,1211.71 2025.73,1211.71 2026.32,1211.71 2026.91,1211.71 2027.49,1211.71 2028.08,1211.71 2028.67,1211.71 2029.25,1211.71 2029.84,1211.71 2030.43,1211.71 2031.01,1211.71 2031.6,1211.71 2032.19,1211.71 2032.77,1211.71 2033.36,1211.71 2033.94,1211.71 2034.53,1211.71 2035.12,1211.71 2035.7,1211.71 2036.29,1211.71 2036.88,1211.71 2037.46,1211.71 2038.05,1211.71 2038.64,1211.71 2039.22,1211.71 2039.81,1211.71 2040.4,1211.71 2040.98,1211.71 2041.57,1211.71 2042.15,1211.71 2042.74,1211.71 2043.33,1211.71 2043.91,1211.71 2044.5,1211.71 2045.09,1211.71 2045.67,1211.71 2046.26,1211.71 2046.85,1211.71 2047.43,1211.71 2048.02,1211.71 2048.6,1211.71 2049.19,1211.71 2049.78,1211.71 2050.36,1211.71 2050.95,1211.71 2051.54,1211.71 2052.12,1211.71 2052.71,1211.71 2053.3,1211.71 2053.88,1211.71 2054.47,1211.71 2055.06,1211.71 2055.64,1211.71 2056.23,1211.71 2056.81,1211.71 2057.4,1211.71 2057.99,1211.71 2058.57,1211.71 2059.16,1211.71 2059.75,1211.71 2060.33,1211.71 2060.92,1211.71 2061.51,1211.71 2062.09,1211.71 2062.68,1211.71 2063.27,1211.71 2063.85,1211.71 2064.44,1211.71 2065.02,1211.71 2065.61,1211.71 2066.2,1211.71 2066.78,1211.71 2067.37,1211.71 2067.96,1211.71 2068.54,1211.71 2069.13,1211.71 2069.72,1211.71 2070.3,1211.71 2070.89,1211.71 2071.48,1211.71 2072.06,1211.71 2072.65,1211.71 2073.23,1211.71 2073.82,1211.71 2074.41,1211.71 2074.99,1211.71 2075.58,1211.71 2076.17,1211.71 2076.75,1211.71 2077.34,1211.71 2077.93,1211.71 2078.51,1211.71 2079.1,1211.71 2079.68,1211.71 2080.27,1211.71 2080.86,1211.71 2081.44,1211.71 2082.03,1211.71 2082.62,1211.71 2083.2,1211.71 2083.79,1211.71 2084.38,1211.71 2084.96,1211.71 2085.55,1211.71 2086.14,1211.71 2086.72,1211.71 2087.31,1211.71 2087.89,1211.71 2088.48,1211.71 2089.07,1211.71 2089.65,1211.71 2090.24,1211.71 2090.83,1211.71 2091.41,1211.71 2092,1211.71 2092.59,1211.71 2093.17,1211.71 2093.76,1211.71 2094.35,1211.71 2094.93,1211.71 2095.52,1211.71 2096.1,1211.71 2096.69,1211.71 2097.28,1211.71 2097.86,1211.71 2098.45,1211.71 2099.04,1211.71 2099.62,1211.71 2100.21,1211.71 2100.8,1211.71 2101.38,1211.71 2101.97,1211.71 2102.55,1211.71 2103.14,1211.71 2103.73,1211.71 2104.31,1211.71 2104.9,1211.71 2105.49,1211.71 2106.07,1211.71 2106.66,1211.71 2107.25,1211.71 2107.83,1211.71 2108.42,1211.71 2109.01,1211.71 2109.59,1211.71 2110.18,1211.71 2110.76,1211.71 2111.35,1211.71 2111.94,1211.71 2112.52,1211.71 2113.11,1211.71 2113.7,1211.71 2114.28,1211.71 2114.87,1211.71 2115.46,1211.71 2116.04,1211.71 2116.63,1211.71 2117.22,1211.71 2117.8,1211.71 2118.39,1211.71 2118.97,1211.71 2119.56,1211.71 2120.15,1211.71 2120.73,1211.71 2121.32,1211.71 2121.91,1211.71 2122.49,1211.71 2123.08,1211.71 2123.67,1211.71 2124.25,1211.71 2124.84,1211.71 2125.42,1211.71 2126.01,1211.71 2126.6,1211.71 2127.18,1211.71 2127.77,1211.71 2128.36,1211.71 2128.94,1211.71 2129.53,1211.71 2130.12,1211.71 2130.7,1211.71 2131.29,1211.71 2131.88,1211.71 2132.46,1211.71 2133.05,1211.71 2133.63,1211.71 2134.22,1211.71 2134.81,1211.71 2135.39,1211.71 2135.98,1211.71 2136.57,1211.71 2137.15,1211.71 2137.74,1211.71 2138.33,1211.71 2138.91,1211.71 2139.5,1211.71 2140.09,1211.71 2140.67,1211.71 2141.26,1211.71 2141.84,1211.71 2142.43,1211.71 2143.02,1211.71 2143.6,1211.71 2144.19,1211.71 2144.78,1211.71 2145.36,1211.71 2145.95,1211.71 2146.54,1211.71 2147.12,1211.71 2147.71,1211.71 2148.3,1211.71 2148.88,1211.71 2149.47,1211.71 2150.05,1211.71 2150.64,1211.71 2151.23,1211.71 2151.81,1211.71 2152.4,1211.71 2152.99,1211.71 2153.57,1211.71 2154.16,1211.71 2154.75,1211.71 2155.33,1211.71 2155.92,1211.71 2156.5,1211.71 2157.09,1211.71 2157.68,1211.71 2158.26,1211.71 \"/>\n<path clip-path=\"url(#clip162)\" d=\"M986.025 1211.54 L986.612 1211.54 L987.198 1211.54 L987.785 1211.54 L988.371 1211.54 L988.957 1211.54 L989.544 1211.54 L990.13 1211.54 L990.717 1211.54 L991.303 1211.54 L991.889 1211.54 L992.476 1211.54 L993.062 1211.54 L993.649 1211.54 L994.235 1211.54 L994.822 1211.54 L995.408 1211.54 L995.994 1211.54 L996.581 1211.54 L997.167 1211.54 L997.754 1211.54 L998.34 1211.54 L998.926 1211.54 L999.513 1211.54 L1000.1 1211.54 L1000.69 1211.54 L1001.27 1211.54 L1001.86 1211.54 L1002.44 1211.54 L1003.03 1211.54 L1003.62 1211.54 L1004.2 1211.54 L1004.79 1211.54 L1005.38 1211.54 L1005.96 1211.54 L1006.55 1211.54 L1007.14 1211.54 L1007.72 1211.54 L1008.31 1211.54 L1008.9 1211.54 L1009.48 1211.54 L1010.07 1211.54 L1010.65 1211.54 L1011.24 1211.54 L1011.83 1211.54 L1012.41 1211.54 L1013 1211.54 L1013.59 1211.54 L1014.17 1211.54 L1014.76 1211.54 L1015.35 1211.54 L1015.93 1211.54 L1016.52 1211.54 L1017.11 1211.54 L1017.69 1211.54 L1018.28 1211.54 L1018.86 1211.54 L1019.45 1211.54 L1020.04 1211.54 L1020.62 1211.54 L1021.21 1211.54 L1021.8 1211.54 L1022.38 1211.54 L1022.97 1211.54 L1023.56 1211.54 L1024.14 1211.54 L1024.73 1211.54 L1025.32 1211.54 L1025.9 1211.54 L1026.49 1211.54 L1027.07 1211.54 L1027.66 1211.54 L1028.25 1211.54 L1028.83 1211.54 L1029.42 1211.54 L1030.01 1211.54 L1030.59 1211.54 L1031.18 1211.54 L1031.77 1211.54 L1032.35 1211.54 L1032.94 1211.54 L1033.52 1211.54 L1034.11 1211.54 L1034.7 1211.54 L1035.28 1211.54 L1035.87 1211.54 L1036.46 1211.54 L1037.04 1211.54 L1037.63 1211.54 L1038.22 1211.54 L1038.8 1211.54 L1039.39 1211.54 L1039.98 1211.54 L1040.56 1211.54 L1041.15 1211.54 L1041.73 1211.54 L1042.32 1211.54 L1042.91 1211.54 L1043.49 1211.54 L1044.08 1211.54 L1044.67 1211.54 L1045.25 1211.54 L1045.84 1211.54 L1046.43 1211.54 L1047.01 1211.54 L1047.6 1211.54 L1048.19 1211.54 L1048.77 1211.54 L1049.36 1211.54 L1049.94 1211.54 L1050.53 1211.54 L1051.12 1211.54 L1051.7 1211.54 L1052.29 1211.54 L1052.88 1211.54 L1053.46 1211.54 L1054.05 1211.54 L1054.64 1211.54 L1055.22 1211.54 L1055.81 1211.54 L1056.39 1211.54 L1056.98 1211.54 L1057.57 1211.54 L1058.15 1211.54 L1058.74 1211.54 L1059.33 1211.54 L1059.91 1211.54 L1060.5 1211.54 L1061.09 1211.54 L1061.67 1211.54 L1062.26 1211.54 L1062.85 1211.54 L1063.43 1211.54 L1064.02 1211.54 L1064.6 1211.54 L1065.19 1211.54 L1065.78 1211.54 L1066.36 1211.54 L1066.95 1211.54 L1067.54 1211.54 L1068.12 1211.54 L1068.71 1211.54 L1069.3 1211.54 L1069.88 1211.54 L1070.47 1211.54 L1071.06 1211.54 L1071.64 1211.54 L1072.23 1211.54 L1072.81 1211.54 L1073.4 1211.54 L1073.99 1211.54 L1074.57 1211.54 L1075.16 1211.54 L1075.75 1211.54 L1076.33 1211.54 L1076.92 1211.54 L1077.51 1211.54 L1078.09 1211.54 L1078.68 1211.54 L1079.26 1211.54 L1079.85 1211.54 L1080.44 1211.54 L1081.02 1211.54 L1081.61 1211.54 L1082.2 1211.54 L1082.78 1211.54 L1083.37 1211.54 L1083.96 1211.54 L1084.54 1211.54 L1085.13 1211.54 L1085.72 1211.54 L1086.3 1211.54 L1086.89 1211.54 L1087.47 1211.54 L1088.06 1211.54 L1088.65 1211.54 L1089.23 1211.54 L1089.82 1211.54 L1090.41 1211.54 L1090.99 1211.54 L1091.58 1211.54 L1092.17 1211.54 L1092.75 1211.54 L1093.34 1211.54 L1093.93 1211.54 L1094.51 1211.54 L1095.1 1211.54 L1095.68 1211.54 L1096.27 1211.54 L1096.86 1211.54 L1097.44 1211.54 L1098.03 1211.54 L1098.62 1211.54 L1099.2 1211.54 L1099.79 1211.54 L1100.38 1211.54 L1100.96 1211.54 L1101.55 1211.54 L1102.14 1211.54 L1102.72 1211.54 L1103.31 1211.54 L1103.89 1211.54 L1104.48 1211.54 L1105.07 1211.54 L1105.65 1211.54 L1106.24 1211.54 L1106.83 1211.54 L1107.41 1211.54 L1108 1211.54 L1108.59 1211.54 L1109.17 1211.54 L1109.76 1211.54 L1110.34 1211.54 L1110.93 1211.54 L1111.52 1211.54 L1112.1 1211.54 L1112.69 1211.54 L1113.28 1211.54 L1113.86 1211.54 L1114.45 1211.54 L1115.04 1211.54 L1115.62 1211.54 L1116.21 1211.54 L1116.8 1211.54 L1117.38 1211.54 L1117.97 1211.54 L1118.55 1211.54 L1119.14 1211.54 L1119.73 1211.54 L1120.31 1211.54 L1120.9 1211.54 L1121.49 1211.54 L1122.07 1211.54 L1122.66 1211.54 L1123.25 1211.54 L1123.83 1211.54 L1124.42 1211.54 L1125.01 1211.54 L1125.59 1211.54 L1126.18 1211.54 L1126.76 1211.54 L1127.35 1211.54 L1127.94 1211.54 L1128.52 1211.54 L1129.11 1211.54 L1129.7 1211.54 L1130.28 1211.54 L1130.87 1211.54 L1131.46 1211.54 L1132.04 1211.54 L1132.63 1211.54 L1133.21 1211.54 L1133.8 1211.54 L1134.39 1211.54 L1134.97 1211.54 L1135.56 1211.54 L1136.15 1211.54 L1136.73 1211.54 L1137.32 1211.54 L1137.91 1211.54 L1138.49 1211.54 L1139.08 1211.54 L1139.67 1211.54 L1140.25 1211.54 L1140.84 1211.54 L1141.42 1211.54 L1142.01 1211.54 L1142.6 1211.54 L1143.18 1211.54 L1143.77 1211.54 L1144.36 1211.54 L1144.94 1211.54 L1145.53 1211.54 L1146.12 1211.54 L1146.7 1211.54 L1147.29 1211.54 L1147.88 1211.54 L1148.46 1211.54 L1149.05 1211.54 L1149.63 1211.54 L1150.22 1211.54 L1150.81 1211.54 L1151.39 1211.54 L1151.98 1211.54 L1152.57 1211.54 L1153.15 1211.54 L1153.74 1211.54 L1154.33 1211.54 L1154.91 1211.54 L1155.5 1211.54 L1156.09 1211.54 L1156.67 1211.54 L1157.26 1211.54 L1157.84 1211.54 L1158.43 1211.54 L1159.02 1211.54 L1159.6 1211.54 L1160.19 1211.54 L1160.78 1211.54 L1161.36 1211.54 L1161.95 1211.54 L1162.54 1211.54 L1163.12 1211.54 L1163.71 1211.54 L1164.29 1211.54 L1164.88 1211.54 L1165.47 1211.54 L1166.05 1211.54 L1166.64 1211.54 L1167.23 1211.54 L1167.81 1211.54 L1168.4 1211.54 L1168.99 1211.54 L1169.57 1211.54 L1170.16 1211.54 L1170.75 1211.54 L1171.33 1211.54 L1171.92 1211.54 L1172.5 1211.54 L1173.09 1211.54 L1173.68 1211.54 L1174.26 1211.54 L1174.85 1211.54 L1175.44 1211.54 L1176.02 1211.54 L1176.61 1211.54 L1177.2 1211.54 L1177.78 1211.54 L1178.37 1211.54 L1178.96 1211.54 L1179.54 1211.54 L1180.13 1211.54 L1180.71 1211.54 L1181.3 1211.54 L1181.89 1211.54 L1182.47 1211.54 L1183.06 1211.54 L1183.65 1211.54 L1184.23 1211.54 L1184.82 1211.54 L1185.41 1211.54 L1185.99 1211.54 L1186.58 1211.54 L1187.16 1211.54 L1187.75 1211.54 L1188.34 1211.54 L1188.92 1211.54 L1189.51 1211.54 L1190.1 1211.54 L1190.68 1211.54 L1191.27 1211.54 L1191.86 1211.54 L1192.44 1211.54 L1193.03 1211.54 L1193.62 1211.54 L1194.2 1211.54 L1194.79 1211.54 L1195.37 1211.54 L1195.96 1211.54 L1196.55 1211.54 L1197.13 1211.54 L1197.72 1211.54 L1198.31 1211.54 L1198.89 1211.54 L1199.48 1211.54 L1200.07 1211.54 L1200.65 1211.54 L1201.24 1211.54 L1201.83 1211.54 L1202.41 1211.54 L1203 1211.54 L1203.58 1211.54 L1204.17 1211.54 L1204.76 1211.54 L1205.34 1211.54 L1205.93 1211.54 L1206.52 1211.54 L1207.1 1211.54 L1207.69 1211.54 L1208.28 1211.54 L1208.86 1211.54 L1209.45 1211.54 L1210.03 1211.54 L1210.62 1211.54 L1211.21 1211.54 L1211.79 1211.54 L1212.38 1211.54 L1212.97 1211.54 L1213.55 1211.54 L1214.14 1211.54 L1214.73 1211.54 L1215.31 1211.54 L1215.9 1211.54 L1216.49 1211.54 L1217.07 1211.54 L1217.66 1211.54 L1218.24 1211.54 L1218.83 1211.54 L1219.42 1211.54 L1220 1211.54 L1220.59 1211.54 L1221.18 1211.54 L1221.76 1211.54 L1222.35 1211.54 L1222.94 1211.54 L1223.52 1211.54 L1224.11 1211.54 L1224.7 1211.54 L1225.28 1211.54 L1225.87 1211.54 L1226.45 1211.54 L1227.04 1211.54 L1227.63 1211.54 L1228.21 1211.54 L1228.8 1211.54 L1229.39 1211.54 L1229.97 1211.54 L1230.56 1211.54 L1231.15 1211.54 L1231.73 1211.54 L1232.32 1211.54 L1232.91 1211.54 L1233.49 1211.54 L1234.08 1211.54 L1234.66 1211.54 L1235.25 1211.54 L1235.84 1211.54 L1236.42 1211.54 L1237.01 1211.54 L1237.6 1211.54 L1238.18 1211.54 L1238.77 1211.54 L1239.36 1211.54 L1239.94 1211.54 L1240.53 1211.54 L1241.11 1211.54 L1241.7 1211.54 L1242.29 1211.54 L1242.87 1211.54 L1243.46 1211.54 L1244.05 1211.54 L1244.63 1211.54 L1245.22 1211.54 L1245.81 1211.54 L1246.39 1211.54 L1246.98 1211.54 L1247.57 1211.54 L1248.15 1211.54 L1248.74 1211.54 L1249.32 1211.54 L1249.91 1211.54 L1250.5 1211.54 L1251.08 1211.54 L1251.67 1211.54 L1252.26 1211.54 L1252.84 1211.54 L1253.43 1211.54 L1254.02 1211.54 L1254.6 1211.54 L1255.19 1211.54 L1255.78 1211.54 L1256.36 1211.54 L1256.95 1211.54 L1257.53 1211.54 L1258.12 1211.54 L1258.71 1211.54 L1259.29 1211.54 L1259.88 1211.54 L1260.47 1211.54 L1261.05 1211.54 L1261.64 1211.54 L1262.23 1211.54 L1262.81 1211.54 L1263.4 1211.54 L1263.98 1211.54 L1264.57 1211.54 L1265.16 1211.54 L1265.74 1211.54 L1266.33 1211.54 L1266.92 1211.54 L1267.5 1211.54 L1268.09 1211.54 L1268.68 1211.54 L1269.26 1211.54 L1269.85 1211.54 L1270.44 1211.54 L1271.02 1211.54 L1271.61 1211.54 L1272.19 1211.54 L1272.78 1211.54 L1273.37 1211.54 L1273.95 1211.54 L1274.54 1211.54 L1275.13 1211.54 L1275.71 1211.54 L1276.3 1211.54 L1276.89 1211.54 L1277.47 1211.54 L1278.06 1211.54 L1278.65 1211.54 L1279.23 1211.54 L1279.82 1211.54 L1280.4 1211.54 L1280.99 1211.54 L1281.58 1211.54 L1282.16 1211.54 L1282.75 1211.54 L1283.34 1211.54 L1283.92 1211.54 L1284.51 1211.54 L1285.1 1211.54 L1285.68 1211.54 L1286.27 1211.54 L1286.86 1211.54 L1287.44 1211.54 L1288.03 1211.54 L1288.61 1211.54 L1289.2 1211.54 L1289.79 1211.54 L1290.37 1211.54 L1290.96 1211.54 L1291.55 1211.54 L1292.13 1211.54 L1292.72 1211.54 L1293.31 1211.54 L1293.89 1211.54 L1294.48 1211.54 L1295.06 1211.54 L1295.65 1211.54 L1296.24 1211.54 L1296.82 1211.54 L1297.41 1211.54 L1298 1211.54 L1298.58 1211.54 L1299.17 1211.54 L1299.76 1211.54 L1300.34 1211.54 L1300.93 1211.54 L1301.52 1211.54 L1302.1 1211.54 L1302.69 1211.54 L1303.27 1211.54 L1303.86 1211.54 L1304.45 1211.54 L1305.03 1211.54 L1305.62 1211.54 L1306.21 1211.54 L1306.79 1211.54 L1307.38 1211.54 L1307.97 1211.54 L1308.55 1211.54 L1309.14 1211.54 L1309.73 1211.54 L1310.31 1211.54 L1310.9 1211.54 L1311.48 1211.54 L1312.07 1211.54 L1312.66 1211.54 L1313.24 1211.54 L1313.83 1211.54 L1314.42 1211.54 L1315 1211.54 L1315.59 1211.54 L1316.18 1211.54 L1316.76 1211.54 L1317.35 1211.54 L1317.93 1211.54 L1318.52 1211.54 L1319.11 1211.54 L1319.69 1211.54 L1320.28 1211.54 L1320.87 1211.54 L1321.45 1211.54 L1322.04 1211.54 L1322.63 1211.54 L1323.21 1211.54 L1323.8 1211.54 L1324.39 1211.54 L1324.97 1211.54 L1325.56 1211.54 L1326.14 1211.54 L1326.73 1211.54 L1327.32 1211.54 L1327.9 1211.54 L1328.49 1211.54 L1329.08 1211.54 L1329.66 1211.54 L1330.25 1211.54 L1330.84 1211.54 L1331.42 1211.54 L1332.01 1211.54 L1332.6 1211.54 L1333.18 1211.54 L1333.77 1211.54 L1334.35 1211.54 L1334.94 1211.54 L1335.53 1211.54 L1336.11 1211.54 L1336.7 1211.54 L1337.29 1211.54 L1337.87 1211.54 L1338.46 1211.54 L1339.05 1211.54 L1339.63 1211.54 L1340.22 1211.54 L1340.8 1211.54 L1341.39 1211.54 L1341.98 1211.54 L1342.56 1211.54 L1343.15 1211.54 L1343.74 1211.54 L1344.32 1211.54 L1344.91 1211.54 L1345.5 1211.54 L1346.08 1211.54 L1346.67 1211.54 L1347.26 1211.54 L1347.84 1211.54 L1348.43 1211.54 L1349.01 1211.54 L1349.6 1211.54 L1350.19 1211.54 L1350.77 1211.54 L1351.36 1211.54 L1351.95 1211.54 L1352.53 1211.54 L1353.12 1211.54 L1353.71 1211.54 L1354.29 1211.54 L1354.88 1211.54 L1355.47 1211.54 L1356.05 1211.54 L1356.64 1211.54 L1357.22 1211.54 L1357.81 1211.54 L1358.4 1211.54 L1358.98 1211.54 L1359.57 1211.54 L1360.16 1211.54 L1360.74 1211.54 L1361.33 1211.54 L1361.92 1211.54 L1362.5 1211.54 L1363.09 1211.54 L1363.68 1211.54 L1364.26 1211.54 L1364.85 1211.54 L1365.43 1211.54 L1366.02 1211.54 L1366.61 1211.54 L1367.19 1211.54 L1367.78 1211.54 L1368.37 1211.54 L1368.95 1211.54 L1369.54 1211.54 L1370.13 1211.54 L1370.71 1211.54 L1371.3 1211.54 L1371.88 1211.54 L1372.47 1211.54 L1373.06 1211.54 L1373.64 1211.54 L1374.23 1211.54 L1374.82 1211.54 L1375.4 1211.54 L1375.99 1211.54 L1376.58 1211.54 L1377.16 1211.54 L1377.75 1211.54 L1378.34 1211.54 L1378.92 1211.54 L1379.51 1211.54 L1380.09 1211.54 L1380.68 1211.54 L1381.27 1211.54 L1381.85 1211.54 L1382.44 1211.54 L1383.03 1211.54 L1383.61 1211.54 L1384.2 1211.54 L1384.79 1211.54 L1385.37 1211.54 L1385.96 1211.54 L1386.55 1211.54 L1387.13 1211.54 L1387.72 1211.54 L1388.3 1211.54 L1388.89 1211.54 L1389.48 1211.54 L1390.06 1211.54 L1390.65 1211.54 L1391.24 1211.54 L1391.82 1211.54 L1392.41 1211.54 L1393 1211.54 L1393.58 1211.54 L1394.17 1211.54 L1394.75 1211.54 L1395.34 1211.54 L1395.93 1211.54 L1396.51 1211.54 L1397.1 1211.54 L1397.69 1211.54 L1398.27 1211.54 L1398.86 1211.54 L1399.45 1211.54 L1400.03 1211.54 L1400.62 1211.54 L1401.21 1211.54 L1401.79 1211.54 L1402.38 1211.54 L1402.96 1211.54 L1403.55 1211.54 L1404.14 1211.54 L1404.72 1211.54 L1405.31 1211.54 L1405.9 1211.54 L1406.48 1211.54 L1407.07 1211.54 L1407.66 1211.54 L1408.24 1211.54 L1408.83 1211.54 L1409.42 1211.54 L1410 1211.54 L1410.59 1211.54 L1411.17 1211.54 L1411.76 1211.54 L1412.35 1211.54 L1412.93 1211.54 L1413.52 1211.54 L1414.11 1211.54 L1414.69 1211.54 L1415.28 1211.54 L1415.87 1211.54 L1416.45 1211.54 L1417.04 1211.54 L1417.63 1211.54 L1418.21 1211.54 L1418.8 1211.54 L1419.38 1211.54 L1419.97 1211.54 L1420.56 1211.54 L1421.14 1211.54 L1421.73 1211.54 L1422.32 1211.54 L1422.9 1211.54 L1423.49 1211.54 L1424.08 1211.54 L1424.66 1211.54 L1425.25 1211.54 L1425.83 1211.54 L1426.42 1211.54 L1427.01 1211.54 L1427.59 1211.54 L1428.18 1211.54 L1428.77 1211.54 L1429.35 1211.54 L1429.94 1211.54 L1430.53 1211.54 L1431.11 1211.54 L1431.7 1211.54 L1432.29 1211.54 L1432.87 1211.54 L1433.46 1211.54 L1434.04 1211.54 L1434.63 1211.54 L1435.22 1211.54 L1435.8 1211.54 L1436.39 1211.54 L1436.98 1211.54 L1437.56 1211.54 L1438.15 1211.54 L1438.74 1211.54 L1439.32 1211.54 L1439.91 1211.54 L1440.5 1211.54 L1441.08 1211.54 L1441.67 1211.54 L1442.25 1211.54 L1442.84 1211.54 L1443.43 1211.54 L1444.01 1211.54 L1444.6 1211.54 L1445.19 1211.54 L1445.77 1211.54 L1446.36 1211.54 L1446.95 1211.54 L1447.53 1211.54 L1448.12 1211.54 L1448.7 1211.54 L1449.29 1211.54 L1449.88 1211.54 L1450.46 1211.54 L1451.05 1211.54 L1451.64 1211.54 L1452.22 1211.54 L1452.81 1211.54 L1453.4 1211.54 L1453.98 1211.54 L1454.57 1211.54 L1455.16 1211.54 L1455.74 1211.54 L1456.33 1211.54 L1456.91 1211.54 L1457.5 1211.54 L1458.09 1211.54 L1458.67 1211.54 L1459.26 1211.54 L1459.85 1211.54 L1460.43 1211.54 L1461.02 1211.54 L1461.61 1211.54 L1462.19 1211.54 L1462.78 1211.54 L1463.37 1211.54 L1463.95 1211.54 L1464.54 1211.54 L1465.12 1211.54 L1465.71 1211.54 L1466.3 1211.54 L1466.88 1211.54 L1467.47 1211.54 L1468.06 1211.54 L1468.64 1211.54 L1469.23 1211.54 L1469.82 1211.54 L1470.4 1211.54 L1470.99 1211.54 L1471.57 1211.54 L1472.16 1211.54 L1472.75 1211.54 L1473.33 1211.54 L1473.92 1211.54 L1474.51 1211.54 L1475.09 1211.54 L1475.68 1211.54 L1476.27 1211.54 L1476.85 1211.54 L1477.44 1211.54 L1478.03 1211.54 L1478.61 1211.54 L1479.2 1211.54 L1479.78 1211.54 L1480.37 1211.54 L1480.96 1211.54 L1481.54 1211.54 L1482.13 1211.54 L1482.72 1211.54 L1483.3 1211.54 L1483.89 1211.54 L1484.48 1211.54 L1485.06 1211.54 L1485.65 1211.54 L1486.24 1211.54 L1486.82 1211.54 L1487.41 1211.54 L1487.99 1211.54 L1488.58 1211.54 L1489.17 1211.54 L1489.75 1211.54 L1490.34 1211.54 L1490.93 1211.54 L1491.51 1211.54 L1492.1 1211.54 L1492.69 1211.54 L1493.27 1211.54 L1493.86 1211.54 L1494.45 1211.54 L1495.03 1211.54 L1495.62 1211.54 L1496.2 1211.54 L1496.79 1211.54 L1497.38 1211.54 L1497.96 1211.54 L1498.55 1211.54 L1499.14 1211.54 L1499.72 1211.54 L1500.31 1211.54 L1500.9 1211.54 L1501.48 1211.54 L1502.07 1211.54 L1502.65 1211.54 L1503.24 1211.54 L1503.83 1211.54 L1504.41 1211.54 L1505 1211.54 L1505.59 1211.54 L1506.17 1211.54 L1506.76 1211.54 L1507.35 1211.54 L1507.93 1211.54 L1508.52 1211.54 L1509.11 1211.54 L1509.69 1211.54 L1510.28 1211.54 L1510.86 1211.54 L1511.45 1211.54 L1512.04 1211.54 L1512.62 1211.54 L1513.21 1211.54 L1513.8 1211.54 L1514.38 1211.54 L1514.97 1211.54 L1515.56 1211.54 L1516.14 1211.54 L1516.73 1211.54 L1517.32 1211.54 L1517.9 1211.54 L1518.49 1211.54 L1519.07 1211.54 L1519.66 1211.54 L1520.25 1211.54 L1520.83 1211.54 L1521.42 1211.54 L1522.01 1211.54 L1522.59 1211.54 L1523.18 1211.54 L1523.77 1211.54 L1524.35 1211.54 L1524.94 1211.54 L1525.52 1211.54 L1526.11 1211.54 L1526.7 1211.54 L1527.28 1211.54 L1527.87 1211.54 L1528.46 1211.54 L1529.04 1211.54 L1529.63 1211.54 L1530.22 1211.54 L1530.8 1211.54 L1531.39 1211.54 L1531.98 1211.54 L1532.56 1211.54 L1533.15 1211.54 L1533.73 1211.54 L1534.32 1211.54 L1534.91 1211.54 L1535.49 1211.54 L1536.08 1211.54 L1536.67 1211.54 L1537.25 1211.54 L1537.84 1211.54 L1538.43 1211.54 L1539.01 1211.54 L1539.6 1211.54 L1540.19 1211.54 L1540.77 1211.54 L1541.36 1211.54 L1541.94 1211.54 L1542.53 1211.54 L1543.12 1211.54 L1543.7 1211.54 L1544.29 1211.54 L1544.88 1211.54 L1545.46 1211.54 L1546.05 1211.54 L1546.64 1211.54 L1547.22 1211.54 L1547.81 1211.54 L1548.4 1211.54 L1548.98 1211.54 L1549.57 1211.54 L1550.15 1211.54 L1550.74 1211.54 L1551.33 1211.54 L1551.91 1211.54 L1552.5 1211.54 L1553.09 1211.54 L1553.67 1211.54 L1554.26 1211.54 L1554.85 1211.54 L1555.43 1211.54 L1556.02 1211.54 L1556.6 1211.54 L1557.19 1211.54 L1557.78 1211.54 L1558.36 1211.54 L1558.95 1211.54 L1559.54 1211.54 L1560.12 1211.54 L1560.71 1211.54 L1561.3 1211.54 L1561.88 1211.54 L1562.47 1211.54 L1563.06 1211.54 L1563.64 1211.54 L1564.23 1211.54 L1564.81 1211.54 L1565.4 1211.54 L1565.99 1211.54 L1566.57 1211.54 L1567.16 1211.54 L1567.75 1211.54 L1568.33 1211.54 L1568.92 1211.54 L1569.51 1211.54 L1570.09 1211.54 L1570.68 1211.54 L1571.27 1211.54 L1571.85 1211.54 L1572.44 1211.54 L1573.02 1211.54 L1573.61 1211.54 L1574.2 1211.54 L1574.78 1211.54 L1575.37 1211.54 L1575.96 1211.54 L1576.54 1211.54 L1577.13 1211.54 L1577.72 1211.54 L1578.3 1211.54 L1578.89 1211.54 L1579.47 1211.54 L1580.06 1211.54 L1580.65 1211.54 L1581.23 1211.54 L1581.82 1211.54 L1582.41 1211.54 L1582.99 1211.54 L1583.58 1211.54 L1584.17 1211.54 L1584.75 1211.54 L1585.34 1211.54 L1585.93 1211.54 L1586.51 1211.54 L1587.1 1211.54 L1587.68 1211.54 L1588.27 1211.54 L1588.86 1211.54 L1589.44 1211.54 L1590.03 1211.54 L1590.62 1211.54 L1591.2 1211.54 L1591.79 1211.54 L1592.38 1211.54 L1592.96 1211.54 L1593.55 1211.54 L1594.14 1211.54 L1594.72 1211.54 L1595.31 1211.54 L1595.89 1211.54 L1596.48 1211.54 L1597.07 1211.54 L1597.65 1211.54 L1598.24 1211.54 L1598.83 1211.54 L1599.41 1211.54 L1600 1211.54 L1600.59 1211.54 L1601.17 1211.54 L1601.76 1211.54 L1602.34 1211.54 L1602.93 1211.54 L1603.52 1211.54 L1604.1 1211.54 L1604.69 1211.54 L1605.28 1211.54 L1605.86 1211.54 L1606.45 1211.54 L1607.04 1211.54 L1607.62 1211.54 L1608.21 1211.54 L1608.8 1211.54 L1609.38 1211.54 L1609.97 1211.54 L1610.55 1211.54 L1611.14 1211.54 L1611.73 1211.54 L1612.31 1211.54 L1612.9 1211.54 L1613.49 1211.54 L1614.07 1211.54 L1614.66 1211.54 L1615.25 1211.54 L1615.83 1211.54 L1616.42 1211.54 L1617.01 1211.54 L1617.59 1211.54 L1618.18 1211.54 L1618.76 1211.54 L1619.35 1211.54 L1619.94 1211.54 L1620.52 1211.54 L1621.11 1211.54 L1621.7 1211.54 L1622.28 1211.54 L1622.87 1211.54 L1623.46 1211.54 L1624.04 1211.54 L1624.63 1211.54 L1625.22 1211.54 L1625.8 1211.54 L1626.39 1211.54 L1626.97 1211.54 L1627.56 1211.54 L1628.15 1211.54 L1628.73 1211.54 L1629.32 1211.54 L1629.91 1211.54 L1630.49 1211.54 L1631.08 1211.54 L1631.67 1211.54 L1632.25 1211.54 L1632.84 1211.54 L1633.42 1211.54 L1634.01 1211.54 L1634.6 1211.54 L1635.18 1211.54 L1635.77 1211.54 L1636.36 1211.54 L1636.94 1211.54 L1637.53 1211.54 L1638.12 1211.54 L1638.7 1211.54 L1639.29 1211.54 L1639.88 1211.54 L1640.46 1211.54 L1641.05 1211.54 L1641.63 1211.54 L1642.22 1211.54 L1642.81 1211.54 L1643.39 1211.54 L1643.98 1211.54 L1644.57 1211.54 L1645.15 1211.54 L1645.74 1211.54 L1646.33 1211.54 L1646.91 1211.54 L1647.5 1211.54 L1648.09 1211.54 L1648.67 1211.54 L1649.26 1211.54 L1649.84 1211.54 L1650.43 1211.54 L1651.02 1211.54 L1651.6 1211.54 L1652.19 1211.54 L1652.78 1211.54 L1653.36 1211.54 L1653.95 1211.54 L1654.54 1211.54 L1655.12 1211.54 L1655.71 1211.54 L1656.29 1211.54 L1656.88 1211.54 L1657.47 1211.54 L1658.05 1211.54 L1658.64 1211.54 L1659.23 1211.54 L1659.81 1211.54 L1660.4 1211.54 L1660.99 1211.54 L1661.57 1211.54 L1662.16 1211.54 L1662.75 1211.54 L1663.33 1211.54 L1663.92 1211.54 L1664.5 1211.54 L1665.09 1211.54 L1665.68 1211.54 L1666.26 1211.54 L1666.85 1211.54 L1667.44 1211.54 L1668.02 1211.54 L1668.61 1211.54 L1669.2 1211.54 L1669.78 1211.54 L1670.37 1211.54 L1670.96 1211.54 L1671.54 1211.54 L1672.13 1211.54 L1672.71 1211.54 L1673.3 1211.54 L1673.89 1211.54 L1674.47 1211.54 L1675.06 1211.54 L1675.65 1211.54 L1676.23 1211.54 L1676.82 1211.54 L1677.41 1211.54 L1677.99 1211.54 L1678.58 1211.54 L1679.17 1211.54 L1679.75 1211.54 L1680.34 1211.54 L1680.92 1211.54 L1681.51 1211.54 L1682.1 1211.54 L1682.68 1211.54 L1683.27 1211.54 L1683.86 1211.54 L1684.44 1211.54 L1685.03 1211.54 L1685.62 1211.54 L1686.2 1211.54 L1686.79 1211.54 L1687.37 1211.54 L1687.96 1211.54 L1688.55 1211.54 L1689.13 1211.54 L1689.72 1211.54 L1690.31 1211.54 L1690.89 1211.54 L1691.48 1211.54 L1692.07 1211.54 L1692.65 1211.54 L1693.24 1211.54 L1693.83 1211.54 L1694.41 1211.54 L1695 1211.54 L1695.58 1211.54 L1696.17 1211.54 L1696.76 1211.54 L1697.34 1211.54 L1697.93 1211.54 L1698.52 1211.54 L1699.1 1211.54 L1699.69 1211.54 L1700.28 1211.54 L1700.86 1211.54 L1701.45 1211.54 L1702.04 1211.54 L1702.62 1211.54 L1703.21 1211.54 L1703.79 1211.54 L1704.38 1211.54 L1704.97 1211.54 L1705.55 1211.54 L1706.14 1211.54 L1706.73 1211.54 L1707.31 1211.54 L1707.9 1211.54 L1708.49 1211.54 L1709.07 1211.54 L1709.66 1211.54 L1710.24 1211.54 L1710.83 1211.54 L1711.42 1211.54 L1712 1211.54 L1712.59 1211.54 L1713.18 1211.54 L1713.76 1211.54 L1714.35 1211.54 L1714.94 1211.54 L1715.52 1211.54 L1716.11 1211.54 L1716.7 1211.54 L1717.28 1211.54 L1717.87 1211.54 L1718.45 1211.54 L1719.04 1211.54 L1719.63 1211.54 L1720.21 1211.54 L1720.8 1211.54 L1721.39 1211.54 L1721.97 1211.54 L1722.56 1211.54 L1723.15 1211.54 L1723.73 1211.54 L1724.32 1211.54 L1724.91 1211.54 L1725.49 1211.54 L1726.08 1211.54 L1726.66 1211.54 L1727.25 1211.54 L1727.84 1211.54 L1728.42 1211.54 L1729.01 1211.54 L1729.6 1211.54 L1730.18 1211.54 L1730.77 1211.54 L1731.36 1211.54 L1731.94 1211.54 L1732.53 1211.54 L1733.11 1211.54 L1733.7 1211.54 L1734.29 1211.54 L1734.87 1211.54 L1735.46 1211.54 L1736.05 1211.54 L1736.63 1211.54 L1737.22 1211.54 L1737.81 1211.54 L1738.39 1211.54 L1738.98 1211.54 L1739.57 1211.54 L1740.15 1211.54 L1740.74 1211.54 L1741.32 1211.54 L1741.91 1211.54 L1742.5 1211.54 L1743.08 1211.54 L1743.67 1211.54 L1744.26 1211.54 L1744.84 1211.54 L1745.43 1211.54 L1746.02 1211.54 L1746.6 1211.54 L1747.19 1211.54 L1747.78 1211.54 L1748.36 1211.54 L1748.95 1211.54 L1749.53 1211.54 L1750.12 1211.54 L1750.71 1211.54 L1751.29 1211.54 L1751.88 1211.54 L1752.47 1211.54 L1753.05 1211.54 L1753.64 1211.54 L1754.23 1211.54 L1754.81 1211.54 L1755.4 1211.54 L1755.99 1211.54 L1756.57 1211.54 L1757.16 1211.54 L1757.74 1211.54 L1758.33 1211.54 L1758.92 1211.54 L1759.5 1211.54 L1760.09 1211.54 L1760.68 1211.54 L1761.26 1211.54 L1761.85 1211.54 L1762.44 1211.54 L1763.02 1211.54 L1763.61 1211.54 L1764.19 1211.54 L1764.78 1211.54 L1765.37 1211.54 L1765.95 1211.54 L1766.54 1211.54 L1767.13 1211.54 L1767.71 1211.54 L1768.3 1211.54 L1768.89 1211.54 L1769.47 1211.54 L1770.06 1211.54 L1770.65 1211.54 L1771.23 1211.54 L1771.82 1211.54 L1772.4 1211.54 L1772.99 1211.54 L1773.58 1211.54 L1774.16 1211.54 L1774.75 1211.54 L1775.34 1211.54 L1775.92 1211.54 L1776.51 1211.54 L1777.1 1211.54 L1777.68 1211.54 L1778.27 1211.54 L1778.86 1211.54 L1779.44 1211.54 L1780.03 1211.54 L1780.61 1211.54 L1781.2 1211.54 L1781.79 1211.54 L1782.37 1211.54 L1782.96 1211.54 L1783.55 1211.54 L1784.13 1211.54 L1784.72 1211.54 L1785.31 1211.54 L1785.89 1211.54 L1786.48 1211.54 L1787.06 1211.54 L1787.65 1211.54 L1788.24 1211.54 L1788.82 1211.54 L1789.41 1211.54 L1790 1211.54 L1790.58 1211.54 L1791.17 1211.54 L1791.76 1211.54 L1792.34 1211.54 L1792.93 1211.54 L1793.52 1211.54 L1794.1 1211.54 L1794.69 1211.54 L1795.27 1211.54 L1795.86 1211.54 L1796.45 1211.54 L1797.03 1211.54 L1797.62 1211.54 L1798.21 1211.54 L1798.79 1211.54 L1799.38 1211.54 L1799.97 1211.54 L1800.55 1211.54 L1801.14 1211.54 L1801.73 1211.54 L1802.31 1211.54 L1802.9 1211.54 L1803.48 1211.54 L1804.07 1211.54 L1804.66 1211.54 L1805.24 1211.54 L1805.83 1211.54 L1806.42 1211.54 L1807 1211.54 L1807.59 1211.54 L1808.18 1211.54 L1808.76 1211.54 L1809.35 1211.54 L1809.94 1211.54 L1810.52 1211.54 L1811.11 1211.54 L1811.69 1211.54 L1812.28 1211.54 L1812.87 1211.54 L1813.45 1211.54 L1814.04 1211.54 L1814.63 1211.54 L1815.21 1211.54 L1815.8 1211.54 L1816.39 1211.54 L1816.97 1211.54 L1817.56 1211.54 L1818.14 1211.54 L1818.73 1211.54 L1819.32 1211.54 L1819.9 1211.54 L1820.49 1211.54 L1821.08 1211.54 L1821.66 1211.54 L1822.25 1211.54 L1822.84 1211.54 L1823.42 1211.54 L1824.01 1211.54 L1824.6 1211.54 L1825.18 1211.54 L1825.77 1211.54 L1826.35 1211.54 L1826.94 1211.54 L1827.53 1211.54 L1828.11 1211.54 L1828.7 1211.54 L1829.29 1211.54 L1829.87 1211.54 L1830.46 1211.54 L1831.05 1211.54 L1831.63 1211.54 L1832.22 1211.54 L1832.81 1211.54 L1833.39 1211.54 L1833.98 1211.54 L1834.56 1211.54 L1835.15 1211.54 L1835.74 1211.54 L1836.32 1211.54 L1836.91 1211.54 L1837.5 1211.54 L1838.08 1211.54 L1838.67 1211.54 L1839.26 1211.54 L1839.84 1211.54 L1840.43 1211.54 L1841.01 1211.54 L1841.6 1211.54 L1842.19 1211.54 L1842.77 1211.54 L1843.36 1211.54 L1843.95 1211.54 L1844.53 1211.54 L1845.12 1211.54 L1845.71 1211.54 L1846.29 1211.54 L1846.88 1211.54 L1847.47 1211.54 L1848.05 1211.54 L1848.64 1211.54 L1849.22 1211.54 L1849.81 1211.54 L1850.4 1211.54 L1850.98 1211.54 L1851.57 1211.54 L1852.16 1211.54 L1852.74 1211.54 L1853.33 1211.54 L1853.92 1211.54 L1854.5 1211.54 L1855.09 1211.54 L1855.68 1211.54 L1856.26 1211.54 L1856.85 1211.54 L1857.43 1211.54 L1858.02 1211.54 L1858.61 1211.54 L1859.19 1211.54 L1859.78 1211.54 L1860.37 1211.54 L1860.95 1211.54 L1861.54 1211.54 L1862.13 1211.54 L1862.71 1211.54 L1863.3 1211.54 L1863.88 1211.54 L1864.47 1211.54 L1865.06 1211.54 L1865.64 1211.54 L1866.23 1211.54 L1866.82 1211.54 L1867.4 1211.54 L1867.99 1211.54 L1868.58 1211.54 L1869.16 1211.54 L1869.75 1211.54 L1870.34 1211.54 L1870.92 1211.54 L1871.51 1211.54 L1872.09 1211.54 L1872.68 1211.54 L1873.27 1211.54 L1873.85 1211.54 L1874.44 1211.54 L1875.03 1211.54 L1875.61 1211.54 L1876.2 1211.54 L1876.79 1211.54 L1877.37 1211.54 L1877.96 1211.54 L1878.55 1211.54 L1879.13 1211.54 L1879.72 1211.54 L1880.3 1211.54 L1880.89 1211.54 L1881.48 1211.54 L1882.06 1211.54 L1882.65 1211.54 L1883.24 1211.54 L1883.82 1211.54 L1884.41 1211.54 L1885 1211.54 L1885.58 1211.54 L1886.17 1211.54 L1886.76 1211.54 L1887.34 1211.54 L1887.93 1211.54 L1888.51 1211.54 L1889.1 1211.54 L1889.69 1211.54 L1890.27 1211.54 L1890.86 1211.54 L1891.45 1211.54 L1892.03 1211.54 L1892.62 1211.54 L1893.21 1211.54 L1893.79 1211.54 L1894.38 1211.54 L1894.96 1211.54 L1895.55 1211.54 L1896.14 1211.54 L1896.72 1211.54 L1897.31 1211.54 L1897.9 1211.54 L1898.48 1211.54 L1899.07 1211.54 L1899.66 1211.54 L1900.24 1211.54 L1900.83 1211.54 L1901.42 1211.54 L1902 1211.54 L1902.59 1211.54 L1903.17 1211.54 L1903.76 1211.54 L1904.35 1211.54 L1904.93 1211.54 L1905.52 1211.54 L1906.11 1211.54 L1906.69 1211.54 L1907.28 1211.54 L1907.87 1211.54 L1908.45 1211.54 L1909.04 1211.54 L1909.63 1211.54 L1910.21 1211.54 L1910.8 1211.54 L1911.38 1211.54 L1911.97 1211.54 L1912.56 1211.54 L1913.14 1211.54 L1913.73 1211.54 L1914.32 1211.54 L1914.9 1211.54 L1915.49 1211.54 L1916.08 1211.54 L1916.66 1211.54 L1917.25 1211.54 L1917.83 1211.54 L1918.42 1211.54 L1919.01 1211.54 L1919.59 1211.54 L1920.18 1211.54 L1920.77 1211.54 L1921.35 1211.54 L1921.94 1211.54 L1922.53 1211.54 L1923.11 1211.54 L1923.7 1211.54 L1924.29 1211.54 L1924.87 1211.54 L1925.46 1211.54 L1926.04 1211.54 L1926.63 1211.54 L1927.22 1211.54 L1927.8 1211.54 L1928.39 1211.54 L1928.98 1211.54 L1929.56 1211.54 L1930.15 1211.54 L1930.74 1211.54 L1931.32 1211.54 L1931.91 1211.54 L1932.5 1211.54 L1933.08 1211.54 L1933.67 1211.54 L1934.25 1211.54 L1934.84 1211.54 L1935.43 1211.54 L1936.01 1211.54 L1936.6 1211.54 L1937.19 1211.54 L1937.77 1211.54 L1938.36 1211.54 L1938.95 1211.54 L1939.53 1211.54 L1940.12 1211.54 L1940.71 1211.54 L1941.29 1211.54 L1941.88 1211.54 L1942.46 1211.54 L1943.05 1211.54 L1943.64 1211.54 L1944.22 1211.54 L1944.81 1211.54 L1945.4 1211.54 L1945.98 1211.54 L1946.57 1211.54 L1947.16 1211.54 L1947.74 1211.54 L1948.33 1211.54 L1948.91 1211.54 L1949.5 1211.54 L1950.09 1211.54 L1950.67 1211.54 L1951.26 1211.54 L1951.85 1211.54 L1952.43 1211.54 L1953.02 1211.54 L1953.61 1211.54 L1954.19 1211.54 L1954.78 1211.54 L1955.37 1211.54 L1955.95 1211.54 L1956.54 1211.54 L1957.12 1211.54 L1957.71 1211.54 L1958.3 1211.54 L1958.88 1211.54 L1959.47 1211.54 L1960.06 1211.54 L1960.64 1211.54 L1961.23 1211.54 L1961.82 1211.54 L1962.4 1211.54 L1962.99 1211.54 L1963.58 1211.54 L1964.16 1211.54 L1964.75 1211.54 L1965.33 1211.54 L1965.92 1211.54 L1966.51 1211.54 L1967.09 1211.54 L1967.68 1211.54 L1968.27 1211.54 L1968.85 1211.54 L1969.44 1211.54 L1970.03 1211.54 L1970.61 1211.54 L1971.2 1211.54 L1971.78 1211.54 L1972.37 1211.54 L1972.96 1211.54 L1973.54 1211.54 L1974.13 1211.54 L1974.72 1211.54 L1975.3 1211.54 L1975.89 1211.54 L1976.48 1211.54 L1977.06 1211.54 L1977.65 1211.54 L1978.24 1211.54 L1978.82 1211.54 L1979.41 1211.54 L1979.99 1211.54 L1980.58 1211.54 L1981.17 1211.54 L1981.75 1211.54 L1982.34 1211.54 L1982.93 1211.54 L1983.51 1211.54 L1984.1 1211.54 L1984.69 1211.54 L1985.27 1211.54 L1985.86 1211.54 L1986.45 1211.54 L1987.03 1211.54 L1987.62 1211.54 L1988.2 1211.54 L1988.79 1211.54 L1989.38 1211.54 L1989.96 1211.54 L1990.55 1211.54 L1991.14 1211.54 L1991.72 1211.54 L1992.31 1211.54 L1992.9 1211.54 L1993.48 1211.54 L1994.07 1211.54 L1994.65 1211.54 L1995.24 1211.54 L1995.83 1211.54 L1996.41 1211.54 L1997 1211.54 L1997.59 1211.54 L1998.17 1211.54 L1998.76 1211.54 L1999.35 1211.54 L1999.93 1211.54 L2000.52 1211.54 L2001.11 1211.54 L2001.69 1211.54 L2002.28 1211.54 L2002.86 1211.54 L2003.45 1211.54 L2004.04 1211.54 L2004.62 1211.54 L2005.21 1211.54 L2005.8 1211.54 L2006.38 1211.54 L2006.97 1211.54 L2007.56 1211.54 L2008.14 1211.54 L2008.73 1211.54 L2009.32 1211.54 L2009.9 1211.54 L2010.49 1211.54 L2011.07 1211.54 L2011.66 1211.54 L2012.25 1211.54 L2012.83 1211.54 L2013.42 1211.54 L2014.01 1211.54 L2014.59 1211.54 L2015.18 1211.54 L2015.77 1211.54 L2016.35 1211.54 L2016.94 1211.54 L2017.53 1211.54 L2018.11 1211.54 L2018.7 1211.54 L2019.28 1211.54 L2019.87 1211.54 L2020.46 1211.54 L2021.04 1211.54 L2021.63 1211.54 L2022.22 1211.54 L2022.8 1211.54 L2023.39 1211.54 L2023.98 1211.54 L2024.56 1211.54 L2025.15 1211.54 L2025.73 1211.54 L2026.32 1211.54 L2026.91 1211.54 L2027.49 1211.54 L2028.08 1211.54 L2028.67 1211.54 L2029.25 1211.54 L2029.84 1211.54 L2030.43 1211.54 L2031.01 1211.54 L2031.6 1211.54 L2032.19 1211.54 L2032.77 1211.54 L2033.36 1211.54 L2033.94 1211.54 L2034.53 1211.54 L2035.12 1211.54 L2035.7 1211.54 L2036.29 1211.54 L2036.88 1211.54 L2037.46 1211.54 L2038.05 1211.54 L2038.64 1211.54 L2039.22 1211.54 L2039.81 1211.54 L2040.4 1211.54 L2040.98 1211.54 L2041.57 1211.54 L2042.15 1211.54 L2042.74 1211.54 L2043.33 1211.54 L2043.91 1211.54 L2044.5 1211.54 L2045.09 1211.54 L2045.67 1211.54 L2046.26 1211.54 L2046.85 1211.54 L2047.43 1211.54 L2048.02 1211.54 L2048.6 1211.54 L2049.19 1211.54 L2049.78 1211.54 L2050.36 1211.54 L2050.95 1211.54 L2051.54 1211.54 L2052.12 1211.54 L2052.71 1211.54 L2053.3 1211.54 L2053.88 1211.54 L2054.47 1211.54 L2055.06 1211.54 L2055.64 1211.54 L2056.23 1211.54 L2056.81 1211.54 L2057.4 1211.54 L2057.99 1211.54 L2058.57 1211.54 L2059.16 1211.54 L2059.75 1211.54 L2060.33 1211.54 L2060.92 1211.54 L2061.51 1211.54 L2062.09 1211.54 L2062.68 1211.54 L2063.27 1211.54 L2063.85 1211.54 L2064.44 1211.54 L2065.02 1211.54 L2065.61 1211.54 L2066.2 1211.54 L2066.78 1211.54 L2067.37 1211.54 L2067.96 1211.54 L2068.54 1211.54 L2069.13 1211.54 L2069.72 1211.54 L2070.3 1211.54 L2070.89 1211.54 L2071.48 1211.54 L2072.06 1211.54 L2072.65 1211.54 L2073.23 1211.54 L2073.82 1211.54 L2074.41 1211.54 L2074.99 1211.54 L2075.58 1211.54 L2076.17 1211.54 L2076.75 1211.54 L2077.34 1211.54 L2077.93 1211.54 L2078.51 1211.54 L2079.1 1211.54 L2079.68 1211.54 L2080.27 1211.54 L2080.86 1211.54 L2081.44 1211.54 L2082.03 1211.54 L2082.62 1211.54 L2083.2 1211.54 L2083.79 1211.54 L2084.38 1211.54 L2084.96 1211.54 L2085.55 1211.54 L2086.14 1211.54 L2086.72 1211.54 L2087.31 1211.54 L2087.89 1211.54 L2088.48 1211.54 L2089.07 1211.54 L2089.65 1211.54 L2090.24 1211.54 L2090.83 1211.54 L2091.41 1211.54 L2092 1211.54 L2092.59 1211.54 L2093.17 1211.54 L2093.76 1211.54 L2094.35 1211.54 L2094.93 1211.54 L2095.52 1211.54 L2096.1 1211.54 L2096.69 1211.54 L2097.28 1211.54 L2097.86 1211.54 L2098.45 1211.54 L2099.04 1211.54 L2099.62 1211.54 L2100.21 1211.54 L2100.8 1211.54 L2101.38 1211.54 L2101.97 1211.54 L2102.55 1211.54 L2103.14 1211.54 L2103.73 1211.54 L2104.31 1211.54 L2104.9 1211.54 L2105.49 1211.54 L2106.07 1211.54 L2106.66 1211.54 L2107.25 1211.54 L2107.83 1211.54 L2108.42 1211.54 L2109.01 1211.54 L2109.59 1211.54 L2110.18 1211.54 L2110.76 1211.54 L2111.35 1211.54 L2111.94 1211.54 L2112.52 1211.54 L2113.11 1211.54 L2113.7 1211.54 L2114.28 1211.54 L2114.87 1211.54 L2115.46 1211.54 L2116.04 1211.54 L2116.63 1211.54 L2117.22 1211.54 L2117.8 1211.54 L2118.39 1211.54 L2118.97 1211.54 L2119.56 1211.54 L2120.15 1211.54 L2120.73 1211.54 L2121.32 1211.54 L2121.91 1211.54 L2122.49 1211.54 L2123.08 1211.54 L2123.67 1211.54 L2124.25 1211.54 L2124.84 1211.54 L2125.42 1211.54 L2126.01 1211.54 L2126.6 1211.54 L2127.18 1211.54 L2127.77 1211.54 L2128.36 1211.54 L2128.94 1211.54 L2129.53 1211.54 L2130.12 1211.54 L2130.7 1211.54 L2131.29 1211.54 L2131.88 1211.54 L2132.46 1211.54 L2133.05 1211.54 L2133.63 1211.54 L2134.22 1211.54 L2134.81 1211.54 L2135.39 1211.54 L2135.98 1211.54 L2136.57 1211.54 L2137.15 1211.54 L2137.74 1211.54 L2138.33 1211.54 L2138.91 1211.54 L2139.5 1211.54 L2140.09 1211.54 L2140.67 1211.54 L2141.26 1211.54 L2141.84 1211.54 L2142.43 1211.54 L2143.02 1211.54 L2143.6 1211.54 L2144.19 1211.54 L2144.78 1211.54 L2145.36 1211.54 L2145.95 1211.54 L2146.54 1211.54 L2147.12 1211.54 L2147.71 1211.54 L2148.3 1211.54 L2148.88 1211.54 L2149.47 1211.54 L2150.05 1211.54 L2150.64 1211.54 L2151.23 1211.54 L2151.81 1211.54 L2152.4 1211.54 L2152.99 1211.54 L2153.57 1211.54 L2154.16 1211.54 L2154.75 1211.54 L2155.33 1211.54 L2155.92 1211.54 L2156.5 1211.54 L2157.09 1211.54 L2157.68 1211.54 L2158.26 1211.54 L2158.26 1211.36 L2157.68 1211.36 L2157.09 1211.36 L2156.5 1211.36 L2155.92 1211.36 L2155.33 1211.36 L2154.75 1211.36 L2154.16 1211.36 L2153.57 1211.36 L2152.99 1211.36 L2152.4 1211.36 L2151.81 1211.36 L2151.23 1211.36 L2150.64 1211.36 L2150.05 1211.36 L2149.47 1211.36 L2148.88 1211.36 L2148.3 1211.36 L2147.71 1211.36 L2147.12 1211.36 L2146.54 1211.36 L2145.95 1211.36 L2145.36 1211.36 L2144.78 1211.36 L2144.19 1211.36 L2143.6 1211.36 L2143.02 1211.36 L2142.43 1211.36 L2141.84 1211.36 L2141.26 1211.36 L2140.67 1211.36 L2140.09 1211.36 L2139.5 1211.36 L2138.91 1211.36 L2138.33 1211.36 L2137.74 1211.36 L2137.15 1211.36 L2136.57 1211.36 L2135.98 1211.36 L2135.39 1211.36 L2134.81 1211.36 L2134.22 1211.36 L2133.63 1211.36 L2133.05 1211.36 L2132.46 1211.36 L2131.88 1211.36 L2131.29 1211.36 L2130.7 1211.36 L2130.12 1211.36 L2129.53 1211.36 L2128.94 1211.36 L2128.36 1211.36 L2127.77 1211.36 L2127.18 1211.36 L2126.6 1211.36 L2126.01 1211.36 L2125.42 1211.36 L2124.84 1211.36 L2124.25 1211.36 L2123.67 1211.36 L2123.08 1211.36 L2122.49 1211.36 L2121.91 1211.36 L2121.32 1211.36 L2120.73 1211.36 L2120.15 1211.36 L2119.56 1211.36 L2118.97 1211.36 L2118.39 1211.36 L2117.8 1211.36 L2117.22 1211.36 L2116.63 1211.36 L2116.04 1211.36 L2115.46 1211.36 L2114.87 1211.36 L2114.28 1211.36 L2113.7 1211.36 L2113.11 1211.36 L2112.52 1211.36 L2111.94 1211.36 L2111.35 1211.36 L2110.76 1211.36 L2110.18 1211.36 L2109.59 1211.36 L2109.01 1211.36 L2108.42 1211.36 L2107.83 1211.36 L2107.25 1211.36 L2106.66 1211.36 L2106.07 1211.36 L2105.49 1211.36 L2104.9 1211.36 L2104.31 1211.36 L2103.73 1211.36 L2103.14 1211.36 L2102.55 1211.36 L2101.97 1211.36 L2101.38 1211.36 L2100.8 1211.36 L2100.21 1211.36 L2099.62 1211.36 L2099.04 1211.36 L2098.45 1211.36 L2097.86 1211.36 L2097.28 1211.36 L2096.69 1211.36 L2096.1 1211.36 L2095.52 1211.36 L2094.93 1211.36 L2094.35 1211.36 L2093.76 1211.36 L2093.17 1211.36 L2092.59 1211.36 L2092 1211.36 L2091.41 1211.36 L2090.83 1211.36 L2090.24 1211.36 L2089.65 1211.36 L2089.07 1211.36 L2088.48 1211.36 L2087.89 1211.36 L2087.31 1211.36 L2086.72 1211.36 L2086.14 1211.36 L2085.55 1211.36 L2084.96 1211.36 L2084.38 1211.36 L2083.79 1211.36 L2083.2 1211.36 L2082.62 1211.36 L2082.03 1211.36 L2081.44 1211.36 L2080.86 1211.36 L2080.27 1211.36 L2079.68 1211.36 L2079.1 1211.36 L2078.51 1211.36 L2077.93 1211.36 L2077.34 1211.36 L2076.75 1211.36 L2076.17 1211.36 L2075.58 1211.36 L2074.99 1211.36 L2074.41 1211.36 L2073.82 1211.36 L2073.23 1211.36 L2072.65 1211.36 L2072.06 1211.36 L2071.48 1211.36 L2070.89 1211.36 L2070.3 1211.36 L2069.72 1211.36 L2069.13 1211.36 L2068.54 1211.36 L2067.96 1211.36 L2067.37 1211.36 L2066.78 1211.36 L2066.2 1211.36 L2065.61 1211.36 L2065.02 1211.36 L2064.44 1211.36 L2063.85 1211.36 L2063.27 1211.36 L2062.68 1211.36 L2062.09 1211.36 L2061.51 1211.36 L2060.92 1211.36 L2060.33 1211.36 L2059.75 1211.36 L2059.16 1211.36 L2058.57 1211.36 L2057.99 1211.36 L2057.4 1211.36 L2056.81 1211.36 L2056.23 1211.36 L2055.64 1211.36 L2055.06 1211.36 L2054.47 1211.36 L2053.88 1211.36 L2053.3 1211.36 L2052.71 1211.36 L2052.12 1211.36 L2051.54 1211.36 L2050.95 1211.36 L2050.36 1211.36 L2049.78 1211.36 L2049.19 1211.36 L2048.6 1211.36 L2048.02 1211.36 L2047.43 1211.36 L2046.85 1211.36 L2046.26 1211.36 L2045.67 1211.36 L2045.09 1211.36 L2044.5 1211.36 L2043.91 1211.36 L2043.33 1211.36 L2042.74 1211.36 L2042.15 1211.36 L2041.57 1211.36 L2040.98 1211.36 L2040.4 1211.36 L2039.81 1211.36 L2039.22 1211.36 L2038.64 1211.36 L2038.05 1211.36 L2037.46 1211.36 L2036.88 1211.36 L2036.29 1211.36 L2035.7 1211.36 L2035.12 1211.36 L2034.53 1211.36 L2033.94 1211.36 L2033.36 1211.36 L2032.77 1211.36 L2032.19 1211.36 L2031.6 1211.36 L2031.01 1211.36 L2030.43 1211.36 L2029.84 1211.36 L2029.25 1211.36 L2028.67 1211.36 L2028.08 1211.36 L2027.49 1211.36 L2026.91 1211.36 L2026.32 1211.36 L2025.73 1211.36 L2025.15 1211.36 L2024.56 1211.36 L2023.98 1211.36 L2023.39 1211.36 L2022.8 1211.36 L2022.22 1211.36 L2021.63 1211.36 L2021.04 1211.36 L2020.46 1211.36 L2019.87 1211.36 L2019.28 1211.36 L2018.7 1211.36 L2018.11 1211.36 L2017.53 1211.36 L2016.94 1211.36 L2016.35 1211.36 L2015.77 1211.36 L2015.18 1211.36 L2014.59 1211.36 L2014.01 1211.36 L2013.42 1211.36 L2012.83 1211.36 L2012.25 1211.36 L2011.66 1211.36 L2011.07 1211.36 L2010.49 1211.36 L2009.9 1211.36 L2009.32 1211.36 L2008.73 1211.36 L2008.14 1211.36 L2007.56 1211.36 L2006.97 1211.36 L2006.38 1211.36 L2005.8 1211.36 L2005.21 1211.36 L2004.62 1211.36 L2004.04 1211.36 L2003.45 1211.36 L2002.86 1211.36 L2002.28 1211.36 L2001.69 1211.36 L2001.11 1211.36 L2000.52 1211.36 L1999.93 1211.36 L1999.35 1211.36 L1998.76 1211.36 L1998.17 1211.36 L1997.59 1211.36 L1997 1211.36 L1996.41 1211.36 L1995.83 1211.36 L1995.24 1211.36 L1994.65 1211.36 L1994.07 1211.36 L1993.48 1211.36 L1992.9 1211.36 L1992.31 1211.36 L1991.72 1211.36 L1991.14 1211.36 L1990.55 1211.36 L1989.96 1211.36 L1989.38 1211.36 L1988.79 1211.36 L1988.2 1211.36 L1987.62 1211.36 L1987.03 1211.36 L1986.45 1211.36 L1985.86 1211.36 L1985.27 1211.36 L1984.69 1211.36 L1984.1 1211.36 L1983.51 1211.36 L1982.93 1211.36 L1982.34 1211.36 L1981.75 1211.36 L1981.17 1211.36 L1980.58 1211.36 L1979.99 1211.36 L1979.41 1211.36 L1978.82 1211.36 L1978.24 1211.36 L1977.65 1211.36 L1977.06 1211.36 L1976.48 1211.36 L1975.89 1211.36 L1975.3 1211.36 L1974.72 1211.36 L1974.13 1211.36 L1973.54 1211.36 L1972.96 1211.36 L1972.37 1211.36 L1971.78 1211.36 L1971.2 1211.36 L1970.61 1211.36 L1970.03 1211.36 L1969.44 1211.36 L1968.85 1211.36 L1968.27 1211.36 L1967.68 1211.36 L1967.09 1211.36 L1966.51 1211.36 L1965.92 1211.36 L1965.33 1211.36 L1964.75 1211.36 L1964.16 1211.36 L1963.58 1211.36 L1962.99 1211.36 L1962.4 1211.36 L1961.82 1211.36 L1961.23 1211.36 L1960.64 1211.36 L1960.06 1211.36 L1959.47 1211.36 L1958.88 1211.36 L1958.3 1211.36 L1957.71 1211.36 L1957.12 1211.36 L1956.54 1211.36 L1955.95 1211.36 L1955.37 1211.36 L1954.78 1211.36 L1954.19 1211.36 L1953.61 1211.36 L1953.02 1211.36 L1952.43 1211.36 L1951.85 1211.36 L1951.26 1211.36 L1950.67 1211.36 L1950.09 1211.36 L1949.5 1211.36 L1948.91 1211.36 L1948.33 1211.36 L1947.74 1211.36 L1947.16 1211.36 L1946.57 1211.36 L1945.98 1211.36 L1945.4 1211.36 L1944.81 1211.36 L1944.22 1211.36 L1943.64 1211.36 L1943.05 1211.36 L1942.46 1211.36 L1941.88 1211.36 L1941.29 1211.36 L1940.71 1211.36 L1940.12 1211.36 L1939.53 1211.36 L1938.95 1211.36 L1938.36 1211.36 L1937.77 1211.36 L1937.19 1211.36 L1936.6 1211.36 L1936.01 1211.36 L1935.43 1211.36 L1934.84 1211.36 L1934.25 1211.36 L1933.67 1211.36 L1933.08 1211.36 L1932.5 1211.36 L1931.91 1211.36 L1931.32 1211.36 L1930.74 1211.36 L1930.15 1211.36 L1929.56 1211.36 L1928.98 1211.36 L1928.39 1211.36 L1927.8 1211.36 L1927.22 1211.36 L1926.63 1211.36 L1926.04 1211.36 L1925.46 1211.36 L1924.87 1211.36 L1924.29 1211.36 L1923.7 1211.36 L1923.11 1211.36 L1922.53 1211.36 L1921.94 1211.36 L1921.35 1211.36 L1920.77 1211.36 L1920.18 1211.36 L1919.59 1211.36 L1919.01 1211.36 L1918.42 1211.36 L1917.83 1211.36 L1917.25 1211.36 L1916.66 1211.36 L1916.08 1211.36 L1915.49 1211.36 L1914.9 1211.36 L1914.32 1211.36 L1913.73 1211.36 L1913.14 1211.36 L1912.56 1211.36 L1911.97 1211.36 L1911.38 1211.36 L1910.8 1211.36 L1910.21 1211.36 L1909.63 1211.36 L1909.04 1211.36 L1908.45 1211.36 L1907.87 1211.36 L1907.28 1211.36 L1906.69 1211.36 L1906.11 1211.36 L1905.52 1211.36 L1904.93 1211.36 L1904.35 1211.36 L1903.76 1211.36 L1903.17 1211.36 L1902.59 1211.36 L1902 1211.36 L1901.42 1211.36 L1900.83 1211.36 L1900.24 1211.36 L1899.66 1211.36 L1899.07 1211.36 L1898.48 1211.36 L1897.9 1211.36 L1897.31 1211.36 L1896.72 1211.36 L1896.14 1211.36 L1895.55 1211.36 L1894.96 1211.36 L1894.38 1211.36 L1893.79 1211.36 L1893.21 1211.36 L1892.62 1211.36 L1892.03 1211.36 L1891.45 1211.36 L1890.86 1211.36 L1890.27 1211.36 L1889.69 1211.36 L1889.1 1211.36 L1888.51 1211.36 L1887.93 1211.36 L1887.34 1211.36 L1886.76 1211.36 L1886.17 1211.36 L1885.58 1211.36 L1885 1211.36 L1884.41 1211.36 L1883.82 1211.36 L1883.24 1211.36 L1882.65 1211.36 L1882.06 1211.36 L1881.48 1211.36 L1880.89 1211.36 L1880.3 1211.36 L1879.72 1211.36 L1879.13 1211.36 L1878.55 1211.36 L1877.96 1211.36 L1877.37 1211.36 L1876.79 1211.36 L1876.2 1211.36 L1875.61 1211.36 L1875.03 1211.36 L1874.44 1211.36 L1873.85 1211.36 L1873.27 1211.36 L1872.68 1211.36 L1872.09 1211.36 L1871.51 1211.36 L1870.92 1211.36 L1870.34 1211.36 L1869.75 1211.36 L1869.16 1211.36 L1868.58 1211.36 L1867.99 1211.36 L1867.4 1211.36 L1866.82 1211.36 L1866.23 1211.36 L1865.64 1211.36 L1865.06 1211.36 L1864.47 1211.36 L1863.88 1211.36 L1863.3 1211.36 L1862.71 1211.36 L1862.13 1211.36 L1861.54 1211.36 L1860.95 1211.36 L1860.37 1211.36 L1859.78 1211.36 L1859.19 1211.36 L1858.61 1211.36 L1858.02 1211.36 L1857.43 1211.36 L1856.85 1211.36 L1856.26 1211.36 L1855.68 1211.36 L1855.09 1211.36 L1854.5 1211.36 L1853.92 1211.36 L1853.33 1211.36 L1852.74 1211.36 L1852.16 1211.36 L1851.57 1211.36 L1850.98 1211.36 L1850.4 1211.36 L1849.81 1211.36 L1849.22 1211.36 L1848.64 1211.36 L1848.05 1211.36 L1847.47 1211.36 L1846.88 1211.36 L1846.29 1211.36 L1845.71 1211.36 L1845.12 1211.36 L1844.53 1211.36 L1843.95 1211.36 L1843.36 1211.36 L1842.77 1211.36 L1842.19 1211.36 L1841.6 1211.36 L1841.01 1211.36 L1840.43 1211.36 L1839.84 1211.36 L1839.26 1211.36 L1838.67 1211.36 L1838.08 1211.36 L1837.5 1211.36 L1836.91 1211.36 L1836.32 1211.36 L1835.74 1211.36 L1835.15 1211.36 L1834.56 1211.36 L1833.98 1211.36 L1833.39 1211.36 L1832.81 1211.36 L1832.22 1211.36 L1831.63 1211.36 L1831.05 1211.36 L1830.46 1211.36 L1829.87 1211.36 L1829.29 1211.36 L1828.7 1211.36 L1828.11 1211.36 L1827.53 1211.36 L1826.94 1211.36 L1826.35 1211.36 L1825.77 1211.36 L1825.18 1211.36 L1824.6 1211.36 L1824.01 1211.36 L1823.42 1211.36 L1822.84 1211.36 L1822.25 1211.36 L1821.66 1211.36 L1821.08 1211.36 L1820.49 1211.36 L1819.9 1211.36 L1819.32 1211.36 L1818.73 1211.36 L1818.14 1211.36 L1817.56 1211.36 L1816.97 1211.36 L1816.39 1211.36 L1815.8 1211.36 L1815.21 1211.36 L1814.63 1211.36 L1814.04 1211.36 L1813.45 1211.36 L1812.87 1211.36 L1812.28 1211.36 L1811.69 1211.36 L1811.11 1211.36 L1810.52 1211.36 L1809.94 1211.36 L1809.35 1211.36 L1808.76 1211.36 L1808.18 1211.36 L1807.59 1211.36 L1807 1211.36 L1806.42 1211.36 L1805.83 1211.36 L1805.24 1211.36 L1804.66 1211.36 L1804.07 1211.36 L1803.48 1211.36 L1802.9 1211.36 L1802.31 1211.36 L1801.73 1211.36 L1801.14 1211.36 L1800.55 1211.36 L1799.97 1211.36 L1799.38 1211.36 L1798.79 1211.36 L1798.21 1211.36 L1797.62 1211.36 L1797.03 1211.36 L1796.45 1211.36 L1795.86 1211.36 L1795.27 1211.36 L1794.69 1211.36 L1794.1 1211.36 L1793.52 1211.36 L1792.93 1211.36 L1792.34 1211.36 L1791.76 1211.36 L1791.17 1211.36 L1790.58 1211.36 L1790 1211.36 L1789.41 1211.36 L1788.82 1211.36 L1788.24 1211.36 L1787.65 1211.36 L1787.06 1211.36 L1786.48 1211.36 L1785.89 1211.36 L1785.31 1211.36 L1784.72 1211.36 L1784.13 1211.36 L1783.55 1211.36 L1782.96 1211.36 L1782.37 1211.36 L1781.79 1211.36 L1781.2 1211.36 L1780.61 1211.36 L1780.03 1211.36 L1779.44 1211.36 L1778.86 1211.36 L1778.27 1211.36 L1777.68 1211.36 L1777.1 1211.36 L1776.51 1211.36 L1775.92 1211.36 L1775.34 1211.36 L1774.75 1211.36 L1774.16 1211.36 L1773.58 1211.36 L1772.99 1211.36 L1772.4 1211.36 L1771.82 1211.36 L1771.23 1211.36 L1770.65 1211.36 L1770.06 1211.36 L1769.47 1211.36 L1768.89 1211.36 L1768.3 1211.36 L1767.71 1211.36 L1767.13 1211.36 L1766.54 1211.36 L1765.95 1211.36 L1765.37 1211.36 L1764.78 1211.36 L1764.19 1211.36 L1763.61 1211.36 L1763.02 1211.36 L1762.44 1211.36 L1761.85 1211.36 L1761.26 1211.36 L1760.68 1211.36 L1760.09 1211.36 L1759.5 1211.36 L1758.92 1211.36 L1758.33 1211.36 L1757.74 1211.36 L1757.16 1211.36 L1756.57 1211.36 L1755.99 1211.36 L1755.4 1211.36 L1754.81 1211.36 L1754.23 1211.36 L1753.64 1211.36 L1753.05 1211.36 L1752.47 1211.36 L1751.88 1211.36 L1751.29 1211.36 L1750.71 1211.36 L1750.12 1211.36 L1749.53 1211.36 L1748.95 1211.36 L1748.36 1211.36 L1747.78 1211.36 L1747.19 1211.36 L1746.6 1211.36 L1746.02 1211.36 L1745.43 1211.36 L1744.84 1211.36 L1744.26 1211.36 L1743.67 1211.36 L1743.08 1211.36 L1742.5 1211.36 L1741.91 1211.36 L1741.32 1211.36 L1740.74 1211.36 L1740.15 1211.36 L1739.57 1211.36 L1738.98 1211.36 L1738.39 1211.36 L1737.81 1211.36 L1737.22 1211.36 L1736.63 1211.36 L1736.05 1211.36 L1735.46 1211.36 L1734.87 1211.36 L1734.29 1211.36 L1733.7 1211.36 L1733.11 1211.36 L1732.53 1211.36 L1731.94 1211.36 L1731.36 1211.36 L1730.77 1211.36 L1730.18 1211.36 L1729.6 1211.36 L1729.01 1211.36 L1728.42 1211.36 L1727.84 1211.36 L1727.25 1211.36 L1726.66 1211.36 L1726.08 1211.36 L1725.49 1211.36 L1724.91 1211.36 L1724.32 1211.36 L1723.73 1211.36 L1723.15 1211.36 L1722.56 1211.36 L1721.97 1211.36 L1721.39 1211.36 L1720.8 1211.36 L1720.21 1211.36 L1719.63 1211.36 L1719.04 1211.36 L1718.45 1211.36 L1717.87 1211.36 L1717.28 1211.36 L1716.7 1211.36 L1716.11 1211.36 L1715.52 1211.36 L1714.94 1211.36 L1714.35 1211.36 L1713.76 1211.36 L1713.18 1211.36 L1712.59 1211.36 L1712 1211.36 L1711.42 1211.36 L1710.83 1211.36 L1710.24 1211.36 L1709.66 1211.36 L1709.07 1211.36 L1708.49 1211.36 L1707.9 1211.36 L1707.31 1211.36 L1706.73 1211.36 L1706.14 1211.36 L1705.55 1211.36 L1704.97 1211.36 L1704.38 1211.36 L1703.79 1211.36 L1703.21 1211.36 L1702.62 1211.36 L1702.04 1211.36 L1701.45 1211.36 L1700.86 1211.36 L1700.28 1211.36 L1699.69 1211.36 L1699.1 1211.36 L1698.52 1211.36 L1697.93 1211.36 L1697.34 1211.36 L1696.76 1211.36 L1696.17 1211.36 L1695.58 1211.36 L1695 1211.36 L1694.41 1211.36 L1693.83 1211.36 L1693.24 1211.36 L1692.65 1211.36 L1692.07 1211.36 L1691.48 1211.36 L1690.89 1211.36 L1690.31 1211.36 L1689.72 1211.36 L1689.13 1211.36 L1688.55 1211.36 L1687.96 1211.36 L1687.37 1211.36 L1686.79 1211.36 L1686.2 1211.36 L1685.62 1211.36 L1685.03 1211.36 L1684.44 1211.36 L1683.86 1211.36 L1683.27 1211.36 L1682.68 1211.36 L1682.1 1211.36 L1681.51 1211.36 L1680.92 1211.36 L1680.34 1211.36 L1679.75 1211.36 L1679.17 1211.36 L1678.58 1211.36 L1677.99 1211.36 L1677.41 1211.36 L1676.82 1211.36 L1676.23 1211.36 L1675.65 1211.36 L1675.06 1211.36 L1674.47 1211.36 L1673.89 1211.36 L1673.3 1211.36 L1672.71 1211.36 L1672.13 1211.36 L1671.54 1211.36 L1670.96 1211.36 L1670.37 1211.36 L1669.78 1211.36 L1669.2 1211.36 L1668.61 1211.36 L1668.02 1211.36 L1667.44 1211.36 L1666.85 1211.36 L1666.26 1211.36 L1665.68 1211.36 L1665.09 1211.36 L1664.5 1211.36 L1663.92 1211.36 L1663.33 1211.36 L1662.75 1211.36 L1662.16 1211.36 L1661.57 1211.36 L1660.99 1211.36 L1660.4 1211.36 L1659.81 1211.36 L1659.23 1211.36 L1658.64 1211.36 L1658.05 1211.36 L1657.47 1211.36 L1656.88 1211.36 L1656.29 1211.36 L1655.71 1211.36 L1655.12 1211.36 L1654.54 1211.36 L1653.95 1211.36 L1653.36 1211.36 L1652.78 1211.36 L1652.19 1211.36 L1651.6 1211.36 L1651.02 1211.36 L1650.43 1211.36 L1649.84 1211.36 L1649.26 1211.36 L1648.67 1211.36 L1648.09 1211.36 L1647.5 1211.36 L1646.91 1211.36 L1646.33 1211.36 L1645.74 1211.36 L1645.15 1211.36 L1644.57 1211.36 L1643.98 1211.36 L1643.39 1211.36 L1642.81 1211.36 L1642.22 1211.36 L1641.63 1211.36 L1641.05 1211.36 L1640.46 1211.36 L1639.88 1211.36 L1639.29 1211.36 L1638.7 1211.36 L1638.12 1211.36 L1637.53 1211.36 L1636.94 1211.36 L1636.36 1211.36 L1635.77 1211.36 L1635.18 1211.36 L1634.6 1211.36 L1634.01 1211.36 L1633.42 1211.36 L1632.84 1211.36 L1632.25 1211.36 L1631.67 1211.36 L1631.08 1211.36 L1630.49 1211.36 L1629.91 1211.36 L1629.32 1211.36 L1628.73 1211.36 L1628.15 1211.36 L1627.56 1211.36 L1626.97 1211.36 L1626.39 1211.36 L1625.8 1211.36 L1625.22 1211.36 L1624.63 1211.36 L1624.04 1211.36 L1623.46 1211.36 L1622.87 1211.36 L1622.28 1211.36 L1621.7 1211.36 L1621.11 1211.36 L1620.52 1211.36 L1619.94 1211.36 L1619.35 1211.36 L1618.76 1211.36 L1618.18 1211.36 L1617.59 1211.36 L1617.01 1211.36 L1616.42 1211.36 L1615.83 1211.36 L1615.25 1211.36 L1614.66 1211.36 L1614.07 1211.36 L1613.49 1211.36 L1612.9 1211.36 L1612.31 1211.36 L1611.73 1211.36 L1611.14 1211.36 L1610.55 1211.36 L1609.97 1211.36 L1609.38 1211.36 L1608.8 1211.36 L1608.21 1211.36 L1607.62 1211.36 L1607.04 1211.36 L1606.45 1211.36 L1605.86 1211.36 L1605.28 1211.36 L1604.69 1211.36 L1604.1 1211.36 L1603.52 1211.36 L1602.93 1211.36 L1602.34 1211.36 L1601.76 1211.36 L1601.17 1211.36 L1600.59 1211.36 L1600 1211.36 L1599.41 1211.36 L1598.83 1211.36 L1598.24 1211.36 L1597.65 1211.36 L1597.07 1211.36 L1596.48 1211.36 L1595.89 1211.36 L1595.31 1211.36 L1594.72 1211.36 L1594.14 1211.36 L1593.55 1211.36 L1592.96 1211.36 L1592.38 1211.36 L1591.79 1211.36 L1591.2 1211.36 L1590.62 1211.36 L1590.03 1211.36 L1589.44 1211.36 L1588.86 1211.36 L1588.27 1211.36 L1587.68 1211.36 L1587.1 1211.36 L1586.51 1211.36 L1585.93 1211.36 L1585.34 1211.36 L1584.75 1211.36 L1584.17 1211.36 L1583.58 1211.36 L1582.99 1211.36 L1582.41 1211.36 L1581.82 1211.36 L1581.23 1211.36 L1580.65 1211.36 L1580.06 1211.36 L1579.47 1211.36 L1578.89 1211.36 L1578.3 1211.36 L1577.72 1211.36 L1577.13 1211.36 L1576.54 1211.36 L1575.96 1211.36 L1575.37 1211.36 L1574.78 1211.36 L1574.2 1211.36 L1573.61 1211.36 L1573.02 1211.36 L1572.44 1211.36 L1571.85 1211.36 L1571.27 1211.36 L1570.68 1211.36 L1570.09 1211.36 L1569.51 1211.36 L1568.92 1211.36 L1568.33 1211.36 L1567.75 1211.36 L1567.16 1211.36 L1566.57 1211.36 L1565.99 1211.36 L1565.4 1211.36 L1564.81 1211.36 L1564.23 1211.36 L1563.64 1211.36 L1563.06 1211.36 L1562.47 1211.36 L1561.88 1211.36 L1561.3 1211.36 L1560.71 1211.36 L1560.12 1211.36 L1559.54 1211.36 L1558.95 1211.36 L1558.36 1211.36 L1557.78 1211.36 L1557.19 1211.36 L1556.6 1211.36 L1556.02 1211.36 L1555.43 1211.36 L1554.85 1211.36 L1554.26 1211.36 L1553.67 1211.36 L1553.09 1211.36 L1552.5 1211.36 L1551.91 1211.36 L1551.33 1211.36 L1550.74 1211.36 L1550.15 1211.36 L1549.57 1211.36 L1548.98 1211.36 L1548.4 1211.36 L1547.81 1211.36 L1547.22 1211.36 L1546.64 1211.36 L1546.05 1211.36 L1545.46 1211.36 L1544.88 1211.36 L1544.29 1211.36 L1543.7 1211.36 L1543.12 1211.36 L1542.53 1211.36 L1541.94 1211.36 L1541.36 1211.36 L1540.77 1211.36 L1540.19 1211.36 L1539.6 1211.36 L1539.01 1211.36 L1538.43 1211.36 L1537.84 1211.36 L1537.25 1211.36 L1536.67 1211.36 L1536.08 1211.36 L1535.49 1211.36 L1534.91 1211.36 L1534.32 1211.36 L1533.73 1211.36 L1533.15 1211.36 L1532.56 1211.36 L1531.98 1211.36 L1531.39 1211.36 L1530.8 1211.36 L1530.22 1211.36 L1529.63 1211.36 L1529.04 1211.36 L1528.46 1211.36 L1527.87 1211.36 L1527.28 1211.36 L1526.7 1211.36 L1526.11 1211.36 L1525.52 1211.36 L1524.94 1211.36 L1524.35 1211.36 L1523.77 1211.36 L1523.18 1211.36 L1522.59 1211.36 L1522.01 1211.36 L1521.42 1211.36 L1520.83 1211.36 L1520.25 1211.36 L1519.66 1211.36 L1519.07 1211.36 L1518.49 1211.36 L1517.9 1211.36 L1517.32 1211.36 L1516.73 1211.36 L1516.14 1211.36 L1515.56 1211.36 L1514.97 1211.36 L1514.38 1211.36 L1513.8 1211.36 L1513.21 1211.36 L1512.62 1211.36 L1512.04 1211.36 L1511.45 1211.36 L1510.86 1211.36 L1510.28 1211.36 L1509.69 1211.36 L1509.11 1211.36 L1508.52 1211.36 L1507.93 1211.36 L1507.35 1211.36 L1506.76 1211.36 L1506.17 1211.36 L1505.59 1211.36 L1505 1211.36 L1504.41 1211.36 L1503.83 1211.36 L1503.24 1211.36 L1502.65 1211.36 L1502.07 1211.36 L1501.48 1211.36 L1500.9 1211.36 L1500.31 1211.36 L1499.72 1211.36 L1499.14 1211.36 L1498.55 1211.36 L1497.96 1211.36 L1497.38 1211.36 L1496.79 1211.36 L1496.2 1211.36 L1495.62 1211.36 L1495.03 1211.36 L1494.45 1211.36 L1493.86 1211.36 L1493.27 1211.36 L1492.69 1211.36 L1492.1 1211.36 L1491.51 1211.36 L1490.93 1211.36 L1490.34 1211.36 L1489.75 1211.36 L1489.17 1211.36 L1488.58 1211.36 L1487.99 1211.36 L1487.41 1211.36 L1486.82 1211.36 L1486.24 1211.36 L1485.65 1211.36 L1485.06 1211.36 L1484.48 1211.36 L1483.89 1211.36 L1483.3 1211.36 L1482.72 1211.36 L1482.13 1211.36 L1481.54 1211.36 L1480.96 1211.36 L1480.37 1211.36 L1479.78 1211.36 L1479.2 1211.36 L1478.61 1211.36 L1478.03 1211.36 L1477.44 1211.36 L1476.85 1211.36 L1476.27 1211.36 L1475.68 1211.36 L1475.09 1211.36 L1474.51 1211.36 L1473.92 1211.36 L1473.33 1211.36 L1472.75 1211.36 L1472.16 1211.36 L1471.57 1211.36 L1470.99 1211.36 L1470.4 1211.36 L1469.82 1211.36 L1469.23 1211.36 L1468.64 1211.36 L1468.06 1211.36 L1467.47 1211.36 L1466.88 1211.36 L1466.3 1211.36 L1465.71 1211.36 L1465.12 1211.36 L1464.54 1211.36 L1463.95 1211.36 L1463.37 1211.36 L1462.78 1211.36 L1462.19 1211.36 L1461.61 1211.36 L1461.02 1211.36 L1460.43 1211.36 L1459.85 1211.36 L1459.26 1211.36 L1458.67 1211.36 L1458.09 1211.36 L1457.5 1211.36 L1456.91 1211.36 L1456.33 1211.36 L1455.74 1211.36 L1455.16 1211.36 L1454.57 1211.36 L1453.98 1211.36 L1453.4 1211.36 L1452.81 1211.36 L1452.22 1211.36 L1451.64 1211.36 L1451.05 1211.36 L1450.46 1211.36 L1449.88 1211.36 L1449.29 1211.36 L1448.7 1211.36 L1448.12 1211.36 L1447.53 1211.36 L1446.95 1211.36 L1446.36 1211.36 L1445.77 1211.36 L1445.19 1211.36 L1444.6 1211.36 L1444.01 1211.36 L1443.43 1211.36 L1442.84 1211.36 L1442.25 1211.36 L1441.67 1211.36 L1441.08 1211.36 L1440.5 1211.36 L1439.91 1211.36 L1439.32 1211.36 L1438.74 1211.36 L1438.15 1211.36 L1437.56 1211.36 L1436.98 1211.36 L1436.39 1211.36 L1435.8 1211.36 L1435.22 1211.36 L1434.63 1211.36 L1434.04 1211.36 L1433.46 1211.36 L1432.87 1211.36 L1432.29 1211.36 L1431.7 1211.36 L1431.11 1211.36 L1430.53 1211.36 L1429.94 1211.36 L1429.35 1211.36 L1428.77 1211.36 L1428.18 1211.36 L1427.59 1211.36 L1427.01 1211.36 L1426.42 1211.36 L1425.83 1211.36 L1425.25 1211.36 L1424.66 1211.36 L1424.08 1211.36 L1423.49 1211.36 L1422.9 1211.36 L1422.32 1211.36 L1421.73 1211.36 L1421.14 1211.36 L1420.56 1211.36 L1419.97 1211.36 L1419.38 1211.36 L1418.8 1211.36 L1418.21 1211.36 L1417.63 1211.36 L1417.04 1211.36 L1416.45 1211.36 L1415.87 1211.36 L1415.28 1211.36 L1414.69 1211.36 L1414.11 1211.36 L1413.52 1211.36 L1412.93 1211.36 L1412.35 1211.36 L1411.76 1211.36 L1411.17 1211.36 L1410.59 1211.36 L1410 1211.36 L1409.42 1211.36 L1408.83 1211.36 L1408.24 1211.36 L1407.66 1211.36 L1407.07 1211.36 L1406.48 1211.36 L1405.9 1211.36 L1405.31 1211.36 L1404.72 1211.36 L1404.14 1211.36 L1403.55 1211.36 L1402.96 1211.36 L1402.38 1211.36 L1401.79 1211.36 L1401.21 1211.36 L1400.62 1211.36 L1400.03 1211.36 L1399.45 1211.36 L1398.86 1211.36 L1398.27 1211.36 L1397.69 1211.36 L1397.1 1211.36 L1396.51 1211.36 L1395.93 1211.36 L1395.34 1211.36 L1394.75 1211.36 L1394.17 1211.36 L1393.58 1211.36 L1393 1211.36 L1392.41 1211.36 L1391.82 1211.36 L1391.24 1211.36 L1390.65 1211.36 L1390.06 1211.36 L1389.48 1211.36 L1388.89 1211.36 L1388.3 1211.36 L1387.72 1211.36 L1387.13 1211.36 L1386.55 1211.36 L1385.96 1211.36 L1385.37 1211.36 L1384.79 1211.36 L1384.2 1211.36 L1383.61 1211.36 L1383.03 1211.36 L1382.44 1211.36 L1381.85 1211.36 L1381.27 1211.36 L1380.68 1211.36 L1380.09 1211.36 L1379.51 1211.36 L1378.92 1211.36 L1378.34 1211.36 L1377.75 1211.36 L1377.16 1211.36 L1376.58 1211.36 L1375.99 1211.36 L1375.4 1211.36 L1374.82 1211.36 L1374.23 1211.36 L1373.64 1211.36 L1373.06 1211.36 L1372.47 1211.36 L1371.88 1211.36 L1371.3 1211.36 L1370.71 1211.36 L1370.13 1211.36 L1369.54 1211.36 L1368.95 1211.36 L1368.37 1211.36 L1367.78 1211.36 L1367.19 1211.36 L1366.61 1211.36 L1366.02 1211.36 L1365.43 1211.36 L1364.85 1211.36 L1364.26 1211.36 L1363.68 1211.36 L1363.09 1211.36 L1362.5 1211.36 L1361.92 1211.36 L1361.33 1211.36 L1360.74 1211.36 L1360.16 1211.36 L1359.57 1211.36 L1358.98 1211.36 L1358.4 1211.36 L1357.81 1211.36 L1357.22 1211.36 L1356.64 1211.36 L1356.05 1211.36 L1355.47 1211.36 L1354.88 1211.36 L1354.29 1211.36 L1353.71 1211.36 L1353.12 1211.36 L1352.53 1211.36 L1351.95 1211.36 L1351.36 1211.36 L1350.77 1211.36 L1350.19 1211.36 L1349.6 1211.36 L1349.01 1211.36 L1348.43 1211.36 L1347.84 1211.36 L1347.26 1211.36 L1346.67 1211.36 L1346.08 1211.36 L1345.5 1211.36 L1344.91 1211.36 L1344.32 1211.36 L1343.74 1211.36 L1343.15 1211.36 L1342.56 1211.36 L1341.98 1211.36 L1341.39 1211.36 L1340.8 1211.36 L1340.22 1211.36 L1339.63 1211.36 L1339.05 1211.36 L1338.46 1211.36 L1337.87 1211.36 L1337.29 1211.36 L1336.7 1211.36 L1336.11 1211.36 L1335.53 1211.36 L1334.94 1211.36 L1334.35 1211.36 L1333.77 1211.36 L1333.18 1211.36 L1332.6 1211.36 L1332.01 1211.36 L1331.42 1211.36 L1330.84 1211.36 L1330.25 1211.36 L1329.66 1211.36 L1329.08 1211.36 L1328.49 1211.36 L1327.9 1211.36 L1327.32 1211.36 L1326.73 1211.36 L1326.14 1211.36 L1325.56 1211.36 L1324.97 1211.36 L1324.39 1211.36 L1323.8 1211.36 L1323.21 1211.36 L1322.63 1211.36 L1322.04 1211.36 L1321.45 1211.36 L1320.87 1211.36 L1320.28 1211.36 L1319.69 1211.36 L1319.11 1211.36 L1318.52 1211.36 L1317.93 1211.36 L1317.35 1211.36 L1316.76 1211.36 L1316.18 1211.36 L1315.59 1211.36 L1315 1211.36 L1314.42 1211.36 L1313.83 1211.36 L1313.24 1211.36 L1312.66 1211.36 L1312.07 1211.36 L1311.48 1211.36 L1310.9 1211.36 L1310.31 1211.36 L1309.73 1211.36 L1309.14 1211.36 L1308.55 1211.36 L1307.97 1211.36 L1307.38 1211.36 L1306.79 1211.36 L1306.21 1211.36 L1305.62 1211.36 L1305.03 1211.36 L1304.45 1211.36 L1303.86 1211.36 L1303.27 1211.36 L1302.69 1211.36 L1302.1 1211.36 L1301.52 1211.36 L1300.93 1211.36 L1300.34 1211.36 L1299.76 1211.36 L1299.17 1211.36 L1298.58 1211.36 L1298 1211.36 L1297.41 1211.36 L1296.82 1211.36 L1296.24 1211.36 L1295.65 1211.36 L1295.06 1211.36 L1294.48 1211.36 L1293.89 1211.36 L1293.31 1211.36 L1292.72 1211.36 L1292.13 1211.36 L1291.55 1211.36 L1290.96 1211.36 L1290.37 1211.36 L1289.79 1211.36 L1289.2 1211.36 L1288.61 1211.36 L1288.03 1211.36 L1287.44 1211.36 L1286.86 1211.36 L1286.27 1211.36 L1285.68 1211.36 L1285.1 1211.36 L1284.51 1211.36 L1283.92 1211.36 L1283.34 1211.36 L1282.75 1211.36 L1282.16 1211.36 L1281.58 1211.36 L1280.99 1211.36 L1280.4 1211.36 L1279.82 1211.36 L1279.23 1211.36 L1278.65 1211.36 L1278.06 1211.36 L1277.47 1211.36 L1276.89 1211.36 L1276.3 1211.36 L1275.71 1211.36 L1275.13 1211.36 L1274.54 1211.36 L1273.95 1211.36 L1273.37 1211.36 L1272.78 1211.36 L1272.19 1211.36 L1271.61 1211.36 L1271.02 1211.36 L1270.44 1211.36 L1269.85 1211.36 L1269.26 1211.36 L1268.68 1211.36 L1268.09 1211.36 L1267.5 1211.36 L1266.92 1211.36 L1266.33 1211.36 L1265.74 1211.36 L1265.16 1211.36 L1264.57 1211.36 L1263.98 1211.36 L1263.4 1211.36 L1262.81 1211.36 L1262.23 1211.36 L1261.64 1211.36 L1261.05 1211.36 L1260.47 1211.36 L1259.88 1211.36 L1259.29 1211.36 L1258.71 1211.36 L1258.12 1211.36 L1257.53 1211.36 L1256.95 1211.36 L1256.36 1211.36 L1255.78 1211.36 L1255.19 1211.36 L1254.6 1211.36 L1254.02 1211.36 L1253.43 1211.36 L1252.84 1211.36 L1252.26 1211.36 L1251.67 1211.36 L1251.08 1211.36 L1250.5 1211.36 L1249.91 1211.36 L1249.32 1211.36 L1248.74 1211.36 L1248.15 1211.36 L1247.57 1211.36 L1246.98 1211.36 L1246.39 1211.36 L1245.81 1211.36 L1245.22 1211.36 L1244.63 1211.36 L1244.05 1211.36 L1243.46 1211.36 L1242.87 1211.36 L1242.29 1211.36 L1241.7 1211.36 L1241.11 1211.36 L1240.53 1211.36 L1239.94 1211.36 L1239.36 1211.36 L1238.77 1211.36 L1238.18 1211.36 L1237.6 1211.36 L1237.01 1211.36 L1236.42 1211.36 L1235.84 1211.36 L1235.25 1211.36 L1234.66 1211.36 L1234.08 1211.36 L1233.49 1211.36 L1232.91 1211.36 L1232.32 1211.36 L1231.73 1211.36 L1231.15 1211.36 L1230.56 1211.36 L1229.97 1211.36 L1229.39 1211.36 L1228.8 1211.36 L1228.21 1211.36 L1227.63 1211.36 L1227.04 1211.36 L1226.45 1211.36 L1225.87 1211.36 L1225.28 1211.36 L1224.7 1211.36 L1224.11 1211.36 L1223.52 1211.36 L1222.94 1211.36 L1222.35 1211.36 L1221.76 1211.36 L1221.18 1211.36 L1220.59 1211.36 L1220 1211.36 L1219.42 1211.36 L1218.83 1211.36 L1218.24 1211.36 L1217.66 1211.36 L1217.07 1211.36 L1216.49 1211.36 L1215.9 1211.36 L1215.31 1211.36 L1214.73 1211.36 L1214.14 1211.36 L1213.55 1211.36 L1212.97 1211.36 L1212.38 1211.36 L1211.79 1211.36 L1211.21 1211.36 L1210.62 1211.36 L1210.03 1211.36 L1209.45 1211.36 L1208.86 1211.36 L1208.28 1211.36 L1207.69 1211.36 L1207.1 1211.36 L1206.52 1211.36 L1205.93 1211.36 L1205.34 1211.36 L1204.76 1211.36 L1204.17 1211.36 L1203.58 1211.36 L1203 1211.36 L1202.41 1211.36 L1201.83 1211.36 L1201.24 1211.36 L1200.65 1211.36 L1200.07 1211.36 L1199.48 1211.36 L1198.89 1211.36 L1198.31 1211.36 L1197.72 1211.36 L1197.13 1211.36 L1196.55 1211.36 L1195.96 1211.36 L1195.37 1211.36 L1194.79 1211.36 L1194.2 1211.36 L1193.62 1211.36 L1193.03 1211.36 L1192.44 1211.36 L1191.86 1211.36 L1191.27 1211.36 L1190.68 1211.36 L1190.1 1211.36 L1189.51 1211.36 L1188.92 1211.36 L1188.34 1211.36 L1187.75 1211.36 L1187.16 1211.36 L1186.58 1211.36 L1185.99 1211.36 L1185.41 1211.36 L1184.82 1211.36 L1184.23 1211.36 L1183.65 1211.36 L1183.06 1211.36 L1182.47 1211.36 L1181.89 1211.36 L1181.3 1211.36 L1180.71 1211.36 L1180.13 1211.36 L1179.54 1211.36 L1178.96 1211.36 L1178.37 1211.36 L1177.78 1211.36 L1177.2 1211.36 L1176.61 1211.36 L1176.02 1211.36 L1175.44 1211.36 L1174.85 1211.36 L1174.26 1211.36 L1173.68 1211.36 L1173.09 1211.36 L1172.5 1211.36 L1171.92 1211.36 L1171.33 1211.36 L1170.75 1211.36 L1170.16 1211.36 L1169.57 1211.36 L1168.99 1211.36 L1168.4 1211.36 L1167.81 1211.36 L1167.23 1211.36 L1166.64 1211.36 L1166.05 1211.36 L1165.47 1211.36 L1164.88 1211.36 L1164.29 1211.36 L1163.71 1211.36 L1163.12 1211.36 L1162.54 1211.36 L1161.95 1211.36 L1161.36 1211.36 L1160.78 1211.36 L1160.19 1211.36 L1159.6 1211.36 L1159.02 1211.36 L1158.43 1211.36 L1157.84 1211.36 L1157.26 1211.36 L1156.67 1211.36 L1156.09 1211.36 L1155.5 1211.36 L1154.91 1211.36 L1154.33 1211.36 L1153.74 1211.36 L1153.15 1211.36 L1152.57 1211.36 L1151.98 1211.36 L1151.39 1211.36 L1150.81 1211.36 L1150.22 1211.36 L1149.63 1211.36 L1149.05 1211.36 L1148.46 1211.36 L1147.88 1211.36 L1147.29 1211.36 L1146.7 1211.36 L1146.12 1211.36 L1145.53 1211.36 L1144.94 1211.36 L1144.36 1211.36 L1143.77 1211.36 L1143.18 1211.36 L1142.6 1211.36 L1142.01 1211.36 L1141.42 1211.36 L1140.84 1211.36 L1140.25 1211.36 L1139.67 1211.36 L1139.08 1211.36 L1138.49 1211.36 L1137.91 1211.36 L1137.32 1211.36 L1136.73 1211.36 L1136.15 1211.36 L1135.56 1211.36 L1134.97 1211.36 L1134.39 1211.36 L1133.8 1211.36 L1133.21 1211.36 L1132.63 1211.36 L1132.04 1211.36 L1131.46 1211.36 L1130.87 1211.36 L1130.28 1211.36 L1129.7 1211.36 L1129.11 1211.36 L1128.52 1211.36 L1127.94 1211.36 L1127.35 1211.36 L1126.76 1211.36 L1126.18 1211.36 L1125.59 1211.36 L1125.01 1211.36 L1124.42 1211.36 L1123.83 1211.36 L1123.25 1211.36 L1122.66 1211.36 L1122.07 1211.36 L1121.49 1211.36 L1120.9 1211.36 L1120.31 1211.36 L1119.73 1211.36 L1119.14 1211.36 L1118.55 1211.36 L1117.97 1211.36 L1117.38 1211.36 L1116.8 1211.36 L1116.21 1211.36 L1115.62 1211.36 L1115.04 1211.36 L1114.45 1211.36 L1113.86 1211.36 L1113.28 1211.36 L1112.69 1211.36 L1112.1 1211.36 L1111.52 1211.36 L1110.93 1211.36 L1110.34 1211.36 L1109.76 1211.36 L1109.17 1211.36 L1108.59 1211.36 L1108 1211.36 L1107.41 1211.36 L1106.83 1211.36 L1106.24 1211.36 L1105.65 1211.36 L1105.07 1211.36 L1104.48 1211.36 L1103.89 1211.36 L1103.31 1211.36 L1102.72 1211.36 L1102.14 1211.36 L1101.55 1211.36 L1100.96 1211.36 L1100.38 1211.36 L1099.79 1211.36 L1099.2 1211.36 L1098.62 1211.36 L1098.03 1211.36 L1097.44 1211.36 L1096.86 1211.36 L1096.27 1211.36 L1095.68 1211.36 L1095.1 1211.36 L1094.51 1211.36 L1093.93 1211.36 L1093.34 1211.36 L1092.75 1211.36 L1092.17 1211.36 L1091.58 1211.36 L1090.99 1211.36 L1090.41 1211.36 L1089.82 1211.36 L1089.23 1211.36 L1088.65 1211.36 L1088.06 1211.36 L1087.47 1211.36 L1086.89 1211.36 L1086.3 1211.36 L1085.72 1211.36 L1085.13 1211.36 L1084.54 1211.36 L1083.96 1211.36 L1083.37 1211.36 L1082.78 1211.36 L1082.2 1211.36 L1081.61 1211.36 L1081.02 1211.36 L1080.44 1211.36 L1079.85 1211.36 L1079.26 1211.36 L1078.68 1211.36 L1078.09 1211.36 L1077.51 1211.36 L1076.92 1211.36 L1076.33 1211.36 L1075.75 1211.36 L1075.16 1211.36 L1074.57 1211.36 L1073.99 1211.36 L1073.4 1211.36 L1072.81 1211.36 L1072.23 1211.36 L1071.64 1211.36 L1071.06 1211.36 L1070.47 1211.36 L1069.88 1211.36 L1069.3 1211.36 L1068.71 1211.36 L1068.12 1211.36 L1067.54 1211.36 L1066.95 1211.36 L1066.36 1211.36 L1065.78 1211.36 L1065.19 1211.36 L1064.6 1211.36 L1064.02 1211.36 L1063.43 1211.36 L1062.85 1211.36 L1062.26 1211.36 L1061.67 1211.36 L1061.09 1211.36 L1060.5 1211.36 L1059.91 1211.36 L1059.33 1211.36 L1058.74 1211.36 L1058.15 1211.36 L1057.57 1211.36 L1056.98 1211.36 L1056.39 1211.36 L1055.81 1211.36 L1055.22 1211.36 L1054.64 1211.36 L1054.05 1211.36 L1053.46 1211.36 L1052.88 1211.36 L1052.29 1211.36 L1051.7 1211.36 L1051.12 1211.36 L1050.53 1211.36 L1049.94 1211.36 L1049.36 1211.36 L1048.77 1211.36 L1048.19 1211.36 L1047.6 1211.36 L1047.01 1211.36 L1046.43 1211.36 L1045.84 1211.36 L1045.25 1211.36 L1044.67 1211.36 L1044.08 1211.36 L1043.49 1211.36 L1042.91 1211.36 L1042.32 1211.36 L1041.73 1211.36 L1041.15 1211.36 L1040.56 1211.36 L1039.98 1211.36 L1039.39 1211.36 L1038.8 1211.36 L1038.22 1211.36 L1037.63 1211.36 L1037.04 1211.36 L1036.46 1211.36 L1035.87 1211.36 L1035.28 1211.36 L1034.7 1211.36 L1034.11 1211.36 L1033.52 1211.36 L1032.94 1211.36 L1032.35 1211.36 L1031.77 1211.36 L1031.18 1211.36 L1030.59 1211.36 L1030.01 1211.36 L1029.42 1211.36 L1028.83 1211.36 L1028.25 1211.36 L1027.66 1211.36 L1027.07 1211.36 L1026.49 1211.36 L1025.9 1211.36 L1025.32 1211.36 L1024.73 1211.36 L1024.14 1211.36 L1023.56 1211.36 L1022.97 1211.36 L1022.38 1211.36 L1021.8 1211.36 L1021.21 1211.36 L1020.62 1211.36 L1020.04 1211.36 L1019.45 1211.36 L1018.86 1211.36 L1018.28 1211.36 L1017.69 1211.36 L1017.11 1211.36 L1016.52 1211.36 L1015.93 1211.36 L1015.35 1211.36 L1014.76 1211.36 L1014.17 1211.36 L1013.59 1211.36 L1013 1211.36 L1012.41 1211.36 L1011.83 1211.36 L1011.24 1211.36 L1010.65 1211.36 L1010.07 1211.36 L1009.48 1211.36 L1008.9 1211.36 L1008.31 1211.36 L1007.72 1211.36 L1007.14 1211.36 L1006.55 1211.36 L1005.96 1211.36 L1005.38 1211.36 L1004.79 1211.36 L1004.2 1211.36 L1003.62 1211.36 L1003.03 1211.36 L1002.44 1211.36 L1001.86 1211.36 L1001.27 1211.36 L1000.69 1211.36 L1000.1 1211.36 L999.513 1211.36 L998.926 1211.36 L998.34 1211.36 L997.754 1211.36 L997.167 1211.36 L996.581 1211.36 L995.994 1211.36 L995.408 1211.36 L994.822 1211.36 L994.235 1211.36 L993.649 1211.36 L993.062 1211.36 L992.476 1211.36 L991.889 1211.36 L991.303 1211.36 L990.717 1211.36 L990.13 1211.36 L989.544 1211.36 L988.957 1211.36 L988.371 1211.36 L987.785 1211.36 L987.198 1211.36 L986.612 1211.36 L986.025 1211.36  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.45 986.612,1211.45 987.198,1211.45 987.785,1211.45 988.371,1211.45 988.957,1211.45 989.544,1211.45 990.13,1211.45 990.717,1211.45 991.303,1211.45 991.889,1211.45 992.476,1211.45 993.062,1211.45 993.649,1211.45 994.235,1211.45 994.822,1211.45 995.408,1211.45 995.994,1211.45 996.581,1211.45 997.167,1211.45 997.754,1211.45 998.34,1211.45 998.926,1211.45 999.513,1211.45 1000.1,1211.45 1000.69,1211.45 1001.27,1211.45 1001.86,1211.45 1002.44,1211.45 1003.03,1211.45 1003.62,1211.45 1004.2,1211.45 1004.79,1211.45 1005.38,1211.45 1005.96,1211.45 1006.55,1211.45 1007.14,1211.45 1007.72,1211.45 1008.31,1211.45 1008.9,1211.45 1009.48,1211.45 1010.07,1211.45 1010.65,1211.45 1011.24,1211.45 1011.83,1211.45 1012.41,1211.45 1013,1211.45 1013.59,1211.45 1014.17,1211.45 1014.76,1211.45 1015.35,1211.45 1015.93,1211.45 1016.52,1211.45 1017.11,1211.45 1017.69,1211.45 1018.28,1211.45 1018.86,1211.45 1019.45,1211.45 1020.04,1211.45 1020.62,1211.45 1021.21,1211.45 1021.8,1211.45 1022.38,1211.45 1022.97,1211.45 1023.56,1211.45 1024.14,1211.45 1024.73,1211.45 1025.32,1211.45 1025.9,1211.45 1026.49,1211.45 1027.07,1211.45 1027.66,1211.45 1028.25,1211.45 1028.83,1211.45 1029.42,1211.45 1030.01,1211.45 1030.59,1211.45 1031.18,1211.45 1031.77,1211.45 1032.35,1211.45 1032.94,1211.45 1033.52,1211.45 1034.11,1211.45 1034.7,1211.45 1035.28,1211.45 1035.87,1211.45 1036.46,1211.45 1037.04,1211.45 1037.63,1211.45 1038.22,1211.45 1038.8,1211.45 1039.39,1211.45 1039.98,1211.45 1040.56,1211.45 1041.15,1211.45 1041.73,1211.45 1042.32,1211.45 1042.91,1211.45 1043.49,1211.45 1044.08,1211.45 1044.67,1211.45 1045.25,1211.45 1045.84,1211.45 1046.43,1211.45 1047.01,1211.45 1047.6,1211.45 1048.19,1211.45 1048.77,1211.45 1049.36,1211.45 1049.94,1211.45 1050.53,1211.45 1051.12,1211.45 1051.7,1211.45 1052.29,1211.45 1052.88,1211.45 1053.46,1211.45 1054.05,1211.45 1054.64,1211.45 1055.22,1211.45 1055.81,1211.45 1056.39,1211.45 1056.98,1211.45 1057.57,1211.45 1058.15,1211.45 1058.74,1211.45 1059.33,1211.45 1059.91,1211.45 1060.5,1211.45 1061.09,1211.45 1061.67,1211.45 1062.26,1211.45 1062.85,1211.45 1063.43,1211.45 1064.02,1211.45 1064.6,1211.45 1065.19,1211.45 1065.78,1211.45 1066.36,1211.45 1066.95,1211.45 1067.54,1211.45 1068.12,1211.45 1068.71,1211.45 1069.3,1211.45 1069.88,1211.45 1070.47,1211.45 1071.06,1211.45 1071.64,1211.45 1072.23,1211.45 1072.81,1211.45 1073.4,1211.45 1073.99,1211.45 1074.57,1211.45 1075.16,1211.45 1075.75,1211.45 1076.33,1211.45 1076.92,1211.45 1077.51,1211.45 1078.09,1211.45 1078.68,1211.45 1079.26,1211.45 1079.85,1211.45 1080.44,1211.45 1081.02,1211.45 1081.61,1211.45 1082.2,1211.45 1082.78,1211.45 1083.37,1211.45 1083.96,1211.45 1084.54,1211.45 1085.13,1211.45 1085.72,1211.45 1086.3,1211.45 1086.89,1211.45 1087.47,1211.45 1088.06,1211.45 1088.65,1211.45 1089.23,1211.45 1089.82,1211.45 1090.41,1211.45 1090.99,1211.45 1091.58,1211.45 1092.17,1211.45 1092.75,1211.45 1093.34,1211.45 1093.93,1211.45 1094.51,1211.45 1095.1,1211.45 1095.68,1211.45 1096.27,1211.45 1096.86,1211.45 1097.44,1211.45 1098.03,1211.45 1098.62,1211.45 1099.2,1211.45 1099.79,1211.45 1100.38,1211.45 1100.96,1211.45 1101.55,1211.45 1102.14,1211.45 1102.72,1211.45 1103.31,1211.45 1103.89,1211.45 1104.48,1211.45 1105.07,1211.45 1105.65,1211.45 1106.24,1211.45 1106.83,1211.45 1107.41,1211.45 1108,1211.45 1108.59,1211.45 1109.17,1211.45 1109.76,1211.45 1110.34,1211.45 1110.93,1211.45 1111.52,1211.45 1112.1,1211.45 1112.69,1211.45 1113.28,1211.45 1113.86,1211.45 1114.45,1211.45 1115.04,1211.45 1115.62,1211.45 1116.21,1211.45 1116.8,1211.45 1117.38,1211.45 1117.97,1211.45 1118.55,1211.45 1119.14,1211.45 1119.73,1211.45 1120.31,1211.45 1120.9,1211.45 1121.49,1211.45 1122.07,1211.45 1122.66,1211.45 1123.25,1211.45 1123.83,1211.45 1124.42,1211.45 1125.01,1211.45 1125.59,1211.45 1126.18,1211.45 1126.76,1211.45 1127.35,1211.45 1127.94,1211.45 1128.52,1211.45 1129.11,1211.45 1129.7,1211.45 1130.28,1211.45 1130.87,1211.45 1131.46,1211.45 1132.04,1211.45 1132.63,1211.45 1133.21,1211.45 1133.8,1211.45 1134.39,1211.45 1134.97,1211.45 1135.56,1211.45 1136.15,1211.45 1136.73,1211.45 1137.32,1211.45 1137.91,1211.45 1138.49,1211.45 1139.08,1211.45 1139.67,1211.45 1140.25,1211.45 1140.84,1211.45 1141.42,1211.45 1142.01,1211.45 1142.6,1211.45 1143.18,1211.45 1143.77,1211.45 1144.36,1211.45 1144.94,1211.45 1145.53,1211.45 1146.12,1211.45 1146.7,1211.45 1147.29,1211.45 1147.88,1211.45 1148.46,1211.45 1149.05,1211.45 1149.63,1211.45 1150.22,1211.45 1150.81,1211.45 1151.39,1211.45 1151.98,1211.45 1152.57,1211.45 1153.15,1211.45 1153.74,1211.45 1154.33,1211.45 1154.91,1211.45 1155.5,1211.45 1156.09,1211.45 1156.67,1211.45 1157.26,1211.45 1157.84,1211.45 1158.43,1211.45 1159.02,1211.45 1159.6,1211.45 1160.19,1211.45 1160.78,1211.45 1161.36,1211.45 1161.95,1211.45 1162.54,1211.45 1163.12,1211.45 1163.71,1211.45 1164.29,1211.45 1164.88,1211.45 1165.47,1211.45 1166.05,1211.45 1166.64,1211.45 1167.23,1211.45 1167.81,1211.45 1168.4,1211.45 1168.99,1211.45 1169.57,1211.45 1170.16,1211.45 1170.75,1211.45 1171.33,1211.45 1171.92,1211.45 1172.5,1211.45 1173.09,1211.45 1173.68,1211.45 1174.26,1211.45 1174.85,1211.45 1175.44,1211.45 1176.02,1211.45 1176.61,1211.45 1177.2,1211.45 1177.78,1211.45 1178.37,1211.45 1178.96,1211.45 1179.54,1211.45 1180.13,1211.45 1180.71,1211.45 1181.3,1211.45 1181.89,1211.45 1182.47,1211.45 1183.06,1211.45 1183.65,1211.45 1184.23,1211.45 1184.82,1211.45 1185.41,1211.45 1185.99,1211.45 1186.58,1211.45 1187.16,1211.45 1187.75,1211.45 1188.34,1211.45 1188.92,1211.45 1189.51,1211.45 1190.1,1211.45 1190.68,1211.45 1191.27,1211.45 1191.86,1211.45 1192.44,1211.45 1193.03,1211.45 1193.62,1211.45 1194.2,1211.45 1194.79,1211.45 1195.37,1211.45 1195.96,1211.45 1196.55,1211.45 1197.13,1211.45 1197.72,1211.45 1198.31,1211.45 1198.89,1211.45 1199.48,1211.45 1200.07,1211.45 1200.65,1211.45 1201.24,1211.45 1201.83,1211.45 1202.41,1211.45 1203,1211.45 1203.58,1211.45 1204.17,1211.45 1204.76,1211.45 1205.34,1211.45 1205.93,1211.45 1206.52,1211.45 1207.1,1211.45 1207.69,1211.45 1208.28,1211.45 1208.86,1211.45 1209.45,1211.45 1210.03,1211.45 1210.62,1211.45 1211.21,1211.45 1211.79,1211.45 1212.38,1211.45 1212.97,1211.45 1213.55,1211.45 1214.14,1211.45 1214.73,1211.45 1215.31,1211.45 1215.9,1211.45 1216.49,1211.45 1217.07,1211.45 1217.66,1211.45 1218.24,1211.45 1218.83,1211.45 1219.42,1211.45 1220,1211.45 1220.59,1211.45 1221.18,1211.45 1221.76,1211.45 1222.35,1211.45 1222.94,1211.45 1223.52,1211.45 1224.11,1211.45 1224.7,1211.45 1225.28,1211.45 1225.87,1211.45 1226.45,1211.45 1227.04,1211.45 1227.63,1211.45 1228.21,1211.45 1228.8,1211.45 1229.39,1211.45 1229.97,1211.45 1230.56,1211.45 1231.15,1211.45 1231.73,1211.45 1232.32,1211.45 1232.91,1211.45 1233.49,1211.45 1234.08,1211.45 1234.66,1211.45 1235.25,1211.45 1235.84,1211.45 1236.42,1211.45 1237.01,1211.45 1237.6,1211.45 1238.18,1211.45 1238.77,1211.45 1239.36,1211.45 1239.94,1211.45 1240.53,1211.45 1241.11,1211.45 1241.7,1211.45 1242.29,1211.45 1242.87,1211.45 1243.46,1211.45 1244.05,1211.45 1244.63,1211.45 1245.22,1211.45 1245.81,1211.45 1246.39,1211.45 1246.98,1211.45 1247.57,1211.45 1248.15,1211.45 1248.74,1211.45 1249.32,1211.45 1249.91,1211.45 1250.5,1211.45 1251.08,1211.45 1251.67,1211.45 1252.26,1211.45 1252.84,1211.45 1253.43,1211.45 1254.02,1211.45 1254.6,1211.45 1255.19,1211.45 1255.78,1211.45 1256.36,1211.45 1256.95,1211.45 1257.53,1211.45 1258.12,1211.45 1258.71,1211.45 1259.29,1211.45 1259.88,1211.45 1260.47,1211.45 1261.05,1211.45 1261.64,1211.45 1262.23,1211.45 1262.81,1211.45 1263.4,1211.45 1263.98,1211.45 1264.57,1211.45 1265.16,1211.45 1265.74,1211.45 1266.33,1211.45 1266.92,1211.45 1267.5,1211.45 1268.09,1211.45 1268.68,1211.45 1269.26,1211.45 1269.85,1211.45 1270.44,1211.45 1271.02,1211.45 1271.61,1211.45 1272.19,1211.45 1272.78,1211.45 1273.37,1211.45 1273.95,1211.45 1274.54,1211.45 1275.13,1211.45 1275.71,1211.45 1276.3,1211.45 1276.89,1211.45 1277.47,1211.45 1278.06,1211.45 1278.65,1211.45 1279.23,1211.45 1279.82,1211.45 1280.4,1211.45 1280.99,1211.45 1281.58,1211.45 1282.16,1211.45 1282.75,1211.45 1283.34,1211.45 1283.92,1211.45 1284.51,1211.45 1285.1,1211.45 1285.68,1211.45 1286.27,1211.45 1286.86,1211.45 1287.44,1211.45 1288.03,1211.45 1288.61,1211.45 1289.2,1211.45 1289.79,1211.45 1290.37,1211.45 1290.96,1211.45 1291.55,1211.45 1292.13,1211.45 1292.72,1211.45 1293.31,1211.45 1293.89,1211.45 1294.48,1211.45 1295.06,1211.45 1295.65,1211.45 1296.24,1211.45 1296.82,1211.45 1297.41,1211.45 1298,1211.45 1298.58,1211.45 1299.17,1211.45 1299.76,1211.45 1300.34,1211.45 1300.93,1211.45 1301.52,1211.45 1302.1,1211.45 1302.69,1211.45 1303.27,1211.45 1303.86,1211.45 1304.45,1211.45 1305.03,1211.45 1305.62,1211.45 1306.21,1211.45 1306.79,1211.45 1307.38,1211.45 1307.97,1211.45 1308.55,1211.45 1309.14,1211.45 1309.73,1211.45 1310.31,1211.45 1310.9,1211.45 1311.48,1211.45 1312.07,1211.45 1312.66,1211.45 1313.24,1211.45 1313.83,1211.45 1314.42,1211.45 1315,1211.45 1315.59,1211.45 1316.18,1211.45 1316.76,1211.45 1317.35,1211.45 1317.93,1211.45 1318.52,1211.45 1319.11,1211.45 1319.69,1211.45 1320.28,1211.45 1320.87,1211.45 1321.45,1211.45 1322.04,1211.45 1322.63,1211.45 1323.21,1211.45 1323.8,1211.45 1324.39,1211.45 1324.97,1211.45 1325.56,1211.45 1326.14,1211.45 1326.73,1211.45 1327.32,1211.45 1327.9,1211.45 1328.49,1211.45 1329.08,1211.45 1329.66,1211.45 1330.25,1211.45 1330.84,1211.45 1331.42,1211.45 1332.01,1211.45 1332.6,1211.45 1333.18,1211.45 1333.77,1211.45 1334.35,1211.45 1334.94,1211.45 1335.53,1211.45 1336.11,1211.45 1336.7,1211.45 1337.29,1211.45 1337.87,1211.45 1338.46,1211.45 1339.05,1211.45 1339.63,1211.45 1340.22,1211.45 1340.8,1211.45 1341.39,1211.45 1341.98,1211.45 1342.56,1211.45 1343.15,1211.45 1343.74,1211.45 1344.32,1211.45 1344.91,1211.45 1345.5,1211.45 1346.08,1211.45 1346.67,1211.45 1347.26,1211.45 1347.84,1211.45 1348.43,1211.45 1349.01,1211.45 1349.6,1211.45 1350.19,1211.45 1350.77,1211.45 1351.36,1211.45 1351.95,1211.45 1352.53,1211.45 1353.12,1211.45 1353.71,1211.45 1354.29,1211.45 1354.88,1211.45 1355.47,1211.45 1356.05,1211.45 1356.64,1211.45 1357.22,1211.45 1357.81,1211.45 1358.4,1211.45 1358.98,1211.45 1359.57,1211.45 1360.16,1211.45 1360.74,1211.45 1361.33,1211.45 1361.92,1211.45 1362.5,1211.45 1363.09,1211.45 1363.68,1211.45 1364.26,1211.45 1364.85,1211.45 1365.43,1211.45 1366.02,1211.45 1366.61,1211.45 1367.19,1211.45 1367.78,1211.45 1368.37,1211.45 1368.95,1211.45 1369.54,1211.45 1370.13,1211.45 1370.71,1211.45 1371.3,1211.45 1371.88,1211.45 1372.47,1211.45 1373.06,1211.45 1373.64,1211.45 1374.23,1211.45 1374.82,1211.45 1375.4,1211.45 1375.99,1211.45 1376.58,1211.45 1377.16,1211.45 1377.75,1211.45 1378.34,1211.45 1378.92,1211.45 1379.51,1211.45 1380.09,1211.45 1380.68,1211.45 1381.27,1211.45 1381.85,1211.45 1382.44,1211.45 1383.03,1211.45 1383.61,1211.45 1384.2,1211.45 1384.79,1211.45 1385.37,1211.45 1385.96,1211.45 1386.55,1211.45 1387.13,1211.45 1387.72,1211.45 1388.3,1211.45 1388.89,1211.45 1389.48,1211.45 1390.06,1211.45 1390.65,1211.45 1391.24,1211.45 1391.82,1211.45 1392.41,1211.45 1393,1211.45 1393.58,1211.45 1394.17,1211.45 1394.75,1211.45 1395.34,1211.45 1395.93,1211.45 1396.51,1211.45 1397.1,1211.45 1397.69,1211.45 1398.27,1211.45 1398.86,1211.45 1399.45,1211.45 1400.03,1211.45 1400.62,1211.45 1401.21,1211.45 1401.79,1211.45 1402.38,1211.45 1402.96,1211.45 1403.55,1211.45 1404.14,1211.45 1404.72,1211.45 1405.31,1211.45 1405.9,1211.45 1406.48,1211.45 1407.07,1211.45 1407.66,1211.45 1408.24,1211.45 1408.83,1211.45 1409.42,1211.45 1410,1211.45 1410.59,1211.45 1411.17,1211.45 1411.76,1211.45 1412.35,1211.45 1412.93,1211.45 1413.52,1211.45 1414.11,1211.45 1414.69,1211.45 1415.28,1211.45 1415.87,1211.45 1416.45,1211.45 1417.04,1211.45 1417.63,1211.45 1418.21,1211.45 1418.8,1211.45 1419.38,1211.45 1419.97,1211.45 1420.56,1211.45 1421.14,1211.45 1421.73,1211.45 1422.32,1211.45 1422.9,1211.45 1423.49,1211.45 1424.08,1211.45 1424.66,1211.45 1425.25,1211.45 1425.83,1211.45 1426.42,1211.45 1427.01,1211.45 1427.59,1211.45 1428.18,1211.45 1428.77,1211.45 1429.35,1211.45 1429.94,1211.45 1430.53,1211.45 1431.11,1211.45 1431.7,1211.45 1432.29,1211.45 1432.87,1211.45 1433.46,1211.45 1434.04,1211.45 1434.63,1211.45 1435.22,1211.45 1435.8,1211.45 1436.39,1211.45 1436.98,1211.45 1437.56,1211.45 1438.15,1211.45 1438.74,1211.45 1439.32,1211.45 1439.91,1211.45 1440.5,1211.45 1441.08,1211.45 1441.67,1211.45 1442.25,1211.45 1442.84,1211.45 1443.43,1211.45 1444.01,1211.45 1444.6,1211.45 1445.19,1211.45 1445.77,1211.45 1446.36,1211.45 1446.95,1211.45 1447.53,1211.45 1448.12,1211.45 1448.7,1211.45 1449.29,1211.45 1449.88,1211.45 1450.46,1211.45 1451.05,1211.45 1451.64,1211.45 1452.22,1211.45 1452.81,1211.45 1453.4,1211.45 1453.98,1211.45 1454.57,1211.45 1455.16,1211.45 1455.74,1211.45 1456.33,1211.45 1456.91,1211.45 1457.5,1211.45 1458.09,1211.45 1458.67,1211.45 1459.26,1211.45 1459.85,1211.45 1460.43,1211.45 1461.02,1211.45 1461.61,1211.45 1462.19,1211.45 1462.78,1211.45 1463.37,1211.45 1463.95,1211.45 1464.54,1211.45 1465.12,1211.45 1465.71,1211.45 1466.3,1211.45 1466.88,1211.45 1467.47,1211.45 1468.06,1211.45 1468.64,1211.45 1469.23,1211.45 1469.82,1211.45 1470.4,1211.45 1470.99,1211.45 1471.57,1211.45 1472.16,1211.45 1472.75,1211.45 1473.33,1211.45 1473.92,1211.45 1474.51,1211.45 1475.09,1211.45 1475.68,1211.45 1476.27,1211.45 1476.85,1211.45 1477.44,1211.45 1478.03,1211.45 1478.61,1211.45 1479.2,1211.45 1479.78,1211.45 1480.37,1211.45 1480.96,1211.45 1481.54,1211.45 1482.13,1211.45 1482.72,1211.45 1483.3,1211.45 1483.89,1211.45 1484.48,1211.45 1485.06,1211.45 1485.65,1211.45 1486.24,1211.45 1486.82,1211.45 1487.41,1211.45 1487.99,1211.45 1488.58,1211.45 1489.17,1211.45 1489.75,1211.45 1490.34,1211.45 1490.93,1211.45 1491.51,1211.45 1492.1,1211.45 1492.69,1211.45 1493.27,1211.45 1493.86,1211.45 1494.45,1211.45 1495.03,1211.45 1495.62,1211.45 1496.2,1211.45 1496.79,1211.45 1497.38,1211.45 1497.96,1211.45 1498.55,1211.45 1499.14,1211.45 1499.72,1211.45 1500.31,1211.45 1500.9,1211.45 1501.48,1211.45 1502.07,1211.45 1502.65,1211.45 1503.24,1211.45 1503.83,1211.45 1504.41,1211.45 1505,1211.45 1505.59,1211.45 1506.17,1211.45 1506.76,1211.45 1507.35,1211.45 1507.93,1211.45 1508.52,1211.45 1509.11,1211.45 1509.69,1211.45 1510.28,1211.45 1510.86,1211.45 1511.45,1211.45 1512.04,1211.45 1512.62,1211.45 1513.21,1211.45 1513.8,1211.45 1514.38,1211.45 1514.97,1211.45 1515.56,1211.45 1516.14,1211.45 1516.73,1211.45 1517.32,1211.45 1517.9,1211.45 1518.49,1211.45 1519.07,1211.45 1519.66,1211.45 1520.25,1211.45 1520.83,1211.45 1521.42,1211.45 1522.01,1211.45 1522.59,1211.45 1523.18,1211.45 1523.77,1211.45 1524.35,1211.45 1524.94,1211.45 1525.52,1211.45 1526.11,1211.45 1526.7,1211.45 1527.28,1211.45 1527.87,1211.45 1528.46,1211.45 1529.04,1211.45 1529.63,1211.45 1530.22,1211.45 1530.8,1211.45 1531.39,1211.45 1531.98,1211.45 1532.56,1211.45 1533.15,1211.45 1533.73,1211.45 1534.32,1211.45 1534.91,1211.45 1535.49,1211.45 1536.08,1211.45 1536.67,1211.45 1537.25,1211.45 1537.84,1211.45 1538.43,1211.45 1539.01,1211.45 1539.6,1211.45 1540.19,1211.45 1540.77,1211.45 1541.36,1211.45 1541.94,1211.45 1542.53,1211.45 1543.12,1211.45 1543.7,1211.45 1544.29,1211.45 1544.88,1211.45 1545.46,1211.45 1546.05,1211.45 1546.64,1211.45 1547.22,1211.45 1547.81,1211.45 1548.4,1211.45 1548.98,1211.45 1549.57,1211.45 1550.15,1211.45 1550.74,1211.45 1551.33,1211.45 1551.91,1211.45 1552.5,1211.45 1553.09,1211.45 1553.67,1211.45 1554.26,1211.45 1554.85,1211.45 1555.43,1211.45 1556.02,1211.45 1556.6,1211.45 1557.19,1211.45 1557.78,1211.45 1558.36,1211.45 1558.95,1211.45 1559.54,1211.45 1560.12,1211.45 1560.71,1211.45 1561.3,1211.45 1561.88,1211.45 1562.47,1211.45 1563.06,1211.45 1563.64,1211.45 1564.23,1211.45 1564.81,1211.45 1565.4,1211.45 1565.99,1211.45 1566.57,1211.45 1567.16,1211.45 1567.75,1211.45 1568.33,1211.45 1568.92,1211.45 1569.51,1211.45 1570.09,1211.45 1570.68,1211.45 1571.27,1211.45 1571.85,1211.45 1572.44,1211.45 1573.02,1211.45 1573.61,1211.45 1574.2,1211.45 1574.78,1211.45 1575.37,1211.45 1575.96,1211.45 1576.54,1211.45 1577.13,1211.45 1577.72,1211.45 1578.3,1211.45 1578.89,1211.45 1579.47,1211.45 1580.06,1211.45 1580.65,1211.45 1581.23,1211.45 1581.82,1211.45 1582.41,1211.45 1582.99,1211.45 1583.58,1211.45 1584.17,1211.45 1584.75,1211.45 1585.34,1211.45 1585.93,1211.45 1586.51,1211.45 1587.1,1211.45 1587.68,1211.45 1588.27,1211.45 1588.86,1211.45 1589.44,1211.45 1590.03,1211.45 1590.62,1211.45 1591.2,1211.45 1591.79,1211.45 1592.38,1211.45 1592.96,1211.45 1593.55,1211.45 1594.14,1211.45 1594.72,1211.45 1595.31,1211.45 1595.89,1211.45 1596.48,1211.45 1597.07,1211.45 1597.65,1211.45 1598.24,1211.45 1598.83,1211.45 1599.41,1211.45 1600,1211.45 1600.59,1211.45 1601.17,1211.45 1601.76,1211.45 1602.34,1211.45 1602.93,1211.45 1603.52,1211.45 1604.1,1211.45 1604.69,1211.45 1605.28,1211.45 1605.86,1211.45 1606.45,1211.45 1607.04,1211.45 1607.62,1211.45 1608.21,1211.45 1608.8,1211.45 1609.38,1211.45 1609.97,1211.45 1610.55,1211.45 1611.14,1211.45 1611.73,1211.45 1612.31,1211.45 1612.9,1211.45 1613.49,1211.45 1614.07,1211.45 1614.66,1211.45 1615.25,1211.45 1615.83,1211.45 1616.42,1211.45 1617.01,1211.45 1617.59,1211.45 1618.18,1211.45 1618.76,1211.45 1619.35,1211.45 1619.94,1211.45 1620.52,1211.45 1621.11,1211.45 1621.7,1211.45 1622.28,1211.45 1622.87,1211.45 1623.46,1211.45 1624.04,1211.45 1624.63,1211.45 1625.22,1211.45 1625.8,1211.45 1626.39,1211.45 1626.97,1211.45 1627.56,1211.45 1628.15,1211.45 1628.73,1211.45 1629.32,1211.45 1629.91,1211.45 1630.49,1211.45 1631.08,1211.45 1631.67,1211.45 1632.25,1211.45 1632.84,1211.45 1633.42,1211.45 1634.01,1211.45 1634.6,1211.45 1635.18,1211.45 1635.77,1211.45 1636.36,1211.45 1636.94,1211.45 1637.53,1211.45 1638.12,1211.45 1638.7,1211.45 1639.29,1211.45 1639.88,1211.45 1640.46,1211.45 1641.05,1211.45 1641.63,1211.45 1642.22,1211.45 1642.81,1211.45 1643.39,1211.45 1643.98,1211.45 1644.57,1211.45 1645.15,1211.45 1645.74,1211.45 1646.33,1211.45 1646.91,1211.45 1647.5,1211.45 1648.09,1211.45 1648.67,1211.45 1649.26,1211.45 1649.84,1211.45 1650.43,1211.45 1651.02,1211.45 1651.6,1211.45 1652.19,1211.45 1652.78,1211.45 1653.36,1211.45 1653.95,1211.45 1654.54,1211.45 1655.12,1211.45 1655.71,1211.45 1656.29,1211.45 1656.88,1211.45 1657.47,1211.45 1658.05,1211.45 1658.64,1211.45 1659.23,1211.45 1659.81,1211.45 1660.4,1211.45 1660.99,1211.45 1661.57,1211.45 1662.16,1211.45 1662.75,1211.45 1663.33,1211.45 1663.92,1211.45 1664.5,1211.45 1665.09,1211.45 1665.68,1211.45 1666.26,1211.45 1666.85,1211.45 1667.44,1211.45 1668.02,1211.45 1668.61,1211.45 1669.2,1211.45 1669.78,1211.45 1670.37,1211.45 1670.96,1211.45 1671.54,1211.45 1672.13,1211.45 1672.71,1211.45 1673.3,1211.45 1673.89,1211.45 1674.47,1211.45 1675.06,1211.45 1675.65,1211.45 1676.23,1211.45 1676.82,1211.45 1677.41,1211.45 1677.99,1211.45 1678.58,1211.45 1679.17,1211.45 1679.75,1211.45 1680.34,1211.45 1680.92,1211.45 1681.51,1211.45 1682.1,1211.45 1682.68,1211.45 1683.27,1211.45 1683.86,1211.45 1684.44,1211.45 1685.03,1211.45 1685.62,1211.45 1686.2,1211.45 1686.79,1211.45 1687.37,1211.45 1687.96,1211.45 1688.55,1211.45 1689.13,1211.45 1689.72,1211.45 1690.31,1211.45 1690.89,1211.45 1691.48,1211.45 1692.07,1211.45 1692.65,1211.45 1693.24,1211.45 1693.83,1211.45 1694.41,1211.45 1695,1211.45 1695.58,1211.45 1696.17,1211.45 1696.76,1211.45 1697.34,1211.45 1697.93,1211.45 1698.52,1211.45 1699.1,1211.45 1699.69,1211.45 1700.28,1211.45 1700.86,1211.45 1701.45,1211.45 1702.04,1211.45 1702.62,1211.45 1703.21,1211.45 1703.79,1211.45 1704.38,1211.45 1704.97,1211.45 1705.55,1211.45 1706.14,1211.45 1706.73,1211.45 1707.31,1211.45 1707.9,1211.45 1708.49,1211.45 1709.07,1211.45 1709.66,1211.45 1710.24,1211.45 1710.83,1211.45 1711.42,1211.45 1712,1211.45 1712.59,1211.45 1713.18,1211.45 1713.76,1211.45 1714.35,1211.45 1714.94,1211.45 1715.52,1211.45 1716.11,1211.45 1716.7,1211.45 1717.28,1211.45 1717.87,1211.45 1718.45,1211.45 1719.04,1211.45 1719.63,1211.45 1720.21,1211.45 1720.8,1211.45 1721.39,1211.45 1721.97,1211.45 1722.56,1211.45 1723.15,1211.45 1723.73,1211.45 1724.32,1211.45 1724.91,1211.45 1725.49,1211.45 1726.08,1211.45 1726.66,1211.45 1727.25,1211.45 1727.84,1211.45 1728.42,1211.45 1729.01,1211.45 1729.6,1211.45 1730.18,1211.45 1730.77,1211.45 1731.36,1211.45 1731.94,1211.45 1732.53,1211.45 1733.11,1211.45 1733.7,1211.45 1734.29,1211.45 1734.87,1211.45 1735.46,1211.45 1736.05,1211.45 1736.63,1211.45 1737.22,1211.45 1737.81,1211.45 1738.39,1211.45 1738.98,1211.45 1739.57,1211.45 1740.15,1211.45 1740.74,1211.45 1741.32,1211.45 1741.91,1211.45 1742.5,1211.45 1743.08,1211.45 1743.67,1211.45 1744.26,1211.45 1744.84,1211.45 1745.43,1211.45 1746.02,1211.45 1746.6,1211.45 1747.19,1211.45 1747.78,1211.45 1748.36,1211.45 1748.95,1211.45 1749.53,1211.45 1750.12,1211.45 1750.71,1211.45 1751.29,1211.45 1751.88,1211.45 1752.47,1211.45 1753.05,1211.45 1753.64,1211.45 1754.23,1211.45 1754.81,1211.45 1755.4,1211.45 1755.99,1211.45 1756.57,1211.45 1757.16,1211.45 1757.74,1211.45 1758.33,1211.45 1758.92,1211.45 1759.5,1211.45 1760.09,1211.45 1760.68,1211.45 1761.26,1211.45 1761.85,1211.45 1762.44,1211.45 1763.02,1211.45 1763.61,1211.45 1764.19,1211.45 1764.78,1211.45 1765.37,1211.45 1765.95,1211.45 1766.54,1211.45 1767.13,1211.45 1767.71,1211.45 1768.3,1211.45 1768.89,1211.45 1769.47,1211.45 1770.06,1211.45 1770.65,1211.45 1771.23,1211.45 1771.82,1211.45 1772.4,1211.45 1772.99,1211.45 1773.58,1211.45 1774.16,1211.45 1774.75,1211.45 1775.34,1211.45 1775.92,1211.45 1776.51,1211.45 1777.1,1211.45 1777.68,1211.45 1778.27,1211.45 1778.86,1211.45 1779.44,1211.45 1780.03,1211.45 1780.61,1211.45 1781.2,1211.45 1781.79,1211.45 1782.37,1211.45 1782.96,1211.45 1783.55,1211.45 1784.13,1211.45 1784.72,1211.45 1785.31,1211.45 1785.89,1211.45 1786.48,1211.45 1787.06,1211.45 1787.65,1211.45 1788.24,1211.45 1788.82,1211.45 1789.41,1211.45 1790,1211.45 1790.58,1211.45 1791.17,1211.45 1791.76,1211.45 1792.34,1211.45 1792.93,1211.45 1793.52,1211.45 1794.1,1211.45 1794.69,1211.45 1795.27,1211.45 1795.86,1211.45 1796.45,1211.45 1797.03,1211.45 1797.62,1211.45 1798.21,1211.45 1798.79,1211.45 1799.38,1211.45 1799.97,1211.45 1800.55,1211.45 1801.14,1211.45 1801.73,1211.45 1802.31,1211.45 1802.9,1211.45 1803.48,1211.45 1804.07,1211.45 1804.66,1211.45 1805.24,1211.45 1805.83,1211.45 1806.42,1211.45 1807,1211.45 1807.59,1211.45 1808.18,1211.45 1808.76,1211.45 1809.35,1211.45 1809.94,1211.45 1810.52,1211.45 1811.11,1211.45 1811.69,1211.45 1812.28,1211.45 1812.87,1211.45 1813.45,1211.45 1814.04,1211.45 1814.63,1211.45 1815.21,1211.45 1815.8,1211.45 1816.39,1211.45 1816.97,1211.45 1817.56,1211.45 1818.14,1211.45 1818.73,1211.45 1819.32,1211.45 1819.9,1211.45 1820.49,1211.45 1821.08,1211.45 1821.66,1211.45 1822.25,1211.45 1822.84,1211.45 1823.42,1211.45 1824.01,1211.45 1824.6,1211.45 1825.18,1211.45 1825.77,1211.45 1826.35,1211.45 1826.94,1211.45 1827.53,1211.45 1828.11,1211.45 1828.7,1211.45 1829.29,1211.45 1829.87,1211.45 1830.46,1211.45 1831.05,1211.45 1831.63,1211.45 1832.22,1211.45 1832.81,1211.45 1833.39,1211.45 1833.98,1211.45 1834.56,1211.45 1835.15,1211.45 1835.74,1211.45 1836.32,1211.45 1836.91,1211.45 1837.5,1211.45 1838.08,1211.45 1838.67,1211.45 1839.26,1211.45 1839.84,1211.45 1840.43,1211.45 1841.01,1211.45 1841.6,1211.45 1842.19,1211.45 1842.77,1211.45 1843.36,1211.45 1843.95,1211.45 1844.53,1211.45 1845.12,1211.45 1845.71,1211.45 1846.29,1211.45 1846.88,1211.45 1847.47,1211.45 1848.05,1211.45 1848.64,1211.45 1849.22,1211.45 1849.81,1211.45 1850.4,1211.45 1850.98,1211.45 1851.57,1211.45 1852.16,1211.45 1852.74,1211.45 1853.33,1211.45 1853.92,1211.45 1854.5,1211.45 1855.09,1211.45 1855.68,1211.45 1856.26,1211.45 1856.85,1211.45 1857.43,1211.45 1858.02,1211.45 1858.61,1211.45 1859.19,1211.45 1859.78,1211.45 1860.37,1211.45 1860.95,1211.45 1861.54,1211.45 1862.13,1211.45 1862.71,1211.45 1863.3,1211.45 1863.88,1211.45 1864.47,1211.45 1865.06,1211.45 1865.64,1211.45 1866.23,1211.45 1866.82,1211.45 1867.4,1211.45 1867.99,1211.45 1868.58,1211.45 1869.16,1211.45 1869.75,1211.45 1870.34,1211.45 1870.92,1211.45 1871.51,1211.45 1872.09,1211.45 1872.68,1211.45 1873.27,1211.45 1873.85,1211.45 1874.44,1211.45 1875.03,1211.45 1875.61,1211.45 1876.2,1211.45 1876.79,1211.45 1877.37,1211.45 1877.96,1211.45 1878.55,1211.45 1879.13,1211.45 1879.72,1211.45 1880.3,1211.45 1880.89,1211.45 1881.48,1211.45 1882.06,1211.45 1882.65,1211.45 1883.24,1211.45 1883.82,1211.45 1884.41,1211.45 1885,1211.45 1885.58,1211.45 1886.17,1211.45 1886.76,1211.45 1887.34,1211.45 1887.93,1211.45 1888.51,1211.45 1889.1,1211.45 1889.69,1211.45 1890.27,1211.45 1890.86,1211.45 1891.45,1211.45 1892.03,1211.45 1892.62,1211.45 1893.21,1211.45 1893.79,1211.45 1894.38,1211.45 1894.96,1211.45 1895.55,1211.45 1896.14,1211.45 1896.72,1211.45 1897.31,1211.45 1897.9,1211.45 1898.48,1211.45 1899.07,1211.45 1899.66,1211.45 1900.24,1211.45 1900.83,1211.45 1901.42,1211.45 1902,1211.45 1902.59,1211.45 1903.17,1211.45 1903.76,1211.45 1904.35,1211.45 1904.93,1211.45 1905.52,1211.45 1906.11,1211.45 1906.69,1211.45 1907.28,1211.45 1907.87,1211.45 1908.45,1211.45 1909.04,1211.45 1909.63,1211.45 1910.21,1211.45 1910.8,1211.45 1911.38,1211.45 1911.97,1211.45 1912.56,1211.45 1913.14,1211.45 1913.73,1211.45 1914.32,1211.45 1914.9,1211.45 1915.49,1211.45 1916.08,1211.45 1916.66,1211.45 1917.25,1211.45 1917.83,1211.45 1918.42,1211.45 1919.01,1211.45 1919.59,1211.45 1920.18,1211.45 1920.77,1211.45 1921.35,1211.45 1921.94,1211.45 1922.53,1211.45 1923.11,1211.45 1923.7,1211.45 1924.29,1211.45 1924.87,1211.45 1925.46,1211.45 1926.04,1211.45 1926.63,1211.45 1927.22,1211.45 1927.8,1211.45 1928.39,1211.45 1928.98,1211.45 1929.56,1211.45 1930.15,1211.45 1930.74,1211.45 1931.32,1211.45 1931.91,1211.45 1932.5,1211.45 1933.08,1211.45 1933.67,1211.45 1934.25,1211.45 1934.84,1211.45 1935.43,1211.45 1936.01,1211.45 1936.6,1211.45 1937.19,1211.45 1937.77,1211.45 1938.36,1211.45 1938.95,1211.45 1939.53,1211.45 1940.12,1211.45 1940.71,1211.45 1941.29,1211.45 1941.88,1211.45 1942.46,1211.45 1943.05,1211.45 1943.64,1211.45 1944.22,1211.45 1944.81,1211.45 1945.4,1211.45 1945.98,1211.45 1946.57,1211.45 1947.16,1211.45 1947.74,1211.45 1948.33,1211.45 1948.91,1211.45 1949.5,1211.45 1950.09,1211.45 1950.67,1211.45 1951.26,1211.45 1951.85,1211.45 1952.43,1211.45 1953.02,1211.45 1953.61,1211.45 1954.19,1211.45 1954.78,1211.45 1955.37,1211.45 1955.95,1211.45 1956.54,1211.45 1957.12,1211.45 1957.71,1211.45 1958.3,1211.45 1958.88,1211.45 1959.47,1211.45 1960.06,1211.45 1960.64,1211.45 1961.23,1211.45 1961.82,1211.45 1962.4,1211.45 1962.99,1211.45 1963.58,1211.45 1964.16,1211.45 1964.75,1211.45 1965.33,1211.45 1965.92,1211.45 1966.51,1211.45 1967.09,1211.45 1967.68,1211.45 1968.27,1211.45 1968.85,1211.45 1969.44,1211.45 1970.03,1211.45 1970.61,1211.45 1971.2,1211.45 1971.78,1211.45 1972.37,1211.45 1972.96,1211.45 1973.54,1211.45 1974.13,1211.45 1974.72,1211.45 1975.3,1211.45 1975.89,1211.45 1976.48,1211.45 1977.06,1211.45 1977.65,1211.45 1978.24,1211.45 1978.82,1211.45 1979.41,1211.45 1979.99,1211.45 1980.58,1211.45 1981.17,1211.45 1981.75,1211.45 1982.34,1211.45 1982.93,1211.45 1983.51,1211.45 1984.1,1211.45 1984.69,1211.45 1985.27,1211.45 1985.86,1211.45 1986.45,1211.45 1987.03,1211.45 1987.62,1211.45 1988.2,1211.45 1988.79,1211.45 1989.38,1211.45 1989.96,1211.45 1990.55,1211.45 1991.14,1211.45 1991.72,1211.45 1992.31,1211.45 1992.9,1211.45 1993.48,1211.45 1994.07,1211.45 1994.65,1211.45 1995.24,1211.45 1995.83,1211.45 1996.41,1211.45 1997,1211.45 1997.59,1211.45 1998.17,1211.45 1998.76,1211.45 1999.35,1211.45 1999.93,1211.45 2000.52,1211.45 2001.11,1211.45 2001.69,1211.45 2002.28,1211.45 2002.86,1211.45 2003.45,1211.45 2004.04,1211.45 2004.62,1211.45 2005.21,1211.45 2005.8,1211.45 2006.38,1211.45 2006.97,1211.45 2007.56,1211.45 2008.14,1211.45 2008.73,1211.45 2009.32,1211.45 2009.9,1211.45 2010.49,1211.45 2011.07,1211.45 2011.66,1211.45 2012.25,1211.45 2012.83,1211.45 2013.42,1211.45 2014.01,1211.45 2014.59,1211.45 2015.18,1211.45 2015.77,1211.45 2016.35,1211.45 2016.94,1211.45 2017.53,1211.45 2018.11,1211.45 2018.7,1211.45 2019.28,1211.45 2019.87,1211.45 2020.46,1211.45 2021.04,1211.45 2021.63,1211.45 2022.22,1211.45 2022.8,1211.45 2023.39,1211.45 2023.98,1211.45 2024.56,1211.45 2025.15,1211.45 2025.73,1211.45 2026.32,1211.45 2026.91,1211.45 2027.49,1211.45 2028.08,1211.45 2028.67,1211.45 2029.25,1211.45 2029.84,1211.45 2030.43,1211.45 2031.01,1211.45 2031.6,1211.45 2032.19,1211.45 2032.77,1211.45 2033.36,1211.45 2033.94,1211.45 2034.53,1211.45 2035.12,1211.45 2035.7,1211.45 2036.29,1211.45 2036.88,1211.45 2037.46,1211.45 2038.05,1211.45 2038.64,1211.45 2039.22,1211.45 2039.81,1211.45 2040.4,1211.45 2040.98,1211.45 2041.57,1211.45 2042.15,1211.45 2042.74,1211.45 2043.33,1211.45 2043.91,1211.45 2044.5,1211.45 2045.09,1211.45 2045.67,1211.45 2046.26,1211.45 2046.85,1211.45 2047.43,1211.45 2048.02,1211.45 2048.6,1211.45 2049.19,1211.45 2049.78,1211.45 2050.36,1211.45 2050.95,1211.45 2051.54,1211.45 2052.12,1211.45 2052.71,1211.45 2053.3,1211.45 2053.88,1211.45 2054.47,1211.45 2055.06,1211.45 2055.64,1211.45 2056.23,1211.45 2056.81,1211.45 2057.4,1211.45 2057.99,1211.45 2058.57,1211.45 2059.16,1211.45 2059.75,1211.45 2060.33,1211.45 2060.92,1211.45 2061.51,1211.45 2062.09,1211.45 2062.68,1211.45 2063.27,1211.45 2063.85,1211.45 2064.44,1211.45 2065.02,1211.45 2065.61,1211.45 2066.2,1211.45 2066.78,1211.45 2067.37,1211.45 2067.96,1211.45 2068.54,1211.45 2069.13,1211.45 2069.72,1211.45 2070.3,1211.45 2070.89,1211.45 2071.48,1211.45 2072.06,1211.45 2072.65,1211.45 2073.23,1211.45 2073.82,1211.45 2074.41,1211.45 2074.99,1211.45 2075.58,1211.45 2076.17,1211.45 2076.75,1211.45 2077.34,1211.45 2077.93,1211.45 2078.51,1211.45 2079.1,1211.45 2079.68,1211.45 2080.27,1211.45 2080.86,1211.45 2081.44,1211.45 2082.03,1211.45 2082.62,1211.45 2083.2,1211.45 2083.79,1211.45 2084.38,1211.45 2084.96,1211.45 2085.55,1211.45 2086.14,1211.45 2086.72,1211.45 2087.31,1211.45 2087.89,1211.45 2088.48,1211.45 2089.07,1211.45 2089.65,1211.45 2090.24,1211.45 2090.83,1211.45 2091.41,1211.45 2092,1211.45 2092.59,1211.45 2093.17,1211.45 2093.76,1211.45 2094.35,1211.45 2094.93,1211.45 2095.52,1211.45 2096.1,1211.45 2096.69,1211.45 2097.28,1211.45 2097.86,1211.45 2098.45,1211.45 2099.04,1211.45 2099.62,1211.45 2100.21,1211.45 2100.8,1211.45 2101.38,1211.45 2101.97,1211.45 2102.55,1211.45 2103.14,1211.45 2103.73,1211.45 2104.31,1211.45 2104.9,1211.45 2105.49,1211.45 2106.07,1211.45 2106.66,1211.45 2107.25,1211.45 2107.83,1211.45 2108.42,1211.45 2109.01,1211.45 2109.59,1211.45 2110.18,1211.45 2110.76,1211.45 2111.35,1211.45 2111.94,1211.45 2112.52,1211.45 2113.11,1211.45 2113.7,1211.45 2114.28,1211.45 2114.87,1211.45 2115.46,1211.45 2116.04,1211.45 2116.63,1211.45 2117.22,1211.45 2117.8,1211.45 2118.39,1211.45 2118.97,1211.45 2119.56,1211.45 2120.15,1211.45 2120.73,1211.45 2121.32,1211.45 2121.91,1211.45 2122.49,1211.45 2123.08,1211.45 2123.67,1211.45 2124.25,1211.45 2124.84,1211.45 2125.42,1211.45 2126.01,1211.45 2126.6,1211.45 2127.18,1211.45 2127.77,1211.45 2128.36,1211.45 2128.94,1211.45 2129.53,1211.45 2130.12,1211.45 2130.7,1211.45 2131.29,1211.45 2131.88,1211.45 2132.46,1211.45 2133.05,1211.45 2133.63,1211.45 2134.22,1211.45 2134.81,1211.45 2135.39,1211.45 2135.98,1211.45 2136.57,1211.45 2137.15,1211.45 2137.74,1211.45 2138.33,1211.45 2138.91,1211.45 2139.5,1211.45 2140.09,1211.45 2140.67,1211.45 2141.26,1211.45 2141.84,1211.45 2142.43,1211.45 2143.02,1211.45 2143.6,1211.45 2144.19,1211.45 2144.78,1211.45 2145.36,1211.45 2145.95,1211.45 2146.54,1211.45 2147.12,1211.45 2147.71,1211.45 2148.3,1211.45 2148.88,1211.45 2149.47,1211.45 2150.05,1211.45 2150.64,1211.45 2151.23,1211.45 2151.81,1211.45 2152.4,1211.45 2152.99,1211.45 2153.57,1211.45 2154.16,1211.45 2154.75,1211.45 2155.33,1211.45 2155.92,1211.45 2156.5,1211.45 2157.09,1211.45 2157.68,1211.45 2158.26,1211.45 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.64,1192.74 1399.54,899.083 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1229.75 985.439,1192.74 2158.26,1192.74 2158.26,1229.75 985.439,1229.75 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip160)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip160)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip163\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip163)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-9047.34 166.588,-9677.06 167.147,-9221.72 167.706,-9775.96 168.266,-10272.5 168.825,-9881.99 169.384,-10310.4 169.943,-10689.8 170.503,-11023.6 171.062,-10671 171.621,-9794.44 172.18,-10070 172.74,-10319.8 173.299,-10079.8 173.858,-10302.5 174.417,-10496.8 174.977,-10258 175.536,-10042.7 176.095,-10153.5 176.655,-9619.6 177.214,-9426.01 177.773,-9519.1 178.332,-9334.44 178.892,-9384.28 179.451,-9421.92 180.01,-9421.31 180.569,-9415.79 181.129,-9197.68 181.688,-9179.72 182.247,-8960.83 182.806,-8918.63 183.366,-8722.72 183.925,-8666.71 184.484,-8613.03 185.043,-8413.35 185.603,-7964.01 186.162,-7644.79 186.721,-7450.67 187.28,-7372.86 187.84,-7285.74 188.399,-7093.18 188.958,-6904.72 189.517,-6814.35 190.077,-6534.66 190.636,-6190.12 191.195,-6113.67 191.754,-5874.35 192.314,-5647.91 192.873,-5575.67 193.432,-5427.69 193.991,-5218.99 194.551,-5024.72 195.11,-4947.76 195.669,-4698.62 196.228,-4633.16 196.788,-4559.77 197.347,-4377.64 197.906,-4254.79 198.465,-4176.02 199.025,-4102.89 199.584,-3886.46 200.143,-3770.98 200.702,-3695.27 201.262,-3455.89 201.821,-3345.99 202.38,-3242.62 202.939,-3174.72 203.499,-3072.65 204.058,-2970.82 204.617,-2794.01 205.176,-2620.22 205.736,-2487.37 206.295,-2395.37 206.854,-2269.44 207.413,-2088.8 207.973,-1977.73 208.532,-1869.52 209.091,-1734.35 209.65,-1688.35 210.21,-1616.23 210.769,-1460.55 211.328,-1367.55 211.887,-1276.14 212.447,-1210.29 213.006,-1180.65 213.565,-1150.37 214.124,-1059.89 214.684,-1026.24 215.243,-941.714 215.802,-860.292 216.361,-779.063 216.921,-779.303 217.48,-699.312 218.039,-646.815 218.598,-543.645 219.158,-469.689 219.717,-425.538 220.276,-380.999 220.835,-263.868 221.395,-134.555 221.954,-97.2384 222.513,-62.1292 223.072,-46.8922 223.632,-35.2826 224.191,-111.166 224.75,-45.4059 225.309,14.8146 225.869,52.1069 226.428,85.8924 226.987,103.124 227.546,141.368 228.106,194.699 228.665,248.263 229.224,276.793 229.783,348.928 230.343,355.819 230.902,404.142 231.461,414.246 232.02,465.907 232.58,487.34 233.139,494.472 233.698,520.181 234.257,564.378 234.817,603.592 235.376,628.155 235.935,627.756 236.494,629.523 237.054,652.73 237.613,726.379 238.172,721.474 238.731,703.423 239.291,742.575 239.85,738.139 240.409,793.597 240.968,810.776 241.528,807.637 242.087,785.569 242.646,802.544 243.205,818.712 243.765,837.98 244.324,870.242 244.883,882.618 245.442,842.012 246.002,840.144 246.561,872.32 247.12,900.651 247.679,896.521 248.239,895.845 248.798,908.612 249.357,922.534 249.916,882.427 250.476,840.039 251.035,804.636 251.594,809.773 252.153,796.742 252.713,801.652 253.272,807.089 253.831,846.577 254.39,901.598 254.95,915.461 255.509,915.507 256.068,930.458 256.627,926.604 257.187,907.883 257.746,909.79 258.305,924.256 258.864,920.529 259.424,900.972 259.983,915.276 260.542,896.552 261.101,913.132 261.661,895.983 262.22,914.112 262.779,895.595 263.338,915.775 263.898,899.885 264.457,915.409 265.016,931.224 265.575,931.917 266.135,929.92 266.694,925.016 267.253,945.481 267.812,978.884 268.372,1011.5 268.931,975.847 269.49,1024.07 270.049,1068.28 270.609,1044 271.168,1087.95 271.727,1111.32 272.286,1136.72 272.846,1139.96 273.405,1124.46 273.964,1128.64 274.523,1116.4 275.083,1107.25 275.642,1099.97 276.201,1089.02 276.76,1077.1 277.32,1097.53 277.879,1123.46 278.438,1115.73 278.997,1140.62 279.557,1144.36 280.116,1130.6 280.675,1105.45 281.234,1096.5 281.794,1087.5 282.353,1093.64 282.912,1082.76 283.471,1058.15 284.031,1051.83 284.59,1045.14 285.149,1053.71 285.708,1083.09 286.268,1073.49 286.827,1083.04 287.386,1075.76 287.945,1066.35 288.505,1075.98 289.064,1066.13 289.623,1056.12 290.182,1059.86 290.742,1068.61 291.301,1114.35 291.86,1086.9 292.419,1078.07 292.979,1047.84 293.538,1037.39 294.097,1030.89 294.656,1040.85 295.216,1027.93 295.775,1056.14 296.334,1065.71 296.893,1089.52 297.453,1077.66 298.012,1073.42 298.571,1066.97 299.13,1024.85 299.69,1016.82 300.249,1008.97 300.808,1020.95 301.368,1016.76 301.927,992.882 302.486,984.897 303.045,978.26 303.605,1023.52 304.164,1031.72 304.723,1040.46 305.282,1049.51 305.842,1058.98 306.401,1032.31 306.96,1040.13 307.519,1069.68 308.079,1043.24 308.638,1048.62 309.197,1057.56 309.756,1083.88 310.316,1053.99 310.875,1061.5 311.434,1036.05 311.993,1044.96 312.553,987.126 313.112,980.505 313.671,987.597 314.23,980.226 314.79,989.007 315.349,979.776 315.908,1023.28 316.467,1046.65 317.027,1038.92 317.586,996.51 318.145,971.329 318.704,963.385 319.264,975.661 319.823,971.467 320.382,946.881 320.941,974.602 321.501,954.707 322.06,983.478 322.619,962.71 323.178,960.623 323.738,972.696 324.297,998.96 324.856,990.92 325.415,1002.22 325.975,993.18 326.534,968.086 327.093,962.041 327.652,961.405 328.212,939.641 328.771,904.561 329.33,902.994 329.889,865.089 330.449,862.551 331.008,860.749 331.567,875.996 332.126,862.149 332.686,861.279 333.245,877.678 333.804,892.969 334.363,887.716 334.923,884.928 335.482,884.184 336.041,909.745 336.6,891.829 337.16,854.568 337.719,834.585 338.278,852.681 338.837,856.697 339.397,871.774 339.956,885.464 340.515,882.613 341.074,848.841 341.634,833.314 342.193,822.756 342.752,820.907 343.311,870.091 343.871,881.572 344.43,895.087 344.989,905.351 345.548,884.851 346.108,850.47 346.667,863.646 347.226,827.34 347.785,842.978 348.345,843.46 348.904,827.567 349.463,828.581 350.022,812.896 350.582,811.134 351.141,813.572 351.7,831.902 352.259,830.863 352.819,819.896 353.378,836.543 353.937,836.413 354.496,834.782 355.056,872.501 355.615,853.322 356.174,883.95 356.733,897.888 357.293,929.841 357.852,923.861 358.411,921.139 358.97,901.833 359.53,913.405 360.089,922.551 360.648,932.733 361.207,941.422 361.767,951.812 362.326,977.369 362.885,952.57 363.444,938.87 364.004,937.224 364.563,965.012 365.122,942.333 365.681,953.068 366.241,945.092 366.8,925.759 367.359,919.098 367.918,909.625 368.478,936.669 369.037,913.405 369.596,892.38 370.155,889.003 370.715,870.119 371.274,900.298 371.833,898.192 372.392,877.254 372.952,890.501 373.511,901.246 374.07,897.726 374.629,875.115 375.189,886.836 375.748,881.859 376.307,861.529 376.866,859.735 377.426,820.46 377.985,833.296 378.544,834.061 379.103,834.332 379.663,848.306 380.222,828.514 380.781,778.466 381.34,776.208 381.9,794.303 382.459,776.611 383.018,795.696 383.577,825.771 384.137,839.995 384.696,839.351 385.255,850.75 385.814,861.298 386.374,829.965 386.933,826.709 387.492,789.315 388.051,806.785 388.611,803.93 389.17,838.673 389.729,836.174 390.288,847.451 390.848,827.002 391.407,840.646 391.966,808.045 392.525,807.544 393.085,839.011 393.644,867.558 394.203,863.294 394.762,862.498 395.322,891.009 395.881,879.871 396.44,859.711 396.999,842.821 397.559,838.956 398.118,770.97 398.677,801.949 399.236,779.807 399.796,797.546 400.355,783.089 400.914,816.772 401.473,826.355 402.033,827 402.592,838.585 403.151,835.254 403.71,836.099 404.27,832.105 404.829,844.682 405.388,836.059 405.947,801.106 406.507,815.936 407.066,795.268 407.625,792.719 408.184,806.815 408.744,834.24 409.303,847.052 409.862,860.761 410.421,855.48 410.981,834.355 411.54,818.546 412.099,814.198 412.658,795.288 413.218,810.549 413.777,806.686 414.336,804.434 414.895,806.079 415.455,820.658 416.014,836.019 416.573,783.79 417.132,787.488 417.692,770.287 418.251,769.783 418.81,789.672 419.369,774.336 419.929,789.074 420.488,820.865 421.047,820.07 421.606,816.147 422.166,828.693 422.725,809.274 423.284,789.792 423.843,775.15 424.403,762.855 424.962,780.485 425.521,776.513 426.08,773.3 426.64,775.336 427.199,775.944 427.758,775.758 428.318,771.147 428.877,769.62 429.436,781.664 429.995,767.865 430.555,782.757 431.114,814.807 431.673,796.327 432.232,793.043 432.792,808.335 433.351,772.508 433.91,752.525 434.469,751.004 435.029,735.682 435.588,754.41 436.147,753.123 436.706,755.058 437.266,772.313 437.825,786.808 438.384,774.394 438.943,771.191 439.503,768.895 440.062,766.284 440.621,780.498 441.18,746.818 441.74,764.018 442.299,762.378 442.858,746.416 443.417,747.44 443.977,766.532 444.536,765.087 445.095,736.871 445.654,737.915 446.214,754.21 446.773,764.805 447.332,779.358 447.891,795.802 448.451,793.664 449.01,741.094 449.569,740.425 450.128,751.79 450.688,749.253 451.247,745.297 451.806,744.655 452.365,759.351 452.925,742.55 453.484,758.796 454.043,743.666 454.602,760.048 455.162,743.378 455.721,765.806 456.28,764.551 456.839,781.064 457.399,795.646 457.958,790.858 458.517,739.272 459.076,786.156 459.636,799.52 460.195,795.06 460.754,775.201 461.313,772.95 461.873,756.356 462.432,768.499 462.991,782.207 463.55,828.394 464.11,790.901 464.669,773.817 465.228,771.333 465.787,769.371 466.347,764.89 466.906,763.169 467.465,755.524 468.024,803.404 468.584,796.542 469.143,793.516 469.702,790.183 470.261,775.491 470.821,775.163 471.38,760.409 471.939,760.549 472.498,726.381 473.058,777.285 473.617,742.92 474.176,742.301 474.735,759.263 475.295,724.691 475.854,758.102 476.413,709.194 476.972,708.965 477.532,712.33 478.091,715.123 478.65,749.499 479.209,762.208 479.769,791.343 480.328,802.672 480.887,816.983 481.446,813.252 482.006,806.527 482.565,784.745 483.124,762.558 483.683,744.902 484.243,708.518 484.802,709.442 485.361,708.357 485.92,727.685 486.48,729.04 487.039,707.382 487.598,690.344 488.157,694.401 488.717,698.222 489.276,730.19 489.835,733.768 490.394,715.433 490.954,733.503 491.513,733.83 492.072,735.69 492.631,734.444 493.191,704.099 493.75,720.838 494.309,722.075 494.868,720.346 495.428,705.958 495.987,705.896 496.546,707.958 497.105,741.522 497.665,755.644 498.224,736.46 498.783,735.803 499.342,739.042 499.902,735.267 500.461,732.885 501.02,733.865 501.579,703.401 502.139,704.586 502.698,674.145 503.257,674.505 503.816,679.704 504.376,702.643 504.935,703.013 505.494,688.519 506.053,689.911 506.613,723.113 507.172,708.479 507.731,710.316 508.29,696.734 508.85,714.097 509.409,718.184 509.968,717.115 510.527,715.47 511.087,715.789 511.646,732.698 512.205,765.389 512.764,762.716 513.324,811.523 513.883,841.679 514.442,854.123 515.001,831.045 515.561,824.252 516.12,789.623 516.679,772.141 517.238,765.714 517.798,759.389 518.357,787.326 518.916,782.005 519.475,825.403 520.035,821.946 520.594,802.287 521.153,794.396 521.712,823.896 522.272,834.829 522.831,833.565 523.39,842.347 523.949,852.42 524.509,844.527 525.068,808.275 525.627,802.131 526.186,812.673 526.746,793.738 527.305,774.95 527.864,770.614 528.423,753.275 528.983,739.675 529.542,740.704 530.101,773.216 530.66,770.847 531.22,764.906 531.779,777.878 532.338,808.64 532.897,821.809 533.457,803.06 534.016,797.37 534.575,791.225 535.134,784.503 535.694,768.639 536.253,765.863 536.812,748.885 537.371,764.12 537.931,761.821 538.49,778.409 539.049,744.363 539.608,743.18 540.168,771.193 540.727,784.844 541.286,812.974 541.845,778.788 542.405,818.954 542.964,778.305 543.523,791.529 544.082,804.807 544.642,814.615 545.201,807.648 545.76,820.446 546.319,848.461 546.879,840.686 547.438,830.298 547.997,827.04 548.556,786.102 549.116,796.056 549.675,775.888 550.234,751.826 550.793,768.254 551.353,731.576 551.912,742.512 552.471,721.21 553.031,719.057 553.59,715.348 554.149,702.728 554.708,668.963 555.268,639.793 555.827,627 556.386,647.903 556.945,668.941 557.505,688.667 558.064,690.881 558.623,690.487 559.182,677.142 559.742,678.453 560.301,663.816 560.86,650.053 561.419,638.423 561.979,660.683 562.538,660.432 563.097,664.869 563.656,682.314 564.216,681.863 564.775,701.018 565.334,698.56 565.893,683.725 566.453,702.403 567.012,720.308 567.571,719.617 568.13,686.309 568.69,688.626 569.249,691.895 569.808,662.084 570.367,664.112 570.927,667.262 571.486,703.167 572.045,736.672 572.604,735.033 573.164,699.627 573.723,703.432 574.282,721.495 574.841,717.827 575.401,652.152 575.96,686.307 576.519,704.997 577.078,704.433 577.638,724.071 578.197,771.198 578.756,786.964 579.315,769.39 579.875,764.544 580.434,759.593 580.993,770.667 581.552,766.395 582.112,778.108 582.671,761.487 583.23,741.691 583.789,722.976 584.349,723.887 584.908,691.877 585.467,677.132 586.026,676.395 586.586,694.908 587.145,728.977 587.704,695.665 588.263,679.83 588.823,684.852 589.382,659.001 589.941,663.649 590.5,679.917 591.06,661.873 591.619,661.641 592.178,663.702 592.737,681.092 593.297,684.966 593.856,717.642 594.415,731.464 594.974,716.608 595.534,721.373 596.093,720.729 596.652,687.302 597.211,637.601 597.771,642.477 598.33,646.447 598.889,630.913 599.448,682.469 600.008,679.698 600.567,714.733 601.126,714.073 601.685,698.084 602.245,698.896 602.804,685.15 603.363,654.829 603.922,641.332 604.482,662.006 605.041,667.214 605.6,619.751 606.159,610.871 606.719,597.374 607.278,605.279 607.837,625.79 608.396,645.4 608.956,636.452 609.515,628.379 610.074,649.052 610.633,654.509 611.193,707.601 611.752,707.449 612.311,707.484 612.87,688.158 613.43,687.349 613.989,703.546 614.548,721.588 615.107,703.161 615.667,717.765 616.226,701.271 616.785,685.077 617.344,687.054 617.904,673.704 618.463,705.281 619.022,738.407 619.581,735.025 620.141,714.35 620.7,683.555 621.259,671.503 621.818,658.339 622.378,692.618 622.937,710.233 623.496,709.724 624.055,677.688 624.615,678.13 625.174,650.227 625.733,635.482 626.292,622.662 626.852,607.836 627.411,597.728 627.97,618.827 628.529,621.637 629.089,611.097 629.648,616.351 630.207,601.599 630.766,623.877 631.326,658.431 631.885,679.545 632.444,683.457 633.003,667.604 633.563,656.015 634.122,658.007 634.681,659.035 635.24,614.421 635.8,653.19 636.359,670.3 636.918,674.496 637.477,678.101 638.037,694.863 638.596,713.091 639.155,746.643 639.714,741.145 640.274,788.332 640.833,765.149 641.392,713.758 641.951,708.071 642.511,708.603 643.07,676.22 643.629,663.712 644.188,664.232 644.748,634.938 645.307,654.495 645.866,640.411 646.425,643.206 646.985,661.359 647.544,650.719 648.103,623.089 648.662,628.925 649.222,663.248 649.781,666.925 650.34,668.131 650.899,685.019 651.459,684.653 652.018,684.008 652.577,722.439 653.136,670.147 653.696,656.011 654.255,658.41 654.814,677.636 655.373,693.519 655.933,710.115 656.492,709.526 657.051,709.177 657.61,723.708 658.17,753.37 658.729,747.722 659.288,745.946 659.847,741.996 660.407,739.122 660.966,688.814 661.525,691.95 662.084,706.784 662.644,775.277 663.203,786.96 663.762,780.681 664.321,793.91 664.881,803.625 665.44,815.02 665.999,807.414 666.558,784.909 667.118,778.896 667.677,774.653 668.236,770.794 668.795,720.228 669.355,718.6 669.914,714.542 670.473,716.448 671.032,700.097 671.592,686.854 672.151,687.975 672.71,718.076 673.269,717.601 673.829,686.8 674.388,716.237 674.947,718.246 675.506,701.65 676.066,731.915 676.625,698.4 677.184,714.728 677.743,699.62 678.303,703.652 678.862,702.34 679.421,701.86 679.981,715.514 680.54,728.907 681.099,728.585 681.658,775.735 682.218,802.688 682.777,813.968 683.336,804.363 683.895,815.086 684.455,807.786 685.014,801.098 685.573,793.052 686.132,786.786 686.692,780.04 687.251,790.289 687.81,768.593 688.369,765.073 688.929,779.394 689.488,758.055 690.047,718.533 690.606,702.472 691.166,670.067 691.725,702.121 692.284,671.111 692.843,687.529 693.403,703.142 693.962,684.604 694.521,736.43 695.08,765.741 695.64,774.049 696.199,734.999 696.758,782.685 697.317,775.349 697.877,790.907 698.436,768.906 698.995,782.285 699.554,747.348 700.114,744.151 700.673,739.306 701.232,738.542 701.791,749.267 702.351,762.253 702.91,794.195 703.469,790.414 704.028,752.778 704.588,701.168 705.147,732.441 705.706,718.585 706.265,734.8 706.825,731.952 707.384,725.976 707.943,721.841 708.502,750.178 709.062,747.522 709.621,744.235 710.18,741.568 710.739,739.789 711.299,753.939 711.858,719.474 712.417,702.715 712.976,739.125 713.536,734.651 714.095,731.874 714.654,713.637 715.213,697.992 715.773,682.793 716.332,679.112 716.891,677.9 717.45,663.417 718.01,678.276 718.569,693.645 719.128,707.007 719.687,705.746 720.247,705.626 720.806,721.66 721.365,718.633 721.924,684.606 722.484,684.74 723.043,702.429 723.602,736.624 724.161,737.161 724.721,801.078 725.28,796.398 725.839,789.154 726.398,800.038 726.958,786.745 727.517,809.268 728.076,770.678 728.635,768.754 729.195,751.935 729.754,750.54 730.313,734.121 730.872,732.95 731.432,732.2 731.991,731.162 732.55,708.129 733.109,724.941 733.669,706.206 734.228,686.233 734.787,689.205 735.346,720.924 735.906,734.396 736.465,699.685 737.024,698.622 737.583,694.761 738.143,708.38 738.702,693.942 739.261,698.038 739.82,664.117 740.38,649.468 740.939,635.43 741.498,621.701 742.057,628.029 742.617,647.027 743.176,634.627 743.735,654.053 744.294,654.579 744.854,659.043 745.413,710.734 745.972,694.679 746.531,649.233 747.091,655.169 747.65,641.092 748.209,628.502 748.768,613.304 749.328,679.933 749.887,666.404 750.446,667.555 751.005,669.104 751.565,653.357 752.124,655.662 752.683,625.763 753.242,610.789 753.802,630.784 754.361,598.656 754.92,601.813 755.479,654.686 756.039,638.357 756.598,643.466 757.157,644.753 757.716,633.523 758.276,634.808 758.835,638.927 759.394,656.973 759.953,662.42 760.513,647.738 761.072,667.134 761.631,688.56 762.19,689.601 762.75,671.733 763.309,672.914 763.868,657.135 764.427,677.612 764.987,677.714 765.546,661.857 766.105,695.348 766.664,715.209 767.224,679.14 767.783,680.248 768.342,682.116 768.901,655.619 769.461,674.202 770.02,660.153 770.579,659.424 771.138,660.885 771.698,679.301 772.257,632.227 772.816,619.141 773.375,608.948 773.935,647.369 774.494,630.597 775.053,631.84 775.612,636.097 776.172,641.813 776.731,693.727 777.29,678.433 777.849,665.374 778.409,684.417 778.968,683.478 779.527,682.391 780.086,666.604 780.646,701.064 781.205,718.268 781.764,750.573 782.323,730.196 782.883,726.874 783.442,724.472 784.001,724.756 784.56,718.897 785.12,719.478 785.679,748.847 786.238,779.34 786.797,756.722 787.357,772.937 787.916,740.861 788.475,755.776 789.034,752.163 789.594,716.006 790.153,732.955 790.712,698.508 791.271,712.579 791.831,712.146 792.39,709.573 792.949,709.441 793.508,674.156 794.068,641.98 794.627,647.251 795.186,684.096 795.745,670.278 796.305,670.661 796.864,654.823 797.423,673.088 797.982,690.817 798.542,674.897 799.101,686.763 799.66,684.586 800.219,683.693 800.779,699.795 801.338,684.4 801.897,698.154 802.456,714.545 803.016,742.019 803.575,753.861 804.134,751.401 804.693,763.329 805.253,742.667 805.812,741.22 806.371,709.031 806.931,691.548 807.49,670.894 808.049,673.711 808.608,677.551 809.168,713.28 809.727,713.77 810.286,713.739 810.845,727.255 811.405,740.687 811.964,723.991 812.523,755.985 813.082,772.67 813.642,769.739 814.201,747.24 814.76,756.635 815.319,755.535 815.879,755.957 816.438,769.372 816.997,761.877 817.556,742.897 818.116,745.892 818.675,743.098 819.234,725.609 819.793,693.042 820.353,710.218 820.912,696.536 821.471,694.507 822.03,724.493 822.59,721.26 823.149,699.43 823.708,700.793 824.267,684.451 824.827,650.814 825.386,713.713 825.945,696.59 826.504,678.789 827.064,690.865 827.623,656.883 828.182,657.841 828.741,655.968 829.301,657.411 829.86,689.123 830.419,752.203 830.978,749.609 831.538,735.145 832.097,718.289 832.656,699.949 833.215,699.258 833.775,713.804 834.334,681.396 834.893,697.669 835.452,682.11 836.012,698.313 836.571,696.9 837.13,697.676 837.689,679.577 838.249,648.491 838.808,696.099 839.367,698.321 839.926,683.932 840.486,667.774 841.045,652.409 841.604,652.378 842.163,686.395 842.723,652.149 843.282,664.926 843.841,647.993 844.4,650.079 844.96,672.466 845.519,642.155 846.078,645.144 846.637,666.832 847.197,653.282 847.756,669.756 848.315,671.643 848.874,689.09 849.434,658.965 849.993,674.939 850.552,658.178 851.111,659.979 851.671,663.425 852.23,631.226 852.789,682.747 853.348,666.263 853.908,669.797 854.467,670.062 855.026,638.221 855.585,638.396 856.145,624.464 856.704,615.123 857.263,620.708 857.822,605.197 858.382,607.875 858.941,677.083 859.5,629.534 860.059,617.175 860.619,634.3 861.178,634.518 861.737,641.366 862.296,654.259 862.856,638.199 863.415,639.12 863.974,625.228 864.533,629.418 865.093,600.427 865.652,602.955 866.211,651.873 866.77,657.656 867.33,628.516 867.889,635.482 868.448,621.747 869.007,622.876 869.567,659.569 870.126,662.22 870.685,648.058 871.244,633.798 871.804,618.88 872.363,622.83 872.922,595.125 873.481,567.011 874.041,557.114 874.6,580.323 875.159,617.207 875.718,620.692 876.278,624.35 876.837,631.235 877.396,652.448 877.955,638.196 878.515,644.564 879.074,630.103 879.633,681.255 880.192,678.515 880.752,661.642 881.311,645.05 881.87,664.502 882.429,698.104 882.989,730.68 883.548,726.274 884.107,722.98 884.666,736.588 885.226,700.729 885.785,686.608 886.344,685.683 886.903,700.663 887.463,712.445 888.022,709.088 888.581,705.568 889.14,706.157 889.7,753.858 890.259,778.838 890.818,740.407 891.377,770.968 891.937,779.069 892.496,769.043 893.055,797.944 893.614,838.471 894.174,911.21 894.733,895.502 895.292,867.058 895.851,821.925 896.411,827.56 896.97,773.436 897.529,739.525 898.088,688.85 898.648,703.69 899.207,685.756 899.766,717.632 900.325,715.082 900.885,683.254 901.444,620.841 902.003,605.943 902.562,642.126 903.122,644.302 903.681,631.575 904.24,662.687 904.799,740.856 905.359,720.123 905.918,718.477 906.477,683.602 907.036,713.898 907.596,694.957 908.155,713.704 908.714,712.895 909.273,694.884 909.833,691.107 910.392,696.844 910.951,726.486 911.51,753.352 912.07,730.739 912.629,714.73 913.188,744.537 913.747,742.016 914.307,741.44 914.866,721.033 915.425,698.459 915.984,695.056 916.544,677.37 917.103,644.453 917.662,629.684 918.221,662.794 918.781,631.168 919.34,654.443 919.899,639.417 920.458,624.032 921.018,611.687 921.577,631.304 922.136,631.967 922.695,621.778 923.255,607.507 923.814,596.015 924.373,633.728 924.932,622.072 925.492,590.435 926.051,597.344 926.61,586.061 927.169,572.94 927.729,579.296 928.288,584.166 928.847,587.845 929.406,547.733 929.966,554.474 930.525,543.85 931.084,536.162 931.644,556.601 932.203,560.361 932.762,564.785 933.321,570.504 933.881,560.532 934.44,536.789 934.999,495.883 935.558,475.335 936.118,507.236 936.677,483.653 937.236,496.287 937.795,523.985 938.355,565.091 938.914,591.201 939.473,595.627 940.032,601.314 940.592,604.997 941.151,613.828 941.71,635.132 942.269,687.271 942.829,622.856 943.388,656.192 943.947,655.43 944.506,659.718 945.066,690.847 945.625,692.867 946.184,694.399 946.743,710.567 947.303,726.551 947.862,705.84 948.421,705.004 948.98,718.502 949.54,699.342 950.099,735.428 950.658,747.401 951.217,775.282 951.777,739.051 952.336,703.095 952.895,748.859 953.454,726.398 954.014,755.973 954.573,754.32 955.132,754.514 955.691,735.21 956.251,731.98 956.81,745.809 957.369,745.19 957.928,758.417 958.488,705.641 959.047,670.584 959.606,669.256 960.165,667.628 960.725,653.036 961.284,670.839 961.843,654.936 962.402,674.417 962.962,677.644 963.521,662.733 964.08,666.558 964.639,681.509 965.199,714.582 965.758,715.207 966.317,696.37 966.876,679.411 967.436,646.154 967.995,680.498 968.554,667.063 969.113,666.46 969.673,671.53 970.232,656.124 970.791,657.529 971.35,660.205 971.91,681.672 972.469,683.208 973.028,685.281 973.587,700.205 974.147,703.332 974.706,688.94 975.265,686.639 975.824,670.439 976.384,687.261 976.943,687.865 977.502,704.448 978.061,704.167 978.621,722.001 979.18,734.184 979.739,748.241 980.298,740.421 980.858,718.052 981.417,701.066 981.976,685.224 982.535,703.528 983.095,749.717 983.654,731.507 984.213,762.459 984.772,745.468 985.332,760.19 985.891,757.336 986.45,770.255 987.009,785.375 987.569,760.711 988.128,741.127 988.687,736.533 989.246,701.53 989.806,704.525 990.365,703.086 990.924,721.153 991.483,703.651 992.043,670.457 992.602,687.853 993.161,704.094 993.72,721.942 994.28,719.198 994.839,750.985 995.398,731.268 995.957,729.598 996.517,697.924 997.076,717.641 997.635,716.65 998.194,696.436 998.754,682.016 999.313,664.402 999.872,666.953 1000.43,698.042 1000.99,699.488 1001.55,715.444 1002.11,683.606 1002.67,649.923 1003.23,698.901 1003.79,710.615 1004.35,698.499 1004.91,662.826 1005.46,663.885 1006.02,666.83 1006.58,683.735 1007.14,687.476 1007.7,738.306 1008.26,782.359 1008.82,782.09 1009.38,741.915 1009.94,738.747 1010.5,720.02 1011.06,735.032 1011.62,716.787 1012.18,699.132 1012.73,714.413 1013.29,698.705 1013.85,680.864 1014.41,696.261 1014.97,710.133 1015.53,691.973 1016.09,708.82 1016.65,724.047 1017.21,673.672 1017.77,673.219 1018.33,656.805 1018.89,624.442 1019.45,628.506 1020.01,630.399 1020.56,635.542 1021.12,655.344 1021.68,656.982 1022.24,626.133 1022.8,612.364 1023.36,616.166 1023.92,639.578 1024.48,611.114 1025.04,614.205 1025.6,631.374 1026.16,632.345 1026.72,621.265 1027.28,610.251 1027.83,601.029 1028.39,591.049 1028.95,627.447 1029.51,644.071 1030.07,663.619 1030.63,681.042 1031.19,666.421 1031.75,699.886 1032.31,693.04 1032.87,689.969 1033.43,704.943 1033.99,736.723 1034.55,732.465 1035.1,759.343 1035.66,768.979 1036.22,796.681 1036.78,790.627 1037.34,766.049 1037.9,778.155 1038.46,771.601 1039.02,768.689 1039.58,764.236 1040.14,744.409 1040.7,725.015 1041.26,689.195 1041.82,673.193 1042.38,623.513 1042.93,608.813 1043.49,629.981 1044.05,629.866 1044.61,614.788 1045.17,635.108 1045.73,670.796 1046.29,675.152 1046.85,673.968 1047.41,676.177 1047.97,676.502 1048.53,676.467 1049.09,646.556 1049.65,616.971 1050.2,635.619 1050.76,624.254 1051.32,642.208 1051.88,628.448 1052.44,628.105 1053,626.355 1053.56,645.993 1054.12,658.658 1054.68,609.188 1055.24,581.779 1055.8,572.065 1056.36,580.7 1056.92,599.279 1057.48,620.239 1058.03,623.008 1058.59,624.38 1059.15,594.395 1059.71,614.688 1060.27,637.609 1060.83,640.099 1061.39,644.06 1061.95,677.797 1062.51,663.513 1063.07,664.929 1063.63,682.174 1064.19,683.018 1064.75,684.374 1065.3,668.402 1065.86,669.549 1066.42,670.879 1066.98,640.484 1067.54,630.088 1068.1,587.795 1068.66,591.623 1069.22,615.161 1069.78,604.287 1070.34,573.744 1070.9,550.419 1071.46,573.254 1072.02,594.9 1072.57,600.337 1073.13,620.509 1073.69,674.46 1074.25,691.051 1074.81,720.561 1075.37,732.612 1075.93,744.059 1076.49,743.77 1077.05,787.439 1077.61,766.653 1078.17,782.486 1078.73,762.16 1079.29,774.659 1079.85,787.65 1080.4,780.465 1080.96,774.825 1081.52,719.798 1082.08,705.456 1082.64,721.498 1083.2,669.17 1083.76,669.677 1084.32,669.653 1084.88,667.523 1085.44,699.245 1086,700.769 1086.56,698.085 1087.12,719.842 1087.67,715.326 1088.23,730.162 1088.79,757.746 1089.35,737.778 1089.91,734.883 1090.47,700.234 1091.03,716.639 1091.59,730.154 1092.15,745.003 1092.71,745.093 1093.27,770.917 1093.83,750.794 1094.39,732.427 1094.94,697.24 1095.5,713.726 1096.06,660.876 1096.62,646.313 1097.18,695.946 1097.74,712.374 1098.3,711.413 1098.86,741.168 1099.42,674.374 1099.98,677.205 1100.54,710.597 1101.1,692.835 1101.66,675.899 1102.22,676.254 1102.77,676.646 1103.33,674.31 1103.89,658.332 1104.45,676.808 1105.01,708.119 1105.57,706.799 1106.13,738.429 1106.69,722.548 1107.25,738.221 1107.81,735.284 1108.37,730.634 1108.93,741.672 1109.49,755.434 1110.04,732.783 1110.6,745.499 1111.16,740.397 1111.72,753.704 1112.28,753.328 1112.84,764.903 1113.4,759.13 1113.96,754.694 1114.52,748.194 1115.08,714.652 1115.64,734.272 1116.2,751.623 1116.76,731.224 1117.31,728.853 1117.87,729.277 1118.43,712.602 1118.99,747.397 1119.55,774.213 1120.11,768.398 1120.67,781.321 1121.23,770.478 1121.79,782.379 1122.35,746.037 1122.91,761.213 1123.47,725.742 1124.03,738.997 1124.59,751.191 1125.14,745.616 1125.7,726.249 1126.26,753.647 1126.82,732.137 1127.38,745.854 1127.94,678.066 1128.5,660.466 1129.06,627.236 1129.62,629.061 1130.18,664.393 1130.74,668.461 1131.3,667.569 1131.86,702.735 1132.41,749.349 1132.97,726.939 1133.53,742.218 1134.09,738.662 1134.65,734.549 1135.21,733.754 1135.77,711.696 1136.33,726.898 1136.89,705.327 1137.45,717.062 1138.01,744.648 1138.57,725.775 1139.13,724.994 1139.68,737.338 1140.24,717.031 1140.8,712.353 1141.36,725.801 1141.92,721.692 1142.48,705.347 1143.04,702.913 1143.6,688.617 1144.16,639.571 1144.72,674.153 1145.28,643.241 1145.84,643.128 1146.4,665.347 1146.96,696.21 1147.51,693.301 1148.07,710.962 1148.63,677.577 1149.19,661.427 1149.75,678.079 1150.31,676.544 1150.87,674.543 1151.43,674.156 1151.99,690.314 1152.55,638.632 1153.11,658.412 1153.67,662.257 1154.23,696.526 1154.78,712.779 1155.34,730.49 1155.9,730.909 1156.46,743.037 1157.02,753.325 1157.58,748.336 1158.14,744.965 1158.7,757.117 1159.26,738.51 1159.82,736.018 1160.38,734.806 1160.94,729.419 1161.5,725.554 1162.05,729.169 1162.61,710.551 1163.17,726.637 1163.73,709.376 1164.29,689.685 1164.85,703.528 1165.41,700.273 1165.97,716.581 1166.53,713.135 1167.09,712.667 1167.65,745.128 1168.21,757.58 1168.77,738.102 1169.33,721.355 1169.88,715.047 1170.44,681.087 1171,666.244 1171.56,684.178 1172.12,681.875 1172.68,632.89 1173.24,618.967 1173.8,620.314 1174.36,576.104 1174.92,630.351 1175.48,650.753 1176.04,654.842 1176.6,672.159 1177.15,670.849 1177.71,669.522 1178.27,673.755 1178.83,692.315 1179.39,755.408 1179.95,720.252 1180.51,702.16 1181.07,684.183 1181.63,617.116 1182.19,651.73 1182.75,637.698 1183.31,626.594 1183.87,648.334 1184.43,632.973 1184.98,601.487 1185.54,603.029 1186.1,590.382 1186.66,596.403 1187.22,600.624 1187.78,605.471 1188.34,636.611 1188.9,655.508 1189.46,640.201 1190.02,657.175 1190.58,675.22 1191.14,706.224 1191.7,707.958 1192.25,723.704 1192.81,740.983 1193.37,721.342 1193.93,719.336 1194.49,746.979 1195.05,710.943 1195.61,693.92 1196.17,660.584 1196.73,612.345 1197.29,612.034 1197.85,585.974 1198.41,607.767 1198.97,611.624 1199.52,632.587 1200.08,671.121 1200.64,672.625 1201.2,641.322 1201.76,615.319 1202.32,625.37 1202.88,629.123 1203.44,664 1204,663.668 1204.56,666.722 1205.12,635.192 1205.68,652.274 1206.24,655.206 1206.8,673.891 1207.35,657.632 1207.91,658.983 1208.47,672.831 1209.03,624.252 1209.59,662.285 1210.15,665.702 1210.71,679.084 1211.27,710.636 1211.83,675.608 1212.39,675.943 1212.95,674.576 1213.51,646.154 1214.07,646.261 1214.62,662.721 1215.18,645.863 1215.74,650.67 1216.3,670.055 1216.86,667.021 1217.42,665.598 1217.98,683.408 1218.54,699.611 1219.1,696.424 1219.66,663.46 1220.22,647.343 1220.78,679.458 1221.34,678.384 1221.89,696.017 1222.45,693.647 1223.01,679.833 1223.57,682.308 1224.13,683.389 1224.69,713.533 1225.25,709.519 1225.81,644.318 1226.37,679.942 1226.93,697.87 1227.49,727.226 1228.05,756.144 1228.61,796.359 1229.17,792.317 1229.72,769.708 1230.28,767.113 1230.84,761.656 1231.4,709.464 1231.96,691.839 1232.52,691.658 1233.08,677.549 1233.64,666.38 1234.2,670.248 1234.76,671.954 1235.32,702.57 1235.88,715.449 1236.44,677.28 1236.99,705.104 1237.55,702.951 1238.11,687.159 1238.67,705.383 1239.23,709.294 1239.79,679.699 1240.35,692.834 1240.91,721.884 1241.47,720.788 1242.03,717.032 1242.59,713.764 1243.15,660.335 1243.71,645.404 1244.26,647.268 1244.82,663.802 1245.38,696.468 1245.94,646.092 1246.5,613.319 1247.06,632.906 1247.62,637.16 1248.18,638.076 1248.74,624.309 1249.3,611.238 1249.86,612.959 1250.42,604.182 1250.98,641.465 1251.54,646.066 1252.09,643.639 1252.65,641.329 1253.21,661.116 1253.77,678.609 1254.33,712.129 1254.89,696.156 1255.45,696.166 1256.01,712.847 1256.57,665.944 1257.13,651.503 1257.69,673.598 1258.25,643.36 1258.81,663.372 1259.36,666.356 1259.92,652.544 1260.48,637.528 1261.04,672.773 1261.6,670.038 1262.16,655.248 1262.72,655.757 1263.28,640.727 1263.84,630.847 1264.4,636.999 1264.96,636.987 1265.52,641.026 1266.08,658.369 1266.63,646.841 1267.19,678.192 1267.75,659.417 1268.31,679.046 1268.87,678.411 1269.43,628.93 1269.99,632.305 1270.55,650.342 1271.11,669.392 1271.67,669.648 1272.23,673.764 1272.79,712.431 1273.35,729.311 1273.91,727.244 1274.46,743.313 1275.02,756.28 1275.58,752.191 1276.14,732.269 1276.7,698.09 1277.26,728.461 1277.82,694.125 1278.38,709.99 1278.94,706.14 1279.5,689.009 1280.06,690.18 1280.62,688.907 1281.18,672.79 1281.73,685.093 1282.29,686.156 1282.85,705.035 1283.41,708.159 1283.97,688.732 1284.53,655.908 1285.09,643.99 1285.65,677.032 1286.21,662.884 1286.77,681.798 1287.33,680.627 1287.89,647.043 1288.45,649.506 1289,654.263 1289.56,654.771 1290.12,701.953 1290.68,735.237 1291.24,734.311 1291.8,746.484 1292.36,743.876 1292.92,739.316 1293.48,752.762 1294.04,748.866 1294.6,731.204 1295.16,729.056 1295.72,758.328 1296.28,722.261 1296.83,720.108 1297.39,703.805 1297.95,671.824 1298.51,606.871 1299.07,609.727 1299.63,612.147 1300.19,630.313 1300.75,646.001 1301.31,613.948 1301.87,598.476 1302.43,582.281 1302.99,587.789 1303.55,609.412 1304.1,612.682 1304.66,600.814 1305.22,637.124 1305.78,660.57 1306.34,659.797 1306.9,642.599 1307.46,628.98 1308.02,629.499 1308.58,648.986 1309.14,664.9 1309.7,651.44 1310.26,652.937 1310.82,687.349 1311.38,689.366 1311.93,689.366 1312.49,703.865 1313.05,717.684 1313.61,714.287 1314.17,698.899 1314.73,683.419 1315.29,665.999 1315.85,681.931 1316.41,682.311 1316.97,684.901 1317.53,684.286 1318.09,720.192 1318.65,687.227 1319.2,718.741 1319.76,719.03 1320.32,751.593 1320.88,733.165 1321.44,713.522 1322,708.499 1322.56,672.232 1323.12,654.284 1323.68,658.567 1324.24,643.221 1324.8,663.799 1325.36,697.959 1325.92,700.258 1326.47,651.388 1327.03,668.872 1327.59,669.898 1328.15,668.889 1328.71,670.354 1329.27,685.707 1329.83,687.238 1330.39,655.418 1330.95,654.967 1331.51,684.784 1332.07,654.003 1332.63,636.54 1333.19,641.03 1333.75,623.834 1334.3,623.665 1334.86,628.977 1335.42,614.775 1335.98,599.176 1336.54,620.552 1337.1,606.04 1337.66,640.955 1338.22,663.343 1338.78,663.93 1339.34,659.35 1339.9,647.918 1340.46,652.39 1341.02,653.81 1341.57,641.215 1342.13,690.82 1342.69,672.505 1343.25,688.373 1343.81,723.814 1344.37,740.907 1344.93,754.121 1345.49,752.049 1346.05,729.915 1346.61,710.56 1347.17,709.45 1347.73,707.079 1348.29,690.197 1348.84,705.43 1349.4,708.419 1349.96,723.723 1350.52,736.722 1351.08,730.278 1351.64,779.318 1352.2,754.009 1352.76,752.145 1353.32,767.785 1353.88,763.887 1354.44,762.377 1355,727.176 1355.56,709.521 1356.12,705.142 1356.67,702.793 1357.23,686.08 1357.79,672.599 1358.35,676.506 1358.91,675.36 1359.47,678.156 1360.03,646.788 1360.59,650.545 1361.15,683.614 1361.71,696.127 1362.27,725.86 1362.83,707.98 1363.39,704.668 1363.94,653.329 1364.5,651.075 1365.06,633.044 1365.62,619.645 1366.18,589.954 1366.74,611.003 1367.3,617.625 1367.86,620.441 1368.42,622.662 1368.98,640.494 1369.54,658.894 1370.1,678.979 1370.66,679.745 1371.21,700.119 1371.77,702.742 1372.33,703.887 1372.89,717.595 1373.45,700.354 1374.01,716.374 1374.57,710.803 1375.13,722.938 1375.69,736.704 1376.25,702.17 1376.81,735.816 1377.37,719.545 1377.93,750.191 1378.49,746.488 1379.04,748.328 1379.6,728.909 1380.16,724.328 1380.72,721.205 1381.28,739.5 1381.84,786.656 1382.4,802.37 1382.96,795.574 1383.52,790.351 1384.08,786.589 1384.64,800.077 1385.2,775.339 1385.76,755.401 1386.31,752.098 1386.87,702.425 1387.43,718.795 1387.99,738.523 1388.55,733.077 1389.11,716.624 1389.67,734.131 1390.23,712.56 1390.79,709.878 1391.35,710.51 1391.91,710.683 1392.47,675.37 1393.03,658.213 1393.58,677.544 1394.14,644.893 1394.7,646.684 1395.26,635.643 1395.82,639.586 1396.38,658.752 1396.94,660.502 1397.5,679.052 1398.06,664.029 1398.62,683.219 1399.18,703.117 1399.74,719.744 1400.3,768.357 1400.86,750.022 1401.41,776.308 1401.97,775.153 1402.53,771.584 1403.09,748.728 1403.65,725.621 1404.21,707.007 1404.77,706.178 1405.33,706.299 1405.89,687.226 1406.45,688.238 1407.01,689.146 1407.57,689.664 1408.13,703.528 1408.68,684.361 1409.24,667.328 1409.8,669.628 1410.36,638.961 1410.92,622.391 1411.48,640.111 1412.04,675.941 1412.6,625.902 1413.16,641.742 1413.72,627.354 1414.28,628.47 1414.84,615.9 1415.4,621.184 1415.95,609.94 1416.51,630.327 1417.07,615.625 1417.63,618.132 1418.19,622.313 1418.75,626.014 1419.31,631.478 1419.87,600.634 1420.43,602.997 1420.99,608.755 1421.55,631.773 1422.11,651.771 1422.67,639.631 1423.23,639.485 1423.78,674.487 1424.34,693.259 1424.9,675.514 1425.46,706.956 1426.02,689.862 1426.58,676.68 1427.14,678.889 1427.7,692.82 1428.26,722.943 1428.82,735.999 1429.38,746.863 1429.94,757.726 1430.5,771.609 1431.05,785.275 1431.61,783.679 1432.17,829.995 1432.73,837.151 1433.29,846.165 1433.85,839.209 1434.41,801.291 1434.97,829.114 1435.53,774.929 1436.09,754.469 1436.65,721.378 1437.21,701.957 1437.77,686.772 1438.33,707.234 1438.88,689.471 1439.44,673.452 1440,654.671 1440.56,669.508 1441.12,683.786 1441.68,646.389 1442.24,647.83 1442.8,651.009 1443.36,634.621 1443.92,656.991 1444.48,640.521 1445.04,627.876 1445.6,634.464 1446.15,654.297 1446.71,654.093 1447.27,638.141 1447.83,671.73 1448.39,657.474 1448.95,674.439 1449.51,692.009 1450.07,693.354 1450.63,709.723 1451.19,708.323 1451.75,704.774 1452.31,691.087 1452.87,674.947 1453.42,725.338 1453.98,755.595 1454.54,751.831 1455.1,777.16 1455.66,821.262 1456.22,830.47 1456.78,787.444 1457.34,762.759 1457.9,794.271 1458.46,820.078 1459.02,844.835 1459.58,819.165 1460.14,824.607 1460.7,817.053 1461.25,776.791 1461.81,770.852 1462.37,768.893 1462.93,746.013 1463.49,726.924 1464.05,724.872 1464.61,724.678 1465.17,755.608 1465.73,767.746 1466.29,747.064 1466.85,696.421 1467.41,680.211 1467.97,695.244 1468.52,691.755 1469.08,656.882 1469.64,658.614 1470.2,612.422 1470.76,619.254 1471.32,624.407 1471.88,625.652 1472.44,626.621 1473,610.58 1473.56,597.124 1474.12,586.091 1474.68,571.903 1475.24,595.138 1475.79,582.198 1476.35,571.072 1476.91,559.059 1477.47,562.856 1478.03,555.809 1478.59,578.837 1479.15,567.175 1479.71,592.534 1480.27,595.762 1480.83,569.25 1481.39,580.023 1481.95,603.035 1482.51,591.83 1483.07,613.404 1483.62,597.4 1484.18,603.862 1484.74,639.604 1485.3,606.625 1485.86,643.015 1486.42,662.599 1486.98,634.426 1487.54,636.683 1488.1,637.418 1488.66,624.145 1489.22,609.636 1489.78,630.831 1490.34,647.168 1490.89,630.896 1491.45,650.582 1492.01,635.195 1492.57,639.935 1493.13,677.888 1493.69,693.819 1494.25,676.013 1494.81,676.528 1495.37,691.781 1495.93,704.689 1496.49,685.626 1497.05,669.965 1497.61,670.21 1498.16,671.36 1498.72,659.687 1499.28,644.769 1499.84,697.371 1500.4,714.373 1500.96,762.428 1501.52,761.652 1502.08,791.225 1502.64,788.399 1503.2,796.906 1503.76,807.193 1504.32,801.731 1504.88,814.184 1505.44,822.199 1505.99,827.418 1506.55,786.627 1507.11,752.853 1507.67,750.242 1508.23,761.388 1508.79,723.22 1509.35,720.272 1509.91,732.613 1510.47,730.076 1511.03,696.42 1511.59,709.605 1512.15,711.146 1512.71,724.34 1513.26,737.78 1513.82,751.962 1514.38,771.284 1514.94,767.535 1515.5,761.743 1516.06,794.553 1516.62,788.494 1517.18,782.07 1517.74,809.731 1518.3,801.24 1518.86,811.681 1519.42,792.712 1519.98,784.709 1520.53,762.084 1521.09,761.346 1521.65,720.325 1522.21,684.475 1522.77,715.104 1523.33,696.018 1523.89,708.372 1524.45,740.76 1525.01,735.526 1525.57,745.638 1526.13,756.75 1526.69,736.533 1527.25,689.128 1527.81,721.502 1528.36,718.548 1528.92,702.407 1529.48,650.653 1530.04,639.818 1530.6,611.45 1531.16,629.268 1531.72,663.164 1532.28,645.711 1532.84,649.115 1533.4,653.131 1533.96,651.11 1534.52,650.477 1535.08,666.12 1535.63,665.299 1536.19,682.786 1536.75,685.948 1537.31,685.084 1537.87,686.399 1538.43,686.449 1538.99,703.338 1539.55,704.138 1540.11,650.782 1540.67,622.377 1541.23,626.52 1541.79,597.938 1542.35,585.645 1542.9,562.426 1543.46,571.21 1544.02,591.289 1544.58,594.105 1545.14,581.058 1545.7,601.134 1546.26,606.362 1546.82,593.616 1547.38,582.027 1547.94,604.49 1548.5,619.836 1549.06,608.892 1549.62,596.831 1550.18,619.847 1550.73,603.481 1551.29,606.304 1551.85,624.421 1552.41,676.805 1552.97,662.503 1553.53,676.565 1554.09,706.164 1554.65,687.777 1555.21,700.42 1555.77,701.57 1556.33,730.551 1556.89,678.252 1557.45,695.483 1558,695.763 1558.56,711.369 1559.12,709.132 1559.68,675.008 1560.24,671.477 1560.8,671.586 1561.36,690.634 1561.92,656.107 1562.48,673.334 1563.04,672.827 1563.6,641.543 1564.16,637.881 1564.72,655.366 1565.28,654.835 1565.83,641.565 1566.39,642.241 1566.95,648.192 1567.51,646.336 1568.07,609.86 1568.63,645.61 1569.19,662.899 1569.75,711.05 1570.31,705.351 1570.87,718.802 1571.43,720.689 1571.99,722.152 1572.55,736.373 1573.1,736.077 1573.66,718.513 1574.22,733.405 1574.78,764.384 1575.34,759.506 1575.9,690.764 1576.46,691.358 1577.02,659.871 1577.58,631.848 1578.14,602.752 1578.7,592.189 1579.26,600.442 1579.82,620.041 1580.37,621.663 1580.93,642.975 1581.49,646.531 1582.05,634.501 1582.61,639.775 1583.17,661.117 1583.73,677.871 1584.29,660.823 1584.85,646.828 1585.41,663.565 1585.97,667.005 1586.53,669.137 1587.09,670.09 1587.65,700.18 1588.2,714.664 1588.76,729.556 1589.32,729.091 1589.88,743.566 1590.44,752.555 1591,746.818 1591.56,760.167 1592.12,736.682 1592.68,732.899 1593.24,733.796 1593.8,746.345 1594.36,728.153 1594.92,728.855 1595.47,726.98 1596.03,741.175 1596.59,740.832 1597.15,725.36 1597.71,743.025 1598.27,739.419 1598.83,721.878 1599.39,770.627 1599.95,732.647 1600.51,727.378 1601.07,727.011 1601.63,723.261 1602.19,688.816 1602.74,671.863 1603.3,659.243 1603.86,660.412 1604.42,677.014 1604.98,663.974 1605.54,650.688 1606.1,633.528 1606.66,638.387 1607.22,637.808 1607.78,672.205 1608.34,685.834 1608.9,700.769 1609.46,681.386 1610.02,667.503 1610.57,673.223 1611.13,658.423 1611.69,645.047 1612.25,633.145 1612.81,621.067 1613.37,623.697 1613.93,607.751 1614.49,612.05 1615.05,581.482 1615.61,585.699 1616.17,605.298 1616.73,609.198 1617.29,594.053 1617.84,634.511 1618.4,651.955 1618.96,670.656 1619.52,686.664 1620.08,689.317 1620.64,674.355 1621.2,673.924 1621.76,674.936 1622.32,659.706 1622.88,662.23 1623.44,664.853 1624,681.24 1624.56,648.143 1625.11,683.023 1625.67,665.11 1626.23,667.405 1626.79,653.463 1627.35,688.145 1627.91,687.835 1628.47,635.429 1629.03,701.84 1629.59,684.534 1630.15,685.218 1630.71,669.526 1631.27,689.241 1631.83,670.304 1632.39,690.351 1632.94,673.414 1633.5,686.519 1634.06,687.024 1634.62,659.677 1635.18,679.507 1635.74,682.595 1636.3,665.445 1636.86,680.233 1637.42,646.17 1637.98,631.575 1638.54,668.39 1639.1,687.92 1639.66,671.377 1640.21,686.268 1640.77,689.279 1641.33,689.248 1641.89,670.344 1642.45,656.434 1643.01,656.318 1643.57,687.566 1644.13,701.594 1644.69,717.178 1645.25,744.647 1645.81,725.534 1646.37,692.122 1646.93,689.06 1647.48,703.313 1648.04,669.554 1648.6,685.898 1649.16,732.76 1649.72,728.781 1650.28,726.153 1650.84,721.7 1651.4,715.151 1651.96,714.025 1652.52,678.968 1653.08,682.958 1653.64,697.528 1654.2,731.293 1654.76,763.255 1655.31,759.821 1655.87,724.655 1656.43,770.732 1656.99,798.226 1657.55,794.587 1658.11,770.496 1658.67,765.685 1659.23,762.716 1659.79,777.234 1660.35,777.869 1660.91,784.485 1661.47,781.668 1662.03,761.807 1662.58,757.97 1663.14,721.64 1663.7,685.265 1664.26,688.252 1664.82,705.103 1665.38,706.531 1665.94,675.183 1666.5,658.726 1667.06,674.274 1667.62,705.637 1668.18,719.486 1668.74,698.371 1669.3,711.536 1669.85,695.148 1670.41,712.026 1670.97,708.704 1671.53,692.526 1672.09,687.48 1672.65,699.315 1673.21,698.038 1673.77,712.198 1674.33,696.999 1674.89,698.161 1675.45,692.73 1676.01,691.299 1676.57,695.924 1677.13,676.739 1677.68,677.738 1678.24,661.925 1678.8,664.888 1679.36,662.997 1679.92,665.844 1680.48,651.494 1681.04,603.431 1681.6,624.012 1682.16,593.362 1682.72,597.143 1683.28,601.644 1683.84,569.705 1684.4,561.48 1684.95,614.885 1685.51,636.16 1686.07,635.546 1686.63,639.208 1687.19,672.47 1687.75,673.807 1688.31,656.663 1688.87,672.296 1689.43,692.771 1689.99,692.496 1690.55,691.508 1691.11,693.079 1691.67,707.518 1692.23,675.404 1692.78,677.162 1693.34,678.925 1693.9,679.548 1694.46,665.527 1695.02,679.634 1695.58,664.817 1696.14,677.466 1696.7,681.441 1697.26,663.179 1697.82,682.571 1698.38,665.466 1698.94,667.325 1699.5,698.776 1700.05,696.96 1700.61,664.816 1701.17,665.41 1701.73,664.285 1702.29,680.558 1702.85,681.308 1703.41,668.361 1703.97,699.739 1704.53,702.589 1705.09,699.309 1705.65,680.809 1706.21,694.994 1706.77,694.586 1707.32,710.788 1707.88,711.49 1708.44,708.705 1709,708.92 1709.56,739.331 1710.12,704.109 1710.68,702.324 1711.24,702.163 1711.8,717.898 1712.36,715.272 1712.92,685.055 1713.48,701.525 1714.04,699.434 1714.6,714.337 1715.15,647.706 1715.71,651.551 1716.27,620.523 1716.83,640.735 1717.39,611.684 1717.95,630.052 1718.51,617.37 1719.07,601.769 1719.63,595.396 1720.19,603.358 1720.75,564.609 1721.31,573.35 1721.87,547.227 1722.42,552.22 1722.98,540.593 1723.54,529.481 1724.1,549.705 1724.66,590.347 1725.22,592.498 1725.78,612.845 1726.34,602.161 1726.9,606.698 1727.46,624.609 1728.02,643.898 1728.58,683.028 1729.14,678.928 1729.69,678.902 1730.25,696.382 1730.81,683.182 1731.37,649.431 1731.93,683.641 1732.49,699.963 1733.05,714.436 1733.61,730.262 1734.17,724.288 1734.73,719.122 1735.29,717.369 1735.85,746.344 1736.41,742.195 1736.97,736.073 1737.52,747.681 1738.08,759.181 1738.64,738.19 1739.2,782.745 1739.76,809.823 1740.32,801.985 1740.88,781.535 1741.44,778.856 1742,777.257 1742.56,788.389 1743.12,765.917 1743.68,776.355 1744.24,771.548 1744.79,752.09 1745.35,713.083 1745.91,727.448 1746.47,705.821 1747.03,721.146 1747.59,717.861 1748.15,702.854 1748.71,734.769 1749.27,764.265 1749.83,759.085 1750.39,771.257 1750.95,736.604 1751.51,719.778 1752.06,704.144 1752.62,703.715 1753.18,701.986 1753.74,681.606 1754.3,649.605 1754.86,668.715 1755.42,666.341 1755.98,647.979 1756.54,583.884 1757.1,589.975 1757.66,594.941 1758.22,573.258 1758.78,580.492 1759.34,602.31 1759.89,641.187 1760.45,655.502 1761.01,639.727 1761.57,643.501 1762.13,646.201 1762.69,650.298 1763.25,651.812 1763.81,654.281 1764.37,623.584 1764.93,559.42 1765.49,564.48 1766.05,560.065 1766.61,566.305 1767.16,590.155 1767.72,596.055 1768.28,617.289 1768.84,638.184 1769.4,643.08 1769.96,643.912 1770.52,663.152 1771.08,634 1771.64,654.674 1772.2,703.081 1772.76,734.515 1773.32,718.566 1773.88,688.105 1774.43,704.015 1774.99,684.953 1775.55,687.254 1776.11,705.226 1776.67,671.297 1777.23,657.582 1777.79,691.748 1778.35,675.418 1778.91,693.008 1779.47,691.064 1780.03,678.251 1780.59,679.682 1781.15,663.904 1781.71,695.961 1782.26,727.429 1782.82,724.556 1783.38,722.107 1783.94,703.232 1784.5,699.266 1785.06,698.788 1785.62,683.789 1786.18,700.511 1786.74,670.073 1787.3,641.489 1787.86,642.663 1788.42,624.541 1788.98,629.13 1789.53,666.381 1790.09,686.742 1790.65,702.279 1791.21,734.274 1791.77,736.835 1792.33,766.137 1792.89,763.983 1793.45,712.616 1794.01,728.148 1794.57,709.422 1795.13,741.015 1795.69,720.977 1796.25,753.761 1796.8,702.254 1797.36,702.987 1797.92,687.943 1798.48,690.873 1799.04,693.442 1799.6,694.521 1800.16,694.267 1800.72,678.157 1801.28,679.089 1801.84,683.713 1802.4,701.527 1802.96,698.79 1803.52,699.229 1804.08,701.687 1804.63,702.119 1805.19,685.164 1805.75,684.566 1806.31,698.009 1806.87,716.181 1807.43,742.862 1807.99,723.532 1808.55,752.37 1809.11,746.444 1809.67,778.312 1810.23,759.09 1810.79,734.683 1811.35,762.936 1811.9,759.41 1812.46,771.346 1813.02,766.457 1813.58,779.431 1814.14,724.977 1814.7,706.711 1815.26,706.015 1815.82,688.723 1816.38,704.415 1816.94,703.323 1817.5,721.074 1818.06,722.296 1818.62,719.311 1819.18,718.378 1819.73,716.915 1820.29,746.295 1820.85,727.663 1821.41,719.473 1821.97,746.509 1822.53,712.28 1823.09,711.709 1823.65,708.999 1824.21,756.176 1824.77,768.28 1825.33,761.186 1825.89,723.436 1826.45,753.068 1827,750.01 1827.56,781.431 1828.12,776.04 1828.68,737.848 1829.24,751.181 1829.8,730.864 1830.36,712.35 1830.92,711.178 1831.48,709.028 1832.04,692.023 1832.6,707.753 1833.16,705.33 1833.72,703.273 1834.27,700.227 1834.83,686.567 1835.39,655.216 1835.95,683.493 1836.51,702.718 1837.07,700.768 1837.63,667.005 1838.19,668.707 \"/>\n<path clip-path=\"url(#clip163)\" d=\"M720.247 690.314 L720.806 690.314 L721.365 690.314 L721.924 690.314 L722.484 690.314 L723.043 690.314 L723.602 690.314 L724.161 690.314 L724.721 690.314 L725.28 690.314 L725.839 690.314 L726.398 690.314 L726.958 690.314 L727.517 690.314 L728.076 690.314 L728.635 690.314 L729.195 690.314 L729.754 690.314 L730.313 690.314 L730.872 690.314 L731.432 690.314 L731.991 690.314 L732.55 690.314 L733.109 690.314 L733.669 690.314 L734.228 690.314 L734.787 690.314 L735.346 690.314 L735.906 690.314 L736.465 690.314 L737.024 690.314 L737.583 690.314 L738.143 690.314 L738.702 690.314 L739.261 690.314 L739.82 690.314 L740.38 690.314 L740.939 690.314 L741.498 690.314 L742.057 690.314 L742.617 690.314 L743.176 690.314 L743.735 690.314 L744.294 690.314 L744.854 690.314 L745.413 690.314 L745.972 690.314 L746.531 690.314 L747.091 690.314 L747.65 690.314 L748.209 690.314 L748.768 690.314 L749.328 690.314 L749.887 690.314 L750.446 690.314 L751.005 690.314 L751.565 690.314 L752.124 690.314 L752.683 690.314 L753.242 690.314 L753.802 690.314 L754.361 690.314 L754.92 690.314 L755.479 690.314 L756.039 690.314 L756.598 690.314 L757.157 690.314 L757.716 690.314 L758.276 690.314 L758.835 690.314 L759.394 690.314 L759.953 690.314 L760.513 690.314 L761.072 690.314 L761.631 690.314 L762.19 690.314 L762.75 690.314 L763.309 690.314 L763.868 690.314 L764.427 690.314 L764.987 690.314 L765.546 690.314 L766.105 690.314 L766.664 690.314 L767.224 690.314 L767.783 690.314 L768.342 690.314 L768.901 690.314 L769.461 690.314 L770.02 690.314 L770.579 690.314 L771.138 690.314 L771.698 690.314 L772.257 690.314 L772.816 690.314 L773.375 690.314 L773.935 690.314 L774.494 690.314 L775.053 690.314 L775.612 690.314 L776.172 690.314 L776.731 690.314 L777.29 690.314 L777.849 690.314 L778.409 690.314 L778.968 690.314 L779.527 690.314 L780.086 690.314 L780.646 690.314 L781.205 690.314 L781.764 690.314 L782.323 690.314 L782.883 690.314 L783.442 690.314 L784.001 690.314 L784.56 690.314 L785.12 690.314 L785.679 690.314 L786.238 690.314 L786.797 690.314 L787.357 690.314 L787.916 690.314 L788.475 690.314 L789.034 690.314 L789.594 690.314 L790.153 690.314 L790.712 690.314 L791.271 690.314 L791.831 690.314 L792.39 690.314 L792.949 690.314 L793.508 690.314 L794.068 690.314 L794.627 690.314 L795.186 690.314 L795.745 690.314 L796.305 690.314 L796.864 690.314 L797.423 690.314 L797.982 690.314 L798.542 690.314 L799.101 690.314 L799.66 690.314 L800.219 690.314 L800.779 690.314 L801.338 690.314 L801.897 690.314 L802.456 690.314 L803.016 690.314 L803.575 690.314 L804.134 690.314 L804.693 690.314 L805.253 690.314 L805.812 690.314 L806.371 690.314 L806.931 690.314 L807.49 690.314 L808.049 690.314 L808.608 690.314 L809.168 690.314 L809.727 690.314 L810.286 690.314 L810.845 690.314 L811.405 690.314 L811.964 690.314 L812.523 690.314 L813.082 690.314 L813.642 690.314 L814.201 690.314 L814.76 690.314 L815.319 690.314 L815.879 690.314 L816.438 690.314 L816.997 690.314 L817.556 690.314 L818.116 690.314 L818.675 690.314 L819.234 690.314 L819.793 690.314 L820.353 690.314 L820.912 690.314 L821.471 690.314 L822.03 690.314 L822.59 690.314 L823.149 690.314 L823.708 690.314 L824.267 690.314 L824.827 690.314 L825.386 690.314 L825.945 690.314 L826.504 690.314 L827.064 690.314 L827.623 690.314 L828.182 690.314 L828.741 690.314 L829.301 690.314 L829.86 690.314 L830.419 690.314 L830.978 690.314 L831.538 690.314 L832.097 690.314 L832.656 690.314 L833.215 690.314 L833.775 690.314 L834.334 690.314 L834.893 690.314 L835.452 690.314 L836.012 690.314 L836.571 690.314 L837.13 690.314 L837.689 690.314 L838.249 690.314 L838.808 690.314 L839.367 690.314 L839.926 690.314 L840.486 690.314 L841.045 690.314 L841.604 690.314 L842.163 690.314 L842.723 690.314 L843.282 690.314 L843.841 690.314 L844.4 690.314 L844.96 690.314 L845.519 690.314 L846.078 690.314 L846.637 690.314 L847.197 690.314 L847.756 690.314 L848.315 690.314 L848.874 690.314 L849.434 690.314 L849.993 690.314 L850.552 690.314 L851.111 690.314 L851.671 690.314 L852.23 690.314 L852.789 690.314 L853.348 690.314 L853.908 690.314 L854.467 690.314 L855.026 690.314 L855.585 690.314 L856.145 690.314 L856.704 690.314 L857.263 690.314 L857.822 690.314 L858.382 690.314 L858.941 690.314 L859.5 690.314 L860.059 690.314 L860.619 690.314 L861.178 690.314 L861.737 690.314 L862.296 690.314 L862.856 690.314 L863.415 690.314 L863.974 690.314 L864.533 690.314 L865.093 690.314 L865.652 690.314 L866.211 690.314 L866.77 690.314 L867.33 690.314 L867.889 690.314 L868.448 690.314 L869.007 690.314 L869.567 690.314 L870.126 690.314 L870.685 690.314 L871.244 690.314 L871.804 690.314 L872.363 690.314 L872.922 690.314 L873.481 690.314 L874.041 690.314 L874.6 690.314 L875.159 690.314 L875.718 690.314 L876.278 690.314 L876.837 690.314 L877.396 690.314 L877.955 690.314 L878.515 690.314 L879.074 690.314 L879.633 690.314 L880.192 690.314 L880.752 690.314 L881.311 690.314 L881.87 690.314 L882.429 690.314 L882.989 690.314 L883.548 690.314 L884.107 690.314 L884.666 690.314 L885.226 690.314 L885.785 690.314 L886.344 690.314 L886.903 690.314 L887.463 690.314 L888.022 690.314 L888.581 690.314 L889.14 690.314 L889.7 690.314 L890.259 690.314 L890.818 690.314 L891.377 690.314 L891.937 690.314 L892.496 690.314 L893.055 690.314 L893.614 690.314 L894.174 690.314 L894.733 690.314 L895.292 690.314 L895.851 690.314 L896.411 690.314 L896.97 690.314 L897.529 690.314 L898.088 690.314 L898.648 690.314 L899.207 690.314 L899.766 690.314 L900.325 690.314 L900.885 690.314 L901.444 690.314 L902.003 690.314 L902.562 690.314 L903.122 690.314 L903.681 690.314 L904.24 690.314 L904.799 690.314 L905.359 690.314 L905.918 690.314 L906.477 690.314 L907.036 690.314 L907.596 690.314 L908.155 690.314 L908.714 690.314 L909.273 690.314 L909.833 690.314 L910.392 690.314 L910.951 690.314 L911.51 690.314 L912.07 690.314 L912.629 690.314 L913.188 690.314 L913.747 690.314 L914.307 690.314 L914.866 690.314 L915.425 690.314 L915.984 690.314 L916.544 690.314 L917.103 690.314 L917.662 690.314 L918.221 690.314 L918.781 690.314 L919.34 690.314 L919.899 690.314 L920.458 690.314 L921.018 690.314 L921.577 690.314 L922.136 690.314 L922.695 690.314 L923.255 690.314 L923.814 690.314 L924.373 690.314 L924.932 690.314 L925.492 690.314 L926.051 690.314 L926.61 690.314 L927.169 690.314 L927.729 690.314 L928.288 690.314 L928.847 690.314 L929.406 690.314 L929.966 690.314 L930.525 690.314 L931.084 690.314 L931.644 690.314 L932.203 690.314 L932.762 690.314 L933.321 690.314 L933.881 690.314 L934.44 690.314 L934.999 690.314 L935.558 690.314 L936.118 690.314 L936.677 690.314 L937.236 690.314 L937.795 690.314 L938.355 690.314 L938.914 690.314 L939.473 690.314 L940.032 690.314 L940.592 690.314 L941.151 690.314 L941.71 690.314 L942.269 690.314 L942.829 690.314 L943.388 690.314 L943.947 690.314 L944.506 690.314 L945.066 690.314 L945.625 690.314 L946.184 690.314 L946.743 690.314 L947.303 690.314 L947.862 690.314 L948.421 690.314 L948.98 690.314 L949.54 690.314 L950.099 690.314 L950.658 690.314 L951.217 690.314 L951.777 690.314 L952.336 690.314 L952.895 690.314 L953.454 690.314 L954.014 690.314 L954.573 690.314 L955.132 690.314 L955.691 690.314 L956.251 690.314 L956.81 690.314 L957.369 690.314 L957.928 690.314 L958.488 690.314 L959.047 690.314 L959.606 690.314 L960.165 690.314 L960.725 690.314 L961.284 690.314 L961.843 690.314 L962.402 690.314 L962.962 690.314 L963.521 690.314 L964.08 690.314 L964.639 690.314 L965.199 690.314 L965.758 690.314 L966.317 690.314 L966.876 690.314 L967.436 690.314 L967.995 690.314 L968.554 690.314 L969.113 690.314 L969.673 690.314 L970.232 690.314 L970.791 690.314 L971.35 690.314 L971.91 690.314 L972.469 690.314 L973.028 690.314 L973.587 690.314 L974.147 690.314 L974.706 690.314 L975.265 690.314 L975.824 690.314 L976.384 690.314 L976.943 690.314 L977.502 690.314 L978.061 690.314 L978.621 690.314 L979.18 690.314 L979.739 690.314 L980.298 690.314 L980.858 690.314 L981.417 690.314 L981.976 690.314 L982.535 690.314 L983.095 690.314 L983.654 690.314 L984.213 690.314 L984.772 690.314 L985.332 690.314 L985.891 690.314 L986.45 690.314 L987.009 690.314 L987.569 690.314 L988.128 690.314 L988.687 690.314 L989.246 690.314 L989.806 690.314 L990.365 690.314 L990.924 690.314 L991.483 690.314 L992.043 690.314 L992.602 690.314 L993.161 690.314 L993.72 690.314 L994.28 690.314 L994.839 690.314 L995.398 690.314 L995.957 690.314 L996.517 690.314 L997.076 690.314 L997.635 690.314 L998.194 690.314 L998.754 690.314 L999.313 690.314 L999.872 690.314 L1000.43 690.314 L1000.99 690.314 L1001.55 690.314 L1002.11 690.314 L1002.67 690.314 L1003.23 690.314 L1003.79 690.314 L1004.35 690.314 L1004.91 690.314 L1005.46 690.314 L1006.02 690.314 L1006.58 690.314 L1007.14 690.314 L1007.7 690.314 L1008.26 690.314 L1008.82 690.314 L1009.38 690.314 L1009.94 690.314 L1010.5 690.314 L1011.06 690.314 L1011.62 690.314 L1012.18 690.314 L1012.73 690.314 L1013.29 690.314 L1013.85 690.314 L1014.41 690.314 L1014.97 690.314 L1015.53 690.314 L1016.09 690.314 L1016.65 690.314 L1017.21 690.314 L1017.77 690.314 L1018.33 690.314 L1018.89 690.314 L1019.45 690.314 L1020.01 690.314 L1020.56 690.314 L1021.12 690.314 L1021.68 690.314 L1022.24 690.314 L1022.8 690.314 L1023.36 690.314 L1023.92 690.314 L1024.48 690.314 L1025.04 690.314 L1025.6 690.314 L1026.16 690.314 L1026.72 690.314 L1027.28 690.314 L1027.83 690.314 L1028.39 690.314 L1028.95 690.314 L1029.51 690.314 L1030.07 690.314 L1030.63 690.314 L1031.19 690.314 L1031.75 690.314 L1032.31 690.314 L1032.87 690.314 L1033.43 690.314 L1033.99 690.314 L1034.55 690.314 L1035.1 690.314 L1035.66 690.314 L1036.22 690.314 L1036.78 690.314 L1037.34 690.314 L1037.9 690.314 L1038.46 690.314 L1039.02 690.314 L1039.58 690.314 L1040.14 690.314 L1040.7 690.314 L1041.26 690.314 L1041.82 690.314 L1042.38 690.314 L1042.93 690.314 L1043.49 690.314 L1044.05 690.314 L1044.61 690.314 L1045.17 690.314 L1045.73 690.314 L1046.29 690.314 L1046.85 690.314 L1047.41 690.314 L1047.97 690.314 L1048.53 690.314 L1049.09 690.314 L1049.65 690.314 L1050.2 690.314 L1050.76 690.314 L1051.32 690.314 L1051.88 690.314 L1052.44 690.314 L1053 690.314 L1053.56 690.314 L1054.12 690.314 L1054.68 690.314 L1055.24 690.314 L1055.8 690.314 L1056.36 690.314 L1056.92 690.314 L1057.48 690.314 L1058.03 690.314 L1058.59 690.314 L1059.15 690.314 L1059.71 690.314 L1060.27 690.314 L1060.83 690.314 L1061.39 690.314 L1061.95 690.314 L1062.51 690.314 L1063.07 690.314 L1063.63 690.314 L1064.19 690.314 L1064.75 690.314 L1065.3 690.314 L1065.86 690.314 L1066.42 690.314 L1066.98 690.314 L1067.54 690.314 L1068.1 690.314 L1068.66 690.314 L1069.22 690.314 L1069.78 690.314 L1070.34 690.314 L1070.9 690.314 L1071.46 690.314 L1072.02 690.314 L1072.57 690.314 L1073.13 690.314 L1073.69 690.314 L1074.25 690.314 L1074.81 690.314 L1075.37 690.314 L1075.93 690.314 L1076.49 690.314 L1077.05 690.314 L1077.61 690.314 L1078.17 690.314 L1078.73 690.314 L1079.29 690.314 L1079.85 690.314 L1080.4 690.314 L1080.96 690.314 L1081.52 690.314 L1082.08 690.314 L1082.64 690.314 L1083.2 690.314 L1083.76 690.314 L1084.32 690.314 L1084.88 690.314 L1085.44 690.314 L1086 690.314 L1086.56 690.314 L1087.12 690.314 L1087.67 690.314 L1088.23 690.314 L1088.79 690.314 L1089.35 690.314 L1089.91 690.314 L1090.47 690.314 L1091.03 690.314 L1091.59 690.314 L1092.15 690.314 L1092.71 690.314 L1093.27 690.314 L1093.83 690.314 L1094.39 690.314 L1094.94 690.314 L1095.5 690.314 L1096.06 690.314 L1096.62 690.314 L1097.18 690.314 L1097.74 690.314 L1098.3 690.314 L1098.86 690.314 L1099.42 690.314 L1099.98 690.314 L1100.54 690.314 L1101.1 690.314 L1101.66 690.314 L1102.22 690.314 L1102.77 690.314 L1103.33 690.314 L1103.89 690.314 L1104.45 690.314 L1105.01 690.314 L1105.57 690.314 L1106.13 690.314 L1106.69 690.314 L1107.25 690.314 L1107.81 690.314 L1108.37 690.314 L1108.93 690.314 L1109.49 690.314 L1110.04 690.314 L1110.6 690.314 L1111.16 690.314 L1111.72 690.314 L1112.28 690.314 L1112.84 690.314 L1113.4 690.314 L1113.96 690.314 L1114.52 690.314 L1115.08 690.314 L1115.64 690.314 L1116.2 690.314 L1116.76 690.314 L1117.31 690.314 L1117.87 690.314 L1118.43 690.314 L1118.99 690.314 L1119.55 690.314 L1120.11 690.314 L1120.67 690.314 L1121.23 690.314 L1121.79 690.314 L1122.35 690.314 L1122.91 690.314 L1123.47 690.314 L1124.03 690.314 L1124.59 690.314 L1125.14 690.314 L1125.7 690.314 L1126.26 690.314 L1126.82 690.314 L1127.38 690.314 L1127.94 690.314 L1128.5 690.314 L1129.06 690.314 L1129.62 690.314 L1130.18 690.314 L1130.74 690.314 L1131.3 690.314 L1131.86 690.314 L1132.41 690.314 L1132.97 690.314 L1133.53 690.314 L1134.09 690.314 L1134.65 690.314 L1135.21 690.314 L1135.77 690.314 L1136.33 690.314 L1136.89 690.314 L1137.45 690.314 L1138.01 690.314 L1138.57 690.314 L1139.13 690.314 L1139.68 690.314 L1140.24 690.314 L1140.8 690.314 L1141.36 690.314 L1141.92 690.314 L1142.48 690.314 L1143.04 690.314 L1143.6 690.314 L1144.16 690.314 L1144.72 690.314 L1145.28 690.314 L1145.84 690.314 L1146.4 690.314 L1146.96 690.314 L1147.51 690.314 L1148.07 690.314 L1148.63 690.314 L1149.19 690.314 L1149.75 690.314 L1150.31 690.314 L1150.87 690.314 L1151.43 690.314 L1151.99 690.314 L1152.55 690.314 L1153.11 690.314 L1153.67 690.314 L1154.23 690.314 L1154.78 690.314 L1155.34 690.314 L1155.9 690.314 L1156.46 690.314 L1157.02 690.314 L1157.58 690.314 L1158.14 690.314 L1158.7 690.314 L1159.26 690.314 L1159.82 690.314 L1160.38 690.314 L1160.94 690.314 L1161.5 690.314 L1162.05 690.314 L1162.61 690.314 L1163.17 690.314 L1163.73 690.314 L1164.29 690.314 L1164.85 690.314 L1165.41 690.314 L1165.97 690.314 L1166.53 690.314 L1167.09 690.314 L1167.65 690.314 L1168.21 690.314 L1168.77 690.314 L1169.33 690.314 L1169.88 690.314 L1170.44 690.314 L1171 690.314 L1171.56 690.314 L1172.12 690.314 L1172.68 690.314 L1173.24 690.314 L1173.8 690.314 L1174.36 690.314 L1174.92 690.314 L1175.48 690.314 L1176.04 690.314 L1176.6 690.314 L1177.15 690.314 L1177.71 690.314 L1178.27 690.314 L1178.83 690.314 L1179.39 690.314 L1179.95 690.314 L1180.51 690.314 L1181.07 690.314 L1181.63 690.314 L1182.19 690.314 L1182.75 690.314 L1183.31 690.314 L1183.87 690.314 L1184.43 690.314 L1184.98 690.314 L1185.54 690.314 L1186.1 690.314 L1186.66 690.314 L1187.22 690.314 L1187.78 690.314 L1188.34 690.314 L1188.9 690.314 L1189.46 690.314 L1190.02 690.314 L1190.58 690.314 L1191.14 690.314 L1191.7 690.314 L1192.25 690.314 L1192.81 690.314 L1193.37 690.314 L1193.93 690.314 L1194.49 690.314 L1195.05 690.314 L1195.61 690.314 L1196.17 690.314 L1196.73 690.314 L1197.29 690.314 L1197.85 690.314 L1198.41 690.314 L1198.97 690.314 L1199.52 690.314 L1200.08 690.314 L1200.64 690.314 L1201.2 690.314 L1201.76 690.314 L1202.32 690.314 L1202.88 690.314 L1203.44 690.314 L1204 690.314 L1204.56 690.314 L1205.12 690.314 L1205.68 690.314 L1206.24 690.314 L1206.8 690.314 L1207.35 690.314 L1207.91 690.314 L1208.47 690.314 L1209.03 690.314 L1209.59 690.314 L1210.15 690.314 L1210.71 690.314 L1211.27 690.314 L1211.83 690.314 L1212.39 690.314 L1212.95 690.314 L1213.51 690.314 L1214.07 690.314 L1214.62 690.314 L1215.18 690.314 L1215.74 690.314 L1216.3 690.314 L1216.86 690.314 L1217.42 690.314 L1217.98 690.314 L1218.54 690.314 L1219.1 690.314 L1219.66 690.314 L1220.22 690.314 L1220.78 690.314 L1221.34 690.314 L1221.89 690.314 L1222.45 690.314 L1223.01 690.314 L1223.57 690.314 L1224.13 690.314 L1224.69 690.314 L1225.25 690.314 L1225.81 690.314 L1226.37 690.314 L1226.93 690.314 L1227.49 690.314 L1228.05 690.314 L1228.61 690.314 L1229.17 690.314 L1229.72 690.314 L1230.28 690.314 L1230.84 690.314 L1231.4 690.314 L1231.96 690.314 L1232.52 690.314 L1233.08 690.314 L1233.64 690.314 L1234.2 690.314 L1234.76 690.314 L1235.32 690.314 L1235.88 690.314 L1236.44 690.314 L1236.99 690.314 L1237.55 690.314 L1238.11 690.314 L1238.67 690.314 L1239.23 690.314 L1239.79 690.314 L1240.35 690.314 L1240.91 690.314 L1241.47 690.314 L1242.03 690.314 L1242.59 690.314 L1243.15 690.314 L1243.71 690.314 L1244.26 690.314 L1244.82 690.314 L1245.38 690.314 L1245.94 690.314 L1246.5 690.314 L1247.06 690.314 L1247.62 690.314 L1248.18 690.314 L1248.74 690.314 L1249.3 690.314 L1249.86 690.314 L1250.42 690.314 L1250.98 690.314 L1251.54 690.314 L1252.09 690.314 L1252.65 690.314 L1253.21 690.314 L1253.77 690.314 L1254.33 690.314 L1254.89 690.314 L1255.45 690.314 L1256.01 690.314 L1256.57 690.314 L1257.13 690.314 L1257.69 690.314 L1258.25 690.314 L1258.81 690.314 L1259.36 690.314 L1259.92 690.314 L1260.48 690.314 L1261.04 690.314 L1261.6 690.314 L1262.16 690.314 L1262.72 690.314 L1263.28 690.314 L1263.84 690.314 L1264.4 690.314 L1264.96 690.314 L1265.52 690.314 L1266.08 690.314 L1266.63 690.314 L1267.19 690.314 L1267.75 690.314 L1268.31 690.314 L1268.87 690.314 L1269.43 690.314 L1269.99 690.314 L1270.55 690.314 L1271.11 690.314 L1271.67 690.314 L1272.23 690.314 L1272.79 690.314 L1273.35 690.314 L1273.91 690.314 L1274.46 690.314 L1275.02 690.314 L1275.58 690.314 L1276.14 690.314 L1276.7 690.314 L1277.26 690.314 L1277.82 690.314 L1278.38 690.314 L1278.94 690.314 L1279.5 690.314 L1280.06 690.314 L1280.62 690.314 L1281.18 690.314 L1281.73 690.314 L1282.29 690.314 L1282.85 690.314 L1283.41 690.314 L1283.97 690.314 L1284.53 690.314 L1285.09 690.314 L1285.65 690.314 L1286.21 690.314 L1286.77 690.314 L1287.33 690.314 L1287.89 690.314 L1288.45 690.314 L1289 690.314 L1289.56 690.314 L1290.12 690.314 L1290.68 690.314 L1291.24 690.314 L1291.8 690.314 L1292.36 690.314 L1292.92 690.314 L1293.48 690.314 L1294.04 690.314 L1294.6 690.314 L1295.16 690.314 L1295.72 690.314 L1296.28 690.314 L1296.83 690.314 L1297.39 690.314 L1297.95 690.314 L1298.51 690.314 L1299.07 690.314 L1299.63 690.314 L1300.19 690.314 L1300.75 690.314 L1301.31 690.314 L1301.87 690.314 L1302.43 690.314 L1302.99 690.314 L1303.55 690.314 L1304.1 690.314 L1304.66 690.314 L1305.22 690.314 L1305.78 690.314 L1306.34 690.314 L1306.9 690.314 L1307.46 690.314 L1308.02 690.314 L1308.58 690.314 L1309.14 690.314 L1309.7 690.314 L1310.26 690.314 L1310.82 690.314 L1311.38 690.314 L1311.93 690.314 L1312.49 690.314 L1313.05 690.314 L1313.61 690.314 L1314.17 690.314 L1314.73 690.314 L1315.29 690.314 L1315.85 690.314 L1316.41 690.314 L1316.97 690.314 L1317.53 690.314 L1318.09 690.314 L1318.65 690.314 L1319.2 690.314 L1319.76 690.314 L1320.32 690.314 L1320.88 690.314 L1321.44 690.314 L1322 690.314 L1322.56 690.314 L1323.12 690.314 L1323.68 690.314 L1324.24 690.314 L1324.8 690.314 L1325.36 690.314 L1325.92 690.314 L1326.47 690.314 L1327.03 690.314 L1327.59 690.314 L1328.15 690.314 L1328.71 690.314 L1329.27 690.314 L1329.83 690.314 L1330.39 690.314 L1330.95 690.314 L1331.51 690.314 L1332.07 690.314 L1332.63 690.314 L1333.19 690.314 L1333.75 690.314 L1334.3 690.314 L1334.86 690.314 L1335.42 690.314 L1335.98 690.314 L1336.54 690.314 L1337.1 690.314 L1337.66 690.314 L1338.22 690.314 L1338.78 690.314 L1339.34 690.314 L1339.9 690.314 L1340.46 690.314 L1341.02 690.314 L1341.57 690.314 L1342.13 690.314 L1342.69 690.314 L1343.25 690.314 L1343.81 690.314 L1344.37 690.314 L1344.93 690.314 L1345.49 690.314 L1346.05 690.314 L1346.61 690.314 L1347.17 690.314 L1347.73 690.314 L1348.29 690.314 L1348.84 690.314 L1349.4 690.314 L1349.96 690.314 L1350.52 690.314 L1351.08 690.314 L1351.64 690.314 L1352.2 690.314 L1352.76 690.314 L1353.32 690.314 L1353.88 690.314 L1354.44 690.314 L1355 690.314 L1355.56 690.314 L1356.12 690.314 L1356.67 690.314 L1357.23 690.314 L1357.79 690.314 L1358.35 690.314 L1358.91 690.314 L1359.47 690.314 L1360.03 690.314 L1360.59 690.314 L1361.15 690.314 L1361.71 690.314 L1362.27 690.314 L1362.83 690.314 L1363.39 690.314 L1363.94 690.314 L1364.5 690.314 L1365.06 690.314 L1365.62 690.314 L1366.18 690.314 L1366.74 690.314 L1367.3 690.314 L1367.86 690.314 L1368.42 690.314 L1368.98 690.314 L1369.54 690.314 L1370.1 690.314 L1370.66 690.314 L1371.21 690.314 L1371.77 690.314 L1372.33 690.314 L1372.89 690.314 L1373.45 690.314 L1374.01 690.314 L1374.57 690.314 L1375.13 690.314 L1375.69 690.314 L1376.25 690.314 L1376.81 690.314 L1377.37 690.314 L1377.93 690.314 L1378.49 690.314 L1379.04 690.314 L1379.6 690.314 L1380.16 690.314 L1380.72 690.314 L1381.28 690.314 L1381.84 690.314 L1382.4 690.314 L1382.96 690.314 L1383.52 690.314 L1384.08 690.314 L1384.64 690.314 L1385.2 690.314 L1385.76 690.314 L1386.31 690.314 L1386.87 690.314 L1387.43 690.314 L1387.99 690.314 L1388.55 690.314 L1389.11 690.314 L1389.67 690.314 L1390.23 690.314 L1390.79 690.314 L1391.35 690.314 L1391.91 690.314 L1392.47 690.314 L1393.03 690.314 L1393.58 690.314 L1394.14 690.314 L1394.7 690.314 L1395.26 690.314 L1395.82 690.314 L1396.38 690.314 L1396.94 690.314 L1397.5 690.314 L1398.06 690.314 L1398.62 690.314 L1399.18 690.314 L1399.74 690.314 L1400.3 690.314 L1400.86 690.314 L1401.41 690.314 L1401.97 690.314 L1402.53 690.314 L1403.09 690.314 L1403.65 690.314 L1404.21 690.314 L1404.77 690.314 L1405.33 690.314 L1405.89 690.314 L1406.45 690.314 L1407.01 690.314 L1407.57 690.314 L1408.13 690.314 L1408.68 690.314 L1409.24 690.314 L1409.8 690.314 L1410.36 690.314 L1410.92 690.314 L1411.48 690.314 L1412.04 690.314 L1412.6 690.314 L1413.16 690.314 L1413.72 690.314 L1414.28 690.314 L1414.84 690.314 L1415.4 690.314 L1415.95 690.314 L1416.51 690.314 L1417.07 690.314 L1417.63 690.314 L1418.19 690.314 L1418.75 690.314 L1419.31 690.314 L1419.87 690.314 L1420.43 690.314 L1420.99 690.314 L1421.55 690.314 L1422.11 690.314 L1422.67 690.314 L1423.23 690.314 L1423.78 690.314 L1424.34 690.314 L1424.9 690.314 L1425.46 690.314 L1426.02 690.314 L1426.58 690.314 L1427.14 690.314 L1427.7 690.314 L1428.26 690.314 L1428.82 690.314 L1429.38 690.314 L1429.94 690.314 L1430.5 690.314 L1431.05 690.314 L1431.61 690.314 L1432.17 690.314 L1432.73 690.314 L1433.29 690.314 L1433.85 690.314 L1434.41 690.314 L1434.97 690.314 L1435.53 690.314 L1436.09 690.314 L1436.65 690.314 L1437.21 690.314 L1437.77 690.314 L1438.33 690.314 L1438.88 690.314 L1439.44 690.314 L1440 690.314 L1440.56 690.314 L1441.12 690.314 L1441.68 690.314 L1442.24 690.314 L1442.8 690.314 L1443.36 690.314 L1443.92 690.314 L1444.48 690.314 L1445.04 690.314 L1445.6 690.314 L1446.15 690.314 L1446.71 690.314 L1447.27 690.314 L1447.83 690.314 L1448.39 690.314 L1448.95 690.314 L1449.51 690.314 L1450.07 690.314 L1450.63 690.314 L1451.19 690.314 L1451.75 690.314 L1452.31 690.314 L1452.87 690.314 L1453.42 690.314 L1453.98 690.314 L1454.54 690.314 L1455.1 690.314 L1455.66 690.314 L1456.22 690.314 L1456.78 690.314 L1457.34 690.314 L1457.9 690.314 L1458.46 690.314 L1459.02 690.314 L1459.58 690.314 L1460.14 690.314 L1460.7 690.314 L1461.25 690.314 L1461.81 690.314 L1462.37 690.314 L1462.93 690.314 L1463.49 690.314 L1464.05 690.314 L1464.61 690.314 L1465.17 690.314 L1465.73 690.314 L1466.29 690.314 L1466.85 690.314 L1467.41 690.314 L1467.97 690.314 L1468.52 690.314 L1469.08 690.314 L1469.64 690.314 L1470.2 690.314 L1470.76 690.314 L1471.32 690.314 L1471.88 690.314 L1472.44 690.314 L1473 690.314 L1473.56 690.314 L1474.12 690.314 L1474.68 690.314 L1475.24 690.314 L1475.79 690.314 L1476.35 690.314 L1476.91 690.314 L1477.47 690.314 L1478.03 690.314 L1478.59 690.314 L1479.15 690.314 L1479.71 690.314 L1480.27 690.314 L1480.83 690.314 L1481.39 690.314 L1481.95 690.314 L1482.51 690.314 L1483.07 690.314 L1483.62 690.314 L1484.18 690.314 L1484.74 690.314 L1485.3 690.314 L1485.86 690.314 L1486.42 690.314 L1486.98 690.314 L1487.54 690.314 L1488.1 690.314 L1488.66 690.314 L1489.22 690.314 L1489.78 690.314 L1490.34 690.314 L1490.89 690.314 L1491.45 690.314 L1492.01 690.314 L1492.57 690.314 L1493.13 690.314 L1493.69 690.314 L1494.25 690.314 L1494.81 690.314 L1495.37 690.314 L1495.93 690.314 L1496.49 690.314 L1497.05 690.314 L1497.61 690.314 L1498.16 690.314 L1498.72 690.314 L1499.28 690.314 L1499.84 690.314 L1500.4 690.314 L1500.96 690.314 L1501.52 690.314 L1502.08 690.314 L1502.64 690.314 L1503.2 690.314 L1503.76 690.314 L1504.32 690.314 L1504.88 690.314 L1505.44 690.314 L1505.99 690.314 L1506.55 690.314 L1507.11 690.314 L1507.67 690.314 L1508.23 690.314 L1508.79 690.314 L1509.35 690.314 L1509.91 690.314 L1510.47 690.314 L1511.03 690.314 L1511.59 690.314 L1512.15 690.314 L1512.71 690.314 L1513.26 690.314 L1513.82 690.314 L1514.38 690.314 L1514.94 690.314 L1515.5 690.314 L1516.06 690.314 L1516.62 690.314 L1517.18 690.314 L1517.74 690.314 L1518.3 690.314 L1518.86 690.314 L1519.42 690.314 L1519.98 690.314 L1520.53 690.314 L1521.09 690.314 L1521.65 690.314 L1522.21 690.314 L1522.77 690.314 L1523.33 690.314 L1523.89 690.314 L1524.45 690.314 L1525.01 690.314 L1525.57 690.314 L1526.13 690.314 L1526.69 690.314 L1527.25 690.314 L1527.81 690.314 L1528.36 690.314 L1528.92 690.314 L1529.48 690.314 L1530.04 690.314 L1530.6 690.314 L1531.16 690.314 L1531.72 690.314 L1532.28 690.314 L1532.84 690.314 L1533.4 690.314 L1533.96 690.314 L1534.52 690.314 L1535.08 690.314 L1535.63 690.314 L1536.19 690.314 L1536.75 690.314 L1537.31 690.314 L1537.87 690.314 L1538.43 690.314 L1538.99 690.314 L1539.55 690.314 L1540.11 690.314 L1540.67 690.314 L1541.23 690.314 L1541.79 690.314 L1542.35 690.314 L1542.9 690.314 L1543.46 690.314 L1544.02 690.314 L1544.58 690.314 L1545.14 690.314 L1545.7 690.314 L1546.26 690.314 L1546.82 690.314 L1547.38 690.314 L1547.94 690.314 L1548.5 690.314 L1549.06 690.314 L1549.62 690.314 L1550.18 690.314 L1550.73 690.314 L1551.29 690.314 L1551.85 690.314 L1552.41 690.314 L1552.97 690.314 L1553.53 690.314 L1554.09 690.314 L1554.65 690.314 L1555.21 690.314 L1555.77 690.314 L1556.33 690.314 L1556.89 690.314 L1557.45 690.314 L1558 690.314 L1558.56 690.314 L1559.12 690.314 L1559.68 690.314 L1560.24 690.314 L1560.8 690.314 L1561.36 690.314 L1561.92 690.314 L1562.48 690.314 L1563.04 690.314 L1563.6 690.314 L1564.16 690.314 L1564.72 690.314 L1565.28 690.314 L1565.83 690.314 L1566.39 690.314 L1566.95 690.314 L1567.51 690.314 L1568.07 690.314 L1568.63 690.314 L1569.19 690.314 L1569.75 690.314 L1570.31 690.314 L1570.87 690.314 L1571.43 690.314 L1571.99 690.314 L1572.55 690.314 L1573.1 690.314 L1573.66 690.314 L1574.22 690.314 L1574.78 690.314 L1575.34 690.314 L1575.9 690.314 L1576.46 690.314 L1577.02 690.314 L1577.58 690.314 L1578.14 690.314 L1578.7 690.314 L1579.26 690.314 L1579.82 690.314 L1580.37 690.314 L1580.93 690.314 L1581.49 690.314 L1582.05 690.314 L1582.61 690.314 L1583.17 690.314 L1583.73 690.314 L1584.29 690.314 L1584.85 690.314 L1585.41 690.314 L1585.97 690.314 L1586.53 690.314 L1587.09 690.314 L1587.65 690.314 L1588.2 690.314 L1588.76 690.314 L1589.32 690.314 L1589.88 690.314 L1590.44 690.314 L1591 690.314 L1591.56 690.314 L1592.12 690.314 L1592.68 690.314 L1593.24 690.314 L1593.8 690.314 L1594.36 690.314 L1594.92 690.314 L1595.47 690.314 L1596.03 690.314 L1596.59 690.314 L1597.15 690.314 L1597.71 690.314 L1598.27 690.314 L1598.83 690.314 L1599.39 690.314 L1599.95 690.314 L1600.51 690.314 L1601.07 690.314 L1601.63 690.314 L1602.19 690.314 L1602.74 690.314 L1603.3 690.314 L1603.86 690.314 L1604.42 690.314 L1604.98 690.314 L1605.54 690.314 L1606.1 690.314 L1606.66 690.314 L1607.22 690.314 L1607.78 690.314 L1608.34 690.314 L1608.9 690.314 L1609.46 690.314 L1610.02 690.314 L1610.57 690.314 L1611.13 690.314 L1611.69 690.314 L1612.25 690.314 L1612.81 690.314 L1613.37 690.314 L1613.93 690.314 L1614.49 690.314 L1615.05 690.314 L1615.61 690.314 L1616.17 690.314 L1616.73 690.314 L1617.29 690.314 L1617.84 690.314 L1618.4 690.314 L1618.96 690.314 L1619.52 690.314 L1620.08 690.314 L1620.64 690.314 L1621.2 690.314 L1621.76 690.314 L1622.32 690.314 L1622.88 690.314 L1623.44 690.314 L1624 690.314 L1624.56 690.314 L1625.11 690.314 L1625.67 690.314 L1626.23 690.314 L1626.79 690.314 L1627.35 690.314 L1627.91 690.314 L1628.47 690.314 L1629.03 690.314 L1629.59 690.314 L1630.15 690.314 L1630.71 690.314 L1631.27 690.314 L1631.83 690.314 L1632.39 690.314 L1632.94 690.314 L1633.5 690.314 L1634.06 690.314 L1634.62 690.314 L1635.18 690.314 L1635.74 690.314 L1636.3 690.314 L1636.86 690.314 L1637.42 690.314 L1637.98 690.314 L1638.54 690.314 L1639.1 690.314 L1639.66 690.314 L1640.21 690.314 L1640.77 690.314 L1641.33 690.314 L1641.89 690.314 L1642.45 690.314 L1643.01 690.314 L1643.57 690.314 L1644.13 690.314 L1644.69 690.314 L1645.25 690.314 L1645.81 690.314 L1646.37 690.314 L1646.93 690.314 L1647.48 690.314 L1648.04 690.314 L1648.6 690.314 L1649.16 690.314 L1649.72 690.314 L1650.28 690.314 L1650.84 690.314 L1651.4 690.314 L1651.96 690.314 L1652.52 690.314 L1653.08 690.314 L1653.64 690.314 L1654.2 690.314 L1654.76 690.314 L1655.31 690.314 L1655.87 690.314 L1656.43 690.314 L1656.99 690.314 L1657.55 690.314 L1658.11 690.314 L1658.67 690.314 L1659.23 690.314 L1659.79 690.314 L1660.35 690.314 L1660.91 690.314 L1661.47 690.314 L1662.03 690.314 L1662.58 690.314 L1663.14 690.314 L1663.7 690.314 L1664.26 690.314 L1664.82 690.314 L1665.38 690.314 L1665.94 690.314 L1666.5 690.314 L1667.06 690.314 L1667.62 690.314 L1668.18 690.314 L1668.74 690.314 L1669.3 690.314 L1669.85 690.314 L1670.41 690.314 L1670.97 690.314 L1671.53 690.314 L1672.09 690.314 L1672.65 690.314 L1673.21 690.314 L1673.77 690.314 L1674.33 690.314 L1674.89 690.314 L1675.45 690.314 L1676.01 690.314 L1676.57 690.314 L1677.13 690.314 L1677.68 690.314 L1678.24 690.314 L1678.8 690.314 L1679.36 690.314 L1679.92 690.314 L1680.48 690.314 L1681.04 690.314 L1681.6 690.314 L1682.16 690.314 L1682.72 690.314 L1683.28 690.314 L1683.84 690.314 L1684.4 690.314 L1684.95 690.314 L1685.51 690.314 L1686.07 690.314 L1686.63 690.314 L1687.19 690.314 L1687.75 690.314 L1688.31 690.314 L1688.87 690.314 L1689.43 690.314 L1689.99 690.314 L1690.55 690.314 L1691.11 690.314 L1691.67 690.314 L1692.23 690.314 L1692.78 690.314 L1693.34 690.314 L1693.9 690.314 L1694.46 690.314 L1695.02 690.314 L1695.58 690.314 L1696.14 690.314 L1696.7 690.314 L1697.26 690.314 L1697.82 690.314 L1698.38 690.314 L1698.94 690.314 L1699.5 690.314 L1700.05 690.314 L1700.61 690.314 L1701.17 690.314 L1701.73 690.314 L1702.29 690.314 L1702.85 690.314 L1703.41 690.314 L1703.97 690.314 L1704.53 690.314 L1705.09 690.314 L1705.65 690.314 L1706.21 690.314 L1706.77 690.314 L1707.32 690.314 L1707.88 690.314 L1708.44 690.314 L1709 690.314 L1709.56 690.314 L1710.12 690.314 L1710.68 690.314 L1711.24 690.314 L1711.8 690.314 L1712.36 690.314 L1712.92 690.314 L1713.48 690.314 L1714.04 690.314 L1714.6 690.314 L1715.15 690.314 L1715.71 690.314 L1716.27 690.314 L1716.83 690.314 L1717.39 690.314 L1717.95 690.314 L1718.51 690.314 L1719.07 690.314 L1719.63 690.314 L1720.19 690.314 L1720.75 690.314 L1721.31 690.314 L1721.87 690.314 L1722.42 690.314 L1722.98 690.314 L1723.54 690.314 L1724.1 690.314 L1724.66 690.314 L1725.22 690.314 L1725.78 690.314 L1726.34 690.314 L1726.9 690.314 L1727.46 690.314 L1728.02 690.314 L1728.58 690.314 L1729.14 690.314 L1729.69 690.314 L1730.25 690.314 L1730.81 690.314 L1731.37 690.314 L1731.93 690.314 L1732.49 690.314 L1733.05 690.314 L1733.61 690.314 L1734.17 690.314 L1734.73 690.314 L1735.29 690.314 L1735.85 690.314 L1736.41 690.314 L1736.97 690.314 L1737.52 690.314 L1738.08 690.314 L1738.64 690.314 L1739.2 690.314 L1739.76 690.314 L1740.32 690.314 L1740.88 690.314 L1741.44 690.314 L1742 690.314 L1742.56 690.314 L1743.12 690.314 L1743.68 690.314 L1744.24 690.314 L1744.79 690.314 L1745.35 690.314 L1745.91 690.314 L1746.47 690.314 L1747.03 690.314 L1747.59 690.314 L1748.15 690.314 L1748.71 690.314 L1749.27 690.314 L1749.83 690.314 L1750.39 690.314 L1750.95 690.314 L1751.51 690.314 L1752.06 690.314 L1752.62 690.314 L1753.18 690.314 L1753.74 690.314 L1754.3 690.314 L1754.86 690.314 L1755.42 690.314 L1755.98 690.314 L1756.54 690.314 L1757.1 690.314 L1757.66 690.314 L1758.22 690.314 L1758.78 690.314 L1759.34 690.314 L1759.89 690.314 L1760.45 690.314 L1761.01 690.314 L1761.57 690.314 L1762.13 690.314 L1762.69 690.314 L1763.25 690.314 L1763.81 690.314 L1764.37 690.314 L1764.93 690.314 L1765.49 690.314 L1766.05 690.314 L1766.61 690.314 L1767.16 690.314 L1767.72 690.314 L1768.28 690.314 L1768.84 690.314 L1769.4 690.314 L1769.96 690.314 L1770.52 690.314 L1771.08 690.314 L1771.64 690.314 L1772.2 690.314 L1772.76 690.314 L1773.32 690.314 L1773.88 690.314 L1774.43 690.314 L1774.99 690.314 L1775.55 690.314 L1776.11 690.314 L1776.67 690.314 L1777.23 690.314 L1777.79 690.314 L1778.35 690.314 L1778.91 690.314 L1779.47 690.314 L1780.03 690.314 L1780.59 690.314 L1781.15 690.314 L1781.71 690.314 L1782.26 690.314 L1782.82 690.314 L1783.38 690.314 L1783.94 690.314 L1784.5 690.314 L1785.06 690.314 L1785.62 690.314 L1786.18 690.314 L1786.74 690.314 L1787.3 690.314 L1787.86 690.314 L1788.42 690.314 L1788.98 690.314 L1789.53 690.314 L1790.09 690.314 L1790.65 690.314 L1791.21 690.314 L1791.77 690.314 L1792.33 690.314 L1792.89 690.314 L1793.45 690.314 L1794.01 690.314 L1794.57 690.314 L1795.13 690.314 L1795.69 690.314 L1796.25 690.314 L1796.8 690.314 L1797.36 690.314 L1797.92 690.314 L1798.48 690.314 L1799.04 690.314 L1799.6 690.314 L1800.16 690.314 L1800.72 690.314 L1801.28 690.314 L1801.84 690.314 L1802.4 690.314 L1802.96 690.314 L1803.52 690.314 L1804.08 690.314 L1804.63 690.314 L1805.19 690.314 L1805.75 690.314 L1806.31 690.314 L1806.87 690.314 L1807.43 690.314 L1807.99 690.314 L1808.55 690.314 L1809.11 690.314 L1809.67 690.314 L1810.23 690.314 L1810.79 690.314 L1811.35 690.314 L1811.9 690.314 L1812.46 690.314 L1813.02 690.314 L1813.58 690.314 L1814.14 690.314 L1814.7 690.314 L1815.26 690.314 L1815.82 690.314 L1816.38 690.314 L1816.94 690.314 L1817.5 690.314 L1818.06 690.314 L1818.62 690.314 L1819.18 690.314 L1819.73 690.314 L1820.29 690.314 L1820.85 690.314 L1821.41 690.314 L1821.97 690.314 L1822.53 690.314 L1823.09 690.314 L1823.65 690.314 L1824.21 690.314 L1824.77 690.314 L1825.33 690.314 L1825.89 690.314 L1826.45 690.314 L1827 690.314 L1827.56 690.314 L1828.12 690.314 L1828.68 690.314 L1829.24 690.314 L1829.8 690.314 L1830.36 690.314 L1830.92 690.314 L1831.48 690.314 L1832.04 690.314 L1832.6 690.314 L1833.16 690.314 L1833.72 690.314 L1834.27 690.314 L1834.83 690.314 L1835.39 690.314 L1835.95 690.314 L1836.51 690.314 L1837.07 690.314 L1837.63 690.314 L1838.19 690.314 L1838.19 681.693 L1837.63 681.693 L1837.07 681.693 L1836.51 681.693 L1835.95 681.693 L1835.39 681.693 L1834.83 681.693 L1834.27 681.693 L1833.72 681.693 L1833.16 681.693 L1832.6 681.693 L1832.04 681.693 L1831.48 681.693 L1830.92 681.693 L1830.36 681.693 L1829.8 681.693 L1829.24 681.693 L1828.68 681.693 L1828.12 681.693 L1827.56 681.693 L1827 681.693 L1826.45 681.693 L1825.89 681.693 L1825.33 681.693 L1824.77 681.693 L1824.21 681.693 L1823.65 681.693 L1823.09 681.693 L1822.53 681.693 L1821.97 681.693 L1821.41 681.693 L1820.85 681.693 L1820.29 681.693 L1819.73 681.693 L1819.18 681.693 L1818.62 681.693 L1818.06 681.693 L1817.5 681.693 L1816.94 681.693 L1816.38 681.693 L1815.82 681.693 L1815.26 681.693 L1814.7 681.693 L1814.14 681.693 L1813.58 681.693 L1813.02 681.693 L1812.46 681.693 L1811.9 681.693 L1811.35 681.693 L1810.79 681.693 L1810.23 681.693 L1809.67 681.693 L1809.11 681.693 L1808.55 681.693 L1807.99 681.693 L1807.43 681.693 L1806.87 681.693 L1806.31 681.693 L1805.75 681.693 L1805.19 681.693 L1804.63 681.693 L1804.08 681.693 L1803.52 681.693 L1802.96 681.693 L1802.4 681.693 L1801.84 681.693 L1801.28 681.693 L1800.72 681.693 L1800.16 681.693 L1799.6 681.693 L1799.04 681.693 L1798.48 681.693 L1797.92 681.693 L1797.36 681.693 L1796.8 681.693 L1796.25 681.693 L1795.69 681.693 L1795.13 681.693 L1794.57 681.693 L1794.01 681.693 L1793.45 681.693 L1792.89 681.693 L1792.33 681.693 L1791.77 681.693 L1791.21 681.693 L1790.65 681.693 L1790.09 681.693 L1789.53 681.693 L1788.98 681.693 L1788.42 681.693 L1787.86 681.693 L1787.3 681.693 L1786.74 681.693 L1786.18 681.693 L1785.62 681.693 L1785.06 681.693 L1784.5 681.693 L1783.94 681.693 L1783.38 681.693 L1782.82 681.693 L1782.26 681.693 L1781.71 681.693 L1781.15 681.693 L1780.59 681.693 L1780.03 681.693 L1779.47 681.693 L1778.91 681.693 L1778.35 681.693 L1777.79 681.693 L1777.23 681.693 L1776.67 681.693 L1776.11 681.693 L1775.55 681.693 L1774.99 681.693 L1774.43 681.693 L1773.88 681.693 L1773.32 681.693 L1772.76 681.693 L1772.2 681.693 L1771.64 681.693 L1771.08 681.693 L1770.52 681.693 L1769.96 681.693 L1769.4 681.693 L1768.84 681.693 L1768.28 681.693 L1767.72 681.693 L1767.16 681.693 L1766.61 681.693 L1766.05 681.693 L1765.49 681.693 L1764.93 681.693 L1764.37 681.693 L1763.81 681.693 L1763.25 681.693 L1762.69 681.693 L1762.13 681.693 L1761.57 681.693 L1761.01 681.693 L1760.45 681.693 L1759.89 681.693 L1759.34 681.693 L1758.78 681.693 L1758.22 681.693 L1757.66 681.693 L1757.1 681.693 L1756.54 681.693 L1755.98 681.693 L1755.42 681.693 L1754.86 681.693 L1754.3 681.693 L1753.74 681.693 L1753.18 681.693 L1752.62 681.693 L1752.06 681.693 L1751.51 681.693 L1750.95 681.693 L1750.39 681.693 L1749.83 681.693 L1749.27 681.693 L1748.71 681.693 L1748.15 681.693 L1747.59 681.693 L1747.03 681.693 L1746.47 681.693 L1745.91 681.693 L1745.35 681.693 L1744.79 681.693 L1744.24 681.693 L1743.68 681.693 L1743.12 681.693 L1742.56 681.693 L1742 681.693 L1741.44 681.693 L1740.88 681.693 L1740.32 681.693 L1739.76 681.693 L1739.2 681.693 L1738.64 681.693 L1738.08 681.693 L1737.52 681.693 L1736.97 681.693 L1736.41 681.693 L1735.85 681.693 L1735.29 681.693 L1734.73 681.693 L1734.17 681.693 L1733.61 681.693 L1733.05 681.693 L1732.49 681.693 L1731.93 681.693 L1731.37 681.693 L1730.81 681.693 L1730.25 681.693 L1729.69 681.693 L1729.14 681.693 L1728.58 681.693 L1728.02 681.693 L1727.46 681.693 L1726.9 681.693 L1726.34 681.693 L1725.78 681.693 L1725.22 681.693 L1724.66 681.693 L1724.1 681.693 L1723.54 681.693 L1722.98 681.693 L1722.42 681.693 L1721.87 681.693 L1721.31 681.693 L1720.75 681.693 L1720.19 681.693 L1719.63 681.693 L1719.07 681.693 L1718.51 681.693 L1717.95 681.693 L1717.39 681.693 L1716.83 681.693 L1716.27 681.693 L1715.71 681.693 L1715.15 681.693 L1714.6 681.693 L1714.04 681.693 L1713.48 681.693 L1712.92 681.693 L1712.36 681.693 L1711.8 681.693 L1711.24 681.693 L1710.68 681.693 L1710.12 681.693 L1709.56 681.693 L1709 681.693 L1708.44 681.693 L1707.88 681.693 L1707.32 681.693 L1706.77 681.693 L1706.21 681.693 L1705.65 681.693 L1705.09 681.693 L1704.53 681.693 L1703.97 681.693 L1703.41 681.693 L1702.85 681.693 L1702.29 681.693 L1701.73 681.693 L1701.17 681.693 L1700.61 681.693 L1700.05 681.693 L1699.5 681.693 L1698.94 681.693 L1698.38 681.693 L1697.82 681.693 L1697.26 681.693 L1696.7 681.693 L1696.14 681.693 L1695.58 681.693 L1695.02 681.693 L1694.46 681.693 L1693.9 681.693 L1693.34 681.693 L1692.78 681.693 L1692.23 681.693 L1691.67 681.693 L1691.11 681.693 L1690.55 681.693 L1689.99 681.693 L1689.43 681.693 L1688.87 681.693 L1688.31 681.693 L1687.75 681.693 L1687.19 681.693 L1686.63 681.693 L1686.07 681.693 L1685.51 681.693 L1684.95 681.693 L1684.4 681.693 L1683.84 681.693 L1683.28 681.693 L1682.72 681.693 L1682.16 681.693 L1681.6 681.693 L1681.04 681.693 L1680.48 681.693 L1679.92 681.693 L1679.36 681.693 L1678.8 681.693 L1678.24 681.693 L1677.68 681.693 L1677.13 681.693 L1676.57 681.693 L1676.01 681.693 L1675.45 681.693 L1674.89 681.693 L1674.33 681.693 L1673.77 681.693 L1673.21 681.693 L1672.65 681.693 L1672.09 681.693 L1671.53 681.693 L1670.97 681.693 L1670.41 681.693 L1669.85 681.693 L1669.3 681.693 L1668.74 681.693 L1668.18 681.693 L1667.62 681.693 L1667.06 681.693 L1666.5 681.693 L1665.94 681.693 L1665.38 681.693 L1664.82 681.693 L1664.26 681.693 L1663.7 681.693 L1663.14 681.693 L1662.58 681.693 L1662.03 681.693 L1661.47 681.693 L1660.91 681.693 L1660.35 681.693 L1659.79 681.693 L1659.23 681.693 L1658.67 681.693 L1658.11 681.693 L1657.55 681.693 L1656.99 681.693 L1656.43 681.693 L1655.87 681.693 L1655.31 681.693 L1654.76 681.693 L1654.2 681.693 L1653.64 681.693 L1653.08 681.693 L1652.52 681.693 L1651.96 681.693 L1651.4 681.693 L1650.84 681.693 L1650.28 681.693 L1649.72 681.693 L1649.16 681.693 L1648.6 681.693 L1648.04 681.693 L1647.48 681.693 L1646.93 681.693 L1646.37 681.693 L1645.81 681.693 L1645.25 681.693 L1644.69 681.693 L1644.13 681.693 L1643.57 681.693 L1643.01 681.693 L1642.45 681.693 L1641.89 681.693 L1641.33 681.693 L1640.77 681.693 L1640.21 681.693 L1639.66 681.693 L1639.1 681.693 L1638.54 681.693 L1637.98 681.693 L1637.42 681.693 L1636.86 681.693 L1636.3 681.693 L1635.74 681.693 L1635.18 681.693 L1634.62 681.693 L1634.06 681.693 L1633.5 681.693 L1632.94 681.693 L1632.39 681.693 L1631.83 681.693 L1631.27 681.693 L1630.71 681.693 L1630.15 681.693 L1629.59 681.693 L1629.03 681.693 L1628.47 681.693 L1627.91 681.693 L1627.35 681.693 L1626.79 681.693 L1626.23 681.693 L1625.67 681.693 L1625.11 681.693 L1624.56 681.693 L1624 681.693 L1623.44 681.693 L1622.88 681.693 L1622.32 681.693 L1621.76 681.693 L1621.2 681.693 L1620.64 681.693 L1620.08 681.693 L1619.52 681.693 L1618.96 681.693 L1618.4 681.693 L1617.84 681.693 L1617.29 681.693 L1616.73 681.693 L1616.17 681.693 L1615.61 681.693 L1615.05 681.693 L1614.49 681.693 L1613.93 681.693 L1613.37 681.693 L1612.81 681.693 L1612.25 681.693 L1611.69 681.693 L1611.13 681.693 L1610.57 681.693 L1610.02 681.693 L1609.46 681.693 L1608.9 681.693 L1608.34 681.693 L1607.78 681.693 L1607.22 681.693 L1606.66 681.693 L1606.1 681.693 L1605.54 681.693 L1604.98 681.693 L1604.42 681.693 L1603.86 681.693 L1603.3 681.693 L1602.74 681.693 L1602.19 681.693 L1601.63 681.693 L1601.07 681.693 L1600.51 681.693 L1599.95 681.693 L1599.39 681.693 L1598.83 681.693 L1598.27 681.693 L1597.71 681.693 L1597.15 681.693 L1596.59 681.693 L1596.03 681.693 L1595.47 681.693 L1594.92 681.693 L1594.36 681.693 L1593.8 681.693 L1593.24 681.693 L1592.68 681.693 L1592.12 681.693 L1591.56 681.693 L1591 681.693 L1590.44 681.693 L1589.88 681.693 L1589.32 681.693 L1588.76 681.693 L1588.2 681.693 L1587.65 681.693 L1587.09 681.693 L1586.53 681.693 L1585.97 681.693 L1585.41 681.693 L1584.85 681.693 L1584.29 681.693 L1583.73 681.693 L1583.17 681.693 L1582.61 681.693 L1582.05 681.693 L1581.49 681.693 L1580.93 681.693 L1580.37 681.693 L1579.82 681.693 L1579.26 681.693 L1578.7 681.693 L1578.14 681.693 L1577.58 681.693 L1577.02 681.693 L1576.46 681.693 L1575.9 681.693 L1575.34 681.693 L1574.78 681.693 L1574.22 681.693 L1573.66 681.693 L1573.1 681.693 L1572.55 681.693 L1571.99 681.693 L1571.43 681.693 L1570.87 681.693 L1570.31 681.693 L1569.75 681.693 L1569.19 681.693 L1568.63 681.693 L1568.07 681.693 L1567.51 681.693 L1566.95 681.693 L1566.39 681.693 L1565.83 681.693 L1565.28 681.693 L1564.72 681.693 L1564.16 681.693 L1563.6 681.693 L1563.04 681.693 L1562.48 681.693 L1561.92 681.693 L1561.36 681.693 L1560.8 681.693 L1560.24 681.693 L1559.68 681.693 L1559.12 681.693 L1558.56 681.693 L1558 681.693 L1557.45 681.693 L1556.89 681.693 L1556.33 681.693 L1555.77 681.693 L1555.21 681.693 L1554.65 681.693 L1554.09 681.693 L1553.53 681.693 L1552.97 681.693 L1552.41 681.693 L1551.85 681.693 L1551.29 681.693 L1550.73 681.693 L1550.18 681.693 L1549.62 681.693 L1549.06 681.693 L1548.5 681.693 L1547.94 681.693 L1547.38 681.693 L1546.82 681.693 L1546.26 681.693 L1545.7 681.693 L1545.14 681.693 L1544.58 681.693 L1544.02 681.693 L1543.46 681.693 L1542.9 681.693 L1542.35 681.693 L1541.79 681.693 L1541.23 681.693 L1540.67 681.693 L1540.11 681.693 L1539.55 681.693 L1538.99 681.693 L1538.43 681.693 L1537.87 681.693 L1537.31 681.693 L1536.75 681.693 L1536.19 681.693 L1535.63 681.693 L1535.08 681.693 L1534.52 681.693 L1533.96 681.693 L1533.4 681.693 L1532.84 681.693 L1532.28 681.693 L1531.72 681.693 L1531.16 681.693 L1530.6 681.693 L1530.04 681.693 L1529.48 681.693 L1528.92 681.693 L1528.36 681.693 L1527.81 681.693 L1527.25 681.693 L1526.69 681.693 L1526.13 681.693 L1525.57 681.693 L1525.01 681.693 L1524.45 681.693 L1523.89 681.693 L1523.33 681.693 L1522.77 681.693 L1522.21 681.693 L1521.65 681.693 L1521.09 681.693 L1520.53 681.693 L1519.98 681.693 L1519.42 681.693 L1518.86 681.693 L1518.3 681.693 L1517.74 681.693 L1517.18 681.693 L1516.62 681.693 L1516.06 681.693 L1515.5 681.693 L1514.94 681.693 L1514.38 681.693 L1513.82 681.693 L1513.26 681.693 L1512.71 681.693 L1512.15 681.693 L1511.59 681.693 L1511.03 681.693 L1510.47 681.693 L1509.91 681.693 L1509.35 681.693 L1508.79 681.693 L1508.23 681.693 L1507.67 681.693 L1507.11 681.693 L1506.55 681.693 L1505.99 681.693 L1505.44 681.693 L1504.88 681.693 L1504.32 681.693 L1503.76 681.693 L1503.2 681.693 L1502.64 681.693 L1502.08 681.693 L1501.52 681.693 L1500.96 681.693 L1500.4 681.693 L1499.84 681.693 L1499.28 681.693 L1498.72 681.693 L1498.16 681.693 L1497.61 681.693 L1497.05 681.693 L1496.49 681.693 L1495.93 681.693 L1495.37 681.693 L1494.81 681.693 L1494.25 681.693 L1493.69 681.693 L1493.13 681.693 L1492.57 681.693 L1492.01 681.693 L1491.45 681.693 L1490.89 681.693 L1490.34 681.693 L1489.78 681.693 L1489.22 681.693 L1488.66 681.693 L1488.1 681.693 L1487.54 681.693 L1486.98 681.693 L1486.42 681.693 L1485.86 681.693 L1485.3 681.693 L1484.74 681.693 L1484.18 681.693 L1483.62 681.693 L1483.07 681.693 L1482.51 681.693 L1481.95 681.693 L1481.39 681.693 L1480.83 681.693 L1480.27 681.693 L1479.71 681.693 L1479.15 681.693 L1478.59 681.693 L1478.03 681.693 L1477.47 681.693 L1476.91 681.693 L1476.35 681.693 L1475.79 681.693 L1475.24 681.693 L1474.68 681.693 L1474.12 681.693 L1473.56 681.693 L1473 681.693 L1472.44 681.693 L1471.88 681.693 L1471.32 681.693 L1470.76 681.693 L1470.2 681.693 L1469.64 681.693 L1469.08 681.693 L1468.52 681.693 L1467.97 681.693 L1467.41 681.693 L1466.85 681.693 L1466.29 681.693 L1465.73 681.693 L1465.17 681.693 L1464.61 681.693 L1464.05 681.693 L1463.49 681.693 L1462.93 681.693 L1462.37 681.693 L1461.81 681.693 L1461.25 681.693 L1460.7 681.693 L1460.14 681.693 L1459.58 681.693 L1459.02 681.693 L1458.46 681.693 L1457.9 681.693 L1457.34 681.693 L1456.78 681.693 L1456.22 681.693 L1455.66 681.693 L1455.1 681.693 L1454.54 681.693 L1453.98 681.693 L1453.42 681.693 L1452.87 681.693 L1452.31 681.693 L1451.75 681.693 L1451.19 681.693 L1450.63 681.693 L1450.07 681.693 L1449.51 681.693 L1448.95 681.693 L1448.39 681.693 L1447.83 681.693 L1447.27 681.693 L1446.71 681.693 L1446.15 681.693 L1445.6 681.693 L1445.04 681.693 L1444.48 681.693 L1443.92 681.693 L1443.36 681.693 L1442.8 681.693 L1442.24 681.693 L1441.68 681.693 L1441.12 681.693 L1440.56 681.693 L1440 681.693 L1439.44 681.693 L1438.88 681.693 L1438.33 681.693 L1437.77 681.693 L1437.21 681.693 L1436.65 681.693 L1436.09 681.693 L1435.53 681.693 L1434.97 681.693 L1434.41 681.693 L1433.85 681.693 L1433.29 681.693 L1432.73 681.693 L1432.17 681.693 L1431.61 681.693 L1431.05 681.693 L1430.5 681.693 L1429.94 681.693 L1429.38 681.693 L1428.82 681.693 L1428.26 681.693 L1427.7 681.693 L1427.14 681.693 L1426.58 681.693 L1426.02 681.693 L1425.46 681.693 L1424.9 681.693 L1424.34 681.693 L1423.78 681.693 L1423.23 681.693 L1422.67 681.693 L1422.11 681.693 L1421.55 681.693 L1420.99 681.693 L1420.43 681.693 L1419.87 681.693 L1419.31 681.693 L1418.75 681.693 L1418.19 681.693 L1417.63 681.693 L1417.07 681.693 L1416.51 681.693 L1415.95 681.693 L1415.4 681.693 L1414.84 681.693 L1414.28 681.693 L1413.72 681.693 L1413.16 681.693 L1412.6 681.693 L1412.04 681.693 L1411.48 681.693 L1410.92 681.693 L1410.36 681.693 L1409.8 681.693 L1409.24 681.693 L1408.68 681.693 L1408.13 681.693 L1407.57 681.693 L1407.01 681.693 L1406.45 681.693 L1405.89 681.693 L1405.33 681.693 L1404.77 681.693 L1404.21 681.693 L1403.65 681.693 L1403.09 681.693 L1402.53 681.693 L1401.97 681.693 L1401.41 681.693 L1400.86 681.693 L1400.3 681.693 L1399.74 681.693 L1399.18 681.693 L1398.62 681.693 L1398.06 681.693 L1397.5 681.693 L1396.94 681.693 L1396.38 681.693 L1395.82 681.693 L1395.26 681.693 L1394.7 681.693 L1394.14 681.693 L1393.58 681.693 L1393.03 681.693 L1392.47 681.693 L1391.91 681.693 L1391.35 681.693 L1390.79 681.693 L1390.23 681.693 L1389.67 681.693 L1389.11 681.693 L1388.55 681.693 L1387.99 681.693 L1387.43 681.693 L1386.87 681.693 L1386.31 681.693 L1385.76 681.693 L1385.2 681.693 L1384.64 681.693 L1384.08 681.693 L1383.52 681.693 L1382.96 681.693 L1382.4 681.693 L1381.84 681.693 L1381.28 681.693 L1380.72 681.693 L1380.16 681.693 L1379.6 681.693 L1379.04 681.693 L1378.49 681.693 L1377.93 681.693 L1377.37 681.693 L1376.81 681.693 L1376.25 681.693 L1375.69 681.693 L1375.13 681.693 L1374.57 681.693 L1374.01 681.693 L1373.45 681.693 L1372.89 681.693 L1372.33 681.693 L1371.77 681.693 L1371.21 681.693 L1370.66 681.693 L1370.1 681.693 L1369.54 681.693 L1368.98 681.693 L1368.42 681.693 L1367.86 681.693 L1367.3 681.693 L1366.74 681.693 L1366.18 681.693 L1365.62 681.693 L1365.06 681.693 L1364.5 681.693 L1363.94 681.693 L1363.39 681.693 L1362.83 681.693 L1362.27 681.693 L1361.71 681.693 L1361.15 681.693 L1360.59 681.693 L1360.03 681.693 L1359.47 681.693 L1358.91 681.693 L1358.35 681.693 L1357.79 681.693 L1357.23 681.693 L1356.67 681.693 L1356.12 681.693 L1355.56 681.693 L1355 681.693 L1354.44 681.693 L1353.88 681.693 L1353.32 681.693 L1352.76 681.693 L1352.2 681.693 L1351.64 681.693 L1351.08 681.693 L1350.52 681.693 L1349.96 681.693 L1349.4 681.693 L1348.84 681.693 L1348.29 681.693 L1347.73 681.693 L1347.17 681.693 L1346.61 681.693 L1346.05 681.693 L1345.49 681.693 L1344.93 681.693 L1344.37 681.693 L1343.81 681.693 L1343.25 681.693 L1342.69 681.693 L1342.13 681.693 L1341.57 681.693 L1341.02 681.693 L1340.46 681.693 L1339.9 681.693 L1339.34 681.693 L1338.78 681.693 L1338.22 681.693 L1337.66 681.693 L1337.1 681.693 L1336.54 681.693 L1335.98 681.693 L1335.42 681.693 L1334.86 681.693 L1334.3 681.693 L1333.75 681.693 L1333.19 681.693 L1332.63 681.693 L1332.07 681.693 L1331.51 681.693 L1330.95 681.693 L1330.39 681.693 L1329.83 681.693 L1329.27 681.693 L1328.71 681.693 L1328.15 681.693 L1327.59 681.693 L1327.03 681.693 L1326.47 681.693 L1325.92 681.693 L1325.36 681.693 L1324.8 681.693 L1324.24 681.693 L1323.68 681.693 L1323.12 681.693 L1322.56 681.693 L1322 681.693 L1321.44 681.693 L1320.88 681.693 L1320.32 681.693 L1319.76 681.693 L1319.2 681.693 L1318.65 681.693 L1318.09 681.693 L1317.53 681.693 L1316.97 681.693 L1316.41 681.693 L1315.85 681.693 L1315.29 681.693 L1314.73 681.693 L1314.17 681.693 L1313.61 681.693 L1313.05 681.693 L1312.49 681.693 L1311.93 681.693 L1311.38 681.693 L1310.82 681.693 L1310.26 681.693 L1309.7 681.693 L1309.14 681.693 L1308.58 681.693 L1308.02 681.693 L1307.46 681.693 L1306.9 681.693 L1306.34 681.693 L1305.78 681.693 L1305.22 681.693 L1304.66 681.693 L1304.1 681.693 L1303.55 681.693 L1302.99 681.693 L1302.43 681.693 L1301.87 681.693 L1301.31 681.693 L1300.75 681.693 L1300.19 681.693 L1299.63 681.693 L1299.07 681.693 L1298.51 681.693 L1297.95 681.693 L1297.39 681.693 L1296.83 681.693 L1296.28 681.693 L1295.72 681.693 L1295.16 681.693 L1294.6 681.693 L1294.04 681.693 L1293.48 681.693 L1292.92 681.693 L1292.36 681.693 L1291.8 681.693 L1291.24 681.693 L1290.68 681.693 L1290.12 681.693 L1289.56 681.693 L1289 681.693 L1288.45 681.693 L1287.89 681.693 L1287.33 681.693 L1286.77 681.693 L1286.21 681.693 L1285.65 681.693 L1285.09 681.693 L1284.53 681.693 L1283.97 681.693 L1283.41 681.693 L1282.85 681.693 L1282.29 681.693 L1281.73 681.693 L1281.18 681.693 L1280.62 681.693 L1280.06 681.693 L1279.5 681.693 L1278.94 681.693 L1278.38 681.693 L1277.82 681.693 L1277.26 681.693 L1276.7 681.693 L1276.14 681.693 L1275.58 681.693 L1275.02 681.693 L1274.46 681.693 L1273.91 681.693 L1273.35 681.693 L1272.79 681.693 L1272.23 681.693 L1271.67 681.693 L1271.11 681.693 L1270.55 681.693 L1269.99 681.693 L1269.43 681.693 L1268.87 681.693 L1268.31 681.693 L1267.75 681.693 L1267.19 681.693 L1266.63 681.693 L1266.08 681.693 L1265.52 681.693 L1264.96 681.693 L1264.4 681.693 L1263.84 681.693 L1263.28 681.693 L1262.72 681.693 L1262.16 681.693 L1261.6 681.693 L1261.04 681.693 L1260.48 681.693 L1259.92 681.693 L1259.36 681.693 L1258.81 681.693 L1258.25 681.693 L1257.69 681.693 L1257.13 681.693 L1256.57 681.693 L1256.01 681.693 L1255.45 681.693 L1254.89 681.693 L1254.33 681.693 L1253.77 681.693 L1253.21 681.693 L1252.65 681.693 L1252.09 681.693 L1251.54 681.693 L1250.98 681.693 L1250.42 681.693 L1249.86 681.693 L1249.3 681.693 L1248.74 681.693 L1248.18 681.693 L1247.62 681.693 L1247.06 681.693 L1246.5 681.693 L1245.94 681.693 L1245.38 681.693 L1244.82 681.693 L1244.26 681.693 L1243.71 681.693 L1243.15 681.693 L1242.59 681.693 L1242.03 681.693 L1241.47 681.693 L1240.91 681.693 L1240.35 681.693 L1239.79 681.693 L1239.23 681.693 L1238.67 681.693 L1238.11 681.693 L1237.55 681.693 L1236.99 681.693 L1236.44 681.693 L1235.88 681.693 L1235.32 681.693 L1234.76 681.693 L1234.2 681.693 L1233.64 681.693 L1233.08 681.693 L1232.52 681.693 L1231.96 681.693 L1231.4 681.693 L1230.84 681.693 L1230.28 681.693 L1229.72 681.693 L1229.17 681.693 L1228.61 681.693 L1228.05 681.693 L1227.49 681.693 L1226.93 681.693 L1226.37 681.693 L1225.81 681.693 L1225.25 681.693 L1224.69 681.693 L1224.13 681.693 L1223.57 681.693 L1223.01 681.693 L1222.45 681.693 L1221.89 681.693 L1221.34 681.693 L1220.78 681.693 L1220.22 681.693 L1219.66 681.693 L1219.1 681.693 L1218.54 681.693 L1217.98 681.693 L1217.42 681.693 L1216.86 681.693 L1216.3 681.693 L1215.74 681.693 L1215.18 681.693 L1214.62 681.693 L1214.07 681.693 L1213.51 681.693 L1212.95 681.693 L1212.39 681.693 L1211.83 681.693 L1211.27 681.693 L1210.71 681.693 L1210.15 681.693 L1209.59 681.693 L1209.03 681.693 L1208.47 681.693 L1207.91 681.693 L1207.35 681.693 L1206.8 681.693 L1206.24 681.693 L1205.68 681.693 L1205.12 681.693 L1204.56 681.693 L1204 681.693 L1203.44 681.693 L1202.88 681.693 L1202.32 681.693 L1201.76 681.693 L1201.2 681.693 L1200.64 681.693 L1200.08 681.693 L1199.52 681.693 L1198.97 681.693 L1198.41 681.693 L1197.85 681.693 L1197.29 681.693 L1196.73 681.693 L1196.17 681.693 L1195.61 681.693 L1195.05 681.693 L1194.49 681.693 L1193.93 681.693 L1193.37 681.693 L1192.81 681.693 L1192.25 681.693 L1191.7 681.693 L1191.14 681.693 L1190.58 681.693 L1190.02 681.693 L1189.46 681.693 L1188.9 681.693 L1188.34 681.693 L1187.78 681.693 L1187.22 681.693 L1186.66 681.693 L1186.1 681.693 L1185.54 681.693 L1184.98 681.693 L1184.43 681.693 L1183.87 681.693 L1183.31 681.693 L1182.75 681.693 L1182.19 681.693 L1181.63 681.693 L1181.07 681.693 L1180.51 681.693 L1179.95 681.693 L1179.39 681.693 L1178.83 681.693 L1178.27 681.693 L1177.71 681.693 L1177.15 681.693 L1176.6 681.693 L1176.04 681.693 L1175.48 681.693 L1174.92 681.693 L1174.36 681.693 L1173.8 681.693 L1173.24 681.693 L1172.68 681.693 L1172.12 681.693 L1171.56 681.693 L1171 681.693 L1170.44 681.693 L1169.88 681.693 L1169.33 681.693 L1168.77 681.693 L1168.21 681.693 L1167.65 681.693 L1167.09 681.693 L1166.53 681.693 L1165.97 681.693 L1165.41 681.693 L1164.85 681.693 L1164.29 681.693 L1163.73 681.693 L1163.17 681.693 L1162.61 681.693 L1162.05 681.693 L1161.5 681.693 L1160.94 681.693 L1160.38 681.693 L1159.82 681.693 L1159.26 681.693 L1158.7 681.693 L1158.14 681.693 L1157.58 681.693 L1157.02 681.693 L1156.46 681.693 L1155.9 681.693 L1155.34 681.693 L1154.78 681.693 L1154.23 681.693 L1153.67 681.693 L1153.11 681.693 L1152.55 681.693 L1151.99 681.693 L1151.43 681.693 L1150.87 681.693 L1150.31 681.693 L1149.75 681.693 L1149.19 681.693 L1148.63 681.693 L1148.07 681.693 L1147.51 681.693 L1146.96 681.693 L1146.4 681.693 L1145.84 681.693 L1145.28 681.693 L1144.72 681.693 L1144.16 681.693 L1143.6 681.693 L1143.04 681.693 L1142.48 681.693 L1141.92 681.693 L1141.36 681.693 L1140.8 681.693 L1140.24 681.693 L1139.68 681.693 L1139.13 681.693 L1138.57 681.693 L1138.01 681.693 L1137.45 681.693 L1136.89 681.693 L1136.33 681.693 L1135.77 681.693 L1135.21 681.693 L1134.65 681.693 L1134.09 681.693 L1133.53 681.693 L1132.97 681.693 L1132.41 681.693 L1131.86 681.693 L1131.3 681.693 L1130.74 681.693 L1130.18 681.693 L1129.62 681.693 L1129.06 681.693 L1128.5 681.693 L1127.94 681.693 L1127.38 681.693 L1126.82 681.693 L1126.26 681.693 L1125.7 681.693 L1125.14 681.693 L1124.59 681.693 L1124.03 681.693 L1123.47 681.693 L1122.91 681.693 L1122.35 681.693 L1121.79 681.693 L1121.23 681.693 L1120.67 681.693 L1120.11 681.693 L1119.55 681.693 L1118.99 681.693 L1118.43 681.693 L1117.87 681.693 L1117.31 681.693 L1116.76 681.693 L1116.2 681.693 L1115.64 681.693 L1115.08 681.693 L1114.52 681.693 L1113.96 681.693 L1113.4 681.693 L1112.84 681.693 L1112.28 681.693 L1111.72 681.693 L1111.16 681.693 L1110.6 681.693 L1110.04 681.693 L1109.49 681.693 L1108.93 681.693 L1108.37 681.693 L1107.81 681.693 L1107.25 681.693 L1106.69 681.693 L1106.13 681.693 L1105.57 681.693 L1105.01 681.693 L1104.45 681.693 L1103.89 681.693 L1103.33 681.693 L1102.77 681.693 L1102.22 681.693 L1101.66 681.693 L1101.1 681.693 L1100.54 681.693 L1099.98 681.693 L1099.42 681.693 L1098.86 681.693 L1098.3 681.693 L1097.74 681.693 L1097.18 681.693 L1096.62 681.693 L1096.06 681.693 L1095.5 681.693 L1094.94 681.693 L1094.39 681.693 L1093.83 681.693 L1093.27 681.693 L1092.71 681.693 L1092.15 681.693 L1091.59 681.693 L1091.03 681.693 L1090.47 681.693 L1089.91 681.693 L1089.35 681.693 L1088.79 681.693 L1088.23 681.693 L1087.67 681.693 L1087.12 681.693 L1086.56 681.693 L1086 681.693 L1085.44 681.693 L1084.88 681.693 L1084.32 681.693 L1083.76 681.693 L1083.2 681.693 L1082.64 681.693 L1082.08 681.693 L1081.52 681.693 L1080.96 681.693 L1080.4 681.693 L1079.85 681.693 L1079.29 681.693 L1078.73 681.693 L1078.17 681.693 L1077.61 681.693 L1077.05 681.693 L1076.49 681.693 L1075.93 681.693 L1075.37 681.693 L1074.81 681.693 L1074.25 681.693 L1073.69 681.693 L1073.13 681.693 L1072.57 681.693 L1072.02 681.693 L1071.46 681.693 L1070.9 681.693 L1070.34 681.693 L1069.78 681.693 L1069.22 681.693 L1068.66 681.693 L1068.1 681.693 L1067.54 681.693 L1066.98 681.693 L1066.42 681.693 L1065.86 681.693 L1065.3 681.693 L1064.75 681.693 L1064.19 681.693 L1063.63 681.693 L1063.07 681.693 L1062.51 681.693 L1061.95 681.693 L1061.39 681.693 L1060.83 681.693 L1060.27 681.693 L1059.71 681.693 L1059.15 681.693 L1058.59 681.693 L1058.03 681.693 L1057.48 681.693 L1056.92 681.693 L1056.36 681.693 L1055.8 681.693 L1055.24 681.693 L1054.68 681.693 L1054.12 681.693 L1053.56 681.693 L1053 681.693 L1052.44 681.693 L1051.88 681.693 L1051.32 681.693 L1050.76 681.693 L1050.2 681.693 L1049.65 681.693 L1049.09 681.693 L1048.53 681.693 L1047.97 681.693 L1047.41 681.693 L1046.85 681.693 L1046.29 681.693 L1045.73 681.693 L1045.17 681.693 L1044.61 681.693 L1044.05 681.693 L1043.49 681.693 L1042.93 681.693 L1042.38 681.693 L1041.82 681.693 L1041.26 681.693 L1040.7 681.693 L1040.14 681.693 L1039.58 681.693 L1039.02 681.693 L1038.46 681.693 L1037.9 681.693 L1037.34 681.693 L1036.78 681.693 L1036.22 681.693 L1035.66 681.693 L1035.1 681.693 L1034.55 681.693 L1033.99 681.693 L1033.43 681.693 L1032.87 681.693 L1032.31 681.693 L1031.75 681.693 L1031.19 681.693 L1030.63 681.693 L1030.07 681.693 L1029.51 681.693 L1028.95 681.693 L1028.39 681.693 L1027.83 681.693 L1027.28 681.693 L1026.72 681.693 L1026.16 681.693 L1025.6 681.693 L1025.04 681.693 L1024.48 681.693 L1023.92 681.693 L1023.36 681.693 L1022.8 681.693 L1022.24 681.693 L1021.68 681.693 L1021.12 681.693 L1020.56 681.693 L1020.01 681.693 L1019.45 681.693 L1018.89 681.693 L1018.33 681.693 L1017.77 681.693 L1017.21 681.693 L1016.65 681.693 L1016.09 681.693 L1015.53 681.693 L1014.97 681.693 L1014.41 681.693 L1013.85 681.693 L1013.29 681.693 L1012.73 681.693 L1012.18 681.693 L1011.62 681.693 L1011.06 681.693 L1010.5 681.693 L1009.94 681.693 L1009.38 681.693 L1008.82 681.693 L1008.26 681.693 L1007.7 681.693 L1007.14 681.693 L1006.58 681.693 L1006.02 681.693 L1005.46 681.693 L1004.91 681.693 L1004.35 681.693 L1003.79 681.693 L1003.23 681.693 L1002.67 681.693 L1002.11 681.693 L1001.55 681.693 L1000.99 681.693 L1000.43 681.693 L999.872 681.693 L999.313 681.693 L998.754 681.693 L998.194 681.693 L997.635 681.693 L997.076 681.693 L996.517 681.693 L995.957 681.693 L995.398 681.693 L994.839 681.693 L994.28 681.693 L993.72 681.693 L993.161 681.693 L992.602 681.693 L992.043 681.693 L991.483 681.693 L990.924 681.693 L990.365 681.693 L989.806 681.693 L989.246 681.693 L988.687 681.693 L988.128 681.693 L987.569 681.693 L987.009 681.693 L986.45 681.693 L985.891 681.693 L985.332 681.693 L984.772 681.693 L984.213 681.693 L983.654 681.693 L983.095 681.693 L982.535 681.693 L981.976 681.693 L981.417 681.693 L980.858 681.693 L980.298 681.693 L979.739 681.693 L979.18 681.693 L978.621 681.693 L978.061 681.693 L977.502 681.693 L976.943 681.693 L976.384 681.693 L975.824 681.693 L975.265 681.693 L974.706 681.693 L974.147 681.693 L973.587 681.693 L973.028 681.693 L972.469 681.693 L971.91 681.693 L971.35 681.693 L970.791 681.693 L970.232 681.693 L969.673 681.693 L969.113 681.693 L968.554 681.693 L967.995 681.693 L967.436 681.693 L966.876 681.693 L966.317 681.693 L965.758 681.693 L965.199 681.693 L964.639 681.693 L964.08 681.693 L963.521 681.693 L962.962 681.693 L962.402 681.693 L961.843 681.693 L961.284 681.693 L960.725 681.693 L960.165 681.693 L959.606 681.693 L959.047 681.693 L958.488 681.693 L957.928 681.693 L957.369 681.693 L956.81 681.693 L956.251 681.693 L955.691 681.693 L955.132 681.693 L954.573 681.693 L954.014 681.693 L953.454 681.693 L952.895 681.693 L952.336 681.693 L951.777 681.693 L951.217 681.693 L950.658 681.693 L950.099 681.693 L949.54 681.693 L948.98 681.693 L948.421 681.693 L947.862 681.693 L947.303 681.693 L946.743 681.693 L946.184 681.693 L945.625 681.693 L945.066 681.693 L944.506 681.693 L943.947 681.693 L943.388 681.693 L942.829 681.693 L942.269 681.693 L941.71 681.693 L941.151 681.693 L940.592 681.693 L940.032 681.693 L939.473 681.693 L938.914 681.693 L938.355 681.693 L937.795 681.693 L937.236 681.693 L936.677 681.693 L936.118 681.693 L935.558 681.693 L934.999 681.693 L934.44 681.693 L933.881 681.693 L933.321 681.693 L932.762 681.693 L932.203 681.693 L931.644 681.693 L931.084 681.693 L930.525 681.693 L929.966 681.693 L929.406 681.693 L928.847 681.693 L928.288 681.693 L927.729 681.693 L927.169 681.693 L926.61 681.693 L926.051 681.693 L925.492 681.693 L924.932 681.693 L924.373 681.693 L923.814 681.693 L923.255 681.693 L922.695 681.693 L922.136 681.693 L921.577 681.693 L921.018 681.693 L920.458 681.693 L919.899 681.693 L919.34 681.693 L918.781 681.693 L918.221 681.693 L917.662 681.693 L917.103 681.693 L916.544 681.693 L915.984 681.693 L915.425 681.693 L914.866 681.693 L914.307 681.693 L913.747 681.693 L913.188 681.693 L912.629 681.693 L912.07 681.693 L911.51 681.693 L910.951 681.693 L910.392 681.693 L909.833 681.693 L909.273 681.693 L908.714 681.693 L908.155 681.693 L907.596 681.693 L907.036 681.693 L906.477 681.693 L905.918 681.693 L905.359 681.693 L904.799 681.693 L904.24 681.693 L903.681 681.693 L903.122 681.693 L902.562 681.693 L902.003 681.693 L901.444 681.693 L900.885 681.693 L900.325 681.693 L899.766 681.693 L899.207 681.693 L898.648 681.693 L898.088 681.693 L897.529 681.693 L896.97 681.693 L896.411 681.693 L895.851 681.693 L895.292 681.693 L894.733 681.693 L894.174 681.693 L893.614 681.693 L893.055 681.693 L892.496 681.693 L891.937 681.693 L891.377 681.693 L890.818 681.693 L890.259 681.693 L889.7 681.693 L889.14 681.693 L888.581 681.693 L888.022 681.693 L887.463 681.693 L886.903 681.693 L886.344 681.693 L885.785 681.693 L885.226 681.693 L884.666 681.693 L884.107 681.693 L883.548 681.693 L882.989 681.693 L882.429 681.693 L881.87 681.693 L881.311 681.693 L880.752 681.693 L880.192 681.693 L879.633 681.693 L879.074 681.693 L878.515 681.693 L877.955 681.693 L877.396 681.693 L876.837 681.693 L876.278 681.693 L875.718 681.693 L875.159 681.693 L874.6 681.693 L874.041 681.693 L873.481 681.693 L872.922 681.693 L872.363 681.693 L871.804 681.693 L871.244 681.693 L870.685 681.693 L870.126 681.693 L869.567 681.693 L869.007 681.693 L868.448 681.693 L867.889 681.693 L867.33 681.693 L866.77 681.693 L866.211 681.693 L865.652 681.693 L865.093 681.693 L864.533 681.693 L863.974 681.693 L863.415 681.693 L862.856 681.693 L862.296 681.693 L861.737 681.693 L861.178 681.693 L860.619 681.693 L860.059 681.693 L859.5 681.693 L858.941 681.693 L858.382 681.693 L857.822 681.693 L857.263 681.693 L856.704 681.693 L856.145 681.693 L855.585 681.693 L855.026 681.693 L854.467 681.693 L853.908 681.693 L853.348 681.693 L852.789 681.693 L852.23 681.693 L851.671 681.693 L851.111 681.693 L850.552 681.693 L849.993 681.693 L849.434 681.693 L848.874 681.693 L848.315 681.693 L847.756 681.693 L847.197 681.693 L846.637 681.693 L846.078 681.693 L845.519 681.693 L844.96 681.693 L844.4 681.693 L843.841 681.693 L843.282 681.693 L842.723 681.693 L842.163 681.693 L841.604 681.693 L841.045 681.693 L840.486 681.693 L839.926 681.693 L839.367 681.693 L838.808 681.693 L838.249 681.693 L837.689 681.693 L837.13 681.693 L836.571 681.693 L836.012 681.693 L835.452 681.693 L834.893 681.693 L834.334 681.693 L833.775 681.693 L833.215 681.693 L832.656 681.693 L832.097 681.693 L831.538 681.693 L830.978 681.693 L830.419 681.693 L829.86 681.693 L829.301 681.693 L828.741 681.693 L828.182 681.693 L827.623 681.693 L827.064 681.693 L826.504 681.693 L825.945 681.693 L825.386 681.693 L824.827 681.693 L824.267 681.693 L823.708 681.693 L823.149 681.693 L822.59 681.693 L822.03 681.693 L821.471 681.693 L820.912 681.693 L820.353 681.693 L819.793 681.693 L819.234 681.693 L818.675 681.693 L818.116 681.693 L817.556 681.693 L816.997 681.693 L816.438 681.693 L815.879 681.693 L815.319 681.693 L814.76 681.693 L814.201 681.693 L813.642 681.693 L813.082 681.693 L812.523 681.693 L811.964 681.693 L811.405 681.693 L810.845 681.693 L810.286 681.693 L809.727 681.693 L809.168 681.693 L808.608 681.693 L808.049 681.693 L807.49 681.693 L806.931 681.693 L806.371 681.693 L805.812 681.693 L805.253 681.693 L804.693 681.693 L804.134 681.693 L803.575 681.693 L803.016 681.693 L802.456 681.693 L801.897 681.693 L801.338 681.693 L800.779 681.693 L800.219 681.693 L799.66 681.693 L799.101 681.693 L798.542 681.693 L797.982 681.693 L797.423 681.693 L796.864 681.693 L796.305 681.693 L795.745 681.693 L795.186 681.693 L794.627 681.693 L794.068 681.693 L793.508 681.693 L792.949 681.693 L792.39 681.693 L791.831 681.693 L791.271 681.693 L790.712 681.693 L790.153 681.693 L789.594 681.693 L789.034 681.693 L788.475 681.693 L787.916 681.693 L787.357 681.693 L786.797 681.693 L786.238 681.693 L785.679 681.693 L785.12 681.693 L784.56 681.693 L784.001 681.693 L783.442 681.693 L782.883 681.693 L782.323 681.693 L781.764 681.693 L781.205 681.693 L780.646 681.693 L780.086 681.693 L779.527 681.693 L778.968 681.693 L778.409 681.693 L777.849 681.693 L777.29 681.693 L776.731 681.693 L776.172 681.693 L775.612 681.693 L775.053 681.693 L774.494 681.693 L773.935 681.693 L773.375 681.693 L772.816 681.693 L772.257 681.693 L771.698 681.693 L771.138 681.693 L770.579 681.693 L770.02 681.693 L769.461 681.693 L768.901 681.693 L768.342 681.693 L767.783 681.693 L767.224 681.693 L766.664 681.693 L766.105 681.693 L765.546 681.693 L764.987 681.693 L764.427 681.693 L763.868 681.693 L763.309 681.693 L762.75 681.693 L762.19 681.693 L761.631 681.693 L761.072 681.693 L760.513 681.693 L759.953 681.693 L759.394 681.693 L758.835 681.693 L758.276 681.693 L757.716 681.693 L757.157 681.693 L756.598 681.693 L756.039 681.693 L755.479 681.693 L754.92 681.693 L754.361 681.693 L753.802 681.693 L753.242 681.693 L752.683 681.693 L752.124 681.693 L751.565 681.693 L751.005 681.693 L750.446 681.693 L749.887 681.693 L749.328 681.693 L748.768 681.693 L748.209 681.693 L747.65 681.693 L747.091 681.693 L746.531 681.693 L745.972 681.693 L745.413 681.693 L744.854 681.693 L744.294 681.693 L743.735 681.693 L743.176 681.693 L742.617 681.693 L742.057 681.693 L741.498 681.693 L740.939 681.693 L740.38 681.693 L739.82 681.693 L739.261 681.693 L738.702 681.693 L738.143 681.693 L737.583 681.693 L737.024 681.693 L736.465 681.693 L735.906 681.693 L735.346 681.693 L734.787 681.693 L734.228 681.693 L733.669 681.693 L733.109 681.693 L732.55 681.693 L731.991 681.693 L731.432 681.693 L730.872 681.693 L730.313 681.693 L729.754 681.693 L729.195 681.693 L728.635 681.693 L728.076 681.693 L727.517 681.693 L726.958 681.693 L726.398 681.693 L725.839 681.693 L725.28 681.693 L724.721 681.693 L724.161 681.693 L723.602 681.693 L723.043 681.693 L722.484 681.693 L721.924 681.693 L721.365 681.693 L720.806 681.693 L720.247 681.693  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.003 720.806,686.003 721.365,686.003 721.924,686.003 722.484,686.003 723.043,686.003 723.602,686.003 724.161,686.003 724.721,686.003 725.28,686.003 725.839,686.003 726.398,686.003 726.958,686.003 727.517,686.003 728.076,686.003 728.635,686.003 729.195,686.003 729.754,686.003 730.313,686.003 730.872,686.003 731.432,686.003 731.991,686.003 732.55,686.003 733.109,686.003 733.669,686.003 734.228,686.003 734.787,686.003 735.346,686.003 735.906,686.003 736.465,686.003 737.024,686.003 737.583,686.003 738.143,686.003 738.702,686.003 739.261,686.003 739.82,686.003 740.38,686.003 740.939,686.003 741.498,686.003 742.057,686.003 742.617,686.003 743.176,686.003 743.735,686.003 744.294,686.003 744.854,686.003 745.413,686.003 745.972,686.003 746.531,686.003 747.091,686.003 747.65,686.003 748.209,686.003 748.768,686.003 749.328,686.003 749.887,686.003 750.446,686.003 751.005,686.003 751.565,686.003 752.124,686.003 752.683,686.003 753.242,686.003 753.802,686.003 754.361,686.003 754.92,686.003 755.479,686.003 756.039,686.003 756.598,686.003 757.157,686.003 757.716,686.003 758.276,686.003 758.835,686.003 759.394,686.003 759.953,686.003 760.513,686.003 761.072,686.003 761.631,686.003 762.19,686.003 762.75,686.003 763.309,686.003 763.868,686.003 764.427,686.003 764.987,686.003 765.546,686.003 766.105,686.003 766.664,686.003 767.224,686.003 767.783,686.003 768.342,686.003 768.901,686.003 769.461,686.003 770.02,686.003 770.579,686.003 771.138,686.003 771.698,686.003 772.257,686.003 772.816,686.003 773.375,686.003 773.935,686.003 774.494,686.003 775.053,686.003 775.612,686.003 776.172,686.003 776.731,686.003 777.29,686.003 777.849,686.003 778.409,686.003 778.968,686.003 779.527,686.003 780.086,686.003 780.646,686.003 781.205,686.003 781.764,686.003 782.323,686.003 782.883,686.003 783.442,686.003 784.001,686.003 784.56,686.003 785.12,686.003 785.679,686.003 786.238,686.003 786.797,686.003 787.357,686.003 787.916,686.003 788.475,686.003 789.034,686.003 789.594,686.003 790.153,686.003 790.712,686.003 791.271,686.003 791.831,686.003 792.39,686.003 792.949,686.003 793.508,686.003 794.068,686.003 794.627,686.003 795.186,686.003 795.745,686.003 796.305,686.003 796.864,686.003 797.423,686.003 797.982,686.003 798.542,686.003 799.101,686.003 799.66,686.003 800.219,686.003 800.779,686.003 801.338,686.003 801.897,686.003 802.456,686.003 803.016,686.003 803.575,686.003 804.134,686.003 804.693,686.003 805.253,686.003 805.812,686.003 806.371,686.003 806.931,686.003 807.49,686.003 808.049,686.003 808.608,686.003 809.168,686.003 809.727,686.003 810.286,686.003 810.845,686.003 811.405,686.003 811.964,686.003 812.523,686.003 813.082,686.003 813.642,686.003 814.201,686.003 814.76,686.003 815.319,686.003 815.879,686.003 816.438,686.003 816.997,686.003 817.556,686.003 818.116,686.003 818.675,686.003 819.234,686.003 819.793,686.003 820.353,686.003 820.912,686.003 821.471,686.003 822.03,686.003 822.59,686.003 823.149,686.003 823.708,686.003 824.267,686.003 824.827,686.003 825.386,686.003 825.945,686.003 826.504,686.003 827.064,686.003 827.623,686.003 828.182,686.003 828.741,686.003 829.301,686.003 829.86,686.003 830.419,686.003 830.978,686.003 831.538,686.003 832.097,686.003 832.656,686.003 833.215,686.003 833.775,686.003 834.334,686.003 834.893,686.003 835.452,686.003 836.012,686.003 836.571,686.003 837.13,686.003 837.689,686.003 838.249,686.003 838.808,686.003 839.367,686.003 839.926,686.003 840.486,686.003 841.045,686.003 841.604,686.003 842.163,686.003 842.723,686.003 843.282,686.003 843.841,686.003 844.4,686.003 844.96,686.003 845.519,686.003 846.078,686.003 846.637,686.003 847.197,686.003 847.756,686.003 848.315,686.003 848.874,686.003 849.434,686.003 849.993,686.003 850.552,686.003 851.111,686.003 851.671,686.003 852.23,686.003 852.789,686.003 853.348,686.003 853.908,686.003 854.467,686.003 855.026,686.003 855.585,686.003 856.145,686.003 856.704,686.003 857.263,686.003 857.822,686.003 858.382,686.003 858.941,686.003 859.5,686.003 860.059,686.003 860.619,686.003 861.178,686.003 861.737,686.003 862.296,686.003 862.856,686.003 863.415,686.003 863.974,686.003 864.533,686.003 865.093,686.003 865.652,686.003 866.211,686.003 866.77,686.003 867.33,686.003 867.889,686.003 868.448,686.003 869.007,686.003 869.567,686.003 870.126,686.003 870.685,686.003 871.244,686.003 871.804,686.003 872.363,686.003 872.922,686.003 873.481,686.003 874.041,686.003 874.6,686.003 875.159,686.003 875.718,686.003 876.278,686.003 876.837,686.003 877.396,686.003 877.955,686.003 878.515,686.003 879.074,686.003 879.633,686.003 880.192,686.003 880.752,686.003 881.311,686.003 881.87,686.003 882.429,686.003 882.989,686.003 883.548,686.003 884.107,686.003 884.666,686.003 885.226,686.003 885.785,686.003 886.344,686.003 886.903,686.003 887.463,686.003 888.022,686.003 888.581,686.003 889.14,686.003 889.7,686.003 890.259,686.003 890.818,686.003 891.377,686.003 891.937,686.003 892.496,686.003 893.055,686.003 893.614,686.003 894.174,686.003 894.733,686.003 895.292,686.003 895.851,686.003 896.411,686.003 896.97,686.003 897.529,686.003 898.088,686.003 898.648,686.003 899.207,686.003 899.766,686.003 900.325,686.003 900.885,686.003 901.444,686.003 902.003,686.003 902.562,686.003 903.122,686.003 903.681,686.003 904.24,686.003 904.799,686.003 905.359,686.003 905.918,686.003 906.477,686.003 907.036,686.003 907.596,686.003 908.155,686.003 908.714,686.003 909.273,686.003 909.833,686.003 910.392,686.003 910.951,686.003 911.51,686.003 912.07,686.003 912.629,686.003 913.188,686.003 913.747,686.003 914.307,686.003 914.866,686.003 915.425,686.003 915.984,686.003 916.544,686.003 917.103,686.003 917.662,686.003 918.221,686.003 918.781,686.003 919.34,686.003 919.899,686.003 920.458,686.003 921.018,686.003 921.577,686.003 922.136,686.003 922.695,686.003 923.255,686.003 923.814,686.003 924.373,686.003 924.932,686.003 925.492,686.003 926.051,686.003 926.61,686.003 927.169,686.003 927.729,686.003 928.288,686.003 928.847,686.003 929.406,686.003 929.966,686.003 930.525,686.003 931.084,686.003 931.644,686.003 932.203,686.003 932.762,686.003 933.321,686.003 933.881,686.003 934.44,686.003 934.999,686.003 935.558,686.003 936.118,686.003 936.677,686.003 937.236,686.003 937.795,686.003 938.355,686.003 938.914,686.003 939.473,686.003 940.032,686.003 940.592,686.003 941.151,686.003 941.71,686.003 942.269,686.003 942.829,686.003 943.388,686.003 943.947,686.003 944.506,686.003 945.066,686.003 945.625,686.003 946.184,686.003 946.743,686.003 947.303,686.003 947.862,686.003 948.421,686.003 948.98,686.003 949.54,686.003 950.099,686.003 950.658,686.003 951.217,686.003 951.777,686.003 952.336,686.003 952.895,686.003 953.454,686.003 954.014,686.003 954.573,686.003 955.132,686.003 955.691,686.003 956.251,686.003 956.81,686.003 957.369,686.003 957.928,686.003 958.488,686.003 959.047,686.003 959.606,686.003 960.165,686.003 960.725,686.003 961.284,686.003 961.843,686.003 962.402,686.003 962.962,686.003 963.521,686.003 964.08,686.003 964.639,686.003 965.199,686.003 965.758,686.003 966.317,686.003 966.876,686.003 967.436,686.003 967.995,686.003 968.554,686.003 969.113,686.003 969.673,686.003 970.232,686.003 970.791,686.003 971.35,686.003 971.91,686.003 972.469,686.003 973.028,686.003 973.587,686.003 974.147,686.003 974.706,686.003 975.265,686.003 975.824,686.003 976.384,686.003 976.943,686.003 977.502,686.003 978.061,686.003 978.621,686.003 979.18,686.003 979.739,686.003 980.298,686.003 980.858,686.003 981.417,686.003 981.976,686.003 982.535,686.003 983.095,686.003 983.654,686.003 984.213,686.003 984.772,686.003 985.332,686.003 985.891,686.003 986.45,686.003 987.009,686.003 987.569,686.003 988.128,686.003 988.687,686.003 989.246,686.003 989.806,686.003 990.365,686.003 990.924,686.003 991.483,686.003 992.043,686.003 992.602,686.003 993.161,686.003 993.72,686.003 994.28,686.003 994.839,686.003 995.398,686.003 995.957,686.003 996.517,686.003 997.076,686.003 997.635,686.003 998.194,686.003 998.754,686.003 999.313,686.003 999.872,686.003 1000.43,686.003 1000.99,686.003 1001.55,686.003 1002.11,686.003 1002.67,686.003 1003.23,686.003 1003.79,686.003 1004.35,686.003 1004.91,686.003 1005.46,686.003 1006.02,686.003 1006.58,686.003 1007.14,686.003 1007.7,686.003 1008.26,686.003 1008.82,686.003 1009.38,686.003 1009.94,686.003 1010.5,686.003 1011.06,686.003 1011.62,686.003 1012.18,686.003 1012.73,686.003 1013.29,686.003 1013.85,686.003 1014.41,686.003 1014.97,686.003 1015.53,686.003 1016.09,686.003 1016.65,686.003 1017.21,686.003 1017.77,686.003 1018.33,686.003 1018.89,686.003 1019.45,686.003 1020.01,686.003 1020.56,686.003 1021.12,686.003 1021.68,686.003 1022.24,686.003 1022.8,686.003 1023.36,686.003 1023.92,686.003 1024.48,686.003 1025.04,686.003 1025.6,686.003 1026.16,686.003 1026.72,686.003 1027.28,686.003 1027.83,686.003 1028.39,686.003 1028.95,686.003 1029.51,686.003 1030.07,686.003 1030.63,686.003 1031.19,686.003 1031.75,686.003 1032.31,686.003 1032.87,686.003 1033.43,686.003 1033.99,686.003 1034.55,686.003 1035.1,686.003 1035.66,686.003 1036.22,686.003 1036.78,686.003 1037.34,686.003 1037.9,686.003 1038.46,686.003 1039.02,686.003 1039.58,686.003 1040.14,686.003 1040.7,686.003 1041.26,686.003 1041.82,686.003 1042.38,686.003 1042.93,686.003 1043.49,686.003 1044.05,686.003 1044.61,686.003 1045.17,686.003 1045.73,686.003 1046.29,686.003 1046.85,686.003 1047.41,686.003 1047.97,686.003 1048.53,686.003 1049.09,686.003 1049.65,686.003 1050.2,686.003 1050.76,686.003 1051.32,686.003 1051.88,686.003 1052.44,686.003 1053,686.003 1053.56,686.003 1054.12,686.003 1054.68,686.003 1055.24,686.003 1055.8,686.003 1056.36,686.003 1056.92,686.003 1057.48,686.003 1058.03,686.003 1058.59,686.003 1059.15,686.003 1059.71,686.003 1060.27,686.003 1060.83,686.003 1061.39,686.003 1061.95,686.003 1062.51,686.003 1063.07,686.003 1063.63,686.003 1064.19,686.003 1064.75,686.003 1065.3,686.003 1065.86,686.003 1066.42,686.003 1066.98,686.003 1067.54,686.003 1068.1,686.003 1068.66,686.003 1069.22,686.003 1069.78,686.003 1070.34,686.003 1070.9,686.003 1071.46,686.003 1072.02,686.003 1072.57,686.003 1073.13,686.003 1073.69,686.003 1074.25,686.003 1074.81,686.003 1075.37,686.003 1075.93,686.003 1076.49,686.003 1077.05,686.003 1077.61,686.003 1078.17,686.003 1078.73,686.003 1079.29,686.003 1079.85,686.003 1080.4,686.003 1080.96,686.003 1081.52,686.003 1082.08,686.003 1082.64,686.003 1083.2,686.003 1083.76,686.003 1084.32,686.003 1084.88,686.003 1085.44,686.003 1086,686.003 1086.56,686.003 1087.12,686.003 1087.67,686.003 1088.23,686.003 1088.79,686.003 1089.35,686.003 1089.91,686.003 1090.47,686.003 1091.03,686.003 1091.59,686.003 1092.15,686.003 1092.71,686.003 1093.27,686.003 1093.83,686.003 1094.39,686.003 1094.94,686.003 1095.5,686.003 1096.06,686.003 1096.62,686.003 1097.18,686.003 1097.74,686.003 1098.3,686.003 1098.86,686.003 1099.42,686.003 1099.98,686.003 1100.54,686.003 1101.1,686.003 1101.66,686.003 1102.22,686.003 1102.77,686.003 1103.33,686.003 1103.89,686.003 1104.45,686.003 1105.01,686.003 1105.57,686.003 1106.13,686.003 1106.69,686.003 1107.25,686.003 1107.81,686.003 1108.37,686.003 1108.93,686.003 1109.49,686.003 1110.04,686.003 1110.6,686.003 1111.16,686.003 1111.72,686.003 1112.28,686.003 1112.84,686.003 1113.4,686.003 1113.96,686.003 1114.52,686.003 1115.08,686.003 1115.64,686.003 1116.2,686.003 1116.76,686.003 1117.31,686.003 1117.87,686.003 1118.43,686.003 1118.99,686.003 1119.55,686.003 1120.11,686.003 1120.67,686.003 1121.23,686.003 1121.79,686.003 1122.35,686.003 1122.91,686.003 1123.47,686.003 1124.03,686.003 1124.59,686.003 1125.14,686.003 1125.7,686.003 1126.26,686.003 1126.82,686.003 1127.38,686.003 1127.94,686.003 1128.5,686.003 1129.06,686.003 1129.62,686.003 1130.18,686.003 1130.74,686.003 1131.3,686.003 1131.86,686.003 1132.41,686.003 1132.97,686.003 1133.53,686.003 1134.09,686.003 1134.65,686.003 1135.21,686.003 1135.77,686.003 1136.33,686.003 1136.89,686.003 1137.45,686.003 1138.01,686.003 1138.57,686.003 1139.13,686.003 1139.68,686.003 1140.24,686.003 1140.8,686.003 1141.36,686.003 1141.92,686.003 1142.48,686.003 1143.04,686.003 1143.6,686.003 1144.16,686.003 1144.72,686.003 1145.28,686.003 1145.84,686.003 1146.4,686.003 1146.96,686.003 1147.51,686.003 1148.07,686.003 1148.63,686.003 1149.19,686.003 1149.75,686.003 1150.31,686.003 1150.87,686.003 1151.43,686.003 1151.99,686.003 1152.55,686.003 1153.11,686.003 1153.67,686.003 1154.23,686.003 1154.78,686.003 1155.34,686.003 1155.9,686.003 1156.46,686.003 1157.02,686.003 1157.58,686.003 1158.14,686.003 1158.7,686.003 1159.26,686.003 1159.82,686.003 1160.38,686.003 1160.94,686.003 1161.5,686.003 1162.05,686.003 1162.61,686.003 1163.17,686.003 1163.73,686.003 1164.29,686.003 1164.85,686.003 1165.41,686.003 1165.97,686.003 1166.53,686.003 1167.09,686.003 1167.65,686.003 1168.21,686.003 1168.77,686.003 1169.33,686.003 1169.88,686.003 1170.44,686.003 1171,686.003 1171.56,686.003 1172.12,686.003 1172.68,686.003 1173.24,686.003 1173.8,686.003 1174.36,686.003 1174.92,686.003 1175.48,686.003 1176.04,686.003 1176.6,686.003 1177.15,686.003 1177.71,686.003 1178.27,686.003 1178.83,686.003 1179.39,686.003 1179.95,686.003 1180.51,686.003 1181.07,686.003 1181.63,686.003 1182.19,686.003 1182.75,686.003 1183.31,686.003 1183.87,686.003 1184.43,686.003 1184.98,686.003 1185.54,686.003 1186.1,686.003 1186.66,686.003 1187.22,686.003 1187.78,686.003 1188.34,686.003 1188.9,686.003 1189.46,686.003 1190.02,686.003 1190.58,686.003 1191.14,686.003 1191.7,686.003 1192.25,686.003 1192.81,686.003 1193.37,686.003 1193.93,686.003 1194.49,686.003 1195.05,686.003 1195.61,686.003 1196.17,686.003 1196.73,686.003 1197.29,686.003 1197.85,686.003 1198.41,686.003 1198.97,686.003 1199.52,686.003 1200.08,686.003 1200.64,686.003 1201.2,686.003 1201.76,686.003 1202.32,686.003 1202.88,686.003 1203.44,686.003 1204,686.003 1204.56,686.003 1205.12,686.003 1205.68,686.003 1206.24,686.003 1206.8,686.003 1207.35,686.003 1207.91,686.003 1208.47,686.003 1209.03,686.003 1209.59,686.003 1210.15,686.003 1210.71,686.003 1211.27,686.003 1211.83,686.003 1212.39,686.003 1212.95,686.003 1213.51,686.003 1214.07,686.003 1214.62,686.003 1215.18,686.003 1215.74,686.003 1216.3,686.003 1216.86,686.003 1217.42,686.003 1217.98,686.003 1218.54,686.003 1219.1,686.003 1219.66,686.003 1220.22,686.003 1220.78,686.003 1221.34,686.003 1221.89,686.003 1222.45,686.003 1223.01,686.003 1223.57,686.003 1224.13,686.003 1224.69,686.003 1225.25,686.003 1225.81,686.003 1226.37,686.003 1226.93,686.003 1227.49,686.003 1228.05,686.003 1228.61,686.003 1229.17,686.003 1229.72,686.003 1230.28,686.003 1230.84,686.003 1231.4,686.003 1231.96,686.003 1232.52,686.003 1233.08,686.003 1233.64,686.003 1234.2,686.003 1234.76,686.003 1235.32,686.003 1235.88,686.003 1236.44,686.003 1236.99,686.003 1237.55,686.003 1238.11,686.003 1238.67,686.003 1239.23,686.003 1239.79,686.003 1240.35,686.003 1240.91,686.003 1241.47,686.003 1242.03,686.003 1242.59,686.003 1243.15,686.003 1243.71,686.003 1244.26,686.003 1244.82,686.003 1245.38,686.003 1245.94,686.003 1246.5,686.003 1247.06,686.003 1247.62,686.003 1248.18,686.003 1248.74,686.003 1249.3,686.003 1249.86,686.003 1250.42,686.003 1250.98,686.003 1251.54,686.003 1252.09,686.003 1252.65,686.003 1253.21,686.003 1253.77,686.003 1254.33,686.003 1254.89,686.003 1255.45,686.003 1256.01,686.003 1256.57,686.003 1257.13,686.003 1257.69,686.003 1258.25,686.003 1258.81,686.003 1259.36,686.003 1259.92,686.003 1260.48,686.003 1261.04,686.003 1261.6,686.003 1262.16,686.003 1262.72,686.003 1263.28,686.003 1263.84,686.003 1264.4,686.003 1264.96,686.003 1265.52,686.003 1266.08,686.003 1266.63,686.003 1267.19,686.003 1267.75,686.003 1268.31,686.003 1268.87,686.003 1269.43,686.003 1269.99,686.003 1270.55,686.003 1271.11,686.003 1271.67,686.003 1272.23,686.003 1272.79,686.003 1273.35,686.003 1273.91,686.003 1274.46,686.003 1275.02,686.003 1275.58,686.003 1276.14,686.003 1276.7,686.003 1277.26,686.003 1277.82,686.003 1278.38,686.003 1278.94,686.003 1279.5,686.003 1280.06,686.003 1280.62,686.003 1281.18,686.003 1281.73,686.003 1282.29,686.003 1282.85,686.003 1283.41,686.003 1283.97,686.003 1284.53,686.003 1285.09,686.003 1285.65,686.003 1286.21,686.003 1286.77,686.003 1287.33,686.003 1287.89,686.003 1288.45,686.003 1289,686.003 1289.56,686.003 1290.12,686.003 1290.68,686.003 1291.24,686.003 1291.8,686.003 1292.36,686.003 1292.92,686.003 1293.48,686.003 1294.04,686.003 1294.6,686.003 1295.16,686.003 1295.72,686.003 1296.28,686.003 1296.83,686.003 1297.39,686.003 1297.95,686.003 1298.51,686.003 1299.07,686.003 1299.63,686.003 1300.19,686.003 1300.75,686.003 1301.31,686.003 1301.87,686.003 1302.43,686.003 1302.99,686.003 1303.55,686.003 1304.1,686.003 1304.66,686.003 1305.22,686.003 1305.78,686.003 1306.34,686.003 1306.9,686.003 1307.46,686.003 1308.02,686.003 1308.58,686.003 1309.14,686.003 1309.7,686.003 1310.26,686.003 1310.82,686.003 1311.38,686.003 1311.93,686.003 1312.49,686.003 1313.05,686.003 1313.61,686.003 1314.17,686.003 1314.73,686.003 1315.29,686.003 1315.85,686.003 1316.41,686.003 1316.97,686.003 1317.53,686.003 1318.09,686.003 1318.65,686.003 1319.2,686.003 1319.76,686.003 1320.32,686.003 1320.88,686.003 1321.44,686.003 1322,686.003 1322.56,686.003 1323.12,686.003 1323.68,686.003 1324.24,686.003 1324.8,686.003 1325.36,686.003 1325.92,686.003 1326.47,686.003 1327.03,686.003 1327.59,686.003 1328.15,686.003 1328.71,686.003 1329.27,686.003 1329.83,686.003 1330.39,686.003 1330.95,686.003 1331.51,686.003 1332.07,686.003 1332.63,686.003 1333.19,686.003 1333.75,686.003 1334.3,686.003 1334.86,686.003 1335.42,686.003 1335.98,686.003 1336.54,686.003 1337.1,686.003 1337.66,686.003 1338.22,686.003 1338.78,686.003 1339.34,686.003 1339.9,686.003 1340.46,686.003 1341.02,686.003 1341.57,686.003 1342.13,686.003 1342.69,686.003 1343.25,686.003 1343.81,686.003 1344.37,686.003 1344.93,686.003 1345.49,686.003 1346.05,686.003 1346.61,686.003 1347.17,686.003 1347.73,686.003 1348.29,686.003 1348.84,686.003 1349.4,686.003 1349.96,686.003 1350.52,686.003 1351.08,686.003 1351.64,686.003 1352.2,686.003 1352.76,686.003 1353.32,686.003 1353.88,686.003 1354.44,686.003 1355,686.003 1355.56,686.003 1356.12,686.003 1356.67,686.003 1357.23,686.003 1357.79,686.003 1358.35,686.003 1358.91,686.003 1359.47,686.003 1360.03,686.003 1360.59,686.003 1361.15,686.003 1361.71,686.003 1362.27,686.003 1362.83,686.003 1363.39,686.003 1363.94,686.003 1364.5,686.003 1365.06,686.003 1365.62,686.003 1366.18,686.003 1366.74,686.003 1367.3,686.003 1367.86,686.003 1368.42,686.003 1368.98,686.003 1369.54,686.003 1370.1,686.003 1370.66,686.003 1371.21,686.003 1371.77,686.003 1372.33,686.003 1372.89,686.003 1373.45,686.003 1374.01,686.003 1374.57,686.003 1375.13,686.003 1375.69,686.003 1376.25,686.003 1376.81,686.003 1377.37,686.003 1377.93,686.003 1378.49,686.003 1379.04,686.003 1379.6,686.003 1380.16,686.003 1380.72,686.003 1381.28,686.003 1381.84,686.003 1382.4,686.003 1382.96,686.003 1383.52,686.003 1384.08,686.003 1384.64,686.003 1385.2,686.003 1385.76,686.003 1386.31,686.003 1386.87,686.003 1387.43,686.003 1387.99,686.003 1388.55,686.003 1389.11,686.003 1389.67,686.003 1390.23,686.003 1390.79,686.003 1391.35,686.003 1391.91,686.003 1392.47,686.003 1393.03,686.003 1393.58,686.003 1394.14,686.003 1394.7,686.003 1395.26,686.003 1395.82,686.003 1396.38,686.003 1396.94,686.003 1397.5,686.003 1398.06,686.003 1398.62,686.003 1399.18,686.003 1399.74,686.003 1400.3,686.003 1400.86,686.003 1401.41,686.003 1401.97,686.003 1402.53,686.003 1403.09,686.003 1403.65,686.003 1404.21,686.003 1404.77,686.003 1405.33,686.003 1405.89,686.003 1406.45,686.003 1407.01,686.003 1407.57,686.003 1408.13,686.003 1408.68,686.003 1409.24,686.003 1409.8,686.003 1410.36,686.003 1410.92,686.003 1411.48,686.003 1412.04,686.003 1412.6,686.003 1413.16,686.003 1413.72,686.003 1414.28,686.003 1414.84,686.003 1415.4,686.003 1415.95,686.003 1416.51,686.003 1417.07,686.003 1417.63,686.003 1418.19,686.003 1418.75,686.003 1419.31,686.003 1419.87,686.003 1420.43,686.003 1420.99,686.003 1421.55,686.003 1422.11,686.003 1422.67,686.003 1423.23,686.003 1423.78,686.003 1424.34,686.003 1424.9,686.003 1425.46,686.003 1426.02,686.003 1426.58,686.003 1427.14,686.003 1427.7,686.003 1428.26,686.003 1428.82,686.003 1429.38,686.003 1429.94,686.003 1430.5,686.003 1431.05,686.003 1431.61,686.003 1432.17,686.003 1432.73,686.003 1433.29,686.003 1433.85,686.003 1434.41,686.003 1434.97,686.003 1435.53,686.003 1436.09,686.003 1436.65,686.003 1437.21,686.003 1437.77,686.003 1438.33,686.003 1438.88,686.003 1439.44,686.003 1440,686.003 1440.56,686.003 1441.12,686.003 1441.68,686.003 1442.24,686.003 1442.8,686.003 1443.36,686.003 1443.92,686.003 1444.48,686.003 1445.04,686.003 1445.6,686.003 1446.15,686.003 1446.71,686.003 1447.27,686.003 1447.83,686.003 1448.39,686.003 1448.95,686.003 1449.51,686.003 1450.07,686.003 1450.63,686.003 1451.19,686.003 1451.75,686.003 1452.31,686.003 1452.87,686.003 1453.42,686.003 1453.98,686.003 1454.54,686.003 1455.1,686.003 1455.66,686.003 1456.22,686.003 1456.78,686.003 1457.34,686.003 1457.9,686.003 1458.46,686.003 1459.02,686.003 1459.58,686.003 1460.14,686.003 1460.7,686.003 1461.25,686.003 1461.81,686.003 1462.37,686.003 1462.93,686.003 1463.49,686.003 1464.05,686.003 1464.61,686.003 1465.17,686.003 1465.73,686.003 1466.29,686.003 1466.85,686.003 1467.41,686.003 1467.97,686.003 1468.52,686.003 1469.08,686.003 1469.64,686.003 1470.2,686.003 1470.76,686.003 1471.32,686.003 1471.88,686.003 1472.44,686.003 1473,686.003 1473.56,686.003 1474.12,686.003 1474.68,686.003 1475.24,686.003 1475.79,686.003 1476.35,686.003 1476.91,686.003 1477.47,686.003 1478.03,686.003 1478.59,686.003 1479.15,686.003 1479.71,686.003 1480.27,686.003 1480.83,686.003 1481.39,686.003 1481.95,686.003 1482.51,686.003 1483.07,686.003 1483.62,686.003 1484.18,686.003 1484.74,686.003 1485.3,686.003 1485.86,686.003 1486.42,686.003 1486.98,686.003 1487.54,686.003 1488.1,686.003 1488.66,686.003 1489.22,686.003 1489.78,686.003 1490.34,686.003 1490.89,686.003 1491.45,686.003 1492.01,686.003 1492.57,686.003 1493.13,686.003 1493.69,686.003 1494.25,686.003 1494.81,686.003 1495.37,686.003 1495.93,686.003 1496.49,686.003 1497.05,686.003 1497.61,686.003 1498.16,686.003 1498.72,686.003 1499.28,686.003 1499.84,686.003 1500.4,686.003 1500.96,686.003 1501.52,686.003 1502.08,686.003 1502.64,686.003 1503.2,686.003 1503.76,686.003 1504.32,686.003 1504.88,686.003 1505.44,686.003 1505.99,686.003 1506.55,686.003 1507.11,686.003 1507.67,686.003 1508.23,686.003 1508.79,686.003 1509.35,686.003 1509.91,686.003 1510.47,686.003 1511.03,686.003 1511.59,686.003 1512.15,686.003 1512.71,686.003 1513.26,686.003 1513.82,686.003 1514.38,686.003 1514.94,686.003 1515.5,686.003 1516.06,686.003 1516.62,686.003 1517.18,686.003 1517.74,686.003 1518.3,686.003 1518.86,686.003 1519.42,686.003 1519.98,686.003 1520.53,686.003 1521.09,686.003 1521.65,686.003 1522.21,686.003 1522.77,686.003 1523.33,686.003 1523.89,686.003 1524.45,686.003 1525.01,686.003 1525.57,686.003 1526.13,686.003 1526.69,686.003 1527.25,686.003 1527.81,686.003 1528.36,686.003 1528.92,686.003 1529.48,686.003 1530.04,686.003 1530.6,686.003 1531.16,686.003 1531.72,686.003 1532.28,686.003 1532.84,686.003 1533.4,686.003 1533.96,686.003 1534.52,686.003 1535.08,686.003 1535.63,686.003 1536.19,686.003 1536.75,686.003 1537.31,686.003 1537.87,686.003 1538.43,686.003 1538.99,686.003 1539.55,686.003 1540.11,686.003 1540.67,686.003 1541.23,686.003 1541.79,686.003 1542.35,686.003 1542.9,686.003 1543.46,686.003 1544.02,686.003 1544.58,686.003 1545.14,686.003 1545.7,686.003 1546.26,686.003 1546.82,686.003 1547.38,686.003 1547.94,686.003 1548.5,686.003 1549.06,686.003 1549.62,686.003 1550.18,686.003 1550.73,686.003 1551.29,686.003 1551.85,686.003 1552.41,686.003 1552.97,686.003 1553.53,686.003 1554.09,686.003 1554.65,686.003 1555.21,686.003 1555.77,686.003 1556.33,686.003 1556.89,686.003 1557.45,686.003 1558,686.003 1558.56,686.003 1559.12,686.003 1559.68,686.003 1560.24,686.003 1560.8,686.003 1561.36,686.003 1561.92,686.003 1562.48,686.003 1563.04,686.003 1563.6,686.003 1564.16,686.003 1564.72,686.003 1565.28,686.003 1565.83,686.003 1566.39,686.003 1566.95,686.003 1567.51,686.003 1568.07,686.003 1568.63,686.003 1569.19,686.003 1569.75,686.003 1570.31,686.003 1570.87,686.003 1571.43,686.003 1571.99,686.003 1572.55,686.003 1573.1,686.003 1573.66,686.003 1574.22,686.003 1574.78,686.003 1575.34,686.003 1575.9,686.003 1576.46,686.003 1577.02,686.003 1577.58,686.003 1578.14,686.003 1578.7,686.003 1579.26,686.003 1579.82,686.003 1580.37,686.003 1580.93,686.003 1581.49,686.003 1582.05,686.003 1582.61,686.003 1583.17,686.003 1583.73,686.003 1584.29,686.003 1584.85,686.003 1585.41,686.003 1585.97,686.003 1586.53,686.003 1587.09,686.003 1587.65,686.003 1588.2,686.003 1588.76,686.003 1589.32,686.003 1589.88,686.003 1590.44,686.003 1591,686.003 1591.56,686.003 1592.12,686.003 1592.68,686.003 1593.24,686.003 1593.8,686.003 1594.36,686.003 1594.92,686.003 1595.47,686.003 1596.03,686.003 1596.59,686.003 1597.15,686.003 1597.71,686.003 1598.27,686.003 1598.83,686.003 1599.39,686.003 1599.95,686.003 1600.51,686.003 1601.07,686.003 1601.63,686.003 1602.19,686.003 1602.74,686.003 1603.3,686.003 1603.86,686.003 1604.42,686.003 1604.98,686.003 1605.54,686.003 1606.1,686.003 1606.66,686.003 1607.22,686.003 1607.78,686.003 1608.34,686.003 1608.9,686.003 1609.46,686.003 1610.02,686.003 1610.57,686.003 1611.13,686.003 1611.69,686.003 1612.25,686.003 1612.81,686.003 1613.37,686.003 1613.93,686.003 1614.49,686.003 1615.05,686.003 1615.61,686.003 1616.17,686.003 1616.73,686.003 1617.29,686.003 1617.84,686.003 1618.4,686.003 1618.96,686.003 1619.52,686.003 1620.08,686.003 1620.64,686.003 1621.2,686.003 1621.76,686.003 1622.32,686.003 1622.88,686.003 1623.44,686.003 1624,686.003 1624.56,686.003 1625.11,686.003 1625.67,686.003 1626.23,686.003 1626.79,686.003 1627.35,686.003 1627.91,686.003 1628.47,686.003 1629.03,686.003 1629.59,686.003 1630.15,686.003 1630.71,686.003 1631.27,686.003 1631.83,686.003 1632.39,686.003 1632.94,686.003 1633.5,686.003 1634.06,686.003 1634.62,686.003 1635.18,686.003 1635.74,686.003 1636.3,686.003 1636.86,686.003 1637.42,686.003 1637.98,686.003 1638.54,686.003 1639.1,686.003 1639.66,686.003 1640.21,686.003 1640.77,686.003 1641.33,686.003 1641.89,686.003 1642.45,686.003 1643.01,686.003 1643.57,686.003 1644.13,686.003 1644.69,686.003 1645.25,686.003 1645.81,686.003 1646.37,686.003 1646.93,686.003 1647.48,686.003 1648.04,686.003 1648.6,686.003 1649.16,686.003 1649.72,686.003 1650.28,686.003 1650.84,686.003 1651.4,686.003 1651.96,686.003 1652.52,686.003 1653.08,686.003 1653.64,686.003 1654.2,686.003 1654.76,686.003 1655.31,686.003 1655.87,686.003 1656.43,686.003 1656.99,686.003 1657.55,686.003 1658.11,686.003 1658.67,686.003 1659.23,686.003 1659.79,686.003 1660.35,686.003 1660.91,686.003 1661.47,686.003 1662.03,686.003 1662.58,686.003 1663.14,686.003 1663.7,686.003 1664.26,686.003 1664.82,686.003 1665.38,686.003 1665.94,686.003 1666.5,686.003 1667.06,686.003 1667.62,686.003 1668.18,686.003 1668.74,686.003 1669.3,686.003 1669.85,686.003 1670.41,686.003 1670.97,686.003 1671.53,686.003 1672.09,686.003 1672.65,686.003 1673.21,686.003 1673.77,686.003 1674.33,686.003 1674.89,686.003 1675.45,686.003 1676.01,686.003 1676.57,686.003 1677.13,686.003 1677.68,686.003 1678.24,686.003 1678.8,686.003 1679.36,686.003 1679.92,686.003 1680.48,686.003 1681.04,686.003 1681.6,686.003 1682.16,686.003 1682.72,686.003 1683.28,686.003 1683.84,686.003 1684.4,686.003 1684.95,686.003 1685.51,686.003 1686.07,686.003 1686.63,686.003 1687.19,686.003 1687.75,686.003 1688.31,686.003 1688.87,686.003 1689.43,686.003 1689.99,686.003 1690.55,686.003 1691.11,686.003 1691.67,686.003 1692.23,686.003 1692.78,686.003 1693.34,686.003 1693.9,686.003 1694.46,686.003 1695.02,686.003 1695.58,686.003 1696.14,686.003 1696.7,686.003 1697.26,686.003 1697.82,686.003 1698.38,686.003 1698.94,686.003 1699.5,686.003 1700.05,686.003 1700.61,686.003 1701.17,686.003 1701.73,686.003 1702.29,686.003 1702.85,686.003 1703.41,686.003 1703.97,686.003 1704.53,686.003 1705.09,686.003 1705.65,686.003 1706.21,686.003 1706.77,686.003 1707.32,686.003 1707.88,686.003 1708.44,686.003 1709,686.003 1709.56,686.003 1710.12,686.003 1710.68,686.003 1711.24,686.003 1711.8,686.003 1712.36,686.003 1712.92,686.003 1713.48,686.003 1714.04,686.003 1714.6,686.003 1715.15,686.003 1715.71,686.003 1716.27,686.003 1716.83,686.003 1717.39,686.003 1717.95,686.003 1718.51,686.003 1719.07,686.003 1719.63,686.003 1720.19,686.003 1720.75,686.003 1721.31,686.003 1721.87,686.003 1722.42,686.003 1722.98,686.003 1723.54,686.003 1724.1,686.003 1724.66,686.003 1725.22,686.003 1725.78,686.003 1726.34,686.003 1726.9,686.003 1727.46,686.003 1728.02,686.003 1728.58,686.003 1729.14,686.003 1729.69,686.003 1730.25,686.003 1730.81,686.003 1731.37,686.003 1731.93,686.003 1732.49,686.003 1733.05,686.003 1733.61,686.003 1734.17,686.003 1734.73,686.003 1735.29,686.003 1735.85,686.003 1736.41,686.003 1736.97,686.003 1737.52,686.003 1738.08,686.003 1738.64,686.003 1739.2,686.003 1739.76,686.003 1740.32,686.003 1740.88,686.003 1741.44,686.003 1742,686.003 1742.56,686.003 1743.12,686.003 1743.68,686.003 1744.24,686.003 1744.79,686.003 1745.35,686.003 1745.91,686.003 1746.47,686.003 1747.03,686.003 1747.59,686.003 1748.15,686.003 1748.71,686.003 1749.27,686.003 1749.83,686.003 1750.39,686.003 1750.95,686.003 1751.51,686.003 1752.06,686.003 1752.62,686.003 1753.18,686.003 1753.74,686.003 1754.3,686.003 1754.86,686.003 1755.42,686.003 1755.98,686.003 1756.54,686.003 1757.1,686.003 1757.66,686.003 1758.22,686.003 1758.78,686.003 1759.34,686.003 1759.89,686.003 1760.45,686.003 1761.01,686.003 1761.57,686.003 1762.13,686.003 1762.69,686.003 1763.25,686.003 1763.81,686.003 1764.37,686.003 1764.93,686.003 1765.49,686.003 1766.05,686.003 1766.61,686.003 1767.16,686.003 1767.72,686.003 1768.28,686.003 1768.84,686.003 1769.4,686.003 1769.96,686.003 1770.52,686.003 1771.08,686.003 1771.64,686.003 1772.2,686.003 1772.76,686.003 1773.32,686.003 1773.88,686.003 1774.43,686.003 1774.99,686.003 1775.55,686.003 1776.11,686.003 1776.67,686.003 1777.23,686.003 1777.79,686.003 1778.35,686.003 1778.91,686.003 1779.47,686.003 1780.03,686.003 1780.59,686.003 1781.15,686.003 1781.71,686.003 1782.26,686.003 1782.82,686.003 1783.38,686.003 1783.94,686.003 1784.5,686.003 1785.06,686.003 1785.62,686.003 1786.18,686.003 1786.74,686.003 1787.3,686.003 1787.86,686.003 1788.42,686.003 1788.98,686.003 1789.53,686.003 1790.09,686.003 1790.65,686.003 1791.21,686.003 1791.77,686.003 1792.33,686.003 1792.89,686.003 1793.45,686.003 1794.01,686.003 1794.57,686.003 1795.13,686.003 1795.69,686.003 1796.25,686.003 1796.8,686.003 1797.36,686.003 1797.92,686.003 1798.48,686.003 1799.04,686.003 1799.6,686.003 1800.16,686.003 1800.72,686.003 1801.28,686.003 1801.84,686.003 1802.4,686.003 1802.96,686.003 1803.52,686.003 1804.08,686.003 1804.63,686.003 1805.19,686.003 1805.75,686.003 1806.31,686.003 1806.87,686.003 1807.43,686.003 1807.99,686.003 1808.55,686.003 1809.11,686.003 1809.67,686.003 1810.23,686.003 1810.79,686.003 1811.35,686.003 1811.9,686.003 1812.46,686.003 1813.02,686.003 1813.58,686.003 1814.14,686.003 1814.7,686.003 1815.26,686.003 1815.82,686.003 1816.38,686.003 1816.94,686.003 1817.5,686.003 1818.06,686.003 1818.62,686.003 1819.18,686.003 1819.73,686.003 1820.29,686.003 1820.85,686.003 1821.41,686.003 1821.97,686.003 1822.53,686.003 1823.09,686.003 1823.65,686.003 1824.21,686.003 1824.77,686.003 1825.33,686.003 1825.89,686.003 1826.45,686.003 1827,686.003 1827.56,686.003 1828.12,686.003 1828.68,686.003 1829.24,686.003 1829.8,686.003 1830.36,686.003 1830.92,686.003 1831.48,686.003 1832.04,686.003 1832.6,686.003 1833.16,686.003 1833.72,686.003 1834.27,686.003 1834.83,686.003 1835.39,686.003 1835.95,686.003 1836.51,686.003 1837.07,686.003 1837.63,686.003 1838.19,686.003 \"/>\n<path clip-path=\"url(#clip163)\" d=\"M720.247 684.055 L720.806 684.055 L721.365 684.055 L721.924 684.055 L722.484 684.055 L723.043 684.055 L723.602 684.055 L724.161 684.055 L724.721 684.055 L725.28 684.055 L725.839 684.055 L726.398 684.055 L726.958 684.055 L727.517 684.055 L728.076 684.055 L728.635 684.055 L729.195 684.055 L729.754 684.055 L730.313 684.055 L730.872 684.055 L731.432 684.055 L731.991 684.055 L732.55 684.055 L733.109 684.055 L733.669 684.055 L734.228 684.055 L734.787 684.055 L735.346 684.055 L735.906 684.055 L736.465 684.055 L737.024 684.055 L737.583 684.055 L738.143 684.055 L738.702 684.055 L739.261 684.055 L739.82 684.055 L740.38 684.055 L740.939 684.055 L741.498 684.055 L742.057 684.055 L742.617 684.055 L743.176 684.055 L743.735 684.055 L744.294 684.055 L744.854 684.055 L745.413 684.055 L745.972 684.055 L746.531 684.055 L747.091 684.055 L747.65 684.055 L748.209 684.055 L748.768 684.055 L749.328 684.055 L749.887 684.055 L750.446 684.055 L751.005 684.055 L751.565 684.055 L752.124 684.055 L752.683 684.055 L753.242 684.055 L753.802 684.055 L754.361 684.055 L754.92 684.055 L755.479 684.055 L756.039 684.055 L756.598 684.055 L757.157 684.055 L757.716 684.055 L758.276 684.055 L758.835 684.055 L759.394 684.055 L759.953 684.055 L760.513 684.055 L761.072 684.055 L761.631 684.055 L762.19 684.055 L762.75 684.055 L763.309 684.055 L763.868 684.055 L764.427 684.055 L764.987 684.055 L765.546 684.055 L766.105 684.055 L766.664 684.055 L767.224 684.055 L767.783 684.055 L768.342 684.055 L768.901 684.055 L769.461 684.055 L770.02 684.055 L770.579 684.055 L771.138 684.055 L771.698 684.055 L772.257 684.055 L772.816 684.055 L773.375 684.055 L773.935 684.055 L774.494 684.055 L775.053 684.055 L775.612 684.055 L776.172 684.055 L776.731 684.055 L777.29 684.055 L777.849 684.055 L778.409 684.055 L778.968 684.055 L779.527 684.055 L780.086 684.055 L780.646 684.055 L781.205 684.055 L781.764 684.055 L782.323 684.055 L782.883 684.055 L783.442 684.055 L784.001 684.055 L784.56 684.055 L785.12 684.055 L785.679 684.055 L786.238 684.055 L786.797 684.055 L787.357 684.055 L787.916 684.055 L788.475 684.055 L789.034 684.055 L789.594 684.055 L790.153 684.055 L790.712 684.055 L791.271 684.055 L791.831 684.055 L792.39 684.055 L792.949 684.055 L793.508 684.055 L794.068 684.055 L794.627 684.055 L795.186 684.055 L795.745 684.055 L796.305 684.055 L796.864 684.055 L797.423 684.055 L797.982 684.055 L798.542 684.055 L799.101 684.055 L799.66 684.055 L800.219 684.055 L800.779 684.055 L801.338 684.055 L801.897 684.055 L802.456 684.055 L803.016 684.055 L803.575 684.055 L804.134 684.055 L804.693 684.055 L805.253 684.055 L805.812 684.055 L806.371 684.055 L806.931 684.055 L807.49 684.055 L808.049 684.055 L808.608 684.055 L809.168 684.055 L809.727 684.055 L810.286 684.055 L810.845 684.055 L811.405 684.055 L811.964 684.055 L812.523 684.055 L813.082 684.055 L813.642 684.055 L814.201 684.055 L814.76 684.055 L815.319 684.055 L815.879 684.055 L816.438 684.055 L816.997 684.055 L817.556 684.055 L818.116 684.055 L818.675 684.055 L819.234 684.055 L819.793 684.055 L820.353 684.055 L820.912 684.055 L821.471 684.055 L822.03 684.055 L822.59 684.055 L823.149 684.055 L823.708 684.055 L824.267 684.055 L824.827 684.055 L825.386 684.055 L825.945 684.055 L826.504 684.055 L827.064 684.055 L827.623 684.055 L828.182 684.055 L828.741 684.055 L829.301 684.055 L829.86 684.055 L830.419 684.055 L830.978 684.055 L831.538 684.055 L832.097 684.055 L832.656 684.055 L833.215 684.055 L833.775 684.055 L834.334 684.055 L834.893 684.055 L835.452 684.055 L836.012 684.055 L836.571 684.055 L837.13 684.055 L837.689 684.055 L838.249 684.055 L838.808 684.055 L839.367 684.055 L839.926 684.055 L840.486 684.055 L841.045 684.055 L841.604 684.055 L842.163 684.055 L842.723 684.055 L843.282 684.055 L843.841 684.055 L844.4 684.055 L844.96 684.055 L845.519 684.055 L846.078 684.055 L846.637 684.055 L847.197 684.055 L847.756 684.055 L848.315 684.055 L848.874 684.055 L849.434 684.055 L849.993 684.055 L850.552 684.055 L851.111 684.055 L851.671 684.055 L852.23 684.055 L852.789 684.055 L853.348 684.055 L853.908 684.055 L854.467 684.055 L855.026 684.055 L855.585 684.055 L856.145 684.055 L856.704 684.055 L857.263 684.055 L857.822 684.055 L858.382 684.055 L858.941 684.055 L859.5 684.055 L860.059 684.055 L860.619 684.055 L861.178 684.055 L861.737 684.055 L862.296 684.055 L862.856 684.055 L863.415 684.055 L863.974 684.055 L864.533 684.055 L865.093 684.055 L865.652 684.055 L866.211 684.055 L866.77 684.055 L867.33 684.055 L867.889 684.055 L868.448 684.055 L869.007 684.055 L869.567 684.055 L870.126 684.055 L870.685 684.055 L871.244 684.055 L871.804 684.055 L872.363 684.055 L872.922 684.055 L873.481 684.055 L874.041 684.055 L874.6 684.055 L875.159 684.055 L875.718 684.055 L876.278 684.055 L876.837 684.055 L877.396 684.055 L877.955 684.055 L878.515 684.055 L879.074 684.055 L879.633 684.055 L880.192 684.055 L880.752 684.055 L881.311 684.055 L881.87 684.055 L882.429 684.055 L882.989 684.055 L883.548 684.055 L884.107 684.055 L884.666 684.055 L885.226 684.055 L885.785 684.055 L886.344 684.055 L886.903 684.055 L887.463 684.055 L888.022 684.055 L888.581 684.055 L889.14 684.055 L889.7 684.055 L890.259 684.055 L890.818 684.055 L891.377 684.055 L891.937 684.055 L892.496 684.055 L893.055 684.055 L893.614 684.055 L894.174 684.055 L894.733 684.055 L895.292 684.055 L895.851 684.055 L896.411 684.055 L896.97 684.055 L897.529 684.055 L898.088 684.055 L898.648 684.055 L899.207 684.055 L899.766 684.055 L900.325 684.055 L900.885 684.055 L901.444 684.055 L902.003 684.055 L902.562 684.055 L903.122 684.055 L903.681 684.055 L904.24 684.055 L904.799 684.055 L905.359 684.055 L905.918 684.055 L906.477 684.055 L907.036 684.055 L907.596 684.055 L908.155 684.055 L908.714 684.055 L909.273 684.055 L909.833 684.055 L910.392 684.055 L910.951 684.055 L911.51 684.055 L912.07 684.055 L912.629 684.055 L913.188 684.055 L913.747 684.055 L914.307 684.055 L914.866 684.055 L915.425 684.055 L915.984 684.055 L916.544 684.055 L917.103 684.055 L917.662 684.055 L918.221 684.055 L918.781 684.055 L919.34 684.055 L919.899 684.055 L920.458 684.055 L921.018 684.055 L921.577 684.055 L922.136 684.055 L922.695 684.055 L923.255 684.055 L923.814 684.055 L924.373 684.055 L924.932 684.055 L925.492 684.055 L926.051 684.055 L926.61 684.055 L927.169 684.055 L927.729 684.055 L928.288 684.055 L928.847 684.055 L929.406 684.055 L929.966 684.055 L930.525 684.055 L931.084 684.055 L931.644 684.055 L932.203 684.055 L932.762 684.055 L933.321 684.055 L933.881 684.055 L934.44 684.055 L934.999 684.055 L935.558 684.055 L936.118 684.055 L936.677 684.055 L937.236 684.055 L937.795 684.055 L938.355 684.055 L938.914 684.055 L939.473 684.055 L940.032 684.055 L940.592 684.055 L941.151 684.055 L941.71 684.055 L942.269 684.055 L942.829 684.055 L943.388 684.055 L943.947 684.055 L944.506 684.055 L945.066 684.055 L945.625 684.055 L946.184 684.055 L946.743 684.055 L947.303 684.055 L947.862 684.055 L948.421 684.055 L948.98 684.055 L949.54 684.055 L950.099 684.055 L950.658 684.055 L951.217 684.055 L951.777 684.055 L952.336 684.055 L952.895 684.055 L953.454 684.055 L954.014 684.055 L954.573 684.055 L955.132 684.055 L955.691 684.055 L956.251 684.055 L956.81 684.055 L957.369 684.055 L957.928 684.055 L958.488 684.055 L959.047 684.055 L959.606 684.055 L960.165 684.055 L960.725 684.055 L961.284 684.055 L961.843 684.055 L962.402 684.055 L962.962 684.055 L963.521 684.055 L964.08 684.055 L964.639 684.055 L965.199 684.055 L965.758 684.055 L966.317 684.055 L966.876 684.055 L967.436 684.055 L967.995 684.055 L968.554 684.055 L969.113 684.055 L969.673 684.055 L970.232 684.055 L970.791 684.055 L971.35 684.055 L971.91 684.055 L972.469 684.055 L973.028 684.055 L973.587 684.055 L974.147 684.055 L974.706 684.055 L975.265 684.055 L975.824 684.055 L976.384 684.055 L976.943 684.055 L977.502 684.055 L978.061 684.055 L978.621 684.055 L979.18 684.055 L979.739 684.055 L980.298 684.055 L980.858 684.055 L981.417 684.055 L981.976 684.055 L982.535 684.055 L983.095 684.055 L983.654 684.055 L984.213 684.055 L984.772 684.055 L985.332 684.055 L985.891 684.055 L986.45 684.055 L987.009 684.055 L987.569 684.055 L988.128 684.055 L988.687 684.055 L989.246 684.055 L989.806 684.055 L990.365 684.055 L990.924 684.055 L991.483 684.055 L992.043 684.055 L992.602 684.055 L993.161 684.055 L993.72 684.055 L994.28 684.055 L994.839 684.055 L995.398 684.055 L995.957 684.055 L996.517 684.055 L997.076 684.055 L997.635 684.055 L998.194 684.055 L998.754 684.055 L999.313 684.055 L999.872 684.055 L1000.43 684.055 L1000.99 684.055 L1001.55 684.055 L1002.11 684.055 L1002.67 684.055 L1003.23 684.055 L1003.79 684.055 L1004.35 684.055 L1004.91 684.055 L1005.46 684.055 L1006.02 684.055 L1006.58 684.055 L1007.14 684.055 L1007.7 684.055 L1008.26 684.055 L1008.82 684.055 L1009.38 684.055 L1009.94 684.055 L1010.5 684.055 L1011.06 684.055 L1011.62 684.055 L1012.18 684.055 L1012.73 684.055 L1013.29 684.055 L1013.85 684.055 L1014.41 684.055 L1014.97 684.055 L1015.53 684.055 L1016.09 684.055 L1016.65 684.055 L1017.21 684.055 L1017.77 684.055 L1018.33 684.055 L1018.89 684.055 L1019.45 684.055 L1020.01 684.055 L1020.56 684.055 L1021.12 684.055 L1021.68 684.055 L1022.24 684.055 L1022.8 684.055 L1023.36 684.055 L1023.92 684.055 L1024.48 684.055 L1025.04 684.055 L1025.6 684.055 L1026.16 684.055 L1026.72 684.055 L1027.28 684.055 L1027.83 684.055 L1028.39 684.055 L1028.95 684.055 L1029.51 684.055 L1030.07 684.055 L1030.63 684.055 L1031.19 684.055 L1031.75 684.055 L1032.31 684.055 L1032.87 684.055 L1033.43 684.055 L1033.99 684.055 L1034.55 684.055 L1035.1 684.055 L1035.66 684.055 L1036.22 684.055 L1036.78 684.055 L1037.34 684.055 L1037.9 684.055 L1038.46 684.055 L1039.02 684.055 L1039.58 684.055 L1040.14 684.055 L1040.7 684.055 L1041.26 684.055 L1041.82 684.055 L1042.38 684.055 L1042.93 684.055 L1043.49 684.055 L1044.05 684.055 L1044.61 684.055 L1045.17 684.055 L1045.73 684.055 L1046.29 684.055 L1046.85 684.055 L1047.41 684.055 L1047.97 684.055 L1048.53 684.055 L1049.09 684.055 L1049.65 684.055 L1050.2 684.055 L1050.76 684.055 L1051.32 684.055 L1051.88 684.055 L1052.44 684.055 L1053 684.055 L1053.56 684.055 L1054.12 684.055 L1054.68 684.055 L1055.24 684.055 L1055.8 684.055 L1056.36 684.055 L1056.92 684.055 L1057.48 684.055 L1058.03 684.055 L1058.59 684.055 L1059.15 684.055 L1059.71 684.055 L1060.27 684.055 L1060.83 684.055 L1061.39 684.055 L1061.95 684.055 L1062.51 684.055 L1063.07 684.055 L1063.63 684.055 L1064.19 684.055 L1064.75 684.055 L1065.3 684.055 L1065.86 684.055 L1066.42 684.055 L1066.98 684.055 L1067.54 684.055 L1068.1 684.055 L1068.66 684.055 L1069.22 684.055 L1069.78 684.055 L1070.34 684.055 L1070.9 684.055 L1071.46 684.055 L1072.02 684.055 L1072.57 684.055 L1073.13 684.055 L1073.69 684.055 L1074.25 684.055 L1074.81 684.055 L1075.37 684.055 L1075.93 684.055 L1076.49 684.055 L1077.05 684.055 L1077.61 684.055 L1078.17 684.055 L1078.73 684.055 L1079.29 684.055 L1079.85 684.055 L1080.4 684.055 L1080.96 684.055 L1081.52 684.055 L1082.08 684.055 L1082.64 684.055 L1083.2 684.055 L1083.76 684.055 L1084.32 684.055 L1084.88 684.055 L1085.44 684.055 L1086 684.055 L1086.56 684.055 L1087.12 684.055 L1087.67 684.055 L1088.23 684.055 L1088.79 684.055 L1089.35 684.055 L1089.91 684.055 L1090.47 684.055 L1091.03 684.055 L1091.59 684.055 L1092.15 684.055 L1092.71 684.055 L1093.27 684.055 L1093.83 684.055 L1094.39 684.055 L1094.94 684.055 L1095.5 684.055 L1096.06 684.055 L1096.62 684.055 L1097.18 684.055 L1097.74 684.055 L1098.3 684.055 L1098.86 684.055 L1099.42 684.055 L1099.98 684.055 L1100.54 684.055 L1101.1 684.055 L1101.66 684.055 L1102.22 684.055 L1102.77 684.055 L1103.33 684.055 L1103.89 684.055 L1104.45 684.055 L1105.01 684.055 L1105.57 684.055 L1106.13 684.055 L1106.69 684.055 L1107.25 684.055 L1107.81 684.055 L1108.37 684.055 L1108.93 684.055 L1109.49 684.055 L1110.04 684.055 L1110.6 684.055 L1111.16 684.055 L1111.72 684.055 L1112.28 684.055 L1112.84 684.055 L1113.4 684.055 L1113.96 684.055 L1114.52 684.055 L1115.08 684.055 L1115.64 684.055 L1116.2 684.055 L1116.76 684.055 L1117.31 684.055 L1117.87 684.055 L1118.43 684.055 L1118.99 684.055 L1119.55 684.055 L1120.11 684.055 L1120.67 684.055 L1121.23 684.055 L1121.79 684.055 L1122.35 684.055 L1122.91 684.055 L1123.47 684.055 L1124.03 684.055 L1124.59 684.055 L1125.14 684.055 L1125.7 684.055 L1126.26 684.055 L1126.82 684.055 L1127.38 684.055 L1127.94 684.055 L1128.5 684.055 L1129.06 684.055 L1129.62 684.055 L1130.18 684.055 L1130.74 684.055 L1131.3 684.055 L1131.86 684.055 L1132.41 684.055 L1132.97 684.055 L1133.53 684.055 L1134.09 684.055 L1134.65 684.055 L1135.21 684.055 L1135.77 684.055 L1136.33 684.055 L1136.89 684.055 L1137.45 684.055 L1138.01 684.055 L1138.57 684.055 L1139.13 684.055 L1139.68 684.055 L1140.24 684.055 L1140.8 684.055 L1141.36 684.055 L1141.92 684.055 L1142.48 684.055 L1143.04 684.055 L1143.6 684.055 L1144.16 684.055 L1144.72 684.055 L1145.28 684.055 L1145.84 684.055 L1146.4 684.055 L1146.96 684.055 L1147.51 684.055 L1148.07 684.055 L1148.63 684.055 L1149.19 684.055 L1149.75 684.055 L1150.31 684.055 L1150.87 684.055 L1151.43 684.055 L1151.99 684.055 L1152.55 684.055 L1153.11 684.055 L1153.67 684.055 L1154.23 684.055 L1154.78 684.055 L1155.34 684.055 L1155.9 684.055 L1156.46 684.055 L1157.02 684.055 L1157.58 684.055 L1158.14 684.055 L1158.7 684.055 L1159.26 684.055 L1159.82 684.055 L1160.38 684.055 L1160.94 684.055 L1161.5 684.055 L1162.05 684.055 L1162.61 684.055 L1163.17 684.055 L1163.73 684.055 L1164.29 684.055 L1164.85 684.055 L1165.41 684.055 L1165.97 684.055 L1166.53 684.055 L1167.09 684.055 L1167.65 684.055 L1168.21 684.055 L1168.77 684.055 L1169.33 684.055 L1169.88 684.055 L1170.44 684.055 L1171 684.055 L1171.56 684.055 L1172.12 684.055 L1172.68 684.055 L1173.24 684.055 L1173.8 684.055 L1174.36 684.055 L1174.92 684.055 L1175.48 684.055 L1176.04 684.055 L1176.6 684.055 L1177.15 684.055 L1177.71 684.055 L1178.27 684.055 L1178.83 684.055 L1179.39 684.055 L1179.95 684.055 L1180.51 684.055 L1181.07 684.055 L1181.63 684.055 L1182.19 684.055 L1182.75 684.055 L1183.31 684.055 L1183.87 684.055 L1184.43 684.055 L1184.98 684.055 L1185.54 684.055 L1186.1 684.055 L1186.66 684.055 L1187.22 684.055 L1187.78 684.055 L1188.34 684.055 L1188.9 684.055 L1189.46 684.055 L1190.02 684.055 L1190.58 684.055 L1191.14 684.055 L1191.7 684.055 L1192.25 684.055 L1192.81 684.055 L1193.37 684.055 L1193.93 684.055 L1194.49 684.055 L1195.05 684.055 L1195.61 684.055 L1196.17 684.055 L1196.73 684.055 L1197.29 684.055 L1197.85 684.055 L1198.41 684.055 L1198.97 684.055 L1199.52 684.055 L1200.08 684.055 L1200.64 684.055 L1201.2 684.055 L1201.76 684.055 L1202.32 684.055 L1202.88 684.055 L1203.44 684.055 L1204 684.055 L1204.56 684.055 L1205.12 684.055 L1205.68 684.055 L1206.24 684.055 L1206.8 684.055 L1207.35 684.055 L1207.91 684.055 L1208.47 684.055 L1209.03 684.055 L1209.59 684.055 L1210.15 684.055 L1210.71 684.055 L1211.27 684.055 L1211.83 684.055 L1212.39 684.055 L1212.95 684.055 L1213.51 684.055 L1214.07 684.055 L1214.62 684.055 L1215.18 684.055 L1215.74 684.055 L1216.3 684.055 L1216.86 684.055 L1217.42 684.055 L1217.98 684.055 L1218.54 684.055 L1219.1 684.055 L1219.66 684.055 L1220.22 684.055 L1220.78 684.055 L1221.34 684.055 L1221.89 684.055 L1222.45 684.055 L1223.01 684.055 L1223.57 684.055 L1224.13 684.055 L1224.69 684.055 L1225.25 684.055 L1225.81 684.055 L1226.37 684.055 L1226.93 684.055 L1227.49 684.055 L1228.05 684.055 L1228.61 684.055 L1229.17 684.055 L1229.72 684.055 L1230.28 684.055 L1230.84 684.055 L1231.4 684.055 L1231.96 684.055 L1232.52 684.055 L1233.08 684.055 L1233.64 684.055 L1234.2 684.055 L1234.76 684.055 L1235.32 684.055 L1235.88 684.055 L1236.44 684.055 L1236.99 684.055 L1237.55 684.055 L1238.11 684.055 L1238.67 684.055 L1239.23 684.055 L1239.79 684.055 L1240.35 684.055 L1240.91 684.055 L1241.47 684.055 L1242.03 684.055 L1242.59 684.055 L1243.15 684.055 L1243.71 684.055 L1244.26 684.055 L1244.82 684.055 L1245.38 684.055 L1245.94 684.055 L1246.5 684.055 L1247.06 684.055 L1247.62 684.055 L1248.18 684.055 L1248.74 684.055 L1249.3 684.055 L1249.86 684.055 L1250.42 684.055 L1250.98 684.055 L1251.54 684.055 L1252.09 684.055 L1252.65 684.055 L1253.21 684.055 L1253.77 684.055 L1254.33 684.055 L1254.89 684.055 L1255.45 684.055 L1256.01 684.055 L1256.57 684.055 L1257.13 684.055 L1257.69 684.055 L1258.25 684.055 L1258.81 684.055 L1259.36 684.055 L1259.92 684.055 L1260.48 684.055 L1261.04 684.055 L1261.6 684.055 L1262.16 684.055 L1262.72 684.055 L1263.28 684.055 L1263.84 684.055 L1264.4 684.055 L1264.96 684.055 L1265.52 684.055 L1266.08 684.055 L1266.63 684.055 L1267.19 684.055 L1267.75 684.055 L1268.31 684.055 L1268.87 684.055 L1269.43 684.055 L1269.99 684.055 L1270.55 684.055 L1271.11 684.055 L1271.67 684.055 L1272.23 684.055 L1272.79 684.055 L1273.35 684.055 L1273.91 684.055 L1274.46 684.055 L1275.02 684.055 L1275.58 684.055 L1276.14 684.055 L1276.7 684.055 L1277.26 684.055 L1277.82 684.055 L1278.38 684.055 L1278.94 684.055 L1279.5 684.055 L1280.06 684.055 L1280.62 684.055 L1281.18 684.055 L1281.73 684.055 L1282.29 684.055 L1282.85 684.055 L1283.41 684.055 L1283.97 684.055 L1284.53 684.055 L1285.09 684.055 L1285.65 684.055 L1286.21 684.055 L1286.77 684.055 L1287.33 684.055 L1287.89 684.055 L1288.45 684.055 L1289 684.055 L1289.56 684.055 L1290.12 684.055 L1290.68 684.055 L1291.24 684.055 L1291.8 684.055 L1292.36 684.055 L1292.92 684.055 L1293.48 684.055 L1294.04 684.055 L1294.6 684.055 L1295.16 684.055 L1295.72 684.055 L1296.28 684.055 L1296.83 684.055 L1297.39 684.055 L1297.95 684.055 L1298.51 684.055 L1299.07 684.055 L1299.63 684.055 L1300.19 684.055 L1300.75 684.055 L1301.31 684.055 L1301.87 684.055 L1302.43 684.055 L1302.99 684.055 L1303.55 684.055 L1304.1 684.055 L1304.66 684.055 L1305.22 684.055 L1305.78 684.055 L1306.34 684.055 L1306.9 684.055 L1307.46 684.055 L1308.02 684.055 L1308.58 684.055 L1309.14 684.055 L1309.7 684.055 L1310.26 684.055 L1310.82 684.055 L1311.38 684.055 L1311.93 684.055 L1312.49 684.055 L1313.05 684.055 L1313.61 684.055 L1314.17 684.055 L1314.73 684.055 L1315.29 684.055 L1315.85 684.055 L1316.41 684.055 L1316.97 684.055 L1317.53 684.055 L1318.09 684.055 L1318.65 684.055 L1319.2 684.055 L1319.76 684.055 L1320.32 684.055 L1320.88 684.055 L1321.44 684.055 L1322 684.055 L1322.56 684.055 L1323.12 684.055 L1323.68 684.055 L1324.24 684.055 L1324.8 684.055 L1325.36 684.055 L1325.92 684.055 L1326.47 684.055 L1327.03 684.055 L1327.59 684.055 L1328.15 684.055 L1328.71 684.055 L1329.27 684.055 L1329.83 684.055 L1330.39 684.055 L1330.95 684.055 L1331.51 684.055 L1332.07 684.055 L1332.63 684.055 L1333.19 684.055 L1333.75 684.055 L1334.3 684.055 L1334.86 684.055 L1335.42 684.055 L1335.98 684.055 L1336.54 684.055 L1337.1 684.055 L1337.66 684.055 L1338.22 684.055 L1338.78 684.055 L1339.34 684.055 L1339.9 684.055 L1340.46 684.055 L1341.02 684.055 L1341.57 684.055 L1342.13 684.055 L1342.69 684.055 L1343.25 684.055 L1343.81 684.055 L1344.37 684.055 L1344.93 684.055 L1345.49 684.055 L1346.05 684.055 L1346.61 684.055 L1347.17 684.055 L1347.73 684.055 L1348.29 684.055 L1348.84 684.055 L1349.4 684.055 L1349.96 684.055 L1350.52 684.055 L1351.08 684.055 L1351.64 684.055 L1352.2 684.055 L1352.76 684.055 L1353.32 684.055 L1353.88 684.055 L1354.44 684.055 L1355 684.055 L1355.56 684.055 L1356.12 684.055 L1356.67 684.055 L1357.23 684.055 L1357.79 684.055 L1358.35 684.055 L1358.91 684.055 L1359.47 684.055 L1360.03 684.055 L1360.59 684.055 L1361.15 684.055 L1361.71 684.055 L1362.27 684.055 L1362.83 684.055 L1363.39 684.055 L1363.94 684.055 L1364.5 684.055 L1365.06 684.055 L1365.62 684.055 L1366.18 684.055 L1366.74 684.055 L1367.3 684.055 L1367.86 684.055 L1368.42 684.055 L1368.98 684.055 L1369.54 684.055 L1370.1 684.055 L1370.66 684.055 L1371.21 684.055 L1371.77 684.055 L1372.33 684.055 L1372.89 684.055 L1373.45 684.055 L1374.01 684.055 L1374.57 684.055 L1375.13 684.055 L1375.69 684.055 L1376.25 684.055 L1376.81 684.055 L1377.37 684.055 L1377.93 684.055 L1378.49 684.055 L1379.04 684.055 L1379.6 684.055 L1380.16 684.055 L1380.72 684.055 L1381.28 684.055 L1381.84 684.055 L1382.4 684.055 L1382.96 684.055 L1383.52 684.055 L1384.08 684.055 L1384.64 684.055 L1385.2 684.055 L1385.76 684.055 L1386.31 684.055 L1386.87 684.055 L1387.43 684.055 L1387.99 684.055 L1388.55 684.055 L1389.11 684.055 L1389.67 684.055 L1390.23 684.055 L1390.79 684.055 L1391.35 684.055 L1391.91 684.055 L1392.47 684.055 L1393.03 684.055 L1393.58 684.055 L1394.14 684.055 L1394.7 684.055 L1395.26 684.055 L1395.82 684.055 L1396.38 684.055 L1396.94 684.055 L1397.5 684.055 L1398.06 684.055 L1398.62 684.055 L1399.18 684.055 L1399.74 684.055 L1400.3 684.055 L1400.86 684.055 L1401.41 684.055 L1401.97 684.055 L1402.53 684.055 L1403.09 684.055 L1403.65 684.055 L1404.21 684.055 L1404.77 684.055 L1405.33 684.055 L1405.89 684.055 L1406.45 684.055 L1407.01 684.055 L1407.57 684.055 L1408.13 684.055 L1408.68 684.055 L1409.24 684.055 L1409.8 684.055 L1410.36 684.055 L1410.92 684.055 L1411.48 684.055 L1412.04 684.055 L1412.6 684.055 L1413.16 684.055 L1413.72 684.055 L1414.28 684.055 L1414.84 684.055 L1415.4 684.055 L1415.95 684.055 L1416.51 684.055 L1417.07 684.055 L1417.63 684.055 L1418.19 684.055 L1418.75 684.055 L1419.31 684.055 L1419.87 684.055 L1420.43 684.055 L1420.99 684.055 L1421.55 684.055 L1422.11 684.055 L1422.67 684.055 L1423.23 684.055 L1423.78 684.055 L1424.34 684.055 L1424.9 684.055 L1425.46 684.055 L1426.02 684.055 L1426.58 684.055 L1427.14 684.055 L1427.7 684.055 L1428.26 684.055 L1428.82 684.055 L1429.38 684.055 L1429.94 684.055 L1430.5 684.055 L1431.05 684.055 L1431.61 684.055 L1432.17 684.055 L1432.73 684.055 L1433.29 684.055 L1433.85 684.055 L1434.41 684.055 L1434.97 684.055 L1435.53 684.055 L1436.09 684.055 L1436.65 684.055 L1437.21 684.055 L1437.77 684.055 L1438.33 684.055 L1438.88 684.055 L1439.44 684.055 L1440 684.055 L1440.56 684.055 L1441.12 684.055 L1441.68 684.055 L1442.24 684.055 L1442.8 684.055 L1443.36 684.055 L1443.92 684.055 L1444.48 684.055 L1445.04 684.055 L1445.6 684.055 L1446.15 684.055 L1446.71 684.055 L1447.27 684.055 L1447.83 684.055 L1448.39 684.055 L1448.95 684.055 L1449.51 684.055 L1450.07 684.055 L1450.63 684.055 L1451.19 684.055 L1451.75 684.055 L1452.31 684.055 L1452.87 684.055 L1453.42 684.055 L1453.98 684.055 L1454.54 684.055 L1455.1 684.055 L1455.66 684.055 L1456.22 684.055 L1456.78 684.055 L1457.34 684.055 L1457.9 684.055 L1458.46 684.055 L1459.02 684.055 L1459.58 684.055 L1460.14 684.055 L1460.7 684.055 L1461.25 684.055 L1461.81 684.055 L1462.37 684.055 L1462.93 684.055 L1463.49 684.055 L1464.05 684.055 L1464.61 684.055 L1465.17 684.055 L1465.73 684.055 L1466.29 684.055 L1466.85 684.055 L1467.41 684.055 L1467.97 684.055 L1468.52 684.055 L1469.08 684.055 L1469.64 684.055 L1470.2 684.055 L1470.76 684.055 L1471.32 684.055 L1471.88 684.055 L1472.44 684.055 L1473 684.055 L1473.56 684.055 L1474.12 684.055 L1474.68 684.055 L1475.24 684.055 L1475.79 684.055 L1476.35 684.055 L1476.91 684.055 L1477.47 684.055 L1478.03 684.055 L1478.59 684.055 L1479.15 684.055 L1479.71 684.055 L1480.27 684.055 L1480.83 684.055 L1481.39 684.055 L1481.95 684.055 L1482.51 684.055 L1483.07 684.055 L1483.62 684.055 L1484.18 684.055 L1484.74 684.055 L1485.3 684.055 L1485.86 684.055 L1486.42 684.055 L1486.98 684.055 L1487.54 684.055 L1488.1 684.055 L1488.66 684.055 L1489.22 684.055 L1489.78 684.055 L1490.34 684.055 L1490.89 684.055 L1491.45 684.055 L1492.01 684.055 L1492.57 684.055 L1493.13 684.055 L1493.69 684.055 L1494.25 684.055 L1494.81 684.055 L1495.37 684.055 L1495.93 684.055 L1496.49 684.055 L1497.05 684.055 L1497.61 684.055 L1498.16 684.055 L1498.72 684.055 L1499.28 684.055 L1499.84 684.055 L1500.4 684.055 L1500.96 684.055 L1501.52 684.055 L1502.08 684.055 L1502.64 684.055 L1503.2 684.055 L1503.76 684.055 L1504.32 684.055 L1504.88 684.055 L1505.44 684.055 L1505.99 684.055 L1506.55 684.055 L1507.11 684.055 L1507.67 684.055 L1508.23 684.055 L1508.79 684.055 L1509.35 684.055 L1509.91 684.055 L1510.47 684.055 L1511.03 684.055 L1511.59 684.055 L1512.15 684.055 L1512.71 684.055 L1513.26 684.055 L1513.82 684.055 L1514.38 684.055 L1514.94 684.055 L1515.5 684.055 L1516.06 684.055 L1516.62 684.055 L1517.18 684.055 L1517.74 684.055 L1518.3 684.055 L1518.86 684.055 L1519.42 684.055 L1519.98 684.055 L1520.53 684.055 L1521.09 684.055 L1521.65 684.055 L1522.21 684.055 L1522.77 684.055 L1523.33 684.055 L1523.89 684.055 L1524.45 684.055 L1525.01 684.055 L1525.57 684.055 L1526.13 684.055 L1526.69 684.055 L1527.25 684.055 L1527.81 684.055 L1528.36 684.055 L1528.92 684.055 L1529.48 684.055 L1530.04 684.055 L1530.6 684.055 L1531.16 684.055 L1531.72 684.055 L1532.28 684.055 L1532.84 684.055 L1533.4 684.055 L1533.96 684.055 L1534.52 684.055 L1535.08 684.055 L1535.63 684.055 L1536.19 684.055 L1536.75 684.055 L1537.31 684.055 L1537.87 684.055 L1538.43 684.055 L1538.99 684.055 L1539.55 684.055 L1540.11 684.055 L1540.67 684.055 L1541.23 684.055 L1541.79 684.055 L1542.35 684.055 L1542.9 684.055 L1543.46 684.055 L1544.02 684.055 L1544.58 684.055 L1545.14 684.055 L1545.7 684.055 L1546.26 684.055 L1546.82 684.055 L1547.38 684.055 L1547.94 684.055 L1548.5 684.055 L1549.06 684.055 L1549.62 684.055 L1550.18 684.055 L1550.73 684.055 L1551.29 684.055 L1551.85 684.055 L1552.41 684.055 L1552.97 684.055 L1553.53 684.055 L1554.09 684.055 L1554.65 684.055 L1555.21 684.055 L1555.77 684.055 L1556.33 684.055 L1556.89 684.055 L1557.45 684.055 L1558 684.055 L1558.56 684.055 L1559.12 684.055 L1559.68 684.055 L1560.24 684.055 L1560.8 684.055 L1561.36 684.055 L1561.92 684.055 L1562.48 684.055 L1563.04 684.055 L1563.6 684.055 L1564.16 684.055 L1564.72 684.055 L1565.28 684.055 L1565.83 684.055 L1566.39 684.055 L1566.95 684.055 L1567.51 684.055 L1568.07 684.055 L1568.63 684.055 L1569.19 684.055 L1569.75 684.055 L1570.31 684.055 L1570.87 684.055 L1571.43 684.055 L1571.99 684.055 L1572.55 684.055 L1573.1 684.055 L1573.66 684.055 L1574.22 684.055 L1574.78 684.055 L1575.34 684.055 L1575.9 684.055 L1576.46 684.055 L1577.02 684.055 L1577.58 684.055 L1578.14 684.055 L1578.7 684.055 L1579.26 684.055 L1579.82 684.055 L1580.37 684.055 L1580.93 684.055 L1581.49 684.055 L1582.05 684.055 L1582.61 684.055 L1583.17 684.055 L1583.73 684.055 L1584.29 684.055 L1584.85 684.055 L1585.41 684.055 L1585.97 684.055 L1586.53 684.055 L1587.09 684.055 L1587.65 684.055 L1588.2 684.055 L1588.76 684.055 L1589.32 684.055 L1589.88 684.055 L1590.44 684.055 L1591 684.055 L1591.56 684.055 L1592.12 684.055 L1592.68 684.055 L1593.24 684.055 L1593.8 684.055 L1594.36 684.055 L1594.92 684.055 L1595.47 684.055 L1596.03 684.055 L1596.59 684.055 L1597.15 684.055 L1597.71 684.055 L1598.27 684.055 L1598.83 684.055 L1599.39 684.055 L1599.95 684.055 L1600.51 684.055 L1601.07 684.055 L1601.63 684.055 L1602.19 684.055 L1602.74 684.055 L1603.3 684.055 L1603.86 684.055 L1604.42 684.055 L1604.98 684.055 L1605.54 684.055 L1606.1 684.055 L1606.66 684.055 L1607.22 684.055 L1607.78 684.055 L1608.34 684.055 L1608.9 684.055 L1609.46 684.055 L1610.02 684.055 L1610.57 684.055 L1611.13 684.055 L1611.69 684.055 L1612.25 684.055 L1612.81 684.055 L1613.37 684.055 L1613.93 684.055 L1614.49 684.055 L1615.05 684.055 L1615.61 684.055 L1616.17 684.055 L1616.73 684.055 L1617.29 684.055 L1617.84 684.055 L1618.4 684.055 L1618.96 684.055 L1619.52 684.055 L1620.08 684.055 L1620.64 684.055 L1621.2 684.055 L1621.76 684.055 L1622.32 684.055 L1622.88 684.055 L1623.44 684.055 L1624 684.055 L1624.56 684.055 L1625.11 684.055 L1625.67 684.055 L1626.23 684.055 L1626.79 684.055 L1627.35 684.055 L1627.91 684.055 L1628.47 684.055 L1629.03 684.055 L1629.59 684.055 L1630.15 684.055 L1630.71 684.055 L1631.27 684.055 L1631.83 684.055 L1632.39 684.055 L1632.94 684.055 L1633.5 684.055 L1634.06 684.055 L1634.62 684.055 L1635.18 684.055 L1635.74 684.055 L1636.3 684.055 L1636.86 684.055 L1637.42 684.055 L1637.98 684.055 L1638.54 684.055 L1639.1 684.055 L1639.66 684.055 L1640.21 684.055 L1640.77 684.055 L1641.33 684.055 L1641.89 684.055 L1642.45 684.055 L1643.01 684.055 L1643.57 684.055 L1644.13 684.055 L1644.69 684.055 L1645.25 684.055 L1645.81 684.055 L1646.37 684.055 L1646.93 684.055 L1647.48 684.055 L1648.04 684.055 L1648.6 684.055 L1649.16 684.055 L1649.72 684.055 L1650.28 684.055 L1650.84 684.055 L1651.4 684.055 L1651.96 684.055 L1652.52 684.055 L1653.08 684.055 L1653.64 684.055 L1654.2 684.055 L1654.76 684.055 L1655.31 684.055 L1655.87 684.055 L1656.43 684.055 L1656.99 684.055 L1657.55 684.055 L1658.11 684.055 L1658.67 684.055 L1659.23 684.055 L1659.79 684.055 L1660.35 684.055 L1660.91 684.055 L1661.47 684.055 L1662.03 684.055 L1662.58 684.055 L1663.14 684.055 L1663.7 684.055 L1664.26 684.055 L1664.82 684.055 L1665.38 684.055 L1665.94 684.055 L1666.5 684.055 L1667.06 684.055 L1667.62 684.055 L1668.18 684.055 L1668.74 684.055 L1669.3 684.055 L1669.85 684.055 L1670.41 684.055 L1670.97 684.055 L1671.53 684.055 L1672.09 684.055 L1672.65 684.055 L1673.21 684.055 L1673.77 684.055 L1674.33 684.055 L1674.89 684.055 L1675.45 684.055 L1676.01 684.055 L1676.57 684.055 L1677.13 684.055 L1677.68 684.055 L1678.24 684.055 L1678.8 684.055 L1679.36 684.055 L1679.92 684.055 L1680.48 684.055 L1681.04 684.055 L1681.6 684.055 L1682.16 684.055 L1682.72 684.055 L1683.28 684.055 L1683.84 684.055 L1684.4 684.055 L1684.95 684.055 L1685.51 684.055 L1686.07 684.055 L1686.63 684.055 L1687.19 684.055 L1687.75 684.055 L1688.31 684.055 L1688.87 684.055 L1689.43 684.055 L1689.99 684.055 L1690.55 684.055 L1691.11 684.055 L1691.67 684.055 L1692.23 684.055 L1692.78 684.055 L1693.34 684.055 L1693.9 684.055 L1694.46 684.055 L1695.02 684.055 L1695.58 684.055 L1696.14 684.055 L1696.7 684.055 L1697.26 684.055 L1697.82 684.055 L1698.38 684.055 L1698.94 684.055 L1699.5 684.055 L1700.05 684.055 L1700.61 684.055 L1701.17 684.055 L1701.73 684.055 L1702.29 684.055 L1702.85 684.055 L1703.41 684.055 L1703.97 684.055 L1704.53 684.055 L1705.09 684.055 L1705.65 684.055 L1706.21 684.055 L1706.77 684.055 L1707.32 684.055 L1707.88 684.055 L1708.44 684.055 L1709 684.055 L1709.56 684.055 L1710.12 684.055 L1710.68 684.055 L1711.24 684.055 L1711.8 684.055 L1712.36 684.055 L1712.92 684.055 L1713.48 684.055 L1714.04 684.055 L1714.6 684.055 L1715.15 684.055 L1715.71 684.055 L1716.27 684.055 L1716.83 684.055 L1717.39 684.055 L1717.95 684.055 L1718.51 684.055 L1719.07 684.055 L1719.63 684.055 L1720.19 684.055 L1720.75 684.055 L1721.31 684.055 L1721.87 684.055 L1722.42 684.055 L1722.98 684.055 L1723.54 684.055 L1724.1 684.055 L1724.66 684.055 L1725.22 684.055 L1725.78 684.055 L1726.34 684.055 L1726.9 684.055 L1727.46 684.055 L1728.02 684.055 L1728.58 684.055 L1729.14 684.055 L1729.69 684.055 L1730.25 684.055 L1730.81 684.055 L1731.37 684.055 L1731.93 684.055 L1732.49 684.055 L1733.05 684.055 L1733.61 684.055 L1734.17 684.055 L1734.73 684.055 L1735.29 684.055 L1735.85 684.055 L1736.41 684.055 L1736.97 684.055 L1737.52 684.055 L1738.08 684.055 L1738.64 684.055 L1739.2 684.055 L1739.76 684.055 L1740.32 684.055 L1740.88 684.055 L1741.44 684.055 L1742 684.055 L1742.56 684.055 L1743.12 684.055 L1743.68 684.055 L1744.24 684.055 L1744.79 684.055 L1745.35 684.055 L1745.91 684.055 L1746.47 684.055 L1747.03 684.055 L1747.59 684.055 L1748.15 684.055 L1748.71 684.055 L1749.27 684.055 L1749.83 684.055 L1750.39 684.055 L1750.95 684.055 L1751.51 684.055 L1752.06 684.055 L1752.62 684.055 L1753.18 684.055 L1753.74 684.055 L1754.3 684.055 L1754.86 684.055 L1755.42 684.055 L1755.98 684.055 L1756.54 684.055 L1757.1 684.055 L1757.66 684.055 L1758.22 684.055 L1758.78 684.055 L1759.34 684.055 L1759.89 684.055 L1760.45 684.055 L1761.01 684.055 L1761.57 684.055 L1762.13 684.055 L1762.69 684.055 L1763.25 684.055 L1763.81 684.055 L1764.37 684.055 L1764.93 684.055 L1765.49 684.055 L1766.05 684.055 L1766.61 684.055 L1767.16 684.055 L1767.72 684.055 L1768.28 684.055 L1768.84 684.055 L1769.4 684.055 L1769.96 684.055 L1770.52 684.055 L1771.08 684.055 L1771.64 684.055 L1772.2 684.055 L1772.76 684.055 L1773.32 684.055 L1773.88 684.055 L1774.43 684.055 L1774.99 684.055 L1775.55 684.055 L1776.11 684.055 L1776.67 684.055 L1777.23 684.055 L1777.79 684.055 L1778.35 684.055 L1778.91 684.055 L1779.47 684.055 L1780.03 684.055 L1780.59 684.055 L1781.15 684.055 L1781.71 684.055 L1782.26 684.055 L1782.82 684.055 L1783.38 684.055 L1783.94 684.055 L1784.5 684.055 L1785.06 684.055 L1785.62 684.055 L1786.18 684.055 L1786.74 684.055 L1787.3 684.055 L1787.86 684.055 L1788.42 684.055 L1788.98 684.055 L1789.53 684.055 L1790.09 684.055 L1790.65 684.055 L1791.21 684.055 L1791.77 684.055 L1792.33 684.055 L1792.89 684.055 L1793.45 684.055 L1794.01 684.055 L1794.57 684.055 L1795.13 684.055 L1795.69 684.055 L1796.25 684.055 L1796.8 684.055 L1797.36 684.055 L1797.92 684.055 L1798.48 684.055 L1799.04 684.055 L1799.6 684.055 L1800.16 684.055 L1800.72 684.055 L1801.28 684.055 L1801.84 684.055 L1802.4 684.055 L1802.96 684.055 L1803.52 684.055 L1804.08 684.055 L1804.63 684.055 L1805.19 684.055 L1805.75 684.055 L1806.31 684.055 L1806.87 684.055 L1807.43 684.055 L1807.99 684.055 L1808.55 684.055 L1809.11 684.055 L1809.67 684.055 L1810.23 684.055 L1810.79 684.055 L1811.35 684.055 L1811.9 684.055 L1812.46 684.055 L1813.02 684.055 L1813.58 684.055 L1814.14 684.055 L1814.7 684.055 L1815.26 684.055 L1815.82 684.055 L1816.38 684.055 L1816.94 684.055 L1817.5 684.055 L1818.06 684.055 L1818.62 684.055 L1819.18 684.055 L1819.73 684.055 L1820.29 684.055 L1820.85 684.055 L1821.41 684.055 L1821.97 684.055 L1822.53 684.055 L1823.09 684.055 L1823.65 684.055 L1824.21 684.055 L1824.77 684.055 L1825.33 684.055 L1825.89 684.055 L1826.45 684.055 L1827 684.055 L1827.56 684.055 L1828.12 684.055 L1828.68 684.055 L1829.24 684.055 L1829.8 684.055 L1830.36 684.055 L1830.92 684.055 L1831.48 684.055 L1832.04 684.055 L1832.6 684.055 L1833.16 684.055 L1833.72 684.055 L1834.27 684.055 L1834.83 684.055 L1835.39 684.055 L1835.95 684.055 L1836.51 684.055 L1837.07 684.055 L1837.63 684.055 L1838.19 684.055 L1838.19 681.976 L1837.63 681.976 L1837.07 681.976 L1836.51 681.976 L1835.95 681.976 L1835.39 681.976 L1834.83 681.976 L1834.27 681.976 L1833.72 681.976 L1833.16 681.976 L1832.6 681.976 L1832.04 681.976 L1831.48 681.976 L1830.92 681.976 L1830.36 681.976 L1829.8 681.976 L1829.24 681.976 L1828.68 681.976 L1828.12 681.976 L1827.56 681.976 L1827 681.976 L1826.45 681.976 L1825.89 681.976 L1825.33 681.976 L1824.77 681.976 L1824.21 681.976 L1823.65 681.976 L1823.09 681.976 L1822.53 681.976 L1821.97 681.976 L1821.41 681.976 L1820.85 681.976 L1820.29 681.976 L1819.73 681.976 L1819.18 681.976 L1818.62 681.976 L1818.06 681.976 L1817.5 681.976 L1816.94 681.976 L1816.38 681.976 L1815.82 681.976 L1815.26 681.976 L1814.7 681.976 L1814.14 681.976 L1813.58 681.976 L1813.02 681.976 L1812.46 681.976 L1811.9 681.976 L1811.35 681.976 L1810.79 681.976 L1810.23 681.976 L1809.67 681.976 L1809.11 681.976 L1808.55 681.976 L1807.99 681.976 L1807.43 681.976 L1806.87 681.976 L1806.31 681.976 L1805.75 681.976 L1805.19 681.976 L1804.63 681.976 L1804.08 681.976 L1803.52 681.976 L1802.96 681.976 L1802.4 681.976 L1801.84 681.976 L1801.28 681.976 L1800.72 681.976 L1800.16 681.976 L1799.6 681.976 L1799.04 681.976 L1798.48 681.976 L1797.92 681.976 L1797.36 681.976 L1796.8 681.976 L1796.25 681.976 L1795.69 681.976 L1795.13 681.976 L1794.57 681.976 L1794.01 681.976 L1793.45 681.976 L1792.89 681.976 L1792.33 681.976 L1791.77 681.976 L1791.21 681.976 L1790.65 681.976 L1790.09 681.976 L1789.53 681.976 L1788.98 681.976 L1788.42 681.976 L1787.86 681.976 L1787.3 681.976 L1786.74 681.976 L1786.18 681.976 L1785.62 681.976 L1785.06 681.976 L1784.5 681.976 L1783.94 681.976 L1783.38 681.976 L1782.82 681.976 L1782.26 681.976 L1781.71 681.976 L1781.15 681.976 L1780.59 681.976 L1780.03 681.976 L1779.47 681.976 L1778.91 681.976 L1778.35 681.976 L1777.79 681.976 L1777.23 681.976 L1776.67 681.976 L1776.11 681.976 L1775.55 681.976 L1774.99 681.976 L1774.43 681.976 L1773.88 681.976 L1773.32 681.976 L1772.76 681.976 L1772.2 681.976 L1771.64 681.976 L1771.08 681.976 L1770.52 681.976 L1769.96 681.976 L1769.4 681.976 L1768.84 681.976 L1768.28 681.976 L1767.72 681.976 L1767.16 681.976 L1766.61 681.976 L1766.05 681.976 L1765.49 681.976 L1764.93 681.976 L1764.37 681.976 L1763.81 681.976 L1763.25 681.976 L1762.69 681.976 L1762.13 681.976 L1761.57 681.976 L1761.01 681.976 L1760.45 681.976 L1759.89 681.976 L1759.34 681.976 L1758.78 681.976 L1758.22 681.976 L1757.66 681.976 L1757.1 681.976 L1756.54 681.976 L1755.98 681.976 L1755.42 681.976 L1754.86 681.976 L1754.3 681.976 L1753.74 681.976 L1753.18 681.976 L1752.62 681.976 L1752.06 681.976 L1751.51 681.976 L1750.95 681.976 L1750.39 681.976 L1749.83 681.976 L1749.27 681.976 L1748.71 681.976 L1748.15 681.976 L1747.59 681.976 L1747.03 681.976 L1746.47 681.976 L1745.91 681.976 L1745.35 681.976 L1744.79 681.976 L1744.24 681.976 L1743.68 681.976 L1743.12 681.976 L1742.56 681.976 L1742 681.976 L1741.44 681.976 L1740.88 681.976 L1740.32 681.976 L1739.76 681.976 L1739.2 681.976 L1738.64 681.976 L1738.08 681.976 L1737.52 681.976 L1736.97 681.976 L1736.41 681.976 L1735.85 681.976 L1735.29 681.976 L1734.73 681.976 L1734.17 681.976 L1733.61 681.976 L1733.05 681.976 L1732.49 681.976 L1731.93 681.976 L1731.37 681.976 L1730.81 681.976 L1730.25 681.976 L1729.69 681.976 L1729.14 681.976 L1728.58 681.976 L1728.02 681.976 L1727.46 681.976 L1726.9 681.976 L1726.34 681.976 L1725.78 681.976 L1725.22 681.976 L1724.66 681.976 L1724.1 681.976 L1723.54 681.976 L1722.98 681.976 L1722.42 681.976 L1721.87 681.976 L1721.31 681.976 L1720.75 681.976 L1720.19 681.976 L1719.63 681.976 L1719.07 681.976 L1718.51 681.976 L1717.95 681.976 L1717.39 681.976 L1716.83 681.976 L1716.27 681.976 L1715.71 681.976 L1715.15 681.976 L1714.6 681.976 L1714.04 681.976 L1713.48 681.976 L1712.92 681.976 L1712.36 681.976 L1711.8 681.976 L1711.24 681.976 L1710.68 681.976 L1710.12 681.976 L1709.56 681.976 L1709 681.976 L1708.44 681.976 L1707.88 681.976 L1707.32 681.976 L1706.77 681.976 L1706.21 681.976 L1705.65 681.976 L1705.09 681.976 L1704.53 681.976 L1703.97 681.976 L1703.41 681.976 L1702.85 681.976 L1702.29 681.976 L1701.73 681.976 L1701.17 681.976 L1700.61 681.976 L1700.05 681.976 L1699.5 681.976 L1698.94 681.976 L1698.38 681.976 L1697.82 681.976 L1697.26 681.976 L1696.7 681.976 L1696.14 681.976 L1695.58 681.976 L1695.02 681.976 L1694.46 681.976 L1693.9 681.976 L1693.34 681.976 L1692.78 681.976 L1692.23 681.976 L1691.67 681.976 L1691.11 681.976 L1690.55 681.976 L1689.99 681.976 L1689.43 681.976 L1688.87 681.976 L1688.31 681.976 L1687.75 681.976 L1687.19 681.976 L1686.63 681.976 L1686.07 681.976 L1685.51 681.976 L1684.95 681.976 L1684.4 681.976 L1683.84 681.976 L1683.28 681.976 L1682.72 681.976 L1682.16 681.976 L1681.6 681.976 L1681.04 681.976 L1680.48 681.976 L1679.92 681.976 L1679.36 681.976 L1678.8 681.976 L1678.24 681.976 L1677.68 681.976 L1677.13 681.976 L1676.57 681.976 L1676.01 681.976 L1675.45 681.976 L1674.89 681.976 L1674.33 681.976 L1673.77 681.976 L1673.21 681.976 L1672.65 681.976 L1672.09 681.976 L1671.53 681.976 L1670.97 681.976 L1670.41 681.976 L1669.85 681.976 L1669.3 681.976 L1668.74 681.976 L1668.18 681.976 L1667.62 681.976 L1667.06 681.976 L1666.5 681.976 L1665.94 681.976 L1665.38 681.976 L1664.82 681.976 L1664.26 681.976 L1663.7 681.976 L1663.14 681.976 L1662.58 681.976 L1662.03 681.976 L1661.47 681.976 L1660.91 681.976 L1660.35 681.976 L1659.79 681.976 L1659.23 681.976 L1658.67 681.976 L1658.11 681.976 L1657.55 681.976 L1656.99 681.976 L1656.43 681.976 L1655.87 681.976 L1655.31 681.976 L1654.76 681.976 L1654.2 681.976 L1653.64 681.976 L1653.08 681.976 L1652.52 681.976 L1651.96 681.976 L1651.4 681.976 L1650.84 681.976 L1650.28 681.976 L1649.72 681.976 L1649.16 681.976 L1648.6 681.976 L1648.04 681.976 L1647.48 681.976 L1646.93 681.976 L1646.37 681.976 L1645.81 681.976 L1645.25 681.976 L1644.69 681.976 L1644.13 681.976 L1643.57 681.976 L1643.01 681.976 L1642.45 681.976 L1641.89 681.976 L1641.33 681.976 L1640.77 681.976 L1640.21 681.976 L1639.66 681.976 L1639.1 681.976 L1638.54 681.976 L1637.98 681.976 L1637.42 681.976 L1636.86 681.976 L1636.3 681.976 L1635.74 681.976 L1635.18 681.976 L1634.62 681.976 L1634.06 681.976 L1633.5 681.976 L1632.94 681.976 L1632.39 681.976 L1631.83 681.976 L1631.27 681.976 L1630.71 681.976 L1630.15 681.976 L1629.59 681.976 L1629.03 681.976 L1628.47 681.976 L1627.91 681.976 L1627.35 681.976 L1626.79 681.976 L1626.23 681.976 L1625.67 681.976 L1625.11 681.976 L1624.56 681.976 L1624 681.976 L1623.44 681.976 L1622.88 681.976 L1622.32 681.976 L1621.76 681.976 L1621.2 681.976 L1620.64 681.976 L1620.08 681.976 L1619.52 681.976 L1618.96 681.976 L1618.4 681.976 L1617.84 681.976 L1617.29 681.976 L1616.73 681.976 L1616.17 681.976 L1615.61 681.976 L1615.05 681.976 L1614.49 681.976 L1613.93 681.976 L1613.37 681.976 L1612.81 681.976 L1612.25 681.976 L1611.69 681.976 L1611.13 681.976 L1610.57 681.976 L1610.02 681.976 L1609.46 681.976 L1608.9 681.976 L1608.34 681.976 L1607.78 681.976 L1607.22 681.976 L1606.66 681.976 L1606.1 681.976 L1605.54 681.976 L1604.98 681.976 L1604.42 681.976 L1603.86 681.976 L1603.3 681.976 L1602.74 681.976 L1602.19 681.976 L1601.63 681.976 L1601.07 681.976 L1600.51 681.976 L1599.95 681.976 L1599.39 681.976 L1598.83 681.976 L1598.27 681.976 L1597.71 681.976 L1597.15 681.976 L1596.59 681.976 L1596.03 681.976 L1595.47 681.976 L1594.92 681.976 L1594.36 681.976 L1593.8 681.976 L1593.24 681.976 L1592.68 681.976 L1592.12 681.976 L1591.56 681.976 L1591 681.976 L1590.44 681.976 L1589.88 681.976 L1589.32 681.976 L1588.76 681.976 L1588.2 681.976 L1587.65 681.976 L1587.09 681.976 L1586.53 681.976 L1585.97 681.976 L1585.41 681.976 L1584.85 681.976 L1584.29 681.976 L1583.73 681.976 L1583.17 681.976 L1582.61 681.976 L1582.05 681.976 L1581.49 681.976 L1580.93 681.976 L1580.37 681.976 L1579.82 681.976 L1579.26 681.976 L1578.7 681.976 L1578.14 681.976 L1577.58 681.976 L1577.02 681.976 L1576.46 681.976 L1575.9 681.976 L1575.34 681.976 L1574.78 681.976 L1574.22 681.976 L1573.66 681.976 L1573.1 681.976 L1572.55 681.976 L1571.99 681.976 L1571.43 681.976 L1570.87 681.976 L1570.31 681.976 L1569.75 681.976 L1569.19 681.976 L1568.63 681.976 L1568.07 681.976 L1567.51 681.976 L1566.95 681.976 L1566.39 681.976 L1565.83 681.976 L1565.28 681.976 L1564.72 681.976 L1564.16 681.976 L1563.6 681.976 L1563.04 681.976 L1562.48 681.976 L1561.92 681.976 L1561.36 681.976 L1560.8 681.976 L1560.24 681.976 L1559.68 681.976 L1559.12 681.976 L1558.56 681.976 L1558 681.976 L1557.45 681.976 L1556.89 681.976 L1556.33 681.976 L1555.77 681.976 L1555.21 681.976 L1554.65 681.976 L1554.09 681.976 L1553.53 681.976 L1552.97 681.976 L1552.41 681.976 L1551.85 681.976 L1551.29 681.976 L1550.73 681.976 L1550.18 681.976 L1549.62 681.976 L1549.06 681.976 L1548.5 681.976 L1547.94 681.976 L1547.38 681.976 L1546.82 681.976 L1546.26 681.976 L1545.7 681.976 L1545.14 681.976 L1544.58 681.976 L1544.02 681.976 L1543.46 681.976 L1542.9 681.976 L1542.35 681.976 L1541.79 681.976 L1541.23 681.976 L1540.67 681.976 L1540.11 681.976 L1539.55 681.976 L1538.99 681.976 L1538.43 681.976 L1537.87 681.976 L1537.31 681.976 L1536.75 681.976 L1536.19 681.976 L1535.63 681.976 L1535.08 681.976 L1534.52 681.976 L1533.96 681.976 L1533.4 681.976 L1532.84 681.976 L1532.28 681.976 L1531.72 681.976 L1531.16 681.976 L1530.6 681.976 L1530.04 681.976 L1529.48 681.976 L1528.92 681.976 L1528.36 681.976 L1527.81 681.976 L1527.25 681.976 L1526.69 681.976 L1526.13 681.976 L1525.57 681.976 L1525.01 681.976 L1524.45 681.976 L1523.89 681.976 L1523.33 681.976 L1522.77 681.976 L1522.21 681.976 L1521.65 681.976 L1521.09 681.976 L1520.53 681.976 L1519.98 681.976 L1519.42 681.976 L1518.86 681.976 L1518.3 681.976 L1517.74 681.976 L1517.18 681.976 L1516.62 681.976 L1516.06 681.976 L1515.5 681.976 L1514.94 681.976 L1514.38 681.976 L1513.82 681.976 L1513.26 681.976 L1512.71 681.976 L1512.15 681.976 L1511.59 681.976 L1511.03 681.976 L1510.47 681.976 L1509.91 681.976 L1509.35 681.976 L1508.79 681.976 L1508.23 681.976 L1507.67 681.976 L1507.11 681.976 L1506.55 681.976 L1505.99 681.976 L1505.44 681.976 L1504.88 681.976 L1504.32 681.976 L1503.76 681.976 L1503.2 681.976 L1502.64 681.976 L1502.08 681.976 L1501.52 681.976 L1500.96 681.976 L1500.4 681.976 L1499.84 681.976 L1499.28 681.976 L1498.72 681.976 L1498.16 681.976 L1497.61 681.976 L1497.05 681.976 L1496.49 681.976 L1495.93 681.976 L1495.37 681.976 L1494.81 681.976 L1494.25 681.976 L1493.69 681.976 L1493.13 681.976 L1492.57 681.976 L1492.01 681.976 L1491.45 681.976 L1490.89 681.976 L1490.34 681.976 L1489.78 681.976 L1489.22 681.976 L1488.66 681.976 L1488.1 681.976 L1487.54 681.976 L1486.98 681.976 L1486.42 681.976 L1485.86 681.976 L1485.3 681.976 L1484.74 681.976 L1484.18 681.976 L1483.62 681.976 L1483.07 681.976 L1482.51 681.976 L1481.95 681.976 L1481.39 681.976 L1480.83 681.976 L1480.27 681.976 L1479.71 681.976 L1479.15 681.976 L1478.59 681.976 L1478.03 681.976 L1477.47 681.976 L1476.91 681.976 L1476.35 681.976 L1475.79 681.976 L1475.24 681.976 L1474.68 681.976 L1474.12 681.976 L1473.56 681.976 L1473 681.976 L1472.44 681.976 L1471.88 681.976 L1471.32 681.976 L1470.76 681.976 L1470.2 681.976 L1469.64 681.976 L1469.08 681.976 L1468.52 681.976 L1467.97 681.976 L1467.41 681.976 L1466.85 681.976 L1466.29 681.976 L1465.73 681.976 L1465.17 681.976 L1464.61 681.976 L1464.05 681.976 L1463.49 681.976 L1462.93 681.976 L1462.37 681.976 L1461.81 681.976 L1461.25 681.976 L1460.7 681.976 L1460.14 681.976 L1459.58 681.976 L1459.02 681.976 L1458.46 681.976 L1457.9 681.976 L1457.34 681.976 L1456.78 681.976 L1456.22 681.976 L1455.66 681.976 L1455.1 681.976 L1454.54 681.976 L1453.98 681.976 L1453.42 681.976 L1452.87 681.976 L1452.31 681.976 L1451.75 681.976 L1451.19 681.976 L1450.63 681.976 L1450.07 681.976 L1449.51 681.976 L1448.95 681.976 L1448.39 681.976 L1447.83 681.976 L1447.27 681.976 L1446.71 681.976 L1446.15 681.976 L1445.6 681.976 L1445.04 681.976 L1444.48 681.976 L1443.92 681.976 L1443.36 681.976 L1442.8 681.976 L1442.24 681.976 L1441.68 681.976 L1441.12 681.976 L1440.56 681.976 L1440 681.976 L1439.44 681.976 L1438.88 681.976 L1438.33 681.976 L1437.77 681.976 L1437.21 681.976 L1436.65 681.976 L1436.09 681.976 L1435.53 681.976 L1434.97 681.976 L1434.41 681.976 L1433.85 681.976 L1433.29 681.976 L1432.73 681.976 L1432.17 681.976 L1431.61 681.976 L1431.05 681.976 L1430.5 681.976 L1429.94 681.976 L1429.38 681.976 L1428.82 681.976 L1428.26 681.976 L1427.7 681.976 L1427.14 681.976 L1426.58 681.976 L1426.02 681.976 L1425.46 681.976 L1424.9 681.976 L1424.34 681.976 L1423.78 681.976 L1423.23 681.976 L1422.67 681.976 L1422.11 681.976 L1421.55 681.976 L1420.99 681.976 L1420.43 681.976 L1419.87 681.976 L1419.31 681.976 L1418.75 681.976 L1418.19 681.976 L1417.63 681.976 L1417.07 681.976 L1416.51 681.976 L1415.95 681.976 L1415.4 681.976 L1414.84 681.976 L1414.28 681.976 L1413.72 681.976 L1413.16 681.976 L1412.6 681.976 L1412.04 681.976 L1411.48 681.976 L1410.92 681.976 L1410.36 681.976 L1409.8 681.976 L1409.24 681.976 L1408.68 681.976 L1408.13 681.976 L1407.57 681.976 L1407.01 681.976 L1406.45 681.976 L1405.89 681.976 L1405.33 681.976 L1404.77 681.976 L1404.21 681.976 L1403.65 681.976 L1403.09 681.976 L1402.53 681.976 L1401.97 681.976 L1401.41 681.976 L1400.86 681.976 L1400.3 681.976 L1399.74 681.976 L1399.18 681.976 L1398.62 681.976 L1398.06 681.976 L1397.5 681.976 L1396.94 681.976 L1396.38 681.976 L1395.82 681.976 L1395.26 681.976 L1394.7 681.976 L1394.14 681.976 L1393.58 681.976 L1393.03 681.976 L1392.47 681.976 L1391.91 681.976 L1391.35 681.976 L1390.79 681.976 L1390.23 681.976 L1389.67 681.976 L1389.11 681.976 L1388.55 681.976 L1387.99 681.976 L1387.43 681.976 L1386.87 681.976 L1386.31 681.976 L1385.76 681.976 L1385.2 681.976 L1384.64 681.976 L1384.08 681.976 L1383.52 681.976 L1382.96 681.976 L1382.4 681.976 L1381.84 681.976 L1381.28 681.976 L1380.72 681.976 L1380.16 681.976 L1379.6 681.976 L1379.04 681.976 L1378.49 681.976 L1377.93 681.976 L1377.37 681.976 L1376.81 681.976 L1376.25 681.976 L1375.69 681.976 L1375.13 681.976 L1374.57 681.976 L1374.01 681.976 L1373.45 681.976 L1372.89 681.976 L1372.33 681.976 L1371.77 681.976 L1371.21 681.976 L1370.66 681.976 L1370.1 681.976 L1369.54 681.976 L1368.98 681.976 L1368.42 681.976 L1367.86 681.976 L1367.3 681.976 L1366.74 681.976 L1366.18 681.976 L1365.62 681.976 L1365.06 681.976 L1364.5 681.976 L1363.94 681.976 L1363.39 681.976 L1362.83 681.976 L1362.27 681.976 L1361.71 681.976 L1361.15 681.976 L1360.59 681.976 L1360.03 681.976 L1359.47 681.976 L1358.91 681.976 L1358.35 681.976 L1357.79 681.976 L1357.23 681.976 L1356.67 681.976 L1356.12 681.976 L1355.56 681.976 L1355 681.976 L1354.44 681.976 L1353.88 681.976 L1353.32 681.976 L1352.76 681.976 L1352.2 681.976 L1351.64 681.976 L1351.08 681.976 L1350.52 681.976 L1349.96 681.976 L1349.4 681.976 L1348.84 681.976 L1348.29 681.976 L1347.73 681.976 L1347.17 681.976 L1346.61 681.976 L1346.05 681.976 L1345.49 681.976 L1344.93 681.976 L1344.37 681.976 L1343.81 681.976 L1343.25 681.976 L1342.69 681.976 L1342.13 681.976 L1341.57 681.976 L1341.02 681.976 L1340.46 681.976 L1339.9 681.976 L1339.34 681.976 L1338.78 681.976 L1338.22 681.976 L1337.66 681.976 L1337.1 681.976 L1336.54 681.976 L1335.98 681.976 L1335.42 681.976 L1334.86 681.976 L1334.3 681.976 L1333.75 681.976 L1333.19 681.976 L1332.63 681.976 L1332.07 681.976 L1331.51 681.976 L1330.95 681.976 L1330.39 681.976 L1329.83 681.976 L1329.27 681.976 L1328.71 681.976 L1328.15 681.976 L1327.59 681.976 L1327.03 681.976 L1326.47 681.976 L1325.92 681.976 L1325.36 681.976 L1324.8 681.976 L1324.24 681.976 L1323.68 681.976 L1323.12 681.976 L1322.56 681.976 L1322 681.976 L1321.44 681.976 L1320.88 681.976 L1320.32 681.976 L1319.76 681.976 L1319.2 681.976 L1318.65 681.976 L1318.09 681.976 L1317.53 681.976 L1316.97 681.976 L1316.41 681.976 L1315.85 681.976 L1315.29 681.976 L1314.73 681.976 L1314.17 681.976 L1313.61 681.976 L1313.05 681.976 L1312.49 681.976 L1311.93 681.976 L1311.38 681.976 L1310.82 681.976 L1310.26 681.976 L1309.7 681.976 L1309.14 681.976 L1308.58 681.976 L1308.02 681.976 L1307.46 681.976 L1306.9 681.976 L1306.34 681.976 L1305.78 681.976 L1305.22 681.976 L1304.66 681.976 L1304.1 681.976 L1303.55 681.976 L1302.99 681.976 L1302.43 681.976 L1301.87 681.976 L1301.31 681.976 L1300.75 681.976 L1300.19 681.976 L1299.63 681.976 L1299.07 681.976 L1298.51 681.976 L1297.95 681.976 L1297.39 681.976 L1296.83 681.976 L1296.28 681.976 L1295.72 681.976 L1295.16 681.976 L1294.6 681.976 L1294.04 681.976 L1293.48 681.976 L1292.92 681.976 L1292.36 681.976 L1291.8 681.976 L1291.24 681.976 L1290.68 681.976 L1290.12 681.976 L1289.56 681.976 L1289 681.976 L1288.45 681.976 L1287.89 681.976 L1287.33 681.976 L1286.77 681.976 L1286.21 681.976 L1285.65 681.976 L1285.09 681.976 L1284.53 681.976 L1283.97 681.976 L1283.41 681.976 L1282.85 681.976 L1282.29 681.976 L1281.73 681.976 L1281.18 681.976 L1280.62 681.976 L1280.06 681.976 L1279.5 681.976 L1278.94 681.976 L1278.38 681.976 L1277.82 681.976 L1277.26 681.976 L1276.7 681.976 L1276.14 681.976 L1275.58 681.976 L1275.02 681.976 L1274.46 681.976 L1273.91 681.976 L1273.35 681.976 L1272.79 681.976 L1272.23 681.976 L1271.67 681.976 L1271.11 681.976 L1270.55 681.976 L1269.99 681.976 L1269.43 681.976 L1268.87 681.976 L1268.31 681.976 L1267.75 681.976 L1267.19 681.976 L1266.63 681.976 L1266.08 681.976 L1265.52 681.976 L1264.96 681.976 L1264.4 681.976 L1263.84 681.976 L1263.28 681.976 L1262.72 681.976 L1262.16 681.976 L1261.6 681.976 L1261.04 681.976 L1260.48 681.976 L1259.92 681.976 L1259.36 681.976 L1258.81 681.976 L1258.25 681.976 L1257.69 681.976 L1257.13 681.976 L1256.57 681.976 L1256.01 681.976 L1255.45 681.976 L1254.89 681.976 L1254.33 681.976 L1253.77 681.976 L1253.21 681.976 L1252.65 681.976 L1252.09 681.976 L1251.54 681.976 L1250.98 681.976 L1250.42 681.976 L1249.86 681.976 L1249.3 681.976 L1248.74 681.976 L1248.18 681.976 L1247.62 681.976 L1247.06 681.976 L1246.5 681.976 L1245.94 681.976 L1245.38 681.976 L1244.82 681.976 L1244.26 681.976 L1243.71 681.976 L1243.15 681.976 L1242.59 681.976 L1242.03 681.976 L1241.47 681.976 L1240.91 681.976 L1240.35 681.976 L1239.79 681.976 L1239.23 681.976 L1238.67 681.976 L1238.11 681.976 L1237.55 681.976 L1236.99 681.976 L1236.44 681.976 L1235.88 681.976 L1235.32 681.976 L1234.76 681.976 L1234.2 681.976 L1233.64 681.976 L1233.08 681.976 L1232.52 681.976 L1231.96 681.976 L1231.4 681.976 L1230.84 681.976 L1230.28 681.976 L1229.72 681.976 L1229.17 681.976 L1228.61 681.976 L1228.05 681.976 L1227.49 681.976 L1226.93 681.976 L1226.37 681.976 L1225.81 681.976 L1225.25 681.976 L1224.69 681.976 L1224.13 681.976 L1223.57 681.976 L1223.01 681.976 L1222.45 681.976 L1221.89 681.976 L1221.34 681.976 L1220.78 681.976 L1220.22 681.976 L1219.66 681.976 L1219.1 681.976 L1218.54 681.976 L1217.98 681.976 L1217.42 681.976 L1216.86 681.976 L1216.3 681.976 L1215.74 681.976 L1215.18 681.976 L1214.62 681.976 L1214.07 681.976 L1213.51 681.976 L1212.95 681.976 L1212.39 681.976 L1211.83 681.976 L1211.27 681.976 L1210.71 681.976 L1210.15 681.976 L1209.59 681.976 L1209.03 681.976 L1208.47 681.976 L1207.91 681.976 L1207.35 681.976 L1206.8 681.976 L1206.24 681.976 L1205.68 681.976 L1205.12 681.976 L1204.56 681.976 L1204 681.976 L1203.44 681.976 L1202.88 681.976 L1202.32 681.976 L1201.76 681.976 L1201.2 681.976 L1200.64 681.976 L1200.08 681.976 L1199.52 681.976 L1198.97 681.976 L1198.41 681.976 L1197.85 681.976 L1197.29 681.976 L1196.73 681.976 L1196.17 681.976 L1195.61 681.976 L1195.05 681.976 L1194.49 681.976 L1193.93 681.976 L1193.37 681.976 L1192.81 681.976 L1192.25 681.976 L1191.7 681.976 L1191.14 681.976 L1190.58 681.976 L1190.02 681.976 L1189.46 681.976 L1188.9 681.976 L1188.34 681.976 L1187.78 681.976 L1187.22 681.976 L1186.66 681.976 L1186.1 681.976 L1185.54 681.976 L1184.98 681.976 L1184.43 681.976 L1183.87 681.976 L1183.31 681.976 L1182.75 681.976 L1182.19 681.976 L1181.63 681.976 L1181.07 681.976 L1180.51 681.976 L1179.95 681.976 L1179.39 681.976 L1178.83 681.976 L1178.27 681.976 L1177.71 681.976 L1177.15 681.976 L1176.6 681.976 L1176.04 681.976 L1175.48 681.976 L1174.92 681.976 L1174.36 681.976 L1173.8 681.976 L1173.24 681.976 L1172.68 681.976 L1172.12 681.976 L1171.56 681.976 L1171 681.976 L1170.44 681.976 L1169.88 681.976 L1169.33 681.976 L1168.77 681.976 L1168.21 681.976 L1167.65 681.976 L1167.09 681.976 L1166.53 681.976 L1165.97 681.976 L1165.41 681.976 L1164.85 681.976 L1164.29 681.976 L1163.73 681.976 L1163.17 681.976 L1162.61 681.976 L1162.05 681.976 L1161.5 681.976 L1160.94 681.976 L1160.38 681.976 L1159.82 681.976 L1159.26 681.976 L1158.7 681.976 L1158.14 681.976 L1157.58 681.976 L1157.02 681.976 L1156.46 681.976 L1155.9 681.976 L1155.34 681.976 L1154.78 681.976 L1154.23 681.976 L1153.67 681.976 L1153.11 681.976 L1152.55 681.976 L1151.99 681.976 L1151.43 681.976 L1150.87 681.976 L1150.31 681.976 L1149.75 681.976 L1149.19 681.976 L1148.63 681.976 L1148.07 681.976 L1147.51 681.976 L1146.96 681.976 L1146.4 681.976 L1145.84 681.976 L1145.28 681.976 L1144.72 681.976 L1144.16 681.976 L1143.6 681.976 L1143.04 681.976 L1142.48 681.976 L1141.92 681.976 L1141.36 681.976 L1140.8 681.976 L1140.24 681.976 L1139.68 681.976 L1139.13 681.976 L1138.57 681.976 L1138.01 681.976 L1137.45 681.976 L1136.89 681.976 L1136.33 681.976 L1135.77 681.976 L1135.21 681.976 L1134.65 681.976 L1134.09 681.976 L1133.53 681.976 L1132.97 681.976 L1132.41 681.976 L1131.86 681.976 L1131.3 681.976 L1130.74 681.976 L1130.18 681.976 L1129.62 681.976 L1129.06 681.976 L1128.5 681.976 L1127.94 681.976 L1127.38 681.976 L1126.82 681.976 L1126.26 681.976 L1125.7 681.976 L1125.14 681.976 L1124.59 681.976 L1124.03 681.976 L1123.47 681.976 L1122.91 681.976 L1122.35 681.976 L1121.79 681.976 L1121.23 681.976 L1120.67 681.976 L1120.11 681.976 L1119.55 681.976 L1118.99 681.976 L1118.43 681.976 L1117.87 681.976 L1117.31 681.976 L1116.76 681.976 L1116.2 681.976 L1115.64 681.976 L1115.08 681.976 L1114.52 681.976 L1113.96 681.976 L1113.4 681.976 L1112.84 681.976 L1112.28 681.976 L1111.72 681.976 L1111.16 681.976 L1110.6 681.976 L1110.04 681.976 L1109.49 681.976 L1108.93 681.976 L1108.37 681.976 L1107.81 681.976 L1107.25 681.976 L1106.69 681.976 L1106.13 681.976 L1105.57 681.976 L1105.01 681.976 L1104.45 681.976 L1103.89 681.976 L1103.33 681.976 L1102.77 681.976 L1102.22 681.976 L1101.66 681.976 L1101.1 681.976 L1100.54 681.976 L1099.98 681.976 L1099.42 681.976 L1098.86 681.976 L1098.3 681.976 L1097.74 681.976 L1097.18 681.976 L1096.62 681.976 L1096.06 681.976 L1095.5 681.976 L1094.94 681.976 L1094.39 681.976 L1093.83 681.976 L1093.27 681.976 L1092.71 681.976 L1092.15 681.976 L1091.59 681.976 L1091.03 681.976 L1090.47 681.976 L1089.91 681.976 L1089.35 681.976 L1088.79 681.976 L1088.23 681.976 L1087.67 681.976 L1087.12 681.976 L1086.56 681.976 L1086 681.976 L1085.44 681.976 L1084.88 681.976 L1084.32 681.976 L1083.76 681.976 L1083.2 681.976 L1082.64 681.976 L1082.08 681.976 L1081.52 681.976 L1080.96 681.976 L1080.4 681.976 L1079.85 681.976 L1079.29 681.976 L1078.73 681.976 L1078.17 681.976 L1077.61 681.976 L1077.05 681.976 L1076.49 681.976 L1075.93 681.976 L1075.37 681.976 L1074.81 681.976 L1074.25 681.976 L1073.69 681.976 L1073.13 681.976 L1072.57 681.976 L1072.02 681.976 L1071.46 681.976 L1070.9 681.976 L1070.34 681.976 L1069.78 681.976 L1069.22 681.976 L1068.66 681.976 L1068.1 681.976 L1067.54 681.976 L1066.98 681.976 L1066.42 681.976 L1065.86 681.976 L1065.3 681.976 L1064.75 681.976 L1064.19 681.976 L1063.63 681.976 L1063.07 681.976 L1062.51 681.976 L1061.95 681.976 L1061.39 681.976 L1060.83 681.976 L1060.27 681.976 L1059.71 681.976 L1059.15 681.976 L1058.59 681.976 L1058.03 681.976 L1057.48 681.976 L1056.92 681.976 L1056.36 681.976 L1055.8 681.976 L1055.24 681.976 L1054.68 681.976 L1054.12 681.976 L1053.56 681.976 L1053 681.976 L1052.44 681.976 L1051.88 681.976 L1051.32 681.976 L1050.76 681.976 L1050.2 681.976 L1049.65 681.976 L1049.09 681.976 L1048.53 681.976 L1047.97 681.976 L1047.41 681.976 L1046.85 681.976 L1046.29 681.976 L1045.73 681.976 L1045.17 681.976 L1044.61 681.976 L1044.05 681.976 L1043.49 681.976 L1042.93 681.976 L1042.38 681.976 L1041.82 681.976 L1041.26 681.976 L1040.7 681.976 L1040.14 681.976 L1039.58 681.976 L1039.02 681.976 L1038.46 681.976 L1037.9 681.976 L1037.34 681.976 L1036.78 681.976 L1036.22 681.976 L1035.66 681.976 L1035.1 681.976 L1034.55 681.976 L1033.99 681.976 L1033.43 681.976 L1032.87 681.976 L1032.31 681.976 L1031.75 681.976 L1031.19 681.976 L1030.63 681.976 L1030.07 681.976 L1029.51 681.976 L1028.95 681.976 L1028.39 681.976 L1027.83 681.976 L1027.28 681.976 L1026.72 681.976 L1026.16 681.976 L1025.6 681.976 L1025.04 681.976 L1024.48 681.976 L1023.92 681.976 L1023.36 681.976 L1022.8 681.976 L1022.24 681.976 L1021.68 681.976 L1021.12 681.976 L1020.56 681.976 L1020.01 681.976 L1019.45 681.976 L1018.89 681.976 L1018.33 681.976 L1017.77 681.976 L1017.21 681.976 L1016.65 681.976 L1016.09 681.976 L1015.53 681.976 L1014.97 681.976 L1014.41 681.976 L1013.85 681.976 L1013.29 681.976 L1012.73 681.976 L1012.18 681.976 L1011.62 681.976 L1011.06 681.976 L1010.5 681.976 L1009.94 681.976 L1009.38 681.976 L1008.82 681.976 L1008.26 681.976 L1007.7 681.976 L1007.14 681.976 L1006.58 681.976 L1006.02 681.976 L1005.46 681.976 L1004.91 681.976 L1004.35 681.976 L1003.79 681.976 L1003.23 681.976 L1002.67 681.976 L1002.11 681.976 L1001.55 681.976 L1000.99 681.976 L1000.43 681.976 L999.872 681.976 L999.313 681.976 L998.754 681.976 L998.194 681.976 L997.635 681.976 L997.076 681.976 L996.517 681.976 L995.957 681.976 L995.398 681.976 L994.839 681.976 L994.28 681.976 L993.72 681.976 L993.161 681.976 L992.602 681.976 L992.043 681.976 L991.483 681.976 L990.924 681.976 L990.365 681.976 L989.806 681.976 L989.246 681.976 L988.687 681.976 L988.128 681.976 L987.569 681.976 L987.009 681.976 L986.45 681.976 L985.891 681.976 L985.332 681.976 L984.772 681.976 L984.213 681.976 L983.654 681.976 L983.095 681.976 L982.535 681.976 L981.976 681.976 L981.417 681.976 L980.858 681.976 L980.298 681.976 L979.739 681.976 L979.18 681.976 L978.621 681.976 L978.061 681.976 L977.502 681.976 L976.943 681.976 L976.384 681.976 L975.824 681.976 L975.265 681.976 L974.706 681.976 L974.147 681.976 L973.587 681.976 L973.028 681.976 L972.469 681.976 L971.91 681.976 L971.35 681.976 L970.791 681.976 L970.232 681.976 L969.673 681.976 L969.113 681.976 L968.554 681.976 L967.995 681.976 L967.436 681.976 L966.876 681.976 L966.317 681.976 L965.758 681.976 L965.199 681.976 L964.639 681.976 L964.08 681.976 L963.521 681.976 L962.962 681.976 L962.402 681.976 L961.843 681.976 L961.284 681.976 L960.725 681.976 L960.165 681.976 L959.606 681.976 L959.047 681.976 L958.488 681.976 L957.928 681.976 L957.369 681.976 L956.81 681.976 L956.251 681.976 L955.691 681.976 L955.132 681.976 L954.573 681.976 L954.014 681.976 L953.454 681.976 L952.895 681.976 L952.336 681.976 L951.777 681.976 L951.217 681.976 L950.658 681.976 L950.099 681.976 L949.54 681.976 L948.98 681.976 L948.421 681.976 L947.862 681.976 L947.303 681.976 L946.743 681.976 L946.184 681.976 L945.625 681.976 L945.066 681.976 L944.506 681.976 L943.947 681.976 L943.388 681.976 L942.829 681.976 L942.269 681.976 L941.71 681.976 L941.151 681.976 L940.592 681.976 L940.032 681.976 L939.473 681.976 L938.914 681.976 L938.355 681.976 L937.795 681.976 L937.236 681.976 L936.677 681.976 L936.118 681.976 L935.558 681.976 L934.999 681.976 L934.44 681.976 L933.881 681.976 L933.321 681.976 L932.762 681.976 L932.203 681.976 L931.644 681.976 L931.084 681.976 L930.525 681.976 L929.966 681.976 L929.406 681.976 L928.847 681.976 L928.288 681.976 L927.729 681.976 L927.169 681.976 L926.61 681.976 L926.051 681.976 L925.492 681.976 L924.932 681.976 L924.373 681.976 L923.814 681.976 L923.255 681.976 L922.695 681.976 L922.136 681.976 L921.577 681.976 L921.018 681.976 L920.458 681.976 L919.899 681.976 L919.34 681.976 L918.781 681.976 L918.221 681.976 L917.662 681.976 L917.103 681.976 L916.544 681.976 L915.984 681.976 L915.425 681.976 L914.866 681.976 L914.307 681.976 L913.747 681.976 L913.188 681.976 L912.629 681.976 L912.07 681.976 L911.51 681.976 L910.951 681.976 L910.392 681.976 L909.833 681.976 L909.273 681.976 L908.714 681.976 L908.155 681.976 L907.596 681.976 L907.036 681.976 L906.477 681.976 L905.918 681.976 L905.359 681.976 L904.799 681.976 L904.24 681.976 L903.681 681.976 L903.122 681.976 L902.562 681.976 L902.003 681.976 L901.444 681.976 L900.885 681.976 L900.325 681.976 L899.766 681.976 L899.207 681.976 L898.648 681.976 L898.088 681.976 L897.529 681.976 L896.97 681.976 L896.411 681.976 L895.851 681.976 L895.292 681.976 L894.733 681.976 L894.174 681.976 L893.614 681.976 L893.055 681.976 L892.496 681.976 L891.937 681.976 L891.377 681.976 L890.818 681.976 L890.259 681.976 L889.7 681.976 L889.14 681.976 L888.581 681.976 L888.022 681.976 L887.463 681.976 L886.903 681.976 L886.344 681.976 L885.785 681.976 L885.226 681.976 L884.666 681.976 L884.107 681.976 L883.548 681.976 L882.989 681.976 L882.429 681.976 L881.87 681.976 L881.311 681.976 L880.752 681.976 L880.192 681.976 L879.633 681.976 L879.074 681.976 L878.515 681.976 L877.955 681.976 L877.396 681.976 L876.837 681.976 L876.278 681.976 L875.718 681.976 L875.159 681.976 L874.6 681.976 L874.041 681.976 L873.481 681.976 L872.922 681.976 L872.363 681.976 L871.804 681.976 L871.244 681.976 L870.685 681.976 L870.126 681.976 L869.567 681.976 L869.007 681.976 L868.448 681.976 L867.889 681.976 L867.33 681.976 L866.77 681.976 L866.211 681.976 L865.652 681.976 L865.093 681.976 L864.533 681.976 L863.974 681.976 L863.415 681.976 L862.856 681.976 L862.296 681.976 L861.737 681.976 L861.178 681.976 L860.619 681.976 L860.059 681.976 L859.5 681.976 L858.941 681.976 L858.382 681.976 L857.822 681.976 L857.263 681.976 L856.704 681.976 L856.145 681.976 L855.585 681.976 L855.026 681.976 L854.467 681.976 L853.908 681.976 L853.348 681.976 L852.789 681.976 L852.23 681.976 L851.671 681.976 L851.111 681.976 L850.552 681.976 L849.993 681.976 L849.434 681.976 L848.874 681.976 L848.315 681.976 L847.756 681.976 L847.197 681.976 L846.637 681.976 L846.078 681.976 L845.519 681.976 L844.96 681.976 L844.4 681.976 L843.841 681.976 L843.282 681.976 L842.723 681.976 L842.163 681.976 L841.604 681.976 L841.045 681.976 L840.486 681.976 L839.926 681.976 L839.367 681.976 L838.808 681.976 L838.249 681.976 L837.689 681.976 L837.13 681.976 L836.571 681.976 L836.012 681.976 L835.452 681.976 L834.893 681.976 L834.334 681.976 L833.775 681.976 L833.215 681.976 L832.656 681.976 L832.097 681.976 L831.538 681.976 L830.978 681.976 L830.419 681.976 L829.86 681.976 L829.301 681.976 L828.741 681.976 L828.182 681.976 L827.623 681.976 L827.064 681.976 L826.504 681.976 L825.945 681.976 L825.386 681.976 L824.827 681.976 L824.267 681.976 L823.708 681.976 L823.149 681.976 L822.59 681.976 L822.03 681.976 L821.471 681.976 L820.912 681.976 L820.353 681.976 L819.793 681.976 L819.234 681.976 L818.675 681.976 L818.116 681.976 L817.556 681.976 L816.997 681.976 L816.438 681.976 L815.879 681.976 L815.319 681.976 L814.76 681.976 L814.201 681.976 L813.642 681.976 L813.082 681.976 L812.523 681.976 L811.964 681.976 L811.405 681.976 L810.845 681.976 L810.286 681.976 L809.727 681.976 L809.168 681.976 L808.608 681.976 L808.049 681.976 L807.49 681.976 L806.931 681.976 L806.371 681.976 L805.812 681.976 L805.253 681.976 L804.693 681.976 L804.134 681.976 L803.575 681.976 L803.016 681.976 L802.456 681.976 L801.897 681.976 L801.338 681.976 L800.779 681.976 L800.219 681.976 L799.66 681.976 L799.101 681.976 L798.542 681.976 L797.982 681.976 L797.423 681.976 L796.864 681.976 L796.305 681.976 L795.745 681.976 L795.186 681.976 L794.627 681.976 L794.068 681.976 L793.508 681.976 L792.949 681.976 L792.39 681.976 L791.831 681.976 L791.271 681.976 L790.712 681.976 L790.153 681.976 L789.594 681.976 L789.034 681.976 L788.475 681.976 L787.916 681.976 L787.357 681.976 L786.797 681.976 L786.238 681.976 L785.679 681.976 L785.12 681.976 L784.56 681.976 L784.001 681.976 L783.442 681.976 L782.883 681.976 L782.323 681.976 L781.764 681.976 L781.205 681.976 L780.646 681.976 L780.086 681.976 L779.527 681.976 L778.968 681.976 L778.409 681.976 L777.849 681.976 L777.29 681.976 L776.731 681.976 L776.172 681.976 L775.612 681.976 L775.053 681.976 L774.494 681.976 L773.935 681.976 L773.375 681.976 L772.816 681.976 L772.257 681.976 L771.698 681.976 L771.138 681.976 L770.579 681.976 L770.02 681.976 L769.461 681.976 L768.901 681.976 L768.342 681.976 L767.783 681.976 L767.224 681.976 L766.664 681.976 L766.105 681.976 L765.546 681.976 L764.987 681.976 L764.427 681.976 L763.868 681.976 L763.309 681.976 L762.75 681.976 L762.19 681.976 L761.631 681.976 L761.072 681.976 L760.513 681.976 L759.953 681.976 L759.394 681.976 L758.835 681.976 L758.276 681.976 L757.716 681.976 L757.157 681.976 L756.598 681.976 L756.039 681.976 L755.479 681.976 L754.92 681.976 L754.361 681.976 L753.802 681.976 L753.242 681.976 L752.683 681.976 L752.124 681.976 L751.565 681.976 L751.005 681.976 L750.446 681.976 L749.887 681.976 L749.328 681.976 L748.768 681.976 L748.209 681.976 L747.65 681.976 L747.091 681.976 L746.531 681.976 L745.972 681.976 L745.413 681.976 L744.854 681.976 L744.294 681.976 L743.735 681.976 L743.176 681.976 L742.617 681.976 L742.057 681.976 L741.498 681.976 L740.939 681.976 L740.38 681.976 L739.82 681.976 L739.261 681.976 L738.702 681.976 L738.143 681.976 L737.583 681.976 L737.024 681.976 L736.465 681.976 L735.906 681.976 L735.346 681.976 L734.787 681.976 L734.228 681.976 L733.669 681.976 L733.109 681.976 L732.55 681.976 L731.991 681.976 L731.432 681.976 L730.872 681.976 L730.313 681.976 L729.754 681.976 L729.195 681.976 L728.635 681.976 L728.076 681.976 L727.517 681.976 L726.958 681.976 L726.398 681.976 L725.839 681.976 L725.28 681.976 L724.721 681.976 L724.161 681.976 L723.602 681.976 L723.043 681.976 L722.484 681.976 L721.924 681.976 L721.365 681.976 L720.806 681.976 L720.247 681.976  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,682.988 720.806,682.988 721.365,682.988 721.924,682.988 722.484,682.988 723.043,682.988 723.602,682.988 724.161,682.988 724.721,682.988 725.28,682.988 725.839,682.988 726.398,682.988 726.958,682.988 727.517,682.988 728.076,682.988 728.635,682.988 729.195,682.988 729.754,682.988 730.313,682.988 730.872,682.988 731.432,682.988 731.991,682.988 732.55,682.988 733.109,682.988 733.669,682.988 734.228,682.988 734.787,682.988 735.346,682.988 735.906,682.988 736.465,682.988 737.024,682.988 737.583,682.988 738.143,682.988 738.702,682.988 739.261,682.988 739.82,682.988 740.38,682.988 740.939,682.988 741.498,682.988 742.057,682.988 742.617,682.988 743.176,682.988 743.735,682.988 744.294,682.988 744.854,682.988 745.413,682.988 745.972,682.988 746.531,682.988 747.091,682.988 747.65,682.988 748.209,682.988 748.768,682.988 749.328,682.988 749.887,682.988 750.446,682.988 751.005,682.988 751.565,682.988 752.124,682.988 752.683,682.988 753.242,682.988 753.802,682.988 754.361,682.988 754.92,682.988 755.479,682.988 756.039,682.988 756.598,682.988 757.157,682.988 757.716,682.988 758.276,682.988 758.835,682.988 759.394,682.988 759.953,682.988 760.513,682.988 761.072,682.988 761.631,682.988 762.19,682.988 762.75,682.988 763.309,682.988 763.868,682.988 764.427,682.988 764.987,682.988 765.546,682.988 766.105,682.988 766.664,682.988 767.224,682.988 767.783,682.988 768.342,682.988 768.901,682.988 769.461,682.988 770.02,682.988 770.579,682.988 771.138,682.988 771.698,682.988 772.257,682.988 772.816,682.988 773.375,682.988 773.935,682.988 774.494,682.988 775.053,682.988 775.612,682.988 776.172,682.988 776.731,682.988 777.29,682.988 777.849,682.988 778.409,682.988 778.968,682.988 779.527,682.988 780.086,682.988 780.646,682.988 781.205,682.988 781.764,682.988 782.323,682.988 782.883,682.988 783.442,682.988 784.001,682.988 784.56,682.988 785.12,682.988 785.679,682.988 786.238,682.988 786.797,682.988 787.357,682.988 787.916,682.988 788.475,682.988 789.034,682.988 789.594,682.988 790.153,682.988 790.712,682.988 791.271,682.988 791.831,682.988 792.39,682.988 792.949,682.988 793.508,682.988 794.068,682.988 794.627,682.988 795.186,682.988 795.745,682.988 796.305,682.988 796.864,682.988 797.423,682.988 797.982,682.988 798.542,682.988 799.101,682.988 799.66,682.988 800.219,682.988 800.779,682.988 801.338,682.988 801.897,682.988 802.456,682.988 803.016,682.988 803.575,682.988 804.134,682.988 804.693,682.988 805.253,682.988 805.812,682.988 806.371,682.988 806.931,682.988 807.49,682.988 808.049,682.988 808.608,682.988 809.168,682.988 809.727,682.988 810.286,682.988 810.845,682.988 811.405,682.988 811.964,682.988 812.523,682.988 813.082,682.988 813.642,682.988 814.201,682.988 814.76,682.988 815.319,682.988 815.879,682.988 816.438,682.988 816.997,682.988 817.556,682.988 818.116,682.988 818.675,682.988 819.234,682.988 819.793,682.988 820.353,682.988 820.912,682.988 821.471,682.988 822.03,682.988 822.59,682.988 823.149,682.988 823.708,682.988 824.267,682.988 824.827,682.988 825.386,682.988 825.945,682.988 826.504,682.988 827.064,682.988 827.623,682.988 828.182,682.988 828.741,682.988 829.301,682.988 829.86,682.988 830.419,682.988 830.978,682.988 831.538,682.988 832.097,682.988 832.656,682.988 833.215,682.988 833.775,682.988 834.334,682.988 834.893,682.988 835.452,682.988 836.012,682.988 836.571,682.988 837.13,682.988 837.689,682.988 838.249,682.988 838.808,682.988 839.367,682.988 839.926,682.988 840.486,682.988 841.045,682.988 841.604,682.988 842.163,682.988 842.723,682.988 843.282,682.988 843.841,682.988 844.4,682.988 844.96,682.988 845.519,682.988 846.078,682.988 846.637,682.988 847.197,682.988 847.756,682.988 848.315,682.988 848.874,682.988 849.434,682.988 849.993,682.988 850.552,682.988 851.111,682.988 851.671,682.988 852.23,682.988 852.789,682.988 853.348,682.988 853.908,682.988 854.467,682.988 855.026,682.988 855.585,682.988 856.145,682.988 856.704,682.988 857.263,682.988 857.822,682.988 858.382,682.988 858.941,682.988 859.5,682.988 860.059,682.988 860.619,682.988 861.178,682.988 861.737,682.988 862.296,682.988 862.856,682.988 863.415,682.988 863.974,682.988 864.533,682.988 865.093,682.988 865.652,682.988 866.211,682.988 866.77,682.988 867.33,682.988 867.889,682.988 868.448,682.988 869.007,682.988 869.567,682.988 870.126,682.988 870.685,682.988 871.244,682.988 871.804,682.988 872.363,682.988 872.922,682.988 873.481,682.988 874.041,682.988 874.6,682.988 875.159,682.988 875.718,682.988 876.278,682.988 876.837,682.988 877.396,682.988 877.955,682.988 878.515,682.988 879.074,682.988 879.633,682.988 880.192,682.988 880.752,682.988 881.311,682.988 881.87,682.988 882.429,682.988 882.989,682.988 883.548,682.988 884.107,682.988 884.666,682.988 885.226,682.988 885.785,682.988 886.344,682.988 886.903,682.988 887.463,682.988 888.022,682.988 888.581,682.988 889.14,682.988 889.7,682.988 890.259,682.988 890.818,682.988 891.377,682.988 891.937,682.988 892.496,682.988 893.055,682.988 893.614,682.988 894.174,682.988 894.733,682.988 895.292,682.988 895.851,682.988 896.411,682.988 896.97,682.988 897.529,682.988 898.088,682.988 898.648,682.988 899.207,682.988 899.766,682.988 900.325,682.988 900.885,682.988 901.444,682.988 902.003,682.988 902.562,682.988 903.122,682.988 903.681,682.988 904.24,682.988 904.799,682.988 905.359,682.988 905.918,682.988 906.477,682.988 907.036,682.988 907.596,682.988 908.155,682.988 908.714,682.988 909.273,682.988 909.833,682.988 910.392,682.988 910.951,682.988 911.51,682.988 912.07,682.988 912.629,682.988 913.188,682.988 913.747,682.988 914.307,682.988 914.866,682.988 915.425,682.988 915.984,682.988 916.544,682.988 917.103,682.988 917.662,682.988 918.221,682.988 918.781,682.988 919.34,682.988 919.899,682.988 920.458,682.988 921.018,682.988 921.577,682.988 922.136,682.988 922.695,682.988 923.255,682.988 923.814,682.988 924.373,682.988 924.932,682.988 925.492,682.988 926.051,682.988 926.61,682.988 927.169,682.988 927.729,682.988 928.288,682.988 928.847,682.988 929.406,682.988 929.966,682.988 930.525,682.988 931.084,682.988 931.644,682.988 932.203,682.988 932.762,682.988 933.321,682.988 933.881,682.988 934.44,682.988 934.999,682.988 935.558,682.988 936.118,682.988 936.677,682.988 937.236,682.988 937.795,682.988 938.355,682.988 938.914,682.988 939.473,682.988 940.032,682.988 940.592,682.988 941.151,682.988 941.71,682.988 942.269,682.988 942.829,682.988 943.388,682.988 943.947,682.988 944.506,682.988 945.066,682.988 945.625,682.988 946.184,682.988 946.743,682.988 947.303,682.988 947.862,682.988 948.421,682.988 948.98,682.988 949.54,682.988 950.099,682.988 950.658,682.988 951.217,682.988 951.777,682.988 952.336,682.988 952.895,682.988 953.454,682.988 954.014,682.988 954.573,682.988 955.132,682.988 955.691,682.988 956.251,682.988 956.81,682.988 957.369,682.988 957.928,682.988 958.488,682.988 959.047,682.988 959.606,682.988 960.165,682.988 960.725,682.988 961.284,682.988 961.843,682.988 962.402,682.988 962.962,682.988 963.521,682.988 964.08,682.988 964.639,682.988 965.199,682.988 965.758,682.988 966.317,682.988 966.876,682.988 967.436,682.988 967.995,682.988 968.554,682.988 969.113,682.988 969.673,682.988 970.232,682.988 970.791,682.988 971.35,682.988 971.91,682.988 972.469,682.988 973.028,682.988 973.587,682.988 974.147,682.988 974.706,682.988 975.265,682.988 975.824,682.988 976.384,682.988 976.943,682.988 977.502,682.988 978.061,682.988 978.621,682.988 979.18,682.988 979.739,682.988 980.298,682.988 980.858,682.988 981.417,682.988 981.976,682.988 982.535,682.988 983.095,682.988 983.654,682.988 984.213,682.988 984.772,682.988 985.332,682.988 985.891,682.988 986.45,682.988 987.009,682.988 987.569,682.988 988.128,682.988 988.687,682.988 989.246,682.988 989.806,682.988 990.365,682.988 990.924,682.988 991.483,682.988 992.043,682.988 992.602,682.988 993.161,682.988 993.72,682.988 994.28,682.988 994.839,682.988 995.398,682.988 995.957,682.988 996.517,682.988 997.076,682.988 997.635,682.988 998.194,682.988 998.754,682.988 999.313,682.988 999.872,682.988 1000.43,682.988 1000.99,682.988 1001.55,682.988 1002.11,682.988 1002.67,682.988 1003.23,682.988 1003.79,682.988 1004.35,682.988 1004.91,682.988 1005.46,682.988 1006.02,682.988 1006.58,682.988 1007.14,682.988 1007.7,682.988 1008.26,682.988 1008.82,682.988 1009.38,682.988 1009.94,682.988 1010.5,682.988 1011.06,682.988 1011.62,682.988 1012.18,682.988 1012.73,682.988 1013.29,682.988 1013.85,682.988 1014.41,682.988 1014.97,682.988 1015.53,682.988 1016.09,682.988 1016.65,682.988 1017.21,682.988 1017.77,682.988 1018.33,682.988 1018.89,682.988 1019.45,682.988 1020.01,682.988 1020.56,682.988 1021.12,682.988 1021.68,682.988 1022.24,682.988 1022.8,682.988 1023.36,682.988 1023.92,682.988 1024.48,682.988 1025.04,682.988 1025.6,682.988 1026.16,682.988 1026.72,682.988 1027.28,682.988 1027.83,682.988 1028.39,682.988 1028.95,682.988 1029.51,682.988 1030.07,682.988 1030.63,682.988 1031.19,682.988 1031.75,682.988 1032.31,682.988 1032.87,682.988 1033.43,682.988 1033.99,682.988 1034.55,682.988 1035.1,682.988 1035.66,682.988 1036.22,682.988 1036.78,682.988 1037.34,682.988 1037.9,682.988 1038.46,682.988 1039.02,682.988 1039.58,682.988 1040.14,682.988 1040.7,682.988 1041.26,682.988 1041.82,682.988 1042.38,682.988 1042.93,682.988 1043.49,682.988 1044.05,682.988 1044.61,682.988 1045.17,682.988 1045.73,682.988 1046.29,682.988 1046.85,682.988 1047.41,682.988 1047.97,682.988 1048.53,682.988 1049.09,682.988 1049.65,682.988 1050.2,682.988 1050.76,682.988 1051.32,682.988 1051.88,682.988 1052.44,682.988 1053,682.988 1053.56,682.988 1054.12,682.988 1054.68,682.988 1055.24,682.988 1055.8,682.988 1056.36,682.988 1056.92,682.988 1057.48,682.988 1058.03,682.988 1058.59,682.988 1059.15,682.988 1059.71,682.988 1060.27,682.988 1060.83,682.988 1061.39,682.988 1061.95,682.988 1062.51,682.988 1063.07,682.988 1063.63,682.988 1064.19,682.988 1064.75,682.988 1065.3,682.988 1065.86,682.988 1066.42,682.988 1066.98,682.988 1067.54,682.988 1068.1,682.988 1068.66,682.988 1069.22,682.988 1069.78,682.988 1070.34,682.988 1070.9,682.988 1071.46,682.988 1072.02,682.988 1072.57,682.988 1073.13,682.988 1073.69,682.988 1074.25,682.988 1074.81,682.988 1075.37,682.988 1075.93,682.988 1076.49,682.988 1077.05,682.988 1077.61,682.988 1078.17,682.988 1078.73,682.988 1079.29,682.988 1079.85,682.988 1080.4,682.988 1080.96,682.988 1081.52,682.988 1082.08,682.988 1082.64,682.988 1083.2,682.988 1083.76,682.988 1084.32,682.988 1084.88,682.988 1085.44,682.988 1086,682.988 1086.56,682.988 1087.12,682.988 1087.67,682.988 1088.23,682.988 1088.79,682.988 1089.35,682.988 1089.91,682.988 1090.47,682.988 1091.03,682.988 1091.59,682.988 1092.15,682.988 1092.71,682.988 1093.27,682.988 1093.83,682.988 1094.39,682.988 1094.94,682.988 1095.5,682.988 1096.06,682.988 1096.62,682.988 1097.18,682.988 1097.74,682.988 1098.3,682.988 1098.86,682.988 1099.42,682.988 1099.98,682.988 1100.54,682.988 1101.1,682.988 1101.66,682.988 1102.22,682.988 1102.77,682.988 1103.33,682.988 1103.89,682.988 1104.45,682.988 1105.01,682.988 1105.57,682.988 1106.13,682.988 1106.69,682.988 1107.25,682.988 1107.81,682.988 1108.37,682.988 1108.93,682.988 1109.49,682.988 1110.04,682.988 1110.6,682.988 1111.16,682.988 1111.72,682.988 1112.28,682.988 1112.84,682.988 1113.4,682.988 1113.96,682.988 1114.52,682.988 1115.08,682.988 1115.64,682.988 1116.2,682.988 1116.76,682.988 1117.31,682.988 1117.87,682.988 1118.43,682.988 1118.99,682.988 1119.55,682.988 1120.11,682.988 1120.67,682.988 1121.23,682.988 1121.79,682.988 1122.35,682.988 1122.91,682.988 1123.47,682.988 1124.03,682.988 1124.59,682.988 1125.14,682.988 1125.7,682.988 1126.26,682.988 1126.82,682.988 1127.38,682.988 1127.94,682.988 1128.5,682.988 1129.06,682.988 1129.62,682.988 1130.18,682.988 1130.74,682.988 1131.3,682.988 1131.86,682.988 1132.41,682.988 1132.97,682.988 1133.53,682.988 1134.09,682.988 1134.65,682.988 1135.21,682.988 1135.77,682.988 1136.33,682.988 1136.89,682.988 1137.45,682.988 1138.01,682.988 1138.57,682.988 1139.13,682.988 1139.68,682.988 1140.24,682.988 1140.8,682.988 1141.36,682.988 1141.92,682.988 1142.48,682.988 1143.04,682.988 1143.6,682.988 1144.16,682.988 1144.72,682.988 1145.28,682.988 1145.84,682.988 1146.4,682.988 1146.96,682.988 1147.51,682.988 1148.07,682.988 1148.63,682.988 1149.19,682.988 1149.75,682.988 1150.31,682.988 1150.87,682.988 1151.43,682.988 1151.99,682.988 1152.55,682.988 1153.11,682.988 1153.67,682.988 1154.23,682.988 1154.78,682.988 1155.34,682.988 1155.9,682.988 1156.46,682.988 1157.02,682.988 1157.58,682.988 1158.14,682.988 1158.7,682.988 1159.26,682.988 1159.82,682.988 1160.38,682.988 1160.94,682.988 1161.5,682.988 1162.05,682.988 1162.61,682.988 1163.17,682.988 1163.73,682.988 1164.29,682.988 1164.85,682.988 1165.41,682.988 1165.97,682.988 1166.53,682.988 1167.09,682.988 1167.65,682.988 1168.21,682.988 1168.77,682.988 1169.33,682.988 1169.88,682.988 1170.44,682.988 1171,682.988 1171.56,682.988 1172.12,682.988 1172.68,682.988 1173.24,682.988 1173.8,682.988 1174.36,682.988 1174.92,682.988 1175.48,682.988 1176.04,682.988 1176.6,682.988 1177.15,682.988 1177.71,682.988 1178.27,682.988 1178.83,682.988 1179.39,682.988 1179.95,682.988 1180.51,682.988 1181.07,682.988 1181.63,682.988 1182.19,682.988 1182.75,682.988 1183.31,682.988 1183.87,682.988 1184.43,682.988 1184.98,682.988 1185.54,682.988 1186.1,682.988 1186.66,682.988 1187.22,682.988 1187.78,682.988 1188.34,682.988 1188.9,682.988 1189.46,682.988 1190.02,682.988 1190.58,682.988 1191.14,682.988 1191.7,682.988 1192.25,682.988 1192.81,682.988 1193.37,682.988 1193.93,682.988 1194.49,682.988 1195.05,682.988 1195.61,682.988 1196.17,682.988 1196.73,682.988 1197.29,682.988 1197.85,682.988 1198.41,682.988 1198.97,682.988 1199.52,682.988 1200.08,682.988 1200.64,682.988 1201.2,682.988 1201.76,682.988 1202.32,682.988 1202.88,682.988 1203.44,682.988 1204,682.988 1204.56,682.988 1205.12,682.988 1205.68,682.988 1206.24,682.988 1206.8,682.988 1207.35,682.988 1207.91,682.988 1208.47,682.988 1209.03,682.988 1209.59,682.988 1210.15,682.988 1210.71,682.988 1211.27,682.988 1211.83,682.988 1212.39,682.988 1212.95,682.988 1213.51,682.988 1214.07,682.988 1214.62,682.988 1215.18,682.988 1215.74,682.988 1216.3,682.988 1216.86,682.988 1217.42,682.988 1217.98,682.988 1218.54,682.988 1219.1,682.988 1219.66,682.988 1220.22,682.988 1220.78,682.988 1221.34,682.988 1221.89,682.988 1222.45,682.988 1223.01,682.988 1223.57,682.988 1224.13,682.988 1224.69,682.988 1225.25,682.988 1225.81,682.988 1226.37,682.988 1226.93,682.988 1227.49,682.988 1228.05,682.988 1228.61,682.988 1229.17,682.988 1229.72,682.988 1230.28,682.988 1230.84,682.988 1231.4,682.988 1231.96,682.988 1232.52,682.988 1233.08,682.988 1233.64,682.988 1234.2,682.988 1234.76,682.988 1235.32,682.988 1235.88,682.988 1236.44,682.988 1236.99,682.988 1237.55,682.988 1238.11,682.988 1238.67,682.988 1239.23,682.988 1239.79,682.988 1240.35,682.988 1240.91,682.988 1241.47,682.988 1242.03,682.988 1242.59,682.988 1243.15,682.988 1243.71,682.988 1244.26,682.988 1244.82,682.988 1245.38,682.988 1245.94,682.988 1246.5,682.988 1247.06,682.988 1247.62,682.988 1248.18,682.988 1248.74,682.988 1249.3,682.988 1249.86,682.988 1250.42,682.988 1250.98,682.988 1251.54,682.988 1252.09,682.988 1252.65,682.988 1253.21,682.988 1253.77,682.988 1254.33,682.988 1254.89,682.988 1255.45,682.988 1256.01,682.988 1256.57,682.988 1257.13,682.988 1257.69,682.988 1258.25,682.988 1258.81,682.988 1259.36,682.988 1259.92,682.988 1260.48,682.988 1261.04,682.988 1261.6,682.988 1262.16,682.988 1262.72,682.988 1263.28,682.988 1263.84,682.988 1264.4,682.988 1264.96,682.988 1265.52,682.988 1266.08,682.988 1266.63,682.988 1267.19,682.988 1267.75,682.988 1268.31,682.988 1268.87,682.988 1269.43,682.988 1269.99,682.988 1270.55,682.988 1271.11,682.988 1271.67,682.988 1272.23,682.988 1272.79,682.988 1273.35,682.988 1273.91,682.988 1274.46,682.988 1275.02,682.988 1275.58,682.988 1276.14,682.988 1276.7,682.988 1277.26,682.988 1277.82,682.988 1278.38,682.988 1278.94,682.988 1279.5,682.988 1280.06,682.988 1280.62,682.988 1281.18,682.988 1281.73,682.988 1282.29,682.988 1282.85,682.988 1283.41,682.988 1283.97,682.988 1284.53,682.988 1285.09,682.988 1285.65,682.988 1286.21,682.988 1286.77,682.988 1287.33,682.988 1287.89,682.988 1288.45,682.988 1289,682.988 1289.56,682.988 1290.12,682.988 1290.68,682.988 1291.24,682.988 1291.8,682.988 1292.36,682.988 1292.92,682.988 1293.48,682.988 1294.04,682.988 1294.6,682.988 1295.16,682.988 1295.72,682.988 1296.28,682.988 1296.83,682.988 1297.39,682.988 1297.95,682.988 1298.51,682.988 1299.07,682.988 1299.63,682.988 1300.19,682.988 1300.75,682.988 1301.31,682.988 1301.87,682.988 1302.43,682.988 1302.99,682.988 1303.55,682.988 1304.1,682.988 1304.66,682.988 1305.22,682.988 1305.78,682.988 1306.34,682.988 1306.9,682.988 1307.46,682.988 1308.02,682.988 1308.58,682.988 1309.14,682.988 1309.7,682.988 1310.26,682.988 1310.82,682.988 1311.38,682.988 1311.93,682.988 1312.49,682.988 1313.05,682.988 1313.61,682.988 1314.17,682.988 1314.73,682.988 1315.29,682.988 1315.85,682.988 1316.41,682.988 1316.97,682.988 1317.53,682.988 1318.09,682.988 1318.65,682.988 1319.2,682.988 1319.76,682.988 1320.32,682.988 1320.88,682.988 1321.44,682.988 1322,682.988 1322.56,682.988 1323.12,682.988 1323.68,682.988 1324.24,682.988 1324.8,682.988 1325.36,682.988 1325.92,682.988 1326.47,682.988 1327.03,682.988 1327.59,682.988 1328.15,682.988 1328.71,682.988 1329.27,682.988 1329.83,682.988 1330.39,682.988 1330.95,682.988 1331.51,682.988 1332.07,682.988 1332.63,682.988 1333.19,682.988 1333.75,682.988 1334.3,682.988 1334.86,682.988 1335.42,682.988 1335.98,682.988 1336.54,682.988 1337.1,682.988 1337.66,682.988 1338.22,682.988 1338.78,682.988 1339.34,682.988 1339.9,682.988 1340.46,682.988 1341.02,682.988 1341.57,682.988 1342.13,682.988 1342.69,682.988 1343.25,682.988 1343.81,682.988 1344.37,682.988 1344.93,682.988 1345.49,682.988 1346.05,682.988 1346.61,682.988 1347.17,682.988 1347.73,682.988 1348.29,682.988 1348.84,682.988 1349.4,682.988 1349.96,682.988 1350.52,682.988 1351.08,682.988 1351.64,682.988 1352.2,682.988 1352.76,682.988 1353.32,682.988 1353.88,682.988 1354.44,682.988 1355,682.988 1355.56,682.988 1356.12,682.988 1356.67,682.988 1357.23,682.988 1357.79,682.988 1358.35,682.988 1358.91,682.988 1359.47,682.988 1360.03,682.988 1360.59,682.988 1361.15,682.988 1361.71,682.988 1362.27,682.988 1362.83,682.988 1363.39,682.988 1363.94,682.988 1364.5,682.988 1365.06,682.988 1365.62,682.988 1366.18,682.988 1366.74,682.988 1367.3,682.988 1367.86,682.988 1368.42,682.988 1368.98,682.988 1369.54,682.988 1370.1,682.988 1370.66,682.988 1371.21,682.988 1371.77,682.988 1372.33,682.988 1372.89,682.988 1373.45,682.988 1374.01,682.988 1374.57,682.988 1375.13,682.988 1375.69,682.988 1376.25,682.988 1376.81,682.988 1377.37,682.988 1377.93,682.988 1378.49,682.988 1379.04,682.988 1379.6,682.988 1380.16,682.988 1380.72,682.988 1381.28,682.988 1381.84,682.988 1382.4,682.988 1382.96,682.988 1383.52,682.988 1384.08,682.988 1384.64,682.988 1385.2,682.988 1385.76,682.988 1386.31,682.988 1386.87,682.988 1387.43,682.988 1387.99,682.988 1388.55,682.988 1389.11,682.988 1389.67,682.988 1390.23,682.988 1390.79,682.988 1391.35,682.988 1391.91,682.988 1392.47,682.988 1393.03,682.988 1393.58,682.988 1394.14,682.988 1394.7,682.988 1395.26,682.988 1395.82,682.988 1396.38,682.988 1396.94,682.988 1397.5,682.988 1398.06,682.988 1398.62,682.988 1399.18,682.988 1399.74,682.988 1400.3,682.988 1400.86,682.988 1401.41,682.988 1401.97,682.988 1402.53,682.988 1403.09,682.988 1403.65,682.988 1404.21,682.988 1404.77,682.988 1405.33,682.988 1405.89,682.988 1406.45,682.988 1407.01,682.988 1407.57,682.988 1408.13,682.988 1408.68,682.988 1409.24,682.988 1409.8,682.988 1410.36,682.988 1410.92,682.988 1411.48,682.988 1412.04,682.988 1412.6,682.988 1413.16,682.988 1413.72,682.988 1414.28,682.988 1414.84,682.988 1415.4,682.988 1415.95,682.988 1416.51,682.988 1417.07,682.988 1417.63,682.988 1418.19,682.988 1418.75,682.988 1419.31,682.988 1419.87,682.988 1420.43,682.988 1420.99,682.988 1421.55,682.988 1422.11,682.988 1422.67,682.988 1423.23,682.988 1423.78,682.988 1424.34,682.988 1424.9,682.988 1425.46,682.988 1426.02,682.988 1426.58,682.988 1427.14,682.988 1427.7,682.988 1428.26,682.988 1428.82,682.988 1429.38,682.988 1429.94,682.988 1430.5,682.988 1431.05,682.988 1431.61,682.988 1432.17,682.988 1432.73,682.988 1433.29,682.988 1433.85,682.988 1434.41,682.988 1434.97,682.988 1435.53,682.988 1436.09,682.988 1436.65,682.988 1437.21,682.988 1437.77,682.988 1438.33,682.988 1438.88,682.988 1439.44,682.988 1440,682.988 1440.56,682.988 1441.12,682.988 1441.68,682.988 1442.24,682.988 1442.8,682.988 1443.36,682.988 1443.92,682.988 1444.48,682.988 1445.04,682.988 1445.6,682.988 1446.15,682.988 1446.71,682.988 1447.27,682.988 1447.83,682.988 1448.39,682.988 1448.95,682.988 1449.51,682.988 1450.07,682.988 1450.63,682.988 1451.19,682.988 1451.75,682.988 1452.31,682.988 1452.87,682.988 1453.42,682.988 1453.98,682.988 1454.54,682.988 1455.1,682.988 1455.66,682.988 1456.22,682.988 1456.78,682.988 1457.34,682.988 1457.9,682.988 1458.46,682.988 1459.02,682.988 1459.58,682.988 1460.14,682.988 1460.7,682.988 1461.25,682.988 1461.81,682.988 1462.37,682.988 1462.93,682.988 1463.49,682.988 1464.05,682.988 1464.61,682.988 1465.17,682.988 1465.73,682.988 1466.29,682.988 1466.85,682.988 1467.41,682.988 1467.97,682.988 1468.52,682.988 1469.08,682.988 1469.64,682.988 1470.2,682.988 1470.76,682.988 1471.32,682.988 1471.88,682.988 1472.44,682.988 1473,682.988 1473.56,682.988 1474.12,682.988 1474.68,682.988 1475.24,682.988 1475.79,682.988 1476.35,682.988 1476.91,682.988 1477.47,682.988 1478.03,682.988 1478.59,682.988 1479.15,682.988 1479.71,682.988 1480.27,682.988 1480.83,682.988 1481.39,682.988 1481.95,682.988 1482.51,682.988 1483.07,682.988 1483.62,682.988 1484.18,682.988 1484.74,682.988 1485.3,682.988 1485.86,682.988 1486.42,682.988 1486.98,682.988 1487.54,682.988 1488.1,682.988 1488.66,682.988 1489.22,682.988 1489.78,682.988 1490.34,682.988 1490.89,682.988 1491.45,682.988 1492.01,682.988 1492.57,682.988 1493.13,682.988 1493.69,682.988 1494.25,682.988 1494.81,682.988 1495.37,682.988 1495.93,682.988 1496.49,682.988 1497.05,682.988 1497.61,682.988 1498.16,682.988 1498.72,682.988 1499.28,682.988 1499.84,682.988 1500.4,682.988 1500.96,682.988 1501.52,682.988 1502.08,682.988 1502.64,682.988 1503.2,682.988 1503.76,682.988 1504.32,682.988 1504.88,682.988 1505.44,682.988 1505.99,682.988 1506.55,682.988 1507.11,682.988 1507.67,682.988 1508.23,682.988 1508.79,682.988 1509.35,682.988 1509.91,682.988 1510.47,682.988 1511.03,682.988 1511.59,682.988 1512.15,682.988 1512.71,682.988 1513.26,682.988 1513.82,682.988 1514.38,682.988 1514.94,682.988 1515.5,682.988 1516.06,682.988 1516.62,682.988 1517.18,682.988 1517.74,682.988 1518.3,682.988 1518.86,682.988 1519.42,682.988 1519.98,682.988 1520.53,682.988 1521.09,682.988 1521.65,682.988 1522.21,682.988 1522.77,682.988 1523.33,682.988 1523.89,682.988 1524.45,682.988 1525.01,682.988 1525.57,682.988 1526.13,682.988 1526.69,682.988 1527.25,682.988 1527.81,682.988 1528.36,682.988 1528.92,682.988 1529.48,682.988 1530.04,682.988 1530.6,682.988 1531.16,682.988 1531.72,682.988 1532.28,682.988 1532.84,682.988 1533.4,682.988 1533.96,682.988 1534.52,682.988 1535.08,682.988 1535.63,682.988 1536.19,682.988 1536.75,682.988 1537.31,682.988 1537.87,682.988 1538.43,682.988 1538.99,682.988 1539.55,682.988 1540.11,682.988 1540.67,682.988 1541.23,682.988 1541.79,682.988 1542.35,682.988 1542.9,682.988 1543.46,682.988 1544.02,682.988 1544.58,682.988 1545.14,682.988 1545.7,682.988 1546.26,682.988 1546.82,682.988 1547.38,682.988 1547.94,682.988 1548.5,682.988 1549.06,682.988 1549.62,682.988 1550.18,682.988 1550.73,682.988 1551.29,682.988 1551.85,682.988 1552.41,682.988 1552.97,682.988 1553.53,682.988 1554.09,682.988 1554.65,682.988 1555.21,682.988 1555.77,682.988 1556.33,682.988 1556.89,682.988 1557.45,682.988 1558,682.988 1558.56,682.988 1559.12,682.988 1559.68,682.988 1560.24,682.988 1560.8,682.988 1561.36,682.988 1561.92,682.988 1562.48,682.988 1563.04,682.988 1563.6,682.988 1564.16,682.988 1564.72,682.988 1565.28,682.988 1565.83,682.988 1566.39,682.988 1566.95,682.988 1567.51,682.988 1568.07,682.988 1568.63,682.988 1569.19,682.988 1569.75,682.988 1570.31,682.988 1570.87,682.988 1571.43,682.988 1571.99,682.988 1572.55,682.988 1573.1,682.988 1573.66,682.988 1574.22,682.988 1574.78,682.988 1575.34,682.988 1575.9,682.988 1576.46,682.988 1577.02,682.988 1577.58,682.988 1578.14,682.988 1578.7,682.988 1579.26,682.988 1579.82,682.988 1580.37,682.988 1580.93,682.988 1581.49,682.988 1582.05,682.988 1582.61,682.988 1583.17,682.988 1583.73,682.988 1584.29,682.988 1584.85,682.988 1585.41,682.988 1585.97,682.988 1586.53,682.988 1587.09,682.988 1587.65,682.988 1588.2,682.988 1588.76,682.988 1589.32,682.988 1589.88,682.988 1590.44,682.988 1591,682.988 1591.56,682.988 1592.12,682.988 1592.68,682.988 1593.24,682.988 1593.8,682.988 1594.36,682.988 1594.92,682.988 1595.47,682.988 1596.03,682.988 1596.59,682.988 1597.15,682.988 1597.71,682.988 1598.27,682.988 1598.83,682.988 1599.39,682.988 1599.95,682.988 1600.51,682.988 1601.07,682.988 1601.63,682.988 1602.19,682.988 1602.74,682.988 1603.3,682.988 1603.86,682.988 1604.42,682.988 1604.98,682.988 1605.54,682.988 1606.1,682.988 1606.66,682.988 1607.22,682.988 1607.78,682.988 1608.34,682.988 1608.9,682.988 1609.46,682.988 1610.02,682.988 1610.57,682.988 1611.13,682.988 1611.69,682.988 1612.25,682.988 1612.81,682.988 1613.37,682.988 1613.93,682.988 1614.49,682.988 1615.05,682.988 1615.61,682.988 1616.17,682.988 1616.73,682.988 1617.29,682.988 1617.84,682.988 1618.4,682.988 1618.96,682.988 1619.52,682.988 1620.08,682.988 1620.64,682.988 1621.2,682.988 1621.76,682.988 1622.32,682.988 1622.88,682.988 1623.44,682.988 1624,682.988 1624.56,682.988 1625.11,682.988 1625.67,682.988 1626.23,682.988 1626.79,682.988 1627.35,682.988 1627.91,682.988 1628.47,682.988 1629.03,682.988 1629.59,682.988 1630.15,682.988 1630.71,682.988 1631.27,682.988 1631.83,682.988 1632.39,682.988 1632.94,682.988 1633.5,682.988 1634.06,682.988 1634.62,682.988 1635.18,682.988 1635.74,682.988 1636.3,682.988 1636.86,682.988 1637.42,682.988 1637.98,682.988 1638.54,682.988 1639.1,682.988 1639.66,682.988 1640.21,682.988 1640.77,682.988 1641.33,682.988 1641.89,682.988 1642.45,682.988 1643.01,682.988 1643.57,682.988 1644.13,682.988 1644.69,682.988 1645.25,682.988 1645.81,682.988 1646.37,682.988 1646.93,682.988 1647.48,682.988 1648.04,682.988 1648.6,682.988 1649.16,682.988 1649.72,682.988 1650.28,682.988 1650.84,682.988 1651.4,682.988 1651.96,682.988 1652.52,682.988 1653.08,682.988 1653.64,682.988 1654.2,682.988 1654.76,682.988 1655.31,682.988 1655.87,682.988 1656.43,682.988 1656.99,682.988 1657.55,682.988 1658.11,682.988 1658.67,682.988 1659.23,682.988 1659.79,682.988 1660.35,682.988 1660.91,682.988 1661.47,682.988 1662.03,682.988 1662.58,682.988 1663.14,682.988 1663.7,682.988 1664.26,682.988 1664.82,682.988 1665.38,682.988 1665.94,682.988 1666.5,682.988 1667.06,682.988 1667.62,682.988 1668.18,682.988 1668.74,682.988 1669.3,682.988 1669.85,682.988 1670.41,682.988 1670.97,682.988 1671.53,682.988 1672.09,682.988 1672.65,682.988 1673.21,682.988 1673.77,682.988 1674.33,682.988 1674.89,682.988 1675.45,682.988 1676.01,682.988 1676.57,682.988 1677.13,682.988 1677.68,682.988 1678.24,682.988 1678.8,682.988 1679.36,682.988 1679.92,682.988 1680.48,682.988 1681.04,682.988 1681.6,682.988 1682.16,682.988 1682.72,682.988 1683.28,682.988 1683.84,682.988 1684.4,682.988 1684.95,682.988 1685.51,682.988 1686.07,682.988 1686.63,682.988 1687.19,682.988 1687.75,682.988 1688.31,682.988 1688.87,682.988 1689.43,682.988 1689.99,682.988 1690.55,682.988 1691.11,682.988 1691.67,682.988 1692.23,682.988 1692.78,682.988 1693.34,682.988 1693.9,682.988 1694.46,682.988 1695.02,682.988 1695.58,682.988 1696.14,682.988 1696.7,682.988 1697.26,682.988 1697.82,682.988 1698.38,682.988 1698.94,682.988 1699.5,682.988 1700.05,682.988 1700.61,682.988 1701.17,682.988 1701.73,682.988 1702.29,682.988 1702.85,682.988 1703.41,682.988 1703.97,682.988 1704.53,682.988 1705.09,682.988 1705.65,682.988 1706.21,682.988 1706.77,682.988 1707.32,682.988 1707.88,682.988 1708.44,682.988 1709,682.988 1709.56,682.988 1710.12,682.988 1710.68,682.988 1711.24,682.988 1711.8,682.988 1712.36,682.988 1712.92,682.988 1713.48,682.988 1714.04,682.988 1714.6,682.988 1715.15,682.988 1715.71,682.988 1716.27,682.988 1716.83,682.988 1717.39,682.988 1717.95,682.988 1718.51,682.988 1719.07,682.988 1719.63,682.988 1720.19,682.988 1720.75,682.988 1721.31,682.988 1721.87,682.988 1722.42,682.988 1722.98,682.988 1723.54,682.988 1724.1,682.988 1724.66,682.988 1725.22,682.988 1725.78,682.988 1726.34,682.988 1726.9,682.988 1727.46,682.988 1728.02,682.988 1728.58,682.988 1729.14,682.988 1729.69,682.988 1730.25,682.988 1730.81,682.988 1731.37,682.988 1731.93,682.988 1732.49,682.988 1733.05,682.988 1733.61,682.988 1734.17,682.988 1734.73,682.988 1735.29,682.988 1735.85,682.988 1736.41,682.988 1736.97,682.988 1737.52,682.988 1738.08,682.988 1738.64,682.988 1739.2,682.988 1739.76,682.988 1740.32,682.988 1740.88,682.988 1741.44,682.988 1742,682.988 1742.56,682.988 1743.12,682.988 1743.68,682.988 1744.24,682.988 1744.79,682.988 1745.35,682.988 1745.91,682.988 1746.47,682.988 1747.03,682.988 1747.59,682.988 1748.15,682.988 1748.71,682.988 1749.27,682.988 1749.83,682.988 1750.39,682.988 1750.95,682.988 1751.51,682.988 1752.06,682.988 1752.62,682.988 1753.18,682.988 1753.74,682.988 1754.3,682.988 1754.86,682.988 1755.42,682.988 1755.98,682.988 1756.54,682.988 1757.1,682.988 1757.66,682.988 1758.22,682.988 1758.78,682.988 1759.34,682.988 1759.89,682.988 1760.45,682.988 1761.01,682.988 1761.57,682.988 1762.13,682.988 1762.69,682.988 1763.25,682.988 1763.81,682.988 1764.37,682.988 1764.93,682.988 1765.49,682.988 1766.05,682.988 1766.61,682.988 1767.16,682.988 1767.72,682.988 1768.28,682.988 1768.84,682.988 1769.4,682.988 1769.96,682.988 1770.52,682.988 1771.08,682.988 1771.64,682.988 1772.2,682.988 1772.76,682.988 1773.32,682.988 1773.88,682.988 1774.43,682.988 1774.99,682.988 1775.55,682.988 1776.11,682.988 1776.67,682.988 1777.23,682.988 1777.79,682.988 1778.35,682.988 1778.91,682.988 1779.47,682.988 1780.03,682.988 1780.59,682.988 1781.15,682.988 1781.71,682.988 1782.26,682.988 1782.82,682.988 1783.38,682.988 1783.94,682.988 1784.5,682.988 1785.06,682.988 1785.62,682.988 1786.18,682.988 1786.74,682.988 1787.3,682.988 1787.86,682.988 1788.42,682.988 1788.98,682.988 1789.53,682.988 1790.09,682.988 1790.65,682.988 1791.21,682.988 1791.77,682.988 1792.33,682.988 1792.89,682.988 1793.45,682.988 1794.01,682.988 1794.57,682.988 1795.13,682.988 1795.69,682.988 1796.25,682.988 1796.8,682.988 1797.36,682.988 1797.92,682.988 1798.48,682.988 1799.04,682.988 1799.6,682.988 1800.16,682.988 1800.72,682.988 1801.28,682.988 1801.84,682.988 1802.4,682.988 1802.96,682.988 1803.52,682.988 1804.08,682.988 1804.63,682.988 1805.19,682.988 1805.75,682.988 1806.31,682.988 1806.87,682.988 1807.43,682.988 1807.99,682.988 1808.55,682.988 1809.11,682.988 1809.67,682.988 1810.23,682.988 1810.79,682.988 1811.35,682.988 1811.9,682.988 1812.46,682.988 1813.02,682.988 1813.58,682.988 1814.14,682.988 1814.7,682.988 1815.26,682.988 1815.82,682.988 1816.38,682.988 1816.94,682.988 1817.5,682.988 1818.06,682.988 1818.62,682.988 1819.18,682.988 1819.73,682.988 1820.29,682.988 1820.85,682.988 1821.41,682.988 1821.97,682.988 1822.53,682.988 1823.09,682.988 1823.65,682.988 1824.21,682.988 1824.77,682.988 1825.33,682.988 1825.89,682.988 1826.45,682.988 1827,682.988 1827.56,682.988 1828.12,682.988 1828.68,682.988 1829.24,682.988 1829.8,682.988 1830.36,682.988 1830.92,682.988 1831.48,682.988 1832.04,682.988 1832.6,682.988 1833.16,682.988 1833.72,682.988 1834.27,682.988 1834.83,682.988 1835.39,682.988 1835.95,682.988 1836.51,682.988 1837.07,682.988 1837.63,682.988 1838.19,682.988 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0272601047950465 ± 0.021701323334252388\nProjected Energy: -4.012082015818644 ± (0.005370034255077982, 0.005098396386215676)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.09963</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.5316e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.654e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.621e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">4.389e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">7.174e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.3975e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321626\n -3.3631242916133406\n -0.7590191922770906\n  0.13584182219621965\n  0.1578999869460862\n  0.876711441178136\n  1.5305929970973366\n  1.5835732611867313\n  3.0728703303258644\n  3.1256726539518356\n  4.86210722156217\n  6.260694850380592\n  6.402671211183106\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates. Indexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nFields\n\nspectral_states: Tuple of SpectralStates\nmax_length::Ref{Int}: Maximum length of the simulation\nstep::Ref{Int}: Current step of the simulation\nsimulation_plan: Simulation plan\nreporting_strategy: Reporting strategy\npost_step_strategy: Post-step strategy\nreplica_strategy: Replica strategy\n\nSee also ReplicaStrategy, Rimu.SpectralState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy for ProjectorMonteCarloProblem. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\nSee also ProjectorMonteCarloProblem, ReportToFile.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy for ProjectorMonteCarloProblem that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df, save_df, ReportDFAndInfo, and ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data during a simulation of a ProjectorMonteCarloProblem.\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nExtended help\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nRimu.refine_reporting_strategy\nRimu.report!\nRimu.report_after_step!\nRimu.finalize_report!\nRimu.reporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, wall_time = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the wall_time is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with Rimu.advance!.\n\nFields\n\nhamiltonian: Hamiltonian\nalgorithm: Algorithm\nv: Vector\npv: Previous vector\nwm: Working memory\nshift_parameters: Shift parameters\nid::String: id is appended to column names\n\nSee also SpectralStrategy, ReplicaStrategy, Rimu.SpectralState, Rimu.ReplicaState, Rimu.replica_stats, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several Rimu.SingleStates representing the ground state and excited states of a single replica. Indexing the SpectralState state[i] returns the ith SingleState.\n\nFields\n\nsingle_states: Tuple of SingleStates\nspectral_strategy: Strategy for computing the spectral states\nid::String: Identifies the replica\n\nSee also SpectralStrategy, Rimu.ReplicaState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = @suppress lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = @suppress lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after Rimu.reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 0.8, 0.8, 0.2, 0.2)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an r×s AbstractMatrix of configuration vectors from the state, or the result of solve(::ProjectorMonteCarloProblem). The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also ProjectorMonteCarloProblem, Rimu.PMCSimulation, Rimu.SingleState, Rimu.ReplicaState, Rimu.SpectralState.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
