var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.20939282332515774 ± 0.001333181642889731\n   G2(1) = 0.9179973135088857 ± 0.0005897176391729626\n   G2(2) = 0.9822290716806389 ± 0.0006530882724059754\n   G2(3) = 0.990154406295793 ± 0.0009789071973422265\n   G2(4) = 0.9822290716806389 ± 0.0006530882724059754\n   G2(5) = 0.9179973135088857 ± 0.0005897176391729626\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.0610465144092105 ± 0.13125855552603946\n   Replica 2: -3.979835686918004 ± 0.11645476228272816\n   Replica 3: -3.9673278401098613 ± 0.12345449224993872\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip160\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip160)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip161\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip160)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip162\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.36 2211.02,1003.36 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.895 2211.02,745.895 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.43 2211.02,488.43 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.964 2211.02,230.964 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.36 423.181,1003.36 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.895 423.181,745.895 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.43 423.181,488.43 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.964 423.181,230.964 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.97 350.899 1271.53 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.53 Q363.608 1267.97 363.608 1260.86 Q363.608 1253.73 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.92 Q362.149 1242.92 365.205 1247.53 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.86 Q344.395 1252.11 347.45 1247.53 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M290.043 1016.71 L306.363 1016.71 L306.363 1020.64 L284.418 1020.64 L284.418 1016.71 Q287.08 1013.95 291.664 1009.32 Q296.27 1004.67 297.451 1003.33 Q299.696 1000.8 300.576 999.067 Q301.478 997.308 301.478 995.618 Q301.478 992.864 299.534 991.128 Q297.613 989.392 294.511 989.392 Q292.312 989.392 289.858 990.155 Q287.427 990.919 284.65 992.47 L284.65 987.748 Q287.474 986.614 289.927 986.035 Q292.381 985.456 294.418 985.456 Q299.789 985.456 302.983 988.142 Q306.177 990.827 306.177 995.317 Q306.177 997.447 305.367 999.368 Q304.58 1001.27 302.474 1003.86 Q301.895 1004.53 298.793 1007.75 Q295.691 1010.94 290.043 1016.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M316.224 986.081 L334.58 986.081 L334.58 990.017 L320.506 990.017 L320.506 998.489 Q321.524 998.141 322.543 997.979 Q323.562 997.794 324.58 997.794 Q330.367 997.794 333.747 1000.97 Q337.126 1004.14 337.126 1009.55 Q337.126 1015.13 333.654 1018.23 Q330.182 1021.31 323.862 1021.31 Q321.687 1021.31 319.418 1020.94 Q317.173 1020.57 314.765 1019.83 L314.765 1015.13 Q316.849 1016.27 319.071 1016.82 Q321.293 1017.38 323.77 1017.38 Q327.774 1017.38 330.112 1015.27 Q332.45 1013.16 332.45 1009.55 Q332.45 1005.94 330.112 1003.84 Q327.774 1001.73 323.77 1001.73 Q321.895 1001.73 320.02 1002.15 Q318.168 1002.56 316.224 1003.44 L316.224 986.081 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M356.339 989.16 Q352.728 989.16 350.899 992.725 Q349.094 996.266 349.094 1003.4 Q349.094 1010.5 350.899 1014.07 Q352.728 1017.61 356.339 1017.61 Q359.973 1017.61 361.779 1014.07 Q363.608 1010.5 363.608 1003.4 Q363.608 996.266 361.779 992.725 Q359.973 989.16 356.339 989.16 M356.339 985.456 Q362.149 985.456 365.205 990.063 Q368.284 994.646 368.284 1003.4 Q368.284 1012.12 365.205 1016.73 Q362.149 1021.31 356.339 1021.31 Q350.529 1021.31 347.45 1016.73 Q344.395 1012.12 344.395 1003.4 Q344.395 994.646 347.45 990.063 Q350.529 985.456 356.339 985.456 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M286.062 728.615 L304.418 728.615 L304.418 732.551 L290.344 732.551 L290.344 741.023 Q291.363 740.676 292.381 740.514 Q293.4 740.328 294.418 740.328 Q300.205 740.328 303.585 743.5 Q306.964 746.671 306.964 752.088 Q306.964 757.666 303.492 760.768 Q300.02 763.847 293.701 763.847 Q291.525 763.847 289.256 763.476 Q287.011 763.106 284.603 762.365 L284.603 757.666 Q286.687 758.801 288.909 759.356 Q291.131 759.912 293.608 759.912 Q297.613 759.912 299.951 757.805 Q302.288 755.699 302.288 752.088 Q302.288 748.476 299.951 746.37 Q297.613 744.264 293.608 744.264 Q291.733 744.264 289.858 744.68 Q288.006 745.097 286.062 745.977 L286.062 728.615 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M326.177 731.694 Q322.566 731.694 320.737 735.259 Q318.932 738.801 318.932 745.93 Q318.932 753.037 320.737 756.601 Q322.566 760.143 326.177 760.143 Q329.811 760.143 331.617 756.601 Q333.446 753.037 333.446 745.93 Q333.446 738.801 331.617 735.259 Q329.811 731.694 326.177 731.694 M326.177 727.99 Q331.987 727.99 335.043 732.597 Q338.122 737.18 338.122 745.93 Q338.122 754.657 335.043 759.263 Q331.987 763.847 326.177 763.847 Q320.367 763.847 317.288 759.263 Q314.233 754.657 314.233 745.93 Q314.233 737.18 317.288 732.597 Q320.367 727.99 326.177 727.99 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M356.339 731.694 Q352.728 731.694 350.899 735.259 Q349.094 738.801 349.094 745.93 Q349.094 753.037 350.899 756.601 Q352.728 760.143 356.339 760.143 Q359.973 760.143 361.779 756.601 Q363.608 753.037 363.608 745.93 Q363.608 738.801 361.779 735.259 Q359.973 731.694 356.339 731.694 M356.339 727.99 Q362.149 727.99 365.205 732.597 Q368.284 737.18 368.284 745.93 Q368.284 754.657 365.205 759.263 Q362.149 763.847 356.339 763.847 Q350.529 763.847 347.45 759.263 Q344.395 754.657 344.395 745.93 Q344.395 737.18 347.45 732.597 Q350.529 727.99 356.339 727.99 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M284.835 471.15 L307.057 471.15 L307.057 473.14 L294.511 505.71 L289.627 505.71 L301.432 475.085 L284.835 475.085 L284.835 471.15 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M316.224 471.15 L334.58 471.15 L334.58 475.085 L320.506 475.085 L320.506 483.557 Q321.524 483.21 322.543 483.048 Q323.562 482.863 324.58 482.863 Q330.367 482.863 333.747 486.034 Q337.126 489.205 337.126 494.622 Q337.126 500.2 333.654 503.302 Q330.182 506.381 323.862 506.381 Q321.687 506.381 319.418 506.011 Q317.173 505.64 314.765 504.899 L314.765 500.2 Q316.849 501.335 319.071 501.89 Q321.293 502.446 323.77 502.446 Q327.774 502.446 330.112 500.339 Q332.45 498.233 332.45 494.622 Q332.45 491.011 330.112 488.904 Q327.774 486.798 323.77 486.798 Q321.895 486.798 320.02 487.214 Q318.168 487.631 316.224 488.511 L316.224 471.15 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M356.339 474.228 Q352.728 474.228 350.899 477.793 Q349.094 481.335 349.094 488.464 Q349.094 495.571 350.899 499.136 Q352.728 502.677 356.339 502.677 Q359.973 502.677 361.779 499.136 Q363.608 495.571 363.608 488.464 Q363.608 481.335 361.779 477.793 Q359.973 474.228 356.339 474.228 M356.339 470.525 Q362.149 470.525 365.205 475.131 Q368.284 479.714 368.284 488.464 Q368.284 497.191 365.205 501.798 Q362.149 506.381 356.339 506.381 Q350.529 506.381 347.45 501.798 Q344.395 497.191 344.395 488.464 Q344.395 479.714 347.45 475.131 Q350.529 470.525 356.339 470.525 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M256.664 244.309 L264.303 244.309 L264.303 217.943 L255.992 219.61 L255.992 215.35 L264.256 213.684 L268.932 213.684 L268.932 244.309 L276.571 244.309 L276.571 248.244 L256.664 248.244 L256.664 244.309 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M296.015 216.762 Q292.404 216.762 290.576 220.327 Q288.77 223.869 288.77 230.999 Q288.77 238.105 290.576 241.67 Q292.404 245.211 296.015 245.211 Q299.65 245.211 301.455 241.67 Q303.284 238.105 303.284 230.999 Q303.284 223.869 301.455 220.327 Q299.65 216.762 296.015 216.762 M296.015 213.059 Q301.826 213.059 304.881 217.665 Q307.96 222.249 307.96 230.999 Q307.96 239.725 304.881 244.332 Q301.826 248.915 296.015 248.915 Q290.205 248.915 287.127 244.332 Q284.071 239.725 284.071 230.999 Q284.071 222.249 287.127 217.665 Q290.205 213.059 296.015 213.059 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M326.177 216.762 Q322.566 216.762 320.737 220.327 Q318.932 223.869 318.932 230.999 Q318.932 238.105 320.737 241.67 Q322.566 245.211 326.177 245.211 Q329.811 245.211 331.617 241.67 Q333.446 238.105 333.446 230.999 Q333.446 223.869 331.617 220.327 Q329.811 216.762 326.177 216.762 M326.177 213.059 Q331.987 213.059 335.043 217.665 Q338.122 222.249 338.122 230.999 Q338.122 239.725 335.043 244.332 Q331.987 248.915 326.177 248.915 Q320.367 248.915 317.288 244.332 Q314.233 239.725 314.233 230.999 Q314.233 222.249 317.288 217.665 Q320.367 213.059 326.177 213.059 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M356.339 216.762 Q352.728 216.762 350.899 220.327 Q349.094 223.869 349.094 230.999 Q349.094 238.105 350.899 241.67 Q352.728 245.211 356.339 245.211 Q359.973 245.211 361.779 241.67 Q363.608 238.105 363.608 230.999 Q363.608 223.869 361.779 220.327 Q359.973 216.762 356.339 216.762 M356.339 213.059 Q362.149 213.059 365.205 217.665 Q368.284 222.249 368.284 230.999 Q368.284 239.725 365.205 244.332 Q362.149 248.915 356.339 248.915 Q350.529 248.915 347.45 244.332 Q344.395 239.725 344.395 230.999 Q344.395 222.249 347.45 217.665 Q350.529 213.059 356.339 213.059 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip162)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.964 4017.76,230.964 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1249.28 457.123,1249.12 457.691,1248.89 458.259,1247.57 458.828,1247.26 459.396,1246.86 459.964,1246.37 460.533,1245.81 461.101,1245.17 461.669,1244.44 462.238,1243.63 462.806,1242.76 463.375,1240.77 463.943,1238.73 464.511,1237.66 465.08,1236.45 465.648,1235.17 466.216,1233.77 466.785,1232.23 467.353,1228.52 467.921,1225.7 468.49,1222.8 469.058,1220.74 469.626,1218.55 470.195,1216.26 470.763,1212.73 471.331,1210.1 471.9,1205.27 472.468,1201.29 473.036,1198.04 473.605,1194.69 474.173,1189.16 474.741,1185.53 475.31,1181.67 475.878,1176.57 476.446,1172.28 477.015,1165.69 477.583,1159.93 478.152,1152.89 478.72,1147.69 479.288,1141.21 479.857,1135.56 480.425,1129.66 480.993,1122.54 481.562,1115.21 482.13,1108.77 482.698,1100.01 483.267,1092.16 483.835,1084.1 484.403,1074.86 484.972,1067.56 485.54,1057.9 486.108,1050.4 486.677,1042.57 487.245,1034.63 487.813,1025.52 488.382,1017.24 488.95,1008.73 489.518,996.967 490.087,988.353 490.655,978.57 491.224,968.698 491.792,959.736 492.36,948.521 492.929,937.325 493.497,926.081 494.065,915.855 494.634,905.522 495.202,894.036 495.77,883.665 496.339,874.183 496.907,863.598 497.475,851.115 498.044,840.679 498.612,830.445 499.18,819.033 499.749,807.769 500.317,797.54 500.885,786.321 501.454,775.073 502.022,761.858 502.59,751.915 503.159,741.004 503.727,729.177 504.295,719.762 504.864,709.237 505.432,698.806 506.001,690.659 506.569,680.471 507.137,671.297 507.706,660.188 508.274,649.364 508.842,640.576 509.411,633.023 509.979,625.608 510.547,616.07 511.116,608.711 511.684,600.431 512.252,592.185 512.821,582.98 513.389,572.825 513.957,565.339 514.526,557.723 515.094,550.101 515.662,543.818 516.231,537.577 516.799,531.226 517.367,525.18 517.936,516.956 518.504,507.983 519.072,501.319 519.641,494.723 520.209,488.359 520.778,484.205 521.346,476.698 521.914,467.679 522.483,460.671 523.051,456.272 523.619,450.463 524.188,443.785 524.756,437.337 525.324,430.961 525.893,423.922 526.461,419.273 527.029,412.585 527.598,410.103 528.166,405.704 528.734,402.295 529.303,397.115 529.871,392.857 530.439,388.568 531.008,385.858 531.576,382.747 532.144,380.945 532.713,377.917 533.281,369.908 533.85,367.196 534.418,361.42 534.986,359.173 535.555,354.817 536.123,351.802 536.691,349.762 537.26,348.83 537.828,345.739 538.396,343.356 538.965,341.334 539.533,339.225 540.101,336.064 540.67,334.282 541.238,331.242 541.806,329.523 542.375,324.656 542.943,321.092 543.511,318.537 544.08,315.112 544.648,312.88 545.216,311.932 545.785,310.726 546.353,308.485 546.921,307.339 547.49,306.145 548.058,305.193 548.627,304.076 549.195,301.721 549.763,299.509 550.332,295.495 550.9,292.72 551.468,290.95 552.037,289.142 552.605,288.751 553.173,287.165 553.742,288.767 554.31,287.063 554.878,285.033 555.447,284.548 556.015,282.71 556.583,283.307 557.152,280.735 557.72,280.344 558.288,276.77 558.857,275.481 559.425,274.205 559.993,271.761 560.562,271.699 561.13,268.326 561.698,266.279 562.267,266.393 562.835,263.173 563.404,260.375 563.972,259.747 564.54,260.097 565.109,260.472 565.677,262.893 566.245,265.069 566.814,264.828 567.382,261.625 567.95,260.522 568.519,260.707 569.087,259.817 569.655,257.032 570.224,256.194 570.792,255.493 571.36,257.896 571.929,259.132 572.497,260.215 573.065,260.318 573.634,259.238 574.202,258.275 574.77,256.277 575.339,256.355 575.907,256.326 576.476,256.555 577.044,255.321 577.612,255.459 578.181,253.416 578.749,253.565 579.317,253.692 579.886,253.888 580.454,254.206 581.022,252.075 581.591,254.341 582.159,252.237 582.727,254.579 583.296,254.645 583.864,255.322 584.432,255.85 585.001,255.48 585.569,254.279 586.137,253.029 586.706,252.924 587.274,250.519 587.842,250.374 588.411,247.147 588.979,249.391 589.547,248.549 590.116,248.464 590.684,247.485 591.253,248.507 591.821,247.558 592.389,249.453 592.958,248.466 593.526,248.453 594.094,248.495 594.663,249.527 595.231,246.501 595.799,247.599 596.368,248.694 596.936,245.824 597.504,244.844 598.073,244.883 598.641,243.928 599.209,243.009 599.778,243.339 600.346,243.584 600.914,244.654 601.483,246.9 602.051,244.833 602.619,246.083 603.188,243.89 603.756,247.152 604.325,246.118 604.893,244.851 605.461,243.669 606.03,243.709 606.598,243.944 607.166,242.863 607.735,240.054 608.303,240.239 608.871,235.536 609.44,236.432 610.008,236.857 610.576,234.624 611.145,235.277 611.713,236.89 612.281,234.402 612.85,235.131 613.418,234.74 613.986,236.417 614.555,234.886 615.123,235.541 615.691,237.209 616.26,239.697 616.828,239.061 617.396,240.474 617.965,241.771 618.533,242.809 619.102,243.073 619.67,245.232 620.238,247.318 620.807,247.206 621.375,248.045 621.943,247.566 622.512,247.213 623.08,247.719 623.648,247.366 624.217,249.112 624.785,245.698 625.353,245.432 625.922,245.999 626.49,244.61 627.058,243.218 627.627,243.983 628.195,244.716 628.763,240.387 629.332,241.346 629.9,241.461 630.468,238.235 631.037,237.45 631.605,238.998 632.173,240.43 632.742,241.47 633.31,244.473 633.879,241.822 634.447,242.678 635.015,241.407 635.584,241.242 636.152,242.338 636.72,241.994 637.289,242.898 637.857,242.707 638.425,243.251 638.994,242.898 639.562,241.65 640.13,241.578 640.699,238.441 641.267,237.652 641.835,237.553 642.404,236.406 642.972,236.449 643.54,237.576 644.109,238.508 644.677,238.411 645.245,240.463 645.814,240.213 646.382,240.046 646.951,239.739 647.519,240.521 648.087,239.151 648.656,239.936 649.224,238.708 649.792,238.464 650.361,238.506 650.929,238.345 651.497,237.994 652.066,239.893 652.634,239.602 653.202,237.393 653.771,239.601 654.339,241.271 654.907,240.932 655.476,239.506 656.044,236.121 656.612,235.227 657.181,235.607 657.749,232.452 658.317,234.654 658.886,235.788 659.454,235.858 660.022,235.634 660.591,236.681 661.159,236.433 661.728,237.197 662.296,234.094 662.864,234.373 663.433,234.554 664.001,236.724 664.569,238.564 665.138,237.229 665.706,239.11 666.274,237.734 666.843,236.518 667.411,235.557 667.979,233.511 668.548,233.671 669.116,233.749 669.684,232.612 670.253,230.807 670.821,230.938 671.389,231.099 671.958,232.273 672.526,232.457 673.094,228.567 673.663,228.87 674.231,229.283 674.799,229.652 675.368,228.696 675.936,229.043 676.505,229.613 677.073,230.182 677.641,231.575 678.21,229.977 678.778,229.596 679.346,228.903 679.915,229.339 680.483,228.66 681.051,230.396 681.62,230.688 682.188,229.993 682.756,230.166 683.325,230.68 683.893,228.991 684.461,227.452 685.03,228.143 685.598,230.711 686.166,232.998 686.735,234.315 687.303,235.492 687.871,235.333 688.44,234.266 689.008,235.162 689.577,235.118 690.145,237.37 690.713,237.111 691.282,237.9 691.85,238.758 692.418,238.504 692.987,238.079 693.555,240.91 694.123,239.426 694.692,237.002 695.26,236.624 695.828,236.723 696.397,237.719 696.965,236.565 697.533,238.326 698.102,238.991 698.67,240.505 699.238,239.055 699.807,239.665 700.375,239.213 700.943,237.752 701.512,235.43 702.08,235.43 702.648,233.071 703.217,230.815 703.785,230.944 704.354,230.217 704.922,230.649 705.49,228.5 706.059,228.792 706.627,229.071 707.195,228.366 707.764,228.804 708.332,230.232 708.9,231.643 709.469,234.783 710.037,232.538 710.605,231.611 711.174,231.694 711.742,232.952 712.31,233.997 712.879,231.841 713.447,229.954 714.015,228.869 714.584,228.281 715.152,228.733 715.72,230.15 716.289,230.578 716.857,232.109 717.425,232.233 717.994,230.3 718.562,232.675 719.131,232.651 719.699,237.748 720.267,238.511 720.836,240.126 721.404,240.517 721.972,238.965 722.541,239.562 723.109,239.953 723.677,241.577 724.246,239.89 724.814,241.451 725.382,242.852 725.951,241.01 726.519,240.599 727.087,238.97 727.656,238.482 728.224,235.947 728.792,235.634 729.361,236.559 729.929,235.259 730.497,232.941 731.066,232.864 731.634,232.908 732.203,230.911 732.771,229.907 733.339,230.085 733.908,228.076 734.476,228.247 735.044,227.385 735.613,225.596 736.181,227.016 736.749,226.405 737.318,225.871 737.886,224.4 738.454,226.482 739.023,227.138 739.591,224.8 740.159,226.464 740.728,226.02 741.296,227.43 741.864,228.002 742.433,227.477 743.001,230.126 743.569,229.321 744.138,231.564 744.706,231.872 745.274,231.899 745.843,232.015 746.411,231.035 746.98,230.333 747.548,231.484 748.116,231.68 748.685,230.826 749.253,228.994 749.821,228.072 750.39,227.753 750.958,228.206 751.526,228.614 752.095,230.975 752.663,231.174 753.231,230.403 753.8,234.84 754.368,235.854 754.936,233.624 755.505,232.497 756.073,234.478 756.641,232.448 757.21,228.522 757.778,229.863 758.346,228.975 758.915,229.328 759.483,229.732 760.052,231.056 760.62,229.963 761.188,227.23 761.757,227.611 762.325,227.028 762.893,227.405 763.462,227.896 764.03,229.117 764.598,228.468 765.167,230.853 765.735,230.866 766.303,225.9 766.872,225.492 767.44,227.113 768.008,223.544 768.577,223.382 769.145,222.231 769.713,222.308 770.282,225.167 770.85,223.73 771.418,225.506 771.987,227.185 772.555,229.774 773.123,233.206 773.692,233.384 774.26,236.824 774.829,236.697 775.397,236.725 775.965,238.586 776.534,239.438 777.102,241.31 777.67,239.872 778.239,239.339 778.807,241.276 779.375,239.478 779.944,239.282 780.512,239.007 781.08,236.512 781.649,236.389 782.217,236.162 782.785,234.885 783.354,236.744 783.922,237.488 784.49,237.236 785.059,237.041 785.627,235.588 786.195,235.407 786.764,233.227 787.332,233.066 787.9,234.183 788.469,232.116 789.037,233.309 789.606,231.153 790.174,231.409 790.742,231.58 791.311,231.597 791.879,231.767 792.447,231.992 793.016,230.846 793.584,231.457 794.152,230.65 794.721,230.767 795.289,231.905 795.857,233.8 796.426,231.603 796.994,230.849 797.562,230.057 798.131,229.291 798.699,230.544 799.267,229.68 799.836,230.935 800.404,228.983 800.972,227.37 801.541,226.867 802.109,230.595 802.678,231.661 803.246,229.592 803.814,232.741 804.383,231.636 804.951,234.889 805.519,235.997 806.088,235.915 806.656,235.028 807.224,233.977 807.793,233.873 808.361,233.704 808.929,233.46 809.498,234.358 810.066,233.234 810.634,234.272 811.203,236.358 811.771,236.2 812.339,235.889 812.908,233.63 813.476,235.643 814.044,235.295 814.613,236.119 815.181,236.568 815.749,237.201 816.318,237.963 816.886,236.241 817.455,235.693 818.023,234.255 818.591,236.132 819.16,235.447 819.728,234.188 820.296,233.075 820.865,232.943 821.433,233.941 822.001,230.687 822.57,231.669 823.138,229.702 823.706,229.916 824.275,229.107 824.843,228.244 825.411,225.259 825.98,224.719 826.548,226.118 827.116,225.366 827.685,226.916 828.253,225.316 828.821,224.776 829.39,226.345 829.958,225.903 830.526,225.282 831.095,230.83 831.663,230.859 832.232,229.816 832.8,231.178 833.368,233.32 833.937,232.19 834.505,232.35 835.073,235.231 835.642,238.102 836.21,234.689 836.778,234.595 837.347,234.464 837.915,235.538 838.483,237.364 839.052,236.207 839.62,233.854 840.188,233.997 840.757,233.826 841.325,233.759 841.893,232.76 842.462,233.507 843.03,232.015 843.598,228.92 844.167,229.019 844.735,228.334 845.304,232.739 845.872,232.68 846.44,232.698 847.009,231.603 847.577,230.703 848.145,230.767 848.714,230.797 849.282,230.072 849.85,229.18 850.419,230.177 850.987,231.363 851.555,231.416 852.124,231.356 852.692,232.331 853.26,233.504 853.829,233.283 854.397,232.971 854.965,232.644 855.534,229.554 856.102,230.853 856.67,231.081 857.239,229.171 857.807,232.412 858.375,231.455 858.944,234.394 859.512,235.191 860.081,234.934 860.649,234.856 861.217,232.619 861.786,234.913 862.354,234.625 862.922,234.631 863.491,235.304 864.059,235.174 864.627,236.049 865.196,234.842 865.764,233.364 866.332,233.25 866.901,234.467 867.469,234.32 868.037,235.019 868.606,234.79 869.174,232.578 869.742,232.582 870.311,232.421 870.879,234.269 871.447,235.242 872.016,236.047 872.584,233.438 873.152,233.052 873.721,232.16 874.289,232.008 874.858,231.061 875.426,231.237 875.994,230.101 876.563,227.975 877.131,230.474 877.699,230.492 878.268,231.581 878.836,231.522 879.404,231.319 879.973,232.357 880.541,235.26 881.109,231.815 881.678,232.849 882.246,231.816 882.814,232.861 883.383,231.618 883.951,231.411 884.519,231.496 885.088,230.392 885.656,230.578 886.224,229.669 886.793,228.607 887.361,227.864 887.93,226.285 888.498,226.636 889.066,226.978 889.635,228.398 890.203,227.811 890.771,228.906 891.34,230.21 891.908,232.408 892.476,232.506 893.045,232.538 893.613,232.529 894.181,233.342 894.75,234.31 895.318,236.299 895.886,235.797 896.455,238.473 897.023,236.82 897.591,235.387 898.16,236.169 898.728,235.847 899.296,237.688 899.865,234.982 900.433,232.718 901.001,232.458 901.57,233.299 902.138,233.996 902.707,238.804 903.275,237.046 903.843,235.459 904.412,235.096 904.98,233.628 905.548,235.47 906.117,235.309 906.685,235.004 907.253,237.827 907.822,236.221 908.39,236.656 908.958,236.438 909.527,235.85 910.095,236.322 910.663,233.612 911.232,232.352 911.8,232.122 912.368,234.934 912.937,233.523 913.505,231.462 914.073,231.474 914.642,230.208 915.21,230.323 915.779,228.099 916.347,227.355 916.915,226.545 917.484,228.978 918.052,229.131 918.62,228.279 919.189,229.595 919.757,233.703 920.325,232.354 920.894,231.18 921.462,231.037 922.03,231.042 922.599,228.962 923.167,229.926 923.735,230.713 924.304,229.636 924.872,231.787 925.44,229.622 926.009,228.52 926.577,229.676 927.145,229.671 927.714,231.611 928.282,232.686 928.85,232.576 929.419,232.508 929.987,230.53 930.556,230.464 931.124,230.633 931.692,228.4 932.261,229.495 932.829,230.698 933.397,228.642 933.966,227.903 934.534,229.026 935.102,228.016 935.671,227.081 936.239,225.184 936.807,226.448 937.376,226.642 937.944,229.012 938.512,230.333 939.081,229.397 939.649,230.655 940.217,232.796 940.786,231.596 941.354,231.508 941.922,230.477 942.491,231.503 943.059,232.468 943.627,234.337 944.196,235.084 944.764,234.771 945.333,234.345 945.901,233.987 946.469,234.642 947.038,233.407 947.606,234.369 948.174,234.159 948.743,233.993 949.311,231.65 949.879,230.586 950.448,229.509 951.016,228.598 951.584,230.725 952.153,228.872 952.721,229.853 953.289,229.902 953.858,228.884 954.426,230.051 954.994,229.071 955.563,226.165 956.131,226.272 956.699,226.582 957.268,225.812 957.836,226.12 958.405,226.612 958.973,228.015 959.541,227.995 960.11,228.173 960.678,228.28 961.246,229.514 961.815,228.609 962.383,229.767 962.951,227.956 963.52,229.353 964.088,230.379 964.656,229.557 965.225,228.66 965.793,229.911 966.361,228.944 966.93,229.096 967.498,231.18 968.066,231.193 968.635,231.076 969.203,231.287 969.771,229.859 970.34,230.068 970.908,231.011 971.476,232.358 972.045,232.372 972.613,232.219 973.182,231.948 973.75,231.865 974.318,228.533 974.887,229.913 975.455,231.108 976.023,231.186 976.592,229.401 977.16,229.575 977.728,228.703 978.297,227.745 978.865,228.084 979.433,228.41 980.002,229.777 980.57,232.96 981.138,232.541 981.707,232.64 982.275,231.593 982.843,231.629 983.412,231.532 983.98,230.559 984.548,230.608 985.117,229.718 985.685,230.097 986.253,231.175 986.822,232.311 987.39,230.202 987.959,228.43 988.527,227.692 989.095,227.07 989.664,226.281 990.232,227.548 990.8,225.621 991.369,227.279 991.937,228.62 992.505,227.884 993.074,229.28 993.642,229.355 994.21,229.567 994.779,230.633 995.347,229.478 995.915,229.702 996.484,229.837 997.052,229.917 997.62,231.064 998.189,233.251 998.757,235.209 999.325,234.072 999.894,233.828 1000.46,232.62 1001.03,231.511 1001.6,230.383 1002.17,229.375 1002.74,229.532 1003.3,228.764 1003.87,231.956 1004.44,231.006 1005.01,231.191 1005.58,227.199 1006.15,225.477 1006.71,226.021 1007.28,228.391 1007.85,226.813 1008.42,225.144 1008.99,225.754 1009.56,228.287 1010.12,230.551 1010.69,231.691 1011.26,230.615 1011.83,231.902 1012.4,232.144 1012.97,232.392 1013.53,232.683 1014.1,233.525 1014.67,233.182 1015.24,232.222 1015.81,229.029 1016.38,230.215 1016.94,229.357 1017.51,228.682 1018.08,227.988 1018.65,228.135 1019.22,229.536 1019.79,228.833 1020.35,228.01 1020.92,229.578 1021.49,229.756 1022.06,230.827 1022.63,232.232 1023.2,232.474 1023.76,232.346 1024.33,232.174 1024.9,232.073 1025.47,231.898 1026.04,231.864 1026.61,230.873 1027.17,227.997 1027.74,228.076 1028.31,227.631 1028.88,227.84 1029.45,227.128 1030.02,228.523 1030.58,230.951 1031.15,232.867 1031.72,230.822 1032.29,231.042 1032.86,233.278 1033.43,231.246 1033.99,229.373 1034.56,229.482 1035.13,227.664 1035.7,228.184 1036.27,227.674 1036.84,227.115 1037.4,227.775 1037.97,228.253 1038.54,230.533 1039.11,227.673 1039.68,227.219 1040.25,228.383 1040.81,230.779 1041.38,230.801 1041.95,233.093 1042.52,235.218 1043.09,235.858 1043.66,235.562 1044.22,235.556 1044.79,236.155 1045.36,235.07 1045.93,236.875 1046.5,236.649 1047.07,236.437 1047.63,237.343 1048.2,235.996 1048.77,235.74 1049.34,235.42 1049.91,236.527 1050.48,236.219 1051.05,236.889 1051.61,235.313 1052.18,236.166 1052.75,235.83 1053.32,234.629 1053.89,233.431 1054.46,232.566 1055.02,231.54 1055.59,230.66 1056.16,230.736 1056.73,232.843 1057.3,232.877 1057.87,230.616 1058.43,230.838 1059,229.877 1059.57,228.982 1060.14,229.045 1060.71,229.263 1061.28,229.508 1061.84,229.712 1062.41,230.926 1062.98,230.012 1063.55,231.124 1064.12,230.952 1064.69,229.757 1065.25,234.031 1065.82,232.658 1066.39,235.806 1066.96,236.497 1067.53,239.094 1068.1,241.66 1068.66,240.935 1069.23,241.309 1069.8,241.4 1070.37,241.694 1070.94,243.061 1071.51,241.329 1072.07,236.532 1072.64,237.22 1073.21,239.707 1073.78,239.092 1074.35,237.479 1074.92,235.857 1075.48,234.35 1076.05,233.276 1076.62,233.961 1077.19,232.626 1077.76,232.755 1078.33,232.292 1078.89,230.959 1079.46,230.891 1080.03,232.644 1080.6,232.404 1081.17,230.07 1081.74,230.953 1082.3,229.805 1082.87,229.544 1083.44,228.429 1084.01,227.527 1084.58,227.654 1085.15,228.812 1085.71,229.817 1086.28,229.925 1086.85,231.144 1087.42,232.076 1087.99,231.982 1088.56,230.649 1089.12,229.643 1089.69,229.501 1090.26,231.474 1090.83,231.254 1091.4,232.072 1091.97,229.597 1092.53,229.68 1093.1,230.769 1093.67,228.723 1094.24,227.838 1094.81,229.122 1095.38,229.008 1095.94,231.005 1096.51,230.667 1097.08,231.807 1097.65,231.654 1098.22,231.666 1098.79,232.481 1099.35,230.247 1099.92,229.129 1100.49,229.235 1101.06,230.414 1101.63,233.434 1102.2,233.062 1102.76,230.935 1103.33,231.891 1103.9,232.736 1104.47,232.552 1105.04,231.391 1105.61,229.388 1106.17,229.33 1106.74,226.436 1107.31,226.675 1107.88,225.817 1108.45,226.115 1109.02,228.485 1109.58,227.666 1110.15,227.907 1110.72,228.186 1111.29,228.409 1111.86,228.793 1112.43,226.665 1112.99,228.941 1113.56,232.037 1114.13,230.817 1114.7,231.883 1115.27,229.839 1115.84,229.992 1116.4,231.225 1116.97,231.117 1117.54,234.338 1118.11,233.082 1118.68,233.102 1119.25,233.017 1119.81,233.238 1120.38,232.083 1120.95,233.051 1121.52,232.872 1122.09,231.584 1122.66,228.492 1123.23,228.524 1123.79,228.543 1124.36,227.635 1124.93,226.819 1125.5,228.145 1126.07,229.318 1126.64,228.642 1127.2,228.602 1127.77,227.925 1128.34,226.077 1128.91,224.224 1129.48,224.599 1130.05,221.963 1130.61,223.564 1131.18,225.335 1131.75,225.856 1132.32,229.248 1132.89,229.171 1133.46,229.466 1134.02,225.826 1134.59,225.216 1135.16,227.632 1135.73,227.998 1136.3,229.327 1136.87,225.295 1137.43,225.915 1138,225.469 1138.57,224.063 1139.14,224.783 1139.71,227.561 1140.28,229.949 1140.84,230.092 1141.41,228.161 1141.98,228.332 1142.55,228.564 1143.12,229.018 1143.69,230.317 1144.25,230.673 1144.82,229.858 1145.39,231.189 1145.96,231.587 1146.53,231.705 1147.1,233.918 1147.66,234.863 1148.23,235.804 1148.8,236.62 1149.37,236.249 1149.94,237.01 1150.51,236.787 1151.07,235.346 1151.64,236.19 1152.21,233.803 1152.78,231.654 1153.35,231.779 1153.92,233.929 1154.48,231.789 1155.05,231.818 1155.62,231.717 1156.19,231.748 1156.76,231.944 1157.33,233.065 1157.89,233.088 1158.46,232.142 1159.03,230.212 1159.6,230.359 1160.17,231.478 1160.74,231.467 1161.3,230.54 1161.87,229.511 1162.44,228.787 1163.01,227.957 1163.58,230.295 1164.15,230.531 1164.71,229.656 1165.28,229.842 1165.85,230.047 1166.42,231.247 1166.99,232.392 1167.56,232.341 1168.12,234.37 1168.69,233.149 1169.26,233.17 1169.83,233.205 1170.4,234.231 1170.97,235.385 1171.53,234.94 1172.1,231.512 1172.67,233.299 1173.24,235.05 1173.81,232.777 1174.38,234.789 1174.94,234.791 1175.51,234.525 1176.08,234.333 1176.65,235.392 1177.22,234.066 1177.79,233.844 1178.35,234.672 1178.92,234.541 1179.49,235.427 1180.06,234.039 1180.63,234.553 1181.2,232.216 1181.76,233.879 1182.33,229.461 1182.9,230.519 1183.47,230.437 1184.04,228.264 1184.61,228.53 1185.17,230.508 1185.74,229.483 1186.31,229.41 1186.88,230.606 1187.45,231.585 1188.02,231.396 1188.58,231.367 1189.15,230.151 1189.72,229.185 1190.29,229.21 1190.86,230.544 1191.43,230.714 1192,231.935 1192.56,231.573 1193.13,229.508 1193.7,229.563 1194.27,229.75 1194.84,228.888 1195.41,229.805 1195.97,230.745 1196.54,230.746 1197.11,230.621 1197.68,231.781 1198.25,231.716 1198.82,231.407 1199.38,230.166 1199.95,229.139 1200.52,229.242 1201.09,227.227 1201.66,228.391 1202.23,227.562 1202.79,227.819 1203.36,228.932 1203.93,228.028 1204.5,229.214 1205.07,229.23 1205.64,229.142 1206.2,229.117 1206.77,230.443 1207.34,230.395 1207.91,231.607 1208.48,228.628 1209.05,227.943 1209.61,229.243 1210.18,228.402 1210.75,228.725 1211.32,229.009 1211.89,230.208 1212.46,231.2 1213.02,231.107 1213.59,229.072 1214.16,227.332 1214.73,229.673 1215.3,231.786 1215.87,231.86 1216.43,231.66 1217,230.541 1217.57,230.579 1218.14,230.631 1218.71,232.723 1219.28,236.046 1219.84,233.611 1220.41,231.441 1220.98,232.397 1221.55,231.299 1222.12,232.26 1222.69,232.17 1223.25,233.25 1223.82,231.908 1224.39,234.177 1224.96,233.812 1225.53,232.696 1226.1,228.61 1226.66,227.926 1227.23,226.224 1227.8,225.6 1228.37,228.046 1228.94,228.382 1229.51,229.696 1230.07,231.85 1230.64,233.063 1231.21,231.102 1231.78,230.221 1232.35,228.387 1232.92,229.791 1233.48,229.957 1234.05,229.014 1234.62,229.347 1235.19,229.571 1235.76,229.806 1236.33,230.943 1236.89,231.961 1237.46,235.088 1238.03,234.93 1238.6,232.591 1239.17,232.546 1239.74,233.519 1240.3,233.383 1240.87,233.356 1241.44,234.377 1242.01,236.01 1242.58,233.623 1243.15,233.441 1243.71,234.435 1244.28,236.309 1244.85,235.935 1245.42,237.707 1245.99,234.837 1246.56,235.594 1247.12,235.338 1247.69,234.132 1248.26,232.801 1248.83,231.307 1249.4,231.176 1249.97,231.986 1250.53,227.788 1251.1,228.869 1251.67,228.744 1252.24,229.13 1252.81,230.327 1253.38,231.426 1253.94,230.489 1254.51,232.603 1255.08,234.653 1255.65,234.426 1256.22,234.297 1256.79,237.093 1257.35,234.537 1257.92,233.365 1258.49,232.969 1259.06,232.673 1259.63,232.541 1260.2,234.367 1260.76,233.021 1261.33,234.898 1261.9,237.522 1262.47,234.824 1263.04,234.57 1263.61,233.157 1264.18,232.827 1264.74,232.366 1265.31,234.324 1265.88,233.086 1266.45,233.939 1267.02,233.735 1267.59,234.15 1268.15,236.16 1268.72,236.811 1269.29,233.951 1269.86,233.817 1270.43,233.672 1271,234.328 1271.56,233.931 1272.13,233.522 1272.7,233.269 1273.27,234.01 1273.84,232.681 1274.41,234.621 1274.97,235.155 1275.54,235.939 1276.11,234.316 1276.68,233.034 1277.25,234.888 1277.82,232.636 1278.38,231.306 1278.95,232.964 1279.52,233.539 1280.09,231.032 1280.66,230.778 1281.23,230.764 1281.79,231.58 1282.36,232.287 1282.93,234.422 1283.5,235.115 1284.07,234.631 1284.64,235.291 1285.2,234.928 1285.77,234.55 1286.34,234.14 1286.91,231.824 1287.48,233.748 1288.05,233.169 1288.61,232.79 1289.18,230.426 1289.75,229.178 1290.32,231.24 1290.89,231.033 1291.46,231.98 1292.02,228.667 1292.59,225.492 1293.16,227.726 1293.73,226.961 1294.3,229.292 1294.87,230.359 1295.43,232.26 1296,234.178 1296.57,232.704 1297.14,232.439 1297.71,229.906 1298.28,229.875 1298.84,229.686 1299.41,228.46 1299.98,228.64 1300.55,227.668 1301.12,227.816 1301.69,231.853 1302.25,230.617 1302.82,231.522 1303.39,230.467 1303.96,234.75 1304.53,235.517 1305.1,233.067 1305.66,230.65 1306.23,229.327 1306.8,227.267 1307.37,227.329 1307.94,228.325 1308.51,228.421 1309.07,228.64 1309.64,228.463 1310.21,227.479 1310.78,226.462 1311.35,226.577 1311.92,226.552 1312.48,226.788 1313.05,225.078 1313.62,226.26 1314.19,227.317 1314.76,227.633 1315.33,226.713 1315.89,225.777 1316.46,223.808 1317.03,223.235 1317.6,224.731 1318.17,225.935 1318.74,226.132 1319.3,225.605 1319.87,226.152 1320.44,226.653 1321.01,226.832 1321.58,225.924 1322.15,226.363 1322.71,226.456 1323.28,226.766 1323.85,226.102 1324.42,225.352 1324.99,224.799 1325.56,225.418 1326.12,228.678 1326.69,229.021 1327.26,229.25 1327.83,229.334 1328.4,229.338 1328.97,228.41 1329.53,227.484 1330.1,226.698 1330.67,227.318 1331.24,228.578 1331.81,228.624 1332.38,227.887 1332.94,227.133 1333.51,226.355 1334.08,225.716 1334.65,226.251 1335.22,225.762 1335.79,227.172 1336.36,226.416 1336.92,225.942 1337.49,224.487 1338.06,225.076 1338.63,223.654 1339.2,226.311 1339.77,228.845 1340.33,225.931 1340.9,226.329 1341.47,225.816 1342.04,225.265 1342.61,224.938 1343.18,226.503 1343.74,226.159 1344.31,226.737 1344.88,227.244 1345.45,226.817 1346.02,228.34 1346.59,228.546 1347.15,228.633 1347.72,228.982 1348.29,228.314 1348.86,227.396 1349.43,226.675 1350,226.23 1350.56,225.74 1351.13,226.39 1351.7,225.895 1352.27,224.669 1352.84,225.444 1353.41,227.151 1353.97,228.707 1354.54,231.087 1355.11,230.101 1355.68,230.41 1356.25,229.556 1356.82,228.981 1357.38,226.176 1357.95,226.977 1358.52,226.46 1359.09,228.303 1359.66,230.601 1360.23,230.99 1360.79,231.142 1361.36,230.147 1361.93,229.294 1362.5,229.619 1363.07,231.849 1363.64,235.181 1364.2,234.981 1364.77,233.799 1365.34,232.039 1365.91,230.962 1366.48,231.438 1367.05,234.732 1367.61,236.993 1368.18,236.901 1368.75,233.717 1369.32,233.914 1369.89,232.702 1370.46,232.798 1371.02,234.103 1371.59,233.991 1372.16,236.981 1372.73,235.664 1373.3,234.472 1373.87,233.302 1374.43,233.178 1375,233.148 1375.57,236.339 1376.14,237.253 1376.71,238.193 1377.28,239.793 1377.84,240.387 1378.41,242.705 1378.98,243.093 1379.55,241.286 1380.12,241.498 1380.69,239.682 1381.25,239.985 1381.82,239.431 1382.39,239.949 1382.96,239.233 1383.53,239.599 1384.1,240.162 1384.66,238.587 1385.23,238.21 1385.8,238.748 1386.37,238.221 1386.94,235.62 1387.51,234.342 1388.07,231.866 1388.64,231.84 1389.21,230.689 1389.78,232.655 1390.35,232.367 1390.92,234.422 1391.48,234.16 1392.05,234.023 1392.62,233.842 1393.19,233.619 1393.76,234.518 1394.33,234.133 1394.89,233.797 1395.46,235.572 1396.03,235.201 1396.6,234.749 1397.17,235.679 1397.74,235.269 1398.3,235.653 1398.87,235.075 1399.44,232.674 1400.01,233.287 1400.58,234.077 1401.15,233.589 1401.71,234.146 1402.28,233.69 1402.85,233.101 1403.42,233.728 1403.99,232.173 1404.56,232.858 1405.13,231.614 1405.69,229.363 1406.26,230.389 1406.83,228.316 1407.4,229.458 1407.97,229.323 1408.54,230.308 1409.1,234.243 1409.67,233.879 1410.24,233.361 1410.81,233.034 1411.38,229.805 1411.95,226.788 1412.51,226.124 1413.08,226.581 1413.65,226.892 1414.22,228.013 1414.79,229.053 1415.36,228.199 1415.92,229.371 1416.49,229.409 1417.06,229.61 1417.63,229.631 1418.2,230.579 1418.77,229.439 1419.33,228.207 1419.9,229.25 1420.47,228.096 1421.04,231.239 1421.61,233.31 1422.18,232.851 1422.74,232.642 1423.31,232.463 1423.88,229.121 1424.45,228.119 1425.02,229.064 1425.59,228.043 1426.15,227.205 1426.72,228.438 1427.29,229.58 1427.86,229.513 1428.43,229.371 1429,228.611 1429.56,228.839 1430.13,228.673 1430.7,227.876 1431.27,229.247 1431.84,229.613 1432.41,228.583 1432.97,228.624 1433.54,228.65 1434.11,228.908 1434.68,232.16 1435.25,232.148 1435.82,231.08 1436.38,232.223 1436.95,233.335 1437.52,233.13 1438.09,232.885 1438.66,235.738 1439.23,234.284 1439.79,232.949 1440.36,230.799 1440.93,229.715 1441.5,230.804 1442.07,231.839 1442.64,229.646 1443.2,226.404 1443.77,225.645 1444.34,223.966 1444.91,223.409 1445.48,221.923 1446.05,222.63 1446.61,222.318 1447.18,223.992 1447.75,224.686 1448.32,221.145 1448.89,219.895 1449.46,222.964 1450.02,222.548 1450.59,222.131 1451.16,222.935 1451.73,222.376 1452.3,226.191 1452.87,226.737 1453.43,225.988 1454,228.596 1454.57,227.663 1455.14,227.819 1455.71,228.976 1456.28,229.166 1456.84,231.571 1457.41,231.607 1457.98,229.593 1458.55,229.776 1459.12,231.913 1459.69,231.872 1460.25,230.969 1460.82,231.192 1461.39,230.357 1461.96,231.467 1462.53,230.586 1463.1,231.857 1463.66,231.71 1464.23,233.855 1464.8,234.65 1465.37,234.55 1465.94,235.201 1466.51,233.669 1467.07,232.558 1467.64,232.637 1468.21,234.71 1468.78,234.428 1469.35,235.346 1469.92,235.256 1470.48,235.049 1471.05,234.91 1471.62,235.93 1472.19,237 1472.76,233.535 1473.33,234.299 1473.89,234.221 1474.46,234.06 1475.03,231.061 1475.6,231.175 1476.17,231.245 1476.74,229.223 1477.31,226.511 1477.87,225.849 1478.44,226.279 1479.01,225.771 1479.58,224.272 1480.15,224.83 1480.72,227.31 1481.28,227.599 1481.85,228.838 1482.42,228.036 1482.99,227.233 1483.56,228.561 1484.13,229.869 1484.69,231.129 1485.26,231.028 1485.83,231.108 1486.4,232.032 1486.97,231.931 1487.54,231.155 1488.1,231.98 1488.67,233.052 1489.24,234.033 1489.81,235.934 1490.38,238.722 1490.95,238.162 1491.51,237.686 1492.08,238.349 1492.65,237.016 1493.22,235.502 1493.79,236.179 1494.36,234.808 1494.92,234.463 1495.49,236.286 1496.06,235.825 1496.63,236.408 1497.2,236.144 1497.77,234.699 1498.33,233.389 1498.9,234.416 1499.47,235.019 1500.04,235.546 1500.61,234.297 1501.18,233.862 1501.74,233.39 1502.31,233.183 1502.88,233.021 1503.45,229.935 1504.02,230.891 1504.59,230.843 1505.15,230.701 1505.72,231.931 1506.29,230.724 1506.86,230.787 1507.43,230.051 1508,232.318 1508.56,231.141 1509.13,232.217 1509.7,231.229 1510.27,229.318 1510.84,226.556 1511.41,227.007 1511.97,225.289 1512.54,225.669 1513.11,225.996 1513.68,226.564 1514.25,227.852 1514.82,228.007 1515.38,229.251 1515.95,232.543 1516.52,232.476 1517.09,233.358 1517.66,232.168 1518.23,231.86 1518.79,231.652 1519.36,231.642 1519.93,231.837 1520.5,232.574 1521.07,232.494 1521.64,232.441 1522.2,231.298 1522.77,230.463 1523.34,230.377 1523.91,230.21 1524.48,230.293 1525.05,229.101 1525.61,230.09 1526.18,228.879 1526.75,227.867 1527.32,229.002 1527.89,228.302 1528.46,227.65 1529.02,228.885 1529.59,232.232 1530.16,231.351 1530.73,231.186 1531.3,231.105 1531.87,231.277 1532.43,232.2 1533,234.162 1533.57,235.134 1534.14,232.82 1534.71,231.553 1535.28,231.666 1535.84,233.471 1536.41,234.185 1536.98,234.068 1537.55,232.801 1538.12,232.691 1538.69,229.42 1539.25,228.36 1539.82,229.406 1540.39,229.116 1540.96,228.102 1541.53,228.161 1542.1,228.237 1542.66,229.375 1543.23,229.376 1543.8,230.499 1544.37,229.677 1544.94,230.913 1545.51,231.863 1546.08,230.577 1546.64,231.738 1547.21,232.914 1547.78,229.731 1548.35,227.715 1548.92,230.905 1549.49,230.968 1550.05,230.929 1550.62,231.912 1551.19,231.931 1551.76,231.837 1552.33,231.622 1552.9,232.555 1553.46,234.654 1554.03,234.505 1554.6,235.3 1555.17,236.103 1555.74,235.402 1556.31,238.316 1556.87,237.866 1557.44,235.235 1558.01,233.749 1558.58,231.505 1559.15,231.436 1559.72,231.41 1560.28,230.985 1560.85,230.983 1561.42,231.965 1561.99,231.872 1562.56,234.856 1563.13,235.399 1563.69,235.07 1564.26,234.702 1564.83,234.347 1565.4,233.862 1565.97,235.565 1566.54,234.14 1567.1,233.995 1567.67,233.578 1568.24,233.339 1568.81,232.019 1569.38,231.756 1569.95,231.627 1570.51,230.386 1571.08,230.175 1571.65,227.966 1572.22,226.981 1572.79,226.263 1573.36,227.394 1573.92,229.18 1574.49,229.19 1575.06,230.296 1575.63,229.208 1576.2,230.289 1576.77,229.141 1577.33,229.04 1577.9,228.16 1578.47,226.185 1579.04,227.313 1579.61,226.651 1580.18,225.747 1580.74,226.02 1581.31,226.278 1581.88,225.488 1582.45,226.753 1583.02,227.005 1583.59,228.489 1584.15,228.862 1584.72,231.107 1585.29,230.086 1585.86,231.963 1586.43,229.746 1587,229.939 1587.56,230.173 1588.13,229.317 1588.7,229.342 1589.27,230.599 1589.84,229.728 1590.41,229.822 1590.97,230.985 1591.54,230.924 1592.11,230.962 1592.68,232.038 1593.25,231.053 1593.82,229.905 1594.38,230.776 1594.95,229.78 1595.52,230.979 1596.09,231.188 1596.66,231.132 1597.23,231.05 1597.79,229.941 1598.36,229.862 1598.93,229.725 1599.5,228.638 1600.07,228.777 1600.64,228.813 1601.2,231.03 1601.77,233.177 1602.34,232.993 1602.91,231.734 1603.48,230.744 1604.05,229.966 1604.61,230.78 1605.18,231.068 1605.75,231.119 1606.32,231.236 1606.89,231.124 1607.46,234.238 1608.02,234.92 1608.59,233.554 1609.16,233.181 1609.73,232.062 1610.3,232.052 1610.87,228.983 1611.43,230.092 1612,230.109 1612.57,228.107 1613.14,226.29 1613.71,230.716 1614.28,232.639 1614.84,231.55 1615.41,229.356 1615.98,228.521 1616.55,227.765 1617.12,227.985 1617.69,231.176 1618.26,231.239 1618.82,231.125 1619.39,234.294 1619.96,233.053 1620.53,234.998 1621.1,233.633 1621.67,233.267 1622.23,235.195 1622.8,235.812 1623.37,235.372 1623.94,233.931 1624.51,234.843 1625.08,235.426 1625.64,234.016 1626.21,234.908 1626.78,231.519 1627.35,231.406 1627.92,231.192 1628.49,229.803 1629.05,231.975 1629.62,227.955 1630.19,227.999 1630.76,227.165 1631.33,226.485 1631.9,224.819 1632.46,224.329 1633.03,226.039 1633.6,227.288 1634.17,228.645 1634.74,230.814 1635.31,229.948 1635.87,229.869 1636.44,229.878 1637.01,227.81 1637.58,233.179 1638.15,231.951 1638.72,231.885 1639.28,230.954 1639.85,231.923 1640.42,232.874 1640.99,232.878 1641.56,232.909 1642.13,231.593 1642.69,231.399 1643.26,230.297 1643.83,230.35 1644.4,230.592 1644.97,230.598 1645.54,231.964 1646.1,231.791 1646.67,230.874 1647.24,230.762 1647.81,231.774 1648.38,233.626 1648.95,233.516 1649.51,232.194 1650.08,235.073 1650.65,236.015 1651.22,235.851 1651.79,235.334 1652.36,237.101 1652.92,236.51 1653.49,235.967 1654.06,235.605 1654.63,236.275 1655.2,233.798 1655.77,232.572 1656.33,233.596 1656.9,233.005 1657.47,231.805 1658.04,228.434 1658.61,228.562 1659.18,230.827 1659.74,230.862 1660.31,231.91 1660.88,231.681 1661.45,230.556 1662.02,230.576 1662.59,229.457 1663.15,229.586 1663.72,230.347 1664.29,230.396 1664.86,230.435 1665.43,229.311 1666,228.435 1666.56,226.312 1667.13,229.519 1667.7,228.696 1668.27,228.725 1668.84,228.732 1669.41,227.548 1669.97,227.702 1670.54,226.952 1671.11,228.273 1671.68,229.499 1672.25,229.591 1672.82,227.492 1673.38,227.694 1673.95,230.041 1674.52,228.067 1675.09,228.458 1675.66,228.707 1676.23,228.622 1676.79,229.775 1677.36,227.625 1677.93,226.929 1678.5,225.154 1679.07,223.429 1679.64,222.99 1680.2,222.715 1680.77,225.52 1681.34,226.114 1681.91,226.71 1682.48,226.066 1683.05,226.658 1683.61,227.026 1684.18,227.215 1684.75,228.952 1685.32,230.268 1685.89,229.487 1686.46,228.343 1687.02,228.657 1687.59,227.913 1688.16,227.971 1688.73,229.438 1689.3,229.764 1689.87,232.117 1690.44,232.313 1691,231.161 1691.57,231.049 1692.14,230.859 1692.71,231.893 1693.28,231.657 1693.85,232.847 1694.41,232.764 1694.98,231.518 1695.55,229.487 1696.12,231.681 1696.69,229.747 1697.26,229.898 1697.82,230.179 1698.39,231.59 1698.96,230.513 1699.53,232.439 1700.1,231.403 1700.67,231.605 1701.23,230.537 1701.8,229.323 1702.37,230.656 1702.94,232.005 1703.51,231.232 1704.08,231.121 1704.64,232.153 1705.21,232.138 1705.78,235.238 1706.35,234.964 1706.92,236.583 1707.49,236.243 1708.05,236.866 1708.62,234.354 1709.19,232.081 1709.76,229.976 1710.33,230.273 1710.9,231.497 1711.46,231.52 1712.03,232.647 1712.6,232.563 1713.17,232.375 1713.74,233.108 1714.31,233.005 1714.87,231.964 1715.44,233.226 1716.01,229.981 1716.58,228.942 1717.15,231.204 1717.72,231.101 1718.28,230.965 1718.85,232.955 1719.42,233.82 1719.99,233.638 1720.56,234.118 1721.13,232.002 1721.69,229.72 1722.26,227.675 1722.83,229.13 1723.4,230.339 1723.97,232.506 1724.54,231.64 1725.1,232.818 1725.67,230.507 1726.24,228.498 1726.81,229.915 1727.38,228.959 1727.95,226.149 1728.51,227.746 1729.08,226.998 1729.65,227.217 1730.22,229.609 1730.79,230.801 1731.36,229.81 1731.92,229.016 1732.49,228.112 1733.06,230.328 1733.63,230.34 1734.2,229.465 1734.77,229.609 1735.33,227.674 1735.9,226.939 1736.47,227.629 1737.04,226.8 1737.61,229.229 1738.18,229.47 1738.74,230.748 1739.31,227.731 1739.88,226.962 1740.45,226.199 1741.02,226.832 1741.59,228.092 1742.15,229.427 1742.72,230.749 1743.29,231.792 1743.86,233.949 1744.43,233.959 1745,233.825 1745.56,234.468 1746.13,235.282 1746.7,236.172 1747.27,235.732 1747.84,235.287 1748.41,237.978 1748.97,237.435 1749.54,238.058 1750.11,238.769 1750.68,237.489 1751.25,237.032 1751.82,237.786 1752.38,240.354 1752.95,239.587 1753.52,238.975 1754.09,239.774 1754.66,240.155 1755.23,239.521 1755.79,238.906 1756.36,237.241 1756.93,238.785 1757.5,238.104 1758.07,237.594 1758.64,237.108 1759.21,235.223 1759.77,230.973 1760.34,230.897 1760.91,233.841 1761.48,233.729 1762.05,232.521 1762.62,234.312 1763.18,234.086 1763.75,232.764 1764.32,233.535 1764.89,232.372 1765.46,235.279 1766.03,232.8 1766.59,234.394 1767.16,235.052 1767.73,233.509 1768.3,233.179 1768.87,232.782 1769.44,231.594 1770,229.276 1770.57,230.216 1771.14,230.053 1771.71,229.901 1772.28,227.748 1772.85,226.875 1773.41,225.838 1773.98,225.046 1774.55,224.271 1775.12,223.565 1775.69,223.839 1776.26,222.976 1776.82,221.379 1777.39,222.113 1777.96,221.792 1778.53,222.411 1779.1,223.945 1779.67,225.612 1780.23,224.975 1780.8,226.42 1781.37,227.666 1781.94,230.061 1782.51,231.031 1783.08,230.139 1783.64,231.293 1784.21,230.14 1784.78,230.065 1785.35,232.14 1785.92,234.151 1786.49,230.739 1787.05,230.699 1787.62,231.947 1788.19,232.785 1788.76,230.527 1789.33,229.51 1789.9,228.55 1790.46,227.799 1791.03,228.084 1791.6,227.422 1792.17,228.692 1792.74,225.748 1793.31,224.957 1793.87,227.395 1794.44,227.751 1795.01,228.996 1795.58,229.241 1796.15,229.406 1796.72,229.489 1797.28,232.42 1797.85,230.332 1798.42,230.357 1798.99,228.694 1799.56,226.774 1800.13,228.835 1800.69,230.853 1801.26,230.147 1801.83,230.222 1802.4,228.325 1802.97,227.606 1803.54,228.818 1804.1,227.96 1804.67,229.45 1805.24,230.573 1805.81,230.559 1806.38,228.789 1806.95,227.863 1807.51,228.301 1808.08,228.401 1808.65,229.696 1809.22,230.146 1809.79,230.488 1810.36,229.771 1810.92,233.01 1811.49,232.958 1812.06,230.801 1812.63,229.851 1813.2,230.027 1813.77,230.185 1814.33,230.37 1814.9,230.413 1815.47,230.584 1816.04,231.544 1816.61,231.581 1817.18,230.731 1817.74,229.64 1818.31,228.97 1818.88,227.956 1819.45,229.197 1820.02,229.53 1820.59,229.605 1821.15,230.019 1821.72,231.102 1822.29,230.061 1822.86,231.583 1823.43,231.289 1824,232.228 1824.56,232.323 1825.13,231.341 1825.7,231.274 1826.27,231.388 1826.84,231.4 1827.41,233.527 1827.97,233.289 1828.54,233.519 1829.11,232.438 1829.68,231.615 1830.25,232.53 1830.82,233.32 1831.39,234.229 1831.95,231.959 1832.52,232.848 1833.09,233.856 1833.66,233.667 1834.23,233.642 1834.8,234.62 1835.36,236.452 1835.93,233.91 1836.5,235.505 1837.07,234.375 1837.64,233.975 1838.21,233.787 1838.77,232.577 1839.34,231.496 1839.91,233.487 1840.48,234.328 1841.05,233.979 1841.62,231.782 1842.18,231.729 1842.75,230.63 1843.32,230.474 1843.89,232.404 1844.46,232.496 1845.03,233.348 1845.59,231.141 1846.16,229.077 1846.73,230.006 1847.3,231.101 1847.87,227.791 1848.44,228.858 1849,229.088 1849.57,230.253 1850.14,231.419 1850.71,233.309 1851.28,234.063 1851.85,233.814 1852.41,234.639 1852.98,232.309 1853.55,231.245 1854.12,233.248 1854.69,232.953 1855.26,233.903 1855.82,233.619 1856.39,232.214 1856.96,231.134 1857.53,231.157 1858.1,231.262 1858.67,231.321 1859.23,231.188 1859.8,230.128 1860.37,231.023 1860.94,231.897 1861.51,235.003 1862.08,232.56 1862.64,234.229 1863.21,235.879 1863.78,234.351 1864.35,234.113 1864.92,230.806 1865.49,231.833 1866.05,232.696 1866.62,232.555 1867.19,230.49 1867.76,231.328 1868.33,230.215 1868.9,229.248 1869.46,230.339 1870.03,230.21 1870.6,231.282 1871.17,231.461 1871.74,231.273 1872.31,233.233 1872.87,235.145 1873.44,236.008 1874.01,237.531 1874.58,238.108 1875.15,238.607 1875.72,237.085 1876.28,236.513 1876.85,238.262 1877.42,237.662 1877.99,235.899 1878.56,233.369 1879.13,231.865 1879.69,228.742 1880.26,225.925 1880.83,225.105 1881.4,224.404 1881.97,223.546 1882.54,225.844 1883.1,225.136 1883.67,226.388 1884.24,225.622 1884.81,225.884 1885.38,226.156 1885.95,226.482 1886.51,226.746 1887.08,224.701 1887.65,226.131 1888.22,225.427 1888.79,224.605 1889.36,224.917 1889.92,224.289 1890.49,224.675 1891.06,224.108 1891.63,222.597 1892.2,225.478 1892.77,224.863 1893.33,224.331 1893.9,227.759 1894.47,228.052 1895.04,229.475 1895.61,229.491 1896.18,229.63 1896.74,229.833 1897.31,231.784 1897.88,229.688 1898.45,232.828 1899.02,230.614 1899.59,233.831 1900.16,231.551 1900.72,234.634 1901.29,238.447 1901.86,234.777 1902.43,235.546 1903,233.251 1903.57,232.934 1904.13,231.673 1904.7,232.543 1905.27,229.375 1905.84,231.38 1906.41,231.28 1906.98,232.176 1907.54,232.063 1908.11,231.998 1908.68,231.818 1909.25,230.649 1909.82,230.95 1910.39,228.928 1910.95,231.9 1911.52,231.686 1912.09,232.693 1912.66,231.447 1913.23,233.417 1913.8,230.143 1914.36,233.159 1914.93,234.046 1915.5,234.76 1916.07,233.635 1916.64,233.42 1917.21,235.421 1917.77,234.933 1918.34,233.694 1918.91,233.155 1919.48,233.011 1920.05,233.749 1920.62,233.462 1921.18,233.344 1921.75,234.383 1922.32,234.154 1922.89,231.912 1923.46,231.903 1924.03,231.929 1924.59,232.872 1925.16,233.718 1925.73,233.283 1926.3,234.032 1926.87,233.958 1927.44,233.664 1928,236.398 1928.57,238.099 1929.14,236.393 1929.71,234.969 1930.28,233.523 1930.85,231.286 1931.41,231.161 1931.98,229.787 1932.55,228.739 1933.12,229.878 1933.69,229.821 1934.26,229.695 1934.82,228.78 1935.39,227.741 1935.96,227.867 1936.53,228.021 1937.1,226.243 1937.67,224.613 1938.23,228.152 1938.8,229.53 1939.37,228.459 1939.94,228.802 1940.51,227.931 1941.08,226.974 1941.64,226.237 1942.21,226.226 1942.78,226.805 1943.35,227.914 1943.92,230.34 1944.49,230.436 1945.05,230.426 1945.62,228.361 1946.19,225.424 1946.76,225.624 1947.33,225.94 1947.9,224.377 1948.46,224.909 1949.03,225.38 1949.6,225.758 1950.17,227.233 1950.74,228.733 1951.31,227.953 1951.87,228.286 1952.44,227.633 1953.01,225.667 1953.58,231.047 1954.15,229.194 1954.72,228.302 1955.28,229.712 1955.85,229.791 1956.42,233.888 1956.99,231.668 1957.56,231.485 1958.13,230.308 1958.69,230.432 1959.26,231.572 1959.83,229.443 1960.4,229.786 1960.97,228.905 1961.54,230.128 1962.1,229.441 1962.67,229.504 1963.24,229.456 1963.81,227.71 1964.38,226.92 1964.95,228.535 1965.51,228.863 1966.08,228.789 1966.65,231.14 1967.22,229.16 1967.79,230.244 1968.36,229.095 1968.92,225.421 1969.49,226.085 1970.06,224.449 1970.63,227.161 1971.2,228.572 1971.77,233.026 1972.34,232.069 1972.9,231.917 1973.47,230.937 1974.04,231.114 1974.61,228.989 1975.18,229.181 1975.75,230.423 1976.31,230.429 1976.88,229.415 1977.45,230.799 1978.02,229.789 1978.59,231.021 1979.16,230.05 1979.72,231.163 1980.29,232.378 1980.86,233.273 1981.43,233.246 1982,233.147 1982.57,234.052 1983.13,230.811 1983.7,230.738 1984.27,231.846 1984.84,231.772 1985.41,232.7 1985.98,230.591 1986.54,229.594 1987.11,230.733 1987.68,230.859 1988.25,231.032 1988.82,230.212 1989.39,230.297 1989.95,234.638 1990.52,234.637 1991.09,233.447 1991.66,233.297 1992.23,233.189 1992.8,233.079 1993.36,232.912 1993.93,231.882 1994.5,229.886 1995.07,230.204 1995.64,231.184 1996.21,229.346 1996.77,228.603 1997.34,229.891 1997.91,227.095 1998.48,227.618 1999.05,228.918 1999.62,229.254 2000.18,231.617 2000.75,228.468 2001.32,228.635 2001.89,227.989 2002.46,228.247 2003.03,228.485 2003.59,228.872 2004.16,229.303 2004.73,229.676 2005.3,226.941 2005.87,228.514 2006.44,230.856 2007,235.235 2007.57,235.929 2008.14,235.604 2008.71,234.375 2009.28,232.308 2009.85,232.183 2010.41,232.977 2010.98,232.925 2011.55,231.757 2012.12,231.76 2012.69,232.764 2013.26,232.717 2013.82,234.514 2014.39,233.349 2014.96,234.444 2015.53,234.158 2016.1,234.052 2016.67,232.739 2017.23,232.598 2017.8,235.731 2018.37,235.308 2018.94,235.984 2019.51,237.647 2020.08,236.109 2020.64,234.782 2021.21,233.697 2021.78,234.651 2022.35,235.139 2022.92,237.181 2023.49,236.949 2024.05,235.509 2024.62,236.25 2025.19,233.673 2025.76,236.551 2026.33,238.323 2026.9,237.936 2027.46,236.216 2028.03,234.729 2028.6,236.483 2029.17,235.998 2029.74,236.561 2030.31,236.101 2030.87,232.575 2031.44,232.371 2032.01,232.036 2032.58,232.18 2033.15,232.33 2033.72,230.79 2034.28,227.591 2034.85,227.703 2035.42,229.965 2035.99,228.979 2036.56,227.989 2037.13,230.31 2037.69,229.467 2038.26,230.378 2038.83,229.238 2039.4,229.08 2039.97,229.092 2040.54,230.283 2041.11,228.232 2041.67,229.364 2042.24,230.576 2042.81,228.418 2043.38,229.533 2043.95,230.482 2044.52,231.346 2045.08,232.355 2045.65,231.259 2046.22,230.922 2046.79,232.076 2047.36,232.16 2047.93,231.06 2048.49,230.836 2049.06,229.788 2049.63,229.747 2050.2,230.816 2050.77,226.797 2051.34,225.89 2051.9,224.317 2052.47,224.569 2053.04,224.965 2053.61,226.247 2054.18,226.434 2054.75,230.05 2055.31,230.002 2055.88,229.738 2056.45,231.054 2057.02,229.97 2057.59,231.118 2058.16,231.305 2058.72,230.091 2059.29,232.971 2059.86,233.046 2060.43,231.725 2061,231.731 2061.57,229.643 2062.13,229.663 2062.7,228.632 2063.27,229.965 2063.84,230.012 2064.41,229.98 2064.98,231.115 2065.54,231.24 2066.11,232.331 2066.68,231.28 2067.25,233.568 2067.82,234.241 2068.39,232.852 2068.95,233.741 2069.52,231.399 2070.09,230.456 2070.66,227.307 2071.23,227.616 2071.8,225.975 2072.36,227.41 2072.93,228.573 2073.5,227.725 2074.07,230.875 2074.64,231.991 2075.21,230.905 2075.77,229.695 2076.34,231.044 2076.91,231.001 2077.48,232.972 2078.05,235.233 2078.62,235.021 2079.18,232.736 2079.75,233.463 2080.32,232.234 2080.89,233.066 2081.46,229.574 2082.03,229.517 2082.59,228.644 2083.16,227.702 2083.73,229.048 2084.3,227.231 2084.87,226.346 2085.44,224.813 2086,225.6 2086.57,226.191 2087.14,227.572 2087.71,227.701 2088.28,227.826 2088.85,226.346 2089.41,227.938 2089.98,228.182 2090.55,228.744 2091.12,228.78 2091.69,229.819 2092.26,229.965 2092.82,230.007 2093.39,230.206 2093.96,229.477 2094.53,227.759 2095.1,229.837 2095.67,229.875 2096.23,230.989 2096.8,229.98 2097.37,232.292 2097.94,233.422 2098.51,232.402 2099.08,232.352 2099.64,232.359 2100.21,232.452 2100.78,233.331 2101.35,234.265 2101.92,234.372 2102.49,232.939 2103.05,229.849 2103.62,230.11 2104.19,232.539 2104.76,233.685 2105.33,233.492 2105.9,234.585 2106.46,235.312 2107.03,235.113 2107.6,234.657 2108.17,234.383 2108.74,236.499 2109.31,234.106 2109.87,232.995 2110.44,229.899 2111.01,229.793 2111.58,231.315 2112.15,233.581 2112.72,232.512 2113.29,235.473 2113.85,234.277 2114.42,231.723 2114.99,234.775 2115.56,236.564 2116.13,235.987 2116.7,235.561 2117.26,238.494 2117.83,238.934 2118.4,237.426 2118.97,238.352 2119.54,236.719 2120.11,237.441 2120.67,239.024 2121.24,237.399 2121.81,235.715 2122.38,231.117 2122.95,232.03 2123.52,230.426 2124.08,231.546 2124.65,234.529 2125.22,236.09 2125.79,234.535 2126.36,233.283 2126.93,233.179 2127.49,233.775 2128.06,234.191 2128.63,234.795 2129.2,235.41 2129.77,237.205 2130.34,235.652 2130.9,234.326 2131.47,234.013 2132.04,233.671 2132.61,233.052 2133.18,233.795 2133.75,232.542 2134.31,231.536 2134.88,231.475 2135.45,233.339 2136.02,232.177 2136.59,232.922 2137.16,232.654 2137.72,233.408 2138.29,233.236 2138.86,232.76 2139.43,232.352 2140,232.276 2140.57,229.86 2141.13,228.661 2141.7,228.595 2142.27,225.603 2142.84,226.601 2143.41,228.852 2143.98,230.03 2144.54,226.819 2145.11,225.053 2145.68,225.368 2146.25,224.541 2146.82,224.955 2147.39,224.255 2147.95,226.58 2148.52,226.854 2149.09,227.984 2149.66,227.179 2150.23,226.275 2150.8,225.466 2151.36,224.839 2151.93,226.32 2152.5,225.36 2153.07,227.69 2153.64,226.587 2154.21,225.855 2154.77,224.141 2155.34,223.622 2155.91,222.221 2156.48,225.763 2157.05,224.942 2157.62,228.598 2158.18,228.55 2158.75,228.716 2159.32,231.112 2159.89,232.135 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip160)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.033 ± 0.027\n  with uncertainty of ± 0.0024532219535095172\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01837 ± (0.00301125, 0.0029659) (MC)\n  95% confidence interval: [-4.02423, -4.01246] (MC)\n  linear error propagation: -4.01843 ± 0.00306428\n  |δ_y| = |0.00170793| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.018368213330252, val_l = 0.005865560503148792, val_u = 0.005908248775906344)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip190\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip190)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip191\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip190)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip192\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1142.18 2211.02,1142.18 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,980.862 2211.02,980.862 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,819.54 2211.02,819.54 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,658.218 2211.02,658.218 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,496.896 2211.02,496.896 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,335.574 2211.02,335.574 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1142.18 365.751,1142.18 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,980.862 365.751,980.862 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,819.54 365.751,819.54 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,658.218 365.751,658.218 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,496.896 365.751,496.896 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,335.574 365.751,335.574 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M298.909 1127.98 Q295.298 1127.98 293.469 1131.55 Q291.664 1135.09 291.664 1142.22 Q291.664 1149.32 293.469 1152.89 Q295.298 1156.43 298.909 1156.43 Q302.543 1156.43 304.349 1152.89 Q306.177 1149.32 306.177 1142.22 Q306.177 1135.09 304.349 1131.55 Q302.543 1127.98 298.909 1127.98 M298.909 1124.28 Q304.719 1124.28 307.775 1128.89 Q310.853 1133.47 310.853 1142.22 Q310.853 1150.95 307.775 1155.55 Q304.719 1160.13 298.909 1160.13 Q293.099 1160.13 290.02 1155.55 Q286.964 1150.95 286.964 1142.22 Q286.964 1133.47 290.02 1128.89 Q293.099 1124.28 298.909 1124.28 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M259.557 994.207 L267.196 994.207 L267.196 967.841 L258.886 969.508 L258.886 965.248 L267.15 963.582 L271.826 963.582 L271.826 994.207 L279.465 994.207 L279.465 998.142 L259.557 998.142 L259.557 994.207 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M298.909 966.661 Q295.298 966.661 293.469 970.225 Q291.664 973.767 291.664 980.897 Q291.664 988.003 293.469 991.568 Q295.298 995.109 298.909 995.109 Q302.543 995.109 304.349 991.568 Q306.177 988.003 306.177 980.897 Q306.177 973.767 304.349 970.225 Q302.543 966.661 298.909 966.661 M298.909 962.957 Q304.719 962.957 307.775 967.563 Q310.853 972.147 310.853 980.897 Q310.853 989.623 307.775 994.23 Q304.719 998.813 298.909 998.813 Q293.099 998.813 290.02 994.23 Q286.964 989.623 286.964 980.897 Q286.964 972.147 290.02 967.563 Q293.099 962.957 298.909 962.957 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M262.775 832.885 L279.094 832.885 L279.094 836.82 L257.15 836.82 L257.15 832.885 Q259.812 830.13 264.395 825.501 Q269.002 820.848 270.182 819.505 Q272.428 816.982 273.307 815.246 Q274.21 813.487 274.21 811.797 Q274.21 809.042 272.266 807.306 Q270.344 805.57 267.242 805.57 Q265.043 805.57 262.59 806.334 Q260.159 807.098 257.381 808.649 L257.381 803.927 Q260.205 802.792 262.659 802.214 Q265.113 801.635 267.15 801.635 Q272.52 801.635 275.715 804.32 Q278.909 807.005 278.909 811.496 Q278.909 813.626 278.099 815.547 Q277.312 817.445 275.205 820.038 Q274.627 820.709 271.525 823.926 Q268.423 827.121 262.775 832.885 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M298.909 805.339 Q295.298 805.339 293.469 808.903 Q291.664 812.445 291.664 819.575 Q291.664 826.681 293.469 830.246 Q295.298 833.788 298.909 833.788 Q302.543 833.788 304.349 830.246 Q306.177 826.681 306.177 819.575 Q306.177 812.445 304.349 808.903 Q302.543 805.339 298.909 805.339 M298.909 801.635 Q304.719 801.635 307.775 806.241 Q310.853 810.825 310.853 819.575 Q310.853 828.301 307.775 832.908 Q304.719 837.491 298.909 837.491 Q293.099 837.491 290.02 832.908 Q286.964 828.301 286.964 819.575 Q286.964 810.825 290.02 806.241 Q293.099 801.635 298.909 801.635 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M272.914 656.864 Q276.27 657.582 278.145 659.85 Q280.043 662.119 280.043 665.452 Q280.043 670.568 276.525 673.368 Q273.006 676.169 266.525 676.169 Q264.349 676.169 262.034 675.73 Q259.742 675.313 257.289 674.456 L257.289 669.943 Q259.233 671.077 261.548 671.656 Q263.863 672.234 266.386 672.234 Q270.784 672.234 273.076 670.498 Q275.39 668.762 275.39 665.452 Q275.39 662.396 273.238 660.683 Q271.108 658.947 267.289 658.947 L263.261 658.947 L263.261 655.105 L267.474 655.105 Q270.923 655.105 272.752 653.739 Q274.58 652.35 274.58 649.757 Q274.58 647.095 272.682 645.683 Q270.807 644.248 267.289 644.248 Q265.367 644.248 263.168 644.665 Q260.969 645.082 258.33 645.961 L258.33 641.795 Q260.992 641.054 263.307 640.683 Q265.645 640.313 267.705 640.313 Q273.029 640.313 276.131 642.744 Q279.233 645.151 279.233 649.271 Q279.233 652.142 277.59 654.132 Q275.946 656.1 272.914 656.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M298.909 644.017 Q295.298 644.017 293.469 647.582 Q291.664 651.123 291.664 658.253 Q291.664 665.359 293.469 668.924 Q295.298 672.466 298.909 672.466 Q302.543 672.466 304.349 668.924 Q306.177 665.359 306.177 658.253 Q306.177 651.123 304.349 647.582 Q302.543 644.017 298.909 644.017 M298.909 640.313 Q304.719 640.313 307.775 644.92 Q310.853 649.503 310.853 658.253 Q310.853 666.98 307.775 671.586 Q304.719 676.169 298.909 676.169 Q293.099 676.169 290.02 671.586 Q286.964 666.98 286.964 658.253 Q286.964 649.503 290.02 644.92 Q293.099 640.313 298.909 640.313 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M271.594 483.69 L259.789 502.139 L271.594 502.139 L271.594 483.69 M270.367 479.616 L276.247 479.616 L276.247 502.139 L281.177 502.139 L281.177 506.028 L276.247 506.028 L276.247 514.176 L271.594 514.176 L271.594 506.028 L255.992 506.028 L255.992 501.514 L270.367 479.616 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M298.909 482.695 Q295.298 482.695 293.469 486.26 Q291.664 489.801 291.664 496.931 Q291.664 504.037 293.469 507.602 Q295.298 511.144 298.909 511.144 Q302.543 511.144 304.349 507.602 Q306.177 504.037 306.177 496.931 Q306.177 489.801 304.349 486.26 Q302.543 482.695 298.909 482.695 M298.909 478.991 Q304.719 478.991 307.775 483.598 Q310.853 488.181 310.853 496.931 Q310.853 505.658 307.775 510.264 Q304.719 514.848 298.909 514.848 Q293.099 514.848 290.02 510.264 Q286.964 505.658 286.964 496.931 Q286.964 488.181 290.02 483.598 Q293.099 478.991 298.909 478.991 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M258.793 318.294 L277.15 318.294 L277.15 322.23 L263.076 322.23 L263.076 330.702 Q264.094 330.354 265.113 330.192 Q266.131 330.007 267.15 330.007 Q272.937 330.007 276.316 333.179 Q279.696 336.35 279.696 341.766 Q279.696 347.345 276.224 350.447 Q272.752 353.526 266.432 353.526 Q264.256 353.526 261.988 353.155 Q259.742 352.785 257.335 352.044 L257.335 347.345 Q259.418 348.479 261.641 349.035 Q263.863 349.59 266.34 349.59 Q270.344 349.59 272.682 347.484 Q275.02 345.378 275.02 341.766 Q275.02 338.155 272.682 336.049 Q270.344 333.942 266.34 333.942 Q264.465 333.942 262.59 334.359 Q260.738 334.776 258.793 335.655 L258.793 318.294 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M298.909 321.373 Q295.298 321.373 293.469 324.938 Q291.664 328.479 291.664 335.609 Q291.664 342.716 293.469 346.28 Q295.298 349.822 298.909 349.822 Q302.543 349.822 304.349 346.28 Q306.177 342.716 306.177 335.609 Q306.177 328.479 304.349 324.938 Q302.543 321.373 298.909 321.373 M298.909 317.669 Q304.719 317.669 307.775 322.276 Q310.853 326.859 310.853 335.609 Q310.853 344.336 307.775 348.942 Q304.719 353.526 298.909 353.526 Q293.099 353.526 290.02 348.942 Q286.964 344.336 286.964 335.609 Q286.964 326.859 290.02 322.276 Q293.099 317.669 298.909 317.669 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip192)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1023.32 400.199,914.115 400.786,936.849 401.372,838.908 401.958,749.17 402.545,771.571 403.131,689.394 403.718,616.16 404.304,551.102 404.891,490.395 405.477,436.669 406.063,388.103 406.65,344.604 407.236,304.178 407.823,337.54 408.409,363.576 408.995,326.537 409.582,295.584 410.168,266.373 410.755,240.754 411.341,219.895 411.927,288.025 412.514,308.713 413.1,325.873 413.687,310.127 414.273,296.548 414.86,283.465 415.446,302.759 416.032,293.774 416.619,335.682 417.205,351.469 417.792,347.931 418.378,344.013 418.964,378.919 419.551,375.252 420.137,373.439 420.724,389.472 421.31,390.274 421.896,421.368 422.483,437.227 423.069,466.036 423.656,469.794 424.242,486.117 424.829,491.285 425.415,497.551 426.001,513.877 426.588,530.077 427.174,536.521 427.761,560.867 428.347,575.679 428.933,590.487 429.52,612.024 430.106,618.524 430.693,639.55 431.279,645.412 431.865,652.496 432.452,659.526 433.038,672.386 433.625,679.783 434.211,687.758 434.798,711.486 435.384,718.627 435.97,730.74 436.557,742.585 437.143,749.842 437.73,766.241 438.316,781.81 438.902,796.894 439.489,807.5 440.075,818.119 440.662,832.534 441.248,842.59 441.835,849.349 442.421,859.616 443.007,875.757 443.594,885.077 444.18,893.613 444.767,905.542 445.353,916.84 445.939,925.036 446.526,935.915 447.112,946.752 447.699,962.69 448.285,969.959 448.871,979.69 449.458,991.656 450.044,997.7 450.631,1006.45 451.217,1014.99 451.804,1018.3 452.39,1026.36 452.976,1032.2 453.563,1042.37 454.149,1051.97 454.736,1057.3 455.322,1060.14 455.908,1062.82 456.495,1069.97 457.081,1072.82 457.668,1077.64 458.254,1082.5 458.84,1089.35 459.427,1098.13 460.013,1101.97 460.6,1106.17 461.186,1110.51 461.773,1112.52 462.359,1114.59 462.945,1116.97 463.532,1118.94 464.118,1124.89 464.705,1132.28 465.291,1135.79 465.877,1139.31 466.464,1142.57 467.05,1142.21 467.637,1147.58 468.223,1155.6 468.809,1160.44 469.396,1161.14 469.982,1164.24 470.569,1168.86 471.155,1173.23 471.742,1177.61 472.328,1183.16 472.914,1185.1 473.501,1190.3 474.087,1189.14 474.674,1191 475.26,1191.44 475.846,1194.66 476.433,1196.59 477.019,1198.67 477.606,1198.46 478.192,1198.93 478.778,1197.51 479.365,1197.97 479.951,1205.88 480.538,1206.14 481.124,1210.96 481.711,1210.75 482.297,1213.66 482.883,1214.73 483.47,1214.46 484.056,1212.64 484.643,1213.96 485.229,1214.33 485.815,1214.25 486.402,1214.34 486.988,1215.98 487.575,1215.73 488.161,1217.32 488.748,1217.1 489.334,1221.37 489.92,1223.91 490.507,1225.12 491.093,1227.6 491.68,1228.5 492.266,1227.68 492.852,1227.24 493.439,1228.26 494.025,1227.82 494.612,1227.48 495.198,1226.84 495.784,1226.44 496.371,1227.78 496.957,1228.98 497.544,1232.68 498.13,1234.79 498.717,1235.6 499.303,1236.5 499.889,1235.53 500.476,1236.18 501.062,1232.57 501.649,1233.38 502.235,1234.68 502.821,1233.94 503.408,1235.04 503.994,1232.9 504.581,1235.02 505.167,1234.26 505.753,1237.78 506.34,1238.33 506.926,1238.9 507.513,1241.05 508.099,1240.09 508.686,1243.53 509.272,1245.28 509.858,1244.23 510.445,1247.58 511.031,1250.45 511.618,1250.53 512.204,1249.34 512.79,1248.1 513.377,1244.16 513.963,1240.48 514.55,1239.93 515.136,1243.29 515.722,1243.96 516.309,1242.97 516.895,1243.38 517.482,1246.3 518.068,1246.74 518.655,1247.02 519.241,1243.25 519.827,1240.94 520.414,1238.8 521,1237.92 521.587,1238.59 522.173,1239.14 522.759,1241.07 523.346,1240.32 523.932,1239.72 524.519,1238.77 525.105,1239.74 525.691,1238.94 526.278,1240.99 526.864,1240.23 527.451,1239.49 528.037,1238.66 528.624,1237.66 529.21,1239.86 529.796,1236.36 530.383,1238.52 530.969,1234.92 531.556,1234.23 532.142,1232.75 532.728,1231.44 533.315,1231.29 533.901,1232.24 534.488,1233.28 535.074,1232.86 535.661,1235.44 536.247,1235.14 536.833,1238.84 537.42,1235.52 538.006,1236.15 538.593,1235.81 539.179,1236.64 539.765,1234.9 540.352,1235.69 540.938,1232.8 541.525,1233.62 542.111,1233.19 542.697,1232.7 543.284,1230.91 543.87,1234.37 544.457,1232.56 545.043,1230.71 545.63,1233.99 546.216,1234.89 546.802,1234.49 547.389,1235.37 547.975,1236.23 548.562,1235.5 549.148,1234.87 549.734,1233.17 550.321,1229.91 550.907,1232.19 551.494,1230.22 552.08,1232.68 552.666,1228.13 553.253,1229.06 553.839,1230.32 554.426,1231.5 555.012,1231.13 555.599,1230.5 556.185,1231.57 556.771,1234.9 557.358,1234.43 557.944,1240.25 558.531,1238.98 559.117,1238.3 559.703,1241.02 560.29,1240.09 560.876,1237.91 561.463,1240.96 562.049,1239.93 562.635,1240.33 563.222,1238.08 563.808,1239.91 564.395,1238.97 564.981,1236.71 565.568,1233.35 566.154,1233.95 566.74,1231.93 567.327,1230.01 567.913,1228.4 568.5,1227.76 569.086,1224.66 569.672,1221.59 570.259,1221.33 570.845,1219.83 571.432,1220.02 572.018,1220.06 572.605,1218.99 573.191,1219.02 573.777,1216.34 574.364,1220.31 574.95,1220.29 575.537,1219.19 576.123,1220.61 576.709,1222.06 577.296,1220.77 577.882,1219.49 578.469,1224.74 579.055,1223.26 579.641,1222.85 580.228,1226.75 580.814,1227.58 581.401,1225.42 581.987,1223.37 582.574,1221.79 583.16,1217.64 583.746,1220.73 584.333,1219.35 584.919,1220.7 585.506,1220.65 586.092,1218.97 586.678,1219.13 587.265,1217.68 587.851,1217.63 588.438,1216.63 589.024,1216.78 589.61,1218.09 590.197,1217.91 590.783,1221.69 591.37,1222.52 591.956,1222.48 592.543,1223.79 593.129,1223.59 593.715,1222.01 594.302,1220.64 594.888,1220.58 595.475,1217.74 596.061,1217.83 596.647,1217.81 597.234,1217.98 597.82,1216.75 598.407,1218.27 598.993,1217.06 599.579,1218.41 600.166,1218.53 600.752,1218.29 601.339,1218.31 601.925,1218.57 602.512,1215.95 603.098,1216.1 603.684,1218.73 604.271,1215.72 604.857,1213.35 605.444,1213.53 606.03,1215.12 606.616,1219.26 607.203,1220.28 607.789,1219.68 608.376,1223.61 608.962,1220.75 609.548,1219.2 610.135,1218.99 610.721,1219.16 611.308,1217.69 611.894,1217.87 612.481,1216.75 613.067,1220.58 613.653,1220.14 614.24,1219.82 614.826,1216.95 615.413,1214.43 615.999,1215.96 616.585,1213.38 617.172,1214.95 617.758,1216.34 618.345,1217.44 618.931,1219.95 619.518,1219.68 620.104,1219.51 620.69,1220.9 621.277,1223.16 621.863,1223 622.45,1222.8 623.036,1221.29 623.622,1221.02 624.209,1225.95 624.795,1225.63 625.382,1225.15 625.968,1224.72 626.554,1225.98 627.141,1225.59 627.727,1224.91 628.314,1224.22 628.9,1222.46 629.487,1224.49 630.073,1225 630.659,1225.92 631.246,1225.41 631.832,1226.32 632.419,1224.16 633.005,1223.8 633.591,1224.7 634.178,1224.5 634.764,1223.86 635.351,1226.03 635.937,1228.04 636.523,1227.24 637.11,1224.04 637.696,1221.12 638.283,1219.38 638.869,1217.78 639.456,1217.87 640.042,1219.13 640.628,1217.9 641.215,1217.85 641.801,1214.85 642.388,1215.03 642.974,1213.86 643.56,1212.58 644.147,1212.71 644.733,1213.07 645.32,1209.24 645.906,1210.9 646.492,1213.81 647.079,1214.14 647.665,1213.87 648.252,1212.45 648.838,1213.76 649.425,1211.36 650.011,1210.32 650.597,1208.16 651.184,1209.79 651.77,1208.8 652.357,1209.16 652.943,1210.84 653.529,1213.65 654.116,1213.54 654.702,1216.45 655.289,1219.29 655.875,1219.13 656.462,1220.05 657.048,1219.52 657.634,1222.27 658.221,1221.96 658.807,1221.66 659.394,1222.61 659.98,1222.11 660.566,1220.34 661.153,1218.56 661.739,1214.52 662.326,1217.3 662.912,1218.45 663.498,1218.32 664.085,1216.7 664.671,1215.31 665.258,1217.99 665.844,1220.38 666.431,1221.79 667.017,1222.6 667.603,1222.09 668.19,1220.33 668.776,1219.81 669.363,1217.86 669.949,1217.67 670.535,1220.11 671.122,1217.09 671.708,1217.08 672.295,1210.49 672.881,1209.34 673.467,1207.07 674.054,1206.33 674.64,1208.1 675.227,1207.12 675.813,1206.4 676.4,1204.08 676.986,1205.99 677.572,1203.75 678.159,1201.68 678.745,1203.76 679.332,1204.04 679.918,1205.89 680.504,1206.32 681.091,1209.39 681.677,1209.67 682.264,1208.36 682.85,1209.89 683.436,1212.76 684.023,1212.8 684.609,1212.7 685.196,1215.21 685.782,1216.49 686.369,1216.29 686.955,1218.87 687.541,1218.73 688.128,1219.9 688.714,1222.26 689.301,1220.59 689.887,1221.47 690.473,1222.26 691.06,1224.26 691.646,1221.77 692.233,1221.05 692.819,1224.12 693.405,1222.16 693.992,1222.84 694.578,1221.16 695.165,1220.52 695.751,1221.27 696.338,1217.98 696.924,1219.02 697.51,1216.2 698.097,1215.79 698.683,1215.73 699.27,1215.56 699.856,1216.79 700.442,1217.68 701.029,1216.23 701.615,1215.96 702.202,1217.04 702.788,1219.38 703.375,1220.61 703.961,1221.09 704.547,1220.59 705.134,1220.14 705.72,1217.18 706.307,1216.93 706.893,1217.91 707.479,1212.24 708.066,1210.84 708.652,1213.58 709.239,1214.96 709.825,1212.38 710.411,1214.89 710.998,1219.87 711.584,1218.22 712.171,1219.38 712.757,1218.98 713.344,1218.51 713.93,1216.85 714.516,1218.24 715.103,1221.75 715.689,1221.36 716.276,1222.19 716.862,1221.8 717.448,1221.27 718.035,1219.79 718.621,1220.66 719.208,1217.68 719.794,1217.66 720.38,1224 720.967,1224.64 721.553,1222.72 722.14,1227.35 722.726,1227.74 723.313,1229.39 723.899,1229.51 724.485,1226.1 725.072,1228.07 725.658,1225.99 726.245,1223.99 726.831,1220.79 727.417,1216.43 728.004,1216.14 728.59,1211.67 729.177,1211.68 729.763,1211.5 730.349,1208.97 730.936,1207.68 731.522,1205.05 732.109,1206.64 732.695,1207.11 733.282,1204.4 733.868,1206.46 734.454,1206.49 735.041,1206.64 735.627,1209.65 736.214,1209.67 736.8,1209.82 737.386,1211.33 737.973,1208.84 738.559,1207.74 739.146,1207.9 739.732,1207.99 740.318,1209.71 740.905,1209.82 741.491,1212.51 742.078,1212.66 742.664,1211.17 743.251,1213.74 743.837,1212.18 744.423,1214.89 745.01,1214.55 745.596,1214.32 746.183,1214.29 746.769,1214.05 747.355,1213.74 747.942,1215.18 748.528,1214.41 749.115,1215.43 749.701,1215.28 750.288,1213.83 750.874,1211.38 751.46,1214.12 752.047,1215.07 752.633,1216.09 753.22,1217.09 753.806,1215.53 754.392,1216.64 754.979,1215.07 755.565,1217.57 756.152,1219.67 756.738,1220.4 757.324,1215.75 757.911,1214.4 758.497,1217.02 759.084,1213.03 759.67,1214.4 760.257,1210.22 760.843,1208.7 761.429,1208.67 762.016,1209.69 762.602,1210.94 763.189,1210.99 763.775,1211.14 764.361,1211.38 764.948,1210.17 765.534,1211.52 766.121,1210.13 766.707,1207.37 767.293,1207.44 767.88,1207.71 768.466,1210.48 769.053,1207.83 769.639,1208.16 770.226,1207 770.812,1206.29 771.398,1205.34 771.985,1204.2 772.571,1206.24 773.158,1206.81 773.744,1208.53 774.33,1206.04 774.917,1206.79 775.503,1208.3 776.09,1209.64 776.676,1209.76 777.262,1208.43 777.849,1212.52 778.435,1211.27 779.022,1213.77 779.608,1213.52 780.195,1214.58 780.781,1215.73 781.367,1219.6 781.954,1220.43 782.54,1218.8 783.127,1219.88 783.713,1218.05 784.299,1220.19 784.886,1221.01 785.472,1219.17 786.059,1219.85 786.645,1220.77 787.232,1213.84 787.818,1213.8 788.404,1215.14 788.991,1213.43 789.577,1210.68 790.164,1212.07 790.75,1211.83 791.336,1208.11 791.923,1204.31 792.509,1208.52 793.096,1208.54 793.682,1208.62 794.268,1207.15 794.855,1204.69 795.441,1206.02 796.028,1208.91 796.614,1208.65 797.201,1208.79 797.787,1208.81 798.373,1210.02 798.96,1209.01 799.546,1210.86 800.133,1214.79 800.719,1214.71 801.305,1215.64 801.892,1210.07 802.478,1210.11 803.065,1210.04 803.651,1211.4 804.237,1212.53 804.824,1212.46 805.41,1212.42 805.997,1213.35 806.583,1214.51 807.17,1213.29 807.756,1211.79 808.342,1211.71 808.929,1211.78 809.515,1210.52 810.102,1208.98 810.688,1209.2 811.274,1209.55 811.861,1209.91 812.447,1213.82 813.034,1212.2 813.62,1211.91 814.206,1214.34 814.793,1210.25 815.379,1211.44 815.966,1207.66 816.552,1206.55 817.139,1206.78 817.725,1206.78 818.311,1209.54 818.898,1206.56 819.484,1206.83 820.071,1206.73 820.657,1205.78 821.243,1205.84 821.83,1204.61 822.416,1206.03 823.003,1207.83 823.589,1207.91 824.175,1206.29 824.762,1206.39 825.348,1205.41 825.935,1205.61 826.521,1208.35 827.108,1208.3 827.694,1208.46 828.28,1206.06 828.867,1204.73 829.453,1203.59 830.04,1206.81 830.626,1207.24 831.212,1208.33 831.799,1208.49 832.385,1209.68 832.972,1209.45 833.558,1210.9 834.145,1213.63 834.731,1210.52 835.317,1210.51 835.904,1209.13 836.49,1209.18 837.077,1209.43 837.663,1208.09 838.249,1204.34 838.836,1208.65 839.422,1207.3 840.009,1208.57 840.595,1207.22 841.181,1208.76 841.768,1209.01 842.354,1208.89 842.941,1210.28 843.527,1210.06 844.114,1211.23 844.7,1212.62 845.286,1213.63 845.873,1215.71 846.459,1215.38 847.046,1215.06 847.632,1213.35 848.218,1214.16 848.805,1212.84 849.391,1211.23 849.978,1208.44 850.564,1208.28 851.15,1208.2 851.737,1208.17 852.323,1207.09 852.91,1205.79 853.496,1203.15 854.083,1203.66 854.669,1200.1 855.255,1202.04 855.842,1203.73 856.428,1202.62 857.015,1202.9 857.601,1200.41 858.187,1203.72 858.774,1206.52 859.36,1206.81 859.947,1205.69 860.533,1204.74 861.119,1198.49 861.706,1200.55 862.292,1202.44 862.879,1202.79 863.465,1204.57 864.052,1202.14 864.638,1202.23 865.224,1202.52 865.811,1198.79 866.397,1200.68 866.984,1199.99 867.57,1200.13 868.156,1200.74 868.743,1200.01 869.329,1203.36 869.916,1204.91 870.502,1205.16 871.089,1201.53 871.675,1203.24 872.261,1205.82 872.848,1205.79 873.434,1207.39 874.021,1207.26 874.607,1210.12 875.193,1211.14 875.78,1212.26 876.366,1209.27 876.953,1209.12 877.539,1210.26 878.125,1208.65 878.712,1203.43 879.298,1205.08 879.885,1206.55 880.471,1206.73 881.058,1206.72 881.644,1209.37 882.23,1208.19 882.817,1207.22 883.403,1208.6 883.99,1205.88 884.576,1208.63 885.162,1210.07 885.749,1208.65 886.335,1208.69 886.922,1206.25 887.508,1204.85 888.094,1204.95 888.681,1205 889.267,1207.49 889.854,1207.58 890.44,1207.38 891.027,1210.24 891.613,1208.91 892.199,1207.41 892.786,1210.04 893.372,1211.04 893.959,1209.68 894.545,1211.02 895.131,1212.28 895.718,1214.79 896.304,1213.33 896.891,1213.2 897.477,1210.29 898.063,1208.65 898.65,1209.86 899.236,1208.29 899.823,1205.56 900.409,1207.05 900.996,1207.15 901.582,1208.45 902.168,1207.15 902.755,1205.9 903.341,1203.47 903.928,1202.43 904.514,1202.73 905.1,1203.18 905.687,1203.55 906.273,1202.64 906.86,1204.13 907.446,1202.83 908.032,1203.02 908.619,1203.15 909.205,1206.07 909.792,1207.42 910.378,1208.8 910.965,1210 911.551,1207.34 912.137,1209.72 912.724,1208.52 913.31,1208.48 913.897,1209.81 914.483,1208.37 915.069,1209.64 915.656,1213.39 916.242,1213.38 916.829,1213.1 917.415,1214.19 918.002,1213.93 918.588,1213.42 919.174,1211.74 919.761,1211.84 920.347,1211.69 920.934,1211.62 921.52,1210.12 922.106,1211.31 922.693,1209.89 923.279,1212.23 923.866,1210.52 924.452,1209.25 925.038,1210.32 925.625,1211.5 926.211,1209.96 926.798,1211.22 927.384,1211.08 927.971,1208.46 928.557,1208.44 929.143,1208.58 929.73,1208.31 930.316,1210.13 930.903,1209.89 931.489,1208.7 932.075,1206.98 932.662,1206.93 933.248,1207.09 933.835,1207.4 934.421,1207.49 935.007,1211.72 935.594,1210.02 936.18,1208.52 936.767,1208.41 937.353,1210.69 937.94,1210.51 938.526,1211.65 939.112,1212.93 939.699,1212.58 940.285,1212.24 940.872,1210.56 941.458,1206.52 942.044,1207 942.631,1206.84 943.217,1208.13 943.804,1208.07 944.39,1208.18 944.976,1209.41 945.563,1209.36 946.149,1210.5 946.736,1210.05 947.322,1208.69 947.909,1207.23 948.495,1209.9 949.081,1212.18 949.668,1213.18 950.254,1214.06 950.841,1215.16 951.427,1213.66 952.013,1216.2 952.6,1214.22 953.186,1212.61 953.773,1213.6 954.359,1211.9 954.945,1211.85 955.532,1211.62 956.118,1210.29 956.705,1211.77 957.291,1211.52 957.878,1211.38 958.464,1211.31 959.05,1209.87 959.637,1207.07 960.223,1204.5 960.81,1205.85 961.396,1206.09 961.982,1207.56 962.569,1208.94 963.155,1210.37 963.742,1211.67 964.328,1211.51 964.915,1212.53 965.501,1208.5 966.087,1209.69 966.674,1209.46 967.26,1214.54 967.847,1216.83 968.433,1216.28 969.019,1213.38 969.606,1215.45 970.192,1217.68 970.779,1217.05 971.365,1213.96 971.951,1211.13 972.538,1209.69 973.124,1211.04 973.711,1209.41 974.297,1209.07 974.884,1208.73 975.47,1208.32 976.056,1207.2 976.643,1207.57 977.229,1208.75 977.816,1212.79 978.402,1211.33 978.988,1212.44 979.575,1213.35 980.161,1214.29 980.748,1214.17 981.334,1212.46 981.92,1213.39 982.507,1214.49 983.093,1212.57 983.68,1212.37 984.266,1211.04 984.853,1209.24 985.439,1208.9 986.025,1209.03 986.612,1209.21 987.198,1209.31 987.785,1209.51 988.371,1209.53 988.957,1210.77 989.544,1214.45 990.13,1214.42 990.717,1215.06 991.303,1214.88 991.889,1215.86 992.476,1214.18 993.062,1211.14 993.649,1208.69 994.235,1211.26 994.822,1210.98 995.408,1208.12 995.994,1210.66 996.581,1213.05 997.167,1212.95 997.754,1215.3 998.34,1214.72 998.926,1215.44 999.513,1216.24 1000.1,1215.49 1000.69,1214.96 1001.27,1212.12 1001.86,1215.78 1002.44,1216.44 1003.03,1215.05 1003.62,1212.06 1004.2,1212.03 1004.79,1209.1 1005.38,1206.33 1005.96,1205.4 1006.55,1205.65 1007.14,1205.55 1007.72,1204.66 1008.31,1205.93 1008.9,1203.5 1009.48,1203.64 1010.07,1203.77 1010.65,1202.47 1011.24,1204.04 1011.83,1204.25 1012.41,1204.54 1013,1203 1013.59,1203.26 1014.17,1202.27 1014.76,1204.14 1015.35,1202.94 1015.93,1203.24 1016.52,1204.66 1017.11,1206.1 1017.69,1207.15 1018.28,1208.42 1018.86,1209.53 1019.45,1209.44 1020.04,1206.75 1020.62,1206.66 1021.21,1209.5 1021.8,1209.23 1022.38,1210.46 1022.97,1211.63 1023.56,1211.6 1024.14,1211.37 1024.73,1211.1 1025.32,1210.88 1025.9,1209.35 1026.49,1210.52 1027.07,1209.13 1027.66,1209.34 1028.25,1210.87 1028.83,1205.43 1029.42,1207.11 1030.01,1203.03 1030.59,1202.03 1031.18,1198.54 1031.77,1195.03 1032.35,1195.7 1032.94,1194.96 1033.52,1194.58 1034.11,1193.94 1034.7,1191.9 1035.28,1193.84 1035.87,1199.76 1036.46,1198.73 1037.04,1195.37 1037.63,1195.95 1038.22,1197.82 1038.8,1199.74 1039.39,1201.55 1039.98,1202.84 1040.56,1201.9 1041.15,1203.54 1041.73,1203.33 1042.32,1203.88 1042.91,1205.55 1043.49,1205.64 1044.08,1203.4 1044.67,1203.66 1045.25,1206.61 1045.84,1205.51 1046.43,1206.97 1047.01,1207.34 1047.6,1208.79 1048.19,1210.01 1048.77,1209.93 1049.36,1208.54 1049.94,1207.31 1050.53,1207.2 1051.12,1205.67 1051.7,1204.47 1052.29,1204.56 1052.88,1206.24 1053.46,1207.54 1054.05,1207.75 1054.64,1205.27 1055.22,1205.53 1055.81,1204.48 1056.39,1207.62 1056.98,1207.54 1057.57,1206.19 1058.15,1208.8 1058.74,1209.99 1059.33,1208.43 1059.91,1208.62 1060.5,1206.12 1061.09,1206.55 1061.67,1205.1 1062.26,1205.27 1062.85,1205.24 1063.43,1204.18 1064.02,1207 1064.6,1208.44 1065.19,1208.35 1065.78,1206.89 1066.36,1203.04 1066.95,1203.46 1067.54,1206.13 1068.12,1204.9 1068.71,1203.8 1069.3,1203.99 1069.88,1205.44 1070.47,1207.98 1071.06,1208.1 1071.64,1211.83 1072.23,1211.64 1072.81,1212.83 1073.4,1212.58 1073.99,1209.69 1074.57,1210.79 1075.16,1210.57 1075.75,1210.29 1076.33,1210.08 1076.92,1209.65 1077.51,1212.41 1078.09,1209.62 1078.68,1205.72 1079.26,1207.25 1079.85,1205.89 1080.44,1208.48 1081.02,1208.31 1081.61,1206.76 1082.2,1206.89 1082.78,1202.76 1083.37,1204.29 1083.96,1204.21 1084.54,1204.27 1085.13,1203.93 1085.72,1205.35 1086.3,1204.09 1086.89,1204.26 1087.47,1205.86 1088.06,1209.8 1088.65,1209.82 1089.23,1209.86 1089.82,1211.07 1090.41,1212.2 1090.99,1210.61 1091.58,1209.19 1092.17,1210.09 1092.75,1210.2 1093.34,1211.12 1093.93,1213.55 1094.51,1216.03 1095.1,1215.72 1095.68,1219.22 1096.27,1217.42 1096.86,1215.35 1097.44,1214.83 1098.03,1210.64 1098.62,1210.78 1099.2,1210.45 1099.79,1215.12 1100.38,1216.02 1100.96,1213.09 1101.55,1212.71 1102.14,1211.09 1102.72,1216.27 1103.31,1215.62 1103.89,1216.31 1104.48,1218.24 1105.07,1217.49 1105.65,1214.12 1106.24,1211.15 1106.83,1211 1107.41,1213.48 1108,1213.33 1108.59,1213.1 1109.17,1212.59 1109.76,1210.98 1110.34,1210.54 1110.93,1211.59 1111.52,1209.91 1112.1,1209.4 1112.69,1209.23 1113.28,1206.38 1113.86,1205.09 1114.45,1203.79 1115.04,1202.62 1115.62,1202.95 1116.21,1201.84 1116.8,1201.98 1117.38,1203.68 1117.97,1202.49 1118.55,1205.42 1119.14,1208.1 1119.73,1207.92 1120.31,1205.15 1120.9,1207.81 1121.49,1207.76 1122.07,1207.86 1122.66,1207.81 1123.25,1207.54 1123.83,1206.08 1124.42,1205.99 1125.01,1207.15 1125.59,1209.59 1126.18,1209.42 1126.76,1208.01 1127.35,1208.01 1127.94,1209.18 1128.52,1210.5 1129.11,1211.46 1129.7,1212.58 1130.28,1209.67 1130.87,1209.38 1131.46,1210.51 1132.04,1210.31 1132.63,1210.07 1133.21,1208.56 1133.8,1207.09 1134.39,1207.12 1134.97,1204.49 1135.56,1205.97 1136.15,1205.88 1136.73,1205.78 1137.32,1204.41 1137.91,1202.85 1138.49,1203.31 1139.08,1207.6 1139.67,1205.3 1140.25,1203 1140.84,1205.81 1141.42,1203.18 1142.01,1203.09 1142.6,1203.33 1143.18,1203.49 1143.77,1202.04 1144.36,1203.63 1144.94,1203.84 1145.53,1202.71 1146.12,1202.78 1146.7,1201.56 1147.29,1203.22 1147.88,1202.49 1148.46,1205.39 1149.05,1203.23 1149.63,1208.81 1150.22,1207.49 1150.81,1207.61 1151.39,1210.4 1151.98,1210.13 1152.57,1207.66 1153.15,1208.98 1153.74,1209.11 1154.33,1207.62 1154.91,1206.38 1155.5,1206.61 1156.09,1206.63 1156.67,1208.18 1157.26,1209.43 1157.84,1209.44 1158.43,1207.78 1159.02,1207.58 1159.6,1206.02 1160.19,1206.46 1160.78,1209.08 1161.36,1209.05 1161.95,1208.85 1162.54,1209.98 1163.12,1208.86 1163.71,1207.69 1164.29,1207.69 1164.88,1207.86 1165.47,1206.38 1166.05,1206.44 1166.64,1206.82 1167.23,1208.4 1167.81,1209.73 1168.4,1209.64 1168.99,1212.25 1169.57,1210.86 1170.16,1211.98 1170.75,1211.74 1171.33,1210.4 1171.92,1211.6 1172.5,1210.17 1173.09,1210.19 1173.68,1210.35 1174.26,1210.42 1174.85,1208.78 1175.44,1208.85 1176.02,1207.32 1176.61,1211.1 1177.2,1212.04 1177.78,1210.45 1178.37,1211.57 1178.96,1211.22 1179.54,1210.92 1180.13,1209.43 1180.71,1208.18 1181.3,1208.3 1181.89,1210.89 1182.47,1213.16 1183.06,1210.26 1183.65,1207.6 1184.23,1207.48 1184.82,1207.71 1185.41,1209.13 1185.99,1209.09 1186.58,1209.03 1187.16,1206.37 1187.75,1202.06 1188.34,1205.06 1188.92,1207.77 1189.51,1206.53 1190.1,1207.9 1190.68,1206.66 1191.27,1206.75 1191.86,1205.33 1192.44,1206.99 1193.03,1204.06 1193.62,1204.45 1194.2,1205.81 1194.79,1210.99 1195.37,1211.92 1195.96,1214.16 1196.55,1215.07 1197.13,1212.09 1197.72,1211.74 1198.31,1210.13 1198.89,1207.41 1199.48,1205.83 1200.07,1208.29 1200.65,1209.41 1201.24,1211.77 1201.83,1210.04 1202.41,1209.86 1203,1211.09 1203.58,1210.71 1204.17,1210.47 1204.76,1210.2 1205.34,1208.78 1205.93,1207.48 1206.52,1203.44 1207.1,1203.54 1207.69,1206.44 1208.28,1206.46 1208.86,1205.17 1209.45,1205.28 1210.03,1205.26 1210.62,1203.89 1211.21,1201.71 1211.79,1204.64 1212.38,1204.81 1212.97,1203.47 1213.55,1200.98 1214.14,1201.33 1214.73,1198.92 1215.31,1202.44 1215.9,1201.37 1216.49,1201.58 1217.07,1203.02 1217.66,1204.65 1218.24,1206.51 1218.83,1206.67 1219.42,1205.63 1220,1210.97 1220.59,1209.67 1221.18,1209.88 1221.76,1209.44 1222.35,1207.96 1222.94,1206.57 1223.52,1207.76 1224.11,1205.07 1224.7,1202.4 1225.28,1202.6 1225.87,1202.67 1226.45,1199 1227.04,1202.13 1227.63,1203.54 1228.21,1203.99 1228.8,1204.32 1229.39,1204.44 1229.97,1202.06 1230.56,1203.7 1231.15,1201.25 1231.73,1197.78 1232.32,1201.08 1232.91,1201.31 1233.49,1203.03 1234.08,1203.39 1234.66,1203.94 1235.25,1201.39 1235.84,1202.9 1236.42,1201.75 1237.01,1201.94 1237.6,1201.33 1238.18,1198.68 1238.77,1197.71 1239.36,1201.23 1239.94,1201.33 1240.53,1201.44 1241.11,1200.53 1241.7,1200.96 1242.29,1201.41 1242.87,1201.67 1243.46,1200.66 1244.05,1202.29 1244.63,1199.76 1245.22,1198.98 1245.81,1197.87 1246.39,1199.83 1246.98,1201.39 1247.57,1198.96 1248.15,1201.75 1248.74,1203.41 1249.32,1201.27 1249.91,1200.49 1250.5,1203.63 1251.08,1203.95 1251.67,1203.98 1252.26,1202.94 1252.84,1202.02 1253.43,1199.25 1254.02,1198.28 1254.6,1198.79 1255.19,1197.85 1255.78,1198.21 1256.36,1198.6 1256.95,1199.03 1257.53,1201.92 1258.12,1199.43 1258.71,1200.1 1259.29,1200.54 1259.88,1203.51 1260.47,1205.12 1261.05,1202.53 1261.64,1202.79 1262.23,1201.58 1262.81,1205.78 1263.4,1209.88 1263.98,1207.18 1264.57,1208.23 1265.16,1205.36 1265.74,1204.04 1266.33,1201.62 1266.92,1199.13 1267.5,1200.94 1268.09,1201.24 1268.68,1204.44 1269.26,1204.51 1269.85,1204.77 1270.44,1206.37 1271.02,1206.2 1271.61,1207.5 1272.19,1207.39 1272.78,1202.32 1273.37,1203.88 1273.95,1202.73 1274.54,1204.06 1275.13,1198.59 1275.71,1197.51 1276.3,1200.54 1276.89,1203.58 1277.47,1205.28 1278.06,1207.94 1278.65,1207.96 1279.23,1206.78 1279.82,1206.72 1280.4,1206.51 1280.99,1206.79 1281.58,1208.11 1282.16,1209.49 1282.75,1209.46 1283.34,1209.6 1283.92,1209.41 1284.51,1211.69 1285.1,1210.33 1285.68,1209.1 1286.27,1208.79 1286.86,1210.05 1287.44,1211.34 1288.03,1213.98 1288.61,1214.88 1289.2,1213.17 1289.79,1211.8 1290.37,1211.68 1290.96,1212.47 1291.55,1211.9 1292.13,1211.39 1292.72,1211.27 1293.31,1212.53 1293.89,1212.09 1294.48,1212.09 1295.06,1211.81 1295.65,1212.76 1296.24,1213.83 1296.82,1214.68 1297.41,1214.04 1298,1210.03 1298.58,1209.65 1299.17,1209.41 1299.76,1209.34 1300.34,1209.38 1300.93,1210.6 1301.52,1211.85 1302.1,1212.94 1302.69,1212.25 1303.27,1210.74 1303.86,1210.74 1304.45,1211.74 1305.03,1212.78 1305.62,1213.86 1306.21,1214.79 1306.79,1214.24 1307.38,1214.98 1307.97,1213.32 1308.55,1214.37 1309.14,1215.09 1309.73,1217.06 1310.31,1216.48 1310.9,1218.43 1311.48,1215.24 1312.07,1212.12 1312.66,1215.89 1313.24,1215.51 1313.83,1216.28 1314.42,1217.11 1315,1217.67 1315.59,1215.83 1316.18,1216.38 1316.76,1215.76 1317.35,1215.22 1317.93,1215.86 1318.52,1214.02 1319.11,1213.82 1319.69,1213.77 1320.28,1213.39 1320.87,1214.29 1321.45,1215.52 1322.04,1216.53 1322.63,1217.2 1323.21,1217.95 1323.8,1217.25 1324.39,1217.99 1324.97,1219.68 1325.56,1218.85 1326.14,1216.82 1326.73,1214.93 1327.32,1211.95 1327.9,1213.2 1328.49,1212.83 1329.08,1213.94 1329.66,1214.7 1330.25,1218.33 1330.84,1217.43 1331.42,1218.19 1332.01,1215.95 1332.6,1213.08 1333.18,1212.6 1333.77,1212.4 1334.35,1213.67 1334.94,1214.78 1335.53,1214.4 1336.11,1211.59 1336.7,1207.3 1337.29,1207.45 1337.87,1208.86 1338.46,1211.05 1339.05,1212.4 1339.63,1211.79 1340.22,1207.56 1340.8,1204.56 1341.39,1204.53 1341.98,1208.46 1342.56,1208.14 1343.15,1209.62 1343.74,1209.45 1344.32,1207.74 1344.91,1207.8 1345.5,1203.88 1346.08,1205.43 1346.67,1206.84 1347.26,1208.25 1347.84,1208.35 1348.43,1208.33 1349.01,1204.18 1349.6,1202.87 1350.19,1201.51 1350.77,1199.26 1351.36,1198.27 1351.95,1195.04 1352.53,1194.25 1353.12,1196.28 1353.71,1195.74 1354.29,1197.82 1354.88,1197.21 1355.47,1197.7 1356.05,1196.82 1356.64,1197.51 1357.22,1196.83 1357.81,1195.89 1358.4,1197.69 1358.98,1197.98 1359.57,1197.11 1360.16,1197.59 1360.74,1200.75 1361.33,1202.27 1361.92,1205.36 1362.5,1205.37 1363.09,1206.82 1363.68,1204.31 1364.26,1204.64 1364.85,1201.97 1365.43,1202.22 1366.02,1202.32 1366.61,1202.47 1367.19,1202.68 1367.78,1201.47 1368.37,1201.87 1368.95,1202.22 1369.54,1199.87 1370.13,1200.23 1370.71,1200.71 1371.3,1199.42 1371.88,1199.83 1372.47,1199.22 1373.06,1199.85 1373.64,1202.82 1374.23,1202 1374.82,1200.92 1375.4,1201.47 1375.99,1200.69 1376.58,1201.2 1377.16,1201.88 1377.75,1201.03 1378.34,1202.95 1378.92,1202.04 1379.51,1203.59 1380.09,1206.45 1380.68,1205.18 1381.27,1207.84 1381.85,1206.44 1382.44,1206.65 1383.03,1205.44 1383.61,1200.42 1384.2,1200.8 1384.79,1201.39 1385.37,1201.75 1385.96,1205.83 1386.55,1209.71 1387.13,1210.65 1387.72,1210.19 1388.3,1209.91 1388.89,1208.58 1389.48,1207.33 1390.06,1208.47 1390.65,1207.04 1391.24,1207.03 1391.82,1206.81 1392.41,1206.82 1393,1205.64 1393.58,1207.11 1394.17,1208.72 1394.75,1207.46 1395.34,1208.97 1395.93,1205.03 1396.51,1202.37 1397.1,1202.9 1397.69,1203.12 1398.27,1203.31 1398.86,1207.54 1399.45,1208.87 1400.03,1207.73 1400.62,1209.08 1401.21,1210.22 1401.79,1208.75 1402.38,1207.35 1402.96,1207.47 1403.55,1207.69 1404.14,1208.7 1404.72,1208.47 1405.31,1208.73 1405.9,1209.81 1406.48,1208.14 1407.07,1207.71 1407.66,1209.06 1408.24,1209.07 1408.83,1209.09 1409.42,1208.82 1410,1204.72 1410.59,1204.7 1411.17,1206.04 1411.76,1204.58 1412.35,1203.12 1412.93,1203.32 1413.52,1203.58 1414.11,1199.87 1414.69,1201.62 1415.28,1203.25 1415.87,1205.95 1416.45,1207.34 1417.04,1205.98 1417.63,1204.66 1418.21,1207.44 1418.8,1211.6 1419.38,1212.68 1419.97,1214.95 1420.56,1215.83 1421.14,1217.9 1421.73,1217.23 1422.32,1217.84 1422.9,1215.93 1423.49,1215.22 1424.08,1219.87 1424.66,1221.7 1425.25,1218.09 1425.83,1218.81 1426.42,1219.55 1427.01,1218.75 1427.59,1219.66 1428.18,1215.03 1428.77,1214.46 1429.35,1215.52 1429.94,1212.32 1430.53,1213.57 1431.11,1213.45 1431.7,1212.05 1432.29,1211.86 1432.87,1208.83 1433.46,1208.77 1434.04,1211.33 1434.63,1211.13 1435.22,1208.43 1435.8,1208.46 1436.39,1209.59 1436.98,1209.3 1437.56,1210.37 1438.15,1208.96 1438.74,1210.08 1439.32,1208.46 1439.91,1208.63 1440.5,1205.86 1441.08,1204.77 1441.67,1204.81 1442.25,1203.88 1442.84,1205.74 1443.43,1207.09 1444.01,1206.95 1444.6,1204.25 1445.19,1204.52 1445.77,1203.26 1446.36,1203.26 1446.95,1203.42 1447.53,1203.5 1448.12,1202.09 1448.7,1200.59 1449.29,1204.88 1449.88,1203.84 1450.46,1203.86 1451.05,1203.98 1451.64,1207.74 1452.22,1207.59 1452.81,1207.5 1453.4,1210.07 1453.98,1213.57 1454.57,1214.53 1455.16,1214.11 1455.74,1214.87 1456.33,1216.91 1456.91,1216.36 1457.5,1213.36 1458.09,1213.09 1458.67,1211.59 1459.26,1212.67 1459.85,1213.76 1460.43,1212.16 1461.02,1210.56 1461.61,1208.97 1462.19,1209.1 1462.78,1208.99 1463.37,1207.81 1463.95,1207.91 1464.54,1208.88 1465.12,1207.82 1465.71,1206.42 1466.3,1205.11 1466.88,1202.6 1467.47,1198.88 1468.06,1199.41 1468.64,1199.84 1469.23,1198.82 1469.82,1200.35 1470.4,1202.14 1470.99,1201.16 1471.57,1202.79 1472.16,1203.13 1472.75,1200.71 1473.33,1201.16 1473.92,1200.29 1474.51,1200.5 1475.09,1202.22 1475.68,1203.81 1476.27,1202.43 1476.85,1201.57 1477.44,1200.79 1478.03,1202.28 1478.61,1202.75 1479.2,1203.28 1479.78,1203.49 1480.37,1203.64 1480.96,1207.54 1481.54,1206.34 1482.13,1206.4 1482.72,1206.59 1483.3,1205.02 1483.89,1206.54 1484.48,1206.47 1485.06,1207.41 1485.65,1204.53 1486.24,1206.01 1486.82,1204.63 1487.41,1205.86 1487.99,1208.29 1488.58,1211.85 1489.17,1211.39 1489.75,1213.68 1490.34,1213.33 1490.93,1213.05 1491.51,1212.45 1492.1,1210.92 1492.69,1210.8 1493.27,1209.29 1493.86,1205.12 1494.45,1205.17 1495.03,1204 1495.62,1205.47 1496.2,1205.83 1496.79,1206.07 1497.38,1206.07 1497.96,1205.8 1498.55,1204.84 1499.14,1204.9 1499.72,1204.93 1500.31,1206.35 1500.9,1207.41 1501.48,1207.54 1502.07,1207.76 1502.65,1207.68 1503.24,1209.22 1503.83,1208 1504.41,1209.57 1505,1210.91 1505.59,1209.54 1506.17,1210.48 1506.76,1211.38 1507.35,1209.89 1507.93,1205.66 1508.52,1206.76 1509.11,1206.96 1509.69,1207.06 1510.28,1206.83 1510.86,1205.65 1511.45,1203.1 1512.04,1201.77 1512.62,1204.64 1513.21,1206.21 1513.8,1206.05 1514.38,1203.72 1514.97,1202.75 1515.56,1202.81 1516.14,1204.36 1516.73,1204.45 1517.32,1208.59 1517.9,1209.98 1518.49,1208.71 1519.07,1209.12 1519.66,1210.46 1520.25,1210.46 1520.83,1210.43 1521.42,1209.05 1522.01,1209.09 1522.59,1207.69 1523.18,1208.75 1523.77,1207.21 1524.35,1205.99 1524.94,1207.62 1525.52,1206.14 1526.11,1204.62 1526.7,1208.64 1527.28,1211.24 1527.87,1207.25 1528.46,1207.17 1529.04,1207.22 1529.63,1205.96 1530.22,1205.92 1530.8,1206.01 1531.39,1206.27 1531.98,1205.06 1532.56,1202.33 1533.15,1202.42 1533.73,1201.32 1534.32,1200.18 1534.91,1200.95 1535.49,1197.09 1536.08,1197.48 1536.67,1200.69 1537.25,1202.49 1537.84,1205.29 1538.43,1205.37 1539.01,1205.39 1539.6,1205.92 1540.19,1205.92 1540.77,1204.67 1541.36,1204.76 1541.94,1200.91 1542.53,1200.12 1543.12,1200.43 1543.7,1200.8 1544.29,1201.16 1544.88,1201.7 1545.46,1199.44 1546.05,1201.15 1546.64,1201.26 1547.22,1201.72 1547.81,1201.96 1548.4,1203.59 1548.98,1203.9 1549.57,1204.04 1550.15,1205.61 1550.74,1205.9 1551.33,1208.74 1551.91,1210.07 1552.5,1211.08 1553.09,1209.76 1553.67,1207.57 1554.26,1207.6 1554.85,1206.23 1555.43,1207.64 1556.02,1206.3 1556.6,1207.79 1557.19,1207.96 1557.78,1209.13 1558.36,1211.72 1558.95,1210.4 1559.54,1211.33 1560.12,1212.59 1560.71,1212.38 1561.3,1212.17 1561.88,1213.29 1562.47,1211.82 1563.06,1211.61 1563.64,1209.81 1564.23,1209.4 1564.81,1206.58 1565.4,1207.89 1565.99,1205.51 1566.57,1208.32 1567.16,1208.1 1567.75,1207.83 1568.33,1208.94 1568.92,1208.95 1569.51,1207.39 1570.09,1208.51 1570.68,1208.42 1571.27,1206.96 1571.85,1207.04 1572.44,1206.99 1573.02,1205.61 1573.61,1206.85 1574.2,1208.31 1574.78,1207.23 1575.37,1208.5 1575.96,1207 1576.54,1206.73 1577.13,1206.8 1577.72,1206.9 1578.3,1208.31 1578.89,1208.44 1579.47,1208.64 1580.06,1210.06 1580.65,1209.94 1581.23,1209.95 1581.82,1207.17 1582.41,1204.43 1582.99,1204.61 1583.58,1206.17 1584.17,1207.41 1584.75,1208.41 1585.34,1207.4 1585.93,1207.03 1586.51,1206.97 1587.1,1206.81 1587.68,1206.95 1588.27,1202.96 1588.86,1202 1589.44,1203.65 1590.03,1204.07 1590.62,1205.44 1591.2,1205.43 1591.79,1209.32 1592.38,1207.96 1592.96,1207.96 1593.55,1210.53 1594.14,1212.92 1594.72,1207.39 1595.31,1204.94 1595.89,1206.29 1596.48,1209.08 1597.07,1210.18 1597.65,1211.21 1598.24,1211.01 1598.83,1207.01 1599.41,1206.92 1600,1207.06 1600.59,1203 1601.17,1204.51 1601.76,1201.96 1602.34,1203.61 1602.93,1204.01 1603.52,1201.48 1604.1,1200.58 1604.69,1201.03 1605.28,1202.76 1605.86,1201.52 1606.45,1200.67 1607.04,1202.37 1607.62,1201.15 1608.21,1205.39 1608.8,1205.52 1609.38,1205.79 1609.97,1207.55 1610.55,1204.81 1611.14,1209.91 1611.73,1209.93 1612.31,1211.07 1612.9,1212.03 1613.49,1214.26 1614.07,1215.04 1614.66,1213.03 1615.25,1211.56 1615.83,1209.93 1616.42,1207.22 1617.01,1208.33 1617.59,1208.45 1618.18,1208.47 1618.76,1211.13 1619.35,1204.35 1619.94,1205.87 1620.52,1205.93 1621.11,1207.1 1621.7,1205.86 1622.28,1204.62 1622.87,1204.56 1623.46,1204.47 1624.04,1206.11 1624.63,1206.34 1625.22,1207.74 1625.8,1207.69 1626.39,1207.4 1626.97,1207.4 1627.56,1205.66 1628.15,1205.86 1628.73,1207.01 1629.32,1207.15 1629.91,1205.86 1630.49,1203.47 1631.08,1203.55 1631.67,1205.18 1632.25,1201.46 1632.84,1200.14 1633.42,1200.23 1634.01,1200.77 1634.6,1198.39 1635.18,1198.99 1635.77,1199.55 1636.36,1199.89 1636.94,1198.91 1637.53,1201.96 1638.12,1203.46 1638.7,1202.11 1639.29,1202.8 1639.88,1204.28 1640.46,1208.57 1641.05,1208.47 1641.63,1205.63 1642.22,1205.59 1642.81,1204.26 1643.39,1204.53 1643.98,1205.95 1644.57,1205.93 1645.15,1207.37 1645.74,1207.24 1646.33,1206.3 1646.91,1206.26 1647.5,1206.22 1648.09,1207.67 1648.67,1208.83 1649.26,1211.6 1649.84,1207.63 1650.43,1208.71 1651.02,1208.73 1651.6,1208.78 1652.19,1210.34 1652.78,1210.23 1653.36,1211.27 1653.95,1209.69 1654.54,1208.19 1655.12,1208.11 1655.71,1210.82 1656.29,1210.65 1656.88,1207.74 1657.47,1210.28 1658.05,1209.85 1658.64,1209.6 1659.23,1209.76 1659.81,1208.35 1660.4,1211.12 1660.99,1212.09 1661.57,1214.45 1662.16,1216.79 1662.75,1217.53 1663.33,1218.08 1663.92,1214.73 1664.5,1214.11 1665.09,1213.47 1665.68,1214.39 1666.26,1213.76 1666.85,1213.4 1667.44,1213.26 1668.02,1211.14 1668.61,1209.51 1669.2,1210.53 1669.78,1212.02 1670.37,1211.69 1670.96,1212.69 1671.54,1212.7 1672.13,1210.9 1672.71,1210.52 1673.3,1207.54 1673.89,1207.26 1674.47,1208.7 1675.06,1208.84 1675.65,1209.08 1676.23,1207.76 1676.82,1208.04 1677.41,1206.5 1677.99,1206.56 1678.58,1208.11 1679.17,1210.69 1679.75,1207.93 1680.34,1210.38 1680.92,1210.22 1681.51,1209.89 1682.1,1208.1 1682.68,1209.46 1683.27,1207.01 1683.86,1208.3 1684.44,1208.03 1685.03,1209.38 1685.62,1210.94 1686.2,1209.28 1686.79,1207.56 1687.37,1208.52 1687.96,1208.66 1688.55,1207.34 1689.13,1207.32 1689.72,1203.32 1690.31,1203.57 1690.89,1201.39 1691.48,1201.68 1692.07,1200.75 1692.65,1203.83 1693.24,1206.65 1693.83,1209.31 1694.41,1208.96 1695,1207.41 1695.58,1207.37 1696.17,1205.91 1696.76,1205.98 1697.34,1206.18 1697.93,1205.21 1698.52,1205.28 1699.1,1206.57 1699.69,1204.93 1700.28,1209.02 1700.86,1210.37 1701.45,1207.53 1702.04,1207.66 1702.62,1207.83 1703.21,1205.28 1703.79,1204.12 1704.38,1204.28 1704.97,1203.6 1705.55,1206.23 1706.14,1209.12 1706.73,1211.76 1707.31,1209.99 1707.9,1208.49 1708.49,1205.74 1709.07,1206.81 1709.66,1205.28 1710.24,1208.19 1710.83,1210.77 1711.42,1209.02 1712,1210.27 1712.59,1213.9 1713.18,1211.99 1713.76,1213.02 1714.35,1212.84 1714.94,1209.88 1715.52,1208.39 1716.11,1209.66 1716.7,1210.71 1717.28,1211.91 1717.87,1209.15 1718.45,1209.15 1719.04,1210.28 1719.63,1210.14 1720.21,1212.64 1720.8,1213.66 1721.39,1212.88 1721.97,1214.02 1722.56,1211.03 1723.15,1210.76 1723.73,1209.17 1724.32,1213.02 1724.91,1214.08 1725.49,1215.16 1726.08,1214.47 1726.66,1212.97 1727.25,1211.34 1727.84,1209.69 1728.42,1208.36 1729.01,1205.58 1729.6,1205.49 1730.18,1205.58 1730.77,1204.69 1731.36,1203.56 1731.94,1202.3 1732.53,1202.74 1733.11,1203.19 1733.7,1199.62 1734.29,1200.14 1734.87,1199.18 1735.46,1198.09 1736.05,1199.54 1736.63,1199.96 1737.22,1198.84 1737.81,1195.36 1738.39,1196.11 1738.98,1196.68 1739.57,1195.45 1740.15,1194.74 1740.74,1195.33 1741.32,1195.9 1741.91,1197.85 1742.5,1195.7 1743.08,1196.38 1743.67,1196.86 1744.26,1197.32 1744.84,1199.58 1745.43,1204.92 1746.02,1205.02 1746.6,1201.25 1747.19,1201.32 1747.78,1202.8 1748.36,1200.47 1748.95,1200.67 1749.53,1202.29 1750.12,1201.25 1750.71,1202.68 1751.29,1198.92 1751.88,1201.99 1752.47,1199.9 1753.05,1198.97 1753.64,1200.84 1754.23,1201.2 1754.81,1201.66 1755.4,1203.13 1755.99,1206.08 1756.57,1204.92 1757.16,1205.15 1757.74,1205.36 1758.33,1208.14 1758.92,1209.33 1759.5,1210.75 1760.09,1211.88 1760.68,1213.02 1761.26,1214.08 1761.85,1213.92 1762.44,1215.19 1763.02,1217.41 1763.61,1216.72 1764.19,1217.35 1764.78,1216.8 1765.37,1215.06 1765.95,1213.12 1766.54,1214.06 1767.13,1212.38 1767.71,1210.9 1768.3,1207.93 1768.89,1206.71 1769.47,1207.85 1770.06,1206.4 1770.65,1207.86 1771.23,1207.98 1771.82,1205.35 1772.4,1202.74 1772.99,1207.03 1773.58,1207.09 1774.16,1205.5 1774.75,1204.4 1775.34,1207.24 1775.92,1208.55 1776.51,1209.81 1777.1,1210.83 1777.68,1210.55 1778.27,1211.46 1778.86,1209.93 1779.44,1213.74 1780.03,1214.88 1780.61,1211.92 1781.2,1211.56 1781.79,1210.05 1782.37,1209.79 1782.96,1209.62 1783.55,1209.55 1784.13,1205.85 1784.72,1208.48 1785.31,1208.46 1785.89,1210.6 1786.48,1213.1 1787.06,1210.58 1787.65,1208.06 1788.24,1208.96 1788.82,1208.89 1789.41,1211.33 1790,1212.31 1790.58,1210.85 1791.17,1212 1791.76,1210.17 1792.34,1208.78 1792.93,1208.8 1793.52,1211.07 1794.1,1212.31 1794.69,1211.83 1795.27,1211.77 1795.86,1210.18 1796.45,1209.64 1797.03,1209.22 1797.62,1210.15 1798.21,1206.04 1798.79,1206.05 1799.38,1208.76 1799.97,1209.98 1800.55,1209.78 1801.14,1209.6 1801.73,1209.39 1802.31,1209.35 1802.9,1209.14 1803.48,1207.92 1804.07,1207.86 1804.66,1208.93 1805.24,1210.33 1805.83,1211.22 1806.42,1212.56 1807,1211.06 1807.59,1210.67 1808.18,1210.62 1808.76,1210.12 1809.35,1208.76 1809.94,1210.09 1810.52,1208.17 1811.11,1208.52 1811.69,1207.32 1812.28,1207.16 1812.87,1208.38 1813.45,1208.46 1814.04,1208.31 1814.63,1208.28 1815.21,1205.55 1815.8,1205.79 1816.39,1205.43 1816.97,1206.76 1817.56,1207.77 1818.14,1206.58 1818.73,1205.53 1819.32,1204.31 1819.9,1207.14 1820.49,1205.97 1821.08,1204.63 1821.66,1204.8 1822.25,1204.77 1822.84,1203.45 1823.42,1201 1824.01,1204.13 1824.6,1202.01 1825.18,1203.34 1825.77,1203.77 1826.35,1203.93 1826.94,1205.41 1827.53,1206.76 1828.11,1204.2 1828.7,1203.05 1829.29,1203.42 1829.87,1206.15 1830.46,1206.2 1831.05,1207.59 1831.63,1207.8 1832.22,1205.34 1832.81,1205.19 1833.39,1204.06 1833.98,1206.82 1834.56,1209.45 1835.15,1208.31 1835.74,1206.94 1836.32,1211.16 1836.91,1209.88 1837.5,1209.64 1838.08,1208.2 1838.67,1206.72 1839.26,1204.29 1839.84,1203.27 1840.43,1203.51 1841.01,1202.38 1841.6,1205.27 1842.19,1206.6 1842.77,1204.03 1843.36,1204.35 1843.95,1203.08 1844.53,1203.38 1845.12,1205.11 1845.71,1206.46 1846.29,1206.43 1846.88,1206.29 1847.47,1206.2 1848.05,1206.36 1848.64,1207.71 1849.22,1206.59 1849.81,1205.47 1850.4,1201.47 1850.98,1204.5 1851.57,1202.32 1852.16,1200.12 1852.74,1201.96 1853.33,1202.18 1853.92,1206.33 1854.5,1205.02 1855.09,1203.9 1855.68,1204.03 1856.26,1206.63 1856.85,1205.58 1857.43,1206.99 1858.02,1208.24 1858.61,1206.89 1859.19,1207.07 1859.78,1205.72 1860.37,1205.48 1860.95,1205.71 1861.54,1203.2 1862.13,1200.69 1862.71,1199.47 1863.3,1197.39 1863.88,1196.48 1864.47,1195.66 1865.06,1197.43 1865.64,1198.01 1866.23,1195.62 1866.82,1196.21 1867.4,1198.3 1867.99,1201.43 1868.58,1203.29 1869.16,1207.26 1869.75,1210.9 1870.34,1212.07 1870.92,1213.11 1871.51,1214.36 1872.09,1211.63 1872.68,1212.66 1873.27,1211.21 1873.85,1212.3 1874.44,1212.1 1875.03,1211.88 1875.61,1211.58 1876.2,1211.36 1876.79,1214.07 1877.37,1212.4 1877.96,1213.42 1878.55,1214.6 1879.13,1214.37 1879.72,1215.31 1880.3,1214.99 1880.89,1215.87 1881.48,1217.96 1882.06,1214.51 1882.65,1215.43 1883.24,1216.26 1883.82,1212.06 1884.41,1211.77 1885,1210.02 1885.58,1210.04 1886.17,1209.9 1886.76,1209.67 1887.34,1207.21 1887.93,1209.87 1888.51,1205.89 1889.1,1208.67 1889.69,1204.56 1890.27,1207.41 1890.86,1203.45 1891.45,1198.45 1892.03,1202.98 1892.62,1201.9 1893.21,1204.73 1893.79,1205.08 1894.38,1206.64 1894.96,1205.51 1895.55,1209.52 1896.14,1207 1896.72,1207.12 1897.31,1205.96 1897.9,1206.08 1898.48,1206.13 1899.07,1206.34 1899.66,1207.81 1900.24,1207.43 1900.83,1210.01 1901.42,1206.27 1902,1206.52 1902.59,1205.21 1903.17,1206.76 1903.76,1204.23 1904.35,1208.36 1904.93,1204.52 1905.52,1203.33 1906.11,1202.33 1906.69,1203.68 1907.28,1203.89 1907.87,1201.26 1908.45,1201.78 1909.04,1203.26 1909.63,1203.89 1910.21,1204.02 1910.8,1203.02 1911.38,1203.32 1911.97,1203.41 1912.56,1202.01 1913.14,1202.22 1913.73,1205.01 1914.32,1205 1914.9,1204.94 1915.49,1203.71 1916.08,1202.58 1916.66,1203.07 1917.25,1202.05 1917.83,1202.07 1918.42,1202.37 1919.01,1198.8 1919.59,1196.47 1920.18,1198.49 1920.77,1200.18 1921.35,1201.93 1921.94,1204.73 1922.53,1204.88 1923.11,1206.63 1923.7,1208 1924.29,1206.6 1924.87,1206.7 1925.46,1206.89 1926.04,1208.09 1926.63,1209.47 1927.22,1209.39 1927.8,1209.27 1928.39,1211.61 1928.98,1213.8 1929.56,1209.45 1930.15,1207.77 1930.74,1209.17 1931.32,1208.79 1931.91,1209.96 1932.5,1211.25 1933.08,1212.29 1933.67,1212.42 1934.25,1211.81 1934.84,1210.5 1935.43,1207.48 1936.01,1207.37 1936.6,1207.4 1937.19,1210.05 1937.77,1213.85 1938.36,1213.73 1938.95,1213.47 1939.53,1215.58 1940.12,1215.07 1940.71,1214.62 1941.29,1214.28 1941.88,1212.53 1942.46,1210.71 1943.05,1211.76 1943.64,1211.42 1944.22,1212.31 1944.81,1214.9 1945.4,1208.17 1945.98,1210.54 1946.57,1211.72 1947.16,1209.99 1947.74,1209.92 1948.33,1204.71 1948.91,1207.48 1949.5,1207.69 1950.09,1209.18 1950.67,1209.04 1951.26,1207.6 1951.85,1210.3 1952.43,1209.9 1953.02,1211.06 1953.61,1209.55 1954.19,1210.44 1954.78,1210.4 1955.37,1210.5 1955.95,1212.76 1956.54,1213.85 1957.12,1211.9 1957.71,1211.54 1958.3,1211.68 1958.88,1208.74 1959.47,1211.26 1960.06,1209.92 1960.64,1211.41 1961.23,1216.13 1961.82,1215.43 1962.4,1217.63 1962.99,1214.34 1963.58,1212.64 1964.16,1207.01 1964.75,1208.18 1965.33,1208.35 1965.92,1209.58 1966.51,1209.35 1967.09,1212.06 1967.68,1211.87 1968.27,1210.32 1968.85,1210.33 1969.44,1211.64 1970.03,1209.91 1970.61,1211.2 1971.2,1209.66 1971.78,1210.9 1972.37,1209.5 1972.96,1207.94 1973.54,1206.76 1974.13,1206.74 1974.72,1206.81 1975.3,1205.59 1975.89,1209.66 1976.48,1209.76 1977.06,1208.35 1977.65,1208.42 1978.24,1207.21 1978.82,1209.87 1979.41,1211.15 1979.99,1209.73 1980.58,1209.57 1981.17,1209.36 1981.75,1210.4 1982.34,1210.31 1982.93,1204.77 1983.51,1204.68 1984.1,1206.11 1984.69,1206.24 1985.27,1206.32 1985.86,1206.41 1986.45,1206.57 1987.03,1207.84 1987.62,1210.37 1988.2,1209.99 1988.79,1208.75 1989.38,1211.1 1989.96,1212.08 1990.55,1210.5 1991.14,1214.09 1991.72,1213.52 1992.31,1211.95 1992.9,1211.57 1993.48,1208.6 1994.07,1212.6 1994.65,1212.45 1995.24,1213.33 1995.83,1213.08 1996.41,1212.84 1997,1212.41 1997.59,1211.91 1998.17,1211.48 1998.76,1215 1999.35,1213.1 1999.93,1210.17 2000.52,1204.56 2001.11,1203.56 2001.69,1203.85 2002.28,1205.32 2002.86,1207.88 2003.45,1208 2004.04,1206.96 2004.62,1206.97 2005.21,1208.42 2005.8,1208.39 2006.38,1207.09 2006.97,1207.11 2007.56,1204.76 2008.14,1206.16 2008.73,1204.7 2009.32,1204.98 2009.9,1205.03 2010.49,1206.64 2011.07,1206.77 2011.66,1202.72 2012.25,1203.14 2012.83,1202.16 2013.42,1199.9 2014.01,1201.71 2014.59,1203.28 2015.18,1204.58 2015.77,1203.29 2016.35,1202.57 2016.94,1199.84 2017.53,1199.98 2018.11,1201.68 2018.7,1200.62 2019.28,1203.79 2019.87,1200.03 2020.46,1197.61 2021.04,1197.92 2021.63,1199.96 2022.22,1201.73 2022.8,1199.39 2023.39,1199.87 2023.98,1199.02 2024.56,1199.47 2025.15,1203.86 2025.73,1204.09 2026.32,1204.48 2026.91,1204.27 2027.49,1204.05 2028.08,1205.98 2028.67,1210.07 2029.25,1210.01 2029.84,1207.2 2030.43,1208.49 2031.01,1209.8 2031.6,1206.91 2032.19,1208.01 2032.77,1206.88 2033.36,1208.35 2033.94,1208.6 2034.53,1208.63 2035.12,1207.15 2035.7,1209.79 2036.29,1208.41 2036.88,1206.9 2037.46,1209.67 2038.05,1208.31 2038.64,1207.13 2039.22,1206.04 2039.81,1204.74 2040.4,1206.11 2040.98,1206.53 2041.57,1205.06 2042.15,1204.92 2042.74,1206.3 2043.33,1206.58 2043.91,1207.93 2044.5,1208.01 2045.09,1206.67 2045.67,1211.8 2046.26,1213.06 2046.85,1215.19 2047.43,1215.03 2048.02,1214.69 2048.6,1213.21 2049.19,1213.09 2049.78,1208.59 2050.36,1208.68 2050.95,1209.04 2051.54,1207.39 2052.12,1208.77 2052.71,1207.33 2053.3,1207.08 2053.88,1208.63 2054.47,1204.97 2055.06,1204.82 2055.64,1206.46 2056.23,1206.43 2056.81,1209.08 2057.4,1209.09 2057.99,1210.44 2058.57,1208.79 2059.16,1208.76 2059.75,1208.82 2060.33,1207.4 2060.92,1207.23 2061.51,1205.83 2062.09,1207.14 2062.68,1204.21 2063.27,1203.28 2063.85,1204.97 2064.44,1203.79 2065.02,1206.72 2065.61,1207.91 2066.2,1211.94 2066.78,1211.64 2067.37,1213.81 2067.96,1212.11 2068.54,1210.72 2069.13,1211.86 2069.72,1207.92 2070.3,1206.49 2070.89,1207.86 2071.48,1209.4 2072.06,1207.71 2072.65,1207.77 2073.23,1205.24 2073.82,1202.29 2074.41,1202.46 2074.99,1205.28 2075.58,1204.31 2076.17,1205.82 2076.75,1204.72 2077.34,1209.14 2077.93,1209.24 2078.51,1210.39 2079.1,1211.65 2079.68,1210.02 2080.27,1212.38 2080.86,1213.6 2081.44,1215.67 2082.03,1214.82 2082.62,1214.2 2083.2,1212.56 2083.79,1212.48 2084.38,1212.41 2084.96,1214.37 2085.55,1212.46 2086.14,1212.22 2086.72,1211.58 2087.31,1211.59 2087.89,1210.31 2088.48,1210.16 2089.07,1210.13 2089.65,1209.9 2090.24,1210.85 2090.83,1213.08 2091.41,1210.51 2092,1210.48 2092.59,1209.09 2093.17,1210.38 2093.76,1207.45 2094.35,1205.97 2094.93,1207.21 2095.52,1207.24 2096.1,1207.19 2096.69,1207.04 2097.28,1205.88 2097.86,1204.62 2098.45,1204.4 2099.04,1206.15 2099.62,1210.05 2100.21,1209.75 2100.8,1206.66 2101.38,1205.16 2101.97,1205.34 2102.55,1203.87 2103.14,1202.85 2103.73,1202.99 2104.31,1203.47 2104.9,1203.73 2105.49,1200.93 2106.07,1203.86 2106.66,1205.21 2107.25,1209.12 2107.83,1209.28 2108.42,1207.36 2109.01,1204.45 2109.59,1205.76 2110.18,1201.92 2110.76,1203.34 2111.35,1206.53 2111.94,1202.6 2112.52,1200.21 2113.11,1200.81 2113.7,1201.23 2114.28,1197.34 2114.87,1196.59 2115.46,1198.33 2116.04,1196.97 2116.63,1198.89 2117.22,1197.82 2117.8,1195.62 2118.39,1197.5 2118.97,1199.51 2119.56,1205.28 2120.15,1204.11 2120.73,1206.13 2121.32,1204.71 2121.91,1200.88 2122.49,1198.78 2123.08,1200.65 2123.67,1202.17 2124.25,1202.24 2124.84,1201.42 2125.42,1200.82 2126.01,1199.96 2126.6,1199.08 2127.18,1196.66 2127.77,1198.5 2128.36,1200.08 2128.94,1200.4 2129.53,1200.76 2130.12,1201.49 2130.7,1200.48 2131.29,1202.02 2131.88,1203.26 2132.46,1203.33 2133.05,1200.93 2133.63,1202.36 2134.22,1201.37 2134.81,1201.67 2135.39,1200.66 2135.98,1200.82 2136.57,1201.37 2137.15,1201.85 2137.74,1201.91 2138.33,1204.97 2138.91,1206.52 2139.5,1206.67 2140.09,1210.53 2140.67,1209.4 2141.26,1206.64 2141.84,1205.19 2142.43,1209.31 2143.02,1211.66 2143.6,1211.41 2144.19,1212.59 2144.78,1212.23 2145.36,1213.27 2145.95,1210.48 2146.54,1210.24 2147.12,1208.9 2147.71,1210 2148.3,1211.25 2148.88,1212.4 2149.47,1213.33 2150.05,1211.6 2150.64,1212.94 2151.23,1210.11 2151.81,1211.6 2152.4,1212.64 2152.99,1214.95 2153.57,1215.78 2154.16,1217.74 2154.75,1213.46 2155.33,1214.63 2155.92,1210.13 2156.5,1210.25 2157.09,1210.1 2157.68,1207.09 2158.26,1205.78 \"/>\n<path clip-path=\"url(#clip192)\" d=\"M986.025 1207.68 L986.612 1207.68 L987.198 1207.68 L987.785 1207.68 L988.371 1207.68 L988.957 1207.68 L989.544 1207.68 L990.13 1207.68 L990.717 1207.68 L991.303 1207.68 L991.889 1207.68 L992.476 1207.68 L993.062 1207.68 L993.649 1207.68 L994.235 1207.68 L994.822 1207.68 L995.408 1207.68 L995.994 1207.68 L996.581 1207.68 L997.167 1207.68 L997.754 1207.68 L998.34 1207.68 L998.926 1207.68 L999.513 1207.68 L1000.1 1207.68 L1000.69 1207.68 L1001.27 1207.68 L1001.86 1207.68 L1002.44 1207.68 L1003.03 1207.68 L1003.62 1207.68 L1004.2 1207.68 L1004.79 1207.68 L1005.38 1207.68 L1005.96 1207.68 L1006.55 1207.68 L1007.14 1207.68 L1007.72 1207.68 L1008.31 1207.68 L1008.9 1207.68 L1009.48 1207.68 L1010.07 1207.68 L1010.65 1207.68 L1011.24 1207.68 L1011.83 1207.68 L1012.41 1207.68 L1013 1207.68 L1013.59 1207.68 L1014.17 1207.68 L1014.76 1207.68 L1015.35 1207.68 L1015.93 1207.68 L1016.52 1207.68 L1017.11 1207.68 L1017.69 1207.68 L1018.28 1207.68 L1018.86 1207.68 L1019.45 1207.68 L1020.04 1207.68 L1020.62 1207.68 L1021.21 1207.68 L1021.8 1207.68 L1022.38 1207.68 L1022.97 1207.68 L1023.56 1207.68 L1024.14 1207.68 L1024.73 1207.68 L1025.32 1207.68 L1025.9 1207.68 L1026.49 1207.68 L1027.07 1207.68 L1027.66 1207.68 L1028.25 1207.68 L1028.83 1207.68 L1029.42 1207.68 L1030.01 1207.68 L1030.59 1207.68 L1031.18 1207.68 L1031.77 1207.68 L1032.35 1207.68 L1032.94 1207.68 L1033.52 1207.68 L1034.11 1207.68 L1034.7 1207.68 L1035.28 1207.68 L1035.87 1207.68 L1036.46 1207.68 L1037.04 1207.68 L1037.63 1207.68 L1038.22 1207.68 L1038.8 1207.68 L1039.39 1207.68 L1039.98 1207.68 L1040.56 1207.68 L1041.15 1207.68 L1041.73 1207.68 L1042.32 1207.68 L1042.91 1207.68 L1043.49 1207.68 L1044.08 1207.68 L1044.67 1207.68 L1045.25 1207.68 L1045.84 1207.68 L1046.43 1207.68 L1047.01 1207.68 L1047.6 1207.68 L1048.19 1207.68 L1048.77 1207.68 L1049.36 1207.68 L1049.94 1207.68 L1050.53 1207.68 L1051.12 1207.68 L1051.7 1207.68 L1052.29 1207.68 L1052.88 1207.68 L1053.46 1207.68 L1054.05 1207.68 L1054.64 1207.68 L1055.22 1207.68 L1055.81 1207.68 L1056.39 1207.68 L1056.98 1207.68 L1057.57 1207.68 L1058.15 1207.68 L1058.74 1207.68 L1059.33 1207.68 L1059.91 1207.68 L1060.5 1207.68 L1061.09 1207.68 L1061.67 1207.68 L1062.26 1207.68 L1062.85 1207.68 L1063.43 1207.68 L1064.02 1207.68 L1064.6 1207.68 L1065.19 1207.68 L1065.78 1207.68 L1066.36 1207.68 L1066.95 1207.68 L1067.54 1207.68 L1068.12 1207.68 L1068.71 1207.68 L1069.3 1207.68 L1069.88 1207.68 L1070.47 1207.68 L1071.06 1207.68 L1071.64 1207.68 L1072.23 1207.68 L1072.81 1207.68 L1073.4 1207.68 L1073.99 1207.68 L1074.57 1207.68 L1075.16 1207.68 L1075.75 1207.68 L1076.33 1207.68 L1076.92 1207.68 L1077.51 1207.68 L1078.09 1207.68 L1078.68 1207.68 L1079.26 1207.68 L1079.85 1207.68 L1080.44 1207.68 L1081.02 1207.68 L1081.61 1207.68 L1082.2 1207.68 L1082.78 1207.68 L1083.37 1207.68 L1083.96 1207.68 L1084.54 1207.68 L1085.13 1207.68 L1085.72 1207.68 L1086.3 1207.68 L1086.89 1207.68 L1087.47 1207.68 L1088.06 1207.68 L1088.65 1207.68 L1089.23 1207.68 L1089.82 1207.68 L1090.41 1207.68 L1090.99 1207.68 L1091.58 1207.68 L1092.17 1207.68 L1092.75 1207.68 L1093.34 1207.68 L1093.93 1207.68 L1094.51 1207.68 L1095.1 1207.68 L1095.68 1207.68 L1096.27 1207.68 L1096.86 1207.68 L1097.44 1207.68 L1098.03 1207.68 L1098.62 1207.68 L1099.2 1207.68 L1099.79 1207.68 L1100.38 1207.68 L1100.96 1207.68 L1101.55 1207.68 L1102.14 1207.68 L1102.72 1207.68 L1103.31 1207.68 L1103.89 1207.68 L1104.48 1207.68 L1105.07 1207.68 L1105.65 1207.68 L1106.24 1207.68 L1106.83 1207.68 L1107.41 1207.68 L1108 1207.68 L1108.59 1207.68 L1109.17 1207.68 L1109.76 1207.68 L1110.34 1207.68 L1110.93 1207.68 L1111.52 1207.68 L1112.1 1207.68 L1112.69 1207.68 L1113.28 1207.68 L1113.86 1207.68 L1114.45 1207.68 L1115.04 1207.68 L1115.62 1207.68 L1116.21 1207.68 L1116.8 1207.68 L1117.38 1207.68 L1117.97 1207.68 L1118.55 1207.68 L1119.14 1207.68 L1119.73 1207.68 L1120.31 1207.68 L1120.9 1207.68 L1121.49 1207.68 L1122.07 1207.68 L1122.66 1207.68 L1123.25 1207.68 L1123.83 1207.68 L1124.42 1207.68 L1125.01 1207.68 L1125.59 1207.68 L1126.18 1207.68 L1126.76 1207.68 L1127.35 1207.68 L1127.94 1207.68 L1128.52 1207.68 L1129.11 1207.68 L1129.7 1207.68 L1130.28 1207.68 L1130.87 1207.68 L1131.46 1207.68 L1132.04 1207.68 L1132.63 1207.68 L1133.21 1207.68 L1133.8 1207.68 L1134.39 1207.68 L1134.97 1207.68 L1135.56 1207.68 L1136.15 1207.68 L1136.73 1207.68 L1137.32 1207.68 L1137.91 1207.68 L1138.49 1207.68 L1139.08 1207.68 L1139.67 1207.68 L1140.25 1207.68 L1140.84 1207.68 L1141.42 1207.68 L1142.01 1207.68 L1142.6 1207.68 L1143.18 1207.68 L1143.77 1207.68 L1144.36 1207.68 L1144.94 1207.68 L1145.53 1207.68 L1146.12 1207.68 L1146.7 1207.68 L1147.29 1207.68 L1147.88 1207.68 L1148.46 1207.68 L1149.05 1207.68 L1149.63 1207.68 L1150.22 1207.68 L1150.81 1207.68 L1151.39 1207.68 L1151.98 1207.68 L1152.57 1207.68 L1153.15 1207.68 L1153.74 1207.68 L1154.33 1207.68 L1154.91 1207.68 L1155.5 1207.68 L1156.09 1207.68 L1156.67 1207.68 L1157.26 1207.68 L1157.84 1207.68 L1158.43 1207.68 L1159.02 1207.68 L1159.6 1207.68 L1160.19 1207.68 L1160.78 1207.68 L1161.36 1207.68 L1161.95 1207.68 L1162.54 1207.68 L1163.12 1207.68 L1163.71 1207.68 L1164.29 1207.68 L1164.88 1207.68 L1165.47 1207.68 L1166.05 1207.68 L1166.64 1207.68 L1167.23 1207.68 L1167.81 1207.68 L1168.4 1207.68 L1168.99 1207.68 L1169.57 1207.68 L1170.16 1207.68 L1170.75 1207.68 L1171.33 1207.68 L1171.92 1207.68 L1172.5 1207.68 L1173.09 1207.68 L1173.68 1207.68 L1174.26 1207.68 L1174.85 1207.68 L1175.44 1207.68 L1176.02 1207.68 L1176.61 1207.68 L1177.2 1207.68 L1177.78 1207.68 L1178.37 1207.68 L1178.96 1207.68 L1179.54 1207.68 L1180.13 1207.68 L1180.71 1207.68 L1181.3 1207.68 L1181.89 1207.68 L1182.47 1207.68 L1183.06 1207.68 L1183.65 1207.68 L1184.23 1207.68 L1184.82 1207.68 L1185.41 1207.68 L1185.99 1207.68 L1186.58 1207.68 L1187.16 1207.68 L1187.75 1207.68 L1188.34 1207.68 L1188.92 1207.68 L1189.51 1207.68 L1190.1 1207.68 L1190.68 1207.68 L1191.27 1207.68 L1191.86 1207.68 L1192.44 1207.68 L1193.03 1207.68 L1193.62 1207.68 L1194.2 1207.68 L1194.79 1207.68 L1195.37 1207.68 L1195.96 1207.68 L1196.55 1207.68 L1197.13 1207.68 L1197.72 1207.68 L1198.31 1207.68 L1198.89 1207.68 L1199.48 1207.68 L1200.07 1207.68 L1200.65 1207.68 L1201.24 1207.68 L1201.83 1207.68 L1202.41 1207.68 L1203 1207.68 L1203.58 1207.68 L1204.17 1207.68 L1204.76 1207.68 L1205.34 1207.68 L1205.93 1207.68 L1206.52 1207.68 L1207.1 1207.68 L1207.69 1207.68 L1208.28 1207.68 L1208.86 1207.68 L1209.45 1207.68 L1210.03 1207.68 L1210.62 1207.68 L1211.21 1207.68 L1211.79 1207.68 L1212.38 1207.68 L1212.97 1207.68 L1213.55 1207.68 L1214.14 1207.68 L1214.73 1207.68 L1215.31 1207.68 L1215.9 1207.68 L1216.49 1207.68 L1217.07 1207.68 L1217.66 1207.68 L1218.24 1207.68 L1218.83 1207.68 L1219.42 1207.68 L1220 1207.68 L1220.59 1207.68 L1221.18 1207.68 L1221.76 1207.68 L1222.35 1207.68 L1222.94 1207.68 L1223.52 1207.68 L1224.11 1207.68 L1224.7 1207.68 L1225.28 1207.68 L1225.87 1207.68 L1226.45 1207.68 L1227.04 1207.68 L1227.63 1207.68 L1228.21 1207.68 L1228.8 1207.68 L1229.39 1207.68 L1229.97 1207.68 L1230.56 1207.68 L1231.15 1207.68 L1231.73 1207.68 L1232.32 1207.68 L1232.91 1207.68 L1233.49 1207.68 L1234.08 1207.68 L1234.66 1207.68 L1235.25 1207.68 L1235.84 1207.68 L1236.42 1207.68 L1237.01 1207.68 L1237.6 1207.68 L1238.18 1207.68 L1238.77 1207.68 L1239.36 1207.68 L1239.94 1207.68 L1240.53 1207.68 L1241.11 1207.68 L1241.7 1207.68 L1242.29 1207.68 L1242.87 1207.68 L1243.46 1207.68 L1244.05 1207.68 L1244.63 1207.68 L1245.22 1207.68 L1245.81 1207.68 L1246.39 1207.68 L1246.98 1207.68 L1247.57 1207.68 L1248.15 1207.68 L1248.74 1207.68 L1249.32 1207.68 L1249.91 1207.68 L1250.5 1207.68 L1251.08 1207.68 L1251.67 1207.68 L1252.26 1207.68 L1252.84 1207.68 L1253.43 1207.68 L1254.02 1207.68 L1254.6 1207.68 L1255.19 1207.68 L1255.78 1207.68 L1256.36 1207.68 L1256.95 1207.68 L1257.53 1207.68 L1258.12 1207.68 L1258.71 1207.68 L1259.29 1207.68 L1259.88 1207.68 L1260.47 1207.68 L1261.05 1207.68 L1261.64 1207.68 L1262.23 1207.68 L1262.81 1207.68 L1263.4 1207.68 L1263.98 1207.68 L1264.57 1207.68 L1265.16 1207.68 L1265.74 1207.68 L1266.33 1207.68 L1266.92 1207.68 L1267.5 1207.68 L1268.09 1207.68 L1268.68 1207.68 L1269.26 1207.68 L1269.85 1207.68 L1270.44 1207.68 L1271.02 1207.68 L1271.61 1207.68 L1272.19 1207.68 L1272.78 1207.68 L1273.37 1207.68 L1273.95 1207.68 L1274.54 1207.68 L1275.13 1207.68 L1275.71 1207.68 L1276.3 1207.68 L1276.89 1207.68 L1277.47 1207.68 L1278.06 1207.68 L1278.65 1207.68 L1279.23 1207.68 L1279.82 1207.68 L1280.4 1207.68 L1280.99 1207.68 L1281.58 1207.68 L1282.16 1207.68 L1282.75 1207.68 L1283.34 1207.68 L1283.92 1207.68 L1284.51 1207.68 L1285.1 1207.68 L1285.68 1207.68 L1286.27 1207.68 L1286.86 1207.68 L1287.44 1207.68 L1288.03 1207.68 L1288.61 1207.68 L1289.2 1207.68 L1289.79 1207.68 L1290.37 1207.68 L1290.96 1207.68 L1291.55 1207.68 L1292.13 1207.68 L1292.72 1207.68 L1293.31 1207.68 L1293.89 1207.68 L1294.48 1207.68 L1295.06 1207.68 L1295.65 1207.68 L1296.24 1207.68 L1296.82 1207.68 L1297.41 1207.68 L1298 1207.68 L1298.58 1207.68 L1299.17 1207.68 L1299.76 1207.68 L1300.34 1207.68 L1300.93 1207.68 L1301.52 1207.68 L1302.1 1207.68 L1302.69 1207.68 L1303.27 1207.68 L1303.86 1207.68 L1304.45 1207.68 L1305.03 1207.68 L1305.62 1207.68 L1306.21 1207.68 L1306.79 1207.68 L1307.38 1207.68 L1307.97 1207.68 L1308.55 1207.68 L1309.14 1207.68 L1309.73 1207.68 L1310.31 1207.68 L1310.9 1207.68 L1311.48 1207.68 L1312.07 1207.68 L1312.66 1207.68 L1313.24 1207.68 L1313.83 1207.68 L1314.42 1207.68 L1315 1207.68 L1315.59 1207.68 L1316.18 1207.68 L1316.76 1207.68 L1317.35 1207.68 L1317.93 1207.68 L1318.52 1207.68 L1319.11 1207.68 L1319.69 1207.68 L1320.28 1207.68 L1320.87 1207.68 L1321.45 1207.68 L1322.04 1207.68 L1322.63 1207.68 L1323.21 1207.68 L1323.8 1207.68 L1324.39 1207.68 L1324.97 1207.68 L1325.56 1207.68 L1326.14 1207.68 L1326.73 1207.68 L1327.32 1207.68 L1327.9 1207.68 L1328.49 1207.68 L1329.08 1207.68 L1329.66 1207.68 L1330.25 1207.68 L1330.84 1207.68 L1331.42 1207.68 L1332.01 1207.68 L1332.6 1207.68 L1333.18 1207.68 L1333.77 1207.68 L1334.35 1207.68 L1334.94 1207.68 L1335.53 1207.68 L1336.11 1207.68 L1336.7 1207.68 L1337.29 1207.68 L1337.87 1207.68 L1338.46 1207.68 L1339.05 1207.68 L1339.63 1207.68 L1340.22 1207.68 L1340.8 1207.68 L1341.39 1207.68 L1341.98 1207.68 L1342.56 1207.68 L1343.15 1207.68 L1343.74 1207.68 L1344.32 1207.68 L1344.91 1207.68 L1345.5 1207.68 L1346.08 1207.68 L1346.67 1207.68 L1347.26 1207.68 L1347.84 1207.68 L1348.43 1207.68 L1349.01 1207.68 L1349.6 1207.68 L1350.19 1207.68 L1350.77 1207.68 L1351.36 1207.68 L1351.95 1207.68 L1352.53 1207.68 L1353.12 1207.68 L1353.71 1207.68 L1354.29 1207.68 L1354.88 1207.68 L1355.47 1207.68 L1356.05 1207.68 L1356.64 1207.68 L1357.22 1207.68 L1357.81 1207.68 L1358.4 1207.68 L1358.98 1207.68 L1359.57 1207.68 L1360.16 1207.68 L1360.74 1207.68 L1361.33 1207.68 L1361.92 1207.68 L1362.5 1207.68 L1363.09 1207.68 L1363.68 1207.68 L1364.26 1207.68 L1364.85 1207.68 L1365.43 1207.68 L1366.02 1207.68 L1366.61 1207.68 L1367.19 1207.68 L1367.78 1207.68 L1368.37 1207.68 L1368.95 1207.68 L1369.54 1207.68 L1370.13 1207.68 L1370.71 1207.68 L1371.3 1207.68 L1371.88 1207.68 L1372.47 1207.68 L1373.06 1207.68 L1373.64 1207.68 L1374.23 1207.68 L1374.82 1207.68 L1375.4 1207.68 L1375.99 1207.68 L1376.58 1207.68 L1377.16 1207.68 L1377.75 1207.68 L1378.34 1207.68 L1378.92 1207.68 L1379.51 1207.68 L1380.09 1207.68 L1380.68 1207.68 L1381.27 1207.68 L1381.85 1207.68 L1382.44 1207.68 L1383.03 1207.68 L1383.61 1207.68 L1384.2 1207.68 L1384.79 1207.68 L1385.37 1207.68 L1385.96 1207.68 L1386.55 1207.68 L1387.13 1207.68 L1387.72 1207.68 L1388.3 1207.68 L1388.89 1207.68 L1389.48 1207.68 L1390.06 1207.68 L1390.65 1207.68 L1391.24 1207.68 L1391.82 1207.68 L1392.41 1207.68 L1393 1207.68 L1393.58 1207.68 L1394.17 1207.68 L1394.75 1207.68 L1395.34 1207.68 L1395.93 1207.68 L1396.51 1207.68 L1397.1 1207.68 L1397.69 1207.68 L1398.27 1207.68 L1398.86 1207.68 L1399.45 1207.68 L1400.03 1207.68 L1400.62 1207.68 L1401.21 1207.68 L1401.79 1207.68 L1402.38 1207.68 L1402.96 1207.68 L1403.55 1207.68 L1404.14 1207.68 L1404.72 1207.68 L1405.31 1207.68 L1405.9 1207.68 L1406.48 1207.68 L1407.07 1207.68 L1407.66 1207.68 L1408.24 1207.68 L1408.83 1207.68 L1409.42 1207.68 L1410 1207.68 L1410.59 1207.68 L1411.17 1207.68 L1411.76 1207.68 L1412.35 1207.68 L1412.93 1207.68 L1413.52 1207.68 L1414.11 1207.68 L1414.69 1207.68 L1415.28 1207.68 L1415.87 1207.68 L1416.45 1207.68 L1417.04 1207.68 L1417.63 1207.68 L1418.21 1207.68 L1418.8 1207.68 L1419.38 1207.68 L1419.97 1207.68 L1420.56 1207.68 L1421.14 1207.68 L1421.73 1207.68 L1422.32 1207.68 L1422.9 1207.68 L1423.49 1207.68 L1424.08 1207.68 L1424.66 1207.68 L1425.25 1207.68 L1425.83 1207.68 L1426.42 1207.68 L1427.01 1207.68 L1427.59 1207.68 L1428.18 1207.68 L1428.77 1207.68 L1429.35 1207.68 L1429.94 1207.68 L1430.53 1207.68 L1431.11 1207.68 L1431.7 1207.68 L1432.29 1207.68 L1432.87 1207.68 L1433.46 1207.68 L1434.04 1207.68 L1434.63 1207.68 L1435.22 1207.68 L1435.8 1207.68 L1436.39 1207.68 L1436.98 1207.68 L1437.56 1207.68 L1438.15 1207.68 L1438.74 1207.68 L1439.32 1207.68 L1439.91 1207.68 L1440.5 1207.68 L1441.08 1207.68 L1441.67 1207.68 L1442.25 1207.68 L1442.84 1207.68 L1443.43 1207.68 L1444.01 1207.68 L1444.6 1207.68 L1445.19 1207.68 L1445.77 1207.68 L1446.36 1207.68 L1446.95 1207.68 L1447.53 1207.68 L1448.12 1207.68 L1448.7 1207.68 L1449.29 1207.68 L1449.88 1207.68 L1450.46 1207.68 L1451.05 1207.68 L1451.64 1207.68 L1452.22 1207.68 L1452.81 1207.68 L1453.4 1207.68 L1453.98 1207.68 L1454.57 1207.68 L1455.16 1207.68 L1455.74 1207.68 L1456.33 1207.68 L1456.91 1207.68 L1457.5 1207.68 L1458.09 1207.68 L1458.67 1207.68 L1459.26 1207.68 L1459.85 1207.68 L1460.43 1207.68 L1461.02 1207.68 L1461.61 1207.68 L1462.19 1207.68 L1462.78 1207.68 L1463.37 1207.68 L1463.95 1207.68 L1464.54 1207.68 L1465.12 1207.68 L1465.71 1207.68 L1466.3 1207.68 L1466.88 1207.68 L1467.47 1207.68 L1468.06 1207.68 L1468.64 1207.68 L1469.23 1207.68 L1469.82 1207.68 L1470.4 1207.68 L1470.99 1207.68 L1471.57 1207.68 L1472.16 1207.68 L1472.75 1207.68 L1473.33 1207.68 L1473.92 1207.68 L1474.51 1207.68 L1475.09 1207.68 L1475.68 1207.68 L1476.27 1207.68 L1476.85 1207.68 L1477.44 1207.68 L1478.03 1207.68 L1478.61 1207.68 L1479.2 1207.68 L1479.78 1207.68 L1480.37 1207.68 L1480.96 1207.68 L1481.54 1207.68 L1482.13 1207.68 L1482.72 1207.68 L1483.3 1207.68 L1483.89 1207.68 L1484.48 1207.68 L1485.06 1207.68 L1485.65 1207.68 L1486.24 1207.68 L1486.82 1207.68 L1487.41 1207.68 L1487.99 1207.68 L1488.58 1207.68 L1489.17 1207.68 L1489.75 1207.68 L1490.34 1207.68 L1490.93 1207.68 L1491.51 1207.68 L1492.1 1207.68 L1492.69 1207.68 L1493.27 1207.68 L1493.86 1207.68 L1494.45 1207.68 L1495.03 1207.68 L1495.62 1207.68 L1496.2 1207.68 L1496.79 1207.68 L1497.38 1207.68 L1497.96 1207.68 L1498.55 1207.68 L1499.14 1207.68 L1499.72 1207.68 L1500.31 1207.68 L1500.9 1207.68 L1501.48 1207.68 L1502.07 1207.68 L1502.65 1207.68 L1503.24 1207.68 L1503.83 1207.68 L1504.41 1207.68 L1505 1207.68 L1505.59 1207.68 L1506.17 1207.68 L1506.76 1207.68 L1507.35 1207.68 L1507.93 1207.68 L1508.52 1207.68 L1509.11 1207.68 L1509.69 1207.68 L1510.28 1207.68 L1510.86 1207.68 L1511.45 1207.68 L1512.04 1207.68 L1512.62 1207.68 L1513.21 1207.68 L1513.8 1207.68 L1514.38 1207.68 L1514.97 1207.68 L1515.56 1207.68 L1516.14 1207.68 L1516.73 1207.68 L1517.32 1207.68 L1517.9 1207.68 L1518.49 1207.68 L1519.07 1207.68 L1519.66 1207.68 L1520.25 1207.68 L1520.83 1207.68 L1521.42 1207.68 L1522.01 1207.68 L1522.59 1207.68 L1523.18 1207.68 L1523.77 1207.68 L1524.35 1207.68 L1524.94 1207.68 L1525.52 1207.68 L1526.11 1207.68 L1526.7 1207.68 L1527.28 1207.68 L1527.87 1207.68 L1528.46 1207.68 L1529.04 1207.68 L1529.63 1207.68 L1530.22 1207.68 L1530.8 1207.68 L1531.39 1207.68 L1531.98 1207.68 L1532.56 1207.68 L1533.15 1207.68 L1533.73 1207.68 L1534.32 1207.68 L1534.91 1207.68 L1535.49 1207.68 L1536.08 1207.68 L1536.67 1207.68 L1537.25 1207.68 L1537.84 1207.68 L1538.43 1207.68 L1539.01 1207.68 L1539.6 1207.68 L1540.19 1207.68 L1540.77 1207.68 L1541.36 1207.68 L1541.94 1207.68 L1542.53 1207.68 L1543.12 1207.68 L1543.7 1207.68 L1544.29 1207.68 L1544.88 1207.68 L1545.46 1207.68 L1546.05 1207.68 L1546.64 1207.68 L1547.22 1207.68 L1547.81 1207.68 L1548.4 1207.68 L1548.98 1207.68 L1549.57 1207.68 L1550.15 1207.68 L1550.74 1207.68 L1551.33 1207.68 L1551.91 1207.68 L1552.5 1207.68 L1553.09 1207.68 L1553.67 1207.68 L1554.26 1207.68 L1554.85 1207.68 L1555.43 1207.68 L1556.02 1207.68 L1556.6 1207.68 L1557.19 1207.68 L1557.78 1207.68 L1558.36 1207.68 L1558.95 1207.68 L1559.54 1207.68 L1560.12 1207.68 L1560.71 1207.68 L1561.3 1207.68 L1561.88 1207.68 L1562.47 1207.68 L1563.06 1207.68 L1563.64 1207.68 L1564.23 1207.68 L1564.81 1207.68 L1565.4 1207.68 L1565.99 1207.68 L1566.57 1207.68 L1567.16 1207.68 L1567.75 1207.68 L1568.33 1207.68 L1568.92 1207.68 L1569.51 1207.68 L1570.09 1207.68 L1570.68 1207.68 L1571.27 1207.68 L1571.85 1207.68 L1572.44 1207.68 L1573.02 1207.68 L1573.61 1207.68 L1574.2 1207.68 L1574.78 1207.68 L1575.37 1207.68 L1575.96 1207.68 L1576.54 1207.68 L1577.13 1207.68 L1577.72 1207.68 L1578.3 1207.68 L1578.89 1207.68 L1579.47 1207.68 L1580.06 1207.68 L1580.65 1207.68 L1581.23 1207.68 L1581.82 1207.68 L1582.41 1207.68 L1582.99 1207.68 L1583.58 1207.68 L1584.17 1207.68 L1584.75 1207.68 L1585.34 1207.68 L1585.93 1207.68 L1586.51 1207.68 L1587.1 1207.68 L1587.68 1207.68 L1588.27 1207.68 L1588.86 1207.68 L1589.44 1207.68 L1590.03 1207.68 L1590.62 1207.68 L1591.2 1207.68 L1591.79 1207.68 L1592.38 1207.68 L1592.96 1207.68 L1593.55 1207.68 L1594.14 1207.68 L1594.72 1207.68 L1595.31 1207.68 L1595.89 1207.68 L1596.48 1207.68 L1597.07 1207.68 L1597.65 1207.68 L1598.24 1207.68 L1598.83 1207.68 L1599.41 1207.68 L1600 1207.68 L1600.59 1207.68 L1601.17 1207.68 L1601.76 1207.68 L1602.34 1207.68 L1602.93 1207.68 L1603.52 1207.68 L1604.1 1207.68 L1604.69 1207.68 L1605.28 1207.68 L1605.86 1207.68 L1606.45 1207.68 L1607.04 1207.68 L1607.62 1207.68 L1608.21 1207.68 L1608.8 1207.68 L1609.38 1207.68 L1609.97 1207.68 L1610.55 1207.68 L1611.14 1207.68 L1611.73 1207.68 L1612.31 1207.68 L1612.9 1207.68 L1613.49 1207.68 L1614.07 1207.68 L1614.66 1207.68 L1615.25 1207.68 L1615.83 1207.68 L1616.42 1207.68 L1617.01 1207.68 L1617.59 1207.68 L1618.18 1207.68 L1618.76 1207.68 L1619.35 1207.68 L1619.94 1207.68 L1620.52 1207.68 L1621.11 1207.68 L1621.7 1207.68 L1622.28 1207.68 L1622.87 1207.68 L1623.46 1207.68 L1624.04 1207.68 L1624.63 1207.68 L1625.22 1207.68 L1625.8 1207.68 L1626.39 1207.68 L1626.97 1207.68 L1627.56 1207.68 L1628.15 1207.68 L1628.73 1207.68 L1629.32 1207.68 L1629.91 1207.68 L1630.49 1207.68 L1631.08 1207.68 L1631.67 1207.68 L1632.25 1207.68 L1632.84 1207.68 L1633.42 1207.68 L1634.01 1207.68 L1634.6 1207.68 L1635.18 1207.68 L1635.77 1207.68 L1636.36 1207.68 L1636.94 1207.68 L1637.53 1207.68 L1638.12 1207.68 L1638.7 1207.68 L1639.29 1207.68 L1639.88 1207.68 L1640.46 1207.68 L1641.05 1207.68 L1641.63 1207.68 L1642.22 1207.68 L1642.81 1207.68 L1643.39 1207.68 L1643.98 1207.68 L1644.57 1207.68 L1645.15 1207.68 L1645.74 1207.68 L1646.33 1207.68 L1646.91 1207.68 L1647.5 1207.68 L1648.09 1207.68 L1648.67 1207.68 L1649.26 1207.68 L1649.84 1207.68 L1650.43 1207.68 L1651.02 1207.68 L1651.6 1207.68 L1652.19 1207.68 L1652.78 1207.68 L1653.36 1207.68 L1653.95 1207.68 L1654.54 1207.68 L1655.12 1207.68 L1655.71 1207.68 L1656.29 1207.68 L1656.88 1207.68 L1657.47 1207.68 L1658.05 1207.68 L1658.64 1207.68 L1659.23 1207.68 L1659.81 1207.68 L1660.4 1207.68 L1660.99 1207.68 L1661.57 1207.68 L1662.16 1207.68 L1662.75 1207.68 L1663.33 1207.68 L1663.92 1207.68 L1664.5 1207.68 L1665.09 1207.68 L1665.68 1207.68 L1666.26 1207.68 L1666.85 1207.68 L1667.44 1207.68 L1668.02 1207.68 L1668.61 1207.68 L1669.2 1207.68 L1669.78 1207.68 L1670.37 1207.68 L1670.96 1207.68 L1671.54 1207.68 L1672.13 1207.68 L1672.71 1207.68 L1673.3 1207.68 L1673.89 1207.68 L1674.47 1207.68 L1675.06 1207.68 L1675.65 1207.68 L1676.23 1207.68 L1676.82 1207.68 L1677.41 1207.68 L1677.99 1207.68 L1678.58 1207.68 L1679.17 1207.68 L1679.75 1207.68 L1680.34 1207.68 L1680.92 1207.68 L1681.51 1207.68 L1682.1 1207.68 L1682.68 1207.68 L1683.27 1207.68 L1683.86 1207.68 L1684.44 1207.68 L1685.03 1207.68 L1685.62 1207.68 L1686.2 1207.68 L1686.79 1207.68 L1687.37 1207.68 L1687.96 1207.68 L1688.55 1207.68 L1689.13 1207.68 L1689.72 1207.68 L1690.31 1207.68 L1690.89 1207.68 L1691.48 1207.68 L1692.07 1207.68 L1692.65 1207.68 L1693.24 1207.68 L1693.83 1207.68 L1694.41 1207.68 L1695 1207.68 L1695.58 1207.68 L1696.17 1207.68 L1696.76 1207.68 L1697.34 1207.68 L1697.93 1207.68 L1698.52 1207.68 L1699.1 1207.68 L1699.69 1207.68 L1700.28 1207.68 L1700.86 1207.68 L1701.45 1207.68 L1702.04 1207.68 L1702.62 1207.68 L1703.21 1207.68 L1703.79 1207.68 L1704.38 1207.68 L1704.97 1207.68 L1705.55 1207.68 L1706.14 1207.68 L1706.73 1207.68 L1707.31 1207.68 L1707.9 1207.68 L1708.49 1207.68 L1709.07 1207.68 L1709.66 1207.68 L1710.24 1207.68 L1710.83 1207.68 L1711.42 1207.68 L1712 1207.68 L1712.59 1207.68 L1713.18 1207.68 L1713.76 1207.68 L1714.35 1207.68 L1714.94 1207.68 L1715.52 1207.68 L1716.11 1207.68 L1716.7 1207.68 L1717.28 1207.68 L1717.87 1207.68 L1718.45 1207.68 L1719.04 1207.68 L1719.63 1207.68 L1720.21 1207.68 L1720.8 1207.68 L1721.39 1207.68 L1721.97 1207.68 L1722.56 1207.68 L1723.15 1207.68 L1723.73 1207.68 L1724.32 1207.68 L1724.91 1207.68 L1725.49 1207.68 L1726.08 1207.68 L1726.66 1207.68 L1727.25 1207.68 L1727.84 1207.68 L1728.42 1207.68 L1729.01 1207.68 L1729.6 1207.68 L1730.18 1207.68 L1730.77 1207.68 L1731.36 1207.68 L1731.94 1207.68 L1732.53 1207.68 L1733.11 1207.68 L1733.7 1207.68 L1734.29 1207.68 L1734.87 1207.68 L1735.46 1207.68 L1736.05 1207.68 L1736.63 1207.68 L1737.22 1207.68 L1737.81 1207.68 L1738.39 1207.68 L1738.98 1207.68 L1739.57 1207.68 L1740.15 1207.68 L1740.74 1207.68 L1741.32 1207.68 L1741.91 1207.68 L1742.5 1207.68 L1743.08 1207.68 L1743.67 1207.68 L1744.26 1207.68 L1744.84 1207.68 L1745.43 1207.68 L1746.02 1207.68 L1746.6 1207.68 L1747.19 1207.68 L1747.78 1207.68 L1748.36 1207.68 L1748.95 1207.68 L1749.53 1207.68 L1750.12 1207.68 L1750.71 1207.68 L1751.29 1207.68 L1751.88 1207.68 L1752.47 1207.68 L1753.05 1207.68 L1753.64 1207.68 L1754.23 1207.68 L1754.81 1207.68 L1755.4 1207.68 L1755.99 1207.68 L1756.57 1207.68 L1757.16 1207.68 L1757.74 1207.68 L1758.33 1207.68 L1758.92 1207.68 L1759.5 1207.68 L1760.09 1207.68 L1760.68 1207.68 L1761.26 1207.68 L1761.85 1207.68 L1762.44 1207.68 L1763.02 1207.68 L1763.61 1207.68 L1764.19 1207.68 L1764.78 1207.68 L1765.37 1207.68 L1765.95 1207.68 L1766.54 1207.68 L1767.13 1207.68 L1767.71 1207.68 L1768.3 1207.68 L1768.89 1207.68 L1769.47 1207.68 L1770.06 1207.68 L1770.65 1207.68 L1771.23 1207.68 L1771.82 1207.68 L1772.4 1207.68 L1772.99 1207.68 L1773.58 1207.68 L1774.16 1207.68 L1774.75 1207.68 L1775.34 1207.68 L1775.92 1207.68 L1776.51 1207.68 L1777.1 1207.68 L1777.68 1207.68 L1778.27 1207.68 L1778.86 1207.68 L1779.44 1207.68 L1780.03 1207.68 L1780.61 1207.68 L1781.2 1207.68 L1781.79 1207.68 L1782.37 1207.68 L1782.96 1207.68 L1783.55 1207.68 L1784.13 1207.68 L1784.72 1207.68 L1785.31 1207.68 L1785.89 1207.68 L1786.48 1207.68 L1787.06 1207.68 L1787.65 1207.68 L1788.24 1207.68 L1788.82 1207.68 L1789.41 1207.68 L1790 1207.68 L1790.58 1207.68 L1791.17 1207.68 L1791.76 1207.68 L1792.34 1207.68 L1792.93 1207.68 L1793.52 1207.68 L1794.1 1207.68 L1794.69 1207.68 L1795.27 1207.68 L1795.86 1207.68 L1796.45 1207.68 L1797.03 1207.68 L1797.62 1207.68 L1798.21 1207.68 L1798.79 1207.68 L1799.38 1207.68 L1799.97 1207.68 L1800.55 1207.68 L1801.14 1207.68 L1801.73 1207.68 L1802.31 1207.68 L1802.9 1207.68 L1803.48 1207.68 L1804.07 1207.68 L1804.66 1207.68 L1805.24 1207.68 L1805.83 1207.68 L1806.42 1207.68 L1807 1207.68 L1807.59 1207.68 L1808.18 1207.68 L1808.76 1207.68 L1809.35 1207.68 L1809.94 1207.68 L1810.52 1207.68 L1811.11 1207.68 L1811.69 1207.68 L1812.28 1207.68 L1812.87 1207.68 L1813.45 1207.68 L1814.04 1207.68 L1814.63 1207.68 L1815.21 1207.68 L1815.8 1207.68 L1816.39 1207.68 L1816.97 1207.68 L1817.56 1207.68 L1818.14 1207.68 L1818.73 1207.68 L1819.32 1207.68 L1819.9 1207.68 L1820.49 1207.68 L1821.08 1207.68 L1821.66 1207.68 L1822.25 1207.68 L1822.84 1207.68 L1823.42 1207.68 L1824.01 1207.68 L1824.6 1207.68 L1825.18 1207.68 L1825.77 1207.68 L1826.35 1207.68 L1826.94 1207.68 L1827.53 1207.68 L1828.11 1207.68 L1828.7 1207.68 L1829.29 1207.68 L1829.87 1207.68 L1830.46 1207.68 L1831.05 1207.68 L1831.63 1207.68 L1832.22 1207.68 L1832.81 1207.68 L1833.39 1207.68 L1833.98 1207.68 L1834.56 1207.68 L1835.15 1207.68 L1835.74 1207.68 L1836.32 1207.68 L1836.91 1207.68 L1837.5 1207.68 L1838.08 1207.68 L1838.67 1207.68 L1839.26 1207.68 L1839.84 1207.68 L1840.43 1207.68 L1841.01 1207.68 L1841.6 1207.68 L1842.19 1207.68 L1842.77 1207.68 L1843.36 1207.68 L1843.95 1207.68 L1844.53 1207.68 L1845.12 1207.68 L1845.71 1207.68 L1846.29 1207.68 L1846.88 1207.68 L1847.47 1207.68 L1848.05 1207.68 L1848.64 1207.68 L1849.22 1207.68 L1849.81 1207.68 L1850.4 1207.68 L1850.98 1207.68 L1851.57 1207.68 L1852.16 1207.68 L1852.74 1207.68 L1853.33 1207.68 L1853.92 1207.68 L1854.5 1207.68 L1855.09 1207.68 L1855.68 1207.68 L1856.26 1207.68 L1856.85 1207.68 L1857.43 1207.68 L1858.02 1207.68 L1858.61 1207.68 L1859.19 1207.68 L1859.78 1207.68 L1860.37 1207.68 L1860.95 1207.68 L1861.54 1207.68 L1862.13 1207.68 L1862.71 1207.68 L1863.3 1207.68 L1863.88 1207.68 L1864.47 1207.68 L1865.06 1207.68 L1865.64 1207.68 L1866.23 1207.68 L1866.82 1207.68 L1867.4 1207.68 L1867.99 1207.68 L1868.58 1207.68 L1869.16 1207.68 L1869.75 1207.68 L1870.34 1207.68 L1870.92 1207.68 L1871.51 1207.68 L1872.09 1207.68 L1872.68 1207.68 L1873.27 1207.68 L1873.85 1207.68 L1874.44 1207.68 L1875.03 1207.68 L1875.61 1207.68 L1876.2 1207.68 L1876.79 1207.68 L1877.37 1207.68 L1877.96 1207.68 L1878.55 1207.68 L1879.13 1207.68 L1879.72 1207.68 L1880.3 1207.68 L1880.89 1207.68 L1881.48 1207.68 L1882.06 1207.68 L1882.65 1207.68 L1883.24 1207.68 L1883.82 1207.68 L1884.41 1207.68 L1885 1207.68 L1885.58 1207.68 L1886.17 1207.68 L1886.76 1207.68 L1887.34 1207.68 L1887.93 1207.68 L1888.51 1207.68 L1889.1 1207.68 L1889.69 1207.68 L1890.27 1207.68 L1890.86 1207.68 L1891.45 1207.68 L1892.03 1207.68 L1892.62 1207.68 L1893.21 1207.68 L1893.79 1207.68 L1894.38 1207.68 L1894.96 1207.68 L1895.55 1207.68 L1896.14 1207.68 L1896.72 1207.68 L1897.31 1207.68 L1897.9 1207.68 L1898.48 1207.68 L1899.07 1207.68 L1899.66 1207.68 L1900.24 1207.68 L1900.83 1207.68 L1901.42 1207.68 L1902 1207.68 L1902.59 1207.68 L1903.17 1207.68 L1903.76 1207.68 L1904.35 1207.68 L1904.93 1207.68 L1905.52 1207.68 L1906.11 1207.68 L1906.69 1207.68 L1907.28 1207.68 L1907.87 1207.68 L1908.45 1207.68 L1909.04 1207.68 L1909.63 1207.68 L1910.21 1207.68 L1910.8 1207.68 L1911.38 1207.68 L1911.97 1207.68 L1912.56 1207.68 L1913.14 1207.68 L1913.73 1207.68 L1914.32 1207.68 L1914.9 1207.68 L1915.49 1207.68 L1916.08 1207.68 L1916.66 1207.68 L1917.25 1207.68 L1917.83 1207.68 L1918.42 1207.68 L1919.01 1207.68 L1919.59 1207.68 L1920.18 1207.68 L1920.77 1207.68 L1921.35 1207.68 L1921.94 1207.68 L1922.53 1207.68 L1923.11 1207.68 L1923.7 1207.68 L1924.29 1207.68 L1924.87 1207.68 L1925.46 1207.68 L1926.04 1207.68 L1926.63 1207.68 L1927.22 1207.68 L1927.8 1207.68 L1928.39 1207.68 L1928.98 1207.68 L1929.56 1207.68 L1930.15 1207.68 L1930.74 1207.68 L1931.32 1207.68 L1931.91 1207.68 L1932.5 1207.68 L1933.08 1207.68 L1933.67 1207.68 L1934.25 1207.68 L1934.84 1207.68 L1935.43 1207.68 L1936.01 1207.68 L1936.6 1207.68 L1937.19 1207.68 L1937.77 1207.68 L1938.36 1207.68 L1938.95 1207.68 L1939.53 1207.68 L1940.12 1207.68 L1940.71 1207.68 L1941.29 1207.68 L1941.88 1207.68 L1942.46 1207.68 L1943.05 1207.68 L1943.64 1207.68 L1944.22 1207.68 L1944.81 1207.68 L1945.4 1207.68 L1945.98 1207.68 L1946.57 1207.68 L1947.16 1207.68 L1947.74 1207.68 L1948.33 1207.68 L1948.91 1207.68 L1949.5 1207.68 L1950.09 1207.68 L1950.67 1207.68 L1951.26 1207.68 L1951.85 1207.68 L1952.43 1207.68 L1953.02 1207.68 L1953.61 1207.68 L1954.19 1207.68 L1954.78 1207.68 L1955.37 1207.68 L1955.95 1207.68 L1956.54 1207.68 L1957.12 1207.68 L1957.71 1207.68 L1958.3 1207.68 L1958.88 1207.68 L1959.47 1207.68 L1960.06 1207.68 L1960.64 1207.68 L1961.23 1207.68 L1961.82 1207.68 L1962.4 1207.68 L1962.99 1207.68 L1963.58 1207.68 L1964.16 1207.68 L1964.75 1207.68 L1965.33 1207.68 L1965.92 1207.68 L1966.51 1207.68 L1967.09 1207.68 L1967.68 1207.68 L1968.27 1207.68 L1968.85 1207.68 L1969.44 1207.68 L1970.03 1207.68 L1970.61 1207.68 L1971.2 1207.68 L1971.78 1207.68 L1972.37 1207.68 L1972.96 1207.68 L1973.54 1207.68 L1974.13 1207.68 L1974.72 1207.68 L1975.3 1207.68 L1975.89 1207.68 L1976.48 1207.68 L1977.06 1207.68 L1977.65 1207.68 L1978.24 1207.68 L1978.82 1207.68 L1979.41 1207.68 L1979.99 1207.68 L1980.58 1207.68 L1981.17 1207.68 L1981.75 1207.68 L1982.34 1207.68 L1982.93 1207.68 L1983.51 1207.68 L1984.1 1207.68 L1984.69 1207.68 L1985.27 1207.68 L1985.86 1207.68 L1986.45 1207.68 L1987.03 1207.68 L1987.62 1207.68 L1988.2 1207.68 L1988.79 1207.68 L1989.38 1207.68 L1989.96 1207.68 L1990.55 1207.68 L1991.14 1207.68 L1991.72 1207.68 L1992.31 1207.68 L1992.9 1207.68 L1993.48 1207.68 L1994.07 1207.68 L1994.65 1207.68 L1995.24 1207.68 L1995.83 1207.68 L1996.41 1207.68 L1997 1207.68 L1997.59 1207.68 L1998.17 1207.68 L1998.76 1207.68 L1999.35 1207.68 L1999.93 1207.68 L2000.52 1207.68 L2001.11 1207.68 L2001.69 1207.68 L2002.28 1207.68 L2002.86 1207.68 L2003.45 1207.68 L2004.04 1207.68 L2004.62 1207.68 L2005.21 1207.68 L2005.8 1207.68 L2006.38 1207.68 L2006.97 1207.68 L2007.56 1207.68 L2008.14 1207.68 L2008.73 1207.68 L2009.32 1207.68 L2009.9 1207.68 L2010.49 1207.68 L2011.07 1207.68 L2011.66 1207.68 L2012.25 1207.68 L2012.83 1207.68 L2013.42 1207.68 L2014.01 1207.68 L2014.59 1207.68 L2015.18 1207.68 L2015.77 1207.68 L2016.35 1207.68 L2016.94 1207.68 L2017.53 1207.68 L2018.11 1207.68 L2018.7 1207.68 L2019.28 1207.68 L2019.87 1207.68 L2020.46 1207.68 L2021.04 1207.68 L2021.63 1207.68 L2022.22 1207.68 L2022.8 1207.68 L2023.39 1207.68 L2023.98 1207.68 L2024.56 1207.68 L2025.15 1207.68 L2025.73 1207.68 L2026.32 1207.68 L2026.91 1207.68 L2027.49 1207.68 L2028.08 1207.68 L2028.67 1207.68 L2029.25 1207.68 L2029.84 1207.68 L2030.43 1207.68 L2031.01 1207.68 L2031.6 1207.68 L2032.19 1207.68 L2032.77 1207.68 L2033.36 1207.68 L2033.94 1207.68 L2034.53 1207.68 L2035.12 1207.68 L2035.7 1207.68 L2036.29 1207.68 L2036.88 1207.68 L2037.46 1207.68 L2038.05 1207.68 L2038.64 1207.68 L2039.22 1207.68 L2039.81 1207.68 L2040.4 1207.68 L2040.98 1207.68 L2041.57 1207.68 L2042.15 1207.68 L2042.74 1207.68 L2043.33 1207.68 L2043.91 1207.68 L2044.5 1207.68 L2045.09 1207.68 L2045.67 1207.68 L2046.26 1207.68 L2046.85 1207.68 L2047.43 1207.68 L2048.02 1207.68 L2048.6 1207.68 L2049.19 1207.68 L2049.78 1207.68 L2050.36 1207.68 L2050.95 1207.68 L2051.54 1207.68 L2052.12 1207.68 L2052.71 1207.68 L2053.3 1207.68 L2053.88 1207.68 L2054.47 1207.68 L2055.06 1207.68 L2055.64 1207.68 L2056.23 1207.68 L2056.81 1207.68 L2057.4 1207.68 L2057.99 1207.68 L2058.57 1207.68 L2059.16 1207.68 L2059.75 1207.68 L2060.33 1207.68 L2060.92 1207.68 L2061.51 1207.68 L2062.09 1207.68 L2062.68 1207.68 L2063.27 1207.68 L2063.85 1207.68 L2064.44 1207.68 L2065.02 1207.68 L2065.61 1207.68 L2066.2 1207.68 L2066.78 1207.68 L2067.37 1207.68 L2067.96 1207.68 L2068.54 1207.68 L2069.13 1207.68 L2069.72 1207.68 L2070.3 1207.68 L2070.89 1207.68 L2071.48 1207.68 L2072.06 1207.68 L2072.65 1207.68 L2073.23 1207.68 L2073.82 1207.68 L2074.41 1207.68 L2074.99 1207.68 L2075.58 1207.68 L2076.17 1207.68 L2076.75 1207.68 L2077.34 1207.68 L2077.93 1207.68 L2078.51 1207.68 L2079.1 1207.68 L2079.68 1207.68 L2080.27 1207.68 L2080.86 1207.68 L2081.44 1207.68 L2082.03 1207.68 L2082.62 1207.68 L2083.2 1207.68 L2083.79 1207.68 L2084.38 1207.68 L2084.96 1207.68 L2085.55 1207.68 L2086.14 1207.68 L2086.72 1207.68 L2087.31 1207.68 L2087.89 1207.68 L2088.48 1207.68 L2089.07 1207.68 L2089.65 1207.68 L2090.24 1207.68 L2090.83 1207.68 L2091.41 1207.68 L2092 1207.68 L2092.59 1207.68 L2093.17 1207.68 L2093.76 1207.68 L2094.35 1207.68 L2094.93 1207.68 L2095.52 1207.68 L2096.1 1207.68 L2096.69 1207.68 L2097.28 1207.68 L2097.86 1207.68 L2098.45 1207.68 L2099.04 1207.68 L2099.62 1207.68 L2100.21 1207.68 L2100.8 1207.68 L2101.38 1207.68 L2101.97 1207.68 L2102.55 1207.68 L2103.14 1207.68 L2103.73 1207.68 L2104.31 1207.68 L2104.9 1207.68 L2105.49 1207.68 L2106.07 1207.68 L2106.66 1207.68 L2107.25 1207.68 L2107.83 1207.68 L2108.42 1207.68 L2109.01 1207.68 L2109.59 1207.68 L2110.18 1207.68 L2110.76 1207.68 L2111.35 1207.68 L2111.94 1207.68 L2112.52 1207.68 L2113.11 1207.68 L2113.7 1207.68 L2114.28 1207.68 L2114.87 1207.68 L2115.46 1207.68 L2116.04 1207.68 L2116.63 1207.68 L2117.22 1207.68 L2117.8 1207.68 L2118.39 1207.68 L2118.97 1207.68 L2119.56 1207.68 L2120.15 1207.68 L2120.73 1207.68 L2121.32 1207.68 L2121.91 1207.68 L2122.49 1207.68 L2123.08 1207.68 L2123.67 1207.68 L2124.25 1207.68 L2124.84 1207.68 L2125.42 1207.68 L2126.01 1207.68 L2126.6 1207.68 L2127.18 1207.68 L2127.77 1207.68 L2128.36 1207.68 L2128.94 1207.68 L2129.53 1207.68 L2130.12 1207.68 L2130.7 1207.68 L2131.29 1207.68 L2131.88 1207.68 L2132.46 1207.68 L2133.05 1207.68 L2133.63 1207.68 L2134.22 1207.68 L2134.81 1207.68 L2135.39 1207.68 L2135.98 1207.68 L2136.57 1207.68 L2137.15 1207.68 L2137.74 1207.68 L2138.33 1207.68 L2138.91 1207.68 L2139.5 1207.68 L2140.09 1207.68 L2140.67 1207.68 L2141.26 1207.68 L2141.84 1207.68 L2142.43 1207.68 L2143.02 1207.68 L2143.6 1207.68 L2144.19 1207.68 L2144.78 1207.68 L2145.36 1207.68 L2145.95 1207.68 L2146.54 1207.68 L2147.12 1207.68 L2147.71 1207.68 L2148.3 1207.68 L2148.88 1207.68 L2149.47 1207.68 L2150.05 1207.68 L2150.64 1207.68 L2151.23 1207.68 L2151.81 1207.68 L2152.4 1207.68 L2152.99 1207.68 L2153.57 1207.68 L2154.16 1207.68 L2154.75 1207.68 L2155.33 1207.68 L2155.92 1207.68 L2156.5 1207.68 L2157.09 1207.68 L2157.68 1207.68 L2158.26 1207.68 L2158.26 1206.81 L2157.68 1206.81 L2157.09 1206.81 L2156.5 1206.81 L2155.92 1206.81 L2155.33 1206.81 L2154.75 1206.81 L2154.16 1206.81 L2153.57 1206.81 L2152.99 1206.81 L2152.4 1206.81 L2151.81 1206.81 L2151.23 1206.81 L2150.64 1206.81 L2150.05 1206.81 L2149.47 1206.81 L2148.88 1206.81 L2148.3 1206.81 L2147.71 1206.81 L2147.12 1206.81 L2146.54 1206.81 L2145.95 1206.81 L2145.36 1206.81 L2144.78 1206.81 L2144.19 1206.81 L2143.6 1206.81 L2143.02 1206.81 L2142.43 1206.81 L2141.84 1206.81 L2141.26 1206.81 L2140.67 1206.81 L2140.09 1206.81 L2139.5 1206.81 L2138.91 1206.81 L2138.33 1206.81 L2137.74 1206.81 L2137.15 1206.81 L2136.57 1206.81 L2135.98 1206.81 L2135.39 1206.81 L2134.81 1206.81 L2134.22 1206.81 L2133.63 1206.81 L2133.05 1206.81 L2132.46 1206.81 L2131.88 1206.81 L2131.29 1206.81 L2130.7 1206.81 L2130.12 1206.81 L2129.53 1206.81 L2128.94 1206.81 L2128.36 1206.81 L2127.77 1206.81 L2127.18 1206.81 L2126.6 1206.81 L2126.01 1206.81 L2125.42 1206.81 L2124.84 1206.81 L2124.25 1206.81 L2123.67 1206.81 L2123.08 1206.81 L2122.49 1206.81 L2121.91 1206.81 L2121.32 1206.81 L2120.73 1206.81 L2120.15 1206.81 L2119.56 1206.81 L2118.97 1206.81 L2118.39 1206.81 L2117.8 1206.81 L2117.22 1206.81 L2116.63 1206.81 L2116.04 1206.81 L2115.46 1206.81 L2114.87 1206.81 L2114.28 1206.81 L2113.7 1206.81 L2113.11 1206.81 L2112.52 1206.81 L2111.94 1206.81 L2111.35 1206.81 L2110.76 1206.81 L2110.18 1206.81 L2109.59 1206.81 L2109.01 1206.81 L2108.42 1206.81 L2107.83 1206.81 L2107.25 1206.81 L2106.66 1206.81 L2106.07 1206.81 L2105.49 1206.81 L2104.9 1206.81 L2104.31 1206.81 L2103.73 1206.81 L2103.14 1206.81 L2102.55 1206.81 L2101.97 1206.81 L2101.38 1206.81 L2100.8 1206.81 L2100.21 1206.81 L2099.62 1206.81 L2099.04 1206.81 L2098.45 1206.81 L2097.86 1206.81 L2097.28 1206.81 L2096.69 1206.81 L2096.1 1206.81 L2095.52 1206.81 L2094.93 1206.81 L2094.35 1206.81 L2093.76 1206.81 L2093.17 1206.81 L2092.59 1206.81 L2092 1206.81 L2091.41 1206.81 L2090.83 1206.81 L2090.24 1206.81 L2089.65 1206.81 L2089.07 1206.81 L2088.48 1206.81 L2087.89 1206.81 L2087.31 1206.81 L2086.72 1206.81 L2086.14 1206.81 L2085.55 1206.81 L2084.96 1206.81 L2084.38 1206.81 L2083.79 1206.81 L2083.2 1206.81 L2082.62 1206.81 L2082.03 1206.81 L2081.44 1206.81 L2080.86 1206.81 L2080.27 1206.81 L2079.68 1206.81 L2079.1 1206.81 L2078.51 1206.81 L2077.93 1206.81 L2077.34 1206.81 L2076.75 1206.81 L2076.17 1206.81 L2075.58 1206.81 L2074.99 1206.81 L2074.41 1206.81 L2073.82 1206.81 L2073.23 1206.81 L2072.65 1206.81 L2072.06 1206.81 L2071.48 1206.81 L2070.89 1206.81 L2070.3 1206.81 L2069.72 1206.81 L2069.13 1206.81 L2068.54 1206.81 L2067.96 1206.81 L2067.37 1206.81 L2066.78 1206.81 L2066.2 1206.81 L2065.61 1206.81 L2065.02 1206.81 L2064.44 1206.81 L2063.85 1206.81 L2063.27 1206.81 L2062.68 1206.81 L2062.09 1206.81 L2061.51 1206.81 L2060.92 1206.81 L2060.33 1206.81 L2059.75 1206.81 L2059.16 1206.81 L2058.57 1206.81 L2057.99 1206.81 L2057.4 1206.81 L2056.81 1206.81 L2056.23 1206.81 L2055.64 1206.81 L2055.06 1206.81 L2054.47 1206.81 L2053.88 1206.81 L2053.3 1206.81 L2052.71 1206.81 L2052.12 1206.81 L2051.54 1206.81 L2050.95 1206.81 L2050.36 1206.81 L2049.78 1206.81 L2049.19 1206.81 L2048.6 1206.81 L2048.02 1206.81 L2047.43 1206.81 L2046.85 1206.81 L2046.26 1206.81 L2045.67 1206.81 L2045.09 1206.81 L2044.5 1206.81 L2043.91 1206.81 L2043.33 1206.81 L2042.74 1206.81 L2042.15 1206.81 L2041.57 1206.81 L2040.98 1206.81 L2040.4 1206.81 L2039.81 1206.81 L2039.22 1206.81 L2038.64 1206.81 L2038.05 1206.81 L2037.46 1206.81 L2036.88 1206.81 L2036.29 1206.81 L2035.7 1206.81 L2035.12 1206.81 L2034.53 1206.81 L2033.94 1206.81 L2033.36 1206.81 L2032.77 1206.81 L2032.19 1206.81 L2031.6 1206.81 L2031.01 1206.81 L2030.43 1206.81 L2029.84 1206.81 L2029.25 1206.81 L2028.67 1206.81 L2028.08 1206.81 L2027.49 1206.81 L2026.91 1206.81 L2026.32 1206.81 L2025.73 1206.81 L2025.15 1206.81 L2024.56 1206.81 L2023.98 1206.81 L2023.39 1206.81 L2022.8 1206.81 L2022.22 1206.81 L2021.63 1206.81 L2021.04 1206.81 L2020.46 1206.81 L2019.87 1206.81 L2019.28 1206.81 L2018.7 1206.81 L2018.11 1206.81 L2017.53 1206.81 L2016.94 1206.81 L2016.35 1206.81 L2015.77 1206.81 L2015.18 1206.81 L2014.59 1206.81 L2014.01 1206.81 L2013.42 1206.81 L2012.83 1206.81 L2012.25 1206.81 L2011.66 1206.81 L2011.07 1206.81 L2010.49 1206.81 L2009.9 1206.81 L2009.32 1206.81 L2008.73 1206.81 L2008.14 1206.81 L2007.56 1206.81 L2006.97 1206.81 L2006.38 1206.81 L2005.8 1206.81 L2005.21 1206.81 L2004.62 1206.81 L2004.04 1206.81 L2003.45 1206.81 L2002.86 1206.81 L2002.28 1206.81 L2001.69 1206.81 L2001.11 1206.81 L2000.52 1206.81 L1999.93 1206.81 L1999.35 1206.81 L1998.76 1206.81 L1998.17 1206.81 L1997.59 1206.81 L1997 1206.81 L1996.41 1206.81 L1995.83 1206.81 L1995.24 1206.81 L1994.65 1206.81 L1994.07 1206.81 L1993.48 1206.81 L1992.9 1206.81 L1992.31 1206.81 L1991.72 1206.81 L1991.14 1206.81 L1990.55 1206.81 L1989.96 1206.81 L1989.38 1206.81 L1988.79 1206.81 L1988.2 1206.81 L1987.62 1206.81 L1987.03 1206.81 L1986.45 1206.81 L1985.86 1206.81 L1985.27 1206.81 L1984.69 1206.81 L1984.1 1206.81 L1983.51 1206.81 L1982.93 1206.81 L1982.34 1206.81 L1981.75 1206.81 L1981.17 1206.81 L1980.58 1206.81 L1979.99 1206.81 L1979.41 1206.81 L1978.82 1206.81 L1978.24 1206.81 L1977.65 1206.81 L1977.06 1206.81 L1976.48 1206.81 L1975.89 1206.81 L1975.3 1206.81 L1974.72 1206.81 L1974.13 1206.81 L1973.54 1206.81 L1972.96 1206.81 L1972.37 1206.81 L1971.78 1206.81 L1971.2 1206.81 L1970.61 1206.81 L1970.03 1206.81 L1969.44 1206.81 L1968.85 1206.81 L1968.27 1206.81 L1967.68 1206.81 L1967.09 1206.81 L1966.51 1206.81 L1965.92 1206.81 L1965.33 1206.81 L1964.75 1206.81 L1964.16 1206.81 L1963.58 1206.81 L1962.99 1206.81 L1962.4 1206.81 L1961.82 1206.81 L1961.23 1206.81 L1960.64 1206.81 L1960.06 1206.81 L1959.47 1206.81 L1958.88 1206.81 L1958.3 1206.81 L1957.71 1206.81 L1957.12 1206.81 L1956.54 1206.81 L1955.95 1206.81 L1955.37 1206.81 L1954.78 1206.81 L1954.19 1206.81 L1953.61 1206.81 L1953.02 1206.81 L1952.43 1206.81 L1951.85 1206.81 L1951.26 1206.81 L1950.67 1206.81 L1950.09 1206.81 L1949.5 1206.81 L1948.91 1206.81 L1948.33 1206.81 L1947.74 1206.81 L1947.16 1206.81 L1946.57 1206.81 L1945.98 1206.81 L1945.4 1206.81 L1944.81 1206.81 L1944.22 1206.81 L1943.64 1206.81 L1943.05 1206.81 L1942.46 1206.81 L1941.88 1206.81 L1941.29 1206.81 L1940.71 1206.81 L1940.12 1206.81 L1939.53 1206.81 L1938.95 1206.81 L1938.36 1206.81 L1937.77 1206.81 L1937.19 1206.81 L1936.6 1206.81 L1936.01 1206.81 L1935.43 1206.81 L1934.84 1206.81 L1934.25 1206.81 L1933.67 1206.81 L1933.08 1206.81 L1932.5 1206.81 L1931.91 1206.81 L1931.32 1206.81 L1930.74 1206.81 L1930.15 1206.81 L1929.56 1206.81 L1928.98 1206.81 L1928.39 1206.81 L1927.8 1206.81 L1927.22 1206.81 L1926.63 1206.81 L1926.04 1206.81 L1925.46 1206.81 L1924.87 1206.81 L1924.29 1206.81 L1923.7 1206.81 L1923.11 1206.81 L1922.53 1206.81 L1921.94 1206.81 L1921.35 1206.81 L1920.77 1206.81 L1920.18 1206.81 L1919.59 1206.81 L1919.01 1206.81 L1918.42 1206.81 L1917.83 1206.81 L1917.25 1206.81 L1916.66 1206.81 L1916.08 1206.81 L1915.49 1206.81 L1914.9 1206.81 L1914.32 1206.81 L1913.73 1206.81 L1913.14 1206.81 L1912.56 1206.81 L1911.97 1206.81 L1911.38 1206.81 L1910.8 1206.81 L1910.21 1206.81 L1909.63 1206.81 L1909.04 1206.81 L1908.45 1206.81 L1907.87 1206.81 L1907.28 1206.81 L1906.69 1206.81 L1906.11 1206.81 L1905.52 1206.81 L1904.93 1206.81 L1904.35 1206.81 L1903.76 1206.81 L1903.17 1206.81 L1902.59 1206.81 L1902 1206.81 L1901.42 1206.81 L1900.83 1206.81 L1900.24 1206.81 L1899.66 1206.81 L1899.07 1206.81 L1898.48 1206.81 L1897.9 1206.81 L1897.31 1206.81 L1896.72 1206.81 L1896.14 1206.81 L1895.55 1206.81 L1894.96 1206.81 L1894.38 1206.81 L1893.79 1206.81 L1893.21 1206.81 L1892.62 1206.81 L1892.03 1206.81 L1891.45 1206.81 L1890.86 1206.81 L1890.27 1206.81 L1889.69 1206.81 L1889.1 1206.81 L1888.51 1206.81 L1887.93 1206.81 L1887.34 1206.81 L1886.76 1206.81 L1886.17 1206.81 L1885.58 1206.81 L1885 1206.81 L1884.41 1206.81 L1883.82 1206.81 L1883.24 1206.81 L1882.65 1206.81 L1882.06 1206.81 L1881.48 1206.81 L1880.89 1206.81 L1880.3 1206.81 L1879.72 1206.81 L1879.13 1206.81 L1878.55 1206.81 L1877.96 1206.81 L1877.37 1206.81 L1876.79 1206.81 L1876.2 1206.81 L1875.61 1206.81 L1875.03 1206.81 L1874.44 1206.81 L1873.85 1206.81 L1873.27 1206.81 L1872.68 1206.81 L1872.09 1206.81 L1871.51 1206.81 L1870.92 1206.81 L1870.34 1206.81 L1869.75 1206.81 L1869.16 1206.81 L1868.58 1206.81 L1867.99 1206.81 L1867.4 1206.81 L1866.82 1206.81 L1866.23 1206.81 L1865.64 1206.81 L1865.06 1206.81 L1864.47 1206.81 L1863.88 1206.81 L1863.3 1206.81 L1862.71 1206.81 L1862.13 1206.81 L1861.54 1206.81 L1860.95 1206.81 L1860.37 1206.81 L1859.78 1206.81 L1859.19 1206.81 L1858.61 1206.81 L1858.02 1206.81 L1857.43 1206.81 L1856.85 1206.81 L1856.26 1206.81 L1855.68 1206.81 L1855.09 1206.81 L1854.5 1206.81 L1853.92 1206.81 L1853.33 1206.81 L1852.74 1206.81 L1852.16 1206.81 L1851.57 1206.81 L1850.98 1206.81 L1850.4 1206.81 L1849.81 1206.81 L1849.22 1206.81 L1848.64 1206.81 L1848.05 1206.81 L1847.47 1206.81 L1846.88 1206.81 L1846.29 1206.81 L1845.71 1206.81 L1845.12 1206.81 L1844.53 1206.81 L1843.95 1206.81 L1843.36 1206.81 L1842.77 1206.81 L1842.19 1206.81 L1841.6 1206.81 L1841.01 1206.81 L1840.43 1206.81 L1839.84 1206.81 L1839.26 1206.81 L1838.67 1206.81 L1838.08 1206.81 L1837.5 1206.81 L1836.91 1206.81 L1836.32 1206.81 L1835.74 1206.81 L1835.15 1206.81 L1834.56 1206.81 L1833.98 1206.81 L1833.39 1206.81 L1832.81 1206.81 L1832.22 1206.81 L1831.63 1206.81 L1831.05 1206.81 L1830.46 1206.81 L1829.87 1206.81 L1829.29 1206.81 L1828.7 1206.81 L1828.11 1206.81 L1827.53 1206.81 L1826.94 1206.81 L1826.35 1206.81 L1825.77 1206.81 L1825.18 1206.81 L1824.6 1206.81 L1824.01 1206.81 L1823.42 1206.81 L1822.84 1206.81 L1822.25 1206.81 L1821.66 1206.81 L1821.08 1206.81 L1820.49 1206.81 L1819.9 1206.81 L1819.32 1206.81 L1818.73 1206.81 L1818.14 1206.81 L1817.56 1206.81 L1816.97 1206.81 L1816.39 1206.81 L1815.8 1206.81 L1815.21 1206.81 L1814.63 1206.81 L1814.04 1206.81 L1813.45 1206.81 L1812.87 1206.81 L1812.28 1206.81 L1811.69 1206.81 L1811.11 1206.81 L1810.52 1206.81 L1809.94 1206.81 L1809.35 1206.81 L1808.76 1206.81 L1808.18 1206.81 L1807.59 1206.81 L1807 1206.81 L1806.42 1206.81 L1805.83 1206.81 L1805.24 1206.81 L1804.66 1206.81 L1804.07 1206.81 L1803.48 1206.81 L1802.9 1206.81 L1802.31 1206.81 L1801.73 1206.81 L1801.14 1206.81 L1800.55 1206.81 L1799.97 1206.81 L1799.38 1206.81 L1798.79 1206.81 L1798.21 1206.81 L1797.62 1206.81 L1797.03 1206.81 L1796.45 1206.81 L1795.86 1206.81 L1795.27 1206.81 L1794.69 1206.81 L1794.1 1206.81 L1793.52 1206.81 L1792.93 1206.81 L1792.34 1206.81 L1791.76 1206.81 L1791.17 1206.81 L1790.58 1206.81 L1790 1206.81 L1789.41 1206.81 L1788.82 1206.81 L1788.24 1206.81 L1787.65 1206.81 L1787.06 1206.81 L1786.48 1206.81 L1785.89 1206.81 L1785.31 1206.81 L1784.72 1206.81 L1784.13 1206.81 L1783.55 1206.81 L1782.96 1206.81 L1782.37 1206.81 L1781.79 1206.81 L1781.2 1206.81 L1780.61 1206.81 L1780.03 1206.81 L1779.44 1206.81 L1778.86 1206.81 L1778.27 1206.81 L1777.68 1206.81 L1777.1 1206.81 L1776.51 1206.81 L1775.92 1206.81 L1775.34 1206.81 L1774.75 1206.81 L1774.16 1206.81 L1773.58 1206.81 L1772.99 1206.81 L1772.4 1206.81 L1771.82 1206.81 L1771.23 1206.81 L1770.65 1206.81 L1770.06 1206.81 L1769.47 1206.81 L1768.89 1206.81 L1768.3 1206.81 L1767.71 1206.81 L1767.13 1206.81 L1766.54 1206.81 L1765.95 1206.81 L1765.37 1206.81 L1764.78 1206.81 L1764.19 1206.81 L1763.61 1206.81 L1763.02 1206.81 L1762.44 1206.81 L1761.85 1206.81 L1761.26 1206.81 L1760.68 1206.81 L1760.09 1206.81 L1759.5 1206.81 L1758.92 1206.81 L1758.33 1206.81 L1757.74 1206.81 L1757.16 1206.81 L1756.57 1206.81 L1755.99 1206.81 L1755.4 1206.81 L1754.81 1206.81 L1754.23 1206.81 L1753.64 1206.81 L1753.05 1206.81 L1752.47 1206.81 L1751.88 1206.81 L1751.29 1206.81 L1750.71 1206.81 L1750.12 1206.81 L1749.53 1206.81 L1748.95 1206.81 L1748.36 1206.81 L1747.78 1206.81 L1747.19 1206.81 L1746.6 1206.81 L1746.02 1206.81 L1745.43 1206.81 L1744.84 1206.81 L1744.26 1206.81 L1743.67 1206.81 L1743.08 1206.81 L1742.5 1206.81 L1741.91 1206.81 L1741.32 1206.81 L1740.74 1206.81 L1740.15 1206.81 L1739.57 1206.81 L1738.98 1206.81 L1738.39 1206.81 L1737.81 1206.81 L1737.22 1206.81 L1736.63 1206.81 L1736.05 1206.81 L1735.46 1206.81 L1734.87 1206.81 L1734.29 1206.81 L1733.7 1206.81 L1733.11 1206.81 L1732.53 1206.81 L1731.94 1206.81 L1731.36 1206.81 L1730.77 1206.81 L1730.18 1206.81 L1729.6 1206.81 L1729.01 1206.81 L1728.42 1206.81 L1727.84 1206.81 L1727.25 1206.81 L1726.66 1206.81 L1726.08 1206.81 L1725.49 1206.81 L1724.91 1206.81 L1724.32 1206.81 L1723.73 1206.81 L1723.15 1206.81 L1722.56 1206.81 L1721.97 1206.81 L1721.39 1206.81 L1720.8 1206.81 L1720.21 1206.81 L1719.63 1206.81 L1719.04 1206.81 L1718.45 1206.81 L1717.87 1206.81 L1717.28 1206.81 L1716.7 1206.81 L1716.11 1206.81 L1715.52 1206.81 L1714.94 1206.81 L1714.35 1206.81 L1713.76 1206.81 L1713.18 1206.81 L1712.59 1206.81 L1712 1206.81 L1711.42 1206.81 L1710.83 1206.81 L1710.24 1206.81 L1709.66 1206.81 L1709.07 1206.81 L1708.49 1206.81 L1707.9 1206.81 L1707.31 1206.81 L1706.73 1206.81 L1706.14 1206.81 L1705.55 1206.81 L1704.97 1206.81 L1704.38 1206.81 L1703.79 1206.81 L1703.21 1206.81 L1702.62 1206.81 L1702.04 1206.81 L1701.45 1206.81 L1700.86 1206.81 L1700.28 1206.81 L1699.69 1206.81 L1699.1 1206.81 L1698.52 1206.81 L1697.93 1206.81 L1697.34 1206.81 L1696.76 1206.81 L1696.17 1206.81 L1695.58 1206.81 L1695 1206.81 L1694.41 1206.81 L1693.83 1206.81 L1693.24 1206.81 L1692.65 1206.81 L1692.07 1206.81 L1691.48 1206.81 L1690.89 1206.81 L1690.31 1206.81 L1689.72 1206.81 L1689.13 1206.81 L1688.55 1206.81 L1687.96 1206.81 L1687.37 1206.81 L1686.79 1206.81 L1686.2 1206.81 L1685.62 1206.81 L1685.03 1206.81 L1684.44 1206.81 L1683.86 1206.81 L1683.27 1206.81 L1682.68 1206.81 L1682.1 1206.81 L1681.51 1206.81 L1680.92 1206.81 L1680.34 1206.81 L1679.75 1206.81 L1679.17 1206.81 L1678.58 1206.81 L1677.99 1206.81 L1677.41 1206.81 L1676.82 1206.81 L1676.23 1206.81 L1675.65 1206.81 L1675.06 1206.81 L1674.47 1206.81 L1673.89 1206.81 L1673.3 1206.81 L1672.71 1206.81 L1672.13 1206.81 L1671.54 1206.81 L1670.96 1206.81 L1670.37 1206.81 L1669.78 1206.81 L1669.2 1206.81 L1668.61 1206.81 L1668.02 1206.81 L1667.44 1206.81 L1666.85 1206.81 L1666.26 1206.81 L1665.68 1206.81 L1665.09 1206.81 L1664.5 1206.81 L1663.92 1206.81 L1663.33 1206.81 L1662.75 1206.81 L1662.16 1206.81 L1661.57 1206.81 L1660.99 1206.81 L1660.4 1206.81 L1659.81 1206.81 L1659.23 1206.81 L1658.64 1206.81 L1658.05 1206.81 L1657.47 1206.81 L1656.88 1206.81 L1656.29 1206.81 L1655.71 1206.81 L1655.12 1206.81 L1654.54 1206.81 L1653.95 1206.81 L1653.36 1206.81 L1652.78 1206.81 L1652.19 1206.81 L1651.6 1206.81 L1651.02 1206.81 L1650.43 1206.81 L1649.84 1206.81 L1649.26 1206.81 L1648.67 1206.81 L1648.09 1206.81 L1647.5 1206.81 L1646.91 1206.81 L1646.33 1206.81 L1645.74 1206.81 L1645.15 1206.81 L1644.57 1206.81 L1643.98 1206.81 L1643.39 1206.81 L1642.81 1206.81 L1642.22 1206.81 L1641.63 1206.81 L1641.05 1206.81 L1640.46 1206.81 L1639.88 1206.81 L1639.29 1206.81 L1638.7 1206.81 L1638.12 1206.81 L1637.53 1206.81 L1636.94 1206.81 L1636.36 1206.81 L1635.77 1206.81 L1635.18 1206.81 L1634.6 1206.81 L1634.01 1206.81 L1633.42 1206.81 L1632.84 1206.81 L1632.25 1206.81 L1631.67 1206.81 L1631.08 1206.81 L1630.49 1206.81 L1629.91 1206.81 L1629.32 1206.81 L1628.73 1206.81 L1628.15 1206.81 L1627.56 1206.81 L1626.97 1206.81 L1626.39 1206.81 L1625.8 1206.81 L1625.22 1206.81 L1624.63 1206.81 L1624.04 1206.81 L1623.46 1206.81 L1622.87 1206.81 L1622.28 1206.81 L1621.7 1206.81 L1621.11 1206.81 L1620.52 1206.81 L1619.94 1206.81 L1619.35 1206.81 L1618.76 1206.81 L1618.18 1206.81 L1617.59 1206.81 L1617.01 1206.81 L1616.42 1206.81 L1615.83 1206.81 L1615.25 1206.81 L1614.66 1206.81 L1614.07 1206.81 L1613.49 1206.81 L1612.9 1206.81 L1612.31 1206.81 L1611.73 1206.81 L1611.14 1206.81 L1610.55 1206.81 L1609.97 1206.81 L1609.38 1206.81 L1608.8 1206.81 L1608.21 1206.81 L1607.62 1206.81 L1607.04 1206.81 L1606.45 1206.81 L1605.86 1206.81 L1605.28 1206.81 L1604.69 1206.81 L1604.1 1206.81 L1603.52 1206.81 L1602.93 1206.81 L1602.34 1206.81 L1601.76 1206.81 L1601.17 1206.81 L1600.59 1206.81 L1600 1206.81 L1599.41 1206.81 L1598.83 1206.81 L1598.24 1206.81 L1597.65 1206.81 L1597.07 1206.81 L1596.48 1206.81 L1595.89 1206.81 L1595.31 1206.81 L1594.72 1206.81 L1594.14 1206.81 L1593.55 1206.81 L1592.96 1206.81 L1592.38 1206.81 L1591.79 1206.81 L1591.2 1206.81 L1590.62 1206.81 L1590.03 1206.81 L1589.44 1206.81 L1588.86 1206.81 L1588.27 1206.81 L1587.68 1206.81 L1587.1 1206.81 L1586.51 1206.81 L1585.93 1206.81 L1585.34 1206.81 L1584.75 1206.81 L1584.17 1206.81 L1583.58 1206.81 L1582.99 1206.81 L1582.41 1206.81 L1581.82 1206.81 L1581.23 1206.81 L1580.65 1206.81 L1580.06 1206.81 L1579.47 1206.81 L1578.89 1206.81 L1578.3 1206.81 L1577.72 1206.81 L1577.13 1206.81 L1576.54 1206.81 L1575.96 1206.81 L1575.37 1206.81 L1574.78 1206.81 L1574.2 1206.81 L1573.61 1206.81 L1573.02 1206.81 L1572.44 1206.81 L1571.85 1206.81 L1571.27 1206.81 L1570.68 1206.81 L1570.09 1206.81 L1569.51 1206.81 L1568.92 1206.81 L1568.33 1206.81 L1567.75 1206.81 L1567.16 1206.81 L1566.57 1206.81 L1565.99 1206.81 L1565.4 1206.81 L1564.81 1206.81 L1564.23 1206.81 L1563.64 1206.81 L1563.06 1206.81 L1562.47 1206.81 L1561.88 1206.81 L1561.3 1206.81 L1560.71 1206.81 L1560.12 1206.81 L1559.54 1206.81 L1558.95 1206.81 L1558.36 1206.81 L1557.78 1206.81 L1557.19 1206.81 L1556.6 1206.81 L1556.02 1206.81 L1555.43 1206.81 L1554.85 1206.81 L1554.26 1206.81 L1553.67 1206.81 L1553.09 1206.81 L1552.5 1206.81 L1551.91 1206.81 L1551.33 1206.81 L1550.74 1206.81 L1550.15 1206.81 L1549.57 1206.81 L1548.98 1206.81 L1548.4 1206.81 L1547.81 1206.81 L1547.22 1206.81 L1546.64 1206.81 L1546.05 1206.81 L1545.46 1206.81 L1544.88 1206.81 L1544.29 1206.81 L1543.7 1206.81 L1543.12 1206.81 L1542.53 1206.81 L1541.94 1206.81 L1541.36 1206.81 L1540.77 1206.81 L1540.19 1206.81 L1539.6 1206.81 L1539.01 1206.81 L1538.43 1206.81 L1537.84 1206.81 L1537.25 1206.81 L1536.67 1206.81 L1536.08 1206.81 L1535.49 1206.81 L1534.91 1206.81 L1534.32 1206.81 L1533.73 1206.81 L1533.15 1206.81 L1532.56 1206.81 L1531.98 1206.81 L1531.39 1206.81 L1530.8 1206.81 L1530.22 1206.81 L1529.63 1206.81 L1529.04 1206.81 L1528.46 1206.81 L1527.87 1206.81 L1527.28 1206.81 L1526.7 1206.81 L1526.11 1206.81 L1525.52 1206.81 L1524.94 1206.81 L1524.35 1206.81 L1523.77 1206.81 L1523.18 1206.81 L1522.59 1206.81 L1522.01 1206.81 L1521.42 1206.81 L1520.83 1206.81 L1520.25 1206.81 L1519.66 1206.81 L1519.07 1206.81 L1518.49 1206.81 L1517.9 1206.81 L1517.32 1206.81 L1516.73 1206.81 L1516.14 1206.81 L1515.56 1206.81 L1514.97 1206.81 L1514.38 1206.81 L1513.8 1206.81 L1513.21 1206.81 L1512.62 1206.81 L1512.04 1206.81 L1511.45 1206.81 L1510.86 1206.81 L1510.28 1206.81 L1509.69 1206.81 L1509.11 1206.81 L1508.52 1206.81 L1507.93 1206.81 L1507.35 1206.81 L1506.76 1206.81 L1506.17 1206.81 L1505.59 1206.81 L1505 1206.81 L1504.41 1206.81 L1503.83 1206.81 L1503.24 1206.81 L1502.65 1206.81 L1502.07 1206.81 L1501.48 1206.81 L1500.9 1206.81 L1500.31 1206.81 L1499.72 1206.81 L1499.14 1206.81 L1498.55 1206.81 L1497.96 1206.81 L1497.38 1206.81 L1496.79 1206.81 L1496.2 1206.81 L1495.62 1206.81 L1495.03 1206.81 L1494.45 1206.81 L1493.86 1206.81 L1493.27 1206.81 L1492.69 1206.81 L1492.1 1206.81 L1491.51 1206.81 L1490.93 1206.81 L1490.34 1206.81 L1489.75 1206.81 L1489.17 1206.81 L1488.58 1206.81 L1487.99 1206.81 L1487.41 1206.81 L1486.82 1206.81 L1486.24 1206.81 L1485.65 1206.81 L1485.06 1206.81 L1484.48 1206.81 L1483.89 1206.81 L1483.3 1206.81 L1482.72 1206.81 L1482.13 1206.81 L1481.54 1206.81 L1480.96 1206.81 L1480.37 1206.81 L1479.78 1206.81 L1479.2 1206.81 L1478.61 1206.81 L1478.03 1206.81 L1477.44 1206.81 L1476.85 1206.81 L1476.27 1206.81 L1475.68 1206.81 L1475.09 1206.81 L1474.51 1206.81 L1473.92 1206.81 L1473.33 1206.81 L1472.75 1206.81 L1472.16 1206.81 L1471.57 1206.81 L1470.99 1206.81 L1470.4 1206.81 L1469.82 1206.81 L1469.23 1206.81 L1468.64 1206.81 L1468.06 1206.81 L1467.47 1206.81 L1466.88 1206.81 L1466.3 1206.81 L1465.71 1206.81 L1465.12 1206.81 L1464.54 1206.81 L1463.95 1206.81 L1463.37 1206.81 L1462.78 1206.81 L1462.19 1206.81 L1461.61 1206.81 L1461.02 1206.81 L1460.43 1206.81 L1459.85 1206.81 L1459.26 1206.81 L1458.67 1206.81 L1458.09 1206.81 L1457.5 1206.81 L1456.91 1206.81 L1456.33 1206.81 L1455.74 1206.81 L1455.16 1206.81 L1454.57 1206.81 L1453.98 1206.81 L1453.4 1206.81 L1452.81 1206.81 L1452.22 1206.81 L1451.64 1206.81 L1451.05 1206.81 L1450.46 1206.81 L1449.88 1206.81 L1449.29 1206.81 L1448.7 1206.81 L1448.12 1206.81 L1447.53 1206.81 L1446.95 1206.81 L1446.36 1206.81 L1445.77 1206.81 L1445.19 1206.81 L1444.6 1206.81 L1444.01 1206.81 L1443.43 1206.81 L1442.84 1206.81 L1442.25 1206.81 L1441.67 1206.81 L1441.08 1206.81 L1440.5 1206.81 L1439.91 1206.81 L1439.32 1206.81 L1438.74 1206.81 L1438.15 1206.81 L1437.56 1206.81 L1436.98 1206.81 L1436.39 1206.81 L1435.8 1206.81 L1435.22 1206.81 L1434.63 1206.81 L1434.04 1206.81 L1433.46 1206.81 L1432.87 1206.81 L1432.29 1206.81 L1431.7 1206.81 L1431.11 1206.81 L1430.53 1206.81 L1429.94 1206.81 L1429.35 1206.81 L1428.77 1206.81 L1428.18 1206.81 L1427.59 1206.81 L1427.01 1206.81 L1426.42 1206.81 L1425.83 1206.81 L1425.25 1206.81 L1424.66 1206.81 L1424.08 1206.81 L1423.49 1206.81 L1422.9 1206.81 L1422.32 1206.81 L1421.73 1206.81 L1421.14 1206.81 L1420.56 1206.81 L1419.97 1206.81 L1419.38 1206.81 L1418.8 1206.81 L1418.21 1206.81 L1417.63 1206.81 L1417.04 1206.81 L1416.45 1206.81 L1415.87 1206.81 L1415.28 1206.81 L1414.69 1206.81 L1414.11 1206.81 L1413.52 1206.81 L1412.93 1206.81 L1412.35 1206.81 L1411.76 1206.81 L1411.17 1206.81 L1410.59 1206.81 L1410 1206.81 L1409.42 1206.81 L1408.83 1206.81 L1408.24 1206.81 L1407.66 1206.81 L1407.07 1206.81 L1406.48 1206.81 L1405.9 1206.81 L1405.31 1206.81 L1404.72 1206.81 L1404.14 1206.81 L1403.55 1206.81 L1402.96 1206.81 L1402.38 1206.81 L1401.79 1206.81 L1401.21 1206.81 L1400.62 1206.81 L1400.03 1206.81 L1399.45 1206.81 L1398.86 1206.81 L1398.27 1206.81 L1397.69 1206.81 L1397.1 1206.81 L1396.51 1206.81 L1395.93 1206.81 L1395.34 1206.81 L1394.75 1206.81 L1394.17 1206.81 L1393.58 1206.81 L1393 1206.81 L1392.41 1206.81 L1391.82 1206.81 L1391.24 1206.81 L1390.65 1206.81 L1390.06 1206.81 L1389.48 1206.81 L1388.89 1206.81 L1388.3 1206.81 L1387.72 1206.81 L1387.13 1206.81 L1386.55 1206.81 L1385.96 1206.81 L1385.37 1206.81 L1384.79 1206.81 L1384.2 1206.81 L1383.61 1206.81 L1383.03 1206.81 L1382.44 1206.81 L1381.85 1206.81 L1381.27 1206.81 L1380.68 1206.81 L1380.09 1206.81 L1379.51 1206.81 L1378.92 1206.81 L1378.34 1206.81 L1377.75 1206.81 L1377.16 1206.81 L1376.58 1206.81 L1375.99 1206.81 L1375.4 1206.81 L1374.82 1206.81 L1374.23 1206.81 L1373.64 1206.81 L1373.06 1206.81 L1372.47 1206.81 L1371.88 1206.81 L1371.3 1206.81 L1370.71 1206.81 L1370.13 1206.81 L1369.54 1206.81 L1368.95 1206.81 L1368.37 1206.81 L1367.78 1206.81 L1367.19 1206.81 L1366.61 1206.81 L1366.02 1206.81 L1365.43 1206.81 L1364.85 1206.81 L1364.26 1206.81 L1363.68 1206.81 L1363.09 1206.81 L1362.5 1206.81 L1361.92 1206.81 L1361.33 1206.81 L1360.74 1206.81 L1360.16 1206.81 L1359.57 1206.81 L1358.98 1206.81 L1358.4 1206.81 L1357.81 1206.81 L1357.22 1206.81 L1356.64 1206.81 L1356.05 1206.81 L1355.47 1206.81 L1354.88 1206.81 L1354.29 1206.81 L1353.71 1206.81 L1353.12 1206.81 L1352.53 1206.81 L1351.95 1206.81 L1351.36 1206.81 L1350.77 1206.81 L1350.19 1206.81 L1349.6 1206.81 L1349.01 1206.81 L1348.43 1206.81 L1347.84 1206.81 L1347.26 1206.81 L1346.67 1206.81 L1346.08 1206.81 L1345.5 1206.81 L1344.91 1206.81 L1344.32 1206.81 L1343.74 1206.81 L1343.15 1206.81 L1342.56 1206.81 L1341.98 1206.81 L1341.39 1206.81 L1340.8 1206.81 L1340.22 1206.81 L1339.63 1206.81 L1339.05 1206.81 L1338.46 1206.81 L1337.87 1206.81 L1337.29 1206.81 L1336.7 1206.81 L1336.11 1206.81 L1335.53 1206.81 L1334.94 1206.81 L1334.35 1206.81 L1333.77 1206.81 L1333.18 1206.81 L1332.6 1206.81 L1332.01 1206.81 L1331.42 1206.81 L1330.84 1206.81 L1330.25 1206.81 L1329.66 1206.81 L1329.08 1206.81 L1328.49 1206.81 L1327.9 1206.81 L1327.32 1206.81 L1326.73 1206.81 L1326.14 1206.81 L1325.56 1206.81 L1324.97 1206.81 L1324.39 1206.81 L1323.8 1206.81 L1323.21 1206.81 L1322.63 1206.81 L1322.04 1206.81 L1321.45 1206.81 L1320.87 1206.81 L1320.28 1206.81 L1319.69 1206.81 L1319.11 1206.81 L1318.52 1206.81 L1317.93 1206.81 L1317.35 1206.81 L1316.76 1206.81 L1316.18 1206.81 L1315.59 1206.81 L1315 1206.81 L1314.42 1206.81 L1313.83 1206.81 L1313.24 1206.81 L1312.66 1206.81 L1312.07 1206.81 L1311.48 1206.81 L1310.9 1206.81 L1310.31 1206.81 L1309.73 1206.81 L1309.14 1206.81 L1308.55 1206.81 L1307.97 1206.81 L1307.38 1206.81 L1306.79 1206.81 L1306.21 1206.81 L1305.62 1206.81 L1305.03 1206.81 L1304.45 1206.81 L1303.86 1206.81 L1303.27 1206.81 L1302.69 1206.81 L1302.1 1206.81 L1301.52 1206.81 L1300.93 1206.81 L1300.34 1206.81 L1299.76 1206.81 L1299.17 1206.81 L1298.58 1206.81 L1298 1206.81 L1297.41 1206.81 L1296.82 1206.81 L1296.24 1206.81 L1295.65 1206.81 L1295.06 1206.81 L1294.48 1206.81 L1293.89 1206.81 L1293.31 1206.81 L1292.72 1206.81 L1292.13 1206.81 L1291.55 1206.81 L1290.96 1206.81 L1290.37 1206.81 L1289.79 1206.81 L1289.2 1206.81 L1288.61 1206.81 L1288.03 1206.81 L1287.44 1206.81 L1286.86 1206.81 L1286.27 1206.81 L1285.68 1206.81 L1285.1 1206.81 L1284.51 1206.81 L1283.92 1206.81 L1283.34 1206.81 L1282.75 1206.81 L1282.16 1206.81 L1281.58 1206.81 L1280.99 1206.81 L1280.4 1206.81 L1279.82 1206.81 L1279.23 1206.81 L1278.65 1206.81 L1278.06 1206.81 L1277.47 1206.81 L1276.89 1206.81 L1276.3 1206.81 L1275.71 1206.81 L1275.13 1206.81 L1274.54 1206.81 L1273.95 1206.81 L1273.37 1206.81 L1272.78 1206.81 L1272.19 1206.81 L1271.61 1206.81 L1271.02 1206.81 L1270.44 1206.81 L1269.85 1206.81 L1269.26 1206.81 L1268.68 1206.81 L1268.09 1206.81 L1267.5 1206.81 L1266.92 1206.81 L1266.33 1206.81 L1265.74 1206.81 L1265.16 1206.81 L1264.57 1206.81 L1263.98 1206.81 L1263.4 1206.81 L1262.81 1206.81 L1262.23 1206.81 L1261.64 1206.81 L1261.05 1206.81 L1260.47 1206.81 L1259.88 1206.81 L1259.29 1206.81 L1258.71 1206.81 L1258.12 1206.81 L1257.53 1206.81 L1256.95 1206.81 L1256.36 1206.81 L1255.78 1206.81 L1255.19 1206.81 L1254.6 1206.81 L1254.02 1206.81 L1253.43 1206.81 L1252.84 1206.81 L1252.26 1206.81 L1251.67 1206.81 L1251.08 1206.81 L1250.5 1206.81 L1249.91 1206.81 L1249.32 1206.81 L1248.74 1206.81 L1248.15 1206.81 L1247.57 1206.81 L1246.98 1206.81 L1246.39 1206.81 L1245.81 1206.81 L1245.22 1206.81 L1244.63 1206.81 L1244.05 1206.81 L1243.46 1206.81 L1242.87 1206.81 L1242.29 1206.81 L1241.7 1206.81 L1241.11 1206.81 L1240.53 1206.81 L1239.94 1206.81 L1239.36 1206.81 L1238.77 1206.81 L1238.18 1206.81 L1237.6 1206.81 L1237.01 1206.81 L1236.42 1206.81 L1235.84 1206.81 L1235.25 1206.81 L1234.66 1206.81 L1234.08 1206.81 L1233.49 1206.81 L1232.91 1206.81 L1232.32 1206.81 L1231.73 1206.81 L1231.15 1206.81 L1230.56 1206.81 L1229.97 1206.81 L1229.39 1206.81 L1228.8 1206.81 L1228.21 1206.81 L1227.63 1206.81 L1227.04 1206.81 L1226.45 1206.81 L1225.87 1206.81 L1225.28 1206.81 L1224.7 1206.81 L1224.11 1206.81 L1223.52 1206.81 L1222.94 1206.81 L1222.35 1206.81 L1221.76 1206.81 L1221.18 1206.81 L1220.59 1206.81 L1220 1206.81 L1219.42 1206.81 L1218.83 1206.81 L1218.24 1206.81 L1217.66 1206.81 L1217.07 1206.81 L1216.49 1206.81 L1215.9 1206.81 L1215.31 1206.81 L1214.73 1206.81 L1214.14 1206.81 L1213.55 1206.81 L1212.97 1206.81 L1212.38 1206.81 L1211.79 1206.81 L1211.21 1206.81 L1210.62 1206.81 L1210.03 1206.81 L1209.45 1206.81 L1208.86 1206.81 L1208.28 1206.81 L1207.69 1206.81 L1207.1 1206.81 L1206.52 1206.81 L1205.93 1206.81 L1205.34 1206.81 L1204.76 1206.81 L1204.17 1206.81 L1203.58 1206.81 L1203 1206.81 L1202.41 1206.81 L1201.83 1206.81 L1201.24 1206.81 L1200.65 1206.81 L1200.07 1206.81 L1199.48 1206.81 L1198.89 1206.81 L1198.31 1206.81 L1197.72 1206.81 L1197.13 1206.81 L1196.55 1206.81 L1195.96 1206.81 L1195.37 1206.81 L1194.79 1206.81 L1194.2 1206.81 L1193.62 1206.81 L1193.03 1206.81 L1192.44 1206.81 L1191.86 1206.81 L1191.27 1206.81 L1190.68 1206.81 L1190.1 1206.81 L1189.51 1206.81 L1188.92 1206.81 L1188.34 1206.81 L1187.75 1206.81 L1187.16 1206.81 L1186.58 1206.81 L1185.99 1206.81 L1185.41 1206.81 L1184.82 1206.81 L1184.23 1206.81 L1183.65 1206.81 L1183.06 1206.81 L1182.47 1206.81 L1181.89 1206.81 L1181.3 1206.81 L1180.71 1206.81 L1180.13 1206.81 L1179.54 1206.81 L1178.96 1206.81 L1178.37 1206.81 L1177.78 1206.81 L1177.2 1206.81 L1176.61 1206.81 L1176.02 1206.81 L1175.44 1206.81 L1174.85 1206.81 L1174.26 1206.81 L1173.68 1206.81 L1173.09 1206.81 L1172.5 1206.81 L1171.92 1206.81 L1171.33 1206.81 L1170.75 1206.81 L1170.16 1206.81 L1169.57 1206.81 L1168.99 1206.81 L1168.4 1206.81 L1167.81 1206.81 L1167.23 1206.81 L1166.64 1206.81 L1166.05 1206.81 L1165.47 1206.81 L1164.88 1206.81 L1164.29 1206.81 L1163.71 1206.81 L1163.12 1206.81 L1162.54 1206.81 L1161.95 1206.81 L1161.36 1206.81 L1160.78 1206.81 L1160.19 1206.81 L1159.6 1206.81 L1159.02 1206.81 L1158.43 1206.81 L1157.84 1206.81 L1157.26 1206.81 L1156.67 1206.81 L1156.09 1206.81 L1155.5 1206.81 L1154.91 1206.81 L1154.33 1206.81 L1153.74 1206.81 L1153.15 1206.81 L1152.57 1206.81 L1151.98 1206.81 L1151.39 1206.81 L1150.81 1206.81 L1150.22 1206.81 L1149.63 1206.81 L1149.05 1206.81 L1148.46 1206.81 L1147.88 1206.81 L1147.29 1206.81 L1146.7 1206.81 L1146.12 1206.81 L1145.53 1206.81 L1144.94 1206.81 L1144.36 1206.81 L1143.77 1206.81 L1143.18 1206.81 L1142.6 1206.81 L1142.01 1206.81 L1141.42 1206.81 L1140.84 1206.81 L1140.25 1206.81 L1139.67 1206.81 L1139.08 1206.81 L1138.49 1206.81 L1137.91 1206.81 L1137.32 1206.81 L1136.73 1206.81 L1136.15 1206.81 L1135.56 1206.81 L1134.97 1206.81 L1134.39 1206.81 L1133.8 1206.81 L1133.21 1206.81 L1132.63 1206.81 L1132.04 1206.81 L1131.46 1206.81 L1130.87 1206.81 L1130.28 1206.81 L1129.7 1206.81 L1129.11 1206.81 L1128.52 1206.81 L1127.94 1206.81 L1127.35 1206.81 L1126.76 1206.81 L1126.18 1206.81 L1125.59 1206.81 L1125.01 1206.81 L1124.42 1206.81 L1123.83 1206.81 L1123.25 1206.81 L1122.66 1206.81 L1122.07 1206.81 L1121.49 1206.81 L1120.9 1206.81 L1120.31 1206.81 L1119.73 1206.81 L1119.14 1206.81 L1118.55 1206.81 L1117.97 1206.81 L1117.38 1206.81 L1116.8 1206.81 L1116.21 1206.81 L1115.62 1206.81 L1115.04 1206.81 L1114.45 1206.81 L1113.86 1206.81 L1113.28 1206.81 L1112.69 1206.81 L1112.1 1206.81 L1111.52 1206.81 L1110.93 1206.81 L1110.34 1206.81 L1109.76 1206.81 L1109.17 1206.81 L1108.59 1206.81 L1108 1206.81 L1107.41 1206.81 L1106.83 1206.81 L1106.24 1206.81 L1105.65 1206.81 L1105.07 1206.81 L1104.48 1206.81 L1103.89 1206.81 L1103.31 1206.81 L1102.72 1206.81 L1102.14 1206.81 L1101.55 1206.81 L1100.96 1206.81 L1100.38 1206.81 L1099.79 1206.81 L1099.2 1206.81 L1098.62 1206.81 L1098.03 1206.81 L1097.44 1206.81 L1096.86 1206.81 L1096.27 1206.81 L1095.68 1206.81 L1095.1 1206.81 L1094.51 1206.81 L1093.93 1206.81 L1093.34 1206.81 L1092.75 1206.81 L1092.17 1206.81 L1091.58 1206.81 L1090.99 1206.81 L1090.41 1206.81 L1089.82 1206.81 L1089.23 1206.81 L1088.65 1206.81 L1088.06 1206.81 L1087.47 1206.81 L1086.89 1206.81 L1086.3 1206.81 L1085.72 1206.81 L1085.13 1206.81 L1084.54 1206.81 L1083.96 1206.81 L1083.37 1206.81 L1082.78 1206.81 L1082.2 1206.81 L1081.61 1206.81 L1081.02 1206.81 L1080.44 1206.81 L1079.85 1206.81 L1079.26 1206.81 L1078.68 1206.81 L1078.09 1206.81 L1077.51 1206.81 L1076.92 1206.81 L1076.33 1206.81 L1075.75 1206.81 L1075.16 1206.81 L1074.57 1206.81 L1073.99 1206.81 L1073.4 1206.81 L1072.81 1206.81 L1072.23 1206.81 L1071.64 1206.81 L1071.06 1206.81 L1070.47 1206.81 L1069.88 1206.81 L1069.3 1206.81 L1068.71 1206.81 L1068.12 1206.81 L1067.54 1206.81 L1066.95 1206.81 L1066.36 1206.81 L1065.78 1206.81 L1065.19 1206.81 L1064.6 1206.81 L1064.02 1206.81 L1063.43 1206.81 L1062.85 1206.81 L1062.26 1206.81 L1061.67 1206.81 L1061.09 1206.81 L1060.5 1206.81 L1059.91 1206.81 L1059.33 1206.81 L1058.74 1206.81 L1058.15 1206.81 L1057.57 1206.81 L1056.98 1206.81 L1056.39 1206.81 L1055.81 1206.81 L1055.22 1206.81 L1054.64 1206.81 L1054.05 1206.81 L1053.46 1206.81 L1052.88 1206.81 L1052.29 1206.81 L1051.7 1206.81 L1051.12 1206.81 L1050.53 1206.81 L1049.94 1206.81 L1049.36 1206.81 L1048.77 1206.81 L1048.19 1206.81 L1047.6 1206.81 L1047.01 1206.81 L1046.43 1206.81 L1045.84 1206.81 L1045.25 1206.81 L1044.67 1206.81 L1044.08 1206.81 L1043.49 1206.81 L1042.91 1206.81 L1042.32 1206.81 L1041.73 1206.81 L1041.15 1206.81 L1040.56 1206.81 L1039.98 1206.81 L1039.39 1206.81 L1038.8 1206.81 L1038.22 1206.81 L1037.63 1206.81 L1037.04 1206.81 L1036.46 1206.81 L1035.87 1206.81 L1035.28 1206.81 L1034.7 1206.81 L1034.11 1206.81 L1033.52 1206.81 L1032.94 1206.81 L1032.35 1206.81 L1031.77 1206.81 L1031.18 1206.81 L1030.59 1206.81 L1030.01 1206.81 L1029.42 1206.81 L1028.83 1206.81 L1028.25 1206.81 L1027.66 1206.81 L1027.07 1206.81 L1026.49 1206.81 L1025.9 1206.81 L1025.32 1206.81 L1024.73 1206.81 L1024.14 1206.81 L1023.56 1206.81 L1022.97 1206.81 L1022.38 1206.81 L1021.8 1206.81 L1021.21 1206.81 L1020.62 1206.81 L1020.04 1206.81 L1019.45 1206.81 L1018.86 1206.81 L1018.28 1206.81 L1017.69 1206.81 L1017.11 1206.81 L1016.52 1206.81 L1015.93 1206.81 L1015.35 1206.81 L1014.76 1206.81 L1014.17 1206.81 L1013.59 1206.81 L1013 1206.81 L1012.41 1206.81 L1011.83 1206.81 L1011.24 1206.81 L1010.65 1206.81 L1010.07 1206.81 L1009.48 1206.81 L1008.9 1206.81 L1008.31 1206.81 L1007.72 1206.81 L1007.14 1206.81 L1006.55 1206.81 L1005.96 1206.81 L1005.38 1206.81 L1004.79 1206.81 L1004.2 1206.81 L1003.62 1206.81 L1003.03 1206.81 L1002.44 1206.81 L1001.86 1206.81 L1001.27 1206.81 L1000.69 1206.81 L1000.1 1206.81 L999.513 1206.81 L998.926 1206.81 L998.34 1206.81 L997.754 1206.81 L997.167 1206.81 L996.581 1206.81 L995.994 1206.81 L995.408 1206.81 L994.822 1206.81 L994.235 1206.81 L993.649 1206.81 L993.062 1206.81 L992.476 1206.81 L991.889 1206.81 L991.303 1206.81 L990.717 1206.81 L990.13 1206.81 L989.544 1206.81 L988.957 1206.81 L988.371 1206.81 L987.785 1206.81 L987.198 1206.81 L986.612 1206.81 L986.025 1206.81  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1207.24 986.612,1207.24 987.198,1207.24 987.785,1207.24 988.371,1207.24 988.957,1207.24 989.544,1207.24 990.13,1207.24 990.717,1207.24 991.303,1207.24 991.889,1207.24 992.476,1207.24 993.062,1207.24 993.649,1207.24 994.235,1207.24 994.822,1207.24 995.408,1207.24 995.994,1207.24 996.581,1207.24 997.167,1207.24 997.754,1207.24 998.34,1207.24 998.926,1207.24 999.513,1207.24 1000.1,1207.24 1000.69,1207.24 1001.27,1207.24 1001.86,1207.24 1002.44,1207.24 1003.03,1207.24 1003.62,1207.24 1004.2,1207.24 1004.79,1207.24 1005.38,1207.24 1005.96,1207.24 1006.55,1207.24 1007.14,1207.24 1007.72,1207.24 1008.31,1207.24 1008.9,1207.24 1009.48,1207.24 1010.07,1207.24 1010.65,1207.24 1011.24,1207.24 1011.83,1207.24 1012.41,1207.24 1013,1207.24 1013.59,1207.24 1014.17,1207.24 1014.76,1207.24 1015.35,1207.24 1015.93,1207.24 1016.52,1207.24 1017.11,1207.24 1017.69,1207.24 1018.28,1207.24 1018.86,1207.24 1019.45,1207.24 1020.04,1207.24 1020.62,1207.24 1021.21,1207.24 1021.8,1207.24 1022.38,1207.24 1022.97,1207.24 1023.56,1207.24 1024.14,1207.24 1024.73,1207.24 1025.32,1207.24 1025.9,1207.24 1026.49,1207.24 1027.07,1207.24 1027.66,1207.24 1028.25,1207.24 1028.83,1207.24 1029.42,1207.24 1030.01,1207.24 1030.59,1207.24 1031.18,1207.24 1031.77,1207.24 1032.35,1207.24 1032.94,1207.24 1033.52,1207.24 1034.11,1207.24 1034.7,1207.24 1035.28,1207.24 1035.87,1207.24 1036.46,1207.24 1037.04,1207.24 1037.63,1207.24 1038.22,1207.24 1038.8,1207.24 1039.39,1207.24 1039.98,1207.24 1040.56,1207.24 1041.15,1207.24 1041.73,1207.24 1042.32,1207.24 1042.91,1207.24 1043.49,1207.24 1044.08,1207.24 1044.67,1207.24 1045.25,1207.24 1045.84,1207.24 1046.43,1207.24 1047.01,1207.24 1047.6,1207.24 1048.19,1207.24 1048.77,1207.24 1049.36,1207.24 1049.94,1207.24 1050.53,1207.24 1051.12,1207.24 1051.7,1207.24 1052.29,1207.24 1052.88,1207.24 1053.46,1207.24 1054.05,1207.24 1054.64,1207.24 1055.22,1207.24 1055.81,1207.24 1056.39,1207.24 1056.98,1207.24 1057.57,1207.24 1058.15,1207.24 1058.74,1207.24 1059.33,1207.24 1059.91,1207.24 1060.5,1207.24 1061.09,1207.24 1061.67,1207.24 1062.26,1207.24 1062.85,1207.24 1063.43,1207.24 1064.02,1207.24 1064.6,1207.24 1065.19,1207.24 1065.78,1207.24 1066.36,1207.24 1066.95,1207.24 1067.54,1207.24 1068.12,1207.24 1068.71,1207.24 1069.3,1207.24 1069.88,1207.24 1070.47,1207.24 1071.06,1207.24 1071.64,1207.24 1072.23,1207.24 1072.81,1207.24 1073.4,1207.24 1073.99,1207.24 1074.57,1207.24 1075.16,1207.24 1075.75,1207.24 1076.33,1207.24 1076.92,1207.24 1077.51,1207.24 1078.09,1207.24 1078.68,1207.24 1079.26,1207.24 1079.85,1207.24 1080.44,1207.24 1081.02,1207.24 1081.61,1207.24 1082.2,1207.24 1082.78,1207.24 1083.37,1207.24 1083.96,1207.24 1084.54,1207.24 1085.13,1207.24 1085.72,1207.24 1086.3,1207.24 1086.89,1207.24 1087.47,1207.24 1088.06,1207.24 1088.65,1207.24 1089.23,1207.24 1089.82,1207.24 1090.41,1207.24 1090.99,1207.24 1091.58,1207.24 1092.17,1207.24 1092.75,1207.24 1093.34,1207.24 1093.93,1207.24 1094.51,1207.24 1095.1,1207.24 1095.68,1207.24 1096.27,1207.24 1096.86,1207.24 1097.44,1207.24 1098.03,1207.24 1098.62,1207.24 1099.2,1207.24 1099.79,1207.24 1100.38,1207.24 1100.96,1207.24 1101.55,1207.24 1102.14,1207.24 1102.72,1207.24 1103.31,1207.24 1103.89,1207.24 1104.48,1207.24 1105.07,1207.24 1105.65,1207.24 1106.24,1207.24 1106.83,1207.24 1107.41,1207.24 1108,1207.24 1108.59,1207.24 1109.17,1207.24 1109.76,1207.24 1110.34,1207.24 1110.93,1207.24 1111.52,1207.24 1112.1,1207.24 1112.69,1207.24 1113.28,1207.24 1113.86,1207.24 1114.45,1207.24 1115.04,1207.24 1115.62,1207.24 1116.21,1207.24 1116.8,1207.24 1117.38,1207.24 1117.97,1207.24 1118.55,1207.24 1119.14,1207.24 1119.73,1207.24 1120.31,1207.24 1120.9,1207.24 1121.49,1207.24 1122.07,1207.24 1122.66,1207.24 1123.25,1207.24 1123.83,1207.24 1124.42,1207.24 1125.01,1207.24 1125.59,1207.24 1126.18,1207.24 1126.76,1207.24 1127.35,1207.24 1127.94,1207.24 1128.52,1207.24 1129.11,1207.24 1129.7,1207.24 1130.28,1207.24 1130.87,1207.24 1131.46,1207.24 1132.04,1207.24 1132.63,1207.24 1133.21,1207.24 1133.8,1207.24 1134.39,1207.24 1134.97,1207.24 1135.56,1207.24 1136.15,1207.24 1136.73,1207.24 1137.32,1207.24 1137.91,1207.24 1138.49,1207.24 1139.08,1207.24 1139.67,1207.24 1140.25,1207.24 1140.84,1207.24 1141.42,1207.24 1142.01,1207.24 1142.6,1207.24 1143.18,1207.24 1143.77,1207.24 1144.36,1207.24 1144.94,1207.24 1145.53,1207.24 1146.12,1207.24 1146.7,1207.24 1147.29,1207.24 1147.88,1207.24 1148.46,1207.24 1149.05,1207.24 1149.63,1207.24 1150.22,1207.24 1150.81,1207.24 1151.39,1207.24 1151.98,1207.24 1152.57,1207.24 1153.15,1207.24 1153.74,1207.24 1154.33,1207.24 1154.91,1207.24 1155.5,1207.24 1156.09,1207.24 1156.67,1207.24 1157.26,1207.24 1157.84,1207.24 1158.43,1207.24 1159.02,1207.24 1159.6,1207.24 1160.19,1207.24 1160.78,1207.24 1161.36,1207.24 1161.95,1207.24 1162.54,1207.24 1163.12,1207.24 1163.71,1207.24 1164.29,1207.24 1164.88,1207.24 1165.47,1207.24 1166.05,1207.24 1166.64,1207.24 1167.23,1207.24 1167.81,1207.24 1168.4,1207.24 1168.99,1207.24 1169.57,1207.24 1170.16,1207.24 1170.75,1207.24 1171.33,1207.24 1171.92,1207.24 1172.5,1207.24 1173.09,1207.24 1173.68,1207.24 1174.26,1207.24 1174.85,1207.24 1175.44,1207.24 1176.02,1207.24 1176.61,1207.24 1177.2,1207.24 1177.78,1207.24 1178.37,1207.24 1178.96,1207.24 1179.54,1207.24 1180.13,1207.24 1180.71,1207.24 1181.3,1207.24 1181.89,1207.24 1182.47,1207.24 1183.06,1207.24 1183.65,1207.24 1184.23,1207.24 1184.82,1207.24 1185.41,1207.24 1185.99,1207.24 1186.58,1207.24 1187.16,1207.24 1187.75,1207.24 1188.34,1207.24 1188.92,1207.24 1189.51,1207.24 1190.1,1207.24 1190.68,1207.24 1191.27,1207.24 1191.86,1207.24 1192.44,1207.24 1193.03,1207.24 1193.62,1207.24 1194.2,1207.24 1194.79,1207.24 1195.37,1207.24 1195.96,1207.24 1196.55,1207.24 1197.13,1207.24 1197.72,1207.24 1198.31,1207.24 1198.89,1207.24 1199.48,1207.24 1200.07,1207.24 1200.65,1207.24 1201.24,1207.24 1201.83,1207.24 1202.41,1207.24 1203,1207.24 1203.58,1207.24 1204.17,1207.24 1204.76,1207.24 1205.34,1207.24 1205.93,1207.24 1206.52,1207.24 1207.1,1207.24 1207.69,1207.24 1208.28,1207.24 1208.86,1207.24 1209.45,1207.24 1210.03,1207.24 1210.62,1207.24 1211.21,1207.24 1211.79,1207.24 1212.38,1207.24 1212.97,1207.24 1213.55,1207.24 1214.14,1207.24 1214.73,1207.24 1215.31,1207.24 1215.9,1207.24 1216.49,1207.24 1217.07,1207.24 1217.66,1207.24 1218.24,1207.24 1218.83,1207.24 1219.42,1207.24 1220,1207.24 1220.59,1207.24 1221.18,1207.24 1221.76,1207.24 1222.35,1207.24 1222.94,1207.24 1223.52,1207.24 1224.11,1207.24 1224.7,1207.24 1225.28,1207.24 1225.87,1207.24 1226.45,1207.24 1227.04,1207.24 1227.63,1207.24 1228.21,1207.24 1228.8,1207.24 1229.39,1207.24 1229.97,1207.24 1230.56,1207.24 1231.15,1207.24 1231.73,1207.24 1232.32,1207.24 1232.91,1207.24 1233.49,1207.24 1234.08,1207.24 1234.66,1207.24 1235.25,1207.24 1235.84,1207.24 1236.42,1207.24 1237.01,1207.24 1237.6,1207.24 1238.18,1207.24 1238.77,1207.24 1239.36,1207.24 1239.94,1207.24 1240.53,1207.24 1241.11,1207.24 1241.7,1207.24 1242.29,1207.24 1242.87,1207.24 1243.46,1207.24 1244.05,1207.24 1244.63,1207.24 1245.22,1207.24 1245.81,1207.24 1246.39,1207.24 1246.98,1207.24 1247.57,1207.24 1248.15,1207.24 1248.74,1207.24 1249.32,1207.24 1249.91,1207.24 1250.5,1207.24 1251.08,1207.24 1251.67,1207.24 1252.26,1207.24 1252.84,1207.24 1253.43,1207.24 1254.02,1207.24 1254.6,1207.24 1255.19,1207.24 1255.78,1207.24 1256.36,1207.24 1256.95,1207.24 1257.53,1207.24 1258.12,1207.24 1258.71,1207.24 1259.29,1207.24 1259.88,1207.24 1260.47,1207.24 1261.05,1207.24 1261.64,1207.24 1262.23,1207.24 1262.81,1207.24 1263.4,1207.24 1263.98,1207.24 1264.57,1207.24 1265.16,1207.24 1265.74,1207.24 1266.33,1207.24 1266.92,1207.24 1267.5,1207.24 1268.09,1207.24 1268.68,1207.24 1269.26,1207.24 1269.85,1207.24 1270.44,1207.24 1271.02,1207.24 1271.61,1207.24 1272.19,1207.24 1272.78,1207.24 1273.37,1207.24 1273.95,1207.24 1274.54,1207.24 1275.13,1207.24 1275.71,1207.24 1276.3,1207.24 1276.89,1207.24 1277.47,1207.24 1278.06,1207.24 1278.65,1207.24 1279.23,1207.24 1279.82,1207.24 1280.4,1207.24 1280.99,1207.24 1281.58,1207.24 1282.16,1207.24 1282.75,1207.24 1283.34,1207.24 1283.92,1207.24 1284.51,1207.24 1285.1,1207.24 1285.68,1207.24 1286.27,1207.24 1286.86,1207.24 1287.44,1207.24 1288.03,1207.24 1288.61,1207.24 1289.2,1207.24 1289.79,1207.24 1290.37,1207.24 1290.96,1207.24 1291.55,1207.24 1292.13,1207.24 1292.72,1207.24 1293.31,1207.24 1293.89,1207.24 1294.48,1207.24 1295.06,1207.24 1295.65,1207.24 1296.24,1207.24 1296.82,1207.24 1297.41,1207.24 1298,1207.24 1298.58,1207.24 1299.17,1207.24 1299.76,1207.24 1300.34,1207.24 1300.93,1207.24 1301.52,1207.24 1302.1,1207.24 1302.69,1207.24 1303.27,1207.24 1303.86,1207.24 1304.45,1207.24 1305.03,1207.24 1305.62,1207.24 1306.21,1207.24 1306.79,1207.24 1307.38,1207.24 1307.97,1207.24 1308.55,1207.24 1309.14,1207.24 1309.73,1207.24 1310.31,1207.24 1310.9,1207.24 1311.48,1207.24 1312.07,1207.24 1312.66,1207.24 1313.24,1207.24 1313.83,1207.24 1314.42,1207.24 1315,1207.24 1315.59,1207.24 1316.18,1207.24 1316.76,1207.24 1317.35,1207.24 1317.93,1207.24 1318.52,1207.24 1319.11,1207.24 1319.69,1207.24 1320.28,1207.24 1320.87,1207.24 1321.45,1207.24 1322.04,1207.24 1322.63,1207.24 1323.21,1207.24 1323.8,1207.24 1324.39,1207.24 1324.97,1207.24 1325.56,1207.24 1326.14,1207.24 1326.73,1207.24 1327.32,1207.24 1327.9,1207.24 1328.49,1207.24 1329.08,1207.24 1329.66,1207.24 1330.25,1207.24 1330.84,1207.24 1331.42,1207.24 1332.01,1207.24 1332.6,1207.24 1333.18,1207.24 1333.77,1207.24 1334.35,1207.24 1334.94,1207.24 1335.53,1207.24 1336.11,1207.24 1336.7,1207.24 1337.29,1207.24 1337.87,1207.24 1338.46,1207.24 1339.05,1207.24 1339.63,1207.24 1340.22,1207.24 1340.8,1207.24 1341.39,1207.24 1341.98,1207.24 1342.56,1207.24 1343.15,1207.24 1343.74,1207.24 1344.32,1207.24 1344.91,1207.24 1345.5,1207.24 1346.08,1207.24 1346.67,1207.24 1347.26,1207.24 1347.84,1207.24 1348.43,1207.24 1349.01,1207.24 1349.6,1207.24 1350.19,1207.24 1350.77,1207.24 1351.36,1207.24 1351.95,1207.24 1352.53,1207.24 1353.12,1207.24 1353.71,1207.24 1354.29,1207.24 1354.88,1207.24 1355.47,1207.24 1356.05,1207.24 1356.64,1207.24 1357.22,1207.24 1357.81,1207.24 1358.4,1207.24 1358.98,1207.24 1359.57,1207.24 1360.16,1207.24 1360.74,1207.24 1361.33,1207.24 1361.92,1207.24 1362.5,1207.24 1363.09,1207.24 1363.68,1207.24 1364.26,1207.24 1364.85,1207.24 1365.43,1207.24 1366.02,1207.24 1366.61,1207.24 1367.19,1207.24 1367.78,1207.24 1368.37,1207.24 1368.95,1207.24 1369.54,1207.24 1370.13,1207.24 1370.71,1207.24 1371.3,1207.24 1371.88,1207.24 1372.47,1207.24 1373.06,1207.24 1373.64,1207.24 1374.23,1207.24 1374.82,1207.24 1375.4,1207.24 1375.99,1207.24 1376.58,1207.24 1377.16,1207.24 1377.75,1207.24 1378.34,1207.24 1378.92,1207.24 1379.51,1207.24 1380.09,1207.24 1380.68,1207.24 1381.27,1207.24 1381.85,1207.24 1382.44,1207.24 1383.03,1207.24 1383.61,1207.24 1384.2,1207.24 1384.79,1207.24 1385.37,1207.24 1385.96,1207.24 1386.55,1207.24 1387.13,1207.24 1387.72,1207.24 1388.3,1207.24 1388.89,1207.24 1389.48,1207.24 1390.06,1207.24 1390.65,1207.24 1391.24,1207.24 1391.82,1207.24 1392.41,1207.24 1393,1207.24 1393.58,1207.24 1394.17,1207.24 1394.75,1207.24 1395.34,1207.24 1395.93,1207.24 1396.51,1207.24 1397.1,1207.24 1397.69,1207.24 1398.27,1207.24 1398.86,1207.24 1399.45,1207.24 1400.03,1207.24 1400.62,1207.24 1401.21,1207.24 1401.79,1207.24 1402.38,1207.24 1402.96,1207.24 1403.55,1207.24 1404.14,1207.24 1404.72,1207.24 1405.31,1207.24 1405.9,1207.24 1406.48,1207.24 1407.07,1207.24 1407.66,1207.24 1408.24,1207.24 1408.83,1207.24 1409.42,1207.24 1410,1207.24 1410.59,1207.24 1411.17,1207.24 1411.76,1207.24 1412.35,1207.24 1412.93,1207.24 1413.52,1207.24 1414.11,1207.24 1414.69,1207.24 1415.28,1207.24 1415.87,1207.24 1416.45,1207.24 1417.04,1207.24 1417.63,1207.24 1418.21,1207.24 1418.8,1207.24 1419.38,1207.24 1419.97,1207.24 1420.56,1207.24 1421.14,1207.24 1421.73,1207.24 1422.32,1207.24 1422.9,1207.24 1423.49,1207.24 1424.08,1207.24 1424.66,1207.24 1425.25,1207.24 1425.83,1207.24 1426.42,1207.24 1427.01,1207.24 1427.59,1207.24 1428.18,1207.24 1428.77,1207.24 1429.35,1207.24 1429.94,1207.24 1430.53,1207.24 1431.11,1207.24 1431.7,1207.24 1432.29,1207.24 1432.87,1207.24 1433.46,1207.24 1434.04,1207.24 1434.63,1207.24 1435.22,1207.24 1435.8,1207.24 1436.39,1207.24 1436.98,1207.24 1437.56,1207.24 1438.15,1207.24 1438.74,1207.24 1439.32,1207.24 1439.91,1207.24 1440.5,1207.24 1441.08,1207.24 1441.67,1207.24 1442.25,1207.24 1442.84,1207.24 1443.43,1207.24 1444.01,1207.24 1444.6,1207.24 1445.19,1207.24 1445.77,1207.24 1446.36,1207.24 1446.95,1207.24 1447.53,1207.24 1448.12,1207.24 1448.7,1207.24 1449.29,1207.24 1449.88,1207.24 1450.46,1207.24 1451.05,1207.24 1451.64,1207.24 1452.22,1207.24 1452.81,1207.24 1453.4,1207.24 1453.98,1207.24 1454.57,1207.24 1455.16,1207.24 1455.74,1207.24 1456.33,1207.24 1456.91,1207.24 1457.5,1207.24 1458.09,1207.24 1458.67,1207.24 1459.26,1207.24 1459.85,1207.24 1460.43,1207.24 1461.02,1207.24 1461.61,1207.24 1462.19,1207.24 1462.78,1207.24 1463.37,1207.24 1463.95,1207.24 1464.54,1207.24 1465.12,1207.24 1465.71,1207.24 1466.3,1207.24 1466.88,1207.24 1467.47,1207.24 1468.06,1207.24 1468.64,1207.24 1469.23,1207.24 1469.82,1207.24 1470.4,1207.24 1470.99,1207.24 1471.57,1207.24 1472.16,1207.24 1472.75,1207.24 1473.33,1207.24 1473.92,1207.24 1474.51,1207.24 1475.09,1207.24 1475.68,1207.24 1476.27,1207.24 1476.85,1207.24 1477.44,1207.24 1478.03,1207.24 1478.61,1207.24 1479.2,1207.24 1479.78,1207.24 1480.37,1207.24 1480.96,1207.24 1481.54,1207.24 1482.13,1207.24 1482.72,1207.24 1483.3,1207.24 1483.89,1207.24 1484.48,1207.24 1485.06,1207.24 1485.65,1207.24 1486.24,1207.24 1486.82,1207.24 1487.41,1207.24 1487.99,1207.24 1488.58,1207.24 1489.17,1207.24 1489.75,1207.24 1490.34,1207.24 1490.93,1207.24 1491.51,1207.24 1492.1,1207.24 1492.69,1207.24 1493.27,1207.24 1493.86,1207.24 1494.45,1207.24 1495.03,1207.24 1495.62,1207.24 1496.2,1207.24 1496.79,1207.24 1497.38,1207.24 1497.96,1207.24 1498.55,1207.24 1499.14,1207.24 1499.72,1207.24 1500.31,1207.24 1500.9,1207.24 1501.48,1207.24 1502.07,1207.24 1502.65,1207.24 1503.24,1207.24 1503.83,1207.24 1504.41,1207.24 1505,1207.24 1505.59,1207.24 1506.17,1207.24 1506.76,1207.24 1507.35,1207.24 1507.93,1207.24 1508.52,1207.24 1509.11,1207.24 1509.69,1207.24 1510.28,1207.24 1510.86,1207.24 1511.45,1207.24 1512.04,1207.24 1512.62,1207.24 1513.21,1207.24 1513.8,1207.24 1514.38,1207.24 1514.97,1207.24 1515.56,1207.24 1516.14,1207.24 1516.73,1207.24 1517.32,1207.24 1517.9,1207.24 1518.49,1207.24 1519.07,1207.24 1519.66,1207.24 1520.25,1207.24 1520.83,1207.24 1521.42,1207.24 1522.01,1207.24 1522.59,1207.24 1523.18,1207.24 1523.77,1207.24 1524.35,1207.24 1524.94,1207.24 1525.52,1207.24 1526.11,1207.24 1526.7,1207.24 1527.28,1207.24 1527.87,1207.24 1528.46,1207.24 1529.04,1207.24 1529.63,1207.24 1530.22,1207.24 1530.8,1207.24 1531.39,1207.24 1531.98,1207.24 1532.56,1207.24 1533.15,1207.24 1533.73,1207.24 1534.32,1207.24 1534.91,1207.24 1535.49,1207.24 1536.08,1207.24 1536.67,1207.24 1537.25,1207.24 1537.84,1207.24 1538.43,1207.24 1539.01,1207.24 1539.6,1207.24 1540.19,1207.24 1540.77,1207.24 1541.36,1207.24 1541.94,1207.24 1542.53,1207.24 1543.12,1207.24 1543.7,1207.24 1544.29,1207.24 1544.88,1207.24 1545.46,1207.24 1546.05,1207.24 1546.64,1207.24 1547.22,1207.24 1547.81,1207.24 1548.4,1207.24 1548.98,1207.24 1549.57,1207.24 1550.15,1207.24 1550.74,1207.24 1551.33,1207.24 1551.91,1207.24 1552.5,1207.24 1553.09,1207.24 1553.67,1207.24 1554.26,1207.24 1554.85,1207.24 1555.43,1207.24 1556.02,1207.24 1556.6,1207.24 1557.19,1207.24 1557.78,1207.24 1558.36,1207.24 1558.95,1207.24 1559.54,1207.24 1560.12,1207.24 1560.71,1207.24 1561.3,1207.24 1561.88,1207.24 1562.47,1207.24 1563.06,1207.24 1563.64,1207.24 1564.23,1207.24 1564.81,1207.24 1565.4,1207.24 1565.99,1207.24 1566.57,1207.24 1567.16,1207.24 1567.75,1207.24 1568.33,1207.24 1568.92,1207.24 1569.51,1207.24 1570.09,1207.24 1570.68,1207.24 1571.27,1207.24 1571.85,1207.24 1572.44,1207.24 1573.02,1207.24 1573.61,1207.24 1574.2,1207.24 1574.78,1207.24 1575.37,1207.24 1575.96,1207.24 1576.54,1207.24 1577.13,1207.24 1577.72,1207.24 1578.3,1207.24 1578.89,1207.24 1579.47,1207.24 1580.06,1207.24 1580.65,1207.24 1581.23,1207.24 1581.82,1207.24 1582.41,1207.24 1582.99,1207.24 1583.58,1207.24 1584.17,1207.24 1584.75,1207.24 1585.34,1207.24 1585.93,1207.24 1586.51,1207.24 1587.1,1207.24 1587.68,1207.24 1588.27,1207.24 1588.86,1207.24 1589.44,1207.24 1590.03,1207.24 1590.62,1207.24 1591.2,1207.24 1591.79,1207.24 1592.38,1207.24 1592.96,1207.24 1593.55,1207.24 1594.14,1207.24 1594.72,1207.24 1595.31,1207.24 1595.89,1207.24 1596.48,1207.24 1597.07,1207.24 1597.65,1207.24 1598.24,1207.24 1598.83,1207.24 1599.41,1207.24 1600,1207.24 1600.59,1207.24 1601.17,1207.24 1601.76,1207.24 1602.34,1207.24 1602.93,1207.24 1603.52,1207.24 1604.1,1207.24 1604.69,1207.24 1605.28,1207.24 1605.86,1207.24 1606.45,1207.24 1607.04,1207.24 1607.62,1207.24 1608.21,1207.24 1608.8,1207.24 1609.38,1207.24 1609.97,1207.24 1610.55,1207.24 1611.14,1207.24 1611.73,1207.24 1612.31,1207.24 1612.9,1207.24 1613.49,1207.24 1614.07,1207.24 1614.66,1207.24 1615.25,1207.24 1615.83,1207.24 1616.42,1207.24 1617.01,1207.24 1617.59,1207.24 1618.18,1207.24 1618.76,1207.24 1619.35,1207.24 1619.94,1207.24 1620.52,1207.24 1621.11,1207.24 1621.7,1207.24 1622.28,1207.24 1622.87,1207.24 1623.46,1207.24 1624.04,1207.24 1624.63,1207.24 1625.22,1207.24 1625.8,1207.24 1626.39,1207.24 1626.97,1207.24 1627.56,1207.24 1628.15,1207.24 1628.73,1207.24 1629.32,1207.24 1629.91,1207.24 1630.49,1207.24 1631.08,1207.24 1631.67,1207.24 1632.25,1207.24 1632.84,1207.24 1633.42,1207.24 1634.01,1207.24 1634.6,1207.24 1635.18,1207.24 1635.77,1207.24 1636.36,1207.24 1636.94,1207.24 1637.53,1207.24 1638.12,1207.24 1638.7,1207.24 1639.29,1207.24 1639.88,1207.24 1640.46,1207.24 1641.05,1207.24 1641.63,1207.24 1642.22,1207.24 1642.81,1207.24 1643.39,1207.24 1643.98,1207.24 1644.57,1207.24 1645.15,1207.24 1645.74,1207.24 1646.33,1207.24 1646.91,1207.24 1647.5,1207.24 1648.09,1207.24 1648.67,1207.24 1649.26,1207.24 1649.84,1207.24 1650.43,1207.24 1651.02,1207.24 1651.6,1207.24 1652.19,1207.24 1652.78,1207.24 1653.36,1207.24 1653.95,1207.24 1654.54,1207.24 1655.12,1207.24 1655.71,1207.24 1656.29,1207.24 1656.88,1207.24 1657.47,1207.24 1658.05,1207.24 1658.64,1207.24 1659.23,1207.24 1659.81,1207.24 1660.4,1207.24 1660.99,1207.24 1661.57,1207.24 1662.16,1207.24 1662.75,1207.24 1663.33,1207.24 1663.92,1207.24 1664.5,1207.24 1665.09,1207.24 1665.68,1207.24 1666.26,1207.24 1666.85,1207.24 1667.44,1207.24 1668.02,1207.24 1668.61,1207.24 1669.2,1207.24 1669.78,1207.24 1670.37,1207.24 1670.96,1207.24 1671.54,1207.24 1672.13,1207.24 1672.71,1207.24 1673.3,1207.24 1673.89,1207.24 1674.47,1207.24 1675.06,1207.24 1675.65,1207.24 1676.23,1207.24 1676.82,1207.24 1677.41,1207.24 1677.99,1207.24 1678.58,1207.24 1679.17,1207.24 1679.75,1207.24 1680.34,1207.24 1680.92,1207.24 1681.51,1207.24 1682.1,1207.24 1682.68,1207.24 1683.27,1207.24 1683.86,1207.24 1684.44,1207.24 1685.03,1207.24 1685.62,1207.24 1686.2,1207.24 1686.79,1207.24 1687.37,1207.24 1687.96,1207.24 1688.55,1207.24 1689.13,1207.24 1689.72,1207.24 1690.31,1207.24 1690.89,1207.24 1691.48,1207.24 1692.07,1207.24 1692.65,1207.24 1693.24,1207.24 1693.83,1207.24 1694.41,1207.24 1695,1207.24 1695.58,1207.24 1696.17,1207.24 1696.76,1207.24 1697.34,1207.24 1697.93,1207.24 1698.52,1207.24 1699.1,1207.24 1699.69,1207.24 1700.28,1207.24 1700.86,1207.24 1701.45,1207.24 1702.04,1207.24 1702.62,1207.24 1703.21,1207.24 1703.79,1207.24 1704.38,1207.24 1704.97,1207.24 1705.55,1207.24 1706.14,1207.24 1706.73,1207.24 1707.31,1207.24 1707.9,1207.24 1708.49,1207.24 1709.07,1207.24 1709.66,1207.24 1710.24,1207.24 1710.83,1207.24 1711.42,1207.24 1712,1207.24 1712.59,1207.24 1713.18,1207.24 1713.76,1207.24 1714.35,1207.24 1714.94,1207.24 1715.52,1207.24 1716.11,1207.24 1716.7,1207.24 1717.28,1207.24 1717.87,1207.24 1718.45,1207.24 1719.04,1207.24 1719.63,1207.24 1720.21,1207.24 1720.8,1207.24 1721.39,1207.24 1721.97,1207.24 1722.56,1207.24 1723.15,1207.24 1723.73,1207.24 1724.32,1207.24 1724.91,1207.24 1725.49,1207.24 1726.08,1207.24 1726.66,1207.24 1727.25,1207.24 1727.84,1207.24 1728.42,1207.24 1729.01,1207.24 1729.6,1207.24 1730.18,1207.24 1730.77,1207.24 1731.36,1207.24 1731.94,1207.24 1732.53,1207.24 1733.11,1207.24 1733.7,1207.24 1734.29,1207.24 1734.87,1207.24 1735.46,1207.24 1736.05,1207.24 1736.63,1207.24 1737.22,1207.24 1737.81,1207.24 1738.39,1207.24 1738.98,1207.24 1739.57,1207.24 1740.15,1207.24 1740.74,1207.24 1741.32,1207.24 1741.91,1207.24 1742.5,1207.24 1743.08,1207.24 1743.67,1207.24 1744.26,1207.24 1744.84,1207.24 1745.43,1207.24 1746.02,1207.24 1746.6,1207.24 1747.19,1207.24 1747.78,1207.24 1748.36,1207.24 1748.95,1207.24 1749.53,1207.24 1750.12,1207.24 1750.71,1207.24 1751.29,1207.24 1751.88,1207.24 1752.47,1207.24 1753.05,1207.24 1753.64,1207.24 1754.23,1207.24 1754.81,1207.24 1755.4,1207.24 1755.99,1207.24 1756.57,1207.24 1757.16,1207.24 1757.74,1207.24 1758.33,1207.24 1758.92,1207.24 1759.5,1207.24 1760.09,1207.24 1760.68,1207.24 1761.26,1207.24 1761.85,1207.24 1762.44,1207.24 1763.02,1207.24 1763.61,1207.24 1764.19,1207.24 1764.78,1207.24 1765.37,1207.24 1765.95,1207.24 1766.54,1207.24 1767.13,1207.24 1767.71,1207.24 1768.3,1207.24 1768.89,1207.24 1769.47,1207.24 1770.06,1207.24 1770.65,1207.24 1771.23,1207.24 1771.82,1207.24 1772.4,1207.24 1772.99,1207.24 1773.58,1207.24 1774.16,1207.24 1774.75,1207.24 1775.34,1207.24 1775.92,1207.24 1776.51,1207.24 1777.1,1207.24 1777.68,1207.24 1778.27,1207.24 1778.86,1207.24 1779.44,1207.24 1780.03,1207.24 1780.61,1207.24 1781.2,1207.24 1781.79,1207.24 1782.37,1207.24 1782.96,1207.24 1783.55,1207.24 1784.13,1207.24 1784.72,1207.24 1785.31,1207.24 1785.89,1207.24 1786.48,1207.24 1787.06,1207.24 1787.65,1207.24 1788.24,1207.24 1788.82,1207.24 1789.41,1207.24 1790,1207.24 1790.58,1207.24 1791.17,1207.24 1791.76,1207.24 1792.34,1207.24 1792.93,1207.24 1793.52,1207.24 1794.1,1207.24 1794.69,1207.24 1795.27,1207.24 1795.86,1207.24 1796.45,1207.24 1797.03,1207.24 1797.62,1207.24 1798.21,1207.24 1798.79,1207.24 1799.38,1207.24 1799.97,1207.24 1800.55,1207.24 1801.14,1207.24 1801.73,1207.24 1802.31,1207.24 1802.9,1207.24 1803.48,1207.24 1804.07,1207.24 1804.66,1207.24 1805.24,1207.24 1805.83,1207.24 1806.42,1207.24 1807,1207.24 1807.59,1207.24 1808.18,1207.24 1808.76,1207.24 1809.35,1207.24 1809.94,1207.24 1810.52,1207.24 1811.11,1207.24 1811.69,1207.24 1812.28,1207.24 1812.87,1207.24 1813.45,1207.24 1814.04,1207.24 1814.63,1207.24 1815.21,1207.24 1815.8,1207.24 1816.39,1207.24 1816.97,1207.24 1817.56,1207.24 1818.14,1207.24 1818.73,1207.24 1819.32,1207.24 1819.9,1207.24 1820.49,1207.24 1821.08,1207.24 1821.66,1207.24 1822.25,1207.24 1822.84,1207.24 1823.42,1207.24 1824.01,1207.24 1824.6,1207.24 1825.18,1207.24 1825.77,1207.24 1826.35,1207.24 1826.94,1207.24 1827.53,1207.24 1828.11,1207.24 1828.7,1207.24 1829.29,1207.24 1829.87,1207.24 1830.46,1207.24 1831.05,1207.24 1831.63,1207.24 1832.22,1207.24 1832.81,1207.24 1833.39,1207.24 1833.98,1207.24 1834.56,1207.24 1835.15,1207.24 1835.74,1207.24 1836.32,1207.24 1836.91,1207.24 1837.5,1207.24 1838.08,1207.24 1838.67,1207.24 1839.26,1207.24 1839.84,1207.24 1840.43,1207.24 1841.01,1207.24 1841.6,1207.24 1842.19,1207.24 1842.77,1207.24 1843.36,1207.24 1843.95,1207.24 1844.53,1207.24 1845.12,1207.24 1845.71,1207.24 1846.29,1207.24 1846.88,1207.24 1847.47,1207.24 1848.05,1207.24 1848.64,1207.24 1849.22,1207.24 1849.81,1207.24 1850.4,1207.24 1850.98,1207.24 1851.57,1207.24 1852.16,1207.24 1852.74,1207.24 1853.33,1207.24 1853.92,1207.24 1854.5,1207.24 1855.09,1207.24 1855.68,1207.24 1856.26,1207.24 1856.85,1207.24 1857.43,1207.24 1858.02,1207.24 1858.61,1207.24 1859.19,1207.24 1859.78,1207.24 1860.37,1207.24 1860.95,1207.24 1861.54,1207.24 1862.13,1207.24 1862.71,1207.24 1863.3,1207.24 1863.88,1207.24 1864.47,1207.24 1865.06,1207.24 1865.64,1207.24 1866.23,1207.24 1866.82,1207.24 1867.4,1207.24 1867.99,1207.24 1868.58,1207.24 1869.16,1207.24 1869.75,1207.24 1870.34,1207.24 1870.92,1207.24 1871.51,1207.24 1872.09,1207.24 1872.68,1207.24 1873.27,1207.24 1873.85,1207.24 1874.44,1207.24 1875.03,1207.24 1875.61,1207.24 1876.2,1207.24 1876.79,1207.24 1877.37,1207.24 1877.96,1207.24 1878.55,1207.24 1879.13,1207.24 1879.72,1207.24 1880.3,1207.24 1880.89,1207.24 1881.48,1207.24 1882.06,1207.24 1882.65,1207.24 1883.24,1207.24 1883.82,1207.24 1884.41,1207.24 1885,1207.24 1885.58,1207.24 1886.17,1207.24 1886.76,1207.24 1887.34,1207.24 1887.93,1207.24 1888.51,1207.24 1889.1,1207.24 1889.69,1207.24 1890.27,1207.24 1890.86,1207.24 1891.45,1207.24 1892.03,1207.24 1892.62,1207.24 1893.21,1207.24 1893.79,1207.24 1894.38,1207.24 1894.96,1207.24 1895.55,1207.24 1896.14,1207.24 1896.72,1207.24 1897.31,1207.24 1897.9,1207.24 1898.48,1207.24 1899.07,1207.24 1899.66,1207.24 1900.24,1207.24 1900.83,1207.24 1901.42,1207.24 1902,1207.24 1902.59,1207.24 1903.17,1207.24 1903.76,1207.24 1904.35,1207.24 1904.93,1207.24 1905.52,1207.24 1906.11,1207.24 1906.69,1207.24 1907.28,1207.24 1907.87,1207.24 1908.45,1207.24 1909.04,1207.24 1909.63,1207.24 1910.21,1207.24 1910.8,1207.24 1911.38,1207.24 1911.97,1207.24 1912.56,1207.24 1913.14,1207.24 1913.73,1207.24 1914.32,1207.24 1914.9,1207.24 1915.49,1207.24 1916.08,1207.24 1916.66,1207.24 1917.25,1207.24 1917.83,1207.24 1918.42,1207.24 1919.01,1207.24 1919.59,1207.24 1920.18,1207.24 1920.77,1207.24 1921.35,1207.24 1921.94,1207.24 1922.53,1207.24 1923.11,1207.24 1923.7,1207.24 1924.29,1207.24 1924.87,1207.24 1925.46,1207.24 1926.04,1207.24 1926.63,1207.24 1927.22,1207.24 1927.8,1207.24 1928.39,1207.24 1928.98,1207.24 1929.56,1207.24 1930.15,1207.24 1930.74,1207.24 1931.32,1207.24 1931.91,1207.24 1932.5,1207.24 1933.08,1207.24 1933.67,1207.24 1934.25,1207.24 1934.84,1207.24 1935.43,1207.24 1936.01,1207.24 1936.6,1207.24 1937.19,1207.24 1937.77,1207.24 1938.36,1207.24 1938.95,1207.24 1939.53,1207.24 1940.12,1207.24 1940.71,1207.24 1941.29,1207.24 1941.88,1207.24 1942.46,1207.24 1943.05,1207.24 1943.64,1207.24 1944.22,1207.24 1944.81,1207.24 1945.4,1207.24 1945.98,1207.24 1946.57,1207.24 1947.16,1207.24 1947.74,1207.24 1948.33,1207.24 1948.91,1207.24 1949.5,1207.24 1950.09,1207.24 1950.67,1207.24 1951.26,1207.24 1951.85,1207.24 1952.43,1207.24 1953.02,1207.24 1953.61,1207.24 1954.19,1207.24 1954.78,1207.24 1955.37,1207.24 1955.95,1207.24 1956.54,1207.24 1957.12,1207.24 1957.71,1207.24 1958.3,1207.24 1958.88,1207.24 1959.47,1207.24 1960.06,1207.24 1960.64,1207.24 1961.23,1207.24 1961.82,1207.24 1962.4,1207.24 1962.99,1207.24 1963.58,1207.24 1964.16,1207.24 1964.75,1207.24 1965.33,1207.24 1965.92,1207.24 1966.51,1207.24 1967.09,1207.24 1967.68,1207.24 1968.27,1207.24 1968.85,1207.24 1969.44,1207.24 1970.03,1207.24 1970.61,1207.24 1971.2,1207.24 1971.78,1207.24 1972.37,1207.24 1972.96,1207.24 1973.54,1207.24 1974.13,1207.24 1974.72,1207.24 1975.3,1207.24 1975.89,1207.24 1976.48,1207.24 1977.06,1207.24 1977.65,1207.24 1978.24,1207.24 1978.82,1207.24 1979.41,1207.24 1979.99,1207.24 1980.58,1207.24 1981.17,1207.24 1981.75,1207.24 1982.34,1207.24 1982.93,1207.24 1983.51,1207.24 1984.1,1207.24 1984.69,1207.24 1985.27,1207.24 1985.86,1207.24 1986.45,1207.24 1987.03,1207.24 1987.62,1207.24 1988.2,1207.24 1988.79,1207.24 1989.38,1207.24 1989.96,1207.24 1990.55,1207.24 1991.14,1207.24 1991.72,1207.24 1992.31,1207.24 1992.9,1207.24 1993.48,1207.24 1994.07,1207.24 1994.65,1207.24 1995.24,1207.24 1995.83,1207.24 1996.41,1207.24 1997,1207.24 1997.59,1207.24 1998.17,1207.24 1998.76,1207.24 1999.35,1207.24 1999.93,1207.24 2000.52,1207.24 2001.11,1207.24 2001.69,1207.24 2002.28,1207.24 2002.86,1207.24 2003.45,1207.24 2004.04,1207.24 2004.62,1207.24 2005.21,1207.24 2005.8,1207.24 2006.38,1207.24 2006.97,1207.24 2007.56,1207.24 2008.14,1207.24 2008.73,1207.24 2009.32,1207.24 2009.9,1207.24 2010.49,1207.24 2011.07,1207.24 2011.66,1207.24 2012.25,1207.24 2012.83,1207.24 2013.42,1207.24 2014.01,1207.24 2014.59,1207.24 2015.18,1207.24 2015.77,1207.24 2016.35,1207.24 2016.94,1207.24 2017.53,1207.24 2018.11,1207.24 2018.7,1207.24 2019.28,1207.24 2019.87,1207.24 2020.46,1207.24 2021.04,1207.24 2021.63,1207.24 2022.22,1207.24 2022.8,1207.24 2023.39,1207.24 2023.98,1207.24 2024.56,1207.24 2025.15,1207.24 2025.73,1207.24 2026.32,1207.24 2026.91,1207.24 2027.49,1207.24 2028.08,1207.24 2028.67,1207.24 2029.25,1207.24 2029.84,1207.24 2030.43,1207.24 2031.01,1207.24 2031.6,1207.24 2032.19,1207.24 2032.77,1207.24 2033.36,1207.24 2033.94,1207.24 2034.53,1207.24 2035.12,1207.24 2035.7,1207.24 2036.29,1207.24 2036.88,1207.24 2037.46,1207.24 2038.05,1207.24 2038.64,1207.24 2039.22,1207.24 2039.81,1207.24 2040.4,1207.24 2040.98,1207.24 2041.57,1207.24 2042.15,1207.24 2042.74,1207.24 2043.33,1207.24 2043.91,1207.24 2044.5,1207.24 2045.09,1207.24 2045.67,1207.24 2046.26,1207.24 2046.85,1207.24 2047.43,1207.24 2048.02,1207.24 2048.6,1207.24 2049.19,1207.24 2049.78,1207.24 2050.36,1207.24 2050.95,1207.24 2051.54,1207.24 2052.12,1207.24 2052.71,1207.24 2053.3,1207.24 2053.88,1207.24 2054.47,1207.24 2055.06,1207.24 2055.64,1207.24 2056.23,1207.24 2056.81,1207.24 2057.4,1207.24 2057.99,1207.24 2058.57,1207.24 2059.16,1207.24 2059.75,1207.24 2060.33,1207.24 2060.92,1207.24 2061.51,1207.24 2062.09,1207.24 2062.68,1207.24 2063.27,1207.24 2063.85,1207.24 2064.44,1207.24 2065.02,1207.24 2065.61,1207.24 2066.2,1207.24 2066.78,1207.24 2067.37,1207.24 2067.96,1207.24 2068.54,1207.24 2069.13,1207.24 2069.72,1207.24 2070.3,1207.24 2070.89,1207.24 2071.48,1207.24 2072.06,1207.24 2072.65,1207.24 2073.23,1207.24 2073.82,1207.24 2074.41,1207.24 2074.99,1207.24 2075.58,1207.24 2076.17,1207.24 2076.75,1207.24 2077.34,1207.24 2077.93,1207.24 2078.51,1207.24 2079.1,1207.24 2079.68,1207.24 2080.27,1207.24 2080.86,1207.24 2081.44,1207.24 2082.03,1207.24 2082.62,1207.24 2083.2,1207.24 2083.79,1207.24 2084.38,1207.24 2084.96,1207.24 2085.55,1207.24 2086.14,1207.24 2086.72,1207.24 2087.31,1207.24 2087.89,1207.24 2088.48,1207.24 2089.07,1207.24 2089.65,1207.24 2090.24,1207.24 2090.83,1207.24 2091.41,1207.24 2092,1207.24 2092.59,1207.24 2093.17,1207.24 2093.76,1207.24 2094.35,1207.24 2094.93,1207.24 2095.52,1207.24 2096.1,1207.24 2096.69,1207.24 2097.28,1207.24 2097.86,1207.24 2098.45,1207.24 2099.04,1207.24 2099.62,1207.24 2100.21,1207.24 2100.8,1207.24 2101.38,1207.24 2101.97,1207.24 2102.55,1207.24 2103.14,1207.24 2103.73,1207.24 2104.31,1207.24 2104.9,1207.24 2105.49,1207.24 2106.07,1207.24 2106.66,1207.24 2107.25,1207.24 2107.83,1207.24 2108.42,1207.24 2109.01,1207.24 2109.59,1207.24 2110.18,1207.24 2110.76,1207.24 2111.35,1207.24 2111.94,1207.24 2112.52,1207.24 2113.11,1207.24 2113.7,1207.24 2114.28,1207.24 2114.87,1207.24 2115.46,1207.24 2116.04,1207.24 2116.63,1207.24 2117.22,1207.24 2117.8,1207.24 2118.39,1207.24 2118.97,1207.24 2119.56,1207.24 2120.15,1207.24 2120.73,1207.24 2121.32,1207.24 2121.91,1207.24 2122.49,1207.24 2123.08,1207.24 2123.67,1207.24 2124.25,1207.24 2124.84,1207.24 2125.42,1207.24 2126.01,1207.24 2126.6,1207.24 2127.18,1207.24 2127.77,1207.24 2128.36,1207.24 2128.94,1207.24 2129.53,1207.24 2130.12,1207.24 2130.7,1207.24 2131.29,1207.24 2131.88,1207.24 2132.46,1207.24 2133.05,1207.24 2133.63,1207.24 2134.22,1207.24 2134.81,1207.24 2135.39,1207.24 2135.98,1207.24 2136.57,1207.24 2137.15,1207.24 2137.74,1207.24 2138.33,1207.24 2138.91,1207.24 2139.5,1207.24 2140.09,1207.24 2140.67,1207.24 2141.26,1207.24 2141.84,1207.24 2142.43,1207.24 2143.02,1207.24 2143.6,1207.24 2144.19,1207.24 2144.78,1207.24 2145.36,1207.24 2145.95,1207.24 2146.54,1207.24 2147.12,1207.24 2147.71,1207.24 2148.3,1207.24 2148.88,1207.24 2149.47,1207.24 2150.05,1207.24 2150.64,1207.24 2151.23,1207.24 2151.81,1207.24 2152.4,1207.24 2152.99,1207.24 2153.57,1207.24 2154.16,1207.24 2154.75,1207.24 2155.33,1207.24 2155.92,1207.24 2156.5,1207.24 2157.09,1207.24 2157.68,1207.24 2158.26,1207.24 \"/>\n<path clip-path=\"url(#clip192)\" d=\"M986.025 1207.1 L986.612 1207.1 L987.198 1207.1 L987.785 1207.1 L988.371 1207.1 L988.957 1207.1 L989.544 1207.1 L990.13 1207.1 L990.717 1207.1 L991.303 1207.1 L991.889 1207.1 L992.476 1207.1 L993.062 1207.1 L993.649 1207.1 L994.235 1207.1 L994.822 1207.1 L995.408 1207.1 L995.994 1207.1 L996.581 1207.1 L997.167 1207.1 L997.754 1207.1 L998.34 1207.1 L998.926 1207.1 L999.513 1207.1 L1000.1 1207.1 L1000.69 1207.1 L1001.27 1207.1 L1001.86 1207.1 L1002.44 1207.1 L1003.03 1207.1 L1003.62 1207.1 L1004.2 1207.1 L1004.79 1207.1 L1005.38 1207.1 L1005.96 1207.1 L1006.55 1207.1 L1007.14 1207.1 L1007.72 1207.1 L1008.31 1207.1 L1008.9 1207.1 L1009.48 1207.1 L1010.07 1207.1 L1010.65 1207.1 L1011.24 1207.1 L1011.83 1207.1 L1012.41 1207.1 L1013 1207.1 L1013.59 1207.1 L1014.17 1207.1 L1014.76 1207.1 L1015.35 1207.1 L1015.93 1207.1 L1016.52 1207.1 L1017.11 1207.1 L1017.69 1207.1 L1018.28 1207.1 L1018.86 1207.1 L1019.45 1207.1 L1020.04 1207.1 L1020.62 1207.1 L1021.21 1207.1 L1021.8 1207.1 L1022.38 1207.1 L1022.97 1207.1 L1023.56 1207.1 L1024.14 1207.1 L1024.73 1207.1 L1025.32 1207.1 L1025.9 1207.1 L1026.49 1207.1 L1027.07 1207.1 L1027.66 1207.1 L1028.25 1207.1 L1028.83 1207.1 L1029.42 1207.1 L1030.01 1207.1 L1030.59 1207.1 L1031.18 1207.1 L1031.77 1207.1 L1032.35 1207.1 L1032.94 1207.1 L1033.52 1207.1 L1034.11 1207.1 L1034.7 1207.1 L1035.28 1207.1 L1035.87 1207.1 L1036.46 1207.1 L1037.04 1207.1 L1037.63 1207.1 L1038.22 1207.1 L1038.8 1207.1 L1039.39 1207.1 L1039.98 1207.1 L1040.56 1207.1 L1041.15 1207.1 L1041.73 1207.1 L1042.32 1207.1 L1042.91 1207.1 L1043.49 1207.1 L1044.08 1207.1 L1044.67 1207.1 L1045.25 1207.1 L1045.84 1207.1 L1046.43 1207.1 L1047.01 1207.1 L1047.6 1207.1 L1048.19 1207.1 L1048.77 1207.1 L1049.36 1207.1 L1049.94 1207.1 L1050.53 1207.1 L1051.12 1207.1 L1051.7 1207.1 L1052.29 1207.1 L1052.88 1207.1 L1053.46 1207.1 L1054.05 1207.1 L1054.64 1207.1 L1055.22 1207.1 L1055.81 1207.1 L1056.39 1207.1 L1056.98 1207.1 L1057.57 1207.1 L1058.15 1207.1 L1058.74 1207.1 L1059.33 1207.1 L1059.91 1207.1 L1060.5 1207.1 L1061.09 1207.1 L1061.67 1207.1 L1062.26 1207.1 L1062.85 1207.1 L1063.43 1207.1 L1064.02 1207.1 L1064.6 1207.1 L1065.19 1207.1 L1065.78 1207.1 L1066.36 1207.1 L1066.95 1207.1 L1067.54 1207.1 L1068.12 1207.1 L1068.71 1207.1 L1069.3 1207.1 L1069.88 1207.1 L1070.47 1207.1 L1071.06 1207.1 L1071.64 1207.1 L1072.23 1207.1 L1072.81 1207.1 L1073.4 1207.1 L1073.99 1207.1 L1074.57 1207.1 L1075.16 1207.1 L1075.75 1207.1 L1076.33 1207.1 L1076.92 1207.1 L1077.51 1207.1 L1078.09 1207.1 L1078.68 1207.1 L1079.26 1207.1 L1079.85 1207.1 L1080.44 1207.1 L1081.02 1207.1 L1081.61 1207.1 L1082.2 1207.1 L1082.78 1207.1 L1083.37 1207.1 L1083.96 1207.1 L1084.54 1207.1 L1085.13 1207.1 L1085.72 1207.1 L1086.3 1207.1 L1086.89 1207.1 L1087.47 1207.1 L1088.06 1207.1 L1088.65 1207.1 L1089.23 1207.1 L1089.82 1207.1 L1090.41 1207.1 L1090.99 1207.1 L1091.58 1207.1 L1092.17 1207.1 L1092.75 1207.1 L1093.34 1207.1 L1093.93 1207.1 L1094.51 1207.1 L1095.1 1207.1 L1095.68 1207.1 L1096.27 1207.1 L1096.86 1207.1 L1097.44 1207.1 L1098.03 1207.1 L1098.62 1207.1 L1099.2 1207.1 L1099.79 1207.1 L1100.38 1207.1 L1100.96 1207.1 L1101.55 1207.1 L1102.14 1207.1 L1102.72 1207.1 L1103.31 1207.1 L1103.89 1207.1 L1104.48 1207.1 L1105.07 1207.1 L1105.65 1207.1 L1106.24 1207.1 L1106.83 1207.1 L1107.41 1207.1 L1108 1207.1 L1108.59 1207.1 L1109.17 1207.1 L1109.76 1207.1 L1110.34 1207.1 L1110.93 1207.1 L1111.52 1207.1 L1112.1 1207.1 L1112.69 1207.1 L1113.28 1207.1 L1113.86 1207.1 L1114.45 1207.1 L1115.04 1207.1 L1115.62 1207.1 L1116.21 1207.1 L1116.8 1207.1 L1117.38 1207.1 L1117.97 1207.1 L1118.55 1207.1 L1119.14 1207.1 L1119.73 1207.1 L1120.31 1207.1 L1120.9 1207.1 L1121.49 1207.1 L1122.07 1207.1 L1122.66 1207.1 L1123.25 1207.1 L1123.83 1207.1 L1124.42 1207.1 L1125.01 1207.1 L1125.59 1207.1 L1126.18 1207.1 L1126.76 1207.1 L1127.35 1207.1 L1127.94 1207.1 L1128.52 1207.1 L1129.11 1207.1 L1129.7 1207.1 L1130.28 1207.1 L1130.87 1207.1 L1131.46 1207.1 L1132.04 1207.1 L1132.63 1207.1 L1133.21 1207.1 L1133.8 1207.1 L1134.39 1207.1 L1134.97 1207.1 L1135.56 1207.1 L1136.15 1207.1 L1136.73 1207.1 L1137.32 1207.1 L1137.91 1207.1 L1138.49 1207.1 L1139.08 1207.1 L1139.67 1207.1 L1140.25 1207.1 L1140.84 1207.1 L1141.42 1207.1 L1142.01 1207.1 L1142.6 1207.1 L1143.18 1207.1 L1143.77 1207.1 L1144.36 1207.1 L1144.94 1207.1 L1145.53 1207.1 L1146.12 1207.1 L1146.7 1207.1 L1147.29 1207.1 L1147.88 1207.1 L1148.46 1207.1 L1149.05 1207.1 L1149.63 1207.1 L1150.22 1207.1 L1150.81 1207.1 L1151.39 1207.1 L1151.98 1207.1 L1152.57 1207.1 L1153.15 1207.1 L1153.74 1207.1 L1154.33 1207.1 L1154.91 1207.1 L1155.5 1207.1 L1156.09 1207.1 L1156.67 1207.1 L1157.26 1207.1 L1157.84 1207.1 L1158.43 1207.1 L1159.02 1207.1 L1159.6 1207.1 L1160.19 1207.1 L1160.78 1207.1 L1161.36 1207.1 L1161.95 1207.1 L1162.54 1207.1 L1163.12 1207.1 L1163.71 1207.1 L1164.29 1207.1 L1164.88 1207.1 L1165.47 1207.1 L1166.05 1207.1 L1166.64 1207.1 L1167.23 1207.1 L1167.81 1207.1 L1168.4 1207.1 L1168.99 1207.1 L1169.57 1207.1 L1170.16 1207.1 L1170.75 1207.1 L1171.33 1207.1 L1171.92 1207.1 L1172.5 1207.1 L1173.09 1207.1 L1173.68 1207.1 L1174.26 1207.1 L1174.85 1207.1 L1175.44 1207.1 L1176.02 1207.1 L1176.61 1207.1 L1177.2 1207.1 L1177.78 1207.1 L1178.37 1207.1 L1178.96 1207.1 L1179.54 1207.1 L1180.13 1207.1 L1180.71 1207.1 L1181.3 1207.1 L1181.89 1207.1 L1182.47 1207.1 L1183.06 1207.1 L1183.65 1207.1 L1184.23 1207.1 L1184.82 1207.1 L1185.41 1207.1 L1185.99 1207.1 L1186.58 1207.1 L1187.16 1207.1 L1187.75 1207.1 L1188.34 1207.1 L1188.92 1207.1 L1189.51 1207.1 L1190.1 1207.1 L1190.68 1207.1 L1191.27 1207.1 L1191.86 1207.1 L1192.44 1207.1 L1193.03 1207.1 L1193.62 1207.1 L1194.2 1207.1 L1194.79 1207.1 L1195.37 1207.1 L1195.96 1207.1 L1196.55 1207.1 L1197.13 1207.1 L1197.72 1207.1 L1198.31 1207.1 L1198.89 1207.1 L1199.48 1207.1 L1200.07 1207.1 L1200.65 1207.1 L1201.24 1207.1 L1201.83 1207.1 L1202.41 1207.1 L1203 1207.1 L1203.58 1207.1 L1204.17 1207.1 L1204.76 1207.1 L1205.34 1207.1 L1205.93 1207.1 L1206.52 1207.1 L1207.1 1207.1 L1207.69 1207.1 L1208.28 1207.1 L1208.86 1207.1 L1209.45 1207.1 L1210.03 1207.1 L1210.62 1207.1 L1211.21 1207.1 L1211.79 1207.1 L1212.38 1207.1 L1212.97 1207.1 L1213.55 1207.1 L1214.14 1207.1 L1214.73 1207.1 L1215.31 1207.1 L1215.9 1207.1 L1216.49 1207.1 L1217.07 1207.1 L1217.66 1207.1 L1218.24 1207.1 L1218.83 1207.1 L1219.42 1207.1 L1220 1207.1 L1220.59 1207.1 L1221.18 1207.1 L1221.76 1207.1 L1222.35 1207.1 L1222.94 1207.1 L1223.52 1207.1 L1224.11 1207.1 L1224.7 1207.1 L1225.28 1207.1 L1225.87 1207.1 L1226.45 1207.1 L1227.04 1207.1 L1227.63 1207.1 L1228.21 1207.1 L1228.8 1207.1 L1229.39 1207.1 L1229.97 1207.1 L1230.56 1207.1 L1231.15 1207.1 L1231.73 1207.1 L1232.32 1207.1 L1232.91 1207.1 L1233.49 1207.1 L1234.08 1207.1 L1234.66 1207.1 L1235.25 1207.1 L1235.84 1207.1 L1236.42 1207.1 L1237.01 1207.1 L1237.6 1207.1 L1238.18 1207.1 L1238.77 1207.1 L1239.36 1207.1 L1239.94 1207.1 L1240.53 1207.1 L1241.11 1207.1 L1241.7 1207.1 L1242.29 1207.1 L1242.87 1207.1 L1243.46 1207.1 L1244.05 1207.1 L1244.63 1207.1 L1245.22 1207.1 L1245.81 1207.1 L1246.39 1207.1 L1246.98 1207.1 L1247.57 1207.1 L1248.15 1207.1 L1248.74 1207.1 L1249.32 1207.1 L1249.91 1207.1 L1250.5 1207.1 L1251.08 1207.1 L1251.67 1207.1 L1252.26 1207.1 L1252.84 1207.1 L1253.43 1207.1 L1254.02 1207.1 L1254.6 1207.1 L1255.19 1207.1 L1255.78 1207.1 L1256.36 1207.1 L1256.95 1207.1 L1257.53 1207.1 L1258.12 1207.1 L1258.71 1207.1 L1259.29 1207.1 L1259.88 1207.1 L1260.47 1207.1 L1261.05 1207.1 L1261.64 1207.1 L1262.23 1207.1 L1262.81 1207.1 L1263.4 1207.1 L1263.98 1207.1 L1264.57 1207.1 L1265.16 1207.1 L1265.74 1207.1 L1266.33 1207.1 L1266.92 1207.1 L1267.5 1207.1 L1268.09 1207.1 L1268.68 1207.1 L1269.26 1207.1 L1269.85 1207.1 L1270.44 1207.1 L1271.02 1207.1 L1271.61 1207.1 L1272.19 1207.1 L1272.78 1207.1 L1273.37 1207.1 L1273.95 1207.1 L1274.54 1207.1 L1275.13 1207.1 L1275.71 1207.1 L1276.3 1207.1 L1276.89 1207.1 L1277.47 1207.1 L1278.06 1207.1 L1278.65 1207.1 L1279.23 1207.1 L1279.82 1207.1 L1280.4 1207.1 L1280.99 1207.1 L1281.58 1207.1 L1282.16 1207.1 L1282.75 1207.1 L1283.34 1207.1 L1283.92 1207.1 L1284.51 1207.1 L1285.1 1207.1 L1285.68 1207.1 L1286.27 1207.1 L1286.86 1207.1 L1287.44 1207.1 L1288.03 1207.1 L1288.61 1207.1 L1289.2 1207.1 L1289.79 1207.1 L1290.37 1207.1 L1290.96 1207.1 L1291.55 1207.1 L1292.13 1207.1 L1292.72 1207.1 L1293.31 1207.1 L1293.89 1207.1 L1294.48 1207.1 L1295.06 1207.1 L1295.65 1207.1 L1296.24 1207.1 L1296.82 1207.1 L1297.41 1207.1 L1298 1207.1 L1298.58 1207.1 L1299.17 1207.1 L1299.76 1207.1 L1300.34 1207.1 L1300.93 1207.1 L1301.52 1207.1 L1302.1 1207.1 L1302.69 1207.1 L1303.27 1207.1 L1303.86 1207.1 L1304.45 1207.1 L1305.03 1207.1 L1305.62 1207.1 L1306.21 1207.1 L1306.79 1207.1 L1307.38 1207.1 L1307.97 1207.1 L1308.55 1207.1 L1309.14 1207.1 L1309.73 1207.1 L1310.31 1207.1 L1310.9 1207.1 L1311.48 1207.1 L1312.07 1207.1 L1312.66 1207.1 L1313.24 1207.1 L1313.83 1207.1 L1314.42 1207.1 L1315 1207.1 L1315.59 1207.1 L1316.18 1207.1 L1316.76 1207.1 L1317.35 1207.1 L1317.93 1207.1 L1318.52 1207.1 L1319.11 1207.1 L1319.69 1207.1 L1320.28 1207.1 L1320.87 1207.1 L1321.45 1207.1 L1322.04 1207.1 L1322.63 1207.1 L1323.21 1207.1 L1323.8 1207.1 L1324.39 1207.1 L1324.97 1207.1 L1325.56 1207.1 L1326.14 1207.1 L1326.73 1207.1 L1327.32 1207.1 L1327.9 1207.1 L1328.49 1207.1 L1329.08 1207.1 L1329.66 1207.1 L1330.25 1207.1 L1330.84 1207.1 L1331.42 1207.1 L1332.01 1207.1 L1332.6 1207.1 L1333.18 1207.1 L1333.77 1207.1 L1334.35 1207.1 L1334.94 1207.1 L1335.53 1207.1 L1336.11 1207.1 L1336.7 1207.1 L1337.29 1207.1 L1337.87 1207.1 L1338.46 1207.1 L1339.05 1207.1 L1339.63 1207.1 L1340.22 1207.1 L1340.8 1207.1 L1341.39 1207.1 L1341.98 1207.1 L1342.56 1207.1 L1343.15 1207.1 L1343.74 1207.1 L1344.32 1207.1 L1344.91 1207.1 L1345.5 1207.1 L1346.08 1207.1 L1346.67 1207.1 L1347.26 1207.1 L1347.84 1207.1 L1348.43 1207.1 L1349.01 1207.1 L1349.6 1207.1 L1350.19 1207.1 L1350.77 1207.1 L1351.36 1207.1 L1351.95 1207.1 L1352.53 1207.1 L1353.12 1207.1 L1353.71 1207.1 L1354.29 1207.1 L1354.88 1207.1 L1355.47 1207.1 L1356.05 1207.1 L1356.64 1207.1 L1357.22 1207.1 L1357.81 1207.1 L1358.4 1207.1 L1358.98 1207.1 L1359.57 1207.1 L1360.16 1207.1 L1360.74 1207.1 L1361.33 1207.1 L1361.92 1207.1 L1362.5 1207.1 L1363.09 1207.1 L1363.68 1207.1 L1364.26 1207.1 L1364.85 1207.1 L1365.43 1207.1 L1366.02 1207.1 L1366.61 1207.1 L1367.19 1207.1 L1367.78 1207.1 L1368.37 1207.1 L1368.95 1207.1 L1369.54 1207.1 L1370.13 1207.1 L1370.71 1207.1 L1371.3 1207.1 L1371.88 1207.1 L1372.47 1207.1 L1373.06 1207.1 L1373.64 1207.1 L1374.23 1207.1 L1374.82 1207.1 L1375.4 1207.1 L1375.99 1207.1 L1376.58 1207.1 L1377.16 1207.1 L1377.75 1207.1 L1378.34 1207.1 L1378.92 1207.1 L1379.51 1207.1 L1380.09 1207.1 L1380.68 1207.1 L1381.27 1207.1 L1381.85 1207.1 L1382.44 1207.1 L1383.03 1207.1 L1383.61 1207.1 L1384.2 1207.1 L1384.79 1207.1 L1385.37 1207.1 L1385.96 1207.1 L1386.55 1207.1 L1387.13 1207.1 L1387.72 1207.1 L1388.3 1207.1 L1388.89 1207.1 L1389.48 1207.1 L1390.06 1207.1 L1390.65 1207.1 L1391.24 1207.1 L1391.82 1207.1 L1392.41 1207.1 L1393 1207.1 L1393.58 1207.1 L1394.17 1207.1 L1394.75 1207.1 L1395.34 1207.1 L1395.93 1207.1 L1396.51 1207.1 L1397.1 1207.1 L1397.69 1207.1 L1398.27 1207.1 L1398.86 1207.1 L1399.45 1207.1 L1400.03 1207.1 L1400.62 1207.1 L1401.21 1207.1 L1401.79 1207.1 L1402.38 1207.1 L1402.96 1207.1 L1403.55 1207.1 L1404.14 1207.1 L1404.72 1207.1 L1405.31 1207.1 L1405.9 1207.1 L1406.48 1207.1 L1407.07 1207.1 L1407.66 1207.1 L1408.24 1207.1 L1408.83 1207.1 L1409.42 1207.1 L1410 1207.1 L1410.59 1207.1 L1411.17 1207.1 L1411.76 1207.1 L1412.35 1207.1 L1412.93 1207.1 L1413.52 1207.1 L1414.11 1207.1 L1414.69 1207.1 L1415.28 1207.1 L1415.87 1207.1 L1416.45 1207.1 L1417.04 1207.1 L1417.63 1207.1 L1418.21 1207.1 L1418.8 1207.1 L1419.38 1207.1 L1419.97 1207.1 L1420.56 1207.1 L1421.14 1207.1 L1421.73 1207.1 L1422.32 1207.1 L1422.9 1207.1 L1423.49 1207.1 L1424.08 1207.1 L1424.66 1207.1 L1425.25 1207.1 L1425.83 1207.1 L1426.42 1207.1 L1427.01 1207.1 L1427.59 1207.1 L1428.18 1207.1 L1428.77 1207.1 L1429.35 1207.1 L1429.94 1207.1 L1430.53 1207.1 L1431.11 1207.1 L1431.7 1207.1 L1432.29 1207.1 L1432.87 1207.1 L1433.46 1207.1 L1434.04 1207.1 L1434.63 1207.1 L1435.22 1207.1 L1435.8 1207.1 L1436.39 1207.1 L1436.98 1207.1 L1437.56 1207.1 L1438.15 1207.1 L1438.74 1207.1 L1439.32 1207.1 L1439.91 1207.1 L1440.5 1207.1 L1441.08 1207.1 L1441.67 1207.1 L1442.25 1207.1 L1442.84 1207.1 L1443.43 1207.1 L1444.01 1207.1 L1444.6 1207.1 L1445.19 1207.1 L1445.77 1207.1 L1446.36 1207.1 L1446.95 1207.1 L1447.53 1207.1 L1448.12 1207.1 L1448.7 1207.1 L1449.29 1207.1 L1449.88 1207.1 L1450.46 1207.1 L1451.05 1207.1 L1451.64 1207.1 L1452.22 1207.1 L1452.81 1207.1 L1453.4 1207.1 L1453.98 1207.1 L1454.57 1207.1 L1455.16 1207.1 L1455.74 1207.1 L1456.33 1207.1 L1456.91 1207.1 L1457.5 1207.1 L1458.09 1207.1 L1458.67 1207.1 L1459.26 1207.1 L1459.85 1207.1 L1460.43 1207.1 L1461.02 1207.1 L1461.61 1207.1 L1462.19 1207.1 L1462.78 1207.1 L1463.37 1207.1 L1463.95 1207.1 L1464.54 1207.1 L1465.12 1207.1 L1465.71 1207.1 L1466.3 1207.1 L1466.88 1207.1 L1467.47 1207.1 L1468.06 1207.1 L1468.64 1207.1 L1469.23 1207.1 L1469.82 1207.1 L1470.4 1207.1 L1470.99 1207.1 L1471.57 1207.1 L1472.16 1207.1 L1472.75 1207.1 L1473.33 1207.1 L1473.92 1207.1 L1474.51 1207.1 L1475.09 1207.1 L1475.68 1207.1 L1476.27 1207.1 L1476.85 1207.1 L1477.44 1207.1 L1478.03 1207.1 L1478.61 1207.1 L1479.2 1207.1 L1479.78 1207.1 L1480.37 1207.1 L1480.96 1207.1 L1481.54 1207.1 L1482.13 1207.1 L1482.72 1207.1 L1483.3 1207.1 L1483.89 1207.1 L1484.48 1207.1 L1485.06 1207.1 L1485.65 1207.1 L1486.24 1207.1 L1486.82 1207.1 L1487.41 1207.1 L1487.99 1207.1 L1488.58 1207.1 L1489.17 1207.1 L1489.75 1207.1 L1490.34 1207.1 L1490.93 1207.1 L1491.51 1207.1 L1492.1 1207.1 L1492.69 1207.1 L1493.27 1207.1 L1493.86 1207.1 L1494.45 1207.1 L1495.03 1207.1 L1495.62 1207.1 L1496.2 1207.1 L1496.79 1207.1 L1497.38 1207.1 L1497.96 1207.1 L1498.55 1207.1 L1499.14 1207.1 L1499.72 1207.1 L1500.31 1207.1 L1500.9 1207.1 L1501.48 1207.1 L1502.07 1207.1 L1502.65 1207.1 L1503.24 1207.1 L1503.83 1207.1 L1504.41 1207.1 L1505 1207.1 L1505.59 1207.1 L1506.17 1207.1 L1506.76 1207.1 L1507.35 1207.1 L1507.93 1207.1 L1508.52 1207.1 L1509.11 1207.1 L1509.69 1207.1 L1510.28 1207.1 L1510.86 1207.1 L1511.45 1207.1 L1512.04 1207.1 L1512.62 1207.1 L1513.21 1207.1 L1513.8 1207.1 L1514.38 1207.1 L1514.97 1207.1 L1515.56 1207.1 L1516.14 1207.1 L1516.73 1207.1 L1517.32 1207.1 L1517.9 1207.1 L1518.49 1207.1 L1519.07 1207.1 L1519.66 1207.1 L1520.25 1207.1 L1520.83 1207.1 L1521.42 1207.1 L1522.01 1207.1 L1522.59 1207.1 L1523.18 1207.1 L1523.77 1207.1 L1524.35 1207.1 L1524.94 1207.1 L1525.52 1207.1 L1526.11 1207.1 L1526.7 1207.1 L1527.28 1207.1 L1527.87 1207.1 L1528.46 1207.1 L1529.04 1207.1 L1529.63 1207.1 L1530.22 1207.1 L1530.8 1207.1 L1531.39 1207.1 L1531.98 1207.1 L1532.56 1207.1 L1533.15 1207.1 L1533.73 1207.1 L1534.32 1207.1 L1534.91 1207.1 L1535.49 1207.1 L1536.08 1207.1 L1536.67 1207.1 L1537.25 1207.1 L1537.84 1207.1 L1538.43 1207.1 L1539.01 1207.1 L1539.6 1207.1 L1540.19 1207.1 L1540.77 1207.1 L1541.36 1207.1 L1541.94 1207.1 L1542.53 1207.1 L1543.12 1207.1 L1543.7 1207.1 L1544.29 1207.1 L1544.88 1207.1 L1545.46 1207.1 L1546.05 1207.1 L1546.64 1207.1 L1547.22 1207.1 L1547.81 1207.1 L1548.4 1207.1 L1548.98 1207.1 L1549.57 1207.1 L1550.15 1207.1 L1550.74 1207.1 L1551.33 1207.1 L1551.91 1207.1 L1552.5 1207.1 L1553.09 1207.1 L1553.67 1207.1 L1554.26 1207.1 L1554.85 1207.1 L1555.43 1207.1 L1556.02 1207.1 L1556.6 1207.1 L1557.19 1207.1 L1557.78 1207.1 L1558.36 1207.1 L1558.95 1207.1 L1559.54 1207.1 L1560.12 1207.1 L1560.71 1207.1 L1561.3 1207.1 L1561.88 1207.1 L1562.47 1207.1 L1563.06 1207.1 L1563.64 1207.1 L1564.23 1207.1 L1564.81 1207.1 L1565.4 1207.1 L1565.99 1207.1 L1566.57 1207.1 L1567.16 1207.1 L1567.75 1207.1 L1568.33 1207.1 L1568.92 1207.1 L1569.51 1207.1 L1570.09 1207.1 L1570.68 1207.1 L1571.27 1207.1 L1571.85 1207.1 L1572.44 1207.1 L1573.02 1207.1 L1573.61 1207.1 L1574.2 1207.1 L1574.78 1207.1 L1575.37 1207.1 L1575.96 1207.1 L1576.54 1207.1 L1577.13 1207.1 L1577.72 1207.1 L1578.3 1207.1 L1578.89 1207.1 L1579.47 1207.1 L1580.06 1207.1 L1580.65 1207.1 L1581.23 1207.1 L1581.82 1207.1 L1582.41 1207.1 L1582.99 1207.1 L1583.58 1207.1 L1584.17 1207.1 L1584.75 1207.1 L1585.34 1207.1 L1585.93 1207.1 L1586.51 1207.1 L1587.1 1207.1 L1587.68 1207.1 L1588.27 1207.1 L1588.86 1207.1 L1589.44 1207.1 L1590.03 1207.1 L1590.62 1207.1 L1591.2 1207.1 L1591.79 1207.1 L1592.38 1207.1 L1592.96 1207.1 L1593.55 1207.1 L1594.14 1207.1 L1594.72 1207.1 L1595.31 1207.1 L1595.89 1207.1 L1596.48 1207.1 L1597.07 1207.1 L1597.65 1207.1 L1598.24 1207.1 L1598.83 1207.1 L1599.41 1207.1 L1600 1207.1 L1600.59 1207.1 L1601.17 1207.1 L1601.76 1207.1 L1602.34 1207.1 L1602.93 1207.1 L1603.52 1207.1 L1604.1 1207.1 L1604.69 1207.1 L1605.28 1207.1 L1605.86 1207.1 L1606.45 1207.1 L1607.04 1207.1 L1607.62 1207.1 L1608.21 1207.1 L1608.8 1207.1 L1609.38 1207.1 L1609.97 1207.1 L1610.55 1207.1 L1611.14 1207.1 L1611.73 1207.1 L1612.31 1207.1 L1612.9 1207.1 L1613.49 1207.1 L1614.07 1207.1 L1614.66 1207.1 L1615.25 1207.1 L1615.83 1207.1 L1616.42 1207.1 L1617.01 1207.1 L1617.59 1207.1 L1618.18 1207.1 L1618.76 1207.1 L1619.35 1207.1 L1619.94 1207.1 L1620.52 1207.1 L1621.11 1207.1 L1621.7 1207.1 L1622.28 1207.1 L1622.87 1207.1 L1623.46 1207.1 L1624.04 1207.1 L1624.63 1207.1 L1625.22 1207.1 L1625.8 1207.1 L1626.39 1207.1 L1626.97 1207.1 L1627.56 1207.1 L1628.15 1207.1 L1628.73 1207.1 L1629.32 1207.1 L1629.91 1207.1 L1630.49 1207.1 L1631.08 1207.1 L1631.67 1207.1 L1632.25 1207.1 L1632.84 1207.1 L1633.42 1207.1 L1634.01 1207.1 L1634.6 1207.1 L1635.18 1207.1 L1635.77 1207.1 L1636.36 1207.1 L1636.94 1207.1 L1637.53 1207.1 L1638.12 1207.1 L1638.7 1207.1 L1639.29 1207.1 L1639.88 1207.1 L1640.46 1207.1 L1641.05 1207.1 L1641.63 1207.1 L1642.22 1207.1 L1642.81 1207.1 L1643.39 1207.1 L1643.98 1207.1 L1644.57 1207.1 L1645.15 1207.1 L1645.74 1207.1 L1646.33 1207.1 L1646.91 1207.1 L1647.5 1207.1 L1648.09 1207.1 L1648.67 1207.1 L1649.26 1207.1 L1649.84 1207.1 L1650.43 1207.1 L1651.02 1207.1 L1651.6 1207.1 L1652.19 1207.1 L1652.78 1207.1 L1653.36 1207.1 L1653.95 1207.1 L1654.54 1207.1 L1655.12 1207.1 L1655.71 1207.1 L1656.29 1207.1 L1656.88 1207.1 L1657.47 1207.1 L1658.05 1207.1 L1658.64 1207.1 L1659.23 1207.1 L1659.81 1207.1 L1660.4 1207.1 L1660.99 1207.1 L1661.57 1207.1 L1662.16 1207.1 L1662.75 1207.1 L1663.33 1207.1 L1663.92 1207.1 L1664.5 1207.1 L1665.09 1207.1 L1665.68 1207.1 L1666.26 1207.1 L1666.85 1207.1 L1667.44 1207.1 L1668.02 1207.1 L1668.61 1207.1 L1669.2 1207.1 L1669.78 1207.1 L1670.37 1207.1 L1670.96 1207.1 L1671.54 1207.1 L1672.13 1207.1 L1672.71 1207.1 L1673.3 1207.1 L1673.89 1207.1 L1674.47 1207.1 L1675.06 1207.1 L1675.65 1207.1 L1676.23 1207.1 L1676.82 1207.1 L1677.41 1207.1 L1677.99 1207.1 L1678.58 1207.1 L1679.17 1207.1 L1679.75 1207.1 L1680.34 1207.1 L1680.92 1207.1 L1681.51 1207.1 L1682.1 1207.1 L1682.68 1207.1 L1683.27 1207.1 L1683.86 1207.1 L1684.44 1207.1 L1685.03 1207.1 L1685.62 1207.1 L1686.2 1207.1 L1686.79 1207.1 L1687.37 1207.1 L1687.96 1207.1 L1688.55 1207.1 L1689.13 1207.1 L1689.72 1207.1 L1690.31 1207.1 L1690.89 1207.1 L1691.48 1207.1 L1692.07 1207.1 L1692.65 1207.1 L1693.24 1207.1 L1693.83 1207.1 L1694.41 1207.1 L1695 1207.1 L1695.58 1207.1 L1696.17 1207.1 L1696.76 1207.1 L1697.34 1207.1 L1697.93 1207.1 L1698.52 1207.1 L1699.1 1207.1 L1699.69 1207.1 L1700.28 1207.1 L1700.86 1207.1 L1701.45 1207.1 L1702.04 1207.1 L1702.62 1207.1 L1703.21 1207.1 L1703.79 1207.1 L1704.38 1207.1 L1704.97 1207.1 L1705.55 1207.1 L1706.14 1207.1 L1706.73 1207.1 L1707.31 1207.1 L1707.9 1207.1 L1708.49 1207.1 L1709.07 1207.1 L1709.66 1207.1 L1710.24 1207.1 L1710.83 1207.1 L1711.42 1207.1 L1712 1207.1 L1712.59 1207.1 L1713.18 1207.1 L1713.76 1207.1 L1714.35 1207.1 L1714.94 1207.1 L1715.52 1207.1 L1716.11 1207.1 L1716.7 1207.1 L1717.28 1207.1 L1717.87 1207.1 L1718.45 1207.1 L1719.04 1207.1 L1719.63 1207.1 L1720.21 1207.1 L1720.8 1207.1 L1721.39 1207.1 L1721.97 1207.1 L1722.56 1207.1 L1723.15 1207.1 L1723.73 1207.1 L1724.32 1207.1 L1724.91 1207.1 L1725.49 1207.1 L1726.08 1207.1 L1726.66 1207.1 L1727.25 1207.1 L1727.84 1207.1 L1728.42 1207.1 L1729.01 1207.1 L1729.6 1207.1 L1730.18 1207.1 L1730.77 1207.1 L1731.36 1207.1 L1731.94 1207.1 L1732.53 1207.1 L1733.11 1207.1 L1733.7 1207.1 L1734.29 1207.1 L1734.87 1207.1 L1735.46 1207.1 L1736.05 1207.1 L1736.63 1207.1 L1737.22 1207.1 L1737.81 1207.1 L1738.39 1207.1 L1738.98 1207.1 L1739.57 1207.1 L1740.15 1207.1 L1740.74 1207.1 L1741.32 1207.1 L1741.91 1207.1 L1742.5 1207.1 L1743.08 1207.1 L1743.67 1207.1 L1744.26 1207.1 L1744.84 1207.1 L1745.43 1207.1 L1746.02 1207.1 L1746.6 1207.1 L1747.19 1207.1 L1747.78 1207.1 L1748.36 1207.1 L1748.95 1207.1 L1749.53 1207.1 L1750.12 1207.1 L1750.71 1207.1 L1751.29 1207.1 L1751.88 1207.1 L1752.47 1207.1 L1753.05 1207.1 L1753.64 1207.1 L1754.23 1207.1 L1754.81 1207.1 L1755.4 1207.1 L1755.99 1207.1 L1756.57 1207.1 L1757.16 1207.1 L1757.74 1207.1 L1758.33 1207.1 L1758.92 1207.1 L1759.5 1207.1 L1760.09 1207.1 L1760.68 1207.1 L1761.26 1207.1 L1761.85 1207.1 L1762.44 1207.1 L1763.02 1207.1 L1763.61 1207.1 L1764.19 1207.1 L1764.78 1207.1 L1765.37 1207.1 L1765.95 1207.1 L1766.54 1207.1 L1767.13 1207.1 L1767.71 1207.1 L1768.3 1207.1 L1768.89 1207.1 L1769.47 1207.1 L1770.06 1207.1 L1770.65 1207.1 L1771.23 1207.1 L1771.82 1207.1 L1772.4 1207.1 L1772.99 1207.1 L1773.58 1207.1 L1774.16 1207.1 L1774.75 1207.1 L1775.34 1207.1 L1775.92 1207.1 L1776.51 1207.1 L1777.1 1207.1 L1777.68 1207.1 L1778.27 1207.1 L1778.86 1207.1 L1779.44 1207.1 L1780.03 1207.1 L1780.61 1207.1 L1781.2 1207.1 L1781.79 1207.1 L1782.37 1207.1 L1782.96 1207.1 L1783.55 1207.1 L1784.13 1207.1 L1784.72 1207.1 L1785.31 1207.1 L1785.89 1207.1 L1786.48 1207.1 L1787.06 1207.1 L1787.65 1207.1 L1788.24 1207.1 L1788.82 1207.1 L1789.41 1207.1 L1790 1207.1 L1790.58 1207.1 L1791.17 1207.1 L1791.76 1207.1 L1792.34 1207.1 L1792.93 1207.1 L1793.52 1207.1 L1794.1 1207.1 L1794.69 1207.1 L1795.27 1207.1 L1795.86 1207.1 L1796.45 1207.1 L1797.03 1207.1 L1797.62 1207.1 L1798.21 1207.1 L1798.79 1207.1 L1799.38 1207.1 L1799.97 1207.1 L1800.55 1207.1 L1801.14 1207.1 L1801.73 1207.1 L1802.31 1207.1 L1802.9 1207.1 L1803.48 1207.1 L1804.07 1207.1 L1804.66 1207.1 L1805.24 1207.1 L1805.83 1207.1 L1806.42 1207.1 L1807 1207.1 L1807.59 1207.1 L1808.18 1207.1 L1808.76 1207.1 L1809.35 1207.1 L1809.94 1207.1 L1810.52 1207.1 L1811.11 1207.1 L1811.69 1207.1 L1812.28 1207.1 L1812.87 1207.1 L1813.45 1207.1 L1814.04 1207.1 L1814.63 1207.1 L1815.21 1207.1 L1815.8 1207.1 L1816.39 1207.1 L1816.97 1207.1 L1817.56 1207.1 L1818.14 1207.1 L1818.73 1207.1 L1819.32 1207.1 L1819.9 1207.1 L1820.49 1207.1 L1821.08 1207.1 L1821.66 1207.1 L1822.25 1207.1 L1822.84 1207.1 L1823.42 1207.1 L1824.01 1207.1 L1824.6 1207.1 L1825.18 1207.1 L1825.77 1207.1 L1826.35 1207.1 L1826.94 1207.1 L1827.53 1207.1 L1828.11 1207.1 L1828.7 1207.1 L1829.29 1207.1 L1829.87 1207.1 L1830.46 1207.1 L1831.05 1207.1 L1831.63 1207.1 L1832.22 1207.1 L1832.81 1207.1 L1833.39 1207.1 L1833.98 1207.1 L1834.56 1207.1 L1835.15 1207.1 L1835.74 1207.1 L1836.32 1207.1 L1836.91 1207.1 L1837.5 1207.1 L1838.08 1207.1 L1838.67 1207.1 L1839.26 1207.1 L1839.84 1207.1 L1840.43 1207.1 L1841.01 1207.1 L1841.6 1207.1 L1842.19 1207.1 L1842.77 1207.1 L1843.36 1207.1 L1843.95 1207.1 L1844.53 1207.1 L1845.12 1207.1 L1845.71 1207.1 L1846.29 1207.1 L1846.88 1207.1 L1847.47 1207.1 L1848.05 1207.1 L1848.64 1207.1 L1849.22 1207.1 L1849.81 1207.1 L1850.4 1207.1 L1850.98 1207.1 L1851.57 1207.1 L1852.16 1207.1 L1852.74 1207.1 L1853.33 1207.1 L1853.92 1207.1 L1854.5 1207.1 L1855.09 1207.1 L1855.68 1207.1 L1856.26 1207.1 L1856.85 1207.1 L1857.43 1207.1 L1858.02 1207.1 L1858.61 1207.1 L1859.19 1207.1 L1859.78 1207.1 L1860.37 1207.1 L1860.95 1207.1 L1861.54 1207.1 L1862.13 1207.1 L1862.71 1207.1 L1863.3 1207.1 L1863.88 1207.1 L1864.47 1207.1 L1865.06 1207.1 L1865.64 1207.1 L1866.23 1207.1 L1866.82 1207.1 L1867.4 1207.1 L1867.99 1207.1 L1868.58 1207.1 L1869.16 1207.1 L1869.75 1207.1 L1870.34 1207.1 L1870.92 1207.1 L1871.51 1207.1 L1872.09 1207.1 L1872.68 1207.1 L1873.27 1207.1 L1873.85 1207.1 L1874.44 1207.1 L1875.03 1207.1 L1875.61 1207.1 L1876.2 1207.1 L1876.79 1207.1 L1877.37 1207.1 L1877.96 1207.1 L1878.55 1207.1 L1879.13 1207.1 L1879.72 1207.1 L1880.3 1207.1 L1880.89 1207.1 L1881.48 1207.1 L1882.06 1207.1 L1882.65 1207.1 L1883.24 1207.1 L1883.82 1207.1 L1884.41 1207.1 L1885 1207.1 L1885.58 1207.1 L1886.17 1207.1 L1886.76 1207.1 L1887.34 1207.1 L1887.93 1207.1 L1888.51 1207.1 L1889.1 1207.1 L1889.69 1207.1 L1890.27 1207.1 L1890.86 1207.1 L1891.45 1207.1 L1892.03 1207.1 L1892.62 1207.1 L1893.21 1207.1 L1893.79 1207.1 L1894.38 1207.1 L1894.96 1207.1 L1895.55 1207.1 L1896.14 1207.1 L1896.72 1207.1 L1897.31 1207.1 L1897.9 1207.1 L1898.48 1207.1 L1899.07 1207.1 L1899.66 1207.1 L1900.24 1207.1 L1900.83 1207.1 L1901.42 1207.1 L1902 1207.1 L1902.59 1207.1 L1903.17 1207.1 L1903.76 1207.1 L1904.35 1207.1 L1904.93 1207.1 L1905.52 1207.1 L1906.11 1207.1 L1906.69 1207.1 L1907.28 1207.1 L1907.87 1207.1 L1908.45 1207.1 L1909.04 1207.1 L1909.63 1207.1 L1910.21 1207.1 L1910.8 1207.1 L1911.38 1207.1 L1911.97 1207.1 L1912.56 1207.1 L1913.14 1207.1 L1913.73 1207.1 L1914.32 1207.1 L1914.9 1207.1 L1915.49 1207.1 L1916.08 1207.1 L1916.66 1207.1 L1917.25 1207.1 L1917.83 1207.1 L1918.42 1207.1 L1919.01 1207.1 L1919.59 1207.1 L1920.18 1207.1 L1920.77 1207.1 L1921.35 1207.1 L1921.94 1207.1 L1922.53 1207.1 L1923.11 1207.1 L1923.7 1207.1 L1924.29 1207.1 L1924.87 1207.1 L1925.46 1207.1 L1926.04 1207.1 L1926.63 1207.1 L1927.22 1207.1 L1927.8 1207.1 L1928.39 1207.1 L1928.98 1207.1 L1929.56 1207.1 L1930.15 1207.1 L1930.74 1207.1 L1931.32 1207.1 L1931.91 1207.1 L1932.5 1207.1 L1933.08 1207.1 L1933.67 1207.1 L1934.25 1207.1 L1934.84 1207.1 L1935.43 1207.1 L1936.01 1207.1 L1936.6 1207.1 L1937.19 1207.1 L1937.77 1207.1 L1938.36 1207.1 L1938.95 1207.1 L1939.53 1207.1 L1940.12 1207.1 L1940.71 1207.1 L1941.29 1207.1 L1941.88 1207.1 L1942.46 1207.1 L1943.05 1207.1 L1943.64 1207.1 L1944.22 1207.1 L1944.81 1207.1 L1945.4 1207.1 L1945.98 1207.1 L1946.57 1207.1 L1947.16 1207.1 L1947.74 1207.1 L1948.33 1207.1 L1948.91 1207.1 L1949.5 1207.1 L1950.09 1207.1 L1950.67 1207.1 L1951.26 1207.1 L1951.85 1207.1 L1952.43 1207.1 L1953.02 1207.1 L1953.61 1207.1 L1954.19 1207.1 L1954.78 1207.1 L1955.37 1207.1 L1955.95 1207.1 L1956.54 1207.1 L1957.12 1207.1 L1957.71 1207.1 L1958.3 1207.1 L1958.88 1207.1 L1959.47 1207.1 L1960.06 1207.1 L1960.64 1207.1 L1961.23 1207.1 L1961.82 1207.1 L1962.4 1207.1 L1962.99 1207.1 L1963.58 1207.1 L1964.16 1207.1 L1964.75 1207.1 L1965.33 1207.1 L1965.92 1207.1 L1966.51 1207.1 L1967.09 1207.1 L1967.68 1207.1 L1968.27 1207.1 L1968.85 1207.1 L1969.44 1207.1 L1970.03 1207.1 L1970.61 1207.1 L1971.2 1207.1 L1971.78 1207.1 L1972.37 1207.1 L1972.96 1207.1 L1973.54 1207.1 L1974.13 1207.1 L1974.72 1207.1 L1975.3 1207.1 L1975.89 1207.1 L1976.48 1207.1 L1977.06 1207.1 L1977.65 1207.1 L1978.24 1207.1 L1978.82 1207.1 L1979.41 1207.1 L1979.99 1207.1 L1980.58 1207.1 L1981.17 1207.1 L1981.75 1207.1 L1982.34 1207.1 L1982.93 1207.1 L1983.51 1207.1 L1984.1 1207.1 L1984.69 1207.1 L1985.27 1207.1 L1985.86 1207.1 L1986.45 1207.1 L1987.03 1207.1 L1987.62 1207.1 L1988.2 1207.1 L1988.79 1207.1 L1989.38 1207.1 L1989.96 1207.1 L1990.55 1207.1 L1991.14 1207.1 L1991.72 1207.1 L1992.31 1207.1 L1992.9 1207.1 L1993.48 1207.1 L1994.07 1207.1 L1994.65 1207.1 L1995.24 1207.1 L1995.83 1207.1 L1996.41 1207.1 L1997 1207.1 L1997.59 1207.1 L1998.17 1207.1 L1998.76 1207.1 L1999.35 1207.1 L1999.93 1207.1 L2000.52 1207.1 L2001.11 1207.1 L2001.69 1207.1 L2002.28 1207.1 L2002.86 1207.1 L2003.45 1207.1 L2004.04 1207.1 L2004.62 1207.1 L2005.21 1207.1 L2005.8 1207.1 L2006.38 1207.1 L2006.97 1207.1 L2007.56 1207.1 L2008.14 1207.1 L2008.73 1207.1 L2009.32 1207.1 L2009.9 1207.1 L2010.49 1207.1 L2011.07 1207.1 L2011.66 1207.1 L2012.25 1207.1 L2012.83 1207.1 L2013.42 1207.1 L2014.01 1207.1 L2014.59 1207.1 L2015.18 1207.1 L2015.77 1207.1 L2016.35 1207.1 L2016.94 1207.1 L2017.53 1207.1 L2018.11 1207.1 L2018.7 1207.1 L2019.28 1207.1 L2019.87 1207.1 L2020.46 1207.1 L2021.04 1207.1 L2021.63 1207.1 L2022.22 1207.1 L2022.8 1207.1 L2023.39 1207.1 L2023.98 1207.1 L2024.56 1207.1 L2025.15 1207.1 L2025.73 1207.1 L2026.32 1207.1 L2026.91 1207.1 L2027.49 1207.1 L2028.08 1207.1 L2028.67 1207.1 L2029.25 1207.1 L2029.84 1207.1 L2030.43 1207.1 L2031.01 1207.1 L2031.6 1207.1 L2032.19 1207.1 L2032.77 1207.1 L2033.36 1207.1 L2033.94 1207.1 L2034.53 1207.1 L2035.12 1207.1 L2035.7 1207.1 L2036.29 1207.1 L2036.88 1207.1 L2037.46 1207.1 L2038.05 1207.1 L2038.64 1207.1 L2039.22 1207.1 L2039.81 1207.1 L2040.4 1207.1 L2040.98 1207.1 L2041.57 1207.1 L2042.15 1207.1 L2042.74 1207.1 L2043.33 1207.1 L2043.91 1207.1 L2044.5 1207.1 L2045.09 1207.1 L2045.67 1207.1 L2046.26 1207.1 L2046.85 1207.1 L2047.43 1207.1 L2048.02 1207.1 L2048.6 1207.1 L2049.19 1207.1 L2049.78 1207.1 L2050.36 1207.1 L2050.95 1207.1 L2051.54 1207.1 L2052.12 1207.1 L2052.71 1207.1 L2053.3 1207.1 L2053.88 1207.1 L2054.47 1207.1 L2055.06 1207.1 L2055.64 1207.1 L2056.23 1207.1 L2056.81 1207.1 L2057.4 1207.1 L2057.99 1207.1 L2058.57 1207.1 L2059.16 1207.1 L2059.75 1207.1 L2060.33 1207.1 L2060.92 1207.1 L2061.51 1207.1 L2062.09 1207.1 L2062.68 1207.1 L2063.27 1207.1 L2063.85 1207.1 L2064.44 1207.1 L2065.02 1207.1 L2065.61 1207.1 L2066.2 1207.1 L2066.78 1207.1 L2067.37 1207.1 L2067.96 1207.1 L2068.54 1207.1 L2069.13 1207.1 L2069.72 1207.1 L2070.3 1207.1 L2070.89 1207.1 L2071.48 1207.1 L2072.06 1207.1 L2072.65 1207.1 L2073.23 1207.1 L2073.82 1207.1 L2074.41 1207.1 L2074.99 1207.1 L2075.58 1207.1 L2076.17 1207.1 L2076.75 1207.1 L2077.34 1207.1 L2077.93 1207.1 L2078.51 1207.1 L2079.1 1207.1 L2079.68 1207.1 L2080.27 1207.1 L2080.86 1207.1 L2081.44 1207.1 L2082.03 1207.1 L2082.62 1207.1 L2083.2 1207.1 L2083.79 1207.1 L2084.38 1207.1 L2084.96 1207.1 L2085.55 1207.1 L2086.14 1207.1 L2086.72 1207.1 L2087.31 1207.1 L2087.89 1207.1 L2088.48 1207.1 L2089.07 1207.1 L2089.65 1207.1 L2090.24 1207.1 L2090.83 1207.1 L2091.41 1207.1 L2092 1207.1 L2092.59 1207.1 L2093.17 1207.1 L2093.76 1207.1 L2094.35 1207.1 L2094.93 1207.1 L2095.52 1207.1 L2096.1 1207.1 L2096.69 1207.1 L2097.28 1207.1 L2097.86 1207.1 L2098.45 1207.1 L2099.04 1207.1 L2099.62 1207.1 L2100.21 1207.1 L2100.8 1207.1 L2101.38 1207.1 L2101.97 1207.1 L2102.55 1207.1 L2103.14 1207.1 L2103.73 1207.1 L2104.31 1207.1 L2104.9 1207.1 L2105.49 1207.1 L2106.07 1207.1 L2106.66 1207.1 L2107.25 1207.1 L2107.83 1207.1 L2108.42 1207.1 L2109.01 1207.1 L2109.59 1207.1 L2110.18 1207.1 L2110.76 1207.1 L2111.35 1207.1 L2111.94 1207.1 L2112.52 1207.1 L2113.11 1207.1 L2113.7 1207.1 L2114.28 1207.1 L2114.87 1207.1 L2115.46 1207.1 L2116.04 1207.1 L2116.63 1207.1 L2117.22 1207.1 L2117.8 1207.1 L2118.39 1207.1 L2118.97 1207.1 L2119.56 1207.1 L2120.15 1207.1 L2120.73 1207.1 L2121.32 1207.1 L2121.91 1207.1 L2122.49 1207.1 L2123.08 1207.1 L2123.67 1207.1 L2124.25 1207.1 L2124.84 1207.1 L2125.42 1207.1 L2126.01 1207.1 L2126.6 1207.1 L2127.18 1207.1 L2127.77 1207.1 L2128.36 1207.1 L2128.94 1207.1 L2129.53 1207.1 L2130.12 1207.1 L2130.7 1207.1 L2131.29 1207.1 L2131.88 1207.1 L2132.46 1207.1 L2133.05 1207.1 L2133.63 1207.1 L2134.22 1207.1 L2134.81 1207.1 L2135.39 1207.1 L2135.98 1207.1 L2136.57 1207.1 L2137.15 1207.1 L2137.74 1207.1 L2138.33 1207.1 L2138.91 1207.1 L2139.5 1207.1 L2140.09 1207.1 L2140.67 1207.1 L2141.26 1207.1 L2141.84 1207.1 L2142.43 1207.1 L2143.02 1207.1 L2143.6 1207.1 L2144.19 1207.1 L2144.78 1207.1 L2145.36 1207.1 L2145.95 1207.1 L2146.54 1207.1 L2147.12 1207.1 L2147.71 1207.1 L2148.3 1207.1 L2148.88 1207.1 L2149.47 1207.1 L2150.05 1207.1 L2150.64 1207.1 L2151.23 1207.1 L2151.81 1207.1 L2152.4 1207.1 L2152.99 1207.1 L2153.57 1207.1 L2154.16 1207.1 L2154.75 1207.1 L2155.33 1207.1 L2155.92 1207.1 L2156.5 1207.1 L2157.09 1207.1 L2157.68 1207.1 L2158.26 1207.1 L2158.26 1206.91 L2157.68 1206.91 L2157.09 1206.91 L2156.5 1206.91 L2155.92 1206.91 L2155.33 1206.91 L2154.75 1206.91 L2154.16 1206.91 L2153.57 1206.91 L2152.99 1206.91 L2152.4 1206.91 L2151.81 1206.91 L2151.23 1206.91 L2150.64 1206.91 L2150.05 1206.91 L2149.47 1206.91 L2148.88 1206.91 L2148.3 1206.91 L2147.71 1206.91 L2147.12 1206.91 L2146.54 1206.91 L2145.95 1206.91 L2145.36 1206.91 L2144.78 1206.91 L2144.19 1206.91 L2143.6 1206.91 L2143.02 1206.91 L2142.43 1206.91 L2141.84 1206.91 L2141.26 1206.91 L2140.67 1206.91 L2140.09 1206.91 L2139.5 1206.91 L2138.91 1206.91 L2138.33 1206.91 L2137.74 1206.91 L2137.15 1206.91 L2136.57 1206.91 L2135.98 1206.91 L2135.39 1206.91 L2134.81 1206.91 L2134.22 1206.91 L2133.63 1206.91 L2133.05 1206.91 L2132.46 1206.91 L2131.88 1206.91 L2131.29 1206.91 L2130.7 1206.91 L2130.12 1206.91 L2129.53 1206.91 L2128.94 1206.91 L2128.36 1206.91 L2127.77 1206.91 L2127.18 1206.91 L2126.6 1206.91 L2126.01 1206.91 L2125.42 1206.91 L2124.84 1206.91 L2124.25 1206.91 L2123.67 1206.91 L2123.08 1206.91 L2122.49 1206.91 L2121.91 1206.91 L2121.32 1206.91 L2120.73 1206.91 L2120.15 1206.91 L2119.56 1206.91 L2118.97 1206.91 L2118.39 1206.91 L2117.8 1206.91 L2117.22 1206.91 L2116.63 1206.91 L2116.04 1206.91 L2115.46 1206.91 L2114.87 1206.91 L2114.28 1206.91 L2113.7 1206.91 L2113.11 1206.91 L2112.52 1206.91 L2111.94 1206.91 L2111.35 1206.91 L2110.76 1206.91 L2110.18 1206.91 L2109.59 1206.91 L2109.01 1206.91 L2108.42 1206.91 L2107.83 1206.91 L2107.25 1206.91 L2106.66 1206.91 L2106.07 1206.91 L2105.49 1206.91 L2104.9 1206.91 L2104.31 1206.91 L2103.73 1206.91 L2103.14 1206.91 L2102.55 1206.91 L2101.97 1206.91 L2101.38 1206.91 L2100.8 1206.91 L2100.21 1206.91 L2099.62 1206.91 L2099.04 1206.91 L2098.45 1206.91 L2097.86 1206.91 L2097.28 1206.91 L2096.69 1206.91 L2096.1 1206.91 L2095.52 1206.91 L2094.93 1206.91 L2094.35 1206.91 L2093.76 1206.91 L2093.17 1206.91 L2092.59 1206.91 L2092 1206.91 L2091.41 1206.91 L2090.83 1206.91 L2090.24 1206.91 L2089.65 1206.91 L2089.07 1206.91 L2088.48 1206.91 L2087.89 1206.91 L2087.31 1206.91 L2086.72 1206.91 L2086.14 1206.91 L2085.55 1206.91 L2084.96 1206.91 L2084.38 1206.91 L2083.79 1206.91 L2083.2 1206.91 L2082.62 1206.91 L2082.03 1206.91 L2081.44 1206.91 L2080.86 1206.91 L2080.27 1206.91 L2079.68 1206.91 L2079.1 1206.91 L2078.51 1206.91 L2077.93 1206.91 L2077.34 1206.91 L2076.75 1206.91 L2076.17 1206.91 L2075.58 1206.91 L2074.99 1206.91 L2074.41 1206.91 L2073.82 1206.91 L2073.23 1206.91 L2072.65 1206.91 L2072.06 1206.91 L2071.48 1206.91 L2070.89 1206.91 L2070.3 1206.91 L2069.72 1206.91 L2069.13 1206.91 L2068.54 1206.91 L2067.96 1206.91 L2067.37 1206.91 L2066.78 1206.91 L2066.2 1206.91 L2065.61 1206.91 L2065.02 1206.91 L2064.44 1206.91 L2063.85 1206.91 L2063.27 1206.91 L2062.68 1206.91 L2062.09 1206.91 L2061.51 1206.91 L2060.92 1206.91 L2060.33 1206.91 L2059.75 1206.91 L2059.16 1206.91 L2058.57 1206.91 L2057.99 1206.91 L2057.4 1206.91 L2056.81 1206.91 L2056.23 1206.91 L2055.64 1206.91 L2055.06 1206.91 L2054.47 1206.91 L2053.88 1206.91 L2053.3 1206.91 L2052.71 1206.91 L2052.12 1206.91 L2051.54 1206.91 L2050.95 1206.91 L2050.36 1206.91 L2049.78 1206.91 L2049.19 1206.91 L2048.6 1206.91 L2048.02 1206.91 L2047.43 1206.91 L2046.85 1206.91 L2046.26 1206.91 L2045.67 1206.91 L2045.09 1206.91 L2044.5 1206.91 L2043.91 1206.91 L2043.33 1206.91 L2042.74 1206.91 L2042.15 1206.91 L2041.57 1206.91 L2040.98 1206.91 L2040.4 1206.91 L2039.81 1206.91 L2039.22 1206.91 L2038.64 1206.91 L2038.05 1206.91 L2037.46 1206.91 L2036.88 1206.91 L2036.29 1206.91 L2035.7 1206.91 L2035.12 1206.91 L2034.53 1206.91 L2033.94 1206.91 L2033.36 1206.91 L2032.77 1206.91 L2032.19 1206.91 L2031.6 1206.91 L2031.01 1206.91 L2030.43 1206.91 L2029.84 1206.91 L2029.25 1206.91 L2028.67 1206.91 L2028.08 1206.91 L2027.49 1206.91 L2026.91 1206.91 L2026.32 1206.91 L2025.73 1206.91 L2025.15 1206.91 L2024.56 1206.91 L2023.98 1206.91 L2023.39 1206.91 L2022.8 1206.91 L2022.22 1206.91 L2021.63 1206.91 L2021.04 1206.91 L2020.46 1206.91 L2019.87 1206.91 L2019.28 1206.91 L2018.7 1206.91 L2018.11 1206.91 L2017.53 1206.91 L2016.94 1206.91 L2016.35 1206.91 L2015.77 1206.91 L2015.18 1206.91 L2014.59 1206.91 L2014.01 1206.91 L2013.42 1206.91 L2012.83 1206.91 L2012.25 1206.91 L2011.66 1206.91 L2011.07 1206.91 L2010.49 1206.91 L2009.9 1206.91 L2009.32 1206.91 L2008.73 1206.91 L2008.14 1206.91 L2007.56 1206.91 L2006.97 1206.91 L2006.38 1206.91 L2005.8 1206.91 L2005.21 1206.91 L2004.62 1206.91 L2004.04 1206.91 L2003.45 1206.91 L2002.86 1206.91 L2002.28 1206.91 L2001.69 1206.91 L2001.11 1206.91 L2000.52 1206.91 L1999.93 1206.91 L1999.35 1206.91 L1998.76 1206.91 L1998.17 1206.91 L1997.59 1206.91 L1997 1206.91 L1996.41 1206.91 L1995.83 1206.91 L1995.24 1206.91 L1994.65 1206.91 L1994.07 1206.91 L1993.48 1206.91 L1992.9 1206.91 L1992.31 1206.91 L1991.72 1206.91 L1991.14 1206.91 L1990.55 1206.91 L1989.96 1206.91 L1989.38 1206.91 L1988.79 1206.91 L1988.2 1206.91 L1987.62 1206.91 L1987.03 1206.91 L1986.45 1206.91 L1985.86 1206.91 L1985.27 1206.91 L1984.69 1206.91 L1984.1 1206.91 L1983.51 1206.91 L1982.93 1206.91 L1982.34 1206.91 L1981.75 1206.91 L1981.17 1206.91 L1980.58 1206.91 L1979.99 1206.91 L1979.41 1206.91 L1978.82 1206.91 L1978.24 1206.91 L1977.65 1206.91 L1977.06 1206.91 L1976.48 1206.91 L1975.89 1206.91 L1975.3 1206.91 L1974.72 1206.91 L1974.13 1206.91 L1973.54 1206.91 L1972.96 1206.91 L1972.37 1206.91 L1971.78 1206.91 L1971.2 1206.91 L1970.61 1206.91 L1970.03 1206.91 L1969.44 1206.91 L1968.85 1206.91 L1968.27 1206.91 L1967.68 1206.91 L1967.09 1206.91 L1966.51 1206.91 L1965.92 1206.91 L1965.33 1206.91 L1964.75 1206.91 L1964.16 1206.91 L1963.58 1206.91 L1962.99 1206.91 L1962.4 1206.91 L1961.82 1206.91 L1961.23 1206.91 L1960.64 1206.91 L1960.06 1206.91 L1959.47 1206.91 L1958.88 1206.91 L1958.3 1206.91 L1957.71 1206.91 L1957.12 1206.91 L1956.54 1206.91 L1955.95 1206.91 L1955.37 1206.91 L1954.78 1206.91 L1954.19 1206.91 L1953.61 1206.91 L1953.02 1206.91 L1952.43 1206.91 L1951.85 1206.91 L1951.26 1206.91 L1950.67 1206.91 L1950.09 1206.91 L1949.5 1206.91 L1948.91 1206.91 L1948.33 1206.91 L1947.74 1206.91 L1947.16 1206.91 L1946.57 1206.91 L1945.98 1206.91 L1945.4 1206.91 L1944.81 1206.91 L1944.22 1206.91 L1943.64 1206.91 L1943.05 1206.91 L1942.46 1206.91 L1941.88 1206.91 L1941.29 1206.91 L1940.71 1206.91 L1940.12 1206.91 L1939.53 1206.91 L1938.95 1206.91 L1938.36 1206.91 L1937.77 1206.91 L1937.19 1206.91 L1936.6 1206.91 L1936.01 1206.91 L1935.43 1206.91 L1934.84 1206.91 L1934.25 1206.91 L1933.67 1206.91 L1933.08 1206.91 L1932.5 1206.91 L1931.91 1206.91 L1931.32 1206.91 L1930.74 1206.91 L1930.15 1206.91 L1929.56 1206.91 L1928.98 1206.91 L1928.39 1206.91 L1927.8 1206.91 L1927.22 1206.91 L1926.63 1206.91 L1926.04 1206.91 L1925.46 1206.91 L1924.87 1206.91 L1924.29 1206.91 L1923.7 1206.91 L1923.11 1206.91 L1922.53 1206.91 L1921.94 1206.91 L1921.35 1206.91 L1920.77 1206.91 L1920.18 1206.91 L1919.59 1206.91 L1919.01 1206.91 L1918.42 1206.91 L1917.83 1206.91 L1917.25 1206.91 L1916.66 1206.91 L1916.08 1206.91 L1915.49 1206.91 L1914.9 1206.91 L1914.32 1206.91 L1913.73 1206.91 L1913.14 1206.91 L1912.56 1206.91 L1911.97 1206.91 L1911.38 1206.91 L1910.8 1206.91 L1910.21 1206.91 L1909.63 1206.91 L1909.04 1206.91 L1908.45 1206.91 L1907.87 1206.91 L1907.28 1206.91 L1906.69 1206.91 L1906.11 1206.91 L1905.52 1206.91 L1904.93 1206.91 L1904.35 1206.91 L1903.76 1206.91 L1903.17 1206.91 L1902.59 1206.91 L1902 1206.91 L1901.42 1206.91 L1900.83 1206.91 L1900.24 1206.91 L1899.66 1206.91 L1899.07 1206.91 L1898.48 1206.91 L1897.9 1206.91 L1897.31 1206.91 L1896.72 1206.91 L1896.14 1206.91 L1895.55 1206.91 L1894.96 1206.91 L1894.38 1206.91 L1893.79 1206.91 L1893.21 1206.91 L1892.62 1206.91 L1892.03 1206.91 L1891.45 1206.91 L1890.86 1206.91 L1890.27 1206.91 L1889.69 1206.91 L1889.1 1206.91 L1888.51 1206.91 L1887.93 1206.91 L1887.34 1206.91 L1886.76 1206.91 L1886.17 1206.91 L1885.58 1206.91 L1885 1206.91 L1884.41 1206.91 L1883.82 1206.91 L1883.24 1206.91 L1882.65 1206.91 L1882.06 1206.91 L1881.48 1206.91 L1880.89 1206.91 L1880.3 1206.91 L1879.72 1206.91 L1879.13 1206.91 L1878.55 1206.91 L1877.96 1206.91 L1877.37 1206.91 L1876.79 1206.91 L1876.2 1206.91 L1875.61 1206.91 L1875.03 1206.91 L1874.44 1206.91 L1873.85 1206.91 L1873.27 1206.91 L1872.68 1206.91 L1872.09 1206.91 L1871.51 1206.91 L1870.92 1206.91 L1870.34 1206.91 L1869.75 1206.91 L1869.16 1206.91 L1868.58 1206.91 L1867.99 1206.91 L1867.4 1206.91 L1866.82 1206.91 L1866.23 1206.91 L1865.64 1206.91 L1865.06 1206.91 L1864.47 1206.91 L1863.88 1206.91 L1863.3 1206.91 L1862.71 1206.91 L1862.13 1206.91 L1861.54 1206.91 L1860.95 1206.91 L1860.37 1206.91 L1859.78 1206.91 L1859.19 1206.91 L1858.61 1206.91 L1858.02 1206.91 L1857.43 1206.91 L1856.85 1206.91 L1856.26 1206.91 L1855.68 1206.91 L1855.09 1206.91 L1854.5 1206.91 L1853.92 1206.91 L1853.33 1206.91 L1852.74 1206.91 L1852.16 1206.91 L1851.57 1206.91 L1850.98 1206.91 L1850.4 1206.91 L1849.81 1206.91 L1849.22 1206.91 L1848.64 1206.91 L1848.05 1206.91 L1847.47 1206.91 L1846.88 1206.91 L1846.29 1206.91 L1845.71 1206.91 L1845.12 1206.91 L1844.53 1206.91 L1843.95 1206.91 L1843.36 1206.91 L1842.77 1206.91 L1842.19 1206.91 L1841.6 1206.91 L1841.01 1206.91 L1840.43 1206.91 L1839.84 1206.91 L1839.26 1206.91 L1838.67 1206.91 L1838.08 1206.91 L1837.5 1206.91 L1836.91 1206.91 L1836.32 1206.91 L1835.74 1206.91 L1835.15 1206.91 L1834.56 1206.91 L1833.98 1206.91 L1833.39 1206.91 L1832.81 1206.91 L1832.22 1206.91 L1831.63 1206.91 L1831.05 1206.91 L1830.46 1206.91 L1829.87 1206.91 L1829.29 1206.91 L1828.7 1206.91 L1828.11 1206.91 L1827.53 1206.91 L1826.94 1206.91 L1826.35 1206.91 L1825.77 1206.91 L1825.18 1206.91 L1824.6 1206.91 L1824.01 1206.91 L1823.42 1206.91 L1822.84 1206.91 L1822.25 1206.91 L1821.66 1206.91 L1821.08 1206.91 L1820.49 1206.91 L1819.9 1206.91 L1819.32 1206.91 L1818.73 1206.91 L1818.14 1206.91 L1817.56 1206.91 L1816.97 1206.91 L1816.39 1206.91 L1815.8 1206.91 L1815.21 1206.91 L1814.63 1206.91 L1814.04 1206.91 L1813.45 1206.91 L1812.87 1206.91 L1812.28 1206.91 L1811.69 1206.91 L1811.11 1206.91 L1810.52 1206.91 L1809.94 1206.91 L1809.35 1206.91 L1808.76 1206.91 L1808.18 1206.91 L1807.59 1206.91 L1807 1206.91 L1806.42 1206.91 L1805.83 1206.91 L1805.24 1206.91 L1804.66 1206.91 L1804.07 1206.91 L1803.48 1206.91 L1802.9 1206.91 L1802.31 1206.91 L1801.73 1206.91 L1801.14 1206.91 L1800.55 1206.91 L1799.97 1206.91 L1799.38 1206.91 L1798.79 1206.91 L1798.21 1206.91 L1797.62 1206.91 L1797.03 1206.91 L1796.45 1206.91 L1795.86 1206.91 L1795.27 1206.91 L1794.69 1206.91 L1794.1 1206.91 L1793.52 1206.91 L1792.93 1206.91 L1792.34 1206.91 L1791.76 1206.91 L1791.17 1206.91 L1790.58 1206.91 L1790 1206.91 L1789.41 1206.91 L1788.82 1206.91 L1788.24 1206.91 L1787.65 1206.91 L1787.06 1206.91 L1786.48 1206.91 L1785.89 1206.91 L1785.31 1206.91 L1784.72 1206.91 L1784.13 1206.91 L1783.55 1206.91 L1782.96 1206.91 L1782.37 1206.91 L1781.79 1206.91 L1781.2 1206.91 L1780.61 1206.91 L1780.03 1206.91 L1779.44 1206.91 L1778.86 1206.91 L1778.27 1206.91 L1777.68 1206.91 L1777.1 1206.91 L1776.51 1206.91 L1775.92 1206.91 L1775.34 1206.91 L1774.75 1206.91 L1774.16 1206.91 L1773.58 1206.91 L1772.99 1206.91 L1772.4 1206.91 L1771.82 1206.91 L1771.23 1206.91 L1770.65 1206.91 L1770.06 1206.91 L1769.47 1206.91 L1768.89 1206.91 L1768.3 1206.91 L1767.71 1206.91 L1767.13 1206.91 L1766.54 1206.91 L1765.95 1206.91 L1765.37 1206.91 L1764.78 1206.91 L1764.19 1206.91 L1763.61 1206.91 L1763.02 1206.91 L1762.44 1206.91 L1761.85 1206.91 L1761.26 1206.91 L1760.68 1206.91 L1760.09 1206.91 L1759.5 1206.91 L1758.92 1206.91 L1758.33 1206.91 L1757.74 1206.91 L1757.16 1206.91 L1756.57 1206.91 L1755.99 1206.91 L1755.4 1206.91 L1754.81 1206.91 L1754.23 1206.91 L1753.64 1206.91 L1753.05 1206.91 L1752.47 1206.91 L1751.88 1206.91 L1751.29 1206.91 L1750.71 1206.91 L1750.12 1206.91 L1749.53 1206.91 L1748.95 1206.91 L1748.36 1206.91 L1747.78 1206.91 L1747.19 1206.91 L1746.6 1206.91 L1746.02 1206.91 L1745.43 1206.91 L1744.84 1206.91 L1744.26 1206.91 L1743.67 1206.91 L1743.08 1206.91 L1742.5 1206.91 L1741.91 1206.91 L1741.32 1206.91 L1740.74 1206.91 L1740.15 1206.91 L1739.57 1206.91 L1738.98 1206.91 L1738.39 1206.91 L1737.81 1206.91 L1737.22 1206.91 L1736.63 1206.91 L1736.05 1206.91 L1735.46 1206.91 L1734.87 1206.91 L1734.29 1206.91 L1733.7 1206.91 L1733.11 1206.91 L1732.53 1206.91 L1731.94 1206.91 L1731.36 1206.91 L1730.77 1206.91 L1730.18 1206.91 L1729.6 1206.91 L1729.01 1206.91 L1728.42 1206.91 L1727.84 1206.91 L1727.25 1206.91 L1726.66 1206.91 L1726.08 1206.91 L1725.49 1206.91 L1724.91 1206.91 L1724.32 1206.91 L1723.73 1206.91 L1723.15 1206.91 L1722.56 1206.91 L1721.97 1206.91 L1721.39 1206.91 L1720.8 1206.91 L1720.21 1206.91 L1719.63 1206.91 L1719.04 1206.91 L1718.45 1206.91 L1717.87 1206.91 L1717.28 1206.91 L1716.7 1206.91 L1716.11 1206.91 L1715.52 1206.91 L1714.94 1206.91 L1714.35 1206.91 L1713.76 1206.91 L1713.18 1206.91 L1712.59 1206.91 L1712 1206.91 L1711.42 1206.91 L1710.83 1206.91 L1710.24 1206.91 L1709.66 1206.91 L1709.07 1206.91 L1708.49 1206.91 L1707.9 1206.91 L1707.31 1206.91 L1706.73 1206.91 L1706.14 1206.91 L1705.55 1206.91 L1704.97 1206.91 L1704.38 1206.91 L1703.79 1206.91 L1703.21 1206.91 L1702.62 1206.91 L1702.04 1206.91 L1701.45 1206.91 L1700.86 1206.91 L1700.28 1206.91 L1699.69 1206.91 L1699.1 1206.91 L1698.52 1206.91 L1697.93 1206.91 L1697.34 1206.91 L1696.76 1206.91 L1696.17 1206.91 L1695.58 1206.91 L1695 1206.91 L1694.41 1206.91 L1693.83 1206.91 L1693.24 1206.91 L1692.65 1206.91 L1692.07 1206.91 L1691.48 1206.91 L1690.89 1206.91 L1690.31 1206.91 L1689.72 1206.91 L1689.13 1206.91 L1688.55 1206.91 L1687.96 1206.91 L1687.37 1206.91 L1686.79 1206.91 L1686.2 1206.91 L1685.62 1206.91 L1685.03 1206.91 L1684.44 1206.91 L1683.86 1206.91 L1683.27 1206.91 L1682.68 1206.91 L1682.1 1206.91 L1681.51 1206.91 L1680.92 1206.91 L1680.34 1206.91 L1679.75 1206.91 L1679.17 1206.91 L1678.58 1206.91 L1677.99 1206.91 L1677.41 1206.91 L1676.82 1206.91 L1676.23 1206.91 L1675.65 1206.91 L1675.06 1206.91 L1674.47 1206.91 L1673.89 1206.91 L1673.3 1206.91 L1672.71 1206.91 L1672.13 1206.91 L1671.54 1206.91 L1670.96 1206.91 L1670.37 1206.91 L1669.78 1206.91 L1669.2 1206.91 L1668.61 1206.91 L1668.02 1206.91 L1667.44 1206.91 L1666.85 1206.91 L1666.26 1206.91 L1665.68 1206.91 L1665.09 1206.91 L1664.5 1206.91 L1663.92 1206.91 L1663.33 1206.91 L1662.75 1206.91 L1662.16 1206.91 L1661.57 1206.91 L1660.99 1206.91 L1660.4 1206.91 L1659.81 1206.91 L1659.23 1206.91 L1658.64 1206.91 L1658.05 1206.91 L1657.47 1206.91 L1656.88 1206.91 L1656.29 1206.91 L1655.71 1206.91 L1655.12 1206.91 L1654.54 1206.91 L1653.95 1206.91 L1653.36 1206.91 L1652.78 1206.91 L1652.19 1206.91 L1651.6 1206.91 L1651.02 1206.91 L1650.43 1206.91 L1649.84 1206.91 L1649.26 1206.91 L1648.67 1206.91 L1648.09 1206.91 L1647.5 1206.91 L1646.91 1206.91 L1646.33 1206.91 L1645.74 1206.91 L1645.15 1206.91 L1644.57 1206.91 L1643.98 1206.91 L1643.39 1206.91 L1642.81 1206.91 L1642.22 1206.91 L1641.63 1206.91 L1641.05 1206.91 L1640.46 1206.91 L1639.88 1206.91 L1639.29 1206.91 L1638.7 1206.91 L1638.12 1206.91 L1637.53 1206.91 L1636.94 1206.91 L1636.36 1206.91 L1635.77 1206.91 L1635.18 1206.91 L1634.6 1206.91 L1634.01 1206.91 L1633.42 1206.91 L1632.84 1206.91 L1632.25 1206.91 L1631.67 1206.91 L1631.08 1206.91 L1630.49 1206.91 L1629.91 1206.91 L1629.32 1206.91 L1628.73 1206.91 L1628.15 1206.91 L1627.56 1206.91 L1626.97 1206.91 L1626.39 1206.91 L1625.8 1206.91 L1625.22 1206.91 L1624.63 1206.91 L1624.04 1206.91 L1623.46 1206.91 L1622.87 1206.91 L1622.28 1206.91 L1621.7 1206.91 L1621.11 1206.91 L1620.52 1206.91 L1619.94 1206.91 L1619.35 1206.91 L1618.76 1206.91 L1618.18 1206.91 L1617.59 1206.91 L1617.01 1206.91 L1616.42 1206.91 L1615.83 1206.91 L1615.25 1206.91 L1614.66 1206.91 L1614.07 1206.91 L1613.49 1206.91 L1612.9 1206.91 L1612.31 1206.91 L1611.73 1206.91 L1611.14 1206.91 L1610.55 1206.91 L1609.97 1206.91 L1609.38 1206.91 L1608.8 1206.91 L1608.21 1206.91 L1607.62 1206.91 L1607.04 1206.91 L1606.45 1206.91 L1605.86 1206.91 L1605.28 1206.91 L1604.69 1206.91 L1604.1 1206.91 L1603.52 1206.91 L1602.93 1206.91 L1602.34 1206.91 L1601.76 1206.91 L1601.17 1206.91 L1600.59 1206.91 L1600 1206.91 L1599.41 1206.91 L1598.83 1206.91 L1598.24 1206.91 L1597.65 1206.91 L1597.07 1206.91 L1596.48 1206.91 L1595.89 1206.91 L1595.31 1206.91 L1594.72 1206.91 L1594.14 1206.91 L1593.55 1206.91 L1592.96 1206.91 L1592.38 1206.91 L1591.79 1206.91 L1591.2 1206.91 L1590.62 1206.91 L1590.03 1206.91 L1589.44 1206.91 L1588.86 1206.91 L1588.27 1206.91 L1587.68 1206.91 L1587.1 1206.91 L1586.51 1206.91 L1585.93 1206.91 L1585.34 1206.91 L1584.75 1206.91 L1584.17 1206.91 L1583.58 1206.91 L1582.99 1206.91 L1582.41 1206.91 L1581.82 1206.91 L1581.23 1206.91 L1580.65 1206.91 L1580.06 1206.91 L1579.47 1206.91 L1578.89 1206.91 L1578.3 1206.91 L1577.72 1206.91 L1577.13 1206.91 L1576.54 1206.91 L1575.96 1206.91 L1575.37 1206.91 L1574.78 1206.91 L1574.2 1206.91 L1573.61 1206.91 L1573.02 1206.91 L1572.44 1206.91 L1571.85 1206.91 L1571.27 1206.91 L1570.68 1206.91 L1570.09 1206.91 L1569.51 1206.91 L1568.92 1206.91 L1568.33 1206.91 L1567.75 1206.91 L1567.16 1206.91 L1566.57 1206.91 L1565.99 1206.91 L1565.4 1206.91 L1564.81 1206.91 L1564.23 1206.91 L1563.64 1206.91 L1563.06 1206.91 L1562.47 1206.91 L1561.88 1206.91 L1561.3 1206.91 L1560.71 1206.91 L1560.12 1206.91 L1559.54 1206.91 L1558.95 1206.91 L1558.36 1206.91 L1557.78 1206.91 L1557.19 1206.91 L1556.6 1206.91 L1556.02 1206.91 L1555.43 1206.91 L1554.85 1206.91 L1554.26 1206.91 L1553.67 1206.91 L1553.09 1206.91 L1552.5 1206.91 L1551.91 1206.91 L1551.33 1206.91 L1550.74 1206.91 L1550.15 1206.91 L1549.57 1206.91 L1548.98 1206.91 L1548.4 1206.91 L1547.81 1206.91 L1547.22 1206.91 L1546.64 1206.91 L1546.05 1206.91 L1545.46 1206.91 L1544.88 1206.91 L1544.29 1206.91 L1543.7 1206.91 L1543.12 1206.91 L1542.53 1206.91 L1541.94 1206.91 L1541.36 1206.91 L1540.77 1206.91 L1540.19 1206.91 L1539.6 1206.91 L1539.01 1206.91 L1538.43 1206.91 L1537.84 1206.91 L1537.25 1206.91 L1536.67 1206.91 L1536.08 1206.91 L1535.49 1206.91 L1534.91 1206.91 L1534.32 1206.91 L1533.73 1206.91 L1533.15 1206.91 L1532.56 1206.91 L1531.98 1206.91 L1531.39 1206.91 L1530.8 1206.91 L1530.22 1206.91 L1529.63 1206.91 L1529.04 1206.91 L1528.46 1206.91 L1527.87 1206.91 L1527.28 1206.91 L1526.7 1206.91 L1526.11 1206.91 L1525.52 1206.91 L1524.94 1206.91 L1524.35 1206.91 L1523.77 1206.91 L1523.18 1206.91 L1522.59 1206.91 L1522.01 1206.91 L1521.42 1206.91 L1520.83 1206.91 L1520.25 1206.91 L1519.66 1206.91 L1519.07 1206.91 L1518.49 1206.91 L1517.9 1206.91 L1517.32 1206.91 L1516.73 1206.91 L1516.14 1206.91 L1515.56 1206.91 L1514.97 1206.91 L1514.38 1206.91 L1513.8 1206.91 L1513.21 1206.91 L1512.62 1206.91 L1512.04 1206.91 L1511.45 1206.91 L1510.86 1206.91 L1510.28 1206.91 L1509.69 1206.91 L1509.11 1206.91 L1508.52 1206.91 L1507.93 1206.91 L1507.35 1206.91 L1506.76 1206.91 L1506.17 1206.91 L1505.59 1206.91 L1505 1206.91 L1504.41 1206.91 L1503.83 1206.91 L1503.24 1206.91 L1502.65 1206.91 L1502.07 1206.91 L1501.48 1206.91 L1500.9 1206.91 L1500.31 1206.91 L1499.72 1206.91 L1499.14 1206.91 L1498.55 1206.91 L1497.96 1206.91 L1497.38 1206.91 L1496.79 1206.91 L1496.2 1206.91 L1495.62 1206.91 L1495.03 1206.91 L1494.45 1206.91 L1493.86 1206.91 L1493.27 1206.91 L1492.69 1206.91 L1492.1 1206.91 L1491.51 1206.91 L1490.93 1206.91 L1490.34 1206.91 L1489.75 1206.91 L1489.17 1206.91 L1488.58 1206.91 L1487.99 1206.91 L1487.41 1206.91 L1486.82 1206.91 L1486.24 1206.91 L1485.65 1206.91 L1485.06 1206.91 L1484.48 1206.91 L1483.89 1206.91 L1483.3 1206.91 L1482.72 1206.91 L1482.13 1206.91 L1481.54 1206.91 L1480.96 1206.91 L1480.37 1206.91 L1479.78 1206.91 L1479.2 1206.91 L1478.61 1206.91 L1478.03 1206.91 L1477.44 1206.91 L1476.85 1206.91 L1476.27 1206.91 L1475.68 1206.91 L1475.09 1206.91 L1474.51 1206.91 L1473.92 1206.91 L1473.33 1206.91 L1472.75 1206.91 L1472.16 1206.91 L1471.57 1206.91 L1470.99 1206.91 L1470.4 1206.91 L1469.82 1206.91 L1469.23 1206.91 L1468.64 1206.91 L1468.06 1206.91 L1467.47 1206.91 L1466.88 1206.91 L1466.3 1206.91 L1465.71 1206.91 L1465.12 1206.91 L1464.54 1206.91 L1463.95 1206.91 L1463.37 1206.91 L1462.78 1206.91 L1462.19 1206.91 L1461.61 1206.91 L1461.02 1206.91 L1460.43 1206.91 L1459.85 1206.91 L1459.26 1206.91 L1458.67 1206.91 L1458.09 1206.91 L1457.5 1206.91 L1456.91 1206.91 L1456.33 1206.91 L1455.74 1206.91 L1455.16 1206.91 L1454.57 1206.91 L1453.98 1206.91 L1453.4 1206.91 L1452.81 1206.91 L1452.22 1206.91 L1451.64 1206.91 L1451.05 1206.91 L1450.46 1206.91 L1449.88 1206.91 L1449.29 1206.91 L1448.7 1206.91 L1448.12 1206.91 L1447.53 1206.91 L1446.95 1206.91 L1446.36 1206.91 L1445.77 1206.91 L1445.19 1206.91 L1444.6 1206.91 L1444.01 1206.91 L1443.43 1206.91 L1442.84 1206.91 L1442.25 1206.91 L1441.67 1206.91 L1441.08 1206.91 L1440.5 1206.91 L1439.91 1206.91 L1439.32 1206.91 L1438.74 1206.91 L1438.15 1206.91 L1437.56 1206.91 L1436.98 1206.91 L1436.39 1206.91 L1435.8 1206.91 L1435.22 1206.91 L1434.63 1206.91 L1434.04 1206.91 L1433.46 1206.91 L1432.87 1206.91 L1432.29 1206.91 L1431.7 1206.91 L1431.11 1206.91 L1430.53 1206.91 L1429.94 1206.91 L1429.35 1206.91 L1428.77 1206.91 L1428.18 1206.91 L1427.59 1206.91 L1427.01 1206.91 L1426.42 1206.91 L1425.83 1206.91 L1425.25 1206.91 L1424.66 1206.91 L1424.08 1206.91 L1423.49 1206.91 L1422.9 1206.91 L1422.32 1206.91 L1421.73 1206.91 L1421.14 1206.91 L1420.56 1206.91 L1419.97 1206.91 L1419.38 1206.91 L1418.8 1206.91 L1418.21 1206.91 L1417.63 1206.91 L1417.04 1206.91 L1416.45 1206.91 L1415.87 1206.91 L1415.28 1206.91 L1414.69 1206.91 L1414.11 1206.91 L1413.52 1206.91 L1412.93 1206.91 L1412.35 1206.91 L1411.76 1206.91 L1411.17 1206.91 L1410.59 1206.91 L1410 1206.91 L1409.42 1206.91 L1408.83 1206.91 L1408.24 1206.91 L1407.66 1206.91 L1407.07 1206.91 L1406.48 1206.91 L1405.9 1206.91 L1405.31 1206.91 L1404.72 1206.91 L1404.14 1206.91 L1403.55 1206.91 L1402.96 1206.91 L1402.38 1206.91 L1401.79 1206.91 L1401.21 1206.91 L1400.62 1206.91 L1400.03 1206.91 L1399.45 1206.91 L1398.86 1206.91 L1398.27 1206.91 L1397.69 1206.91 L1397.1 1206.91 L1396.51 1206.91 L1395.93 1206.91 L1395.34 1206.91 L1394.75 1206.91 L1394.17 1206.91 L1393.58 1206.91 L1393 1206.91 L1392.41 1206.91 L1391.82 1206.91 L1391.24 1206.91 L1390.65 1206.91 L1390.06 1206.91 L1389.48 1206.91 L1388.89 1206.91 L1388.3 1206.91 L1387.72 1206.91 L1387.13 1206.91 L1386.55 1206.91 L1385.96 1206.91 L1385.37 1206.91 L1384.79 1206.91 L1384.2 1206.91 L1383.61 1206.91 L1383.03 1206.91 L1382.44 1206.91 L1381.85 1206.91 L1381.27 1206.91 L1380.68 1206.91 L1380.09 1206.91 L1379.51 1206.91 L1378.92 1206.91 L1378.34 1206.91 L1377.75 1206.91 L1377.16 1206.91 L1376.58 1206.91 L1375.99 1206.91 L1375.4 1206.91 L1374.82 1206.91 L1374.23 1206.91 L1373.64 1206.91 L1373.06 1206.91 L1372.47 1206.91 L1371.88 1206.91 L1371.3 1206.91 L1370.71 1206.91 L1370.13 1206.91 L1369.54 1206.91 L1368.95 1206.91 L1368.37 1206.91 L1367.78 1206.91 L1367.19 1206.91 L1366.61 1206.91 L1366.02 1206.91 L1365.43 1206.91 L1364.85 1206.91 L1364.26 1206.91 L1363.68 1206.91 L1363.09 1206.91 L1362.5 1206.91 L1361.92 1206.91 L1361.33 1206.91 L1360.74 1206.91 L1360.16 1206.91 L1359.57 1206.91 L1358.98 1206.91 L1358.4 1206.91 L1357.81 1206.91 L1357.22 1206.91 L1356.64 1206.91 L1356.05 1206.91 L1355.47 1206.91 L1354.88 1206.91 L1354.29 1206.91 L1353.71 1206.91 L1353.12 1206.91 L1352.53 1206.91 L1351.95 1206.91 L1351.36 1206.91 L1350.77 1206.91 L1350.19 1206.91 L1349.6 1206.91 L1349.01 1206.91 L1348.43 1206.91 L1347.84 1206.91 L1347.26 1206.91 L1346.67 1206.91 L1346.08 1206.91 L1345.5 1206.91 L1344.91 1206.91 L1344.32 1206.91 L1343.74 1206.91 L1343.15 1206.91 L1342.56 1206.91 L1341.98 1206.91 L1341.39 1206.91 L1340.8 1206.91 L1340.22 1206.91 L1339.63 1206.91 L1339.05 1206.91 L1338.46 1206.91 L1337.87 1206.91 L1337.29 1206.91 L1336.7 1206.91 L1336.11 1206.91 L1335.53 1206.91 L1334.94 1206.91 L1334.35 1206.91 L1333.77 1206.91 L1333.18 1206.91 L1332.6 1206.91 L1332.01 1206.91 L1331.42 1206.91 L1330.84 1206.91 L1330.25 1206.91 L1329.66 1206.91 L1329.08 1206.91 L1328.49 1206.91 L1327.9 1206.91 L1327.32 1206.91 L1326.73 1206.91 L1326.14 1206.91 L1325.56 1206.91 L1324.97 1206.91 L1324.39 1206.91 L1323.8 1206.91 L1323.21 1206.91 L1322.63 1206.91 L1322.04 1206.91 L1321.45 1206.91 L1320.87 1206.91 L1320.28 1206.91 L1319.69 1206.91 L1319.11 1206.91 L1318.52 1206.91 L1317.93 1206.91 L1317.35 1206.91 L1316.76 1206.91 L1316.18 1206.91 L1315.59 1206.91 L1315 1206.91 L1314.42 1206.91 L1313.83 1206.91 L1313.24 1206.91 L1312.66 1206.91 L1312.07 1206.91 L1311.48 1206.91 L1310.9 1206.91 L1310.31 1206.91 L1309.73 1206.91 L1309.14 1206.91 L1308.55 1206.91 L1307.97 1206.91 L1307.38 1206.91 L1306.79 1206.91 L1306.21 1206.91 L1305.62 1206.91 L1305.03 1206.91 L1304.45 1206.91 L1303.86 1206.91 L1303.27 1206.91 L1302.69 1206.91 L1302.1 1206.91 L1301.52 1206.91 L1300.93 1206.91 L1300.34 1206.91 L1299.76 1206.91 L1299.17 1206.91 L1298.58 1206.91 L1298 1206.91 L1297.41 1206.91 L1296.82 1206.91 L1296.24 1206.91 L1295.65 1206.91 L1295.06 1206.91 L1294.48 1206.91 L1293.89 1206.91 L1293.31 1206.91 L1292.72 1206.91 L1292.13 1206.91 L1291.55 1206.91 L1290.96 1206.91 L1290.37 1206.91 L1289.79 1206.91 L1289.2 1206.91 L1288.61 1206.91 L1288.03 1206.91 L1287.44 1206.91 L1286.86 1206.91 L1286.27 1206.91 L1285.68 1206.91 L1285.1 1206.91 L1284.51 1206.91 L1283.92 1206.91 L1283.34 1206.91 L1282.75 1206.91 L1282.16 1206.91 L1281.58 1206.91 L1280.99 1206.91 L1280.4 1206.91 L1279.82 1206.91 L1279.23 1206.91 L1278.65 1206.91 L1278.06 1206.91 L1277.47 1206.91 L1276.89 1206.91 L1276.3 1206.91 L1275.71 1206.91 L1275.13 1206.91 L1274.54 1206.91 L1273.95 1206.91 L1273.37 1206.91 L1272.78 1206.91 L1272.19 1206.91 L1271.61 1206.91 L1271.02 1206.91 L1270.44 1206.91 L1269.85 1206.91 L1269.26 1206.91 L1268.68 1206.91 L1268.09 1206.91 L1267.5 1206.91 L1266.92 1206.91 L1266.33 1206.91 L1265.74 1206.91 L1265.16 1206.91 L1264.57 1206.91 L1263.98 1206.91 L1263.4 1206.91 L1262.81 1206.91 L1262.23 1206.91 L1261.64 1206.91 L1261.05 1206.91 L1260.47 1206.91 L1259.88 1206.91 L1259.29 1206.91 L1258.71 1206.91 L1258.12 1206.91 L1257.53 1206.91 L1256.95 1206.91 L1256.36 1206.91 L1255.78 1206.91 L1255.19 1206.91 L1254.6 1206.91 L1254.02 1206.91 L1253.43 1206.91 L1252.84 1206.91 L1252.26 1206.91 L1251.67 1206.91 L1251.08 1206.91 L1250.5 1206.91 L1249.91 1206.91 L1249.32 1206.91 L1248.74 1206.91 L1248.15 1206.91 L1247.57 1206.91 L1246.98 1206.91 L1246.39 1206.91 L1245.81 1206.91 L1245.22 1206.91 L1244.63 1206.91 L1244.05 1206.91 L1243.46 1206.91 L1242.87 1206.91 L1242.29 1206.91 L1241.7 1206.91 L1241.11 1206.91 L1240.53 1206.91 L1239.94 1206.91 L1239.36 1206.91 L1238.77 1206.91 L1238.18 1206.91 L1237.6 1206.91 L1237.01 1206.91 L1236.42 1206.91 L1235.84 1206.91 L1235.25 1206.91 L1234.66 1206.91 L1234.08 1206.91 L1233.49 1206.91 L1232.91 1206.91 L1232.32 1206.91 L1231.73 1206.91 L1231.15 1206.91 L1230.56 1206.91 L1229.97 1206.91 L1229.39 1206.91 L1228.8 1206.91 L1228.21 1206.91 L1227.63 1206.91 L1227.04 1206.91 L1226.45 1206.91 L1225.87 1206.91 L1225.28 1206.91 L1224.7 1206.91 L1224.11 1206.91 L1223.52 1206.91 L1222.94 1206.91 L1222.35 1206.91 L1221.76 1206.91 L1221.18 1206.91 L1220.59 1206.91 L1220 1206.91 L1219.42 1206.91 L1218.83 1206.91 L1218.24 1206.91 L1217.66 1206.91 L1217.07 1206.91 L1216.49 1206.91 L1215.9 1206.91 L1215.31 1206.91 L1214.73 1206.91 L1214.14 1206.91 L1213.55 1206.91 L1212.97 1206.91 L1212.38 1206.91 L1211.79 1206.91 L1211.21 1206.91 L1210.62 1206.91 L1210.03 1206.91 L1209.45 1206.91 L1208.86 1206.91 L1208.28 1206.91 L1207.69 1206.91 L1207.1 1206.91 L1206.52 1206.91 L1205.93 1206.91 L1205.34 1206.91 L1204.76 1206.91 L1204.17 1206.91 L1203.58 1206.91 L1203 1206.91 L1202.41 1206.91 L1201.83 1206.91 L1201.24 1206.91 L1200.65 1206.91 L1200.07 1206.91 L1199.48 1206.91 L1198.89 1206.91 L1198.31 1206.91 L1197.72 1206.91 L1197.13 1206.91 L1196.55 1206.91 L1195.96 1206.91 L1195.37 1206.91 L1194.79 1206.91 L1194.2 1206.91 L1193.62 1206.91 L1193.03 1206.91 L1192.44 1206.91 L1191.86 1206.91 L1191.27 1206.91 L1190.68 1206.91 L1190.1 1206.91 L1189.51 1206.91 L1188.92 1206.91 L1188.34 1206.91 L1187.75 1206.91 L1187.16 1206.91 L1186.58 1206.91 L1185.99 1206.91 L1185.41 1206.91 L1184.82 1206.91 L1184.23 1206.91 L1183.65 1206.91 L1183.06 1206.91 L1182.47 1206.91 L1181.89 1206.91 L1181.3 1206.91 L1180.71 1206.91 L1180.13 1206.91 L1179.54 1206.91 L1178.96 1206.91 L1178.37 1206.91 L1177.78 1206.91 L1177.2 1206.91 L1176.61 1206.91 L1176.02 1206.91 L1175.44 1206.91 L1174.85 1206.91 L1174.26 1206.91 L1173.68 1206.91 L1173.09 1206.91 L1172.5 1206.91 L1171.92 1206.91 L1171.33 1206.91 L1170.75 1206.91 L1170.16 1206.91 L1169.57 1206.91 L1168.99 1206.91 L1168.4 1206.91 L1167.81 1206.91 L1167.23 1206.91 L1166.64 1206.91 L1166.05 1206.91 L1165.47 1206.91 L1164.88 1206.91 L1164.29 1206.91 L1163.71 1206.91 L1163.12 1206.91 L1162.54 1206.91 L1161.95 1206.91 L1161.36 1206.91 L1160.78 1206.91 L1160.19 1206.91 L1159.6 1206.91 L1159.02 1206.91 L1158.43 1206.91 L1157.84 1206.91 L1157.26 1206.91 L1156.67 1206.91 L1156.09 1206.91 L1155.5 1206.91 L1154.91 1206.91 L1154.33 1206.91 L1153.74 1206.91 L1153.15 1206.91 L1152.57 1206.91 L1151.98 1206.91 L1151.39 1206.91 L1150.81 1206.91 L1150.22 1206.91 L1149.63 1206.91 L1149.05 1206.91 L1148.46 1206.91 L1147.88 1206.91 L1147.29 1206.91 L1146.7 1206.91 L1146.12 1206.91 L1145.53 1206.91 L1144.94 1206.91 L1144.36 1206.91 L1143.77 1206.91 L1143.18 1206.91 L1142.6 1206.91 L1142.01 1206.91 L1141.42 1206.91 L1140.84 1206.91 L1140.25 1206.91 L1139.67 1206.91 L1139.08 1206.91 L1138.49 1206.91 L1137.91 1206.91 L1137.32 1206.91 L1136.73 1206.91 L1136.15 1206.91 L1135.56 1206.91 L1134.97 1206.91 L1134.39 1206.91 L1133.8 1206.91 L1133.21 1206.91 L1132.63 1206.91 L1132.04 1206.91 L1131.46 1206.91 L1130.87 1206.91 L1130.28 1206.91 L1129.7 1206.91 L1129.11 1206.91 L1128.52 1206.91 L1127.94 1206.91 L1127.35 1206.91 L1126.76 1206.91 L1126.18 1206.91 L1125.59 1206.91 L1125.01 1206.91 L1124.42 1206.91 L1123.83 1206.91 L1123.25 1206.91 L1122.66 1206.91 L1122.07 1206.91 L1121.49 1206.91 L1120.9 1206.91 L1120.31 1206.91 L1119.73 1206.91 L1119.14 1206.91 L1118.55 1206.91 L1117.97 1206.91 L1117.38 1206.91 L1116.8 1206.91 L1116.21 1206.91 L1115.62 1206.91 L1115.04 1206.91 L1114.45 1206.91 L1113.86 1206.91 L1113.28 1206.91 L1112.69 1206.91 L1112.1 1206.91 L1111.52 1206.91 L1110.93 1206.91 L1110.34 1206.91 L1109.76 1206.91 L1109.17 1206.91 L1108.59 1206.91 L1108 1206.91 L1107.41 1206.91 L1106.83 1206.91 L1106.24 1206.91 L1105.65 1206.91 L1105.07 1206.91 L1104.48 1206.91 L1103.89 1206.91 L1103.31 1206.91 L1102.72 1206.91 L1102.14 1206.91 L1101.55 1206.91 L1100.96 1206.91 L1100.38 1206.91 L1099.79 1206.91 L1099.2 1206.91 L1098.62 1206.91 L1098.03 1206.91 L1097.44 1206.91 L1096.86 1206.91 L1096.27 1206.91 L1095.68 1206.91 L1095.1 1206.91 L1094.51 1206.91 L1093.93 1206.91 L1093.34 1206.91 L1092.75 1206.91 L1092.17 1206.91 L1091.58 1206.91 L1090.99 1206.91 L1090.41 1206.91 L1089.82 1206.91 L1089.23 1206.91 L1088.65 1206.91 L1088.06 1206.91 L1087.47 1206.91 L1086.89 1206.91 L1086.3 1206.91 L1085.72 1206.91 L1085.13 1206.91 L1084.54 1206.91 L1083.96 1206.91 L1083.37 1206.91 L1082.78 1206.91 L1082.2 1206.91 L1081.61 1206.91 L1081.02 1206.91 L1080.44 1206.91 L1079.85 1206.91 L1079.26 1206.91 L1078.68 1206.91 L1078.09 1206.91 L1077.51 1206.91 L1076.92 1206.91 L1076.33 1206.91 L1075.75 1206.91 L1075.16 1206.91 L1074.57 1206.91 L1073.99 1206.91 L1073.4 1206.91 L1072.81 1206.91 L1072.23 1206.91 L1071.64 1206.91 L1071.06 1206.91 L1070.47 1206.91 L1069.88 1206.91 L1069.3 1206.91 L1068.71 1206.91 L1068.12 1206.91 L1067.54 1206.91 L1066.95 1206.91 L1066.36 1206.91 L1065.78 1206.91 L1065.19 1206.91 L1064.6 1206.91 L1064.02 1206.91 L1063.43 1206.91 L1062.85 1206.91 L1062.26 1206.91 L1061.67 1206.91 L1061.09 1206.91 L1060.5 1206.91 L1059.91 1206.91 L1059.33 1206.91 L1058.74 1206.91 L1058.15 1206.91 L1057.57 1206.91 L1056.98 1206.91 L1056.39 1206.91 L1055.81 1206.91 L1055.22 1206.91 L1054.64 1206.91 L1054.05 1206.91 L1053.46 1206.91 L1052.88 1206.91 L1052.29 1206.91 L1051.7 1206.91 L1051.12 1206.91 L1050.53 1206.91 L1049.94 1206.91 L1049.36 1206.91 L1048.77 1206.91 L1048.19 1206.91 L1047.6 1206.91 L1047.01 1206.91 L1046.43 1206.91 L1045.84 1206.91 L1045.25 1206.91 L1044.67 1206.91 L1044.08 1206.91 L1043.49 1206.91 L1042.91 1206.91 L1042.32 1206.91 L1041.73 1206.91 L1041.15 1206.91 L1040.56 1206.91 L1039.98 1206.91 L1039.39 1206.91 L1038.8 1206.91 L1038.22 1206.91 L1037.63 1206.91 L1037.04 1206.91 L1036.46 1206.91 L1035.87 1206.91 L1035.28 1206.91 L1034.7 1206.91 L1034.11 1206.91 L1033.52 1206.91 L1032.94 1206.91 L1032.35 1206.91 L1031.77 1206.91 L1031.18 1206.91 L1030.59 1206.91 L1030.01 1206.91 L1029.42 1206.91 L1028.83 1206.91 L1028.25 1206.91 L1027.66 1206.91 L1027.07 1206.91 L1026.49 1206.91 L1025.9 1206.91 L1025.32 1206.91 L1024.73 1206.91 L1024.14 1206.91 L1023.56 1206.91 L1022.97 1206.91 L1022.38 1206.91 L1021.8 1206.91 L1021.21 1206.91 L1020.62 1206.91 L1020.04 1206.91 L1019.45 1206.91 L1018.86 1206.91 L1018.28 1206.91 L1017.69 1206.91 L1017.11 1206.91 L1016.52 1206.91 L1015.93 1206.91 L1015.35 1206.91 L1014.76 1206.91 L1014.17 1206.91 L1013.59 1206.91 L1013 1206.91 L1012.41 1206.91 L1011.83 1206.91 L1011.24 1206.91 L1010.65 1206.91 L1010.07 1206.91 L1009.48 1206.91 L1008.9 1206.91 L1008.31 1206.91 L1007.72 1206.91 L1007.14 1206.91 L1006.55 1206.91 L1005.96 1206.91 L1005.38 1206.91 L1004.79 1206.91 L1004.2 1206.91 L1003.62 1206.91 L1003.03 1206.91 L1002.44 1206.91 L1001.86 1206.91 L1001.27 1206.91 L1000.69 1206.91 L1000.1 1206.91 L999.513 1206.91 L998.926 1206.91 L998.34 1206.91 L997.754 1206.91 L997.167 1206.91 L996.581 1206.91 L995.994 1206.91 L995.408 1206.91 L994.822 1206.91 L994.235 1206.91 L993.649 1206.91 L993.062 1206.91 L992.476 1206.91 L991.889 1206.91 L991.303 1206.91 L990.717 1206.91 L990.13 1206.91 L989.544 1206.91 L988.957 1206.91 L988.371 1206.91 L987.785 1206.91 L987.198 1206.91 L986.612 1206.91 L986.025 1206.91  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1207.01 986.612,1207.01 987.198,1207.01 987.785,1207.01 988.371,1207.01 988.957,1207.01 989.544,1207.01 990.13,1207.01 990.717,1207.01 991.303,1207.01 991.889,1207.01 992.476,1207.01 993.062,1207.01 993.649,1207.01 994.235,1207.01 994.822,1207.01 995.408,1207.01 995.994,1207.01 996.581,1207.01 997.167,1207.01 997.754,1207.01 998.34,1207.01 998.926,1207.01 999.513,1207.01 1000.1,1207.01 1000.69,1207.01 1001.27,1207.01 1001.86,1207.01 1002.44,1207.01 1003.03,1207.01 1003.62,1207.01 1004.2,1207.01 1004.79,1207.01 1005.38,1207.01 1005.96,1207.01 1006.55,1207.01 1007.14,1207.01 1007.72,1207.01 1008.31,1207.01 1008.9,1207.01 1009.48,1207.01 1010.07,1207.01 1010.65,1207.01 1011.24,1207.01 1011.83,1207.01 1012.41,1207.01 1013,1207.01 1013.59,1207.01 1014.17,1207.01 1014.76,1207.01 1015.35,1207.01 1015.93,1207.01 1016.52,1207.01 1017.11,1207.01 1017.69,1207.01 1018.28,1207.01 1018.86,1207.01 1019.45,1207.01 1020.04,1207.01 1020.62,1207.01 1021.21,1207.01 1021.8,1207.01 1022.38,1207.01 1022.97,1207.01 1023.56,1207.01 1024.14,1207.01 1024.73,1207.01 1025.32,1207.01 1025.9,1207.01 1026.49,1207.01 1027.07,1207.01 1027.66,1207.01 1028.25,1207.01 1028.83,1207.01 1029.42,1207.01 1030.01,1207.01 1030.59,1207.01 1031.18,1207.01 1031.77,1207.01 1032.35,1207.01 1032.94,1207.01 1033.52,1207.01 1034.11,1207.01 1034.7,1207.01 1035.28,1207.01 1035.87,1207.01 1036.46,1207.01 1037.04,1207.01 1037.63,1207.01 1038.22,1207.01 1038.8,1207.01 1039.39,1207.01 1039.98,1207.01 1040.56,1207.01 1041.15,1207.01 1041.73,1207.01 1042.32,1207.01 1042.91,1207.01 1043.49,1207.01 1044.08,1207.01 1044.67,1207.01 1045.25,1207.01 1045.84,1207.01 1046.43,1207.01 1047.01,1207.01 1047.6,1207.01 1048.19,1207.01 1048.77,1207.01 1049.36,1207.01 1049.94,1207.01 1050.53,1207.01 1051.12,1207.01 1051.7,1207.01 1052.29,1207.01 1052.88,1207.01 1053.46,1207.01 1054.05,1207.01 1054.64,1207.01 1055.22,1207.01 1055.81,1207.01 1056.39,1207.01 1056.98,1207.01 1057.57,1207.01 1058.15,1207.01 1058.74,1207.01 1059.33,1207.01 1059.91,1207.01 1060.5,1207.01 1061.09,1207.01 1061.67,1207.01 1062.26,1207.01 1062.85,1207.01 1063.43,1207.01 1064.02,1207.01 1064.6,1207.01 1065.19,1207.01 1065.78,1207.01 1066.36,1207.01 1066.95,1207.01 1067.54,1207.01 1068.12,1207.01 1068.71,1207.01 1069.3,1207.01 1069.88,1207.01 1070.47,1207.01 1071.06,1207.01 1071.64,1207.01 1072.23,1207.01 1072.81,1207.01 1073.4,1207.01 1073.99,1207.01 1074.57,1207.01 1075.16,1207.01 1075.75,1207.01 1076.33,1207.01 1076.92,1207.01 1077.51,1207.01 1078.09,1207.01 1078.68,1207.01 1079.26,1207.01 1079.85,1207.01 1080.44,1207.01 1081.02,1207.01 1081.61,1207.01 1082.2,1207.01 1082.78,1207.01 1083.37,1207.01 1083.96,1207.01 1084.54,1207.01 1085.13,1207.01 1085.72,1207.01 1086.3,1207.01 1086.89,1207.01 1087.47,1207.01 1088.06,1207.01 1088.65,1207.01 1089.23,1207.01 1089.82,1207.01 1090.41,1207.01 1090.99,1207.01 1091.58,1207.01 1092.17,1207.01 1092.75,1207.01 1093.34,1207.01 1093.93,1207.01 1094.51,1207.01 1095.1,1207.01 1095.68,1207.01 1096.27,1207.01 1096.86,1207.01 1097.44,1207.01 1098.03,1207.01 1098.62,1207.01 1099.2,1207.01 1099.79,1207.01 1100.38,1207.01 1100.96,1207.01 1101.55,1207.01 1102.14,1207.01 1102.72,1207.01 1103.31,1207.01 1103.89,1207.01 1104.48,1207.01 1105.07,1207.01 1105.65,1207.01 1106.24,1207.01 1106.83,1207.01 1107.41,1207.01 1108,1207.01 1108.59,1207.01 1109.17,1207.01 1109.76,1207.01 1110.34,1207.01 1110.93,1207.01 1111.52,1207.01 1112.1,1207.01 1112.69,1207.01 1113.28,1207.01 1113.86,1207.01 1114.45,1207.01 1115.04,1207.01 1115.62,1207.01 1116.21,1207.01 1116.8,1207.01 1117.38,1207.01 1117.97,1207.01 1118.55,1207.01 1119.14,1207.01 1119.73,1207.01 1120.31,1207.01 1120.9,1207.01 1121.49,1207.01 1122.07,1207.01 1122.66,1207.01 1123.25,1207.01 1123.83,1207.01 1124.42,1207.01 1125.01,1207.01 1125.59,1207.01 1126.18,1207.01 1126.76,1207.01 1127.35,1207.01 1127.94,1207.01 1128.52,1207.01 1129.11,1207.01 1129.7,1207.01 1130.28,1207.01 1130.87,1207.01 1131.46,1207.01 1132.04,1207.01 1132.63,1207.01 1133.21,1207.01 1133.8,1207.01 1134.39,1207.01 1134.97,1207.01 1135.56,1207.01 1136.15,1207.01 1136.73,1207.01 1137.32,1207.01 1137.91,1207.01 1138.49,1207.01 1139.08,1207.01 1139.67,1207.01 1140.25,1207.01 1140.84,1207.01 1141.42,1207.01 1142.01,1207.01 1142.6,1207.01 1143.18,1207.01 1143.77,1207.01 1144.36,1207.01 1144.94,1207.01 1145.53,1207.01 1146.12,1207.01 1146.7,1207.01 1147.29,1207.01 1147.88,1207.01 1148.46,1207.01 1149.05,1207.01 1149.63,1207.01 1150.22,1207.01 1150.81,1207.01 1151.39,1207.01 1151.98,1207.01 1152.57,1207.01 1153.15,1207.01 1153.74,1207.01 1154.33,1207.01 1154.91,1207.01 1155.5,1207.01 1156.09,1207.01 1156.67,1207.01 1157.26,1207.01 1157.84,1207.01 1158.43,1207.01 1159.02,1207.01 1159.6,1207.01 1160.19,1207.01 1160.78,1207.01 1161.36,1207.01 1161.95,1207.01 1162.54,1207.01 1163.12,1207.01 1163.71,1207.01 1164.29,1207.01 1164.88,1207.01 1165.47,1207.01 1166.05,1207.01 1166.64,1207.01 1167.23,1207.01 1167.81,1207.01 1168.4,1207.01 1168.99,1207.01 1169.57,1207.01 1170.16,1207.01 1170.75,1207.01 1171.33,1207.01 1171.92,1207.01 1172.5,1207.01 1173.09,1207.01 1173.68,1207.01 1174.26,1207.01 1174.85,1207.01 1175.44,1207.01 1176.02,1207.01 1176.61,1207.01 1177.2,1207.01 1177.78,1207.01 1178.37,1207.01 1178.96,1207.01 1179.54,1207.01 1180.13,1207.01 1180.71,1207.01 1181.3,1207.01 1181.89,1207.01 1182.47,1207.01 1183.06,1207.01 1183.65,1207.01 1184.23,1207.01 1184.82,1207.01 1185.41,1207.01 1185.99,1207.01 1186.58,1207.01 1187.16,1207.01 1187.75,1207.01 1188.34,1207.01 1188.92,1207.01 1189.51,1207.01 1190.1,1207.01 1190.68,1207.01 1191.27,1207.01 1191.86,1207.01 1192.44,1207.01 1193.03,1207.01 1193.62,1207.01 1194.2,1207.01 1194.79,1207.01 1195.37,1207.01 1195.96,1207.01 1196.55,1207.01 1197.13,1207.01 1197.72,1207.01 1198.31,1207.01 1198.89,1207.01 1199.48,1207.01 1200.07,1207.01 1200.65,1207.01 1201.24,1207.01 1201.83,1207.01 1202.41,1207.01 1203,1207.01 1203.58,1207.01 1204.17,1207.01 1204.76,1207.01 1205.34,1207.01 1205.93,1207.01 1206.52,1207.01 1207.1,1207.01 1207.69,1207.01 1208.28,1207.01 1208.86,1207.01 1209.45,1207.01 1210.03,1207.01 1210.62,1207.01 1211.21,1207.01 1211.79,1207.01 1212.38,1207.01 1212.97,1207.01 1213.55,1207.01 1214.14,1207.01 1214.73,1207.01 1215.31,1207.01 1215.9,1207.01 1216.49,1207.01 1217.07,1207.01 1217.66,1207.01 1218.24,1207.01 1218.83,1207.01 1219.42,1207.01 1220,1207.01 1220.59,1207.01 1221.18,1207.01 1221.76,1207.01 1222.35,1207.01 1222.94,1207.01 1223.52,1207.01 1224.11,1207.01 1224.7,1207.01 1225.28,1207.01 1225.87,1207.01 1226.45,1207.01 1227.04,1207.01 1227.63,1207.01 1228.21,1207.01 1228.8,1207.01 1229.39,1207.01 1229.97,1207.01 1230.56,1207.01 1231.15,1207.01 1231.73,1207.01 1232.32,1207.01 1232.91,1207.01 1233.49,1207.01 1234.08,1207.01 1234.66,1207.01 1235.25,1207.01 1235.84,1207.01 1236.42,1207.01 1237.01,1207.01 1237.6,1207.01 1238.18,1207.01 1238.77,1207.01 1239.36,1207.01 1239.94,1207.01 1240.53,1207.01 1241.11,1207.01 1241.7,1207.01 1242.29,1207.01 1242.87,1207.01 1243.46,1207.01 1244.05,1207.01 1244.63,1207.01 1245.22,1207.01 1245.81,1207.01 1246.39,1207.01 1246.98,1207.01 1247.57,1207.01 1248.15,1207.01 1248.74,1207.01 1249.32,1207.01 1249.91,1207.01 1250.5,1207.01 1251.08,1207.01 1251.67,1207.01 1252.26,1207.01 1252.84,1207.01 1253.43,1207.01 1254.02,1207.01 1254.6,1207.01 1255.19,1207.01 1255.78,1207.01 1256.36,1207.01 1256.95,1207.01 1257.53,1207.01 1258.12,1207.01 1258.71,1207.01 1259.29,1207.01 1259.88,1207.01 1260.47,1207.01 1261.05,1207.01 1261.64,1207.01 1262.23,1207.01 1262.81,1207.01 1263.4,1207.01 1263.98,1207.01 1264.57,1207.01 1265.16,1207.01 1265.74,1207.01 1266.33,1207.01 1266.92,1207.01 1267.5,1207.01 1268.09,1207.01 1268.68,1207.01 1269.26,1207.01 1269.85,1207.01 1270.44,1207.01 1271.02,1207.01 1271.61,1207.01 1272.19,1207.01 1272.78,1207.01 1273.37,1207.01 1273.95,1207.01 1274.54,1207.01 1275.13,1207.01 1275.71,1207.01 1276.3,1207.01 1276.89,1207.01 1277.47,1207.01 1278.06,1207.01 1278.65,1207.01 1279.23,1207.01 1279.82,1207.01 1280.4,1207.01 1280.99,1207.01 1281.58,1207.01 1282.16,1207.01 1282.75,1207.01 1283.34,1207.01 1283.92,1207.01 1284.51,1207.01 1285.1,1207.01 1285.68,1207.01 1286.27,1207.01 1286.86,1207.01 1287.44,1207.01 1288.03,1207.01 1288.61,1207.01 1289.2,1207.01 1289.79,1207.01 1290.37,1207.01 1290.96,1207.01 1291.55,1207.01 1292.13,1207.01 1292.72,1207.01 1293.31,1207.01 1293.89,1207.01 1294.48,1207.01 1295.06,1207.01 1295.65,1207.01 1296.24,1207.01 1296.82,1207.01 1297.41,1207.01 1298,1207.01 1298.58,1207.01 1299.17,1207.01 1299.76,1207.01 1300.34,1207.01 1300.93,1207.01 1301.52,1207.01 1302.1,1207.01 1302.69,1207.01 1303.27,1207.01 1303.86,1207.01 1304.45,1207.01 1305.03,1207.01 1305.62,1207.01 1306.21,1207.01 1306.79,1207.01 1307.38,1207.01 1307.97,1207.01 1308.55,1207.01 1309.14,1207.01 1309.73,1207.01 1310.31,1207.01 1310.9,1207.01 1311.48,1207.01 1312.07,1207.01 1312.66,1207.01 1313.24,1207.01 1313.83,1207.01 1314.42,1207.01 1315,1207.01 1315.59,1207.01 1316.18,1207.01 1316.76,1207.01 1317.35,1207.01 1317.93,1207.01 1318.52,1207.01 1319.11,1207.01 1319.69,1207.01 1320.28,1207.01 1320.87,1207.01 1321.45,1207.01 1322.04,1207.01 1322.63,1207.01 1323.21,1207.01 1323.8,1207.01 1324.39,1207.01 1324.97,1207.01 1325.56,1207.01 1326.14,1207.01 1326.73,1207.01 1327.32,1207.01 1327.9,1207.01 1328.49,1207.01 1329.08,1207.01 1329.66,1207.01 1330.25,1207.01 1330.84,1207.01 1331.42,1207.01 1332.01,1207.01 1332.6,1207.01 1333.18,1207.01 1333.77,1207.01 1334.35,1207.01 1334.94,1207.01 1335.53,1207.01 1336.11,1207.01 1336.7,1207.01 1337.29,1207.01 1337.87,1207.01 1338.46,1207.01 1339.05,1207.01 1339.63,1207.01 1340.22,1207.01 1340.8,1207.01 1341.39,1207.01 1341.98,1207.01 1342.56,1207.01 1343.15,1207.01 1343.74,1207.01 1344.32,1207.01 1344.91,1207.01 1345.5,1207.01 1346.08,1207.01 1346.67,1207.01 1347.26,1207.01 1347.84,1207.01 1348.43,1207.01 1349.01,1207.01 1349.6,1207.01 1350.19,1207.01 1350.77,1207.01 1351.36,1207.01 1351.95,1207.01 1352.53,1207.01 1353.12,1207.01 1353.71,1207.01 1354.29,1207.01 1354.88,1207.01 1355.47,1207.01 1356.05,1207.01 1356.64,1207.01 1357.22,1207.01 1357.81,1207.01 1358.4,1207.01 1358.98,1207.01 1359.57,1207.01 1360.16,1207.01 1360.74,1207.01 1361.33,1207.01 1361.92,1207.01 1362.5,1207.01 1363.09,1207.01 1363.68,1207.01 1364.26,1207.01 1364.85,1207.01 1365.43,1207.01 1366.02,1207.01 1366.61,1207.01 1367.19,1207.01 1367.78,1207.01 1368.37,1207.01 1368.95,1207.01 1369.54,1207.01 1370.13,1207.01 1370.71,1207.01 1371.3,1207.01 1371.88,1207.01 1372.47,1207.01 1373.06,1207.01 1373.64,1207.01 1374.23,1207.01 1374.82,1207.01 1375.4,1207.01 1375.99,1207.01 1376.58,1207.01 1377.16,1207.01 1377.75,1207.01 1378.34,1207.01 1378.92,1207.01 1379.51,1207.01 1380.09,1207.01 1380.68,1207.01 1381.27,1207.01 1381.85,1207.01 1382.44,1207.01 1383.03,1207.01 1383.61,1207.01 1384.2,1207.01 1384.79,1207.01 1385.37,1207.01 1385.96,1207.01 1386.55,1207.01 1387.13,1207.01 1387.72,1207.01 1388.3,1207.01 1388.89,1207.01 1389.48,1207.01 1390.06,1207.01 1390.65,1207.01 1391.24,1207.01 1391.82,1207.01 1392.41,1207.01 1393,1207.01 1393.58,1207.01 1394.17,1207.01 1394.75,1207.01 1395.34,1207.01 1395.93,1207.01 1396.51,1207.01 1397.1,1207.01 1397.69,1207.01 1398.27,1207.01 1398.86,1207.01 1399.45,1207.01 1400.03,1207.01 1400.62,1207.01 1401.21,1207.01 1401.79,1207.01 1402.38,1207.01 1402.96,1207.01 1403.55,1207.01 1404.14,1207.01 1404.72,1207.01 1405.31,1207.01 1405.9,1207.01 1406.48,1207.01 1407.07,1207.01 1407.66,1207.01 1408.24,1207.01 1408.83,1207.01 1409.42,1207.01 1410,1207.01 1410.59,1207.01 1411.17,1207.01 1411.76,1207.01 1412.35,1207.01 1412.93,1207.01 1413.52,1207.01 1414.11,1207.01 1414.69,1207.01 1415.28,1207.01 1415.87,1207.01 1416.45,1207.01 1417.04,1207.01 1417.63,1207.01 1418.21,1207.01 1418.8,1207.01 1419.38,1207.01 1419.97,1207.01 1420.56,1207.01 1421.14,1207.01 1421.73,1207.01 1422.32,1207.01 1422.9,1207.01 1423.49,1207.01 1424.08,1207.01 1424.66,1207.01 1425.25,1207.01 1425.83,1207.01 1426.42,1207.01 1427.01,1207.01 1427.59,1207.01 1428.18,1207.01 1428.77,1207.01 1429.35,1207.01 1429.94,1207.01 1430.53,1207.01 1431.11,1207.01 1431.7,1207.01 1432.29,1207.01 1432.87,1207.01 1433.46,1207.01 1434.04,1207.01 1434.63,1207.01 1435.22,1207.01 1435.8,1207.01 1436.39,1207.01 1436.98,1207.01 1437.56,1207.01 1438.15,1207.01 1438.74,1207.01 1439.32,1207.01 1439.91,1207.01 1440.5,1207.01 1441.08,1207.01 1441.67,1207.01 1442.25,1207.01 1442.84,1207.01 1443.43,1207.01 1444.01,1207.01 1444.6,1207.01 1445.19,1207.01 1445.77,1207.01 1446.36,1207.01 1446.95,1207.01 1447.53,1207.01 1448.12,1207.01 1448.7,1207.01 1449.29,1207.01 1449.88,1207.01 1450.46,1207.01 1451.05,1207.01 1451.64,1207.01 1452.22,1207.01 1452.81,1207.01 1453.4,1207.01 1453.98,1207.01 1454.57,1207.01 1455.16,1207.01 1455.74,1207.01 1456.33,1207.01 1456.91,1207.01 1457.5,1207.01 1458.09,1207.01 1458.67,1207.01 1459.26,1207.01 1459.85,1207.01 1460.43,1207.01 1461.02,1207.01 1461.61,1207.01 1462.19,1207.01 1462.78,1207.01 1463.37,1207.01 1463.95,1207.01 1464.54,1207.01 1465.12,1207.01 1465.71,1207.01 1466.3,1207.01 1466.88,1207.01 1467.47,1207.01 1468.06,1207.01 1468.64,1207.01 1469.23,1207.01 1469.82,1207.01 1470.4,1207.01 1470.99,1207.01 1471.57,1207.01 1472.16,1207.01 1472.75,1207.01 1473.33,1207.01 1473.92,1207.01 1474.51,1207.01 1475.09,1207.01 1475.68,1207.01 1476.27,1207.01 1476.85,1207.01 1477.44,1207.01 1478.03,1207.01 1478.61,1207.01 1479.2,1207.01 1479.78,1207.01 1480.37,1207.01 1480.96,1207.01 1481.54,1207.01 1482.13,1207.01 1482.72,1207.01 1483.3,1207.01 1483.89,1207.01 1484.48,1207.01 1485.06,1207.01 1485.65,1207.01 1486.24,1207.01 1486.82,1207.01 1487.41,1207.01 1487.99,1207.01 1488.58,1207.01 1489.17,1207.01 1489.75,1207.01 1490.34,1207.01 1490.93,1207.01 1491.51,1207.01 1492.1,1207.01 1492.69,1207.01 1493.27,1207.01 1493.86,1207.01 1494.45,1207.01 1495.03,1207.01 1495.62,1207.01 1496.2,1207.01 1496.79,1207.01 1497.38,1207.01 1497.96,1207.01 1498.55,1207.01 1499.14,1207.01 1499.72,1207.01 1500.31,1207.01 1500.9,1207.01 1501.48,1207.01 1502.07,1207.01 1502.65,1207.01 1503.24,1207.01 1503.83,1207.01 1504.41,1207.01 1505,1207.01 1505.59,1207.01 1506.17,1207.01 1506.76,1207.01 1507.35,1207.01 1507.93,1207.01 1508.52,1207.01 1509.11,1207.01 1509.69,1207.01 1510.28,1207.01 1510.86,1207.01 1511.45,1207.01 1512.04,1207.01 1512.62,1207.01 1513.21,1207.01 1513.8,1207.01 1514.38,1207.01 1514.97,1207.01 1515.56,1207.01 1516.14,1207.01 1516.73,1207.01 1517.32,1207.01 1517.9,1207.01 1518.49,1207.01 1519.07,1207.01 1519.66,1207.01 1520.25,1207.01 1520.83,1207.01 1521.42,1207.01 1522.01,1207.01 1522.59,1207.01 1523.18,1207.01 1523.77,1207.01 1524.35,1207.01 1524.94,1207.01 1525.52,1207.01 1526.11,1207.01 1526.7,1207.01 1527.28,1207.01 1527.87,1207.01 1528.46,1207.01 1529.04,1207.01 1529.63,1207.01 1530.22,1207.01 1530.8,1207.01 1531.39,1207.01 1531.98,1207.01 1532.56,1207.01 1533.15,1207.01 1533.73,1207.01 1534.32,1207.01 1534.91,1207.01 1535.49,1207.01 1536.08,1207.01 1536.67,1207.01 1537.25,1207.01 1537.84,1207.01 1538.43,1207.01 1539.01,1207.01 1539.6,1207.01 1540.19,1207.01 1540.77,1207.01 1541.36,1207.01 1541.94,1207.01 1542.53,1207.01 1543.12,1207.01 1543.7,1207.01 1544.29,1207.01 1544.88,1207.01 1545.46,1207.01 1546.05,1207.01 1546.64,1207.01 1547.22,1207.01 1547.81,1207.01 1548.4,1207.01 1548.98,1207.01 1549.57,1207.01 1550.15,1207.01 1550.74,1207.01 1551.33,1207.01 1551.91,1207.01 1552.5,1207.01 1553.09,1207.01 1553.67,1207.01 1554.26,1207.01 1554.85,1207.01 1555.43,1207.01 1556.02,1207.01 1556.6,1207.01 1557.19,1207.01 1557.78,1207.01 1558.36,1207.01 1558.95,1207.01 1559.54,1207.01 1560.12,1207.01 1560.71,1207.01 1561.3,1207.01 1561.88,1207.01 1562.47,1207.01 1563.06,1207.01 1563.64,1207.01 1564.23,1207.01 1564.81,1207.01 1565.4,1207.01 1565.99,1207.01 1566.57,1207.01 1567.16,1207.01 1567.75,1207.01 1568.33,1207.01 1568.92,1207.01 1569.51,1207.01 1570.09,1207.01 1570.68,1207.01 1571.27,1207.01 1571.85,1207.01 1572.44,1207.01 1573.02,1207.01 1573.61,1207.01 1574.2,1207.01 1574.78,1207.01 1575.37,1207.01 1575.96,1207.01 1576.54,1207.01 1577.13,1207.01 1577.72,1207.01 1578.3,1207.01 1578.89,1207.01 1579.47,1207.01 1580.06,1207.01 1580.65,1207.01 1581.23,1207.01 1581.82,1207.01 1582.41,1207.01 1582.99,1207.01 1583.58,1207.01 1584.17,1207.01 1584.75,1207.01 1585.34,1207.01 1585.93,1207.01 1586.51,1207.01 1587.1,1207.01 1587.68,1207.01 1588.27,1207.01 1588.86,1207.01 1589.44,1207.01 1590.03,1207.01 1590.62,1207.01 1591.2,1207.01 1591.79,1207.01 1592.38,1207.01 1592.96,1207.01 1593.55,1207.01 1594.14,1207.01 1594.72,1207.01 1595.31,1207.01 1595.89,1207.01 1596.48,1207.01 1597.07,1207.01 1597.65,1207.01 1598.24,1207.01 1598.83,1207.01 1599.41,1207.01 1600,1207.01 1600.59,1207.01 1601.17,1207.01 1601.76,1207.01 1602.34,1207.01 1602.93,1207.01 1603.52,1207.01 1604.1,1207.01 1604.69,1207.01 1605.28,1207.01 1605.86,1207.01 1606.45,1207.01 1607.04,1207.01 1607.62,1207.01 1608.21,1207.01 1608.8,1207.01 1609.38,1207.01 1609.97,1207.01 1610.55,1207.01 1611.14,1207.01 1611.73,1207.01 1612.31,1207.01 1612.9,1207.01 1613.49,1207.01 1614.07,1207.01 1614.66,1207.01 1615.25,1207.01 1615.83,1207.01 1616.42,1207.01 1617.01,1207.01 1617.59,1207.01 1618.18,1207.01 1618.76,1207.01 1619.35,1207.01 1619.94,1207.01 1620.52,1207.01 1621.11,1207.01 1621.7,1207.01 1622.28,1207.01 1622.87,1207.01 1623.46,1207.01 1624.04,1207.01 1624.63,1207.01 1625.22,1207.01 1625.8,1207.01 1626.39,1207.01 1626.97,1207.01 1627.56,1207.01 1628.15,1207.01 1628.73,1207.01 1629.32,1207.01 1629.91,1207.01 1630.49,1207.01 1631.08,1207.01 1631.67,1207.01 1632.25,1207.01 1632.84,1207.01 1633.42,1207.01 1634.01,1207.01 1634.6,1207.01 1635.18,1207.01 1635.77,1207.01 1636.36,1207.01 1636.94,1207.01 1637.53,1207.01 1638.12,1207.01 1638.7,1207.01 1639.29,1207.01 1639.88,1207.01 1640.46,1207.01 1641.05,1207.01 1641.63,1207.01 1642.22,1207.01 1642.81,1207.01 1643.39,1207.01 1643.98,1207.01 1644.57,1207.01 1645.15,1207.01 1645.74,1207.01 1646.33,1207.01 1646.91,1207.01 1647.5,1207.01 1648.09,1207.01 1648.67,1207.01 1649.26,1207.01 1649.84,1207.01 1650.43,1207.01 1651.02,1207.01 1651.6,1207.01 1652.19,1207.01 1652.78,1207.01 1653.36,1207.01 1653.95,1207.01 1654.54,1207.01 1655.12,1207.01 1655.71,1207.01 1656.29,1207.01 1656.88,1207.01 1657.47,1207.01 1658.05,1207.01 1658.64,1207.01 1659.23,1207.01 1659.81,1207.01 1660.4,1207.01 1660.99,1207.01 1661.57,1207.01 1662.16,1207.01 1662.75,1207.01 1663.33,1207.01 1663.92,1207.01 1664.5,1207.01 1665.09,1207.01 1665.68,1207.01 1666.26,1207.01 1666.85,1207.01 1667.44,1207.01 1668.02,1207.01 1668.61,1207.01 1669.2,1207.01 1669.78,1207.01 1670.37,1207.01 1670.96,1207.01 1671.54,1207.01 1672.13,1207.01 1672.71,1207.01 1673.3,1207.01 1673.89,1207.01 1674.47,1207.01 1675.06,1207.01 1675.65,1207.01 1676.23,1207.01 1676.82,1207.01 1677.41,1207.01 1677.99,1207.01 1678.58,1207.01 1679.17,1207.01 1679.75,1207.01 1680.34,1207.01 1680.92,1207.01 1681.51,1207.01 1682.1,1207.01 1682.68,1207.01 1683.27,1207.01 1683.86,1207.01 1684.44,1207.01 1685.03,1207.01 1685.62,1207.01 1686.2,1207.01 1686.79,1207.01 1687.37,1207.01 1687.96,1207.01 1688.55,1207.01 1689.13,1207.01 1689.72,1207.01 1690.31,1207.01 1690.89,1207.01 1691.48,1207.01 1692.07,1207.01 1692.65,1207.01 1693.24,1207.01 1693.83,1207.01 1694.41,1207.01 1695,1207.01 1695.58,1207.01 1696.17,1207.01 1696.76,1207.01 1697.34,1207.01 1697.93,1207.01 1698.52,1207.01 1699.1,1207.01 1699.69,1207.01 1700.28,1207.01 1700.86,1207.01 1701.45,1207.01 1702.04,1207.01 1702.62,1207.01 1703.21,1207.01 1703.79,1207.01 1704.38,1207.01 1704.97,1207.01 1705.55,1207.01 1706.14,1207.01 1706.73,1207.01 1707.31,1207.01 1707.9,1207.01 1708.49,1207.01 1709.07,1207.01 1709.66,1207.01 1710.24,1207.01 1710.83,1207.01 1711.42,1207.01 1712,1207.01 1712.59,1207.01 1713.18,1207.01 1713.76,1207.01 1714.35,1207.01 1714.94,1207.01 1715.52,1207.01 1716.11,1207.01 1716.7,1207.01 1717.28,1207.01 1717.87,1207.01 1718.45,1207.01 1719.04,1207.01 1719.63,1207.01 1720.21,1207.01 1720.8,1207.01 1721.39,1207.01 1721.97,1207.01 1722.56,1207.01 1723.15,1207.01 1723.73,1207.01 1724.32,1207.01 1724.91,1207.01 1725.49,1207.01 1726.08,1207.01 1726.66,1207.01 1727.25,1207.01 1727.84,1207.01 1728.42,1207.01 1729.01,1207.01 1729.6,1207.01 1730.18,1207.01 1730.77,1207.01 1731.36,1207.01 1731.94,1207.01 1732.53,1207.01 1733.11,1207.01 1733.7,1207.01 1734.29,1207.01 1734.87,1207.01 1735.46,1207.01 1736.05,1207.01 1736.63,1207.01 1737.22,1207.01 1737.81,1207.01 1738.39,1207.01 1738.98,1207.01 1739.57,1207.01 1740.15,1207.01 1740.74,1207.01 1741.32,1207.01 1741.91,1207.01 1742.5,1207.01 1743.08,1207.01 1743.67,1207.01 1744.26,1207.01 1744.84,1207.01 1745.43,1207.01 1746.02,1207.01 1746.6,1207.01 1747.19,1207.01 1747.78,1207.01 1748.36,1207.01 1748.95,1207.01 1749.53,1207.01 1750.12,1207.01 1750.71,1207.01 1751.29,1207.01 1751.88,1207.01 1752.47,1207.01 1753.05,1207.01 1753.64,1207.01 1754.23,1207.01 1754.81,1207.01 1755.4,1207.01 1755.99,1207.01 1756.57,1207.01 1757.16,1207.01 1757.74,1207.01 1758.33,1207.01 1758.92,1207.01 1759.5,1207.01 1760.09,1207.01 1760.68,1207.01 1761.26,1207.01 1761.85,1207.01 1762.44,1207.01 1763.02,1207.01 1763.61,1207.01 1764.19,1207.01 1764.78,1207.01 1765.37,1207.01 1765.95,1207.01 1766.54,1207.01 1767.13,1207.01 1767.71,1207.01 1768.3,1207.01 1768.89,1207.01 1769.47,1207.01 1770.06,1207.01 1770.65,1207.01 1771.23,1207.01 1771.82,1207.01 1772.4,1207.01 1772.99,1207.01 1773.58,1207.01 1774.16,1207.01 1774.75,1207.01 1775.34,1207.01 1775.92,1207.01 1776.51,1207.01 1777.1,1207.01 1777.68,1207.01 1778.27,1207.01 1778.86,1207.01 1779.44,1207.01 1780.03,1207.01 1780.61,1207.01 1781.2,1207.01 1781.79,1207.01 1782.37,1207.01 1782.96,1207.01 1783.55,1207.01 1784.13,1207.01 1784.72,1207.01 1785.31,1207.01 1785.89,1207.01 1786.48,1207.01 1787.06,1207.01 1787.65,1207.01 1788.24,1207.01 1788.82,1207.01 1789.41,1207.01 1790,1207.01 1790.58,1207.01 1791.17,1207.01 1791.76,1207.01 1792.34,1207.01 1792.93,1207.01 1793.52,1207.01 1794.1,1207.01 1794.69,1207.01 1795.27,1207.01 1795.86,1207.01 1796.45,1207.01 1797.03,1207.01 1797.62,1207.01 1798.21,1207.01 1798.79,1207.01 1799.38,1207.01 1799.97,1207.01 1800.55,1207.01 1801.14,1207.01 1801.73,1207.01 1802.31,1207.01 1802.9,1207.01 1803.48,1207.01 1804.07,1207.01 1804.66,1207.01 1805.24,1207.01 1805.83,1207.01 1806.42,1207.01 1807,1207.01 1807.59,1207.01 1808.18,1207.01 1808.76,1207.01 1809.35,1207.01 1809.94,1207.01 1810.52,1207.01 1811.11,1207.01 1811.69,1207.01 1812.28,1207.01 1812.87,1207.01 1813.45,1207.01 1814.04,1207.01 1814.63,1207.01 1815.21,1207.01 1815.8,1207.01 1816.39,1207.01 1816.97,1207.01 1817.56,1207.01 1818.14,1207.01 1818.73,1207.01 1819.32,1207.01 1819.9,1207.01 1820.49,1207.01 1821.08,1207.01 1821.66,1207.01 1822.25,1207.01 1822.84,1207.01 1823.42,1207.01 1824.01,1207.01 1824.6,1207.01 1825.18,1207.01 1825.77,1207.01 1826.35,1207.01 1826.94,1207.01 1827.53,1207.01 1828.11,1207.01 1828.7,1207.01 1829.29,1207.01 1829.87,1207.01 1830.46,1207.01 1831.05,1207.01 1831.63,1207.01 1832.22,1207.01 1832.81,1207.01 1833.39,1207.01 1833.98,1207.01 1834.56,1207.01 1835.15,1207.01 1835.74,1207.01 1836.32,1207.01 1836.91,1207.01 1837.5,1207.01 1838.08,1207.01 1838.67,1207.01 1839.26,1207.01 1839.84,1207.01 1840.43,1207.01 1841.01,1207.01 1841.6,1207.01 1842.19,1207.01 1842.77,1207.01 1843.36,1207.01 1843.95,1207.01 1844.53,1207.01 1845.12,1207.01 1845.71,1207.01 1846.29,1207.01 1846.88,1207.01 1847.47,1207.01 1848.05,1207.01 1848.64,1207.01 1849.22,1207.01 1849.81,1207.01 1850.4,1207.01 1850.98,1207.01 1851.57,1207.01 1852.16,1207.01 1852.74,1207.01 1853.33,1207.01 1853.92,1207.01 1854.5,1207.01 1855.09,1207.01 1855.68,1207.01 1856.26,1207.01 1856.85,1207.01 1857.43,1207.01 1858.02,1207.01 1858.61,1207.01 1859.19,1207.01 1859.78,1207.01 1860.37,1207.01 1860.95,1207.01 1861.54,1207.01 1862.13,1207.01 1862.71,1207.01 1863.3,1207.01 1863.88,1207.01 1864.47,1207.01 1865.06,1207.01 1865.64,1207.01 1866.23,1207.01 1866.82,1207.01 1867.4,1207.01 1867.99,1207.01 1868.58,1207.01 1869.16,1207.01 1869.75,1207.01 1870.34,1207.01 1870.92,1207.01 1871.51,1207.01 1872.09,1207.01 1872.68,1207.01 1873.27,1207.01 1873.85,1207.01 1874.44,1207.01 1875.03,1207.01 1875.61,1207.01 1876.2,1207.01 1876.79,1207.01 1877.37,1207.01 1877.96,1207.01 1878.55,1207.01 1879.13,1207.01 1879.72,1207.01 1880.3,1207.01 1880.89,1207.01 1881.48,1207.01 1882.06,1207.01 1882.65,1207.01 1883.24,1207.01 1883.82,1207.01 1884.41,1207.01 1885,1207.01 1885.58,1207.01 1886.17,1207.01 1886.76,1207.01 1887.34,1207.01 1887.93,1207.01 1888.51,1207.01 1889.1,1207.01 1889.69,1207.01 1890.27,1207.01 1890.86,1207.01 1891.45,1207.01 1892.03,1207.01 1892.62,1207.01 1893.21,1207.01 1893.79,1207.01 1894.38,1207.01 1894.96,1207.01 1895.55,1207.01 1896.14,1207.01 1896.72,1207.01 1897.31,1207.01 1897.9,1207.01 1898.48,1207.01 1899.07,1207.01 1899.66,1207.01 1900.24,1207.01 1900.83,1207.01 1901.42,1207.01 1902,1207.01 1902.59,1207.01 1903.17,1207.01 1903.76,1207.01 1904.35,1207.01 1904.93,1207.01 1905.52,1207.01 1906.11,1207.01 1906.69,1207.01 1907.28,1207.01 1907.87,1207.01 1908.45,1207.01 1909.04,1207.01 1909.63,1207.01 1910.21,1207.01 1910.8,1207.01 1911.38,1207.01 1911.97,1207.01 1912.56,1207.01 1913.14,1207.01 1913.73,1207.01 1914.32,1207.01 1914.9,1207.01 1915.49,1207.01 1916.08,1207.01 1916.66,1207.01 1917.25,1207.01 1917.83,1207.01 1918.42,1207.01 1919.01,1207.01 1919.59,1207.01 1920.18,1207.01 1920.77,1207.01 1921.35,1207.01 1921.94,1207.01 1922.53,1207.01 1923.11,1207.01 1923.7,1207.01 1924.29,1207.01 1924.87,1207.01 1925.46,1207.01 1926.04,1207.01 1926.63,1207.01 1927.22,1207.01 1927.8,1207.01 1928.39,1207.01 1928.98,1207.01 1929.56,1207.01 1930.15,1207.01 1930.74,1207.01 1931.32,1207.01 1931.91,1207.01 1932.5,1207.01 1933.08,1207.01 1933.67,1207.01 1934.25,1207.01 1934.84,1207.01 1935.43,1207.01 1936.01,1207.01 1936.6,1207.01 1937.19,1207.01 1937.77,1207.01 1938.36,1207.01 1938.95,1207.01 1939.53,1207.01 1940.12,1207.01 1940.71,1207.01 1941.29,1207.01 1941.88,1207.01 1942.46,1207.01 1943.05,1207.01 1943.64,1207.01 1944.22,1207.01 1944.81,1207.01 1945.4,1207.01 1945.98,1207.01 1946.57,1207.01 1947.16,1207.01 1947.74,1207.01 1948.33,1207.01 1948.91,1207.01 1949.5,1207.01 1950.09,1207.01 1950.67,1207.01 1951.26,1207.01 1951.85,1207.01 1952.43,1207.01 1953.02,1207.01 1953.61,1207.01 1954.19,1207.01 1954.78,1207.01 1955.37,1207.01 1955.95,1207.01 1956.54,1207.01 1957.12,1207.01 1957.71,1207.01 1958.3,1207.01 1958.88,1207.01 1959.47,1207.01 1960.06,1207.01 1960.64,1207.01 1961.23,1207.01 1961.82,1207.01 1962.4,1207.01 1962.99,1207.01 1963.58,1207.01 1964.16,1207.01 1964.75,1207.01 1965.33,1207.01 1965.92,1207.01 1966.51,1207.01 1967.09,1207.01 1967.68,1207.01 1968.27,1207.01 1968.85,1207.01 1969.44,1207.01 1970.03,1207.01 1970.61,1207.01 1971.2,1207.01 1971.78,1207.01 1972.37,1207.01 1972.96,1207.01 1973.54,1207.01 1974.13,1207.01 1974.72,1207.01 1975.3,1207.01 1975.89,1207.01 1976.48,1207.01 1977.06,1207.01 1977.65,1207.01 1978.24,1207.01 1978.82,1207.01 1979.41,1207.01 1979.99,1207.01 1980.58,1207.01 1981.17,1207.01 1981.75,1207.01 1982.34,1207.01 1982.93,1207.01 1983.51,1207.01 1984.1,1207.01 1984.69,1207.01 1985.27,1207.01 1985.86,1207.01 1986.45,1207.01 1987.03,1207.01 1987.62,1207.01 1988.2,1207.01 1988.79,1207.01 1989.38,1207.01 1989.96,1207.01 1990.55,1207.01 1991.14,1207.01 1991.72,1207.01 1992.31,1207.01 1992.9,1207.01 1993.48,1207.01 1994.07,1207.01 1994.65,1207.01 1995.24,1207.01 1995.83,1207.01 1996.41,1207.01 1997,1207.01 1997.59,1207.01 1998.17,1207.01 1998.76,1207.01 1999.35,1207.01 1999.93,1207.01 2000.52,1207.01 2001.11,1207.01 2001.69,1207.01 2002.28,1207.01 2002.86,1207.01 2003.45,1207.01 2004.04,1207.01 2004.62,1207.01 2005.21,1207.01 2005.8,1207.01 2006.38,1207.01 2006.97,1207.01 2007.56,1207.01 2008.14,1207.01 2008.73,1207.01 2009.32,1207.01 2009.9,1207.01 2010.49,1207.01 2011.07,1207.01 2011.66,1207.01 2012.25,1207.01 2012.83,1207.01 2013.42,1207.01 2014.01,1207.01 2014.59,1207.01 2015.18,1207.01 2015.77,1207.01 2016.35,1207.01 2016.94,1207.01 2017.53,1207.01 2018.11,1207.01 2018.7,1207.01 2019.28,1207.01 2019.87,1207.01 2020.46,1207.01 2021.04,1207.01 2021.63,1207.01 2022.22,1207.01 2022.8,1207.01 2023.39,1207.01 2023.98,1207.01 2024.56,1207.01 2025.15,1207.01 2025.73,1207.01 2026.32,1207.01 2026.91,1207.01 2027.49,1207.01 2028.08,1207.01 2028.67,1207.01 2029.25,1207.01 2029.84,1207.01 2030.43,1207.01 2031.01,1207.01 2031.6,1207.01 2032.19,1207.01 2032.77,1207.01 2033.36,1207.01 2033.94,1207.01 2034.53,1207.01 2035.12,1207.01 2035.7,1207.01 2036.29,1207.01 2036.88,1207.01 2037.46,1207.01 2038.05,1207.01 2038.64,1207.01 2039.22,1207.01 2039.81,1207.01 2040.4,1207.01 2040.98,1207.01 2041.57,1207.01 2042.15,1207.01 2042.74,1207.01 2043.33,1207.01 2043.91,1207.01 2044.5,1207.01 2045.09,1207.01 2045.67,1207.01 2046.26,1207.01 2046.85,1207.01 2047.43,1207.01 2048.02,1207.01 2048.6,1207.01 2049.19,1207.01 2049.78,1207.01 2050.36,1207.01 2050.95,1207.01 2051.54,1207.01 2052.12,1207.01 2052.71,1207.01 2053.3,1207.01 2053.88,1207.01 2054.47,1207.01 2055.06,1207.01 2055.64,1207.01 2056.23,1207.01 2056.81,1207.01 2057.4,1207.01 2057.99,1207.01 2058.57,1207.01 2059.16,1207.01 2059.75,1207.01 2060.33,1207.01 2060.92,1207.01 2061.51,1207.01 2062.09,1207.01 2062.68,1207.01 2063.27,1207.01 2063.85,1207.01 2064.44,1207.01 2065.02,1207.01 2065.61,1207.01 2066.2,1207.01 2066.78,1207.01 2067.37,1207.01 2067.96,1207.01 2068.54,1207.01 2069.13,1207.01 2069.72,1207.01 2070.3,1207.01 2070.89,1207.01 2071.48,1207.01 2072.06,1207.01 2072.65,1207.01 2073.23,1207.01 2073.82,1207.01 2074.41,1207.01 2074.99,1207.01 2075.58,1207.01 2076.17,1207.01 2076.75,1207.01 2077.34,1207.01 2077.93,1207.01 2078.51,1207.01 2079.1,1207.01 2079.68,1207.01 2080.27,1207.01 2080.86,1207.01 2081.44,1207.01 2082.03,1207.01 2082.62,1207.01 2083.2,1207.01 2083.79,1207.01 2084.38,1207.01 2084.96,1207.01 2085.55,1207.01 2086.14,1207.01 2086.72,1207.01 2087.31,1207.01 2087.89,1207.01 2088.48,1207.01 2089.07,1207.01 2089.65,1207.01 2090.24,1207.01 2090.83,1207.01 2091.41,1207.01 2092,1207.01 2092.59,1207.01 2093.17,1207.01 2093.76,1207.01 2094.35,1207.01 2094.93,1207.01 2095.52,1207.01 2096.1,1207.01 2096.69,1207.01 2097.28,1207.01 2097.86,1207.01 2098.45,1207.01 2099.04,1207.01 2099.62,1207.01 2100.21,1207.01 2100.8,1207.01 2101.38,1207.01 2101.97,1207.01 2102.55,1207.01 2103.14,1207.01 2103.73,1207.01 2104.31,1207.01 2104.9,1207.01 2105.49,1207.01 2106.07,1207.01 2106.66,1207.01 2107.25,1207.01 2107.83,1207.01 2108.42,1207.01 2109.01,1207.01 2109.59,1207.01 2110.18,1207.01 2110.76,1207.01 2111.35,1207.01 2111.94,1207.01 2112.52,1207.01 2113.11,1207.01 2113.7,1207.01 2114.28,1207.01 2114.87,1207.01 2115.46,1207.01 2116.04,1207.01 2116.63,1207.01 2117.22,1207.01 2117.8,1207.01 2118.39,1207.01 2118.97,1207.01 2119.56,1207.01 2120.15,1207.01 2120.73,1207.01 2121.32,1207.01 2121.91,1207.01 2122.49,1207.01 2123.08,1207.01 2123.67,1207.01 2124.25,1207.01 2124.84,1207.01 2125.42,1207.01 2126.01,1207.01 2126.6,1207.01 2127.18,1207.01 2127.77,1207.01 2128.36,1207.01 2128.94,1207.01 2129.53,1207.01 2130.12,1207.01 2130.7,1207.01 2131.29,1207.01 2131.88,1207.01 2132.46,1207.01 2133.05,1207.01 2133.63,1207.01 2134.22,1207.01 2134.81,1207.01 2135.39,1207.01 2135.98,1207.01 2136.57,1207.01 2137.15,1207.01 2137.74,1207.01 2138.33,1207.01 2138.91,1207.01 2139.5,1207.01 2140.09,1207.01 2140.67,1207.01 2141.26,1207.01 2141.84,1207.01 2142.43,1207.01 2143.02,1207.01 2143.6,1207.01 2144.19,1207.01 2144.78,1207.01 2145.36,1207.01 2145.95,1207.01 2146.54,1207.01 2147.12,1207.01 2147.71,1207.01 2148.3,1207.01 2148.88,1207.01 2149.47,1207.01 2150.05,1207.01 2150.64,1207.01 2151.23,1207.01 2151.81,1207.01 2152.4,1207.01 2152.99,1207.01 2153.57,1207.01 2154.16,1207.01 2154.75,1207.01 2155.33,1207.01 2155.92,1207.01 2156.5,1207.01 2157.09,1207.01 2157.68,1207.01 2158.26,1207.01 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.97,1188.97 1400.58,899.083 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1224.46 985.439,1188.97 2158.26,1188.97 2158.26,1224.46 985.439,1224.46 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip190)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip190)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip193\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip193)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip193)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip193)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip193)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip193)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip193)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip193)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip193)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip193)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip193)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip193)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-2642.16 162.673,-3848.08 163.232,-4953 163.792,-4677.19 164.351,-5689 164.91,-6590.72 165.469,-7391.76 166.029,-8139.23 166.588,-8800.74 167.147,-9398.72 167.706,-9934.32 168.266,-10432.1 168.825,-10021.3 169.384,-9700.72 169.943,-10156.8 170.503,-10537.9 171.062,-10897.5 171.621,-11213 172.18,-11469.8 172.74,-10631 173.299,-10376.2 173.858,-10164.9 174.417,-10358.8 174.977,-10526 175.536,-10687.1 176.095,-10449.5 176.655,-10560.2 177.214,-10044.2 177.773,-9849.79 178.332,-9893.35 178.892,-9941.59 179.451,-9511.81 180.01,-9556.95 180.569,-9579.27 181.129,-9381.87 181.688,-9371.99 182.247,-8989.14 182.806,-8793.87 183.366,-8439.16 183.925,-8392.88 184.484,-8191.9 185.043,-8128.27 185.603,-8051.12 186.162,-7850.1 186.721,-7650.64 187.28,-7571.29 187.84,-7271.52 188.399,-7089.16 188.958,-6906.83 189.517,-6641.64 190.077,-6561.62 190.636,-6302.72 191.195,-6230.55 191.754,-6143.33 192.314,-6056.77 192.873,-5898.43 193.432,-5807.35 193.991,-5709.16 194.551,-5416.99 195.11,-5329.08 195.669,-5179.93 196.228,-5034.08 196.788,-4944.73 197.347,-4742.82 197.906,-4551.12 198.465,-4365.39 199.025,-4234.8 199.584,-4104.05 200.143,-3926.57 200.702,-3802.75 201.262,-3719.53 201.821,-3593.12 202.38,-3394.37 202.939,-3279.62 203.499,-3174.52 204.058,-3027.63 204.617,-2888.53 205.176,-2787.62 205.736,-2653.66 206.295,-2520.23 206.854,-2324 207.413,-2234.49 207.973,-2114.67 208.532,-1967.34 209.091,-1892.92 209.65,-1785.22 210.21,-1680.02 210.769,-1639.23 211.328,-1540.06 211.887,-1468.15 212.447,-1342.86 213.006,-1224.72 213.565,-1159.1 214.124,-1124.09 214.684,-1091.07 215.243,-1003.08 215.802,-967.956 216.361,-908.683 216.921,-848.759 217.48,-764.434 218.039,-656.335 218.598,-609.133 219.158,-557.37 219.717,-503.906 220.276,-479.13 220.835,-453.732 221.395,-424.347 221.954,-400.12 222.513,-326.856 223.072,-235.895 223.632,-192.627 224.191,-149.259 224.75,-109.196 225.309,-113.671 225.869,-47.4466 226.428,51.2786 226.987,110.864 227.546,119.511 228.106,157.664 228.665,214.508 229.224,268.344 229.783,322.284 230.343,390.571 230.902,414.422 231.461,478.542 232.02,464.227 232.58,487.107 233.139,492.485 233.698,532.169 234.257,555.962 234.817,581.508 235.376,578.998 235.935,584.714 236.494,567.274 237.054,572.931 237.613,670.369 238.172,673.585 238.731,732.916 239.291,730.299 239.85,766.165 240.409,779.305 240.968,775.962 241.528,753.587 242.087,769.8 242.646,774.394 243.205,773.361 243.765,774.462 244.324,794.658 244.883,791.648 245.442,811.143 246.002,808.529 246.561,861.052 247.12,892.317 247.679,907.219 248.239,937.793 248.798,948.898 249.357,938.76 249.916,933.336 250.476,945.891 251.035,940.519 251.594,936.304 252.153,928.368 252.713,923.53 253.272,939.975 253.831,954.703 254.39,1000.34 254.95,1026.3 255.509,1036.26 256.068,1047.37 256.627,1035.42 257.187,1043.48 257.746,998.966 258.305,1009 258.864,1024.94 259.424,1015.85 259.983,1029.36 260.542,1003.07 261.101,1029.1 261.661,1019.81 262.22,1063.17 262.779,1069.94 263.338,1076.86 263.898,1103.33 264.457,1091.51 265.016,1133.86 265.575,1155.5 266.135,1142.55 266.694,1183.82 267.253,1219.13 267.812,1220.08 268.372,1205.42 268.931,1190.22 269.49,1141.7 270.049,1096.32 270.609,1089.53 271.168,1130.94 271.727,1139.22 272.286,1126.97 272.846,1132.07 273.405,1168.07 273.964,1173.45 274.523,1176.87 275.083,1130.43 275.642,1102.01 276.201,1075.66 276.76,1064.84 277.32,1073.14 277.879,1079.87 278.438,1103.6 278.997,1094.44 279.557,1086.97 280.116,1075.34 280.675,1087.25 281.234,1077.41 281.794,1102.68 282.353,1093.27 282.912,1084.18 283.471,1073.92 284.031,1061.64 284.59,1088.68 285.149,1045.63 285.708,1072.19 286.268,1027.87 286.827,1019.44 287.386,1001.14 287.945,985.013 288.505,983.207 289.064,994.902 289.623,1007.75 290.182,1002.54 290.742,1034.33 291.301,1030.57 291.86,1076.2 292.419,1035.25 292.979,1042.99 293.538,1038.88 294.097,1049.1 294.656,1027.61 295.216,1037.33 295.775,1001.83 296.334,1011.88 296.893,1006.64 297.453,1000.52 298.012,978.53 298.571,1021.18 299.13,998.796 299.69,976.1 300.249,1016.46 300.808,1027.49 301.368,1022.56 301.927,1033.46 302.486,1044.07 303.045,1035.08 303.605,1027.34 304.164,1006.37 304.723,966.24 305.282,994.303 305.842,970.036 306.401,1000.33 306.96,944.241 307.519,955.722 308.079,971.233 308.638,985.777 309.197,981.194 309.756,973.484 310.316,986.668 310.875,1027.65 311.434,1021.88 311.993,1093.53 312.553,1077.94 313.112,1069.52 313.671,1103.02 314.23,1091.57 314.79,1064.72 315.349,1102.22 315.908,1089.64 316.467,1094.53 317.027,1066.85 317.586,1089.37 318.145,1077.8 318.704,1050 319.264,1008.62 319.823,1016.02 320.382,991.064 320.941,967.503 321.501,947.638 322.06,939.752 322.619,901.574 323.178,863.81 323.738,860.514 324.297,842.051 324.856,844.388 325.415,844.872 325.975,831.729 326.534,832.154 327.093,799.106 327.652,848.059 328.212,847.724 328.771,834.183 329.33,851.669 329.889,869.616 330.449,853.625 331.008,837.904 331.567,902.537 332.126,884.366 332.686,879.322 333.245,927.273 333.804,937.469 334.363,910.928 334.923,885.695 335.482,866.241 336.041,815.167 336.6,853.185 337.16,836.195 337.719,852.78 338.278,852.163 338.837,831.551 339.397,833.49 339.956,815.673 340.515,815.01 341.074,802.71 341.634,804.519 342.193,820.678 342.752,818.498 343.311,865.009 343.871,875.206 344.43,874.701 344.989,890.822 345.548,888.452 346.108,868.919 346.667,852.101 347.226,851.298 347.785,816.427 348.345,817.459 348.904,817.243 349.463,819.299 350.022,804.161 350.582,822.95 351.141,807.953 351.7,824.656 352.259,826.135 352.819,823.134 353.378,823.362 353.937,826.636 354.496,794.338 355.056,796.191 355.615,828.524 356.174,791.534 356.733,762.328 357.293,764.528 357.852,784.084 358.411,835.055 358.97,847.605 359.53,840.282 360.089,888.644 360.648,853.435 361.207,834.38 361.767,831.782 362.326,833.809 362.885,815.804 363.444,817.953 364.004,804.176 364.563,851.307 365.122,845.932 365.681,842.024 366.241,806.604 366.8,775.67 367.359,794.468 367.918,762.722 368.478,782.012 369.037,799.166 369.596,812.648 370.155,843.544 370.715,840.226 371.274,838.159 371.833,855.223 372.392,883.149 372.952,881.141 373.511,878.613 374.07,860.084 374.629,856.781 375.189,917.51 375.748,913.485 376.307,907.652 376.866,902.372 377.426,917.794 377.985,913.044 378.544,904.677 379.103,896.14 379.663,874.47 380.222,899.418 380.781,905.716 381.34,917.03 381.9,910.818 382.459,921.976 383.018,895.404 383.577,890.979 384.137,902.007 384.696,899.575 385.255,891.748 385.814,918.387 386.374,943.153 386.933,933.388 387.492,893.904 388.051,857.953 388.611,836.542 389.17,816.91 389.729,818.027 390.288,833.537 390.848,818.364 391.407,817.751 391.966,780.841 392.525,782.958 393.085,768.567 393.644,752.813 394.203,754.423 394.762,758.832 395.322,711.694 395.881,732.184 396.44,767.972 396.999,772.093 397.559,768.776 398.118,751.224 398.677,767.404 399.236,737.774 399.796,724.952 400.355,698.425 400.914,718.486 401.473,706.311 402.033,710.777 402.592,731.39 403.151,766.033 403.71,764.658 404.27,800.511 404.829,835.397 405.388,833.425 405.947,844.865 406.507,838.301 407.066,872.172 407.625,868.35 408.184,864.627 408.744,876.286 409.303,870.211 409.862,848.432 410.421,826.447 410.981,776.711 411.54,810.963 412.099,825.075 412.658,823.571 413.218,803.519 413.777,786.425 414.336,819.481 414.895,848.909 415.455,866.266 416.014,876.146 416.573,869.872 417.132,848.29 417.692,841.814 418.251,817.832 418.81,815.527 419.369,845.562 419.929,808.364 420.488,808.218 421.047,727.145 421.606,712.961 422.166,685 422.725,675.939 423.284,697.612 423.843,685.659 424.403,676.796 424.962,648.209 425.521,671.71 426.08,644.155 426.64,618.596 427.199,644.215 427.758,647.624 428.318,670.505 428.877,675.761 429.436,713.568 429.995,716.988 430.555,700.912 431.114,719.73 431.673,754.997 432.232,755.6 432.792,754.323 433.351,785.179 433.91,800.994 434.469,798.509 435.029,830.34 435.588,828.553 436.147,842.911 436.706,872.044 437.266,851.453 437.825,862.242 438.384,872.017 438.943,896.601 439.503,866.025 440.062,857.121 440.621,894.932 441.18,870.769 441.74,879.116 442.299,858.539 442.858,850.651 443.417,859.799 443.977,819.274 444.536,832.175 445.095,797.399 445.654,792.37 446.214,791.659 446.773,789.55 447.332,804.653 447.891,815.677 448.451,797.752 449.01,794.508 449.569,807.737 450.128,836.574 450.688,851.667 451.247,857.561 451.806,851.443 452.365,845.88 452.925,809.485 453.484,806.349 454.043,818.421 454.602,748.655 455.162,731.428 455.721,765.148 456.28,782.093 456.839,750.361 457.399,781.31 457.958,842.613 458.517,822.292 459.076,836.58 459.636,831.648 460.195,825.813 460.754,805.353 461.313,822.522 461.873,865.749 462.432,860.917 462.991,871.104 463.55,866.4 464.11,859.794 464.669,841.56 465.228,852.329 465.787,815.617 466.347,815.44 466.906,893.431 467.465,901.375 468.024,877.669 468.584,934.713 469.143,939.526 469.702,959.831 470.261,961.314 470.821,919.298 471.38,943.552 471.939,917.991 472.498,893.372 473.058,853.888 473.617,800.215 474.176,796.714 474.735,741.605 475.295,741.801 475.854,739.588 476.413,708.325 476.972,692.446 477.532,660.079 478.091,679.712 478.65,685.425 479.209,652.065 479.769,677.422 480.328,677.898 480.887,679.672 481.446,716.717 482.006,716.947 482.565,718.855 483.124,737.436 483.683,706.822 484.243,693.263 484.802,695.232 485.361,696.367 485.92,717.479 486.48,718.906 487.039,751.954 487.598,753.79 488.157,735.525 488.717,767.13 489.276,747.959 489.835,781.219 490.394,777.12 490.954,774.292 491.513,773.831 492.072,770.969 492.631,767.173 493.191,784.893 493.75,775.318 494.309,787.871 494.868,786.124 495.428,768.272 495.987,738.103 496.546,771.852 497.105,783.527 497.665,796.03 498.224,808.346 498.783,789.157 499.342,802.875 499.902,783.526 500.461,814.24 501.02,840.155 501.579,849.156 502.139,791.873 502.698,775.199 503.257,807.533 503.816,758.395 504.376,775.251 504.935,723.745 505.494,705.012 506.053,704.749 506.613,717.244 507.172,732.585 507.731,733.298 508.29,735.054 508.85,738.069 509.409,723.115 509.968,739.801 510.527,722.729 511.087,688.736 511.646,689.565 512.205,692.867 512.764,727.019 513.324,694.403 513.883,698.464 514.442,684.093 515.001,675.399 515.561,663.644 516.12,649.638 516.679,674.73 517.238,681.768 517.798,703.022 518.357,672.343 518.916,681.585 519.475,700.075 520.035,716.644 520.594,718.078 521.153,701.725 521.712,752.074 522.272,736.711 522.831,767.442 523.39,764.464 523.949,777.502 524.509,791.627 525.068,839.249 525.627,849.461 526.186,829.472 526.746,842.751 527.305,820.187 527.864,846.494 528.423,856.689 528.983,834.031 529.542,842.367 530.101,853.644 530.66,768.324 531.22,767.907 531.779,784.352 532.338,763.283 532.897,729.456 533.457,746.547 534.016,743.651 534.575,697.75 535.134,650.989 535.694,702.79 536.253,703.116 536.812,704.064 537.371,686.02 537.931,655.709 538.49,672.031 539.049,707.591 539.608,704.445 540.168,706.211 540.727,706.387 541.286,721.279 541.845,708.936 542.405,731.669 542.964,780.04 543.523,779.104 544.082,790.463 544.642,721.985 545.201,722.361 545.76,721.554 546.319,738.261 546.879,752.241 547.438,751.304 547.997,750.903 548.556,762.359 549.116,776.642 549.675,761.535 550.234,743.105 550.793,742.154 551.353,742.961 551.912,727.481 552.471,708.553 553.031,711.26 553.59,715.469 554.149,719.994 554.708,768.111 555.268,748.129 555.827,744.572 556.386,774.563 556.945,724.13 557.505,738.751 558.064,692.249 558.623,678.6 559.182,681.361 559.742,681.366 560.301,715.464 560.86,678.75 561.419,682.08 561.979,680.852 562.538,669.085 563.097,669.795 563.656,654.664 564.216,672.163 564.775,694.299 565.334,695.353 565.893,675.436 566.453,676.677 567.012,664.608 567.571,666.973 568.13,700.697 568.69,700.125 569.249,702.163 569.808,672.559 570.367,656.167 570.927,642.116 571.486,681.761 572.045,687.079 572.604,700.502 573.164,702.521 573.723,717.115 574.282,714.32 574.841,732.108 575.401,765.772 575.96,727.419 576.519,727.288 577.078,710.294 577.638,711.031 578.197,714.059 578.756,697.6 579.315,651.357 579.875,704.388 580.434,687.83 580.993,703.517 581.552,686.796 582.112,705.795 582.671,708.851 583.23,707.369 583.789,724.575 584.349,721.834 584.908,736.239 585.467,753.328 586.026,765.725 586.586,791.432 587.145,787.368 587.704,783.342 588.263,762.293 588.823,772.298 589.382,756.084 589.941,736.22 590.5,701.85 591.06,699.857 591.619,698.871 592.178,698.534 592.737,685.224 593.297,669.215 593.856,636.748 594.415,643.036 594.974,599.175 595.534,623.034 596.093,643.878 596.652,630.156 597.211,633.639 597.771,602.979 598.33,643.713 598.889,678.2 599.448,681.762 600.008,668.031 600.567,656.311 601.126,579.31 601.685,604.73 602.245,627.962 602.804,632.308 603.363,654.204 603.922,624.291 604.482,625.453 605.041,628.929 605.6,583.002 606.159,606.304 606.719,597.796 607.278,599.489 607.837,607.098 608.396,598.123 608.956,639.28 609.515,658.334 610.074,661.528 610.633,616.796 611.193,637.849 611.752,669.55 612.311,669.207 612.87,688.969 613.43,687.392 613.989,722.522 614.548,735.09 615.107,748.902 615.667,712.078 616.226,710.289 616.785,724.243 617.344,704.393 617.904,640.125 618.463,660.545 619.022,678.607 619.581,680.788 620.141,680.696 620.7,713.365 621.259,698.835 621.818,686.781 622.378,703.797 622.937,670.361 623.496,704.167 624.055,721.898 624.615,704.488 625.174,704.962 625.733,674.835 626.292,657.711 626.852,658.903 627.411,659.483 627.97,690.151 628.529,691.324 629.089,688.817 629.648,724.016 630.207,707.61 630.766,689.137 631.326,721.542 631.885,733.851 632.444,717.171 633.003,733.627 633.563,749.2 634.122,780.103 634.681,762.101 635.24,760.451 635.8,724.584 636.359,704.434 636.918,719.341 637.477,700.046 638.037,666.42 638.596,684.758 639.155,685.954 639.714,702.012 640.274,686.007 640.833,670.635 641.392,640.69 641.951,627.845 642.511,631.526 643.07,637.075 643.629,641.683 644.188,630.396 644.748,648.763 645.307,632.82 645.866,635.088 646.425,636.712 646.985,672.718 647.544,689.259 648.103,706.312 648.662,721.062 649.222,688.366 649.781,717.571 650.34,702.802 650.899,702.364 651.459,718.699 652.018,701.002 652.577,716.684 653.136,762.85 653.696,762.649 654.255,759.243 654.814,772.65 655.373,769.421 655.933,763.195 656.492,742.532 657.051,743.763 657.61,741.873 658.17,741.053 658.729,722.509 659.288,737.168 659.847,719.697 660.407,748.509 660.966,727.496 661.525,711.874 662.084,724.98 662.644,739.502 663.203,720.559 663.762,736.071 664.321,734.307 664.881,702.116 665.44,701.834 665.999,703.605 666.558,700.247 667.118,722.613 667.677,719.673 668.236,705.114 668.795,683.895 669.355,683.237 669.914,685.217 670.473,689.101 671.032,690.103 671.592,742.225 672.151,721.288 672.71,702.815 673.269,701.535 673.829,729.553 674.388,727.292 674.947,741.42 675.506,757.161 676.066,752.83 676.625,748.592 677.184,727.903 677.743,678.163 678.303,684.155 678.862,682.106 679.421,698.076 679.981,697.316 680.54,698.646 681.099,713.789 681.658,713.134 682.218,727.242 682.777,721.673 683.336,704.969 683.895,687.018 684.455,719.8 685.014,747.879 685.573,760.24 686.132,771.001 686.692,784.578 687.251,766.158 687.81,797.4 688.369,773.067 688.929,753.165 689.488,765.442 690.047,744.473 690.606,743.812 691.166,740.964 691.725,724.646 692.284,742.902 692.843,739.832 693.403,738.1 693.962,737.197 694.521,719.474 695.08,684.989 695.64,653.368 696.199,670.006 696.758,672.907 697.317,691.066 697.877,708.026 698.436,725.62 698.995,741.637 699.554,739.658 700.114,752.168 700.673,702.648 701.232,717.298 701.791,714.373 702.351,777.02 702.91,805.152 703.469,798.332 704.028,762.685 704.588,788.231 705.147,815.654 705.706,807.89 706.265,769.781 706.825,735.025 707.384,717.216 707.943,733.92 708.502,713.772 709.062,709.675 709.621,705.396 710.18,700.367 710.739,686.566 711.299,691.185 711.858,705.633 712.417,755.48 712.976,737.434 713.536,751.155 714.095,762.256 714.654,773.855 715.213,772.451 715.773,751.331 716.332,762.817 716.891,776.393 717.45,752.675 718.01,750.302 718.569,733.837 719.128,711.742 719.687,707.549 720.247,709.102 720.806,711.384 721.365,712.602 721.924,715.01 722.484,715.263 723.043,730.575 723.602,775.813 724.161,775.486 724.721,783.358 725.28,781.105 725.839,793.236 726.398,772.533 726.958,735.109 727.517,704.929 728.076,736.553 728.635,733.137 729.195,697.882 729.754,729.186 730.313,758.563 730.872,757.343 731.432,786.341 731.991,779.197 732.55,788.056 733.109,797.843 733.669,788.677 734.228,782.148 734.787,747.162 735.346,792.23 735.906,800.357 736.465,783.247 737.024,746.38 737.583,746.09 738.143,710.046 738.702,675.834 739.261,664.404 739.82,667.559 740.38,666.236 740.939,655.346 741.498,670.896 742.057,641.085 742.617,642.819 743.176,644.414 743.735,628.378 744.294,647.733 744.854,650.219 745.413,653.802 745.972,634.911 746.531,638.073 747.091,625.838 747.65,648.932 748.209,634.108 748.768,637.799 749.328,655.281 749.887,673.051 750.446,685.937 751.005,701.608 751.565,715.28 752.124,714.171 752.683,681.066 753.242,679.945 753.802,714.958 754.361,711.581 754.92,726.732 755.479,741.134 756.039,740.75 756.598,737.927 757.157,734.596 757.716,731.842 758.276,713.124 758.835,727.519 759.394,710.327 759.953,712.98 760.513,731.77 761.072,664.82 761.631,685.535 762.19,635.303 762.75,622.887 763.309,580.018 763.868,536.753 764.427,544.947 764.987,535.913 765.546,531.265 766.105,523.353 766.664,498.263 767.224,522.072 767.783,594.945 768.342,582.325 768.901,540.969 769.461,548.014 770.02,571.063 770.579,594.708 771.138,617.019 771.698,632.912 772.257,621.393 772.816,641.519 773.375,638.981 773.935,645.718 774.494,666.302 775.053,667.383 775.612,639.783 776.172,643.059 776.731,679.348 777.29,665.729 777.849,683.799 778.409,688.261 778.968,706.207 779.527,721.15 780.086,720.219 780.646,703.057 781.205,687.923 781.764,686.577 782.323,667.728 782.883,652.986 783.442,654.136 784.001,674.81 784.56,690.72 785.12,693.354 785.679,662.775 786.238,666.083 786.797,653.114 787.357,691.709 787.916,690.822 788.475,674.096 789.034,706.314 789.594,720.898 790.153,701.705 790.712,704.071 791.271,673.269 791.831,678.57 792.39,660.717 792.949,662.862 793.508,662.47 794.068,649.414 794.627,684.119 795.186,701.913 795.745,700.805 796.305,682.812 796.864,635.398 797.423,640.514 797.982,673.364 798.542,658.322 799.101,644.716 799.66,647.074 800.219,664.882 800.779,696.246 801.338,697.641 801.897,743.565 802.456,741.208 803.016,755.972 803.575,752.89 804.134,717.209 804.693,730.836 805.253,728.068 805.812,724.635 806.371,721.992 806.931,716.752 807.49,750.793 808.049,716.409 808.608,668.341 809.168,687.216 809.727,670.477 810.286,702.349 810.845,700.298 811.405,681.196 811.964,682.823 812.523,631.983 813.082,650.772 813.642,649.802 814.201,650.481 814.76,646.361 815.319,663.863 815.879,648.257 816.438,650.432 816.997,670.143 817.556,718.57 818.116,718.825 818.675,719.29 819.234,734.287 819.793,748.11 820.353,728.575 820.912,711.034 821.471,722.146 822.03,723.495 822.59,734.848 823.149,764.766 823.708,795.271 824.267,791.478 824.827,834.616 825.386,812.382 825.945,786.959 826.504,780.528 827.064,728.896 827.623,730.635 828.182,726.56 828.741,784.119 829.301,795.245 829.86,759.162 830.419,754.438 830.978,734.484 831.538,798.222 832.097,790.263 832.656,798.798 833.215,822.486 833.775,813.351 834.334,771.739 834.893,735.285 835.452,733.337 836.012,763.949 836.571,762.124 837.13,759.298 837.689,752.911 838.249,733.084 838.808,727.693 839.367,740.602 839.926,720.004 840.486,713.661 841.045,711.605 841.604,676.49 842.163,660.649 842.723,644.578 843.282,630.165 843.841,634.292 844.4,620.614 844.96,622.277 845.519,643.261 846.078,628.559 846.637,664.663 847.197,697.66 847.756,695.474 848.315,661.329 848.874,694.147 849.434,693.44 849.993,694.776 850.552,694.05 851.111,690.726 851.671,672.744 852.23,671.737 852.789,685.991 853.348,716.011 853.908,713.931 854.467,696.51 855.026,696.516 855.585,710.95 856.145,727.258 856.704,739.084 857.263,752.791 857.822,716.979 858.382,713.473 858.941,727.37 859.5,724.854 860.059,721.967 860.619,703.381 861.178,685.247 861.737,685.614 862.296,653.18 862.856,671.397 863.415,670.388 863.974,669.16 864.533,652.272 865.093,633.033 865.652,638.709 866.211,691.537 866.77,663.21 867.33,634.835 867.889,669.46 868.448,637.143 869.007,635.93 869.567,638.947 870.126,640.882 870.685,623.106 871.244,642.676 871.804,645.234 872.363,631.264 872.922,632.183 873.481,617.087 874.041,637.63 874.6,628.557 875.159,664.32 875.718,637.703 876.278,706.384 876.837,690.214 877.396,691.634 877.955,725.953 878.515,722.612 879.074,692.261 879.633,708.522 880.192,710.124 880.752,691.802 881.311,676.507 881.87,679.288 882.429,679.613 882.989,698.614 883.548,714.061 884.107,714.217 884.666,693.774 885.226,691.236 885.785,672.085 886.344,677.486 886.903,709.794 887.463,709.38 888.022,706.863 888.581,720.79 889.14,707.021 889.7,692.584 890.259,692.638 890.818,694.675 891.377,676.517 891.937,677.293 892.496,681.927 893.055,701.313 893.614,717.704 894.174,716.654 894.733,748.808 895.292,731.69 895.851,745.495 896.411,742.511 896.97,726.005 897.529,740.825 898.088,723.107 898.648,723.398 899.207,725.322 899.766,726.265 900.325,705.996 900.885,706.914 901.444,688.014 902.003,734.666 902.562,746.13 903.122,726.645 903.681,740.384 904.24,736.101 904.799,732.341 905.359,714.09 905.918,698.71 906.477,700.111 907.036,732.07 907.596,759.965 908.155,724.32 908.714,691.472 909.273,690.051 909.833,692.927 910.392,710.319 910.951,709.865 911.51,709.161 912.07,676.316 912.629,623.291 913.188,660.186 913.747,693.579 914.307,678.373 914.866,695.229 915.425,679.978 915.984,680.999 916.544,663.603 917.103,684.058 917.662,647.973 918.221,652.748 918.781,669.476 919.34,733.221 919.899,744.677 920.458,772.308 921.018,783.532 921.577,746.851 922.136,742.471 922.695,722.628 923.255,689.131 923.814,669.725 924.373,699.978 924.932,713.796 925.492,742.838 926.051,721.585 926.61,719.329 927.169,734.46 927.729,729.833 928.288,726.814 928.847,723.553 929.406,706.028 929.966,689.991 930.525,640.354 931.084,641.581 931.644,677.268 932.203,677.461 932.762,661.642 933.321,662.987 933.881,662.668 934.44,645.818 934.999,618.951 935.558,655.109 936.118,657.151 936.677,640.691 937.236,609.997 937.795,614.271 938.355,584.681 938.914,627.991 939.473,614.837 940.032,617.442 940.592,635.153 941.151,655.169 941.71,678.141 942.269,680.09 942.829,667.268 943.388,732.959 943.947,716.968 944.506,719.58 945.066,714.193 945.625,695.948 946.184,678.85 946.743,693.455 947.303,660.309 947.862,627.448 948.421,629.897 948.98,630.873 949.54,585.628 950.099,624.142 950.658,641.535 951.217,647.054 951.777,651.086 952.336,652.649 952.895,623.35 953.454,643.532 954.014,613.283 954.573,570.545 955.132,611.205 955.691,614.017 956.251,635.21 956.81,639.73 957.369,646.415 957.928,615.109 958.488,633.599 959.047,619.481 959.606,621.784 960.165,614.372 960.725,581.629 961.284,569.715 961.843,613.112 962.402,614.305 962.962,615.71 963.521,604.524 964.08,609.746 964.639,615.281 965.199,618.483 965.758,606.082 966.317,626.109 966.876,594.965 967.436,585.405 967.995,571.714 968.554,595.822 969.113,615.013 969.673,585.114 970.232,619.429 970.791,639.875 971.35,613.635 971.91,603.947 972.469,642.667 973.028,646.633 973.587,646.916 974.147,634.128 974.706,622.811 975.265,588.71 975.824,576.707 976.384,583.056 976.943,571.507 977.502,575.904 978.061,580.645 978.621,586.006 979.18,621.549 979.739,590.945 980.298,599.231 980.858,604.528 981.417,641.18 981.976,660.968 982.535,629.09 983.095,632.266 983.654,617.334 984.213,669.129 984.772,719.621 985.332,686.285 985.891,699.281 986.45,663.937 987.009,647.67 987.569,617.929 988.128,587.275 988.687,609.54 989.246,613.177 989.806,652.596 990.365,653.414 990.924,656.716 991.483,676.379 992.043,674.318 992.602,690.289 993.161,688.982 993.72,626.487 994.28,645.673 994.839,631.531 995.398,647.961 995.957,580.597 996.517,567.311 997.076,604.589 997.635,642.01 998.194,662.91 998.754,695.748 999.313,695.919 999.872,681.412 1000.43,680.714 1000.99,678.068 1001.55,681.563 1002.11,697.771 1002.67,714.787 1003.23,714.377 1003.79,716.109 1004.35,713.777 1004.91,741.834 1005.46,725.148 1006.02,710.029 1006.58,706.192 1007.14,721.636 1007.7,737.624 1008.26,770.011 1008.82,781.167 1009.38,760.156 1009.94,743.235 1010.5,741.702 1011.06,751.429 1011.62,744.519 1012.18,738.148 1012.73,736.672 1013.29,752.177 1013.85,746.839 1014.41,746.81 1014.97,743.336 1015.53,755.028 1016.09,768.273 1016.65,778.653 1017.21,770.87 1017.77,721.457 1018.33,716.772 1018.89,713.774 1019.45,712.981 1020.01,713.425 1020.56,728.507 1021.12,743.823 1021.68,757.211 1022.24,748.807 1022.8,730.157 1023.36,730.172 1023.92,742.466 1024.48,755.242 1025.04,768.608 1025.6,780.033 1026.16,773.278 1026.72,782.39 1027.28,761.888 1027.83,774.907 1028.39,783.733 1028.95,808.051 1029.51,800.829 1030.07,824.883 1030.63,785.559 1031.19,747.232 1031.75,793.594 1032.31,788.9 1032.87,798.365 1033.43,808.574 1033.99,815.455 1034.55,792.795 1035.1,799.569 1035.66,791.981 1036.22,785.338 1036.78,793.174 1037.34,770.559 1037.9,768.138 1038.46,767.511 1039.02,762.756 1039.58,773.851 1040.14,789.07 1040.7,801.48 1041.26,809.776 1041.82,818.911 1042.38,810.334 1042.93,819.495 1043.49,840.251 1044.05,830.06 1044.61,805.008 1045.17,781.762 1045.73,745.038 1046.29,760.513 1046.85,755.928 1047.41,769.52 1047.97,778.997 1048.53,823.609 1049.09,812.519 1049.65,821.86 1050.2,794.342 1050.76,759.048 1051.32,753.033 1051.88,750.643 1052.44,766.24 1053,779.899 1053.56,775.298 1054.12,740.621 1054.68,687.791 1055.24,689.64 1055.8,707.069 1056.36,733.942 1056.92,750.567 1057.48,743.081 1058.03,690.975 1058.59,654.067 1059.15,653.658 1059.71,702.139 1060.27,698.178 1060.83,716.379 1061.39,714.334 1061.95,693.184 1062.51,693.983 1063.07,645.771 1063.63,664.743 1064.19,682.128 1064.75,699.517 1065.3,700.749 1065.86,700.54 1066.42,649.447 1066.98,633.331 1067.54,616.489 1068.1,588.873 1068.66,576.699 1069.22,536.917 1069.78,527.091 1070.34,552.089 1070.9,545.509 1071.46,571.092 1072.02,563.576 1072.57,569.58 1073.13,558.726 1073.69,567.307 1074.25,558.947 1074.81,547.329 1075.37,569.469 1075.93,573.08 1076.49,562.305 1077.05,568.25 1077.61,607.186 1078.17,625.926 1078.73,663.939 1079.29,664.061 1079.85,681.913 1080.4,651.035 1080.96,655.054 1081.52,622.206 1082.08,625.27 1082.64,626.448 1083.2,628.353 1083.76,630.995 1084.32,615.983 1084.88,620.952 1085.44,625.283 1086,596.375 1086.56,600.81 1087.12,606.636 1087.67,590.778 1088.23,595.788 1088.79,588.394 1089.35,596.083 1089.91,632.709 1090.47,622.51 1091.03,609.327 1091.59,616.057 1092.15,606.457 1092.71,612.679 1093.27,621.122 1093.83,610.572 1094.39,634.245 1094.94,623.067 1095.5,642.088 1096.06,677.297 1096.62,661.662 1097.18,694.416 1097.74,677.294 1098.3,679.879 1098.86,664.903 1099.42,603.082 1099.98,607.82 1100.54,615.09 1101.1,619.505 1101.66,669.714 1102.22,717.436 1102.77,729.123 1103.33,723.448 1103.89,719.921 1104.45,703.605 1105.01,688.17 1105.57,702.174 1106.13,684.618 1106.69,684.523 1107.25,681.838 1107.81,681.919 1108.37,667.429 1108.93,685.467 1109.49,705.29 1110.04,689.762 1110.6,708.413 1111.16,659.897 1111.72,627.179 1112.28,633.68 1112.84,636.394 1113.4,638.707 1113.96,690.819 1114.52,707.128 1115.08,693.16 1115.64,709.777 1116.2,723.829 1116.76,705.646 1117.31,688.484 1117.87,689.964 1118.43,692.637 1118.99,705.074 1119.55,702.212 1120.11,705.472 1120.67,718.692 1121.23,698.118 1121.79,692.893 1122.35,709.498 1122.91,709.579 1123.47,709.897 1124.03,706.55 1124.59,656.026 1125.14,655.851 1125.7,672.297 1126.26,654.271 1126.82,636.346 1127.38,638.848 1127.94,642.046 1128.5,596.399 1129.06,617.895 1129.62,637.932 1130.18,671.186 1130.74,688.286 1131.3,671.545 1131.86,655.298 1132.41,689.539 1132.97,740.816 1133.53,754.112 1134.09,782.014 1134.65,792.872 1135.21,818.399 1135.77,810.147 1136.33,817.58 1136.89,794.087 1137.45,785.382 1138.01,842.61 1138.57,865.09 1139.13,820.642 1139.68,829.584 1140.24,838.691 1140.8,828.841 1141.36,840.044 1141.92,783.024 1142.48,775.943 1143.04,788.976 1143.6,749.615 1144.16,764.981 1144.72,763.546 1145.28,746.358 1145.84,743.979 1146.4,706.713 1146.96,705.959 1147.51,737.451 1148.07,734.985 1148.63,701.735 1149.19,702.081 1149.75,716.023 1150.31,712.503 1150.87,725.575 1151.43,708.293 1151.99,722.007 1152.55,702.12 1153.11,704.15 1153.67,670.109 1154.23,656.66 1154.78,657.106 1155.34,645.71 1155.9,668.59 1156.46,685.276 1157.02,683.544 1157.58,650.308 1158.14,653.602 1158.7,638.03 1159.26,638.105 1159.82,640.038 1160.38,640.978 1160.94,623.636 1161.5,605.166 1162.05,658.064 1162.61,645.21 1163.17,645.409 1163.73,646.938 1164.29,693.262 1164.85,691.434 1165.41,690.266 1165.97,721.978 1166.53,765.066 1167.09,776.808 1167.65,771.647 1168.21,781.044 1168.77,806.103 1169.33,799.435 1169.88,762.472 1170.44,759.063 1171,740.654 1171.56,753.901 1172.12,767.407 1172.68,747.718 1173.24,727.907 1173.8,708.424 1174.36,709.953 1174.92,708.677 1175.48,694.084 1176.04,695.342 1176.6,707.271 1177.15,694.212 1177.71,677.003 1178.27,660.885 1178.83,629.896 1179.39,584.205 1179.95,590.687 1180.51,595.991 1181.07,583.41 1181.63,602.235 1182.19,624.322 1182.75,612.215 1183.31,632.274 1183.87,636.534 1184.43,606.635 1184.98,612.28 1185.54,601.557 1186.1,604.041 1186.66,625.282 1187.22,644.809 1187.78,627.85 1188.34,617.257 1188.9,607.674 1189.46,625.991 1190.02,631.824 1190.58,638.385 1191.14,640.887 1191.7,642.758 1192.25,690.722 1192.81,675.992 1193.37,676.771 1193.93,679.045 1194.49,659.758 1195.05,678.463 1195.61,677.543 1196.17,689.179 1196.73,653.771 1197.29,671.89 1197.85,654.891 1198.41,670.066 1198.97,700.038 1199.52,743.894 1200.08,738.175 1200.64,766.318 1201.2,762.107 1201.76,758.622 1202.32,751.248 1202.88,732.402 1203.44,730.938 1204,712.304 1204.56,661.025 1205.12,661.607 1205.68,647.226 1206.24,665.244 1206.8,669.734 1207.35,672.728 1207.91,672.667 1208.47,669.399 1209.03,657.509 1209.59,658.27 1210.15,658.636 1210.71,676.187 1211.27,689.223 1211.83,690.728 1212.39,693.539 1212.95,692.459 1213.51,711.408 1214.07,696.43 1214.62,715.736 1215.18,732.26 1215.74,715.405 1216.3,726.997 1216.86,738.045 1217.42,719.691 1217.98,667.677 1218.54,681.155 1219.1,683.629 1219.66,684.835 1220.22,682.096 1220.78,667.451 1221.34,636.136 1221.89,619.79 1222.45,655.016 1223.01,674.409 1223.57,672.454 1224.13,643.783 1224.69,631.749 1225.25,632.597 1225.81,651.628 1226.37,652.792 1226.93,703.747 1227.49,720.863 1228.05,705.234 1228.61,710.282 1229.17,726.771 1229.72,726.727 1230.28,726.389 1230.84,709.355 1231.4,709.843 1231.96,692.668 1232.52,705.736 1233.08,686.695 1233.64,671.753 1234.2,691.726 1234.76,673.571 1235.32,654.792 1235.88,704.306 1236.44,736.348 1236.99,687.224 1237.55,686.247 1238.11,686.854 1238.67,671.385 1239.23,670.793 1239.79,671.976 1240.35,675.097 1240.91,660.188 1241.47,626.576 1242.03,627.795 1242.59,614.143 1243.15,600.103 1243.71,609.592 1244.26,562.097 1244.82,566.96 1245.38,606.45 1245.94,628.594 1246.5,663.105 1247.06,664.03 1247.62,664.289 1248.18,670.851 1248.74,670.865 1249.3,655.41 1249.86,656.555 1250.42,609.198 1250.98,599.423 1251.54,603.247 1252.09,607.795 1252.65,612.247 1253.21,618.86 1253.77,591.057 1254.33,612.143 1254.89,613.451 1255.45,619.104 1256.01,622.067 1256.57,642.141 1257.13,645.953 1257.69,647.738 1258.25,667.065 1258.81,670.573 1259.36,705.508 1259.92,721.878 1260.48,734.368 1261.04,718.081 1261.6,691.154 1262.16,691.542 1262.72,674.706 1263.28,692.01 1263.84,675.557 1264.4,693.815 1264.96,695.956 1265.52,710.374 1266.08,742.201 1266.63,726.002 1267.19,737.494 1267.75,752.984 1268.31,750.321 1268.87,747.805 1269.43,761.611 1269.99,743.49 1270.55,740.835 1271.11,718.762 1271.67,713.666 1272.23,679.018 1272.79,695.041 1273.35,665.764 1273.91,700.352 1274.46,697.692 1275.02,694.329 1275.58,708.02 1276.14,708.143 1276.7,688.881 1277.26,702.691 1277.82,701.594 1278.38,683.646 1278.94,684.603 1279.5,684.014 1280.06,667.072 1280.62,682.249 1281.18,700.288 1281.73,686.905 1282.29,702.635 1282.85,684.141 1283.41,680.843 1283.97,681.651 1284.53,682.893 1285.09,700.311 1285.65,701.869 1286.21,704.37 1286.77,721.83 1287.33,720.355 1287.89,720.473 1288.45,686.277 1289,652.431 1289.56,654.641 1290.12,673.859 1290.68,689.207 1291.24,701.52 1291.8,689.012 1292.36,684.535 1292.92,683.704 1293.48,681.816 1294.04,683.5 1294.6,634.349 1295.16,622.578 1295.72,642.917 1296.28,648.001 1296.83,664.955 1297.39,664.768 1297.95,712.72 1298.51,695.903 1299.07,695.906 1299.63,727.621 1300.19,756.98 1300.75,688.935 1301.31,658.727 1301.87,675.358 1302.43,709.697 1302.99,723.308 1303.55,735.933 1304.1,733.461 1304.66,684.223 1305.22,683.174 1305.78,684.881 1306.34,634.869 1306.9,653.419 1307.46,622.081 1308.02,642.385 1308.58,647.327 1309.14,616.171 1309.7,605.121 1310.26,610.575 1310.82,631.964 1311.38,616.65 1311.93,606.236 1312.49,627.126 1313.05,612.106 1313.61,664.338 1314.17,665.937 1314.73,669.18 1315.29,690.956 1315.85,657.129 1316.41,720.021 1316.97,720.263 1317.53,734.263 1318.09,746.085 1318.65,773.559 1319.2,783.114 1319.76,758.394 1320.32,740.323 1320.88,720.159 1321.44,686.79 1322,700.46 1322.56,702.016 1323.12,702.212 1323.68,735.018 1324.24,651.526 1324.8,670.203 1325.36,670.931 1325.92,685.313 1326.47,670.063 1327.03,654.773 1327.59,654.121 1328.15,653.034 1328.71,673.174 1329.27,676.034 1329.83,693.239 1330.39,692.616 1330.95,688.993 1331.51,689.018 1332.07,667.625 1332.63,670.037 1333.19,684.23 1333.75,686.023 1334.3,670.149 1334.86,640.706 1335.42,641.608 1335.98,661.662 1336.54,615.862 1337.1,599.705 1337.66,600.723 1338.22,607.392 1338.78,578.094 1339.34,585.545 1339.9,592.416 1340.46,596.589 1341.02,584.554 1341.57,622.05 1342.13,640.521 1342.69,623.867 1343.25,632.382 1343.81,650.661 1344.37,703.419 1344.93,702.188 1345.49,667.319 1346.05,666.81 1346.61,650.346 1347.17,653.661 1347.73,671.145 1348.29,670.951 1348.84,688.664 1349.4,687.101 1349.96,675.565 1350.52,674.987 1351.08,674.546 1351.64,692.375 1352.2,706.657 1352.76,740.724 1353.32,691.835 1353.88,705.21 1354.44,705.445 1355,706.038 1355.56,725.309 1356.12,723.939 1356.67,736.711 1357.23,717.218 1357.79,698.786 1358.35,697.803 1358.91,731.174 1359.47,729.083 1360.03,693.229 1360.59,724.517 1361.15,719.279 1361.71,716.134 1362.27,718.165 1362.83,700.768 1363.39,734.91 1363.94,746.844 1364.5,775.887 1365.06,804.661 1365.62,813.835 1366.18,820.578 1366.74,779.256 1367.3,771.627 1367.86,763.787 1368.42,775.178 1368.98,767.412 1369.54,762.977 1370.1,761.224 1370.66,735.113 1371.21,715.044 1371.77,727.539 1372.33,745.973 1372.89,741.842 1373.45,754.238 1374.01,754.272 1374.57,732.155 1375.13,727.5 1375.69,690.838 1376.25,687.386 1376.81,705.116 1377.37,706.827 1377.93,709.792 1378.49,693.533 1379.04,696.962 1379.6,677.997 1380.16,678.73 1380.72,697.799 1381.28,729.592 1381.84,695.529 1382.4,725.726 1382.96,723.738 1383.52,719.652 1384.08,697.68 1384.64,714.443 1385.2,684.254 1385.76,700.124 1386.31,696.794 1386.87,713.416 1387.43,732.634 1387.99,712.18 1388.55,691.028 1389.11,702.892 1389.67,704.548 1390.23,688.254 1390.79,688.111 1391.35,638.833 1391.91,641.843 1392.47,615.012 1393.03,618.648 1393.58,607.163 1394.14,645.047 1394.7,679.844 1395.26,712.631 1395.82,708.274 1396.38,689.225 1396.94,688.697 1397.5,670.759 1398.06,671.572 1398.62,674.043 1399.18,662.045 1399.74,663.007 1400.3,678.786 1400.86,658.583 1401.41,708.989 1401.97,725.619 1402.53,690.676 1403.09,692.214 1403.65,694.324 1404.21,662.961 1404.77,648.705 1405.33,650.696 1405.89,642.299 1406.45,674.688 1407.01,710.282 1407.57,742.772 1408.13,720.95 1408.68,702.508 1409.24,668.583 1409.8,681.745 1410.36,662.985 1410.92,698.803 1411.48,730.522 1412.04,709.019 1412.6,724.356 1413.16,769.06 1413.72,745.509 1414.28,758.227 1414.84,756.01 1415.4,719.608 1415.95,701.282 1416.51,716.919 1417.07,729.753 1417.63,744.553 1418.19,710.613 1418.75,710.626 1419.31,724.573 1419.87,722.769 1420.43,753.578 1420.99,766.107 1421.55,756.534 1422.11,770.559 1422.67,733.719 1423.23,730.47 1423.78,710.827 1424.34,758.307 1424.9,771.36 1425.46,784.547 1426.02,776.098 1426.58,757.599 1427.14,737.518 1427.7,717.203 1428.26,700.851 1428.82,666.596 1429.38,665.506 1429.94,666.7 1430.5,655.671 1431.05,641.714 1431.61,626.319 1432.17,631.661 1432.73,637.217 1433.29,593.302 1433.85,599.722 1434.41,587.855 1434.97,574.393 1435.53,592.247 1436.09,597.468 1436.65,583.645 1437.21,540.798 1437.77,550.061 1438.33,557.114 1438.88,541.941 1439.44,533.168 1440,540.385 1440.56,547.493 1441.12,571.412 1441.68,545.001 1442.24,553.369 1442.8,559.254 1443.36,564.883 1443.92,592.799 1444.48,658.511 1445.04,659.709 1445.6,613.325 1446.15,614.209 1446.71,632.401 1447.27,603.675 1447.83,606.207 1448.39,626.103 1448.95,613.378 1449.51,630.925 1450.07,584.611 1450.63,622.407 1451.19,596.683 1451.75,585.234 1452.31,608.338 1452.87,612.755 1453.42,618.323 1453.98,636.481 1454.54,672.762 1455.1,658.493 1455.66,661.297 1456.22,663.963 1456.78,698.111 1457.34,712.786 1457.9,730.294 1458.46,744.274 1459.02,758.219 1459.58,771.305 1460.14,769.303 1460.7,784.97 1461.25,812.351 1461.81,803.847 1462.37,811.575 1462.93,804.736 1463.49,783.395 1464.05,759.481 1464.61,771.106 1465.17,750.32 1465.73,732.179 1466.29,695.586 1466.85,680.602 1467.41,694.604 1467.97,676.714 1468.52,694.756 1469.08,696.185 1469.64,663.794 1470.2,631.717 1470.76,684.501 1471.32,685.207 1471.88,665.639 1472.44,652.128 1473,687.136 1473.56,703.248 1474.12,718.78 1474.68,731.322 1475.24,727.813 1475.79,739.085 1476.35,720.252 1476.91,767.114 1477.47,781.101 1478.03,744.767 1478.59,740.269 1479.15,721.723 1479.71,718.481 1480.27,716.421 1480.83,715.585 1481.39,669.913 1481.95,702.345 1482.51,702.141 1483.07,728.476 1483.62,759.284 1484.18,728.25 1484.74,697.177 1485.3,708.311 1485.86,707.39 1486.42,737.427 1486.98,749.52 1487.54,731.524 1488.1,745.665 1488.66,723.196 1489.22,706.002 1489.78,706.344 1490.34,734.288 1490.89,749.497 1491.45,743.567 1492.01,742.824 1492.57,723.266 1493.13,716.584 1493.69,711.46 1494.25,722.882 1494.81,672.254 1495.37,672.444 1495.93,705.804 1496.49,720.792 1497.05,718.37 1497.61,716.168 1498.16,713.501 1498.72,713.006 1499.28,710.496 1499.84,695.499 1500.4,694.734 1500.96,707.921 1501.52,725.15 1502.08,736.09 1502.64,752.62 1503.2,734.066 1503.76,729.372 1504.32,728.647 1504.88,722.55 1505.44,705.799 1505.99,722.144 1506.55,698.476 1507.11,702.904 1507.67,688.015 1508.23,686.129 1508.79,701.17 1509.35,702.12 1509.91,700.233 1510.47,699.9 1511.03,666.24 1511.59,669.211 1512.15,664.857 1512.71,681.127 1513.26,693.624 1513.82,679.016 1514.38,666.073 1514.94,650.999 1515.5,685.795 1516.06,671.474 1516.62,654.988 1517.18,657.075 1517.74,656.632 1518.3,640.374 1518.86,610.28 1519.42,648.754 1519.98,622.652 1520.53,639.093 1521.09,644.353 1521.65,646.386 1522.21,664.61 1522.77,681.133 1523.33,649.597 1523.89,635.534 1524.45,640.001 1525.01,673.71 1525.57,674.295 1526.13,691.368 1526.69,693.923 1527.25,663.678 1527.81,661.793 1528.36,647.874 1528.92,681.922 1529.48,714.328 1530.04,700.299 1530.6,683.374 1531.16,735.341 1531.72,719.574 1532.28,716.611 1532.84,698.884 1533.4,680.743 1533.96,650.821 1534.52,638.198 1535.08,641.18 1535.63,627.259 1536.19,662.884 1536.75,679.238 1537.31,647.587 1537.87,651.536 1538.43,635.922 1538.99,639.508 1539.55,660.834 1540.11,677.462 1540.67,677.052 1541.23,675.33 1541.79,674.311 1542.35,676.29 1542.9,692.902 1543.46,679.082 1544.02,665.297 1544.58,616.005 1545.14,653.31 1545.7,626.497 1546.26,599.416 1546.82,622.036 1547.38,624.742 1547.94,675.9 1548.5,659.784 1549.06,645.906 1549.62,647.599 1550.18,679.621 1550.73,666.587 1551.29,683.983 1551.85,699.412 1552.41,682.796 1552.97,685.021 1553.53,668.386 1554.09,665.463 1554.65,668.269 1555.21,637.292 1555.77,606.407 1556.33,591.47 1556.89,565.804 1557.45,554.616 1558,544.505 1558.56,566.245 1559.12,573.407 1559.68,543.988 1560.24,551.242 1560.8,577.068 1561.36,615.498 1561.92,638.471 1562.48,687.303 1563.04,732.166 1563.6,746.558 1564.16,759.338 1564.72,774.765 1565.28,741.1 1565.83,753.762 1566.39,735.95 1566.95,749.347 1567.51,746.888 1568.07,744.19 1568.63,740.559 1569.19,737.813 1569.75,771.137 1570.31,750.669 1570.87,763.185 1571.43,777.745 1571.99,774.827 1572.55,786.505 1573.1,782.531 1573.66,793.329 1574.22,819.043 1574.78,776.578 1575.34,787.882 1575.9,798.093 1576.46,746.439 1577.02,742.828 1577.58,721.374 1578.14,721.575 1578.7,719.849 1579.26,717.065 1579.82,686.716 1580.37,719.449 1580.93,670.412 1581.49,704.696 1582.05,654.122 1582.61,689.169 1583.17,640.377 1583.73,578.903 1584.29,634.661 1584.85,621.326 1585.41,656.15 1585.97,660.441 1586.53,679.706 1587.09,665.774 1587.65,715.153 1588.2,684.099 1588.76,685.553 1589.32,671.341 1589.88,672.746 1590.44,673.435 1591,675.941 1591.56,694.083 1592.12,689.446 1592.68,721.243 1593.24,675.126 1593.8,678.207 1594.36,662.105 1594.92,681.212 1595.47,650.01 1596.03,700.818 1596.59,653.573 1597.15,638.901 1597.71,626.668 1598.27,643.258 1598.83,645.832 1599.39,613.465 1599.95,619.807 1600.51,638.141 1601.07,645.794 1601.63,647.399 1602.19,635.122 1602.74,638.789 1603.3,639.87 1603.86,622.747 1604.42,625.301 1604.98,659.679 1605.54,659.529 1606.1,658.822 1606.66,643.655 1607.22,629.722 1607.78,635.742 1608.34,623.204 1608.9,623.43 1609.46,627.136 1610.02,583.112 1610.57,554.497 1611.13,579.287 1611.69,600.123 1612.25,621.728 1612.81,656.181 1613.37,658.058 1613.93,679.608 1614.49,696.444 1615.05,679.218 1615.61,680.45 1616.17,682.793 1616.73,697.563 1617.29,714.538 1617.84,713.559 1618.4,712.094 1618.96,740.879 1619.52,767.852 1620.08,714.354 1620.64,693.582 1621.2,710.837 1621.76,706.222 1622.32,720.575 1622.88,736.518 1623.44,749.289 1624,750.924 1624.56,743.31 1625.11,727.186 1625.67,690.017 1626.23,688.704 1626.79,689.018 1627.35,721.644 1627.91,768.484 1628.47,767.054 1629.03,763.747 1629.59,789.758 1630.15,783.468 1630.71,777.961 1631.27,773.75 1631.83,752.241 1632.39,729.851 1632.94,742.788 1633.5,738.492 1634.06,749.559 1634.62,781.392 1635.18,698.575 1635.74,727.684 1636.3,742.23 1636.86,720.908 1637.42,720.052 1637.98,655.883 1638.54,689.985 1639.1,692.645 1639.66,711.007 1640.21,709.261 1640.77,691.477 1641.33,724.779 1641.89,719.859 1642.45,734.061 1643.01,715.488 1643.57,726.533 1644.13,726.02 1644.69,727.217 1645.25,755.11 1645.81,768.491 1646.37,744.406 1646.93,739.998 1647.48,741.807 1648.04,705.519 1648.6,736.597 1649.16,720.113 1649.72,738.401 1650.28,796.591 1650.84,787.895 1651.4,815.003 1651.96,774.536 1652.52,753.575 1653.08,684.217 1653.64,698.671 1654.2,700.714 1654.76,715.851 1655.31,713.078 1655.87,746.441 1656.43,744.046 1656.99,725.064 1657.55,725.133 1658.11,741.247 1658.67,719.959 1659.23,735.889 1659.79,716.885 1660.35,732.14 1660.91,714.915 1661.47,695.711 1662.03,681.167 1662.58,680.879 1663.14,681.738 1663.7,666.772 1664.26,716.898 1664.82,718.094 1665.38,700.732 1665.94,701.618 1666.5,686.744 1667.06,719.428 1667.62,735.215 1668.18,717.725 1668.74,715.814 1669.3,713.129 1669.85,726.009 1670.41,724.895 1670.97,656.687 1671.53,655.571 1672.09,673.213 1672.65,674.817 1673.21,675.797 1673.77,676.837 1674.33,678.831 1674.89,694.456 1675.45,725.59 1676.01,720.922 1676.57,705.724 1677.13,734.57 1677.68,746.734 1678.24,727.233 1678.8,771.466 1679.36,764.448 1679.92,745.067 1680.48,740.425 1681.04,703.79 1681.6,753.1 1682.16,751.245 1682.72,762.098 1683.28,758.975 1683.84,756.075 1684.4,750.755 1684.95,744.636 1685.51,739.283 1686.07,782.607 1686.63,759.176 1687.19,723.109 1687.75,654.089 1688.31,641.804 1688.87,645.393 1689.43,663.391 1689.99,694.932 1690.55,696.489 1691.11,683.594 1691.67,683.803 1692.23,701.592 1692.78,701.3 1693.34,685.239 1693.9,685.423 1694.46,656.534 1695.02,673.814 1695.58,655.799 1696.14,659.244 1696.7,659.931 1697.26,679.687 1697.82,681.357 1698.38,631.39 1698.94,636.6 1699.5,624.574 1700.05,596.693 1700.61,618.975 1701.17,638.364 1701.73,654.304 1702.29,638.402 1702.85,629.544 1703.41,595.968 1703.97,597.705 1704.53,618.628 1705.09,605.519 1705.65,644.585 1706.21,598.272 1706.77,568.488 1707.32,572.339 1707.88,597.412 1708.44,619.293 1709,590.398 1709.56,596.359 1710.12,585.902 1710.68,591.44 1711.24,645.524 1711.8,648.252 1712.36,653.088 1712.92,650.496 1713.48,647.751 1714.04,671.578 1714.6,721.894 1715.15,721.172 1715.71,686.649 1716.27,702.458 1716.83,718.612 1717.39,683.065 1717.95,696.524 1718.51,682.665 1719.07,700.764 1719.63,703.781 1720.19,704.167 1720.75,686.032 1721.31,718.464 1721.87,701.527 1722.42,682.957 1722.98,716.996 1723.54,700.259 1724.1,685.787 1724.66,672.332 1725.22,656.326 1725.78,673.164 1726.34,678.38 1726.9,660.219 1727.46,658.544 1728.02,675.497 1728.58,679.002 1729.14,695.526 1729.69,696.524 1730.25,680.084 1730.81,743.255 1731.37,758.749 1731.93,784.93 1732.49,783.024 1733.05,778.806 1733.61,760.571 1734.17,759.105 1734.73,703.735 1735.29,704.774 1735.85,709.225 1736.41,688.897 1736.97,705.927 1737.52,688.168 1738.08,685.174 1738.64,704.178 1739.2,659.09 1739.76,657.281 1740.32,677.469 1740.88,677.129 1741.44,709.756 1742,709.85 1742.56,726.439 1743.12,706.22 1743.68,705.777 1744.24,706.587 1744.79,689.03 1745.35,687.007 1745.91,669.737 1746.47,685.87 1747.03,649.717 1747.59,638.291 1748.15,659.195 1748.71,644.585 1749.27,680.638 1749.83,695.352 1750.39,744.963 1750.95,741.255 1751.51,768.002 1752.06,747.046 1752.62,729.897 1753.18,743.94 1753.74,695.438 1754.3,677.888 1754.86,694.674 1755.42,713.721 1755.98,692.898 1756.54,693.55 1757.1,662.495 1757.66,626.173 1758.22,628.209 1758.78,663.007 1759.34,651.007 1759.89,669.6 1760.45,656.107 1761.01,710.429 1761.57,711.75 1762.13,725.917 1762.69,741.407 1763.25,721.285 1763.81,750.401 1764.37,765.425 1764.93,790.84 1765.49,780.417 1766.05,772.809 1766.61,752.639 1767.16,751.661 1767.72,750.694 1768.28,774.867 1768.84,751.333 1769.4,748.433 1769.96,740.473 1770.52,740.588 1771.08,724.93 1771.64,722.983 1772.2,722.631 1772.76,719.804 1773.32,731.503 1773.88,758.938 1774.43,727.291 1774.99,727.034 1775.55,709.847 1776.11,725.715 1776.67,689.625 1777.23,671.393 1777.79,686.714 1778.35,687.069 1778.91,686.53 1779.47,684.636 1780.03,670.307 1780.59,654.845 1781.15,652.127 1781.71,673.689 1782.26,721.727 1782.82,717.974 1783.38,679.992 1783.94,661.426 1784.5,663.634 1785.06,645.596 1785.62,633 1786.18,634.787 1786.74,640.721 1787.3,643.896 1787.86,609.396 1788.42,645.511 1788.98,662.06 1789.53,710.177 1790.09,712.177 1790.65,688.597 1791.21,652.771 1791.77,668.821 1792.33,621.6 1792.89,639.105 1793.45,678.352 1794.01,629.981 1794.57,600.523 1795.13,607.919 1795.69,613.091 1796.25,565.233 1796.8,555.935 1797.36,577.355 1797.92,560.683 1798.48,584.263 1799.04,571.059 1799.6,543.956 1800.16,567.211 1800.72,591.869 1801.28,662.945 1801.84,648.514 1802.4,673.434 1802.96,655.974 1803.52,608.758 1804.08,582.973 1804.63,605.977 1805.19,624.635 1805.75,625.553 1806.31,615.459 1806.87,608.029 1807.43,597.498 1807.99,586.589 1808.55,556.816 1809.11,579.465 1809.67,598.964 1810.23,602.868 1810.79,607.312 1811.35,616.249 1811.9,603.878 1812.46,622.76 1813.02,638.133 1813.58,638.914 1814.14,609.378 1814.7,626.956 1815.26,614.838 1815.82,618.463 1816.38,606.061 1816.94,608.013 1817.5,614.815 1818.06,620.698 1818.62,621.463 1819.18,659.091 1819.73,678.267 1820.29,680.009 1820.85,727.646 1821.41,713.674 1821.97,679.695 1822.53,661.839 1823.09,712.529 1823.65,741.476 1824.21,738.367 1824.77,753.018 1825.33,748.514 1825.89,761.321 1826.45,726.984 1827,724.038 1827.56,707.58 1828.12,721.126 1828.68,736.471 1829.24,750.581 1829.8,762.088 1830.36,740.78 1830.92,757.24 1831.48,722.458 1832.04,740.752 1832.6,753.573 1833.16,781.965 1833.72,792.185 1834.27,816.31 1834.83,763.636 1835.39,778.089 1835.95,722.634 1836.51,724.109 1837.07,722.256 1837.63,685.278 1838.19,669.12 \"/>\n<path clip-path=\"url(#clip193)\" d=\"M720.247 692.507 L720.806 692.507 L721.365 692.507 L721.924 692.507 L722.484 692.507 L723.043 692.507 L723.602 692.507 L724.161 692.507 L724.721 692.507 L725.28 692.507 L725.839 692.507 L726.398 692.507 L726.958 692.507 L727.517 692.507 L728.076 692.507 L728.635 692.507 L729.195 692.507 L729.754 692.507 L730.313 692.507 L730.872 692.507 L731.432 692.507 L731.991 692.507 L732.55 692.507 L733.109 692.507 L733.669 692.507 L734.228 692.507 L734.787 692.507 L735.346 692.507 L735.906 692.507 L736.465 692.507 L737.024 692.507 L737.583 692.507 L738.143 692.507 L738.702 692.507 L739.261 692.507 L739.82 692.507 L740.38 692.507 L740.939 692.507 L741.498 692.507 L742.057 692.507 L742.617 692.507 L743.176 692.507 L743.735 692.507 L744.294 692.507 L744.854 692.507 L745.413 692.507 L745.972 692.507 L746.531 692.507 L747.091 692.507 L747.65 692.507 L748.209 692.507 L748.768 692.507 L749.328 692.507 L749.887 692.507 L750.446 692.507 L751.005 692.507 L751.565 692.507 L752.124 692.507 L752.683 692.507 L753.242 692.507 L753.802 692.507 L754.361 692.507 L754.92 692.507 L755.479 692.507 L756.039 692.507 L756.598 692.507 L757.157 692.507 L757.716 692.507 L758.276 692.507 L758.835 692.507 L759.394 692.507 L759.953 692.507 L760.513 692.507 L761.072 692.507 L761.631 692.507 L762.19 692.507 L762.75 692.507 L763.309 692.507 L763.868 692.507 L764.427 692.507 L764.987 692.507 L765.546 692.507 L766.105 692.507 L766.664 692.507 L767.224 692.507 L767.783 692.507 L768.342 692.507 L768.901 692.507 L769.461 692.507 L770.02 692.507 L770.579 692.507 L771.138 692.507 L771.698 692.507 L772.257 692.507 L772.816 692.507 L773.375 692.507 L773.935 692.507 L774.494 692.507 L775.053 692.507 L775.612 692.507 L776.172 692.507 L776.731 692.507 L777.29 692.507 L777.849 692.507 L778.409 692.507 L778.968 692.507 L779.527 692.507 L780.086 692.507 L780.646 692.507 L781.205 692.507 L781.764 692.507 L782.323 692.507 L782.883 692.507 L783.442 692.507 L784.001 692.507 L784.56 692.507 L785.12 692.507 L785.679 692.507 L786.238 692.507 L786.797 692.507 L787.357 692.507 L787.916 692.507 L788.475 692.507 L789.034 692.507 L789.594 692.507 L790.153 692.507 L790.712 692.507 L791.271 692.507 L791.831 692.507 L792.39 692.507 L792.949 692.507 L793.508 692.507 L794.068 692.507 L794.627 692.507 L795.186 692.507 L795.745 692.507 L796.305 692.507 L796.864 692.507 L797.423 692.507 L797.982 692.507 L798.542 692.507 L799.101 692.507 L799.66 692.507 L800.219 692.507 L800.779 692.507 L801.338 692.507 L801.897 692.507 L802.456 692.507 L803.016 692.507 L803.575 692.507 L804.134 692.507 L804.693 692.507 L805.253 692.507 L805.812 692.507 L806.371 692.507 L806.931 692.507 L807.49 692.507 L808.049 692.507 L808.608 692.507 L809.168 692.507 L809.727 692.507 L810.286 692.507 L810.845 692.507 L811.405 692.507 L811.964 692.507 L812.523 692.507 L813.082 692.507 L813.642 692.507 L814.201 692.507 L814.76 692.507 L815.319 692.507 L815.879 692.507 L816.438 692.507 L816.997 692.507 L817.556 692.507 L818.116 692.507 L818.675 692.507 L819.234 692.507 L819.793 692.507 L820.353 692.507 L820.912 692.507 L821.471 692.507 L822.03 692.507 L822.59 692.507 L823.149 692.507 L823.708 692.507 L824.267 692.507 L824.827 692.507 L825.386 692.507 L825.945 692.507 L826.504 692.507 L827.064 692.507 L827.623 692.507 L828.182 692.507 L828.741 692.507 L829.301 692.507 L829.86 692.507 L830.419 692.507 L830.978 692.507 L831.538 692.507 L832.097 692.507 L832.656 692.507 L833.215 692.507 L833.775 692.507 L834.334 692.507 L834.893 692.507 L835.452 692.507 L836.012 692.507 L836.571 692.507 L837.13 692.507 L837.689 692.507 L838.249 692.507 L838.808 692.507 L839.367 692.507 L839.926 692.507 L840.486 692.507 L841.045 692.507 L841.604 692.507 L842.163 692.507 L842.723 692.507 L843.282 692.507 L843.841 692.507 L844.4 692.507 L844.96 692.507 L845.519 692.507 L846.078 692.507 L846.637 692.507 L847.197 692.507 L847.756 692.507 L848.315 692.507 L848.874 692.507 L849.434 692.507 L849.993 692.507 L850.552 692.507 L851.111 692.507 L851.671 692.507 L852.23 692.507 L852.789 692.507 L853.348 692.507 L853.908 692.507 L854.467 692.507 L855.026 692.507 L855.585 692.507 L856.145 692.507 L856.704 692.507 L857.263 692.507 L857.822 692.507 L858.382 692.507 L858.941 692.507 L859.5 692.507 L860.059 692.507 L860.619 692.507 L861.178 692.507 L861.737 692.507 L862.296 692.507 L862.856 692.507 L863.415 692.507 L863.974 692.507 L864.533 692.507 L865.093 692.507 L865.652 692.507 L866.211 692.507 L866.77 692.507 L867.33 692.507 L867.889 692.507 L868.448 692.507 L869.007 692.507 L869.567 692.507 L870.126 692.507 L870.685 692.507 L871.244 692.507 L871.804 692.507 L872.363 692.507 L872.922 692.507 L873.481 692.507 L874.041 692.507 L874.6 692.507 L875.159 692.507 L875.718 692.507 L876.278 692.507 L876.837 692.507 L877.396 692.507 L877.955 692.507 L878.515 692.507 L879.074 692.507 L879.633 692.507 L880.192 692.507 L880.752 692.507 L881.311 692.507 L881.87 692.507 L882.429 692.507 L882.989 692.507 L883.548 692.507 L884.107 692.507 L884.666 692.507 L885.226 692.507 L885.785 692.507 L886.344 692.507 L886.903 692.507 L887.463 692.507 L888.022 692.507 L888.581 692.507 L889.14 692.507 L889.7 692.507 L890.259 692.507 L890.818 692.507 L891.377 692.507 L891.937 692.507 L892.496 692.507 L893.055 692.507 L893.614 692.507 L894.174 692.507 L894.733 692.507 L895.292 692.507 L895.851 692.507 L896.411 692.507 L896.97 692.507 L897.529 692.507 L898.088 692.507 L898.648 692.507 L899.207 692.507 L899.766 692.507 L900.325 692.507 L900.885 692.507 L901.444 692.507 L902.003 692.507 L902.562 692.507 L903.122 692.507 L903.681 692.507 L904.24 692.507 L904.799 692.507 L905.359 692.507 L905.918 692.507 L906.477 692.507 L907.036 692.507 L907.596 692.507 L908.155 692.507 L908.714 692.507 L909.273 692.507 L909.833 692.507 L910.392 692.507 L910.951 692.507 L911.51 692.507 L912.07 692.507 L912.629 692.507 L913.188 692.507 L913.747 692.507 L914.307 692.507 L914.866 692.507 L915.425 692.507 L915.984 692.507 L916.544 692.507 L917.103 692.507 L917.662 692.507 L918.221 692.507 L918.781 692.507 L919.34 692.507 L919.899 692.507 L920.458 692.507 L921.018 692.507 L921.577 692.507 L922.136 692.507 L922.695 692.507 L923.255 692.507 L923.814 692.507 L924.373 692.507 L924.932 692.507 L925.492 692.507 L926.051 692.507 L926.61 692.507 L927.169 692.507 L927.729 692.507 L928.288 692.507 L928.847 692.507 L929.406 692.507 L929.966 692.507 L930.525 692.507 L931.084 692.507 L931.644 692.507 L932.203 692.507 L932.762 692.507 L933.321 692.507 L933.881 692.507 L934.44 692.507 L934.999 692.507 L935.558 692.507 L936.118 692.507 L936.677 692.507 L937.236 692.507 L937.795 692.507 L938.355 692.507 L938.914 692.507 L939.473 692.507 L940.032 692.507 L940.592 692.507 L941.151 692.507 L941.71 692.507 L942.269 692.507 L942.829 692.507 L943.388 692.507 L943.947 692.507 L944.506 692.507 L945.066 692.507 L945.625 692.507 L946.184 692.507 L946.743 692.507 L947.303 692.507 L947.862 692.507 L948.421 692.507 L948.98 692.507 L949.54 692.507 L950.099 692.507 L950.658 692.507 L951.217 692.507 L951.777 692.507 L952.336 692.507 L952.895 692.507 L953.454 692.507 L954.014 692.507 L954.573 692.507 L955.132 692.507 L955.691 692.507 L956.251 692.507 L956.81 692.507 L957.369 692.507 L957.928 692.507 L958.488 692.507 L959.047 692.507 L959.606 692.507 L960.165 692.507 L960.725 692.507 L961.284 692.507 L961.843 692.507 L962.402 692.507 L962.962 692.507 L963.521 692.507 L964.08 692.507 L964.639 692.507 L965.199 692.507 L965.758 692.507 L966.317 692.507 L966.876 692.507 L967.436 692.507 L967.995 692.507 L968.554 692.507 L969.113 692.507 L969.673 692.507 L970.232 692.507 L970.791 692.507 L971.35 692.507 L971.91 692.507 L972.469 692.507 L973.028 692.507 L973.587 692.507 L974.147 692.507 L974.706 692.507 L975.265 692.507 L975.824 692.507 L976.384 692.507 L976.943 692.507 L977.502 692.507 L978.061 692.507 L978.621 692.507 L979.18 692.507 L979.739 692.507 L980.298 692.507 L980.858 692.507 L981.417 692.507 L981.976 692.507 L982.535 692.507 L983.095 692.507 L983.654 692.507 L984.213 692.507 L984.772 692.507 L985.332 692.507 L985.891 692.507 L986.45 692.507 L987.009 692.507 L987.569 692.507 L988.128 692.507 L988.687 692.507 L989.246 692.507 L989.806 692.507 L990.365 692.507 L990.924 692.507 L991.483 692.507 L992.043 692.507 L992.602 692.507 L993.161 692.507 L993.72 692.507 L994.28 692.507 L994.839 692.507 L995.398 692.507 L995.957 692.507 L996.517 692.507 L997.076 692.507 L997.635 692.507 L998.194 692.507 L998.754 692.507 L999.313 692.507 L999.872 692.507 L1000.43 692.507 L1000.99 692.507 L1001.55 692.507 L1002.11 692.507 L1002.67 692.507 L1003.23 692.507 L1003.79 692.507 L1004.35 692.507 L1004.91 692.507 L1005.46 692.507 L1006.02 692.507 L1006.58 692.507 L1007.14 692.507 L1007.7 692.507 L1008.26 692.507 L1008.82 692.507 L1009.38 692.507 L1009.94 692.507 L1010.5 692.507 L1011.06 692.507 L1011.62 692.507 L1012.18 692.507 L1012.73 692.507 L1013.29 692.507 L1013.85 692.507 L1014.41 692.507 L1014.97 692.507 L1015.53 692.507 L1016.09 692.507 L1016.65 692.507 L1017.21 692.507 L1017.77 692.507 L1018.33 692.507 L1018.89 692.507 L1019.45 692.507 L1020.01 692.507 L1020.56 692.507 L1021.12 692.507 L1021.68 692.507 L1022.24 692.507 L1022.8 692.507 L1023.36 692.507 L1023.92 692.507 L1024.48 692.507 L1025.04 692.507 L1025.6 692.507 L1026.16 692.507 L1026.72 692.507 L1027.28 692.507 L1027.83 692.507 L1028.39 692.507 L1028.95 692.507 L1029.51 692.507 L1030.07 692.507 L1030.63 692.507 L1031.19 692.507 L1031.75 692.507 L1032.31 692.507 L1032.87 692.507 L1033.43 692.507 L1033.99 692.507 L1034.55 692.507 L1035.1 692.507 L1035.66 692.507 L1036.22 692.507 L1036.78 692.507 L1037.34 692.507 L1037.9 692.507 L1038.46 692.507 L1039.02 692.507 L1039.58 692.507 L1040.14 692.507 L1040.7 692.507 L1041.26 692.507 L1041.82 692.507 L1042.38 692.507 L1042.93 692.507 L1043.49 692.507 L1044.05 692.507 L1044.61 692.507 L1045.17 692.507 L1045.73 692.507 L1046.29 692.507 L1046.85 692.507 L1047.41 692.507 L1047.97 692.507 L1048.53 692.507 L1049.09 692.507 L1049.65 692.507 L1050.2 692.507 L1050.76 692.507 L1051.32 692.507 L1051.88 692.507 L1052.44 692.507 L1053 692.507 L1053.56 692.507 L1054.12 692.507 L1054.68 692.507 L1055.24 692.507 L1055.8 692.507 L1056.36 692.507 L1056.92 692.507 L1057.48 692.507 L1058.03 692.507 L1058.59 692.507 L1059.15 692.507 L1059.71 692.507 L1060.27 692.507 L1060.83 692.507 L1061.39 692.507 L1061.95 692.507 L1062.51 692.507 L1063.07 692.507 L1063.63 692.507 L1064.19 692.507 L1064.75 692.507 L1065.3 692.507 L1065.86 692.507 L1066.42 692.507 L1066.98 692.507 L1067.54 692.507 L1068.1 692.507 L1068.66 692.507 L1069.22 692.507 L1069.78 692.507 L1070.34 692.507 L1070.9 692.507 L1071.46 692.507 L1072.02 692.507 L1072.57 692.507 L1073.13 692.507 L1073.69 692.507 L1074.25 692.507 L1074.81 692.507 L1075.37 692.507 L1075.93 692.507 L1076.49 692.507 L1077.05 692.507 L1077.61 692.507 L1078.17 692.507 L1078.73 692.507 L1079.29 692.507 L1079.85 692.507 L1080.4 692.507 L1080.96 692.507 L1081.52 692.507 L1082.08 692.507 L1082.64 692.507 L1083.2 692.507 L1083.76 692.507 L1084.32 692.507 L1084.88 692.507 L1085.44 692.507 L1086 692.507 L1086.56 692.507 L1087.12 692.507 L1087.67 692.507 L1088.23 692.507 L1088.79 692.507 L1089.35 692.507 L1089.91 692.507 L1090.47 692.507 L1091.03 692.507 L1091.59 692.507 L1092.15 692.507 L1092.71 692.507 L1093.27 692.507 L1093.83 692.507 L1094.39 692.507 L1094.94 692.507 L1095.5 692.507 L1096.06 692.507 L1096.62 692.507 L1097.18 692.507 L1097.74 692.507 L1098.3 692.507 L1098.86 692.507 L1099.42 692.507 L1099.98 692.507 L1100.54 692.507 L1101.1 692.507 L1101.66 692.507 L1102.22 692.507 L1102.77 692.507 L1103.33 692.507 L1103.89 692.507 L1104.45 692.507 L1105.01 692.507 L1105.57 692.507 L1106.13 692.507 L1106.69 692.507 L1107.25 692.507 L1107.81 692.507 L1108.37 692.507 L1108.93 692.507 L1109.49 692.507 L1110.04 692.507 L1110.6 692.507 L1111.16 692.507 L1111.72 692.507 L1112.28 692.507 L1112.84 692.507 L1113.4 692.507 L1113.96 692.507 L1114.52 692.507 L1115.08 692.507 L1115.64 692.507 L1116.2 692.507 L1116.76 692.507 L1117.31 692.507 L1117.87 692.507 L1118.43 692.507 L1118.99 692.507 L1119.55 692.507 L1120.11 692.507 L1120.67 692.507 L1121.23 692.507 L1121.79 692.507 L1122.35 692.507 L1122.91 692.507 L1123.47 692.507 L1124.03 692.507 L1124.59 692.507 L1125.14 692.507 L1125.7 692.507 L1126.26 692.507 L1126.82 692.507 L1127.38 692.507 L1127.94 692.507 L1128.5 692.507 L1129.06 692.507 L1129.62 692.507 L1130.18 692.507 L1130.74 692.507 L1131.3 692.507 L1131.86 692.507 L1132.41 692.507 L1132.97 692.507 L1133.53 692.507 L1134.09 692.507 L1134.65 692.507 L1135.21 692.507 L1135.77 692.507 L1136.33 692.507 L1136.89 692.507 L1137.45 692.507 L1138.01 692.507 L1138.57 692.507 L1139.13 692.507 L1139.68 692.507 L1140.24 692.507 L1140.8 692.507 L1141.36 692.507 L1141.92 692.507 L1142.48 692.507 L1143.04 692.507 L1143.6 692.507 L1144.16 692.507 L1144.72 692.507 L1145.28 692.507 L1145.84 692.507 L1146.4 692.507 L1146.96 692.507 L1147.51 692.507 L1148.07 692.507 L1148.63 692.507 L1149.19 692.507 L1149.75 692.507 L1150.31 692.507 L1150.87 692.507 L1151.43 692.507 L1151.99 692.507 L1152.55 692.507 L1153.11 692.507 L1153.67 692.507 L1154.23 692.507 L1154.78 692.507 L1155.34 692.507 L1155.9 692.507 L1156.46 692.507 L1157.02 692.507 L1157.58 692.507 L1158.14 692.507 L1158.7 692.507 L1159.26 692.507 L1159.82 692.507 L1160.38 692.507 L1160.94 692.507 L1161.5 692.507 L1162.05 692.507 L1162.61 692.507 L1163.17 692.507 L1163.73 692.507 L1164.29 692.507 L1164.85 692.507 L1165.41 692.507 L1165.97 692.507 L1166.53 692.507 L1167.09 692.507 L1167.65 692.507 L1168.21 692.507 L1168.77 692.507 L1169.33 692.507 L1169.88 692.507 L1170.44 692.507 L1171 692.507 L1171.56 692.507 L1172.12 692.507 L1172.68 692.507 L1173.24 692.507 L1173.8 692.507 L1174.36 692.507 L1174.92 692.507 L1175.48 692.507 L1176.04 692.507 L1176.6 692.507 L1177.15 692.507 L1177.71 692.507 L1178.27 692.507 L1178.83 692.507 L1179.39 692.507 L1179.95 692.507 L1180.51 692.507 L1181.07 692.507 L1181.63 692.507 L1182.19 692.507 L1182.75 692.507 L1183.31 692.507 L1183.87 692.507 L1184.43 692.507 L1184.98 692.507 L1185.54 692.507 L1186.1 692.507 L1186.66 692.507 L1187.22 692.507 L1187.78 692.507 L1188.34 692.507 L1188.9 692.507 L1189.46 692.507 L1190.02 692.507 L1190.58 692.507 L1191.14 692.507 L1191.7 692.507 L1192.25 692.507 L1192.81 692.507 L1193.37 692.507 L1193.93 692.507 L1194.49 692.507 L1195.05 692.507 L1195.61 692.507 L1196.17 692.507 L1196.73 692.507 L1197.29 692.507 L1197.85 692.507 L1198.41 692.507 L1198.97 692.507 L1199.52 692.507 L1200.08 692.507 L1200.64 692.507 L1201.2 692.507 L1201.76 692.507 L1202.32 692.507 L1202.88 692.507 L1203.44 692.507 L1204 692.507 L1204.56 692.507 L1205.12 692.507 L1205.68 692.507 L1206.24 692.507 L1206.8 692.507 L1207.35 692.507 L1207.91 692.507 L1208.47 692.507 L1209.03 692.507 L1209.59 692.507 L1210.15 692.507 L1210.71 692.507 L1211.27 692.507 L1211.83 692.507 L1212.39 692.507 L1212.95 692.507 L1213.51 692.507 L1214.07 692.507 L1214.62 692.507 L1215.18 692.507 L1215.74 692.507 L1216.3 692.507 L1216.86 692.507 L1217.42 692.507 L1217.98 692.507 L1218.54 692.507 L1219.1 692.507 L1219.66 692.507 L1220.22 692.507 L1220.78 692.507 L1221.34 692.507 L1221.89 692.507 L1222.45 692.507 L1223.01 692.507 L1223.57 692.507 L1224.13 692.507 L1224.69 692.507 L1225.25 692.507 L1225.81 692.507 L1226.37 692.507 L1226.93 692.507 L1227.49 692.507 L1228.05 692.507 L1228.61 692.507 L1229.17 692.507 L1229.72 692.507 L1230.28 692.507 L1230.84 692.507 L1231.4 692.507 L1231.96 692.507 L1232.52 692.507 L1233.08 692.507 L1233.64 692.507 L1234.2 692.507 L1234.76 692.507 L1235.32 692.507 L1235.88 692.507 L1236.44 692.507 L1236.99 692.507 L1237.55 692.507 L1238.11 692.507 L1238.67 692.507 L1239.23 692.507 L1239.79 692.507 L1240.35 692.507 L1240.91 692.507 L1241.47 692.507 L1242.03 692.507 L1242.59 692.507 L1243.15 692.507 L1243.71 692.507 L1244.26 692.507 L1244.82 692.507 L1245.38 692.507 L1245.94 692.507 L1246.5 692.507 L1247.06 692.507 L1247.62 692.507 L1248.18 692.507 L1248.74 692.507 L1249.3 692.507 L1249.86 692.507 L1250.42 692.507 L1250.98 692.507 L1251.54 692.507 L1252.09 692.507 L1252.65 692.507 L1253.21 692.507 L1253.77 692.507 L1254.33 692.507 L1254.89 692.507 L1255.45 692.507 L1256.01 692.507 L1256.57 692.507 L1257.13 692.507 L1257.69 692.507 L1258.25 692.507 L1258.81 692.507 L1259.36 692.507 L1259.92 692.507 L1260.48 692.507 L1261.04 692.507 L1261.6 692.507 L1262.16 692.507 L1262.72 692.507 L1263.28 692.507 L1263.84 692.507 L1264.4 692.507 L1264.96 692.507 L1265.52 692.507 L1266.08 692.507 L1266.63 692.507 L1267.19 692.507 L1267.75 692.507 L1268.31 692.507 L1268.87 692.507 L1269.43 692.507 L1269.99 692.507 L1270.55 692.507 L1271.11 692.507 L1271.67 692.507 L1272.23 692.507 L1272.79 692.507 L1273.35 692.507 L1273.91 692.507 L1274.46 692.507 L1275.02 692.507 L1275.58 692.507 L1276.14 692.507 L1276.7 692.507 L1277.26 692.507 L1277.82 692.507 L1278.38 692.507 L1278.94 692.507 L1279.5 692.507 L1280.06 692.507 L1280.62 692.507 L1281.18 692.507 L1281.73 692.507 L1282.29 692.507 L1282.85 692.507 L1283.41 692.507 L1283.97 692.507 L1284.53 692.507 L1285.09 692.507 L1285.65 692.507 L1286.21 692.507 L1286.77 692.507 L1287.33 692.507 L1287.89 692.507 L1288.45 692.507 L1289 692.507 L1289.56 692.507 L1290.12 692.507 L1290.68 692.507 L1291.24 692.507 L1291.8 692.507 L1292.36 692.507 L1292.92 692.507 L1293.48 692.507 L1294.04 692.507 L1294.6 692.507 L1295.16 692.507 L1295.72 692.507 L1296.28 692.507 L1296.83 692.507 L1297.39 692.507 L1297.95 692.507 L1298.51 692.507 L1299.07 692.507 L1299.63 692.507 L1300.19 692.507 L1300.75 692.507 L1301.31 692.507 L1301.87 692.507 L1302.43 692.507 L1302.99 692.507 L1303.55 692.507 L1304.1 692.507 L1304.66 692.507 L1305.22 692.507 L1305.78 692.507 L1306.34 692.507 L1306.9 692.507 L1307.46 692.507 L1308.02 692.507 L1308.58 692.507 L1309.14 692.507 L1309.7 692.507 L1310.26 692.507 L1310.82 692.507 L1311.38 692.507 L1311.93 692.507 L1312.49 692.507 L1313.05 692.507 L1313.61 692.507 L1314.17 692.507 L1314.73 692.507 L1315.29 692.507 L1315.85 692.507 L1316.41 692.507 L1316.97 692.507 L1317.53 692.507 L1318.09 692.507 L1318.65 692.507 L1319.2 692.507 L1319.76 692.507 L1320.32 692.507 L1320.88 692.507 L1321.44 692.507 L1322 692.507 L1322.56 692.507 L1323.12 692.507 L1323.68 692.507 L1324.24 692.507 L1324.8 692.507 L1325.36 692.507 L1325.92 692.507 L1326.47 692.507 L1327.03 692.507 L1327.59 692.507 L1328.15 692.507 L1328.71 692.507 L1329.27 692.507 L1329.83 692.507 L1330.39 692.507 L1330.95 692.507 L1331.51 692.507 L1332.07 692.507 L1332.63 692.507 L1333.19 692.507 L1333.75 692.507 L1334.3 692.507 L1334.86 692.507 L1335.42 692.507 L1335.98 692.507 L1336.54 692.507 L1337.1 692.507 L1337.66 692.507 L1338.22 692.507 L1338.78 692.507 L1339.34 692.507 L1339.9 692.507 L1340.46 692.507 L1341.02 692.507 L1341.57 692.507 L1342.13 692.507 L1342.69 692.507 L1343.25 692.507 L1343.81 692.507 L1344.37 692.507 L1344.93 692.507 L1345.49 692.507 L1346.05 692.507 L1346.61 692.507 L1347.17 692.507 L1347.73 692.507 L1348.29 692.507 L1348.84 692.507 L1349.4 692.507 L1349.96 692.507 L1350.52 692.507 L1351.08 692.507 L1351.64 692.507 L1352.2 692.507 L1352.76 692.507 L1353.32 692.507 L1353.88 692.507 L1354.44 692.507 L1355 692.507 L1355.56 692.507 L1356.12 692.507 L1356.67 692.507 L1357.23 692.507 L1357.79 692.507 L1358.35 692.507 L1358.91 692.507 L1359.47 692.507 L1360.03 692.507 L1360.59 692.507 L1361.15 692.507 L1361.71 692.507 L1362.27 692.507 L1362.83 692.507 L1363.39 692.507 L1363.94 692.507 L1364.5 692.507 L1365.06 692.507 L1365.62 692.507 L1366.18 692.507 L1366.74 692.507 L1367.3 692.507 L1367.86 692.507 L1368.42 692.507 L1368.98 692.507 L1369.54 692.507 L1370.1 692.507 L1370.66 692.507 L1371.21 692.507 L1371.77 692.507 L1372.33 692.507 L1372.89 692.507 L1373.45 692.507 L1374.01 692.507 L1374.57 692.507 L1375.13 692.507 L1375.69 692.507 L1376.25 692.507 L1376.81 692.507 L1377.37 692.507 L1377.93 692.507 L1378.49 692.507 L1379.04 692.507 L1379.6 692.507 L1380.16 692.507 L1380.72 692.507 L1381.28 692.507 L1381.84 692.507 L1382.4 692.507 L1382.96 692.507 L1383.52 692.507 L1384.08 692.507 L1384.64 692.507 L1385.2 692.507 L1385.76 692.507 L1386.31 692.507 L1386.87 692.507 L1387.43 692.507 L1387.99 692.507 L1388.55 692.507 L1389.11 692.507 L1389.67 692.507 L1390.23 692.507 L1390.79 692.507 L1391.35 692.507 L1391.91 692.507 L1392.47 692.507 L1393.03 692.507 L1393.58 692.507 L1394.14 692.507 L1394.7 692.507 L1395.26 692.507 L1395.82 692.507 L1396.38 692.507 L1396.94 692.507 L1397.5 692.507 L1398.06 692.507 L1398.62 692.507 L1399.18 692.507 L1399.74 692.507 L1400.3 692.507 L1400.86 692.507 L1401.41 692.507 L1401.97 692.507 L1402.53 692.507 L1403.09 692.507 L1403.65 692.507 L1404.21 692.507 L1404.77 692.507 L1405.33 692.507 L1405.89 692.507 L1406.45 692.507 L1407.01 692.507 L1407.57 692.507 L1408.13 692.507 L1408.68 692.507 L1409.24 692.507 L1409.8 692.507 L1410.36 692.507 L1410.92 692.507 L1411.48 692.507 L1412.04 692.507 L1412.6 692.507 L1413.16 692.507 L1413.72 692.507 L1414.28 692.507 L1414.84 692.507 L1415.4 692.507 L1415.95 692.507 L1416.51 692.507 L1417.07 692.507 L1417.63 692.507 L1418.19 692.507 L1418.75 692.507 L1419.31 692.507 L1419.87 692.507 L1420.43 692.507 L1420.99 692.507 L1421.55 692.507 L1422.11 692.507 L1422.67 692.507 L1423.23 692.507 L1423.78 692.507 L1424.34 692.507 L1424.9 692.507 L1425.46 692.507 L1426.02 692.507 L1426.58 692.507 L1427.14 692.507 L1427.7 692.507 L1428.26 692.507 L1428.82 692.507 L1429.38 692.507 L1429.94 692.507 L1430.5 692.507 L1431.05 692.507 L1431.61 692.507 L1432.17 692.507 L1432.73 692.507 L1433.29 692.507 L1433.85 692.507 L1434.41 692.507 L1434.97 692.507 L1435.53 692.507 L1436.09 692.507 L1436.65 692.507 L1437.21 692.507 L1437.77 692.507 L1438.33 692.507 L1438.88 692.507 L1439.44 692.507 L1440 692.507 L1440.56 692.507 L1441.12 692.507 L1441.68 692.507 L1442.24 692.507 L1442.8 692.507 L1443.36 692.507 L1443.92 692.507 L1444.48 692.507 L1445.04 692.507 L1445.6 692.507 L1446.15 692.507 L1446.71 692.507 L1447.27 692.507 L1447.83 692.507 L1448.39 692.507 L1448.95 692.507 L1449.51 692.507 L1450.07 692.507 L1450.63 692.507 L1451.19 692.507 L1451.75 692.507 L1452.31 692.507 L1452.87 692.507 L1453.42 692.507 L1453.98 692.507 L1454.54 692.507 L1455.1 692.507 L1455.66 692.507 L1456.22 692.507 L1456.78 692.507 L1457.34 692.507 L1457.9 692.507 L1458.46 692.507 L1459.02 692.507 L1459.58 692.507 L1460.14 692.507 L1460.7 692.507 L1461.25 692.507 L1461.81 692.507 L1462.37 692.507 L1462.93 692.507 L1463.49 692.507 L1464.05 692.507 L1464.61 692.507 L1465.17 692.507 L1465.73 692.507 L1466.29 692.507 L1466.85 692.507 L1467.41 692.507 L1467.97 692.507 L1468.52 692.507 L1469.08 692.507 L1469.64 692.507 L1470.2 692.507 L1470.76 692.507 L1471.32 692.507 L1471.88 692.507 L1472.44 692.507 L1473 692.507 L1473.56 692.507 L1474.12 692.507 L1474.68 692.507 L1475.24 692.507 L1475.79 692.507 L1476.35 692.507 L1476.91 692.507 L1477.47 692.507 L1478.03 692.507 L1478.59 692.507 L1479.15 692.507 L1479.71 692.507 L1480.27 692.507 L1480.83 692.507 L1481.39 692.507 L1481.95 692.507 L1482.51 692.507 L1483.07 692.507 L1483.62 692.507 L1484.18 692.507 L1484.74 692.507 L1485.3 692.507 L1485.86 692.507 L1486.42 692.507 L1486.98 692.507 L1487.54 692.507 L1488.1 692.507 L1488.66 692.507 L1489.22 692.507 L1489.78 692.507 L1490.34 692.507 L1490.89 692.507 L1491.45 692.507 L1492.01 692.507 L1492.57 692.507 L1493.13 692.507 L1493.69 692.507 L1494.25 692.507 L1494.81 692.507 L1495.37 692.507 L1495.93 692.507 L1496.49 692.507 L1497.05 692.507 L1497.61 692.507 L1498.16 692.507 L1498.72 692.507 L1499.28 692.507 L1499.84 692.507 L1500.4 692.507 L1500.96 692.507 L1501.52 692.507 L1502.08 692.507 L1502.64 692.507 L1503.2 692.507 L1503.76 692.507 L1504.32 692.507 L1504.88 692.507 L1505.44 692.507 L1505.99 692.507 L1506.55 692.507 L1507.11 692.507 L1507.67 692.507 L1508.23 692.507 L1508.79 692.507 L1509.35 692.507 L1509.91 692.507 L1510.47 692.507 L1511.03 692.507 L1511.59 692.507 L1512.15 692.507 L1512.71 692.507 L1513.26 692.507 L1513.82 692.507 L1514.38 692.507 L1514.94 692.507 L1515.5 692.507 L1516.06 692.507 L1516.62 692.507 L1517.18 692.507 L1517.74 692.507 L1518.3 692.507 L1518.86 692.507 L1519.42 692.507 L1519.98 692.507 L1520.53 692.507 L1521.09 692.507 L1521.65 692.507 L1522.21 692.507 L1522.77 692.507 L1523.33 692.507 L1523.89 692.507 L1524.45 692.507 L1525.01 692.507 L1525.57 692.507 L1526.13 692.507 L1526.69 692.507 L1527.25 692.507 L1527.81 692.507 L1528.36 692.507 L1528.92 692.507 L1529.48 692.507 L1530.04 692.507 L1530.6 692.507 L1531.16 692.507 L1531.72 692.507 L1532.28 692.507 L1532.84 692.507 L1533.4 692.507 L1533.96 692.507 L1534.52 692.507 L1535.08 692.507 L1535.63 692.507 L1536.19 692.507 L1536.75 692.507 L1537.31 692.507 L1537.87 692.507 L1538.43 692.507 L1538.99 692.507 L1539.55 692.507 L1540.11 692.507 L1540.67 692.507 L1541.23 692.507 L1541.79 692.507 L1542.35 692.507 L1542.9 692.507 L1543.46 692.507 L1544.02 692.507 L1544.58 692.507 L1545.14 692.507 L1545.7 692.507 L1546.26 692.507 L1546.82 692.507 L1547.38 692.507 L1547.94 692.507 L1548.5 692.507 L1549.06 692.507 L1549.62 692.507 L1550.18 692.507 L1550.73 692.507 L1551.29 692.507 L1551.85 692.507 L1552.41 692.507 L1552.97 692.507 L1553.53 692.507 L1554.09 692.507 L1554.65 692.507 L1555.21 692.507 L1555.77 692.507 L1556.33 692.507 L1556.89 692.507 L1557.45 692.507 L1558 692.507 L1558.56 692.507 L1559.12 692.507 L1559.68 692.507 L1560.24 692.507 L1560.8 692.507 L1561.36 692.507 L1561.92 692.507 L1562.48 692.507 L1563.04 692.507 L1563.6 692.507 L1564.16 692.507 L1564.72 692.507 L1565.28 692.507 L1565.83 692.507 L1566.39 692.507 L1566.95 692.507 L1567.51 692.507 L1568.07 692.507 L1568.63 692.507 L1569.19 692.507 L1569.75 692.507 L1570.31 692.507 L1570.87 692.507 L1571.43 692.507 L1571.99 692.507 L1572.55 692.507 L1573.1 692.507 L1573.66 692.507 L1574.22 692.507 L1574.78 692.507 L1575.34 692.507 L1575.9 692.507 L1576.46 692.507 L1577.02 692.507 L1577.58 692.507 L1578.14 692.507 L1578.7 692.507 L1579.26 692.507 L1579.82 692.507 L1580.37 692.507 L1580.93 692.507 L1581.49 692.507 L1582.05 692.507 L1582.61 692.507 L1583.17 692.507 L1583.73 692.507 L1584.29 692.507 L1584.85 692.507 L1585.41 692.507 L1585.97 692.507 L1586.53 692.507 L1587.09 692.507 L1587.65 692.507 L1588.2 692.507 L1588.76 692.507 L1589.32 692.507 L1589.88 692.507 L1590.44 692.507 L1591 692.507 L1591.56 692.507 L1592.12 692.507 L1592.68 692.507 L1593.24 692.507 L1593.8 692.507 L1594.36 692.507 L1594.92 692.507 L1595.47 692.507 L1596.03 692.507 L1596.59 692.507 L1597.15 692.507 L1597.71 692.507 L1598.27 692.507 L1598.83 692.507 L1599.39 692.507 L1599.95 692.507 L1600.51 692.507 L1601.07 692.507 L1601.63 692.507 L1602.19 692.507 L1602.74 692.507 L1603.3 692.507 L1603.86 692.507 L1604.42 692.507 L1604.98 692.507 L1605.54 692.507 L1606.1 692.507 L1606.66 692.507 L1607.22 692.507 L1607.78 692.507 L1608.34 692.507 L1608.9 692.507 L1609.46 692.507 L1610.02 692.507 L1610.57 692.507 L1611.13 692.507 L1611.69 692.507 L1612.25 692.507 L1612.81 692.507 L1613.37 692.507 L1613.93 692.507 L1614.49 692.507 L1615.05 692.507 L1615.61 692.507 L1616.17 692.507 L1616.73 692.507 L1617.29 692.507 L1617.84 692.507 L1618.4 692.507 L1618.96 692.507 L1619.52 692.507 L1620.08 692.507 L1620.64 692.507 L1621.2 692.507 L1621.76 692.507 L1622.32 692.507 L1622.88 692.507 L1623.44 692.507 L1624 692.507 L1624.56 692.507 L1625.11 692.507 L1625.67 692.507 L1626.23 692.507 L1626.79 692.507 L1627.35 692.507 L1627.91 692.507 L1628.47 692.507 L1629.03 692.507 L1629.59 692.507 L1630.15 692.507 L1630.71 692.507 L1631.27 692.507 L1631.83 692.507 L1632.39 692.507 L1632.94 692.507 L1633.5 692.507 L1634.06 692.507 L1634.62 692.507 L1635.18 692.507 L1635.74 692.507 L1636.3 692.507 L1636.86 692.507 L1637.42 692.507 L1637.98 692.507 L1638.54 692.507 L1639.1 692.507 L1639.66 692.507 L1640.21 692.507 L1640.77 692.507 L1641.33 692.507 L1641.89 692.507 L1642.45 692.507 L1643.01 692.507 L1643.57 692.507 L1644.13 692.507 L1644.69 692.507 L1645.25 692.507 L1645.81 692.507 L1646.37 692.507 L1646.93 692.507 L1647.48 692.507 L1648.04 692.507 L1648.6 692.507 L1649.16 692.507 L1649.72 692.507 L1650.28 692.507 L1650.84 692.507 L1651.4 692.507 L1651.96 692.507 L1652.52 692.507 L1653.08 692.507 L1653.64 692.507 L1654.2 692.507 L1654.76 692.507 L1655.31 692.507 L1655.87 692.507 L1656.43 692.507 L1656.99 692.507 L1657.55 692.507 L1658.11 692.507 L1658.67 692.507 L1659.23 692.507 L1659.79 692.507 L1660.35 692.507 L1660.91 692.507 L1661.47 692.507 L1662.03 692.507 L1662.58 692.507 L1663.14 692.507 L1663.7 692.507 L1664.26 692.507 L1664.82 692.507 L1665.38 692.507 L1665.94 692.507 L1666.5 692.507 L1667.06 692.507 L1667.62 692.507 L1668.18 692.507 L1668.74 692.507 L1669.3 692.507 L1669.85 692.507 L1670.41 692.507 L1670.97 692.507 L1671.53 692.507 L1672.09 692.507 L1672.65 692.507 L1673.21 692.507 L1673.77 692.507 L1674.33 692.507 L1674.89 692.507 L1675.45 692.507 L1676.01 692.507 L1676.57 692.507 L1677.13 692.507 L1677.68 692.507 L1678.24 692.507 L1678.8 692.507 L1679.36 692.507 L1679.92 692.507 L1680.48 692.507 L1681.04 692.507 L1681.6 692.507 L1682.16 692.507 L1682.72 692.507 L1683.28 692.507 L1683.84 692.507 L1684.4 692.507 L1684.95 692.507 L1685.51 692.507 L1686.07 692.507 L1686.63 692.507 L1687.19 692.507 L1687.75 692.507 L1688.31 692.507 L1688.87 692.507 L1689.43 692.507 L1689.99 692.507 L1690.55 692.507 L1691.11 692.507 L1691.67 692.507 L1692.23 692.507 L1692.78 692.507 L1693.34 692.507 L1693.9 692.507 L1694.46 692.507 L1695.02 692.507 L1695.58 692.507 L1696.14 692.507 L1696.7 692.507 L1697.26 692.507 L1697.82 692.507 L1698.38 692.507 L1698.94 692.507 L1699.5 692.507 L1700.05 692.507 L1700.61 692.507 L1701.17 692.507 L1701.73 692.507 L1702.29 692.507 L1702.85 692.507 L1703.41 692.507 L1703.97 692.507 L1704.53 692.507 L1705.09 692.507 L1705.65 692.507 L1706.21 692.507 L1706.77 692.507 L1707.32 692.507 L1707.88 692.507 L1708.44 692.507 L1709 692.507 L1709.56 692.507 L1710.12 692.507 L1710.68 692.507 L1711.24 692.507 L1711.8 692.507 L1712.36 692.507 L1712.92 692.507 L1713.48 692.507 L1714.04 692.507 L1714.6 692.507 L1715.15 692.507 L1715.71 692.507 L1716.27 692.507 L1716.83 692.507 L1717.39 692.507 L1717.95 692.507 L1718.51 692.507 L1719.07 692.507 L1719.63 692.507 L1720.19 692.507 L1720.75 692.507 L1721.31 692.507 L1721.87 692.507 L1722.42 692.507 L1722.98 692.507 L1723.54 692.507 L1724.1 692.507 L1724.66 692.507 L1725.22 692.507 L1725.78 692.507 L1726.34 692.507 L1726.9 692.507 L1727.46 692.507 L1728.02 692.507 L1728.58 692.507 L1729.14 692.507 L1729.69 692.507 L1730.25 692.507 L1730.81 692.507 L1731.37 692.507 L1731.93 692.507 L1732.49 692.507 L1733.05 692.507 L1733.61 692.507 L1734.17 692.507 L1734.73 692.507 L1735.29 692.507 L1735.85 692.507 L1736.41 692.507 L1736.97 692.507 L1737.52 692.507 L1738.08 692.507 L1738.64 692.507 L1739.2 692.507 L1739.76 692.507 L1740.32 692.507 L1740.88 692.507 L1741.44 692.507 L1742 692.507 L1742.56 692.507 L1743.12 692.507 L1743.68 692.507 L1744.24 692.507 L1744.79 692.507 L1745.35 692.507 L1745.91 692.507 L1746.47 692.507 L1747.03 692.507 L1747.59 692.507 L1748.15 692.507 L1748.71 692.507 L1749.27 692.507 L1749.83 692.507 L1750.39 692.507 L1750.95 692.507 L1751.51 692.507 L1752.06 692.507 L1752.62 692.507 L1753.18 692.507 L1753.74 692.507 L1754.3 692.507 L1754.86 692.507 L1755.42 692.507 L1755.98 692.507 L1756.54 692.507 L1757.1 692.507 L1757.66 692.507 L1758.22 692.507 L1758.78 692.507 L1759.34 692.507 L1759.89 692.507 L1760.45 692.507 L1761.01 692.507 L1761.57 692.507 L1762.13 692.507 L1762.69 692.507 L1763.25 692.507 L1763.81 692.507 L1764.37 692.507 L1764.93 692.507 L1765.49 692.507 L1766.05 692.507 L1766.61 692.507 L1767.16 692.507 L1767.72 692.507 L1768.28 692.507 L1768.84 692.507 L1769.4 692.507 L1769.96 692.507 L1770.52 692.507 L1771.08 692.507 L1771.64 692.507 L1772.2 692.507 L1772.76 692.507 L1773.32 692.507 L1773.88 692.507 L1774.43 692.507 L1774.99 692.507 L1775.55 692.507 L1776.11 692.507 L1776.67 692.507 L1777.23 692.507 L1777.79 692.507 L1778.35 692.507 L1778.91 692.507 L1779.47 692.507 L1780.03 692.507 L1780.59 692.507 L1781.15 692.507 L1781.71 692.507 L1782.26 692.507 L1782.82 692.507 L1783.38 692.507 L1783.94 692.507 L1784.5 692.507 L1785.06 692.507 L1785.62 692.507 L1786.18 692.507 L1786.74 692.507 L1787.3 692.507 L1787.86 692.507 L1788.42 692.507 L1788.98 692.507 L1789.53 692.507 L1790.09 692.507 L1790.65 692.507 L1791.21 692.507 L1791.77 692.507 L1792.33 692.507 L1792.89 692.507 L1793.45 692.507 L1794.01 692.507 L1794.57 692.507 L1795.13 692.507 L1795.69 692.507 L1796.25 692.507 L1796.8 692.507 L1797.36 692.507 L1797.92 692.507 L1798.48 692.507 L1799.04 692.507 L1799.6 692.507 L1800.16 692.507 L1800.72 692.507 L1801.28 692.507 L1801.84 692.507 L1802.4 692.507 L1802.96 692.507 L1803.52 692.507 L1804.08 692.507 L1804.63 692.507 L1805.19 692.507 L1805.75 692.507 L1806.31 692.507 L1806.87 692.507 L1807.43 692.507 L1807.99 692.507 L1808.55 692.507 L1809.11 692.507 L1809.67 692.507 L1810.23 692.507 L1810.79 692.507 L1811.35 692.507 L1811.9 692.507 L1812.46 692.507 L1813.02 692.507 L1813.58 692.507 L1814.14 692.507 L1814.7 692.507 L1815.26 692.507 L1815.82 692.507 L1816.38 692.507 L1816.94 692.507 L1817.5 692.507 L1818.06 692.507 L1818.62 692.507 L1819.18 692.507 L1819.73 692.507 L1820.29 692.507 L1820.85 692.507 L1821.41 692.507 L1821.97 692.507 L1822.53 692.507 L1823.09 692.507 L1823.65 692.507 L1824.21 692.507 L1824.77 692.507 L1825.33 692.507 L1825.89 692.507 L1826.45 692.507 L1827 692.507 L1827.56 692.507 L1828.12 692.507 L1828.68 692.507 L1829.24 692.507 L1829.8 692.507 L1830.36 692.507 L1830.92 692.507 L1831.48 692.507 L1832.04 692.507 L1832.6 692.507 L1833.16 692.507 L1833.72 692.507 L1834.27 692.507 L1834.83 692.507 L1835.39 692.507 L1835.95 692.507 L1836.51 692.507 L1837.07 692.507 L1837.63 692.507 L1838.19 692.507 L1838.19 681.742 L1837.63 681.742 L1837.07 681.742 L1836.51 681.742 L1835.95 681.742 L1835.39 681.742 L1834.83 681.742 L1834.27 681.742 L1833.72 681.742 L1833.16 681.742 L1832.6 681.742 L1832.04 681.742 L1831.48 681.742 L1830.92 681.742 L1830.36 681.742 L1829.8 681.742 L1829.24 681.742 L1828.68 681.742 L1828.12 681.742 L1827.56 681.742 L1827 681.742 L1826.45 681.742 L1825.89 681.742 L1825.33 681.742 L1824.77 681.742 L1824.21 681.742 L1823.65 681.742 L1823.09 681.742 L1822.53 681.742 L1821.97 681.742 L1821.41 681.742 L1820.85 681.742 L1820.29 681.742 L1819.73 681.742 L1819.18 681.742 L1818.62 681.742 L1818.06 681.742 L1817.5 681.742 L1816.94 681.742 L1816.38 681.742 L1815.82 681.742 L1815.26 681.742 L1814.7 681.742 L1814.14 681.742 L1813.58 681.742 L1813.02 681.742 L1812.46 681.742 L1811.9 681.742 L1811.35 681.742 L1810.79 681.742 L1810.23 681.742 L1809.67 681.742 L1809.11 681.742 L1808.55 681.742 L1807.99 681.742 L1807.43 681.742 L1806.87 681.742 L1806.31 681.742 L1805.75 681.742 L1805.19 681.742 L1804.63 681.742 L1804.08 681.742 L1803.52 681.742 L1802.96 681.742 L1802.4 681.742 L1801.84 681.742 L1801.28 681.742 L1800.72 681.742 L1800.16 681.742 L1799.6 681.742 L1799.04 681.742 L1798.48 681.742 L1797.92 681.742 L1797.36 681.742 L1796.8 681.742 L1796.25 681.742 L1795.69 681.742 L1795.13 681.742 L1794.57 681.742 L1794.01 681.742 L1793.45 681.742 L1792.89 681.742 L1792.33 681.742 L1791.77 681.742 L1791.21 681.742 L1790.65 681.742 L1790.09 681.742 L1789.53 681.742 L1788.98 681.742 L1788.42 681.742 L1787.86 681.742 L1787.3 681.742 L1786.74 681.742 L1786.18 681.742 L1785.62 681.742 L1785.06 681.742 L1784.5 681.742 L1783.94 681.742 L1783.38 681.742 L1782.82 681.742 L1782.26 681.742 L1781.71 681.742 L1781.15 681.742 L1780.59 681.742 L1780.03 681.742 L1779.47 681.742 L1778.91 681.742 L1778.35 681.742 L1777.79 681.742 L1777.23 681.742 L1776.67 681.742 L1776.11 681.742 L1775.55 681.742 L1774.99 681.742 L1774.43 681.742 L1773.88 681.742 L1773.32 681.742 L1772.76 681.742 L1772.2 681.742 L1771.64 681.742 L1771.08 681.742 L1770.52 681.742 L1769.96 681.742 L1769.4 681.742 L1768.84 681.742 L1768.28 681.742 L1767.72 681.742 L1767.16 681.742 L1766.61 681.742 L1766.05 681.742 L1765.49 681.742 L1764.93 681.742 L1764.37 681.742 L1763.81 681.742 L1763.25 681.742 L1762.69 681.742 L1762.13 681.742 L1761.57 681.742 L1761.01 681.742 L1760.45 681.742 L1759.89 681.742 L1759.34 681.742 L1758.78 681.742 L1758.22 681.742 L1757.66 681.742 L1757.1 681.742 L1756.54 681.742 L1755.98 681.742 L1755.42 681.742 L1754.86 681.742 L1754.3 681.742 L1753.74 681.742 L1753.18 681.742 L1752.62 681.742 L1752.06 681.742 L1751.51 681.742 L1750.95 681.742 L1750.39 681.742 L1749.83 681.742 L1749.27 681.742 L1748.71 681.742 L1748.15 681.742 L1747.59 681.742 L1747.03 681.742 L1746.47 681.742 L1745.91 681.742 L1745.35 681.742 L1744.79 681.742 L1744.24 681.742 L1743.68 681.742 L1743.12 681.742 L1742.56 681.742 L1742 681.742 L1741.44 681.742 L1740.88 681.742 L1740.32 681.742 L1739.76 681.742 L1739.2 681.742 L1738.64 681.742 L1738.08 681.742 L1737.52 681.742 L1736.97 681.742 L1736.41 681.742 L1735.85 681.742 L1735.29 681.742 L1734.73 681.742 L1734.17 681.742 L1733.61 681.742 L1733.05 681.742 L1732.49 681.742 L1731.93 681.742 L1731.37 681.742 L1730.81 681.742 L1730.25 681.742 L1729.69 681.742 L1729.14 681.742 L1728.58 681.742 L1728.02 681.742 L1727.46 681.742 L1726.9 681.742 L1726.34 681.742 L1725.78 681.742 L1725.22 681.742 L1724.66 681.742 L1724.1 681.742 L1723.54 681.742 L1722.98 681.742 L1722.42 681.742 L1721.87 681.742 L1721.31 681.742 L1720.75 681.742 L1720.19 681.742 L1719.63 681.742 L1719.07 681.742 L1718.51 681.742 L1717.95 681.742 L1717.39 681.742 L1716.83 681.742 L1716.27 681.742 L1715.71 681.742 L1715.15 681.742 L1714.6 681.742 L1714.04 681.742 L1713.48 681.742 L1712.92 681.742 L1712.36 681.742 L1711.8 681.742 L1711.24 681.742 L1710.68 681.742 L1710.12 681.742 L1709.56 681.742 L1709 681.742 L1708.44 681.742 L1707.88 681.742 L1707.32 681.742 L1706.77 681.742 L1706.21 681.742 L1705.65 681.742 L1705.09 681.742 L1704.53 681.742 L1703.97 681.742 L1703.41 681.742 L1702.85 681.742 L1702.29 681.742 L1701.73 681.742 L1701.17 681.742 L1700.61 681.742 L1700.05 681.742 L1699.5 681.742 L1698.94 681.742 L1698.38 681.742 L1697.82 681.742 L1697.26 681.742 L1696.7 681.742 L1696.14 681.742 L1695.58 681.742 L1695.02 681.742 L1694.46 681.742 L1693.9 681.742 L1693.34 681.742 L1692.78 681.742 L1692.23 681.742 L1691.67 681.742 L1691.11 681.742 L1690.55 681.742 L1689.99 681.742 L1689.43 681.742 L1688.87 681.742 L1688.31 681.742 L1687.75 681.742 L1687.19 681.742 L1686.63 681.742 L1686.07 681.742 L1685.51 681.742 L1684.95 681.742 L1684.4 681.742 L1683.84 681.742 L1683.28 681.742 L1682.72 681.742 L1682.16 681.742 L1681.6 681.742 L1681.04 681.742 L1680.48 681.742 L1679.92 681.742 L1679.36 681.742 L1678.8 681.742 L1678.24 681.742 L1677.68 681.742 L1677.13 681.742 L1676.57 681.742 L1676.01 681.742 L1675.45 681.742 L1674.89 681.742 L1674.33 681.742 L1673.77 681.742 L1673.21 681.742 L1672.65 681.742 L1672.09 681.742 L1671.53 681.742 L1670.97 681.742 L1670.41 681.742 L1669.85 681.742 L1669.3 681.742 L1668.74 681.742 L1668.18 681.742 L1667.62 681.742 L1667.06 681.742 L1666.5 681.742 L1665.94 681.742 L1665.38 681.742 L1664.82 681.742 L1664.26 681.742 L1663.7 681.742 L1663.14 681.742 L1662.58 681.742 L1662.03 681.742 L1661.47 681.742 L1660.91 681.742 L1660.35 681.742 L1659.79 681.742 L1659.23 681.742 L1658.67 681.742 L1658.11 681.742 L1657.55 681.742 L1656.99 681.742 L1656.43 681.742 L1655.87 681.742 L1655.31 681.742 L1654.76 681.742 L1654.2 681.742 L1653.64 681.742 L1653.08 681.742 L1652.52 681.742 L1651.96 681.742 L1651.4 681.742 L1650.84 681.742 L1650.28 681.742 L1649.72 681.742 L1649.16 681.742 L1648.6 681.742 L1648.04 681.742 L1647.48 681.742 L1646.93 681.742 L1646.37 681.742 L1645.81 681.742 L1645.25 681.742 L1644.69 681.742 L1644.13 681.742 L1643.57 681.742 L1643.01 681.742 L1642.45 681.742 L1641.89 681.742 L1641.33 681.742 L1640.77 681.742 L1640.21 681.742 L1639.66 681.742 L1639.1 681.742 L1638.54 681.742 L1637.98 681.742 L1637.42 681.742 L1636.86 681.742 L1636.3 681.742 L1635.74 681.742 L1635.18 681.742 L1634.62 681.742 L1634.06 681.742 L1633.5 681.742 L1632.94 681.742 L1632.39 681.742 L1631.83 681.742 L1631.27 681.742 L1630.71 681.742 L1630.15 681.742 L1629.59 681.742 L1629.03 681.742 L1628.47 681.742 L1627.91 681.742 L1627.35 681.742 L1626.79 681.742 L1626.23 681.742 L1625.67 681.742 L1625.11 681.742 L1624.56 681.742 L1624 681.742 L1623.44 681.742 L1622.88 681.742 L1622.32 681.742 L1621.76 681.742 L1621.2 681.742 L1620.64 681.742 L1620.08 681.742 L1619.52 681.742 L1618.96 681.742 L1618.4 681.742 L1617.84 681.742 L1617.29 681.742 L1616.73 681.742 L1616.17 681.742 L1615.61 681.742 L1615.05 681.742 L1614.49 681.742 L1613.93 681.742 L1613.37 681.742 L1612.81 681.742 L1612.25 681.742 L1611.69 681.742 L1611.13 681.742 L1610.57 681.742 L1610.02 681.742 L1609.46 681.742 L1608.9 681.742 L1608.34 681.742 L1607.78 681.742 L1607.22 681.742 L1606.66 681.742 L1606.1 681.742 L1605.54 681.742 L1604.98 681.742 L1604.42 681.742 L1603.86 681.742 L1603.3 681.742 L1602.74 681.742 L1602.19 681.742 L1601.63 681.742 L1601.07 681.742 L1600.51 681.742 L1599.95 681.742 L1599.39 681.742 L1598.83 681.742 L1598.27 681.742 L1597.71 681.742 L1597.15 681.742 L1596.59 681.742 L1596.03 681.742 L1595.47 681.742 L1594.92 681.742 L1594.36 681.742 L1593.8 681.742 L1593.24 681.742 L1592.68 681.742 L1592.12 681.742 L1591.56 681.742 L1591 681.742 L1590.44 681.742 L1589.88 681.742 L1589.32 681.742 L1588.76 681.742 L1588.2 681.742 L1587.65 681.742 L1587.09 681.742 L1586.53 681.742 L1585.97 681.742 L1585.41 681.742 L1584.85 681.742 L1584.29 681.742 L1583.73 681.742 L1583.17 681.742 L1582.61 681.742 L1582.05 681.742 L1581.49 681.742 L1580.93 681.742 L1580.37 681.742 L1579.82 681.742 L1579.26 681.742 L1578.7 681.742 L1578.14 681.742 L1577.58 681.742 L1577.02 681.742 L1576.46 681.742 L1575.9 681.742 L1575.34 681.742 L1574.78 681.742 L1574.22 681.742 L1573.66 681.742 L1573.1 681.742 L1572.55 681.742 L1571.99 681.742 L1571.43 681.742 L1570.87 681.742 L1570.31 681.742 L1569.75 681.742 L1569.19 681.742 L1568.63 681.742 L1568.07 681.742 L1567.51 681.742 L1566.95 681.742 L1566.39 681.742 L1565.83 681.742 L1565.28 681.742 L1564.72 681.742 L1564.16 681.742 L1563.6 681.742 L1563.04 681.742 L1562.48 681.742 L1561.92 681.742 L1561.36 681.742 L1560.8 681.742 L1560.24 681.742 L1559.68 681.742 L1559.12 681.742 L1558.56 681.742 L1558 681.742 L1557.45 681.742 L1556.89 681.742 L1556.33 681.742 L1555.77 681.742 L1555.21 681.742 L1554.65 681.742 L1554.09 681.742 L1553.53 681.742 L1552.97 681.742 L1552.41 681.742 L1551.85 681.742 L1551.29 681.742 L1550.73 681.742 L1550.18 681.742 L1549.62 681.742 L1549.06 681.742 L1548.5 681.742 L1547.94 681.742 L1547.38 681.742 L1546.82 681.742 L1546.26 681.742 L1545.7 681.742 L1545.14 681.742 L1544.58 681.742 L1544.02 681.742 L1543.46 681.742 L1542.9 681.742 L1542.35 681.742 L1541.79 681.742 L1541.23 681.742 L1540.67 681.742 L1540.11 681.742 L1539.55 681.742 L1538.99 681.742 L1538.43 681.742 L1537.87 681.742 L1537.31 681.742 L1536.75 681.742 L1536.19 681.742 L1535.63 681.742 L1535.08 681.742 L1534.52 681.742 L1533.96 681.742 L1533.4 681.742 L1532.84 681.742 L1532.28 681.742 L1531.72 681.742 L1531.16 681.742 L1530.6 681.742 L1530.04 681.742 L1529.48 681.742 L1528.92 681.742 L1528.36 681.742 L1527.81 681.742 L1527.25 681.742 L1526.69 681.742 L1526.13 681.742 L1525.57 681.742 L1525.01 681.742 L1524.45 681.742 L1523.89 681.742 L1523.33 681.742 L1522.77 681.742 L1522.21 681.742 L1521.65 681.742 L1521.09 681.742 L1520.53 681.742 L1519.98 681.742 L1519.42 681.742 L1518.86 681.742 L1518.3 681.742 L1517.74 681.742 L1517.18 681.742 L1516.62 681.742 L1516.06 681.742 L1515.5 681.742 L1514.94 681.742 L1514.38 681.742 L1513.82 681.742 L1513.26 681.742 L1512.71 681.742 L1512.15 681.742 L1511.59 681.742 L1511.03 681.742 L1510.47 681.742 L1509.91 681.742 L1509.35 681.742 L1508.79 681.742 L1508.23 681.742 L1507.67 681.742 L1507.11 681.742 L1506.55 681.742 L1505.99 681.742 L1505.44 681.742 L1504.88 681.742 L1504.32 681.742 L1503.76 681.742 L1503.2 681.742 L1502.64 681.742 L1502.08 681.742 L1501.52 681.742 L1500.96 681.742 L1500.4 681.742 L1499.84 681.742 L1499.28 681.742 L1498.72 681.742 L1498.16 681.742 L1497.61 681.742 L1497.05 681.742 L1496.49 681.742 L1495.93 681.742 L1495.37 681.742 L1494.81 681.742 L1494.25 681.742 L1493.69 681.742 L1493.13 681.742 L1492.57 681.742 L1492.01 681.742 L1491.45 681.742 L1490.89 681.742 L1490.34 681.742 L1489.78 681.742 L1489.22 681.742 L1488.66 681.742 L1488.1 681.742 L1487.54 681.742 L1486.98 681.742 L1486.42 681.742 L1485.86 681.742 L1485.3 681.742 L1484.74 681.742 L1484.18 681.742 L1483.62 681.742 L1483.07 681.742 L1482.51 681.742 L1481.95 681.742 L1481.39 681.742 L1480.83 681.742 L1480.27 681.742 L1479.71 681.742 L1479.15 681.742 L1478.59 681.742 L1478.03 681.742 L1477.47 681.742 L1476.91 681.742 L1476.35 681.742 L1475.79 681.742 L1475.24 681.742 L1474.68 681.742 L1474.12 681.742 L1473.56 681.742 L1473 681.742 L1472.44 681.742 L1471.88 681.742 L1471.32 681.742 L1470.76 681.742 L1470.2 681.742 L1469.64 681.742 L1469.08 681.742 L1468.52 681.742 L1467.97 681.742 L1467.41 681.742 L1466.85 681.742 L1466.29 681.742 L1465.73 681.742 L1465.17 681.742 L1464.61 681.742 L1464.05 681.742 L1463.49 681.742 L1462.93 681.742 L1462.37 681.742 L1461.81 681.742 L1461.25 681.742 L1460.7 681.742 L1460.14 681.742 L1459.58 681.742 L1459.02 681.742 L1458.46 681.742 L1457.9 681.742 L1457.34 681.742 L1456.78 681.742 L1456.22 681.742 L1455.66 681.742 L1455.1 681.742 L1454.54 681.742 L1453.98 681.742 L1453.42 681.742 L1452.87 681.742 L1452.31 681.742 L1451.75 681.742 L1451.19 681.742 L1450.63 681.742 L1450.07 681.742 L1449.51 681.742 L1448.95 681.742 L1448.39 681.742 L1447.83 681.742 L1447.27 681.742 L1446.71 681.742 L1446.15 681.742 L1445.6 681.742 L1445.04 681.742 L1444.48 681.742 L1443.92 681.742 L1443.36 681.742 L1442.8 681.742 L1442.24 681.742 L1441.68 681.742 L1441.12 681.742 L1440.56 681.742 L1440 681.742 L1439.44 681.742 L1438.88 681.742 L1438.33 681.742 L1437.77 681.742 L1437.21 681.742 L1436.65 681.742 L1436.09 681.742 L1435.53 681.742 L1434.97 681.742 L1434.41 681.742 L1433.85 681.742 L1433.29 681.742 L1432.73 681.742 L1432.17 681.742 L1431.61 681.742 L1431.05 681.742 L1430.5 681.742 L1429.94 681.742 L1429.38 681.742 L1428.82 681.742 L1428.26 681.742 L1427.7 681.742 L1427.14 681.742 L1426.58 681.742 L1426.02 681.742 L1425.46 681.742 L1424.9 681.742 L1424.34 681.742 L1423.78 681.742 L1423.23 681.742 L1422.67 681.742 L1422.11 681.742 L1421.55 681.742 L1420.99 681.742 L1420.43 681.742 L1419.87 681.742 L1419.31 681.742 L1418.75 681.742 L1418.19 681.742 L1417.63 681.742 L1417.07 681.742 L1416.51 681.742 L1415.95 681.742 L1415.4 681.742 L1414.84 681.742 L1414.28 681.742 L1413.72 681.742 L1413.16 681.742 L1412.6 681.742 L1412.04 681.742 L1411.48 681.742 L1410.92 681.742 L1410.36 681.742 L1409.8 681.742 L1409.24 681.742 L1408.68 681.742 L1408.13 681.742 L1407.57 681.742 L1407.01 681.742 L1406.45 681.742 L1405.89 681.742 L1405.33 681.742 L1404.77 681.742 L1404.21 681.742 L1403.65 681.742 L1403.09 681.742 L1402.53 681.742 L1401.97 681.742 L1401.41 681.742 L1400.86 681.742 L1400.3 681.742 L1399.74 681.742 L1399.18 681.742 L1398.62 681.742 L1398.06 681.742 L1397.5 681.742 L1396.94 681.742 L1396.38 681.742 L1395.82 681.742 L1395.26 681.742 L1394.7 681.742 L1394.14 681.742 L1393.58 681.742 L1393.03 681.742 L1392.47 681.742 L1391.91 681.742 L1391.35 681.742 L1390.79 681.742 L1390.23 681.742 L1389.67 681.742 L1389.11 681.742 L1388.55 681.742 L1387.99 681.742 L1387.43 681.742 L1386.87 681.742 L1386.31 681.742 L1385.76 681.742 L1385.2 681.742 L1384.64 681.742 L1384.08 681.742 L1383.52 681.742 L1382.96 681.742 L1382.4 681.742 L1381.84 681.742 L1381.28 681.742 L1380.72 681.742 L1380.16 681.742 L1379.6 681.742 L1379.04 681.742 L1378.49 681.742 L1377.93 681.742 L1377.37 681.742 L1376.81 681.742 L1376.25 681.742 L1375.69 681.742 L1375.13 681.742 L1374.57 681.742 L1374.01 681.742 L1373.45 681.742 L1372.89 681.742 L1372.33 681.742 L1371.77 681.742 L1371.21 681.742 L1370.66 681.742 L1370.1 681.742 L1369.54 681.742 L1368.98 681.742 L1368.42 681.742 L1367.86 681.742 L1367.3 681.742 L1366.74 681.742 L1366.18 681.742 L1365.62 681.742 L1365.06 681.742 L1364.5 681.742 L1363.94 681.742 L1363.39 681.742 L1362.83 681.742 L1362.27 681.742 L1361.71 681.742 L1361.15 681.742 L1360.59 681.742 L1360.03 681.742 L1359.47 681.742 L1358.91 681.742 L1358.35 681.742 L1357.79 681.742 L1357.23 681.742 L1356.67 681.742 L1356.12 681.742 L1355.56 681.742 L1355 681.742 L1354.44 681.742 L1353.88 681.742 L1353.32 681.742 L1352.76 681.742 L1352.2 681.742 L1351.64 681.742 L1351.08 681.742 L1350.52 681.742 L1349.96 681.742 L1349.4 681.742 L1348.84 681.742 L1348.29 681.742 L1347.73 681.742 L1347.17 681.742 L1346.61 681.742 L1346.05 681.742 L1345.49 681.742 L1344.93 681.742 L1344.37 681.742 L1343.81 681.742 L1343.25 681.742 L1342.69 681.742 L1342.13 681.742 L1341.57 681.742 L1341.02 681.742 L1340.46 681.742 L1339.9 681.742 L1339.34 681.742 L1338.78 681.742 L1338.22 681.742 L1337.66 681.742 L1337.1 681.742 L1336.54 681.742 L1335.98 681.742 L1335.42 681.742 L1334.86 681.742 L1334.3 681.742 L1333.75 681.742 L1333.19 681.742 L1332.63 681.742 L1332.07 681.742 L1331.51 681.742 L1330.95 681.742 L1330.39 681.742 L1329.83 681.742 L1329.27 681.742 L1328.71 681.742 L1328.15 681.742 L1327.59 681.742 L1327.03 681.742 L1326.47 681.742 L1325.92 681.742 L1325.36 681.742 L1324.8 681.742 L1324.24 681.742 L1323.68 681.742 L1323.12 681.742 L1322.56 681.742 L1322 681.742 L1321.44 681.742 L1320.88 681.742 L1320.32 681.742 L1319.76 681.742 L1319.2 681.742 L1318.65 681.742 L1318.09 681.742 L1317.53 681.742 L1316.97 681.742 L1316.41 681.742 L1315.85 681.742 L1315.29 681.742 L1314.73 681.742 L1314.17 681.742 L1313.61 681.742 L1313.05 681.742 L1312.49 681.742 L1311.93 681.742 L1311.38 681.742 L1310.82 681.742 L1310.26 681.742 L1309.7 681.742 L1309.14 681.742 L1308.58 681.742 L1308.02 681.742 L1307.46 681.742 L1306.9 681.742 L1306.34 681.742 L1305.78 681.742 L1305.22 681.742 L1304.66 681.742 L1304.1 681.742 L1303.55 681.742 L1302.99 681.742 L1302.43 681.742 L1301.87 681.742 L1301.31 681.742 L1300.75 681.742 L1300.19 681.742 L1299.63 681.742 L1299.07 681.742 L1298.51 681.742 L1297.95 681.742 L1297.39 681.742 L1296.83 681.742 L1296.28 681.742 L1295.72 681.742 L1295.16 681.742 L1294.6 681.742 L1294.04 681.742 L1293.48 681.742 L1292.92 681.742 L1292.36 681.742 L1291.8 681.742 L1291.24 681.742 L1290.68 681.742 L1290.12 681.742 L1289.56 681.742 L1289 681.742 L1288.45 681.742 L1287.89 681.742 L1287.33 681.742 L1286.77 681.742 L1286.21 681.742 L1285.65 681.742 L1285.09 681.742 L1284.53 681.742 L1283.97 681.742 L1283.41 681.742 L1282.85 681.742 L1282.29 681.742 L1281.73 681.742 L1281.18 681.742 L1280.62 681.742 L1280.06 681.742 L1279.5 681.742 L1278.94 681.742 L1278.38 681.742 L1277.82 681.742 L1277.26 681.742 L1276.7 681.742 L1276.14 681.742 L1275.58 681.742 L1275.02 681.742 L1274.46 681.742 L1273.91 681.742 L1273.35 681.742 L1272.79 681.742 L1272.23 681.742 L1271.67 681.742 L1271.11 681.742 L1270.55 681.742 L1269.99 681.742 L1269.43 681.742 L1268.87 681.742 L1268.31 681.742 L1267.75 681.742 L1267.19 681.742 L1266.63 681.742 L1266.08 681.742 L1265.52 681.742 L1264.96 681.742 L1264.4 681.742 L1263.84 681.742 L1263.28 681.742 L1262.72 681.742 L1262.16 681.742 L1261.6 681.742 L1261.04 681.742 L1260.48 681.742 L1259.92 681.742 L1259.36 681.742 L1258.81 681.742 L1258.25 681.742 L1257.69 681.742 L1257.13 681.742 L1256.57 681.742 L1256.01 681.742 L1255.45 681.742 L1254.89 681.742 L1254.33 681.742 L1253.77 681.742 L1253.21 681.742 L1252.65 681.742 L1252.09 681.742 L1251.54 681.742 L1250.98 681.742 L1250.42 681.742 L1249.86 681.742 L1249.3 681.742 L1248.74 681.742 L1248.18 681.742 L1247.62 681.742 L1247.06 681.742 L1246.5 681.742 L1245.94 681.742 L1245.38 681.742 L1244.82 681.742 L1244.26 681.742 L1243.71 681.742 L1243.15 681.742 L1242.59 681.742 L1242.03 681.742 L1241.47 681.742 L1240.91 681.742 L1240.35 681.742 L1239.79 681.742 L1239.23 681.742 L1238.67 681.742 L1238.11 681.742 L1237.55 681.742 L1236.99 681.742 L1236.44 681.742 L1235.88 681.742 L1235.32 681.742 L1234.76 681.742 L1234.2 681.742 L1233.64 681.742 L1233.08 681.742 L1232.52 681.742 L1231.96 681.742 L1231.4 681.742 L1230.84 681.742 L1230.28 681.742 L1229.72 681.742 L1229.17 681.742 L1228.61 681.742 L1228.05 681.742 L1227.49 681.742 L1226.93 681.742 L1226.37 681.742 L1225.81 681.742 L1225.25 681.742 L1224.69 681.742 L1224.13 681.742 L1223.57 681.742 L1223.01 681.742 L1222.45 681.742 L1221.89 681.742 L1221.34 681.742 L1220.78 681.742 L1220.22 681.742 L1219.66 681.742 L1219.1 681.742 L1218.54 681.742 L1217.98 681.742 L1217.42 681.742 L1216.86 681.742 L1216.3 681.742 L1215.74 681.742 L1215.18 681.742 L1214.62 681.742 L1214.07 681.742 L1213.51 681.742 L1212.95 681.742 L1212.39 681.742 L1211.83 681.742 L1211.27 681.742 L1210.71 681.742 L1210.15 681.742 L1209.59 681.742 L1209.03 681.742 L1208.47 681.742 L1207.91 681.742 L1207.35 681.742 L1206.8 681.742 L1206.24 681.742 L1205.68 681.742 L1205.12 681.742 L1204.56 681.742 L1204 681.742 L1203.44 681.742 L1202.88 681.742 L1202.32 681.742 L1201.76 681.742 L1201.2 681.742 L1200.64 681.742 L1200.08 681.742 L1199.52 681.742 L1198.97 681.742 L1198.41 681.742 L1197.85 681.742 L1197.29 681.742 L1196.73 681.742 L1196.17 681.742 L1195.61 681.742 L1195.05 681.742 L1194.49 681.742 L1193.93 681.742 L1193.37 681.742 L1192.81 681.742 L1192.25 681.742 L1191.7 681.742 L1191.14 681.742 L1190.58 681.742 L1190.02 681.742 L1189.46 681.742 L1188.9 681.742 L1188.34 681.742 L1187.78 681.742 L1187.22 681.742 L1186.66 681.742 L1186.1 681.742 L1185.54 681.742 L1184.98 681.742 L1184.43 681.742 L1183.87 681.742 L1183.31 681.742 L1182.75 681.742 L1182.19 681.742 L1181.63 681.742 L1181.07 681.742 L1180.51 681.742 L1179.95 681.742 L1179.39 681.742 L1178.83 681.742 L1178.27 681.742 L1177.71 681.742 L1177.15 681.742 L1176.6 681.742 L1176.04 681.742 L1175.48 681.742 L1174.92 681.742 L1174.36 681.742 L1173.8 681.742 L1173.24 681.742 L1172.68 681.742 L1172.12 681.742 L1171.56 681.742 L1171 681.742 L1170.44 681.742 L1169.88 681.742 L1169.33 681.742 L1168.77 681.742 L1168.21 681.742 L1167.65 681.742 L1167.09 681.742 L1166.53 681.742 L1165.97 681.742 L1165.41 681.742 L1164.85 681.742 L1164.29 681.742 L1163.73 681.742 L1163.17 681.742 L1162.61 681.742 L1162.05 681.742 L1161.5 681.742 L1160.94 681.742 L1160.38 681.742 L1159.82 681.742 L1159.26 681.742 L1158.7 681.742 L1158.14 681.742 L1157.58 681.742 L1157.02 681.742 L1156.46 681.742 L1155.9 681.742 L1155.34 681.742 L1154.78 681.742 L1154.23 681.742 L1153.67 681.742 L1153.11 681.742 L1152.55 681.742 L1151.99 681.742 L1151.43 681.742 L1150.87 681.742 L1150.31 681.742 L1149.75 681.742 L1149.19 681.742 L1148.63 681.742 L1148.07 681.742 L1147.51 681.742 L1146.96 681.742 L1146.4 681.742 L1145.84 681.742 L1145.28 681.742 L1144.72 681.742 L1144.16 681.742 L1143.6 681.742 L1143.04 681.742 L1142.48 681.742 L1141.92 681.742 L1141.36 681.742 L1140.8 681.742 L1140.24 681.742 L1139.68 681.742 L1139.13 681.742 L1138.57 681.742 L1138.01 681.742 L1137.45 681.742 L1136.89 681.742 L1136.33 681.742 L1135.77 681.742 L1135.21 681.742 L1134.65 681.742 L1134.09 681.742 L1133.53 681.742 L1132.97 681.742 L1132.41 681.742 L1131.86 681.742 L1131.3 681.742 L1130.74 681.742 L1130.18 681.742 L1129.62 681.742 L1129.06 681.742 L1128.5 681.742 L1127.94 681.742 L1127.38 681.742 L1126.82 681.742 L1126.26 681.742 L1125.7 681.742 L1125.14 681.742 L1124.59 681.742 L1124.03 681.742 L1123.47 681.742 L1122.91 681.742 L1122.35 681.742 L1121.79 681.742 L1121.23 681.742 L1120.67 681.742 L1120.11 681.742 L1119.55 681.742 L1118.99 681.742 L1118.43 681.742 L1117.87 681.742 L1117.31 681.742 L1116.76 681.742 L1116.2 681.742 L1115.64 681.742 L1115.08 681.742 L1114.52 681.742 L1113.96 681.742 L1113.4 681.742 L1112.84 681.742 L1112.28 681.742 L1111.72 681.742 L1111.16 681.742 L1110.6 681.742 L1110.04 681.742 L1109.49 681.742 L1108.93 681.742 L1108.37 681.742 L1107.81 681.742 L1107.25 681.742 L1106.69 681.742 L1106.13 681.742 L1105.57 681.742 L1105.01 681.742 L1104.45 681.742 L1103.89 681.742 L1103.33 681.742 L1102.77 681.742 L1102.22 681.742 L1101.66 681.742 L1101.1 681.742 L1100.54 681.742 L1099.98 681.742 L1099.42 681.742 L1098.86 681.742 L1098.3 681.742 L1097.74 681.742 L1097.18 681.742 L1096.62 681.742 L1096.06 681.742 L1095.5 681.742 L1094.94 681.742 L1094.39 681.742 L1093.83 681.742 L1093.27 681.742 L1092.71 681.742 L1092.15 681.742 L1091.59 681.742 L1091.03 681.742 L1090.47 681.742 L1089.91 681.742 L1089.35 681.742 L1088.79 681.742 L1088.23 681.742 L1087.67 681.742 L1087.12 681.742 L1086.56 681.742 L1086 681.742 L1085.44 681.742 L1084.88 681.742 L1084.32 681.742 L1083.76 681.742 L1083.2 681.742 L1082.64 681.742 L1082.08 681.742 L1081.52 681.742 L1080.96 681.742 L1080.4 681.742 L1079.85 681.742 L1079.29 681.742 L1078.73 681.742 L1078.17 681.742 L1077.61 681.742 L1077.05 681.742 L1076.49 681.742 L1075.93 681.742 L1075.37 681.742 L1074.81 681.742 L1074.25 681.742 L1073.69 681.742 L1073.13 681.742 L1072.57 681.742 L1072.02 681.742 L1071.46 681.742 L1070.9 681.742 L1070.34 681.742 L1069.78 681.742 L1069.22 681.742 L1068.66 681.742 L1068.1 681.742 L1067.54 681.742 L1066.98 681.742 L1066.42 681.742 L1065.86 681.742 L1065.3 681.742 L1064.75 681.742 L1064.19 681.742 L1063.63 681.742 L1063.07 681.742 L1062.51 681.742 L1061.95 681.742 L1061.39 681.742 L1060.83 681.742 L1060.27 681.742 L1059.71 681.742 L1059.15 681.742 L1058.59 681.742 L1058.03 681.742 L1057.48 681.742 L1056.92 681.742 L1056.36 681.742 L1055.8 681.742 L1055.24 681.742 L1054.68 681.742 L1054.12 681.742 L1053.56 681.742 L1053 681.742 L1052.44 681.742 L1051.88 681.742 L1051.32 681.742 L1050.76 681.742 L1050.2 681.742 L1049.65 681.742 L1049.09 681.742 L1048.53 681.742 L1047.97 681.742 L1047.41 681.742 L1046.85 681.742 L1046.29 681.742 L1045.73 681.742 L1045.17 681.742 L1044.61 681.742 L1044.05 681.742 L1043.49 681.742 L1042.93 681.742 L1042.38 681.742 L1041.82 681.742 L1041.26 681.742 L1040.7 681.742 L1040.14 681.742 L1039.58 681.742 L1039.02 681.742 L1038.46 681.742 L1037.9 681.742 L1037.34 681.742 L1036.78 681.742 L1036.22 681.742 L1035.66 681.742 L1035.1 681.742 L1034.55 681.742 L1033.99 681.742 L1033.43 681.742 L1032.87 681.742 L1032.31 681.742 L1031.75 681.742 L1031.19 681.742 L1030.63 681.742 L1030.07 681.742 L1029.51 681.742 L1028.95 681.742 L1028.39 681.742 L1027.83 681.742 L1027.28 681.742 L1026.72 681.742 L1026.16 681.742 L1025.6 681.742 L1025.04 681.742 L1024.48 681.742 L1023.92 681.742 L1023.36 681.742 L1022.8 681.742 L1022.24 681.742 L1021.68 681.742 L1021.12 681.742 L1020.56 681.742 L1020.01 681.742 L1019.45 681.742 L1018.89 681.742 L1018.33 681.742 L1017.77 681.742 L1017.21 681.742 L1016.65 681.742 L1016.09 681.742 L1015.53 681.742 L1014.97 681.742 L1014.41 681.742 L1013.85 681.742 L1013.29 681.742 L1012.73 681.742 L1012.18 681.742 L1011.62 681.742 L1011.06 681.742 L1010.5 681.742 L1009.94 681.742 L1009.38 681.742 L1008.82 681.742 L1008.26 681.742 L1007.7 681.742 L1007.14 681.742 L1006.58 681.742 L1006.02 681.742 L1005.46 681.742 L1004.91 681.742 L1004.35 681.742 L1003.79 681.742 L1003.23 681.742 L1002.67 681.742 L1002.11 681.742 L1001.55 681.742 L1000.99 681.742 L1000.43 681.742 L999.872 681.742 L999.313 681.742 L998.754 681.742 L998.194 681.742 L997.635 681.742 L997.076 681.742 L996.517 681.742 L995.957 681.742 L995.398 681.742 L994.839 681.742 L994.28 681.742 L993.72 681.742 L993.161 681.742 L992.602 681.742 L992.043 681.742 L991.483 681.742 L990.924 681.742 L990.365 681.742 L989.806 681.742 L989.246 681.742 L988.687 681.742 L988.128 681.742 L987.569 681.742 L987.009 681.742 L986.45 681.742 L985.891 681.742 L985.332 681.742 L984.772 681.742 L984.213 681.742 L983.654 681.742 L983.095 681.742 L982.535 681.742 L981.976 681.742 L981.417 681.742 L980.858 681.742 L980.298 681.742 L979.739 681.742 L979.18 681.742 L978.621 681.742 L978.061 681.742 L977.502 681.742 L976.943 681.742 L976.384 681.742 L975.824 681.742 L975.265 681.742 L974.706 681.742 L974.147 681.742 L973.587 681.742 L973.028 681.742 L972.469 681.742 L971.91 681.742 L971.35 681.742 L970.791 681.742 L970.232 681.742 L969.673 681.742 L969.113 681.742 L968.554 681.742 L967.995 681.742 L967.436 681.742 L966.876 681.742 L966.317 681.742 L965.758 681.742 L965.199 681.742 L964.639 681.742 L964.08 681.742 L963.521 681.742 L962.962 681.742 L962.402 681.742 L961.843 681.742 L961.284 681.742 L960.725 681.742 L960.165 681.742 L959.606 681.742 L959.047 681.742 L958.488 681.742 L957.928 681.742 L957.369 681.742 L956.81 681.742 L956.251 681.742 L955.691 681.742 L955.132 681.742 L954.573 681.742 L954.014 681.742 L953.454 681.742 L952.895 681.742 L952.336 681.742 L951.777 681.742 L951.217 681.742 L950.658 681.742 L950.099 681.742 L949.54 681.742 L948.98 681.742 L948.421 681.742 L947.862 681.742 L947.303 681.742 L946.743 681.742 L946.184 681.742 L945.625 681.742 L945.066 681.742 L944.506 681.742 L943.947 681.742 L943.388 681.742 L942.829 681.742 L942.269 681.742 L941.71 681.742 L941.151 681.742 L940.592 681.742 L940.032 681.742 L939.473 681.742 L938.914 681.742 L938.355 681.742 L937.795 681.742 L937.236 681.742 L936.677 681.742 L936.118 681.742 L935.558 681.742 L934.999 681.742 L934.44 681.742 L933.881 681.742 L933.321 681.742 L932.762 681.742 L932.203 681.742 L931.644 681.742 L931.084 681.742 L930.525 681.742 L929.966 681.742 L929.406 681.742 L928.847 681.742 L928.288 681.742 L927.729 681.742 L927.169 681.742 L926.61 681.742 L926.051 681.742 L925.492 681.742 L924.932 681.742 L924.373 681.742 L923.814 681.742 L923.255 681.742 L922.695 681.742 L922.136 681.742 L921.577 681.742 L921.018 681.742 L920.458 681.742 L919.899 681.742 L919.34 681.742 L918.781 681.742 L918.221 681.742 L917.662 681.742 L917.103 681.742 L916.544 681.742 L915.984 681.742 L915.425 681.742 L914.866 681.742 L914.307 681.742 L913.747 681.742 L913.188 681.742 L912.629 681.742 L912.07 681.742 L911.51 681.742 L910.951 681.742 L910.392 681.742 L909.833 681.742 L909.273 681.742 L908.714 681.742 L908.155 681.742 L907.596 681.742 L907.036 681.742 L906.477 681.742 L905.918 681.742 L905.359 681.742 L904.799 681.742 L904.24 681.742 L903.681 681.742 L903.122 681.742 L902.562 681.742 L902.003 681.742 L901.444 681.742 L900.885 681.742 L900.325 681.742 L899.766 681.742 L899.207 681.742 L898.648 681.742 L898.088 681.742 L897.529 681.742 L896.97 681.742 L896.411 681.742 L895.851 681.742 L895.292 681.742 L894.733 681.742 L894.174 681.742 L893.614 681.742 L893.055 681.742 L892.496 681.742 L891.937 681.742 L891.377 681.742 L890.818 681.742 L890.259 681.742 L889.7 681.742 L889.14 681.742 L888.581 681.742 L888.022 681.742 L887.463 681.742 L886.903 681.742 L886.344 681.742 L885.785 681.742 L885.226 681.742 L884.666 681.742 L884.107 681.742 L883.548 681.742 L882.989 681.742 L882.429 681.742 L881.87 681.742 L881.311 681.742 L880.752 681.742 L880.192 681.742 L879.633 681.742 L879.074 681.742 L878.515 681.742 L877.955 681.742 L877.396 681.742 L876.837 681.742 L876.278 681.742 L875.718 681.742 L875.159 681.742 L874.6 681.742 L874.041 681.742 L873.481 681.742 L872.922 681.742 L872.363 681.742 L871.804 681.742 L871.244 681.742 L870.685 681.742 L870.126 681.742 L869.567 681.742 L869.007 681.742 L868.448 681.742 L867.889 681.742 L867.33 681.742 L866.77 681.742 L866.211 681.742 L865.652 681.742 L865.093 681.742 L864.533 681.742 L863.974 681.742 L863.415 681.742 L862.856 681.742 L862.296 681.742 L861.737 681.742 L861.178 681.742 L860.619 681.742 L860.059 681.742 L859.5 681.742 L858.941 681.742 L858.382 681.742 L857.822 681.742 L857.263 681.742 L856.704 681.742 L856.145 681.742 L855.585 681.742 L855.026 681.742 L854.467 681.742 L853.908 681.742 L853.348 681.742 L852.789 681.742 L852.23 681.742 L851.671 681.742 L851.111 681.742 L850.552 681.742 L849.993 681.742 L849.434 681.742 L848.874 681.742 L848.315 681.742 L847.756 681.742 L847.197 681.742 L846.637 681.742 L846.078 681.742 L845.519 681.742 L844.96 681.742 L844.4 681.742 L843.841 681.742 L843.282 681.742 L842.723 681.742 L842.163 681.742 L841.604 681.742 L841.045 681.742 L840.486 681.742 L839.926 681.742 L839.367 681.742 L838.808 681.742 L838.249 681.742 L837.689 681.742 L837.13 681.742 L836.571 681.742 L836.012 681.742 L835.452 681.742 L834.893 681.742 L834.334 681.742 L833.775 681.742 L833.215 681.742 L832.656 681.742 L832.097 681.742 L831.538 681.742 L830.978 681.742 L830.419 681.742 L829.86 681.742 L829.301 681.742 L828.741 681.742 L828.182 681.742 L827.623 681.742 L827.064 681.742 L826.504 681.742 L825.945 681.742 L825.386 681.742 L824.827 681.742 L824.267 681.742 L823.708 681.742 L823.149 681.742 L822.59 681.742 L822.03 681.742 L821.471 681.742 L820.912 681.742 L820.353 681.742 L819.793 681.742 L819.234 681.742 L818.675 681.742 L818.116 681.742 L817.556 681.742 L816.997 681.742 L816.438 681.742 L815.879 681.742 L815.319 681.742 L814.76 681.742 L814.201 681.742 L813.642 681.742 L813.082 681.742 L812.523 681.742 L811.964 681.742 L811.405 681.742 L810.845 681.742 L810.286 681.742 L809.727 681.742 L809.168 681.742 L808.608 681.742 L808.049 681.742 L807.49 681.742 L806.931 681.742 L806.371 681.742 L805.812 681.742 L805.253 681.742 L804.693 681.742 L804.134 681.742 L803.575 681.742 L803.016 681.742 L802.456 681.742 L801.897 681.742 L801.338 681.742 L800.779 681.742 L800.219 681.742 L799.66 681.742 L799.101 681.742 L798.542 681.742 L797.982 681.742 L797.423 681.742 L796.864 681.742 L796.305 681.742 L795.745 681.742 L795.186 681.742 L794.627 681.742 L794.068 681.742 L793.508 681.742 L792.949 681.742 L792.39 681.742 L791.831 681.742 L791.271 681.742 L790.712 681.742 L790.153 681.742 L789.594 681.742 L789.034 681.742 L788.475 681.742 L787.916 681.742 L787.357 681.742 L786.797 681.742 L786.238 681.742 L785.679 681.742 L785.12 681.742 L784.56 681.742 L784.001 681.742 L783.442 681.742 L782.883 681.742 L782.323 681.742 L781.764 681.742 L781.205 681.742 L780.646 681.742 L780.086 681.742 L779.527 681.742 L778.968 681.742 L778.409 681.742 L777.849 681.742 L777.29 681.742 L776.731 681.742 L776.172 681.742 L775.612 681.742 L775.053 681.742 L774.494 681.742 L773.935 681.742 L773.375 681.742 L772.816 681.742 L772.257 681.742 L771.698 681.742 L771.138 681.742 L770.579 681.742 L770.02 681.742 L769.461 681.742 L768.901 681.742 L768.342 681.742 L767.783 681.742 L767.224 681.742 L766.664 681.742 L766.105 681.742 L765.546 681.742 L764.987 681.742 L764.427 681.742 L763.868 681.742 L763.309 681.742 L762.75 681.742 L762.19 681.742 L761.631 681.742 L761.072 681.742 L760.513 681.742 L759.953 681.742 L759.394 681.742 L758.835 681.742 L758.276 681.742 L757.716 681.742 L757.157 681.742 L756.598 681.742 L756.039 681.742 L755.479 681.742 L754.92 681.742 L754.361 681.742 L753.802 681.742 L753.242 681.742 L752.683 681.742 L752.124 681.742 L751.565 681.742 L751.005 681.742 L750.446 681.742 L749.887 681.742 L749.328 681.742 L748.768 681.742 L748.209 681.742 L747.65 681.742 L747.091 681.742 L746.531 681.742 L745.972 681.742 L745.413 681.742 L744.854 681.742 L744.294 681.742 L743.735 681.742 L743.176 681.742 L742.617 681.742 L742.057 681.742 L741.498 681.742 L740.939 681.742 L740.38 681.742 L739.82 681.742 L739.261 681.742 L738.702 681.742 L738.143 681.742 L737.583 681.742 L737.024 681.742 L736.465 681.742 L735.906 681.742 L735.346 681.742 L734.787 681.742 L734.228 681.742 L733.669 681.742 L733.109 681.742 L732.55 681.742 L731.991 681.742 L731.432 681.742 L730.872 681.742 L730.313 681.742 L729.754 681.742 L729.195 681.742 L728.635 681.742 L728.076 681.742 L727.517 681.742 L726.958 681.742 L726.398 681.742 L725.839 681.742 L725.28 681.742 L724.721 681.742 L724.161 681.742 L723.602 681.742 L723.043 681.742 L722.484 681.742 L721.924 681.742 L721.365 681.742 L720.806 681.742 L720.247 681.742  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip193)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.125 720.806,687.125 721.365,687.125 721.924,687.125 722.484,687.125 723.043,687.125 723.602,687.125 724.161,687.125 724.721,687.125 725.28,687.125 725.839,687.125 726.398,687.125 726.958,687.125 727.517,687.125 728.076,687.125 728.635,687.125 729.195,687.125 729.754,687.125 730.313,687.125 730.872,687.125 731.432,687.125 731.991,687.125 732.55,687.125 733.109,687.125 733.669,687.125 734.228,687.125 734.787,687.125 735.346,687.125 735.906,687.125 736.465,687.125 737.024,687.125 737.583,687.125 738.143,687.125 738.702,687.125 739.261,687.125 739.82,687.125 740.38,687.125 740.939,687.125 741.498,687.125 742.057,687.125 742.617,687.125 743.176,687.125 743.735,687.125 744.294,687.125 744.854,687.125 745.413,687.125 745.972,687.125 746.531,687.125 747.091,687.125 747.65,687.125 748.209,687.125 748.768,687.125 749.328,687.125 749.887,687.125 750.446,687.125 751.005,687.125 751.565,687.125 752.124,687.125 752.683,687.125 753.242,687.125 753.802,687.125 754.361,687.125 754.92,687.125 755.479,687.125 756.039,687.125 756.598,687.125 757.157,687.125 757.716,687.125 758.276,687.125 758.835,687.125 759.394,687.125 759.953,687.125 760.513,687.125 761.072,687.125 761.631,687.125 762.19,687.125 762.75,687.125 763.309,687.125 763.868,687.125 764.427,687.125 764.987,687.125 765.546,687.125 766.105,687.125 766.664,687.125 767.224,687.125 767.783,687.125 768.342,687.125 768.901,687.125 769.461,687.125 770.02,687.125 770.579,687.125 771.138,687.125 771.698,687.125 772.257,687.125 772.816,687.125 773.375,687.125 773.935,687.125 774.494,687.125 775.053,687.125 775.612,687.125 776.172,687.125 776.731,687.125 777.29,687.125 777.849,687.125 778.409,687.125 778.968,687.125 779.527,687.125 780.086,687.125 780.646,687.125 781.205,687.125 781.764,687.125 782.323,687.125 782.883,687.125 783.442,687.125 784.001,687.125 784.56,687.125 785.12,687.125 785.679,687.125 786.238,687.125 786.797,687.125 787.357,687.125 787.916,687.125 788.475,687.125 789.034,687.125 789.594,687.125 790.153,687.125 790.712,687.125 791.271,687.125 791.831,687.125 792.39,687.125 792.949,687.125 793.508,687.125 794.068,687.125 794.627,687.125 795.186,687.125 795.745,687.125 796.305,687.125 796.864,687.125 797.423,687.125 797.982,687.125 798.542,687.125 799.101,687.125 799.66,687.125 800.219,687.125 800.779,687.125 801.338,687.125 801.897,687.125 802.456,687.125 803.016,687.125 803.575,687.125 804.134,687.125 804.693,687.125 805.253,687.125 805.812,687.125 806.371,687.125 806.931,687.125 807.49,687.125 808.049,687.125 808.608,687.125 809.168,687.125 809.727,687.125 810.286,687.125 810.845,687.125 811.405,687.125 811.964,687.125 812.523,687.125 813.082,687.125 813.642,687.125 814.201,687.125 814.76,687.125 815.319,687.125 815.879,687.125 816.438,687.125 816.997,687.125 817.556,687.125 818.116,687.125 818.675,687.125 819.234,687.125 819.793,687.125 820.353,687.125 820.912,687.125 821.471,687.125 822.03,687.125 822.59,687.125 823.149,687.125 823.708,687.125 824.267,687.125 824.827,687.125 825.386,687.125 825.945,687.125 826.504,687.125 827.064,687.125 827.623,687.125 828.182,687.125 828.741,687.125 829.301,687.125 829.86,687.125 830.419,687.125 830.978,687.125 831.538,687.125 832.097,687.125 832.656,687.125 833.215,687.125 833.775,687.125 834.334,687.125 834.893,687.125 835.452,687.125 836.012,687.125 836.571,687.125 837.13,687.125 837.689,687.125 838.249,687.125 838.808,687.125 839.367,687.125 839.926,687.125 840.486,687.125 841.045,687.125 841.604,687.125 842.163,687.125 842.723,687.125 843.282,687.125 843.841,687.125 844.4,687.125 844.96,687.125 845.519,687.125 846.078,687.125 846.637,687.125 847.197,687.125 847.756,687.125 848.315,687.125 848.874,687.125 849.434,687.125 849.993,687.125 850.552,687.125 851.111,687.125 851.671,687.125 852.23,687.125 852.789,687.125 853.348,687.125 853.908,687.125 854.467,687.125 855.026,687.125 855.585,687.125 856.145,687.125 856.704,687.125 857.263,687.125 857.822,687.125 858.382,687.125 858.941,687.125 859.5,687.125 860.059,687.125 860.619,687.125 861.178,687.125 861.737,687.125 862.296,687.125 862.856,687.125 863.415,687.125 863.974,687.125 864.533,687.125 865.093,687.125 865.652,687.125 866.211,687.125 866.77,687.125 867.33,687.125 867.889,687.125 868.448,687.125 869.007,687.125 869.567,687.125 870.126,687.125 870.685,687.125 871.244,687.125 871.804,687.125 872.363,687.125 872.922,687.125 873.481,687.125 874.041,687.125 874.6,687.125 875.159,687.125 875.718,687.125 876.278,687.125 876.837,687.125 877.396,687.125 877.955,687.125 878.515,687.125 879.074,687.125 879.633,687.125 880.192,687.125 880.752,687.125 881.311,687.125 881.87,687.125 882.429,687.125 882.989,687.125 883.548,687.125 884.107,687.125 884.666,687.125 885.226,687.125 885.785,687.125 886.344,687.125 886.903,687.125 887.463,687.125 888.022,687.125 888.581,687.125 889.14,687.125 889.7,687.125 890.259,687.125 890.818,687.125 891.377,687.125 891.937,687.125 892.496,687.125 893.055,687.125 893.614,687.125 894.174,687.125 894.733,687.125 895.292,687.125 895.851,687.125 896.411,687.125 896.97,687.125 897.529,687.125 898.088,687.125 898.648,687.125 899.207,687.125 899.766,687.125 900.325,687.125 900.885,687.125 901.444,687.125 902.003,687.125 902.562,687.125 903.122,687.125 903.681,687.125 904.24,687.125 904.799,687.125 905.359,687.125 905.918,687.125 906.477,687.125 907.036,687.125 907.596,687.125 908.155,687.125 908.714,687.125 909.273,687.125 909.833,687.125 910.392,687.125 910.951,687.125 911.51,687.125 912.07,687.125 912.629,687.125 913.188,687.125 913.747,687.125 914.307,687.125 914.866,687.125 915.425,687.125 915.984,687.125 916.544,687.125 917.103,687.125 917.662,687.125 918.221,687.125 918.781,687.125 919.34,687.125 919.899,687.125 920.458,687.125 921.018,687.125 921.577,687.125 922.136,687.125 922.695,687.125 923.255,687.125 923.814,687.125 924.373,687.125 924.932,687.125 925.492,687.125 926.051,687.125 926.61,687.125 927.169,687.125 927.729,687.125 928.288,687.125 928.847,687.125 929.406,687.125 929.966,687.125 930.525,687.125 931.084,687.125 931.644,687.125 932.203,687.125 932.762,687.125 933.321,687.125 933.881,687.125 934.44,687.125 934.999,687.125 935.558,687.125 936.118,687.125 936.677,687.125 937.236,687.125 937.795,687.125 938.355,687.125 938.914,687.125 939.473,687.125 940.032,687.125 940.592,687.125 941.151,687.125 941.71,687.125 942.269,687.125 942.829,687.125 943.388,687.125 943.947,687.125 944.506,687.125 945.066,687.125 945.625,687.125 946.184,687.125 946.743,687.125 947.303,687.125 947.862,687.125 948.421,687.125 948.98,687.125 949.54,687.125 950.099,687.125 950.658,687.125 951.217,687.125 951.777,687.125 952.336,687.125 952.895,687.125 953.454,687.125 954.014,687.125 954.573,687.125 955.132,687.125 955.691,687.125 956.251,687.125 956.81,687.125 957.369,687.125 957.928,687.125 958.488,687.125 959.047,687.125 959.606,687.125 960.165,687.125 960.725,687.125 961.284,687.125 961.843,687.125 962.402,687.125 962.962,687.125 963.521,687.125 964.08,687.125 964.639,687.125 965.199,687.125 965.758,687.125 966.317,687.125 966.876,687.125 967.436,687.125 967.995,687.125 968.554,687.125 969.113,687.125 969.673,687.125 970.232,687.125 970.791,687.125 971.35,687.125 971.91,687.125 972.469,687.125 973.028,687.125 973.587,687.125 974.147,687.125 974.706,687.125 975.265,687.125 975.824,687.125 976.384,687.125 976.943,687.125 977.502,687.125 978.061,687.125 978.621,687.125 979.18,687.125 979.739,687.125 980.298,687.125 980.858,687.125 981.417,687.125 981.976,687.125 982.535,687.125 983.095,687.125 983.654,687.125 984.213,687.125 984.772,687.125 985.332,687.125 985.891,687.125 986.45,687.125 987.009,687.125 987.569,687.125 988.128,687.125 988.687,687.125 989.246,687.125 989.806,687.125 990.365,687.125 990.924,687.125 991.483,687.125 992.043,687.125 992.602,687.125 993.161,687.125 993.72,687.125 994.28,687.125 994.839,687.125 995.398,687.125 995.957,687.125 996.517,687.125 997.076,687.125 997.635,687.125 998.194,687.125 998.754,687.125 999.313,687.125 999.872,687.125 1000.43,687.125 1000.99,687.125 1001.55,687.125 1002.11,687.125 1002.67,687.125 1003.23,687.125 1003.79,687.125 1004.35,687.125 1004.91,687.125 1005.46,687.125 1006.02,687.125 1006.58,687.125 1007.14,687.125 1007.7,687.125 1008.26,687.125 1008.82,687.125 1009.38,687.125 1009.94,687.125 1010.5,687.125 1011.06,687.125 1011.62,687.125 1012.18,687.125 1012.73,687.125 1013.29,687.125 1013.85,687.125 1014.41,687.125 1014.97,687.125 1015.53,687.125 1016.09,687.125 1016.65,687.125 1017.21,687.125 1017.77,687.125 1018.33,687.125 1018.89,687.125 1019.45,687.125 1020.01,687.125 1020.56,687.125 1021.12,687.125 1021.68,687.125 1022.24,687.125 1022.8,687.125 1023.36,687.125 1023.92,687.125 1024.48,687.125 1025.04,687.125 1025.6,687.125 1026.16,687.125 1026.72,687.125 1027.28,687.125 1027.83,687.125 1028.39,687.125 1028.95,687.125 1029.51,687.125 1030.07,687.125 1030.63,687.125 1031.19,687.125 1031.75,687.125 1032.31,687.125 1032.87,687.125 1033.43,687.125 1033.99,687.125 1034.55,687.125 1035.1,687.125 1035.66,687.125 1036.22,687.125 1036.78,687.125 1037.34,687.125 1037.9,687.125 1038.46,687.125 1039.02,687.125 1039.58,687.125 1040.14,687.125 1040.7,687.125 1041.26,687.125 1041.82,687.125 1042.38,687.125 1042.93,687.125 1043.49,687.125 1044.05,687.125 1044.61,687.125 1045.17,687.125 1045.73,687.125 1046.29,687.125 1046.85,687.125 1047.41,687.125 1047.97,687.125 1048.53,687.125 1049.09,687.125 1049.65,687.125 1050.2,687.125 1050.76,687.125 1051.32,687.125 1051.88,687.125 1052.44,687.125 1053,687.125 1053.56,687.125 1054.12,687.125 1054.68,687.125 1055.24,687.125 1055.8,687.125 1056.36,687.125 1056.92,687.125 1057.48,687.125 1058.03,687.125 1058.59,687.125 1059.15,687.125 1059.71,687.125 1060.27,687.125 1060.83,687.125 1061.39,687.125 1061.95,687.125 1062.51,687.125 1063.07,687.125 1063.63,687.125 1064.19,687.125 1064.75,687.125 1065.3,687.125 1065.86,687.125 1066.42,687.125 1066.98,687.125 1067.54,687.125 1068.1,687.125 1068.66,687.125 1069.22,687.125 1069.78,687.125 1070.34,687.125 1070.9,687.125 1071.46,687.125 1072.02,687.125 1072.57,687.125 1073.13,687.125 1073.69,687.125 1074.25,687.125 1074.81,687.125 1075.37,687.125 1075.93,687.125 1076.49,687.125 1077.05,687.125 1077.61,687.125 1078.17,687.125 1078.73,687.125 1079.29,687.125 1079.85,687.125 1080.4,687.125 1080.96,687.125 1081.52,687.125 1082.08,687.125 1082.64,687.125 1083.2,687.125 1083.76,687.125 1084.32,687.125 1084.88,687.125 1085.44,687.125 1086,687.125 1086.56,687.125 1087.12,687.125 1087.67,687.125 1088.23,687.125 1088.79,687.125 1089.35,687.125 1089.91,687.125 1090.47,687.125 1091.03,687.125 1091.59,687.125 1092.15,687.125 1092.71,687.125 1093.27,687.125 1093.83,687.125 1094.39,687.125 1094.94,687.125 1095.5,687.125 1096.06,687.125 1096.62,687.125 1097.18,687.125 1097.74,687.125 1098.3,687.125 1098.86,687.125 1099.42,687.125 1099.98,687.125 1100.54,687.125 1101.1,687.125 1101.66,687.125 1102.22,687.125 1102.77,687.125 1103.33,687.125 1103.89,687.125 1104.45,687.125 1105.01,687.125 1105.57,687.125 1106.13,687.125 1106.69,687.125 1107.25,687.125 1107.81,687.125 1108.37,687.125 1108.93,687.125 1109.49,687.125 1110.04,687.125 1110.6,687.125 1111.16,687.125 1111.72,687.125 1112.28,687.125 1112.84,687.125 1113.4,687.125 1113.96,687.125 1114.52,687.125 1115.08,687.125 1115.64,687.125 1116.2,687.125 1116.76,687.125 1117.31,687.125 1117.87,687.125 1118.43,687.125 1118.99,687.125 1119.55,687.125 1120.11,687.125 1120.67,687.125 1121.23,687.125 1121.79,687.125 1122.35,687.125 1122.91,687.125 1123.47,687.125 1124.03,687.125 1124.59,687.125 1125.14,687.125 1125.7,687.125 1126.26,687.125 1126.82,687.125 1127.38,687.125 1127.94,687.125 1128.5,687.125 1129.06,687.125 1129.62,687.125 1130.18,687.125 1130.74,687.125 1131.3,687.125 1131.86,687.125 1132.41,687.125 1132.97,687.125 1133.53,687.125 1134.09,687.125 1134.65,687.125 1135.21,687.125 1135.77,687.125 1136.33,687.125 1136.89,687.125 1137.45,687.125 1138.01,687.125 1138.57,687.125 1139.13,687.125 1139.68,687.125 1140.24,687.125 1140.8,687.125 1141.36,687.125 1141.92,687.125 1142.48,687.125 1143.04,687.125 1143.6,687.125 1144.16,687.125 1144.72,687.125 1145.28,687.125 1145.84,687.125 1146.4,687.125 1146.96,687.125 1147.51,687.125 1148.07,687.125 1148.63,687.125 1149.19,687.125 1149.75,687.125 1150.31,687.125 1150.87,687.125 1151.43,687.125 1151.99,687.125 1152.55,687.125 1153.11,687.125 1153.67,687.125 1154.23,687.125 1154.78,687.125 1155.34,687.125 1155.9,687.125 1156.46,687.125 1157.02,687.125 1157.58,687.125 1158.14,687.125 1158.7,687.125 1159.26,687.125 1159.82,687.125 1160.38,687.125 1160.94,687.125 1161.5,687.125 1162.05,687.125 1162.61,687.125 1163.17,687.125 1163.73,687.125 1164.29,687.125 1164.85,687.125 1165.41,687.125 1165.97,687.125 1166.53,687.125 1167.09,687.125 1167.65,687.125 1168.21,687.125 1168.77,687.125 1169.33,687.125 1169.88,687.125 1170.44,687.125 1171,687.125 1171.56,687.125 1172.12,687.125 1172.68,687.125 1173.24,687.125 1173.8,687.125 1174.36,687.125 1174.92,687.125 1175.48,687.125 1176.04,687.125 1176.6,687.125 1177.15,687.125 1177.71,687.125 1178.27,687.125 1178.83,687.125 1179.39,687.125 1179.95,687.125 1180.51,687.125 1181.07,687.125 1181.63,687.125 1182.19,687.125 1182.75,687.125 1183.31,687.125 1183.87,687.125 1184.43,687.125 1184.98,687.125 1185.54,687.125 1186.1,687.125 1186.66,687.125 1187.22,687.125 1187.78,687.125 1188.34,687.125 1188.9,687.125 1189.46,687.125 1190.02,687.125 1190.58,687.125 1191.14,687.125 1191.7,687.125 1192.25,687.125 1192.81,687.125 1193.37,687.125 1193.93,687.125 1194.49,687.125 1195.05,687.125 1195.61,687.125 1196.17,687.125 1196.73,687.125 1197.29,687.125 1197.85,687.125 1198.41,687.125 1198.97,687.125 1199.52,687.125 1200.08,687.125 1200.64,687.125 1201.2,687.125 1201.76,687.125 1202.32,687.125 1202.88,687.125 1203.44,687.125 1204,687.125 1204.56,687.125 1205.12,687.125 1205.68,687.125 1206.24,687.125 1206.8,687.125 1207.35,687.125 1207.91,687.125 1208.47,687.125 1209.03,687.125 1209.59,687.125 1210.15,687.125 1210.71,687.125 1211.27,687.125 1211.83,687.125 1212.39,687.125 1212.95,687.125 1213.51,687.125 1214.07,687.125 1214.62,687.125 1215.18,687.125 1215.74,687.125 1216.3,687.125 1216.86,687.125 1217.42,687.125 1217.98,687.125 1218.54,687.125 1219.1,687.125 1219.66,687.125 1220.22,687.125 1220.78,687.125 1221.34,687.125 1221.89,687.125 1222.45,687.125 1223.01,687.125 1223.57,687.125 1224.13,687.125 1224.69,687.125 1225.25,687.125 1225.81,687.125 1226.37,687.125 1226.93,687.125 1227.49,687.125 1228.05,687.125 1228.61,687.125 1229.17,687.125 1229.72,687.125 1230.28,687.125 1230.84,687.125 1231.4,687.125 1231.96,687.125 1232.52,687.125 1233.08,687.125 1233.64,687.125 1234.2,687.125 1234.76,687.125 1235.32,687.125 1235.88,687.125 1236.44,687.125 1236.99,687.125 1237.55,687.125 1238.11,687.125 1238.67,687.125 1239.23,687.125 1239.79,687.125 1240.35,687.125 1240.91,687.125 1241.47,687.125 1242.03,687.125 1242.59,687.125 1243.15,687.125 1243.71,687.125 1244.26,687.125 1244.82,687.125 1245.38,687.125 1245.94,687.125 1246.5,687.125 1247.06,687.125 1247.62,687.125 1248.18,687.125 1248.74,687.125 1249.3,687.125 1249.86,687.125 1250.42,687.125 1250.98,687.125 1251.54,687.125 1252.09,687.125 1252.65,687.125 1253.21,687.125 1253.77,687.125 1254.33,687.125 1254.89,687.125 1255.45,687.125 1256.01,687.125 1256.57,687.125 1257.13,687.125 1257.69,687.125 1258.25,687.125 1258.81,687.125 1259.36,687.125 1259.92,687.125 1260.48,687.125 1261.04,687.125 1261.6,687.125 1262.16,687.125 1262.72,687.125 1263.28,687.125 1263.84,687.125 1264.4,687.125 1264.96,687.125 1265.52,687.125 1266.08,687.125 1266.63,687.125 1267.19,687.125 1267.75,687.125 1268.31,687.125 1268.87,687.125 1269.43,687.125 1269.99,687.125 1270.55,687.125 1271.11,687.125 1271.67,687.125 1272.23,687.125 1272.79,687.125 1273.35,687.125 1273.91,687.125 1274.46,687.125 1275.02,687.125 1275.58,687.125 1276.14,687.125 1276.7,687.125 1277.26,687.125 1277.82,687.125 1278.38,687.125 1278.94,687.125 1279.5,687.125 1280.06,687.125 1280.62,687.125 1281.18,687.125 1281.73,687.125 1282.29,687.125 1282.85,687.125 1283.41,687.125 1283.97,687.125 1284.53,687.125 1285.09,687.125 1285.65,687.125 1286.21,687.125 1286.77,687.125 1287.33,687.125 1287.89,687.125 1288.45,687.125 1289,687.125 1289.56,687.125 1290.12,687.125 1290.68,687.125 1291.24,687.125 1291.8,687.125 1292.36,687.125 1292.92,687.125 1293.48,687.125 1294.04,687.125 1294.6,687.125 1295.16,687.125 1295.72,687.125 1296.28,687.125 1296.83,687.125 1297.39,687.125 1297.95,687.125 1298.51,687.125 1299.07,687.125 1299.63,687.125 1300.19,687.125 1300.75,687.125 1301.31,687.125 1301.87,687.125 1302.43,687.125 1302.99,687.125 1303.55,687.125 1304.1,687.125 1304.66,687.125 1305.22,687.125 1305.78,687.125 1306.34,687.125 1306.9,687.125 1307.46,687.125 1308.02,687.125 1308.58,687.125 1309.14,687.125 1309.7,687.125 1310.26,687.125 1310.82,687.125 1311.38,687.125 1311.93,687.125 1312.49,687.125 1313.05,687.125 1313.61,687.125 1314.17,687.125 1314.73,687.125 1315.29,687.125 1315.85,687.125 1316.41,687.125 1316.97,687.125 1317.53,687.125 1318.09,687.125 1318.65,687.125 1319.2,687.125 1319.76,687.125 1320.32,687.125 1320.88,687.125 1321.44,687.125 1322,687.125 1322.56,687.125 1323.12,687.125 1323.68,687.125 1324.24,687.125 1324.8,687.125 1325.36,687.125 1325.92,687.125 1326.47,687.125 1327.03,687.125 1327.59,687.125 1328.15,687.125 1328.71,687.125 1329.27,687.125 1329.83,687.125 1330.39,687.125 1330.95,687.125 1331.51,687.125 1332.07,687.125 1332.63,687.125 1333.19,687.125 1333.75,687.125 1334.3,687.125 1334.86,687.125 1335.42,687.125 1335.98,687.125 1336.54,687.125 1337.1,687.125 1337.66,687.125 1338.22,687.125 1338.78,687.125 1339.34,687.125 1339.9,687.125 1340.46,687.125 1341.02,687.125 1341.57,687.125 1342.13,687.125 1342.69,687.125 1343.25,687.125 1343.81,687.125 1344.37,687.125 1344.93,687.125 1345.49,687.125 1346.05,687.125 1346.61,687.125 1347.17,687.125 1347.73,687.125 1348.29,687.125 1348.84,687.125 1349.4,687.125 1349.96,687.125 1350.52,687.125 1351.08,687.125 1351.64,687.125 1352.2,687.125 1352.76,687.125 1353.32,687.125 1353.88,687.125 1354.44,687.125 1355,687.125 1355.56,687.125 1356.12,687.125 1356.67,687.125 1357.23,687.125 1357.79,687.125 1358.35,687.125 1358.91,687.125 1359.47,687.125 1360.03,687.125 1360.59,687.125 1361.15,687.125 1361.71,687.125 1362.27,687.125 1362.83,687.125 1363.39,687.125 1363.94,687.125 1364.5,687.125 1365.06,687.125 1365.62,687.125 1366.18,687.125 1366.74,687.125 1367.3,687.125 1367.86,687.125 1368.42,687.125 1368.98,687.125 1369.54,687.125 1370.1,687.125 1370.66,687.125 1371.21,687.125 1371.77,687.125 1372.33,687.125 1372.89,687.125 1373.45,687.125 1374.01,687.125 1374.57,687.125 1375.13,687.125 1375.69,687.125 1376.25,687.125 1376.81,687.125 1377.37,687.125 1377.93,687.125 1378.49,687.125 1379.04,687.125 1379.6,687.125 1380.16,687.125 1380.72,687.125 1381.28,687.125 1381.84,687.125 1382.4,687.125 1382.96,687.125 1383.52,687.125 1384.08,687.125 1384.64,687.125 1385.2,687.125 1385.76,687.125 1386.31,687.125 1386.87,687.125 1387.43,687.125 1387.99,687.125 1388.55,687.125 1389.11,687.125 1389.67,687.125 1390.23,687.125 1390.79,687.125 1391.35,687.125 1391.91,687.125 1392.47,687.125 1393.03,687.125 1393.58,687.125 1394.14,687.125 1394.7,687.125 1395.26,687.125 1395.82,687.125 1396.38,687.125 1396.94,687.125 1397.5,687.125 1398.06,687.125 1398.62,687.125 1399.18,687.125 1399.74,687.125 1400.3,687.125 1400.86,687.125 1401.41,687.125 1401.97,687.125 1402.53,687.125 1403.09,687.125 1403.65,687.125 1404.21,687.125 1404.77,687.125 1405.33,687.125 1405.89,687.125 1406.45,687.125 1407.01,687.125 1407.57,687.125 1408.13,687.125 1408.68,687.125 1409.24,687.125 1409.8,687.125 1410.36,687.125 1410.92,687.125 1411.48,687.125 1412.04,687.125 1412.6,687.125 1413.16,687.125 1413.72,687.125 1414.28,687.125 1414.84,687.125 1415.4,687.125 1415.95,687.125 1416.51,687.125 1417.07,687.125 1417.63,687.125 1418.19,687.125 1418.75,687.125 1419.31,687.125 1419.87,687.125 1420.43,687.125 1420.99,687.125 1421.55,687.125 1422.11,687.125 1422.67,687.125 1423.23,687.125 1423.78,687.125 1424.34,687.125 1424.9,687.125 1425.46,687.125 1426.02,687.125 1426.58,687.125 1427.14,687.125 1427.7,687.125 1428.26,687.125 1428.82,687.125 1429.38,687.125 1429.94,687.125 1430.5,687.125 1431.05,687.125 1431.61,687.125 1432.17,687.125 1432.73,687.125 1433.29,687.125 1433.85,687.125 1434.41,687.125 1434.97,687.125 1435.53,687.125 1436.09,687.125 1436.65,687.125 1437.21,687.125 1437.77,687.125 1438.33,687.125 1438.88,687.125 1439.44,687.125 1440,687.125 1440.56,687.125 1441.12,687.125 1441.68,687.125 1442.24,687.125 1442.8,687.125 1443.36,687.125 1443.92,687.125 1444.48,687.125 1445.04,687.125 1445.6,687.125 1446.15,687.125 1446.71,687.125 1447.27,687.125 1447.83,687.125 1448.39,687.125 1448.95,687.125 1449.51,687.125 1450.07,687.125 1450.63,687.125 1451.19,687.125 1451.75,687.125 1452.31,687.125 1452.87,687.125 1453.42,687.125 1453.98,687.125 1454.54,687.125 1455.1,687.125 1455.66,687.125 1456.22,687.125 1456.78,687.125 1457.34,687.125 1457.9,687.125 1458.46,687.125 1459.02,687.125 1459.58,687.125 1460.14,687.125 1460.7,687.125 1461.25,687.125 1461.81,687.125 1462.37,687.125 1462.93,687.125 1463.49,687.125 1464.05,687.125 1464.61,687.125 1465.17,687.125 1465.73,687.125 1466.29,687.125 1466.85,687.125 1467.41,687.125 1467.97,687.125 1468.52,687.125 1469.08,687.125 1469.64,687.125 1470.2,687.125 1470.76,687.125 1471.32,687.125 1471.88,687.125 1472.44,687.125 1473,687.125 1473.56,687.125 1474.12,687.125 1474.68,687.125 1475.24,687.125 1475.79,687.125 1476.35,687.125 1476.91,687.125 1477.47,687.125 1478.03,687.125 1478.59,687.125 1479.15,687.125 1479.71,687.125 1480.27,687.125 1480.83,687.125 1481.39,687.125 1481.95,687.125 1482.51,687.125 1483.07,687.125 1483.62,687.125 1484.18,687.125 1484.74,687.125 1485.3,687.125 1485.86,687.125 1486.42,687.125 1486.98,687.125 1487.54,687.125 1488.1,687.125 1488.66,687.125 1489.22,687.125 1489.78,687.125 1490.34,687.125 1490.89,687.125 1491.45,687.125 1492.01,687.125 1492.57,687.125 1493.13,687.125 1493.69,687.125 1494.25,687.125 1494.81,687.125 1495.37,687.125 1495.93,687.125 1496.49,687.125 1497.05,687.125 1497.61,687.125 1498.16,687.125 1498.72,687.125 1499.28,687.125 1499.84,687.125 1500.4,687.125 1500.96,687.125 1501.52,687.125 1502.08,687.125 1502.64,687.125 1503.2,687.125 1503.76,687.125 1504.32,687.125 1504.88,687.125 1505.44,687.125 1505.99,687.125 1506.55,687.125 1507.11,687.125 1507.67,687.125 1508.23,687.125 1508.79,687.125 1509.35,687.125 1509.91,687.125 1510.47,687.125 1511.03,687.125 1511.59,687.125 1512.15,687.125 1512.71,687.125 1513.26,687.125 1513.82,687.125 1514.38,687.125 1514.94,687.125 1515.5,687.125 1516.06,687.125 1516.62,687.125 1517.18,687.125 1517.74,687.125 1518.3,687.125 1518.86,687.125 1519.42,687.125 1519.98,687.125 1520.53,687.125 1521.09,687.125 1521.65,687.125 1522.21,687.125 1522.77,687.125 1523.33,687.125 1523.89,687.125 1524.45,687.125 1525.01,687.125 1525.57,687.125 1526.13,687.125 1526.69,687.125 1527.25,687.125 1527.81,687.125 1528.36,687.125 1528.92,687.125 1529.48,687.125 1530.04,687.125 1530.6,687.125 1531.16,687.125 1531.72,687.125 1532.28,687.125 1532.84,687.125 1533.4,687.125 1533.96,687.125 1534.52,687.125 1535.08,687.125 1535.63,687.125 1536.19,687.125 1536.75,687.125 1537.31,687.125 1537.87,687.125 1538.43,687.125 1538.99,687.125 1539.55,687.125 1540.11,687.125 1540.67,687.125 1541.23,687.125 1541.79,687.125 1542.35,687.125 1542.9,687.125 1543.46,687.125 1544.02,687.125 1544.58,687.125 1545.14,687.125 1545.7,687.125 1546.26,687.125 1546.82,687.125 1547.38,687.125 1547.94,687.125 1548.5,687.125 1549.06,687.125 1549.62,687.125 1550.18,687.125 1550.73,687.125 1551.29,687.125 1551.85,687.125 1552.41,687.125 1552.97,687.125 1553.53,687.125 1554.09,687.125 1554.65,687.125 1555.21,687.125 1555.77,687.125 1556.33,687.125 1556.89,687.125 1557.45,687.125 1558,687.125 1558.56,687.125 1559.12,687.125 1559.68,687.125 1560.24,687.125 1560.8,687.125 1561.36,687.125 1561.92,687.125 1562.48,687.125 1563.04,687.125 1563.6,687.125 1564.16,687.125 1564.72,687.125 1565.28,687.125 1565.83,687.125 1566.39,687.125 1566.95,687.125 1567.51,687.125 1568.07,687.125 1568.63,687.125 1569.19,687.125 1569.75,687.125 1570.31,687.125 1570.87,687.125 1571.43,687.125 1571.99,687.125 1572.55,687.125 1573.1,687.125 1573.66,687.125 1574.22,687.125 1574.78,687.125 1575.34,687.125 1575.9,687.125 1576.46,687.125 1577.02,687.125 1577.58,687.125 1578.14,687.125 1578.7,687.125 1579.26,687.125 1579.82,687.125 1580.37,687.125 1580.93,687.125 1581.49,687.125 1582.05,687.125 1582.61,687.125 1583.17,687.125 1583.73,687.125 1584.29,687.125 1584.85,687.125 1585.41,687.125 1585.97,687.125 1586.53,687.125 1587.09,687.125 1587.65,687.125 1588.2,687.125 1588.76,687.125 1589.32,687.125 1589.88,687.125 1590.44,687.125 1591,687.125 1591.56,687.125 1592.12,687.125 1592.68,687.125 1593.24,687.125 1593.8,687.125 1594.36,687.125 1594.92,687.125 1595.47,687.125 1596.03,687.125 1596.59,687.125 1597.15,687.125 1597.71,687.125 1598.27,687.125 1598.83,687.125 1599.39,687.125 1599.95,687.125 1600.51,687.125 1601.07,687.125 1601.63,687.125 1602.19,687.125 1602.74,687.125 1603.3,687.125 1603.86,687.125 1604.42,687.125 1604.98,687.125 1605.54,687.125 1606.1,687.125 1606.66,687.125 1607.22,687.125 1607.78,687.125 1608.34,687.125 1608.9,687.125 1609.46,687.125 1610.02,687.125 1610.57,687.125 1611.13,687.125 1611.69,687.125 1612.25,687.125 1612.81,687.125 1613.37,687.125 1613.93,687.125 1614.49,687.125 1615.05,687.125 1615.61,687.125 1616.17,687.125 1616.73,687.125 1617.29,687.125 1617.84,687.125 1618.4,687.125 1618.96,687.125 1619.52,687.125 1620.08,687.125 1620.64,687.125 1621.2,687.125 1621.76,687.125 1622.32,687.125 1622.88,687.125 1623.44,687.125 1624,687.125 1624.56,687.125 1625.11,687.125 1625.67,687.125 1626.23,687.125 1626.79,687.125 1627.35,687.125 1627.91,687.125 1628.47,687.125 1629.03,687.125 1629.59,687.125 1630.15,687.125 1630.71,687.125 1631.27,687.125 1631.83,687.125 1632.39,687.125 1632.94,687.125 1633.5,687.125 1634.06,687.125 1634.62,687.125 1635.18,687.125 1635.74,687.125 1636.3,687.125 1636.86,687.125 1637.42,687.125 1637.98,687.125 1638.54,687.125 1639.1,687.125 1639.66,687.125 1640.21,687.125 1640.77,687.125 1641.33,687.125 1641.89,687.125 1642.45,687.125 1643.01,687.125 1643.57,687.125 1644.13,687.125 1644.69,687.125 1645.25,687.125 1645.81,687.125 1646.37,687.125 1646.93,687.125 1647.48,687.125 1648.04,687.125 1648.6,687.125 1649.16,687.125 1649.72,687.125 1650.28,687.125 1650.84,687.125 1651.4,687.125 1651.96,687.125 1652.52,687.125 1653.08,687.125 1653.64,687.125 1654.2,687.125 1654.76,687.125 1655.31,687.125 1655.87,687.125 1656.43,687.125 1656.99,687.125 1657.55,687.125 1658.11,687.125 1658.67,687.125 1659.23,687.125 1659.79,687.125 1660.35,687.125 1660.91,687.125 1661.47,687.125 1662.03,687.125 1662.58,687.125 1663.14,687.125 1663.7,687.125 1664.26,687.125 1664.82,687.125 1665.38,687.125 1665.94,687.125 1666.5,687.125 1667.06,687.125 1667.62,687.125 1668.18,687.125 1668.74,687.125 1669.3,687.125 1669.85,687.125 1670.41,687.125 1670.97,687.125 1671.53,687.125 1672.09,687.125 1672.65,687.125 1673.21,687.125 1673.77,687.125 1674.33,687.125 1674.89,687.125 1675.45,687.125 1676.01,687.125 1676.57,687.125 1677.13,687.125 1677.68,687.125 1678.24,687.125 1678.8,687.125 1679.36,687.125 1679.92,687.125 1680.48,687.125 1681.04,687.125 1681.6,687.125 1682.16,687.125 1682.72,687.125 1683.28,687.125 1683.84,687.125 1684.4,687.125 1684.95,687.125 1685.51,687.125 1686.07,687.125 1686.63,687.125 1687.19,687.125 1687.75,687.125 1688.31,687.125 1688.87,687.125 1689.43,687.125 1689.99,687.125 1690.55,687.125 1691.11,687.125 1691.67,687.125 1692.23,687.125 1692.78,687.125 1693.34,687.125 1693.9,687.125 1694.46,687.125 1695.02,687.125 1695.58,687.125 1696.14,687.125 1696.7,687.125 1697.26,687.125 1697.82,687.125 1698.38,687.125 1698.94,687.125 1699.5,687.125 1700.05,687.125 1700.61,687.125 1701.17,687.125 1701.73,687.125 1702.29,687.125 1702.85,687.125 1703.41,687.125 1703.97,687.125 1704.53,687.125 1705.09,687.125 1705.65,687.125 1706.21,687.125 1706.77,687.125 1707.32,687.125 1707.88,687.125 1708.44,687.125 1709,687.125 1709.56,687.125 1710.12,687.125 1710.68,687.125 1711.24,687.125 1711.8,687.125 1712.36,687.125 1712.92,687.125 1713.48,687.125 1714.04,687.125 1714.6,687.125 1715.15,687.125 1715.71,687.125 1716.27,687.125 1716.83,687.125 1717.39,687.125 1717.95,687.125 1718.51,687.125 1719.07,687.125 1719.63,687.125 1720.19,687.125 1720.75,687.125 1721.31,687.125 1721.87,687.125 1722.42,687.125 1722.98,687.125 1723.54,687.125 1724.1,687.125 1724.66,687.125 1725.22,687.125 1725.78,687.125 1726.34,687.125 1726.9,687.125 1727.46,687.125 1728.02,687.125 1728.58,687.125 1729.14,687.125 1729.69,687.125 1730.25,687.125 1730.81,687.125 1731.37,687.125 1731.93,687.125 1732.49,687.125 1733.05,687.125 1733.61,687.125 1734.17,687.125 1734.73,687.125 1735.29,687.125 1735.85,687.125 1736.41,687.125 1736.97,687.125 1737.52,687.125 1738.08,687.125 1738.64,687.125 1739.2,687.125 1739.76,687.125 1740.32,687.125 1740.88,687.125 1741.44,687.125 1742,687.125 1742.56,687.125 1743.12,687.125 1743.68,687.125 1744.24,687.125 1744.79,687.125 1745.35,687.125 1745.91,687.125 1746.47,687.125 1747.03,687.125 1747.59,687.125 1748.15,687.125 1748.71,687.125 1749.27,687.125 1749.83,687.125 1750.39,687.125 1750.95,687.125 1751.51,687.125 1752.06,687.125 1752.62,687.125 1753.18,687.125 1753.74,687.125 1754.3,687.125 1754.86,687.125 1755.42,687.125 1755.98,687.125 1756.54,687.125 1757.1,687.125 1757.66,687.125 1758.22,687.125 1758.78,687.125 1759.34,687.125 1759.89,687.125 1760.45,687.125 1761.01,687.125 1761.57,687.125 1762.13,687.125 1762.69,687.125 1763.25,687.125 1763.81,687.125 1764.37,687.125 1764.93,687.125 1765.49,687.125 1766.05,687.125 1766.61,687.125 1767.16,687.125 1767.72,687.125 1768.28,687.125 1768.84,687.125 1769.4,687.125 1769.96,687.125 1770.52,687.125 1771.08,687.125 1771.64,687.125 1772.2,687.125 1772.76,687.125 1773.32,687.125 1773.88,687.125 1774.43,687.125 1774.99,687.125 1775.55,687.125 1776.11,687.125 1776.67,687.125 1777.23,687.125 1777.79,687.125 1778.35,687.125 1778.91,687.125 1779.47,687.125 1780.03,687.125 1780.59,687.125 1781.15,687.125 1781.71,687.125 1782.26,687.125 1782.82,687.125 1783.38,687.125 1783.94,687.125 1784.5,687.125 1785.06,687.125 1785.62,687.125 1786.18,687.125 1786.74,687.125 1787.3,687.125 1787.86,687.125 1788.42,687.125 1788.98,687.125 1789.53,687.125 1790.09,687.125 1790.65,687.125 1791.21,687.125 1791.77,687.125 1792.33,687.125 1792.89,687.125 1793.45,687.125 1794.01,687.125 1794.57,687.125 1795.13,687.125 1795.69,687.125 1796.25,687.125 1796.8,687.125 1797.36,687.125 1797.92,687.125 1798.48,687.125 1799.04,687.125 1799.6,687.125 1800.16,687.125 1800.72,687.125 1801.28,687.125 1801.84,687.125 1802.4,687.125 1802.96,687.125 1803.52,687.125 1804.08,687.125 1804.63,687.125 1805.19,687.125 1805.75,687.125 1806.31,687.125 1806.87,687.125 1807.43,687.125 1807.99,687.125 1808.55,687.125 1809.11,687.125 1809.67,687.125 1810.23,687.125 1810.79,687.125 1811.35,687.125 1811.9,687.125 1812.46,687.125 1813.02,687.125 1813.58,687.125 1814.14,687.125 1814.7,687.125 1815.26,687.125 1815.82,687.125 1816.38,687.125 1816.94,687.125 1817.5,687.125 1818.06,687.125 1818.62,687.125 1819.18,687.125 1819.73,687.125 1820.29,687.125 1820.85,687.125 1821.41,687.125 1821.97,687.125 1822.53,687.125 1823.09,687.125 1823.65,687.125 1824.21,687.125 1824.77,687.125 1825.33,687.125 1825.89,687.125 1826.45,687.125 1827,687.125 1827.56,687.125 1828.12,687.125 1828.68,687.125 1829.24,687.125 1829.8,687.125 1830.36,687.125 1830.92,687.125 1831.48,687.125 1832.04,687.125 1832.6,687.125 1833.16,687.125 1833.72,687.125 1834.27,687.125 1834.83,687.125 1835.39,687.125 1835.95,687.125 1836.51,687.125 1837.07,687.125 1837.63,687.125 1838.19,687.125 \"/>\n<path clip-path=\"url(#clip193)\" d=\"M720.247 685.402 L720.806 685.402 L721.365 685.402 L721.924 685.402 L722.484 685.402 L723.043 685.402 L723.602 685.402 L724.161 685.402 L724.721 685.402 L725.28 685.402 L725.839 685.402 L726.398 685.402 L726.958 685.402 L727.517 685.402 L728.076 685.402 L728.635 685.402 L729.195 685.402 L729.754 685.402 L730.313 685.402 L730.872 685.402 L731.432 685.402 L731.991 685.402 L732.55 685.402 L733.109 685.402 L733.669 685.402 L734.228 685.402 L734.787 685.402 L735.346 685.402 L735.906 685.402 L736.465 685.402 L737.024 685.402 L737.583 685.402 L738.143 685.402 L738.702 685.402 L739.261 685.402 L739.82 685.402 L740.38 685.402 L740.939 685.402 L741.498 685.402 L742.057 685.402 L742.617 685.402 L743.176 685.402 L743.735 685.402 L744.294 685.402 L744.854 685.402 L745.413 685.402 L745.972 685.402 L746.531 685.402 L747.091 685.402 L747.65 685.402 L748.209 685.402 L748.768 685.402 L749.328 685.402 L749.887 685.402 L750.446 685.402 L751.005 685.402 L751.565 685.402 L752.124 685.402 L752.683 685.402 L753.242 685.402 L753.802 685.402 L754.361 685.402 L754.92 685.402 L755.479 685.402 L756.039 685.402 L756.598 685.402 L757.157 685.402 L757.716 685.402 L758.276 685.402 L758.835 685.402 L759.394 685.402 L759.953 685.402 L760.513 685.402 L761.072 685.402 L761.631 685.402 L762.19 685.402 L762.75 685.402 L763.309 685.402 L763.868 685.402 L764.427 685.402 L764.987 685.402 L765.546 685.402 L766.105 685.402 L766.664 685.402 L767.224 685.402 L767.783 685.402 L768.342 685.402 L768.901 685.402 L769.461 685.402 L770.02 685.402 L770.579 685.402 L771.138 685.402 L771.698 685.402 L772.257 685.402 L772.816 685.402 L773.375 685.402 L773.935 685.402 L774.494 685.402 L775.053 685.402 L775.612 685.402 L776.172 685.402 L776.731 685.402 L777.29 685.402 L777.849 685.402 L778.409 685.402 L778.968 685.402 L779.527 685.402 L780.086 685.402 L780.646 685.402 L781.205 685.402 L781.764 685.402 L782.323 685.402 L782.883 685.402 L783.442 685.402 L784.001 685.402 L784.56 685.402 L785.12 685.402 L785.679 685.402 L786.238 685.402 L786.797 685.402 L787.357 685.402 L787.916 685.402 L788.475 685.402 L789.034 685.402 L789.594 685.402 L790.153 685.402 L790.712 685.402 L791.271 685.402 L791.831 685.402 L792.39 685.402 L792.949 685.402 L793.508 685.402 L794.068 685.402 L794.627 685.402 L795.186 685.402 L795.745 685.402 L796.305 685.402 L796.864 685.402 L797.423 685.402 L797.982 685.402 L798.542 685.402 L799.101 685.402 L799.66 685.402 L800.219 685.402 L800.779 685.402 L801.338 685.402 L801.897 685.402 L802.456 685.402 L803.016 685.402 L803.575 685.402 L804.134 685.402 L804.693 685.402 L805.253 685.402 L805.812 685.402 L806.371 685.402 L806.931 685.402 L807.49 685.402 L808.049 685.402 L808.608 685.402 L809.168 685.402 L809.727 685.402 L810.286 685.402 L810.845 685.402 L811.405 685.402 L811.964 685.402 L812.523 685.402 L813.082 685.402 L813.642 685.402 L814.201 685.402 L814.76 685.402 L815.319 685.402 L815.879 685.402 L816.438 685.402 L816.997 685.402 L817.556 685.402 L818.116 685.402 L818.675 685.402 L819.234 685.402 L819.793 685.402 L820.353 685.402 L820.912 685.402 L821.471 685.402 L822.03 685.402 L822.59 685.402 L823.149 685.402 L823.708 685.402 L824.267 685.402 L824.827 685.402 L825.386 685.402 L825.945 685.402 L826.504 685.402 L827.064 685.402 L827.623 685.402 L828.182 685.402 L828.741 685.402 L829.301 685.402 L829.86 685.402 L830.419 685.402 L830.978 685.402 L831.538 685.402 L832.097 685.402 L832.656 685.402 L833.215 685.402 L833.775 685.402 L834.334 685.402 L834.893 685.402 L835.452 685.402 L836.012 685.402 L836.571 685.402 L837.13 685.402 L837.689 685.402 L838.249 685.402 L838.808 685.402 L839.367 685.402 L839.926 685.402 L840.486 685.402 L841.045 685.402 L841.604 685.402 L842.163 685.402 L842.723 685.402 L843.282 685.402 L843.841 685.402 L844.4 685.402 L844.96 685.402 L845.519 685.402 L846.078 685.402 L846.637 685.402 L847.197 685.402 L847.756 685.402 L848.315 685.402 L848.874 685.402 L849.434 685.402 L849.993 685.402 L850.552 685.402 L851.111 685.402 L851.671 685.402 L852.23 685.402 L852.789 685.402 L853.348 685.402 L853.908 685.402 L854.467 685.402 L855.026 685.402 L855.585 685.402 L856.145 685.402 L856.704 685.402 L857.263 685.402 L857.822 685.402 L858.382 685.402 L858.941 685.402 L859.5 685.402 L860.059 685.402 L860.619 685.402 L861.178 685.402 L861.737 685.402 L862.296 685.402 L862.856 685.402 L863.415 685.402 L863.974 685.402 L864.533 685.402 L865.093 685.402 L865.652 685.402 L866.211 685.402 L866.77 685.402 L867.33 685.402 L867.889 685.402 L868.448 685.402 L869.007 685.402 L869.567 685.402 L870.126 685.402 L870.685 685.402 L871.244 685.402 L871.804 685.402 L872.363 685.402 L872.922 685.402 L873.481 685.402 L874.041 685.402 L874.6 685.402 L875.159 685.402 L875.718 685.402 L876.278 685.402 L876.837 685.402 L877.396 685.402 L877.955 685.402 L878.515 685.402 L879.074 685.402 L879.633 685.402 L880.192 685.402 L880.752 685.402 L881.311 685.402 L881.87 685.402 L882.429 685.402 L882.989 685.402 L883.548 685.402 L884.107 685.402 L884.666 685.402 L885.226 685.402 L885.785 685.402 L886.344 685.402 L886.903 685.402 L887.463 685.402 L888.022 685.402 L888.581 685.402 L889.14 685.402 L889.7 685.402 L890.259 685.402 L890.818 685.402 L891.377 685.402 L891.937 685.402 L892.496 685.402 L893.055 685.402 L893.614 685.402 L894.174 685.402 L894.733 685.402 L895.292 685.402 L895.851 685.402 L896.411 685.402 L896.97 685.402 L897.529 685.402 L898.088 685.402 L898.648 685.402 L899.207 685.402 L899.766 685.402 L900.325 685.402 L900.885 685.402 L901.444 685.402 L902.003 685.402 L902.562 685.402 L903.122 685.402 L903.681 685.402 L904.24 685.402 L904.799 685.402 L905.359 685.402 L905.918 685.402 L906.477 685.402 L907.036 685.402 L907.596 685.402 L908.155 685.402 L908.714 685.402 L909.273 685.402 L909.833 685.402 L910.392 685.402 L910.951 685.402 L911.51 685.402 L912.07 685.402 L912.629 685.402 L913.188 685.402 L913.747 685.402 L914.307 685.402 L914.866 685.402 L915.425 685.402 L915.984 685.402 L916.544 685.402 L917.103 685.402 L917.662 685.402 L918.221 685.402 L918.781 685.402 L919.34 685.402 L919.899 685.402 L920.458 685.402 L921.018 685.402 L921.577 685.402 L922.136 685.402 L922.695 685.402 L923.255 685.402 L923.814 685.402 L924.373 685.402 L924.932 685.402 L925.492 685.402 L926.051 685.402 L926.61 685.402 L927.169 685.402 L927.729 685.402 L928.288 685.402 L928.847 685.402 L929.406 685.402 L929.966 685.402 L930.525 685.402 L931.084 685.402 L931.644 685.402 L932.203 685.402 L932.762 685.402 L933.321 685.402 L933.881 685.402 L934.44 685.402 L934.999 685.402 L935.558 685.402 L936.118 685.402 L936.677 685.402 L937.236 685.402 L937.795 685.402 L938.355 685.402 L938.914 685.402 L939.473 685.402 L940.032 685.402 L940.592 685.402 L941.151 685.402 L941.71 685.402 L942.269 685.402 L942.829 685.402 L943.388 685.402 L943.947 685.402 L944.506 685.402 L945.066 685.402 L945.625 685.402 L946.184 685.402 L946.743 685.402 L947.303 685.402 L947.862 685.402 L948.421 685.402 L948.98 685.402 L949.54 685.402 L950.099 685.402 L950.658 685.402 L951.217 685.402 L951.777 685.402 L952.336 685.402 L952.895 685.402 L953.454 685.402 L954.014 685.402 L954.573 685.402 L955.132 685.402 L955.691 685.402 L956.251 685.402 L956.81 685.402 L957.369 685.402 L957.928 685.402 L958.488 685.402 L959.047 685.402 L959.606 685.402 L960.165 685.402 L960.725 685.402 L961.284 685.402 L961.843 685.402 L962.402 685.402 L962.962 685.402 L963.521 685.402 L964.08 685.402 L964.639 685.402 L965.199 685.402 L965.758 685.402 L966.317 685.402 L966.876 685.402 L967.436 685.402 L967.995 685.402 L968.554 685.402 L969.113 685.402 L969.673 685.402 L970.232 685.402 L970.791 685.402 L971.35 685.402 L971.91 685.402 L972.469 685.402 L973.028 685.402 L973.587 685.402 L974.147 685.402 L974.706 685.402 L975.265 685.402 L975.824 685.402 L976.384 685.402 L976.943 685.402 L977.502 685.402 L978.061 685.402 L978.621 685.402 L979.18 685.402 L979.739 685.402 L980.298 685.402 L980.858 685.402 L981.417 685.402 L981.976 685.402 L982.535 685.402 L983.095 685.402 L983.654 685.402 L984.213 685.402 L984.772 685.402 L985.332 685.402 L985.891 685.402 L986.45 685.402 L987.009 685.402 L987.569 685.402 L988.128 685.402 L988.687 685.402 L989.246 685.402 L989.806 685.402 L990.365 685.402 L990.924 685.402 L991.483 685.402 L992.043 685.402 L992.602 685.402 L993.161 685.402 L993.72 685.402 L994.28 685.402 L994.839 685.402 L995.398 685.402 L995.957 685.402 L996.517 685.402 L997.076 685.402 L997.635 685.402 L998.194 685.402 L998.754 685.402 L999.313 685.402 L999.872 685.402 L1000.43 685.402 L1000.99 685.402 L1001.55 685.402 L1002.11 685.402 L1002.67 685.402 L1003.23 685.402 L1003.79 685.402 L1004.35 685.402 L1004.91 685.402 L1005.46 685.402 L1006.02 685.402 L1006.58 685.402 L1007.14 685.402 L1007.7 685.402 L1008.26 685.402 L1008.82 685.402 L1009.38 685.402 L1009.94 685.402 L1010.5 685.402 L1011.06 685.402 L1011.62 685.402 L1012.18 685.402 L1012.73 685.402 L1013.29 685.402 L1013.85 685.402 L1014.41 685.402 L1014.97 685.402 L1015.53 685.402 L1016.09 685.402 L1016.65 685.402 L1017.21 685.402 L1017.77 685.402 L1018.33 685.402 L1018.89 685.402 L1019.45 685.402 L1020.01 685.402 L1020.56 685.402 L1021.12 685.402 L1021.68 685.402 L1022.24 685.402 L1022.8 685.402 L1023.36 685.402 L1023.92 685.402 L1024.48 685.402 L1025.04 685.402 L1025.6 685.402 L1026.16 685.402 L1026.72 685.402 L1027.28 685.402 L1027.83 685.402 L1028.39 685.402 L1028.95 685.402 L1029.51 685.402 L1030.07 685.402 L1030.63 685.402 L1031.19 685.402 L1031.75 685.402 L1032.31 685.402 L1032.87 685.402 L1033.43 685.402 L1033.99 685.402 L1034.55 685.402 L1035.1 685.402 L1035.66 685.402 L1036.22 685.402 L1036.78 685.402 L1037.34 685.402 L1037.9 685.402 L1038.46 685.402 L1039.02 685.402 L1039.58 685.402 L1040.14 685.402 L1040.7 685.402 L1041.26 685.402 L1041.82 685.402 L1042.38 685.402 L1042.93 685.402 L1043.49 685.402 L1044.05 685.402 L1044.61 685.402 L1045.17 685.402 L1045.73 685.402 L1046.29 685.402 L1046.85 685.402 L1047.41 685.402 L1047.97 685.402 L1048.53 685.402 L1049.09 685.402 L1049.65 685.402 L1050.2 685.402 L1050.76 685.402 L1051.32 685.402 L1051.88 685.402 L1052.44 685.402 L1053 685.402 L1053.56 685.402 L1054.12 685.402 L1054.68 685.402 L1055.24 685.402 L1055.8 685.402 L1056.36 685.402 L1056.92 685.402 L1057.48 685.402 L1058.03 685.402 L1058.59 685.402 L1059.15 685.402 L1059.71 685.402 L1060.27 685.402 L1060.83 685.402 L1061.39 685.402 L1061.95 685.402 L1062.51 685.402 L1063.07 685.402 L1063.63 685.402 L1064.19 685.402 L1064.75 685.402 L1065.3 685.402 L1065.86 685.402 L1066.42 685.402 L1066.98 685.402 L1067.54 685.402 L1068.1 685.402 L1068.66 685.402 L1069.22 685.402 L1069.78 685.402 L1070.34 685.402 L1070.9 685.402 L1071.46 685.402 L1072.02 685.402 L1072.57 685.402 L1073.13 685.402 L1073.69 685.402 L1074.25 685.402 L1074.81 685.402 L1075.37 685.402 L1075.93 685.402 L1076.49 685.402 L1077.05 685.402 L1077.61 685.402 L1078.17 685.402 L1078.73 685.402 L1079.29 685.402 L1079.85 685.402 L1080.4 685.402 L1080.96 685.402 L1081.52 685.402 L1082.08 685.402 L1082.64 685.402 L1083.2 685.402 L1083.76 685.402 L1084.32 685.402 L1084.88 685.402 L1085.44 685.402 L1086 685.402 L1086.56 685.402 L1087.12 685.402 L1087.67 685.402 L1088.23 685.402 L1088.79 685.402 L1089.35 685.402 L1089.91 685.402 L1090.47 685.402 L1091.03 685.402 L1091.59 685.402 L1092.15 685.402 L1092.71 685.402 L1093.27 685.402 L1093.83 685.402 L1094.39 685.402 L1094.94 685.402 L1095.5 685.402 L1096.06 685.402 L1096.62 685.402 L1097.18 685.402 L1097.74 685.402 L1098.3 685.402 L1098.86 685.402 L1099.42 685.402 L1099.98 685.402 L1100.54 685.402 L1101.1 685.402 L1101.66 685.402 L1102.22 685.402 L1102.77 685.402 L1103.33 685.402 L1103.89 685.402 L1104.45 685.402 L1105.01 685.402 L1105.57 685.402 L1106.13 685.402 L1106.69 685.402 L1107.25 685.402 L1107.81 685.402 L1108.37 685.402 L1108.93 685.402 L1109.49 685.402 L1110.04 685.402 L1110.6 685.402 L1111.16 685.402 L1111.72 685.402 L1112.28 685.402 L1112.84 685.402 L1113.4 685.402 L1113.96 685.402 L1114.52 685.402 L1115.08 685.402 L1115.64 685.402 L1116.2 685.402 L1116.76 685.402 L1117.31 685.402 L1117.87 685.402 L1118.43 685.402 L1118.99 685.402 L1119.55 685.402 L1120.11 685.402 L1120.67 685.402 L1121.23 685.402 L1121.79 685.402 L1122.35 685.402 L1122.91 685.402 L1123.47 685.402 L1124.03 685.402 L1124.59 685.402 L1125.14 685.402 L1125.7 685.402 L1126.26 685.402 L1126.82 685.402 L1127.38 685.402 L1127.94 685.402 L1128.5 685.402 L1129.06 685.402 L1129.62 685.402 L1130.18 685.402 L1130.74 685.402 L1131.3 685.402 L1131.86 685.402 L1132.41 685.402 L1132.97 685.402 L1133.53 685.402 L1134.09 685.402 L1134.65 685.402 L1135.21 685.402 L1135.77 685.402 L1136.33 685.402 L1136.89 685.402 L1137.45 685.402 L1138.01 685.402 L1138.57 685.402 L1139.13 685.402 L1139.68 685.402 L1140.24 685.402 L1140.8 685.402 L1141.36 685.402 L1141.92 685.402 L1142.48 685.402 L1143.04 685.402 L1143.6 685.402 L1144.16 685.402 L1144.72 685.402 L1145.28 685.402 L1145.84 685.402 L1146.4 685.402 L1146.96 685.402 L1147.51 685.402 L1148.07 685.402 L1148.63 685.402 L1149.19 685.402 L1149.75 685.402 L1150.31 685.402 L1150.87 685.402 L1151.43 685.402 L1151.99 685.402 L1152.55 685.402 L1153.11 685.402 L1153.67 685.402 L1154.23 685.402 L1154.78 685.402 L1155.34 685.402 L1155.9 685.402 L1156.46 685.402 L1157.02 685.402 L1157.58 685.402 L1158.14 685.402 L1158.7 685.402 L1159.26 685.402 L1159.82 685.402 L1160.38 685.402 L1160.94 685.402 L1161.5 685.402 L1162.05 685.402 L1162.61 685.402 L1163.17 685.402 L1163.73 685.402 L1164.29 685.402 L1164.85 685.402 L1165.41 685.402 L1165.97 685.402 L1166.53 685.402 L1167.09 685.402 L1167.65 685.402 L1168.21 685.402 L1168.77 685.402 L1169.33 685.402 L1169.88 685.402 L1170.44 685.402 L1171 685.402 L1171.56 685.402 L1172.12 685.402 L1172.68 685.402 L1173.24 685.402 L1173.8 685.402 L1174.36 685.402 L1174.92 685.402 L1175.48 685.402 L1176.04 685.402 L1176.6 685.402 L1177.15 685.402 L1177.71 685.402 L1178.27 685.402 L1178.83 685.402 L1179.39 685.402 L1179.95 685.402 L1180.51 685.402 L1181.07 685.402 L1181.63 685.402 L1182.19 685.402 L1182.75 685.402 L1183.31 685.402 L1183.87 685.402 L1184.43 685.402 L1184.98 685.402 L1185.54 685.402 L1186.1 685.402 L1186.66 685.402 L1187.22 685.402 L1187.78 685.402 L1188.34 685.402 L1188.9 685.402 L1189.46 685.402 L1190.02 685.402 L1190.58 685.402 L1191.14 685.402 L1191.7 685.402 L1192.25 685.402 L1192.81 685.402 L1193.37 685.402 L1193.93 685.402 L1194.49 685.402 L1195.05 685.402 L1195.61 685.402 L1196.17 685.402 L1196.73 685.402 L1197.29 685.402 L1197.85 685.402 L1198.41 685.402 L1198.97 685.402 L1199.52 685.402 L1200.08 685.402 L1200.64 685.402 L1201.2 685.402 L1201.76 685.402 L1202.32 685.402 L1202.88 685.402 L1203.44 685.402 L1204 685.402 L1204.56 685.402 L1205.12 685.402 L1205.68 685.402 L1206.24 685.402 L1206.8 685.402 L1207.35 685.402 L1207.91 685.402 L1208.47 685.402 L1209.03 685.402 L1209.59 685.402 L1210.15 685.402 L1210.71 685.402 L1211.27 685.402 L1211.83 685.402 L1212.39 685.402 L1212.95 685.402 L1213.51 685.402 L1214.07 685.402 L1214.62 685.402 L1215.18 685.402 L1215.74 685.402 L1216.3 685.402 L1216.86 685.402 L1217.42 685.402 L1217.98 685.402 L1218.54 685.402 L1219.1 685.402 L1219.66 685.402 L1220.22 685.402 L1220.78 685.402 L1221.34 685.402 L1221.89 685.402 L1222.45 685.402 L1223.01 685.402 L1223.57 685.402 L1224.13 685.402 L1224.69 685.402 L1225.25 685.402 L1225.81 685.402 L1226.37 685.402 L1226.93 685.402 L1227.49 685.402 L1228.05 685.402 L1228.61 685.402 L1229.17 685.402 L1229.72 685.402 L1230.28 685.402 L1230.84 685.402 L1231.4 685.402 L1231.96 685.402 L1232.52 685.402 L1233.08 685.402 L1233.64 685.402 L1234.2 685.402 L1234.76 685.402 L1235.32 685.402 L1235.88 685.402 L1236.44 685.402 L1236.99 685.402 L1237.55 685.402 L1238.11 685.402 L1238.67 685.402 L1239.23 685.402 L1239.79 685.402 L1240.35 685.402 L1240.91 685.402 L1241.47 685.402 L1242.03 685.402 L1242.59 685.402 L1243.15 685.402 L1243.71 685.402 L1244.26 685.402 L1244.82 685.402 L1245.38 685.402 L1245.94 685.402 L1246.5 685.402 L1247.06 685.402 L1247.62 685.402 L1248.18 685.402 L1248.74 685.402 L1249.3 685.402 L1249.86 685.402 L1250.42 685.402 L1250.98 685.402 L1251.54 685.402 L1252.09 685.402 L1252.65 685.402 L1253.21 685.402 L1253.77 685.402 L1254.33 685.402 L1254.89 685.402 L1255.45 685.402 L1256.01 685.402 L1256.57 685.402 L1257.13 685.402 L1257.69 685.402 L1258.25 685.402 L1258.81 685.402 L1259.36 685.402 L1259.92 685.402 L1260.48 685.402 L1261.04 685.402 L1261.6 685.402 L1262.16 685.402 L1262.72 685.402 L1263.28 685.402 L1263.84 685.402 L1264.4 685.402 L1264.96 685.402 L1265.52 685.402 L1266.08 685.402 L1266.63 685.402 L1267.19 685.402 L1267.75 685.402 L1268.31 685.402 L1268.87 685.402 L1269.43 685.402 L1269.99 685.402 L1270.55 685.402 L1271.11 685.402 L1271.67 685.402 L1272.23 685.402 L1272.79 685.402 L1273.35 685.402 L1273.91 685.402 L1274.46 685.402 L1275.02 685.402 L1275.58 685.402 L1276.14 685.402 L1276.7 685.402 L1277.26 685.402 L1277.82 685.402 L1278.38 685.402 L1278.94 685.402 L1279.5 685.402 L1280.06 685.402 L1280.62 685.402 L1281.18 685.402 L1281.73 685.402 L1282.29 685.402 L1282.85 685.402 L1283.41 685.402 L1283.97 685.402 L1284.53 685.402 L1285.09 685.402 L1285.65 685.402 L1286.21 685.402 L1286.77 685.402 L1287.33 685.402 L1287.89 685.402 L1288.45 685.402 L1289 685.402 L1289.56 685.402 L1290.12 685.402 L1290.68 685.402 L1291.24 685.402 L1291.8 685.402 L1292.36 685.402 L1292.92 685.402 L1293.48 685.402 L1294.04 685.402 L1294.6 685.402 L1295.16 685.402 L1295.72 685.402 L1296.28 685.402 L1296.83 685.402 L1297.39 685.402 L1297.95 685.402 L1298.51 685.402 L1299.07 685.402 L1299.63 685.402 L1300.19 685.402 L1300.75 685.402 L1301.31 685.402 L1301.87 685.402 L1302.43 685.402 L1302.99 685.402 L1303.55 685.402 L1304.1 685.402 L1304.66 685.402 L1305.22 685.402 L1305.78 685.402 L1306.34 685.402 L1306.9 685.402 L1307.46 685.402 L1308.02 685.402 L1308.58 685.402 L1309.14 685.402 L1309.7 685.402 L1310.26 685.402 L1310.82 685.402 L1311.38 685.402 L1311.93 685.402 L1312.49 685.402 L1313.05 685.402 L1313.61 685.402 L1314.17 685.402 L1314.73 685.402 L1315.29 685.402 L1315.85 685.402 L1316.41 685.402 L1316.97 685.402 L1317.53 685.402 L1318.09 685.402 L1318.65 685.402 L1319.2 685.402 L1319.76 685.402 L1320.32 685.402 L1320.88 685.402 L1321.44 685.402 L1322 685.402 L1322.56 685.402 L1323.12 685.402 L1323.68 685.402 L1324.24 685.402 L1324.8 685.402 L1325.36 685.402 L1325.92 685.402 L1326.47 685.402 L1327.03 685.402 L1327.59 685.402 L1328.15 685.402 L1328.71 685.402 L1329.27 685.402 L1329.83 685.402 L1330.39 685.402 L1330.95 685.402 L1331.51 685.402 L1332.07 685.402 L1332.63 685.402 L1333.19 685.402 L1333.75 685.402 L1334.3 685.402 L1334.86 685.402 L1335.42 685.402 L1335.98 685.402 L1336.54 685.402 L1337.1 685.402 L1337.66 685.402 L1338.22 685.402 L1338.78 685.402 L1339.34 685.402 L1339.9 685.402 L1340.46 685.402 L1341.02 685.402 L1341.57 685.402 L1342.13 685.402 L1342.69 685.402 L1343.25 685.402 L1343.81 685.402 L1344.37 685.402 L1344.93 685.402 L1345.49 685.402 L1346.05 685.402 L1346.61 685.402 L1347.17 685.402 L1347.73 685.402 L1348.29 685.402 L1348.84 685.402 L1349.4 685.402 L1349.96 685.402 L1350.52 685.402 L1351.08 685.402 L1351.64 685.402 L1352.2 685.402 L1352.76 685.402 L1353.32 685.402 L1353.88 685.402 L1354.44 685.402 L1355 685.402 L1355.56 685.402 L1356.12 685.402 L1356.67 685.402 L1357.23 685.402 L1357.79 685.402 L1358.35 685.402 L1358.91 685.402 L1359.47 685.402 L1360.03 685.402 L1360.59 685.402 L1361.15 685.402 L1361.71 685.402 L1362.27 685.402 L1362.83 685.402 L1363.39 685.402 L1363.94 685.402 L1364.5 685.402 L1365.06 685.402 L1365.62 685.402 L1366.18 685.402 L1366.74 685.402 L1367.3 685.402 L1367.86 685.402 L1368.42 685.402 L1368.98 685.402 L1369.54 685.402 L1370.1 685.402 L1370.66 685.402 L1371.21 685.402 L1371.77 685.402 L1372.33 685.402 L1372.89 685.402 L1373.45 685.402 L1374.01 685.402 L1374.57 685.402 L1375.13 685.402 L1375.69 685.402 L1376.25 685.402 L1376.81 685.402 L1377.37 685.402 L1377.93 685.402 L1378.49 685.402 L1379.04 685.402 L1379.6 685.402 L1380.16 685.402 L1380.72 685.402 L1381.28 685.402 L1381.84 685.402 L1382.4 685.402 L1382.96 685.402 L1383.52 685.402 L1384.08 685.402 L1384.64 685.402 L1385.2 685.402 L1385.76 685.402 L1386.31 685.402 L1386.87 685.402 L1387.43 685.402 L1387.99 685.402 L1388.55 685.402 L1389.11 685.402 L1389.67 685.402 L1390.23 685.402 L1390.79 685.402 L1391.35 685.402 L1391.91 685.402 L1392.47 685.402 L1393.03 685.402 L1393.58 685.402 L1394.14 685.402 L1394.7 685.402 L1395.26 685.402 L1395.82 685.402 L1396.38 685.402 L1396.94 685.402 L1397.5 685.402 L1398.06 685.402 L1398.62 685.402 L1399.18 685.402 L1399.74 685.402 L1400.3 685.402 L1400.86 685.402 L1401.41 685.402 L1401.97 685.402 L1402.53 685.402 L1403.09 685.402 L1403.65 685.402 L1404.21 685.402 L1404.77 685.402 L1405.33 685.402 L1405.89 685.402 L1406.45 685.402 L1407.01 685.402 L1407.57 685.402 L1408.13 685.402 L1408.68 685.402 L1409.24 685.402 L1409.8 685.402 L1410.36 685.402 L1410.92 685.402 L1411.48 685.402 L1412.04 685.402 L1412.6 685.402 L1413.16 685.402 L1413.72 685.402 L1414.28 685.402 L1414.84 685.402 L1415.4 685.402 L1415.95 685.402 L1416.51 685.402 L1417.07 685.402 L1417.63 685.402 L1418.19 685.402 L1418.75 685.402 L1419.31 685.402 L1419.87 685.402 L1420.43 685.402 L1420.99 685.402 L1421.55 685.402 L1422.11 685.402 L1422.67 685.402 L1423.23 685.402 L1423.78 685.402 L1424.34 685.402 L1424.9 685.402 L1425.46 685.402 L1426.02 685.402 L1426.58 685.402 L1427.14 685.402 L1427.7 685.402 L1428.26 685.402 L1428.82 685.402 L1429.38 685.402 L1429.94 685.402 L1430.5 685.402 L1431.05 685.402 L1431.61 685.402 L1432.17 685.402 L1432.73 685.402 L1433.29 685.402 L1433.85 685.402 L1434.41 685.402 L1434.97 685.402 L1435.53 685.402 L1436.09 685.402 L1436.65 685.402 L1437.21 685.402 L1437.77 685.402 L1438.33 685.402 L1438.88 685.402 L1439.44 685.402 L1440 685.402 L1440.56 685.402 L1441.12 685.402 L1441.68 685.402 L1442.24 685.402 L1442.8 685.402 L1443.36 685.402 L1443.92 685.402 L1444.48 685.402 L1445.04 685.402 L1445.6 685.402 L1446.15 685.402 L1446.71 685.402 L1447.27 685.402 L1447.83 685.402 L1448.39 685.402 L1448.95 685.402 L1449.51 685.402 L1450.07 685.402 L1450.63 685.402 L1451.19 685.402 L1451.75 685.402 L1452.31 685.402 L1452.87 685.402 L1453.42 685.402 L1453.98 685.402 L1454.54 685.402 L1455.1 685.402 L1455.66 685.402 L1456.22 685.402 L1456.78 685.402 L1457.34 685.402 L1457.9 685.402 L1458.46 685.402 L1459.02 685.402 L1459.58 685.402 L1460.14 685.402 L1460.7 685.402 L1461.25 685.402 L1461.81 685.402 L1462.37 685.402 L1462.93 685.402 L1463.49 685.402 L1464.05 685.402 L1464.61 685.402 L1465.17 685.402 L1465.73 685.402 L1466.29 685.402 L1466.85 685.402 L1467.41 685.402 L1467.97 685.402 L1468.52 685.402 L1469.08 685.402 L1469.64 685.402 L1470.2 685.402 L1470.76 685.402 L1471.32 685.402 L1471.88 685.402 L1472.44 685.402 L1473 685.402 L1473.56 685.402 L1474.12 685.402 L1474.68 685.402 L1475.24 685.402 L1475.79 685.402 L1476.35 685.402 L1476.91 685.402 L1477.47 685.402 L1478.03 685.402 L1478.59 685.402 L1479.15 685.402 L1479.71 685.402 L1480.27 685.402 L1480.83 685.402 L1481.39 685.402 L1481.95 685.402 L1482.51 685.402 L1483.07 685.402 L1483.62 685.402 L1484.18 685.402 L1484.74 685.402 L1485.3 685.402 L1485.86 685.402 L1486.42 685.402 L1486.98 685.402 L1487.54 685.402 L1488.1 685.402 L1488.66 685.402 L1489.22 685.402 L1489.78 685.402 L1490.34 685.402 L1490.89 685.402 L1491.45 685.402 L1492.01 685.402 L1492.57 685.402 L1493.13 685.402 L1493.69 685.402 L1494.25 685.402 L1494.81 685.402 L1495.37 685.402 L1495.93 685.402 L1496.49 685.402 L1497.05 685.402 L1497.61 685.402 L1498.16 685.402 L1498.72 685.402 L1499.28 685.402 L1499.84 685.402 L1500.4 685.402 L1500.96 685.402 L1501.52 685.402 L1502.08 685.402 L1502.64 685.402 L1503.2 685.402 L1503.76 685.402 L1504.32 685.402 L1504.88 685.402 L1505.44 685.402 L1505.99 685.402 L1506.55 685.402 L1507.11 685.402 L1507.67 685.402 L1508.23 685.402 L1508.79 685.402 L1509.35 685.402 L1509.91 685.402 L1510.47 685.402 L1511.03 685.402 L1511.59 685.402 L1512.15 685.402 L1512.71 685.402 L1513.26 685.402 L1513.82 685.402 L1514.38 685.402 L1514.94 685.402 L1515.5 685.402 L1516.06 685.402 L1516.62 685.402 L1517.18 685.402 L1517.74 685.402 L1518.3 685.402 L1518.86 685.402 L1519.42 685.402 L1519.98 685.402 L1520.53 685.402 L1521.09 685.402 L1521.65 685.402 L1522.21 685.402 L1522.77 685.402 L1523.33 685.402 L1523.89 685.402 L1524.45 685.402 L1525.01 685.402 L1525.57 685.402 L1526.13 685.402 L1526.69 685.402 L1527.25 685.402 L1527.81 685.402 L1528.36 685.402 L1528.92 685.402 L1529.48 685.402 L1530.04 685.402 L1530.6 685.402 L1531.16 685.402 L1531.72 685.402 L1532.28 685.402 L1532.84 685.402 L1533.4 685.402 L1533.96 685.402 L1534.52 685.402 L1535.08 685.402 L1535.63 685.402 L1536.19 685.402 L1536.75 685.402 L1537.31 685.402 L1537.87 685.402 L1538.43 685.402 L1538.99 685.402 L1539.55 685.402 L1540.11 685.402 L1540.67 685.402 L1541.23 685.402 L1541.79 685.402 L1542.35 685.402 L1542.9 685.402 L1543.46 685.402 L1544.02 685.402 L1544.58 685.402 L1545.14 685.402 L1545.7 685.402 L1546.26 685.402 L1546.82 685.402 L1547.38 685.402 L1547.94 685.402 L1548.5 685.402 L1549.06 685.402 L1549.62 685.402 L1550.18 685.402 L1550.73 685.402 L1551.29 685.402 L1551.85 685.402 L1552.41 685.402 L1552.97 685.402 L1553.53 685.402 L1554.09 685.402 L1554.65 685.402 L1555.21 685.402 L1555.77 685.402 L1556.33 685.402 L1556.89 685.402 L1557.45 685.402 L1558 685.402 L1558.56 685.402 L1559.12 685.402 L1559.68 685.402 L1560.24 685.402 L1560.8 685.402 L1561.36 685.402 L1561.92 685.402 L1562.48 685.402 L1563.04 685.402 L1563.6 685.402 L1564.16 685.402 L1564.72 685.402 L1565.28 685.402 L1565.83 685.402 L1566.39 685.402 L1566.95 685.402 L1567.51 685.402 L1568.07 685.402 L1568.63 685.402 L1569.19 685.402 L1569.75 685.402 L1570.31 685.402 L1570.87 685.402 L1571.43 685.402 L1571.99 685.402 L1572.55 685.402 L1573.1 685.402 L1573.66 685.402 L1574.22 685.402 L1574.78 685.402 L1575.34 685.402 L1575.9 685.402 L1576.46 685.402 L1577.02 685.402 L1577.58 685.402 L1578.14 685.402 L1578.7 685.402 L1579.26 685.402 L1579.82 685.402 L1580.37 685.402 L1580.93 685.402 L1581.49 685.402 L1582.05 685.402 L1582.61 685.402 L1583.17 685.402 L1583.73 685.402 L1584.29 685.402 L1584.85 685.402 L1585.41 685.402 L1585.97 685.402 L1586.53 685.402 L1587.09 685.402 L1587.65 685.402 L1588.2 685.402 L1588.76 685.402 L1589.32 685.402 L1589.88 685.402 L1590.44 685.402 L1591 685.402 L1591.56 685.402 L1592.12 685.402 L1592.68 685.402 L1593.24 685.402 L1593.8 685.402 L1594.36 685.402 L1594.92 685.402 L1595.47 685.402 L1596.03 685.402 L1596.59 685.402 L1597.15 685.402 L1597.71 685.402 L1598.27 685.402 L1598.83 685.402 L1599.39 685.402 L1599.95 685.402 L1600.51 685.402 L1601.07 685.402 L1601.63 685.402 L1602.19 685.402 L1602.74 685.402 L1603.3 685.402 L1603.86 685.402 L1604.42 685.402 L1604.98 685.402 L1605.54 685.402 L1606.1 685.402 L1606.66 685.402 L1607.22 685.402 L1607.78 685.402 L1608.34 685.402 L1608.9 685.402 L1609.46 685.402 L1610.02 685.402 L1610.57 685.402 L1611.13 685.402 L1611.69 685.402 L1612.25 685.402 L1612.81 685.402 L1613.37 685.402 L1613.93 685.402 L1614.49 685.402 L1615.05 685.402 L1615.61 685.402 L1616.17 685.402 L1616.73 685.402 L1617.29 685.402 L1617.84 685.402 L1618.4 685.402 L1618.96 685.402 L1619.52 685.402 L1620.08 685.402 L1620.64 685.402 L1621.2 685.402 L1621.76 685.402 L1622.32 685.402 L1622.88 685.402 L1623.44 685.402 L1624 685.402 L1624.56 685.402 L1625.11 685.402 L1625.67 685.402 L1626.23 685.402 L1626.79 685.402 L1627.35 685.402 L1627.91 685.402 L1628.47 685.402 L1629.03 685.402 L1629.59 685.402 L1630.15 685.402 L1630.71 685.402 L1631.27 685.402 L1631.83 685.402 L1632.39 685.402 L1632.94 685.402 L1633.5 685.402 L1634.06 685.402 L1634.62 685.402 L1635.18 685.402 L1635.74 685.402 L1636.3 685.402 L1636.86 685.402 L1637.42 685.402 L1637.98 685.402 L1638.54 685.402 L1639.1 685.402 L1639.66 685.402 L1640.21 685.402 L1640.77 685.402 L1641.33 685.402 L1641.89 685.402 L1642.45 685.402 L1643.01 685.402 L1643.57 685.402 L1644.13 685.402 L1644.69 685.402 L1645.25 685.402 L1645.81 685.402 L1646.37 685.402 L1646.93 685.402 L1647.48 685.402 L1648.04 685.402 L1648.6 685.402 L1649.16 685.402 L1649.72 685.402 L1650.28 685.402 L1650.84 685.402 L1651.4 685.402 L1651.96 685.402 L1652.52 685.402 L1653.08 685.402 L1653.64 685.402 L1654.2 685.402 L1654.76 685.402 L1655.31 685.402 L1655.87 685.402 L1656.43 685.402 L1656.99 685.402 L1657.55 685.402 L1658.11 685.402 L1658.67 685.402 L1659.23 685.402 L1659.79 685.402 L1660.35 685.402 L1660.91 685.402 L1661.47 685.402 L1662.03 685.402 L1662.58 685.402 L1663.14 685.402 L1663.7 685.402 L1664.26 685.402 L1664.82 685.402 L1665.38 685.402 L1665.94 685.402 L1666.5 685.402 L1667.06 685.402 L1667.62 685.402 L1668.18 685.402 L1668.74 685.402 L1669.3 685.402 L1669.85 685.402 L1670.41 685.402 L1670.97 685.402 L1671.53 685.402 L1672.09 685.402 L1672.65 685.402 L1673.21 685.402 L1673.77 685.402 L1674.33 685.402 L1674.89 685.402 L1675.45 685.402 L1676.01 685.402 L1676.57 685.402 L1677.13 685.402 L1677.68 685.402 L1678.24 685.402 L1678.8 685.402 L1679.36 685.402 L1679.92 685.402 L1680.48 685.402 L1681.04 685.402 L1681.6 685.402 L1682.16 685.402 L1682.72 685.402 L1683.28 685.402 L1683.84 685.402 L1684.4 685.402 L1684.95 685.402 L1685.51 685.402 L1686.07 685.402 L1686.63 685.402 L1687.19 685.402 L1687.75 685.402 L1688.31 685.402 L1688.87 685.402 L1689.43 685.402 L1689.99 685.402 L1690.55 685.402 L1691.11 685.402 L1691.67 685.402 L1692.23 685.402 L1692.78 685.402 L1693.34 685.402 L1693.9 685.402 L1694.46 685.402 L1695.02 685.402 L1695.58 685.402 L1696.14 685.402 L1696.7 685.402 L1697.26 685.402 L1697.82 685.402 L1698.38 685.402 L1698.94 685.402 L1699.5 685.402 L1700.05 685.402 L1700.61 685.402 L1701.17 685.402 L1701.73 685.402 L1702.29 685.402 L1702.85 685.402 L1703.41 685.402 L1703.97 685.402 L1704.53 685.402 L1705.09 685.402 L1705.65 685.402 L1706.21 685.402 L1706.77 685.402 L1707.32 685.402 L1707.88 685.402 L1708.44 685.402 L1709 685.402 L1709.56 685.402 L1710.12 685.402 L1710.68 685.402 L1711.24 685.402 L1711.8 685.402 L1712.36 685.402 L1712.92 685.402 L1713.48 685.402 L1714.04 685.402 L1714.6 685.402 L1715.15 685.402 L1715.71 685.402 L1716.27 685.402 L1716.83 685.402 L1717.39 685.402 L1717.95 685.402 L1718.51 685.402 L1719.07 685.402 L1719.63 685.402 L1720.19 685.402 L1720.75 685.402 L1721.31 685.402 L1721.87 685.402 L1722.42 685.402 L1722.98 685.402 L1723.54 685.402 L1724.1 685.402 L1724.66 685.402 L1725.22 685.402 L1725.78 685.402 L1726.34 685.402 L1726.9 685.402 L1727.46 685.402 L1728.02 685.402 L1728.58 685.402 L1729.14 685.402 L1729.69 685.402 L1730.25 685.402 L1730.81 685.402 L1731.37 685.402 L1731.93 685.402 L1732.49 685.402 L1733.05 685.402 L1733.61 685.402 L1734.17 685.402 L1734.73 685.402 L1735.29 685.402 L1735.85 685.402 L1736.41 685.402 L1736.97 685.402 L1737.52 685.402 L1738.08 685.402 L1738.64 685.402 L1739.2 685.402 L1739.76 685.402 L1740.32 685.402 L1740.88 685.402 L1741.44 685.402 L1742 685.402 L1742.56 685.402 L1743.12 685.402 L1743.68 685.402 L1744.24 685.402 L1744.79 685.402 L1745.35 685.402 L1745.91 685.402 L1746.47 685.402 L1747.03 685.402 L1747.59 685.402 L1748.15 685.402 L1748.71 685.402 L1749.27 685.402 L1749.83 685.402 L1750.39 685.402 L1750.95 685.402 L1751.51 685.402 L1752.06 685.402 L1752.62 685.402 L1753.18 685.402 L1753.74 685.402 L1754.3 685.402 L1754.86 685.402 L1755.42 685.402 L1755.98 685.402 L1756.54 685.402 L1757.1 685.402 L1757.66 685.402 L1758.22 685.402 L1758.78 685.402 L1759.34 685.402 L1759.89 685.402 L1760.45 685.402 L1761.01 685.402 L1761.57 685.402 L1762.13 685.402 L1762.69 685.402 L1763.25 685.402 L1763.81 685.402 L1764.37 685.402 L1764.93 685.402 L1765.49 685.402 L1766.05 685.402 L1766.61 685.402 L1767.16 685.402 L1767.72 685.402 L1768.28 685.402 L1768.84 685.402 L1769.4 685.402 L1769.96 685.402 L1770.52 685.402 L1771.08 685.402 L1771.64 685.402 L1772.2 685.402 L1772.76 685.402 L1773.32 685.402 L1773.88 685.402 L1774.43 685.402 L1774.99 685.402 L1775.55 685.402 L1776.11 685.402 L1776.67 685.402 L1777.23 685.402 L1777.79 685.402 L1778.35 685.402 L1778.91 685.402 L1779.47 685.402 L1780.03 685.402 L1780.59 685.402 L1781.15 685.402 L1781.71 685.402 L1782.26 685.402 L1782.82 685.402 L1783.38 685.402 L1783.94 685.402 L1784.5 685.402 L1785.06 685.402 L1785.62 685.402 L1786.18 685.402 L1786.74 685.402 L1787.3 685.402 L1787.86 685.402 L1788.42 685.402 L1788.98 685.402 L1789.53 685.402 L1790.09 685.402 L1790.65 685.402 L1791.21 685.402 L1791.77 685.402 L1792.33 685.402 L1792.89 685.402 L1793.45 685.402 L1794.01 685.402 L1794.57 685.402 L1795.13 685.402 L1795.69 685.402 L1796.25 685.402 L1796.8 685.402 L1797.36 685.402 L1797.92 685.402 L1798.48 685.402 L1799.04 685.402 L1799.6 685.402 L1800.16 685.402 L1800.72 685.402 L1801.28 685.402 L1801.84 685.402 L1802.4 685.402 L1802.96 685.402 L1803.52 685.402 L1804.08 685.402 L1804.63 685.402 L1805.19 685.402 L1805.75 685.402 L1806.31 685.402 L1806.87 685.402 L1807.43 685.402 L1807.99 685.402 L1808.55 685.402 L1809.11 685.402 L1809.67 685.402 L1810.23 685.402 L1810.79 685.402 L1811.35 685.402 L1811.9 685.402 L1812.46 685.402 L1813.02 685.402 L1813.58 685.402 L1814.14 685.402 L1814.7 685.402 L1815.26 685.402 L1815.82 685.402 L1816.38 685.402 L1816.94 685.402 L1817.5 685.402 L1818.06 685.402 L1818.62 685.402 L1819.18 685.402 L1819.73 685.402 L1820.29 685.402 L1820.85 685.402 L1821.41 685.402 L1821.97 685.402 L1822.53 685.402 L1823.09 685.402 L1823.65 685.402 L1824.21 685.402 L1824.77 685.402 L1825.33 685.402 L1825.89 685.402 L1826.45 685.402 L1827 685.402 L1827.56 685.402 L1828.12 685.402 L1828.68 685.402 L1829.24 685.402 L1829.8 685.402 L1830.36 685.402 L1830.92 685.402 L1831.48 685.402 L1832.04 685.402 L1832.6 685.402 L1833.16 685.402 L1833.72 685.402 L1834.27 685.402 L1834.83 685.402 L1835.39 685.402 L1835.95 685.402 L1836.51 685.402 L1837.07 685.402 L1837.63 685.402 L1838.19 685.402 L1838.19 683.063 L1837.63 683.063 L1837.07 683.063 L1836.51 683.063 L1835.95 683.063 L1835.39 683.063 L1834.83 683.063 L1834.27 683.063 L1833.72 683.063 L1833.16 683.063 L1832.6 683.063 L1832.04 683.063 L1831.48 683.063 L1830.92 683.063 L1830.36 683.063 L1829.8 683.063 L1829.24 683.063 L1828.68 683.063 L1828.12 683.063 L1827.56 683.063 L1827 683.063 L1826.45 683.063 L1825.89 683.063 L1825.33 683.063 L1824.77 683.063 L1824.21 683.063 L1823.65 683.063 L1823.09 683.063 L1822.53 683.063 L1821.97 683.063 L1821.41 683.063 L1820.85 683.063 L1820.29 683.063 L1819.73 683.063 L1819.18 683.063 L1818.62 683.063 L1818.06 683.063 L1817.5 683.063 L1816.94 683.063 L1816.38 683.063 L1815.82 683.063 L1815.26 683.063 L1814.7 683.063 L1814.14 683.063 L1813.58 683.063 L1813.02 683.063 L1812.46 683.063 L1811.9 683.063 L1811.35 683.063 L1810.79 683.063 L1810.23 683.063 L1809.67 683.063 L1809.11 683.063 L1808.55 683.063 L1807.99 683.063 L1807.43 683.063 L1806.87 683.063 L1806.31 683.063 L1805.75 683.063 L1805.19 683.063 L1804.63 683.063 L1804.08 683.063 L1803.52 683.063 L1802.96 683.063 L1802.4 683.063 L1801.84 683.063 L1801.28 683.063 L1800.72 683.063 L1800.16 683.063 L1799.6 683.063 L1799.04 683.063 L1798.48 683.063 L1797.92 683.063 L1797.36 683.063 L1796.8 683.063 L1796.25 683.063 L1795.69 683.063 L1795.13 683.063 L1794.57 683.063 L1794.01 683.063 L1793.45 683.063 L1792.89 683.063 L1792.33 683.063 L1791.77 683.063 L1791.21 683.063 L1790.65 683.063 L1790.09 683.063 L1789.53 683.063 L1788.98 683.063 L1788.42 683.063 L1787.86 683.063 L1787.3 683.063 L1786.74 683.063 L1786.18 683.063 L1785.62 683.063 L1785.06 683.063 L1784.5 683.063 L1783.94 683.063 L1783.38 683.063 L1782.82 683.063 L1782.26 683.063 L1781.71 683.063 L1781.15 683.063 L1780.59 683.063 L1780.03 683.063 L1779.47 683.063 L1778.91 683.063 L1778.35 683.063 L1777.79 683.063 L1777.23 683.063 L1776.67 683.063 L1776.11 683.063 L1775.55 683.063 L1774.99 683.063 L1774.43 683.063 L1773.88 683.063 L1773.32 683.063 L1772.76 683.063 L1772.2 683.063 L1771.64 683.063 L1771.08 683.063 L1770.52 683.063 L1769.96 683.063 L1769.4 683.063 L1768.84 683.063 L1768.28 683.063 L1767.72 683.063 L1767.16 683.063 L1766.61 683.063 L1766.05 683.063 L1765.49 683.063 L1764.93 683.063 L1764.37 683.063 L1763.81 683.063 L1763.25 683.063 L1762.69 683.063 L1762.13 683.063 L1761.57 683.063 L1761.01 683.063 L1760.45 683.063 L1759.89 683.063 L1759.34 683.063 L1758.78 683.063 L1758.22 683.063 L1757.66 683.063 L1757.1 683.063 L1756.54 683.063 L1755.98 683.063 L1755.42 683.063 L1754.86 683.063 L1754.3 683.063 L1753.74 683.063 L1753.18 683.063 L1752.62 683.063 L1752.06 683.063 L1751.51 683.063 L1750.95 683.063 L1750.39 683.063 L1749.83 683.063 L1749.27 683.063 L1748.71 683.063 L1748.15 683.063 L1747.59 683.063 L1747.03 683.063 L1746.47 683.063 L1745.91 683.063 L1745.35 683.063 L1744.79 683.063 L1744.24 683.063 L1743.68 683.063 L1743.12 683.063 L1742.56 683.063 L1742 683.063 L1741.44 683.063 L1740.88 683.063 L1740.32 683.063 L1739.76 683.063 L1739.2 683.063 L1738.64 683.063 L1738.08 683.063 L1737.52 683.063 L1736.97 683.063 L1736.41 683.063 L1735.85 683.063 L1735.29 683.063 L1734.73 683.063 L1734.17 683.063 L1733.61 683.063 L1733.05 683.063 L1732.49 683.063 L1731.93 683.063 L1731.37 683.063 L1730.81 683.063 L1730.25 683.063 L1729.69 683.063 L1729.14 683.063 L1728.58 683.063 L1728.02 683.063 L1727.46 683.063 L1726.9 683.063 L1726.34 683.063 L1725.78 683.063 L1725.22 683.063 L1724.66 683.063 L1724.1 683.063 L1723.54 683.063 L1722.98 683.063 L1722.42 683.063 L1721.87 683.063 L1721.31 683.063 L1720.75 683.063 L1720.19 683.063 L1719.63 683.063 L1719.07 683.063 L1718.51 683.063 L1717.95 683.063 L1717.39 683.063 L1716.83 683.063 L1716.27 683.063 L1715.71 683.063 L1715.15 683.063 L1714.6 683.063 L1714.04 683.063 L1713.48 683.063 L1712.92 683.063 L1712.36 683.063 L1711.8 683.063 L1711.24 683.063 L1710.68 683.063 L1710.12 683.063 L1709.56 683.063 L1709 683.063 L1708.44 683.063 L1707.88 683.063 L1707.32 683.063 L1706.77 683.063 L1706.21 683.063 L1705.65 683.063 L1705.09 683.063 L1704.53 683.063 L1703.97 683.063 L1703.41 683.063 L1702.85 683.063 L1702.29 683.063 L1701.73 683.063 L1701.17 683.063 L1700.61 683.063 L1700.05 683.063 L1699.5 683.063 L1698.94 683.063 L1698.38 683.063 L1697.82 683.063 L1697.26 683.063 L1696.7 683.063 L1696.14 683.063 L1695.58 683.063 L1695.02 683.063 L1694.46 683.063 L1693.9 683.063 L1693.34 683.063 L1692.78 683.063 L1692.23 683.063 L1691.67 683.063 L1691.11 683.063 L1690.55 683.063 L1689.99 683.063 L1689.43 683.063 L1688.87 683.063 L1688.31 683.063 L1687.75 683.063 L1687.19 683.063 L1686.63 683.063 L1686.07 683.063 L1685.51 683.063 L1684.95 683.063 L1684.4 683.063 L1683.84 683.063 L1683.28 683.063 L1682.72 683.063 L1682.16 683.063 L1681.6 683.063 L1681.04 683.063 L1680.48 683.063 L1679.92 683.063 L1679.36 683.063 L1678.8 683.063 L1678.24 683.063 L1677.68 683.063 L1677.13 683.063 L1676.57 683.063 L1676.01 683.063 L1675.45 683.063 L1674.89 683.063 L1674.33 683.063 L1673.77 683.063 L1673.21 683.063 L1672.65 683.063 L1672.09 683.063 L1671.53 683.063 L1670.97 683.063 L1670.41 683.063 L1669.85 683.063 L1669.3 683.063 L1668.74 683.063 L1668.18 683.063 L1667.62 683.063 L1667.06 683.063 L1666.5 683.063 L1665.94 683.063 L1665.38 683.063 L1664.82 683.063 L1664.26 683.063 L1663.7 683.063 L1663.14 683.063 L1662.58 683.063 L1662.03 683.063 L1661.47 683.063 L1660.91 683.063 L1660.35 683.063 L1659.79 683.063 L1659.23 683.063 L1658.67 683.063 L1658.11 683.063 L1657.55 683.063 L1656.99 683.063 L1656.43 683.063 L1655.87 683.063 L1655.31 683.063 L1654.76 683.063 L1654.2 683.063 L1653.64 683.063 L1653.08 683.063 L1652.52 683.063 L1651.96 683.063 L1651.4 683.063 L1650.84 683.063 L1650.28 683.063 L1649.72 683.063 L1649.16 683.063 L1648.6 683.063 L1648.04 683.063 L1647.48 683.063 L1646.93 683.063 L1646.37 683.063 L1645.81 683.063 L1645.25 683.063 L1644.69 683.063 L1644.13 683.063 L1643.57 683.063 L1643.01 683.063 L1642.45 683.063 L1641.89 683.063 L1641.33 683.063 L1640.77 683.063 L1640.21 683.063 L1639.66 683.063 L1639.1 683.063 L1638.54 683.063 L1637.98 683.063 L1637.42 683.063 L1636.86 683.063 L1636.3 683.063 L1635.74 683.063 L1635.18 683.063 L1634.62 683.063 L1634.06 683.063 L1633.5 683.063 L1632.94 683.063 L1632.39 683.063 L1631.83 683.063 L1631.27 683.063 L1630.71 683.063 L1630.15 683.063 L1629.59 683.063 L1629.03 683.063 L1628.47 683.063 L1627.91 683.063 L1627.35 683.063 L1626.79 683.063 L1626.23 683.063 L1625.67 683.063 L1625.11 683.063 L1624.56 683.063 L1624 683.063 L1623.44 683.063 L1622.88 683.063 L1622.32 683.063 L1621.76 683.063 L1621.2 683.063 L1620.64 683.063 L1620.08 683.063 L1619.52 683.063 L1618.96 683.063 L1618.4 683.063 L1617.84 683.063 L1617.29 683.063 L1616.73 683.063 L1616.17 683.063 L1615.61 683.063 L1615.05 683.063 L1614.49 683.063 L1613.93 683.063 L1613.37 683.063 L1612.81 683.063 L1612.25 683.063 L1611.69 683.063 L1611.13 683.063 L1610.57 683.063 L1610.02 683.063 L1609.46 683.063 L1608.9 683.063 L1608.34 683.063 L1607.78 683.063 L1607.22 683.063 L1606.66 683.063 L1606.1 683.063 L1605.54 683.063 L1604.98 683.063 L1604.42 683.063 L1603.86 683.063 L1603.3 683.063 L1602.74 683.063 L1602.19 683.063 L1601.63 683.063 L1601.07 683.063 L1600.51 683.063 L1599.95 683.063 L1599.39 683.063 L1598.83 683.063 L1598.27 683.063 L1597.71 683.063 L1597.15 683.063 L1596.59 683.063 L1596.03 683.063 L1595.47 683.063 L1594.92 683.063 L1594.36 683.063 L1593.8 683.063 L1593.24 683.063 L1592.68 683.063 L1592.12 683.063 L1591.56 683.063 L1591 683.063 L1590.44 683.063 L1589.88 683.063 L1589.32 683.063 L1588.76 683.063 L1588.2 683.063 L1587.65 683.063 L1587.09 683.063 L1586.53 683.063 L1585.97 683.063 L1585.41 683.063 L1584.85 683.063 L1584.29 683.063 L1583.73 683.063 L1583.17 683.063 L1582.61 683.063 L1582.05 683.063 L1581.49 683.063 L1580.93 683.063 L1580.37 683.063 L1579.82 683.063 L1579.26 683.063 L1578.7 683.063 L1578.14 683.063 L1577.58 683.063 L1577.02 683.063 L1576.46 683.063 L1575.9 683.063 L1575.34 683.063 L1574.78 683.063 L1574.22 683.063 L1573.66 683.063 L1573.1 683.063 L1572.55 683.063 L1571.99 683.063 L1571.43 683.063 L1570.87 683.063 L1570.31 683.063 L1569.75 683.063 L1569.19 683.063 L1568.63 683.063 L1568.07 683.063 L1567.51 683.063 L1566.95 683.063 L1566.39 683.063 L1565.83 683.063 L1565.28 683.063 L1564.72 683.063 L1564.16 683.063 L1563.6 683.063 L1563.04 683.063 L1562.48 683.063 L1561.92 683.063 L1561.36 683.063 L1560.8 683.063 L1560.24 683.063 L1559.68 683.063 L1559.12 683.063 L1558.56 683.063 L1558 683.063 L1557.45 683.063 L1556.89 683.063 L1556.33 683.063 L1555.77 683.063 L1555.21 683.063 L1554.65 683.063 L1554.09 683.063 L1553.53 683.063 L1552.97 683.063 L1552.41 683.063 L1551.85 683.063 L1551.29 683.063 L1550.73 683.063 L1550.18 683.063 L1549.62 683.063 L1549.06 683.063 L1548.5 683.063 L1547.94 683.063 L1547.38 683.063 L1546.82 683.063 L1546.26 683.063 L1545.7 683.063 L1545.14 683.063 L1544.58 683.063 L1544.02 683.063 L1543.46 683.063 L1542.9 683.063 L1542.35 683.063 L1541.79 683.063 L1541.23 683.063 L1540.67 683.063 L1540.11 683.063 L1539.55 683.063 L1538.99 683.063 L1538.43 683.063 L1537.87 683.063 L1537.31 683.063 L1536.75 683.063 L1536.19 683.063 L1535.63 683.063 L1535.08 683.063 L1534.52 683.063 L1533.96 683.063 L1533.4 683.063 L1532.84 683.063 L1532.28 683.063 L1531.72 683.063 L1531.16 683.063 L1530.6 683.063 L1530.04 683.063 L1529.48 683.063 L1528.92 683.063 L1528.36 683.063 L1527.81 683.063 L1527.25 683.063 L1526.69 683.063 L1526.13 683.063 L1525.57 683.063 L1525.01 683.063 L1524.45 683.063 L1523.89 683.063 L1523.33 683.063 L1522.77 683.063 L1522.21 683.063 L1521.65 683.063 L1521.09 683.063 L1520.53 683.063 L1519.98 683.063 L1519.42 683.063 L1518.86 683.063 L1518.3 683.063 L1517.74 683.063 L1517.18 683.063 L1516.62 683.063 L1516.06 683.063 L1515.5 683.063 L1514.94 683.063 L1514.38 683.063 L1513.82 683.063 L1513.26 683.063 L1512.71 683.063 L1512.15 683.063 L1511.59 683.063 L1511.03 683.063 L1510.47 683.063 L1509.91 683.063 L1509.35 683.063 L1508.79 683.063 L1508.23 683.063 L1507.67 683.063 L1507.11 683.063 L1506.55 683.063 L1505.99 683.063 L1505.44 683.063 L1504.88 683.063 L1504.32 683.063 L1503.76 683.063 L1503.2 683.063 L1502.64 683.063 L1502.08 683.063 L1501.52 683.063 L1500.96 683.063 L1500.4 683.063 L1499.84 683.063 L1499.28 683.063 L1498.72 683.063 L1498.16 683.063 L1497.61 683.063 L1497.05 683.063 L1496.49 683.063 L1495.93 683.063 L1495.37 683.063 L1494.81 683.063 L1494.25 683.063 L1493.69 683.063 L1493.13 683.063 L1492.57 683.063 L1492.01 683.063 L1491.45 683.063 L1490.89 683.063 L1490.34 683.063 L1489.78 683.063 L1489.22 683.063 L1488.66 683.063 L1488.1 683.063 L1487.54 683.063 L1486.98 683.063 L1486.42 683.063 L1485.86 683.063 L1485.3 683.063 L1484.74 683.063 L1484.18 683.063 L1483.62 683.063 L1483.07 683.063 L1482.51 683.063 L1481.95 683.063 L1481.39 683.063 L1480.83 683.063 L1480.27 683.063 L1479.71 683.063 L1479.15 683.063 L1478.59 683.063 L1478.03 683.063 L1477.47 683.063 L1476.91 683.063 L1476.35 683.063 L1475.79 683.063 L1475.24 683.063 L1474.68 683.063 L1474.12 683.063 L1473.56 683.063 L1473 683.063 L1472.44 683.063 L1471.88 683.063 L1471.32 683.063 L1470.76 683.063 L1470.2 683.063 L1469.64 683.063 L1469.08 683.063 L1468.52 683.063 L1467.97 683.063 L1467.41 683.063 L1466.85 683.063 L1466.29 683.063 L1465.73 683.063 L1465.17 683.063 L1464.61 683.063 L1464.05 683.063 L1463.49 683.063 L1462.93 683.063 L1462.37 683.063 L1461.81 683.063 L1461.25 683.063 L1460.7 683.063 L1460.14 683.063 L1459.58 683.063 L1459.02 683.063 L1458.46 683.063 L1457.9 683.063 L1457.34 683.063 L1456.78 683.063 L1456.22 683.063 L1455.66 683.063 L1455.1 683.063 L1454.54 683.063 L1453.98 683.063 L1453.42 683.063 L1452.87 683.063 L1452.31 683.063 L1451.75 683.063 L1451.19 683.063 L1450.63 683.063 L1450.07 683.063 L1449.51 683.063 L1448.95 683.063 L1448.39 683.063 L1447.83 683.063 L1447.27 683.063 L1446.71 683.063 L1446.15 683.063 L1445.6 683.063 L1445.04 683.063 L1444.48 683.063 L1443.92 683.063 L1443.36 683.063 L1442.8 683.063 L1442.24 683.063 L1441.68 683.063 L1441.12 683.063 L1440.56 683.063 L1440 683.063 L1439.44 683.063 L1438.88 683.063 L1438.33 683.063 L1437.77 683.063 L1437.21 683.063 L1436.65 683.063 L1436.09 683.063 L1435.53 683.063 L1434.97 683.063 L1434.41 683.063 L1433.85 683.063 L1433.29 683.063 L1432.73 683.063 L1432.17 683.063 L1431.61 683.063 L1431.05 683.063 L1430.5 683.063 L1429.94 683.063 L1429.38 683.063 L1428.82 683.063 L1428.26 683.063 L1427.7 683.063 L1427.14 683.063 L1426.58 683.063 L1426.02 683.063 L1425.46 683.063 L1424.9 683.063 L1424.34 683.063 L1423.78 683.063 L1423.23 683.063 L1422.67 683.063 L1422.11 683.063 L1421.55 683.063 L1420.99 683.063 L1420.43 683.063 L1419.87 683.063 L1419.31 683.063 L1418.75 683.063 L1418.19 683.063 L1417.63 683.063 L1417.07 683.063 L1416.51 683.063 L1415.95 683.063 L1415.4 683.063 L1414.84 683.063 L1414.28 683.063 L1413.72 683.063 L1413.16 683.063 L1412.6 683.063 L1412.04 683.063 L1411.48 683.063 L1410.92 683.063 L1410.36 683.063 L1409.8 683.063 L1409.24 683.063 L1408.68 683.063 L1408.13 683.063 L1407.57 683.063 L1407.01 683.063 L1406.45 683.063 L1405.89 683.063 L1405.33 683.063 L1404.77 683.063 L1404.21 683.063 L1403.65 683.063 L1403.09 683.063 L1402.53 683.063 L1401.97 683.063 L1401.41 683.063 L1400.86 683.063 L1400.3 683.063 L1399.74 683.063 L1399.18 683.063 L1398.62 683.063 L1398.06 683.063 L1397.5 683.063 L1396.94 683.063 L1396.38 683.063 L1395.82 683.063 L1395.26 683.063 L1394.7 683.063 L1394.14 683.063 L1393.58 683.063 L1393.03 683.063 L1392.47 683.063 L1391.91 683.063 L1391.35 683.063 L1390.79 683.063 L1390.23 683.063 L1389.67 683.063 L1389.11 683.063 L1388.55 683.063 L1387.99 683.063 L1387.43 683.063 L1386.87 683.063 L1386.31 683.063 L1385.76 683.063 L1385.2 683.063 L1384.64 683.063 L1384.08 683.063 L1383.52 683.063 L1382.96 683.063 L1382.4 683.063 L1381.84 683.063 L1381.28 683.063 L1380.72 683.063 L1380.16 683.063 L1379.6 683.063 L1379.04 683.063 L1378.49 683.063 L1377.93 683.063 L1377.37 683.063 L1376.81 683.063 L1376.25 683.063 L1375.69 683.063 L1375.13 683.063 L1374.57 683.063 L1374.01 683.063 L1373.45 683.063 L1372.89 683.063 L1372.33 683.063 L1371.77 683.063 L1371.21 683.063 L1370.66 683.063 L1370.1 683.063 L1369.54 683.063 L1368.98 683.063 L1368.42 683.063 L1367.86 683.063 L1367.3 683.063 L1366.74 683.063 L1366.18 683.063 L1365.62 683.063 L1365.06 683.063 L1364.5 683.063 L1363.94 683.063 L1363.39 683.063 L1362.83 683.063 L1362.27 683.063 L1361.71 683.063 L1361.15 683.063 L1360.59 683.063 L1360.03 683.063 L1359.47 683.063 L1358.91 683.063 L1358.35 683.063 L1357.79 683.063 L1357.23 683.063 L1356.67 683.063 L1356.12 683.063 L1355.56 683.063 L1355 683.063 L1354.44 683.063 L1353.88 683.063 L1353.32 683.063 L1352.76 683.063 L1352.2 683.063 L1351.64 683.063 L1351.08 683.063 L1350.52 683.063 L1349.96 683.063 L1349.4 683.063 L1348.84 683.063 L1348.29 683.063 L1347.73 683.063 L1347.17 683.063 L1346.61 683.063 L1346.05 683.063 L1345.49 683.063 L1344.93 683.063 L1344.37 683.063 L1343.81 683.063 L1343.25 683.063 L1342.69 683.063 L1342.13 683.063 L1341.57 683.063 L1341.02 683.063 L1340.46 683.063 L1339.9 683.063 L1339.34 683.063 L1338.78 683.063 L1338.22 683.063 L1337.66 683.063 L1337.1 683.063 L1336.54 683.063 L1335.98 683.063 L1335.42 683.063 L1334.86 683.063 L1334.3 683.063 L1333.75 683.063 L1333.19 683.063 L1332.63 683.063 L1332.07 683.063 L1331.51 683.063 L1330.95 683.063 L1330.39 683.063 L1329.83 683.063 L1329.27 683.063 L1328.71 683.063 L1328.15 683.063 L1327.59 683.063 L1327.03 683.063 L1326.47 683.063 L1325.92 683.063 L1325.36 683.063 L1324.8 683.063 L1324.24 683.063 L1323.68 683.063 L1323.12 683.063 L1322.56 683.063 L1322 683.063 L1321.44 683.063 L1320.88 683.063 L1320.32 683.063 L1319.76 683.063 L1319.2 683.063 L1318.65 683.063 L1318.09 683.063 L1317.53 683.063 L1316.97 683.063 L1316.41 683.063 L1315.85 683.063 L1315.29 683.063 L1314.73 683.063 L1314.17 683.063 L1313.61 683.063 L1313.05 683.063 L1312.49 683.063 L1311.93 683.063 L1311.38 683.063 L1310.82 683.063 L1310.26 683.063 L1309.7 683.063 L1309.14 683.063 L1308.58 683.063 L1308.02 683.063 L1307.46 683.063 L1306.9 683.063 L1306.34 683.063 L1305.78 683.063 L1305.22 683.063 L1304.66 683.063 L1304.1 683.063 L1303.55 683.063 L1302.99 683.063 L1302.43 683.063 L1301.87 683.063 L1301.31 683.063 L1300.75 683.063 L1300.19 683.063 L1299.63 683.063 L1299.07 683.063 L1298.51 683.063 L1297.95 683.063 L1297.39 683.063 L1296.83 683.063 L1296.28 683.063 L1295.72 683.063 L1295.16 683.063 L1294.6 683.063 L1294.04 683.063 L1293.48 683.063 L1292.92 683.063 L1292.36 683.063 L1291.8 683.063 L1291.24 683.063 L1290.68 683.063 L1290.12 683.063 L1289.56 683.063 L1289 683.063 L1288.45 683.063 L1287.89 683.063 L1287.33 683.063 L1286.77 683.063 L1286.21 683.063 L1285.65 683.063 L1285.09 683.063 L1284.53 683.063 L1283.97 683.063 L1283.41 683.063 L1282.85 683.063 L1282.29 683.063 L1281.73 683.063 L1281.18 683.063 L1280.62 683.063 L1280.06 683.063 L1279.5 683.063 L1278.94 683.063 L1278.38 683.063 L1277.82 683.063 L1277.26 683.063 L1276.7 683.063 L1276.14 683.063 L1275.58 683.063 L1275.02 683.063 L1274.46 683.063 L1273.91 683.063 L1273.35 683.063 L1272.79 683.063 L1272.23 683.063 L1271.67 683.063 L1271.11 683.063 L1270.55 683.063 L1269.99 683.063 L1269.43 683.063 L1268.87 683.063 L1268.31 683.063 L1267.75 683.063 L1267.19 683.063 L1266.63 683.063 L1266.08 683.063 L1265.52 683.063 L1264.96 683.063 L1264.4 683.063 L1263.84 683.063 L1263.28 683.063 L1262.72 683.063 L1262.16 683.063 L1261.6 683.063 L1261.04 683.063 L1260.48 683.063 L1259.92 683.063 L1259.36 683.063 L1258.81 683.063 L1258.25 683.063 L1257.69 683.063 L1257.13 683.063 L1256.57 683.063 L1256.01 683.063 L1255.45 683.063 L1254.89 683.063 L1254.33 683.063 L1253.77 683.063 L1253.21 683.063 L1252.65 683.063 L1252.09 683.063 L1251.54 683.063 L1250.98 683.063 L1250.42 683.063 L1249.86 683.063 L1249.3 683.063 L1248.74 683.063 L1248.18 683.063 L1247.62 683.063 L1247.06 683.063 L1246.5 683.063 L1245.94 683.063 L1245.38 683.063 L1244.82 683.063 L1244.26 683.063 L1243.71 683.063 L1243.15 683.063 L1242.59 683.063 L1242.03 683.063 L1241.47 683.063 L1240.91 683.063 L1240.35 683.063 L1239.79 683.063 L1239.23 683.063 L1238.67 683.063 L1238.11 683.063 L1237.55 683.063 L1236.99 683.063 L1236.44 683.063 L1235.88 683.063 L1235.32 683.063 L1234.76 683.063 L1234.2 683.063 L1233.64 683.063 L1233.08 683.063 L1232.52 683.063 L1231.96 683.063 L1231.4 683.063 L1230.84 683.063 L1230.28 683.063 L1229.72 683.063 L1229.17 683.063 L1228.61 683.063 L1228.05 683.063 L1227.49 683.063 L1226.93 683.063 L1226.37 683.063 L1225.81 683.063 L1225.25 683.063 L1224.69 683.063 L1224.13 683.063 L1223.57 683.063 L1223.01 683.063 L1222.45 683.063 L1221.89 683.063 L1221.34 683.063 L1220.78 683.063 L1220.22 683.063 L1219.66 683.063 L1219.1 683.063 L1218.54 683.063 L1217.98 683.063 L1217.42 683.063 L1216.86 683.063 L1216.3 683.063 L1215.74 683.063 L1215.18 683.063 L1214.62 683.063 L1214.07 683.063 L1213.51 683.063 L1212.95 683.063 L1212.39 683.063 L1211.83 683.063 L1211.27 683.063 L1210.71 683.063 L1210.15 683.063 L1209.59 683.063 L1209.03 683.063 L1208.47 683.063 L1207.91 683.063 L1207.35 683.063 L1206.8 683.063 L1206.24 683.063 L1205.68 683.063 L1205.12 683.063 L1204.56 683.063 L1204 683.063 L1203.44 683.063 L1202.88 683.063 L1202.32 683.063 L1201.76 683.063 L1201.2 683.063 L1200.64 683.063 L1200.08 683.063 L1199.52 683.063 L1198.97 683.063 L1198.41 683.063 L1197.85 683.063 L1197.29 683.063 L1196.73 683.063 L1196.17 683.063 L1195.61 683.063 L1195.05 683.063 L1194.49 683.063 L1193.93 683.063 L1193.37 683.063 L1192.81 683.063 L1192.25 683.063 L1191.7 683.063 L1191.14 683.063 L1190.58 683.063 L1190.02 683.063 L1189.46 683.063 L1188.9 683.063 L1188.34 683.063 L1187.78 683.063 L1187.22 683.063 L1186.66 683.063 L1186.1 683.063 L1185.54 683.063 L1184.98 683.063 L1184.43 683.063 L1183.87 683.063 L1183.31 683.063 L1182.75 683.063 L1182.19 683.063 L1181.63 683.063 L1181.07 683.063 L1180.51 683.063 L1179.95 683.063 L1179.39 683.063 L1178.83 683.063 L1178.27 683.063 L1177.71 683.063 L1177.15 683.063 L1176.6 683.063 L1176.04 683.063 L1175.48 683.063 L1174.92 683.063 L1174.36 683.063 L1173.8 683.063 L1173.24 683.063 L1172.68 683.063 L1172.12 683.063 L1171.56 683.063 L1171 683.063 L1170.44 683.063 L1169.88 683.063 L1169.33 683.063 L1168.77 683.063 L1168.21 683.063 L1167.65 683.063 L1167.09 683.063 L1166.53 683.063 L1165.97 683.063 L1165.41 683.063 L1164.85 683.063 L1164.29 683.063 L1163.73 683.063 L1163.17 683.063 L1162.61 683.063 L1162.05 683.063 L1161.5 683.063 L1160.94 683.063 L1160.38 683.063 L1159.82 683.063 L1159.26 683.063 L1158.7 683.063 L1158.14 683.063 L1157.58 683.063 L1157.02 683.063 L1156.46 683.063 L1155.9 683.063 L1155.34 683.063 L1154.78 683.063 L1154.23 683.063 L1153.67 683.063 L1153.11 683.063 L1152.55 683.063 L1151.99 683.063 L1151.43 683.063 L1150.87 683.063 L1150.31 683.063 L1149.75 683.063 L1149.19 683.063 L1148.63 683.063 L1148.07 683.063 L1147.51 683.063 L1146.96 683.063 L1146.4 683.063 L1145.84 683.063 L1145.28 683.063 L1144.72 683.063 L1144.16 683.063 L1143.6 683.063 L1143.04 683.063 L1142.48 683.063 L1141.92 683.063 L1141.36 683.063 L1140.8 683.063 L1140.24 683.063 L1139.68 683.063 L1139.13 683.063 L1138.57 683.063 L1138.01 683.063 L1137.45 683.063 L1136.89 683.063 L1136.33 683.063 L1135.77 683.063 L1135.21 683.063 L1134.65 683.063 L1134.09 683.063 L1133.53 683.063 L1132.97 683.063 L1132.41 683.063 L1131.86 683.063 L1131.3 683.063 L1130.74 683.063 L1130.18 683.063 L1129.62 683.063 L1129.06 683.063 L1128.5 683.063 L1127.94 683.063 L1127.38 683.063 L1126.82 683.063 L1126.26 683.063 L1125.7 683.063 L1125.14 683.063 L1124.59 683.063 L1124.03 683.063 L1123.47 683.063 L1122.91 683.063 L1122.35 683.063 L1121.79 683.063 L1121.23 683.063 L1120.67 683.063 L1120.11 683.063 L1119.55 683.063 L1118.99 683.063 L1118.43 683.063 L1117.87 683.063 L1117.31 683.063 L1116.76 683.063 L1116.2 683.063 L1115.64 683.063 L1115.08 683.063 L1114.52 683.063 L1113.96 683.063 L1113.4 683.063 L1112.84 683.063 L1112.28 683.063 L1111.72 683.063 L1111.16 683.063 L1110.6 683.063 L1110.04 683.063 L1109.49 683.063 L1108.93 683.063 L1108.37 683.063 L1107.81 683.063 L1107.25 683.063 L1106.69 683.063 L1106.13 683.063 L1105.57 683.063 L1105.01 683.063 L1104.45 683.063 L1103.89 683.063 L1103.33 683.063 L1102.77 683.063 L1102.22 683.063 L1101.66 683.063 L1101.1 683.063 L1100.54 683.063 L1099.98 683.063 L1099.42 683.063 L1098.86 683.063 L1098.3 683.063 L1097.74 683.063 L1097.18 683.063 L1096.62 683.063 L1096.06 683.063 L1095.5 683.063 L1094.94 683.063 L1094.39 683.063 L1093.83 683.063 L1093.27 683.063 L1092.71 683.063 L1092.15 683.063 L1091.59 683.063 L1091.03 683.063 L1090.47 683.063 L1089.91 683.063 L1089.35 683.063 L1088.79 683.063 L1088.23 683.063 L1087.67 683.063 L1087.12 683.063 L1086.56 683.063 L1086 683.063 L1085.44 683.063 L1084.88 683.063 L1084.32 683.063 L1083.76 683.063 L1083.2 683.063 L1082.64 683.063 L1082.08 683.063 L1081.52 683.063 L1080.96 683.063 L1080.4 683.063 L1079.85 683.063 L1079.29 683.063 L1078.73 683.063 L1078.17 683.063 L1077.61 683.063 L1077.05 683.063 L1076.49 683.063 L1075.93 683.063 L1075.37 683.063 L1074.81 683.063 L1074.25 683.063 L1073.69 683.063 L1073.13 683.063 L1072.57 683.063 L1072.02 683.063 L1071.46 683.063 L1070.9 683.063 L1070.34 683.063 L1069.78 683.063 L1069.22 683.063 L1068.66 683.063 L1068.1 683.063 L1067.54 683.063 L1066.98 683.063 L1066.42 683.063 L1065.86 683.063 L1065.3 683.063 L1064.75 683.063 L1064.19 683.063 L1063.63 683.063 L1063.07 683.063 L1062.51 683.063 L1061.95 683.063 L1061.39 683.063 L1060.83 683.063 L1060.27 683.063 L1059.71 683.063 L1059.15 683.063 L1058.59 683.063 L1058.03 683.063 L1057.48 683.063 L1056.92 683.063 L1056.36 683.063 L1055.8 683.063 L1055.24 683.063 L1054.68 683.063 L1054.12 683.063 L1053.56 683.063 L1053 683.063 L1052.44 683.063 L1051.88 683.063 L1051.32 683.063 L1050.76 683.063 L1050.2 683.063 L1049.65 683.063 L1049.09 683.063 L1048.53 683.063 L1047.97 683.063 L1047.41 683.063 L1046.85 683.063 L1046.29 683.063 L1045.73 683.063 L1045.17 683.063 L1044.61 683.063 L1044.05 683.063 L1043.49 683.063 L1042.93 683.063 L1042.38 683.063 L1041.82 683.063 L1041.26 683.063 L1040.7 683.063 L1040.14 683.063 L1039.58 683.063 L1039.02 683.063 L1038.46 683.063 L1037.9 683.063 L1037.34 683.063 L1036.78 683.063 L1036.22 683.063 L1035.66 683.063 L1035.1 683.063 L1034.55 683.063 L1033.99 683.063 L1033.43 683.063 L1032.87 683.063 L1032.31 683.063 L1031.75 683.063 L1031.19 683.063 L1030.63 683.063 L1030.07 683.063 L1029.51 683.063 L1028.95 683.063 L1028.39 683.063 L1027.83 683.063 L1027.28 683.063 L1026.72 683.063 L1026.16 683.063 L1025.6 683.063 L1025.04 683.063 L1024.48 683.063 L1023.92 683.063 L1023.36 683.063 L1022.8 683.063 L1022.24 683.063 L1021.68 683.063 L1021.12 683.063 L1020.56 683.063 L1020.01 683.063 L1019.45 683.063 L1018.89 683.063 L1018.33 683.063 L1017.77 683.063 L1017.21 683.063 L1016.65 683.063 L1016.09 683.063 L1015.53 683.063 L1014.97 683.063 L1014.41 683.063 L1013.85 683.063 L1013.29 683.063 L1012.73 683.063 L1012.18 683.063 L1011.62 683.063 L1011.06 683.063 L1010.5 683.063 L1009.94 683.063 L1009.38 683.063 L1008.82 683.063 L1008.26 683.063 L1007.7 683.063 L1007.14 683.063 L1006.58 683.063 L1006.02 683.063 L1005.46 683.063 L1004.91 683.063 L1004.35 683.063 L1003.79 683.063 L1003.23 683.063 L1002.67 683.063 L1002.11 683.063 L1001.55 683.063 L1000.99 683.063 L1000.43 683.063 L999.872 683.063 L999.313 683.063 L998.754 683.063 L998.194 683.063 L997.635 683.063 L997.076 683.063 L996.517 683.063 L995.957 683.063 L995.398 683.063 L994.839 683.063 L994.28 683.063 L993.72 683.063 L993.161 683.063 L992.602 683.063 L992.043 683.063 L991.483 683.063 L990.924 683.063 L990.365 683.063 L989.806 683.063 L989.246 683.063 L988.687 683.063 L988.128 683.063 L987.569 683.063 L987.009 683.063 L986.45 683.063 L985.891 683.063 L985.332 683.063 L984.772 683.063 L984.213 683.063 L983.654 683.063 L983.095 683.063 L982.535 683.063 L981.976 683.063 L981.417 683.063 L980.858 683.063 L980.298 683.063 L979.739 683.063 L979.18 683.063 L978.621 683.063 L978.061 683.063 L977.502 683.063 L976.943 683.063 L976.384 683.063 L975.824 683.063 L975.265 683.063 L974.706 683.063 L974.147 683.063 L973.587 683.063 L973.028 683.063 L972.469 683.063 L971.91 683.063 L971.35 683.063 L970.791 683.063 L970.232 683.063 L969.673 683.063 L969.113 683.063 L968.554 683.063 L967.995 683.063 L967.436 683.063 L966.876 683.063 L966.317 683.063 L965.758 683.063 L965.199 683.063 L964.639 683.063 L964.08 683.063 L963.521 683.063 L962.962 683.063 L962.402 683.063 L961.843 683.063 L961.284 683.063 L960.725 683.063 L960.165 683.063 L959.606 683.063 L959.047 683.063 L958.488 683.063 L957.928 683.063 L957.369 683.063 L956.81 683.063 L956.251 683.063 L955.691 683.063 L955.132 683.063 L954.573 683.063 L954.014 683.063 L953.454 683.063 L952.895 683.063 L952.336 683.063 L951.777 683.063 L951.217 683.063 L950.658 683.063 L950.099 683.063 L949.54 683.063 L948.98 683.063 L948.421 683.063 L947.862 683.063 L947.303 683.063 L946.743 683.063 L946.184 683.063 L945.625 683.063 L945.066 683.063 L944.506 683.063 L943.947 683.063 L943.388 683.063 L942.829 683.063 L942.269 683.063 L941.71 683.063 L941.151 683.063 L940.592 683.063 L940.032 683.063 L939.473 683.063 L938.914 683.063 L938.355 683.063 L937.795 683.063 L937.236 683.063 L936.677 683.063 L936.118 683.063 L935.558 683.063 L934.999 683.063 L934.44 683.063 L933.881 683.063 L933.321 683.063 L932.762 683.063 L932.203 683.063 L931.644 683.063 L931.084 683.063 L930.525 683.063 L929.966 683.063 L929.406 683.063 L928.847 683.063 L928.288 683.063 L927.729 683.063 L927.169 683.063 L926.61 683.063 L926.051 683.063 L925.492 683.063 L924.932 683.063 L924.373 683.063 L923.814 683.063 L923.255 683.063 L922.695 683.063 L922.136 683.063 L921.577 683.063 L921.018 683.063 L920.458 683.063 L919.899 683.063 L919.34 683.063 L918.781 683.063 L918.221 683.063 L917.662 683.063 L917.103 683.063 L916.544 683.063 L915.984 683.063 L915.425 683.063 L914.866 683.063 L914.307 683.063 L913.747 683.063 L913.188 683.063 L912.629 683.063 L912.07 683.063 L911.51 683.063 L910.951 683.063 L910.392 683.063 L909.833 683.063 L909.273 683.063 L908.714 683.063 L908.155 683.063 L907.596 683.063 L907.036 683.063 L906.477 683.063 L905.918 683.063 L905.359 683.063 L904.799 683.063 L904.24 683.063 L903.681 683.063 L903.122 683.063 L902.562 683.063 L902.003 683.063 L901.444 683.063 L900.885 683.063 L900.325 683.063 L899.766 683.063 L899.207 683.063 L898.648 683.063 L898.088 683.063 L897.529 683.063 L896.97 683.063 L896.411 683.063 L895.851 683.063 L895.292 683.063 L894.733 683.063 L894.174 683.063 L893.614 683.063 L893.055 683.063 L892.496 683.063 L891.937 683.063 L891.377 683.063 L890.818 683.063 L890.259 683.063 L889.7 683.063 L889.14 683.063 L888.581 683.063 L888.022 683.063 L887.463 683.063 L886.903 683.063 L886.344 683.063 L885.785 683.063 L885.226 683.063 L884.666 683.063 L884.107 683.063 L883.548 683.063 L882.989 683.063 L882.429 683.063 L881.87 683.063 L881.311 683.063 L880.752 683.063 L880.192 683.063 L879.633 683.063 L879.074 683.063 L878.515 683.063 L877.955 683.063 L877.396 683.063 L876.837 683.063 L876.278 683.063 L875.718 683.063 L875.159 683.063 L874.6 683.063 L874.041 683.063 L873.481 683.063 L872.922 683.063 L872.363 683.063 L871.804 683.063 L871.244 683.063 L870.685 683.063 L870.126 683.063 L869.567 683.063 L869.007 683.063 L868.448 683.063 L867.889 683.063 L867.33 683.063 L866.77 683.063 L866.211 683.063 L865.652 683.063 L865.093 683.063 L864.533 683.063 L863.974 683.063 L863.415 683.063 L862.856 683.063 L862.296 683.063 L861.737 683.063 L861.178 683.063 L860.619 683.063 L860.059 683.063 L859.5 683.063 L858.941 683.063 L858.382 683.063 L857.822 683.063 L857.263 683.063 L856.704 683.063 L856.145 683.063 L855.585 683.063 L855.026 683.063 L854.467 683.063 L853.908 683.063 L853.348 683.063 L852.789 683.063 L852.23 683.063 L851.671 683.063 L851.111 683.063 L850.552 683.063 L849.993 683.063 L849.434 683.063 L848.874 683.063 L848.315 683.063 L847.756 683.063 L847.197 683.063 L846.637 683.063 L846.078 683.063 L845.519 683.063 L844.96 683.063 L844.4 683.063 L843.841 683.063 L843.282 683.063 L842.723 683.063 L842.163 683.063 L841.604 683.063 L841.045 683.063 L840.486 683.063 L839.926 683.063 L839.367 683.063 L838.808 683.063 L838.249 683.063 L837.689 683.063 L837.13 683.063 L836.571 683.063 L836.012 683.063 L835.452 683.063 L834.893 683.063 L834.334 683.063 L833.775 683.063 L833.215 683.063 L832.656 683.063 L832.097 683.063 L831.538 683.063 L830.978 683.063 L830.419 683.063 L829.86 683.063 L829.301 683.063 L828.741 683.063 L828.182 683.063 L827.623 683.063 L827.064 683.063 L826.504 683.063 L825.945 683.063 L825.386 683.063 L824.827 683.063 L824.267 683.063 L823.708 683.063 L823.149 683.063 L822.59 683.063 L822.03 683.063 L821.471 683.063 L820.912 683.063 L820.353 683.063 L819.793 683.063 L819.234 683.063 L818.675 683.063 L818.116 683.063 L817.556 683.063 L816.997 683.063 L816.438 683.063 L815.879 683.063 L815.319 683.063 L814.76 683.063 L814.201 683.063 L813.642 683.063 L813.082 683.063 L812.523 683.063 L811.964 683.063 L811.405 683.063 L810.845 683.063 L810.286 683.063 L809.727 683.063 L809.168 683.063 L808.608 683.063 L808.049 683.063 L807.49 683.063 L806.931 683.063 L806.371 683.063 L805.812 683.063 L805.253 683.063 L804.693 683.063 L804.134 683.063 L803.575 683.063 L803.016 683.063 L802.456 683.063 L801.897 683.063 L801.338 683.063 L800.779 683.063 L800.219 683.063 L799.66 683.063 L799.101 683.063 L798.542 683.063 L797.982 683.063 L797.423 683.063 L796.864 683.063 L796.305 683.063 L795.745 683.063 L795.186 683.063 L794.627 683.063 L794.068 683.063 L793.508 683.063 L792.949 683.063 L792.39 683.063 L791.831 683.063 L791.271 683.063 L790.712 683.063 L790.153 683.063 L789.594 683.063 L789.034 683.063 L788.475 683.063 L787.916 683.063 L787.357 683.063 L786.797 683.063 L786.238 683.063 L785.679 683.063 L785.12 683.063 L784.56 683.063 L784.001 683.063 L783.442 683.063 L782.883 683.063 L782.323 683.063 L781.764 683.063 L781.205 683.063 L780.646 683.063 L780.086 683.063 L779.527 683.063 L778.968 683.063 L778.409 683.063 L777.849 683.063 L777.29 683.063 L776.731 683.063 L776.172 683.063 L775.612 683.063 L775.053 683.063 L774.494 683.063 L773.935 683.063 L773.375 683.063 L772.816 683.063 L772.257 683.063 L771.698 683.063 L771.138 683.063 L770.579 683.063 L770.02 683.063 L769.461 683.063 L768.901 683.063 L768.342 683.063 L767.783 683.063 L767.224 683.063 L766.664 683.063 L766.105 683.063 L765.546 683.063 L764.987 683.063 L764.427 683.063 L763.868 683.063 L763.309 683.063 L762.75 683.063 L762.19 683.063 L761.631 683.063 L761.072 683.063 L760.513 683.063 L759.953 683.063 L759.394 683.063 L758.835 683.063 L758.276 683.063 L757.716 683.063 L757.157 683.063 L756.598 683.063 L756.039 683.063 L755.479 683.063 L754.92 683.063 L754.361 683.063 L753.802 683.063 L753.242 683.063 L752.683 683.063 L752.124 683.063 L751.565 683.063 L751.005 683.063 L750.446 683.063 L749.887 683.063 L749.328 683.063 L748.768 683.063 L748.209 683.063 L747.65 683.063 L747.091 683.063 L746.531 683.063 L745.972 683.063 L745.413 683.063 L744.854 683.063 L744.294 683.063 L743.735 683.063 L743.176 683.063 L742.617 683.063 L742.057 683.063 L741.498 683.063 L740.939 683.063 L740.38 683.063 L739.82 683.063 L739.261 683.063 L738.702 683.063 L738.143 683.063 L737.583 683.063 L737.024 683.063 L736.465 683.063 L735.906 683.063 L735.346 683.063 L734.787 683.063 L734.228 683.063 L733.669 683.063 L733.109 683.063 L732.55 683.063 L731.991 683.063 L731.432 683.063 L730.872 683.063 L730.313 683.063 L729.754 683.063 L729.195 683.063 L728.635 683.063 L728.076 683.063 L727.517 683.063 L726.958 683.063 L726.398 683.063 L725.839 683.063 L725.28 683.063 L724.721 683.063 L724.161 683.063 L723.602 683.063 L723.043 683.063 L722.484 683.063 L721.924 683.063 L721.365 683.063 L720.806 683.063 L720.247 683.063  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip193)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.237 720.806,684.237 721.365,684.237 721.924,684.237 722.484,684.237 723.043,684.237 723.602,684.237 724.161,684.237 724.721,684.237 725.28,684.237 725.839,684.237 726.398,684.237 726.958,684.237 727.517,684.237 728.076,684.237 728.635,684.237 729.195,684.237 729.754,684.237 730.313,684.237 730.872,684.237 731.432,684.237 731.991,684.237 732.55,684.237 733.109,684.237 733.669,684.237 734.228,684.237 734.787,684.237 735.346,684.237 735.906,684.237 736.465,684.237 737.024,684.237 737.583,684.237 738.143,684.237 738.702,684.237 739.261,684.237 739.82,684.237 740.38,684.237 740.939,684.237 741.498,684.237 742.057,684.237 742.617,684.237 743.176,684.237 743.735,684.237 744.294,684.237 744.854,684.237 745.413,684.237 745.972,684.237 746.531,684.237 747.091,684.237 747.65,684.237 748.209,684.237 748.768,684.237 749.328,684.237 749.887,684.237 750.446,684.237 751.005,684.237 751.565,684.237 752.124,684.237 752.683,684.237 753.242,684.237 753.802,684.237 754.361,684.237 754.92,684.237 755.479,684.237 756.039,684.237 756.598,684.237 757.157,684.237 757.716,684.237 758.276,684.237 758.835,684.237 759.394,684.237 759.953,684.237 760.513,684.237 761.072,684.237 761.631,684.237 762.19,684.237 762.75,684.237 763.309,684.237 763.868,684.237 764.427,684.237 764.987,684.237 765.546,684.237 766.105,684.237 766.664,684.237 767.224,684.237 767.783,684.237 768.342,684.237 768.901,684.237 769.461,684.237 770.02,684.237 770.579,684.237 771.138,684.237 771.698,684.237 772.257,684.237 772.816,684.237 773.375,684.237 773.935,684.237 774.494,684.237 775.053,684.237 775.612,684.237 776.172,684.237 776.731,684.237 777.29,684.237 777.849,684.237 778.409,684.237 778.968,684.237 779.527,684.237 780.086,684.237 780.646,684.237 781.205,684.237 781.764,684.237 782.323,684.237 782.883,684.237 783.442,684.237 784.001,684.237 784.56,684.237 785.12,684.237 785.679,684.237 786.238,684.237 786.797,684.237 787.357,684.237 787.916,684.237 788.475,684.237 789.034,684.237 789.594,684.237 790.153,684.237 790.712,684.237 791.271,684.237 791.831,684.237 792.39,684.237 792.949,684.237 793.508,684.237 794.068,684.237 794.627,684.237 795.186,684.237 795.745,684.237 796.305,684.237 796.864,684.237 797.423,684.237 797.982,684.237 798.542,684.237 799.101,684.237 799.66,684.237 800.219,684.237 800.779,684.237 801.338,684.237 801.897,684.237 802.456,684.237 803.016,684.237 803.575,684.237 804.134,684.237 804.693,684.237 805.253,684.237 805.812,684.237 806.371,684.237 806.931,684.237 807.49,684.237 808.049,684.237 808.608,684.237 809.168,684.237 809.727,684.237 810.286,684.237 810.845,684.237 811.405,684.237 811.964,684.237 812.523,684.237 813.082,684.237 813.642,684.237 814.201,684.237 814.76,684.237 815.319,684.237 815.879,684.237 816.438,684.237 816.997,684.237 817.556,684.237 818.116,684.237 818.675,684.237 819.234,684.237 819.793,684.237 820.353,684.237 820.912,684.237 821.471,684.237 822.03,684.237 822.59,684.237 823.149,684.237 823.708,684.237 824.267,684.237 824.827,684.237 825.386,684.237 825.945,684.237 826.504,684.237 827.064,684.237 827.623,684.237 828.182,684.237 828.741,684.237 829.301,684.237 829.86,684.237 830.419,684.237 830.978,684.237 831.538,684.237 832.097,684.237 832.656,684.237 833.215,684.237 833.775,684.237 834.334,684.237 834.893,684.237 835.452,684.237 836.012,684.237 836.571,684.237 837.13,684.237 837.689,684.237 838.249,684.237 838.808,684.237 839.367,684.237 839.926,684.237 840.486,684.237 841.045,684.237 841.604,684.237 842.163,684.237 842.723,684.237 843.282,684.237 843.841,684.237 844.4,684.237 844.96,684.237 845.519,684.237 846.078,684.237 846.637,684.237 847.197,684.237 847.756,684.237 848.315,684.237 848.874,684.237 849.434,684.237 849.993,684.237 850.552,684.237 851.111,684.237 851.671,684.237 852.23,684.237 852.789,684.237 853.348,684.237 853.908,684.237 854.467,684.237 855.026,684.237 855.585,684.237 856.145,684.237 856.704,684.237 857.263,684.237 857.822,684.237 858.382,684.237 858.941,684.237 859.5,684.237 860.059,684.237 860.619,684.237 861.178,684.237 861.737,684.237 862.296,684.237 862.856,684.237 863.415,684.237 863.974,684.237 864.533,684.237 865.093,684.237 865.652,684.237 866.211,684.237 866.77,684.237 867.33,684.237 867.889,684.237 868.448,684.237 869.007,684.237 869.567,684.237 870.126,684.237 870.685,684.237 871.244,684.237 871.804,684.237 872.363,684.237 872.922,684.237 873.481,684.237 874.041,684.237 874.6,684.237 875.159,684.237 875.718,684.237 876.278,684.237 876.837,684.237 877.396,684.237 877.955,684.237 878.515,684.237 879.074,684.237 879.633,684.237 880.192,684.237 880.752,684.237 881.311,684.237 881.87,684.237 882.429,684.237 882.989,684.237 883.548,684.237 884.107,684.237 884.666,684.237 885.226,684.237 885.785,684.237 886.344,684.237 886.903,684.237 887.463,684.237 888.022,684.237 888.581,684.237 889.14,684.237 889.7,684.237 890.259,684.237 890.818,684.237 891.377,684.237 891.937,684.237 892.496,684.237 893.055,684.237 893.614,684.237 894.174,684.237 894.733,684.237 895.292,684.237 895.851,684.237 896.411,684.237 896.97,684.237 897.529,684.237 898.088,684.237 898.648,684.237 899.207,684.237 899.766,684.237 900.325,684.237 900.885,684.237 901.444,684.237 902.003,684.237 902.562,684.237 903.122,684.237 903.681,684.237 904.24,684.237 904.799,684.237 905.359,684.237 905.918,684.237 906.477,684.237 907.036,684.237 907.596,684.237 908.155,684.237 908.714,684.237 909.273,684.237 909.833,684.237 910.392,684.237 910.951,684.237 911.51,684.237 912.07,684.237 912.629,684.237 913.188,684.237 913.747,684.237 914.307,684.237 914.866,684.237 915.425,684.237 915.984,684.237 916.544,684.237 917.103,684.237 917.662,684.237 918.221,684.237 918.781,684.237 919.34,684.237 919.899,684.237 920.458,684.237 921.018,684.237 921.577,684.237 922.136,684.237 922.695,684.237 923.255,684.237 923.814,684.237 924.373,684.237 924.932,684.237 925.492,684.237 926.051,684.237 926.61,684.237 927.169,684.237 927.729,684.237 928.288,684.237 928.847,684.237 929.406,684.237 929.966,684.237 930.525,684.237 931.084,684.237 931.644,684.237 932.203,684.237 932.762,684.237 933.321,684.237 933.881,684.237 934.44,684.237 934.999,684.237 935.558,684.237 936.118,684.237 936.677,684.237 937.236,684.237 937.795,684.237 938.355,684.237 938.914,684.237 939.473,684.237 940.032,684.237 940.592,684.237 941.151,684.237 941.71,684.237 942.269,684.237 942.829,684.237 943.388,684.237 943.947,684.237 944.506,684.237 945.066,684.237 945.625,684.237 946.184,684.237 946.743,684.237 947.303,684.237 947.862,684.237 948.421,684.237 948.98,684.237 949.54,684.237 950.099,684.237 950.658,684.237 951.217,684.237 951.777,684.237 952.336,684.237 952.895,684.237 953.454,684.237 954.014,684.237 954.573,684.237 955.132,684.237 955.691,684.237 956.251,684.237 956.81,684.237 957.369,684.237 957.928,684.237 958.488,684.237 959.047,684.237 959.606,684.237 960.165,684.237 960.725,684.237 961.284,684.237 961.843,684.237 962.402,684.237 962.962,684.237 963.521,684.237 964.08,684.237 964.639,684.237 965.199,684.237 965.758,684.237 966.317,684.237 966.876,684.237 967.436,684.237 967.995,684.237 968.554,684.237 969.113,684.237 969.673,684.237 970.232,684.237 970.791,684.237 971.35,684.237 971.91,684.237 972.469,684.237 973.028,684.237 973.587,684.237 974.147,684.237 974.706,684.237 975.265,684.237 975.824,684.237 976.384,684.237 976.943,684.237 977.502,684.237 978.061,684.237 978.621,684.237 979.18,684.237 979.739,684.237 980.298,684.237 980.858,684.237 981.417,684.237 981.976,684.237 982.535,684.237 983.095,684.237 983.654,684.237 984.213,684.237 984.772,684.237 985.332,684.237 985.891,684.237 986.45,684.237 987.009,684.237 987.569,684.237 988.128,684.237 988.687,684.237 989.246,684.237 989.806,684.237 990.365,684.237 990.924,684.237 991.483,684.237 992.043,684.237 992.602,684.237 993.161,684.237 993.72,684.237 994.28,684.237 994.839,684.237 995.398,684.237 995.957,684.237 996.517,684.237 997.076,684.237 997.635,684.237 998.194,684.237 998.754,684.237 999.313,684.237 999.872,684.237 1000.43,684.237 1000.99,684.237 1001.55,684.237 1002.11,684.237 1002.67,684.237 1003.23,684.237 1003.79,684.237 1004.35,684.237 1004.91,684.237 1005.46,684.237 1006.02,684.237 1006.58,684.237 1007.14,684.237 1007.7,684.237 1008.26,684.237 1008.82,684.237 1009.38,684.237 1009.94,684.237 1010.5,684.237 1011.06,684.237 1011.62,684.237 1012.18,684.237 1012.73,684.237 1013.29,684.237 1013.85,684.237 1014.41,684.237 1014.97,684.237 1015.53,684.237 1016.09,684.237 1016.65,684.237 1017.21,684.237 1017.77,684.237 1018.33,684.237 1018.89,684.237 1019.45,684.237 1020.01,684.237 1020.56,684.237 1021.12,684.237 1021.68,684.237 1022.24,684.237 1022.8,684.237 1023.36,684.237 1023.92,684.237 1024.48,684.237 1025.04,684.237 1025.6,684.237 1026.16,684.237 1026.72,684.237 1027.28,684.237 1027.83,684.237 1028.39,684.237 1028.95,684.237 1029.51,684.237 1030.07,684.237 1030.63,684.237 1031.19,684.237 1031.75,684.237 1032.31,684.237 1032.87,684.237 1033.43,684.237 1033.99,684.237 1034.55,684.237 1035.1,684.237 1035.66,684.237 1036.22,684.237 1036.78,684.237 1037.34,684.237 1037.9,684.237 1038.46,684.237 1039.02,684.237 1039.58,684.237 1040.14,684.237 1040.7,684.237 1041.26,684.237 1041.82,684.237 1042.38,684.237 1042.93,684.237 1043.49,684.237 1044.05,684.237 1044.61,684.237 1045.17,684.237 1045.73,684.237 1046.29,684.237 1046.85,684.237 1047.41,684.237 1047.97,684.237 1048.53,684.237 1049.09,684.237 1049.65,684.237 1050.2,684.237 1050.76,684.237 1051.32,684.237 1051.88,684.237 1052.44,684.237 1053,684.237 1053.56,684.237 1054.12,684.237 1054.68,684.237 1055.24,684.237 1055.8,684.237 1056.36,684.237 1056.92,684.237 1057.48,684.237 1058.03,684.237 1058.59,684.237 1059.15,684.237 1059.71,684.237 1060.27,684.237 1060.83,684.237 1061.39,684.237 1061.95,684.237 1062.51,684.237 1063.07,684.237 1063.63,684.237 1064.19,684.237 1064.75,684.237 1065.3,684.237 1065.86,684.237 1066.42,684.237 1066.98,684.237 1067.54,684.237 1068.1,684.237 1068.66,684.237 1069.22,684.237 1069.78,684.237 1070.34,684.237 1070.9,684.237 1071.46,684.237 1072.02,684.237 1072.57,684.237 1073.13,684.237 1073.69,684.237 1074.25,684.237 1074.81,684.237 1075.37,684.237 1075.93,684.237 1076.49,684.237 1077.05,684.237 1077.61,684.237 1078.17,684.237 1078.73,684.237 1079.29,684.237 1079.85,684.237 1080.4,684.237 1080.96,684.237 1081.52,684.237 1082.08,684.237 1082.64,684.237 1083.2,684.237 1083.76,684.237 1084.32,684.237 1084.88,684.237 1085.44,684.237 1086,684.237 1086.56,684.237 1087.12,684.237 1087.67,684.237 1088.23,684.237 1088.79,684.237 1089.35,684.237 1089.91,684.237 1090.47,684.237 1091.03,684.237 1091.59,684.237 1092.15,684.237 1092.71,684.237 1093.27,684.237 1093.83,684.237 1094.39,684.237 1094.94,684.237 1095.5,684.237 1096.06,684.237 1096.62,684.237 1097.18,684.237 1097.74,684.237 1098.3,684.237 1098.86,684.237 1099.42,684.237 1099.98,684.237 1100.54,684.237 1101.1,684.237 1101.66,684.237 1102.22,684.237 1102.77,684.237 1103.33,684.237 1103.89,684.237 1104.45,684.237 1105.01,684.237 1105.57,684.237 1106.13,684.237 1106.69,684.237 1107.25,684.237 1107.81,684.237 1108.37,684.237 1108.93,684.237 1109.49,684.237 1110.04,684.237 1110.6,684.237 1111.16,684.237 1111.72,684.237 1112.28,684.237 1112.84,684.237 1113.4,684.237 1113.96,684.237 1114.52,684.237 1115.08,684.237 1115.64,684.237 1116.2,684.237 1116.76,684.237 1117.31,684.237 1117.87,684.237 1118.43,684.237 1118.99,684.237 1119.55,684.237 1120.11,684.237 1120.67,684.237 1121.23,684.237 1121.79,684.237 1122.35,684.237 1122.91,684.237 1123.47,684.237 1124.03,684.237 1124.59,684.237 1125.14,684.237 1125.7,684.237 1126.26,684.237 1126.82,684.237 1127.38,684.237 1127.94,684.237 1128.5,684.237 1129.06,684.237 1129.62,684.237 1130.18,684.237 1130.74,684.237 1131.3,684.237 1131.86,684.237 1132.41,684.237 1132.97,684.237 1133.53,684.237 1134.09,684.237 1134.65,684.237 1135.21,684.237 1135.77,684.237 1136.33,684.237 1136.89,684.237 1137.45,684.237 1138.01,684.237 1138.57,684.237 1139.13,684.237 1139.68,684.237 1140.24,684.237 1140.8,684.237 1141.36,684.237 1141.92,684.237 1142.48,684.237 1143.04,684.237 1143.6,684.237 1144.16,684.237 1144.72,684.237 1145.28,684.237 1145.84,684.237 1146.4,684.237 1146.96,684.237 1147.51,684.237 1148.07,684.237 1148.63,684.237 1149.19,684.237 1149.75,684.237 1150.31,684.237 1150.87,684.237 1151.43,684.237 1151.99,684.237 1152.55,684.237 1153.11,684.237 1153.67,684.237 1154.23,684.237 1154.78,684.237 1155.34,684.237 1155.9,684.237 1156.46,684.237 1157.02,684.237 1157.58,684.237 1158.14,684.237 1158.7,684.237 1159.26,684.237 1159.82,684.237 1160.38,684.237 1160.94,684.237 1161.5,684.237 1162.05,684.237 1162.61,684.237 1163.17,684.237 1163.73,684.237 1164.29,684.237 1164.85,684.237 1165.41,684.237 1165.97,684.237 1166.53,684.237 1167.09,684.237 1167.65,684.237 1168.21,684.237 1168.77,684.237 1169.33,684.237 1169.88,684.237 1170.44,684.237 1171,684.237 1171.56,684.237 1172.12,684.237 1172.68,684.237 1173.24,684.237 1173.8,684.237 1174.36,684.237 1174.92,684.237 1175.48,684.237 1176.04,684.237 1176.6,684.237 1177.15,684.237 1177.71,684.237 1178.27,684.237 1178.83,684.237 1179.39,684.237 1179.95,684.237 1180.51,684.237 1181.07,684.237 1181.63,684.237 1182.19,684.237 1182.75,684.237 1183.31,684.237 1183.87,684.237 1184.43,684.237 1184.98,684.237 1185.54,684.237 1186.1,684.237 1186.66,684.237 1187.22,684.237 1187.78,684.237 1188.34,684.237 1188.9,684.237 1189.46,684.237 1190.02,684.237 1190.58,684.237 1191.14,684.237 1191.7,684.237 1192.25,684.237 1192.81,684.237 1193.37,684.237 1193.93,684.237 1194.49,684.237 1195.05,684.237 1195.61,684.237 1196.17,684.237 1196.73,684.237 1197.29,684.237 1197.85,684.237 1198.41,684.237 1198.97,684.237 1199.52,684.237 1200.08,684.237 1200.64,684.237 1201.2,684.237 1201.76,684.237 1202.32,684.237 1202.88,684.237 1203.44,684.237 1204,684.237 1204.56,684.237 1205.12,684.237 1205.68,684.237 1206.24,684.237 1206.8,684.237 1207.35,684.237 1207.91,684.237 1208.47,684.237 1209.03,684.237 1209.59,684.237 1210.15,684.237 1210.71,684.237 1211.27,684.237 1211.83,684.237 1212.39,684.237 1212.95,684.237 1213.51,684.237 1214.07,684.237 1214.62,684.237 1215.18,684.237 1215.74,684.237 1216.3,684.237 1216.86,684.237 1217.42,684.237 1217.98,684.237 1218.54,684.237 1219.1,684.237 1219.66,684.237 1220.22,684.237 1220.78,684.237 1221.34,684.237 1221.89,684.237 1222.45,684.237 1223.01,684.237 1223.57,684.237 1224.13,684.237 1224.69,684.237 1225.25,684.237 1225.81,684.237 1226.37,684.237 1226.93,684.237 1227.49,684.237 1228.05,684.237 1228.61,684.237 1229.17,684.237 1229.72,684.237 1230.28,684.237 1230.84,684.237 1231.4,684.237 1231.96,684.237 1232.52,684.237 1233.08,684.237 1233.64,684.237 1234.2,684.237 1234.76,684.237 1235.32,684.237 1235.88,684.237 1236.44,684.237 1236.99,684.237 1237.55,684.237 1238.11,684.237 1238.67,684.237 1239.23,684.237 1239.79,684.237 1240.35,684.237 1240.91,684.237 1241.47,684.237 1242.03,684.237 1242.59,684.237 1243.15,684.237 1243.71,684.237 1244.26,684.237 1244.82,684.237 1245.38,684.237 1245.94,684.237 1246.5,684.237 1247.06,684.237 1247.62,684.237 1248.18,684.237 1248.74,684.237 1249.3,684.237 1249.86,684.237 1250.42,684.237 1250.98,684.237 1251.54,684.237 1252.09,684.237 1252.65,684.237 1253.21,684.237 1253.77,684.237 1254.33,684.237 1254.89,684.237 1255.45,684.237 1256.01,684.237 1256.57,684.237 1257.13,684.237 1257.69,684.237 1258.25,684.237 1258.81,684.237 1259.36,684.237 1259.92,684.237 1260.48,684.237 1261.04,684.237 1261.6,684.237 1262.16,684.237 1262.72,684.237 1263.28,684.237 1263.84,684.237 1264.4,684.237 1264.96,684.237 1265.52,684.237 1266.08,684.237 1266.63,684.237 1267.19,684.237 1267.75,684.237 1268.31,684.237 1268.87,684.237 1269.43,684.237 1269.99,684.237 1270.55,684.237 1271.11,684.237 1271.67,684.237 1272.23,684.237 1272.79,684.237 1273.35,684.237 1273.91,684.237 1274.46,684.237 1275.02,684.237 1275.58,684.237 1276.14,684.237 1276.7,684.237 1277.26,684.237 1277.82,684.237 1278.38,684.237 1278.94,684.237 1279.5,684.237 1280.06,684.237 1280.62,684.237 1281.18,684.237 1281.73,684.237 1282.29,684.237 1282.85,684.237 1283.41,684.237 1283.97,684.237 1284.53,684.237 1285.09,684.237 1285.65,684.237 1286.21,684.237 1286.77,684.237 1287.33,684.237 1287.89,684.237 1288.45,684.237 1289,684.237 1289.56,684.237 1290.12,684.237 1290.68,684.237 1291.24,684.237 1291.8,684.237 1292.36,684.237 1292.92,684.237 1293.48,684.237 1294.04,684.237 1294.6,684.237 1295.16,684.237 1295.72,684.237 1296.28,684.237 1296.83,684.237 1297.39,684.237 1297.95,684.237 1298.51,684.237 1299.07,684.237 1299.63,684.237 1300.19,684.237 1300.75,684.237 1301.31,684.237 1301.87,684.237 1302.43,684.237 1302.99,684.237 1303.55,684.237 1304.1,684.237 1304.66,684.237 1305.22,684.237 1305.78,684.237 1306.34,684.237 1306.9,684.237 1307.46,684.237 1308.02,684.237 1308.58,684.237 1309.14,684.237 1309.7,684.237 1310.26,684.237 1310.82,684.237 1311.38,684.237 1311.93,684.237 1312.49,684.237 1313.05,684.237 1313.61,684.237 1314.17,684.237 1314.73,684.237 1315.29,684.237 1315.85,684.237 1316.41,684.237 1316.97,684.237 1317.53,684.237 1318.09,684.237 1318.65,684.237 1319.2,684.237 1319.76,684.237 1320.32,684.237 1320.88,684.237 1321.44,684.237 1322,684.237 1322.56,684.237 1323.12,684.237 1323.68,684.237 1324.24,684.237 1324.8,684.237 1325.36,684.237 1325.92,684.237 1326.47,684.237 1327.03,684.237 1327.59,684.237 1328.15,684.237 1328.71,684.237 1329.27,684.237 1329.83,684.237 1330.39,684.237 1330.95,684.237 1331.51,684.237 1332.07,684.237 1332.63,684.237 1333.19,684.237 1333.75,684.237 1334.3,684.237 1334.86,684.237 1335.42,684.237 1335.98,684.237 1336.54,684.237 1337.1,684.237 1337.66,684.237 1338.22,684.237 1338.78,684.237 1339.34,684.237 1339.9,684.237 1340.46,684.237 1341.02,684.237 1341.57,684.237 1342.13,684.237 1342.69,684.237 1343.25,684.237 1343.81,684.237 1344.37,684.237 1344.93,684.237 1345.49,684.237 1346.05,684.237 1346.61,684.237 1347.17,684.237 1347.73,684.237 1348.29,684.237 1348.84,684.237 1349.4,684.237 1349.96,684.237 1350.52,684.237 1351.08,684.237 1351.64,684.237 1352.2,684.237 1352.76,684.237 1353.32,684.237 1353.88,684.237 1354.44,684.237 1355,684.237 1355.56,684.237 1356.12,684.237 1356.67,684.237 1357.23,684.237 1357.79,684.237 1358.35,684.237 1358.91,684.237 1359.47,684.237 1360.03,684.237 1360.59,684.237 1361.15,684.237 1361.71,684.237 1362.27,684.237 1362.83,684.237 1363.39,684.237 1363.94,684.237 1364.5,684.237 1365.06,684.237 1365.62,684.237 1366.18,684.237 1366.74,684.237 1367.3,684.237 1367.86,684.237 1368.42,684.237 1368.98,684.237 1369.54,684.237 1370.1,684.237 1370.66,684.237 1371.21,684.237 1371.77,684.237 1372.33,684.237 1372.89,684.237 1373.45,684.237 1374.01,684.237 1374.57,684.237 1375.13,684.237 1375.69,684.237 1376.25,684.237 1376.81,684.237 1377.37,684.237 1377.93,684.237 1378.49,684.237 1379.04,684.237 1379.6,684.237 1380.16,684.237 1380.72,684.237 1381.28,684.237 1381.84,684.237 1382.4,684.237 1382.96,684.237 1383.52,684.237 1384.08,684.237 1384.64,684.237 1385.2,684.237 1385.76,684.237 1386.31,684.237 1386.87,684.237 1387.43,684.237 1387.99,684.237 1388.55,684.237 1389.11,684.237 1389.67,684.237 1390.23,684.237 1390.79,684.237 1391.35,684.237 1391.91,684.237 1392.47,684.237 1393.03,684.237 1393.58,684.237 1394.14,684.237 1394.7,684.237 1395.26,684.237 1395.82,684.237 1396.38,684.237 1396.94,684.237 1397.5,684.237 1398.06,684.237 1398.62,684.237 1399.18,684.237 1399.74,684.237 1400.3,684.237 1400.86,684.237 1401.41,684.237 1401.97,684.237 1402.53,684.237 1403.09,684.237 1403.65,684.237 1404.21,684.237 1404.77,684.237 1405.33,684.237 1405.89,684.237 1406.45,684.237 1407.01,684.237 1407.57,684.237 1408.13,684.237 1408.68,684.237 1409.24,684.237 1409.8,684.237 1410.36,684.237 1410.92,684.237 1411.48,684.237 1412.04,684.237 1412.6,684.237 1413.16,684.237 1413.72,684.237 1414.28,684.237 1414.84,684.237 1415.4,684.237 1415.95,684.237 1416.51,684.237 1417.07,684.237 1417.63,684.237 1418.19,684.237 1418.75,684.237 1419.31,684.237 1419.87,684.237 1420.43,684.237 1420.99,684.237 1421.55,684.237 1422.11,684.237 1422.67,684.237 1423.23,684.237 1423.78,684.237 1424.34,684.237 1424.9,684.237 1425.46,684.237 1426.02,684.237 1426.58,684.237 1427.14,684.237 1427.7,684.237 1428.26,684.237 1428.82,684.237 1429.38,684.237 1429.94,684.237 1430.5,684.237 1431.05,684.237 1431.61,684.237 1432.17,684.237 1432.73,684.237 1433.29,684.237 1433.85,684.237 1434.41,684.237 1434.97,684.237 1435.53,684.237 1436.09,684.237 1436.65,684.237 1437.21,684.237 1437.77,684.237 1438.33,684.237 1438.88,684.237 1439.44,684.237 1440,684.237 1440.56,684.237 1441.12,684.237 1441.68,684.237 1442.24,684.237 1442.8,684.237 1443.36,684.237 1443.92,684.237 1444.48,684.237 1445.04,684.237 1445.6,684.237 1446.15,684.237 1446.71,684.237 1447.27,684.237 1447.83,684.237 1448.39,684.237 1448.95,684.237 1449.51,684.237 1450.07,684.237 1450.63,684.237 1451.19,684.237 1451.75,684.237 1452.31,684.237 1452.87,684.237 1453.42,684.237 1453.98,684.237 1454.54,684.237 1455.1,684.237 1455.66,684.237 1456.22,684.237 1456.78,684.237 1457.34,684.237 1457.9,684.237 1458.46,684.237 1459.02,684.237 1459.58,684.237 1460.14,684.237 1460.7,684.237 1461.25,684.237 1461.81,684.237 1462.37,684.237 1462.93,684.237 1463.49,684.237 1464.05,684.237 1464.61,684.237 1465.17,684.237 1465.73,684.237 1466.29,684.237 1466.85,684.237 1467.41,684.237 1467.97,684.237 1468.52,684.237 1469.08,684.237 1469.64,684.237 1470.2,684.237 1470.76,684.237 1471.32,684.237 1471.88,684.237 1472.44,684.237 1473,684.237 1473.56,684.237 1474.12,684.237 1474.68,684.237 1475.24,684.237 1475.79,684.237 1476.35,684.237 1476.91,684.237 1477.47,684.237 1478.03,684.237 1478.59,684.237 1479.15,684.237 1479.71,684.237 1480.27,684.237 1480.83,684.237 1481.39,684.237 1481.95,684.237 1482.51,684.237 1483.07,684.237 1483.62,684.237 1484.18,684.237 1484.74,684.237 1485.3,684.237 1485.86,684.237 1486.42,684.237 1486.98,684.237 1487.54,684.237 1488.1,684.237 1488.66,684.237 1489.22,684.237 1489.78,684.237 1490.34,684.237 1490.89,684.237 1491.45,684.237 1492.01,684.237 1492.57,684.237 1493.13,684.237 1493.69,684.237 1494.25,684.237 1494.81,684.237 1495.37,684.237 1495.93,684.237 1496.49,684.237 1497.05,684.237 1497.61,684.237 1498.16,684.237 1498.72,684.237 1499.28,684.237 1499.84,684.237 1500.4,684.237 1500.96,684.237 1501.52,684.237 1502.08,684.237 1502.64,684.237 1503.2,684.237 1503.76,684.237 1504.32,684.237 1504.88,684.237 1505.44,684.237 1505.99,684.237 1506.55,684.237 1507.11,684.237 1507.67,684.237 1508.23,684.237 1508.79,684.237 1509.35,684.237 1509.91,684.237 1510.47,684.237 1511.03,684.237 1511.59,684.237 1512.15,684.237 1512.71,684.237 1513.26,684.237 1513.82,684.237 1514.38,684.237 1514.94,684.237 1515.5,684.237 1516.06,684.237 1516.62,684.237 1517.18,684.237 1517.74,684.237 1518.3,684.237 1518.86,684.237 1519.42,684.237 1519.98,684.237 1520.53,684.237 1521.09,684.237 1521.65,684.237 1522.21,684.237 1522.77,684.237 1523.33,684.237 1523.89,684.237 1524.45,684.237 1525.01,684.237 1525.57,684.237 1526.13,684.237 1526.69,684.237 1527.25,684.237 1527.81,684.237 1528.36,684.237 1528.92,684.237 1529.48,684.237 1530.04,684.237 1530.6,684.237 1531.16,684.237 1531.72,684.237 1532.28,684.237 1532.84,684.237 1533.4,684.237 1533.96,684.237 1534.52,684.237 1535.08,684.237 1535.63,684.237 1536.19,684.237 1536.75,684.237 1537.31,684.237 1537.87,684.237 1538.43,684.237 1538.99,684.237 1539.55,684.237 1540.11,684.237 1540.67,684.237 1541.23,684.237 1541.79,684.237 1542.35,684.237 1542.9,684.237 1543.46,684.237 1544.02,684.237 1544.58,684.237 1545.14,684.237 1545.7,684.237 1546.26,684.237 1546.82,684.237 1547.38,684.237 1547.94,684.237 1548.5,684.237 1549.06,684.237 1549.62,684.237 1550.18,684.237 1550.73,684.237 1551.29,684.237 1551.85,684.237 1552.41,684.237 1552.97,684.237 1553.53,684.237 1554.09,684.237 1554.65,684.237 1555.21,684.237 1555.77,684.237 1556.33,684.237 1556.89,684.237 1557.45,684.237 1558,684.237 1558.56,684.237 1559.12,684.237 1559.68,684.237 1560.24,684.237 1560.8,684.237 1561.36,684.237 1561.92,684.237 1562.48,684.237 1563.04,684.237 1563.6,684.237 1564.16,684.237 1564.72,684.237 1565.28,684.237 1565.83,684.237 1566.39,684.237 1566.95,684.237 1567.51,684.237 1568.07,684.237 1568.63,684.237 1569.19,684.237 1569.75,684.237 1570.31,684.237 1570.87,684.237 1571.43,684.237 1571.99,684.237 1572.55,684.237 1573.1,684.237 1573.66,684.237 1574.22,684.237 1574.78,684.237 1575.34,684.237 1575.9,684.237 1576.46,684.237 1577.02,684.237 1577.58,684.237 1578.14,684.237 1578.7,684.237 1579.26,684.237 1579.82,684.237 1580.37,684.237 1580.93,684.237 1581.49,684.237 1582.05,684.237 1582.61,684.237 1583.17,684.237 1583.73,684.237 1584.29,684.237 1584.85,684.237 1585.41,684.237 1585.97,684.237 1586.53,684.237 1587.09,684.237 1587.65,684.237 1588.2,684.237 1588.76,684.237 1589.32,684.237 1589.88,684.237 1590.44,684.237 1591,684.237 1591.56,684.237 1592.12,684.237 1592.68,684.237 1593.24,684.237 1593.8,684.237 1594.36,684.237 1594.92,684.237 1595.47,684.237 1596.03,684.237 1596.59,684.237 1597.15,684.237 1597.71,684.237 1598.27,684.237 1598.83,684.237 1599.39,684.237 1599.95,684.237 1600.51,684.237 1601.07,684.237 1601.63,684.237 1602.19,684.237 1602.74,684.237 1603.3,684.237 1603.86,684.237 1604.42,684.237 1604.98,684.237 1605.54,684.237 1606.1,684.237 1606.66,684.237 1607.22,684.237 1607.78,684.237 1608.34,684.237 1608.9,684.237 1609.46,684.237 1610.02,684.237 1610.57,684.237 1611.13,684.237 1611.69,684.237 1612.25,684.237 1612.81,684.237 1613.37,684.237 1613.93,684.237 1614.49,684.237 1615.05,684.237 1615.61,684.237 1616.17,684.237 1616.73,684.237 1617.29,684.237 1617.84,684.237 1618.4,684.237 1618.96,684.237 1619.52,684.237 1620.08,684.237 1620.64,684.237 1621.2,684.237 1621.76,684.237 1622.32,684.237 1622.88,684.237 1623.44,684.237 1624,684.237 1624.56,684.237 1625.11,684.237 1625.67,684.237 1626.23,684.237 1626.79,684.237 1627.35,684.237 1627.91,684.237 1628.47,684.237 1629.03,684.237 1629.59,684.237 1630.15,684.237 1630.71,684.237 1631.27,684.237 1631.83,684.237 1632.39,684.237 1632.94,684.237 1633.5,684.237 1634.06,684.237 1634.62,684.237 1635.18,684.237 1635.74,684.237 1636.3,684.237 1636.86,684.237 1637.42,684.237 1637.98,684.237 1638.54,684.237 1639.1,684.237 1639.66,684.237 1640.21,684.237 1640.77,684.237 1641.33,684.237 1641.89,684.237 1642.45,684.237 1643.01,684.237 1643.57,684.237 1644.13,684.237 1644.69,684.237 1645.25,684.237 1645.81,684.237 1646.37,684.237 1646.93,684.237 1647.48,684.237 1648.04,684.237 1648.6,684.237 1649.16,684.237 1649.72,684.237 1650.28,684.237 1650.84,684.237 1651.4,684.237 1651.96,684.237 1652.52,684.237 1653.08,684.237 1653.64,684.237 1654.2,684.237 1654.76,684.237 1655.31,684.237 1655.87,684.237 1656.43,684.237 1656.99,684.237 1657.55,684.237 1658.11,684.237 1658.67,684.237 1659.23,684.237 1659.79,684.237 1660.35,684.237 1660.91,684.237 1661.47,684.237 1662.03,684.237 1662.58,684.237 1663.14,684.237 1663.7,684.237 1664.26,684.237 1664.82,684.237 1665.38,684.237 1665.94,684.237 1666.5,684.237 1667.06,684.237 1667.62,684.237 1668.18,684.237 1668.74,684.237 1669.3,684.237 1669.85,684.237 1670.41,684.237 1670.97,684.237 1671.53,684.237 1672.09,684.237 1672.65,684.237 1673.21,684.237 1673.77,684.237 1674.33,684.237 1674.89,684.237 1675.45,684.237 1676.01,684.237 1676.57,684.237 1677.13,684.237 1677.68,684.237 1678.24,684.237 1678.8,684.237 1679.36,684.237 1679.92,684.237 1680.48,684.237 1681.04,684.237 1681.6,684.237 1682.16,684.237 1682.72,684.237 1683.28,684.237 1683.84,684.237 1684.4,684.237 1684.95,684.237 1685.51,684.237 1686.07,684.237 1686.63,684.237 1687.19,684.237 1687.75,684.237 1688.31,684.237 1688.87,684.237 1689.43,684.237 1689.99,684.237 1690.55,684.237 1691.11,684.237 1691.67,684.237 1692.23,684.237 1692.78,684.237 1693.34,684.237 1693.9,684.237 1694.46,684.237 1695.02,684.237 1695.58,684.237 1696.14,684.237 1696.7,684.237 1697.26,684.237 1697.82,684.237 1698.38,684.237 1698.94,684.237 1699.5,684.237 1700.05,684.237 1700.61,684.237 1701.17,684.237 1701.73,684.237 1702.29,684.237 1702.85,684.237 1703.41,684.237 1703.97,684.237 1704.53,684.237 1705.09,684.237 1705.65,684.237 1706.21,684.237 1706.77,684.237 1707.32,684.237 1707.88,684.237 1708.44,684.237 1709,684.237 1709.56,684.237 1710.12,684.237 1710.68,684.237 1711.24,684.237 1711.8,684.237 1712.36,684.237 1712.92,684.237 1713.48,684.237 1714.04,684.237 1714.6,684.237 1715.15,684.237 1715.71,684.237 1716.27,684.237 1716.83,684.237 1717.39,684.237 1717.95,684.237 1718.51,684.237 1719.07,684.237 1719.63,684.237 1720.19,684.237 1720.75,684.237 1721.31,684.237 1721.87,684.237 1722.42,684.237 1722.98,684.237 1723.54,684.237 1724.1,684.237 1724.66,684.237 1725.22,684.237 1725.78,684.237 1726.34,684.237 1726.9,684.237 1727.46,684.237 1728.02,684.237 1728.58,684.237 1729.14,684.237 1729.69,684.237 1730.25,684.237 1730.81,684.237 1731.37,684.237 1731.93,684.237 1732.49,684.237 1733.05,684.237 1733.61,684.237 1734.17,684.237 1734.73,684.237 1735.29,684.237 1735.85,684.237 1736.41,684.237 1736.97,684.237 1737.52,684.237 1738.08,684.237 1738.64,684.237 1739.2,684.237 1739.76,684.237 1740.32,684.237 1740.88,684.237 1741.44,684.237 1742,684.237 1742.56,684.237 1743.12,684.237 1743.68,684.237 1744.24,684.237 1744.79,684.237 1745.35,684.237 1745.91,684.237 1746.47,684.237 1747.03,684.237 1747.59,684.237 1748.15,684.237 1748.71,684.237 1749.27,684.237 1749.83,684.237 1750.39,684.237 1750.95,684.237 1751.51,684.237 1752.06,684.237 1752.62,684.237 1753.18,684.237 1753.74,684.237 1754.3,684.237 1754.86,684.237 1755.42,684.237 1755.98,684.237 1756.54,684.237 1757.1,684.237 1757.66,684.237 1758.22,684.237 1758.78,684.237 1759.34,684.237 1759.89,684.237 1760.45,684.237 1761.01,684.237 1761.57,684.237 1762.13,684.237 1762.69,684.237 1763.25,684.237 1763.81,684.237 1764.37,684.237 1764.93,684.237 1765.49,684.237 1766.05,684.237 1766.61,684.237 1767.16,684.237 1767.72,684.237 1768.28,684.237 1768.84,684.237 1769.4,684.237 1769.96,684.237 1770.52,684.237 1771.08,684.237 1771.64,684.237 1772.2,684.237 1772.76,684.237 1773.32,684.237 1773.88,684.237 1774.43,684.237 1774.99,684.237 1775.55,684.237 1776.11,684.237 1776.67,684.237 1777.23,684.237 1777.79,684.237 1778.35,684.237 1778.91,684.237 1779.47,684.237 1780.03,684.237 1780.59,684.237 1781.15,684.237 1781.71,684.237 1782.26,684.237 1782.82,684.237 1783.38,684.237 1783.94,684.237 1784.5,684.237 1785.06,684.237 1785.62,684.237 1786.18,684.237 1786.74,684.237 1787.3,684.237 1787.86,684.237 1788.42,684.237 1788.98,684.237 1789.53,684.237 1790.09,684.237 1790.65,684.237 1791.21,684.237 1791.77,684.237 1792.33,684.237 1792.89,684.237 1793.45,684.237 1794.01,684.237 1794.57,684.237 1795.13,684.237 1795.69,684.237 1796.25,684.237 1796.8,684.237 1797.36,684.237 1797.92,684.237 1798.48,684.237 1799.04,684.237 1799.6,684.237 1800.16,684.237 1800.72,684.237 1801.28,684.237 1801.84,684.237 1802.4,684.237 1802.96,684.237 1803.52,684.237 1804.08,684.237 1804.63,684.237 1805.19,684.237 1805.75,684.237 1806.31,684.237 1806.87,684.237 1807.43,684.237 1807.99,684.237 1808.55,684.237 1809.11,684.237 1809.67,684.237 1810.23,684.237 1810.79,684.237 1811.35,684.237 1811.9,684.237 1812.46,684.237 1813.02,684.237 1813.58,684.237 1814.14,684.237 1814.7,684.237 1815.26,684.237 1815.82,684.237 1816.38,684.237 1816.94,684.237 1817.5,684.237 1818.06,684.237 1818.62,684.237 1819.18,684.237 1819.73,684.237 1820.29,684.237 1820.85,684.237 1821.41,684.237 1821.97,684.237 1822.53,684.237 1823.09,684.237 1823.65,684.237 1824.21,684.237 1824.77,684.237 1825.33,684.237 1825.89,684.237 1826.45,684.237 1827,684.237 1827.56,684.237 1828.12,684.237 1828.68,684.237 1829.24,684.237 1829.8,684.237 1830.36,684.237 1830.92,684.237 1831.48,684.237 1832.04,684.237 1832.6,684.237 1833.16,684.237 1833.72,684.237 1834.27,684.237 1834.83,684.237 1835.39,684.237 1835.95,684.237 1836.51,684.237 1837.07,684.237 1837.63,684.237 1838.19,684.237 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.032906526725813 ± 0.027096722131802\nProjected Energy: -4.018368213330252 ± (0.005865560503148792, 0.005908248775906344)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.1097</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.4034e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.2632e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.5169e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.697e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">7.204e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.9276e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321619\n -3.363124291613376\n -0.7590191922770888\n  0.13584182219621965\n  0.1578999869460862\n  0.876711441178136\n  1.5305929970973118\n  1.583573261186749\n  3.0728703303258698\n  3.1256726539518382\n  4.862107221562174\n  6.260694850380594\n  6.402671211183113\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, wall_time = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the wall_time is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = @suppress lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = @suppress lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 0.8, 0.8, 0.2, 0.2)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
